{"input": "", "context": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Server.Commands;\nusing Server.Engines.PartySystem;\nusing Server.Factions;\nusing Server.Gumps;\nusing Server.Items;\nusing Server.Mobiles;\nusing Server.Network;\nusing Server.Spells;\nusing Server.Spells.Bushido;\nusing Server.Spells.Chivalry;\nusing Server.Spells.Necromancy;\nusing Server.Spells.Ninjitsu;\nusing Server.Spells.Seventh;\nusing Server.Spells.Spellweaving;\nnamespace Server.Engines.ConPVP\n{\n    public delegate void CountdownCallback( int count );\n\tpublic class DuelContext\n\t{\n\t\tprivate Mobile m_Initiator;\n\t\tprivate ArrayList m_Participants;\n\t\tprivate Ruleset m_Ruleset;\n\t\tprivate Arena m_Arena;\n\t\tprivate bool m_Registered = true;\n\t\tprivate bool m_Finished, m_Started;\n\t\tprivate bool m_ReadyWait;\n\t\tprivate int m_ReadyCount;\n\t\tprivate bool m_Rematch;\n\t\tpublic bool Rematch{ get{ return m_Rematch; } }\n\t\tpublic bool ReadyWait{ get{ return m_ReadyWait; } }\n\t\tpublic int ReadyCount{ get{ return m_ReadyCount; } }\n\t\tpublic bool Registered{ get{ return m_Registered; } }\n\t\tpublic bool Finished{ get{ return m_Finished; } }\n\t\tpublic bool Started{ get{ return m_Started; } }\n\t\tpublic Mobile Initiator{ get{ return m_Initiator; } }\n\t\tpublic ArrayList Participants{ get{ return m_Participants; } }\n\t\tpublic Ruleset Ruleset{ get{ return m_Ruleset; } }\n\t\tpublic Arena Arena{ get{ return m_Arena; } }\n\t\tprivate bool CantDoAnything( Mobile mob )\n\t\t{\n\t\t\tif ( m_EventGame != null )\n\t\t\t\treturn m_EventGame.CantDoAnything( mob );\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tpublic static bool IsFreeConsume( Mobile mob )\n\t\t{\n\t\t\tPlayerMobile pm = mob as PlayerMobile;\n\t\t\tif ( pm == null || pm.DuelContext == null || pm.DuelContext.m_EventGame == null )\n\t\t\t\treturn false;\n\t\t\treturn pm.DuelContext.m_EventGame.FreeConsume;\n\t\t}\n\t\tpublic void DelayBounce( TimeSpan ts, Mobile mob, Container corpse )\n\t\t{\n\t\t\tTimer.DelayCall( ts, new TimerStateCallback( DelayBounce_Callback ), new object[]{ mob, corpse } );\n\t\t}\n\t\tpublic static bool AllowSpecialMove( Mobile from, string name, SpecialMove move )\n\t\t{\n\t\t\tPlayerMobile pm = from as PlayerMobile;\n\t\t\tif( pm == null )\n\t\t\t\treturn true;\n\t\t\tDuelContext dc = pm.DuelContext;\n\t\t\treturn (dc == null || dc.InstAllowSpecialMove( from, name, move ));\n\t\t}\n\t\tpublic bool InstAllowSpecialMove( Mobile from, string name, SpecialMove move )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\treturn false;\n\t\t\tstring title = null;\n\t\t\tif( move is NinjaMove )\n\t\t\t\ttitle = \"Bushido\";\n\t\t\telse if( move is SamuraiMove )\n\t\t\t\ttitle = \"Ninjitsu\";\n\t\t\tif ( title == null || name == null || m_Ruleset.GetOption( title, name ) )\n\t\t\t\treturn true;\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from using this move.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic bool AllowSpellCast( Mobile from, Spell spell )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\treturn false;\n\t\t\tif ( spell is Server.Spells.Fourth.RecallSpell )\n\t\t\t\tfrom.SendMessage( \"You may not cast this spell.\" );\n\t\t\tstring title = null, option = null;\n\t\t\tif( spell is ArcanistSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Spellweaving\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if ( spell is PaladinSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Chivalry\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if ( spell is NecromancerSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Necromancy\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if ( spell is NinjaSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Ninjitsu\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if ( spell is SamuraiSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Bushido\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if( spell is MagerySpell )\n\t\t\t{\n\t\t\t\tswitch( ((MagerySpell)spell).Circle )\n\t\t\t\t{\n\t\t\t\t\tcase SpellCircle.First: title = \"1st Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Second: title = \"2nd Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Third: title = \"3rd Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Fourth: title = \"4th Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Fifth: title = \"5th Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Sixth: title = \"6th Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Seventh: title = \"7th Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Eighth: title = \"8th Circle\"; break;\n\t\t\t\t}\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttitle = \"Other Spell\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\tif ( title == null || option == null || m_Ruleset.GetOption( title, option ) )\n\t\t\t\treturn true;\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from casting this spell.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic bool AllowItemEquip( Mobile from, Item item )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( item is Dagger || CheckItemEquip( from, item ) )\n\t\t\t\treturn true;\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from equiping this item.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic static bool AllowSpecialAbility( Mobile from, string name, bool message )\n\t\t{\n\t\t\tPlayerMobile pm = from as PlayerMobile;\n\t\t\tif ( pm == null )\n\t\t\t\treturn true;\n\t\t\tDuelContext dc = pm.DuelContext;\n\t\t\treturn ( dc == null || dc.InstAllowSpecialAbility( from, name, message ) );\n\t\t}\n\t\tpublic bool InstAllowSpecialAbility( Mobile from, string name, bool message )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\treturn false;\n\t\t\tif ( m_Ruleset.GetOption( \"Combat Abilities\", name ) )\n\t\t\t\treturn true;\n\t\t\tif ( message )\n\t\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from using this combat ability.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic bool CheckItemEquip( Mobile from, Item item )\n\t\t{\n\t\t\tif ( item is Fists )\n\t\t\t{\n\t\t\t\tif ( !m_Ruleset.GetOption( \"Weapons\", \"Wrestling\" ) )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ( item is BaseArmor )\n\t\t\t{\n\t\t\t\tBaseArmor armor = (BaseArmor)item;\n\t\t\t\tif ( armor.ProtectionLevel > ArmorProtectionLevel.Regular && !m_Ruleset.GetOption( \"Armor\", \"Magical\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( !Core.AOS && armor.Resource != armor.DefaultResource && !m_Ruleset.GetOption( \"Armor\", \"Colored\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( armor is BaseShield && !m_Ruleset.GetOption( \"Armor\", \"Shields\" ) )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ( item is BaseWeapon )\n\t\t\t{\n\t\t\t\tBaseWeapon weapon = (BaseWeapon)item;\n\t\t\t\tif ( (weapon.DamageLevel > WeaponDamageLevel.Regular || weapon.AccuracyLevel > WeaponAccuracyLevel.Regular) && !m_Ruleset.GetOption( \"Weapons\", \"Magical\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( !Core.AOS && weapon.Resource != CraftResource.Iron && weapon.Resource != CraftResource.None && !m_Ruleset.GetOption( \"Weapons\", \"Runics\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( weapon is BaseRanged && !m_Ruleset.GetOption( \"Weapons\", \"Ranged\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( !(weapon is BaseRanged) && !m_Ruleset.GetOption( \"Weapons\", \"Melee\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( weapon.PoisonCharges > 0 && weapon.Poison != null && !m_Ruleset.GetOption( \"Weapons\", \"Poisoned\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( weapon is BaseWand && !m_Ruleset.GetOption( \"Items\", \"Wands\" ) )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic bool AllowSkillUse( Mobile from, SkillName skill )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\treturn false;\n\t\t\tint id = (int)skill;\n\t\t\tif ( id >= 0 && id < SkillInfo.Table.Length )\n\t\t\t{\n\t\t\t\tif ( m_Ruleset.GetOption( \"Skills\", SkillInfo.Table[id].Name ) )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from using this skill.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic bool AllowItemUse( Mobile from, Item item )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( !(item is BaseRefreshPotion) )\n\t\t\t{\n\t\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstring title = null, option = null;\n\t\t\tif ( item is BasePotion )\n\t\t\t{\n\t\t\t\ttitle = \"Potions\";\n\t\t\t\tif ( item is BaseAgilityPotion )\n\t\t\t\t\toption = \"Agility\";\n\t\t\t\telse if ( item is BaseCurePotion )\n\t\t\t\t\toption = \"Cure\";\n\t\t\t\telse if ( item is BaseHealPotion )\n\t\t\t\t\toption = \"Heal\";\n\t\t\t\telse if ( item is NightSightPotion )\n\t\t\t\t\toption = \"Nightsight\";\n\t\t\t\telse if ( item is BasePoisonPotion )\n\t\t\t\t\toption = \"Poison\";\n\t\t\t\telse if ( item is BaseStrengthPotion )\n\t\t\t\t\toption = \"Strength\";\n\t\t\t\telse if ( item is BaseExplosionPotion )\n\t\t\t\t\toption = \"Explosion\";\n\t\t\t\telse if ( item is BaseRefreshPotion )\n\t\t\t\t\toption = \"Refresh\";\n\t\t\t}\n\t\t\telse if ( item is Bandage )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Bandages\";\n\t\t\t}\n\t\t\telse if ( item is TrapableContainer )\n\t\t\t{\n\t\t\t\tif ( ((TrapableContainer)item).TrapType != TrapType.None )\n\t\t\t\t{\n\t\t\t\t\ttitle = \"Items\";\n\t\t\t\t\toption = \"Trapped Containers\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( item is Bola )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Bolas\";\n\t\t\t}\n\t\t\telse if ( item is OrangePetals )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Orange Petals\";\n\t\t\t}\n\t\t\telse if ( item is EtherealMount || item.Layer == Layer.Mount )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Mounts\";\n\t\t\t}\n\t\t\telse if ( item is LeatherNinjaBelt )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Shurikens\";\n\t\t\t}\n\t\t\telse if ( item is Fukiya )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Fukiya Darts\";\n\t\t\t}\n\t\t\telse if ( item is FireHorn )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Fire Horns\";\n\t\t\t}\n\t\t\telse if ( item is BaseWand )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Wands\";\n\t\t\t}\n\t\t\tif ( title != null && option != null && m_StartedBeginCountdown && !m_Started )\n\t\t\t{\n\t\t\t\tfrom.SendMessage( \"You may not use this item before the duel begins.\" );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ( item is BasePotion && !(item is BaseExplosionPotion) && !(item is BaseRefreshPotion) && IsSuddenDeath )\n\t\t\t{\n\t\t\t\tfrom.SendMessage( 0x22, \"You may not drink potions in sudden death.\" );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ( item is Bandage && IsSuddenDeath )\n\t\t\t{\n\t\t\t\tfrom.SendMessage( 0x22, \"You may not use bandages in sudden death.\" );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ( title == null || option == null || m_Ruleset.GetOption( title, option ) )\n\t\t\t\treturn true;\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from using this item.\" );\n\t\t\treturn false;\n\t\t}\n\t\tprivate void DelayBounce_Callback( object state )\n\t\t{\n\t\t\tobject[] states = (object[])state;\n\t\t\tMobile mob = (Mobile) states[0];\n\t\t\tContainer corpse = (Container) states[1];\n\t\t\tRemoveAggressions( mob );\n\t\t\tSendOutside( mob );\n\t\t\tRefresh( mob, corpse );\n\t\t\tDebuff( mob );\n\t\t\tCancelSpell( mob );\n\t\t\tmob.Frozen = false;\n\t\t}\n\t\tpublic void OnMapChanged( Mobile mob )\n\t\t{\n\t\t\tOnLocationChanged( mob );\n\t\t}\n\t\tpublic void OnLocationChanged( Mobile mob )\n\t\t{\n\t\t\tif ( !m_Registered || !m_StartedBeginCountdown || m_Finished )\n\t\t\t\treturn;\n\t\t\tArena arena = m_Arena;\n\t\t\tif ( arena == null )\n\t\t\t\treturn;\n\t\t\tif ( mob.Map == arena.Facet && arena.Bounds.Contains( mob.Location ) )\n\t\t\t\treturn;\n\t\t\tDuelPlayer pl = Find( mob );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn;\n\t\t\tif ( mob.Map == Map.Internal ) {\n\t\t\t\t// they've logged out\n\t\t\t\tif ( mob.LogoutMap == arena.Facet && arena.Bounds.Contains( mob.LogoutLocation ) ) {\n\t\t\t\t\t// they logged out inside the arena.. set them to eject on login\n\t\t\t\t\tmob.LogoutLocation = arena.Outside;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpl.Eliminated = true;\n\t\t\tmob.LocalOverheadMessage( MessageType.Regular, 0x22, false, \"You have forfeited your position in the duel.\" );\n\t\t\tmob.NonlocalOverheadMessage( MessageType.Regular, 0x22, false, String.Format( \"{0} has forfeited by leaving the dueling arena.\", mob.Name ) );\n\t\t\tParticipant winner = CheckCompletion();\n\t\t\tif ( winner != null )\n\t\t\t\tFinish( winner );\n\t\t}\n\t\tprivate bool m_Yielding;\n\t\tpublic void OnDeath( Mobile mob, Container corpse )\n\t\t{\n\t\t\tif ( !m_Registered || !m_Started )\n\t\t\t\treturn;\n\t\t\tDuelPlayer pl = Find( mob );\n\t\t\tif ( pl != null && !pl.Eliminated )\n\t\t\t{\n\t\t\t\tif ( m_EventGame != null && !m_EventGame.OnDeath( mob, corpse ) )\n\t\t\t\t\treturn;\n\t\t\t\tpl.Eliminated = true;\n\t\t\t\tif ( mob.Poison != null )\n\t\t\t\t\tmob.Poison = null;\n\t\t\t\tRequip( mob, corpse );\n\t\t\t\tDelayBounce( TimeSpan.FromSeconds( 4.0 ), mob, corpse );\n\t\t\t\tParticipant winner = CheckCompletion();\n\t\t\t\tif ( winner != null )\n\t\t\t\t{\n\t\t\t\t\tFinish( winner );\n\t\t\t\t}\n\t\t\t\telse if ( !m_Yielding )\n\t\t\t\t{\n\t\t\t\t\tmob.LocalOverheadMessage( MessageType.Regular, 0x22, false, \"You have been defeated.\" );\n\t\t\t\t\tmob.NonlocalOverheadMessage( MessageType.Regular, 0x22, false, String.Format( \"{0} has been defeated.\", mob.Name ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic bool CheckFull()\n\t\t{\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tif ( p.HasOpenSlot )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic void Requip( Mobile from, Container cont )\n\t\t{\n\t\t\tCorpse corpse = cont as Corpse;\n\t\t\tif ( corpse == null )\n\t\t\t\treturn;\n\t\t\tList<Item> items = new List<Item>( corpse.Items );\n\t\t\tbool gathered = false;\n\t\t\tbool didntFit = false;\n\t\t\tContainer pack = from.Backpack;\n\t\t\tfor ( int i = 0; !didntFit && i < items.Count; ++i )\n\t\t\t{\n\t\t\t\tItem item = items[i];\n\t\t\t\tPoint3D loc = item.Location;\n\t\t\t\tif ( (item.Layer == Layer.Hair || item.Layer == Layer.FacialHair) || !item.Movable )\n\t\t\t\t\tcontinue;\n\t\t\t\tif ( pack != null )\n\t\t\t\t{\n\t\t\t\t\tpack.DropItem( item );\n\t\t\t\t\tgathered = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdidntFit = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcorpse.Carved = true;\n\t\t\tif ( corpse.ItemID == 0x2006 )\n\t\t\t{\n\t\t\t\tcorpse.ProcessDelta();\n\t\t\t\tcorpse.SendRemovePacket();\n\t\t\t\tcorpse.ItemID = Utility.Random( 0xECA, 9 ); // bone graphic\n\t\t\t\tcorpse.Hue = 0;\n\t\t\t\tcorpse.ProcessDelta();\n\t\t\t\tMobile killer = from.FindMostRecentDamager( false );\n\t\t\t\tif ( killer != null && killer.Player )\n\t\t\t\t\tkiller.AddToBackpack( new Head( m_Tournament == null ? HeadType.Duel : HeadType.Tournament, from.Name ) );\n\t\t\t}\n\t\t\tfrom.PlaySound( 0x3E3 );\n\t\t\tif ( gathered && !didntFit )\n\t\t\t\tfrom.SendLocalizedMessage( 1062471 ); // You quickly gather all of your belongings.\n\t\t\telse if ( gathered && didntFit )\n\t\t\t\tfrom.SendLocalizedMessage( 1062472 ); // You gather some of your belongings. The rest remain on the corpse.\n\t\t}\n\t\tpublic void Refresh( Mobile mob, Container cont )\n\t\t{\n\t\t\tif ( !mob.Alive )\n\t\t\t{\n\t\t\t\tmob.Resurrect();\n\t\t\t\tDeathRobe robe = mob.FindItemOnLayer( Layer.OuterTorso ) as DeathRobe;\n\t\t\t\tif ( robe != null )\n\t\t\t\t\trobe.Delete();\n\t\t\t\tif ( cont is Corpse )\n\t\t\t\t{\n\t\t\t\t\tCorpse corpse = (Corpse) cont;\n\t\t\t\t\tfor ( int i = 0; i < corpse.EquipItems.Count; ++i )\n\t\t\t\t\t{\n\t\t\t\t\t\tItem item = corpse.EquipItems[i];\n\t\t\t\t\t\tif ( item.Movable && item.Layer != Layer.Hair && item.Layer != Layer.FacialHair && item.IsChildOf( mob.Backpack ) )\n\t\t\t\t\t\t\tmob.EquipItem( item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmob.Hits = mob.HitsMax;\n\t\t\tmob.Stam = mob.StamMax;\n\t\t\tmob.Mana = mob.ManaMax;\n\t\t\tmob.Poison = null;\n\t\t}\n\t\tpublic void SendOutside( Mobile mob )\n\t\t{\n\t\t\tif ( m_Arena == null )\n\t\t\t\treturn;\n\t\t\tmob.Combatant = null;\n\t\t\tmob.MoveToWorld( m_Arena.Outside, m_Arena.Facet );\n\t\t}\n\t\tprivate Point3D m_GatePoint;\n\t\tprivate Map m_GateFacet;\n\t\tpublic void Finish( Participant winner )\n\t\t{\n\t\t\tif ( m_Finished )\n\t\t\t\treturn;\n\t\t\tEndAutoTie();\n\t\t\tStopSDTimers();\n\t\t\tm_Finished = true;\n\t\t\tfor ( int i = 0; i < winner.Players.Length; ++i )\n\t\t\t{\n\t\t\t\tDuelPlayer pl = winner.Players[i];\n\t\t\t\tif ( pl != null && !pl.Eliminated )\n\t\t\t\t\tDelayBounce( TimeSpan.FromSeconds( 8.0 ), pl.Mobile, null );\n\t\t\t}\n\t\t\twinner.Broadcast( 0x59, null, winner.Players.Length == 1 ? \"{0} has won the duel.\" : \"{0} and {1} team have won the duel.\", winner.Players.Length == 1 ? \"You have won the duel.\" : \"Your team has won the duel.\" );\n\t\t\tif ( m_Tournament != null && winner.TournyPart != null )\n\t\t\t{\n\t\t\t\tm_Match.Winner = winner.TournyPart;\n\t\t\t\twinner.TournyPart.WonMatch( m_Match );\n\t\t\t\tm_Tournament.HandleWon( m_Arena, m_Match, winner.TournyPart );\n\t\t\t}\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant loser = (Participant)m_Participants[i];\n\t\t\t\tif ( loser != winner )\n\t\t\t\t{\n\t\t\t\t\tloser.Broadcast( 0x22, null, loser.Players.Length == 1 ? \"{0} has lost the duel.\" : \"{0} and {1} team have lost the duel.\", loser.Players.Length == 1 ? \"You have lost the duel.\" : \"Your team has lost the duel.\" );\n\t\t\t\t\tif ( m_Tournament != null && loser.TournyPart != null )\n\t\t\t\t\t\tloser.TournyPart.LostMatch( m_Match );\n\t\t\t\t}\n\t\t\t\tfor ( int j = 0; j < loser.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tif ( loser.Players[j] != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tRemoveAggressions( loser.Players[j].Mobile );\n\t\t\t\t\t\tloser.Players[j].Mobile.Delta( MobileDelta.Noto );\n\t\t\t\t\t\tloser.Players[j].Mobile.CloseGump( typeof( BeginGump ) );\n\t\t\t\t\t\tif ( m_Tournament != null )\n\t\t\t\t\t\t\tloser.Players[j].Mobile.SendEverything();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( IsOneVsOne )\n\t\t\t{\n\t\t\t\tDuelPlayer dp1 = ((Participant)m_Participants[0]).Players[0];\n\t\t\t\tDuelPlayer dp2 = ((Participant)m_Participants[1]).Players[0];\n\t\t\t\tif ( dp1 != null && dp2 != null )\n\t\t\t\t{\n\t\t\t\t\tAward( dp1.Mobile, dp2.Mobile, dp1.Participant == winner );\n\t\t\t\t\tAward( dp2.Mobile, dp1.Mobile, dp2.Participant == winner );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( m_EventGame != null )\n\t\t\t\tm_EventGame.OnStop();\n\t\t\tTimer.DelayCall( TimeSpan.FromSeconds( 9.0 ), new TimerCallback( UnregisterRematch ) );\n\t\t}\n\t\tpublic void Award( Mobile us, Mobile them, bool won )\n\t\t{\n\t\t\tLadder ladder = ( m_Arena == null ? Ladder.Instance : m_Arena.AcquireLadder() );\n\t\t\tif ( ladder == null )\n\t\t\t\treturn;\n\t\t\tLadderEntry ourEntry = ladder.Find( us );\n\t\t\tLadderEntry theirEntry = ladder.Find( them );\n\t\t\tif ( ourEntry == null || theirEntry == null )\n\t\t\t\treturn;\n\t\t\tint xpGain = Ladder.GetExperienceGain( ourEntry, theirEntry, won );\n\t\t\tif ( xpGain == 0 )\n\t\t\t\treturn;\n\t\t\tif ( m_Tournament != null )\n\t\t\t\txpGain *= ( xpGain > 0 ? 5 : 2 );\n\t\t\tif ( won )\n\t\t\t\t++ourEntry.Wins;\n\t\t\telse\n\t\t\t\t++ourEntry.Losses;\n\t\t\tint oldLevel = Ladder.GetLevel( ourEntry.Experience );\n\t\t\tourEntry.Experience += xpGain;\n\t\t\tif ( ourEntry.Experience < 0 )\n\t\t\t\tourEntry.Experience = 0;\n\t\t\tladder.UpdateEntry( ourEntry );\n\t\t\tint newLevel = Ladder.GetLevel( ourEntry.Experience );\n\t\t\tif ( newLevel > oldLevel )\n\t\t\t\tus.SendMessage( 0x59, \"You have achieved level {0}!\", newLevel );\n\t\t\telse if ( newLevel < oldLevel )\n\t\t\t\tus.SendMessage( 0x22, \"You have lost a level. You are now at {0}.\", newLevel );\n\t\t}\n\t\tpublic void UnregisterRematch()\n\t\t{\n\t\t\tUnregister(true);\n\t\t}\n\t\tpublic void Unregister()\n\t\t{\n\t\t\tUnregister(false);\n\t\t}\n\t\tpublic void Unregister( bool queryRematch )\n\t\t{\n\t\t\tDestroyWall();\n\t\t\tif ( !m_Registered )\n\t\t\t\treturn;\n\t\t\tm_Registered = false;\n\t\t\tif ( m_Arena != null )\n\t\t\t\tm_Arena.Evict();\n\t\t\tStopSDTimers();\n\t\t\tType[] types = new Type[]{ typeof( BeginGump ), typeof( DuelContextGump ), typeof( ParticipantGump ), typeof( PickRulesetGump ), typeof( ReadyGump ), typeof( ReadyUpGump ), typeof( RulesetGump ) };\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = (DuelPlayer)p.Players[j];\n\t\t\t\t\tif ( pl == null )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif ( pl.Mobile is PlayerMobile )\n\t\t\t\t\t\t((PlayerMobile)pl.Mobile).DuelPlayer = null;\n\t\t\t\t\tfor ( int k = 0; k < types.Length; ++k )\n\t\t\t\t\t\tpl.Mobile.CloseGump( types[k] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( queryRematch && m_Tournament == null )\n\t\t\t\tQueryRematch();\n\t\t}\n\t\tpublic void QueryRematch()\n\t\t{\n\t\t\tDuelContext dc = new DuelContext( m_Initiator, m_Ruleset.Layout, false );\n\t\t\tdc.m_Ruleset = m_Ruleset;\n\t\t\tdc.m_Rematch = true;\n\t\t\tdc.m_Participants.Clear();\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant oldPart = (Participant)m_Participants[i];\n\t\t\t\tParticipant newPart = new Participant( dc, oldPart.Players.Length );\n\t\t\t\tfor ( int j = 0; j < oldPart.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer oldPlayer = oldPart.Players[j];\n\t\t\t\t\tif ( oldPlayer != null )\n\t\t\t\t\t\tnewPart.Players[j] = new DuelPlayer( oldPlayer.Mobile, newPart );\n\t\t\t\t}\n\t\t\t\tdc.m_Participants.Add( newPart );\n\t\t\t}\n\t\t\tdc.CloseAllGumps();\n\t\t\tdc.SendReadyUpGump();\n\t\t}\n\t\tpublic DuelPlayer Find( Mobile mob )\n\t\t{\n\t\t\tif ( mob is PlayerMobile )\n\t\t\t{\n\t\t\t\tPlayerMobile pm = (PlayerMobile)mob;\n\t\t\t\tif ( pm.DuelContext == this )\n\t\t\t\t\treturn pm.DuelPlayer;\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tDuelPlayer pl = p.Find( mob );\n\t\t\t\tif ( pl != null )\n\t\t\t\t\treturn pl;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tpublic bool IsAlly( Mobile m1, Mobile m2 )\n\t\t{\n\t\t\tDuelPlayer pl1 = Find( m1 );\n\t\t\tDuelPlayer pl2 = Find( m2 );\n\t\t\treturn ( pl1 != null && pl2 != null && pl1.Participant == pl2.Participant );\n\t\t}\n\t\tpublic Participant CheckCompletion()\n\t\t{\n\t\t\tParticipant winner = null;\n\t\t\tbool hasWinner = false;\n\t\t\tint eliminated = 0;\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tif ( p.Eliminated )\n\t\t\t\t{\n\t\t\t\t\t++eliminated;\n\t\t\t\t\tif ( eliminated == (m_Participants.Count - 1) )\n\t\t\t\t\t\thasWinner = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\twinner = p;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasWinner )\n\t\t\t\treturn winner == null ? (Participant) m_Participants[0] : winner;\n\t\t\treturn null;\n\t\t}\n\t\tprivate Timer m_Countdown;\n\t\tpublic void StartCountdown( int count, CountdownCallback cb )\n\t\t{\n\t\t\tcb(count);\n\t\t\tm_Countdown=Timer.DelayCall( TimeSpan.FromSeconds( 1.0 ), TimeSpan.FromSeconds( 1.0 ), count, new TimerStateCallback( Countdown_Callback ), new object[]{ count-1, cb } );\n\t\t}\n\t\tpublic void StopCountdown()\n\t\t{\n\t\t\tif ( m_Countdown != null )\n\t\t\t\tm_Countdown.Stop();\n\t\t\tm_Countdown = null;\n\t\t}\n\t\tprivate void Countdown_Callback( object state )\n\t\t{\n\t\t\tobject[] states = (object[])state;\n\t\t\tint count = (int)states[0];\n\t\t\tCountdownCallback cb = (CountdownCallback)states[1];\n\t\t\tif ( count==0 )\n\t\t\t{\n\t\t\t\tif ( m_Countdown != null )\n\t\t\t\t\tm_Countdown.Stop();\n\t\t\t\tm_Countdown=null;\n\t\t\t}\n\t\t\tcb( count );\n\t\t\tstates[0] = count - 1;\n\t\t}\n\t\tprivate Timer m_AutoTieTimer;\n\t\tprivate bool m_Tied;\n\t\tpublic bool Tied{ get{ return m_Tied; } }\n\t\tprivate bool m_IsSuddenDeath;\n\t\tpublic bool IsSuddenDeath{ get{ return m_IsSuddenDeath; } set{ m_IsSuddenDeath = value; } }\n\t\tprivate Timer m_SDWarnTimer, m_SDActivateTimer;\n\t\tpublic void StopSDTimers()\n\t\t{\n\t\t\tif ( m_SDWarnTimer != null )\n\t\t\t\tm_SDWarnTimer.Stop();\n\t\t\tm_SDWarnTimer = null;\n\t\t\tif ( m_SDActivateTimer != null )\n\t\t\t\tm_SDActivateTimer.Stop();\n\t\t\tm_SDActivateTimer = null;\n\t\t}\n\t\tpublic void StartSuddenDeath( TimeSpan timeUntilActive )\n\t\t{\n\t\t\tif ( m_SDWarnTimer != null )\n\t\t\t\tm_SDWarnTimer.Stop();\n\t\t\tm_SDWarnTimer = Timer.DelayCall( TimeSpan.FromMinutes( timeUntilActive.TotalMinutes * 0.9 ), new TimerCallback( WarnSuddenDeath ) );\n\t\t\tif ( m_SDActivateTimer != null )\n\t\t\t\tm_SDActivateTimer.Stop();\n\t\t\tm_SDActivateTimer = Timer.DelayCall( timeUntilActive, new TimerCallback( ActivateSuddenDeath ) );\n\t\t}\n\t\tpublic void WarnSuddenDeath()\n\t\t{\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tpl.Mobile.SendSound( 0x1E1 );\n\t\t\t\t\tpl.Mobile.SendMessage( 0x22, \"Warning! Warning! Warning!\" );\n\t\t\t\t\tpl.Mobile.SendMessage( 0x22, \"Sudden death will be active soon!\" );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( m_Tournament != null )\n\t\t\t\tm_Tournament.Alert( m_Arena, \"Sudden death will be active soon!\" );\n\t\t\tif ( m_SDWarnTimer != null )\n\t\t\t\tm_SDWarnTimer.Stop();\n\t\t\tm_SDWarnTimer = null;\n\t\t}\n\t\tpublic static bool CheckSuddenDeath( Mobile mob )\n\t\t{\n\t\t\tif ( mob is PlayerMobile )\n\t\t\t{\n\t\t\t\tPlayerMobile pm = (PlayerMobile)mob;\n\t\t\t\tif ( pm.DuelPlayer != null && !pm.DuelPlayer.Eliminated && pm.DuelContext != null && pm.DuelContext.IsSuddenDeath )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tpublic void ActivateSuddenDeath()\n\t\t{\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tpl.Mobile.SendSound( 0x1E1 );\n\t\t\t\t\tpl.Mobile.SendMessage( 0x22, \"Warning! Warning! Warning!\" );\n\t\t\t\t\tpl.Mobile.SendMessage( 0x22, \"Sudden death has ACTIVATED. You are now unable to perform any beneficial actions.\" );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( m_Tournament != null )\n\t\t\t\tm_Tournament.Alert( m_Arena, \"Sudden death has been activated!\" );\n\t\t\tm_IsSuddenDeath = true;\n\t\t\tif ( m_SDActivateTimer != null )\n\t\t\t\tm_SDActivateTimer.Stop();\n\t\t\tm_SDActivateTimer = null;\n\t\t}\n\t\tpublic void BeginAutoTie()\n\t\t{\n\t\t\tif ( m_AutoTieTimer != null )\n\t\t\t\tm_AutoTieTimer.Stop();\n\t\t\tTimeSpan ts = ( m_Tournament == null || m_Tournament.TournyType == TournyType.Standard )\n\t\t\t\t? AutoTieDelay\n\t\t\t\t: TimeSpan.FromMinutes( 90.0 );\n\t\t\tm_AutoTieTimer = Timer.DelayCall( ts, new TimerCallback( InvokeAutoTie ) );\n\t\t}\n\t\tpublic void EndAutoTie()\n\t\t{\n\t\t\tif ( m_AutoTieTimer != null )\n\t\t\t\tm_AutoTieTimer.Stop();\n\t\t\tm_AutoTieTimer = null;\n\t\t}\n\t\tpublic void InvokeAutoTie()\n\t\t{\n\t\t\tm_AutoTieTimer = null;\n\t\t\tif ( !m_Started || m_Finished )\n\t\t\t\treturn;\n\t\t\tm_Tied = true;\n\t\t\tm_Finished = true;\n\t\t\tStopSDTimers();\n\t\t\tArrayList remaining = new ArrayList();\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tif ( p.Eliminated )\n\t\t\t\t{\n\t\t\t\t\tp.Broadcast( 0x22, null, p.Players.Length == 1 ? \"{0} has lost the duel.\" : \"{0} and {1} team have lost the duel.\", p.Players.Length == 1 ? \"You have lost the duel.\" : \"Your team has lost the duel.\" );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tp.Broadcast( 0x59, null, p.Players.Length == 1 ? \"{0} has tied the duel due to time expiration.\" : \"{0} and {1} team have tied the duel due to time expiration.\", p.Players.Length == 1 ? \"You have tied the duel due to time expiration.\" : \"Your team has tied the duel due to time expiration.\" );\n\t\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t\t{\n\t\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\t\tif ( pl != null && !pl.Eliminated )\n\t\t\t\t\t\t\tDelayBounce( TimeSpan.FromSeconds( 8.0 ), pl.Mobile, null );\n\t\t\t\t\t}\n\t\t\t\t\tif ( p.TournyPart != null )\n\t\t\t\t\t\tremaining.Add( p.TournyPart );\n\t\t\t\t}\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tpl.Mobile.Delta( MobileDelta.Noto );\n\t\t\t\t\t\tpl.Mobile.SendEverything();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( m_Tournament != null )\n\t\t\t\tm_Tournament.HandleTie( m_Arena, m_Match, remaining );\n\t\t\tTimer.DelayCall( TimeSpan.FromSeconds( 10.0 ), new TimerCallback( Unregister ) );\n\t\t}\n\t\tpublic bool IsOneVsOne\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif ( m_Participants.Count != 2 )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( ((Participant)m_Participants[0]).Players.Length != 1 )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( ((Participant)m_Participants[1]).Players.Length != 1 )\n\t\t\t\t\treturn false;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tpublic static void Initialize()\n\t\t{\n\t\t\tEventSink.Speech += new SpeechEventHandler( EventSink_Speech );\n\t\t\tEventSink.Login += new LoginEventHandler( EventSink_Login );\n\t\t\tCommandSystem.Register( \"vli\", AccessLevel.GameMaster, new CommandEventHandler( vli_oc ) );\n\t\t}\n\t\tprivate static void vli_oc( CommandEventArgs e )\n\t\t{\n\t\t\te.Mobile.BeginTarget( -1, false, Targeting.TargetFlags.None, new TargetCallback( vli_ot ) );\n\t\t}\n\t\tprivate static void vli_ot( Mobile from, object obj )\n\t\t{\n\t\t\tif ( obj is PlayerMobile )\n\t\t\t{\n\t\t\t\tPlayerMobile pm = (PlayerMobile)obj;\n\t\t\t\tLadder ladder = Ladder.Instance;\n\t\t\t\tif ( ladder == null )\n\t\t\t\t\treturn;\n\t\t\t\tLadderEntry entry = ladder.Find( pm );\n\t\t\t\tif ( entry != null )\n\t\t\t\t\tfrom.SendGump( new PropertiesGump( from, entry ) );\n\t\t\t}\n\t\t}\n\t\tprivate static TimeSpan CombatDelay = TimeSpan.FromSeconds( 30.0 );\n\t\tprivate static TimeSpan AutoTieDelay = TimeSpan.FromMinutes( 15.0 );\n\t\tpublic static bool CheckCombat( Mobile m )\n\t\t{\n\t\t\tfor ( int i = 0; i < m.Aggressed.Count; ++i )\n\t\t\t{\n\t\t\t\tAggressorInfo info = m.Aggressed[i];\n\t\t\t\tif ( info.Defender.Player && (DateTime.UtcNow - info.LastCombatTime) < CombatDelay )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\tfor ( int i = 0; i < m.Aggressors.Count; ++i )\n\t\t\t{\n\t\t\t\tAggressorInfo info = m.Aggressors[i];\n\t\t\t\tif ( info.Attacker.Player && (DateTime.UtcNow - info.LastCombatTime) < CombatDelay )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tprivate static void EventSink_Login( LoginEventArgs e )\n\t\t{\n\t\t\tPlayerMobile pm = e.Mobile as PlayerMobile;\n\t\t\tif ( pm == null )\n\t\t\t\treturn;\n\t\t\tDuelContext dc = pm.DuelContext;\n\t\t\tif ( dc == null )\n\t\t\t\treturn;\n\t\t\tif ( dc.ReadyWait && pm.DuelPlayer.Ready && !dc.Started && !dc.StartedBeginCountdown && !dc.Finished )\n\t\t\t{\n\t\t\t\tif ( dc.m_Tournament == null )\n\t\t\t\t\tpm.SendGump( new ReadyGump( pm, dc, dc.m_ReadyCount ) );\n\t\t\t}\n\t\t\telse if ( dc.ReadyWait && !dc.StartedBeginCountdown && !dc.Started && !dc.Finished )\n\t\t\t{\n\t\t\t\tif ( dc.m_Tournament == null )\n\t\t\t\t\tpm.SendGump( new ReadyUpGump( pm, dc ) );\n\t\t\t}\n\t\t\telse if ( dc.Initiator == pm && !dc.ReadyWait && !dc.StartedBeginCountdown && !dc.Started && !dc.Finished )\n\t\t\t\tpm.SendGump( new DuelContextGump( pm, dc ) );\n\t\t}\n\t\tprivate static void ViewLadder_OnTarget( Mobile from, object obj, object state )\n\t\t{\n\t\t\tif ( obj is PlayerMobile )\n\t\t\t{\n\t\t\t\tPlayerMobile pm = (PlayerMobile)obj;\n\t\t\t\tLadder ladder = (Ladder)state;\n\t\t\t\tLadderEntry entry = ladder.Find( pm );\n\t\t\t\tif ( entry == null )\n\t\t\t\t\treturn; // sanity\n\t\t\t\tstring text = String.Format( \"{{0}} are ranked {0} at level {1}.\", LadderGump.Rank( entry.Index + 1 ), Ladder.GetLevel( entry.Experience ) );\n\t\t\t\tpm.PrivateOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( text, from==pm?\"You\":\"They\" ), from.NetState );\n\t\t\t}\n\t\t\telse if ( obj is Mobile )\n\t\t\t{\n\t\t\t\tMobile mob = (Mobile)obj;\n\t\t\t\tif ( mob.Body.IsHuman )\n\t\t\t\t\tmob.PrivateOverheadMessage( MessageType.Regular, mob.SpeechHue, false, \"I'm not a duelist, and quite frankly, I resent the implication.\", from.NetState );\n\t\t\t\telse\n\t\t\t\t\tmob.PrivateOverheadMessage( MessageType.Regular, 0x3B2, true, \"It's probably better than you.\", from.NetState );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfrom.SendMessage( \"That's not a player.\" );\n\t\t\t}\n\t\t}\n\t\tprivate static void EventSink_Speech( SpeechEventArgs e )\n\t\t{\n\t\t\tif ( e.Handled )\n\t\t\t\treturn;\n\t\t\tPlayerMobile pm = e.Mobile as PlayerMobile;\n\t\t\tif ( pm == null )\n\t\t\t\treturn;\n\t\t\tif ( Insensitive.Contains( e.Speech, \"i wish to duel\" ) )\n\t\t\t{\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse if ( pm.Region.IsPartOf( typeof( Regions.Jail ) ) )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse if ( CheckCombat( pm ) )\n\t\t\t\t{\n\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You have recently been in combat with another player and must wait before starting a duel.\" );\n\t\t\t\t}\n\t\t\t\telse if ( pm.DuelContext != null )\n\t\t\t\t{\n\t\t\t\t\tif ( pm.DuelContext.Initiator == pm )\n\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You have already started a duel.\" );\n\t\t\t\t\telse\n\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You have already been challenged in a duel.\" );\n\t\t\t\t}\n\t\t\t\telse if ( TournamentController.IsActive )\n\t\t\t\t{\n\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You may not start a duel while a tournament is active.\" );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpm.SendGump( new DuelContextGump( pm, new DuelContext( pm, RulesetLayout.Root ) ) );\n\t\t\t\t\te.Handled = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( Insensitive.Equals( e.Speech, \"change arena preferences\" ) )\n\t\t\t{\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tPreferences prefs = Preferences.Instance;\n\t\t\t\t\tif ( prefs != null )\n\t\t\t\t\t{\n\t\t\t\t\t\te.Mobile.CloseGump( typeof( PreferencesGump ) );\n\t\t\t\t\t\te.Mobile.SendGump( new PreferencesGump( e.Mobile, prefs ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( Insensitive.Equals( e.Speech, \"showladder\" ) )\n\t\t\t{\n\t\t\t\te.Blocked=true;\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tLadder instance = Ladder.Instance;\n\t\t\t\t\tif ( instance == null )\n\t\t\t\t\t{\n\t\t\t\t\t\t//pm.SendMessage( \"Ladder not yet initialized.\" );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tLadderEntry entry = instance.Find( pm );\n\t\t\t\t\t\tif ( entry == null )\n\t\t\t\t\t\t\treturn; // sanity\n\t\t\t\t\t\tstring text = String.Format( \"{{0}} {{1}} ranked {0} at level {1}.\", LadderGump.Rank( entry.Index + 1 ), Ladder.GetLevel( entry.Experience ) );\n\t\t\t\t\t\tpm.LocalOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( text, \"You\", \"are\" ) );\n\t\t\t\t\t\tpm.NonlocalOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( text, pm.Name, \"is\" ) );\n\t\t\t\t\t\t//pm.PublicOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( \"Level {0} with {1} win{2} and {3} loss{4}.\", Ladder.GetLevel( entry.Experience ), entry.Wins, entry.Wins==1?\"\":\"s\", entry.Losses, entry.Losses==1?\"\":\"es\" ) );\n\t\t\t\t\t\t//pm.PublicOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( \"Level {0} with {1} win{2} and {3} loss{4}.\", Ladder.GetLevel( entry.Experience ), entry.Wins, entry.Wins==1?\"\":\"s\", entry.Losses, entry.Losses==1?\"\":\"es\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( Insensitive.Equals( e.Speech, \"viewladder\" ) )\n\t\t\t{\n\t\t\t\te.Blocked=true;\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tLadder instance = Ladder.Instance;\n\t\t\t\t\tif ( instance == null )\n\t\t\t\t\t{\n\t\t\t\t\t\t//pm.SendMessage( \"Ladder not yet initialized.\" );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tpm.SendMessage( \"Target a player to view their ranking and level.\" );\n\t\t\t\t\t\tpm.BeginTarget( 16, false, Targeting.TargetFlags.None, new TargetStateCallback( ViewLadder_OnTarget ), instance );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( Insensitive.Contains( e.Speech, \"i yield\" ) )\n\t\t\t{\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse if ( pm.DuelContext == null )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse if ( pm.DuelContext.Finished )\n\t\t\t\t{\n\t\t\t\t\te.Mobile.SendMessage( 0x22, \"The duel is already finished.\" );\n\t\t\t\t}\n\t\t\t\telse if ( !pm.DuelContext.Started )\n\t\t\t\t{\n\t\t\t\t\tDuelContext dc = pm.DuelContext;\n\t\t\t\t\tMobile init = dc.Initiator;\n\t\t\t\t\tif ( pm.DuelContext.StartedBeginCountdown )\n\t\t\t\t\t{\n\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"The duel has not yet started.\" );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tDuelPlayer pl = pm.DuelContext.Find( pm );\n\t\t\t\t\t\tif ( pl == null )\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tParticipant p = pl.Participant;\n\t\t\t\t\t\tif ( !pm.DuelContext.ReadyWait ) // still setting stuff up\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.Broadcast( 0x22, null, \"{0} has yielded.\", \"You have yielded.\" );\n\t\t\t\t\t\t\tif ( init == pm )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdc.Unregister();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tp.Nullify( pl );\n\t\t\t\t\t\t\t\tpm.DuelPlayer=null;\n\t\t\t\t\t\t\t\tNetState ns = init.NetState;\n\t\t\t\t\t\t\t\tif ( ns != null )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tforeach ( Gump g in ns.Gumps )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( g is ParticipantGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tParticipantGump pg = (ParticipantGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( pg.Participant == p )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new ParticipantGump( init, dc, p ) );\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if ( g is DuelContextGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tDuelContextGump dcg = (DuelContextGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( dcg.Context == dc )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( !pm.DuelContext.StartedReadyCountdown ) // at ready stage\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.Broadcast( 0x22, null, \"{0} has yielded.\", \"You have yielded.\" );\n\t\t\t\t\t\t\tdc.m_Yielding=true;\n\t\t\t\t\t\t\tdc.RejectReady( pm, null );\n\t\t\t\t\t\t\tdc.m_Yielding=false;\n\t\t\t\t\t\t\tif ( init == pm )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdc.Unregister();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ( dc.m_Registered )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tp.Nullify( pl );\n\t\t\t\t\t\t\t\tpm.DuelPlayer=null;\n\t\t\t\t\t\t\t\tNetState ns = init.NetState;\n\t\t\t\t\t\t\t\tif ( ns != null )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbool send=true;\n\t\t\t\t\t\t\t\t\tforeach ( Gump g in ns.Gumps )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( g is ParticipantGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tParticipantGump pg = (ParticipantGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( pg.Participant == p )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new ParticipantGump( init, dc, p ) );\n\t\t\t\t\t\t\t\t\t\t\t\tsend=false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if ( g is DuelContextGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tDuelContextGump dcg = (DuelContextGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( dcg.Context == dc )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t\t\t\t\tsend=false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif ( send )\n\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( pm.DuelContext.m_Countdown != null )\n\t\t\t\t\t\t\t\tpm.DuelContext.m_Countdown.Stop();\n\t\t\t\t\t\t\tpm.DuelContext.m_Countdown= null;\n\t\t\t\t\t\t\tpm.DuelContext.m_StartedReadyCountdown=false;\n\t\t\t\t\t\t\tp.Broadcast( 0x22, null, \"{0} has yielded.\", \"You have yielded.\" );\n\t\t\t\t\t\t\tdc.m_Yielding=true;\n\t\t\t\t\t\t\tdc.RejectReady( pm, null );\n\t\t\t\t\t\t\tdc.m_Yielding=false;\n\t\t\t\t\t\t\tif ( init == pm )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdc.Unregister();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ( dc.m_Registered )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tp.Nullify( pl );\n\t\t\t\t\t\t\t\tpm.DuelPlayer=null;\n\t\t\t\t\t\t\t\tNetState ns = init.NetState;\n\t\t\t\t\t\t\t\tif ( ns != null )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbool send=true;\n\t\t\t\t\t\t\t\t\tforeach ( Gump g in ns.Gumps )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( g is ParticipantGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tParticipantGump pg = (ParticipantGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( pg.Participant == p )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new ParticipantGump( init, dc, p ) );\n\t\t\t\t\t\t\t\t\t\t\t\tsend=false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if ( g is DuelContextGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tDuelContextGump dcg = (DuelContextGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( dcg.Context == dc )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t\t\t\t\tsend=false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif ( send )\n\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = pm.DuelContext.Find( pm );\n\t\t\t\t\tif ( pl != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( pm.DuelContext.IsOneVsOne )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You may not yield a 1 on 1 match.\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( pl.Eliminated )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You have already been eliminated.\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpm.LocalOverheadMessage( MessageType.Regular, 0x22, false, \"You have yielded.\" );\n\t\t\t\t\t\t\tpm.NonlocalOverheadMessage( MessageType.Regular, 0x22, false, String.Format( \"{0} has yielded.\", pm.Name ) );\n\t\t\t\t\t\t\tpm.DuelContext.m_Yielding=true;\n\t\t\t\t\t\t\tpm.Kill();\n\t\t\t\t\t\t\tpm.DuelContext.m_Yielding=false;\n\t\t\t\t\t\t\tif ( pm.Alive ) // invul, ...\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpl.Eliminated = true;\n\t\t\t\t\t\t\t\tpm.DuelContext.RemoveAggressions( pm );\n\t\t\t\t\t\t\t\tpm.DuelContext.SendOutside( pm );\n\t\t\t\t\t\t\t\tpm.DuelContext.Refresh( pm, null );\n\t\t\t\t\t\t\t\tDebuff( pm );\n\t\t\t\t\t\t\t\tCancelSpell( pm );\n\t\t\t\t\t\t\t\tpm.Frozen = false;\n\t\t\t\t\t\t\t\tParticipant winner = pm.DuelContext.CheckCompletion();\n\t\t\t\t\t\t\t\tif ( winner != null )\n\t\t\t\t\t\t\t\t\tpm.DuelContext.Finish( winner );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"BUG: Unable to find duel context.\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic DuelContext( Mobile initiator, RulesetLayout layout ) : this( initiator, layout, true )\n\t\t{\n\t\t}\n\t\tpublic DuelContext( Mobile initiator, RulesetLayout layout, bool addNew )\n\t\t{\n\t\t\tm_Initiator = initiator;\n\t\t\tm_Participants = new ArrayList();\n\t\t\tm_Ruleset = new Ruleset( layout );\n\t\t\tm_Ruleset.ApplyDefault( layout.Defaults[0] );\n\t\t\tif ( addNew )\n\t\t\t{\n\t\t\t\tm_Participants.Add( new Participant( this, 1 ) );\n\t\t\t\tm_Participants.Add( new Participant( this, 1 ) );\n\t\t\t\t((Participant)m_Participants[0]).Add( initiator );\n\t\t\t}\n\t\t}\n\t\tpublic void CloseAllGumps()\n\t\t{\n\t\t\tType[] types = new Type[]{ typeof( DuelContextGump ), typeof( ParticipantGump ), typeof( RulesetGump ) };\n\t\t\tint[] defs = new int[]{ -1, -1, -1 };\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "length": 5243, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "28ce5cf5e0beeb47248c6cba20ae17fa71d60d402770d464"}
{"input": "", "context": "import networkx as nx \nimport pickle\nfrom Queue import PriorityQueue \nimport copy\nimport random\nimport string\nimport sys\nclass MultiDiGraph_EdgeKey(nx.MultiDiGraph):\n    \"\"\"\n    MultiDiGraph which assigns unique keys to every edge.\n    Adds a dictionary edge_index which maps edge keys to (u, v, data) tuples.\n    This is not a complete implementation. For Edmonds algorithm, we only use\n    add_node and add_edge, so that is all that is implemented here. During\n    additions, any specified keys are ignored---this means that you also\n    cannot update edge attributes through add_node and add_edge.\n    \"\"\"\n    def __init__(self, data=None, **attr):\n        cls = super(MultiDiGraph_EdgeKey, self)\n        cls.__init__(data=data, **attr)\n        self._cls = cls\n        self.edge_index = {}\n    def remove_node(self, n):\n        keys = set([])\n        for keydict in self.pred[n].values():\n            keys.update(keydict)\n        for keydict in self.succ[n].values():\n            keys.update(keydict)\n        for key in keys:\n            del self.edge_index[key]\n        self._cls.remove_node(n)\n    def remove_nodes_from(self, nbunch):\n        for n in nbunch:\n            self.remove_node(n)\n    def add_edge(self, u, v, key, attr_dict=None, **attr):\n        \"\"\"\n        Key is now required.\n        \"\"\"\n        if key in self.edge_index:\n            uu, vv, _ = self.edge_index[key]\n            if (u != uu) or (v != vv):\n                raise Exception(\"Key {0!r} is already in use.\".format(key))\n        self._cls.add_edge(u, v, key=key, attr_dict=attr_dict, **attr)\n        self.edge_index[key] = (u, v, self.succ[u][v][key])\n    def add_edges_from(self, ebunch, attr_dict=None, **attr):\n        for edge in ebunch:\n        \tself.add_edge(*edge)\n    def remove_edge_with_key(self, key):\n        try:\n            u, v, _  = self.edge_index[key]\n            # print ('***',u,v,key)\n        except KeyError:\n            raise KeyError('Invalid edge key {0!r}'.format(key))\n        else:\n            del self.edge_index[key]\n            # print ('***** self.edge_index',self.edge_index)\n            self._cls.remove_edge(u, v, key)\n    def remove_edges_from(self, ebunch):\n        raise NotImplementedError\ndef random_string(L=15, seed=None):\n    random.seed(seed)\n    return ''.join([random.choice(string.ascii_letters) for n in range(L)])\nclass Camerini():\n\tdef __init__(self, graph, Y=nx.DiGraph(), Z=nx.DiGraph(), attr='weight'):\n\t\tself.original_graph = graph\n\t\tself.attr = attr\n\t\tself._init(Y=Y, Z=Z)\n\t\tself.template = random_string()\n\t\n\tdef _init(self, graph=None, Y=nx.DiGraph(), Z=nx.DiGraph()):\n\t\tself.graph = MultiDiGraph_EdgeKey()\n\t\tif graph is None:\n\t\t\tgraph = self.original_graph\n\t\tfor key, (u, v, data) in enumerate(graph.edges(data=True)):\n\t\t\tif (u,v) not in Z.edges():\n\t\t\t\tself.graph.add_edge(u,v,key,data.copy())\n\t\t\t\n\t\tfor Y_edge in Y.edges(data=True):\n\t\t\tfor (u,v) in self.graph.in_edges([Y_edge[1]]):\n\t\t\t\tif u != Y_edge[0]:\n\t\t\t\t\tself.graph.remove_edge(u,v)\n\tdef best_incoming_edge(self, node, graph):\n\t\tmax_weight = float('-inf')\n\t\te = None\n\t\t# print ('Graph',graph.edges())\n\t\tfor u,v,key,data in graph.in_edges([node], data=True, keys=True):\n\t\t\t# print ('edge',u,v,data)\n\t\t\tif max_weight <= data[self.attr]:\n\t\t\t\tmax_weight = data[self.attr]\n\t\t\t\te = (u,v,key,data)\n\t\treturn e\n\tdef collapse_cycle(self, graph, cycle, B, new_node):\t\t\t\n\t\tfor node in cycle:\n\t\t\tfor u,v,key,data in graph.out_edges([node], data=True, keys=True):\n\t\t\t\tgraph.remove_edge_with_key(key)\n\t\t\t\tif v not in cycle:\n\t\t\t\t\tdd = data.copy()\n\t\t\t\t\tgraph.add_edge(new_node,v,key,**dd)\t\t\n\t\t\tfor u,v,key,data in graph.in_edges([node], data=True, keys=True):\n\t\t\t\tif u in cycle:\n\t\t\t\t\t# it will be delete later\n\t\t\t\t\tcontinue\n\t\t\t\tgraph.remove_edge_with_key(key)\n\t\t\t\tdd = data.copy()\n\t\t\t\tdd_eh = list(B.in_edges([node], data=True))[0][2] \n\t\t\t\tdd[self.attr] = dd[self.attr] - dd_eh[self.attr]\n\t\t\t\tgraph.add_edge(u, new_node, key, **dd)\n\t\tfor node in cycle:\n\t\t\tB.remove_node(node)\n\t\treturn graph, B\n\tdef add_b_to_branching(self, exposed_nodes, order, M, supernodes, B):\n\t\tv = exposed_nodes.pop(0)\n\t\torder.append(v)\n\t\tb = self.best_incoming_edge(v, M)\n\t\tif b is None:\n\t\t\tif v in supernodes:\n\t\t\t\tsupernodes.remove(v)\n\t\t\treturn exposed_nodes, order, M, supernodes, B, None\n\t\tb_u, b_v, b_key, b_data = b\n\t\tdata = {self.attr: b_data[self.attr], 'origin': b_data['origin']}\n\t\tB.add_edge(b_u, b_v, **data)\n\t\treturn exposed_nodes, order, M, supernodes, B, b\n\tdef contracting_phase(self, B, n, supernodes, exposed_nodes, M, C, root):\n\t\tcycles = list(nx.simple_cycles(B))\n\t\tif len(cycles) > 0:\n\t\t\tu = 'v_'+str(n)\n\t\t\tsupernodes.append(str(u))\n\t\t\texposed_nodes.append(u)\n\t\t\tfor node in cycles[0]:\n\t\t\t\tC[str(node)] = str(u)\n\t\t\tM, B = self.collapse_cycle(M, cycles[0], B, u)\n\t\t\tfor node in B.nodes():\n\t\t\t\tif B.in_edges([node]) == []:\n\t\t\t\t\tif B.out_edges([node]) == []:\n\t\t\t\t\t\tB.remove_node(node)\n\t\t\t\t\tif node != root and node not in exposed_nodes:\n\t\t\t\t\t\texposed_nodes.append(node)\n\t\t\tn += 1\n\t\treturn B, n, supernodes, exposed_nodes, M, C\n\tdef best(self, root):\n\t\tM = self.graph\n\t\tfor u,v,key,data in M.edges(data=True, keys=True):\n\t\t\tdata['origin'] = (u,v,key,{self.attr: data[self.attr]})\n\t\tn = 0\n\t\tB = nx.DiGraph()\n\t\t# C contains for every node its parent node, so it will be easy to find the path in the collapsing phase\n\t\t# from an isolated root v_1 to v_k\n\t\tnodes = M.nodes()\n\t\tif len(nodes) == 1:\n\t\t\tA = nx.DiGraph()\n\t\t\tA.add_node(nodes[0])\n\t\tC = {str(node): None for node in nodes} \n\t\tdel C[str(root)]\n\t\texposed_nodes = [node for node in nodes]\n\t\texposed_nodes.remove(root)\n\t\tsupernodes = []\n\t\tbeta = {}\n\t\torder = []\n\t\t# collapsing phase\n\t\twhile len(exposed_nodes) > 0:\n\t\t\texposed_nodes, order, M, supernodes, B, b = self.add_b_to_branching(exposed_nodes, order, M, supernodes, B)\n\t\t\tif b is None:\n\t\t\t\tcontinue\n\t\t\tb_u, b_v, b_key, b_data = b\n\t\t\tbeta[b_v] = (b_u, b_v, b_key, b_data)\n\t\t\tB, n, supernodes, exposed_nodes, M, C = self.contracting_phase(B, n, supernodes, exposed_nodes, M, C, root)\n\t\t# expanding phase\n\t\twhile len(supernodes) > 0:\n\t\t\tv_1 = supernodes.pop()\n\t\t\torigin_edge_v_1 = beta[v_1][3]['origin']  \n\t\t\tv_k = origin_edge_v_1[1]\n\t\t\tbeta[v_k] = beta[v_1]\n\t\t\tv_i = str(C[str(v_k)])\n\t\t\twhile v_i != v_1:\n\t\t\t\tsupernodes.remove(v_i)\n\t\t\t\tv_i = C.pop(v_i)\n\t\tA = nx.DiGraph()\n\t\tfor k, edge in beta.items():\n\t\t\tif k in nodes:\n\t\t\t\tu,v,key,data = edge[3]['origin']\n\t\t\t\tA.add_edge(u,v,**data.copy())\n\t\treturn A\n\tdef get_priority_queue_for_incoming_node(self, graph, v, b):\n\t\tQ = PriorityQueue()\n\t\tfor u,v,key,data in graph.in_edges([v], data=True, keys=True):\n\t\t\tif key == b[2]:\n\t\t\t\tcontinue\n\t\t\tQ.put((-data[self.attr], (u,v,key,data)))\n\t\treturn Q\n\tdef seek(self, b, A, graph):\n\t\tv = b[1]\n\t\tQ = self.get_priority_queue_for_incoming_node(graph, v, b)\n\t\twhile not Q.empty():\n\t\t\tf = Q.get()\n\t\t\ttry:\n\t\t\t\t# v = T(b) is an ancestor of O(f)=f[1][1]?\n\t\t\t\tv_origin = b[3]['origin'][1]\n\t\t\t\tf_origin = f[1][3]['origin'][0] \n\t\t\t\tnx.shortest_path(A, v_origin, f_origin)\n\t\t\texcept nx.exception.NetworkXNoPath:\n\t\t\t\treturn f[1]\n\t\treturn None\n\tdef next(self, A, Y, Z, graph=None, root='R'):\n\t\td = float('inf')\n\t\tedge = None\n\t\tif graph is not None:\n\t\t\tself._init(graph)\n\t\tM = self.graph\n\t\tfor u,v,key,data in M.edges(data=True, keys=True):\n\t\t\tdata['origin'] = (u,v,key,{self.attr: data[self.attr]})\n\t\tn = 0\n\t\tB = nx.DiGraph()\n\t\tnodes = M.nodes()\n\t\tC = {str(node): None for node in nodes} \n\t\texposed_nodes = [node for node in nodes]\n\t\tif 'R' in exposed_nodes: \n\t\t\texposed_nodes.remove('R')\n\t\torder = []\n\t\tsupernodes = []\n\t\twhile len(exposed_nodes) > 0:\n\t\t\texposed_nodes, order, M, supernodes, B, b = self.add_b_to_branching(exposed_nodes, order, M, supernodes, B)\n\t\t\tif b is None:\n\t\t\t\tcontinue\n\t\t\tb_u, b_v, b_key, b_data = b\n\t\t\torigin_u, origin_v = b_data['origin'][:2]\n\t\t\tif (origin_u, origin_v) in A.edges():\n\t\t\t\tif (origin_u, origin_v) not in Y.edges():\n\t\t\t\t\tf = self.seek(b, A, M)\n\t\t\t\t\tif f is not None:\n\t\t\t\t\t\tf_u, f_v, f_key, f_data = f\n\t\t\t\t\t\tif b_data[self.attr] - f_data[self.attr] < d:\n\t\t\t\t\t\t\tedge = b\n\t\t\t\t\t\t\td = b_data[self.attr] - f_data[self.attr]\n\t\t\tB, n, supernodes, exposed_nodes, M, C = self.contracting_phase(B, n, supernodes, exposed_nodes, M, C, root)\n\t\treturn edge[3]['origin'], d\n\tdef ranking(self, k, graph=None, Y=nx.DiGraph(), Z=nx.DiGraph(), mode='branching', root='R'):\n\t\tif graph is not None:\n\t\t\tself._init(graph, Y, Z)\n\t\tif root == 'R' and mode == 'branching':\n\t\t\tbest = self.best_branching\n\t\telif root == 'R' and mode == 'arborescence_no_rooted':\n\t\t\tbest = self.best_arborescence_no_rooted\n\t\telse:\n\t\t\tbest = self.best_arborescence_rooted\n\t\t\n\t\tgraph = self.graph.copy()\n\t\tA = best(root)  \n\t\troots = self.find_roots(A)\n\t\tif 'R' in roots:\n\t\t\troots.remove('R')\n\t\tprint ('roots for ranking',roots)\n\t\tself._init(graph)\n\t\te, d = self.next(A, Y, Z)  \n\t\tP = PriorityQueue()\n\t\tw = self.get_graph_score(A) - d if d != float('inf') else float('inf') \n\t\tP.put( (-w, e, A, Y, Z) )\n\t\tsolutions = [A]\n\t\tfor j in range(1,k+1):\n\t\t\tw, e, A, Y, Z = P.get()\n\t\t\tw = -w \t\t\t\n\t\t\troots.extend([root for root in self.find_roots(A) if root not in roots])\n\t\t\tif 'R' in roots:\n\t\t\t\troots.remove('R')\n\t\t\tif w == float('-inf'):\n\t\t\t\treturn solutions\n\t\t\te_u, e_v, e_key, data = e\n\t\t\t\n\t\t\tY_ = Y.copy()\n\t\t\tY_.add_edge(e_u, e_v, **data.copy())\n\t\t\t\n\t\t\tZ_ = Z.copy()\n", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "length": 1069, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "ca807f49d7c6f84dcae3df694bde685aa7f75a02e9d4f574"}
{"input": "", "context": "#! /usr/bin/env python\n# Last Change: Sun Dec 14 07:00 PM 2008 J\n\"\"\"Test for the sndfile class.\"\"\"\nfrom os.path import join, dirname\nimport os\nimport sys\nfrom numpy.testing import TestCase, assert_array_equal, dec\nimport numpy as np\nfrom audiolab import Sndfile, Format, available_encodings, available_file_formats\nfrom testcommon import open_tmp_file, close_tmp_file, TEST_DATA_DIR\n_DTYPE_TO_ENC = {np.float64 : 'float64', np.float32: 'float32', \n                 np.int32: 'pcm32', np.int16: 'pcm16'}\n# XXX: there is a lot to refactor here\nclass TestSndfile(TestCase):\n    def test_basic_io(self):\n        \"\"\" Check open, close and basic read/write\"\"\"\n        # dirty !\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            nbuff = 22050\n            # Open the test file for reading\n            a = Sndfile(ofilename, 'r')\n            nframes = a.nframes\n            # Open the copy file for writing\n            format = Format('wav', 'pcm16')\n            b = Sndfile(fd, 'w', format, a.channels, a.samplerate)\n            # Copy the data\n            for i in range(nframes / nbuff):\n                tmpa    = a.read_frames(nbuff)\n                assert tmpa.dtype == np.float\n                b.write_frames(tmpa)\n            nrem    = nframes % nbuff\n            tmpa    = a.read_frames(nrem)\n            assert tmpa.dtype == np.float\n            b.write_frames(tmpa)\n            a.close()\n            b.close()\n        finally:\n            close_tmp_file(rfd, cfilename)\n    @dec.skipif(sys.platform=='win32', \n                \"Not testing opening by fd because does not work on win32\")\n    def test_basic_io_fd(self):\n        \"\"\" Check open from fd works\"\"\"\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n        fd = os.open(ofilename, os.O_RDONLY)\n        hdl = Sndfile(fd, 'r')\n        hdl.close()\n    def test_raw(self):\n        rawname = join(TEST_DATA_DIR, 'test.raw')\n        format = Format('raw', 'pcm16', 'little')\n        a = Sndfile(rawname, 'r', format, 1, 11025)\n        assert a.nframes == 11290\n        a.close()\n    def test_float64(self):\n        \"\"\"Check float64 write/read works\"\"\"\n        self._test_read_write(np.float64)\n    def test_float32(self):\n        \"\"\"Check float32 write/read works\"\"\"\n        self._test_read_write(np.float32)\n    def test_int32(self):\n        \"\"\"Check 32 bits pcm write/read works\"\"\"\n        self._test_read_write(np.int32)\n    def test_int16(self):\n        \"\"\"Check 16 bits pcm write/read works\"\"\"\n        self._test_read_write(np.int16)\n    def _test_read_write(self, dtype):\n        # dirty !\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            nbuff = 22050\n            # Open the test file for reading\n            a = Sndfile(ofilename, 'r')\n            nframes = a.nframes\n            # Open the copy file for writing\n            format = Format('wav', _DTYPE_TO_ENC[dtype])\n            b = Sndfile(fd, 'w', format, a.channels, a.samplerate)\n            # Copy the data in the wav file\n            for i in range(nframes / nbuff):\n                tmpa    = a.read_frames(nbuff, dtype=dtype)\n                assert tmpa.dtype == dtype\n                b.write_frames(tmpa)\n            nrem = nframes % nbuff\n            tmpa = a.read_frames(nrem)\n            b.write_frames(tmpa)\n            a.close()\n            b.close()\n            # Now, reopen both files in for reading, and check data are\n            # the same\n            a = Sndfile(ofilename, 'r')\n            b = Sndfile(cfilename, 'r')\n            for i in range(nframes / nbuff):\n                tmpa = a.read_frames(nbuff, dtype=dtype)\n                tmpb = b.read_frames(nbuff, dtype=dtype)\n                assert_array_equal(tmpa, tmpb)\n            a.close()\n            b.close()\n        finally:\n            close_tmp_file(rfd, cfilename)\n    #def test_supported_features(self):\n    #    for i in available_file_formats():\n    #        print \"Available encodings for format %s are : \" % i\n    #        for j in available_encodings(i):\n    #            print '\\t%s' % j\n    def test_short_io(self):\n        self._test_int_io(np.short)\n    def test_int32_io(self):\n        self._test_int_io(np.int32)\n    def _test_int_io(self, dt):\n        # TODO: check if neg or pos value is the highest in abs\n        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            # Use almost full possible range possible for the given data-type\n            nb = 2 ** (8 * np.dtype(dt).itemsize - 3)\n            fs = 22050\n            nbuff = fs\n            a = np.random.random_integers(-nb, nb, nbuff)\n            a = a.astype(dt)\n            # Open the file for writing\n            format = Format('wav', _DTYPE_TO_ENC[dt])\n            b = Sndfile(fd, 'w', format, 1, fs)\n            b.write_frames(a)\n            b.close()\n            b = Sndfile(cfilename, 'r')\n            read_a  = b.read_frames(nbuff, dtype=dt)\n            b.close()\n            assert_array_equal(a, read_a)\n        finally:\n            close_tmp_file(rfd, cfilename)\n    def test_mismatch(self):\n        \"\"\"Check for bad arguments.\"\"\"\n        # This test open a file for writing, but with bad args (channels and\n        # nframes inverted)\n        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            # Open the file for writing\n            format = Format('wav', 'pcm16')\n            try:\n                b = Sndfile(fd, 'w', format, channels=22000, samplerate=1)\n                raise AssertionError(\"Try to open a file with more than 256 \"\\\n                                     \"channels, this should not succeed !\")\n            except ValueError, e:\n                pass\n        finally:\n            close_tmp_file(rfd, cfilename)\n    def test_bigframes(self):\n        \"\"\" Try to seek really far.\"\"\"\n        rawname = join(TEST_DATA_DIR, 'test.wav')\n        a = Sndfile(rawname, 'r')\n        try:\n            try:\n                a.seek(2 ** 60)\n                raise Exception, \\\n                      \"Seek really succeded ! This should not happen\"\n            except IOError, e:\n                pass\n        finally:\n            a.close()\n    def test_float_frames(self):\n        \"\"\" Check nframes can be a float\"\"\"\n        rfd, fd, cfilename   = open_tmp_file('pysndfiletest.wav')\n        try:\n            # Open the file for writing\n            format = Format('wav', 'pcm16')\n            a = Sndfile(fd, 'rw', format, channels=1, samplerate=22050)\n            tmp = np.random.random_integers(-100, 100, 1000)\n            tmp = tmp.astype(np.short)\n            a.write_frames(tmp)\n            a.seek(0)\n            a.sync()\n            ctmp = a.read_frames(1e2, dtype=np.short)\n            a.close()\n        finally:\n            close_tmp_file(rfd, cfilename)\n    def test_nofile(self):\n        \"\"\" Check the failure when opening a non existing file.\"\"\"\n        try:\n            f = Sndfile(\"floupi.wav\", \"r\")\n            raise AssertionError(\"call to non existing file should not succeed\")\n        except IOError:\n            pass\n        except Exception, e:\n            raise AssertionError(\"opening non existing file should raise\" \\\n                                 \" a IOError exception, got %s instead\" %\n                                 e.__class__)\nclass TestSeek(TestCase):\n    def test_simple(self):\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n        # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        # First, read some frames, go back, and compare buffers\n        buff = a.read_frames(buffsize)\n        a.seek(0)\n        buff2 = a.read_frames(buffsize)\n        assert_array_equal(buff, buff2)\n        a.close()\n        # Now, read some frames, go back, and compare buffers\n        # (check whence == 1 == SEEK_CUR)\n        a = Sndfile(ofilename, 'r')\n        a.read_frames(buffsize)\n        buff = a.read_frames(buffsize)\n        a.seek(-buffsize, 1)\n        buff2 = a.read_frames(buffsize)\n        assert_array_equal(buff, buff2)\n        a.close()\n        # Now, read some frames, go back, and compare buffers\n        # (check whence == 2 == SEEK_END)\n        a = Sndfile(ofilename, 'r')\n        buff = a.read_frames(nframes)\n        a.seek(-buffsize, 2)\n        buff2 = a.read_frames(buffsize)\n        assert_array_equal(buff[-buffsize:], buff2)\n    def test_rw(self):\n        \"\"\"Test read/write pointers for seek.\"\"\"\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "length": 844, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "04429037d9380b6e9c3f7b2070992a5af10745895025113c"}
{"input": "", "context": "#!/usr/bin/env python\nfrom apps.webdriver_testing.pages.site_pages import UnisubsPage\nfrom urlparse import urlsplit\nclass VideoPage(UnisubsPage):\n    \"\"\"\n     Video Page contains the common elements in the video page.\n    \"\"\"\n    _URL = \"videos/%s/info/\"  # %s is the unique onsite video id\n    _VIDEO_TITLE = \".main-title a\"\n    _SPEAKER_NAME = \"div.content div div > h4\"\n    _LOCATION = \"div.content div div h4:nth-child(2)\"\n    _DESCRIPTION = \"div#description\"\n    _EMBEDDED_VIDEO = \"div.unisubs-widget div.unisubs-videoTab-container\"\n    _SUBTITLE_MENU = \"a.unisubs-subtitleMeLink span.unisubs-tabTextchoose\"\n    _LIKE_FACEBOOK = \"li.unisubs-facebook-like button\"\n    _POST_FACEBOOK = \"a.facebook\"\n    _POST_TWITTER = \"a.twittter\"\n    _EMAIL_FRIENDS = \"a.email\"\n    _FOLLOW = \"button.follow-button\"\n    #FOLLOW CONFIRMATION\n    _UNFOLLOW_ALL = 'input#unfollow-all-languages-button'\n    _SUBTITLES_OK = 'input#popup_ok'\n    _EMBED_HELP = \"div.unisubs-share h3 a.embed_options_link\"\n    _EMBED_CODE = (\"div#embed-modal.modal div.modal-body form fieldset \"\n        \"textarea\")\n    #TOP TABS\n    _URLS_TAB = 'href=\"?tab=urls\"]'\n    _VIDEO_TAB = 'a[href=\"?tab=video\"]'\n    _COMMENTS_TAB = 'a[href=\"?tab=comments\"]'\n    _ACTIVITY_TAB = 'a[href=\"?tab=activity\"]'\n    _ADD_SUBTITLES = \"a.add_subtitles\"\n    #VIDEO SIDE SECTION\n    _INFO = \"ul#video-menu.left_nav li:nth-child(1) > a\"\n    _ADD_TRANSLATION = \"li.contribute a#add_translation\"\n    _UPLOAD_SUBTITLES = \"a#upload-subtitles-link\"\n    #SUBTITLES_SIDE_SECTION\n    _SUB_LANGUAGES = \"ul#subtitles-menu li\"\n    _STATUS_TAGS = \"span.tags\"\n    #TEAM_SIDE_SECTION\n    _ADD_TO_TEAM_PULLDOWN = (\"ul#moderation-menu.left_nav li div.sort_button \"\n        \"div.arrow\")\n    _TEAM_LINK = (\"ul#moderation-menu.left_nav li div.sort_button ul li \"\n        \"a[href*='%s']\")\n    #ADMIN_SIDE_SECTION\n    _DEBUG_INFO = \"\"\n    _EDIT = \"\"\n    #UPLOAD SUBTITLES DIALOG\n    _SELECT_LANGUAGE = 'select#id_language_code'\n    _TRANSLATE_FROM = 'select#id_from_language_code'\n    _PRIMARY_AUDIO = 'select#id_primary_audio_language_code'\n    _SUBTITLES_FILE = 'input#subtitles-file-field'\n    _IS_COMPLETE = 'input#updload-subtitles-form-is_complete' #checked default\n    _UPLOAD_SUBMIT = 'form#upload-subtitles-form button.green_button'\n    _FEEDBACK_MESSAGE = 'p.feedback-message'\n    _CLOSE = 'div#upload_subs-div a.close'\n    UPLOAD_SUCCESS_TEXT = ('Thank you for uploading. It may take a minute or '\n                           'so for your subtitles to appear.')\n    #TAB FIELDS\n    _COMMENTS_BOX = 'textarea#id_comment_form_content'\n    _ACTIVITY_LIST = 'ul.activity li p'    \n    def open_video_page(self, video_id):\n        self.open_page(self._URL % video_id)\n    def open_video_activity(self, video_id):\n        self.open_video_page(video_id)\n        self.click_by_css(self._ACTIVITY_TAB)\n    def video_title(self):\n        return self.get_text_by_css(self._VIDEO_TITLE)\n    def add_translation(self):\n        self.click_by_css(self._ADD_TRANSLATION)\n    def upload_subtitles(self, \n                         sub_lang, \n                         sub_file,\n                         audio_lang = None,\n                         translated_from = None, \n                         is_complete = True):\n        #Open the dialog\n        self.wait_for_element_visible(self._UPLOAD_SUBTITLES)\n        self.click_by_css(self._UPLOAD_SUBTITLES)\n        #Choose the language\n        self.wait_for_element_visible(self._SELECT_LANGUAGE)\n        self.select_option_by_text(self._SELECT_LANGUAGE, sub_lang)\n        #Set the audio language\n        if audio_lang:\n            self.select_option_by_text(self._PRIMARY_AUDIO, audio_lang)\n        #Set the translation_from field\n        if translated_from:\n            self.select_option_by_text(self._TRANSLATE_FROM, translated_from)\n        #Input the subtitle file\n        self.type_by_css(self._SUBTITLES_FILE, sub_file)\n        #Set complete\n        if not is_complete:\n            self.click_by_css(self._IS_COMPLETE)\n        #Start the upload\n        self.wait_for_element_present(self._UPLOAD_SUBMIT)\n        self.click_by_css(self._UPLOAD_SUBMIT)\n        #Get the the response message\n        self.wait_for_element_present(self._FEEDBACK_MESSAGE, wait_time=20)\n        message_text = self.get_text_by_css(self._FEEDBACK_MESSAGE)\n        #Close the dialog\n        self.click_by_css(self._CLOSE)\n        self.wait_for_element_not_visible(self._CLOSE)\n        return message_text\n    def open_info_page(self):\n        self.click_by_css(self._INFO)\n    def add_video_to_team(self, team_name):\n        self.click_by_css(self._ADD_TO_TEAM_PULLDOWN)\n        self.click_by_css(self._TEAM_LINK % team_name)\n    def video_id(self):\n        page_url = self.browser.current_url\n        url_parts = urlsplit(page_url).path\n        urlfrag = url_parts.split('/')[3]\n        return urlfrag\n    def description_text(self):\n        return self.get_text_by_css(self._DESCRIPTION)\n    def speaker_name(self):\n        return self.get_text_by_css(self._SPEAKER_NAME)\n    def location(self):\n        return self.get_text_by_css(self._LOCATION)\n    def video_embed_present(self):\n        if self.is_element_present(self._EMBEDDED_VIDEO):\n            return True\n    def add_subtitles(self):\n        self.click_by_css(self._ADD_SUBTITLES)\n    def team_slug(self, slug):\n        \"\"\"Return true if the team stub is linked on the video page.\n        \"\"\"\n        team_link = \"a[href*='/teams/%s/']\" % slug\n        if self.is_element_present(team_link):\n            return True\n    def feature_video(self):\n        self.click_link_text('Feature video')\n    def unfeature_video(self):\n        self.click_link_text('Unfeature video')\n    def displays_subtitle_me(self):\n        return self.is_element_visible(self._SUBTITLE_MENU)\n    def click_subtitle_me(self):\n        self.click_by_css(self._SUBTITLE_MENU)\n    def displays_add_subtitles(self):\n        return self.is_element_visible(self._ADD_SUBTITLES)\n    def displays_add_translation(self):\n        return self.is_element_visible(self._ADD_TRANSLATION)\n    def displays_upload_subtitles(self):\n        return self.is_element_visible(self._UPLOAD_SUBTITLES)\n    def follow_text(self):\n        return self.get_text_by_css(self._FOLLOW)\n    def toggle_follow(self, lang=False):\n        self.click_by_css(self._FOLLOW)\n        if lang:\n            self.click_by_css(self._SUBTITLES_OK)\n        else:\n            self.click_by_css(self._UNFOLLOW_ALL)\n    def subtitle_languages(self):\n        langs = []\n        els = self.get_elements_list(self._SUB_LANGUAGES + \" a\")\n        for el in els:\n            langs.append(el.text)\n        return langs\n    def language_status(self, language):\n        els =  self.get_elements_list(self._SUB_LANGUAGES)\n        for el in els:\n            e = el.find_element_by_css_selector(\"a\")\n            self.logger.info(e.text)\n", "answers": ["            if e.text == language:"], "length": 462, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "9bc1f81e1a4c4b44da11ffc093a0c9fecbe5f99e4eff3aa5"}
{"input": "", "context": "/*\n * $Header: it.geosolutions.geobatch.wmc.WMCStream,v. 0.1 03/dic/2009 01:55:21 created by Fabiani $\n * $Revision: 0.1 $\n * $Date: 03/dic/2009 01:55:21 $\n *\n * ====================================================================\n *\n * Copyright (C) 2007-2008 GeoSolutions S.A.S.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. \n *\n * ====================================================================\n *\n * This software consists of voluntary contributions made by developers\n * of GeoSolutions.  For more information on GeoSolutions, please see\n * <http://www.geo-solutions.it/>.\n *\n */\npackage it.geosolutions.geobatch.wmc;\nimport it.geosolutions.geobatch.wmc.model.GeneralWMCConfiguration;\nimport it.geosolutions.geobatch.wmc.model.OLBaseClass;\nimport it.geosolutions.geobatch.wmc.model.OLDimension;\nimport it.geosolutions.geobatch.wmc.model.OLExtent;\nimport it.geosolutions.geobatch.wmc.model.OLStyleColorRamps;\nimport it.geosolutions.geobatch.wmc.model.OLStyleValue;\nimport it.geosolutions.geobatch.wmc.model.ViewContext;\nimport it.geosolutions.geobatch.wmc.model.WMCBoundingBox;\nimport it.geosolutions.geobatch.wmc.model.WMCExtension;\nimport it.geosolutions.geobatch.wmc.model.WMCFormat;\nimport it.geosolutions.geobatch.wmc.model.WMCLayer;\nimport it.geosolutions.geobatch.wmc.model.WMCOnlineResource;\nimport it.geosolutions.geobatch.wmc.model.WMCSLD;\nimport it.geosolutions.geobatch.wmc.model.WMCServer;\nimport it.geosolutions.geobatch.wmc.model.WMCStyle;\nimport it.geosolutions.geobatch.wmc.model.WMCWindow;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\nimport java.io.Writer;\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.converters.Converter;\nimport com.thoughtworks.xstream.converters.MarshallingContext;\nimport com.thoughtworks.xstream.converters.UnmarshallingContext;\nimport com.thoughtworks.xstream.io.HierarchicalStreamReader;\nimport com.thoughtworks.xstream.io.HierarchicalStreamWriter;\nimport com.thoughtworks.xstream.io.xml.DomDriver;\n/**\n * @author Fabiani\n *\n */\npublic class WMCStream {\n\tprivate XStream xstream = new XStream(new DomDriver(\"UTF-8\"));\n\t\n\t/**\n\t * \n\t */\n\tpublic WMCStream() {\n    \t// WMC ViewContext\n    \txstream.alias(\"ViewContext\", ViewContext.class);\n    \txstream.useAttributeFor(ViewContext.class, \"xmlns\");\n    \txstream.useAttributeFor(ViewContext.class, \"xlink\");\n    \txstream.useAttributeFor(ViewContext.class, \"id\");\n    \txstream.useAttributeFor(ViewContext.class, \"version\");\n    \txstream.aliasField(\"xmlns:xlink\", ViewContext.class, \"xlink\");\n    \txstream.aliasField(\"General\", ViewContext.class, \"general\");\n    \txstream.aliasField(\"LayerList\", ViewContext.class, \"layerList\");\n    \t// WMC ViewContext::General\n    \txstream.aliasField(\"Window\", GeneralWMCConfiguration.class, \"window\");\n    \txstream.aliasField(\"Title\", GeneralWMCConfiguration.class, \"title\");\n    \txstream.aliasField(\"Abstract\", GeneralWMCConfiguration.class, \"_abstract\");\n    \t// WMC ViewContext::General::Window\n    \txstream.useAttributeFor(WMCWindow.class, \"height\");\n    \txstream.useAttributeFor(WMCWindow.class, \"width\");\n    \txstream.aliasField(\"BoundingBox\", WMCWindow.class, \"bbox\");\n    \t// WMC ViewContext::General::Window::BoundingBox\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"srs\");\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"maxx\");\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"maxy\");\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"minx\");\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"miny\");\n    \txstream.aliasField(\"SRS\", WMCBoundingBox.class, \"srs\");\n    \t// WMC ViewContext::LayerList::Layer\n    \txstream.alias(\"Layer\", WMCLayer.class);\n    \txstream.useAttributeFor(WMCLayer.class, \"queryable\");\n    \txstream.useAttributeFor(WMCLayer.class, \"hidden\");\n    \txstream.aliasField(\"SRS\", WMCLayer.class, \"srs\");\n    \txstream.aliasField(\"Name\", WMCLayer.class, \"name\");\n    \txstream.aliasField(\"Title\", WMCLayer.class, \"title\");\n    \txstream.aliasField(\"Server\", WMCLayer.class, \"server\");\n    \txstream.aliasField(\"FormatList\", WMCLayer.class, \"formatList\");\n    \txstream.aliasField(\"StyleList\", WMCLayer.class, \"styleList\");\n    \txstream.aliasField(\"Extension\", WMCLayer.class, \"extension\");\n    \t// WMC ViewContext::LayerList::Layer::Server\n    \txstream.useAttributeFor(WMCServer.class, \"service\");\n    \txstream.useAttributeFor(WMCServer.class, \"version\");\n    \txstream.useAttributeFor(WMCServer.class, \"title\");\n    \txstream.aliasField(\"OnlineResource\", WMCServer.class, \"onlineResource\");\n    \t// WMC ViewContext::LayerList::Layer::Server::OnlineResource\n    \txstream.useAttributeFor(WMCOnlineResource.class, \"xlink_type\");\n    \txstream.useAttributeFor(WMCOnlineResource.class, \"xlink_href\");\n    \txstream.aliasField(\"xlink:type\", WMCOnlineResource.class, \"xlink_type\");\n    \txstream.aliasField(\"xlink:href\", WMCOnlineResource.class, \"xlink_href\");\n    \t// WMC ViewContext::LayerList::Layer::FormatList::Format\n    \txstream.alias(\"Format\", WMCFormat.class);\n    \txstream.registerConverter(new Converter() {\n\t\t\tpublic boolean canConvert(Class clazz) {\n\t\t\t\treturn WMCFormat.class.isAssignableFrom(clazz);\n\t\t\t}\n\t\t\tpublic void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) {\n\t\t\t\tWMCFormat format = (WMCFormat) value;\n\t\t\t\t\n\t\t\t\twriter.addAttribute(\"current\", format.getCurrent());\n\t\t\t\tif (format.getContent() != null)\n\t\t\t\t\twriter.setValue(format.getContent());\n\t\t\t}\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n\t\t\t\tWMCFormat format = new WMCFormat(\"1\", reader.getValue());\n\t\t\t\t\n\t\t\t\treturn format;\n\t\t\t}\n    \t\t\n    \t});\n    \t// WMC ViewContext::LayerList::Layer::FormatList::Style\n    \txstream.alias(\"Style\", WMCStyle.class);\n    \txstream.useAttributeFor(WMCStyle.class, \"current\");\n    \txstream.aliasField(\"SLD\", WMCStyle.class, \"sld\");\n    \txstream.aliasField(\"OnlineResource\", WMCSLD.class, \"onlineResource\");\n    \t// WMC ViewContext::LayerList::Layer::Extension\n    \txstream.alias(\"Extension\", WMCExtension.class);\n    \t\n    \t// WMC ViewContext::LayerList::Layer::Extension::OL\n    \txstream.aliasField(\"ol:id\", WMCExtension.class, \"id\");\n    \txstream.aliasField(\"ol:transparent\", WMCExtension.class, \"transparent\");\n    \txstream.aliasField(\"ol:isBaseLayer\", WMCExtension.class, \"isBaseLayer\");\n    \txstream.aliasField(\"ol:opacity\", WMCExtension.class, \"opacity\");\n    \txstream.aliasField(\"ol:displayInLayerSwitcher\", WMCExtension.class, \"displayInLayerSwitcher\");\n    \txstream.aliasField(\"ol:singleTile\", WMCExtension.class, \"singleTile\");\n    \txstream.aliasField(\"ol:numZoomLevels\", WMCExtension.class, \"numZoomLevels\");\n    \txstream.aliasField(\"ol:units\", WMCExtension.class, \"units\");\n    \txstream.aliasField(\"ol:maxExtent\", WMCExtension.class, \"maxExtent\");\n    \txstream.aliasField(\"ol:dimension\", WMCExtension.class, \"time\");\n    \txstream.aliasField(\"ol:dimension\", WMCExtension.class, \"elevation\");\n    \t\n    \txstream.aliasField(\"ol:mainLayer\", WMCExtension.class, \"mainLayer\");\n    \txstream.aliasField(\"ol:styleClassNumber\", WMCExtension.class, \"styleClassNumber\");\n    \txstream.aliasField(\"ol:styleColorRamps\", WMCExtension.class, \"styleColorRamps\");\n    \txstream.aliasField(\"ol:styleMaxValue\", WMCExtension.class, \"styleMaxValue\");\n    \txstream.aliasField(\"ol:styleMinValue\", WMCExtension.class, \"styleMinValue\");\n    \txstream.aliasField(\"ol:styleRestService\", WMCExtension.class, \"styleRestService\");\n    \txstream.aliasField(\"ol:styleLegendService\", WMCExtension.class, \"styleLegendService\");\n    \t\n    \txstream.useAttributeFor(OLStyleColorRamps.class, \"defaultRamp\");\n    \txstream.aliasField(\"default\", OLStyleColorRamps.class, \"defaultRamp\");\n    \t\n    \txstream.registerConverter(new Converter() {\n\t\t\tpublic boolean canConvert(Class clazz) {\n\t\t\t\treturn OLBaseClass.class.isAssignableFrom(clazz);\n\t\t\t}\n\t\t\tpublic void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) {\n\t\t\t\tOLBaseClass ol = (OLBaseClass) value;\n\t\t\t\t\n\t\t\t\twriter.addAttribute(\"xmlns:ol\", ol.getXmlns_ol());\n\t\t\t\t\n\t\t\t\tif (value instanceof OLExtent) {\n\t\t\t\t\tOLExtent extent = (OLExtent) value;\n\t\t\t\t\twriter.addAttribute(\"minx\", extent.getMinx());\n\t\t\t\t\twriter.addAttribute(\"miny\", extent.getMiny());\n\t\t\t\t\twriter.addAttribute(\"maxx\", extent.getMaxx());\n\t\t\t\t\twriter.addAttribute(\"maxy\", extent.getMaxy());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value instanceof OLDimension) {\n\t\t\t\t\tOLDimension dimension = (OLDimension) value;\n\t\t\t\t\twriter.addAttribute(\"name\", dimension.getName());\n\t\t\t\t\twriter.addAttribute(\"default\", dimension.getDefaultValue());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value instanceof OLStyleValue) {\n", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "length": 570, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "a5da7e173afd5ba71e0185228a1df77238c2949ba3ea2935"}
{"input": "", "context": "#!/usr/bin/env python\nimport sys\n#begin dependent modules\n#sys.path.insert(0, \"../\")\nimport yobot_interfaces\nimport yobotproto\nfrom client_support import YCAccount, SimpleNotice\nfrom gui import gui_util\nfrom gui.gui_util import signal_connect, ConnectionWidget\n#end\nimport triviadb\nimport PyQt4\nfrom PyQt4.QtGui import (QComboBox, QMainWindow, QStandardItemModel, QStandardItem,\n                         QIcon, QPixmap, QImage, QPainter, QDialog, QMessageBox,\n                         QApplication, QFont, QTextEdit, QColorDialog, QPalette,\n                         QListWidget, QListWidgetItem, QStyledItemDelegate,\n                         QStyleOptionViewItem, QRegion, QWidget, QBrush, QStyle,\n                         QPushButton, QStyleOption, QMenu, QAction, QCursor,\n                        QLineEdit, QFileDialog, QErrorMessage,\n                         QFontDialog, QColor, QDockWidget, QSizePolicy,\n                         QStackedWidget,\n                         QGridLayout, QLayout, QFrame,\n                         )\nfrom PyQt4.QtCore import (QPoint, QSize, QModelIndex, Qt, QObject, SIGNAL, QVariant,\n                          QAbstractItemModel, QRect, QRectF, QPointF, QT_VERSION)\nfrom debuglog import log_debug, log_info, log_err, log_crit, log_warn\nimport sqlite3.dbapi2 as sqlite3\nimport pickle\nimport lxml.html\nimport re\nfrom time import time\nfrom collections import defaultdict\nimport random\nfrom gui.html_fmt import point_to_html\nimport os.path\nimport yobotops\nfrom cgi import escape as html_escape\nimport datetime\nimport gui_new\n#trivia types\nTYPE_ANAGRAMS, TYPE_TRIVIA, TYPE_BOTH = range(1, 4)\nTRIVIA_ROOT = \"/home/mordy/src/purple/py/triviabot\"\narticle_start_re = re.compile(\"^(the|a) \")\ndef get_categories_list(dbname):\n    dbconn = sqlite3.connect(dbname)\n    ret = []\n    for r in dbconn.cursor().execute(\"select distinct category from questions\"):\n        ret.append(r[0])\n    return ret\ndef scramble_word(word):\n    return \"\".join(random.sample(word, len(word)))\nclass _BlackHole(str):\n    def __init__(self, *args, **kwargs):\n        pass\n    def __getattr__(self, name):\n        return _BlackHole()\n    def __setattr__(self, name, value):\n        pass\n    def __call__(self, *args, **kwargs):\n        pass\n    def __bool__(self):\n        return False\n    def __str__(self):\n        return \"\"\nclass TriviaGui(gui_new.TGui):\n    def __init__(self, parent=None):\n        gui_new.TGui.__init__(self, parent)\n        self.widgets = self\n        w = self.widgets\n        self.model = yobot_interfaces.component_registry.get_component(\"account-model\")\n        self.client_ops = yobot_interfaces.component_registry.get_component(\"client-operations\")\n        assert self.client_ops\n        \n        def _handle_connect(username, password, improto, **proxy_params):\n            self.client_ops.connect(username, password, improto, **proxy_params)\n        \n        def offset_pos_fn():\n            return QPoint(0, self.menubar.height())\n        self.connwidget = gui_util.OverlayConnectionWidget(offset_pos_fn, _handle_connect, self)\n        signal_connect(w.actionConnect, SIGNAL(\"toggled(bool)\"), self.connwidget.setVisible)\n        signal_connect(self.connwidget.widgets.conn_close, SIGNAL(\"clicked()\"),\n                       lambda: w.actionConnect.setChecked(False))\n        if not self.model:\n            w.actionConnect.setChecked(True)\n            self.model = gui_util.AccountModel(None)\n            self.menubar.show()\n        else:\n            self.connwidget.hide()\n        #notification widgets:\n        qdw = QFrame(self)\n        if QT_VERSION >= 0x040600:\n            from PyQt4.QtGui import QGraphicsDropShadowEffect\n            self.notification_shadow = QGraphicsDropShadowEffect(qdw)\n            self.notification_shadow.setBlurRadius(10.0)\n            qdw.setGraphicsEffect(self.notification_shadow)\n        qdw.setFrameShadow(qdw.Raised)\n        qdw.setFrameShape(qdw.StyledPanel)\n        qdw.setAutoFillBackground(True)\n        qsw = QStackedWidget(qdw)\n        qdw.setLayout(QGridLayout())\n        qdw.layout().setSizeConstraint(QLayout.SetMinimumSize)\n        qdw.layout().addWidget(qsw)\n        self._notification_dlg = qdw\n        self.qdw = qdw\n        self.qsw = qsw\n        self.notifications = gui_util.NotificationBox(qdw, qsw, noTitleBar=False)\n        #self.qdw.show()\n        \n        #resize/show events\n        def _force_bottom(event, superclass_fn):\n            log_err(\"\")\n            superclass_fn(self.qdw, event)\n            self.qdw.move(0, self.height()-self.qdw.height())\n        self.qdw.resizeEvent = lambda e: _force_bottom(e, QWidget.resizeEvent)\n        self.qdw.showEvent = lambda e: _force_bottom(e, QWidget.showEvent)\n        \n        #set up account menu\n        w.account.setModel(self.model)\n        \n        for a in (\"start\", \"stop\", \"pause\", \"next\"):\n            gui_util.signal_connect(getattr(w, a), SIGNAL(\"clicked()\"),\n                                    lambda cls=self, a=a: getattr(cls, a + \"_requested\")())\n            getattr(w, a).setEnabled(False)\n        w.start.setEnabled(True)\n                \n        self.anagrams_prefix_blacklist = set()\n        self.anagrams_suffix_blacklist = set()\n        \n        #listWidgetItems\n        def _add_nfix(typestr):\n            txt = getattr(w, typestr + \"_input\").text()\n            if not txt:\n                return\n            txt = str(txt)\n            st = getattr(self, \"anagrams_\" + typestr + \"_blacklist\")\n            target = getattr(w, typestr + \"_list\")\n            if not txt in st:\n                target.addItem(txt)\n                st.add(txt)\n            getattr(w, typestr + \"_input\").clear()\n        def _remove_nfix(typestr):\n            target = getattr(w, typestr + \"_list\")\n            st = getattr(self, \"anagrams_\" + typestr + \"_blacklist\")\n            item = target.currentItem()\n            if item:\n                txt = str(item.text())\n                assert txt in st\n                target.takeItem(target.row(item))\n                st.remove(txt)\n            else:\n                log_warn(\"item is None\")\n        for nfix in (\"suffix\", \"prefix\"):\n            signal_connect(getattr(w, nfix + \"_add\"), SIGNAL(\"clicked()\"),\n                lambda typestr=nfix: _add_nfix(typestr))\n            signal_connect(getattr(w, nfix + \"_del\"), SIGNAL(\"clicked()\"),\n                lambda typestr=nfix: _remove_nfix(typestr))\n            \n        #hide the extended options\n        w.questions_categories_params.hide()\n        w.suffix_prefix_options.hide()\n        \n        self.resize(self.minimumSizeHint())\n    \n        #connect signals for enabling the start button\n        signal_connect(w.account, SIGNAL(\"currentIndexChanged(int)\"), self._enable_start)\n        signal_connect(w.room, SIGNAL(\"activated(int)\"), self._enable_start)\n        signal_connect(w.room, SIGNAL(\"editTextchanged(QString)\"), self._enable_start)\n        signal_connect(w.questions_database, SIGNAL(\"textChanged(QString)\"), self.questions_dbfile_changed)\n        signal_connect(w.questions_database, SIGNAL(\"textChanged(QString)\"), self._validate_questions_db)\n        signal_connect(w.anagrams_database, SIGNAL(\"textChanged(QString)\"), self._validate_anagrams_db)\n        \n        signal_connect(w.questions_database, SIGNAL(\"textChanged(QString)\"), self._enable_start)\n        signal_connect(w.anagrams_database, SIGNAL(\"textChanged(QString)\"), self._enable_start)\n        \n        #category list for questions:\n        self.selected_questions_categories = set()\n        def _unselect(lwitem):\n            row = w.selected_categories.row(lwitem)\n            self.selected_questions_categories.remove(str(lwitem.text()))\n            self.widgets.selected_categories.takeItem(row)\n        def _select(lwitem):\n            category = str(lwitem.text())\n            if not category in self.selected_questions_categories:\n                log_debug(\"Adding\", category)\n                self.selected_questions_categories.add(category)\n                w.selected_categories.addItem(category)\n        signal_connect(w.questions_categories, SIGNAL(\"itemDoubleClicked(QListWidgetItem*)\"), _select)\n        signal_connect(w.selected_categories, SIGNAL(\"itemDoubleClicked(QListWidgetItem*)\"), _unselect)\n        \n        \n        self.anagrams_db_is_valid = False\n        self.questions_db_is_valid = False\n        \n        #profile stuff..\n        signal_connect(w.actionLoad, SIGNAL(\"activated()\"), lambda: self.profile_handler(load=True))\n        signal_connect(w.actionSave, SIGNAL(\"activated()\"), lambda: self.profile_handler(save=True))\n        signal_connect(w.actionSave_As, SIGNAL(\"activated()\"), lambda: self.profile_handler(save_as=True))\n        self.current_profile_name = \"\"\n                \n        w.suffix_prefix_options.sizeHint = lambda: QSize(1,1)\n        w.questions_categories_params.sizeHint = lambda: QSize(1,1)\n                \n        self.show()\n            \n    def _validate_anagrams_db(self, db):\n        dbconn = None\n        db = str(db)\n        try:\n            assert os.path.exists(db)\n            dbconn = sqlite3.connect(db)\n            cursor = dbconn.cursor()\n            cursor.execute(\"select word from words limit 1\").fetchone()[0]\n            self.anagrams_db_is_valid = True\n        except Exception, e:\n            log_err(e)\n            self.anagrams_db_is_valid = False\n            QErrorMessage(self).showMessage(\"Anagrams database is invalid: \" + str(e))\n        finally:\n            if dbconn:\n                dbconn.close()\n    def _validate_questions_db(self, db):\n        dbconn = None\n        db = str(db)\n        try:\n            assert os.path.exists(db)\n            dbconn = sqlite3.connect(db)\n            cursor = dbconn.cursor()\n            cursor.execute(\"select id, frequency, question, answer, alt_answers from questions limit 1\").fetchone()[0]\n            self.questions_db_is_valid = True\n        except Exception, e:\n            log_err(e)\n            self.questions_db_is_valid = False\n            QErrorMessage(self).showMessage(\"Questions database is invalid: \" + str(e))\n        finally:\n            if dbconn:\n                dbconn.close()    \n    \n    def _dbs_are_valid(self):\n        type = str(self.widgets.questions_type.currentText()).lower()\n        if type == \"mix\" and not ( self.anagrams_db_is_valid and self.questions_db_is_valid):\n            return False\n        elif type == \"anagrams\" and not self.anagrams_db_is_valid:\n            return False\n        elif type == \"trivia\" and not self.questions_db_is_valid:\n            return False        \n        return True\n        \n    def _enable_start(self, *args):\n        w = self.widgets\n        if w.account.currentText() and w.room.currentText() and self._dbs_are_valid():\n            w.start.setEnabled(True)\n        else:\n            w.start.setEnabled(False)        \n            \n    #some hooks\n    def questions_dbfile_changed(self, dbname):\n        self.widgets.questions_categories.clear()\n        try:\n            l = get_categories_list(str(dbname))\n        except Exception, e:\n            log_err(e)\n            return\n        for s in l:\n            if s:\n                self.widgets.questions_categories.addItem(str(s))\n    @staticmethod\n    def create_profile_mappings():\n        #make a tuple.\n        #format: (cast_fn, get_fn, set_fn)\n        d = {}\n        \n        #integers\n        for a in (\"post_interval\", \"answer_timeout\", \"percent_anagrams\", \"percent_trivia\",\n                  \"amount\", \"anagrams_letters_min\", \"anagrams_letters_max\"):\n            d[a] = (\"int\", \"value\", \"setValue\")\n        \n        #strings\n        for a in (\"anagrams_database\", \"questions_database\"):\n            d[a] = (\"str\", \"text\", \"setText\")\n        \n        #booleans\n        for a in (\"updatedb_bool\", \"anagrams_caps_hint\", \"questions_blacklist\",\n                  \"questions_use_categories\", \"anagrams_use_nfixes\"):\n            d[a] = (\"bool\", \"isChecked\", \"setChecked\")\n        \n        #room combobox\n        d[\"room\"] = (\"str\", \"currentText\", \"addItem\")\n        \n        return d\n        #for accounts, we need to do some special handling because they are\n        #referenced by index\n    \n    def save_profile(self, profile_name):\n        try:\n            f = open(profile_name, \"w\")\n            f.write(\"#Yobot Trivia Profile Settings automatically generated on %s\\n\" %\n                    str(datetime.datetime.now()))\n            f.write(\"#Configuration is case-sensitive. Use 'True' and 'False' for boolean values\\n\")\n            f.write(\"#this file is parsed directly using python's eval\\n\")\n            \n            d = TriviaGui.create_profile_mappings()\n            for k, v in d.items():\n                #k is the attribute\n                field = getattr(self.widgets, k)\n                cast, getter, setter = v\n                value = getattr(field, getter)() if getter else field\n                \n                if cast == \"str\":\n                    value = str(value)\n                #if not value and cast == \"bool\":\n                #    value = int(value)\n                if not value and cast == \"str\":\n                    value = \"\"\n                    \n                f.write(k + \"=\" + repr(value) + \"\\n\")\n            \n            #for account..\n            acct_index = self.widgets.account.currentIndex()\n            acct_index = self.model.index(acct_index)\n            account = acct_index.internalPointer()\n            if account:\n                f.write(\"account_username=\" + account.user + \"\\n\")\n                f.write(\"account_improto=\" + yobotops.imprototostr(account.improto) + \"\\n\")\n            \n            #for complex types\n            for c in (\"anagrams_suffix_blacklist\", \"anagrams_prefix_blacklist\",\n                      \"selected_questions_categories\"):\n                log_info(getattr(self, c))\n                f.write(c + \"=\" + repr(getattr(self, c)) + \"\\n\")\n            \n            #for font and color:\n            if self.font:\n                f.write(\"font=\" + self.font.toString() + \"\\n\")\n            if self.color:\n                f.write(\"color=\" + self.color.name() + \"\\n\")\n            #for type, just write the current type\n            f.write(\"questions_type=\" + self.widgets.questions_type.currentText() + \"\\n\")\n            #for the blacklists/whitelists..\n            \n            f.close()\n            return True\n        except Exception, e:\n            QErrorMessage(self).showMessage(str(e))\n            return False\n    def load_profile(self, profile_name):\n        d = TriviaGui.create_profile_mappings()\n        try:\n            f = open(profile_name, \"r\")\n            for l in f.readlines():\n                if l.strip()[0] in (\"#\", \";\"):\n                    continue\n                k, v = [s.strip() for s in l.split(\"=\")]\n                dkey = d.get(k, None)\n                if not dkey:\n                    #complex handling\n                    if k in (\"anagrams_prefix_blacklist\", \"anagrams_suffix_blacklist\"):\n                        tmp = k.split(\"_\")[1]\n                        getattr(self, k).clear()\n                        getattr(self, k).update([str(s) for s in eval(v)])\n                        getattr(self.widgets, tmp + \"_list\").clear()\n                        getattr(self.widgets, tmp + \"_list\").addItems(list(getattr(self, k)))\n                    elif k == \"selected_questions_categories\":\n                        getattr(self, k).clear()\n                        getattr(self, k).update(eval(v))\n                        getattr(self.widgets, \"selected_categories\").clear()\n                        getattr(self.widgets, \"selected_categories\").addItems(list(getattr(self, k)))\n                    elif k == \"font\":\n                        self.font = QFont()\n                        self.font.fromString(v)\n                        self._gen_font_stylesheet()\n                        self._update_fmtstr()\n                    elif k == \"color\":\n                        self.color = QColor(v)\n                        self._gen_font_stylesheet()\n                        self._update_fmtstr()\n                    else:\n                        log_warn(\"unknown key\", k)\n                    continue\n                cast, getter, setter = dkey\n                field = getattr(self.widgets, k)\n                #getattr(field, setter)(eval(cast)(v))\n                getattr(field, setter)(eval(v))\n            f.close()\n            return True\n        except Exception, e:\n            QErrorMessage(self).showMessage(str(e))\n            return False\n        \n    def profile_handler(self, load=False, save=False, save_as=False):\n        if load:\n            profile = QFileDialog.getOpenFileName(self, \"Select Profile\", TRIVIA_ROOT)\n            if profile and self.load_profile(profile):\n                self.current_profile_name = profile\n        elif save:\n            if self.current_profile_name:\n                self.save_profile(self.current_profile_name)\n        elif save_as:\n            profile = QFileDialog.getSaveFileName(self, \"Save Profile\", TRIVIA_ROOT)\n            if profile:\n                self.save_profile(profile)\n                \n    def start_requested(self):\n        log_err(\"implement me\")\n    def stop_requested(self):\n        log_err(\"implement me\")\n    def pause_requested(self):\n        log_err(\"implement me\")\n    def next_requested(self):\n        log_err(\"implement me\")\n        \n    def got_notification(self, notification_object):\n        self.notifications.addItem(notification_object)\n        self._notification_dlg.show()\n    def del_notification(self, notification_object):\n        self.notifications.delItem(notification_object)\nclass _QAData(object):\n    def __init__(self):\n        self.question = None\n        self.answers = []\n        self.id = -1\n        self.category = None\n        self.type = None\n    def ask_string(self):\n        pass\n    def hint_string(self):\n        pass\n    def is_correct(self, answer):\n        for a in self.answers:\n            if a.lower() in answer.lower():\n                return True\n        return False\nclass _QuestionData(_QAData):\n    def ask_string(self):\n        return \"Category %s: %s\" % (self.category, self.question)\n    def hint_string(self):\n        ret = \"\"\n", "answers": ["        longest = max(self.answers)"], "length": 1229, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "3bd5a501fc0327fd7bcda8389c7d11b3a821c9b5ce5a93cc"}
{"input": "", "context": "/**************************************\n*Script Name: Staff Runebook          *\n*Author: Joeku                        *\n*For use with RunUO 2.0 RC2           *\n*Client Tested with: 6.0.9.2          *\n*Version: 1.10                        *\n*Initial Release: 11/25/07            *\n*Revision Date: 02/04/09              *\n**************************************/\nusing System;\nusing System.Collections.Generic;\nusing Server;\nusing Server.Gumps;\nusing Server.Items;\nusing Server.Network;\nnamespace Joeku.SR\n{\n    public class SR_Gump : Gump\n    {\n        public SR_RuneAccount RuneAcc { get; set; }\n        public SR_Gump(Mobile m, SR_RuneAccount runeAcc)\n            : base(0, 27)\n        {\n            RuneAcc = runeAcc;\n            int count = 0;\n            if (RuneAcc.ChildRune == null)\n                count = RuneAcc.Count;\n            else\n                count = RuneAcc.ChildRune.Count;\n            int RunebooksH = 0,\n            RunebooksW = 0;\n            int tier = -1;\n            if (RuneAcc.ChildRune != null)\n                tier = RuneAcc.ChildRune.Tier;\n            if (tier > -1)\n            {\n                if (tier == 0)\n                {\n                    RunebooksH = 42;\n                    RunebooksW = 278;\n                }\n                else\n                {\n                    RunebooksH = 37 + 42;\n                    RunebooksW = 278 + (tier * 5);\n                }\n            }\n            int RunesH = 10 * 2;\n            if (count > 10)\n                count = 10;\n            if (count > 0)\n                RunesH += (count * 22);\n            if (count > 1)\n                RunesH += ((count - 1) * 5);\n            DisplayHeader();\n            int labelHue = m != null && m.NetState != null && m.NetState.IsEnhancedClient ? 2101 : 2100;\n            if (tier > -1)\n                DisplayRunebooks(42, RunebooksH, RunebooksW, tier, labelHue);\n            DisplayAddNew(42 + RunebooksH + RunesH, labelHue);\n            DisplayRunes(42 + RunebooksH, RunesH, labelHue);\n        }\n        public static void Send(Mobile mob, SR_RuneAccount runeAcc)\n        {\n            mob.CloseGump(typeof(SR_Gump));\n            mob.SendGump(new SR_Gump(mob, runeAcc));\n        }\n        public void DisplayHeader()\n        {\n            AddPage(0);\n            AddBackground(0, 0, 210, 42, 9270); \n            AddImageTiled(10, 10, 190, 22, 2624); \n            AddAlphaRegion(10, 10, 190, 22);\n            AddHtml(0, 11, 210, 20, \"<CENTER><BASEFONT COLOR=#FFFFFF><BIG>Joeku's Staff Runebook</CENTER>\", false, false);\n        }\n        public void DisplayRunebooks(int y, int h, int w, int tiers, int labelHue)\n        {\n            AddBackground(0, y, w, h, 9270);\n            AddImageTiled(10, y + 10, w - 20, h - 20, 2624); \n            AddAlphaRegion(10, y + 10, w - 20, h - 20); \n            for (int i = tiers, j = 1; i > 0; i--, j++)\n            {\n                AddBackground(j * 5, y + 37, ((i - 1) * 5) + 278, 42, 9270);\n                if (i == 1)\n                {\n                    AddImageTiled((j * 5) + 10, y + 47, ((i - 1) * 5) + 258, 22, 2624); \n                    AddAlphaRegion((j * 5) + 10, y + 47, ((i - 1) * 5) + 258, 22); \n                }\n            }\n            SR_Rune rune = RuneAcc.Runes[RuneAcc.PageIndex];\n            AddItem(SR_Utilities.ItemOffsetX(rune), y + SR_Utilities.ItemOffsetY(rune) + 12, SR_Utilities.RunebookID, SR_Utilities.ItemHue(rune));\n            AddLabelCropped(35, y + 12, w - 108, 20, labelHue, rune.Name); \n            AddButton(w - 70, y + 10, 4014, 4016, 5, GumpButtonType.Reply, 0); \n            AddButton(w - 40, y + 10, 4017, 4019, 4, GumpButtonType.Reply, 0); \n            if (tiers > 0)\n            {\n                rune = RuneAcc.ChildRune;\n                AddItem(SR_Utilities.ItemOffsetX(rune) + tiers * 5, y + SR_Utilities.ItemOffsetY(rune) + 12 + 37, SR_Utilities.RunebookID, SR_Utilities.ItemHue(rune));\n                AddLabelCropped(35 + tiers * 5, y + 12 + 37, 170, 20, labelHue, rune.Name); \n                AddButton(w - 70, y + 10 + 37, 4014, 4016, 7, GumpButtonType.Reply, 0); \n                AddButton(w - 40, y + 10 + 37, 4017, 4019, 6, GumpButtonType.Reply, 0); \n            }\n            // AddButton(238, 30 + bgY + 10, 4011, 4013, 0, GumpButtonType.Reply, 0); \n        }\n        public void DisplayAddNew(int y, int labelHue)\n        { \n            AddBackground(0, y, 278, 42, 9270); \n            AddImageTiled(10, y + 10, 258, 22, 2624); \n            AddAlphaRegion(10, y + 10, 258, 22);\n            AddLabel(15, y + 10, labelHue, @\"New Rune\"); \n            AddButton(80, y + 10, 4011, 4013, 1, GumpButtonType.Reply, 0); \n            AddButton(110, y + 10, 4029, 4031, 2, GumpButtonType.Reply, 0);\n            AddLabel(150, y + 10, labelHue, @\"New Runebook\"); \n            AddButton(238, y + 10, 4011, 4013, 3, GumpButtonType.Reply, 0); \n        }\n        public void DisplayRunes(int y, int h, int labelHue)\n        {\n            AddBackground(0, y, 430/*400*/, h, 9270); \n            AddImageTiled(10, y + 10, 410, h - 20, 2624); \n            AddAlphaRegion(10, y + 10, 410, h - 20); \n            List<SR_Rune> runes = null;\n            int count, runebooks;\n            if (RuneAcc.ChildRune == null)\n            {\n                runes = RuneAcc.Runes;\n                count = RuneAcc.Count;\n                runebooks = RuneAcc.RunebookCount;\n            }\n            else\n            {\n                runes = RuneAcc.ChildRune.Runes;\n                count = RuneAcc.ChildRune.Count;\n                runebooks = RuneAcc.ChildRune.RunebookCount;\n            }\n\t\t\t\n            AddPage(1);\n            int pages = (int)Math.Ceiling((double)count / 9.0), temp = 0;\n            for (int i = 0, loc = 0, page = 1; i < count; i++, loc++)\n            {\n                temp = 10 + y + (22 + 5) * loc;\n                AddItem(SR_Utilities.ItemOffsetX(runes[i]), 2 + SR_Utilities.ItemOffsetY(runes[i]) + temp, runes[i].IsRunebook ? SR_Utilities.RunebookID : SR_Utilities.RuneID, SR_Utilities.ItemHue(runes[i])); \n                if (runes[i].IsRunebook)\n                    AddLabelCropped(35, 2 + temp, 175, 20, labelHue, String.Format(\"{0}. {1}\", i + 1, runes[i].Name)); \n                else\n                {\n                    AddLabelCropped(35, 2 + temp, 175, 20, labelHue, String.Format(\"{0}. {1} ({2})\", i + 1 - runebooks, runes[i].Name, runes[i].TargetMap.ToString()));\n                    AddLabelCropped(215, 2 + temp, 110, 20, labelHue, runes[i].TargetLoc.ToString()); \n                    AddButton(360, temp, 4008, 4010, i + 30010, GumpButtonType.Reply, 0); \n                }\n                AddButton(330 + (runes[i].IsRunebook ? 30 : 0), temp, 4005, 4007, i + 10, GumpButtonType.Reply, 0); \n                //AddButton(340, 40 + ((22+5)*i), 4026, 4028, 0, GumpButtonType.Reply, 0); \n                //AddImage(340, 40 + ((22+5)*i), 4026, 1000); \n                AddButton(390, temp, 4017, 4019, i + 60010, GumpButtonType.Reply, 0); // delete\n                if (pages > 1 && ((loc == 8 && i < count - 1) || i == count - 1))\n                {\n                    temp = 10 + y + (22 + 5) * 9;\n                    // (430(bg) - 20 (buffer) - 70 (txt/buffer) - 60(buttons)) / 2 = 140\n                    if (page > 1)\n                        AddButton(140, temp, 4014, 4016, 0, GumpButtonType.Page, page - 1);\n                    else\n                        AddImage(140, temp, 4014, 1000);\n                    AddHtml(170, 2 + temp, 90, 20, String.Format(\"<BASEFONT COLOR=#FFFFFF><CENTER>Page {0}/{1}\", page, pages), false, false);\n\t\t\t\t\t\n                    if (page < pages)\n                        AddButton(260, temp, 4005, 4007, 0, GumpButtonType.Page, page + 1);\n                    else\n                        AddImage(260, temp, 4005, 1000);\n                    page++;\n                    AddPage(page);\n                    loc = -1;\n                }\n            }\n        }\n        public override void OnResponse(NetState sender, RelayInfo info)\n        {\n            int button = info.ButtonID;\n            Mobile mob = sender.Mobile;\n            switch( button )\n            {\n                case 0:\n                    break;\n                case 1:\t\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 2:\n                    mob.SendMessage(\"Target a location to mark:\");\n", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "length": 907, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "227b063979c62ee1de7436be168450b5a7712a7a637fa6d4"}
{"input": "", "context": "/*\n * Copyright (c) 1996, 2012, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage sun.security.ssl;\nimport java.io.*;\nimport java.math.BigInteger;\nimport java.security.*;\nimport java.security.interfaces.*;\nimport java.security.spec.*;\nimport java.security.cert.*;\nimport java.security.cert.Certificate;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.lang.reflect.*;\nimport javax.security.auth.x500.X500Principal;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.DHPublicKeySpec;\nimport javax.net.ssl.*;\nimport sun.security.internal.spec.TlsPrfParameterSpec;\nimport sun.security.ssl.CipherSuite.*;\nimport static sun.security.ssl.CipherSuite.PRF.*;\nimport sun.security.util.KeyUtil;\n/**\n * Many data structures are involved in the handshake messages.  These\n * classes are used as structures, with public data members.  They are\n * not visible outside the SSL package.\n *\n * Handshake messages all have a common header format, and they are all\n * encoded in a \"handshake data\" SSL record substream.  The base class\n * here (HandshakeMessage) provides a common framework and records the\n * SSL record type of the particular handshake message.\n *\n * This file contains subclasses for all the basic handshake messages.\n * All handshake messages know how to encode and decode themselves on\n * SSL streams; this facilitates using the same code on SSL client and\n * server sides, although they don't send and receive the same messages.\n *\n * Messages also know how to print themselves, which is quite handy\n * for debugging.  They always identify their type, and can optionally\n * dump all of their content.\n *\n * @author David Brownell\n */\npublic abstract class HandshakeMessage {\n    HandshakeMessage() { }\n    // enum HandshakeType:\n    static final byte   ht_hello_request = 0;\n    static final byte   ht_client_hello = 1;\n    static final byte   ht_server_hello = 2;\n    static final byte   ht_certificate = 11;\n    static final byte   ht_server_key_exchange = 12;\n    static final byte   ht_certificate_request = 13;\n    static final byte   ht_server_hello_done = 14;\n    static final byte   ht_certificate_verify = 15;\n    static final byte   ht_client_key_exchange = 16;\n    static final byte   ht_finished = 20;\n    /* Class and subclass dynamic debugging support */\n    public static final Debug debug = Debug.getInstance(\"ssl\");\n    /**\n     * Utility method to convert a BigInteger to a byte array in unsigned\n     * format as needed in the handshake messages. BigInteger uses\n     * 2's complement format, i.e. it prepends an extra zero if the MSB\n     * is set. We remove that.\n     */\n    static byte[] toByteArray(BigInteger bi) {\n        byte[] b = bi.toByteArray();\n        if ((b.length > 1) && (b[0] == 0)) {\n            int n = b.length - 1;\n            byte[] newarray = new byte[n];\n            System.arraycopy(b, 1, newarray, 0, n);\n            b = newarray;\n        }\n        return b;\n    }\n    /*\n     * SSL 3.0 MAC padding constants.\n     * Also used by CertificateVerify and Finished during the handshake.\n     */\n    static final byte[] MD5_pad1 = genPad(0x36, 48);\n    static final byte[] MD5_pad2 = genPad(0x5c, 48);\n    static final byte[] SHA_pad1 = genPad(0x36, 40);\n    static final byte[] SHA_pad2 = genPad(0x5c, 40);\n    private static byte[] genPad(int b, int count) {\n        byte[] padding = new byte[count];\n        Arrays.fill(padding, (byte)b);\n        return padding;\n    }\n    /*\n     * Write a handshake message on the (handshake) output stream.\n     * This is just a four byte header followed by the data.\n     *\n     * NOTE that huge messages -- notably, ones with huge cert\n     * chains -- are handled correctly.\n     */\n    final void write(HandshakeOutStream s) throws IOException {\n        int len = messageLength();\n        if (len >= Record.OVERFLOW_OF_INT24) {\n            throw new SSLException(\"Handshake message too big\"\n                + \", type = \" + messageType() + \", len = \" + len);\n        }\n        s.write(messageType());\n        s.putInt24(len);\n        send(s);\n    }\n    /*\n     * Subclasses implement these methods so those kinds of\n     * messages can be emitted.  Base class delegates to subclass.\n     */\n    abstract int  messageType();\n    abstract int  messageLength();\n    abstract void send(HandshakeOutStream s) throws IOException;\n    /*\n     * Write a descriptive message on the output stream; for debugging.\n     */\n    abstract void print(PrintStream p) throws IOException;\n//\n// NOTE:  the rest of these classes are nested within this one, and are\n// imported by other classes in this package.  There are a few other\n// handshake message classes, not neatly nested here because of current\n// licensing requirement for native (RSA) methods.  They belong here,\n// but those native methods complicate things a lot!\n//\n/*\n * HelloRequest ... SERVER --> CLIENT\n *\n * Server can ask the client to initiate a new handshake, e.g. to change\n * session parameters after a connection has been (re)established.\n */\nstatic final class HelloRequest extends HandshakeMessage {\n    @Override\n    int messageType() { return ht_hello_request; }\n    HelloRequest() { }\n    HelloRequest(HandshakeInStream in) throws IOException\n    {\n        // nothing in this message\n    }\n    @Override\n    int messageLength() { return 0; }\n    @Override\n    void send(HandshakeOutStream out) throws IOException\n    {\n        // nothing in this messaage\n    }\n    @Override\n    void print(PrintStream out) throws IOException\n    {\n        out.println(\"*** HelloRequest (empty)\");\n    }\n}\n/*\n * ClientHello ... CLIENT --> SERVER\n *\n * Client initiates handshake by telling server what it wants, and what it\n * can support (prioritized by what's first in the ciphe suite list).\n *\n * By RFC2246:7.4.1.2 it's explicitly anticipated that this message\n * will have more data added at the end ... e.g. what CAs the client trusts.\n * Until we know how to parse it, we will just read what we know\n * about, and let our caller handle the jumps over unknown data.\n */\nstatic final class ClientHello extends HandshakeMessage {\n    ProtocolVersion     protocolVersion;\n    RandomCookie        clnt_random;\n    SessionId           sessionId;\n    private CipherSuiteList    cipherSuites;\n    byte[]              compression_methods;\n    HelloExtensions extensions = new HelloExtensions();\n    private final static byte[]  NULL_COMPRESSION = new byte[] {0};\n    ClientHello(SecureRandom generator, ProtocolVersion protocolVersion,\n            SessionId sessionId, CipherSuiteList cipherSuites) {\n        this.protocolVersion = protocolVersion;\n        this.sessionId = sessionId;\n        this.cipherSuites = cipherSuites;\n        if (cipherSuites.containsEC()) {\n            extensions.add(SupportedEllipticCurvesExtension.DEFAULT);\n            extensions.add(SupportedEllipticPointFormatsExtension.DEFAULT);\n        }\n        clnt_random = new RandomCookie(generator);\n        compression_methods = NULL_COMPRESSION;\n    }\n    ClientHello(HandshakeInStream s, int messageLength) throws IOException {\n        protocolVersion = ProtocolVersion.valueOf(s.getInt8(), s.getInt8());\n        clnt_random = new RandomCookie(s);\n        sessionId = new SessionId(s.getBytes8());\n        cipherSuites = new CipherSuiteList(s);\n        compression_methods = s.getBytes8();\n        if (messageLength() != messageLength) {\n            extensions = new HelloExtensions(s);\n        }\n    }\n    CipherSuiteList getCipherSuites() {\n        return cipherSuites;\n    }\n    // add renegotiation_info extension\n    void addRenegotiationInfoExtension(byte[] clientVerifyData) {\n        HelloExtension renegotiationInfo = new RenegotiationInfoExtension(\n                    clientVerifyData, new byte[0]);\n        extensions.add(renegotiationInfo);\n    }\n    // add server_name extension\n    void addSNIExtension(List<SNIServerName> serverNames) {\n        try {\n            extensions.add(new ServerNameExtension(serverNames));\n        } catch (IOException ioe) {\n            // ignore the exception and return\n        }\n    }\n    // add signature_algorithm extension\n    void addSignatureAlgorithmsExtension(\n            Collection<SignatureAndHashAlgorithm> algorithms) {\n        HelloExtension signatureAlgorithm =\n                new SignatureAlgorithmsExtension(algorithms);\n        extensions.add(signatureAlgorithm);\n    }\n    @Override\n    int messageType() { return ht_client_hello; }\n    @Override\n    int messageLength() {\n        /*\n         * Add fixed size parts of each field...\n         * version + random + session + cipher + compress\n         */\n        return (2 + 32 + 1 + 2 + 1\n            + sessionId.length()                /* ... + variable parts */\n            + (cipherSuites.size() * 2)\n            + compression_methods.length)\n            + extensions.length();\n    }\n    @Override\n    void send(HandshakeOutStream s) throws IOException {\n        s.putInt8(protocolVersion.major);\n        s.putInt8(protocolVersion.minor);\n        clnt_random.send(s);\n        s.putBytes8(sessionId.getId());\n        cipherSuites.send(s);\n        s.putBytes8(compression_methods);\n        extensions.send(s);\n    }\n    @Override\n    void print(PrintStream s) throws IOException {\n        s.println(\"*** ClientHello, \" + protocolVersion);\n        if (debug != null && Debug.isOn(\"verbose\")) {\n            s.print(\"RandomCookie:  \");\n            clnt_random.print(s);\n            s.print(\"Session ID:  \");\n            s.println(sessionId);\n            s.println(\"Cipher Suites: \" + cipherSuites);\n            Debug.println(s, \"Compression Methods\", compression_methods);\n            extensions.print(s);\n            s.println(\"***\");\n        }\n    }\n}\n/*\n * ServerHello ... SERVER --> CLIENT\n *\n * Server chooses protocol options from among those it supports and the\n * client supports.  Then it sends the basic session descriptive parameters\n * back to the client.\n */\nstatic final\nclass ServerHello extends HandshakeMessage\n{\n    @Override\n    int messageType() { return ht_server_hello; }\n    ProtocolVersion     protocolVersion;\n    RandomCookie        svr_random;\n    SessionId           sessionId;\n    CipherSuite         cipherSuite;\n    byte                compression_method;\n    HelloExtensions extensions = new HelloExtensions();\n    ServerHello() {\n        // empty\n    }\n    ServerHello(HandshakeInStream input, int messageLength)\n            throws IOException {\n        protocolVersion = ProtocolVersion.valueOf(input.getInt8(),\n                                                  input.getInt8());\n        svr_random = new RandomCookie(input);\n        sessionId = new SessionId(input.getBytes8());\n        cipherSuite = CipherSuite.valueOf(input.getInt8(), input.getInt8());\n        compression_method = (byte)input.getInt8();\n        if (messageLength() != messageLength) {\n            extensions = new HelloExtensions(input);\n        }\n    }\n    @Override\n    int messageLength()\n    {\n        // almost fixed size, except session ID and extensions:\n        //      major + minor = 2\n        //      random = 32\n        //      session ID len field = 1\n        //      cipher suite + compression = 3\n        //      extensions: if present, 2 + length of extensions\n        return 38 + sessionId.length() + extensions.length();\n    }\n    @Override\n    void send(HandshakeOutStream s) throws IOException\n    {\n        s.putInt8(protocolVersion.major);\n        s.putInt8(protocolVersion.minor);\n        svr_random.send(s);\n        s.putBytes8(sessionId.getId());\n        s.putInt8(cipherSuite.id >> 8);\n        s.putInt8(cipherSuite.id & 0xff);\n        s.putInt8(compression_method);\n        extensions.send(s);\n    }\n    @Override\n    void print(PrintStream s) throws IOException\n    {\n        s.println(\"*** ServerHello, \" + protocolVersion);\n        if (debug != null && Debug.isOn(\"verbose\")) {\n            s.print(\"RandomCookie:  \");\n            svr_random.print(s);\n            s.print(\"Session ID:  \");\n            s.println(sessionId);\n            s.println(\"Cipher Suite: \" + cipherSuite);\n            s.println(\"Compression Method: \" + compression_method);\n            extensions.print(s);\n            s.println(\"***\");\n        }\n    }\n}\n/*\n * CertificateMsg ... send by both CLIENT and SERVER\n *\n * Each end of a connection may need to pass its certificate chain to\n * the other end.  Such chains are intended to validate an identity with\n * reference to some certifying authority.  Examples include companies\n * like Verisign, or financial institutions.  There's some control over\n * the certifying authorities which are sent.\n *\n * NOTE: that these messages might be huge, taking many handshake records.\n * Up to 2^48 bytes of certificate may be sent, in records of at most 2^14\n * bytes each ... up to 2^32 records sent on the output stream.\n */\nstatic final\nclass CertificateMsg extends HandshakeMessage\n{\n    @Override\n    int messageType() { return ht_certificate; }\n    private X509Certificate[] chain;\n    private List<byte[]> encodedChain;\n    private int messageLength;\n    CertificateMsg(X509Certificate[] certs) {\n        chain = certs;\n    }\n    CertificateMsg(HandshakeInStream input) throws IOException {\n        int chainLen = input.getInt24();\n        List<Certificate> v = new ArrayList<>(4);\n        CertificateFactory cf = null;\n        while (chainLen > 0) {\n            byte[] cert = input.getBytes24();\n            chainLen -= (3 + cert.length);\n            try {\n                if (cf == null) {\n                    cf = CertificateFactory.getInstance(\"X.509\");\n                }\n                v.add(cf.generateCertificate(new ByteArrayInputStream(cert)));\n            } catch (CertificateException e) {\n                throw (SSLProtocolException)new SSLProtocolException(\n                    e.getMessage()).initCause(e);\n            }\n        }\n        chain = v.toArray(new X509Certificate[v.size()]);\n    }\n    @Override\n    int messageLength() {\n        if (encodedChain == null) {\n            messageLength = 3;\n            encodedChain = new ArrayList<byte[]>(chain.length);\n            try {\n                for (X509Certificate cert : chain) {\n                    byte[] b = cert.getEncoded();\n                    encodedChain.add(b);\n                    messageLength += b.length + 3;\n                }\n            } catch (CertificateEncodingException e) {\n                encodedChain = null;\n                throw new RuntimeException(\"Could not encode certificates\", e);\n            }\n        }\n        return messageLength;\n    }\n    @Override\n    void send(HandshakeOutStream s) throws IOException {\n        s.putInt24(messageLength() - 3);\n        for (byte[] b : encodedChain) {\n            s.putBytes24(b);\n        }\n    }\n    @Override\n    void print(PrintStream s) throws IOException {\n        s.println(\"*** Certificate chain\");\n        if (debug != null && Debug.isOn(\"verbose\")) {\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "length": 1820, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "f652398c3e8be338b4a7873ba6fecc5a686204d99a1a8d10"}
{"input": "", "context": "/*\n * jPOS Project [http://jpos.org]\n * Copyright (C) 2000-2015 Alejandro P. Revilla\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage org.jpos.space;\nimport java.io.*;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Set;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.Semaphore;\nimport com.sleepycat.je.*;\nimport com.sleepycat.persist.EntityStore; \nimport com.sleepycat.persist.StoreConfig; \nimport com.sleepycat.persist.EntityCursor;\nimport com.sleepycat.persist.PrimaryIndex;\nimport com.sleepycat.persist.SecondaryIndex;\nimport com.sleepycat.persist.model.Entity;\nimport com.sleepycat.persist.model.Persistent;\nimport com.sleepycat.persist.model.PrimaryKey;\nimport com.sleepycat.persist.model.SecondaryKey;\nimport com.sleepycat.persist.model.Relationship;\nimport java.util.HashSet;\nimport java.util.concurrent.TimeUnit;\nimport org.jpos.util.Log;\nimport org.jpos.util.Loggeable;\n/**\n * BerkeleyDB Jave Edition based persistent space implementation\n *\n * @author Alejandro Revilla\n * @since 1.6.5\n */\n@SuppressWarnings(\"unchecked\")\npublic class JESpace<K,V> extends Log implements LocalSpace<K,V>, Loggeable, Runnable {\n    Environment dbe = null;\n    EntityStore store = null;\n    PrimaryIndex<Long, Ref> pIndex = null;\n    PrimaryIndex<Long,GCRef> gcpIndex = null;\n    SecondaryIndex<String,Long, Ref> sIndex = null;\n    SecondaryIndex<Long,Long,GCRef> gcsIndex = null;\n    Semaphore gcSem = new Semaphore(1);\n    LocalSpace<Object,SpaceListener> sl;\n    private static final long NRD_RESOLUTION = 500L;\n    public static final long GC_DELAY = 60*1000L;\n    private Future gcTask;\n    static final Map<String,Space> spaceRegistrar = \n        new HashMap<String,Space> ();\n    public JESpace(String name, String path) throws SpaceError {\n        super();\n        try {\n            EnvironmentConfig envConfig = new EnvironmentConfig();\n            StoreConfig storeConfig = new StoreConfig();\n            envConfig.setAllowCreate (true);\n            envConfig.setTransactional(true);\n            // envConfig.setTxnTimeout(5L, TimeUnit.MINUTES);\n            envConfig.setLockTimeout(5, TimeUnit.SECONDS);\n            storeConfig.setAllowCreate (true);\n            storeConfig.setTransactional (true);\n            File dir = new File(path);\n            dir.mkdirs();\n            dbe = new Environment (dir, envConfig);\n            store = new EntityStore (dbe, name, storeConfig);\n            pIndex = store.getPrimaryIndex (Long.class, Ref.class);\n            gcpIndex = store.getPrimaryIndex (Long.class, GCRef.class);\n            sIndex = store.getSecondaryIndex (pIndex, String.class, \"key\");\n            gcsIndex = store.getSecondaryIndex (gcpIndex, Long.class, \"expires\");\n            gcTask = SpaceFactory.getGCExecutor().scheduleAtFixedRate(this, GC_DELAY, GC_DELAY, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            throw new SpaceError (e);\n        }\n    }\n    public void out (K key, V value) {\n        out (key, value, 0L);\n    }\n    public void out (K key, V value, long timeout) {\n        Transaction txn = null;\n        try {\n            txn = dbe.beginTransaction (null, null);\n            Ref ref = new Ref(key.toString(), value, timeout);\n            pIndex.put (ref);\n            if (timeout > 0L)\n                gcpIndex.putNoReturn (\n                    new GCRef (ref.getId(), ref.getExpiration())\n                );\n            txn.commit();\n            txn = null;\n            synchronized (this) {\n                notifyAll ();\n            }\n            if (sl != null)\n                notifyListeners(key, value);\n        } catch (Exception e) {\n            throw new SpaceError (e);\n        } finally {\n            if (txn != null)\n                abort (txn);\n        }\n    }\n    public void push (K key, V value, long timeout) {\n        Transaction txn = null;\n        try {\n            txn = dbe.beginTransaction (null, null);\n            Ref ref = new Ref(key.toString(), value, timeout);\n            pIndex.put (ref);\n            pIndex.delete (ref.getId());\n            ref.reverseId();\n            pIndex.put (ref);\n            txn.commit();\n            txn = null;\n            synchronized (this) {\n                notifyAll ();\n            }\n            if (sl != null)\n                notifyListeners(key, value);\n        } catch (Exception e) {\n            throw new SpaceError (e);\n        } finally {\n            if (txn != null)\n                abort (txn);\n        }\n    }\n    public void push (K key, V value) {\n        push (key, value, 0L);\n    }\n    @SuppressWarnings(\"unchecked\")\n    public V rdp (Object key) {\n        try {\n            return (V) getObject (key, false);\n        } catch (DatabaseException e) {\n            throw new SpaceError (e);\n        }\n    }\n    @SuppressWarnings(\"unchecked\")\n    public synchronized V in (Object key) {\n        Object obj;\n        while ((obj = inp (key)) == null) {\n            try {\n                this.wait ();\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    @SuppressWarnings(\"unchecked\")\n    public synchronized V in (Object key, long timeout) {\n        Object obj;\n        long now = System.currentTimeMillis();\n        long end = now + timeout;\n        while ((obj = inp (key)) == null &&\n                (now = System.currentTimeMillis()) < end)\n        {\n            try {\n                this.wait (end - now);\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    @SuppressWarnings(\"unchecked\")\n    public synchronized V rd  (Object key) {\n        Object obj;\n        while ((obj = rdp (key)) == null) {\n            try {\n                this.wait ();\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    @SuppressWarnings(\"unchecked\")\n    public synchronized V rd  (Object key, long timeout) {\n        Object obj;\n        long now = System.currentTimeMillis();\n        long end = now + timeout;\n        while ((obj = rdp (key)) == null &&\n                (now = System.currentTimeMillis()) < end)\n        {\n            try {\n                this.wait (end - now);\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    public synchronized void nrd  (Object key) {\n        while (rdp (key) != null) {\n            try {\n                this.wait (NRD_RESOLUTION);\n            } catch (InterruptedException ignored) { }\n        }\n    }\n    public synchronized V nrd  (Object key, long timeout) {\n        Object obj;\n        long now = System.currentTimeMillis();\n        long end = now + timeout;\n        while ((obj = rdp (key)) != null &&\n                (now = System.currentTimeMillis()) < end)\n        {\n            try {\n                this.wait (Math.min(NRD_RESOLUTION, end - now));\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    @SuppressWarnings(\"unchecked\")\n    public V inp (Object key) {\n        try {\n            return (V) getObject (key, true);\n        } catch (DatabaseException e) {\n            throw new SpaceError (e);\n        }\n    }\n    public boolean existAny (Object[] keys) {\n        for (Object key : keys) {\n            if (rdp(key) != null) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public boolean existAny (Object[] keys, long timeout) {\n        long now = System.currentTimeMillis();\n        long end = now + timeout;\n        while ((now = System.currentTimeMillis()) < end) {\n            if (existAny (keys))\n                return true;\n            synchronized (this) {\n                try {\n                    wait (end - now);\n                } catch (InterruptedException ignored) { }\n            }\n        }\n        return false;\n    }\n    public synchronized void put (K key, V value, long timeout) {\n        while (inp (key) != null)\n            ;\n        out (key, value, timeout);\n    }\n    public synchronized void put (K key, V value) {\n        while (inp (key) != null)\n            ;\n        out (key, value);\n    }\n    public void gc () throws DatabaseException {\n        Transaction txn = null;\n        EntityCursor<GCRef> cursor = null;\n        try {\n            if (!gcSem.tryAcquire())\n                return;\n            txn = dbe.beginTransaction (null, null);\n            cursor = gcsIndex.entities (\n                txn, 0L, true, System.currentTimeMillis(), false, null\n            );\n            for (GCRef gcRef: cursor) {\n                pIndex.delete (gcRef.getId());\n                cursor.delete ();\n            }\n            cursor.close();\n            cursor = null;\n            txn.commit();\n            txn = null;\n            if (sl != null) {\n                synchronized (this) {\n                    if (sl != null && sl.getKeySet().isEmpty())\n                        sl = null;\n                }\n            }\n        } finally {\n            if (cursor != null)\n                cursor.close();\n            if (txn != null)\n                abort (txn);\n            gcSem.release();\n        }\n    }\n    public void run() {\n        try {\n            gc();\n        } catch (DatabaseException e) {\n            warn(e);\n        }\n    }\n    public void close () throws DatabaseException {\n        gcSem.acquireUninterruptibly();\n        gcTask.cancel(false);\n        while (!gcTask.isDone()) {\n            try {\n                Thread.sleep(500L);\n            } catch (InterruptedException ignored) { }\n        }\n        store.close ();\n        dbe.close();\n    }\n    public synchronized static JESpace getSpace (String name, String path)\n    {\n        JESpace sp = (JESpace) spaceRegistrar.get (name);\n        if (sp == null) {\n", "answers": ["            sp = new JESpace(name, path);"], "length": 1096, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "01b11dc980d93775ce16fd5e630cf5619f66f281ee12947b"}
{"input": "", "context": "/*\n * Pixel Dungeon\n * Copyright (C) 2012-2015 Oleg Dolya\n *\n * Shattered Pixel Dungeon\n * Copyright (C) 2014-2021 Evan Debenham\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>\n */\npackage com.shatteredpixel.shatteredpixeldungeon.items.spells;\nimport com.shatteredpixel.shatteredpixeldungeon.Assets;\nimport com.shatteredpixel.shatteredpixeldungeon.Dungeon;\nimport com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;\nimport com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;\nimport com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Shopkeeper;\nimport com.shatteredpixel.shatteredpixeldungeon.items.Item;\nimport com.shatteredpixel.shatteredpixeldungeon.items.potions.AlchemicalCatalyst;\nimport com.shatteredpixel.shatteredpixeldungeon.messages.Messages;\nimport com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene;\nimport com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;\nimport com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;\nimport com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;\nimport com.shatteredpixel.shatteredpixeldungeon.ui.RedButton;\nimport com.shatteredpixel.shatteredpixeldungeon.utils.GLog;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndBag;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndEnergizeItem;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndImp;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoItem;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndTradeItem;\nimport com.watabou.noosa.audio.Sample;\npublic class Alchemize extends Spell {\n\t\n\t{\n\t\timage = ItemSpriteSheet.ALCHEMIZE;\n\t}\n\t\n\t@Override\n\tprotected void onCast(Hero hero) {\n\t\tGameScene.selectItem( itemSelector );\n\t}\n\t\n\t@Override\n\tpublic int value() {\n\t\t//prices of ingredients, divided by output quantity\n\t\treturn Math.round(quantity * (40 / 8f));\n\t}\n\t//TODO also allow alchemical catalyst? Or save that for an elixir/brew?\n\tpublic static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {\n\t\t{\n\t\t\tinputs =  new Class[]{ArcaneCatalyst.class};\n\t\t\tinQuantity = new int[]{1};\n\t\t\t\n\t\t\tcost = 3;\n\t\t\t\n\t\t\toutput = Alchemize.class;\n\t\t\toutQuantity = 8;\n\t\t}\n\t\t\n\t}\n\tprivate static WndBag.ItemSelector itemSelector = new WndBag.ItemSelector() {\n\t\t@Override\n\t\tpublic String textPrompt() {\n\t\t\treturn Messages.get(Alchemize.class, \"prompt\");\n\t\t}\n\t\t@Override\n\t\tpublic boolean itemSelectable(Item item) {\n\t\t\treturn !(item instanceof Alchemize)\n\t\t\t\t\t&& (Shopkeeper.canSell(item) || item.energyVal() > 0);\n\t\t}\n\t\t@Override\n\t\tpublic void onSelect( Item item ) {\n\t\t\tif (item != null) {\n\t\t\t\tWndBag parentWnd = GameScene.selectItem( itemSelector );\n\t\t\t\tGameScene.show( new WndAlchemizeItem( item, parentWnd ) );\n\t\t\t}\n\t\t}\n\t};\n\tpublic static class WndAlchemizeItem extends WndInfoItem {\n\t\tprivate static final float GAP\t\t= 2;\n\t\tprivate static final int BTN_HEIGHT\t= 18;\n\t\tprivate WndBag owner;\n\t\tpublic WndAlchemizeItem(Item item, WndBag owner) {\n\t\t\tsuper(item);\n\t\t\tthis.owner = owner;\n\t\t\tfloat pos = height;\n\t\t\tif (Shopkeeper.canSell(item)) {\n\t\t\t\tif (item.quantity() == 1) {\n\t\t\t\t\tRedButton btnSell = new RedButton(Messages.get(this, \"sell\", item.value())) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndTradeItem.sell(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnSell.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\t\tbtnSell.icon(new ItemSprite(ItemSpriteSheet.GOLD));\n\t\t\t\t\tadd(btnSell);\n\t\t\t\t\tpos = btnSell.bottom();\n\t\t\t\t} else {\n\t\t\t\t\tint priceAll = item.value();\n\t\t\t\t\tRedButton btnSell1 = new RedButton(Messages.get(this, \"sell_1\", priceAll / item.quantity())) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndTradeItem.sellOne(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnSell1.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\t\tbtnSell1.icon(new ItemSprite(ItemSpriteSheet.GOLD));\n\t\t\t\t\tadd(btnSell1);\n\t\t\t\t\tRedButton btnSellAll = new RedButton(Messages.get(this, \"sell_all\", priceAll)) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndTradeItem.sell(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnSellAll.setRect(0, btnSell1.bottom() + 1, width, BTN_HEIGHT);\n\t\t\t\t\tbtnSellAll.icon(new ItemSprite(ItemSpriteSheet.GOLD));\n\t\t\t\t\tadd(btnSellAll);\n\t\t\t\t\tpos = btnSellAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item.energyVal() > 0) {\n\t\t\t\tif (item.quantity() == 1) {\n\t\t\t\t\tRedButton btnEnergize = new RedButton(Messages.get(this, \"energize\", item.energyVal())) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndEnergizeItem.energize(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnEnergize.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\t\tbtnEnergize.icon(new ItemSprite(ItemSpriteSheet.ENERGY));\n\t\t\t\t\tadd(btnEnergize);\n\t\t\t\t\tpos = btnEnergize.bottom();\n\t\t\t\t} else {\n\t\t\t\t\tint energyAll = item.energyVal();\n\t\t\t\t\tRedButton btnEnergize1 = new RedButton(Messages.get(this, \"energize_1\", energyAll / item.quantity())) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndEnergizeItem.energizeOne(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnEnergize1.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\t\tbtnEnergize1.icon(new ItemSprite(ItemSpriteSheet.ENERGY));\n\t\t\t\t\tadd(btnEnergize1);\n\t\t\t\t\tRedButton btnEnergizeAll = new RedButton(Messages.get(this, \"energize_all\", energyAll)) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndEnergizeItem.energize(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnEnergizeAll.setRect(0, btnEnergize1.bottom() + 1, width, BTN_HEIGHT);\n\t\t\t\t\tbtnEnergizeAll.icon(new ItemSprite(ItemSpriteSheet.ENERGY));\n\t\t\t\t\tadd(btnEnergizeAll);\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "length": 567, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "64d5f26d486a85e85284229e8d254f996cfafd844cd321c5"}
{"input": "", "context": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU Lesser General Public License as published by the\n# Free Software Foundation; either version 3, or (at your option) any later\n# version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY\n# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n# for more details.\n\"\"\"Pythonic simple SOAP Server implementation\"\"\"\nfrom __future__ import unicode_literals\nimport sys\nimport logging\nimport re\nimport traceback\ntry:\n    from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer\nexcept ImportError:\n    from http.server import BaseHTTPRequestHandler, HTTPServer\nfrom . import __author__, __copyright__, __license__, __version__\nfrom .simplexml import SimpleXMLElement, TYPE_MAP, Date, Decimal\nlog = logging.getLogger(__name__)\n# Deprecated?\nNS_RX = re.compile(r'xmlns:(\\w+)=\"(.+?)\"')\nclass SoapDispatcher(object):\n    \"\"\"Simple Dispatcher for SOAP Server\"\"\"\n    def __init__(self, name, documentation='', action='', location='',\n                 namespace=None, prefix=False,\n                 soap_uri=\"http://schemas.xmlsoap.org/soap/envelope/\",\n                 soap_ns='soap',\n                 namespaces={},\n                 pretty=False,\n                 debug=False,\n                 **kwargs):\n        \"\"\"\n        :param namespace: Target namespace; xmlns=targetNamespace\n        :param prefix: Prefix for target namespace; xmlns:prefix=targetNamespace\n        :param namespaces: Specify additional namespaces; example: {'external': 'http://external.mt.moboperator'}\n        :param pretty: Prettifies generated xmls\n        :param debug: Use to add tracebacks in generated xmls.\n        Multiple namespaces\n        ===================\n        It is possible to support multiple namespaces.\n        You need to specify additional namespaces by passing `namespace` parameter.\n        >>> dispatcher = SoapDispatcher(\n        ...    name = \"MTClientWS\",\n        ...    location = \"http://localhost:8008/ws/MTClientWS\",\n        ...    action = 'http://localhost:8008/ws/MTClientWS', # SOAPAction\n        ...    namespace = \"http://external.mt.moboperator\", prefix=\"external\",\n        ...    documentation = 'moboperator MTClientWS',\n        ...    namespaces = {\n        ...        'external': 'http://external.mt.moboperator',\n        ...        'model': 'http://model.common.mt.moboperator'\n        ...    },\n        ...    ns = True)\n        Now the registered method must return node names with namespaces' prefixes.\n        >>> def _multi_ns_func(self, serviceMsisdn):\n        ...    ret = {\n        ...        'external:activateSubscriptionsReturn': [\n        ...            {'model:code': '0'},\n        ...            {'model:description': 'desc'},\n        ...        ]}\n        ...    return ret\n        Our prefixes will be changed to those used by the client.\n        \"\"\"\n        self.methods = {}\n        self.name = name\n        self.documentation = documentation\n        self.action = action  # base SoapAction\n        self.location = location\n        self.namespace = namespace  # targetNamespace\n        self.prefix = prefix\n        self.soap_ns = soap_ns\n        self.soap_uri = soap_uri\n        self.namespaces = namespaces\n        self.pretty = pretty\n        self.debug = debug\n    @staticmethod\n    def _extra_namespaces(xml, ns):\n        \"\"\"Extends xml with extra namespaces.\n        :param ns: dict with namespaceUrl:prefix pairs\n        :param xml: XML node to modify\n        \"\"\"\n        if ns:\n            _tpl = 'xmlns:%s=\"%s\"'\n            _ns_str = \" \".join([_tpl % (prefix, uri) for uri, prefix in ns.items() if uri not in xml])\n            xml = xml.replace('/>', ' ' + _ns_str + '/>')\n        return xml\n    def register_function(self, name, fn, returns=None, args=None, doc=None):\n        self.methods[name] = fn, returns, args, doc or getattr(fn, \"__doc__\", \"\")\n    def dispatch(self, xml, action=None):\n        \"\"\"Receive and process SOAP call\"\"\"\n        # default values:\n        prefix = self.prefix\n        ret = fault = None\n        soap_ns, soap_uri = self.soap_ns, self.soap_uri\n        soap_fault_code = 'VersionMismatch'\n        name = None\n        # namespaces = [('model', 'http://model.common.mt.moboperator'), ('external', 'http://external.mt.moboperator')]\n        _ns_reversed = dict(((v, k) for k, v in self.namespaces.items()))  # Switch keys-values\n        # _ns_reversed = {'http://external.mt.moboperator': 'external', 'http://model.common.mt.moboperator': 'model'}\n        try:\n            request = SimpleXMLElement(xml, namespace=self.namespace)\n            # detect soap prefix and uri (xmlns attributes of Envelope)\n            for k, v in request[:]:\n                if v in (\"http://schemas.xmlsoap.org/soap/envelope/\",\n                         \"http://www.w3.org/2003/05/soap-env\",):\n                    soap_ns = request.attributes()[k].localName\n                    soap_uri = request.attributes()[k].value\n                # If the value from attributes on Envelope is in additional namespaces\n                elif v in self.namespaces.values():\n                    _ns = request.attributes()[k].localName\n                    _uri = request.attributes()[k].value\n                    _ns_reversed[_uri] = _ns  # update with received alias\n                    # Now we change 'external' and 'model' to the received forms i.e. 'ext' and 'mod'\n                # After that we know how the client has prefixed additional namespaces\n            ns = NS_RX.findall(xml)\n            for k, v in ns:\n                if v in self.namespaces.values():\n                    _ns_reversed[v] = k\n            soap_fault_code = 'Client'\n            # parse request message and get local method\n            method = request('Body', ns=soap_uri).children()(0)\n            if action:\n                # method name = action\n                name = action[len(self.action)+1:-1]\n                prefix = self.prefix\n            if not action or not name:\n                # method name = input message name\n                name = method.get_local_name()\n                prefix = method.get_prefix()\n            log.debug('dispatch method: %s', name)\n            function, returns_types, args_types, doc = self.methods[name]\n            log.debug('returns_types %s', returns_types)\n            # de-serialize parameters (if type definitions given)\n            if args_types:\n                args = method.children().unmarshall(args_types)\n            elif args_types is None:\n                args = {'request': method}  # send raw request\n            else:\n                args = {}  # no parameters\n            soap_fault_code = 'Server'\n            # execute function\n            ret = function(**args)\n            log.debug('dispathed method returns: %s', ret)\n        except Exception:  # This shouldn't be one huge try/except\n            import sys\n            etype, evalue, etb = sys.exc_info()\n            log.error(traceback.format_exc())\n            if self.debug:\n                detail = ''.join(traceback.format_exception(etype, evalue, etb))\n                detail += '\\n\\nXML REQUEST\\n\\n' + xml\n            else:\n                detail = None\n            fault = {'faultcode': \"%s.%s\" % (soap_fault_code, etype.__name__),\n                     'faultstring': evalue,\n                     'detail': detail}\n        # build response message\n        if not prefix:\n            xml = \"\"\"<%(soap_ns)s:Envelope xmlns:%(soap_ns)s=\"%(soap_uri)s\"/>\"\"\"\n        else:\n            xml = \"\"\"<%(soap_ns)s:Envelope xmlns:%(soap_ns)s=\"%(soap_uri)s\"\n                       xmlns:%(prefix)s=\"%(namespace)s\"/>\"\"\"\n        xml %= {    # a %= {} is a shortcut for a = a % {}\n            'namespace': self.namespace,\n            'prefix': prefix,\n            'soap_ns': soap_ns,\n            'soap_uri': soap_uri\n        }\n        # Now we add extra namespaces\n        xml = SoapDispatcher._extra_namespaces(xml, _ns_reversed)\n        # Change our namespace alias to that given by the client.\n        # We put [('model', 'http://model.common.mt.moboperator'), ('external', 'http://external.mt.moboperator')]\n        # mix it with {'http://external.mt.moboperator': 'ext', 'http://model.common.mt.moboperator': 'mod'}\n        mapping = dict(((k, _ns_reversed[v]) for k, v in self.namespaces.items()))  # Switch keys-values and change value\n        # and get {'model': u'mod', 'external': u'ext'}\n        response = SimpleXMLElement(xml,\n                                    namespace=self.namespace,\n                                    namespaces_map=mapping,\n                                    prefix=prefix)\n        response['xmlns:xsi'] = \"http://www.w3.org/2001/XMLSchema-instance\"\n        response['xmlns:xsd'] = \"http://www.w3.org/2001/XMLSchema\"\n        body = response.add_child(\"%s:Body\" % soap_ns, ns=False)\n        if fault:\n            # generate a Soap Fault (with the python exception)\n            body.marshall(\"%s:Fault\" % soap_ns, fault, ns=False)\n        else:\n            # return normal value\n            res = body.add_child(\"%sResponse\" % name, ns=prefix)\n            if not prefix:\n                res['xmlns'] = self.namespace  # add target namespace\n            # serialize returned values (response) if type definition available\n            if returns_types:\n                if not isinstance(ret, dict):\n                    res.marshall(returns_types.keys()[0], ret, )\n                else:\n                    for k, v in ret.items():\n                        res.marshall(k, v)\n            elif returns_types is None:\n                # merge xmlelement returned\n                res.import_node(ret)\n            elif returns_types == {}:\n                log.warning('Given returns_types is an empty dict.')\n        return response.as_xml(pretty=self.pretty)\n    # Introspection functions:\n    def list_methods(self):\n        \"\"\"Return a list of aregistered operations\"\"\"\n        return [(method, doc) for method, (function, returns, args, doc) in self.methods.items()]\n    def help(self, method=None):\n        \"\"\"Generate sample request and response messages\"\"\"\n        (function, returns, args, doc) = self.methods[method]\n        xml = \"\"\"\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n<soap:Body><%(method)s xmlns=\"%(namespace)s\"/></soap:Body>\n</soap:Envelope>\"\"\" % {'method': method, 'namespace': self.namespace}\n        request = SimpleXMLElement(xml, namespace=self.namespace, prefix=self.prefix)\n        if args:\n            items = args.items()\n        elif args is None:\n            items = [('value', None)]\n        else:\n            items = []\n        for k, v in items:\n            request(method).marshall(k, v, add_comments=True, ns=False)\n        xml = \"\"\"\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n<soap:Body><%(method)sResponse xmlns=\"%(namespace)s\"/></soap:Body>\n</soap:Envelope>\"\"\" % {'method': method, 'namespace': self.namespace}\n        response = SimpleXMLElement(xml, namespace=self.namespace, prefix=self.prefix)\n        if returns:\n            items = returns.items()\n        elif args is None:\n            items = [('value', None)]\n        else:\n            items = []\n        for k, v in items:\n            response('%sResponse' % method).marshall(k, v, add_comments=True, ns=False)\n        return request.as_xml(pretty=True), response.as_xml(pretty=True), doc\n    def wsdl(self):\n        \"\"\"Generate Web Service Description v1.1\"\"\"\n        xml = \"\"\"<?xml version=\"1.0\"?>\n<wsdl:definitions name=\"%(name)s\"\n          targetNamespace=\"%(namespace)s\"\n          xmlns:tns=\"%(namespace)s\"\n          xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"\n          xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\"\n          xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n    <wsdl:documentation xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\">%(documentation)s</wsdl:documentation>\n    <wsdl:types>\n       <xsd:schema targetNamespace=\"%(namespace)s\"\n              elementFormDefault=\"qualified\"\n              xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n       </xsd:schema>\n    </wsdl:types>\n</wsdl:definitions>\n\"\"\" % {'namespace': self.namespace, 'name': self.name, 'documentation': self.documentation}\n        wsdl = SimpleXMLElement(xml)\n        for method, (function, returns, args, doc) in self.methods.items():\n            # create elements:\n            def parse_element(name, values, array=False, complex=False):\n                if not complex:\n                    element = wsdl('wsdl:types')('xsd:schema').add_child('xsd:element')\n                    complex = element.add_child(\"xsd:complexType\")\n                else:\n                    complex = wsdl('wsdl:types')('xsd:schema').add_child('xsd:complexType')\n                    element = complex\n                element['name'] = name\n                if values:\n                    items = values\n                elif values is None:\n                    items = [('value', None)]\n                else:\n                    items = []\n                if not array and items:\n                    all = complex.add_child(\"xsd:all\")\n                elif items:\n                    all = complex.add_child(\"xsd:sequence\")\n                for k, v in items:\n                    e = all.add_child(\"xsd:element\")\n                    e['name'] = k\n                    if array:\n                        e[:] = {'minOccurs': \"0\", 'maxOccurs': \"unbounded\"}\n                    if v in TYPE_MAP.keys():\n                        t = 'xsd:%s' % TYPE_MAP[v]\n                    elif v is None:\n                        t = 'xsd:anyType'\n                    elif isinstance(v, list):\n                        n = \"ArrayOf%s%s\" % (name, k)\n                        l = []\n                        for d in v:\n                            l.extend(d.items())\n                        parse_element(n, l, array=True, complex=True)\n                        t = \"tns:%s\" % n\n                    elif isinstance(v, dict):\n                        n = \"%s%s\" % (name, k)\n                        parse_element(n, v.items(), complex=True)\n                        t = \"tns:%s\" % n\n                    e.add_attribute('type', t)\n            parse_element(\"%s\" % method, args and args.items())\n            parse_element(\"%sResponse\" % method, returns and returns.items())\n            # create messages:\n            for m, e in ('Input', ''), ('Output', 'Response'):\n                message = wsdl.add_child('wsdl:message')\n                message['name'] = \"%s%s\" % (method, m)\n                part = message.add_child(\"wsdl:part\")\n                part[:] = {'name': 'parameters',\n                           'element': 'tns:%s%s' % (method, e)}\n        # create ports\n        portType = wsdl.add_child('wsdl:portType')\n        portType['name'] = \"%sPortType\" % self.name\n        for method, (function, returns, args, doc) in self.methods.items():\n            op = portType.add_child('wsdl:operation')\n            op['name'] = method\n            if doc:\n                op.add_child(\"wsdl:documentation\", doc)\n            input = op.add_child(\"wsdl:input\")\n            input['message'] = \"tns:%sInput\" % method\n            output = op.add_child(\"wsdl:output\")\n            output['message'] = \"tns:%sOutput\" % method\n        # create bindings\n        binding = wsdl.add_child('wsdl:binding')\n        binding['name'] = \"%sBinding\" % self.name\n        binding['type'] = \"tns:%sPortType\" % self.name\n        soapbinding = binding.add_child('soap:binding')\n        soapbinding['style'] = \"document\"\n        soapbinding['transport'] = \"http://schemas.xmlsoap.org/soap/http\"\n        for method in self.methods.keys():\n            op = binding.add_child('wsdl:operation')\n            op['name'] = method\n            soapop = op.add_child('soap:operation')\n            soapop['soapAction'] = self.action + method\n            soapop['style'] = 'document'\n            input = op.add_child(\"wsdl:input\")\n            ##input.add_attribute('name', \"%sInput\" % method)\n            soapbody = input.add_child(\"soap:body\")\n            soapbody[\"use\"] = \"literal\"\n            output = op.add_child(\"wsdl:output\")\n            ##output.add_attribute('name', \"%sOutput\" % method)\n            soapbody = output.add_child(\"soap:body\")\n            soapbody[\"use\"] = \"literal\"\n        service = wsdl.add_child('wsdl:service')\n        service[\"name\"] = \"%sService\" % self.name\n        service.add_child('wsdl:documentation', text=self.documentation)\n        port = service.add_child('wsdl:port')\n        port[\"name\"] = \"%s\" % self.name\n        port[\"binding\"] = \"tns:%sBinding\" % self.name\n        soapaddress = port.add_child('soap:address')\n        soapaddress[\"location\"] = self.location\n        return wsdl.as_xml(pretty=True)\nclass SOAPHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        \"\"\"User viewable help information and wsdl\"\"\"\n        args = self.path[1:].split(\"?\")\n        if self.path != \"/\" and args[0] not in self.server.dispatcher.methods.keys():\n            self.send_error(404, \"Method not found: %s\" % args[0])\n        else:\n            if self.path == \"/\":\n                # return wsdl if no method supplied\n                response = self.server.dispatcher.wsdl()\n            else:\n                # return supplied method help (?request or ?response messages)\n                req, res, doc = self.server.dispatcher.help(args[0])\n                if len(args) == 1 or args[1] == \"request\":\n                    response = req\n                else:\n                    response = res\n            self.send_response(200)\n            self.send_header(\"Content-type\", \"text/xml\")\n            self.end_headers()\n            self.wfile.write(response)\n    def do_POST(self):\n        \"\"\"SOAP POST gateway\"\"\"\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/xml\")\n        self.end_headers()\n        request = self.rfile.read(int(self.headers.getheader('content-length')))\n        response = self.server.dispatcher.dispatch(request)\n        self.wfile.write(response)\nclass WSGISOAPHandler(object):\n    def __init__(self, dispatcher):\n        self.dispatcher = dispatcher\n    def __call__(self, environ, start_response):\n        return self.handler(environ, start_response)\n    def handler(self, environ, start_response):\n        if environ['REQUEST_METHOD'] == 'GET':\n            return self.do_get(environ, start_response)\n        elif environ['REQUEST_METHOD'] == 'POST':\n            return self.do_post(environ, start_response)\n        else:\n            start_response('405 Method not allowed', [('Content-Type', 'text/plain')])\n            return ['Method not allowed']\n    def do_get(self, environ, start_response):\n        path = environ.get('PATH_INFO').lstrip('/')\n        query = environ.get('QUERY_STRING')\n        if path != \"\" and path not in self.dispatcher.methods.keys():\n            start_response('404 Not Found', [('Content-Type', 'text/plain')])\n            return [\"Method not found: %s\" % path]\n        elif path == \"\":\n            # return wsdl if no method supplied\n            response = self.dispatcher.wsdl()\n        else:\n            # return supplied method help (?request or ?response messages)\n            req, res, doc = self.dispatcher.help(path)\n            if len(query) == 0 or query == \"request\":\n                response = req\n            else:\n                response = res\n        start_response('200 OK', [('Content-Type', 'text/xml'), ('Content-Length', str(len(response)))])\n        return [response]\n    def do_post(self, environ, start_response):\n", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "length": 1670, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "8ae06de3dd26783213ae72552d610c4f1518647b7898d383"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n# Qt widget to implement statuses column in Turpial\n#from PyQt4 import QtCore\nfrom PyQt4.QtCore import Qt\nfrom PyQt4.QtCore import QSize\nfrom PyQt4.QtCore import QRect\nfrom PyQt4.QtCore import QLine\nfrom PyQt4.QtGui import QFont\nfrom PyQt4.QtGui import QColor\nfrom PyQt4.QtGui import QLabel\nfrom PyQt4.QtGui import QPixmap\nfrom PyQt4.QtGui import QWidget\nfrom PyQt4.QtGui import QMessageBox\nfrom PyQt4.QtGui import QTextDocument\nfrom PyQt4.QtGui import QStyledItemDelegate\nfrom PyQt4.QtGui import QVBoxLayout, QHBoxLayout\nfrom turpial.ui.lang import i18n\nfrom turpial.ui.qt.widgets import ImageButton, BarLoadIndicator\nfrom turpial.ui.qt.webview import StatusesWebView\nfrom libturpial.common import get_preview_service_from_url, unescape_list_name, OS_MAC\nfrom libturpial.common.tools import get_account_id_from, get_column_slug_from, get_protocol_from,\\\n        get_username_from, detect_os\nclass StatusesColumn(QWidget):\n    NOTIFICATION_ERROR = 'error'\n    NOTIFICATION_SUCCESS = 'success'\n    NOTIFICATION_WARNING = 'warning'\n    NOTIFICATION_INFO = 'notice'\n    def __init__(self, base, column_id, include_header=True):\n        QWidget.__init__(self)\n        self.base = base\n        self.setMinimumWidth(280)\n        self.statuses = []\n        self.conversations = {}\n        self.id_ = None\n        #self.fgcolor = \"#e3e3e3\"\n        #self.fgcolor = \"#f9a231\"\n        #self.updating = False\n        self.last_id = None\n        self.loader = BarLoadIndicator()\n        self.loader.setVisible(False)\n        self.webview = StatusesWebView(self.base, self.id_)\n        self.webview.link_clicked.connect(self.__link_clicked)\n        self.webview.hashtag_clicked.connect(self.__hashtag_clicked)\n        self.webview.profile_clicked.connect(self.__profile_clicked)\n        self.webview.cmd_clicked.connect(self.__cmd_clicked)\n        layout = QVBoxLayout()\n        layout.setSpacing(0)\n        layout.setContentsMargins(0, 0, 0, 0)\n        if include_header:\n            header = self.__build_header(column_id)\n            layout.addWidget(header)\n            layout.addWidget(self.loader)\n        layout.addWidget(self.webview, 1)\n        self.setLayout(layout)\n    def __build_header(self, column_id):\n        self.set_column_id(column_id)\n        username = get_username_from(self.account_id)\n        column_slug = get_column_slug_from(column_id)\n        column_slug = unescape_list_name(column_slug)\n        column_slug = column_slug.replace('%23', '#')\n        column_slug = column_slug.replace('%40', '@')\n        #font = QFont('Titillium Web', 18, QFont.Normal, False)\n        # This is to handle the 96dpi vs 72dpi screen resolutions on Mac vs the world\n        if detect_os() == OS_MAC:\n            font = QFont('Maven Pro Light', 25, 0, False)\n            font2 = QFont('Monda', 14, 0, False)\n        else:\n            font = QFont('Maven Pro Light', 16, QFont.Light, False)\n            font2 = QFont('Monda', 10, QFont.Light, False)\n        bg_style = \"background-color: %s; color: %s;\" % (self.base.bgcolor, self.base.fgcolor)\n        caption = QLabel(username)\n        caption.setStyleSheet(\"QLabel { %s }\" % bg_style)\n        caption.setFont(font)\n        caption2 = QLabel(column_slug)\n        caption2.setStyleSheet(\"QLabel { %s }\" % bg_style)\n        caption2.setFont(font2)\n        caption2.setAlignment(Qt.AlignLeft | Qt.AlignBottom)\n        caption_box = QHBoxLayout()\n        caption_box.setSpacing(8)\n        caption_box.addWidget(caption)\n        caption_box.addWidget(caption2)\n        caption_box.addStretch(1)\n        close_button = ImageButton(self.base, 'action-delete-shadowed.png', i18n.get('delete_column'))\n        close_button.clicked.connect(self.__delete_column)\n        header_layout = QHBoxLayout()\n        header_layout.addLayout(caption_box, 1)\n        header_layout.addWidget(close_button)\n        header = QWidget()\n        header.setStyleSheet(\"QWidget { %s }\" % bg_style)\n        header.setLayout(header_layout)\n        return header\n    def __delete_column(self):\n        self.base.core.delete_column(self.id_)\n    def __link_clicked(self, url):\n        url = str(url)\n        preview_service = get_preview_service_from_url(url)\n        self.base.open_url(url)\n    def __hashtag_clicked(self, hashtag):\n        self.base.add_search_column(self.account_id, str(hashtag))\n    def __profile_clicked(self, username):\n        self.base.show_profile_dialog(self.account_id, str(username))\n    def __cmd_clicked(self, url):\n        status_id = str(url.split(':')[1])\n        cmd = url.split(':')[0]\n        status = None\n        try:\n            print 'Seeking for status in self array'\n            for status_ in self.statuses:\n                if status_.id_ == status_id:\n                    status = status_\n                    break\n            if status is None:\n                raise KeyError\n        except KeyError:\n            print 'Seeking for status in conversations array'\n            for status_root, statuses in self.conversations.iteritems():\n                for item in statuses:\n                    if item.id_ == status_id:\n                        status = item\n                        break\n                if status is not None:\n                    break\n        if status is None:\n            self.notify_error(status_id, i18n.get('try_again'))\n        if cmd == 'reply':\n            self.__reply_status(status)\n        elif cmd == 'quote':\n            self.__quote_status(status)\n        elif cmd == 'repeat':\n            self.__repeat_status(status)\n        elif cmd == 'delete':\n            self.__delete_status(status)\n        elif cmd == 'favorite':\n            self.__mark_status_as_favorite(status)\n        elif cmd == 'unfavorite':\n            self.__unmark_status_as_favorite(status)\n        elif cmd == 'delete_direct':\n            self.__delete_direct_message(status)\n        elif cmd == 'reply_direct':\n            self.__reply_direct_message(status)\n        elif cmd == 'view_conversation':\n            self.__view_conversation(status)\n        elif cmd == 'hide_conversation':\n            self.__hide_conversation(status)\n        elif cmd == 'show_avatar':\n            self.__show_avatar(status)\n    def __reply_status(self, status):\n        self.base.show_update_box_for_reply(self.account_id, status)\n    def __quote_status(self, status):\n        self.base.show_update_box_for_quote(self.account_id, status)\n    def __repeat_status(self, status):\n        confirmation = self.base.show_confirmation_message(i18n.get('confirm_retweet'),\n            i18n.get('do_you_want_to_retweet_status'))\n        if confirmation:\n            self.lock_status(status.id_)\n            self.base.repeat_status(self.id_, self.account_id, status)\n    def __delete_status(self, status):\n        confirmation = self.base.show_confirmation_message(i18n.get('confirm_delete'),\n            i18n.get('do_you_want_to_delete_status'))\n        if confirmation:\n            self.lock_status(status.id_)\n            self.base.delete_status(self.id_, self.account_id, status)\n    def __delete_direct_message(self, status):\n        confirmation = self.base.show_confirmation_message(i18n.get('confirm_delete'),\n            i18n.get('do_you_want_to_delete_direct_message'))\n        if confirmation:\n            self.lock_status(status.id_)\n            self.base.delete_direct_message(self.id_, self.account_id, status)\n    def __reply_direct_message(self, status):\n        self.base.show_update_box_for_reply_direct(self.account_id, status)\n    def __mark_status_as_favorite(self, status):\n        self.lock_status(status.id_)\n        self.base.mark_status_as_favorite(self.id_, self.account_id, status)\n    def __unmark_status_as_favorite(self, status):\n        self.lock_status(status.id_)\n        self.base.unmark_status_as_favorite(self.id_, self.account_id, status)\n    def __view_conversation(self, status):\n        self.webview.view_conversation(status.id_)\n        self.base.get_conversation(self.account_id, status, self.id_, status.id_)\n    def __hide_conversation(self, status):\n        del self.conversations[status.id_]\n        self.webview.clear_conversation(status.id_)\n    def __show_avatar(self, status):\n        self.base.show_profile_image(self.account_id, status.username)\n    def __set_last_status_id(self, statuses):\n        if statuses[0].repeated_by:\n            self.last_id = statuses[0].original_status_id\n        else:\n            self.last_id = statuses[0].id_\n    def set_column_id(self, column_id):\n        self.id_ = column_id\n        self.account_id = get_account_id_from(column_id)\n        self.protocol_id = get_protocol_from(self.account_id)\n        self.webview.column_id = column_id\n    def clear(self):\n        self.webview.clear()\n    def start_updating(self):\n        self.loader.setVisible(True)\n        return self.last_id\n    def stop_updating(self):\n        self.loader.setVisible(False)\n    def update_timestamps(self):\n        self.webview.sync_timestamps(self.statuses)\n    def update_statuses(self, statuses):\n        self.__set_last_status_id(statuses)\n        self.update_timestamps()\n        self.webview.update_statuses(statuses)\n        # Filter repeated statuses\n        unique_statuses = [s1 for s1 in statuses if s1 not in self.statuses]\n        # Remove old conversations\n        to_remove = self.statuses[-(len(unique_statuses)):]\n        self.statuses = statuses + self.statuses[: -(len(unique_statuses))]\n        for status in to_remove:\n            if self.conversations.has_key(status.id_):\n                del self.conversations[status.id_]\n    def update_conversation(self, status, status_root_id):\n        status_root_id = str(status_root_id)\n        self.webview.update_conversation(status, status_root_id)\n        if status_root_id in self.conversations:\n            self.conversations[status_root_id].append(status)\n        else:\n            self.conversations[status_root_id] = [status]\n    def error_in_conversation(self, status_root_id):\n        self.webview.clear_conversation(status_root_id)\n    def mark_status_as_favorite(self, status_id):\n        mark = \"setFavorite('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_favorite(self, status_id):\n        mark = \"unsetFavorite('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def mark_status_as_repeated(self, status_id):\n", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "length": 686, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "14de6afab15eabeb4fec480f9d6b4db78e93e0493851cc35"}
{"input": "", "context": "import pprint\nimport select\nimport traceback\nfrom multiprocessing import Pipe, Process\nfrom beget_msgpack import Controller\nfrom base.exc import Error\nfrom lib.FileManager import FM\nfrom lib.FileManager.OperationStatus import OperationStatus\nfrom lib.FileManager.workers.sftp.analyzeSize import AnalyzeSize\nfrom lib.FileManager.workers.sftp.chmodFiles import ChmodFiles\nfrom lib.FileManager.workers.sftp.copyBetweenSftp import CopyBetweenSftp\nfrom lib.FileManager.workers.sftp.copyFromSftp import CopyFromSftp\nfrom lib.FileManager.workers.sftp.copyFromSftpToFtp import CopyFromSftpToFtp\nfrom lib.FileManager.workers.sftp.copyFromSftpToWebDav import CopyFromSftpToWebDav\nfrom lib.FileManager.workers.sftp.copySftp import CopySftp\nfrom lib.FileManager.workers.sftp.createArchive import CreateArchive\nfrom lib.FileManager.workers.sftp.createConnection import CreateConnection\nfrom lib.FileManager.workers.sftp.createCopy import CreateCopy\nfrom lib.FileManager.workers.sftp.downloadFiles import DownloadFiles\nfrom lib.FileManager.workers.sftp.extractArchive import ExtractArchive\nfrom lib.FileManager.workers.sftp.findFiles import FindFiles\nfrom lib.FileManager.workers.sftp.findText import FindText\nfrom lib.FileManager.workers.sftp.listFiles import ListFiles\nfrom lib.FileManager.workers.sftp.makeDir import MakeDir\nfrom lib.FileManager.workers.sftp.moveBetweenSftp import MoveBetweenSftp\nfrom lib.FileManager.workers.sftp.moveFromSftp import MoveFromSftp\nfrom lib.FileManager.workers.sftp.moveFromSftpToFtp import MoveFromSftpToFtp\nfrom lib.FileManager.workers.sftp.moveFromSftpToWebDav import MoveFromSftpToWebDav\nfrom lib.FileManager.workers.sftp.moveSftp import MoveSftp\nfrom lib.FileManager.workers.sftp.newFile import NewFile\nfrom lib.FileManager.workers.sftp.readFile import ReadFile\nfrom lib.FileManager.workers.sftp.readImages import ReadImages\nfrom lib.FileManager.workers.sftp.removeConnection import RemoveConnection\nfrom lib.FileManager.workers.sftp.removeFiles import RemoveFiles\nfrom lib.FileManager.workers.sftp.renameFile import RenameFile\nfrom lib.FileManager.workers.sftp.updateConnection import UpdateConnection\nfrom lib.FileManager.workers.sftp.uploadFile import UploadFile\nfrom lib.FileManager.workers.sftp.writeFile import WriteFile\nfrom misc.helpers import byte_to_unicode_list, byte_to_unicode_dict\nclass SftpController(Controller):\n    def action_create_connection(self, login, password, host, port, sftp_user, sftp_password):\n        return self.get_process_data(CreateConnection, {\n            \"login\": login.decode('UTF-8'),\n            \"password\": password.decode('UTF-8'),\n            \"host\": host.decode('UTF-8'),\n            \"port\": port,\n            \"sftp_user\": sftp_user.decode('UTF-8'),\n            \"sftp_password\": sftp_password.decode('UTF-8')\n        })\n    def action_edit_connection(self, login, password, connection_id, host, port, sftp_user, sftp_password):\n        return self.get_process_data(UpdateConnection, {\n            \"login\": login.decode('UTF-8'),\n            \"password\": password.decode('UTF-8'),\n            \"connection_id\": connection_id,\n            \"host\": host.decode('UTF-8'),\n            \"port\": port,\n            \"sftp_user\": sftp_user.decode('UTF-8'),\n            \"sftp_password\": sftp_password.decode('UTF-8')\n        })\n    def action_remove_connection(self, login, password, connection_id):\n        return self.get_process_data(RemoveConnection, {\n            \"login\": login.decode('UTF-8'),\n            \"password\": password.decode('UTF-8'),\n            \"connection_id\": connection_id\n        })\n    def action_list_files(self, login, password, path, session):\n        return self.get_process_data(ListFiles, {\n            \"login\": login.decode('UTF-8'),\n            \"password\": password.decode('UTF-8'),\n            \"path\": path.decode(\"UTF-8\"),\n            \"session\": byte_to_unicode_dict(session)\n        })\n    def action_make_dir(self, login, password, path, session):\n        return self.get_process_data(MakeDir, {\n            \"login\": login.decode('UTF-8'),\n            \"password\": password.decode('UTF-8'),\n            \"path\": path.decode(\"UTF-8\"),\n            \"session\": byte_to_unicode_dict(session)\n        })\n    def action_new_file(self, login, password, path, session):\n        return self.get_process_data(NewFile, {\n            \"login\": login.decode('UTF-8'),\n            \"password\": password.decode('UTF-8'),\n            \"path\": path.decode(\"UTF-8\"),\n            \"session\": byte_to_unicode_dict(session)\n        })\n    def action_read_file(self, login, password, path, encoding, session):\n        if encoding is None:\n            encoding = b''\n        return self.get_process_data(ReadFile, {\n            \"login\": login.decode('UTF-8'),\n            \"password\": password.decode('UTF-8'),\n            \"path\": path.decode(\"UTF-8\"),\n            \"session\": byte_to_unicode_dict(session),\n            \"encoding\": encoding.decode('UTF-8')\n        })\n    def action_write_file(self, login, password, path, content, encoding, session):\n        return self.get_process_data(WriteFile, {\n            \"login\": login.decode('UTF-8'),\n            \"password\": password.decode('UTF-8'),\n            \"path\": path.decode(\"UTF-8\"),\n            \"content\": content.decode('UTF-8'),\n            \"encoding\": encoding.decode('UTF-8'),\n            \"session\": byte_to_unicode_dict(session)\n        })\n    def action_rename_file(self, login, password, source_path, target_path, session):\n        return self.get_process_data(RenameFile, {\n            \"login\": login.decode('UTF-8'),\n            \"password\": password.decode('UTF-8'),\n            \"source_path\": source_path.decode(\"UTF-8\"),\n            \"target_path\": target_path.decode(\"UTF-8\"),\n            \"session\": byte_to_unicode_dict(session)\n        })\n    def action_download_files(self, login, password, paths, mode, session):\n        return self.get_process_data(DownloadFiles, {\n            \"login\": login.decode('UTF-8'),\n            \"password\": password.decode('UTF-8'),\n            \"paths\": byte_to_unicode_list(paths),\n            \"mode\": mode.decode('UTF-8'),\n            \"session\": byte_to_unicode_dict(session)\n        }, timeout=7200)\n    def action_read_images(self, login, password, paths, session):\n        return self.get_process_data(ReadImages, {\n            \"login\": login.decode('UTF-8'),\n            \"password\": password.decode('UTF-8'),\n            \"paths\": byte_to_unicode_list(paths),\n            \"session\": byte_to_unicode_dict(session)\n        }, timeout=7200)\n    def action_upload_file(self, login, password, path, file_path, overwrite, session):\n        params = {\n            \"login\": login.decode('UTF-8'),\n            \"password\": password.decode('UTF-8'),\n            \"path\": path.decode('UTF-8'),\n            \"file_path\": file_path.decode('UTF-8'),\n            \"overwrite\": overwrite,\n            \"session\": byte_to_unicode_dict(session),\n        }\n        return self.get_process_data(UploadFile, params, timeout=7200)\n    @staticmethod\n    def run_subprocess(logger, worker_object, status_id, name, params):\n        logger.info(\"FM call SFTP long action %s %s %s\" % (name, pprint.pformat(status_id), pprint.pformat(params.get(\"login\"))))\n        def async_check_operation(op_status_id):\n            operation = OperationStatus.load(op_status_id)\n            logger.info(\"Operation id='%s' status is '%s'\" % (str(status_id), operation.status))\n            if operation.status != OperationStatus.STATUS_WAIT:\n                raise Error(\"Operation status is not wait - aborting\")\n        def async_on_error(op_status_id, data=None, progress=None, pid=None, pname=None):\n            logger.info(\"Process on_error()\")\n            operation = OperationStatus.load(op_status_id)\n            data = {\n                'id': status_id,\n                'status': 'error',\n                'data': data,\n                'progress': progress,\n                'pid': pid,\n                'pname': pname\n            }\n            operation.set_attributes(data)\n            operation.save()\n        def async_on_success(op_status_id, data=None, progress=None, pid=None, pname=None):\n            logger.info(\"Process on_success()\")\n            operation = OperationStatus.load(op_status_id)\n            data = {\n                'id': op_status_id,\n                'status': OperationStatus.STATUS_SUCCESS,\n                'data': data,\n                'progress': progress,\n                'pid': pid,\n                'pname': pname\n            }\n            operation.set_attributes(data)\n            operation.save()\n        def async_on_running(op_status_id, data=None, progress=None, pid=None, pname=None):\n            logger.info(\"Process on_running()\")\n            operation = OperationStatus.load(op_status_id)\n            data = {\n                'id': op_status_id,\n                'status': OperationStatus.STATUS_RUNNING,\n                'data': data,\n                'progress': progress,\n                'pid': pid,\n                'pname': pname\n            }\n            operation.set_attributes(data)\n            operation.save()\n        def async_on_abort(op_status_id, data=None, progress=None, pid=None, pname=None):\n            logger.info(\"Process on_abort()\")\n            operation = OperationStatus.load(op_status_id)\n            data = {\n                'id': op_status_id,\n                'status': OperationStatus.STATUS_ABORT,\n                'data': data,\n                'progress': progress,\n                'pid': pid,\n                'pname': pname\n            }\n            operation.set_attributes(data)\n            operation.save()\n        def async_on_finish(worker_process, op_status_id, pid=None, pname=None):\n            logger.info(\"Process on_finish()\")\n            logger.info(\"Process exit code %s info = %s\", str(process.exitcode), pprint.pformat(process))\n            if worker_process.exitcode < 0:\n                async_on_abort(status_id, pid=pid, pname=pname)\n            elif worker_process.exitcode > 0:\n                async_on_error(op_status_id, pid=pid, pname=pname)\n        try:\n            async_check_operation(status_id)\n            kwargs = {\n                \"name\": name,\n                \"status_id\": status_id,\n                \"logger\": logger,\n                \"on_running\": async_on_running,\n                \"on_abort\": async_on_abort,\n                \"on_error\": async_on_error,\n                \"on_success\": async_on_success\n            }\n            kwargs.update(params)\n            process = worker_object(**kwargs)\n            process.start()\n            process.join()\n            async_on_finish(process, status_id, pid=process.pid, pname=process.name)\n        except Exception as e:\n            result = {\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            async_on_error(status_id, result)\n    def action_remove_files(self, login, password, status_id, paths, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker remove_files %s %s\", pprint.pformat(status_id),\n                             pprint.pformat(login))\n            p = Process(target=self.run_subprocess,\n                        args=(self.logger, RemoveFiles, status_id.decode('UTF-8'), FM.Action.REMOVE, {\n                            \"login\": login.decode('UTF-8'),\n                            \"password\": password.decode('UTF-8'),\n                            \"paths\": byte_to_unicode_list(paths),\n                            \"session\": byte_to_unicode_dict(session)\n                        }))\n            p.start()\n            return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_analyze_size(self, login, password, status_id, path, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker analyze_size %s %s\", pprint.pformat(status_id),\n                             pprint.pformat(login))\n            p = Process(target=self.run_subprocess,\n                        args=(self.logger, AnalyzeSize, status_id.decode('UTF-8'), FM.Action.ANALYZE_SIZE, {\n                            \"login\": login.decode('UTF-8'),\n                            \"password\": password.decode('UTF-8'),\n                            \"path\": path.decode('UTF-8'),\n                            \"session\": byte_to_unicode_dict(session)\n                        }))\n            p.start()\n            return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_chmod_files(self, login, password, status_id, params, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker chmod_files %s %s\", pprint.pformat(status_id),\n                             pprint.pformat(login))\n            p = Process(target=self.run_subprocess,\n                        args=(self.logger, ChmodFiles, status_id.decode('UTF-8'), FM.Action.CHMOD, {\n                            \"login\": login.decode('UTF-8'),\n                            \"password\": password.decode('UTF-8'),\n                            \"params\": byte_to_unicode_dict(params),\n                            \"session\": byte_to_unicode_dict(session)\n                        }))\n            p.start()\n            return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_find_text(self, login, password, status_id, params, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker find_text %s %s\", pprint.pformat(status_id),\n                             pprint.pformat(login))\n            p = Process(target=self.run_subprocess,\n                        args=(self.logger, FindText, status_id.decode('UTF-8'), FM.Action.SEARCH_TEXT, {\n                            \"login\": login.decode('UTF-8'),\n                            \"password\": password.decode('UTF-8'),\n                            \"params\": byte_to_unicode_dict(params),\n                            \"session\": byte_to_unicode_dict(session)\n                        }))\n            p.start()\n            return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_find_files(self, login, password, status_id, params, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker find_files %s %s\", pprint.pformat(status_id),\n                             pprint.pformat(login))\n            p = Process(target=self.run_subprocess,\n                        args=(self.logger, FindFiles, status_id.decode('UTF-8'), FM.Action.SEARCH_FILES, {\n                            \"login\": login.decode('UTF-8'),\n                            \"password\": password.decode('UTF-8'),\n                            \"params\": byte_to_unicode_dict(params),\n                            \"session\": byte_to_unicode_dict(session)\n                        }))\n            p.start()\n            return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_create_archive(self, login, password, status_id, params, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker create_archive %s %s\", pprint.pformat(status_id),\n                             pprint.pformat(login))\n            p = Process(target=self.run_subprocess,\n                        args=(self.logger, CreateArchive, status_id.decode('UTF-8'), FM.Action.CREATE_ARCHIVE, {\n                            \"login\": login.decode('UTF-8'),\n                            \"password\": password.decode('UTF-8'),\n                            \"params\": byte_to_unicode_dict(params),\n                            \"session\": byte_to_unicode_dict(session)\n                        }))\n            p.start()\n", "answers": ["            return {\"error\": False}"], "length": 958, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "1712603d3736689b03586a52e0f51eedd1a2bccd03217fde"}
{"input": "", "context": "//\n// ZoneIdentityPermissionTest.cs - NUnit Test Cases for ZoneIdentityPermission\n//\n// Author:\n//\tSebastien Pouliot  <sebastien@ximian.com>\n//\n// Copyright (C) 2004 Novell, Inc (http://www.novell.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nusing NUnit.Framework;\nusing System;\nusing System.Security;\nusing System.Security.Permissions;\nnamespace MonoTests.System.Security.Permissions {\n\t[TestFixture]\n\tpublic class ZoneIdentityPermissionTest\t{\n\t\t[Test]\n\t\tpublic void PermissionStateNone ()\n\t\t{\n\t\t\tZoneIdentityPermission zip = new ZoneIdentityPermission (PermissionState.None);\n\t\t\tAssert.AreEqual (SecurityZone.NoZone, zip.SecurityZone);\n\t\t}\n#if NET_2_0\n\t\t[Test]\n\t\t[Category (\"NotWorking\")]\n\t\tpublic void PermissionStateUnrestricted ()\n\t\t{\n\t\t\t// In 2.0 Unrestricted are permitted for identity permissions\n\t\t\tZoneIdentityPermission zip = new ZoneIdentityPermission (PermissionState.Unrestricted);\n\t\t\tAssert.AreEqual (SecurityZone.NoZone, zip.SecurityZone);\n\t\t\tSecurityElement se = zip.ToXml ();\n\t\t\tAssert.AreEqual (5, se.Children.Count, \"Count\");\n\t\t\t// and they aren't equals to None\n\t\t\tAssert.IsFalse (zip.Equals (new ZoneIdentityPermission (PermissionState.None)));\n\t\t}\n#else\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void PermissionStateUnrestricted ()\n\t\t{\n\t\t\tZoneIdentityPermission zip = new ZoneIdentityPermission (PermissionState.Unrestricted);\n\t\t}\n#endif\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void PermissionStateInvalid ()\n\t\t{\n\t\t\tZoneIdentityPermission zip = new ZoneIdentityPermission ((PermissionState)2);\n\t\t}\n\t\tprivate bool Same (ZoneIdentityPermission zip1, ZoneIdentityPermission zip2)\n\t\t{\n#if NET_2_0\n\t\t\treturn zip1.Equals (zip2);\n#else\n\t\t\treturn (zip1.SecurityZone == zip2.SecurityZone);\n#endif\n\t\t}\n\t\tprivate ZoneIdentityPermission BasicTestZone (SecurityZone zone, bool special)\n\t\t{\n\t\t\tZoneIdentityPermission zip = new ZoneIdentityPermission (zone);\n\t\t\tAssert.AreEqual (zone, zip.SecurityZone, \"SecurityZone\");\n\t\t\t\n\t\t\tZoneIdentityPermission copy = (ZoneIdentityPermission) zip.Copy ();\n\t\t\tAssert.IsTrue (Same (zip, copy), \"Equals-Copy\");\n\t\t\tAssert.IsTrue (zip.IsSubsetOf (copy), \"IsSubset-1\");\n\t\t\tAssert.IsTrue (copy.IsSubsetOf (zip), \"IsSubset-2\");\n\t\t\tif (special) {\n\t\t\t\tAssert.IsFalse (zip.IsSubsetOf (null), \"IsSubset-Null\");\n\t\t\t}\n\t\t\t\n\t\t\tIPermission intersect = zip.Intersect (copy);\n\t\t\tif (special) {\n\t\t\t\tAssert.IsTrue (intersect.IsSubsetOf (zip), \"IsSubset-3\");\n\t\t\t\tAssert.IsFalse (Object.ReferenceEquals (zip, intersect), \"!ReferenceEquals1\");\n\t\t\t\tAssert.IsTrue (intersect.IsSubsetOf (copy), \"IsSubset-4\");\n\t\t\t\tAssert.IsFalse (Object.ReferenceEquals (copy, intersect), \"!ReferenceEquals2\");\n\t\t\t}\n\t\t\tAssert.IsNull (zip.Intersect (null), \"Intersect with null\");\n\t\t\tintersect = zip.Intersect (new ZoneIdentityPermission (PermissionState.None));\n\t\t\tAssert.IsNull (intersect, \"Intersect with PS.None\");\n\t\t\t// note: can't be tested with PermissionState.Unrestricted\n\t\t\t// XML roundtrip\n\t\t\tSecurityElement se = zip.ToXml ();\n\t\t\tcopy.FromXml (se);\n\t\t\tAssert.IsTrue (Same (zip, copy), \"Equals-Xml\");\n\t\t\treturn zip;\n\t\t}\n\t\t[Test]\n\t\tpublic void SecurityZone_Internet ()\n\t\t{\n\t\t\tBasicTestZone (SecurityZone.Internet, true);\n\t\t}\n\t\t[Test]\n\t\tpublic void SecurityZone_Intranet ()\n\t\t{\n\t\t\tBasicTestZone (SecurityZone.Intranet, true);\n\t\t}\n\t\t[Test]\n\t\tpublic void SecurityZone_MyComputer ()\n\t\t{\n\t\t\tBasicTestZone (SecurityZone.MyComputer, true);\n\t\t}\n\t\t[Test]\n\t\tpublic void SecurityZone_NoZone ()\n\t\t{\n\t\t\tZoneIdentityPermission zip = BasicTestZone (SecurityZone.NoZone, false);\n\t\t\tAssert.IsNull (zip.ToXml ().Attribute (\"Zone\"), \"Zone Attribute\");\n\t\t\tAssert.IsTrue (zip.IsSubsetOf (null), \"IsSubset-Null\");\n\t\t\tIPermission intersect = zip.Intersect (zip);\n\t\t\tAssert.IsNull (intersect, \"Intersect with No Zone\");\n\t\t\t// NoZone is special as it is a subset of all zones\n\t\t\tZoneIdentityPermission ss = new ZoneIdentityPermission (SecurityZone.Internet);\n\t\t\tAssert.IsTrue (zip.IsSubsetOf (ss), \"IsSubset-Internet\");\n\t\t\tss.SecurityZone = SecurityZone.Intranet;\n\t\t\tAssert.IsTrue (zip.IsSubsetOf (ss), \"IsSubset-Intranet\");\n\t\t\tss.SecurityZone = SecurityZone.MyComputer;\n\t\t\tAssert.IsTrue (zip.IsSubsetOf (ss), \"IsSubset-MyComputer\");\n\t\t\tss.SecurityZone = SecurityZone.NoZone;\n\t\t\tAssert.IsTrue (zip.IsSubsetOf (ss), \"IsSubset-NoZone\");\n\t\t\tss.SecurityZone = SecurityZone.Trusted;\n\t\t\tAssert.IsTrue (zip.IsSubsetOf (ss), \"IsSubset-Trusted\");\n\t\t\tss.SecurityZone = SecurityZone.Untrusted;\n\t\t\tAssert.IsTrue (zip.IsSubsetOf (ss), \"IsSubset-Untrusted\");\n\t\t}\n\t\t[Test]\n\t\tpublic void SecurityZone_Trusted ()\n\t\t{\n\t\t\tBasicTestZone (SecurityZone.Trusted, true);\n\t\t}\n\t\t[Test]\n\t\tpublic void SecurityZone_Untrusted ()\n\t\t{\n\t\t\tBasicTestZone (SecurityZone.Untrusted, true);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void SecurityZone_Invalid ()\n\t\t{\n\t\t\tZoneIdentityPermission zip = new ZoneIdentityPermission ((SecurityZone)128);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void Intersect_DifferentPermissions ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (SecurityZone.Trusted);\n\t\t\tSecurityPermission b = new SecurityPermission (PermissionState.None);\n\t\t\ta.Intersect (b);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void IsSubsetOf_DifferentPermissions ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (SecurityZone.Trusted);\n\t\t\tSecurityPermission b = new SecurityPermission (PermissionState.None);\n\t\t\ta.IsSubsetOf (b);\n\t\t}\n\t\t[Test]\n\t\tpublic void Union () \n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (SecurityZone.Trusted);\n\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (null);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+null\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals1\");\n\t\t\tz = (ZoneIdentityPermission) a.Union (new ZoneIdentityPermission (PermissionState.None));\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+PS.None\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals2\");\n\t\t\t// note: can't be tested with PermissionState.Unrestricted\n\t\t\tZoneIdentityPermission n = new ZoneIdentityPermission (SecurityZone.NoZone);\n\t\t\tz = (ZoneIdentityPermission) a.Union (n);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+NoZone\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals3\");\n\t\t\tz = (ZoneIdentityPermission) n.Union (a);\n\t\t\tAssert.IsTrue (Same (a, z), \"NoZone+Trusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals4\");\n\t\t}\n#if NET_2_0\n\t\t[Category (\"NotWorking\")]\n#endif\n\t\t[Test]\n\t\tpublic void Union_DifferentIdentities ()\n\t\t{\n\t\t\tZoneIdentityPermission a = new ZoneIdentityPermission (SecurityZone.Trusted);\n\t\t\tZoneIdentityPermission b = new ZoneIdentityPermission (SecurityZone.Untrusted);\n", "answers": ["\t\t\tIPermission result = a.Union (b);"], "length": 778, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "e212994f82962f98d4e1be7a5678cfd25eacb4f645df2198"}
{"input": "", "context": "import logging\nimport sys\nimport uuid\nfrom array import array\nfrom contextlib import closing\nfrom StringIO import StringIO\nfrom java.io import BufferedInputStream, BufferedReader, FileReader, InputStreamReader, ByteArrayInputStream\nfrom java.security import KeyStore, Security\nfrom java.security.cert import CertificateException, CertificateFactory\nfrom javax.net.ssl import (\n    X509KeyManager, X509TrustManager, KeyManagerFactory, SSLContext, TrustManager, TrustManagerFactory)\ntry:\n    # jarjar-ed version\n    from org.python.bouncycastle.asn1.pkcs import PrivateKeyInfo\n    from org.python.bouncycastle.cert import X509CertificateHolder\n    from org.python.bouncycastle.cert.jcajce import JcaX509CertificateConverter\n    from org.python.bouncycastle.jce.provider import BouncyCastleProvider\n    from org.python.bouncycastle.openssl import PEMKeyPair, PEMParser\n    from org.python.bouncycastle.openssl.jcajce import JcaPEMKeyConverter\nexcept ImportError:\n    # dev version from extlibs\n    from org.bouncycastle.asn1.pkcs import PrivateKeyInfo\n    from org.bouncycastle.cert import X509CertificateHolder\n    from org.bouncycastle.cert.jcajce import JcaX509CertificateConverter\n    from org.bouncycastle.jce.provider import BouncyCastleProvider\n    from org.bouncycastle.openssl import PEMKeyPair, PEMParser\n    from org.bouncycastle.openssl.jcajce import JcaPEMKeyConverter\nlog = logging.getLogger(\"ssl\")\n# FIXME what happens if reloaded?\nSecurity.addProvider(BouncyCastleProvider())\n# build the necessary certificate with a CertificateFactory; this can take the pem format:\n# http://docs.oracle.com/javase/7/docs/api/java/security/cert/CertificateFactory.html#generateCertificate(java.io.InputStream)\n# not certain if we can include a private key in the pem file; see \n# http://stackoverflow.com/questions/7216969/getting-rsa-private-key-from-pem-base64-encoded-private-key-file\n# helpful advice for being able to manage ca_certs outside of Java's keystore\n# specifically the example ReloadableX509TrustManager\n# http://jcalcote.wordpress.com/2010/06/22/managing-a-dynamic-java-trust-store/\n# in the case of http://docs.python.org/2/library/ssl.html#ssl.CERT_REQUIRED\n# http://docs.python.org/2/library/ssl.html#ssl.CERT_NONE\n# https://github.com/rackerlabs/romper/blob/master/romper/trust.py#L15\n#\n# it looks like CERT_OPTIONAL simply validates certificates if\n# provided, probably something in checkServerTrusted - maybe a None\n# arg? need to verify as usual with a real system... :)\n# http://alesaudate.wordpress.com/2010/08/09/how-to-dynamically-select-a-certificate-alias-when-invoking-web-services/\n# is somewhat relevant for managing the keyfile, certfile\ndef _get_ca_certs_trust_manager(ca_certs):\n    trust_store = KeyStore.getInstance(KeyStore.getDefaultType())\n    trust_store.load(None, None)\n    num_certs_installed = 0\n    with open(ca_certs) as f:\n        cf = CertificateFactory.getInstance(\"X.509\")\n        for cert in cf.generateCertificates(BufferedInputStream(f)):\n            trust_store.setCertificateEntry(str(uuid.uuid4()), cert)\n            num_certs_installed += 1\n    tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())\n    tmf.init(trust_store)\n    log.debug(\"Installed %s certificates\", num_certs_installed, extra={\"sock\": \"*\"})\n    return tmf\ndef _stringio_as_reader(s):\n    return BufferedReader(InputStreamReader(ByteArrayInputStream(bytearray(s.getvalue()))))\ndef _extract_readers(cert_file):\n    private_key = StringIO()\n    certs = StringIO()\n    output = certs\n    with open(cert_file) as f:\n        for line in f:\n            if line.startswith(\"-----BEGIN PRIVATE KEY-----\"):\n                output = private_key\n            output.write(line)\n            if line.startswith(\"-----END PRIVATE KEY-----\"):\n                output = certs\n    return _stringio_as_reader(private_key), _stringio_as_reader(certs)\ndef _get_openssl_key_manager(cert_file, key_file=None):\n    paths = [key_file] if key_file else []\n    paths.append(cert_file)\n    # Go from Bouncy Castle API to Java's; a bit heavyweight for the Python dev ;)\n    key_converter = JcaPEMKeyConverter().setProvider(\"BC\")\n    cert_converter = JcaX509CertificateConverter().setProvider(\"BC\")\n    private_key = None\n    certs = []\n    for path in paths:\n        for br in _extract_readers(path):\n            while True:\n                obj = PEMParser(br).readObject()\n                if obj is None:\n                    break\n                if isinstance(obj, PEMKeyPair):\n                    private_key = key_converter.getKeyPair(obj).getPrivate()\n                elif isinstance(obj, PrivateKeyInfo):\n                    private_key = key_converter.getPrivateKey(obj)\n                elif isinstance(obj, X509CertificateHolder):\n                    certs.append(cert_converter.getCertificate(obj))\n    assert private_key, \"No private key loaded\"\n    key_store = KeyStore.getInstance(KeyStore.getDefaultType())\n    key_store.load(None, None)\n    key_store.setKeyEntry(str(uuid.uuid4()), private_key, [], certs)\n    kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm())\n    kmf.init(key_store, [])\n    return kmf\ndef _get_ssl_context(keyfile, certfile, ca_certs):\n    if certfile is None and ca_certs is None:\n        log.debug(\"Using default SSL context\", extra={\"sock\": \"*\"})\n        return SSLContext.getDefault()\n    else:\n        log.debug(\"Setting up a specific SSL context for keyfile=%s, certfile=%s, ca_certs=%s\",\n                  keyfile, certfile, ca_certs, extra={\"sock\": \"*\"})\n        if ca_certs:\n            # should support composite usage below\n            trust_managers = _get_ca_certs_trust_manager(ca_certs).getTrustManagers()\n        else:\n            trust_managers = None\n        if certfile:\n            key_managers = _get_openssl_key_manager(certfile, keyfile).getKeyManagers()\n        else:\n            key_managers = None\n        # FIXME FIXME for performance, cache this lookup in the future\n        # to avoid re-reading files on every lookup\n        context = SSLContext.getInstance(\"SSL\")\n        context.init(key_managers, trust_managers, None)\n        return context\n# CompositeX509KeyManager and CompositeX509TrustManager allow for mixing together Java built-in managers\n# with new managers to support Python ssl.\n#\n# See http://tersesystems.com/2014/01/13/fixing-the-most-dangerous-code-in-the-world/\n# for a good description of this composite approach.\n#\n# Ported to Python from http://codyaray.com/2013/04/java-ssl-with-multiple-keystores\n# which was inspired by http://stackoverflow.com/questions/1793979/registering-multiple-keystores-in-jvm\nclass CompositeX509KeyManager(X509KeyManager):\n                                                   \n    def __init__(self, key_managers):\n        self.key_managers = key_managers\n    def chooseClientAlias(self, key_type, issuers, socket):\n        for key_manager in self.key_managers:\n            alias = key_manager.chooseClientAlias(key_type, issuers, socket)\n            if alias:\n                return alias;\n        return None\n    def chooseServerAlias(self, key_type, issuers, socket):\n        for key_manager in self.key_managers:\n            alias = key_manager.chooseServerAlias(key_type, issuers, socket)\n            if alias:\n                return alias;\n        return None\n    \n    def getPrivateKey(self, alias):\n        for key_manager in self.key_managers:\n            private_key = keyManager.getPrivateKey(alias)\n            if private_key:\n                return private_key\n        return None\n    def getCertificateChain(self, alias):\n        for key_manager in self.key_managers:\n            chain = key_manager.getCertificateChain(alias)\n            if chain:\n                return chain\n        return None\n    def getClientAliases(self, key_type, issuers):\n        aliases = []\n        for key_manager in self.key_managers:\n            aliases.extend(key_manager.getClientAliases(key_type, issuers))\n        if not aliases:\n            return None\n        else:\n            return aliases\n    def getServerAliases(self, key_type, issuers):\n        aliases = []\n        for key_manager in self.key_managers:\n            aliases.extend(key_manager.getServerAliases(key_type, issuers))\n        if not aliases:\n            return None\n        else:\n            return aliases\nclass CompositeX509TrustManager(X509TrustManager):\n    def __init__(self, trust_managers):\n        self.trust_managers = trust_managers\n    def checkClientTrusted(self, chain, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                trustManager.checkClientTrusted(chain, auth_type);\n                return\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def checkServerTrusted(self, chain, auth_type):\n        for trust_manager in self.trust_managers:\n            try:\n                trustManager.checkServerTrusted(chain, auth_type);\n                return\n            except CertificateException:\n                pass\n        raise CertificateException(\"None of the TrustManagers trust this certificate chain\")\n    def getAcceptedIssuers(self):\n", "answers": ["        certs = []"], "length": 713, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "e6dca363f4644795057dce35d57cdbc53e1e84bea1699bbf"}
{"input": "", "context": "/*\n * Jamm\n * Copyright (C) 2002 Dave Dribin and Keith Garner\n *  \n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage jamm.webapp;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionError;\nimport org.apache.struts.action.ActionErrors;\nimport jamm.backend.MailManager;\nimport jamm.backend.MailManagerException;\nimport jamm.backend.AccountInfo;\nimport jamm.backend.AliasInfo;\nimport jamm.backend.MailAddress;\nimport jamm.backend.DomainInfo;\n/**\n * Loads data via Mail Manager needed for the domain administration\n * page.  It puts the following into the request's attributes after\n * seeding them from the MailManager: domain, accounts,\n * domainAccountForm (a DomainConfigForm), aliases, and\n * domainAliasForm (a DomainConfigForm).  It then forwards to the\n * domain_admin page.\n *\n * @see jamm.backend.MailManager\n * @see jamm.webapp.DomainConfigForm\n * \n * @struts.action validate=\"false\" path=\"/private/domain_admin\"\n *                roles=\"Site Administrator, Domain Administrator\"\n * @struts.action-forward name=\"view\" path=\"/private/domain_admin.jsp\"\n */\npublic class DomainAdminAction extends JammAction\n{\n    /**\n     * Performs the action.\n     *\n     * @param mapping The action mapping with possible destinations.\n     * @param actionForm Not used in this action.  Is ignored.\n     * @param request the http request that caused this action.\n     * @param response the http response\n     *\n     * @return an <code>ActionForward</code>\n     *\n     * @exception Exception if an error occurs\n     */\n    public ActionForward execute(ActionMapping mapping,\n                                 ActionForm actionForm,\n                                 HttpServletRequest request,\n                                 HttpServletResponse response)\n        throws Exception\n    {\n        ActionErrors errors = new ActionErrors();\n        User user  = getUser(request);\n        MailManager manager = getMailManager(user);\n        \n        String domain = request.getParameter(\"domain\");\n        if (domain == null)\n        {\n            domain = MailAddress.hostFromAddress(user.getUsername());\n        }\n        if (domain == null)\n        {\n            errors.add(ActionErrors.GLOBAL_ERROR,\n                       new ActionError(\"general.error.domain.is.null\"));\n            saveErrors(request, errors);\n            return mapping.findForward(\"general_error\");\n        }\n        request.setAttribute(\"domain\", domain);\n        Map postmasterPasswordParameters = new HashMap();\n        postmasterPasswordParameters.put(\n            \"mail\", MailAddress.addressFromParts(\"postmaster\", domain));\n        postmasterPasswordParameters.put(\"done\", \"domain_admin\");\n        request.setAttribute(\"postmasterPasswordParameters\",\n                             postmasterPasswordParameters);\n        // Create the bread crumbs\n        List breadCrumbs = new ArrayList();\n        BreadCrumb breadCrumb;\n        if (user.isUserInRole(User.SITE_ADMIN_ROLE))\n        {\n            breadCrumb = new BreadCrumb(\n                findForward(mapping, \"site_admin\", request).getPath(),\n                \"Site Admin\");\n            breadCrumbs.add(breadCrumb);\n        }\n        breadCrumb = new BreadCrumb(\n            getDomainAdminForward(mapping, domain).getPath(), \"Domain Admin\");\n        breadCrumbs.add(breadCrumb);\n        request.setAttribute(\"breadCrumbs\", breadCrumbs);\n        doAccounts(request, manager, domain);\n        doAliases(request, manager, domain);\n        doCatchAll(request, manager, domain);\n        doDomainInfo(request, manager, domain);\n        return (mapping.findForward(\"view\"));\n    }\n    /**\n     * Prepares the account information and adds it to the web page.\n     *\n     * @param request The request we're servicing\n     * @param manager a mail manager instance to use\n     * @param domain The domain we're manipulating\n     * @exception MailManagerException if an error occurs\n     */\n    private void doAccounts(HttpServletRequest request, MailManager manager,\n                            String domain)\n        throws MailManagerException\n    {\n        List accounts;\n        String startsWith = request.getParameter(\"startsWith\");\n        if (StringUtils.isAlphanumeric(startsWith) &&\n            StringUtils.isNotEmpty(startsWith))\n        {\n            accounts = manager.getAccountsStartingWith(startsWith, domain);\n        }\n        else\n        {\n            accounts = manager.getAccounts(domain);\n        }\n         \n        \n        request.setAttribute(\"accounts\", accounts);\n        List activeAccounts = new ArrayList();\n        List adminAccounts = new ArrayList();\n        List deleteAccounts = new ArrayList();\n        Iterator i = accounts.iterator();\n        while (i.hasNext())\n        {\n            AccountInfo account = (AccountInfo) i.next();\n            String name = account.getName();\n            if (account.isActive())\n            {\n                activeAccounts.add(name);\n            }\n            if (account.isAdministrator())\n            {\n                adminAccounts.add(name);\n            }\n            if (account.getDelete())\n            {\n                deleteAccounts.add(name);\n            }\n        }\n        String[] activeAccountsArray =\n            (String []) activeAccounts.toArray(new String[0]);\n        String[] adminAccountsArray =\n            (String []) adminAccounts.toArray(new String[0]);\n        String[] deleteAccountsArray =\n            (String []) deleteAccounts.toArray(new String[0]);\n        DomainConfigForm dcf = new DomainConfigForm();\n        dcf.setOriginalActiveItems(activeAccountsArray);\n        dcf.setActiveItems(activeAccountsArray);\n        dcf.setOriginalAdminItems(adminAccountsArray);\n        dcf.setAdminItems(adminAccountsArray);\n        dcf.setOriginalItemsToDelete(deleteAccountsArray);\n        dcf.setItemsToDelete(deleteAccountsArray);\n        dcf.setDomain(domain);\n        request.setAttribute(\"domainAccountForm\", dcf);\n    }\n    /**\n     * Prepares the aliases for the page.\n     *\n     * @param request the request being serviced\n     * @param manager The mail manager to use\n     * @param domain which domain are we manipulating\n     * @exception MailManagerException if an error occurs\n     */\n    private void doAliases(HttpServletRequest request, MailManager manager,\n                           String domain)\n        throws MailManagerException\n    {\n        List aliases;\n        String startsWith = request.getParameter(\"startsWith\");\n        if (StringUtils.isAlphanumeric(startsWith) &&\n            StringUtils.isNotEmpty(startsWith))\n        {\n            aliases = manager.getAliasesStartingWith(startsWith, domain);\n        }\n        else\n        {\n            aliases = manager.getAliases(domain);\n        }\n        request.setAttribute(\"aliases\", aliases);\n            \n        List activeAliases = new ArrayList();\n        List adminAliases = new ArrayList();\n        Iterator i = aliases.iterator();\n        while (i.hasNext())\n        {\n            AliasInfo alias = (AliasInfo) i.next();\n            if (alias.isActive())\n            {\n                activeAliases.add(alias.getName());\n            }\n            if (alias.isAdministrator())\n            {\n                adminAliases.add(alias.getName());\n            }\n        }\n        String[] activeAliasesArray =\n            (String []) activeAliases.toArray(new String[0]);\n        String[] adminAliasesArray =\n            (String []) adminAliases.toArray(new String[0]);\n        DomainConfigForm dcf = new DomainConfigForm();\n        dcf.setOriginalActiveItems(activeAliasesArray);\n        dcf.setActiveItems(activeAliasesArray);\n        dcf.setOriginalAdminItems(adminAliasesArray);\n        dcf.setAdminItems(adminAliasesArray);\n        dcf.setDomain(domain);\n        request.setAttribute(\"domainAliasForm\", dcf);\n    }\n    /**\n     * Prepares the info for the CatchAll.\n     *\n     * @param request the request being serviced\n     * @param manager the mail manager\n     * @param domain the domain\n     * @exception MailManagerException if an error occurs\n     */\n    private void doCatchAll(HttpServletRequest request, MailManager manager,\n                            String domain)\n        throws MailManagerException\n    {\n        AliasInfo catchAllAlias = manager.getAlias(\"@\" + domain);\n        if (catchAllAlias != null)\n        {\n            List destinations = catchAllAlias.getMailDestinations();\n            request.setAttribute(\"catchAllAlias\", destinations.get(0));\n        }\n        else\n        {\n            request.setAttribute(\"catchAllAlias\", \"\");\n        }\n    }\n    /**\n     * Prepares the domain info\n     *\n     * @param request the request being serviced\n     * @param manager the mail manager\n     * @param domain the domain\n     * @exception MailManagerException if an error occurs\n     */\n    private void doDomainInfo(HttpServletRequest request, MailManager manager,\n                              String domain)\n        throws MailManagerException\n    {\n", "answers": ["        User user = getUser(request);"], "length": 847, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "45be6133b10843a59b2ff2272116e322f7dd795025749020"}
{"input": "", "context": "#!/usr/bin/python3\n# @begin:license\n#\n# Copyright (c) 2015-2019, Benjamin Niemann <pink@odahoda.de>\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License along\n# with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n# @end:license\nimport asyncio\nimport errno\nimport functools\nimport fractions\nimport logging\nimport os\nimport os.path\nimport time\nimport uuid\nfrom typing import cast, Any, Union, Callable, Awaitable, List, Tuple, Text\nfrom noisicaa.core.typing_extra import down_cast\nfrom noisicaa.core import ipc\nfrom noisicaa import audioproc\nfrom noisicaa import lv2\nfrom noisicaa import editor_main_pb2\nfrom . import player\nfrom . import render_pb2\nfrom . import project as project_lib\nfrom . import session_value_store\nlogger = logging.getLogger(__name__)\nclass RendererFailed(Exception):\n    pass\nclass DataStreamProtocol(asyncio.Protocol):\n    def __init__(\n            self, stream: asyncio.StreamWriter, event_loop: asyncio.AbstractEventLoop\n    ) -> None:\n        super().__init__()\n        self.__stream = stream\n        self.__closed = asyncio.Event(loop=event_loop)\n    async def wait(self) -> None:\n        await self.__closed.wait()\n    def data_received(self, data: bytes) -> None:\n        if not self.__stream.transport.is_closing():\n            logger.debug(\"Forward %d bytes to encoder\", len(data))\n            self.__stream.write(data)\n    def eof_received(self) -> None:\n        if not self.__stream.transport.is_closing():\n            self.__stream.write_eof()\n        self.__closed.set()\nclass EncoderProtocol(asyncio.streams.FlowControlMixin, asyncio.SubprocessProtocol):\n    def __init__(\n            self, *,\n            data_handler: Callable[[bytes], None],\n            stderr_handler: Callable[[str], None],\n            failure_handler: Callable[[int], None],\n            event_loop: asyncio.AbstractEventLoop\n    ) -> None:\n        # mypy does know about the loop argument\n        super().__init__(loop=event_loop)  # type: ignore[call-arg]\n        self.__closed = asyncio.Event(loop=event_loop)\n        self.__data_handler = data_handler\n        self.__stderr_handler = stderr_handler\n        self.__failure_handler = failure_handler\n        self.__stderr_buf = bytearray()\n        self.__transport = None  # type: asyncio.SubprocessTransport\n    async def wait(self) -> None:\n        await self.__closed.wait()\n    def connection_made(self, transport: asyncio.BaseTransport) -> None:\n        self.__transport = down_cast(asyncio.SubprocessTransport, transport)\n    def pipe_data_received(self, fd: int, data: Union[bytes, Text]) -> None:\n        data = down_cast(bytes, data)\n        if fd == 1:\n            logger.debug(\"Writing %d encoded bytes\", len(data))\n            self.__data_handler(data)\n        else:\n            assert fd == 2\n            self.__stderr_buf.extend(data)\n            while True:\n                eol = self.__stderr_buf.find(b'\\n')\n                if eol < 0:\n                    break\n                line = self.__stderr_buf[:eol].decode('utf-8')\n                del self.__stderr_buf[:eol+1]\n                self.__stderr_handler(line)\n    def process_exited(self) -> None:\n        if self.__stderr_buf:\n            line = self.__stderr_buf.decode('utf-8')\n            del self.__stderr_buf[:]\n            self.__stderr_handler(line)\n        rc = self.__transport.get_returncode()\n        assert rc is not None\n        if rc != 0:\n            self.__failure_handler(rc)\n        self.__closed.set()\nclass Encoder(object):\n    def __init__(\n            self, *,\n            data_handler: Callable[[bytes], None],\n            error_handler: Callable[[str], None],\n            event_loop: asyncio.AbstractEventLoop,\n            settings: render_pb2.RenderSettings\n    ) -> None:\n        self.event_loop = event_loop\n        self.data_handler = data_handler\n        self.error_handler = error_handler\n        self.settings = settings\n    @classmethod\n    def create(cls, *, settings: render_pb2.RenderSettings, **kwargs: Any) -> 'Encoder':\n        cls_map = {\n            render_pb2.RenderSettings.FLAC: FlacEncoder,\n            render_pb2.RenderSettings.OGG: OggEncoder,\n            render_pb2.RenderSettings.WAVE: WaveEncoder,\n            render_pb2.RenderSettings.MP3: Mp3Encoder,\n            render_pb2.RenderSettings.FAIL__TEST_ONLY__: FailingEncoder,\n        }\n        encoder_cls = cls_map[settings.output_format]\n        return encoder_cls(settings=settings, **kwargs)\n    def get_writer(self) -> asyncio.StreamWriter:\n        raise NotImplementedError\n    async def setup(self) -> None:\n        logger.info(\"Setting up %s...\", type(self).__name__)\n    async def cleanup(self) -> None:\n        logger.info(\"%s cleaned up.\", type(self).__name__)\n    async def wait(self) -> None:\n        raise NotImplementedError\nclass SubprocessEncoder(Encoder):\n    def __init__(self, **kwargs: Any) -> None:\n        super().__init__(**kwargs)\n        self.__cmdline = None  # type: List[str]\n        self.__transport = None  # type: asyncio.SubprocessTransport\n        self.__protocol = None  # type: EncoderProtocol\n        self.__stdin = None  # type: asyncio.StreamWriter\n        self.__stderr = None  # type: List[str]\n        self.__returncode = None  # type: int\n    def get_writer(self) -> asyncio.StreamWriter:\n        return self.__stdin\n    def get_cmd_line(self) -> List[str]:\n        raise NotImplementedError\n    def __fail(self, rc: int) -> None:\n        assert rc\n        self.error_handler(\n            \"%s failed with returncode %d:\\n%s\" % (\n                ' '.join(self.__cmdline), rc, '\\n'.join(self.__stderr)))\n    async def setup(self) -> None:\n        await super().setup()\n        self.__cmdline = self.get_cmd_line()\n        logger.info(\"Starting encoder process: %s\", ' '.join(self.__cmdline))\n        self.__stderr = []\n        transport, protocol = await self.event_loop.subprocess_exec(\n            functools.partial(\n                EncoderProtocol,\n                data_handler=self.data_handler,\n                stderr_handler=self.__stderr.append,\n                failure_handler=self.__fail,\n                event_loop=self.event_loop),\n            *self.__cmdline,\n            stdin=asyncio.subprocess.PIPE,\n            stdout=asyncio.subprocess.PIPE,\n            stderr=asyncio.subprocess.PIPE)\n        self.__transport = down_cast(asyncio.SubprocessTransport, transport)\n        self.__protocol = down_cast(EncoderProtocol, protocol)\n        self.__stdin = asyncio.StreamWriter(\n            transport=self.__transport.get_pipe_transport(0),\n            protocol=self.__protocol,\n            reader=None,\n            loop=self.event_loop)\n    async def cleanup(self) -> None:\n        if self.__transport is not None:\n            self.__transport.close()\n            await self.__protocol.wait()\n            self.__transport = None\n            self.__protocol = None\n        await super().cleanup()\n    async def wait(self) -> None:\n        if not self.__stdin.transport.is_closing():\n            await self.__stdin.drain()\n            logger.info(\"All bytes written to encoder process.\")\n        logger.info(\"Waiting for encoder process to complete...\")\n        await self.__protocol.wait()\nclass FfmpegEncoder(SubprocessEncoder):\n    def get_cmd_line(self) -> List[str]:\n        global_flags = [\n            '-nostdin',\n        ]\n        input_flags = [\n            '-f', 'f32le',\n            '-ar', '%d' % self.settings.sample_rate,\n            '-ac', '2',\n            '-i', 'pipe:0',\n        ]\n        output_flags = [\n            'pipe:1',\n        ]\n        return (\n            ['/usr/bin/ffmpeg']\n            + global_flags\n            + input_flags\n            + self.get_encoder_flags()\n            + output_flags)\n    def get_encoder_flags(self) -> List[str]:\n        raise NotImplementedError\nclass FlacEncoder(FfmpegEncoder):\n    def get_encoder_flags(self) -> List[str]:\n        compression_level = self.settings.flac_settings.compression_level\n        if not 0 <= compression_level <= 12:\n            raise ValueError(\"Invalid flac_settings.compression_level %d\" % compression_level)\n        bits_per_sample = self.settings.flac_settings.bits_per_sample\n        if bits_per_sample not in (16, 24):\n            raise ValueError(\"Invalid flac_settings.bits_per_sample %d\" % bits_per_sample)\n        sample_fmt = {\n            16: 's16',\n            24: 's32',\n        }[bits_per_sample]\n        return [\n            '-f', 'flac',\n            '-compression_level', str(compression_level),\n            '-sample_fmt', sample_fmt,\n        ]\nclass OggEncoder(FfmpegEncoder):\n    def get_encoder_flags(self) -> List[str]:\n        flags = [\n            '-f', 'ogg',\n        ]\n        encode_mode = self.settings.ogg_settings.encode_mode\n        if encode_mode == render_pb2.RenderSettings.OggSettings.VBR:\n            quality = self.settings.ogg_settings.quality\n            if not -1.0 <= quality <= 10.0:\n                raise ValueError(\"Invalid ogg_settings.quality %f\" % quality)\n            flags += ['-q', '%.1f' % quality]\n        elif encode_mode == render_pb2.RenderSettings.OggSettings.CBR:\n            bitrate = self.settings.ogg_settings.bitrate\n            if not 45 <= bitrate <= 500:\n                raise ValueError(\"Invalid ogg_settings.bitrate %d\" % bitrate)\n            flags += ['-b:a', '%dk' % bitrate]\n        return flags\nclass WaveEncoder(FfmpegEncoder):\n    def get_encoder_flags(self) -> List[str]:\n        bits_per_sample = self.settings.wave_settings.bits_per_sample\n        if bits_per_sample not in (16, 24, 32):\n            raise ValueError(\"Invalid wave_settings.bits_per_sample %d\" % bits_per_sample)\n        codec = {\n            16: 'pcm_s16le',\n            24: 'pcm_s24le',\n            32: 'pcm_s32le',\n        }[bits_per_sample]\n        return [\n            '-f', 'wav',\n            '-c:a', codec,\n        ]\nclass Mp3Encoder(FfmpegEncoder):\n    def get_encoder_flags(self) -> List[str]:\n        flags = [\n            '-f', 'mp3',\n            '-c:a', 'libmp3lame',\n        ]\n        encode_mode = self.settings.mp3_settings.encode_mode\n        if encode_mode == render_pb2.RenderSettings.Mp3Settings.VBR:\n            compression_level = self.settings.mp3_settings.compression_level\n            if not 0 <= compression_level <= 9:\n                raise ValueError(\"Invalid mp3_settings.compression_level %d\" % compression_level)\n            flags += ['-compression_level', '%d' % compression_level]\n        elif encode_mode == render_pb2.RenderSettings.Mp3Settings.CBR:\n            bitrate = self.settings.mp3_settings.bitrate\n            if not 32 <= bitrate <= 320:\n                raise ValueError(\"Invalid mp3_settings.bitrate %d\" % bitrate)\n            flags += ['-b:a', '%dk' % bitrate]\n        return flags\nclass FailingEncoder(SubprocessEncoder):\n    def get_cmd_line(self) -> List[str]:\n        return [\n            '/bin/false',\n        ]\nclass Renderer(object):\n    def __init__(\n            self, *,\n            project: project_lib.BaseProject,\n            callback_address: str,\n            render_settings: render_pb2.RenderSettings,\n            tmp_dir: str,\n            server: ipc.Server,\n            manager: ipc.Stub,\n            urid_mapper: lv2.URIDMapper,\n            event_loop: asyncio.AbstractEventLoop\n    ) -> None:\n        self.__project = project\n        self.__callback_address = callback_address\n        self.__render_settings = render_settings\n        self.__tmp_dir = tmp_dir\n        self.__server = server\n        self.__manager = manager\n        self.__urid_mapper = urid_mapper\n        self.__event_loop = event_loop\n        self.__failed = asyncio.Event(loop=self.__event_loop)\n        self.__callback = None  # type: ipc.Stub\n        self.__data_queue = None  # type: asyncio.Queue\n        self.__data_pump_task = None  # type: asyncio.Task\n        self.__datastream_address = None  # type: str\n        self.__datastream_transport = None  # type: asyncio.BaseTransport\n        self.__datastream_protocol = None  # type: DataStreamProtocol\n        self.__datastream_fd = None  # type: int\n        self.__encoder = None  # type: Encoder\n        self.__player_state_changed = None  # type: asyncio.Event\n        self.__player_started = None  # type: asyncio.Event\n        self.__player_finished = None  # type: asyncio.Event\n        self.__playing = None  # type: bool\n        self.__current_time = None  # type: audioproc.MusicalTime\n        self.__duration = self.__project.duration\n        self.__audioproc_address = None  # type: str\n        self.__audioproc_client = None  # type: audioproc.AbstractAudioProcClient\n        self.__player = None  # type: player.Player\n        self.__next_progress_update = None  # type: Tuple[fractions.Fraction, float]\n        self.__progress_pump_task = None  # type: asyncio.Task\n        self.__session_values = None  # type: session_value_store.SessionValueStore\n    def __fail(self, msg: str) -> None:\n        logger.error(\"Encoding failed: %s\", msg)\n        self.__failed.set()\n    async def __wait_for_some(self, *futures: Awaitable) -> None:\n        \"\"\"Wait until at least one of the futures completed and cancel all uncompleted.\"\"\"\n        done, pending = await asyncio.wait(\n            futures,\n            loop=self.__event_loop,\n            return_when=asyncio.FIRST_COMPLETED)\n        for f in pending:\n            f.cancel()\n        for f in done:\n            f.result()\n    async def __setup_callback_stub(self) -> None:\n        self.__callback = ipc.Stub(self.__event_loop, self.__callback_address)\n        await self.__callback.connect()\n    async def __data_pump_main(self) -> None:\n        while True:\n            get = asyncio.ensure_future(self.__data_queue.get(), loop=self.__event_loop)\n            await self.__wait_for_some(get, self.__failed.wait())\n            if self.__failed.is_set():\n                logger.info(\"Stopping data pump, because encoder failed.\")\n                break\n            if get.done():\n                data = get.result()\n                if data is None:\n                    logger.info(\"Shutting down data pump.\")\n                    break\n                response = render_pb2.RenderDataResponse()\n                await self.__callback.call(\n                    'DATA', render_pb2.RenderDataRequest(data=data), response)\n                if not response.status:\n                    self.__fail(response.msg)\n    async def __setup_data_pump(self) -> None:\n        self.__data_queue = asyncio.Queue(loop=self.__event_loop)\n        self.__data_pump_task = self.__event_loop.create_task(self.__data_pump_main())\n    async def __setup_encoder_process(self) -> None:\n        self.__encoder = Encoder.create(\n            data_handler=self.__data_queue.put_nowait,\n            error_handler=self.__fail,\n            event_loop=self.__event_loop,\n            settings=self.__render_settings)\n        await self.__encoder.setup()\n    async def __setup_datastream_pipe(self) -> None:\n        self.__datastream_address = os.path.join(\n", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "length": 1276, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "4b93f91719b36d7aee8a2f7f39b3991d464913e3bc3e77b4"}
{"input": "", "context": "/*\n * This file is part of ChronoJump\n *\n * ChronoJump is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or   \n *    (at your option) any later version.\n *    \n * ChronoJump is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the \n *    GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n *  along with this program; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Copyright (C) 2004-2017   Xavier de Blas <xaviblas@gmail.com> \n */\nusing System;\nusing Gtk;\nusing Glade;\nusing GLib; //for Value\nusing System.Text; //StringBuilder\nusing System.Collections; //ArrayList\nusing Mono.Unix;\npublic class ConvertWeightWindow \n{\n\t[Widget] Gtk.Window convert_weight;\n\tstatic ConvertWeightWindow ConvertWeightWindowBox;\n\t[Widget] Gtk.TreeView treeview1;\n\t[Widget] Gtk.Label label_old_weight_value;\n\t[Widget] Gtk.Label label_new_weight_value;\n\t[Widget] Gtk.Button button_accept;\n\t[Widget] Gtk.Button button_cancel;\n\tTreeStore store;\n\tdouble oldPersonWeight;\n\tdouble newPersonWeight;\n\tstring [] jumpsNormal;\n\tstring [] jumpsReactive;\n\tint columnBool1 = 6;\n\tint columnBool2 = 8;\n\tstring simpleString;\n\tstring reactiveString;\n\t\n\tConvertWeightWindow (double oldPersonWeight, double newPersonWeight, string [] jumpsNormal, string [] jumpsReactive) {\n\t\tGlade.XML gladeXML;\n\t\tgladeXML = Glade.XML.FromAssembly (Util.GetGladePath() + \"convert_weight.glade\", \"convert_weight\", null);\n\t\tgladeXML.Autoconnect(this);\n\t\t\n\t\t//put an icon to window\n\t\tUtilGtk.IconWindow(convert_weight);\n\t\tthis.oldPersonWeight = oldPersonWeight;\n\t\tthis.newPersonWeight = newPersonWeight;\n\t\tthis.jumpsNormal = jumpsNormal;\n\t\tthis.jumpsReactive = jumpsReactive;\n\t\t\t\t\t\n\t\tsimpleString = Catalog.GetString(\"Simple\");\n\t\treactiveString = Catalog.GetString(\"Reactive\");\n\t\n\t\tcreateTreeViewWithCheckboxes(treeview1);\n\t\t\n\t\tstore = new TreeStore( \n\t\t\t\ttypeof (string), //uniqueID\n\t\t\t\ttypeof (string), //simple or reactive\n\t\t\t\ttypeof (string), //jumpType\n\t\t\t\ttypeof (string), //tf \n\t\t\t\ttypeof (string), //tc \n\t\t\t\t/* following eg of a subject of 70Kg \n\t\t\t\t * that has done a jump with an extra of 70Kg\n\t\t\t\t * and after (in same session) changes person weight to 80\n\t\t\t\t */\n\t\t\t\ttypeof (string), //weight % + weight kg (old) (eg: 100%-70Kg)\n\t\t\t\ttypeof (bool), //mark new option 1\n\t\t\t\ttypeof (string), //weight % + weight kg (new option1) (eg: 100%-80Kg)\n\t\t\t\ttypeof (bool), //mark new option 2\n\t\t\t\ttypeof (string) //weight % + weight kg (new option2) (eg: 87%-70Kg)\n\t\t\t\t);\n\t\ttreeview1.Model = store;\n\t\t\n\t\tfillTreeView( treeview1, store );\n\t}\n\tstatic public ConvertWeightWindow Show (\n\t\t\tdouble oldPersonWeight, double newPersonWeight, string [] jumpsNormal, string [] jumpsReactive)\n\t{\n\t\tif (ConvertWeightWindowBox == null) {\n\t\t\tConvertWeightWindowBox = \n\t\t\t\tnew ConvertWeightWindow (oldPersonWeight, newPersonWeight, jumpsNormal, jumpsReactive);\n\t\t}\n\t\n\t\tConvertWeightWindowBox.label_old_weight_value.Text = oldPersonWeight.ToString() + \" Kg\";\n\t\tConvertWeightWindowBox.label_new_weight_value.Text = newPersonWeight.ToString() + \" Kg\";\n\t\tConvertWeightWindowBox.convert_weight.Show ();\n\t\t\n\t\treturn ConvertWeightWindowBox;\n\t}\n\tprotected void createTreeViewWithCheckboxes (Gtk.TreeView tv) {\n\t\ttv.HeadersVisible=true;\n\t\tint count = 0;\n\t\ttv.AppendColumn ( Catalog.GetString(\"ID\"), new CellRendererText(), \"text\", count++);\n\t\ttv.AppendColumn ( \n\t\t\t\tCatalog.GetString(\"Simple\") + \" \" +\n\t\t\t\tCatalog.GetString(\"or\") + \" \" +\n\t\t\t\tCatalog.GetString(\"Reactive\")\n\t\t\t\t, new CellRendererText(), \"text\", count++);\n\t\ttv.AppendColumn ( Catalog.GetString(\"Type\"), new CellRendererText(), \"text\", count++);\n\t\ttv.AppendColumn ( \n\t\t\t\tCatalog.GetString(\"TF\") \n\t\t\t\t/*\n\t\t\t\t+ \"\\n\" + \n\t\t\t\tCatalog.GetString(\"TF\") + \"(\" + \n\t\t\t\tCatalog.GetString(\"AVG\") + \")\"\n\t\t\t\t*/\n\t\t\t\t, new CellRendererText(), \"text\", count++);\n\t\ttv.AppendColumn ( \n\t\t\t\tCatalog.GetString(\"TC\") \n\t\t\t\t/*\n\t\t\t\t+ \"\\n\" + \n\t\t\t\tCatalog.GetString(\"TC\") + \"(\" + \n\t\t\t\tCatalog.GetString(\"AVG\") + \")\"\n\t\t\t\t*/\n\t\t\t\t, new CellRendererText(), \"text\", count++);\n\t\ttv.AppendColumn ( Catalog.GetString(\"Old weight\"), new CellRendererText(), \"text\", count++);\n\t\tCellRendererToggle crt = new CellRendererToggle();\n\t\tcrt.Visible = true;\n\t\tcrt.Activatable = true;\n\t\tcrt.Active = true;\n\t\tcrt.Toggled += ItemToggled1;\n\t\tTreeViewColumn column = new TreeViewColumn (\"\", crt, \"active\", count);\n\t\tcolumn.Clickable = true;\n\t\ttv.InsertColumn (column, count++);\n\t\ttv.AppendColumn ( Catalog.GetString(\"New weight\\noption 1\"), new CellRendererText(), \"text\", count++);\n\t\tCellRendererToggle crt2 = new CellRendererToggle();\n\t\tcrt2.Visible = true;\n\t\tcrt2.Activatable = true;\n\t\tcrt2.Active = true;\n\t\tcrt2.Toggled += ItemToggled2;\n\t\tcolumn = new TreeViewColumn (\"\", crt2, \"active\", count);\n\t\tcolumn.Clickable = true;\n\t\ttv.InsertColumn (column, count++);\n\t\ttv.AppendColumn ( Catalog.GetString(\"New weight\\noption 2\"), new CellRendererText(), \"text\", count++);\n\t}\n\t\n\tvoid ItemToggled1(object o, ToggledArgs args) {\n\t\tItemToggled(columnBool1, columnBool2, o, args);\n\t}\n\tvoid ItemToggled2(object o, ToggledArgs args) {\n\t\tItemToggled(columnBool2, columnBool1, o, args);\n\t}\n\t\n\tvoid ItemToggled(int columnThis, int columnOther, object o, ToggledArgs args) {\n\t\tTreeIter iter;\n\t\tif (store.GetIter (out iter, new TreePath(args.Path))) \n\t\t{\n\t\t\tbool val = (bool) store.GetValue (iter, columnThis);\n\t\t\tLogB.Information (string.Format(\"toggled {0} with value {1}\", args.Path, !val));\n\t\t\tif(args.Path == \"0\") {\n\t\t\t\tif (store.GetIterFirst(out iter)) {\n\t\t\t\t\tval = (bool) store.GetValue (iter, columnThis);\n\t\t\t\t\tstore.SetValue (iter, columnThis, !val);\n\t\t\t\t\tstore.SetValue (iter, columnOther, val);\n\t\t\t\t\twhile ( store.IterNext(ref iter) ){\n\t\t\t\t\t\tstore.SetValue (iter, columnThis, !val);\n\t\t\t\t\t\tstore.SetValue (iter, columnOther, val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstore.SetValue (iter, columnThis, !val);\n\t\t\t\tstore.SetValue (iter, columnOther, val);\n\t\t\t\t//usnelect \"all\" checkboxes\n\t\t\t\tstore.GetIterFirst(out iter);\n\t\t\t\tstore.SetValue (iter, columnThis, false);\n\t\t\t\tstore.SetValue (iter, columnOther, false);\n\t\t\t}\n\t\t}\n\t}\n\tprivate string createStringCalculatingKgs (double personWeightKg, double jumpWeightPercent) {\n\t\treturn jumpWeightPercent + \"% \" + \n\t\t\tConvert.ToDouble(Util.WeightFromPercentToKg(jumpWeightPercent, personWeightKg)).ToString()\n\t\t\t+ \"Kg\";\n\t}\n\tprivate string createStringCalculatingPercent (double oldPersonWeightKg, double newPersonWeightKg, double jumpWeightPercent) {\n\t\tdouble jumpInKg = Util.WeightFromPercentToKg(jumpWeightPercent, oldPersonWeightKg);\n\t\tdouble jumpPercentToNewPersonWeight = Convert.ToDouble(Util.WeightFromKgToPercent(jumpInKg, newPersonWeightKg));\n\t\treturn jumpPercentToNewPersonWeight + \"% \" + jumpInKg + \"Kg\";\n\t}\n\tprotected void fillTreeView (Gtk.TreeView tv, TreeStore store) \n\t{\n\t\t//add a string for first row (for checking or unchecking all)\n\t\tstore.AppendValues ( \"\", \"\", \"\", \"\", \"\", \"\", true, \"\", false, \"\");\n\t\t\n\t\tforeach (string jump in jumpsNormal) {\n\t\t\tstring [] myStringFull = jump.Split(new char[] {':'});\n\t\t\tstore.AppendValues (\n\t\t\t\t\tmyStringFull[1], //uniqueID\n\t\t\t\t\tsimpleString,\n\t\t\t\t\tmyStringFull[4], //type\n\t\t\t\t\tmyStringFull[5], //tf\n\t\t\t\t\tmyStringFull[6], //tf\n\t\t\t\t\tcreateStringCalculatingKgs(oldPersonWeight, Convert.ToDouble(Util.ChangeDecimalSeparator(myStringFull[8]))), //old weight\n\t\t\t\t\ttrue,\n\t\t\t\t\tcreateStringCalculatingKgs(newPersonWeight, Convert.ToDouble(Util.ChangeDecimalSeparator(myStringFull[8]))), //new weight 1\n\t\t\t\t\tfalse,\n\t\t\t\t\tcreateStringCalculatingPercent(oldPersonWeight, newPersonWeight, Convert.ToDouble(Util.ChangeDecimalSeparator(myStringFull[8]))) //new weight 2\n\t\t\t\t\t);\n\t\t}\n\t\tforeach (string jump in jumpsReactive) {\n\t\t\tstring [] myStringFull = jump.Split(new char[] {':'});\n\t\t\tstore.AppendValues (\n\t\t\t\t\tmyStringFull[1], //uniqueID\n\t\t\t\t\treactiveString,\n\t\t\t\t\tmyStringFull[4], //type\n\t\t\t\t\tmyStringFull[10], //tf (AVG)\n\t\t\t\t\tmyStringFull[11], //tf (AVG)\n\t\t\t\t\tcreateStringCalculatingKgs(oldPersonWeight, Convert.ToDouble(Util.ChangeDecimalSeparator(myStringFull[8]))), //old weight\n\t\t\t\t\ttrue,\n\t\t\t\t\tcreateStringCalculatingKgs(newPersonWeight, Convert.ToDouble(Util.ChangeDecimalSeparator(myStringFull[8]))), //new weight 1\n\t\t\t\t\tfalse,\n\t\t\t\t\tcreateStringCalculatingPercent(oldPersonWeight, newPersonWeight, Convert.ToDouble(Util.ChangeDecimalSeparator(myStringFull[8]))) //new weight 2\n\t\t\t\t\t);\n\t\t}\n\t\t \n\t}\n\tprotected void on_button_cancel_clicked (object o, EventArgs args)\n\t{\n\t\tConvertWeightWindowBox.convert_weight.Hide();\n\t\tConvertWeightWindowBox = null;\n\t}\n\t\n\tprotected void on_delete_event (object o, DeleteEventArgs args)\n\t{\n\t\tConvertWeightWindowBox.convert_weight.Hide();\n\t\tConvertWeightWindowBox = null;\n\t}\n\t\n\tprotected void on_button_accept_clicked (object o, EventArgs args)\n\t{\n\t\tGtk.TreeIter iter;\n\t\t\n\t\tint jumpID;\n\t\tbool option1;\n\t\tif (store.GetIterFirst(out iter)) {\n\t\t\t//don't catch 0 value\n\t\t\twhile ( store.IterNext(ref iter) ){\n\t\t\t\toption1 = (bool) store.GetValue (iter, columnBool1);\n\t\t\t\t//only change in database if option is 2\n\t\t\t\t//because option 1 leaves the same percent and changes Kg (and database is in %)\n", "answers": ["\t\t\t\tif(! option1) {"], "length": 957, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "54df7435e6cdeb9cf80f52a45f4c173229b57b7dfcc77ad7"}
{"input": "", "context": "/*\n * $Id: Resources.java 476419 2006-11-18 02:28:07Z niallp $\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.struts.validator;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.commons.validator.Arg;\nimport org.apache.commons.validator.Field;\nimport org.apache.commons.validator.Msg;\nimport org.apache.commons.validator.Validator;\nimport org.apache.commons.validator.ValidatorAction;\nimport org.apache.commons.validator.ValidatorResources;\nimport org.apache.commons.validator.Var;\nimport org.apache.struts.Globals;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.config.ModuleConfig;\nimport org.apache.struts.util.MessageResources;\nimport org.apache.struts.util.ModuleUtils;\nimport org.apache.struts.util.RequestUtils;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.Locale;\n/**\n * This class helps provides some useful methods for retrieving objects from\n * different scopes of the application.\n *\n * @version $Rev: 476419 $ $Date: 2005-09-16 23:34:41 -0400 (Fri, 16 Sep 2005)\n *          $\n * @since Struts 1.1\n */\npublic class Resources {\n    /**\n     * The message resources for this package.\n     */\n    private static MessageResources sysmsgs =\n        MessageResources.getMessageResources(\n            \"org.apache.struts.validator.LocalStrings\");\n    /**\n     * <p>Commons Logging instance.</p>\n     */\n    private static Log log = LogFactory.getLog(Resources.class);\n    /**\n     * Resources key the <code>ServletContext</code> is stored under.\n     */\n    private static String SERVLET_CONTEXT_PARAM =\n        \"javax.servlet.ServletContext\";\n    /**\n     * Resources key the <code>HttpServletRequest</code> is stored under.\n     */\n    private static String HTTP_SERVLET_REQUEST_PARAM =\n        \"javax.servlet.http.HttpServletRequest\";\n    /**\n     * Resources key the <code>ActionMessages</code> is stored under.\n     */\n    private static String ACTION_MESSAGES_PARAM =\n        \"org.apache.struts.action.ActionMessages\";\n    /**\n     * Retrieve <code>ValidatorResources</code> for the current module.\n     *\n     * @param application Application Context\n     * @param request     The ServletRequest\n     */\n    public static ValidatorResources getValidatorResources(\n        ServletContext application, HttpServletRequest request) {\n        String prefix =\n            ModuleUtils.getInstance().getModuleConfig(request, application)\n                       .getPrefix();\n        return (ValidatorResources) application.getAttribute(ValidatorPlugIn.VALIDATOR_KEY\n            + prefix);\n    }\n    /**\n     * Retrieve <code>MessageResources</code> for the module.\n     *\n     * @param request the servlet request\n     */\n    public static MessageResources getMessageResources(\n        HttpServletRequest request) {\n        return (MessageResources) request.getAttribute(Globals.MESSAGES_KEY);\n    }\n    /**\n     * Retrieve <code>MessageResources</code> for the module and bundle.\n     *\n     * @param application the servlet context\n     * @param request     the servlet request\n     * @param bundle      the bundle key\n     */\n    public static MessageResources getMessageResources(\n        ServletContext application, HttpServletRequest request, String bundle) {\n        if (bundle == null) {\n            bundle = Globals.MESSAGES_KEY;\n        }\n        MessageResources resources =\n            (MessageResources) request.getAttribute(bundle);\n        if (resources == null) {\n            ModuleConfig moduleConfig =\n                ModuleUtils.getInstance().getModuleConfig(request, application);\n            resources =\n                (MessageResources) application.getAttribute(bundle\n                    + moduleConfig.getPrefix());\n        }\n        if (resources == null) {\n            resources = (MessageResources) application.getAttribute(bundle);\n        }\n        if (resources == null) {\n            throw new NullPointerException(\n                \"No message resources found for bundle: \" + bundle);\n        }\n        return resources;\n    }\n    /**\n     * Get the value of a variable.\n     *\n     * @param varName   The variable name\n     * @param field     the validator Field\n     * @param validator The Validator\n     * @param request   the servlet request\n     * @param required  Whether the variable is mandatory\n     * @return The variable's value\n     */\n    public static String getVarValue(String varName, Field field,\n        Validator validator, HttpServletRequest request, boolean required) {\n        Var var = field.getVar(varName);\n        if (var == null) {\n            String msg = sysmsgs.getMessage(\"variable.missing\", varName);\n            if (required) {\n                throw new IllegalArgumentException(msg);\n            }\n            if (log.isDebugEnabled()) {\n                log.debug(field.getProperty() + \": \" + msg);\n            }\n            return null;\n        }\n        ServletContext application =\n            (ServletContext) validator.getParameterValue(SERVLET_CONTEXT_PARAM);\n        return getVarValue(var, application, request, required);\n    }\n    /**\n     * Get the value of a variable.\n     *\n     * @param var         the validator variable\n     * @param application The ServletContext\n     * @param request     the servlet request\n     * @param required    Whether the variable is mandatory\n     * @return The variables values\n     */\n    public static String getVarValue(Var var, ServletContext application,\n        HttpServletRequest request, boolean required) {\n        String varName = var.getName();\n        String varValue = var.getValue();\n        // Non-resource variable\n        if (!var.isResource()) {\n            return varValue;\n        }\n        // Get the message resources\n        String bundle = var.getBundle();\n        MessageResources messages =\n            getMessageResources(application, request, bundle);\n        // Retrieve variable's value from message resources\n        Locale locale = RequestUtils.getUserLocale(request, null);\n        String value = messages.getMessage(locale, varValue, null);\n        // Not found in message resources\n        if ((value == null) && required) {\n            throw new IllegalArgumentException(sysmsgs.getMessage(\n                    \"variable.resource.notfound\", varName, varValue, bundle));\n        }\n        if (log.isDebugEnabled()) {\n            log.debug(\"Var=[\" + varName + \"], \" + \"bundle=[\" + bundle + \"], \"\n                + \"key=[\" + varValue + \"], \" + \"value=[\" + value + \"]\");\n        }\n        return value;\n    }\n    /**\n     * Gets the <code>Locale</code> sensitive value based on the key passed\n     * in.\n     *\n     * @param messages The Message resources\n     * @param locale   The locale.\n     * @param key      Key used to lookup the message\n     */\n    public static String getMessage(MessageResources messages, Locale locale,\n        String key) {\n        String message = null;\n        if (messages != null) {\n            message = messages.getMessage(locale, key);\n        }\n        return (message == null) ? \"\" : message;\n    }\n    /**\n     * Gets the <code>Locale</code> sensitive value based on the key passed\n     * in.\n     *\n     * @param request servlet request\n     * @param key     the request key\n     */\n    public static String getMessage(HttpServletRequest request, String key) {\n        MessageResources messages = getMessageResources(request);\n        return getMessage(messages, RequestUtils.getUserLocale(request, null),\n            key);\n    }\n    /**\n     * Gets the locale sensitive message based on the <code>ValidatorAction</code>\n     * message and the <code>Field</code>'s arg objects.\n     *\n     * @param messages The Message resources\n     * @param locale   The locale\n     * @param va       The Validator Action\n     * @param field    The Validator Field\n     */\n    public static String getMessage(MessageResources messages, Locale locale,\n        ValidatorAction va, Field field) {\n        String[] args = getArgs(va.getName(), messages, locale, field);\n        String msg =\n            (field.getMsg(va.getName()) != null) ? field.getMsg(va.getName())\n                                                 : va.getMsg();\n        return messages.getMessage(locale, msg, args);\n    }\n    /**\n     * Gets the <code>Locale</code> sensitive value based on the key passed\n     * in.\n     *\n     * @param application     the servlet context\n     * @param request         the servlet request\n     * @param defaultMessages The default Message resources\n     * @param locale          The locale\n     * @param va              The Validator Action\n     * @param field           The Validator Field\n     */\n    public static String getMessage(ServletContext application,\n        HttpServletRequest request, MessageResources defaultMessages,\n        Locale locale, ValidatorAction va, Field field) {\n        Msg msg = field.getMessage(va.getName());\n        if ((msg != null) && !msg.isResource()) {\n            return msg.getKey();\n        }\n        String msgKey = null;\n        String msgBundle = null;\n        MessageResources messages = defaultMessages;\n        if (msg == null) {\n            msgKey = va.getMsg();\n        } else {\n            msgKey = msg.getKey();\n            msgBundle = msg.getBundle();\n            if (msg.getBundle() != null) {\n                messages =\n                    getMessageResources(application, request, msg.getBundle());\n            }\n        }\n        if ((msgKey == null) || (msgKey.length() == 0)) {\n            return \"??? \" + va.getName() + \".\" + field.getProperty() + \" ???\";\n        }\n        // Get the arguments\n        Arg[] args = field.getArgs(va.getName());\n        String[] argValues =\n            getArgValues(application, request, messages, locale, args);\n        // Return the message\n        return messages.getMessage(locale, msgKey, argValues);\n    }\n    /**\n     * Gets the <code>ActionMessage</code> based on the\n     * <code>ValidatorAction</code> message and the <code>Field</code>'s arg\n     * objects.\n     * <p>\n     * <strong>Note:</strong> this method does not respect bundle information\n     * stored with the field's &lt;msg&gt; or &lt;arg&gt; elements, and localization\n     * will not work for alternative resource bundles. This method is\n     * deprecated for this reason, and you should use\n     * {@link #getActionMessage(Validator,HttpServletRequest,ValidatorAction,Field)}\n     * instead. \n     *\n     * @param request the servlet request\n     * @param va      Validator action\n     * @param field   the validator Field\n     * @deprecated Use getActionMessage(Validator, HttpServletRequest,\n     *    ValidatorAction, Field) method instead\n     */\n    public static ActionMessage getActionMessage(HttpServletRequest request,\n        ValidatorAction va, Field field) {\n        String[] args =\n            getArgs(va.getName(), getMessageResources(request),\n                RequestUtils.getUserLocale(request, null), field);\n        String msg =\n            (field.getMsg(va.getName()) != null) ? field.getMsg(va.getName())\n                                                 : va.getMsg();\n        return new ActionMessage(msg, args);\n    }\n    /**\n     * Gets the <code>ActionMessage</code> based on the\n     * <code>ValidatorAction</code> message and the <code>Field</code>'s arg\n     * objects.\n     *\n     * @param validator the Validator\n     * @param request   the servlet request\n     * @param va        Validator action\n     * @param field     the validator Field\n     */\n    public static ActionMessage getActionMessage(Validator validator,\n        HttpServletRequest request, ValidatorAction va, Field field) {\n        Msg msg = field.getMessage(va.getName());\n        if ((msg != null) && !msg.isResource()) {\n            return new ActionMessage(msg.getKey(), false);\n        }\n        String msgKey = null;\n        String msgBundle = null;\n        if (msg == null) {\n            msgKey = va.getMsg();\n        } else {\n            msgKey = msg.getKey();\n            msgBundle = msg.getBundle();\n        }\n        if ((msgKey == null) || (msgKey.length() == 0)) {\n            return new ActionMessage(\"??? \" + va.getName() + \".\"\n                + field.getProperty() + \" ???\", false);\n        }\n        ServletContext application =\n            (ServletContext) validator.getParameterValue(SERVLET_CONTEXT_PARAM);\n        MessageResources messages =\n            getMessageResources(application, request, msgBundle);\n        Locale locale = RequestUtils.getUserLocale(request, null);\n        Arg[] args = field.getArgs(va.getName());\n        String[] argValues =\n            getArgValues(application, request, messages, locale, args);\n        ActionMessage actionMessage = null;\n        if (msgBundle == null) {\n            actionMessage = new ActionMessage(msgKey, argValues);\n        } else {\n            String message = messages.getMessage(locale, msgKey, argValues);\n            actionMessage = new ActionMessage(message, false);\n        }\n        return actionMessage;\n    }\n    /**\n     * Gets the message arguments based on the current <code>ValidatorAction</code>\n     * and <code>Field</code>.\n     *\n     * @param actionName action name\n     * @param messages   message resources\n     * @param locale     the locale\n     * @param field      the validator field\n     */\n    public static String[] getArgs(String actionName,\n        MessageResources messages, Locale locale, Field field) {\n        String[] argMessages = new String[4];\n        Arg[] args =\n            new Arg[] {\n                field.getArg(actionName, 0), field.getArg(actionName, 1),\n                field.getArg(actionName, 2), field.getArg(actionName, 3)\n            };\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n                argMessages[i] = getMessage(messages, locale, args[i].getKey());\n            } else {\n                argMessages[i] = args[i].getKey();\n            }\n        }\n        return argMessages;\n    }\n    /**\n     * Gets the message arguments based on the current <code>ValidatorAction</code>\n     * and <code>Field</code>.\n     *\n     * @param application     the servlet context\n     * @param request         the servlet request\n     * @param defaultMessages Default message resources\n     * @param locale          the locale\n     * @param args            The arguments for the message\n     */\n    private static String[] getArgValues(ServletContext application,\n        HttpServletRequest request, MessageResources defaultMessages,\n        Locale locale, Arg[] args) {\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "length": 1570, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "e42bb143aca03ffdde352e012ca3991013aa4f1018e60c8f"}
{"input": "", "context": "package com.censoredsoftware.capitalism.data;\nimport com.censoredsoftware.capitalism.Capitalism;\nimport com.censoredsoftware.capitalism.data.util.ServerDatas;\nimport com.censoredsoftware.capitalism.data.util.TimedDatas;\nimport com.censoredsoftware.capitalism.entity.Firm;\nimport com.censoredsoftware.capitalism.entity.Person;\nimport com.censoredsoftware.censoredlib.data.ServerData;\nimport com.censoredsoftware.censoredlib.data.TimedData;\nimport com.censoredsoftware.censoredlib.helper.ConfigFile;\nimport com.google.common.collect.Maps;\nimport org.bukkit.Bukkit;\nimport org.bukkit.ChatColor;\nimport org.bukkit.configuration.ConfigurationSection;\nimport org.bukkit.entity.Player;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentMap;\npublic class DataManager\n{\n\t// Data\n\tpublic static ConcurrentMap<String, Person> persons;\n\tpublic static ConcurrentMap<UUID, Firm> firms;\n\tpublic static ConcurrentMap<UUID, TimedData> timedData;\n\tpublic static ConcurrentMap<UUID, ServerData> serverData;\n\tprivate static ConcurrentMap<String, HashMap<String, Object>> tempData;\n\tstatic\n\t{\n\t\tfor(File file : File.values())\n\t\t\tfile.getConfigFile().loadToData();\n\t\ttempData = Maps.newConcurrentMap();\n\t}\n\tpublic static void save()\n\t{\n\t\tfor(File file : File.values())\n\t\t\tfile.getConfigFile().saveToFile();\n\t}\n\tpublic static void flushData()\n\t{\n\t\t// Kick everyone\n\t\tfor(Player player : Bukkit.getOnlinePlayers())\n\t\t\tplayer.kickPlayer(ChatColor.GREEN + \"Data has been reset, you can rejoin now.\");\n\t\t// Clear the data\n\t\tpersons.clear();\n\t\tfirms.clear();\n\t\ttimedData.clear();\n\t\ttempData.clear();\n\t\tserverData.clear();\n\t\tsave();\n\t\t// Reload the PLUGIN\n\t\tBukkit.getServer().getPluginManager().disablePlugin(Capitalism.PLUGIN);\n\t\tBukkit.getServer().getPluginManager().enablePlugin(Capitalism.PLUGIN);\n\t}\n\t/*\n\t * Temporary data\n\t */\n\tpublic static boolean hasKeyTemp(String key, String subKey)\n\t{\n\t\treturn tempData.containsKey(key) && tempData.get(key).containsKey(subKey);\n\t}\n\tpublic static Object getValueTemp(String key, String subKey)\n\t{\n\t\tif(tempData.containsKey(key)) return tempData.get(key).get(subKey);\n\t\telse return null;\n\t}\n\tpublic static void saveTemp(String key, String subKey, Object value)\n\t{\n\t\tif(!tempData.containsKey(key)) tempData.put(key, new HashMap<String, Object>());\n\t\ttempData.get(key).put(subKey, value);\n\t}\n\tpublic static void removeTemp(String key, String subKey)\n\t{\n\t\tif(tempData.containsKey(key) && tempData.get(key).containsKey(subKey)) tempData.get(key).remove(subKey);\n\t}\n\t/*\n\t * Timed data\n\t */\n\tpublic static void saveTimed(String key, String subKey, Object data, Integer seconds)\n\t{\n\t\t// Remove the data if it exists already\n\t\tTimedDatas.remove(key, subKey);\n\t\t// Create and save the timed data\n\t\tTimedData timedData = new TimedData();\n\t\ttimedData.generateId();\n\t\ttimedData.setKey(key);\n\t\ttimedData.setSubKey(subKey);\n\t\ttimedData.setData(data.toString());\n\t\ttimedData.setSeconds(seconds);\n\t\tDataManager.timedData.put(timedData.getId(), timedData);\n\t}\n\tpublic static void removeTimed(String key, String subKey)\n\t{\n\t\tTimedDatas.remove(key, subKey);\n\t}\n\tpublic static boolean hasTimed(String key, String subKey)\n\t{\n\t\treturn TimedDatas.find(key, subKey) != null;\n\t}\n\tpublic static Object getTimedValue(String key, String subKey)\n\t{\n\t\treturn TimedDatas.find(key, subKey).getData();\n\t}\n\tpublic static long getTimedExpiration(String key, String subKey)\n\t{\n\t\treturn TimedDatas.find(key, subKey).getExpiration();\n\t}\n\t/*\n\t * Server data\n\t */\n\tpublic static void saveServerData(String key, String subKey, Object data)\n\t{\n\t\t// Remove the data if it exists already\n\t\tServerDatas.remove(key, subKey);\n\t\t// Create and save the timed data\n\t\tServerData serverData = new ServerData();\n\t\tserverData.generateId();\n\t\tserverData.setKey(key);\n\t\tserverData.setSubKey(subKey);\n\t\tserverData.setData(data.toString());\n\t\tDataManager.serverData.put(serverData.getId(), serverData);\n\t}\n\tpublic static void removeServerData(String key, String subKey)\n\t{\n\t\tServerDatas.remove(key, subKey);\n\t}\n\tpublic static boolean hasServerData(String key, String subKey)\n\t{\n\t\treturn ServerDatas.find(key, subKey) != null;\n\t}\n\tpublic static Object getServerDataValue(String key, String subKey)\n\t{\n\t\treturn ServerDatas.find(key, subKey).getData();\n\t}\n\tpublic static enum File\n\t{\n\t\tPLAYER(new ConfigFile<String, Person>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic Person create(String string, ConfigurationSection conf)\n\t\t\t{\n\t\t\t\treturn new Person(string, conf);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic ConcurrentMap<String, Person> getLoadedData()\n\t\t\t{\n\t\t\t\treturn DataManager.persons;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic String getSavePath()\n\t\t\t{\n\t\t\t\treturn Capitalism.SAVE_PATH;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic String getSaveFile()\n\t\t\t{\n\t\t\t\treturn \"persons.yml\";\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic Map<String, Object> serialize(String string)\n\t\t\t{\n\t\t\t\treturn getLoadedData().get(string).serialize();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic String convertFromString(String stringId)\n\t\t\t{\n\t\t\t\treturn stringId;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void loadToData()\n\t\t\t{\n\t\t\t\tpersons = loadFromFile();\n\t\t\t}\n\t\t}), FIRM(new ConfigFile<UUID, Firm>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic Firm create(UUID id, ConfigurationSection conf)\n\t\t\t{\n\t\t\t\treturn new Firm(id, conf);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic ConcurrentMap<UUID, Firm> getLoadedData()\n\t\t\t{\n\t\t\t\treturn DataManager.firms;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic String getSavePath()\n\t\t\t{\n\t\t\t\treturn Capitalism.SAVE_PATH;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic String getSaveFile()\n\t\t\t{\n\t\t\t\treturn \"firms.yml\";\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic Map<String, Object> serialize(UUID id)\n\t\t\t{\n\t\t\t\treturn getLoadedData().get(id).serialize();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic UUID convertFromString(String stringId)\n\t\t\t{\n\t\t\t\treturn UUID.fromString(stringId);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void loadToData()\n\t\t\t{\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "length": 515, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "04233bb10cad37ee372ddcc1ca95b3e2a853d217fa90929e"}
{"input": "", "context": "package gui;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.eclipse.jface.dialogs.MessageDialog;\nimport org.eclipse.jface.preference.BooleanFieldEditor;\nimport org.eclipse.jface.preference.FieldEditor;\nimport org.eclipse.jface.preference.FieldEditorPreferencePage;\nimport org.eclipse.jface.preference.IPreferenceStore;\nimport org.eclipse.jface.preference.IntegerFieldEditor;\nimport org.eclipse.jface.preference.PreferenceDialog;\nimport org.eclipse.jface.preference.PreferenceManager;\nimport org.eclipse.jface.preference.PreferenceNode;\nimport org.eclipse.jface.preference.PreferencePage;\nimport org.eclipse.jface.preference.PreferenceStore;\nimport org.eclipse.jface.util.IPropertyChangeListener;\nimport org.eclipse.jface.util.PropertyChangeEvent;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.graphics.Color;\nimport org.eclipse.swt.graphics.FontMetrics;\nimport org.eclipse.swt.graphics.GC;\nimport org.eclipse.swt.graphics.Image;\nimport org.eclipse.swt.graphics.RGB;\nimport org.eclipse.swt.layout.GridData;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Display;\nimport org.eclipse.swt.widgets.Label;\nimport org.eclipse.swt.widgets.Shell;\nimport org.eclipse.swt.widgets.Text;\nimport util.PmTransException;\npublic class Config extends PreferenceStore {\n\tprivate static Config instance = null;\n\t/**\n\t * Non-configurable stuff\n\t */\n\t// Config file path\n\tprivate static String CONFIG_PATH = \"./config.properties\";\n\t// State file path\n\tpublic static String STATE_PATH = \"./state.transcriber\";\n\t// Icon paths\n\tpublic static String ICON_PATH_PLAY = \"/icon/start.png\";\n\tpublic static String ICON_PATH_PAUSE = \"/icon/pause.png\";\n\tpublic static String ICON_PATH_RESTART = \"/icon/restart.png\";\n\tpublic static String ICON_PATH_OPEN_TRANSCRIPTION = \"/icon/open.png\";\n\tpublic static String ICON_PATH_OPEN_AUDIO = \"/icon/openAudio.png\";\n\tpublic static String ICON_PATH_SAVE_TRANSCRIPTION = \"/icon/save.png\";\n\tpublic static String ICON_PATH_LOOP = \"/icon/loop.png\";\n\tpublic static String ICON_PATH_ZOOM_IN = \"/icon/zoom_in.png\";\n\tpublic static String ICON_PATH_ZOOM_OUT = \"/icon/zoom_out.png\";\n\tpublic static String ICON_PATH_COPY = \"/icon/copy.png\";\n\tpublic static String ICON_PATH_CUT = \"/icon/cut.png\";\n\tpublic static String ICON_PATH_PASTE = \"/icon/paste.png\";\n\tpublic static String ICON_PATH_CROSS = \"/icon/cross.png\";\n\tpublic static String ICON_PATH_ADVANCED_SEARCH = \"/icon/advancedSearch.png\";\n\tpublic static String ICON_PATH_CHANGE_BACKGROUND_COLOR = \"/icon/changeBackgroundColor.png\";\n\tpublic static String ICON_PATH_CHANGE_FONT_COLOR = \"/icon/changeFontColor.png\";\n\tpublic static String ICON_PATH_SETTINGS = \"/icon/settings.png\";\n\tpublic static String ICON_PATH_CONTRIBUTE = \"/icon/contribute.png\";\n\tpublic static String DEFAULT_ACCELERATORS = \"cxvfosa\";\n\t// Main shell initial dimensions\n\tprivate int SHELL_HEIGHT_DEFAULT = 600;\n\tprivate int SHELL_LENGHT_DEFAULT = 600;\n\tpublic static String SHELL_HEIGHT = \"window.height\";\n\tpublic static String SHELL_LENGHT = \"window.lenght\";\n\t// Last directory paths for file dialogs\n\tprivate String LAST_OPEN_AUDIO_PATH_DEFAULT = \"\";\n\tpublic static String LAST_OPEN_AUDIO_PATH = \"last.open.audio.path\";\n\tprivate String LAST_OPEN_TEXT_PATH_DEFAULT = \"\";\n\tpublic static String LAST_OPEN_TEXT_PATH = \"last.open.text.path\";\n\t// Last directory path for the export dialog\n\tprivate String LAST_EXPORT_TRANSCRIPTION_PATH_DEFALUT = \"\";\n\tpublic static String LAST_EXPORT_TRANSCRIPTION_PATH = \"last.export.transcription.path\";\n\t// URLs\n\tpublic static String CONTRIBUTE_URL = \"https://github.com/juanerasmoe/pmTrans/wiki/Contribute-to-pmTrans\";\n\t\n\t/**\n\t * Configurable stuff\n\t */\n\t// Duration of the short rewind in seconds\n\tprivate int SHORT_REWIND_DEFAULT = 5;\n\tpublic static String SHORT_REWIND = \"short.rewind.duration\";\n\t// Duration of the long rewind in seconds\n\tprivate int LONG_REWIND_DEFAULT = 10;\n\tpublic static String LONG_REWIND = \"long.rewind.duration\";\n\t// Duration of the rewind-and-play\n\tprivate static int REWIND_AND_PLAY_DEFAULT = 2;\n\tpublic static String REWIND_AND_PLAY = \"rewind.and.play.duration\";\n\t// Max size of the previous-files list\n\tprivate static int AUDIO_FILE_CACHE_LENGHT_DEFAULT = 7;\n\tpublic static String AUDIO_FILE_CACHE_LENGHT = \"audio.file.cache.lenght\";\n\tprivate static int TEXT_FILE_CACHE_LENGHT_DEFAULT = 7;\n\tpublic static String TEXT_FILE_CACHE_LENGHT = \"text.file.cache.lenght\";\n\tprivate static int SLOW_DOWN_PLAYBACK_DEFAULT = -5;\n\tpublic static String SLOW_DOWN_PLAYBACK = \"slow.down.playback\";\n\tprivate static int SPEED_UP_PLAYBACK_DEFAULT = 5;\n\tpublic static String SPEED_UP_PLAYBACK = \"speed.up.plaback\";\n\t// Auto save\n\tprivate static boolean AUTO_SAVE_DEFAULT = true;\n\tpublic static String AUTO_SAVE = \"auto.save\";\n\tprivate static int AUTO_SAVE_TIME_DEFAULT = 2;\n\tpublic static String AUTO_SAVE_TIME = \"auto.save.time\";\n\t// Mini-mode dialog\n\tprivate static boolean SHOW_MINI_MODE_DIALOG_DEFAULT = true;\n\tpublic static String SHOW_MINI_MODE_DIALOG = \"show.mini.mode.dialog\";\n\t// Font and size\n\tprivate static String FONT_DEFAULT = \"Courier New\";\n\tpublic static String FONT = \"font\";\n\tprivate static int FONT_SIZE_DEFAULT = 10;\n\tpublic static String FONT_SIZE = \"font.size\";\n\tprivate static Color FONT_COLOR_DEFAULT = Display.getCurrent()\n\t\t\t.getSystemColor(SWT.COLOR_BLACK);\n\tpublic static String FONT_COLOR = \"font.color\";\n\tprivate static Color BACKGROUND_COLOR_DEFAULT = Display.getCurrent()\n\t\t\t.getSystemColor(SWT.COLOR_WHITE);\n\tpublic static String BACKGROUND_COLOR = \"background.color\";\n\t// CONFIGURABLE ACCELERATORS\n\tprivate String accelerators;\n\t// Pause\n\tprivate static String PAUSE_KEY_DEFAULT = \" \";\n\tpublic static String PAUSE_KEY = \"pause.key\";\n\t// Short rewind\n\tprivate static String SHORT_REWIND_KEY_DEFAULT = \"7\";\n\tpublic static String SHORT_REWIND_KEY = \"short.rewind.key\";\n\t// Long rewind\n\tprivate static String LONG_REWIND_KEY_DEFAULT = \"8\";\n\tpublic static String LONG_REWIND_KEY = \"long.rewind.key\";\n\t// Speed up\n\tprivate static String SPEED_UP_KEY_DEFAULT = \"4\";\n\tpublic static String SPEED_UP_KEY = \"speed.up.key\";\n\t// Slow down\n\tprivate static String SLOW_DOWN_KEY_DEFAULT = \"3\";\n\tpublic static String SLOW_DOWN_KEY = \"slow.down.key\";\n\t// Audio loops\n\tprivate static String AUDIO_LOOPS_KEY_DEFAULT = \"9\";\n\tpublic static String AUDIO_LOOPS_KEY = \"audio.loops.key\";\n\tpublic static String LOOP_FRECUENCY = \"loop.frecuency\";\n\tprivate static int LOOP_FRECUENCY_DEFAULT = 5;\n\tpublic static String LOOP_LENGHT = \"loop.lenght\";\n\tprivate static int LOOP_LENGHT_DEFAULT = 2;\n\t// Timestamps\n\tprivate static String TIMESTAMP_KEY_DEFAULT = \"t\";\n\tpublic static String TIMESTAMP_KEY = \"timestamp.key\";\n\tprivate Config() {\n\t\tsuper(CONFIG_PATH);\n\t\t// Set up the defaults\n\t\tsetDefault(SHORT_REWIND, SHORT_REWIND_DEFAULT);\n\t\tsetDefault(LONG_REWIND, LONG_REWIND_DEFAULT);\n\t\tsetDefault(REWIND_AND_PLAY, REWIND_AND_PLAY_DEFAULT);\n\t\tsetDefault(SHELL_HEIGHT, SHELL_HEIGHT_DEFAULT);\n\t\tsetDefault(SHELL_LENGHT, SHELL_LENGHT_DEFAULT);\n\t\tsetDefault(TEXT_FILE_CACHE_LENGHT, TEXT_FILE_CACHE_LENGHT_DEFAULT);\n\t\tsetDefault(AUDIO_FILE_CACHE_LENGHT, AUDIO_FILE_CACHE_LENGHT_DEFAULT);\n\t\tsetDefault(SLOW_DOWN_PLAYBACK, SLOW_DOWN_PLAYBACK_DEFAULT);\n\t\tsetDefault(SPEED_UP_PLAYBACK, SPEED_UP_PLAYBACK_DEFAULT);\n\t\tsetDefault(AUTO_SAVE, AUTO_SAVE_DEFAULT);\n\t\tsetDefault(AUTO_SAVE_TIME, AUTO_SAVE_TIME_DEFAULT);\n\t\tsetDefault(SHOW_MINI_MODE_DIALOG, SHOW_MINI_MODE_DIALOG_DEFAULT);\n\t\tsetDefault(FONT, FONT_DEFAULT);\n\t\tsetDefault(FONT_SIZE, FONT_SIZE_DEFAULT);\n\t\tsetDefault(FONT_COLOR, FONT_COLOR_DEFAULT);\n\t\tsetDefault(BACKGROUND_COLOR, BACKGROUND_COLOR_DEFAULT);\n\t\t// Pause\n\t\tsetDefault(PAUSE_KEY, PAUSE_KEY_DEFAULT);\n\t\t// Short rewind\n\t\tsetDefault(SHORT_REWIND_KEY, SHORT_REWIND_KEY_DEFAULT);\n\t\t// Long rewind\n\t\tsetDefault(LONG_REWIND_KEY, LONG_REWIND_KEY_DEFAULT);\n\t\t// Playback speed\n\t\tsetDefault(SPEED_UP_KEY, SPEED_UP_KEY_DEFAULT);\n\t\tsetDefault(SLOW_DOWN_KEY, SLOW_DOWN_KEY_DEFAULT);\n\t\t// Audio loops\n\t\tsetDefault(AUDIO_LOOPS_KEY, AUDIO_LOOPS_KEY_DEFAULT);\n\t\tsetDefault(LOOP_FRECUENCY, LOOP_FRECUENCY_DEFAULT);\n\t\tsetDefault(LOOP_LENGHT, LOOP_LENGHT_DEFAULT);\n\t\t// Timestamp\n\t\tsetDefault(TIMESTAMP_KEY, TIMESTAMP_KEY_DEFAULT);\n\t\t// Cache\n\t\tsetDefault(LAST_OPEN_AUDIO_PATH, LAST_OPEN_AUDIO_PATH_DEFAULT);\n\t\tsetDefault(LAST_OPEN_TEXT_PATH, LAST_OPEN_TEXT_PATH_DEFAULT);\n\t\tsetDefault(LAST_EXPORT_TRANSCRIPTION_PATH,\n\t\t\t\tLAST_EXPORT_TRANSCRIPTION_PATH_DEFALUT);\n\t\ttry {\n\t\t\tload();\n\t\t} catch (Exception e) {\n\t\t\t// The properties will start as default values\n\t\t}\n\t\tupdateAccelerators();\n\t\t// Add the listeners\n\t\taddPropertyChangeListener(new IPropertyChangeListener() {\n\t\t\t@Override\n\t\t\tpublic void propertyChange(PropertyChangeEvent event) {\n\t\t\t\ttry {\n\t\t\t\t\tupdateAccelerators();\n\t\t\t\t\tsave();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\tpublic void showConfigurationDialog(Shell parent) throws PmTransException {\n\t\t// Create the preference manager\n\t\tPreferenceManager mgr = new PreferenceManager();\n\t\t// Create the nodes\n\t\tPreferenceNode playbackNode = new PreferenceNode(\"playbackPreferences\");\n\t\tPreferencePage playbackPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new IntegerFieldEditor(SHORT_REWIND,\n\t\t\t\t\t\t\"Short rewind duration (in sec)\",\n\t\t\t\t\t\tgetFieldEditorParent()));\n\t\t\t\taddField(new IntegerFieldEditor(LONG_REWIND,\n\t\t\t\t\t\t\"Long rewind duration (in sec)\", getFieldEditorParent()));\n\t\t\t\taddField(new IntegerFieldEditor(REWIND_AND_PLAY,\n\t\t\t\t\t\t\"Rewind-and-resume duartion duration (in sec)\",\n\t\t\t\t\t\tgetFieldEditorParent()));\n\t\t\t\taddField(new IntegerFieldEditor(LOOP_FRECUENCY,\n\t\t\t\t\t\t\"Loops frecuency (in seconds)\", getFieldEditorParent()));\n\t\t\t\taddField(new IntegerFieldEditor(LOOP_LENGHT,\n\t\t\t\t\t\t\"Loop rewind lenght (in seconds)\",\n\t\t\t\t\t\tgetFieldEditorParent()));\n\t\t\t}\n\t\t};\n\t\tplaybackPage.setTitle(\"Playback preferences\");\n\t\tplaybackNode.setPage(playbackPage);\n\t\tPreferenceNode shortcutsNode = new PreferenceNode(\n\t\t\t\t\"shortcutsPreferences\");\n\t\tPreferencePage shortcutsPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new ShortcutFieldEditor(SHORT_REWIND_KEY,\n\t\t\t\t\t\t\"Short rewind\", getFieldEditorParent()));\n\t\t\t\taddField(new ShortcutFieldEditor(LONG_REWIND_KEY,\n\t\t\t\t\t\t\"Long rewind\", getFieldEditorParent()));\n\t\t\t\taddField(new ShortcutFieldEditor(PAUSE_KEY, \"Pause and resume\",\n\t\t\t\t\t\tgetFieldEditorParent()));\n\t\t\t\taddField(new ShortcutFieldEditor(AUDIO_LOOPS_KEY,\n\t\t\t\t\t\t\"Enable audio loops\", getFieldEditorParent()));\n\t\t\t\taddField(new ShortcutFieldEditor(SLOW_DOWN_KEY,\n\t\t\t\t\t\t\"Slow down audio playback\", getFieldEditorParent()));\n\t\t\t\taddField(new ShortcutFieldEditor(SPEED_UP_KEY,\n\t\t\t\t\t\t\"Speed up audio playback\", getFieldEditorParent()));\n\t\t\t\taddField(new ShortcutFieldEditor(TIMESTAMP_KEY,\n\t\t\t\t\t\t\"Insert timestamp\", getFieldEditorParent()));\n\t\t\t}\n\t\t};\n\t\tshortcutsPage.setTitle(\"Shortcuts preferences\");\n\t\tshortcutsNode.setPage(shortcutsPage);\n\t\tPreferenceNode generalNode = new PreferenceNode(\"generalPreferences\");\n", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "length": 925, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "36799d0d8e06fa5c217eccd67db779ab9866845eb0713e74"}
{"input": "", "context": "using System;\nusing System.Collections.Generic;\nusing Server.Network;\nusing Server.Items;\nusing Server.Targeting;\nusing Server.Engines.PartySystem;\nnamespace Server.Spells.Fourth\n{\n\tpublic class ArchProtectionSpell : MagerySpell\n\t{\n\t\tprivate static SpellInfo m_Info = new SpellInfo(\n\t\t\t\t\"Arch Protection\", \"Vas Uus Sanct\",\n\t\t\t\tCore.AOS ? 239 : 215,\n\t\t\t\t9011,\n\t\t\t\tReagent.Garlic,\n\t\t\t\tReagent.Ginseng,\n\t\t\t\tReagent.MandrakeRoot,\n\t\t\t\tReagent.SulfurousAsh\n\t\t\t);\n\t\tpublic override SpellCircle Circle { get { return SpellCircle.Fourth; } }\n        public override void SelectTarget()\n        {\n            Caster.Target = new InternalSphereTarget(this);\n        }\n        public override void OnSphereCast()\n        {\n            if (SpellTarget != null)\n            {\n                if (SpellTarget is IPoint3D)\n                {\n                    Target((IPoint3D)SpellTarget);\n                }\n                else\n                {\n                    Caster.SendAsciiMessage(\"Invalid target\");\n                }\n            }\n            FinishSequence();\n        }\n\t    public ArchProtectionSpell( Mobile caster, Item scroll ) : base( caster, scroll, m_Info )\n\t\t{\n\t\t}\n\t\tpublic override void OnCast()\n\t\t{\n\t\t\tCaster.Target = new InternalTarget( this );\n\t\t}\n\t\tpublic void Target( IPoint3D p )\n\t\t{\n\t\t\tif ( !Caster.CanSee( p ) )\n\t\t\t{\n\t\t\t\tCaster.SendLocalizedMessage( 500237 ); // Target can not be seen.\n\t\t\t}\n            else if (!CheckLineOfSight(p))\n            {\n                this.DoFizzle();\n                Caster.SendAsciiMessage(\"Target is not in line of sight\");\n            }\n\t\t\telse if ( CheckSequence() )\n\t\t\t{\n\t\t\t\tSpellHelper.Turn( Caster, p );\n\t\t\t\tSpellHelper.GetSurfaceTop( ref p );\n\t\t\t\tList<Mobile> targets = new List<Mobile>();\n\t\t\t\tMap map = Caster.Map;\n\t\t\t\tif ( map != null )\n\t\t\t\t{\n\t\t\t\t\tIPooledEnumerable eable = map.GetMobilesInRange( new Point3D( p ), Core.AOS ? 2 : 3 );\n\t\t\t\t\tforeach ( Mobile m in eable )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( Caster.CanBeBeneficial( m, false ) )\n\t\t\t\t\t\t\ttargets.Add( m );\n\t\t\t\t\t}\n\t\t\t\t\teable.Free();\n\t\t\t\t}\n\t\t\t\tif ( Core.AOS )\n\t\t\t\t{\n\t\t\t\t\tParty party = Party.Get( Caster );\n\t\t\t\t\tfor ( int i = 0; i < targets.Count; ++i )\n\t\t\t\t\t{\n\t\t\t\t\t\tMobile m = targets[i];\n\t\t\t\t\t\tif ( m == Caster || ( party != null && party.Contains( m ) ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCaster.DoBeneficial( m );\n\t\t\t\t\t\t\tSpells.Second.ProtectionSpell.Toggle( Caster, m );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tEffects.PlaySound( p, Caster.Map, 0x299 );\n\t\t\t\t\tint val = (int)(Caster.Skills[SkillName.Magery].Value/10.0 + 1);\n\t\t\t\t\tif ( targets.Count > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tfor ( int i = 0; i < targets.Count; ++i )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMobile m = targets[i];\n\t\t\t\t\t\t\tif ( m.BeginAction( typeof( ArchProtectionSpell ) ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tCaster.DoBeneficial( m );\n\t\t\t\t\t\t\t\tm.VirtualArmorMod += val;\n\t\t\t\t\t\t\t\tnew InternalTimer( m, Caster, val ).Start();\n\t\t\t\t\t\t\t\tm.FixedParticles( 0x375A, 9, 20, 5027, EffectLayer.Waist );\n\t\t\t\t\t\t\t\tm.PlaySound( 0x1F7 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tFinishSequence();\n\t\t}\n\t\tprivate class InternalTimer : Timer\n\t\t{\n\t\t\tprivate Mobile m_Owner;\n\t\t\tprivate int m_Val;\n\t\t\tpublic InternalTimer( Mobile target, Mobile caster, int val ) : base( TimeSpan.FromSeconds( 0 ) )\n\t\t\t{\n\t\t\t\tdouble time = caster.Skills[SkillName.Magery].Value * 1.2;\n\t\t\t\tif ( time > 144 )\n\t\t\t\t\ttime = 144;\n\t\t\t\tDelay = TimeSpan.FromSeconds( time );\n\t\t\t\tPriority = TimerPriority.OneSecond;\n\t\t\t\tm_Owner = target;\n\t\t\t\tm_Val = val;\n\t\t\t}\n\t\t\tprotected override void OnTick()\n\t\t\t{\n\t\t\t\tm_Owner.EndAction( typeof( ArchProtectionSpell ) );\n\t\t\t\tm_Owner.VirtualArmorMod -= m_Val;\n\t\t\t\tif ( m_Owner.VirtualArmorMod < 0 )\n\t\t\t\t\tm_Owner.VirtualArmorMod = 0;\n\t\t\t}\n\t\t}\n        private static Dictionary<Mobile, Int32> _Table = new Dictionary<Mobile, Int32>();\n        private static void AddEntry(Mobile m, Int32 v)\n        {\n            _Table[m] = v;\n        }\n        public static void RemoveEntry(Mobile m)\n        {\n            if (_Table.ContainsKey(m))\n            {\n                int v = _Table[m];\n                _Table.Remove(m);\n                m.EndAction(typeof(ArchProtectionSpell));\n                m.VirtualArmorMod -= v;\n                if (m.VirtualArmorMod < 0)\n                    m.VirtualArmorMod = 0;\n            }\n        }\n        private class InternalSphereTarget : Target\n        {\n            private ArchProtectionSpell m_Owner;\n            public InternalSphereTarget(ArchProtectionSpell owner)\n                : base(Core.ML ? 10 : 12, true, TargetFlags.Beneficial)\n            {\n                m_Owner = owner;\n                m_Owner.Caster.SendAsciiMessage(\"Select target...\");\n            }\n            protected override void OnTarget(Mobile from, object o)\n            {\n                if (o is IPoint3D)\n                {\n                    m_Owner.SpellTarget = o;\n                    m_Owner.CastSpell();\n                }\n                else\n                {\n                    m_Owner.Caster.SendAsciiMessage(\"Invalid target\");\n                }\n            }\n            protected override void OnTargetFinish(Mobile from)\n            {\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "length": 538, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "82560c22f3648e5086523b10f22179edb1aebdc379fdfaa5"}
{"input": "", "context": "# orm/session.py\n# Copyright (C) 2005-2013 the SQLAlchemy authors and contributors <see AUTHORS file>\n#\n# This module is part of SQLAlchemy and is released under\n# the MIT License: http://www.opensource.org/licenses/mit-license.php\n\"\"\"Provides the Session class and related utilities.\"\"\"\nimport weakref\nfrom itertools import chain\nfrom sqlalchemy import util, sql, engine, log, exc as sa_exc\nfrom sqlalchemy.sql import util as sql_util, expression\nfrom sqlalchemy.orm import (\n    SessionExtension, attributes, exc, query, unitofwork, util as mapperutil, state\n    )\nfrom sqlalchemy.orm.util import object_mapper as _object_mapper\nfrom sqlalchemy.orm.util import class_mapper as _class_mapper\nfrom sqlalchemy.orm.util import (\n    _class_to_mapper, _state_mapper,\n    )\nfrom sqlalchemy.orm.mapper import Mapper, _none_set\nfrom sqlalchemy.orm.unitofwork import UOWTransaction\nfrom sqlalchemy.orm import identity\nfrom sqlalchemy import event\nfrom sqlalchemy.orm.events import SessionEvents\nimport sys\n__all__ = ['Session', 'SessionTransaction', 'SessionExtension']\ndef sessionmaker(bind=None, class_=None, autoflush=True, autocommit=False,\n                 expire_on_commit=True, **kwargs):\n    \"\"\"Generate a custom-configured :class:`.Session` class.\n    The returned object is a subclass of :class:`.Session`, which, when instantiated\n    with no arguments, uses the keyword arguments configured here as its\n    constructor arguments.\n    It is intended that the :func:`.sessionmaker()` function be called within the\n    global scope of an application, and the returned class be made available\n    to the rest of the application as the single class used to instantiate\n    sessions.\n    e.g.::\n        # global scope\n        Session = sessionmaker(autoflush=False)\n        # later, in a local scope, create and use a session:\n        sess = Session()\n    Any keyword arguments sent to the constructor itself will override the\n    \"configured\" keywords::\n        Session = sessionmaker()\n        # bind an individual session to a connection\n        sess = Session(bind=connection)\n    The class also includes a special classmethod ``configure()``, which\n    allows additional configurational options to take place after the custom\n    ``Session`` class has been generated.  This is useful particularly for\n    defining the specific ``Engine`` (or engines) to which new instances of\n    ``Session`` should be bound::\n        Session = sessionmaker()\n        Session.configure(bind=create_engine('sqlite:///foo.db'))\n        sess = Session()\n    For options, see the constructor options for :class:`.Session`.\n    \"\"\"\n    kwargs['bind'] = bind\n    kwargs['autoflush'] = autoflush\n    kwargs['autocommit'] = autocommit\n    kwargs['expire_on_commit'] = expire_on_commit\n    if class_ is None:\n        class_ = Session\n    class Sess(object):\n        def __init__(self, **local_kwargs):\n            for k in kwargs:\n                local_kwargs.setdefault(k, kwargs[k])\n            super(Sess, self).__init__(**local_kwargs)\n        @classmethod\n        def configure(self, **new_kwargs):\n            \"\"\"(Re)configure the arguments for this sessionmaker.\n            e.g.::\n                Session = sessionmaker()\n                Session.configure(bind=create_engine('sqlite://'))\n            \"\"\"\n            kwargs.update(new_kwargs)\n    return type(\"SessionMaker\", (Sess, class_), {})\nclass SessionTransaction(object):\n    \"\"\"A :class:`.Session`-level transaction.\n    :class:`.SessionTransaction` is a mostly behind-the-scenes object\n    not normally referenced directly by application code.   It coordinates\n    among multiple :class:`.Connection` objects, maintaining a database\n    transaction for each one individually, committing or rolling them\n    back all at once.   It also provides optional two-phase commit behavior\n    which can augment this coordination operation.\n    The :attr:`.Session.transaction` attribute of :class:`.Session` refers to the\n    current :class:`.SessionTransaction` object in use, if any.\n    A :class:`.SessionTransaction` is associated with a :class:`.Session`\n    in its default mode of ``autocommit=False`` immediately, associated\n    with no database connections.  As the :class:`.Session` is called upon\n    to emit SQL on behalf of various :class:`.Engine` or :class:`.Connection`\n    objects, a corresponding :class:`.Connection` and associated :class:`.Transaction`\n    is added to a collection within the :class:`.SessionTransaction` object,\n    becoming one of the connection/transaction pairs maintained by the\n    :class:`.SessionTransaction`.\n    The lifespan of the :class:`.SessionTransaction` ends when the\n    :meth:`.Session.commit`, :meth:`.Session.rollback` or :meth:`.Session.close`\n    methods are called.  At this point, the :class:`.SessionTransaction` removes\n    its association with its parent :class:`.Session`.   A :class:`.Session`\n    that is in ``autocommit=False`` mode will create a new\n    :class:`.SessionTransaction` to replace it immediately, whereas a\n    :class:`.Session` that's in ``autocommit=True``\n    mode will remain without a :class:`.SessionTransaction` until the\n    :meth:`.Session.begin` method is called.\n    Another detail of :class:`.SessionTransaction` behavior is that it is\n    capable of \"nesting\".  This means that the :meth:`.begin` method can\n    be called while an existing :class:`.SessionTransaction` is already present,\n    producing a new :class:`.SessionTransaction` that temporarily replaces\n    the parent :class:`.SessionTransaction`.   When a :class:`.SessionTransaction`\n    is produced as nested, it assigns itself to the :attr:`.Session.transaction`\n    attribute.  When it is ended via :meth:`.Session.commit` or :meth:`.Session.rollback`,\n    it restores its parent :class:`.SessionTransaction` back onto the\n    :attr:`.Session.transaction` attribute.  The\n    behavior is effectively a stack, where :attr:`.Session.transaction` refers\n    to the current head of the stack.\n    The purpose of this stack is to allow nesting of :meth:`.rollback` or\n    :meth:`.commit` calls in context with various flavors of :meth:`.begin`.\n    This nesting behavior applies to when :meth:`.Session.begin_nested`\n    is used to emit a SAVEPOINT transaction, and is also used to produce\n    a so-called \"subtransaction\" which allows a block of code to use a\n    begin/rollback/commit sequence regardless of whether or not its enclosing\n    code block has begun a transaction.  The :meth:`.flush` method, whether called\n    explicitly or via autoflush, is the primary consumer of the \"subtransaction\"\n    feature, in that it wishes to guarantee that it works within in a transaction block\n    regardless of whether or not the :class:`.Session` is in transactional mode\n    when the method is called.\n    See also:\n    :meth:`.Session.rollback`\n    :meth:`.Session.commit`\n    :meth:`.Session.begin`\n    :meth:`.Session.begin_nested`\n    :attr:`.Session.is_active`\n    :meth:`.SessionEvents.after_commit`\n    :meth:`.SessionEvents.after_rollback`\n    :meth:`.SessionEvents.after_soft_rollback`\n    \"\"\"\n    _rollback_exception = None\n    def __init__(self, session, parent=None, nested=False):\n        self.session = session\n        self._connections = {}\n        self._parent = parent\n        self.nested = nested\n        self._active = True\n        self._prepared = False\n        if not parent and nested:\n            raise sa_exc.InvalidRequestError(\n                \"Can't start a SAVEPOINT transaction when no existing \"\n                \"transaction is in progress\")\n        if self.session._enable_transaction_accounting:\n            self._take_snapshot()\n    @property\n    def is_active(self):\n        return self.session is not None and self._active\n    def _assert_is_active(self):\n        self._assert_is_open()\n        if not self._active:\n            if self._rollback_exception:\n                raise sa_exc.InvalidRequestError(\n                    \"This Session's transaction has been rolled back \"\n                    \"due to a previous exception during flush.\"\n                    \" To begin a new transaction with this Session, \"\n                    \"first issue Session.rollback().\"\n                    \" Original exception was: %s\"\n                    % self._rollback_exception\n                )\n            else:\n                raise sa_exc.InvalidRequestError(\n                    \"This Session's transaction has been rolled back \"\n                    \"by a nested rollback() call.  To begin a new \"\n                    \"transaction, issue Session.rollback() first.\"\n                    )\n    def _assert_is_open(self, error_msg=\"The transaction is closed\"):\n        if self.session is None:\n            raise sa_exc.ResourceClosedError(error_msg)\n    @property\n    def _is_transaction_boundary(self):\n        return self.nested or not self._parent\n    def connection(self, bindkey, **kwargs):\n        self._assert_is_active()\n        engine = self.session.get_bind(bindkey, **kwargs)\n        return self._connection_for_bind(engine)\n    def _begin(self, nested=False):\n        self._assert_is_active()\n        return SessionTransaction(\n            self.session, self, nested=nested)\n    def _iterate_parents(self, upto=None):\n        if self._parent is upto:\n            return (self,)\n        else:\n            if self._parent is None:\n                raise sa_exc.InvalidRequestError(\n                    \"Transaction %s is not on the active transaction list\" % (\n                    upto))\n            return (self,) + self._parent._iterate_parents(upto)\n    def _take_snapshot(self):\n        if not self._is_transaction_boundary:\n            self._new = self._parent._new\n            self._deleted = self._parent._deleted\n            self._key_switches = self._parent._key_switches\n            return\n        if not self.session._flushing:\n            self.session.flush()\n        self._new = weakref.WeakKeyDictionary()\n        self._deleted = weakref.WeakKeyDictionary()\n        self._key_switches = weakref.WeakKeyDictionary()\n    def _restore_snapshot(self):\n        assert self._is_transaction_boundary\n        for s in set(self._new).union(self.session._new):\n            self.session._expunge_state(s)\n            if s.key:\n                del s.key\n        for s, (oldkey, newkey) in self._key_switches.items():\n            self.session.identity_map.discard(s)\n            s.key = oldkey\n            self.session.identity_map.replace(s)\n        for s in set(self._deleted).union(self.session._deleted):\n            if s.deleted:\n                #assert s in self._deleted\n                del s.deleted\n            self.session._update_impl(s, discard_existing=True)\n        assert not self.session._deleted\n        for s in self.session.identity_map.all_states():\n            s.expire(s.dict, self.session.identity_map._modified)\n    def _remove_snapshot(self):\n        assert self._is_transaction_boundary\n        if not self.nested and self.session.expire_on_commit:\n            for s in self.session.identity_map.all_states():\n                s.expire(s.dict, self.session.identity_map._modified)\n    def _connection_for_bind(self, bind):\n        self._assert_is_active()\n        if bind in self._connections:\n            return self._connections[bind][0]\n        if self._parent:\n            conn = self._parent._connection_for_bind(bind)\n            if not self.nested:\n                return conn\n        else:\n            if isinstance(bind, engine.Connection):\n                conn = bind\n                if conn.engine in self._connections:\n                    raise sa_exc.InvalidRequestError(\n                        \"Session already has a Connection associated for the \"\n                        \"given Connection's Engine\")\n            else:\n                conn = bind.contextual_connect()\n        if self.session.twophase and self._parent is None:\n            transaction = conn.begin_twophase()\n        elif self.nested:\n            transaction = conn.begin_nested()\n        else:\n            transaction = conn.begin()\n        self._connections[conn] = self._connections[conn.engine] = \\\n          (conn, transaction, conn is not bind)\n        self.session.dispatch.after_begin(self.session, self, conn)\n        return conn\n    def prepare(self):\n        if self._parent is not None or not self.session.twophase:\n            raise sa_exc.InvalidRequestError(\n                \"Only root two phase transactions of can be prepared\")\n        self._prepare_impl()\n    def _prepare_impl(self):\n        self._assert_is_active()\n        if self._parent is None or self.nested:\n            self.session.dispatch.before_commit(self.session)\n        stx = self.session.transaction\n        if stx is not self:\n            for subtransaction in stx._iterate_parents(upto=self):\n                subtransaction.commit()\n        if not self.session._flushing:\n            for _flush_guard in xrange(100):\n                if self.session._is_clean():\n                    break\n                self.session.flush()\n            else:\n                raise exc.FlushError(\n                        \"Over 100 subsequent flushes have occurred within \"\n                        \"session.commit() - is an after_flush() hook \"\n                        \"creating new objects?\")\n        if self._parent is None and self.session.twophase:\n            try:\n                for t in set(self._connections.values()):\n                    t[1].prepare()\n            except:\n                self.rollback()\n                raise\n        self._deactivate()\n        self._prepared = True\n    def commit(self):\n        self._assert_is_open()\n        if not self._prepared:\n            self._prepare_impl()\n        if self._parent is None or self.nested:\n            for t in set(self._connections.values()):\n                t[1].commit()\n            self.session.dispatch.after_commit(self.session)\n            if self.session._enable_transaction_accounting:\n                self._remove_snapshot()\n        self.close()\n        return self._parent\n    def rollback(self, _capture_exception=False):\n        self._assert_is_open()\n        stx = self.session.transaction\n        if stx is not self:\n            for subtransaction in stx._iterate_parents(upto=self):\n                subtransaction.close()\n        if self.is_active or self._prepared:\n            for transaction in self._iterate_parents():\n                if transaction._parent is None or transaction.nested:\n                    transaction._rollback_impl()\n                    transaction._deactivate()\n                    break\n                else:\n                    transaction._deactivate()\n        sess = self.session\n        if self.session._enable_transaction_accounting and \\\n            not sess._is_clean():\n            # if items were added, deleted, or mutated\n            # here, we need to re-restore the snapshot\n            util.warn(\n                    \"Session's state has been changed on \"\n                    \"a non-active transaction - this state \"\n                    \"will be discarded.\")\n            self._restore_snapshot()\n        self.close()\n        if self._parent and _capture_exception:\n            self._parent._rollback_exception = sys.exc_info()[1]\n        sess.dispatch.after_soft_rollback(sess, self)\n        return self._parent\n    def _rollback_impl(self):\n        for t in set(self._connections.values()):\n            t[1].rollback()\n        if self.session._enable_transaction_accounting:\n            self._restore_snapshot()\n        self.session.dispatch.after_rollback(self.session)\n    def _deactivate(self):\n        self._active = False\n    def close(self):\n        self.session.transaction = self._parent\n        if self._parent is None:\n            for connection, transaction, autoclose in \\\n                set(self._connections.values()):\n                if autoclose:\n                    connection.close()\n                else:\n                    transaction.close()\n            if not self.session.autocommit:\n                self.session.begin()\n        self._deactivate()\n        self.session = None\n        self._connections = None\n    def __enter__(self):\n        return self\n    def __exit__(self, type, value, traceback):\n        self._assert_is_open(\"Cannot end transaction context. The transaction \"\n                                    \"was closed from within the context\")\n        if self.session.transaction is None:\n            return\n        if type is None:\n            try:\n                self.commit()\n            except:\n                self.rollback()\n                raise\n        else:\n            self.rollback()\nclass Session(object):\n    \"\"\"Manages persistence operations for ORM-mapped objects.\n    The Session's usage paradigm is described at :ref:`session_toplevel`.\n    \"\"\"\n    public_methods = (\n        '__contains__', '__iter__', 'add', 'add_all', 'begin', 'begin_nested',\n        'close', 'commit', 'connection', 'delete', 'execute', 'expire',\n        'expire_all', 'expunge', 'expunge_all', 'flush', 'get_bind',\n        'is_modified',\n        'merge', 'query', 'refresh', 'rollback',\n        'scalar')\n    def __init__(self, bind=None, autoflush=True, expire_on_commit=True,\n                _enable_transaction_accounting=True,\n                 autocommit=False, twophase=False,\n                 weak_identity_map=True, binds=None, extension=None,\n                 query_cls=query.Query):\n        \"\"\"Construct a new Session.\n        See also the :func:`.sessionmaker` function which is used to\n        generate a :class:`.Session`-producing callable with a given\n        set of arguments.\n        :param autocommit: Defaults to ``False``. When ``True``, the ``Session``\n          does not keep a persistent transaction running, and will acquire\n          connections from the engine on an as-needed basis, returning them\n          immediately after their use. Flushes will begin and commit (or possibly\n          rollback) their own transaction if no transaction is present. When using\n          this mode, the `session.begin()` method may be used to begin a\n          transaction explicitly.\n          Leaving it on its default value of ``False`` means that the ``Session``\n          will acquire a connection and begin a transaction the first time it is\n          used, which it will maintain persistently until ``rollback()``,\n          ``commit()``, or ``close()`` is called. When the transaction is released\n          by any of these methods, the ``Session`` is ready for the next usage,\n          which will again acquire and maintain a new connection/transaction.\n        :param autoflush: When ``True``, all query operations will issue a\n           ``flush()`` call to this ``Session`` before proceeding. This is a\n           convenience feature so that ``flush()`` need not be called repeatedly\n           in order for database queries to retrieve results. It's typical that\n           ``autoflush`` is used in conjunction with ``autocommit=False``. In this\n           scenario, explicit calls to ``flush()`` are rarely needed; you usually\n           only need to call ``commit()`` (which flushes) to finalize changes.\n        :param bind: An optional ``Engine`` or ``Connection`` to which this\n           ``Session`` should be bound. When specified, all SQL operations\n           performed by this session will execute via this connectable.\n        :param binds: An optional dictionary which contains more granular \"bind\"\n           information than the ``bind`` parameter provides. This dictionary can\n           map individual ``Table`` instances as well as ``Mapper`` instances to\n           individual ``Engine`` or ``Connection`` objects. Operations which\n           proceed relative to a particular ``Mapper`` will consult this\n           dictionary for the direct ``Mapper`` instance as well as the mapper's\n           ``mapped_table`` attribute in order to locate an connectable to use.\n           The full resolution is described in the ``get_bind()`` method of\n           ``Session``. Usage looks like::\n            Session = sessionmaker(binds={\n                SomeMappedClass: create_engine('postgresql://engine1'),\n                somemapper: create_engine('postgresql://engine2'),\n                some_table: create_engine('postgresql://engine3'),\n                })\n          Also see the :meth:`.Session.bind_mapper` and :meth:`.Session.bind_table` methods.\n        :param \\class_: Specify an alternate class other than\n           ``sqlalchemy.orm.session.Session`` which should be used by the returned\n           class. This is the only argument that is local to the\n           ``sessionmaker()`` function, and is not sent directly to the\n           constructor for ``Session``.\n        :param _enable_transaction_accounting:  Defaults to ``True``.  A\n           legacy-only flag which when ``False`` disables *all* 0.5-style object\n           accounting on transaction boundaries, including auto-expiry of\n           instances on rollback and commit, maintenance of the \"new\" and\n           \"deleted\" lists upon rollback, and autoflush of pending changes upon\n           begin(), all of which are interdependent.\n        :param expire_on_commit:  Defaults to ``True``. When ``True``, all\n           instances will be fully expired after each ``commit()``, so that all\n           attribute/object access subsequent to a completed transaction will load\n           from the most recent database state.\n        :param extension: An optional\n           :class:`~.SessionExtension` instance, or a list\n           of such instances, which will receive pre- and post- commit and flush\n           events, as well as a post-rollback event. **Deprecated.**\n           Please see :class:`.SessionEvents`.\n        :param query_cls:  Class which should be used to create new Query objects,\n           as returned by the ``query()`` method. Defaults to\n           :class:`~sqlalchemy.orm.query.Query`.\n        :param twophase:  When ``True``, all transactions will be started as\n            a \"two phase\" transaction, i.e. using the \"two phase\" semantics\n            of the database in use along with an XID.  During a ``commit()``,\n            after ``flush()`` has been issued for all attached databases, the\n            ``prepare()`` method on each database's ``TwoPhaseTransaction`` will\n            be called. This allows each database to roll back the entire\n            transaction, before each transaction is committed.\n        :param weak_identity_map:  Defaults to ``True`` - when set to\n           ``False``, objects placed in the :class:`.Session` will be\n           strongly referenced until explicitly removed or the\n           :class:`.Session` is closed.  **Deprecated** - this option\n           is obsolete.\n        \"\"\"\n        if weak_identity_map:\n            self._identity_cls = identity.WeakInstanceDict\n        else:\n            util.warn_deprecated(\"weak_identity_map=False is deprecated.  \"\n                                    \"This feature is not needed.\")\n            self._identity_cls = identity.StrongInstanceDict\n        self.identity_map = self._identity_cls()\n        self._new = {}   # InstanceState->object, strong refs object\n        self._deleted = {}  # same\n        self.bind = bind\n        self.__binds = {}\n        self._flushing = False\n        self.transaction = None\n        self.hash_key = _new_sessionid()\n        self.autoflush = autoflush\n        self.autocommit = autocommit\n        self.expire_on_commit = expire_on_commit\n        self._enable_transaction_accounting = _enable_transaction_accounting\n        self.twophase = twophase\n        self._query_cls = query_cls\n        if extension:\n            for ext in util.to_list(extension):\n                SessionExtension._adapt_listener(self, ext)\n        if binds is not None:\n            for mapperortable, bind in binds.iteritems():\n                if isinstance(mapperortable, (type, Mapper)):\n                    self.bind_mapper(mapperortable, bind)\n                else:\n                    self.bind_table(mapperortable, bind)\n        if not self.autocommit:\n            self.begin()\n        _sessions[self.hash_key] = self\n    dispatch = event.dispatcher(SessionEvents)\n    connection_callable = None\n    transaction = None\n    \"\"\"The current active or inactive :class:`.SessionTransaction`.\"\"\"\n    def begin(self, subtransactions=False, nested=False):\n        \"\"\"Begin a transaction on this Session.\n        If this Session is already within a transaction, either a plain\n        transaction or nested transaction, an error is raised, unless\n        ``subtransactions=True`` or ``nested=True`` is specified.\n        The ``subtransactions=True`` flag indicates that this :meth:`~.Session.begin`\n        can create a subtransaction if a transaction is already in progress.\n        For documentation on subtransactions, please see :ref:`session_subtransactions`.\n        The ``nested`` flag begins a SAVEPOINT transaction and is equivalent\n        to calling :meth:`~.Session.begin_nested`. For documentation on SAVEPOINT\n        transactions, please see :ref:`session_begin_nested`.\n        \"\"\"\n        if self.transaction is not None:\n            if subtransactions or nested:\n                self.transaction = self.transaction._begin(\n                                        nested=nested)\n            else:\n                raise sa_exc.InvalidRequestError(\n                    \"A transaction is already begun.  Use subtransactions=True \"\n                    \"to allow subtransactions.\")\n        else:\n            self.transaction = SessionTransaction(\n                self, nested=nested)\n        return self.transaction  # needed for __enter__/__exit__ hook\n    def begin_nested(self):\n        \"\"\"Begin a `nested` transaction on this Session.\n        The target database(s) must support SQL SAVEPOINTs or a\n        SQLAlchemy-supported vendor implementation of the idea.\n        For documentation on SAVEPOINT\n        transactions, please see :ref:`session_begin_nested`.\n        \"\"\"\n        return self.begin(nested=True)\n    def rollback(self):\n        \"\"\"Rollback the current transaction in progress.\n        If no transaction is in progress, this method is a pass-through.\n        This method rolls back the current transaction or nested transaction\n        regardless of subtransactions being in effect.  All subtransactions up\n        to the first real transaction are closed.  Subtransactions occur when\n        begin() is called multiple times.\n        \"\"\"\n        if self.transaction is None:\n            pass\n        else:\n            self.transaction.rollback()\n    def commit(self):\n        \"\"\"Flush pending changes and commit the current transaction.\n        If no transaction is in progress, this method raises an\n        InvalidRequestError.\n        By default, the :class:`.Session` also expires all database\n        loaded state on all ORM-managed attributes after transaction commit.\n        This so that subsequent operations load the most recent\n        data from the database.   This behavior can be disabled using\n        the ``expire_on_commit=False`` option to :func:`.sessionmaker` or\n        the :class:`.Session` constructor.\n        If a subtransaction is in effect (which occurs when begin() is called\n        multiple times), the subtransaction will be closed, and the next call\n        to ``commit()`` will operate on the enclosing transaction.\n        For a session configured with autocommit=False, a new transaction will\n        be begun immediately after the commit, but note that the newly begun\n        transaction does *not* use any connection resources until the first\n        SQL is actually emitted.\n        \"\"\"\n        if self.transaction is None:\n            if not self.autocommit:\n                self.begin()\n            else:\n                raise sa_exc.InvalidRequestError(\"No transaction is begun.\")\n        self.transaction.commit()\n    def prepare(self):\n        \"\"\"Prepare the current transaction in progress for two phase commit.\n        If no transaction is in progress, this method raises an\n        InvalidRequestError.\n        Only root transactions of two phase sessions can be prepared. If the\n        current transaction is not such, an InvalidRequestError is raised.\n        \"\"\"\n        if self.transaction is None:\n            if not self.autocommit:\n                self.begin()\n            else:\n                raise sa_exc.InvalidRequestError(\"No transaction is begun.\")\n        self.transaction.prepare()\n    def connection(self, mapper=None, clause=None,\n                        bind=None,\n                        close_with_result=False,\n                        **kw):\n        \"\"\"Return a :class:`.Connection` object corresponding to this\n        :class:`.Session` object's transactional state.\n        If this :class:`.Session` is configured with ``autocommit=False``,\n        either the :class:`.Connection` corresponding to the current transaction\n        is returned, or if no transaction is in progress, a new one is begun\n        and the :class:`.Connection` returned (note that no transactional state\n        is established with the DBAPI until the first SQL statement is emitted).\n        Alternatively, if this :class:`.Session` is configured with ``autocommit=True``,\n        an ad-hoc :class:`.Connection` is returned using :meth:`.Engine.contextual_connect`\n        on the underlying :class:`.Engine`.\n        Ambiguity in multi-bind or unbound :class:`.Session` objects can be resolved through\n        any of the optional keyword arguments.   This ultimately makes usage of the\n        :meth:`.get_bind` method for resolution.\n        :param bind:\n          Optional :class:`.Engine` to be used as the bind.  If\n          this engine is already involved in an ongoing transaction,\n          that connection will be used.  This argument takes precedence\n          over ``mapper``, ``clause``.\n        :param mapper:\n          Optional :func:`.mapper` mapped class, used to identify\n          the appropriate bind.  This argument takes precedence over\n          ``clause``.\n        :param clause:\n            A :class:`.ClauseElement` (i.e. :func:`~.sql.expression.select`,\n            :func:`~.sql.expression.text`,\n            etc.) which will be used to locate a bind, if a bind\n            cannot otherwise be identified.\n        :param close_with_result: Passed to :meth:`Engine.connect`, indicating\n          the :class:`.Connection` should be considered \"single use\", automatically\n          closing when the first result set is closed.  This flag only has\n          an effect if this :class:`.Session` is configured with ``autocommit=True``\n          and does not already have a  transaction in progress.\n        :param \\**kw:\n          Additional keyword arguments are sent to :meth:`get_bind()`,\n          allowing additional arguments to be passed to custom\n          implementations of :meth:`get_bind`.\n        \"\"\"\n        if bind is None:\n            bind = self.get_bind(mapper, clause=clause, **kw)\n        return self._connection_for_bind(bind,\n                                        close_with_result=close_with_result)\n    def _connection_for_bind(self, engine, **kwargs):\n        if self.transaction is not None:\n            return self.transaction._connection_for_bind(engine)\n        else:\n            return engine.contextual_connect(**kwargs)\n    def execute(self, clause, params=None, mapper=None, bind=None, **kw):\n        \"\"\"Execute a SQL expression construct or string statement within\n        the current transaction.\n        Returns a :class:`.ResultProxy` representing\n        results of the statement execution, in the same manner as that of an\n        :class:`.Engine` or\n        :class:`.Connection`.\n        E.g.::\n            result = session.execute(\n                        user_table.select().where(user_table.c.id == 5)\n                    )\n        :meth:`~.Session.execute` accepts any executable clause construct, such\n        as :func:`~.sql.expression.select`,\n        :func:`~.sql.expression.insert`,\n        :func:`~.sql.expression.update`,\n        :func:`~.sql.expression.delete`, and\n        :func:`~.sql.expression.text`.  Plain SQL strings can be passed\n        as well, which in the case of :meth:`.Session.execute` only\n        will be interpreted the same as if it were passed via a :func:`~.expression.text`\n        construct.  That is, the following usage::\n            result = session.execute(\n                        \"SELECT * FROM user WHERE id=:param\",\n                        {\"param\":5}\n                    )\n        is equivalent to::\n            from sqlalchemy import text\n            result = session.execute(\n                        text(\"SELECT * FROM user WHERE id=:param\"),\n                        {\"param\":5}\n                    )\n        The second positional argument to :meth:`.Session.execute` is an\n        optional parameter set.  Similar to that of :meth:`.Connection.execute`, whether this\n        is passed as a single dictionary, or a list of dictionaries, determines\n        whether the DBAPI cursor's ``execute()`` or ``executemany()`` is used to execute the\n        statement.   An INSERT construct may be invoked for a single row::\n            result = session.execute(users.insert(), {\"id\": 7, \"name\": \"somename\"})\n        or for multiple rows::\n            result = session.execute(users.insert(), [\n                                    {\"id\": 7, \"name\": \"somename7\"},\n                                    {\"id\": 8, \"name\": \"somename8\"},\n                                    {\"id\": 9, \"name\": \"somename9\"}\n                                ])\n        The statement is executed within the current transactional context of\n        this :class:`.Session`.   The :class:`.Connection` which is used\n        to execute the statement can also be acquired directly by\n        calling the :meth:`.Session.connection` method.  Both methods use\n        a rule-based resolution scheme in order to determine the\n        :class:`.Connection`, which in the average case is derived directly\n        from the \"bind\" of the :class:`.Session` itself, and in other cases\n        can be based on the :func:`.mapper`\n        and :class:`.Table` objects passed to the method; see the documentation\n        for :meth:`.Session.get_bind` for a full description of this scheme.\n        The :meth:`.Session.execute` method does *not* invoke autoflush.\n        The :class:`.ResultProxy` returned by the :meth:`.Session.execute`\n        method is returned with the \"close_with_result\" flag set to true;\n        the significance of this flag is that if this :class:`.Session` is\n        autocommitting and does not have a transaction-dedicated :class:`.Connection`\n        available, a temporary :class:`.Connection` is established for the\n        statement execution, which is closed (meaning, returned to the connection\n        pool) when the :class:`.ResultProxy` has consumed all available data.\n        This applies *only* when the :class:`.Session` is configured with\n        autocommit=True and no transaction has been started.\n        :param clause:\n            An executable statement (i.e. an :class:`.Executable` expression\n            such as :func:`.expression.select`) or string SQL statement\n            to be executed.\n        :param params:\n            Optional dictionary, or list of dictionaries, containing\n            bound parameter values.   If a single dictionary, single-row\n            execution occurs; if a list of dictionaries, an\n            \"executemany\" will be invoked.  The keys in each dictionary\n            must correspond to parameter names present in the statement.\n        :param mapper:\n          Optional :func:`.mapper` or mapped class, used to identify\n          the appropriate bind.  This argument takes precedence over\n          ``clause`` when locating a bind.   See :meth:`.Session.get_bind`\n          for more details.\n        :param bind:\n          Optional :class:`.Engine` to be used as the bind.  If\n          this engine is already involved in an ongoing transaction,\n          that connection will be used.  This argument takes\n          precedence over ``mapper`` and ``clause`` when locating\n          a bind.\n        :param \\**kw:\n          Additional keyword arguments are sent to :meth:`.Session.get_bind()`\n          to allow extensibility of \"bind\" schemes.\n        .. seealso::\n            :ref:`sqlexpression_toplevel` - Tutorial on using Core SQL\n            constructs.\n            :ref:`connections_toplevel` - Further information on direct\n            statement execution.\n            :meth:`.Connection.execute` - core level statement execution\n            method, which is :meth:`.Session.execute` ultimately uses\n            in order to execute the statement.\n        \"\"\"\n        clause = expression._literal_as_text(clause)\n        if bind is None:\n            bind = self.get_bind(mapper, clause=clause, **kw)\n        return self._connection_for_bind(bind, close_with_result=True).execute(\n            clause, params or {})\n    def scalar(self, clause, params=None, mapper=None, bind=None, **kw):\n        \"\"\"Like :meth:`~.Session.execute` but return a scalar result.\"\"\"\n        return self.execute(clause, params=params, mapper=mapper, bind=bind, **kw).scalar()\n    def close(self):\n        \"\"\"Close this Session.\n        This clears all items and ends any transaction in progress.\n        If this session were created with ``autocommit=False``, a new\n        transaction is immediately begun.  Note that this new transaction does\n        not use any connection resources until they are first needed.\n        \"\"\"\n        self.expunge_all()\n        if self.transaction is not None:\n            for transaction in self.transaction._iterate_parents():\n                transaction.close()\n    @classmethod\n    def close_all(cls):\n        \"\"\"Close *all* sessions in memory.\"\"\"\n        for sess in _sessions.values():\n            sess.close()\n    def expunge_all(self):\n        \"\"\"Remove all object instances from this ``Session``.\n        This is equivalent to calling ``expunge(obj)`` on all objects in this\n        ``Session``.\n        \"\"\"\n        for state in self.identity_map.all_states() + list(self._new):\n            state.detach()\n        self.identity_map = self._identity_cls()\n        self._new = {}\n        self._deleted = {}\n    # TODO: need much more test coverage for bind_mapper() and similar !\n    # TODO: + crystalize + document resolution order vis. bind_mapper/bind_table\n    def bind_mapper(self, mapper, bind):\n        \"\"\"Bind operations for a mapper to a Connectable.\n        mapper\n          A mapper instance or mapped class\n        bind\n          Any Connectable: a ``Engine`` or ``Connection``.\n        All subsequent operations involving this mapper will use the given\n        `bind`.\n        \"\"\"\n        if isinstance(mapper, type):\n            mapper = _class_mapper(mapper)\n        self.__binds[mapper.base_mapper] = bind\n        for t in mapper._all_tables:\n            self.__binds[t] = bind\n    def bind_table(self, table, bind):\n        \"\"\"Bind operations on a Table to a Connectable.\n        table\n          A ``Table`` instance\n        bind\n          Any Connectable: a ``Engine`` or ``Connection``.\n        All subsequent operations involving this ``Table`` will use the\n        given `bind`.\n        \"\"\"\n        self.__binds[table] = bind\n    def get_bind(self, mapper=None, clause=None):\n        \"\"\"Return a \"bind\" to which this :class:`.Session` is bound.\n        The \"bind\" is usually an instance of :class:`.Engine`,\n        except in the case where the :class:`.Session` has been\n        explicitly bound directly to a :class:`.Connection`.\n        For a multiply-bound or unbound :class:`.Session`, the\n        ``mapper`` or ``clause`` arguments are used to determine the\n        appropriate bind to return.\n        Note that the \"mapper\" argument is usually present\n        when :meth:`.Session.get_bind` is called via an ORM\n        operation such as a :meth:`.Session.query`, each\n        individual INSERT/UPDATE/DELETE operation within a\n        :meth:`.Session.flush`, call, etc.\n        The order of resolution is:\n        1. if mapper given and session.binds is present,\n           locate a bind based on mapper.\n        2. if clause given and session.binds is present,\n           locate a bind based on :class:`.Table` objects\n           found in the given clause present in session.binds.\n        3. if session.bind is present, return that.\n        4. if clause given, attempt to return a bind\n           linked to the :class:`.MetaData` ultimately\n           associated with the clause.\n        5. if mapper given, attempt to return a bind\n           linked to the :class:`.MetaData` ultimately\n           associated with the :class:`.Table` or other\n           selectable to which the mapper is mapped.\n        6. No bind can be found, :class:`.UnboundExecutionError`\n           is raised.\n        :param mapper:\n          Optional :func:`.mapper` mapped class or instance of\n          :class:`.Mapper`.   The bind can be derived from a :class:`.Mapper`\n          first by consulting the \"binds\" map associated with this\n          :class:`.Session`, and secondly by consulting the :class:`.MetaData`\n          associated with the :class:`.Table` to which the :class:`.Mapper`\n          is mapped for a bind.\n        :param clause:\n            A :class:`.ClauseElement` (i.e. :func:`~.sql.expression.select`,\n            :func:`~.sql.expression.text`,\n            etc.).  If the ``mapper`` argument is not present or could not produce\n            a bind, the given expression construct will be searched for a bound\n            element, typically a :class:`.Table` associated with bound\n            :class:`.MetaData`.\n        \"\"\"\n        if mapper is clause is None:\n            if self.bind:\n                return self.bind\n            else:\n                raise sa_exc.UnboundExecutionError(\n                    \"This session is not bound to a single Engine or \"\n                    \"Connection, and no context was provided to locate \"\n                    \"a binding.\")\n        c_mapper = mapper is not None and _class_to_mapper(mapper) or None\n        # manually bound?\n        if self.__binds:\n            if c_mapper:\n                if c_mapper.base_mapper in self.__binds:\n                    return self.__binds[c_mapper.base_mapper]\n                elif c_mapper.mapped_table in self.__binds:\n                    return self.__binds[c_mapper.mapped_table]\n            if clause is not None:\n                for t in sql_util.find_tables(clause, include_crud=True):\n                    if t in self.__binds:\n                        return self.__binds[t]\n        if self.bind:\n            return self.bind\n        if isinstance(clause, sql.expression.ClauseElement) and clause.bind:\n            return clause.bind\n        if c_mapper and c_mapper.mapped_table.bind:\n            return c_mapper.mapped_table.bind\n        context = []\n        if mapper is not None:\n            context.append('mapper %s' % c_mapper)\n        if clause is not None:\n            context.append('SQL expression')\n        raise sa_exc.UnboundExecutionError(\n            \"Could not locate a bind configured on %s or this Session\" % (\n            ', '.join(context)))\n    def query(self, *entities, **kwargs):\n        \"\"\"Return a new ``Query`` object corresponding to this ``Session``.\"\"\"\n        return self._query_cls(entities, self, **kwargs)\n    @property\n    @util.contextmanager\n    def no_autoflush(self):\n        \"\"\"Return a context manager that disables autoflush.\n        e.g.::\n            with session.no_autoflush:\n                some_object = SomeClass()\n                session.add(some_object)\n                # won't autoflush\n                some_object.related_thing = session.query(SomeRelated).first()\n        Operations that proceed within the ``with:`` block\n        will not be subject to flushes occurring upon query\n        access.  This is useful when initializing a series\n        of objects which involve existing database queries,\n        where the uncompleted object should not yet be flushed.\n        .. versionadded:: 0.7.6\n        \"\"\"\n        autoflush = self.autoflush\n        self.autoflush = False\n        yield self\n        self.autoflush = autoflush\n    def _autoflush(self):\n        if self.autoflush and not self._flushing:\n            self.flush()\n    def _finalize_loaded(self, states):\n", "answers": ["        for state, dict_ in states.items():"], "length": 4268, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "52b05f3e84a4fe67c9a1b15719fbecb75dda4932f22567e9"}
{"input": "", "context": "/******************************************************************************\n * Copyright (c) 2009 - 2015 IBM Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     IBM Corporation - initial API and implementation\n *****************************************************************************/\n/**\n * \n */\npackage com.ibm.wala.memsat.util;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport com.ibm.wala.cast.java.ipa.callgraph.AstJavaSSAPropagationCallGraphBuilder.EnclosingObjectReferenceKey;\nimport com.ibm.wala.cast.loader.AstMethod;\nimport com.ibm.wala.cast.tree.CAstSourcePositionMap.Position;\nimport com.ibm.wala.classLoader.IField;\nimport com.ibm.wala.classLoader.IMethod;\nimport com.ibm.wala.classLoader.ShrikeBTMethod;\nimport com.ibm.wala.ipa.callgraph.CGNode;\nimport com.ibm.wala.ipa.callgraph.propagation.ArrayContentsKey;\nimport com.ibm.wala.ipa.callgraph.propagation.InstanceFieldKey;\nimport com.ibm.wala.ipa.callgraph.propagation.InstanceKey;\nimport com.ibm.wala.ipa.callgraph.propagation.PointerKey;\nimport com.ibm.wala.ipa.callgraph.propagation.StaticFieldKey;\nimport com.ibm.wala.ipa.callgraph.propagation.rta.CallSite;\nimport com.ibm.wala.ipa.modref.ArrayLengthKey;\nimport com.ibm.wala.memsat.frontEnd.InlinedInstruction;\nimport com.ibm.wala.shrikeCT.InvalidClassFileException;\nimport com.ibm.wala.ssa.IR;\nimport com.ibm.wala.types.TypeName;\nimport com.ibm.wala.util.collections.Pair;\nimport com.ibm.wala.util.graph.Graph;\nimport kodkod.ast.Node;\n/**\n * A set of utility functions for string manipulation and pretty printing of Kodkod nodes,\n * IRs, etc.\n * \n * @author Emina Torlak\n */\npublic final class Strings {\n\t/**\n\t * Returns a pretty-printed string representation of the \n\t * given nodes, with each line offset with at least the given\n\t * number of whitespaces.  The display parameter determines how \n\t * the mapped nodes are displayed; that is, a descendant d of the\n\t * given node is displayed as display.get(d.toString()) if \n\t * display.containsKey(d.toString()) is true.\n\t * @requires 0 <= offset < line\n\t * @return a pretty-printed string representation of the \n\t * given nodes\n\t */\n\tpublic static String prettyPrint(Collection<Node> nodes, int offset, int line, Map<String,String> display) { \n\t\treturn PrettyPrinter.print(nodes, offset, 80, display);\n\t}\n\t/**\n\t * Returns a pretty-printed string representation of the \n\t * given node, with each line offset with at least the given\n\t * number of whitespaces.  The display parameter determines how \n\t * the mapped nodes are displayed; that is, a descendant d of the\n\t * given node is displayed as display.get(d.toString()) if \n\t * display.containsKey(d.toString()) is true.\n\t * @requires 0 <= offset < line\n\t * @return a pretty-printed string representation of the \n\t * given node\n\t */\n\tpublic static String prettyPrint(Node node, int offset, Map<String, String> display) { \n\t\treturn prettyPrint(node, offset, 80, display);\n\t}\n\t\n\t/**\n\t * Returns a pretty-printed string representation of the \n\t * given node, with each line offset with at least the given\n\t * number of whitespaces.  The line parameter determines the\n\t * length of each pretty-printed line, including the offset.\n\t * The display parameter determines how \n\t * the mapped nodes are displayed; that is, a descendant d of the\n\t * given node is displayed as display.get(d.toString()) if \n\t * display.containsKey(d.toString()) is true.\n\t * @requires 0 <= offset < line\n\t * @return a pretty-printed string representation of the \n\t * given node\n\t */\n\tpublic static String prettyPrint(Node node, int offset, int line, final Map<String, String> display) { \n\t\treturn prettyPrint(Collections.singleton(node), offset, line, display);\n\t}\n\t\n\t/**\n\t * Returns a pretty-printed string representation of the \n\t * given node, with each line offset with at least the given\n\t * number of whitespaces.  The line parameter determines the\n\t * length of each pretty-printed line, including the offset.\n\t * @requires 0 <= offset < line\n\t * @return a pretty-printed string representation of the \n\t * given node\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static String prettyPrint(Node node, int offset, int line) { \n\t\tassert offset >= 0 && offset < line && line > 0;\n\t\treturn prettyPrint(node, offset, line, Collections.EMPTY_MAP);\n\t}\n\t\n\t/**\n\t * Returns a pretty-printed string representation of the \n\t * given node, with each line offset with at least the given\n\t * number of whitespaces.  \n\t * @requires 0 <= offset < 80\n\t * @return a pretty-printed string representation of the \n\t * given node\n\t */\n\tpublic static String prettyPrint(Node node, int offset) { \n\t\treturn prettyPrint(node,offset,80);\n\t}\n\t\n\t/**\n\t * Returns a string that consists of the given number of repetitions\n\t * of the specified string.\n\t * @return str^reps\n\t */\n\tpublic static String repeat(String str, int reps) {\n\t\tfinal StringBuffer result = new StringBuffer();\n\t\tfor(int i = 0; i < reps; i++) { \n\t\t\tresult.append(str);\n\t\t}\n\t\treturn result.toString();\n\t}\n\t/**\n\t * Returns the given string, with all new lines replaced with new lines indented \n\t * by the given number of spaces.\n\t * @return given string, with all new lines replaced with new lines indented \n\t * by the given number of spaces.\n\t */\n\tpublic static String indent(String str, int offset) { \n\t\tassert offset >= 0;\n\t\tfinal String indent = repeat(\" \", offset);\n\t\treturn indent + str.replaceAll(\"\\\\n\", \"\\n\"+indent);\n\t}\n\t\n\t/**\n\t * Returns a pretty-print String representation\n\t * of the given graph.\n\t * @return pretty-print String representation\n\t * of the given graph\n\t */\n\tpublic static String prettyPrint(Graph<?> graph) { \n\t\treturn prettyPrint(graph,0);\n\t}\n\t\n\t/**\n\t * Returns a pretty-print String representation\n\t * of the given graph, with each new line starting\n\t * indented at least the given number of spaces.\n\t * @return pretty-print String representation\n\t * of the given graph\n\t */\n\tpublic static <T> String prettyPrint(Graph<T> graph, int offset) { \n\t\tassert offset>=0;\n\t\tfinal StringBuffer result = new StringBuffer();\n\t\tfinal String indent = repeat(\" \", offset);\n\t\tfor(T o : graph) {\n\t\t\tresult.append(\"\\n\");\n\t\t\tresult.append(indent);\n\t\t\tresult.append(o);\n\t\t\tfor(Iterator<?> itr = graph.getSuccNodes(o); itr.hasNext(); ) { \n\t\t\t\tresult.append(\"\\n\" + indent + \" --> \" + itr.next());\n\t\t\t}\n\t\t\tresult.append(\",\\n\");\n\t\t}\n\t\tresult.delete(result.length()-2, result.length());\n\t\treturn result.toString();\n\t}\n\t/**\n\t * Returns a pretty-print String representation\n\t * of the given IR, with each new line starting\n\t * indented at least the given number of spaces.\n\t * @return pretty-print String representation\n\t * of the given IR\n\t */\n\tpublic static String prettyPrint(IR ir, int offset) { \n\t\treturn indent(ir.toString(), offset);\n\t\t/*\n\t    final StringBuffer result = new StringBuffer();\n\t    result.append(\"\\n\"+indent+\"CFG:\\n\");\n\t    final SSACFG cfg = ir.getControlFlowGraph();\n\t    for (int i = 0; i <= cfg.getNumber(cfg.exit()); i++) {\n\t        BasicBlock bb = cfg.getNode(i);\n\t        result.append(indent+\"BB\").append(i).append(\"[\").append(bb.getFirstInstructionIndex()).append(\"..\").append(bb.getLastInstructionIndex())\n\t            .append(\"]\\n\");\n\t        Iterator<ISSABasicBlock> succNodes = cfg.getSuccNodes(bb);\n\t        while (succNodes.hasNext()) {\n\t          result.append(indent+\"    -> BB\").append(((BasicBlock) succNodes.next()).getNumber()).append(\"\\n\");\n\t        }\n\t      }\n\t    result.append(indent+\"Instructions:\\n\");\n\t    for (int i = 0; i <= cfg.getMaxNumber(); i++) {\n\t      BasicBlock bb = cfg.getNode(i);\n\t      int start = bb.getFirstInstructionIndex();\n\t      int end = bb.getLastInstructionIndex();\n\t      result.append(indent+\"BB\").append(bb.getNumber());\n\t      if (bb instanceof ExceptionHandlerBasicBlock) {\n\t        result.append(indent+\"<Handler>\");\n\t      }\n\t      result.append(\"\\n\");\n\t      final SymbolTable symbolTable = ir.getSymbolTable();\n\t      for (Iterator<SSAPhiInstruction> it = bb.iteratePhis(); it.hasNext();) {\n\t        SSAPhiInstruction phi = it.next();\n\t        if (phi != null) {\n\t          result.append(indent+\"           \" + phi.toString(symbolTable)).append(\"\\n\");\n\t        }\n\t      }\n\t      if (bb instanceof ExceptionHandlerBasicBlock) {\n\t        ExceptionHandlerBasicBlock ebb = (ExceptionHandlerBasicBlock) bb;\n\t        SSAGetCaughtExceptionInstruction s = ebb.getCatchInstruction();\n\t        if (s != null) {\n\t          result.append(indent+\"           \" + s.toString(symbolTable)).append(\"\\n\");\n\t        } else {\n\t          result.append(indent+\"           \" + \" No catch instruction. Unreachable?\\n\");\n\t        }\n\t      }\n\t      final SSAInstruction[] instructions = ir.getInstructions();\n\t      for (int j = start; j <= end; j++) {\n\t        if (instructions[j] != null) {\n\t          StringBuffer x = new StringBuffer(indent+j + \"   \" + instructions[j].toString(symbolTable));\n\t          StringStuff.padWithSpaces(x, 45);\n\t          result.append(indent+x);\n\t          result.append(\"\\n\");\n\t        }\n\t      }\n\t      for (Iterator<SSAPiInstruction> it = bb.iteratePis(); it.hasNext();) {\n\t        SSAPiInstruction pi = it.next();\n\t        if (pi != null) {\n\t          result.append(indent+\"           \" + pi.toString(symbolTable)).append(\"\\n\");\n\t        }\n\t      }\n\t    }\n\t    return result.toString();\n\t    */\n\t}\n\t\n\t/**\n\t * Returns a pretty-print String representation\n\t * of the given IR.\n\t * @return pretty-print String representation\n\t * of the given IR\n\t */\n\tpublic static String prettyPrint(IR ir) { return prettyPrint(ir,0); }\n\t\n\t/**\n\t * Returns a pretty-print String representation\n\t * of the given collection.\n\t * @return pretty-print String representation\n\t * of the given collection\n\t */\n\tpublic static String prettyPrint(Collection<?> c) { \n\t\treturn prettyPrint(c,0);\n\t}\n\t\n\t/**\n\t * Returns a pretty-print String representation\n\t * of the given collection, with each new line starting\n\t * indented at least the given number of spaces.\n\t * @return pretty-print String representation\n\t * of the given collection\n\t */\n\tpublic static String prettyPrint(Collection<?> c, int offset) { \n\t\tassert offset>=0;\n\t\tfinal StringBuffer result = new StringBuffer();\n\t\tfinal String indent = repeat(\" \", offset);\n\t\tfor(Object o : c) { \n\t\t\tresult.append(indent);\n\t\t\tresult.append(o);\n\t\t\tresult.append(\"\\n\");\n\t\t}\n\t\treturn result.toString();\n\t}\n\t/**\n\t * Returns a String representation of the position in the source of the given method corresponding\n\t * to the instruction at the specified index, or the empty string if the line is unknown.\n\t * @return a String representation of the position in the source of the given method corresponding\n\t * to the instruction at the specified index, or the empty string if the line is unknown.\n\t */\n\tpublic static final String line(IMethod method, int instructionIndex) { \n\t\tif (instructionIndex>=0) {\n\t\t\tif (method instanceof ShrikeBTMethod) { \n\t\t\t\ttry {\n\t\t\t\t\treturn String.valueOf(method.getLineNumber(((ShrikeBTMethod)method).getBytecodeIndex(instructionIndex)));\n\t\t\t\t} catch (InvalidClassFileException e) {  } // ignore\n\t\t\t} else if (method instanceof AstMethod) { \n\t\t\t\tfinal Position pos = ((AstMethod)method).getSourcePosition(instructionIndex);\n\t\t\t\tif (pos!=null)\n\t\t\t\t\treturn String.valueOf(pos.getFirstLine());\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}\n\t\n\t/**\n\t * Returns a map from each InlinedInstruction in the given set to a unique name.\n\t * The names are constructed from the names of the concrete instructions wrapped\n\t * in each inlined instruction. Short type names are used whenever possible.\n\t * @return a map from each InlinedInstruction in the given set to a unique name.\n\t */\n\tpublic static Map<InlinedInstruction, String> instructionNames(Set<InlinedInstruction> insts) { \n\t\tfinal Map<CGNode,String> methodNames = nodeNames(Programs.relevantMethods(insts));\n\t\tfinal Map<String, List<InlinedInstruction>> name2Inst = new LinkedHashMap<String, List<InlinedInstruction>>();\n\t\tfinal Map<InlinedInstruction, String> inst2Name = new LinkedHashMap<InlinedInstruction, String>();\n\t\t\n\t\tfor(InlinedInstruction inst : insts) { \n\t\t\tfinal String m = methodNames.get(inst.cgNode());\n\t\t\tfinal String infix;\n\t\t\tfinal int idx = inst.instructionIndex();\n\t\t\tif (idx==Integer.MIN_VALUE) { \n\t\t\t\tinfix = \"start\";\n\t\t\t} else if (idx==Integer.MAX_VALUE) { \n\t\t\t\tinfix = \"end\";\n\t\t\t} else { \n\t\t\t\tfinal String cname = \"\";//inst.instruction().getClass().getSimpleName().replaceAll(\"SSA\", \"\").replaceAll(\"Instruction\", \"\");\n\t\t\t\tinfix = cname+idx;\n\t\t\t} \n\t\t\tfinal String name = m + \"[\" + infix + \"]\"; // m+\"_\"+infix;\n\t\t\tList<InlinedInstruction> named = name2Inst.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed = new ArrayList<InlinedInstruction>(3);\n\t\t\t\tname2Inst.put(name, named);\n\t\t\t}\n\t\t\tnamed.add(inst);\n\t\t}\n\t\t\n\t\tfor(Map.Entry<String, List<InlinedInstruction>> entry : name2Inst.entrySet()) { \n\t\t\tfinal List<InlinedInstruction> named = entry.getValue();\n\t\t\tif (named.size()==1) { \n\t\t\t\tinst2Name.put(named.get(0), entry.getKey());\n\t\t\t} else {\n\t\t\t\tfor(InlinedInstruction inst : named) { \n\t\t\t\t\tfinal StringBuilder b = new StringBuilder();\n\t\t\t\t\tassert !inst.callStack().empty();\n\t\t\t\t\tfinal Iterator<CallSite> itr = inst.callStack().iterator();\n\t\t\t\t\tb.append(methodNames.get(itr.next().getNode()));\n\t\t\t\t\twhile(itr.hasNext()) { \n\t\t\t\t\t\tb.append(\"_\" + methodNames.get(itr.next().getNode()));\n\t\t\t\t\t}\n\t\t\t\t\tb.append(\"_\" + entry.getKey());\n\t\t\t\t\tinst2Name.put(inst, b.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn inst2Name;\n\t}\n\t\n\t/**\n\t * Returns a map from each CGNode in the given set to a unique name derived\n\t * from the signature of that node. Short type names are used whenever possible.\n\t * @return a map from each CGNode in the given set to a unique name derived\n\t * from the signature of that node. \n\t */\n\tpublic static Map<CGNode, String> nodeNames(Set<CGNode> nodes) { \n\t\tfinal Map<String, List<CGNode>> name2Node = new LinkedHashMap<String, List<CGNode>>();\n\t\tfinal Map<CGNode,String> node2Name = new LinkedHashMap<CGNode, String>();\n\t\t\n\t\tfor(CGNode ref : nodes) { \n\t\t\tfinal String name = ref.getMethod().getName().toString();\n\t\t\tList<CGNode> named = name2Node.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed = new ArrayList<CGNode>(3);\n\t\t\t\tname2Node.put(name, named);\n\t\t\t}\n\t\t\tnamed.add(ref);\n\t\t}\n\t\tfor(Map.Entry<String,List<CGNode>> entry: name2Node.entrySet()) { \n\t\t\tfinal List<CGNode> named = entry.getValue();\n\t\t\tif (named.size()==1) { \n\t\t\t\tnode2Name.put(named.get(0), entry.getKey());\n\t\t\t} else {\n\t\t\t\tfor(CGNode ref : named) { \n\t\t\t\t\tnode2Name.put(ref, ref.getMethod().getSignature());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn node2Name;\n\t}\n\t\n\t/**\n\t * Returns a map from each InstanceKey in the given set to a unique name.\n\t * The names are constructed from the names of the concrete types represented\n\t * by each instance key.  If there is more than one instance key for the same \n\t * type, unique suffixes are appended to make the names unique.  Short type names\n\t * are used whenever possible.\n\t * @return a map from each InstanceKey in the given set to a unique name.\n\t */\n\tpublic static Map<InstanceKey, String> instanceNames(Set<InstanceKey> instances) { \n\t\tfinal Map<TypeName, List<InstanceKey>> nameToKey = new LinkedHashMap<TypeName,List<InstanceKey>>();\n\t\tfinal Map<String, Boolean> uniqueShort = new HashMap<String,Boolean>();\n\t\tfinal Map<InstanceKey, String> keyToName = new LinkedHashMap<InstanceKey,String>();\n\t\t\n\t\tfor(InstanceKey key : instances) {\n\t\t\tfinal TypeName fullName = key.getConcreteType().getName();\n\t\t\tList<InstanceKey> named = nameToKey.get(fullName);\n\t\t\tif (named==null) {\n\t\t\t\tnamed = new ArrayList<InstanceKey>(3);\n\t\t\t\tnameToKey.put(fullName, named);\n\t\t\t}\n\t\t\tnamed.add(key);\n\t\t}\n\t\t\n\t\tfor(TypeName fullName : nameToKey.keySet()) { \n\t\t\tfinal String shortName = fullName.getClassName().toString();\n\t\t\tfinal Boolean unique = uniqueShort.get(shortName);\n\t\t\tif (unique==null)\t{ uniqueShort.put(shortName, Boolean.TRUE); }\n\t\t\telse \t\t\t\t{ uniqueShort.put(shortName, Boolean.FALSE); }\n\t\t}\n\t\t\n\t\tfor(Map.Entry<TypeName, List<InstanceKey>> entry : nameToKey.entrySet()) {\n\t\t\tfinal TypeName fullName = entry.getKey();\n\t\t\tfinal List<InstanceKey> named = entry.getValue();\n\t\t\tfinal String shortName = fullName.getClassName().toString();\n\t\t\tfinal String name = uniqueShort.get(shortName) ? shortName : fullName.toString();\n\t\t\tfinal int size = named.size();\n\t\t\tif (size==1) { \n\t\t\t\tkeyToName.put(named.get(0), name);\n\t\t\t} else {\n\t\t\t\tfor(int i = 0; i < size; i++) {\n\t\t\t\t\tkeyToName.put(named.get(i), name + i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tassert keyToName.size() == instances.size();\n\t\treturn keyToName;\n\t}\n\t\n\t/**\n\t * Returns a map from each IField in the given set to a unique name.\n\t * The names are constructed from the names of the  fields represented\n\t * by IField.  Short field names are used whenever possible.\n\t * @return a map from each IField in the given set to a unique name.\n\t */\n\tpublic static Map<IField, String> fieldNames(Set<IField> fields) { \n\t\tfinal Map<String, List<IField>> name2Field = new LinkedHashMap<String, List<IField>>();\n\t\tfinal Map<IField,String> field2Name = new LinkedHashMap<IField, String>();\n\t\t\n", "answers": ["\t\tfor(IField field : fields) { "], "length": 1985, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "1e32291c11bc48e0917860b1de8446dde3fedecd450ef073"}
{"input": "", "context": "#!/usr/bin/env python\n#\n# Copyright 2009 Facebook\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n\"\"\"``tornado.web`` provides a simple web framework with asynchronous\nfeatures that allow it to scale to large numbers of open connections,\nmaking it ideal for `long polling\n<http://en.wikipedia.org/wiki/Push_technology#Long_polling>`_.\nHere is a simple \"Hello, world\" example app:\n.. testcode::\n    import tornado.ioloop\n    import tornado.web\n    class MainHandler(tornado.web.RequestHandler):\n        def get(self):\n            self.write(\"Hello, world\")\n    if __name__ == \"__main__\":\n        application = tornado.web.Application([\n            (r\"/\", MainHandler),\n        ])\n        application.listen(8888)\n        tornado.ioloop.IOLoop.current().start()\n.. testoutput::\n   :hide:\nSee the :doc:`guide` for additional information.\nThread-safety notes\n-------------------\nIn general, methods on `RequestHandler` and elsewhere in Tornado are\nnot thread-safe.  In particular, methods such as\n`~RequestHandler.write()`, `~RequestHandler.finish()`, and\n`~RequestHandler.flush()` must only be called from the main thread.  If\nyou use multiple threads it is important to use `.IOLoop.add_callback`\nto transfer control back to the main thread before finishing the\nrequest.\n\"\"\"\nfrom __future__ import (absolute_import, division,\n                        print_function, with_statement)\nimport base64\nimport binascii\nimport datetime\nimport email.utils\nimport functools\nimport gzip\nimport hashlib\nimport hmac\nimport mimetypes\nimport numbers\nimport os.path\nimport re\nimport stat\nimport sys\nimport threading\nimport time\nimport tornado\nimport traceback\nimport types\nfrom io import BytesIO\nfrom tornado.concurrent import Future, is_future\nfrom tornado import escape\nfrom tornado import gen\nfrom tornado import httputil\nfrom tornado import iostream\nfrom tornado import locale\nfrom tornado.log import access_log, app_log, gen_log\nfrom tornado import stack_context\nfrom tornado import template\nfrom tornado.escape import utf8, _unicode\nfrom tornado.util import (import_object, ObjectDict, raise_exc_info,\n                          unicode_type, _websocket_mask)\nfrom tornado.httputil import split_host_and_port\ntry:\n    import Cookie  # py2\nexcept ImportError:\n    import http.cookies as Cookie  # py3\ntry:\n    import urlparse  # py2\nexcept ImportError:\n    import urllib.parse as urlparse  # py3\ntry:\n    from urllib import urlencode  # py2\nexcept ImportError:\n    from urllib.parse import urlencode  # py3\nMIN_SUPPORTED_SIGNED_VALUE_VERSION = 1\n\"\"\"The oldest signed value version supported by this version of Tornado.\nSigned values older than this version cannot be decoded.\n.. versionadded:: 3.2.1\n\"\"\"\nMAX_SUPPORTED_SIGNED_VALUE_VERSION = 2\n\"\"\"The newest signed value version supported by this version of Tornado.\nSigned values newer than this version cannot be decoded.\n.. versionadded:: 3.2.1\n\"\"\"\nDEFAULT_SIGNED_VALUE_VERSION = 2\n\"\"\"The signed value version produced by `.RequestHandler.create_signed_value`.\nMay be overridden by passing a ``version`` keyword argument.\n.. versionadded:: 3.2.1\n\"\"\"\nDEFAULT_SIGNED_VALUE_MIN_VERSION = 1\n\"\"\"The oldest signed value accepted by `.RequestHandler.get_secure_cookie`.\nMay be overridden by passing a ``min_version`` keyword argument.\n.. versionadded:: 3.2.1\n\"\"\"\nclass RequestHandler(object):\n    \"\"\"Base class for HTTP request handlers.\n    Subclasses must define at least one of the methods defined in the\n    \"Entry points\" section below.\n    \"\"\"\n    SUPPORTED_METHODS = (\"GET\", \"HEAD\", \"POST\", \"DELETE\", \"PATCH\", \"PUT\",\n                         \"OPTIONS\")\n    _template_loaders = {}  # {path: template.BaseLoader}\n    _template_loader_lock = threading.Lock()\n    _remove_control_chars_regex = re.compile(r\"[\\x00-\\x08\\x0e-\\x1f]\")\n    def __init__(self, application, request, **kwargs):\n        super(RequestHandler, self).__init__()\n        self.application = application\n        self.request = request\n        self._headers_written = False\n        self._finished = False\n        self._auto_finish = True\n        self._transforms = None  # will be set in _execute\n        self._prepared_future = None\n        self.path_args = None\n        self.path_kwargs = None\n        self.ui = ObjectDict((n, self._ui_method(m)) for n, m in\n                             application.ui_methods.items())\n        # UIModules are available as both `modules` and `_tt_modules` in the\n        # template namespace.  Historically only `modules` was available\n        # but could be clobbered by user additions to the namespace.\n        # The template {% module %} directive looks in `_tt_modules` to avoid\n        # possible conflicts.\n        self.ui[\"_tt_modules\"] = _UIModuleNamespace(self,\n                                                    application.ui_modules)\n        self.ui[\"modules\"] = self.ui[\"_tt_modules\"]\n        self.clear()\n        self.request.connection.set_close_callback(self.on_connection_close)\n        self.initialize(**kwargs)\n    def initialize(self):\n        \"\"\"Hook for subclass initialization.\n        A dictionary passed as the third argument of a url spec will be\n        supplied as keyword arguments to initialize().\n        Example::\n            class ProfileHandler(RequestHandler):\n                def initialize(self, database):\n                    self.database = database\n                def get(self, username):\n                    ...\n            app = Application([\n                (r'/user/(.*)', ProfileHandler, dict(database=database)),\n                ])\n        \"\"\"\n        pass\n    @property\n    def settings(self):\n        \"\"\"An alias for `self.application.settings <Application.settings>`.\"\"\"\n        return self.application.settings\n    def head(self, *args, **kwargs):\n        raise HTTPError(405)\n    def get(self, *args, **kwargs):\n        raise HTTPError(405)\n    def post(self, *args, **kwargs):\n        raise HTTPError(405)\n    def delete(self, *args, **kwargs):\n        raise HTTPError(405)\n    def patch(self, *args, **kwargs):\n        raise HTTPError(405)\n    def put(self, *args, **kwargs):\n        raise HTTPError(405)\n    def options(self, *args, **kwargs):\n        raise HTTPError(405)\n    def prepare(self):\n        \"\"\"Called at the beginning of a request before  `get`/`post`/etc.\n        Override this method to perform common initialization regardless\n        of the request method.\n        Asynchronous support: Decorate this method with `.gen.coroutine`\n        or `.return_future` to make it asynchronous (the\n        `asynchronous` decorator cannot be used on `prepare`).\n        If this method returns a `.Future` execution will not proceed\n        until the `.Future` is done.\n        .. versionadded:: 3.1\n           Asynchronous support.\n        \"\"\"\n        pass\n    def on_finish(self):\n        \"\"\"Called after the end of a request.\n        Override this method to perform cleanup, logging, etc.\n        This method is a counterpart to `prepare`.  ``on_finish`` may\n        not produce any output, as it is called after the response\n        has been sent to the client.\n        \"\"\"\n        pass\n    def on_connection_close(self):\n        \"\"\"Called in async handlers if the client closed the connection.\n        Override this to clean up resources associated with\n        long-lived connections.  Note that this method is called only if\n        the connection was closed during asynchronous processing; if you\n        need to do cleanup after every request override `on_finish`\n        instead.\n        Proxies may keep a connection open for a time (perhaps\n        indefinitely) after the client has gone away, so this method\n        may not be called promptly after the end user closes their\n        connection.\n        \"\"\"\n        if _has_stream_request_body(self.__class__):\n            if not self.request.body.done():\n                self.request.body.set_exception(iostream.StreamClosedError())\n                self.request.body.exception()\n    def clear(self):\n        \"\"\"Resets all headers and content for this response.\"\"\"\n        self._headers = httputil.HTTPHeaders({\n            \"Server\": \"TornadoServer/%s\" % tornado.version,\n            \"Content-Type\": \"text/html; charset=UTF-8\",\n            \"Date\": httputil.format_timestamp(time.time()),\n        })\n        self.set_default_headers()\n        self._write_buffer = []\n        self._status_code = 200\n        self._reason = httputil.responses[200]\n    def set_default_headers(self):\n        \"\"\"Override this to set HTTP headers at the beginning of the request.\n        For example, this is the place to set a custom ``Server`` header.\n        Note that setting such headers in the normal flow of request\n        processing may not do what you want, since headers may be reset\n        during error handling.\n        \"\"\"\n        pass\n    def set_status(self, status_code, reason=None):\n        \"\"\"Sets the status code for our response.\n        :arg int status_code: Response status code. If ``reason`` is ``None``,\n            it must be present in `httplib.responses <http.client.responses>`.\n        :arg string reason: Human-readable reason phrase describing the status\n            code. If ``None``, it will be filled in from\n            `httplib.responses <http.client.responses>`.\n        \"\"\"\n        self._status_code = status_code\n        if reason is not None:\n            self._reason = escape.native_str(reason)\n        else:\n            try:\n                self._reason = httputil.responses[status_code]\n            except KeyError:\n                raise ValueError(\"unknown status code %d\", status_code)\n    def get_status(self):\n        \"\"\"Returns the status code for our response.\"\"\"\n        return self._status_code\n    def set_header(self, name, value):\n        \"\"\"Sets the given response header name and value.\n        If a datetime is given, we automatically format it according to the\n        HTTP specification. If the value is not a string, we convert it to\n        a string. All header values are then encoded as UTF-8.\n        \"\"\"\n        self._headers[name] = self._convert_header_value(value)\n    def add_header(self, name, value):\n        \"\"\"Adds the given response header and value.\n        Unlike `set_header`, `add_header` may be called multiple times\n        to return multiple values for the same header.\n        \"\"\"\n        self._headers.add(name, self._convert_header_value(value))\n    def clear_header(self, name):\n        \"\"\"Clears an outgoing header, undoing a previous `set_header` call.\n        Note that this method does not apply to multi-valued headers\n        set by `add_header`.\n        \"\"\"\n        if name in self._headers:\n            del self._headers[name]\n    _INVALID_HEADER_CHAR_RE = re.compile(br\"[\\x00-\\x1f]\")\n    def _convert_header_value(self, value):\n        if isinstance(value, bytes):\n            pass\n        elif isinstance(value, unicode_type):\n            value = value.encode('utf-8')\n        elif isinstance(value, numbers.Integral):\n            # return immediately since we know the converted value will be safe\n            return str(value)\n        elif isinstance(value, datetime.datetime):\n            return httputil.format_timestamp(value)\n        else:\n            raise TypeError(\"Unsupported header value %r\" % value)\n        # If \\n is allowed into the header, it is possible to inject\n        # additional headers or split the request.\n        if RequestHandler._INVALID_HEADER_CHAR_RE.search(value):\n            raise ValueError(\"Unsafe header value %r\", value)\n        return value\n    _ARG_DEFAULT = []\n    def get_argument(self, name, default=_ARG_DEFAULT, strip=True):\n        \"\"\"Returns the value of the argument with the given name.\n        If default is not provided, the argument is considered to be\n        required, and we raise a `MissingArgumentError` if it is missing.\n        If the argument appears in the url more than once, we return the\n        last value.\n        The returned value is always unicode.\n        \"\"\"\n        return self._get_argument(name, default, self.request.arguments, strip)\n    def get_arguments(self, name, strip=True):\n        \"\"\"Returns a list of the arguments with the given name.\n        If the argument is not present, returns an empty list.\n        The returned values are always unicode.\n        \"\"\"\n        # Make sure `get_arguments` isn't accidentally being called with a\n        # positional argument that's assumed to be a default (like in\n        # `get_argument`.)\n        assert isinstance(strip, bool)\n        return self._get_arguments(name, self.request.arguments, strip)\n    def get_body_argument(self, name, default=_ARG_DEFAULT, strip=True):\n        \"\"\"Returns the value of the argument with the given name\n        from the request body.\n        If default is not provided, the argument is considered to be\n        required, and we raise a `MissingArgumentError` if it is missing.\n        If the argument appears in the url more than once, we return the\n        last value.\n        The returned value is always unicode.\n        .. versionadded:: 3.2\n        \"\"\"\n        return self._get_argument(name, default, self.request.body_arguments,\n                                  strip)\n    def get_body_arguments(self, name, strip=True):\n        \"\"\"Returns a list of the body arguments with the given name.\n        If the argument is not present, returns an empty list.\n        The returned values are always unicode.\n        .. versionadded:: 3.2\n        \"\"\"\n        return self._get_arguments(name, self.request.body_arguments, strip)\n    def get_query_argument(self, name, default=_ARG_DEFAULT, strip=True):\n        \"\"\"Returns the value of the argument with the given name\n        from the request query string.\n        If default is not provided, the argument is considered to be\n        required, and we raise a `MissingArgumentError` if it is missing.\n        If the argument appears in the url more than once, we return the\n        last value.\n        The returned value is always unicode.\n        .. versionadded:: 3.2\n        \"\"\"\n        return self._get_argument(name, default,\n                                  self.request.query_arguments, strip)\n    def get_query_arguments(self, name, strip=True):\n        \"\"\"Returns a list of the query arguments with the given name.\n        If the argument is not present, returns an empty list.\n        The returned values are always unicode.\n        .. versionadded:: 3.2\n        \"\"\"\n        return self._get_arguments(name, self.request.query_arguments, strip)\n    def _get_argument(self, name, default, source, strip=True):\n        args = self._get_arguments(name, source, strip=strip)\n        if not args:\n            if default is self._ARG_DEFAULT:\n                raise MissingArgumentError(name)\n            return default\n        return args[-1]\n    def _get_arguments(self, name, source, strip=True):\n        values = []\n        for v in source.get(name, []):\n            v = self.decode_argument(v, name=name)\n            if isinstance(v, unicode_type):\n                # Get rid of any weird control chars (unless decoding gave\n                # us bytes, in which case leave it alone)\n                v = RequestHandler._remove_control_chars_regex.sub(\" \", v)\n            if strip:\n                v = v.strip()\n            values.append(v)\n        return values\n    def decode_argument(self, value, name=None):\n        \"\"\"Decodes an argument from the request.\n        The argument has been percent-decoded and is now a byte string.\n        By default, this method decodes the argument as utf-8 and returns\n        a unicode string, but this may be overridden in subclasses.\n        This method is used as a filter for both `get_argument()` and for\n        values extracted from the url and passed to `get()`/`post()`/etc.\n        The name of the argument is provided if known, but may be None\n        (e.g. for unnamed groups in the url regex).\n        \"\"\"\n        try:\n            return _unicode(value)\n        except UnicodeDecodeError:\n            raise HTTPError(400, \"Invalid unicode in %s: %r\" %\n                            (name or \"url\", value[:40]))\n    @property\n    def cookies(self):\n        \"\"\"An alias for\n        `self.request.cookies <.httputil.HTTPServerRequest.cookies>`.\"\"\"\n        return self.request.cookies\n    def get_cookie(self, name, default=None):\n        \"\"\"Gets the value of the cookie with the given name, else default.\"\"\"\n        if self.request.cookies is not None and name in self.request.cookies:\n            return self.request.cookies[name].value\n        return default\n    def set_cookie(self, name, value, domain=None, expires=None, path=\"/\",\n                   expires_days=None, **kwargs):\n        \"\"\"Sets the given cookie name/value with the given options.\n        Additional keyword arguments are set on the Cookie.Morsel\n        directly.\n        See http://docs.python.org/library/cookie.html#morsel-objects\n        for available attributes.\n        \"\"\"\n        # The cookie library only accepts type str, in both python 2 and 3\n        name = escape.native_str(name)\n        value = escape.native_str(value)\n        if re.search(r\"[\\x00-\\x20]\", name + value):\n            # Don't let us accidentally inject bad stuff\n            raise ValueError(\"Invalid cookie %r: %r\" % (name, value))\n        if not hasattr(self, \"_new_cookie\"):\n            self._new_cookie = Cookie.SimpleCookie()\n        if name in self._new_cookie:\n            del self._new_cookie[name]\n        self._new_cookie[name] = value\n        morsel = self._new_cookie[name]\n        if domain:\n            morsel[\"domain\"] = domain\n        if expires_days is not None and not expires:\n            expires = datetime.datetime.utcnow() + datetime.timedelta(\n                days=expires_days)\n        if expires:\n            morsel[\"expires\"] = httputil.format_timestamp(expires)\n        if path:\n            morsel[\"path\"] = path\n        for k, v in kwargs.items():\n            if k == 'max_age':\n                k = 'max-age'\n            # skip falsy values for httponly and secure flags because\n            # SimpleCookie sets them regardless\n            if k in ['httponly', 'secure'] and not v:\n                continue\n            morsel[k] = v\n    def clear_cookie(self, name, path=\"/\", domain=None):\n        \"\"\"Deletes the cookie with the given name.\n        Due to limitations of the cookie protocol, you must pass the same\n        path and domain to clear a cookie as were used when that cookie\n        was set (but there is no way to find out on the server side\n        which values were used for a given cookie).\n        \"\"\"\n        expires = datetime.datetime.utcnow() - datetime.timedelta(days=365)\n        self.set_cookie(name, value=\"\", path=path, expires=expires,\n                        domain=domain)\n    def clear_all_cookies(self, path=\"/\", domain=None):\n        \"\"\"Deletes all the cookies the user sent with this request.\n        See `clear_cookie` for more information on the path and domain\n        parameters.\n        .. versionchanged:: 3.2\n           Added the ``path`` and ``domain`` parameters.\n        \"\"\"\n        for name in self.request.cookies:\n            self.clear_cookie(name, path=path, domain=domain)\n    def set_secure_cookie(self, name, value, expires_days=30, version=None,\n                          **kwargs):\n        \"\"\"Signs and timestamps a cookie so it cannot be forged.\n        You must specify the ``cookie_secret`` setting in your Application\n        to use this method. It should be a long, random sequence of bytes\n        to be used as the HMAC secret for the signature.\n        To read a cookie set with this method, use `get_secure_cookie()`.\n        Note that the ``expires_days`` parameter sets the lifetime of the\n        cookie in the browser, but is independent of the ``max_age_days``\n        parameter to `get_secure_cookie`.\n        Secure cookies may contain arbitrary byte values, not just unicode\n        strings (unlike regular cookies)\n        .. versionchanged:: 3.2.1\n           Added the ``version`` argument.  Introduced cookie version 2\n           and made it the default.\n        \"\"\"\n        self.set_cookie(name, self.create_signed_value(name, value,\n                                                       version=version),\n                        expires_days=expires_days, **kwargs)\n    def create_signed_value(self, name, value, version=None):\n        \"\"\"Signs and timestamps a string so it cannot be forged.\n        Normally used via set_secure_cookie, but provided as a separate\n        method for non-cookie uses.  To decode a value not stored\n        as a cookie use the optional value argument to get_secure_cookie.\n        .. versionchanged:: 3.2.1\n           Added the ``version`` argument.  Introduced cookie version 2\n           and made it the default.\n        \"\"\"\n        self.require_setting(\"cookie_secret\", \"secure cookies\")\n        secret = self.application.settings[\"cookie_secret\"]\n        key_version = None\n        if isinstance(secret, dict):\n            if self.application.settings.get(\"key_version\") is None:\n                raise Exception(\"key_version setting must be used for secret_key dicts\")\n            key_version = self.application.settings[\"key_version\"]\n        return create_signed_value(secret, name, value, version=version,\n                                   key_version=key_version)\n    def get_secure_cookie(self, name, value=None, max_age_days=31,\n                          min_version=None):\n        \"\"\"Returns the given signed cookie if it validates, or None.\n        The decoded cookie value is returned as a byte string (unlike\n        `get_cookie`).\n        .. versionchanged:: 3.2.1\n           Added the ``min_version`` argument.  Introduced cookie version 2;\n           both versions 1 and 2 are accepted by default.\n        \"\"\"\n        self.require_setting(\"cookie_secret\", \"secure cookies\")\n        if value is None:\n            value = self.get_cookie(name)\n        return decode_signed_value(self.application.settings[\"cookie_secret\"],\n                                   name, value, max_age_days=max_age_days,\n                                   min_version=min_version)\n    def get_secure_cookie_key_version(self, name, value=None):\n        \"\"\"Returns the signing key version of the secure cookie.\n        The version is returned as int.\n        \"\"\"\n        self.require_setting(\"cookie_secret\", \"secure cookies\")\n        if value is None:\n            value = self.get_cookie(name)\n        return get_signature_key_version(value)\n    def redirect(self, url, permanent=False, status=None):\n        \"\"\"Sends a redirect to the given (optionally relative) URL.\n        If the ``status`` argument is specified, that value is used as the\n        HTTP status code; otherwise either 301 (permanent) or 302\n        (temporary) is chosen based on the ``permanent`` argument.\n        The default is 302 (temporary).\n        \"\"\"\n        if self._headers_written:\n            raise Exception(\"Cannot redirect after headers have been written\")\n        if status is None:\n            status = 301 if permanent else 302\n        else:\n            assert isinstance(status, int) and 300 <= status <= 399\n        self.set_status(status)\n        self.set_header(\"Location\", utf8(url))\n        self.finish()\n    def write(self, chunk):\n        \"\"\"Writes the given chunk to the output buffer.\n        To write the output to the network, use the flush() method below.\n        If the given chunk is a dictionary, we write it as JSON and set\n        the Content-Type of the response to be ``application/json``.\n        (if you want to send JSON as a different ``Content-Type``, call\n        set_header *after* calling write()).\n        Note that lists are not converted to JSON because of a potential\n        cross-site security vulnerability.  All JSON output should be\n        wrapped in a dictionary.  More details at\n        http://haacked.com/archive/2009/06/25/json-hijacking.aspx/ and\n        https://github.com/facebook/tornado/issues/1009\n        \"\"\"\n        if self._finished:\n            raise RuntimeError(\"Cannot write() after finish()\")\n        if not isinstance(chunk, (bytes, unicode_type, dict)):\n            message = \"write() only accepts bytes, unicode, and dict objects\"\n            if isinstance(chunk, list):\n                message += \". Lists not accepted for security reasons; see http://www.tornadoweb.org/en/stable/web.html#tornado.web.RequestHandler.write\"\n            raise TypeError(message)\n        if isinstance(chunk, dict):\n            if 'unwrap_json' in chunk:\n                chunk = chunk['unwrap_json']\n            else:\n                chunk = escape.json_encode(chunk)\n            self.set_header(\"Content-Type\", \"application/json; charset=UTF-8\")\n        chunk = utf8(chunk)\n        self._write_buffer.append(chunk)\n    def render(self, template_name, **kwargs):\n        \"\"\"Renders the template with the given arguments as the response.\"\"\"\n        html = self.render_string(template_name, **kwargs)\n        # Insert the additional JS and CSS added by the modules on the page\n        js_embed = []\n        js_files = []\n        css_embed = []\n        css_files = []\n        html_heads = []\n        html_bodies = []\n        for module in getattr(self, \"_active_modules\", {}).values():\n            embed_part = module.embedded_javascript()\n            if embed_part:\n                js_embed.append(utf8(embed_part))\n            file_part = module.javascript_files()\n            if file_part:\n                if isinstance(file_part, (unicode_type, bytes)):\n                    js_files.append(file_part)\n                else:\n                    js_files.extend(file_part)\n            embed_part = module.embedded_css()\n            if embed_part:\n                css_embed.append(utf8(embed_part))\n            file_part = module.css_files()\n            if file_part:\n                if isinstance(file_part, (unicode_type, bytes)):\n                    css_files.append(file_part)\n                else:\n                    css_files.extend(file_part)\n            head_part = module.html_head()\n            if head_part:\n                html_heads.append(utf8(head_part))\n            body_part = module.html_body()\n            if body_part:\n                html_bodies.append(utf8(body_part))\n        def is_absolute(path):\n            return any(path.startswith(x) for x in [\"/\", \"http:\", \"https:\"])\n        if js_files:\n            # Maintain order of JavaScript files given by modules\n            paths = []\n            unique_paths = set()\n            for path in js_files:\n                if not is_absolute(path):\n                    path = self.static_url(path)\n                if path not in unique_paths:\n                    paths.append(path)\n                    unique_paths.add(path)\n            js = ''.join('<script src=\"' + escape.xhtml_escape(p) +\n                         '\" type=\"text/javascript\"></script>'\n                         for p in paths)\n            sloc = html.rindex(b'</body>')\n            html = html[:sloc] + utf8(js) + b'\\n' + html[sloc:]\n        if js_embed:\n            js = b'<script type=\"text/javascript\">\\n//<![CDATA[\\n' + \\\n                b'\\n'.join(js_embed) + b'\\n//]]>\\n</script>'\n            sloc = html.rindex(b'</body>')\n            html = html[:sloc] + js + b'\\n' + html[sloc:]\n        if css_files:\n            paths = []\n            unique_paths = set()\n            for path in css_files:\n                if not is_absolute(path):\n                    path = self.static_url(path)\n                if path not in unique_paths:\n                    paths.append(path)\n                    unique_paths.add(path)\n            css = ''.join('<link href=\"' + escape.xhtml_escape(p) + '\" '\n                          'type=\"text/css\" rel=\"stylesheet\"/>'\n                          for p in paths)\n            hloc = html.index(b'</head>')\n            html = html[:hloc] + utf8(css) + b'\\n' + html[hloc:]\n        if css_embed:\n            css = b'<style type=\"text/css\">\\n' + b'\\n'.join(css_embed) + \\\n                b'\\n</style>'\n            hloc = html.index(b'</head>')\n            html = html[:hloc] + css + b'\\n' + html[hloc:]\n        if html_heads:\n            hloc = html.index(b'</head>')\n            html = html[:hloc] + b''.join(html_heads) + b'\\n' + html[hloc:]\n        if html_bodies:\n            hloc = html.index(b'</body>')\n            html = html[:hloc] + b''.join(html_bodies) + b'\\n' + html[hloc:]\n        self.finish(html)\n    def render_string(self, template_name, **kwargs):\n        \"\"\"Generate the given template with the given arguments.\n        We return the generated byte string (in utf8). To generate and\n        write a template as a response, use render() above.\n        \"\"\"\n        # If no template_path is specified, use the path of the calling file\n        template_path = self.get_template_path()\n        if not template_path:\n            frame = sys._getframe(0)\n            web_file = frame.f_code.co_filename\n            while frame.f_code.co_filename == web_file:\n                frame = frame.f_back\n            template_path = os.path.dirname(frame.f_code.co_filename)\n        with RequestHandler._template_loader_lock:\n            if template_path not in RequestHandler._template_loaders:\n                loader = self.create_template_loader(template_path)\n                RequestHandler._template_loaders[template_path] = loader\n            else:\n                loader = RequestHandler._template_loaders[template_path]\n        t = loader.load(template_name)\n        namespace = self.get_template_namespace()\n        namespace.update(kwargs)\n        return t.generate(**namespace)\n    def get_template_namespace(self):\n        \"\"\"Returns a dictionary to be used as the default template namespace.\n        May be overridden by subclasses to add or modify values.\n        The results of this method will be combined with additional\n        defaults in the `tornado.template` module and keyword arguments\n        to `render` or `render_string`.\n        \"\"\"\n        namespace = dict(\n            handler=self,\n            request=self.request,\n            current_user=self.current_user,\n            locale=self.locale,\n            _=self.locale.translate,\n            pgettext=self.locale.pgettext,\n            static_url=self.static_url,\n            xsrf_form_html=self.xsrf_form_html,\n            reverse_url=self.reverse_url\n        )\n        namespace.update(self.ui)\n        return namespace\n    def create_template_loader(self, template_path):\n        \"\"\"Returns a new template loader for the given path.\n        May be overridden by subclasses.  By default returns a\n        directory-based loader on the given path, using the\n        ``autoescape`` and ``template_whitespace`` application\n        settings.  If a ``template_loader`` application setting is\n        supplied, uses that instead.\n        \"\"\"\n        settings = self.application.settings\n        if \"template_loader\" in settings:\n            return settings[\"template_loader\"]\n        kwargs = {}\n        if \"autoescape\" in settings:\n            # autoescape=None means \"no escaping\", so we have to be sure\n            # to only pass this kwarg if the user asked for it.\n            kwargs[\"autoescape\"] = settings[\"autoescape\"]\n        if \"template_whitespace\" in settings:\n            kwargs[\"whitespace\"] = settings[\"template_whitespace\"]\n        return template.Loader(template_path, **kwargs)\n    def flush(self, include_footers=False, callback=None):\n        \"\"\"Flushes the current output buffer to the network.\n        The ``callback`` argument, if given, can be used for flow control:\n        it will be run when all flushed data has been written to the socket.\n        Note that only one flush callback can be outstanding at a time;\n        if another flush occurs before the previous flush's callback\n        has been run, the previous callback will be discarded.\n        .. versionchanged:: 4.0\n           Now returns a `.Future` if no callback is given.\n        \"\"\"\n        chunk = b\"\".join(self._write_buffer)\n        self._write_buffer = []\n        if not self._headers_written:\n            self._headers_written = True\n            for transform in self._transforms:\n                self._status_code, self._headers, chunk = \\\n                    transform.transform_first_chunk(\n                        self._status_code, self._headers,\n                        chunk, include_footers)\n            # Ignore the chunk and only write the headers for HEAD requests\n            if self.request.method == \"HEAD\":\n                chunk = None\n            # Finalize the cookie headers (which have been stored in a side\n            # object so an outgoing cookie could be overwritten before it\n            # is sent).\n            if hasattr(self, \"_new_cookie\"):\n                for cookie in self._new_cookie.values():\n                    self.add_header(\"Set-Cookie\", cookie.OutputString(None))\n            start_line = httputil.ResponseStartLine('',\n                                                    self._status_code,\n                                                    self._reason)\n            return self.request.connection.write_headers(\n                start_line, self._headers, chunk, callback=callback)\n        else:\n            for transform in self._transforms:\n                chunk = transform.transform_chunk(chunk, include_footers)\n            # Ignore the chunk and only write the headers for HEAD requests\n            if self.request.method != \"HEAD\":\n                return self.request.connection.write(chunk, callback=callback)\n            else:\n                future = Future()\n                future.set_result(None)\n                return future\n    def finish(self, chunk=None):\n        \"\"\"Finishes this response, ending the HTTP request.\"\"\"\n        if self._finished:\n            raise RuntimeError(\"finish() called twice\")\n        if chunk is not None:\n            self.write(chunk)\n        # Automatically support ETags and add the Content-Length header if\n        # we have not flushed any content yet.\n        if not self._headers_written:\n            if (self._status_code == 200 and\n                self.request.method in (\"GET\", \"HEAD\") and\n                    \"Etag\" not in self._headers):\n                self.set_etag_header()\n                if self.check_etag_header():\n                    self._write_buffer = []\n                    self.set_status(304)\n            if self._status_code == 304:\n                assert not self._write_buffer, \"Cannot send body with 304\"\n                self._clear_headers_for_304()\n            elif \"Content-Length\" not in self._headers:\n                content_length = sum(len(part) for part in self._write_buffer)\n                self.set_header(\"Content-Length\", content_length)\n        if hasattr(self.request, \"connection\"):\n            # Now that the request is finished, clear the callback we\n            # set on the HTTPConnection (which would otherwise prevent the\n            # garbage collection of the RequestHandler when there\n            # are keepalive connections)\n            self.request.connection.set_close_callback(None)\n        self.flush(include_footers=True)\n        self.request.finish()\n        self._log()\n        self._finished = True\n        self.on_finish()\n        # Break up a reference cycle between this handler and the\n        # _ui_module closures to allow for faster GC on CPython.\n        self.ui = None\n    def send_error(self, status_code=500, **kwargs):\n        \"\"\"Sends the given HTTP error code to the browser.\n        If `flush()` has already been called, it is not possible to send\n        an error, so this method will simply terminate the response.\n        If output has been written but not yet flushed, it will be discarded\n        and replaced with the error page.\n        Override `write_error()` to customize the error page that is returned.\n        Additional keyword arguments are passed through to `write_error`.\n        \"\"\"\n        if self._headers_written:\n            gen_log.error(\"Cannot send error response after headers written\")\n            if not self._finished:\n                # If we get an error between writing headers and finishing,\n                # we are unlikely to be able to finish due to a\n                # Content-Length mismatch. Try anyway to release the\n                # socket.\n                try:\n                    self.finish()\n                except Exception:\n                    gen_log.error(\"Failed to flush partial response\",\n                                  exc_info=True)\n            return\n        self.clear()\n        reason = kwargs.get('reason')\n        if 'exc_info' in kwargs:\n            exception = kwargs['exc_info'][1]\n            if isinstance(exception, HTTPError) and exception.reason:\n                reason = exception.reason\n        self.set_status(status_code, reason=reason)\n        try:\n            self.write_error(status_code, **kwargs)\n        except Exception:\n            app_log.error(\"Uncaught exception in write_error\", exc_info=True)\n        if not self._finished:\n            self.finish()\n    def write_error(self, status_code, **kwargs):\n        \"\"\"Override to implement custom error pages.\n        ``write_error`` may call `write`, `render`, `set_header`, etc\n        to produce output as usual.\n        If this error was caused by an uncaught exception (including\n        HTTPError), an ``exc_info`` triple will be available as\n        ``kwargs[\"exc_info\"]``.  Note that this exception may not be\n        the \"current\" exception for purposes of methods like\n        ``sys.exc_info()`` or ``traceback.format_exc``.\n        \"\"\"\n        if self.settings.get(\"serve_traceback\") and \"exc_info\" in kwargs:\n            # in debug mode, try to send a traceback\n            self.set_header('Content-Type', 'text/plain')\n            for line in traceback.format_exception(*kwargs[\"exc_info\"]):\n                self.write(line)\n            self.finish()\n        else:\n            self.finish(\"<html><title>%(code)d: %(message)s</title>\"\n                        \"<body>%(code)d: %(message)s</body></html>\" % {\n                            \"code\": status_code,\n                            \"message\": self._reason,\n                        })\n    @property\n    def locale(self):\n        \"\"\"The locale for the current session.\n        Determined by either `get_user_locale`, which you can override to\n        set the locale based on, e.g., a user preference stored in a\n        database, or `get_browser_locale`, which uses the ``Accept-Language``\n        header.\n        .. versionchanged: 4.1\n           Added a property setter.\n        \"\"\"\n        if not hasattr(self, \"_locale\"):\n            self._locale = self.get_user_locale()\n            if not self._locale:\n                self._locale = self.get_browser_locale()\n                assert self._locale\n        return self._locale\n    @locale.setter\n    def locale(self, value):\n        self._locale = value\n    def get_user_locale(self):\n        \"\"\"Override to determine the locale from the authenticated user.\n        If None is returned, we fall back to `get_browser_locale()`.\n        This method should return a `tornado.locale.Locale` object,\n        most likely obtained via a call like ``tornado.locale.get(\"en\")``\n        \"\"\"\n        return None\n    def get_browser_locale(self, default=\"en_US\"):\n        \"\"\"Determines the user's locale from ``Accept-Language`` header.\n        See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\n        \"\"\"\n        if \"Accept-Language\" in self.request.headers:\n            languages = self.request.headers[\"Accept-Language\"].split(\",\")\n            locales = []\n            for language in languages:\n                parts = language.strip().split(\";\")\n                if len(parts) > 1 and parts[1].startswith(\"q=\"):\n                    try:\n                        score = float(parts[1][2:])\n                    except (ValueError, TypeError):\n                        score = 0.0\n                else:\n                    score = 1.0\n                locales.append((parts[0], score))\n            if locales:\n                locales.sort(key=lambda pair: pair[1], reverse=True)\n                codes = [l[0] for l in locales]\n                return locale.get(*codes)\n        return locale.get(default)\n    @property\n    def current_user(self):\n        \"\"\"The authenticated user for this request.\n        This is a cached version of `get_current_user`, which you can\n        override to set the user based on, e.g., a cookie. If that\n        method is not overridden, this method always returns None.\n        We lazy-load the current user the first time this method is called\n        and cache the result after that.\n        \"\"\"\n        if not hasattr(self, \"_current_user\"):\n            self._current_user = self.get_current_user()\n        return self._current_user\n    @current_user.setter\n    def current_user(self, value):\n        self._current_user = value\n    def get_current_user(self):\n        \"\"\"Override to determine the current user from, e.g., a cookie.\"\"\"\n        return None\n    def get_login_url(self):\n        \"\"\"Override to customize the login URL based on the request.\n        By default, we use the ``login_url`` application setting.\n        \"\"\"\n        self.require_setting(\"login_url\", \"@tornado.web.authenticated\")\n        return self.application.settings[\"login_url\"]\n    def get_template_path(self):\n        \"\"\"Override to customize template path for each handler.\n        By default, we use the ``template_path`` application setting.\n        Return None to load templates relative to the calling file.\n        \"\"\"\n        return self.application.settings.get(\"template_path\")\n    @property\n    def xsrf_token(self):\n        \"\"\"The XSRF-prevention token for the current user/session.\n        To prevent cross-site request forgery, we set an '_xsrf' cookie\n        and include the same '_xsrf' value as an argument with all POST\n        requests. If the two do not match, we reject the form submission\n        as a potential forgery.\n        See http://en.wikipedia.org/wiki/Cross-site_request_forgery\n        .. versionchanged:: 3.2.2\n           The xsrf token will now be have a random mask applied in every\n           request, which makes it safe to include the token in pages\n           that are compressed.  See http://breachattack.com for more\n           information on the issue fixed by this change.  Old (version 1)\n           cookies will be converted to version 2 when this method is called\n           unless the ``xsrf_cookie_version`` `Application` setting is\n           set to 1.\n        \"\"\"\n        if not hasattr(self, \"_xsrf_token\"):\n            version, token, timestamp = self._get_raw_xsrf_token()\n            output_version = self.settings.get(\"xsrf_cookie_version\", 2)\n            if output_version == 1:\n                self._xsrf_token = binascii.b2a_hex(token)\n            elif output_version == 2:\n                mask = os.urandom(4)\n                self._xsrf_token = b\"|\".join([\n                    b\"2\",\n                    binascii.b2a_hex(mask),\n                    binascii.b2a_hex(_websocket_mask(mask, token)),\n                    utf8(str(int(timestamp)))])\n            else:\n                raise ValueError(\"unknown xsrf cookie version %d\",\n                                 output_version)\n            if version is None:\n                expires_days = 30 if self.current_user else None\n                self.set_cookie(\"_xsrf\", self._xsrf_token,\n                                expires_days=expires_days)\n        return self._xsrf_token\n    def _get_raw_xsrf_token(self):\n        \"\"\"Read or generate the xsrf token in its raw form.\n        The raw_xsrf_token is a tuple containing:\n        * version: the version of the cookie from which this token was read,\n          or None if we generated a new token in this request.\n        * token: the raw token data; random (non-ascii) bytes.\n        * timestamp: the time this token was generated (will not be accurate\n          for version 1 cookies)\n        \"\"\"\n        if not hasattr(self, '_raw_xsrf_token'):\n            cookie = self.get_cookie(\"_xsrf\")\n            if cookie:\n                version, token, timestamp = self._decode_xsrf_token(cookie)\n            else:\n                version, token, timestamp = None, None, None\n            if token is None:\n                version = None\n                token = os.urandom(16)\n                timestamp = time.time()\n            self._raw_xsrf_token = (version, token, timestamp)\n        return self._raw_xsrf_token\n    def _decode_xsrf_token(self, cookie):\n        \"\"\"Convert a cookie string into a the tuple form returned by\n        _get_raw_xsrf_token.\n        \"\"\"\n        try:\n            m = _signed_value_version_re.match(utf8(cookie))\n            if m:\n                version = int(m.group(1))\n                if version == 2:\n                    _, mask, masked_token, timestamp = cookie.split(\"|\")\n                    mask = binascii.a2b_hex(utf8(mask))\n                    token = _websocket_mask(\n                        mask, binascii.a2b_hex(utf8(masked_token)))\n                    timestamp = int(timestamp)\n                    return version, token, timestamp\n                else:\n                    # Treat unknown versions as not present instead of failing.\n                    raise Exception(\"Unknown xsrf cookie version\")\n            else:\n                version = 1\n                try:\n                    token = binascii.a2b_hex(utf8(cookie))\n                except (binascii.Error, TypeError):\n                    token = utf8(cookie)\n                # We don't have a usable timestamp in older versions.\n                timestamp = int(time.time())\n                return (version, token, timestamp)\n        except Exception:\n            # Catch exceptions and return nothing instead of failing.\n            gen_log.debug(\"Uncaught exception in _decode_xsrf_token\",\n                          exc_info=True)\n            return None, None, None\n    def check_xsrf_cookie(self):\n        \"\"\"Verifies that the ``_xsrf`` cookie matches the ``_xsrf`` argument.\n        To prevent cross-site request forgery, we set an ``_xsrf``\n        cookie and include the same value as a non-cookie\n        field with all ``POST`` requests. If the two do not match, we\n        reject the form submission as a potential forgery.\n        The ``_xsrf`` value may be set as either a form field named ``_xsrf``\n        or in a custom HTTP header named ``X-XSRFToken`` or ``X-CSRFToken``\n        (the latter is accepted for compatibility with Django).\n        See http://en.wikipedia.org/wiki/Cross-site_request_forgery\n        Prior to release 1.1.1, this check was ignored if the HTTP header\n        ``X-Requested-With: XMLHTTPRequest`` was present.  This exception\n        has been shown to be insecure and has been removed.  For more\n        information please see\n        http://www.djangoproject.com/weblog/2011/feb/08/security/\n        http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails\n        .. versionchanged:: 3.2.2\n           Added support for cookie version 2.  Both versions 1 and 2 are\n           supported.\n        \"\"\"\n        token = (self.get_argument(\"_xsrf\", None) or\n                 self.request.headers.get(\"X-Xsrftoken\") or\n                 self.request.headers.get(\"X-Csrftoken\"))\n        if not token:\n            raise HTTPError(403, \"'_xsrf' argument missing from POST\")\n        _, token, _ = self._decode_xsrf_token(token)\n        _, expected_token, _ = self._get_raw_xsrf_token()\n        if not _time_independent_equals(utf8(token), utf8(expected_token)):\n            raise HTTPError(403, \"XSRF cookie does not match POST argument\")\n    def xsrf_form_html(self):\n        \"\"\"An HTML ``<input/>`` element to be included with all POST forms.\n        It defines the ``_xsrf`` input value, which we check on all POST\n        requests to prevent cross-site request forgery. If you have set\n        the ``xsrf_cookies`` application setting, you must include this\n        HTML within all of your HTML forms.\n        In a template, this method should be called with ``{% module\n        xsrf_form_html() %}``\n        See `check_xsrf_cookie()` above for more information.\n        \"\"\"\n        return '<input type=\"hidden\" name=\"_xsrf\" value=\"' + \\\n            escape.xhtml_escape(self.xsrf_token) + '\"/>'\n    def static_url(self, path, include_host=None, **kwargs):\n        \"\"\"Returns a static URL for the given relative static file path.\n        This method requires you set the ``static_path`` setting in your\n        application (which specifies the root directory of your static\n        files).\n        This method returns a versioned url (by default appending\n        ``?v=<signature>``), which allows the static files to be\n        cached indefinitely.  This can be disabled by passing\n        ``include_version=False`` (in the default implementation;\n        other static file implementations are not required to support\n        this, but they may support other options).\n        By default this method returns URLs relative to the current\n        host, but if ``include_host`` is true the URL returned will be\n        absolute.  If this handler has an ``include_host`` attribute,\n        that value will be used as the default for all `static_url`\n        calls that do not pass ``include_host`` as a keyword argument.\n        \"\"\"\n        self.require_setting(\"static_path\", \"static_url\")\n        get_url = self.settings.get(\"static_handler_class\",\n                                    StaticFileHandler).make_static_url\n        if include_host is None:\n            include_host = getattr(self, \"include_host\", False)\n        if include_host:\n            base = self.request.protocol + \"://\" + self.request.host\n        else:\n            base = \"\"\n        return base + get_url(self.settings, path, **kwargs)\n    def require_setting(self, name, feature=\"this feature\"):\n        \"\"\"Raises an exception if the given app setting is not defined.\"\"\"\n        if not self.application.settings.get(name):\n            raise Exception(\"You must define the '%s' setting in your \"\n                            \"application to use %s\" % (name, feature))\n    def reverse_url(self, name, *args):\n        \"\"\"Alias for `Application.reverse_url`.\"\"\"\n        return self.application.reverse_url(name, *args)\n    def compute_etag(self):\n        \"\"\"Computes the etag header to be used for this request.\n        By default uses a hash of the content written so far.\n        May be overridden to provide custom etag implementations,\n        or may return None to disable tornado's default etag support.\n        \"\"\"\n        hasher = hashlib.sha1()\n        for part in self._write_buffer:\n            hasher.update(part)\n        return '\"%s\"' % hasher.hexdigest()\n    def set_etag_header(self):\n        \"\"\"Sets the response's Etag header using ``self.compute_etag()``.\n        Note: no header will be set if ``compute_etag()`` returns ``None``.\n        This method is called automatically when the request is finished.\n        \"\"\"\n        etag = self.compute_etag()\n        if etag is not None:\n            self.set_header(\"Etag\", etag)\n    def check_etag_header(self):\n        \"\"\"Checks the ``Etag`` header against requests's ``If-None-Match``.\n        Returns ``True`` if the request's Etag matches and a 304 should be\n        returned. For example::\n            self.set_etag_header()\n            if self.check_etag_header():\n                self.set_status(304)\n                return\n        This method is called automatically when the request is finished,\n        but may be called earlier for applications that override\n        `compute_etag` and want to do an early check for ``If-None-Match``\n        before completing the request.  The ``Etag`` header should be set\n        (perhaps with `set_etag_header`) before calling this method.\n        \"\"\"\n        computed_etag = utf8(self._headers.get(\"Etag\", \"\"))\n        # Find all weak and strong etag values from If-None-Match header\n        # because RFC 7232 allows multiple etag values in a single header.\n        etags = re.findall(\n            br'\\*|(?:W/)?\"[^\"]*\"',\n            utf8(self.request.headers.get(\"If-None-Match\", \"\"))\n        )\n        if not computed_etag or not etags:\n            return False\n        match = False\n        if etags[0] == b'*':\n            match = True\n        else:\n            # Use a weak comparison when comparing entity-tags.\n            val = lambda x: x[2:] if x.startswith(b'W/') else x\n            for etag in etags:\n                if val(etag) == val(computed_etag):\n                    match = True\n                    break\n        return match\n    def _stack_context_handle_exception(self, type, value, traceback):\n        try:\n            # For historical reasons _handle_request_exception only takes\n            # the exception value instead of the full triple,\n            # so re-raise the exception to ensure that it's in\n            # sys.exc_info()\n            raise_exc_info((type, value, traceback))\n        except Exception:\n            self._handle_request_exception(value)\n        return True\n    @gen.coroutine\n    def _execute(self, transforms, *args, **kwargs):\n        \"\"\"Executes this request with the given output transforms.\"\"\"\n        self._transforms = transforms\n        try:\n            if self.request.method not in self.SUPPORTED_METHODS:\n                raise HTTPError(405)\n            self.path_args = [self.decode_argument(arg) for arg in args]\n            self.path_kwargs = dict((k, self.decode_argument(v, name=k))\n                                    for (k, v) in kwargs.items())\n            # If XSRF cookies are turned on, reject form submissions without\n            # the proper cookie\n            if self.request.method not in (\"GET\", \"HEAD\", \"OPTIONS\") and \\\n                    self.application.settings.get(\"xsrf_cookies\"):\n                self.check_xsrf_cookie()\n            result = self.prepare()\n            if result is not None:\n                result = yield result\n            if self._prepared_future is not None:\n                # Tell the Application we've finished with prepare()\n                # and are ready for the body to arrive.\n                self._prepared_future.set_result(None)\n            if self._finished:\n                return\n            if _has_stream_request_body(self.__class__):\n                # In streaming mode request.body is a Future that signals\n                # the body has been completely received.  The Future has no\n                # result; the data has been passed to self.data_received\n                # instead.\n                try:\n                    yield self.request.body\n                except iostream.StreamClosedError:\n                    return\n            method = getattr(self, self.request.method.lower())\n            result = method(*self.path_args, **self.path_kwargs)\n            if result is not None:\n                result = yield result\n            if self._auto_finish and not self._finished:\n                self.finish()\n        except Exception as e:\n            try:\n                self._handle_request_exception(e)\n            except Exception:\n                app_log.error(\"Exception in exception handler\", exc_info=True)\n            if (self._prepared_future is not None and\n                    not self._prepared_future.done()):\n                # In case we failed before setting _prepared_future, do it\n                # now (to unblock the HTTP server).  Note that this is not\n                # in a finally block to avoid GC issues prior to Python 3.4.\n                self._prepared_future.set_result(None)\n    def data_received(self, chunk):\n        \"\"\"Implement this method to handle streamed request data.\n        Requires the `.stream_request_body` decorator.\n        \"\"\"\n        raise NotImplementedError()\n    def _log(self):\n        \"\"\"Logs the current request.\n        Sort of deprecated since this functionality was moved to the\n        Application, but left in place for the benefit of existing apps\n        that have overridden this method.\n        \"\"\"\n        self.application.log_request(self)\n    def _request_summary(self):\n        return \"%s %s (%s)\" % (self.request.method, self.request.uri,\n                               self.request.remote_ip)\n    def _handle_request_exception(self, e):\n        if isinstance(e, Finish):\n            # Not an error; just finish the request without logging.\n            if not self._finished:\n                self.finish()\n            return\n        try:\n            self.log_exception(*sys.exc_info())\n        except Exception:\n            # An error here should still get a best-effort send_error()\n            # to avoid leaking the connection.\n            app_log.error(\"Error in exception logger\", exc_info=True)\n        if self._finished:\n            # Extra errors after the request has been finished should\n            # be logged, but there is no reason to continue to try and\n            # send a response.\n            return\n        if isinstance(e, HTTPError):\n            if e.status_code not in httputil.responses and not e.reason:\n                gen_log.error(\"Bad HTTP status code: %d\", e.status_code)\n                self.send_error(500, exc_info=sys.exc_info())\n            else:\n                self.send_error(e.status_code, exc_info=sys.exc_info())\n        else:\n            self.send_error(500, exc_info=sys.exc_info())\n    def log_exception(self, typ, value, tb):\n        \"\"\"Override to customize logging of uncaught exceptions.\n        By default logs instances of `HTTPError` as warnings without\n        stack traces (on the ``tornado.general`` logger), and all\n        other exceptions as errors with stack traces (on the\n        ``tornado.application`` logger).\n        .. versionadded:: 3.1\n        \"\"\"\n        if isinstance(value, HTTPError):\n            if value.log_message:\n                format = \"%d %s: \" + value.log_message\n                args = ([value.status_code, self._request_summary()] +\n                        list(value.args))\n                gen_log.warning(format, *args)\n        else:\n            app_log.error(\"Uncaught exception %s\\n%r\", self._request_summary(),\n                          self.request, exc_info=(typ, value, tb))\n    def _ui_module(self, name, module):\n        def render(*args, **kwargs):\n            if not hasattr(self, \"_active_modules\"):\n                self._active_modules = {}\n            if name not in self._active_modules:\n                self._active_modules[name] = module(self)\n            rendered = self._active_modules[name].render(*args, **kwargs)\n            return rendered\n        return render\n    def _ui_method(self, method):\n        return lambda *args, **kwargs: method(self, *args, **kwargs)\n    def _clear_headers_for_304(self):\n        # 304 responses should not contain entity headers (defined in\n        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7.1)\n        # not explicitly allowed by\n        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5\n        headers = [\"Allow\", \"Content-Encoding\", \"Content-Language\",\n                   \"Content-Length\", \"Content-MD5\", \"Content-Range\",\n                   \"Content-Type\", \"Last-Modified\"]\n        for h in headers:\n            self.clear_header(h)\ndef asynchronous(method):\n    \"\"\"Wrap request handler methods with this if they are asynchronous.\n    This decorator is for callback-style asynchronous methods; for\n    coroutines, use the ``@gen.coroutine`` decorator without\n    ``@asynchronous``. (It is legal for legacy reasons to use the two\n    decorators together provided ``@asynchronous`` is first, but\n    ``@asynchronous`` will be ignored in this case)\n    This decorator should only be applied to the :ref:`HTTP verb\n    methods <verbs>`; its behavior is undefined for any other method.\n    This decorator does not *make* a method asynchronous; it tells\n    the framework that the method *is* asynchronous.  For this decorator\n    to be useful the method must (at least sometimes) do something\n    asynchronous.\n    If this decorator is given, the response is not finished when the\n    method returns. It is up to the request handler to call\n    `self.finish() <RequestHandler.finish>` to finish the HTTP\n    request. Without this decorator, the request is automatically\n    finished when the ``get()`` or ``post()`` method returns. Example:\n    .. testcode::\n       class MyRequestHandler(RequestHandler):\n           @asynchronous\n           def get(self):\n              http = httpclient.AsyncHTTPClient()\n              http.fetch(\"http://friendfeed.com/\", self._on_download)\n           def _on_download(self, response):\n              self.write(\"Downloaded!\")\n              self.finish()\n    .. testoutput::\n       :hide:\n    .. versionadded:: 3.1\n       The ability to use ``@gen.coroutine`` without ``@asynchronous``.\n    \"\"\"\n    # Delay the IOLoop import because it's not available on app engine.\n    from tornado.ioloop import IOLoop\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        self._auto_finish = False\n        with stack_context.ExceptionStackContext(\n                self._stack_context_handle_exception):\n            result = method(self, *args, **kwargs)\n            if is_future(result):\n                # If @asynchronous is used with @gen.coroutine, (but\n                # not @gen.engine), we can automatically finish the\n                # request when the future resolves.  Additionally,\n                # the Future will swallow any exceptions so we need\n                # to throw them back out to the stack context to finish\n                # the request.\n                def future_complete(f):\n                    f.result()\n                    if not self._finished:\n                        self.finish()\n                IOLoop.current().add_future(result, future_complete)\n                # Once we have done this, hide the Future from our\n                # caller (i.e. RequestHandler._when_complete), which\n                # would otherwise set up its own callback and\n                # exception handler (resulting in exceptions being\n                # logged twice).\n                return None\n            return result\n    return wrapper\ndef stream_request_body(cls):\n    \"\"\"Apply to `RequestHandler` subclasses to enable streaming body support.\n    This decorator implies the following changes:\n    * `.HTTPServerRequest.body` is undefined, and body arguments will not\n      be included in `RequestHandler.get_argument`.\n    * `RequestHandler.prepare` is called when the request headers have been\n      read instead of after the entire body has been read.\n    * The subclass must define a method ``data_received(self, data):``, which\n      will be called zero or more times as data is available.  Note that\n      if the request has an empty body, ``data_received`` may not be called.\n    * ``prepare`` and ``data_received`` may return Futures (such as via\n      ``@gen.coroutine``, in which case the next method will not be called\n      until those futures have completed.\n    * The regular HTTP method (``post``, ``put``, etc) will be called after\n      the entire body has been read.\n    There is a subtle interaction between ``data_received`` and asynchronous\n    ``prepare``: The first call to ``data_received`` may occur at any point\n    after the call to ``prepare`` has returned *or yielded*.\n    \"\"\"\n    if not issubclass(cls, RequestHandler):\n        raise TypeError(\"expected subclass of RequestHandler, got %r\", cls)\n    cls._stream_request_body = True\n    return cls\ndef _has_stream_request_body(cls):\n    if not issubclass(cls, RequestHandler):\n        raise TypeError(\"expected subclass of RequestHandler, got %r\", cls)\n    return getattr(cls, '_stream_request_body', False)\ndef removeslash(method):\n    \"\"\"Use this decorator to remove trailing slashes from the request path.\n    For example, a request to ``/foo/`` would redirect to ``/foo`` with this\n    decorator. Your request handler mapping should use a regular expression\n    like ``r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if self.request.path.endswith(\"/\"):\n            if self.request.method in (\"GET\", \"HEAD\"):\n                uri = self.request.path.rstrip(\"/\")\n                if uri:  # don't try to redirect '/' to ''\n                    if self.request.query:\n                        uri += \"?\" + self.request.query\n                    self.redirect(uri, permanent=True)\n                    return\n            else:\n                raise HTTPError(404)\n        return method(self, *args, **kwargs)\n    return wrapper\ndef addslash(method):\n    \"\"\"Use this decorator to add a missing trailing slash to the request path.\n    For example, a request to ``/foo`` would redirect to ``/foo/`` with this\n    decorator. Your request handler mapping should use a regular expression\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "length": 6502, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "d5dde130982bcbe6f095c65d1d5a928669bc3a458df26cc6"}
{"input": "", "context": "//\n// System.Web.UI.WebControls.MultiView.cs\n//\n// Authors:\n//\tLluis Sanchez Gual (lluis@novell.com)\n//\n// (C) 2004 Novell, Inc (http://www.novell.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// Copyright (C) 2004 Novell, Inc (http://www.novell.com)\n//\nusing System;\nusing System.Globalization;\nusing System.Web;\nusing System.Web.UI;\nusing System.ComponentModel;\nnamespace System.Web.UI.WebControls\n{\n\t[ControlBuilder (typeof(MultiViewControlBuilder))]\n\t[Designer (\"System.Web.UI.Design.WebControls.MultiViewDesigner, \" + Consts.AssemblySystem_Design, \"System.ComponentModel.Design.IDesigner\")]\n\t[ToolboxData (\"<{0}:MultiView runat=\\\"server\\\"></{0}:MultiView>\")]\n\t[ParseChildren (typeof(View))]\n\t[DefaultEvent (\"ActiveViewChanged\")]\n\tpublic class MultiView: Control\n\t{\n\t\tpublic static readonly string NextViewCommandName = \"NextView\";\n\t\tpublic static readonly string PreviousViewCommandName = \"PrevView\";\n\t\tpublic static readonly string SwitchViewByIDCommandName = \"SwitchViewByID\";\n\t\tpublic static readonly string SwitchViewByIndexCommandName = \"SwitchViewByIndex\";\n\t\t\n\t\tstatic readonly object ActiveViewChangedEvent = new object();\n\t\t\n\t\tint viewIndex = -1;\n\t\tint initialIndex = -1;\n\t\t\n\t\tpublic event EventHandler ActiveViewChanged {\n\t\t\tadd { Events.AddHandler (ActiveViewChangedEvent, value); }\n\t\t\tremove { Events.RemoveHandler (ActiveViewChangedEvent, value); }\n\t\t}\n\t\t\n\t\tprotected override void AddParsedSubObject (object ob)\n\t\t{\n\t\t\tif (ob is View)\n\t\t\t\tControls.Add (ob as View);\n\t\t\t// LAMESPEC: msdn talks that only View contorls are allowed, for others controls HttpException should be thrown\n\t\t\t// but actually, aspx praser adds LiteralControl controls.\n\t\t\t//else\n\t\t\t//\tthrow new HttpException (\"MultiView cannot have children of type 'Control'.  It can only have children of type View.\");\n\t\t}\n\t\t\n\t\tprotected override ControlCollection CreateControlCollection ()\n\t\t{\n\t\t\treturn new ViewCollection (this);\n\t\t}\n\t\t\n\t\tpublic View GetActiveView ()\n\t\t{\n\t\t\tif (viewIndex < 0 || viewIndex >= Controls.Count)\n\t\t\t\tthrow new HttpException (\"The ActiveViewIndex is not set to a valid View control\");\n\t\t\treturn Controls [viewIndex] as View;\n\t\t}\n\t\t\n\t\tpublic void SetActiveView (View view)\n\t\t{\n\t\t\tint i = Controls.IndexOf (view);\n\t\t\tif (i == -1)\n\t\t\t\tthrow new HttpException (\"The provided view is not contained in the MultiView control.\");\n\t\t\t\t\n\t\t\tActiveViewIndex = i;\n\t\t}\n\t\t\n\t\t[DefaultValue (-1)]\n\t\tpublic virtual int ActiveViewIndex {\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (Controls.Count == 0)\n\t\t\t\t\treturn initialIndex;\n\t\t\t\treturn viewIndex;\n\t\t\t}\n\t\t\tset \n\t\t\t{\n\t\t\t\tif (Controls.Count == 0) {\n\t\t\t\t\tinitialIndex = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value < -1 || value >= Controls.Count)\n\t\t\t\t\tthrow new ArgumentOutOfRangeException ();\n\t\t\t\tif (viewIndex != -1)\n\t\t\t\t\t((View)Controls [viewIndex]).NotifyActivation (false);\n\t\t\t\tviewIndex = value;\n\t\t\t\tif (viewIndex != -1)\n\t\t\t\t\t((View)Controls [viewIndex]).NotifyActivation (true);\n\t\t\t\tUpdateViewVisibility ();\n\t\t\t\tOnActiveViewChanged (EventArgs.Empty);\n\t\t\t}\n\t\t}\n\t\t[Browsable (true)]\n\t\tpublic virtual new bool EnableTheming\n\t\t{\n\t\t\tget { return base.EnableTheming; }\n\t\t\tset { base.EnableTheming = value; }\n\t\t}\n\t\t\n\t\t[PersistenceMode (PersistenceMode.InnerDefaultProperty)]\n\t\t[Browsable (false)]\n\t\tpublic virtual ViewCollection Views {\n\t\t\tget { return Controls as ViewCollection; }\n\t\t}\n\t\t\n\t\tprotected override bool OnBubbleEvent (object source, EventArgs e)\n\t\t{\n\t\t\tCommandEventArgs ca = e as CommandEventArgs;\n\t\t\tif (ca != null) {\n\t\t\t\tswitch (ca.CommandName) {\n\t\t\t\t\tcase \"NextView\":\n\t\t\t\t\t\tif (viewIndex < Controls.Count - 1 && Controls.Count > 0)\n\t\t\t\t\t\t\tActiveViewIndex = viewIndex + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\tcase \"PrevView\": \n\t\t\t\t\t\tif (viewIndex > 0)\n\t\t\t\t\t\t\tActiveViewIndex = viewIndex - 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\tcase \"SwitchViewByID\":\n\t\t\t\t\t\tforeach (View v in Controls)\n\t\t\t\t\t\t\tif (v.ID == (string)ca.CommandArgument) {\n\t\t\t\t\t\t\t\tSetActiveView (v);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\tcase \"SwitchViewByIndex\":\n\t\t\t\t\t\tint i = (int) Convert.ChangeType (ca.CommandArgument, typeof(int));\n\t\t\t\t\t\tActiveViewIndex = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tprotected internal override void OnInit (EventArgs e)\n\t\t{\n\t\t\tPage.RegisterRequiresControlState (this);\n\t\t\tif (initialIndex != -1) {\n\t\t\t\tActiveViewIndex = initialIndex;\n\t\t\t\tinitialIndex = -1;\n\t\t\t}\n\t\t\tbase.OnInit (e);\n\t\t}\n\t\t\n\t\tvoid UpdateViewVisibility ()\n\t\t{\n\t\t\tfor (int n=0; n<Views.Count; n++)\n\t\t\t\tViews [n].VisibleInternal = (n == viewIndex);\n\t\t}\n\t\t\n\t\tprotected internal override void RemovedControl (Control ctl)\n\t\t{\n\t\t\tif (viewIndex >= Controls.Count) {\n\t\t\t\tviewIndex = Controls.Count - 1;\n\t\t\t\tUpdateViewVisibility ();\n\t\t\t}\n\t\t\tbase.RemovedControl (ctl);\n\t\t}\n\t\t\n\t\tprotected internal override void LoadControlState (object state)\n\t\t{\n\t\t\tif (state != null) {\n\t\t\t\tviewIndex = (int)state;\n\t\t\t\tUpdateViewVisibility ();\n\t\t\t}\n\t\t\telse viewIndex = -1;\n\t\t}\n\t\t\n\t\tprotected internal override object SaveControlState ()\n\t\t{\n\t\t\tif (viewIndex != -1) return viewIndex;\n\t\t\telse return null;\n\t\t}\n\t\t\n\t\tprotected virtual void OnActiveViewChanged (EventArgs e)\n\t\t{\n\t\t\tif (Events != null) {\n\t\t\t\tEventHandler eh = (EventHandler) Events [ActiveViewChangedEvent];\n\t\t\t\tif (eh != null) eh (this, e);\n\t\t\t}\n\t\t}\n\t\t\n\t\tprotected internal override void Render (HtmlTextWriter writer)\n\t\t{\n", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "length": 777, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "5dbe65a9966abf6a6fdc04cf78e20977f8d24df06849e8e7"}
{"input": "", "context": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n## This program is free software; you can redistribute it and/or\n## modify it under the terms of the GNU General Public License\n## version 2 as published by the Free Software Foundation.\n##\n## This program is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n## GNU General Public License for more details.\n##\n## You should have received a copy of the GNU General Public License\n## along with this program; if not, write to the Free Software\n## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n##\n## author: Leonardo Tonetto\n__author__ = \"Leonardo Tonetto\"\n__copyright__ = \"Copyright 2016, Leonardo Tonetto\"\n__license__ = \"GPLv2\"\n__version__ = \"0.1\"\nimport sys\ntry:\n    import wigle\nexcept ImportError:\n    print >> sys.stderr, 'Please install wigle (eg. pip install wigle)'\n    sys.exit(1)\nimport argparse, pickle, time\ndef drange(start, stop, step):\n    \"\"\"\n    Float point implementation of range()\n    Based on (but not exactly):\n    http://stackoverflow.com/questions/477486/python-decimal-range-step-value\n    \"\"\"\n    ## few sanity checks first\n    if start < stop and step < 0:\n        raise RuntimeError('Wrong input variables, step should be > 0.')\n    if start > stop and step > 0:\n        raise RuntimeError('Wrong input variables, step should be < 0.')\n    r = start\n    while start < stop and r < stop:\n     \tyield r\n     \tr += step\n    while start > stop and r > stop:\n        yield r\n        r += step\nclass WigleDownloader:\n    \"\"\"\n    Downloads AP info from wigle.net\n    [HARDCODED] YEEEAH!\n    lat/lon_min/max : interval of the desired area.\n    lat_lon_div : number of divisions along each axis (used to double check).\n    div_map: initial num. of subdivisions inside each original division\n             this has to have the same number of columns/rows as the *_div arg.\n             Ref.: [0][0] is the upper left box\n             In case none is given, 1 is applied to all boxes\n    \"\"\"\n    ## Some constants\n    wigle_downloads_per_page = wigle.WIGLE_PAGESIZE\n    wigle_max_ap_per_query = 10000\n    ## These add up to 24h, time we would expect to have the quota renewed\n    wigle_timeout_backoff = [0.25*3600, ## 15 minutes\n                             0.25*3600,\n                             0.5*3600,\n                             1*3600,\n                             2*3600,\n                             4*3600,\n                             8*3600,\n                             8*3600]    ##  8 hours\n    file_default_remain = './coord.remain'\n    \n    def __init__( self, user, password, coordfile, outpath ):\n        try:\n            ## Wigle, wigle, wigle :-)\n            self.wigle = wigle.Wigle( user, password )\n        except wigle.WigleAuthenticationError as wae:\n            print >> sys.stderr, 'Authentication error for {1}.'.format(user)\n            print >> sys.stderr, wae.message\n            sys.exit(-1)\n        except wigle.WigleError as werr:\n            print >> sys.stderr, werr.message\n            sys.exit(-2)\n        self.outpath = outpath\n        self.coordfile = coordfile\n        ## This is for the city of Munich-DE\n        ## TODO: replace this with geocoding\n        self.latmin = 47.95\n        self.latmax = 48.43\n        self.lonmin = 11.00\n        self.lonmax = 12.15\n        self.latdiv = 6\n        self.londiv = 10\n        ## For the lazy: use this one\n        ## Do not modify this lazy map after this point since rows will be the same object...\n        #self.div_map = [[1]*self.londiv]*self.latdiv\n        ## Or you can do it like that\n        self.div_map = [[ 2, 2, 2, 2, 2, 2, 8, 2, 2, 2],\n                        [ 2, 2, 2, 2, 4, 3, 2, 5, 2, 2],\n                        [ 2, 4, 5, 4, 4, 5, 2, 4, 2, 2],\n                        [ 2, 4, 4, 8,18, 8, 8, 6, 2, 2],\n                        [ 2, 2, 3, 4,16, 8, 4, 2, 2, 2],\n                        [ 2, 2, 4, 4, 4, 4, 2, 2, 2, 2]]\n        self.INTERVALS = []\n        self.REMAINING_INTERVALS = []\n    def run(self):\n        \"\"\"\n        Just so that it does not look so ugly\n        \"\"\"\n        ## We either call compute_intervals() or parse_coordfile()\n        if self.coordfile:\n            self.parse_coordfile(self.coordfile)\n        else:\n            self.compute_intervals()\n        self.REMAINING_INTERVALS = self.INTERVALS[:]\n        self.REMAINING_INTERVALS.reverse()\n        ## Now we (continue) download(ing)\n        self.download()\n    def download(self):\n        \"\"\"\n        Download whatever is inside self.INTERVALS using\n        wigle pythong API (not official apparently)\n        \"\"\"\n        def callback_newpage(since):\n            pass\n        def _download( lat1, lat2, lon1, lon2, backoff_idx=0 ):\n            \"\"\"\n            This one will be called recursively until the subdivision\n            is fully downloaded. In case it reaches 10k it breaks down\n            this subdivision into two parts by dividing the longitude\n            interval into two. Something like this:\n                         lat2\n                  -----------------\n                 |                 |              ^\n                 |                 |              | N\n            lon1 |                 | lon2\n                 |                 |\n                 |                 |\n                  -----------------\n                         lat1\n            Becomes:\n                         lat2\n                  -----------------\n                 |        |        |              ^\n                 |        |        |              | N\n            lon1 |        |        | lon2\n                 |        |lon1_5  |\n                 |        |        |\n                  -----------------\n                         lat1\n            \"\"\"\n            print >> sys.stdout, 'Downloading ({0},{1},{2},{3})'.format( lat1, lat2, lon1, lon2 )\n            try:\n                RESULTS = self.wigle.search( lat_range   = ( lat1, lat2 ),\n                                             long_range  = ( lon1, lon2 ),\n                                             on_new_page = callback_newpage,\n                                             max_results = WigleDownloader.wigle_max_ap_per_query )\n                # Need to double check this\n                if len(RESULTS) >= 9998:\n                    print >> sys.stderr, 'Subdividing {0} {1} {2} {3}'.format(lat1,lat2,lon1,lon2)\n                    ## Will break down longitude interval into two parts\n                    lon1_5 = (lon2-lon1)/2.0\n                    R1 = _download( lat1, lat2, lon1, lon1_5 )\n                    R2 = _download( lat1, lat2, lon1_5, lon2 )\n                    RESULTS = R1.copy()\n                    RESULTS.update(R2)\n            except wigle.WigleRatelimitExceeded as wrle:\n                wait_s = WigleDownloader.wigle_timeout_backoff[backoff_idx]\n                print >> sys.stderr, 'Already got WigleRatelimitExceeded.'\n                print >> sys.stderr, 'Sleeping for {0} seconds before trying again.'.format(wait_s)\n                time.sleep(wait_s)\n                ## We may enter an infinite loop here...\n                ## TODO: solve it (for now check the stdout for problems)\n                return _download(lat1, lat2, lon1, lon2,\n                                 backoff_idx=(backoff_idx+1)%len(WigleDownloader.wigle_timeout_backoff))\n            except wigle.WigleError as we:\n                print >> sys.stderr, we\n                print >> sys.stderr, 'Something wrong with Wigle, stopping..'\n                raise\n            except KeyboardInterrupt:\n                print >> sys.stderr, 'Stopping the script.'\n                sys.exit(0)\n            except:\n                print >> sys.stderr, 'This looks like a bug.', sys.exc_info()[0]\n                return []\n            else:\n                sucess_string = 'Sucess downloading ({0},{1},{2},{3}) with {4} APs'\n                print >> sys.stdout, sucess_string.format( lat1, lat2, lon1, lon2, len(RESULTS) )\n                return RESULTS\n                \n        try:\n            ##\n            for interval in self.INTERVALS:\n                assert len(interval) == 4, 'Something wrong generating self.INTERVALS.'\n                lat1,lat2,lon1,lon2 = interval\n                AP_SUBDIVISION = _download( lat1, lat2, lon1, lon2 )\n                ## Write this out using pickle\n                ## TODO: write out as sqlite file\n                pickle_file = '{0}/{1}_{2}_{3}_{4}.p'.format( self.outpath, lat1, lat2, lon1, lon2 )\n                pickle.dump(AP_SUBDIVISION, open( pickle_file, \"wb\" ))\n                \n                ## Note: this was .reverse()'ed before\n                ## Pop'ing from the end of the list is much quicker\n                self.REMAINING_INTERVALS.pop()\n                \n                ## Write out coord.remain\n                with open( WigleDownloader.file_default_remain, 'wb' ) as coord_remain_file:\n                    for interval in self.REMAINING_INTERVALS:\n                        print >> coord_remain_file, ','.join(map(str,interval))\n        except KeyboardInterrupt:\n            print >> sys.stderr, 'Stopping the script.'\n            sys.exit(0)\n        except:\n            print >> sys.stderr, 'This looks like a bug.', sys.exc_info()[0]\n            sys.exit(-3)\n            \n    def compute_intervals(self):\n        \"\"\"\n        Returns a list with tuples containing:\n            [(box_lat_min,box_lat_max,box_lon_min,box_lon_max),...]\n        Since [0][0] is the upper left corner, lon grows positively\n        but lat grows negatively.\n        \"\"\"\n        if len(self.div_map) != self.latdiv or len(self.div_map[0]) != self.londiv:\n            raise RuntimeError('Map dimensions not correct!')\n        ## Compute the size of each initial box (in degrees).\n        lat_step = -(self.latmax - self.latmin) / self.latdiv\n        lon_step =  (self.lonmax - self.lonmin) / self.londiv\n        ## Compute the intervals.\n        initial_lat = self.latmax\n        initial_lon = self.lonmin\n        for row in self.div_map:\n            initial_lon = self.lonmin\n            for subdivisions in row:\n                lat_sub_step = lat_step / float(subdivisions)\n                lon_sub_step = lon_step / float(subdivisions)\n                ## min for each subdivision, for max we just add sub_step to it.\n                lats = list(drange(initial_lat,initial_lat+lat_step,lat_sub_step))\n                lons = list(drange(initial_lon,initial_lon+lon_step,lon_sub_step))\n                self.INTERVALS.extend([( lat, lat+lat_sub_step,\n                                         lon, lon+lon_sub_step ) for lat,lon in zip( lats, lons )])\n                initial_lon += lon_step\n            initial_lat += lat_step\n    def parse_coordfile( self, coordfile ):\n        \"\"\"\n        Parses the coord.remain file with the following format:\n        lat1,lat2,lon1,lon2\n        \"\"\"\n        print >> sys.stdout, 'Parsing coord.remain file.'\n        with open(coordfile) as f:\n            line = f.readline()\n            while line:\n                COORDS = line.strip().split(',')\n                assert len(COORDS) == 4, 'Something is wrong with coord.remain file.'\n                self.INTERVALS.append(tuple(COORDS))\n                line = f.readline()\n        print >> sys.stdout, 'Found {0} subdivisions to download'.format(len(self.INTERVALS))\n        \nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Wigle Downloader arguments')\n    parser.add_argument(\n        '-u', '--user', help='Wigle username', required=True )\n    parser.add_argument(\n        '-p', '--password', help='Wigle password', required=True )\n    parser.add_argument(\n        '--coordfile', help='coord.remain file path', required=False, default=None )\n    parser.add_argument(\n        '-o', '--outpath', help='Path to store pickle files.')\n", "answers": ["    args = parser.parse_args()"], "length": 1225, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "43954d45633ac63acc4badb3892fdb276e080592cc147b1e"}
{"input": "", "context": "using System;\nusing Server;\nusing Server.Targeting;\nusing Server.Mobiles;\nusing Server.Network;\nusing Server.Items;\nusing Server.Gumps;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Server.ContextMenus;\nusing Server.SkillHandlers;\nnamespace Server.Gumps\n{\n    public class ImbuingGumpC : Gump\n    {\n        private const int LabelHue = 0x480;\n        private const int LabelColor = 0x7FFF;  //Localized\n        private const int FontColor = 0xFFFFFF; //string\n        private const int ValueColor = 0xCCCCFF;\n        public const int MaxProps = 5;\n        private int m_Mod, m_Value;\n        private Item m_Item;\n        private int m_GemAmount = 0, m_PrimResAmount = 0, m_SpecResAmount = 0;\n\t\tprivate int m_TotalItemWeight;\n\t\tprivate int m_TotalProps;\n\t\tprivate int m_PropWeight;\n\t\tprivate int m_MaxWeight;\n\t\t\n        private ImbuingDefinition m_Definition;\n        public ImbuingGumpC(Mobile from, Item item, int mod, int value) : base(520, 340)\n        {\n            PlayerMobile m = from as PlayerMobile;\n            from.CloseGump(typeof(ImbuingGump));\n            from.CloseGump(typeof(ImbuingGumpB));\n            // SoulForge Check\n            if (!Imbuing.CheckSoulForge(from, 1))\n                return;\n            ImbuingContext context = Imbuing.GetContext(m);\n            m_Item = item;\n            m_Mod = mod;\n            m_Value = value;\n            // = Check Type of Ingredients Needed \n            if (!Imbuing.Table.ContainsKey(m_Mod))\n                return;\n            m_Definition = Imbuing.Table[m_Mod];\n            int maxInt = m_Definition.MaxIntensity;\n            int inc = m_Definition.IncAmount;\n            int weight = m_Definition.Weight;\n            if (m_Item is BaseJewel && m_Mod == 12)\n                maxInt /= 2;\n            if (m_Value < inc)\n                m_Value = inc;\n            if (m_Value > maxInt)\n                 m_Value = maxInt;\n            if (m_Value <= 0)\n                m_Value = 1;\n            //double currentIntensity = ((double)m_Value / (double)maxInt) * 100.0;\n            //currentIntensity = Math.Round(currentIntensity, 1);\n            double currentIntensity = ((double)weight / (double)maxInt * m_Value);\n            currentIntensity = Math.Floor(currentIntensity);\n\t\t\t//Set context\n\t\t\tcontext.LastImbued = item;\n            context.Imbue_Mod = mod;\n            context.Imbue_ModVal = weight;\n            context.ImbMenu_ModInc = inc;\n            context.Imbue_ModInt = value;\n\t\t\t// - Current Mod Weight\n            m_TotalItemWeight = Imbuing.GetTotalWeight(m_Item, m_Mod); \n            m_TotalProps = Imbuing.GetTotalMods(m_Item, m_Mod);\n\t\t\t\n            if (maxInt <= 1)\n\t\t\t\tcurrentIntensity= 100;\n            double propweight = ((double)weight / (double)maxInt) * m_Value;\n            //propweight = Math.Round(propweight);\n            propweight = Math.Floor(propweight);\n            m_PropWeight = Convert.ToInt32(propweight);\n            // - Maximum allowed Property Weight & Item Mod Count\n            m_MaxWeight = Imbuing.GetMaxWeight(m_Item);\n\t\t\t\n            // = Times Item has been Imbued\n            int timesImbued = 0;\n            if (m_Item is BaseWeapon) \n                timesImbued = ((BaseWeapon)m_Item).TimesImbued;\n            if (m_Item is BaseArmor)\n                timesImbued = ((BaseArmor)m_Item).TimesImbued;\n            if (m_Item is BaseJewel)\n                timesImbued = ((BaseJewel)m_Item).TimesImbued;\n            if (m_Item is BaseHat)\n                timesImbued = ((BaseHat)m_Item).TimesImbued;\n            // = Check Ingredients needed at the current Intensity\n            m_GemAmount = Imbuing.GetGemAmount(m_Item, m_Mod, m_Value);\n            m_PrimResAmount = Imbuing.GetPrimaryAmount(m_Item, m_Mod, m_Value);\n            m_SpecResAmount = Imbuing.GetSpecialAmount(m_Item, m_Mod, m_Value);\n            // ------------------------------ Gump Menu -------------------------------------------------------------\n            AddPage(0);\n            AddBackground(0, 0, 540, 450, 5054);\n            AddImageTiled(10, 10, 520, 430, 2624);\n            AddImageTiled(10, 35, 520, 10, 5058);\n            AddImageTiled(260, 45, 15, 290, 5058);\n            AddImageTiled(10, 185, 520, 10, 5058);\n            AddImageTiled(10, 335, 520, 10, 5058);\n            AddImageTiled(10, 405, 520, 10, 5058);\n            AddAlphaRegion(10, 10, 520, 430);\n            AddHtmlLocalized(10, 13, 520, 18, 1079717, LabelColor, false, false); //<CENTER>IMBUING CONFIRMATION</CENTER>\n            AddHtmlLocalized(57, 49, 200, 18, 1114269, LabelColor, false, false); //PROPERTY INFORMATION\n            // - Attribute to Imbue\n            AddHtmlLocalized(30, 80, 80, 17, 1114270, LabelColor, false, false);  //Property:\n            AddHtmlLocalized(100, 80, 150, 17, m_Definition.AttributeName, LabelColor, false, false);\n            // - Weight Modifier\n            AddHtmlLocalized(30, 120, 80, 17, 1114272, 0xFFFFFF, false, false);   //Weight:\n            double w = (double)m_Definition.Weight / 100.0;\n            AddHtml(90, 120, 80, 17, String.Format(\"<BASEFONT COLOR=#CCCCFF> {0}x\", w), false, false);\n            AddHtmlLocalized(30, 140, 80, 17, 1114273, LabelColor, false, false);   //Intensity:\n            AddHtml(90, 140, 80, 17, String.Format(\"<BASEFONT COLOR=#CCCCFF> {0}%\", currentIntensity), false, false);\n            // - Materials needed\n            AddHtmlLocalized(10, 199, 255, 18, 1044055, LabelColor, false, false); //<CENTER>MATERIALS</CENTER>\n            AddHtmlLocalized(40, 230, 180, 17, m_Definition.PrimaryName, LabelColor, false, false);\n            AddHtml(210, 230, 40, 17, String.Format(\"<BASEFONT COLOR=#CCCCFF> {0}\", m_PrimResAmount.ToString()), false, false);\n            AddHtmlLocalized(40, 255, 180, 17, m_Definition.GemName, LabelColor, false, false);\n            AddHtml(210, 255, 40, 17, String.Format(\"<BASEFONT COLOR=#CCCCFF> {0}\", m_GemAmount.ToString()), false, false);\n            if (m_SpecResAmount > 0)\n            {\n                AddHtmlLocalized(40, 280, 180, 17, m_Definition.SpecialName, LabelColor, false, false);\n                AddHtml(210, 280, 40, 17, String.Format(\"<BASEFONT COLOR=#CCCCFF> {0}\", m_SpecResAmount.ToString()), false, false);\n            }\n            // - Mod Description\n            AddHtmlLocalized(290, 65, 215, 110, m_Definition.Description, LabelColor, false, false); \n            AddHtmlLocalized(365, 199, 150, 18, 1113650, LabelColor, false, false); //RESULTS\n\t\t\t\n            AddHtmlLocalized(288, 220, 150, 17, 1113645, LabelColor, false, false);                                 //Properties:\n            AddHtml(443, 220, 80, 17, String.Format(\"<BASEFONT COLOR=#CCFFCC> {0}/5\", m_TotalProps + 1), false, false);\n            AddHtmlLocalized(288, 240, 150, 17, 1113646, LabelColor, false, false);                                   //Total Property Weight:\n            AddHtml(443, 240, 80, 17, String.Format(\"<BASEFONT COLOR=#CCFFCC> {0}/{1}\", m_TotalItemWeight + (int)m_PropWeight, m_MaxWeight), false, false);\n            // - Times Imbued\n            AddHtmlLocalized(288, 260, 150, 17, 1113647, LabelColor, false, false);                                   //Times Imbued:\n            AddHtml(443, 260, 80, 17, String.Format(\"<BASEFONT COLOR=#CCFFCC> {0}/20\", timesImbued + 1), false, false);\n            // - Name of Attribute to be Replaced\n            int replace = WhatReplacesWhat(m_Mod, m_Item);\n            AddHtmlLocalized(30, 100, 80, 17, 1114271, LabelColor, false, false);\n            if (replace <= 0)\n                replace = m_Definition.AttributeName;\n            AddHtmlLocalized(100, 100, 150, 17, replace, LabelColor, false, false);\n            // ===== CALCULATE DIFFICULTY =====\n            double dif;\n            double suc = Imbuing.GetSuccessChance(from, item, m_TotalItemWeight, m_PropWeight, out dif);\n            int Succ = Convert.ToInt32(suc);\n            string color;\n            // = Imbuing Success Chance % \n            AddHtmlLocalized(305, 300, 150, 17, 1044057, 0xFFFFFF, false, false);\n            if (Succ <= 1) color = \"#FF5511\";\n            else if (Succ > 1 && Succ < 10) color = \"#EE6611\";\n            else if (Succ >= 10 && Succ < 20) color = \"#DD7711\";\n            else if (Succ >= 20 && Succ < 30) color = \"#CC8811\";\n            else if (Succ >= 30 && Succ < 40) color = \"#BB9911\";\n            else if (Succ >= 40 && Succ < 50) color = \"#AAAA11\";\n            else if (Succ >= 50 && Succ < 60) color = \"#99BB11\";\n            else if (Succ >= 60 && Succ < 70) color = \"#88CC11\";\n            else if (Succ >= 70 && Succ < 80) color = \"#77DD11\";\n            else if (Succ >= 80 && Succ < 90) color = \"#66EE11\";\n            else if (Succ >= 90 && Succ < 100) color = \"#55FF11\";\n            else if (Succ >= 100) color = \"#01FF01\";\n            else color = \"#FFFFFF\";\n            if (suc > 100) suc = 100;\n            if (suc < 0) suc = 0;\n            AddHtml(430, 300, 80, 17, String.Format(\"<BASEFONT COLOR={0}>\\t{1}%\", color, suc), false, false);\n            // - Attribute Level\n            int ModValue_plus = 0;\n            if (maxInt > 1)\n            {\n                // - Set Intesity to Minimum\n                if (m_Value <= 0)\n                    m_Value = 1;\n                // = New Value:\n                AddHtmlLocalized(245, 350, 100, 17, 1062300, LabelColor, false, false); \n                // - Mage Weapon Value ( i.e [Mage Weapon -25] )\n                if (m_Mod == 41)\n\t\t\t\t\tAddHtml(254, 374, 50, 17, String.Format(\"<BASEFONT COLOR=#CCCCFF> -{0}\", (30 - m_Value)), false, false);\n                // - Show Property Value as % ( i.e [Hit Fireball 25%] )\n                else if (maxInt <= 8 || m_Mod == 21 || m_Mod == 17) \n                    AddHtml(254, 374, 50, 17, String.Format(\"<BASEFONT COLOR=#CCCCFF> {0}\", (m_Value + ModValue_plus)), false, false);\n                // - Show Property Value as just Number ( i.e [Mana Regen 2] )\n                else\n\t\t\t\t\tAddHtml(254, 374, 50, 17, String.Format(\"<BASEFONT COLOR=#CCCCFF> {0}%\", (m_Value + ModValue_plus)), false, false);\n                // == Buttons ==\n                //0x1467???\n                AddButton(192, 376, 5230, 5230, 10053, GumpButtonType.Reply, 0); // To Minimum Value\n                AddButton(211, 376, 5230, 5230, 10052, GumpButtonType.Reply, 0); // Dec Value by %\n                AddButton(230, 376, 5230, 5230, 10051, GumpButtonType.Reply, 0); // dec value by 1\n                AddButton(331, 376, 5230, 5230, 10056, GumpButtonType.Reply, 0); //To Maximum Value\n                AddButton(312, 376, 5230, 5230, 10055, GumpButtonType.Reply, 0); // Inc Value by %\n                AddButton(293, 376, 5230, 5230, 10054, GumpButtonType.Reply, 0); // inc Value by 1\n                AddLabel(341, 374, 0, \">\");\n                AddLabel(337, 374, 0, \">\");\n                AddLabel(333, 374, 0, \">\");\n                AddLabel(320, 374, 0, \">\");\n                AddLabel(316, 374, 0, \">\");\n                AddLabel(298, 374, 0, \">\");\n                AddLabel(235, 374, 0, \"<\");\n                AddLabel(216, 374, 0, \"<\");\n                AddLabel(212, 374, 0, \"<\");\n                AddLabel(199, 374, 0, \"<\");\n                AddLabel(195, 374, 0, \"<\");\n                AddLabel(191, 374, 0, \"<\");\n            }\n            AddButton(19, 416, 4005, 4007, 10099, GumpButtonType.Reply, 0);\n            AddHtmlLocalized(58, 417,  100, 18, 1114268, LabelColor, false, false);           //Back \n            AddButton(400, 416, 4005, 4007, 10100, GumpButtonType.Reply, 0);\n            AddHtmlLocalized(439, 417, 120, 18, 1114267, LabelColor, false, false);         //Imbue Item\n        }\n        public override void OnResponse(NetState state, RelayInfo info)\n        {\n            Mobile from = state.Mobile;\n            PlayerMobile pm = from as PlayerMobile;\n            ImbuingContext context = Imbuing.GetContext(pm);\n            int buttonNum = 0;\n            if (info.ButtonID > 0 && info.ButtonID < 10000)\n                buttonNum = 0;\n            else if (info.ButtonID > 20004)\n                buttonNum = 30000;\n            else\n                buttonNum = info.ButtonID;\n            switch (buttonNum)\n            {\n                case 0:\n                    {\n                        //Close\n                        break;\n                    }\n                case 10051: // = Decrease Mod Value [<]\n                    {\n                        if (context.Imbue_ModInt > m_Definition.IncAmount)\n                            context.Imbue_ModInt -= m_Definition.IncAmount;\n                        from.CloseGump(typeof(ImbuingGumpC));\n                        from.SendGump(new ImbuingGumpC(from, m_Item, context.Imbue_Mod, context.Imbue_ModInt));\n                        break;\n                    }\n                case 10052:// = Decrease Mod Value [<<]\n                    {\n                        if ((m_Mod == 42 || m_Mod == 24) && context.Imbue_ModInt > 20)\n                            context.Imbue_ModInt -= 20;\n                        if ((m_Mod == 13 || m_Mod == 20 || m_Mod == 21) && context.Imbue_ModInt > 10)\n                            context.Imbue_ModInt -= 10;\n                        else  if (context.Imbue_ModInt > 5)\n                            context.Imbue_ModInt -= 5;\n                        from.CloseGump(typeof(ImbuingGumpC));\n                        from.SendGump(new ImbuingGumpC(from, context.LastImbued, context.Imbue_Mod, context.Imbue_ModInt));\n                        break;\n                    }\n                case 10053:// = Minimum Mod Value [<<<]\n                    {\n                        //context.Imbue_ModInt = 0;\n                        context.Imbue_ModInt = 1;\n                        from.CloseGump(typeof(ImbuingGumpC));\n                        from.SendGump(new ImbuingGumpC(from, context.LastImbued, context.Imbue_Mod, context.Imbue_ModInt));\n                        break;\n                    }\n                case 10054: // = Increase Mod Value [>]\n                    {\n                        int max = m_Definition.MaxIntensity;\n                        if(m_Mod == 12 && context.LastImbued is BaseJewel)\n                            max = m_Definition.MaxIntensity / 2;\n                        if (context.Imbue_ModInt + m_Definition.IncAmount <= max)\n                            context.Imbue_ModInt += m_Definition.IncAmount;\n                        from.CloseGump(typeof(ImbuingGumpC));\n                        from.SendGump(new ImbuingGumpC(from, context.LastImbued, context.Imbue_Mod, context.Imbue_ModInt));\n                        break;\n                    }\n                case 10055: // = Increase Mod Value [>>]\n                    {\n                        int max = m_Definition.MaxIntensity;\n                        if (m_Mod == 12 && context.LastImbued is BaseJewel)\n                            max = m_Definition.MaxIntensity / 2;\n                        if (m_Mod == 42 || m_Mod == 24)\n                        {\n                            if (context.Imbue_ModInt + 20 <= max)\n                                context.Imbue_ModInt += 20;\n                            else\n                                context.Imbue_ModInt = max;\n                        }\n                        if (m_Mod == 13 || m_Mod == 20 || m_Mod == 21)\n                        {\n                            if (context.Imbue_ModInt + 10 <= max)\n                                context.Imbue_ModInt += 10;\n                            else\n                                context.Imbue_ModInt = max;\n                        }\n                        else if (context.Imbue_ModInt + 5 <= max)\n                            context.Imbue_ModInt += 5;\n                        else\n                            context.Imbue_ModInt = m_Definition.MaxIntensity;\n                        from.CloseGump(typeof(ImbuingGumpC));\n                        from.SendGump(new ImbuingGumpC(from, context.LastImbued, context.Imbue_Mod, context.Imbue_ModInt));\n                        break;\n                    }\n                case 10056: // = Maximum Mod Value [>>>]\n                    {\n                        int max = m_Definition.MaxIntensity;\n                        if (m_Mod == 12 && context.LastImbued is BaseJewel)\n                            max = m_Definition.MaxIntensity / 2;\n                        context.Imbue_ModInt = max;\n                        from.CloseGump(typeof(ImbuingGumpC));\n                        from.SendGump(new ImbuingGumpC(from, context.LastImbued, context.Imbue_Mod, context.Imbue_ModInt));\n                        break;\n                    }\n                case 10099: // - Back\n                    {\n                        from.SendGump(new ImbuingGumpB(from, context.LastImbued));\n                        break;\n                    }\n                case 10100:  // = Imbue the Item\n                    {\n                        context.Imbue_IWmax = m_MaxWeight;\n                        if (Imbuing.OnBeforeImbue(from, m_Item, m_Mod, m_Value, m_TotalProps, MaxProps, m_TotalItemWeight, m_MaxWeight))\n                        {\n                            from.CloseGump(typeof(ImbuingGumpC));\n                            Imbuing.ImbueItem(from, m_Item, m_Mod, m_Value);\n                            SendGumpDelayed(from);\n                        }\n                        break;\n                    }\n            }\n        }\n        public void SendGumpDelayed(Mobile from)\n        {\n            Timer.DelayCall(TimeSpan.FromSeconds(1.5), new TimerStateCallback(SendGump_Callback), from);\n        }\n        public void SendGump_Callback(object o)\n        {\n            Mobile from = o as Mobile;\n            if (from != null)\n                from.SendGump(new ImbuingGump(from));\n        }\n        // =========== Check if Choosen Attribute Replaces Another =================\n        public static int WhatReplacesWhat(int mod, Item item)\n        {\n            if (item is BaseWeapon)\n            {\n                BaseWeapon i = item as BaseWeapon;\n                // Slayers replace Slayers\n                if (mod >= 101 && mod <= 126)\n                {\n                    if (i.Slayer != SlayerName.None)\n                        return GetNameForAttribute(i.Slayer);\n                    if (i.Slayer2 != SlayerName.None)\n                        return GetNameForAttribute(i.Slayer2);\n                }\n                // OnHitEffect replace OnHitEffect\n                if (mod >= 35 && mod <= 39)\n                {\n                    if (i.WeaponAttributes.HitMagicArrow > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitMagicArrow);\n                    else if (i.WeaponAttributes.HitHarm > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitHarm);\n                    else if (i.WeaponAttributes.HitFireball > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitFireball);\n                    else if (i.WeaponAttributes.HitLightning > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitLightning);\n                    else if (i.WeaponAttributes.HitDispel > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitDispel);\n                }\n                // OnHitArea replace OnHitArea\n                if (mod >= 30 && mod <= 34)\n                {\n                    if (i.WeaponAttributes.HitPhysicalArea > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitPhysicalArea);\n                    else if (i.WeaponAttributes.HitColdArea > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitFireArea);\n                    else if (i.WeaponAttributes.HitFireArea > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitColdArea);\n                    else if (i.WeaponAttributes.HitPoisonArea > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitPoisonArea);\n                    else if (i.WeaponAttributes.HitEnergyArea > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitEnergyArea);\n                }\n                // OnHitLeech replace OnHitLeech\n                /*if (mod >= 25 && mod <= 27)\n                {\n                    if (i.WeaponAttributes.HitLeechHits > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitLeechHits);\n                    else if (i.WeaponAttributes.HitLeechStam > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitLeechStam);\n                    else if (i.WeaponAttributes.HitLeechMana > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitLeechMana);\n                }\n                // HitLower replace HitLower \n                if (mod >= 28 && mod <= 29)\n                {\n                    if (i.WeaponAttributes.HitLowerAttack > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitLowerAttack);\n                    else if (i.WeaponAttributes.HitLowerDefend > 0)\n                        return GetNameForAttribute(AosWeaponAttribute.HitLowerDefend);\n                }*/\n            }\n            if (item is BaseJewel)\n            {\n                BaseJewel i = item as BaseJewel;\n                // SkillGroup1 replace SkillGroup1\n                if (mod >= 151 && mod <= 155)\n                {\n                    if (i.SkillBonuses.GetBonus(0) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.PossibleSkills)\n                        {\n                            if(i.SkillBonuses.GetSkill(0) == sk)\n                                return GetNameForAttribute(sk);\n                        }\n                    }\n                }\n                // SkillGroup2 replace SkillGroup2\n", "answers": ["                if (mod >= 156 && mod <= 160)"], "length": 1845, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "9d639220f2ae9cbb3b86c56287371346450159efa5afc251"}
{"input": "", "context": "# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\"\"\"\nDownload buttons. Let's get some terminology straight. Here is a list\nof terms and example values for them:\n* product: 'firefox' or 'thunderbird'\n* version: 7.0, 8.0b3, 9.0a2\n* build: 'beta', 'aurora', or None (for latest)\n* platform: 'os_windows', 'os_linux', 'os_linux64', or 'os_osx'\n* locale: a string in the form of 'en-US'\n\"\"\"\nfrom django.conf import settings\nimport jingo\nimport jinja2\nfrom bedrock.firefox.firefox_details import firefox_details, mobile_details\nfrom lib.l10n_utils import get_locale\nnightly_desktop = ('https://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/'\n                   'latest-mozilla-aurora')\nnightly_android = ('https://ftp.mozilla.org/pub/mozilla.org/mobile/nightly/'\n                   'latest-mozilla-aurora-android')\ndownload_urls = {\n    'transition': '/firefox/new/?scene=2#download-fx',\n    'direct': 'https://download.mozilla.org/',\n    'aurora': nightly_desktop,\n    'aurora-l10n': nightly_desktop + '-l10n',\n    'aurora-android-api-9': nightly_android + (\n        '-api-9/fennec-%s.multi.android-arm.apk'),\n    'aurora-android-api-11': nightly_android + (\n        '-api-11/fennec-%s.multi.android-arm.apk'),\n    'aurora-android-x86': nightly_android + (\n        '-x86/fennec-%s.multi.android-i386.apk'),\n}\ndef latest_version(locale, channel='release'):\n    \"\"\"Return build info for a locale and channel.\n    :param locale: locale string of the build\n    :param channel: channel of the build: release, beta, or aurora\n    :return: dict or None\n    \"\"\"\n    all_builds = (firefox_details.firefox_primary_builds,\n                  firefox_details.firefox_beta_builds)\n    version = firefox_details.latest_version(channel)\n    for builds in all_builds:\n        if locale in builds and version in builds[locale]:\n            _builds = builds[locale][version]\n            # Append Linux 64-bit build\n            if 'Linux' in _builds:\n                _builds['Linux 64'] = _builds['Linux']\n            return version, _builds\ndef make_aurora_link(product, version, platform, locale,\n                     force_full_installer=False):\n    # Download links are different for localized versions\n    if locale.lower() == 'en-us':\n        if platform == 'os_windows':\n            product = 'firefox-aurora-stub'\n        else:\n            product = 'firefox-aurora-latest-ssl'\n    else:\n        product = 'firefox-aurora-latest-l10n'\n    tmpl = '?'.join([download_urls['direct'],\n                    'product={prod}&os={plat}&lang={locale}'])\n    return tmpl.format(\n        prod=product, locale=locale,\n        plat=platform.replace('os_', '').replace('windows', 'win'))\ndef make_download_link(product, build, version, platform, locale,\n                       force_direct=False, force_full_installer=False,\n                       force_funnelcake=False, funnelcake_id=None):\n    # Aurora has a special download link format\n    if build == 'aurora':\n        return make_aurora_link(product, version, platform, locale,\n                                force_full_installer=force_full_installer)\n    # The downloaders expect the platform in a certain format\n    platform = {\n        'os_windows': 'win',\n        'os_linux': 'linux',\n        'os_linux64': 'linux64',\n        'os_osx': 'osx'\n    }[platform]\n    # stub installer exceptions\n    # TODO: NUKE FROM ORBIT!\n    stub_langs = settings.STUB_INSTALLER_LOCALES.get(platform, [])\n    if stub_langs and (stub_langs == settings.STUB_INSTALLER_ALL or\n                       locale.lower() in stub_langs):\n        suffix = 'stub'\n        if force_funnelcake or force_full_installer:\n            suffix = 'latest'\n        version = ('beta-' if build == 'beta' else '') + suffix\n    elif not funnelcake_id:\n        # Force download via SSL. Stub installers are always downloaded via SSL.\n        # Funnelcakes may not be ready for SSL download\n        version += '-SSL'\n    # append funnelcake id to version if we have one\n    if funnelcake_id:\n        version = '{vers}-f{fc}'.format(vers=version, fc=funnelcake_id)\n    # Check if direct download link has been requested\n    # (bypassing the transition page)\n    if force_direct:\n        # build a direct download link\n        tmpl = '?'.join([download_urls['direct'],\n                        'product={prod}-{vers}&os={plat}&lang={locale}'])\n        return tmpl.format(prod=product, vers=version,\n                           plat=platform, locale=locale)\n    else:\n        # build a link to the transition page\n        return download_urls['transition']\ndef android_builds(build, builds=None):\n    builds = builds or []\n    android_link = settings.GOOGLE_PLAY_FIREFOX_LINK\n    variations = {\n        'api-9': 'Gingerbread',\n        'api-11': 'Honeycomb+ ARMv7',\n        'x86': 'x86',\n    }\n    if build.lower() == 'beta':\n        android_link = android_link.replace('org.mozilla.firefox',\n                                            'org.mozilla.firefox_beta')\n    if build == 'aurora':\n        for type, arch_pretty in variations.items():\n            link = (download_urls['aurora-android-%s' % type] %\n                    mobile_details.latest_version('aurora'))\n            builds.append({'os': 'os_android',\n                           'os_pretty': 'Android',\n                           'os_arch_pretty': 'Android %s' % arch_pretty,\n                           'arch': 'x86' if type == 'x86' else 'armv7 %s' % type,\n                           'arch_pretty': arch_pretty,\n                           'download_link': link})\n    if build != 'aurora':\n        builds.append({'os': 'os_android',\n                       'os_pretty': 'Android',\n                       'download_link': android_link})\n    return builds\n@jingo.register.function\n@jinja2.contextfunction\ndef download_firefox(ctx, build='release', small=False, icon=True,\n                     mobile=None, dom_id=None, locale=None, simple=False,\n                     force_direct=False, force_full_installer=False,\n                     force_funnelcake=False, check_old_fx=False):\n    \"\"\" Output a \"download firefox\" button.\n    :param ctx: context from calling template.\n    :param build: name of build: 'release', 'beta' or 'aurora'.\n    :param small: Display the small button if True.\n    :param icon: Display the Fx icon on the button if True.\n    :param mobile: Display the android download button if True, the desktop\n            button only if False, and by default (None) show whichever\n            is appropriate for the user's system.\n    :param dom_id: Use this string as the id attr on the element.\n    :param locale: The locale of the download. Default to locale of request.\n    :param simple: Display button with text only if True. Will not display\n            icon or privacy/what's new/systems & languages links. Can be used\n            in conjunction with 'small'.\n    :param force_direct: Force the download URL to be direct.\n    :param force_full_installer: Force the installer download to not be\n            the stub installer (for aurora).\n    :param force_funnelcake: Force the download version for en-US Windows to be\n            'latest', which bouncer will translate to the funnelcake build.\n    :param check_old_fx: Checks to see if the user is on an old version of\n            Firefox and, if true, changes the button text from 'Free Download'\n            to 'Update your Firefox'. Must be used in conjunction with\n            'simple' param being true.\n    :return: The button html.\n    \"\"\"\n    alt_build = '' if build == 'release' else build\n    platform = 'mobile' if mobile else 'desktop'\n    locale = locale or get_locale(ctx['request'])\n    funnelcake_id = ctx.get('funnelcake_id', False)\n    dom_id = dom_id or 'download-button-%s-%s' % (platform, build)\n    l_version = latest_version(locale, build)\n    if l_version:\n        version, platforms = l_version\n    else:\n        locale = 'en-US'\n        version, platforms = latest_version('en-US', build)\n    # Gather data about the build for each platform\n    builds = []\n    if not mobile:\n", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "length": 816, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "03873ecbb96288a84c3d9ea1f5a2a718188d2c8a0c5920ab"}
{"input": "", "context": "/**\n * Genji Scrum Tool and Issue Tracker\n * Copyright (C) 2015 Steinbeis GmbH & Co. KG Task Management Solutions\n * <a href=\"http://www.trackplus.com\">Genji Scrum Tool</a>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/* $Id:$ */\npackage com.aurel.track.fieldType.runtime.system.select;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport com.aurel.track.admin.customize.lists.systemOption.StatusBL;\nimport com.aurel.track.admin.customize.projectType.ProjectTypesBL;\nimport com.aurel.track.beans.IBeanID;\nimport com.aurel.track.beans.ILabelBean;\nimport com.aurel.track.beans.ISerializableLabelBean;\nimport com.aurel.track.beans.TPersonBean;\nimport com.aurel.track.beans.TProjectBean;\nimport com.aurel.track.beans.TStateBean;\nimport com.aurel.track.beans.TWorkItemBean;\nimport com.aurel.track.exchange.track.NameMappingBL;\nimport com.aurel.track.fieldType.bulkSetters.IBulkSetter;\nimport com.aurel.track.fieldType.constants.SystemFields;\nimport com.aurel.track.fieldType.fieldChange.FieldChangeValue;\nimport com.aurel.track.fieldType.runtime.base.LookupContainer;\nimport com.aurel.track.fieldType.runtime.base.SelectContext;\nimport com.aurel.track.fieldType.runtime.base.SerializableBeanAllowedContext;\nimport com.aurel.track.fieldType.runtime.matchers.design.IMatcherValue;\nimport com.aurel.track.fieldType.runtime.matchers.design.MatcherDatasourceContext;\nimport com.aurel.track.fieldType.runtime.matchers.run.MatcherContext;\nimport com.aurel.track.item.massOperation.MassOperationContext;\nimport com.aurel.track.item.massOperation.MassOperationValue;\nimport com.aurel.track.item.workflow.execute.StatusWorkflow;\nimport com.aurel.track.item.workflow.execute.WorkflowContext;\nimport com.aurel.track.lucene.LuceneUtil;\nimport com.aurel.track.resources.LocalizeUtil;\nimport com.aurel.track.util.GeneralUtils;\npublic class SystemStateRT extends SystemSelectBaseLocalizedRT{\n\t/**\n\t * In case of a custom picker or system selects select the list type\n\t * Used by saving custom pickers and \n\t * explicit history for both system and custom fields\n\t * @return\n\t */\n\t@Override\n\tpublic Integer getSystemOptionType() {\n\t\treturn SystemFields.INTEGER_STATE;\n\t}\n\t\n\t/**\n\t * Loads the edit data source for state list \n\t * @param selectContext\n\t * @return\n\t */\n\t@Override\n\tpublic List loadEditDataSource(SelectContext selectContext) {\n\t\tTWorkItemBean workItemBean = selectContext.getWorkItemBean();\n\t\tInteger person = selectContext.getPersonID();\n\t\tList<TStateBean> dataSource;\n\t\tif (workItemBean.isAccessLevelFlag()) {\n\t\t\t//for private issue do not make workflow limitations\n\t\t\tdataSource = StatusBL.getByProjectTypeIssueTypeAssignments(workItemBean.getProjectID(),\n\t\t\t\t\tworkItemBean.getListTypeID(), workItemBean.getStateID());\n\t\t} else {\n\t\t\tdataSource = StatusWorkflow.loadStatesTo(workItemBean.getProjectID(),\n\t\t\t\t\tworkItemBean.getListTypeID(), workItemBean.getStateID(), person, workItemBean, null);\n\t\t\t}\n\t\treturn LocalizeUtil.localizeDropDownList(dataSource, selectContext.getLocale());\n\t}\n\t\n\t/**\n\t * Loads the create data source for state list\n\t * The list should contain a single value, \n\t * consequently the initial entry can't be changed \n\t * even if it will be (accidentally) shown in the create issue screen\t\n\t * @param selectContext\n\t * @return\n\t */\n\t@Override\n\tpublic List loadCreateDataSource(SelectContext selectContext) {\n\t\tTWorkItemBean workItemBean = selectContext.getWorkItemBean();\n\t\tList<TStateBean> dataSource = StatusWorkflow.loadInitialStates(workItemBean.getProjectID(),\n\t\t\t\tworkItemBean.getListTypeID(), workItemBean, selectContext.getPersonID(), null);\n\t\treturn LocalizeUtil.localizeDropDownList(dataSource, selectContext.getLocale());\n\t}\n\t\t\n\t/**\n\t * Loads the datasource for the matcher\n\t * used by select fields to get the possible values\n\t * It will be called from both field expressions and upper selects \n\t * The value can be a list for simple select or a map of lists for composite selects or a tree\n\t * @param matcherValue\n\t * @param matcherDatasourceContext the data source may be project dependent. \n\t * @param parameterCode for composite selects\n\t * @return the datasource (list or tree)\n\t */\t\n\t@Override\n\tpublic Object getMatcherDataSource(IMatcherValue matcherValue, MatcherDatasourceContext matcherDatasourceContext, Integer parameterCode) {\n\t\tList<TStateBean> datasource;\n\t\tInteger[] projectTypeIDs = ProjectTypesBL.getProjectTypeIDsForProjectIDs(matcherDatasourceContext.getProjectIDs());\n\t\tif (projectTypeIDs == null || projectTypeIDs.length==0) {\n\t\t\tdatasource = (List)StatusBL.loadAll();\n\t\t} else {\n\t\t\tdatasource =(List)StatusBL.loadAllowedByProjectTypesAndIssueTypes(projectTypeIDs, matcherDatasourceContext.getItemTypeIDs());\n\t\t}\n\t\tLocale locale = matcherDatasourceContext.getLocale();\n\t\tLocalizeUtil.localizeDropDownList(datasource, locale);\n\t\tif (matcherDatasourceContext.isWithParameter()) {\n\t\t\tdatasource.add((TStateBean)getLabelBean(MatcherContext.PARAMETER, locale));\n\t\t}\t\n\t\tif (matcherValue!=null) {\n\t\t\tif (matcherDatasourceContext.isInitValueIfNull()) {\n\t\t\t\t//from field expression\n\t\t\t\tObject value = matcherValue.getValue();\n\t\t\t\tif (value==null && datasource!=null && !datasource.isEmpty()) {\n\t\t\t\t\tmatcherValue.setValue(new Integer[] {datasource.get(0).getObjectID()});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//from upper select\n\t\t\t\tif (matcherDatasourceContext.isFirstLoad()) {\n\t\t\t\t\t//select the not closed states\n\t\t\t\t\tList<Integer> notClosedStates = new ArrayList<Integer>(); \n\t\t\t\t\tfor ( int i = 0; i < datasource.size(); i++) { \n\t\t\t\t\t\tTStateBean stateBean = datasource.get(i); \n\t\t\t\t\t\tInteger stateFlag = stateBean.getStateflag();\n\t\t\t\t\t\t//stateflag null for $Parameter \n\t\t\t\t\t\tif (stateFlag!=null && TStateBean.STATEFLAGS.CLOSED!=stateFlag.intValue() ) {\n\t\t\t\t\t\t\tnotClosedStates.add(stateBean.getObjectID());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tInteger[] selectedStates = GeneralUtils.createIntegerArrFromCollection(notClosedStates);\n\t\t\t\t\tmatcherValue.setValue(selectedStates);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn datasource;\n\t}\n\t\n\t/**\n\t * Loads the IBulkSetter object for configuring the bulk operation\n\t * @param fieldID\n\t */\n\t@Override\n\tpublic IBulkSetter getBulkSetterDT(Integer fieldID) {\n\t\tIBulkSetter bulkSetter = super.getBulkSetterDT(fieldID);\n\t\t//should be verified against project types and workflow\n\t\tbulkSetter.setSelectValueSurelyAllowed(false);\n\t\treturn bulkSetter;\n\t}\n\t\n\t/**\n\t * Loads the datasource for the mass operation\n\t * used mainly by select fields to get \n\t * the all possible options for a field (system or custom select) \n\t * It also sets a value if not yet selected\n\t * The value can be a List for simple select or a Map of lists for composite selects  \n\t * @param massOperationContext\n\t * @param massOperationValue\n\t * @param parameterCode\n\t * @param personBean\n\t * @param locale\n\t * @return\n\t */\n\t@Override\n\tpublic void loadBulkOperationDataSource(MassOperationContext massOperationContext,\n\t\t\tMassOperationValue massOperationValue,\n\t\t\tInteger parameterCode, TPersonBean personBean, Locale locale) {\n\t\tList<IBeanID> datasource = (List)StatusBL.loadAll(locale);\n\t\tmassOperationValue.setPossibleValues(datasource);\n\t\tmassOperationValue.setValue(getBulkSelectValue(massOperationContext,\n\t\t\t\tmassOperationValue.getFieldID(), null, \n\t\t\t\t(Integer)massOperationValue.getValue(), \n\t\t\t\t(List<IBeanID>)massOperationValue.getPossibleValues()));\n\t}\n\t\n\t/**\n\t * Loads the datasource and value for configuring the field change\n\t * @param workflowContext\n\t * @param fieldChangeValue\n\t * @param parameterCode\n\t * @param personBean\n\t * @param locale\n\t */\n\t@Override\n\tpublic void loadFieldChangeDatasourceAndValue(WorkflowContext workflowContext,\n\t\t\tFieldChangeValue fieldChangeValue, \n\t\t\tInteger parameterCode, TPersonBean personBean, Locale locale) {\n\t\tList<TStateBean> datasource = null;\n\t\tInteger itemTypeID = workflowContext.getItemTypeID();\n\t\tInteger projectID = workflowContext.getProjectID();\n\t\tInteger projectTypeID = workflowContext.getProjectTypeID();\n\t\tif (projectTypeID==null && projectID!=null) {\n\t\t\tTProjectBean projectBean = LookupContainer.getProjectBean(projectID);\n\t\t\tif (projectBean!=null) {\n\t\t\t\tprojectTypeID = projectBean.getProjectType();\n\t\t\t}\n\t\t}\n\t\tif (projectTypeID==null || itemTypeID==null) {\n\t\t\tdatasource = StatusBL.loadAll();\n\t\t} else {\n\t\t\tdatasource = StatusBL.getByProjectTypeIssueTypeAssignments(projectTypeID, itemTypeID, (Integer)fieldChangeValue.getValue());\n\t\t}\n\t\tfieldChangeValue.setPossibleValues(LocalizeUtil.localizeDropDownList(datasource, locale));\n\t\tfieldChangeValue.setValue(getBulkSelectValue(null,\n\t\t\t\tfieldChangeValue.getFieldID(), null, \n\t\t\t\t(Integer)fieldChangeValue.getValue(), \n\t\t\t\t(List<IBeanID>)fieldChangeValue.getPossibleValues()));\n\t}\n\t\n\t/**\n\t * Get the ILabelBean by primary key \n\t * @return\n\t */\n\t@Override\n\tpublic ILabelBean getLabelBean(Integer optionID, Locale locale) {\n\t\tif (optionID!=null && \n\t\t\t\toptionID.equals(MatcherContext.PARAMETER)) {\n\t\t\tTStateBean stateBean = new TStateBean();\n\t\t\tstateBean.setLabel(MatcherContext.getLocalizedParameter(locale));\n\t\t\tstateBean.setObjectID(optionID);\n\t\t\treturn stateBean;\n\t\t}\n\t\treturn StatusBL.loadByPrimaryKey(optionID);\n\t}\n\t\n\t/**\n\t * Returns the lookup entity type related to the fieldType\n\t * @return\n\t */\n\t@Override\n\tpublic int getLookupEntityType() {\n\t\treturn LuceneUtil.LOOKUPENTITYTYPES.STATE;\n\t}\n\t\n\t/**\n\t * Creates a new empty serializableLabelBean\n\t * @return\n\t */\n\t@Override\n\tpublic ISerializableLabelBean getNewSerializableLabelBean() {\n\t\treturn new TStateBean();\n\t}\n\t\n\t/**\n\t * Gets the ID by the label\n\t * @param fieldID\n\t * @param projectID\n\t * @param issueTypeID\n\t * @param locale\n\t * @param label\n\t * @param lookupBeansMap\n\t * @param componentPartsMap\n\t * @return\n\t */\n\t@Override\n\tpublic Integer getLookupIDByLabel(Integer fieldID,\n\t\t\tInteger projectID, Integer issueTypeID, \n\t\t\tLocale locale, String label,\n\t\t\tMap<String, ILabelBean> lookupBeansMap, Map<Integer, Integer> componentPartsMap) {\n\t\tInteger objectID = NameMappingBL.getExactMatch(label, lookupBeansMap);\n\t\tif (objectID!=null) {\n\t\t\treturn objectID;\n\t\t}\n\t\tTStateBean stateBean = null;\n\t\tInteger primaryKey = LocalizeUtil.getDropDownPrimaryKeyFromLocalizedText(\n\t\t\t\tnew TStateBean().getKeyPrefix(), label, locale);\n\t\tif (primaryKey!=null) {\n\t\t\tstateBean = LookupContainer.getStatusBean(primaryKey);\n\t\t\tif (stateBean!=null) {\n\t\t\t\treturn primaryKey;\n\t\t\t}\n\t\t}\n\t\tList<TStateBean> stateBeans = StatusBL.loadByLabel(label); \n\t\tif (stateBeans!=null && !stateBeans.isEmpty()) {\n\t\t\tstateBean =  stateBeans.get(0);\n\t\t}\n\t\tif (stateBean!=null) {\n\t\t\treturn stateBean.getObjectID();\n\t\t}\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Whether the lookupID found by label is allowed in \n\t * the context of serializableBeanAllowedContext\n\t * In excel the lookup entries are not limited by the user interface controls\n\t * This method should return false if the lookupID\n\t * is not allowed (for ex. a person without manager role was set as manager) \n\t * @param objectID\n\t * @param serializableBeanAllowedContext\n\t * @return\n\t */\n\t@Override\n\tpublic boolean lookupBeanAllowed(Integer objectID, \n\t\t\tSerializableBeanAllowedContext serializableBeanAllowedContext) {\n\t\tList<TStateBean> stateBeansList=null;\n\t\tInteger projectID = serializableBeanAllowedContext.getProjectID();\n\t\tInteger issueTypeID = serializableBeanAllowedContext.getIssueTypeID();\n", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "length": 1101, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "63fdad7f1feacdf8cca4aaf57dae737d83c351d9ab66db8b"}
{"input": "", "context": "using System.Collections.Generic;\nusing System.Linq;\nusing AutoJIT.Contrib;\nusing AutoJIT.CSharpConverter.ConversionModule.Helper;\nusing AutoJIT.CSharpConverter.ConversionModule.StatementConverter.Interface;\nusing AutoJIT.Parser;\nusing AutoJIT.Parser.AST;\nusing AutoJIT.Parser.AST.Statements;\nusing AutoJIT.Parser.AST.Statements.Interface;\nusing AutoJIT.Parser.AST.Visitor;\nusing AutoJIT.Parser.Extensions;\nusing AutoJITRuntime;\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nnamespace AutoJIT.CSharpConverter.ConversionModule.Visitor\n{\n    public class ConversionVisitor : SyntaxVisitorBase<IEnumerable<CSharpSyntaxNode>>\n    {\n        private readonly ICSharpSkeletonFactory _cSharpSkeletonFactory;\n        private readonly IInjectionService _injectionService;\n        protected IContextService ContextService;\n        public ConversionVisitor( IInjectionService injectionService, IContextService contextService, ICSharpSkeletonFactory cSharpSkeletonFactory ) {\n            _injectionService = injectionService;\n            ContextService = contextService;\n            _cSharpSkeletonFactory = cSharpSkeletonFactory;\n        }\n        public void InitializeContext( IContext context ) {\n            ContextService.Initialize( context );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitAssignStatement( AssignStatement node ) {\n            return GetConverter<AssignStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitContinueCaseStatement( ContinueCaseStatement node ) {\n            return GetConverter<ContinueCaseStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitContinueLoopStatement( ContinueLoopStatement node ) {\n            return GetConverter<ContinueLoopStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitDimStatement( DimStatement node ) {\n            return GetConverter<DimStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitDoUntilStatement( DoUntilStatement node ) {\n            return GetConverter<DoUntilStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitExitloopStatement( ExitloopStatement node ) {\n            return GetConverter<ExitloopStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitExitStatement( ExitStatement node ) {\n            return GetConverter<ExitStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitForInStatement( ForInStatement node ) {\n            return GetConverter<ForInStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitForToNextStatement( ForToNextStatement node ) {\n            return GetConverter<ForToNextStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitFunctionCallStatement( FunctionCallStatement node ) {\n            return GetConverter<FunctionCallStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitGlobalDeclarationStatement( GlobalDeclarationStatement node ) {\n            return GetConverter<GlobalDeclarationStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitIfElseStatement( IfElseStatement node ) {\n            return GetConverter<IfElseStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitInitDefaultParameterStatement( InitDefaultParameterStatement node ) {\n            return GetConverter<InitDefaultParameterStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitLocalDeclarationStatement( LocalDeclarationStatement node ) {\n            return GetConverter<LocalDeclarationStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitStaticDeclarationStatement( StaticDeclarationStatement node ) {\n            return GetConverter<StaticDeclarationStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitGlobalEnumDeclarationStatement( GlobalEnumDeclarationStatement node ) {\n            return GetConverter<GlobalEnumDeclarationStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitLocalEnumDeclarationStatement( LocalEnumDeclarationStatement node ) {\n            return GetConverter<LocalEnumDeclarationStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitReDimStatement( ReDimStatement node ) {\n            return GetConverter<ReDimStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitReturnStatement( ReturnStatement node ) {\n            return GetConverter<ReturnStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitSelectCaseStatement( SelectCaseStatement node ) {\n            return GetConverter<SelectCaseStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitSwitchCaseStatement( SwitchCaseStatement node ) {\n            return GetConverter<SwitchCaseStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitWhileStatement( WhileStatement node ) {\n            return GetConverter<WhileStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitVariableFunctionCallStatement( VariableFunctionCallStatement node ) {\n            return GetConverter<VariableFunctionCallStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitFunction( Function node ) {\n            return Convert( node, ContextService ).ToEnumerable();\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitBlockStatement( BlockStatement node ) {\n            return GetConverter<BlockStatement>().Convert( node, ContextService );\n        }\n        public override IEnumerable<CSharpSyntaxNode> VisitAutoitScriptRoot( AutoitScriptRoot node ) {\n            var memberList = new SyntaxList<MemberDeclarationSyntax>();\n            ContextService.SetGlobalContext( true );\n            var blockSyntax = (BlockSyntax) node.MainFunction.Accept( this ).Single();\n            blockSyntax = blockSyntax.AddStatements(\n                SyntaxFactory.ReturnStatement( SyntaxFactory.LiteralExpression( SyntaxKind.NumericLiteralExpression, SyntaxFactory.Literal( \"0\", 0 ) ) ) );\n            var main = SyntaxFactory.MethodDeclaration(SyntaxFactory.IdentifierName(typeof(Variant).Name), \"Main\").AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword)).WithBody(blockSyntax);\n            memberList = memberList.Add(main);\n            ContextService.SetGlobalContext( false );\n            memberList = memberList.AddRange( ContextService.PopGlobalVariables() );\n            ContextService.ResetFunctionContext();\n            foreach (Function function in node.Functions) {\n                memberList = memberList.Add( (MemberDeclarationSyntax) function.Accept( this ).Single() );\n                memberList = memberList.AddRange( ContextService.PopGlobalVariables() );\n                ContextService.ResetFunctionContext();\n            }\n            NamespaceDeclarationSyntax finalScript = _cSharpSkeletonFactory.EmbedInClassTemplate( new List<MemberDeclarationSyntax>( memberList ), ContextService.GetRuntimeInstanceName(), \"AutoJITScriptClass\", ContextService.GetContextInstanceName() );\n            finalScript = RemoveEmptyStatements( finalScript );\n            finalScript = FixByReferenceCalls( finalScript, memberList );\n            return finalScript.ToEnumerable();\n        }\n        protected MemberDeclarationSyntax Convert( Function function, IContextService context ) {\n            IList<IStatementNode> statementNodes = function.Statements.Block;\n            statementNodes = DeclareParameter( statementNodes, function.Parameter, context );\n            List<StatementSyntax> dotNetStatements = ConvertStatements( statementNodes );\n            dotNetStatements = OrderDeclarations( dotNetStatements );\n            if ( !( dotNetStatements.Last() is ReturnStatementSyntax ) ) {\n                dotNetStatements.Add( SyntaxFactory.ReturnStatement( SyntaxFactory.LiteralExpression( SyntaxKind.NumericLiteralExpression, SyntaxFactory.Literal( \"0\", 0 ) ) ) );    \n            }\n            BlockSyntax body = dotNetStatements.ToBlock();\n            return SyntaxFactory.MethodDeclaration( SyntaxFactory.IdentifierName( typeof (Variant).Name ), function.Name.Token.Value.StringValue ).AddModifiers( SyntaxFactory.Token( SyntaxKind.PublicKeyword ) ).WithParameterList( SyntaxFactory.ParameterList( CreaterParameter( function.Parameter, context ).ToSeparatedSyntaxList() ) ).WithBody( body );\n        }\n        private IList<IStatementNode> DeclareParameter( IList<IStatementNode> statementNodes, IEnumerable<AutoitParameter> parameter, IContextService context ) {\n            foreach (AutoitParameter parameterInfo in parameter) {\n                context.RegisterLocal( parameterInfo.ParameterName.Token.Value.StringValue );\n                if ( parameterInfo.DefaultValue != null ) {\n                    var statement = new InitDefaultParameterStatement( context.GetVariableName( parameterInfo.ParameterName.Token.Value.StringValue ), parameterInfo.DefaultValue );\n                    statement.Initialize();\n                    statementNodes.Insert( 0, statement );\n                }\n            }\n            return statementNodes;\n        }\n        private static List<StatementSyntax> OrderDeclarations( List<StatementSyntax> cSharpStatements ) {\n            List<LocalDeclarationStatementSyntax> allDeclarations = cSharpStatements.SelectMany( s => s.DescendantNodesAndSelf().OfType<LocalDeclarationStatementSyntax>() ).ToList();\n            for ( int index = 0; index < cSharpStatements.Count; index++ ) {\n                cSharpStatements[index] = cSharpStatements[index].ReplaceNodes( allDeclarations, ( node, syntaxNode ) => SyntaxFactory.EmptyStatement() );\n            }\n            cSharpStatements.InsertRange( 0, allDeclarations );\n            return cSharpStatements;\n        }\n        private List<StatementSyntax> ConvertStatements( IEnumerable<IStatementNode> statements ) {\n            List<CSharpSyntaxNode> nodes = statements.SelectMany( x => x.Accept( this ) ).ToList();\n            return nodes.OfType<StatementSyntax>().ToList();\n        }\n        private IEnumerable<ParameterSyntax> CreaterParameter( IEnumerable<AutoitParameter> parameters, IContextService context ) {\n            return parameters.Select(\n                p => {\n                    ParameterSyntax parameter = SyntaxFactory.Parameter( SyntaxFactory.Identifier( context.GetVariableName( p.ParameterName.Token.Value.StringValue ) ) ).WithType( SyntaxFactory.IdentifierName( typeof (Variant).Name ) );\n                    if ( p.DefaultValue != null ) {\n                        parameter = parameter.WithDefault( SyntaxFactory.EqualsValueClause( SyntaxFactory.LiteralExpression( SyntaxKind.NullLiteralExpression ) ) );\n                    }\n                    if ( p.IsByRef ) {\n                        parameter = parameter.WithModifiers( new SyntaxTokenList().Add( SyntaxFactory.Token( SyntaxKind.RefKeyword ) ) );\n                    }\n                    return parameter;\n                } );\n        }\n        private IAutoitStatementConverter<T, StatementSyntax> GetConverter<T>() where T : IStatementNode {\n            var converter = _injectionService.Inject<IAutoitStatementConverter<T, StatementSyntax>>();\n            return converter;\n        }\n        private static NamespaceDeclarationSyntax RemoveEmptyStatements( NamespaceDeclarationSyntax finalScript ) {\n            List<EmptyStatementSyntax> emptyStatements = finalScript.DescendantNodes().OfType<EmptyStatementSyntax>().Where( x => x.Parent.GetType() != typeof (LabeledStatementSyntax) ).ToList();\n            finalScript = finalScript.RemoveNodes( emptyStatements, SyntaxRemoveOptions.KeepEndOfLine );\n            return finalScript;\n        }\n        private static NamespaceDeclarationSyntax FixByReferenceCalls( NamespaceDeclarationSyntax finalScript, SyntaxList<MemberDeclarationSyntax> memberList ) {\n            var toReplace = new Dictionary<ArgumentSyntax, ArgumentSyntax>();\n            IEnumerable<ArgumentSyntax> argumentSyntaxs = finalScript.DescendantNodes().OfType<ArgumentSyntax>();\n", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "length": 861, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "a2ce4aeed86faf7c78539925675910ecdf08f4ca9f5603ee"}
{"input": "", "context": "\"\"\"Tests for items views.\"\"\"\nimport json\nfrom datetime import datetime\nimport ddt\nfrom mock import patch\nfrom pytz import UTC\nfrom webob import Response\nfrom django.http import Http404\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.core.urlresolvers import reverse\nfrom contentstore.utils import reverse_usage_url\nfrom contentstore.views.preview import StudioUserService\nfrom contentstore.views.component import (\n    component_handler, get_component_templates\n)\nfrom contentstore.tests.utils import CourseTestCase\nfrom student.tests.factories import UserFactory\nfrom xmodule.capa_module import CapaDescriptor\nfrom xmodule.modulestore import PublishState\nfrom xmodule.x_module import STUDIO_VIEW, STUDENT_VIEW\nfrom xblock.exceptions import NoSuchHandlerError\nfrom opaque_keys.edx.keys import UsageKey, CourseKey\nfrom opaque_keys.edx.locations import Location\nfrom xmodule.partitions.partitions import Group, UserPartition\nclass ItemTest(CourseTestCase):\n    \"\"\" Base test class for create, save, and delete \"\"\"\n    def setUp(self):\n        super(ItemTest, self).setUp()\n        self.course_key = self.course.id\n        self.usage_key = self.course.location\n    def get_item_from_modulestore(self, usage_key, verify_is_draft=False):\n        \"\"\"\n        Get the item referenced by the UsageKey from the modulestore\n        \"\"\"\n        item = self.store.get_item(usage_key)\n        if verify_is_draft:\n            self.assertTrue(getattr(item, 'is_draft', False))\n        return item\n    def response_usage_key(self, response):\n        \"\"\"\n        Get the UsageKey from the response payload and verify that the status_code was 200.\n        :param response:\n        \"\"\"\n        parsed = json.loads(response.content)\n        self.assertEqual(response.status_code, 200)\n        key = UsageKey.from_string(parsed['locator'])\n        if key.course_key.run is None:\n            key = key.map_into_course(CourseKey.from_string(parsed['courseKey']))\n        return key\n    def create_xblock(self, parent_usage_key=None, display_name=None, category=None, boilerplate=None):\n        data = {\n            'parent_locator': unicode(self.usage_key) if parent_usage_key is None else unicode(parent_usage_key),\n            'category': category\n        }\n        if display_name is not None:\n            data['display_name'] = display_name\n        if boilerplate is not None:\n            data['boilerplate'] = boilerplate\n        return self.client.ajax_post(reverse('contentstore.views.xblock_handler'), json.dumps(data))\n    def _create_vertical(self, parent_usage_key=None):\n        \"\"\"\n        Creates a vertical, returning its UsageKey.\n        \"\"\"\n        resp = self.create_xblock(category='vertical', parent_usage_key=parent_usage_key)\n        self.assertEqual(resp.status_code, 200)\n        return self.response_usage_key(resp)\nclass GetItem(ItemTest):\n    \"\"\"Tests for '/xblock' GET url.\"\"\"\n    def _get_container_preview(self, usage_key):\n        \"\"\"\n        Returns the HTML and resources required for the xblock at the specified UsageKey\n        \"\"\"\n        preview_url = reverse_usage_url(\"xblock_view_handler\", usage_key, {'view_name': 'container_preview'})\n        resp = self.client.get(preview_url, HTTP_ACCEPT='application/json')\n        self.assertEqual(resp.status_code, 200)\n        resp_content = json.loads(resp.content)\n        html = resp_content['html']\n        self.assertTrue(html)\n        resources = resp_content['resources']\n        self.assertIsNotNone(resources)\n        return html, resources\n    def test_get_vertical(self):\n        # Add a vertical\n        resp = self.create_xblock(category='vertical')\n        usage_key = self.response_usage_key(resp)\n        # Retrieve it\n        resp = self.client.get(reverse_usage_url('xblock_handler', usage_key))\n        self.assertEqual(resp.status_code, 200)\n    def test_get_empty_container_fragment(self):\n        root_usage_key = self._create_vertical()\n        html, __ = self._get_container_preview(root_usage_key)\n        # Verify that the Studio wrapper is not added\n        self.assertNotIn('wrapper-xblock', html)\n        # Verify that the header and article tags are still added\n        self.assertIn('<header class=\"xblock-header xblock-header-vertical\">', html)\n        self.assertIn('<article class=\"xblock-render\">', html)\n    def test_get_container_fragment(self):\n        root_usage_key = self._create_vertical()\n        # Add a problem beneath a child vertical\n        child_vertical_usage_key = self._create_vertical(parent_usage_key=root_usage_key)\n        resp = self.create_xblock(parent_usage_key=child_vertical_usage_key, category='problem', boilerplate='multiplechoice.yaml')\n        self.assertEqual(resp.status_code, 200)\n        # Get the preview HTML\n        html, __ = self._get_container_preview(root_usage_key)\n        # Verify that the Studio nesting wrapper has been added\n        self.assertIn('level-nesting', html)\n        self.assertIn('<header class=\"xblock-header xblock-header-vertical\">', html)\n        self.assertIn('<article class=\"xblock-render\">', html)\n        # Verify that the Studio element wrapper has been added\n        self.assertIn('level-element', html)\n    def test_get_container_nested_container_fragment(self):\n        \"\"\"\n        Test the case of the container page containing a link to another container page.\n        \"\"\"\n        # Add a wrapper with child beneath a child vertical\n        root_usage_key = self._create_vertical()\n        resp = self.create_xblock(parent_usage_key=root_usage_key, category=\"wrapper\")\n        self.assertEqual(resp.status_code, 200)\n        wrapper_usage_key = self.response_usage_key(resp)\n        resp = self.create_xblock(parent_usage_key=wrapper_usage_key, category='problem', boilerplate='multiplechoice.yaml')\n        self.assertEqual(resp.status_code, 200)\n        # Get the preview HTML and verify the View -> link is present.\n        html, __ = self._get_container_preview(root_usage_key)\n        self.assertIn('wrapper-xblock', html)\n        self.assertRegexpMatches(\n            html,\n            # The instance of the wrapper class will have an auto-generated ID. Allow any\n            # characters after wrapper.\n            (r'\"/container/i4x://MITx/999/wrapper/\\w+\" class=\"action-button\">\\s*'\n             '<span class=\"action-button-text\">View</span>')\n        )\n    def test_split_test(self):\n        \"\"\"\n        Test that a split_test module renders all of its children in Studio.\n        \"\"\"\n        root_usage_key = self._create_vertical()\n        resp = self.create_xblock(category='split_test', parent_usage_key=root_usage_key)\n        split_test_usage_key = self.response_usage_key(resp)\n        resp = self.create_xblock(parent_usage_key=split_test_usage_key, category='html', boilerplate='announcement.yaml')\n        self.assertEqual(resp.status_code, 200)\n        resp = self.create_xblock(parent_usage_key=split_test_usage_key, category='html', boilerplate='zooming_image.yaml')\n        self.assertEqual(resp.status_code, 200)\n        html, __ = self._get_container_preview(split_test_usage_key)\n        self.assertIn('Announcement', html)\n        self.assertIn('Zooming', html)\nclass DeleteItem(ItemTest):\n    \"\"\"Tests for '/xblock' DELETE url.\"\"\"\n    def test_delete_static_page(self):\n        # Add static tab\n        resp = self.create_xblock(category='static_tab')\n        usage_key = self.response_usage_key(resp)\n        # Now delete it. There was a bug that the delete was failing (static tabs do not exist in draft modulestore).\n        resp = self.client.delete(reverse_usage_url('xblock_handler', usage_key))\n        self.assertEqual(resp.status_code, 204)\nclass TestCreateItem(ItemTest):\n    \"\"\"\n    Test the create_item handler thoroughly\n    \"\"\"\n    def test_create_nicely(self):\n        \"\"\"\n        Try the straightforward use cases\n        \"\"\"\n        # create a chapter\n        display_name = 'Nicely created'\n        resp = self.create_xblock(display_name=display_name, category='chapter')\n        # get the new item and check its category and display_name\n        chap_usage_key = self.response_usage_key(resp)\n        new_obj = self.get_item_from_modulestore(chap_usage_key)\n        self.assertEqual(new_obj.scope_ids.block_type, 'chapter')\n        self.assertEqual(new_obj.display_name, display_name)\n        self.assertEqual(new_obj.location.org, self.course.location.org)\n        self.assertEqual(new_obj.location.course, self.course.location.course)\n        # get the course and ensure it now points to this one\n        course = self.get_item_from_modulestore(self.usage_key)\n        self.assertIn(chap_usage_key, course.children)\n        # use default display name\n        resp = self.create_xblock(parent_usage_key=chap_usage_key, category='vertical')\n        vert_usage_key = self.response_usage_key(resp)\n        # create problem w/ boilerplate\n        template_id = 'multiplechoice.yaml'\n        resp = self.create_xblock(\n            parent_usage_key=vert_usage_key,\n            category='problem',\n            boilerplate=template_id\n        )\n        prob_usage_key = self.response_usage_key(resp)\n        problem = self.get_item_from_modulestore(prob_usage_key, verify_is_draft=True)\n        # check against the template\n        template = CapaDescriptor.get_template(template_id)\n        self.assertEqual(problem.data, template['data'])\n        self.assertEqual(problem.display_name, template['metadata']['display_name'])\n        self.assertEqual(problem.markdown, template['metadata']['markdown'])\n    def test_create_item_negative(self):\n        \"\"\"\n        Negative tests for create_item\n        \"\"\"\n        # non-existent boilerplate: creates a default\n        resp = self.create_xblock(category='problem', boilerplate='nosuchboilerplate.yaml')\n        self.assertEqual(resp.status_code, 200)\n    def test_create_with_future_date(self):\n        self.assertEqual(self.course.start, datetime(2030, 1, 1, tzinfo=UTC))\n        resp = self.create_xblock(category='chapter')\n        usage_key = self.response_usage_key(resp)\n        obj = self.get_item_from_modulestore(usage_key)\n        self.assertEqual(obj.start, datetime(2030, 1, 1, tzinfo=UTC))\n    def test_static_tabs_initialization(self):\n        \"\"\"\n        Test that static tab display names are not being initialized as None.\n        \"\"\"\n        # Add a new static tab with no explicit name\n        resp = self.create_xblock(category='static_tab')\n        usage_key = self.response_usage_key(resp)\n        # Check that its name is not None\n        new_tab = self.get_item_from_modulestore(usage_key)\n        self.assertEquals(new_tab.display_name, 'Empty') \nclass TestDuplicateItem(ItemTest):\n    \"\"\"\n    Test the duplicate method.\n    \"\"\"\n    def setUp(self):\n        \"\"\" Creates the test course structure and a few components to 'duplicate'. \"\"\"\n        super(TestDuplicateItem, self).setUp()\n        # Create a parent chapter (for testing children of children).\n        resp = self.create_xblock(parent_usage_key=self.usage_key, category='chapter')\n        self.chapter_usage_key = self.response_usage_key(resp)\n        # create a sequential containing a problem and an html component\n        resp = self.create_xblock(parent_usage_key=self.chapter_usage_key, category='sequential')\n        self.seq_usage_key = self.response_usage_key(resp)\n        # create problem and an html component\n        resp = self.create_xblock(parent_usage_key=self.seq_usage_key, category='problem', boilerplate='multiplechoice.yaml')\n        self.problem_usage_key = self.response_usage_key(resp)\n        resp = self.create_xblock(parent_usage_key=self.seq_usage_key, category='html')\n        self.html_usage_key = self.response_usage_key(resp)\n        # Create a second sequential just (testing children of children)\n        self.create_xblock(parent_usage_key=self.chapter_usage_key, category='sequential2')\n    def test_duplicate_equality(self):\n        \"\"\"\n        Tests that a duplicated xblock is identical to the original,\n        except for location and display name.\n        \"\"\"\n        def duplicate_and_verify(source_usage_key, parent_usage_key):\n            usage_key = self._duplicate_item(parent_usage_key, source_usage_key)\n            self.assertTrue(check_equality(source_usage_key, usage_key), \"Duplicated item differs from original\")\n        def check_equality(source_usage_key, duplicate_usage_key):\n            original_item = self.get_item_from_modulestore(source_usage_key)\n            duplicated_item = self.get_item_from_modulestore(duplicate_usage_key)\n            self.assertNotEqual(\n                original_item.location,\n                duplicated_item.location,\n                \"Location of duplicate should be different from original\"\n            )\n            # Set the location and display name to be the same so we can make sure the rest of the duplicate is equal.\n            duplicated_item.location = original_item.location\n            duplicated_item.display_name = original_item.display_name\n            # Children will also be duplicated, so for the purposes of testing equality, we will set\n            # the children to the original after recursively checking the children.\n            if original_item.has_children:\n                self.assertEqual(\n                    len(original_item.children),\n                    len(duplicated_item.children),\n                    \"Duplicated item differs in number of children\"\n                )\n                for i in xrange(len(original_item.children)):\n                    if not check_equality(original_item.children[i], duplicated_item.children[i]):\n                        return False\n                duplicated_item.children = original_item.children\n            return original_item == duplicated_item\n        duplicate_and_verify(self.problem_usage_key, self.seq_usage_key)\n        duplicate_and_verify(self.html_usage_key, self.seq_usage_key)\n        duplicate_and_verify(self.seq_usage_key, self.chapter_usage_key)\n        duplicate_and_verify(self.chapter_usage_key, self.usage_key)\n    def test_ordering(self):\n        \"\"\"\n        Tests the a duplicated xblock appears immediately after its source\n        (if duplicate and source share the same parent), else at the\n        end of the children of the parent.\n        \"\"\"\n        def verify_order(source_usage_key, parent_usage_key, source_position=None):\n            usage_key = self._duplicate_item(parent_usage_key, source_usage_key)\n            parent = self.get_item_from_modulestore(parent_usage_key)\n            children = parent.children\n            if source_position is None:\n                self.assertFalse(source_usage_key in children, 'source item not expected in children array')\n                self.assertEqual(\n                    children[len(children) - 1],\n                    usage_key,\n                    \"duplicated item not at end\"\n                )\n            else:\n                self.assertEqual(\n                    children[source_position],\n                    source_usage_key,\n                    \"source item at wrong position\"\n                )\n                self.assertEqual(\n                    children[source_position + 1],\n                    usage_key,\n                    \"duplicated item not ordered after source item\"\n                )\n        verify_order(self.problem_usage_key, self.seq_usage_key, 0)\n        # 2 because duplicate of problem should be located before.\n        verify_order(self.html_usage_key, self.seq_usage_key, 2)\n        verify_order(self.seq_usage_key, self.chapter_usage_key, 0)\n        # Test duplicating something into a location that is not the parent of the original item.\n        # Duplicated item should appear at the end.\n        verify_order(self.html_usage_key, self.usage_key)\n    def test_display_name(self):\n        \"\"\"\n        Tests the expected display name for the duplicated xblock.\n        \"\"\"\n        def verify_name(source_usage_key, parent_usage_key, expected_name, display_name=None):\n            usage_key = self._duplicate_item(parent_usage_key, source_usage_key, display_name)\n            duplicated_item = self.get_item_from_modulestore(usage_key)\n            self.assertEqual(duplicated_item.display_name, expected_name)\n            return usage_key\n        # Display name comes from template.\n        dupe_usage_key = verify_name(self.problem_usage_key, self.seq_usage_key, \"Duplicate of 'Multiple Choice'\")\n        # Test dupe of dupe.\n        verify_name(dupe_usage_key, self.seq_usage_key, \"Duplicate of 'Duplicate of 'Multiple Choice''\")\n        # Uses default display_name of 'Text' from HTML component.\n        verify_name(self.html_usage_key, self.seq_usage_key, \"Duplicate of 'Text'\")\n        # The sequence does not have a display_name set, so category is shown.\n        verify_name(self.seq_usage_key, self.chapter_usage_key, \"Duplicate of sequential\")\n        # Now send a custom display name for the duplicate.\n        verify_name(self.seq_usage_key, self.chapter_usage_key, \"customized name\", display_name=\"customized name\")\n    def _duplicate_item(self, parent_usage_key, source_usage_key, display_name=None):\n        data = {\n            'parent_locator': unicode(parent_usage_key),\n            'duplicate_source_locator': unicode(source_usage_key)\n        }\n        if display_name is not None:\n            data['display_name'] = display_name\n        resp = self.client.ajax_post(reverse('contentstore.views.xblock_handler'), json.dumps(data))\n        return self.response_usage_key(resp)\nclass TestEditItem(ItemTest):\n    \"\"\"\n    Test xblock update.\n    \"\"\"\n    def setUp(self):\n        \"\"\" Creates the test course structure and a couple problems to 'edit'. \"\"\"\n        super(TestEditItem, self).setUp()\n        # create a chapter\n        display_name = 'chapter created'\n        resp = self.create_xblock(display_name=display_name, category='chapter')\n        chap_usage_key = self.response_usage_key(resp)\n        resp = self.create_xblock(parent_usage_key=chap_usage_key, category='sequential')\n        self.seq_usage_key = self.response_usage_key(resp)\n        self.seq_update_url = reverse_usage_url(\"xblock_handler\", self.seq_usage_key)\n        # create problem w/ boilerplate\n        template_id = 'multiplechoice.yaml'\n        resp = self.create_xblock(parent_usage_key=self.seq_usage_key, category='problem', boilerplate=template_id)\n        self.problem_usage_key = self.response_usage_key(resp)\n        self.problem_update_url = reverse_usage_url(\"xblock_handler\", self.problem_usage_key)\n        self.course_update_url = reverse_usage_url(\"xblock_handler\", self.usage_key)\n    def verify_publish_state(self, usage_key, expected_publish_state):\n        \"\"\"\n        Helper method that gets the item from the module store and verifies that the publish state is as expected.\n        Returns the item corresponding to the given usage_key.\n        \"\"\"\n        item = self.get_item_from_modulestore(\n            usage_key,\n            (expected_publish_state == PublishState.private) or (expected_publish_state == PublishState.draft)\n        )\n        self.assertEqual(expected_publish_state, self.store.compute_publish_state(item))\n        return item\n    def test_delete_field(self):\n        \"\"\"\n        Sending null in for a field 'deletes' it\n        \"\"\"\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'metadata': {'rerandomize': 'onreset'}}\n        )\n        problem = self.get_item_from_modulestore(self.problem_usage_key, verify_is_draft=True)\n        self.assertEqual(problem.rerandomize, 'onreset')\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'metadata': {'rerandomize': None}}\n        )\n        problem = self.get_item_from_modulestore(self.problem_usage_key, verify_is_draft=True)\n        self.assertEqual(problem.rerandomize, 'never')\n    def test_null_field(self):\n        \"\"\"\n        Sending null in for a field 'deletes' it\n        \"\"\"\n        problem = self.get_item_from_modulestore(self.problem_usage_key, verify_is_draft=True)\n        self.assertIsNotNone(problem.markdown)\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'nullout': ['markdown']}\n        )\n        problem = self.get_item_from_modulestore(self.problem_usage_key, verify_is_draft=True)\n        self.assertIsNone(problem.markdown)\n    def test_date_fields(self):\n        \"\"\"\n        Test setting due & start dates on sequential\n        \"\"\"\n        sequential = self.get_item_from_modulestore(self.seq_usage_key)\n        self.assertIsNone(sequential.due)\n        self.client.ajax_post(\n            self.seq_update_url,\n            data={'metadata': {'due': '2010-11-22T04:00Z'}}\n        )\n        sequential = self.get_item_from_modulestore(self.seq_usage_key)\n        self.assertEqual(sequential.due, datetime(2010, 11, 22, 4, 0, tzinfo=UTC))\n        self.client.ajax_post(\n            self.seq_update_url,\n            data={'metadata': {'start': '2010-09-12T14:00Z'}}\n        )\n        sequential = self.get_item_from_modulestore(self.seq_usage_key)\n        self.assertEqual(sequential.due, datetime(2010, 11, 22, 4, 0, tzinfo=UTC))\n        self.assertEqual(sequential.start, datetime(2010, 9, 12, 14, 0, tzinfo=UTC))\n    def test_delete_child(self):\n        \"\"\"\n        Test deleting a child.\n        \"\"\"\n        # Create 2 children of main course.\n        resp_1 = self.create_xblock(display_name='child 1', category='chapter')\n        resp_2 = self.create_xblock(display_name='child 2', category='chapter')\n        chapter1_usage_key = self.response_usage_key(resp_1)\n        chapter2_usage_key = self.response_usage_key(resp_2)\n        course = self.get_item_from_modulestore(self.usage_key)\n        self.assertIn(chapter1_usage_key, course.children)\n        self.assertIn(chapter2_usage_key, course.children)\n        # Remove one child from the course.\n        resp = self.client.ajax_post(\n            self.course_update_url,\n            data={'children': [unicode(chapter2_usage_key)]}\n        )\n        self.assertEqual(resp.status_code, 200)\n        # Verify that the child is removed.\n        course = self.get_item_from_modulestore(self.usage_key)\n        self.assertNotIn(chapter1_usage_key, course.children)\n        self.assertIn(chapter2_usage_key, course.children)\n    def test_reorder_children(self):\n        \"\"\"\n        Test reordering children that can be in the draft store.\n        \"\"\"\n        # Create 2 child units and re-order them. There was a bug about @draft getting added\n        # to the IDs.\n        unit_1_resp = self.create_xblock(parent_usage_key=self.seq_usage_key, category='vertical')\n        unit_2_resp = self.create_xblock(parent_usage_key=self.seq_usage_key, category='vertical')\n        unit1_usage_key = self.response_usage_key(unit_1_resp)\n        unit2_usage_key = self.response_usage_key(unit_2_resp)\n        # The sequential already has a child defined in the setUp (a problem).\n        # Children must be on the sequential to reproduce the original bug,\n        # as it is important that the parent (sequential) NOT be in the draft store.\n        children = self.get_item_from_modulestore(self.seq_usage_key).children\n        self.assertEqual(unit1_usage_key, children[1])\n        self.assertEqual(unit2_usage_key, children[2])\n        resp = self.client.ajax_post(\n            self.seq_update_url,\n            data={'children': [unicode(self.problem_usage_key), unicode(unit2_usage_key), unicode(unit1_usage_key)]}\n        )\n        self.assertEqual(resp.status_code, 200)\n        children = self.get_item_from_modulestore(self.seq_usage_key).children\n        self.assertEqual(self.problem_usage_key, children[0])\n        self.assertEqual(unit1_usage_key, children[2])\n        self.assertEqual(unit2_usage_key, children[1])\n    def test_make_public(self):\n        \"\"\" Test making a private problem public (publishing it). \"\"\"\n        # When the problem is first created, it is only in draft (because of its category).\n        self.verify_publish_state(self.problem_usage_key, PublishState.private)\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'publish': 'make_public'}\n        )\n        self.verify_publish_state(self.problem_usage_key, PublishState.public)\n    def test_make_private(self):\n        \"\"\" Test making a public problem private (un-publishing it). \"\"\"\n        # Make problem public.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'publish': 'make_public'}\n        )\n        self.verify_publish_state(self.problem_usage_key, PublishState.public)\n        # Now make it private\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'publish': 'make_private'}\n        )\n        self.verify_publish_state(self.problem_usage_key, PublishState.private)\n    def test_make_draft(self):\n        \"\"\" Test creating a draft version of a public problem. \"\"\"\n        # Make problem public.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'publish': 'make_public'}\n        )\n        published = self.verify_publish_state(self.problem_usage_key, PublishState.public)\n        # Now make it draft, which means both versions will exist.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'publish': 'create_draft'}\n        )\n        self.verify_publish_state(self.problem_usage_key, PublishState.draft)\n        # Update the draft version and check that published is different.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'metadata': {'due': '2077-10-10T04:00Z'}}\n        )\n        updated_draft = self.get_item_from_modulestore(self.problem_usage_key, verify_is_draft=True)\n        self.assertEqual(updated_draft.due, datetime(2077, 10, 10, 4, 0, tzinfo=UTC))\n        self.assertIsNone(published.due)\n    def test_make_public_with_update(self):\n        \"\"\" Update a problem and make it public at the same time. \"\"\"\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={\n                'metadata': {'due': '2077-10-10T04:00Z'},\n                'publish': 'make_public'\n            }\n        )\n        published = self.get_item_from_modulestore(self.problem_usage_key)\n        self.assertEqual(published.due, datetime(2077, 10, 10, 4, 0, tzinfo=UTC))\n    def test_make_private_with_update(self):\n        \"\"\" Make a problem private and update it at the same time. \"\"\"\n        # Make problem public.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'publish': 'make_public'}\n        )\n        self.verify_publish_state(self.problem_usage_key, PublishState.public)\n        # Make problem private and update.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={\n                'metadata': {'due': '2077-10-10T04:00Z'},\n                'publish': 'make_private'\n            }\n        )\n        draft = self.verify_publish_state(self.problem_usage_key, PublishState.private)\n        self.assertEqual(draft.due, datetime(2077, 10, 10, 4, 0, tzinfo=UTC))\n    def test_create_draft_with_update(self):\n        \"\"\" Create a draft and update it at the same time. \"\"\"\n        # Make problem public.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'publish': 'make_public'}\n        )\n        published = self.verify_publish_state(self.problem_usage_key, PublishState.public)\n        # Now make it draft, which means both versions will exist.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={\n                'metadata': {'due': '2077-10-10T04:00Z'},\n                'publish': 'create_draft'\n            }\n        )\n        draft = self.get_item_from_modulestore(self.problem_usage_key, verify_is_draft=True)\n        self.assertEqual(draft.due, datetime(2077, 10, 10, 4, 0, tzinfo=UTC))\n        self.assertIsNone(published.due)\n    def test_create_draft_with_multiple_requests(self):\n        \"\"\"\n        Create a draft request returns already created version if it exists.\n        \"\"\"\n        # Make problem public.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'publish': 'make_public'}\n        )\n        self.verify_publish_state(self.problem_usage_key, PublishState.public)\n        # Now make it draft, which means both versions will exist.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={\n                'publish': 'create_draft'\n            }\n        )\n        draft_1 = self.verify_publish_state(self.problem_usage_key, PublishState.draft)\n        # Now check that when a user sends request to create a draft when there is already a draft version then\n        # user gets that already created draft instead of getting 'DuplicateItemError' exception.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={\n                'publish': 'create_draft'\n            }\n        )\n        draft_2 = self.verify_publish_state(self.problem_usage_key, PublishState.draft)\n        self.assertIsNotNone(draft_2)\n        self.assertEqual(draft_1, draft_2)\n    def test_make_private_with_multiple_requests(self):\n        \"\"\"\n        Make private requests gets proper response even if xmodule is already made private.\n        \"\"\"\n        # Make problem public.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'publish': 'make_public'}\n        )\n        self.assertIsNotNone(self.get_item_from_modulestore(self.problem_usage_key))\n        # Now make it private, and check that its version is private\n        resp = self.client.ajax_post(\n            self.problem_update_url,\n            data={\n                'publish': 'make_private'\n            }\n        )\n        self.assertEqual(resp.status_code, 200)\n        draft_1 = self.verify_publish_state(self.problem_usage_key, PublishState.private)\n        # Now check that when a user sends request to make it private when it already is private then\n        # user gets that private version instead of getting 'ItemNotFoundError' exception.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={\n                'publish': 'make_private'\n            }\n        )\n        self.assertEqual(resp.status_code, 200)\n        draft_2 = self.verify_publish_state(self.problem_usage_key, PublishState.private)\n        self.assertEqual(draft_1, draft_2)\n    def test_published_and_draft_contents_with_update(self):\n        \"\"\" Create a draft and publish it then modify the draft and check that published content is not modified \"\"\"\n        # Make problem public.\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={'publish': 'make_public'}\n        )\n        published = self.verify_publish_state(self.problem_usage_key, PublishState.public)\n        # Now make a draft\n        self.client.ajax_post(\n            self.problem_update_url,\n            data={\n                'id': unicode(self.problem_usage_key),\n                'metadata': {},\n                'data': \"<p>Problem content draft.</p>\",\n                'publish': 'create_draft'\n            }\n        )\n        # Both published and draft content should be different\n        draft = self.get_item_from_modulestore(self.problem_usage_key, verify_is_draft=True)\n        self.assertNotEqual(draft.data, published.data)\n        # Get problem by 'xblock_handler'\n        view_url = reverse_usage_url(\"xblock_view_handler\", self.problem_usage_key, {\"view_name\": STUDENT_VIEW})\n        resp = self.client.get(view_url, HTTP_ACCEPT='application/json')\n        self.assertEqual(resp.status_code, 200)\n        # Activate the editing view\n        view_url = reverse_usage_url(\"xblock_view_handler\", self.problem_usage_key, {\"view_name\": STUDIO_VIEW})\n        resp = self.client.get(view_url, HTTP_ACCEPT='application/json')\n        self.assertEqual(resp.status_code, 200)\n        # Both published and draft content should still be different\n        draft = self.get_item_from_modulestore(self.problem_usage_key, verify_is_draft=True)\n        self.assertNotEqual(draft.data, published.data)\n    def test_publish_states_of_nested_xblocks(self):\n        \"\"\" Test publishing of a unit page containing a nested xblock  \"\"\"\n        resp = self.create_xblock(parent_usage_key=self.seq_usage_key, display_name='Test Unit', category='vertical')\n        unit_usage_key = self.response_usage_key(resp)\n        resp = self.create_xblock(parent_usage_key=unit_usage_key, category='wrapper')\n        wrapper_usage_key = self.response_usage_key(resp)\n        resp = self.create_xblock(parent_usage_key=wrapper_usage_key, category='html')\n        html_usage_key = self.response_usage_key(resp)\n        # The unit and its children should be private initially\n        unit_update_url = reverse_usage_url('xblock_handler', unit_usage_key)\n        self.verify_publish_state(unit_usage_key, PublishState.private)\n        self.verify_publish_state(html_usage_key, PublishState.private)\n        # Make the unit public and verify that the problem is also made public\n        resp = self.client.ajax_post(\n            unit_update_url,\n            data={'publish': 'make_public'}\n        )\n        self.assertEqual(resp.status_code, 200)\n        self.verify_publish_state(unit_usage_key, PublishState.public)\n        self.verify_publish_state(html_usage_key, PublishState.public)\n        # Make a draft for the unit and verify that the problem also has a draft\n        resp = self.client.ajax_post(\n            unit_update_url,\n            data={\n                'id': unicode(unit_usage_key),\n                'metadata': {},\n                'publish': 'create_draft'\n            }\n        )\n        self.assertEqual(resp.status_code, 200)\n        self.verify_publish_state(unit_usage_key, PublishState.draft)\n        self.verify_publish_state(html_usage_key, PublishState.draft)\nclass TestEditSplitModule(ItemTest):\n    \"\"\"\n    Tests around editing instances of the split_test module.\n    \"\"\"\n    def setUp(self):\n        super(TestEditSplitModule, self).setUp()\n        self.course.user_partitions = [\n            UserPartition(\n                0, 'first_partition', 'First Partition',\n                [Group(\"0\", 'alpha'), Group(\"1\", 'beta')]\n            ),\n            UserPartition(\n                1, 'second_partition', 'Second Partition',\n                [Group(\"0\", 'Group 0'), Group(\"1\", 'Group 1'), Group(\"2\", 'Group 2')]\n            )\n        ]\n        self.store.update_item(self.course, self.user.id)\n        root_usage_key = self._create_vertical()\n        resp = self.create_xblock(category='split_test', parent_usage_key=root_usage_key)\n        self.split_test_usage_key = self.response_usage_key(resp)\n        self.split_test_update_url = reverse_usage_url(\"xblock_handler\", self.split_test_usage_key)\n        self.request_factory = RequestFactory()\n        self.request = self.request_factory.get('/dummy-url')\n        self.request.user = self.user\n    def _update_partition_id(self, partition_id):\n        \"\"\"\n        Helper method that sets the user_partition_id to the supplied value.\n        The updated split_test instance is returned.\n        \"\"\"\n        self.client.ajax_post(\n            self.split_test_update_url,\n            # Even though user_partition_id is Scope.content, it will get saved by the Studio editor as\n            # metadata. The code in item.py will update the field correctly, even though it is not the\n            # expected scope.\n            data={'metadata': {'user_partition_id': str(partition_id)}}\n        )\n        # Verify the partition_id was saved.\n        split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True)\n        self.assertEqual(partition_id, split_test.user_partition_id)\n        return split_test\n    def _assert_children(self, expected_number):\n        \"\"\"\n        Verifies the number of children of the split_test instance.\n        \"\"\"\n        split_test = self.get_item_from_modulestore(self.split_test_usage_key, True)\n        self.assertEqual(expected_number, len(split_test.children))\n        return split_test\n    def test_create_groups(self):\n        \"\"\"\n        Test that verticals are created for the configuration groups when\n        a spit test module is edited.\n        \"\"\"\n        split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True)\n        # Initially, no user_partition_id is set, and the split_test has no children.\n        self.assertEqual(-1, split_test.user_partition_id)\n        self.assertEqual(0, len(split_test.children))\n        # Set the user_partition_id to 0.\n        split_test = self._update_partition_id(0)\n        # Verify that child verticals have been set to match the groups\n        self.assertEqual(2, len(split_test.children))\n        vertical_0 = self.get_item_from_modulestore(split_test.children[0], verify_is_draft=True)\n        vertical_1 = self.get_item_from_modulestore(split_test.children[1], verify_is_draft=True)\n        self.assertEqual(\"vertical\", vertical_0.category)\n        self.assertEqual(\"vertical\", vertical_1.category)\n        self.assertEqual(\"alpha\", vertical_0.display_name)\n        self.assertEqual(\"beta\", vertical_1.display_name)\n        # Verify that the group_id_to_child mapping is correct.\n        self.assertEqual(2, len(split_test.group_id_to_child))\n        self.assertEqual(vertical_0.location, split_test.group_id_to_child['0'])\n        self.assertEqual(vertical_1.location, split_test.group_id_to_child['1'])\n    def test_change_user_partition_id(self):\n        \"\"\"\n        Test what happens when the user_partition_id is changed to a different groups\n        group configuration.\n        \"\"\"\n        # Set to first group configuration.\n", "answers": ["        split_test = self._update_partition_id(0)"], "length": 2752, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "b55c3cd64c946848d39da7e77c7364582b5e7ab71a545f58"}
{"input": "", "context": "using System;\nusing System.IO;\nusing System.Text;\nusing System.Collections;\n/*\n * $Id: TrueTypeFontUnicode.cs,v 1.7 2006/09/17 16:03:37 psoares33 Exp $\n * $Name:  $\n *\n * Copyright 2001, 2002 Paulo Soares\n *\n * The contents of this file are subject to the Mozilla Public License Version 1.1\n * (the \"License\"); you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the License.\n *\n * The Original Code is 'iText, a free JAVA-PDF library'.\n *\n * The Initial Developer of the Original Code is Bruno Lowagie. Portions created by\n * the Initial Developer are Copyright (C) 1999, 2000, 2001, 2002 by Bruno Lowagie.\n * All Rights Reserved.\n * Co-Developer of the code is Paulo Soares. Portions created by the Co-Developer\n * are Copyright (C) 2000, 2001, 2002 by Paulo Soares. All Rights Reserved.\n *\n * Contributor(s): all the names of the contributors are added in the source code\n * where applicable.\n *\n * Alternatively, the contents of this file may be used under the terms of the\n * LGPL license (the \"GNU LIBRARY GENERAL PUBLIC LICENSE\"), in which case the\n * provisions of LGPL are applicable instead of those above.  If you wish to\n * allow use of your version of this file only under the terms of the LGPL\n * License and not to allow others to use your version of this file under\n * the MPL, indicate your decision by deleting the provisions above and\n * replace them with the notice and other provisions required by the LGPL.\n * If you do not delete the provisions above, a recipient may use your version\n * of this file under either the MPL or the GNU LIBRARY GENERAL PUBLIC LICENSE.\n *\n * This library is free software; you can redistribute it and/or modify it\n * under the terms of the MPL as stated above or under the terms of the GNU\n * Library General Public License as published by the Free Software Foundation;\n * either version 2 of the License, or any later version.\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Library general Public License for more\n * details.\n *\n * If you didn't download this code from the following link, you should check if\n * you aren't using an obsolete version:\n * http://www.lowagie.com/iText/\n */\nnamespace iTextSharp.text.pdf {\n    /** Represents a True Type font with Unicode encoding. All the character\n     * in the font can be used directly by using the encoding Identity-H or\n     * Identity-V. This is the only way to represent some character sets such\n     * as Thai.\n     * @author  Paulo Soares (psoares@consiste.pt)\n     */\n    internal class TrueTypeFontUnicode : TrueTypeFont, IComparer {\n    \n        /** <CODE>true</CODE> if the encoding is vertical.\n         */    \n        bool vertical = false;\n        /** Creates a new TrueType font addressed by Unicode characters. The font\n         * will always be embedded.\n         * @param ttFile the location of the font on file. The file must end in '.ttf'.\n         * The modifiers after the name are ignored.\n         * @param enc the encoding to be applied to this font\n         * @param emb true if the font is to be embedded in the PDF\n         * @param ttfAfm the font as a <CODE>byte</CODE> array\n         * @throws DocumentException the font is invalid\n         * @throws IOException the font file could not be read\n         */\n        internal TrueTypeFontUnicode(string ttFile, string enc, bool emb, byte[] ttfAfm) {\n            string nameBase = GetBaseName(ttFile);\n            string ttcName = GetTTCName(nameBase);\n            if (nameBase.Length < ttFile.Length) {\n                style = ttFile.Substring(nameBase.Length);\n            }\n            encoding = enc;\n            embedded = emb;\n            fileName = ttcName;\n            ttcIndex = \"\";\n            if (ttcName.Length < nameBase.Length)\n                ttcIndex = nameBase.Substring(ttcName.Length + 1);\n            FontType = FONT_TYPE_TTUNI;\n            if ((fileName.ToLower().EndsWith(\".ttf\") || fileName.ToLower().EndsWith(\".otf\") || fileName.ToLower().EndsWith(\".ttc\")) && ((enc.Equals(IDENTITY_H) || enc.Equals(IDENTITY_V)) && emb)) {\n                Process(ttfAfm);\n                if (os_2.fsType == 2)\n                    throw new DocumentException(fileName + style + \" cannot be embedded due to licensing restrictions.\");\n                // Sivan\n                if ((cmap31 == null && !fontSpecific) || (cmap10 == null && fontSpecific))\n                    directTextToByte=true;\n                    //throw new DocumentException(fileName + \" \" + style + \" does not contain an usable cmap.\");\n                if (fontSpecific) {\n                    fontSpecific = false;\n                    String tempEncoding = encoding;\n                    encoding = \"\";\n                    CreateEncoding();\n                    encoding = tempEncoding;\n                    fontSpecific = true;\n                }\n            }\n            else\n                throw new DocumentException(fileName + \" \" + style + \" is not a TTF font file.\");\n            vertical = enc.EndsWith(\"V\");\n        }\n    \n        /**\n         * Gets the width of a <CODE>string</CODE> in normalized 1000 units.\n         * @param text the <CODE>string</CODE> to get the witdth of\n         * @return the width in normalized 1000 units\n         */\n        public override int GetWidth(string text) {\n            if (vertical)\n                return text.Length * 1000;\n            int total = 0;\n            if (fontSpecific) {\n                char[] cc = text.ToCharArray();\n                int len = cc.Length;\n                for (int k = 0; k < len; ++k) {\n                    char c = cc[k];\n                    if ((c & 0xff00) == 0 || (c & 0xff00) == 0xf000)\n                        total += GetRawWidth(c & 0xff, null);\n                }\n            }\n            else {\n                int len = text.Length;\n                for (int k = 0; k < len; ++k)\n                    total += GetRawWidth(text[k], encoding);\n            }\n            return total;\n        }\n        /** Creates a ToUnicode CMap to allow copy and paste from Acrobat.\n         * @param metrics metrics[0] contains the glyph index and metrics[2]\n         * contains the Unicode code\n         * @throws DocumentException on error\n         * @return the stream representing this CMap or <CODE>null</CODE>\n         */    \n        private PdfStream GetToUnicode(Object[] metrics) {\n            if (metrics.Length == 0)\n                return null;\n            StringBuilder buf = new StringBuilder(\n                \"/CIDInit /ProcSet findresource begin\\n\" +\n                \"12 dict begin\\n\" +\n                \"begincmap\\n\" +\n                \"/CIDSystemInfo\\n\" +\n                \"<< /Registry (Adobe)\\n\" +\n                \"/Ordering (UCS)\\n\" +\n                \"/Supplement 0\\n\" +\n                \">> def\\n\" +\n                \"/CMapName /Adobe-Identity-UCS def\\n\" +\n                \"/CMapType 2 def\\n\" +\n                \"1 begincodespacerange\\n\" +\n                \"<0000><FFFF>\\n\" +\n                \"endcodespacerange\\n\");\n            int size = 0;\n            for (int k = 0; k < metrics.Length; ++k) {\n                if (size == 0) {\n                    if (k != 0) {\n                        buf.Append(\"endbfrange\\n\");\n                    }\n                    size = Math.Min(100, metrics.Length - k);\n                    buf.Append(size).Append(\" beginbfrange\\n\");\n                }\n                --size;\n                int[] metric = (int[])metrics[k];\n                string fromTo = ToHex(metric[0]);\n                buf.Append(fromTo).Append(fromTo).Append(ToHex(metric[2])).Append('\\n');\n            }\n            buf.Append(\n                \"endbfrange\\n\" +\n                \"endcmap\\n\" +\n                \"CMapName currentdict /CMap defineresource pop\\n\" +\n                \"end end\\n\");\n            string s = buf.ToString();\n            PdfStream stream = new PdfStream(PdfEncodings.ConvertToBytes(s, null));\n            stream.FlateCompress();\n            return stream;\n        }\n    \n        /** Gets an hex string in the format \"&lt;HHHH&gt;\".\n         * @param n the number\n         * @return the hex string\n         */    \n        internal static string ToHex(int n) {\n            string s = System.Convert.ToString(n, 16);\n            return \"<0000\".Substring(0, 5 - s.Length) + s + \">\";\n        }\n    \n        /** Generates the CIDFontTyte2 dictionary.\n         * @param fontDescriptor the indirect reference to the font descriptor\n         * @param subsetPrefix the subset prefix\n         * @param metrics the horizontal width metrics\n         * @return a stream\n         */    \n        private PdfDictionary GetCIDFontType2(PdfIndirectReference fontDescriptor, string subsetPrefix, Object[] metrics) {\n            PdfDictionary dic = new PdfDictionary(PdfName.FONT);\n            // sivan; cff\n            if (cff) {\n                dic.Put(PdfName.SUBTYPE, PdfName.CIDFONTTYPE0);\n                dic.Put(PdfName.BASEFONT, new PdfName(subsetPrefix + fontName+\"-\"+encoding));\n            }\n            else {\n                dic.Put(PdfName.SUBTYPE, PdfName.CIDFONTTYPE2);\n                dic.Put(PdfName.BASEFONT, new PdfName(subsetPrefix + fontName));\n            }\n            dic.Put(PdfName.FONTDESCRIPTOR, fontDescriptor);\n            if (!cff)\n                dic.Put(PdfName.CIDTOGIDMAP,PdfName.IDENTITY);\n            PdfDictionary cdic = new PdfDictionary();\n            cdic.Put(PdfName.REGISTRY, new PdfString(\"Adobe\"));\n            cdic.Put(PdfName.ORDERING, new PdfString(\"Identity\"));\n            cdic.Put(PdfName.SUPPLEMENT, new PdfNumber(0));\n            dic.Put(PdfName.CIDSYSTEMINFO, cdic);\n            if (!vertical) {\n                dic.Put(PdfName.DW, new PdfNumber(1000));\n                StringBuilder buf = new StringBuilder(\"[\");\n                int lastNumber = -10;\n                bool firstTime = true;\n                for (int k = 0; k < metrics.Length; ++k) {\n                    int[] metric = (int[])metrics[k];\n                    if (metric[1] == 1000)\n                        continue;\n                    int m = metric[0];\n                    if (m == lastNumber + 1) {\n                        buf.Append(' ').Append(metric[1]);\n                    }\n                    else {\n                        if (!firstTime) {\n                            buf.Append(']');\n                        }\n                        firstTime = false;\n                        buf.Append(m).Append('[').Append(metric[1]);\n                    }\n                    lastNumber = m;\n                }\n                if (buf.Length > 1) {\n                    buf.Append(\"]]\");\n                    dic.Put(PdfName.W, new PdfLiteral(buf.ToString()));\n                }\n            }\n            return dic;\n        }\n    \n        /** Generates the font dictionary.\n         * @param descendant the descendant dictionary\n         * @param subsetPrefix the subset prefix\n         * @param toUnicode the ToUnicode stream\n         * @return the stream\n         */    \n        private PdfDictionary GetFontBaseType(PdfIndirectReference descendant, string subsetPrefix, PdfIndirectReference toUnicode) {\n            PdfDictionary dic = new PdfDictionary(PdfName.FONT);\n            dic.Put(PdfName.SUBTYPE, PdfName.TYPE0);\n            // The PDF Reference manual advises to add -encoding to CID font names\n            if (cff)\n                dic.Put(PdfName.BASEFONT, new PdfName(subsetPrefix + fontName+\"-\"+encoding));\n            else\n                dic.Put(PdfName.BASEFONT, new PdfName(subsetPrefix + fontName));\n            dic.Put(PdfName.ENCODING, new PdfName(encoding));\n            dic.Put(PdfName.DESCENDANTFONTS, new PdfArray(descendant));\n            if (toUnicode != null)\n                dic.Put(PdfName.TOUNICODE, toUnicode);  \n            return dic;\n        }\n        /** The method used to sort the metrics array.\n         * @param o1 the first element\n         * @param o2 the second element\n         * @return the comparisation\n         */    \n        public int Compare(Object o1, Object o2) {\n            int m1 = ((int[])o1)[0];\n            int m2 = ((int[])o2)[0];\n            if (m1 < m2)\n                return -1;\n            if (m1 == m2)\n                return 0;\n            return 1;\n        }\n        /** Outputs to the writer the font dictionaries and streams.\n         * @param writer the writer for this document\n         * @param ref the font indirect reference\n         * @param parms several parameters that depend on the font type\n         * @throws IOException on error\n         * @throws DocumentException error in generating the object\n         */\n        internal override void WriteFont(PdfWriter writer, PdfIndirectReference piref, Object[] parms) {\n            Hashtable longTag = (Hashtable)parms[0];\n            AddRangeUni(longTag, true, subset);\n            ArrayList tmp = new ArrayList();\n", "answers": ["            foreach (object o in longTag.Values) {"], "length": 1490, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "caded4c1338faaf5978525a343ec76e66b5546a6a35088a6"}
{"input": "", "context": "/* -*- tab-width: 4 -*-\n *\n * Electric(tm) VLSI Design System\n *\n * File: CellChangeJobs.java\n *\n * Copyright (c) 2006 Sun Microsystems and Static Free Software\n *\n * Electric(tm) is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * Electric(tm) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Electric(tm); see the file COPYING.  If not, write to\n * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n * Boston, Mass 02111-1307, USA.\n */\npackage com.sun.electric.tool.user;\nimport com.sun.electric.database.IdMapper;\nimport com.sun.electric.database.ImmutableArcInst;\nimport com.sun.electric.database.geometry.EGraphics;\nimport com.sun.electric.database.geometry.EPoint;\nimport com.sun.electric.database.geometry.GenMath;\nimport com.sun.electric.database.geometry.Orientation;\nimport com.sun.electric.database.hierarchy.Cell;\nimport com.sun.electric.database.hierarchy.Export;\nimport com.sun.electric.database.hierarchy.Library;\nimport com.sun.electric.database.hierarchy.View;\nimport com.sun.electric.database.id.CellId;\nimport com.sun.electric.database.prototype.NodeProto;\nimport com.sun.electric.database.text.Name;\nimport com.sun.electric.database.topology.ArcInst;\nimport com.sun.electric.database.topology.Geometric;\nimport com.sun.electric.database.topology.NodeInst;\nimport com.sun.electric.database.topology.PortInst;\nimport com.sun.electric.database.variable.ElectricObject;\nimport com.sun.electric.database.variable.TextDescriptor;\nimport com.sun.electric.database.variable.UserInterface;\nimport com.sun.electric.technology.ArcProto;\nimport com.sun.electric.technology.technologies.Artwork;\nimport com.sun.electric.technology.technologies.Generic;\nimport com.sun.electric.tool.Job;\nimport com.sun.electric.tool.JobException;\nimport com.sun.electric.tool.user.ui.EditWindow;\nimport com.sun.electric.tool.user.ui.WindowContent;\nimport com.sun.electric.tool.user.ui.WindowFrame;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Point2D;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n/**\n * Class for Jobs that make changes to the cells.\n */\npublic class CellChangeJobs\n{\n\t// constructor, never used\n\tprivate CellChangeJobs() {}\n\t/****************************** DELETE A CELL ******************************/\n\t/**\n\t * Class to delete a cell in a new thread.\n\t */\n\tpublic static class DeleteCell extends Job\n\t{\n\t\tCell cell;\n\t\tpublic DeleteCell(Cell cell)\n\t\t{\n\t\t\tsuper(\"Delete \" + cell, User.getUserTool(), Job.Type.CHANGE, null, null, Job.Priority.USER);\n\t\t\tthis.cell = cell;\n\t\t\tstartJob();\n\t\t}\n\t\tpublic boolean doIt() throws JobException\n\t\t{\n\t\t\t// check cell usage once more\n\t\t\tif (cell.isInUse(\"delete\", false, true)) return false;\n\t\t\tcell.kill();\n\t\t\treturn true;\n\t\t}\n\t}\n\t/**\n\t * This class implement the command to delete a list of cells.\n\t */\n\tpublic static class DeleteManyCells extends Job\n\t{\n\t\tprivate List<Cell> cellsToDelete;\n\t\tpublic DeleteManyCells(List<Cell> cellsToDelete)\n\t\t{\n\t\t\tsuper(\"Delete Multiple Cells\", User.getUserTool(), Job.Type.CHANGE, null, null, Job.Priority.USER);\n\t\t\tthis.cellsToDelete = cellsToDelete;\n\t\t\tstartJob();\n\t\t}\n\t\tpublic boolean doIt() throws JobException\n\t\t{\n\t\t\t// iteratively delete, allowing cells in use to be deferred\n\t\t\tboolean didDelete = true;\n\t\t\twhile (didDelete)\n\t\t\t{\n\t\t\t\tdidDelete = false;\n\t\t\t\tfor (int i=0; i<cellsToDelete.size(); i++)\n\t\t\t\t{\n\t\t\t\t\tCell cell = cellsToDelete.get(i);\n\t\t\t\t\t// if the cell is in use, defer\n\t\t\t\t\tif (cell.isInUse(null, true, true)) continue;\n\t\t\t\t\t// cell not in use: remove it from the list and delete it\n\t\t\t\t\tcellsToDelete.remove(i);\n\t\t\t\t\ti--;\n\t\t\t\t\tSystem.out.println(\"Deleting \" + cell);\n\t\t\t\t\tcell.kill();\n\t\t\t\t\tdidDelete = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// warn about remaining cells that were in use\n\t\t\tfor(Cell cell : cellsToDelete)\n\t\t\t\tcell.isInUse(\"delete\", false, true);\n\t\t\treturn true;\n\t\t}\n\t\tpublic void terminateOK()\n\t\t{\n\t\t\tSystem.out.println(\"Deleted \" + cellsToDelete.size() + \" cells\");\n\t\t\tEditWindow.repaintAll();\n\t\t}\n\t}\n\t/****************************** RENAME CELLS ******************************/\n\t/**\n\t * Class to rename a cell in a new thread.\n\t */\n\tpublic static class RenameCell extends Job\n\t{\n\t\tprivate Cell cell;\n\t\tprivate String newName;\n\t\tprivate String newGroupCell;\n\t\tprivate IdMapper idMapper;\n\t\tpublic RenameCell(Cell cell, String newName, String newGroupCell)\n\t\t{\n\t\t\tsuper(\"Rename \" + cell, User.getUserTool(), Job.Type.CHANGE, null, null, Job.Priority.USER);\n\t\t\tthis.cell = cell;\n\t\t\tthis.newName = newName;\n\t\t\tthis.newGroupCell = newGroupCell;\n\t\t\tstartJob();\n\t\t}\n\t\tpublic boolean doIt() throws JobException\n\t\t{\n\t\t\tidMapper = cell.rename(newName, newGroupCell);\n\t\t\tfieldVariableChanged(\"idMapper\");\n\t\t\treturn true;\n\t\t}\n\t\tpublic void terminateOK()\n\t\t{\n\t\t\tUser.fixStaleCellReferences(idMapper);\n\t\t}\n\t}\n\t/**\n\t * Class to rename a cell in a new thread.\n\t */\n\tpublic static class DeleteCellGroup extends Job\n\t{\n\t\tList<Cell> cells;\n\t\tpublic DeleteCellGroup(Cell.CellGroup group)\n\t\t{\n\t\t\tsuper(\"Delete Cell Group\", User.getUserTool(), Job.Type.CHANGE, null, null, Job.Priority.USER);\n\t\t\tcells = new ArrayList<Cell>();\n\t\t\tfor(Iterator<Cell> it = group.getCells(); it.hasNext(); )\n\t\t\t{\n\t\t\t\tcells.add(it.next());\n\t\t\t}\n\t\t\tstartJob();\n\t\t}\n\t\tpublic boolean doIt() throws JobException\n\t\t{\n\t\t\tfor(Cell cell : cells)\n\t\t\t{\n\t\t\t\t// Doesn't check cells in the same group\n\t\t\t\t// check cell usage once more\n\t\t\t\tif (cell.isInUse(\"delete\", false, false))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Now real delete\n\t\t\tfor(Cell cell : cells)\n\t\t\t{\n\t\t\t\tcell.kill();\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\t/**\n\t * Class to rename a cell in a new thread.\n\t */\n\tpublic static class RenameCellGroup extends Job\n\t{\n\t\tCell cellInGroup;\n\t\tString newName;\n\t\tpublic RenameCellGroup(Cell cellInGroup, String newName)\n\t\t{\n\t\t\tsuper(\"Rename Cell Group\", User.getUserTool(), Job.Type.CHANGE, null, null, Job.Priority.USER);\n\t\t\tthis.cellInGroup = cellInGroup;\n\t\t\tthis.newName = newName;\n\t\t\tstartJob();\n\t\t}\n\t\tpublic boolean doIt() throws JobException\n\t\t{\n\t\t\t// see if all cells in the group have the same name\n\t\t\tboolean allSameName = true;\n\t\t\tString lastName = null;\n\t\t\tfor(Iterator<Cell> it = cellInGroup.getCellGroup().getCells(); it.hasNext(); )\n\t\t\t{\n\t\t\t\tString cellName = it.next().getName();\n\t\t\t\tif (lastName != null && !lastName.equals(cellName))\n\t\t\t\t{\n\t\t\t\t\tallSameName = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlastName = cellName;\n\t\t\t}\n\t\t\tList<Cell> cells = new ArrayList<Cell>();\n\t\t\tfor(Iterator<Cell> it = cellInGroup.getCellGroup().getCells(); it.hasNext(); )\n\t\t\t\tcells.add(it.next());\n\t\t\tString newGroupCell = null;\n\t\t\tfor(Cell cell : cells)\n\t\t\t{\n\t\t\t\tif (allSameName)\n\t\t\t\t{\n\t\t\t\t\tcell.rename(newName, newName);\n\t\t\t\t} else\n\t\t\t\t{\n\t\t\t\t\tif (newGroupCell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"Renaming is not possible because cells in group don't have same root name.\");\n\t\t\t\t\t\tSystem.out.println(\"'\" + newName + \"' was added as prefix.\");\n\t\t\t\t\t\tnewGroupCell = newName + cell.getName();\n\t\t\t\t\t}\n\t\t\t\t\tcell.rename(newName+cell.getName(), newGroupCell);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\t/****************************** SHOW CELLS GRAPHICALLY ******************************/\n\t/**\n\t * This class implement the command to make a graph of the cells.\n\t */\n\tpublic static class GraphCells extends Job\n\t{\n\t\tprivate static final double TEXTHEIGHT = 2;\n\t\tprivate Cell top;\n\t\tprivate Cell graphCell;\n\t\tprivate static class GraphNode\n\t\t{\n\t\t\tString    name;\n\t\t\tint       depth;\n\t\t\tint       clock;\n\t\t\tdouble    x, y;\n\t\t\tdouble    yoff;\n\t\t\tNodeInst  pin;\n\t\t\tNodeInst  topPin;\n\t\t\tNodeInst  botPin;\n\t\t\tGraphNode main;\n\t\t}\n\t\tpublic GraphCells(Cell top)\n\t\t{\n\t\t\tsuper(\"Graph Cells\", User.getUserTool(), Job.Type.CHANGE, null, null, Job.Priority.USER);\n\t\t\tthis.top = top;\n\t\t\tstartJob();\n\t\t}\n\t\tpublic boolean doIt() throws JobException\n\t\t{\n\t\t\t// create the graph cell\n\t\t\tgraphCell = Cell.newInstance(Library.getCurrent(), \"CellStructure\");\n\t\t\tfieldVariableChanged(\"graphCell\");\n\t\t\tif (graphCell == null) return false;\n\t\t\tif (graphCell.getNumVersions() > 1)\n\t\t\t\tSystem.out.println(\"Creating new version of cell: \" + graphCell.getName()); else\n\t\t\t\t\tSystem.out.println(\"Creating cell: \" + graphCell.getName());\n\t\t\t// create GraphNodes for every cell and initialize the depth to -1\n\t\t\tMap<Cell,GraphNode> graphNodes = new HashMap<Cell,GraphNode>();\n\t\t\tfor(Iterator<Library> it = Library.getLibraries(); it.hasNext(); )\n\t\t\t{\n\t\t\t\tLibrary lib = it.next();\n\t\t\t\tif (lib.isHidden()) continue;\n\t\t\t\tfor(Iterator<Cell> cIt = lib.getCells(); cIt.hasNext(); )\n\t\t\t\t{\n\t\t\t\t\tCell cell = cIt.next();\n\t\t\t\t\tGraphNode cgn = new GraphNode();\n\t\t\t\t\tcgn.name = cell.describe(false);\n\t\t\t\t\tcgn.depth = -1;\n\t\t\t\t\tgraphNodes.put(cell, cgn);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// find all top-level cells\n\t\t\tint maxDepth = 0;\n\t\t\tif (top != null)\n\t\t\t{\n\t\t\t\tGraphNode cgn = graphNodes.get(top);\n\t\t\t\tcgn.depth = 0;\n\t\t\t} else\n\t\t\t{\n\t\t\t\tfor(Iterator<Cell> cIt = Library.getCurrent().getCells(); cIt.hasNext(); )\n\t\t\t\t{\n\t\t\t\t\tCell cell = cIt.next();\n\t\t\t\t\tif (cell.getNumUsagesIn() == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.depth = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdouble xScale = 2.0 / 3.0;\n\t\t\tdouble yScale = 20;\n\t\t\tdouble yOffset = TEXTHEIGHT * 1.25;\n\t\t\tdouble maxWidth = 0;\n\t\t\t// now place all cells at their proper depth\n\t\t\tboolean more = true;\n\t\t\twhile (more)\n\t\t\t{\n\t\t\t\tmore = false;\n\t\t\t\tfor(Iterator<Library> it = Library.getLibraries(); it.hasNext(); )\n\t\t\t\t{\n\t\t\t\t\tLibrary lib = it.next();\n\t\t\t\t\tif (lib.isHidden()) continue;\n\t\t\t\t\tfor(Iterator<Cell> cIt = lib.getCells(); cIt.hasNext(); )\n\t\t\t\t\t{\n\t\t\t\t\t\tCell cell = cIt.next();\n", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "length": 1113, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "341005dfebe6821d4201177ffce38b1e3048f5a0d9c30463"}
{"input": "", "context": "package org.thoughtcrime.securesms.components.emoji;\nimport android.annotation.TargetApi;\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.ColorFilter;\nimport android.graphics.Paint;\nimport android.graphics.PixelFormat;\nimport android.graphics.Rect;\nimport android.graphics.drawable.Drawable;\nimport android.os.AsyncTask;\nimport android.os.Build.VERSION;\nimport android.os.Build.VERSION_CODES;\nimport android.text.Spannable;\nimport android.text.SpannableStringBuilder;\nimport android.util.Log;\nimport android.util.SparseArray;\nimport android.widget.TextView;\nimport org.thoughtcrime.securesms.R;\nimport org.thoughtcrime.securesms.util.BitmapDecodingException;\nimport org.thoughtcrime.securesms.util.BitmapUtil;\nimport org.thoughtcrime.securesms.util.FutureTaskListener;\nimport org.thoughtcrime.securesms.util.ListenableFutureTask;\nimport org.thoughtcrime.securesms.util.Util;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.ref.SoftReference;\nimport java.util.concurrent.Callable;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class EmojiProvider {\n  private static final    String        TAG      = EmojiProvider.class.getSimpleName();\n  private static volatile EmojiProvider instance = null;\n  private static final    Paint         paint    = new Paint(Paint.FILTER_BITMAP_FLAG | Paint.ANTI_ALIAS_FLAG);\n  private final SparseArray<DrawInfo> offsets = new SparseArray<>();\n  @SuppressWarnings(\"MalformedRegex\")\n  //                                                            0x20a0-0x32ff          0x1f00-0x1fff              0xfe4e5-0xfe4ee\n  //                                                           |==== misc ====||======== emoticons ========||========= flags ==========|\n  private static final Pattern EMOJI_RANGE = Pattern.compile(\"[\\\\u20a0-\\\\u32ff\\\\ud83c\\\\udc00-\\\\ud83d\\\\udeff\\\\udbb9\\\\udce5-\\\\udbb9\\\\udcee]\");\n  public static final int    EMOJI_RAW_HEIGHT = 64;\n  public static final int    EMOJI_RAW_WIDTH  = 64;\n  public static final int    EMOJI_VERT_PAD   = 0;\n  public static final int    EMOJI_PER_ROW    = 32;\n  private final Context context;\n  private final float   decodeScale;\n  private final float   verticalPad;\n  public static EmojiProvider getInstance(Context context) {\n    if (instance == null) {\n      synchronized (EmojiProvider.class) {\n        if (instance == null) {\n          instance = new EmojiProvider(context);\n        }\n      }\n    }\n    return instance;\n  }\n  private EmojiProvider(Context context) {\n    this.context     = context.getApplicationContext();\n    this.decodeScale = Math.min(1f, context.getResources().getDimension(R.dimen.emoji_drawer_size) / EMOJI_RAW_HEIGHT);\n    this.verticalPad = EMOJI_VERT_PAD * this.decodeScale;\n    for (EmojiPageModel page : EmojiPages.PAGES) {\n      if (page.hasSpriteMap()) {\n        final EmojiPageBitmap pageBitmap = new EmojiPageBitmap(page);\n        for (int i=0; i < page.getEmoji().length; i++) {\n          offsets.put(Character.codePointAt(page.getEmoji()[i], 0), new DrawInfo(pageBitmap, i));\n        }\n      }\n    }\n  }\n  public Spannable emojify(CharSequence text, TextView tv) {\n    Matcher                matches = EMOJI_RANGE.matcher(text);\n    SpannableStringBuilder builder = new SpannableStringBuilder(text);\n    while (matches.find()) {\n      int codePoint = matches.group().codePointAt(0);\n      Drawable drawable = getEmojiDrawable(codePoint);\n      if (drawable != null) {\n        builder.setSpan(new EmojiSpan(drawable, tv), matches.start(), matches.end(),\n                        Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n      }\n    }\n    return builder;\n  }\n  public Drawable getEmojiDrawable(int emojiCode) {\n    return getEmojiDrawable(offsets.get(emojiCode));\n  }\n  private Drawable getEmojiDrawable(DrawInfo drawInfo) {\n    if (drawInfo == null)  {\n      return null;\n    }\n    final EmojiDrawable drawable = new EmojiDrawable(drawInfo, decodeScale);\n    drawInfo.page.get().addListener(new FutureTaskListener<Bitmap>() {\n      @Override public void onSuccess(final Bitmap result) {\n        Util.runOnMain(new Runnable() {\n          @Override public void run() {\n            drawable.setBitmap(result);\n          }\n        });\n      }\n      @Override public void onFailure(Throwable error) {\n        Log.w(TAG, error);\n      }\n    });\n    return drawable;\n  }\n  public class EmojiDrawable extends Drawable {\n    private final DrawInfo info;\n    private       Bitmap   bmp;\n    private       float    intrinsicWidth;\n    private       float    intrinsicHeight;\n    @Override public int getIntrinsicWidth() {\n      return (int)intrinsicWidth;\n    }\n    @Override public int getIntrinsicHeight() {\n      return (int)intrinsicHeight;\n    }\n    public EmojiDrawable(DrawInfo info, float decodeScale) {\n      this.info            = info;\n      this.intrinsicWidth  = EMOJI_RAW_WIDTH  * decodeScale;\n      this.intrinsicHeight = EMOJI_RAW_HEIGHT * decodeScale;\n    }\n    @Override\n    public void draw(Canvas canvas) {\n      if (bmp == null) {\n        return;\n      }\n      final int row = info.index / EMOJI_PER_ROW;\n      final int row_index = info.index % EMOJI_PER_ROW;\n      canvas.drawBitmap(bmp,\n                        new Rect((int)(row_index * intrinsicWidth),\n                                 (int)(row * intrinsicHeight + row * verticalPad),\n                                 (int)((row_index + 1) * intrinsicWidth),\n                                 (int)((row + 1) * intrinsicHeight + row * verticalPad)),\n                        getBounds(),\n                        paint);\n    }\n    @TargetApi(VERSION_CODES.HONEYCOMB_MR1)\n    public void setBitmap(Bitmap bitmap) {\n      Util.assertMainThread();\n      if (VERSION.SDK_INT < VERSION_CODES.HONEYCOMB_MR1 || bmp == null || !bmp.sameAs(bitmap)) {\n        bmp = bitmap;\n        invalidateSelf();\n      }\n    }\n    @Override\n    public int getOpacity() {\n      return PixelFormat.TRANSLUCENT;\n    }\n    @Override\n    public void setAlpha(int alpha) { }\n    @Override\n    public void setColorFilter(ColorFilter cf) { }\n  }\n  class DrawInfo {\n    EmojiPageBitmap page;\n    int             index;\n    public DrawInfo(final EmojiPageBitmap page, final int index) {\n      this.page = page;\n      this.index = index;\n    }\n    @Override\n    public String toString() {\n      return \"DrawInfo{\" +\n          \"page=\" + page +\n          \", index=\" + index +\n          '}';\n    }\n  }\n  private class EmojiPageBitmap {\n    private EmojiPageModel               model;\n    private SoftReference<Bitmap>        bitmapReference;\n    private ListenableFutureTask<Bitmap> task;\n    public EmojiPageBitmap(EmojiPageModel model) {\n      this.model = model;\n    }\n    private ListenableFutureTask<Bitmap> get() {\n      Util.assertMainThread();\n      if (bitmapReference != null && bitmapReference.get() != null) {\n        return new ListenableFutureTask<>(bitmapReference.get());\n      } else if (task != null) {\n        return task;\n      } else {\n        Callable<Bitmap> callable = new Callable<Bitmap>() {\n          @Override public Bitmap call() throws Exception {\n            try {\n              Log.w(TAG, \"loading page \" + model.getSprite());\n              return loadPage();\n            } catch (IOException ioe) {\n              Log.w(TAG, ioe);\n            }\n            return null;\n          }\n        };\n", "answers": ["        task = new ListenableFutureTask<>(callable);"], "length": 629, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "32d36e0536e57f991a066ab60778b32884747e7689f3c816"}
{"input": "", "context": "\n/***************************************************************************\n *   Copyright 2006-2014 by Christian Ihle                                 *\n *   contact@kouchat.net                                                   *\n *                                                                         *\n *   This file is part of KouChat.                                         *\n *                                                                         *\n *   KouChat is free software; you can redistribute it and/or modify       *\n *   it under the terms of the GNU Lesser General Public License as        *\n *   published by the Free Software Foundation, either version 3 of        *\n *   the License, or (at your option) any later version.                   *\n *                                                                         *\n *   KouChat is distributed in the hope that it will be useful,            *\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      *\n *   Lesser General Public License for more details.                       *\n *                                                                         *\n *   You should have received a copy of the GNU Lesser General Public      *\n *   License along with KouChat.                                           *\n *   If not, see <http://www.gnu.org/licenses/>.                           *\n ***************************************************************************/\npackage net.usikkert.kouchat.ui.swing;\nimport java.awt.AWTKeyStroke;\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.util.HashSet;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextField;\nimport javax.swing.JTextPane;\nimport javax.swing.SwingUtilities;\nimport javax.swing.UIManager;\nimport javax.swing.event.CaretEvent;\nimport javax.swing.event.CaretListener;\nimport javax.swing.text.AbstractDocument;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.MutableAttributeSet;\nimport javax.swing.text.SimpleAttributeSet;\nimport javax.swing.text.StyleConstants;\nimport javax.swing.text.StyledDocument;\nimport net.usikkert.kouchat.Constants;\nimport net.usikkert.kouchat.autocomplete.AutoCompleter;\nimport net.usikkert.kouchat.misc.CommandHistory;\nimport net.usikkert.kouchat.misc.ErrorHandler;\nimport net.usikkert.kouchat.settings.Settings;\nimport net.usikkert.kouchat.ui.ChatWindow;\nimport net.usikkert.kouchat.ui.swing.messages.SwingMessages;\nimport net.usikkert.kouchat.util.Validate;\n/**\n * This is the panel containing the main chat area, the input field,\n * and the {@link SidePanel} on the right side.\n * <br><br>\n * The chat area has url recognition, and a right click menu. The input\n * field has tab-completion, command history, and a right click menu.\n *\n * @author Christian Ihle\n */\npublic class MainPanel extends JPanel implements ActionListener, CaretListener, ChatWindow, KeyListener {\n    private static final Logger LOG = Logger.getLogger(MainPanel.class.getName());\n    private final JScrollPane chatSP;\n    private final JTextPane chatTP;\n    private final MutableAttributeSet chatAttr;\n    private final StyledDocument chatDoc;\n    private final JTextField msgTF;\n    private final CommandHistory cmdHistory;\n    private AutoCompleter autoCompleter;\n    private Mediator mediator;\n    /**\n     * Constructor. Creates the panel.\n     *\n     * @param sideP The panel on the right, containing the user list and the buttons.\n     * @param imageLoader The image loader.\n     * @param settings The settings to use.\n     * @param swingMessages The swing messages to use in copy/paste popups.\n     * @param errorHandler The error handler to use.\n     */\n    public MainPanel(final SidePanel sideP, final ImageLoader imageLoader, final Settings settings,\n                     final SwingMessages swingMessages, final ErrorHandler errorHandler) {\n        Validate.notNull(sideP, \"Side panel can not be null\");\n        Validate.notNull(imageLoader, \"Image loader can not be null\");\n        Validate.notNull(settings, \"Settings can not be null\");\n        Validate.notNull(swingMessages, \"Swing messages can not be null\");\n        Validate.notNull(errorHandler, \"Error handler can not be null\");\n        setLayout(new BorderLayout(2, 2));\n        chatTP = new JTextPane();\n        chatTP.setEditable(false);\n        chatTP.setBorder(BorderFactory.createEmptyBorder(4, 6, 4, 6));\n        chatTP.setEditorKit(new MiddleAlignedIconViewEditorKit());\n        chatTP.setBackground(UIManager.getColor(\"TextPane.background\"));\n        chatSP = new JScrollPane(chatTP);\n        chatSP.setMinimumSize(new Dimension(290, 200));\n        chatAttr = new SimpleAttributeSet();\n        chatDoc = chatTP.getStyledDocument();\n        final URLMouseListener urlML = new URLMouseListener(chatTP, settings, errorHandler, swingMessages);\n        chatTP.addMouseListener(urlML);\n        chatTP.addMouseMotionListener(urlML);\n        final DocumentFilterList documentFilterList = new DocumentFilterList();\n        documentFilterList.addDocumentFilter(new URLDocumentFilter(false));\n        documentFilterList.addDocumentFilter(new SmileyDocumentFilter(false, imageLoader, settings));\n        final AbstractDocument doc = (AbstractDocument) chatDoc;\n        doc.setDocumentFilter(documentFilterList);\n        msgTF = new JTextField();\n        msgTF.addActionListener(this);\n        msgTF.addCaretListener(this);\n        msgTF.addKeyListener(this);\n        // Make sure tab generates key events\n        msgTF.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,\n                new HashSet<AWTKeyStroke>());\n        final AbstractDocument msgDoc = (AbstractDocument) msgTF.getDocument();\n        msgDoc.setDocumentFilter(new SizeDocumentFilter(Constants.MESSAGE_MAX_BYTES));\n        add(chatSP, BorderLayout.CENTER);\n        add(sideP, BorderLayout.EAST);\n        add(msgTF, BorderLayout.SOUTH);\n        new CopyPastePopup(msgTF, swingMessages);\n        new CopyPopup(chatTP, swingMessages);\n        setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));\n        cmdHistory = new CommandHistory();\n    }\n    /**\n     * Sets the mediator to use in the listeners.\n     *\n     * @param mediator The mediator to use.\n     */\n    public void setMediator(final Mediator mediator) {\n        this.mediator = mediator;\n    }\n    /**\n     * Sets the ready-to-use autocompleter for the input field.\n     *\n     * @param autoCompleter The autocompleter to use.\n     */\n    public void setAutoCompleter(final AutoCompleter autoCompleter) {\n        this.autoCompleter = autoCompleter;\n    }\n    /**\n     * Adds the message to the chat area, in the chosen color.\n     *\n     * @param message The message to append.\n     * @param color The color to use for the message.\n     */\n    @Override\n    public void appendToChat(final String message, final int color) {\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    StyleConstants.setForeground(chatAttr, new Color(color));\n                    chatDoc.insertString(chatDoc.getLength(), message + \"\\n\", chatAttr);\n                    chatTP.setCaretPosition(chatDoc.getLength());\n                }\n                catch (final BadLocationException e) {\n                    LOG.log(Level.SEVERE, e.toString(), e);\n                }\n            }\n        });\n    }\n    /**\n     * Gets the chat area.\n     *\n     * @return The chat area.\n     */\n    public JTextPane getChatTP() {\n        return chatTP;\n    }\n    /**\n     * Gets the chat area's scrollpane.\n     *\n     * @return The chat area's scrollpane.\n     */\n    public JScrollPane getChatSP() {\n        return chatSP;\n    }\n    /**\n     * Clears all the text from the chat area.\n     */\n    public void clearChat() {\n        chatTP.setText(\"\");\n    }\n    /**\n     * Gets the input field.\n     *\n     * @return The input field.\n     */\n    public JTextField getMsgTF() {\n        return msgTF;\n    }\n    /**\n     * Updates the write status after the caret has moved.\n     *\n     * {@inheritDoc}\n     */\n    @Override\n    public void caretUpdate(final CaretEvent e) {\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                mediator.updateWriting();\n            }\n        });\n    }\n    /**\n     * When enter is pressed in the input field, the text is added to the\n     * command history, and the mediator shows the text in the chat area.\n     *\n     * {@inheritDoc}\n     */\n    @Override\n    public void actionPerformed(final ActionEvent e) {\n        // The input field\n        if (e.getSource() == msgTF) {\n            SwingUtilities.invokeLater(new Runnable() {\n                @Override\n                public void run() {\n                    cmdHistory.add(msgTF.getText());\n                    mediator.write();\n                }\n            });\n        }\n    }\n    /**\n     * When tab is pressed while in the input field, the word at the\n     * caret position will be autocompleted if any suggestions are found.\n     *\n     * {@inheritDoc}\n     */\n    @Override\n    public void keyPressed(final KeyEvent ke) {\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                // Tab-completion\n                if (ke.getKeyCode() == KeyEvent.VK_TAB && ke.getModifiers() == 0) {\n                    if (autoCompleter != null) {\n                        final int caretPos = msgTF.getCaretPosition();\n                        final String orgText = msgTF.getText();\n                        final String newText = autoCompleter.completeWord(orgText, caretPos);\n                        if (newText.length() > 0) {\n                            msgTF.setText(newText);\n                            msgTF.setCaretPosition(autoCompleter.getNewCaretPosition());\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Not implemented.\n     *\n     * {@inheritDoc}\n     */\n    @Override\n    public void keyTyped(final KeyEvent ke) {\n    }\n    /**\n     * After some text has been added to the command history, it can\n     * be accessed by browsing through the history with the up and down\n     * keys while focus is on the input field.\n     *\n     * {@inheritDoc}\n     */\n    @Override\n    public void keyReleased(final KeyEvent ke) {\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                // Command history up\n                if (ke.getKeyCode() == KeyEvent.VK_UP) {\n                    final String up = cmdHistory.goUp();\n                    if (!msgTF.getText().equals(up)) {\n                        msgTF.setText(up);\n                    }\n                }\n                // Command history down\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "length": 1035, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "1f9066ab085c69885da88c003a539d651c2835d2ed83fd83"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n# added new list_tbl definition\nfrom functools import partial\nimport random\nimport itertools\nfrom navmazing import NavigateToAttribute, NavigateToSibling\nfrom widgetastic.widget import View\nfrom widgetastic_manageiq import (\n    BootstrapSelect, Button, Table, Accordion, ManageIQTree, PaginationPane)\nfrom cfme.common import Taggable, SummaryMixin\nfrom cfme.containers.provider import ContainersProvider, Labelable,\\\n    ContainerObjectAllBaseView, LoggingableView\nfrom cfme.exceptions import NodeNotFound\nfrom cfme.fixtures import pytest_selenium as sel\nfrom cfme.web_ui import CheckboxTable, toolbar as tb, InfoBlock, match_location\nfrom utils.appliance import Navigatable\nfrom utils.appliance.implementations.ui import CFMENavigateStep, navigator, navigate_to\nlist_tbl = CheckboxTable(table_locator=\"//div[@id='list_grid']//table\")\nmatch_page = partial(match_location, controller='container_node', title='Nodes')\n# TODO Replace with resource table widget\nresource_locator = \"//div[@id='records_div']/table//span[@title='{}']\"\nclass NodeView(ContainerObjectAllBaseView, LoggingableView):\n    TITLE_TEXT = 'Nodes'\n    nodes = Table(locator=\"//div[@id='list_grid']//table\")\n    @property\n    def table(self):\n        return self.nodes\n    @property\n    def in_cloud_instance(self):\n        return (\n            self.logged_in_as_current_user and\n            self.navigation.currently_selected == ['Compute', 'Containers', 'Container Nodes'] and\n            match_page()  # No summary, just match controller and title\n        )\nclass NodeCollection(Navigatable):\n    \"\"\"Collection object for :py:class:`Node`.\"\"\"\n    def instantiate(self, name, provider):\n        return Node(name=name, provider=provider, appliance=self.appliance)\n    def all(self):\n        # container_nodes table has ems_id, join with ext_mgmgt_systems on id for provider name\n        node_table = self.appliance.db.client['container_nodes']\n        ems_table = self.appliance.db.client['ext_management_systems']\n        node_query = self.appliance.db.client.session.query(node_table.name, ems_table.name)\\\n            .join(ems_table, node_table.ems_id == ems_table.id)\n        nodes = []\n        for name, provider_name in node_query.all():\n            # Hopefully we can get by with just provider name?\n            nodes.append(Node(name=name,\n                              provider=ContainersProvider(name=provider_name,\n                                                          appliance=self.appliance),\n                              collection=self))\n        return nodes\nclass NodeAllView(NodeView):\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Nodes')\n        )\n    paginator = PaginationPane()\nclass Node(Taggable, Labelable, SummaryMixin, Navigatable):\n    PLURAL = 'Nodes'\n    def __init__(self, name, provider, collection=None, appliance=None):\n        self.name = name\n        self.provider = provider\n        if not collection:\n            collection = NodeCollection(appliance=appliance)\n        self.collection = collection\n        Navigatable.__init__(self, appliance=appliance)\n    def load_details(self, refresh=False):\n        navigate_to(self, 'Details')\n        if refresh:\n            tb.refresh()\n    def get_detail(self, *ident):\n        \"\"\" Gets details from the details infoblock\n        Args:\n            *ident: Table name and Key name, e.g. \"Relationships\", \"Images\"\n        Returns: A string representing the contents of the summary's value.\n        \"\"\"\n        self.load_details()\n        return InfoBlock.text(*ident)\n    @classmethod\n    def get_random_instances(cls, provider, count=1, appliance=None):\n        \"\"\"Generating random instances.\"\"\"\n        node_list = provider.mgmt.list_node()\n        random.shuffle(node_list)\n        return [cls(obj.name, provider, appliance=appliance)\n                for obj in itertools.islice(node_list, count)]\n# Still registering Node to keep on consistency on container objects navigations\n@navigator.register(Node, 'All')\n@navigator.register(NodeCollection, 'All')\nclass All(CFMENavigateStep):\n    VIEW = NodeAllView\n    prerequisite = NavigateToAttribute('appliance.server', 'LoggedIn')\n    def step(self, *args, **kwargs):\n        self.prerequisite_view.navigation.select('Compute', 'Containers', 'Container Nodes')\n    def resetter(self):\n        # Reset view and selection\n        tb.select(\"List View\")\nclass NodeDetailsView(NodeView):\n    download = Button(name='download_view')\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='{} (Summary)'.format(self.context['object'].name))\n        )\n    @View.nested\n    class properties(Accordion):  # noqa\n        tree = ManageIQTree()\n    @View.nested\n    class relationships(Accordion):  # noqa\n        tree = ManageIQTree()\n@navigator.register(Node, 'Details')\nclass Details(CFMENavigateStep):\n    VIEW = NodeDetailsView\n    prerequisite = NavigateToAttribute('collection', 'All')\n    def step(self, *args, **kwargs):\n        # Need to account for paged view\n        for _ in self.prerequisite_view.paginator.pages():\n            row = self.view.nodes.row(name=self.obj.name, provider=self.obj.provider.name)\n            if row:\n                row.click()\n                break\n        else:\n            raise NodeNotFound('Failed to navigate to node, could not find matching row')\nclass NodeEditTagsForm(NodeView):\n    tag_category = BootstrapSelect('tag_cat')\n    tag = BootstrapSelect('tag_add')\n    # TODO: table for added tags with removal support\n    # less than ideal button duplication between classes\n    save_button = Button('Save')\n    reset_button = Button('Reset')\n    cancel_button = Button('Cancel')\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Tag Assignment') and\n            sel.is_displayed(resource_locator.format(self.context['object'].name))\n        )\n@navigator.register(Node, 'EditTags')\nclass EditTags(CFMENavigateStep):\n    VIEW = NodeEditTagsForm\n    prerequisite = NavigateToSibling('Details')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Edit Tags')\nclass NodeManagePoliciesForm(NodeView):\n    policy_profiles = BootstrapSelect('protectbox')\n    # less than ideal button duplication between classes\n    save_button = Button('Save')\n    reset_button = Button('Reset')\n    cancel_button = Button('Cancel')\n    @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Select Policy Profiles') and\n            sel.is_displayed(resource_locator.format(self.context['object'].name))\n        )\n@navigator.register(Node, 'ManagePolicies')\nclass ManagePolicies(CFMENavigateStep):\n    VIEW = NodeManagePoliciesForm\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "length": 534, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "88af654f6cc0799e1844ea6d4158729b1130dc62928ae169"}
{"input": "", "context": "package maejavawrapper;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.List;\nimport maejava.BoneVector;\nimport maejava.ColumnDefinitionVector;\nimport maejava.ETimeUnit;\nimport maejava.FlMovementController;\nimport maejava.FlSkeleton;\nimport maejava.GeneralPose;\nimport maejava.GeneralSkeleton;\nimport maejava.LabanSequence;\nimport maejava.LabanSequenceGenerator;\nimport maejava.LabanSequenceVector;\nimport maejava.StringVector;\npublic class WrappedMovementController extends FlMovementController {\n\tList<IJRecognitionListener> recognitionListeners = new ArrayList<IJRecognitionListener>();\n\tList<IJSequenceListener> sequenceListeners = new ArrayList<IJSequenceListener>();\n\tList<IJPoseListener> poseListeners = new ArrayList<IJPoseListener>();\n\tpublic WrappedMovementController(long pose_buffer_size, double framerate,\n\t\t\tboolean debug) {\n\t\tsuper(pose_buffer_size, framerate, debug);\n\t}\n\tpublic WrappedMovementController(long pose_buffer_size, double framerate) {\n\t\tsuper(pose_buffer_size, framerate);\n\t}\n\tpublic WrappedMovementController(long pose_buffer_size) {\n\t\tsuper(pose_buffer_size);\n\t}\n\tpublic WrappedMovementController() {\n\t\tsuper();\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions, long pose_buffer_size,\n\t\t\tlong beats_per_measure, long beat_duration, ETimeUnit time_unit,\n\t\t\tdouble framerate, boolean debug) {\n\t\tsuper(body_parts, column_definitions, pose_buffer_size,\n\t\t\t\tbeats_per_measure, beat_duration, time_unit, framerate, debug);\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions, long pose_buffer_size,\n\t\t\tlong beats_per_measure, long beat_duration, ETimeUnit time_unit,\n\t\t\tdouble framerate) {\n\t\tsuper(body_parts, column_definitions, pose_buffer_size,\n\t\t\t\tbeats_per_measure, beat_duration, time_unit, framerate);\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions, long pose_buffer_size,\n\t\t\tlong beats_per_measure, long beat_duration, ETimeUnit time_unit) {\n\t\tsuper(body_parts, column_definitions, pose_buffer_size,\n\t\t\t\tbeats_per_measure, beat_duration, time_unit);\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions, long pose_buffer_size,\n\t\t\tlong beats_per_measure, long beat_duration) {\n\t\tsuper(body_parts, column_definitions, pose_buffer_size,\n\t\t\t\tbeats_per_measure, beat_duration);\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions, long pose_buffer_size,\n\t\t\tlong beats_per_measure) {\n\t\tsuper(body_parts, column_definitions, pose_buffer_size,\n\t\t\t\tbeats_per_measure);\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions, long pose_buffer_size) {\n\t\tsuper(body_parts, column_definitions, pose_buffer_size);\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions) {\n\t\tsuper(body_parts, column_definitions);\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions,\n\t\t\tLabanSequenceGenerator sequence_generator, long pose_buffer_size,\n\t\t\tlong beats_per_measure, long beat_duration, ETimeUnit time_unit,\n\t\t\tdouble framerate, boolean debug) {\n\t\tsuper(body_parts, column_definitions, sequence_generator,\n\t\t\t\tpose_buffer_size, beats_per_measure, beat_duration, time_unit,\n\t\t\t\tframerate, debug);\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions,\n\t\t\tLabanSequenceGenerator sequence_generator, long pose_buffer_size,\n\t\t\tlong beats_per_measure, long beat_duration, ETimeUnit time_unit,\n\t\t\tdouble framerate) {\n\t\tsuper(body_parts, column_definitions, sequence_generator,\n\t\t\t\tpose_buffer_size, beats_per_measure, beat_duration, time_unit,\n\t\t\t\tframerate);\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions,\n\t\t\tLabanSequenceGenerator sequence_generator, long pose_buffer_size,\n\t\t\tlong beats_per_measure, long beat_duration, ETimeUnit time_unit) {\n\t\tsuper(body_parts, column_definitions, sequence_generator,\n\t\t\t\tpose_buffer_size, beats_per_measure, beat_duration, time_unit);\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions,\n\t\t\tLabanSequenceGenerator sequence_generator, long pose_buffer_size,\n\t\t\tlong beats_per_measure, long beat_duration) {\n\t\tsuper(body_parts, column_definitions, sequence_generator,\n\t\t\t\tpose_buffer_size, beats_per_measure, beat_duration);\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions,\n\t\t\tLabanSequenceGenerator sequence_generator, long pose_buffer_size,\n\t\t\tlong beats_per_measure) {\n\t\tsuper(body_parts, column_definitions, sequence_generator,\n\t\t\t\tpose_buffer_size, beats_per_measure);\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions,\n\t\t\tLabanSequenceGenerator sequence_generator, long pose_buffer_size) {\n\t\tsuper(body_parts, column_definitions, sequence_generator,\n\t\t\t\tpose_buffer_size);\n\t}\n\tpublic WrappedMovementController(BoneVector body_parts,\n\t\t\tColumnDefinitionVector column_definitions,\n\t\t\tLabanSequenceGenerator sequence_generator) {\n\t\tsuper(body_parts, column_definitions, sequence_generator);\n\t}\n\t@Override\n\tpublic void nextFrame(BigInteger timestamp, GeneralSkeleton skeleton) {\n\t\tsuper.nextFrame(timestamp, skeleton);\n\t\tnotifySequenceListeners(timestamp, getCurrentSequence());\n\t\tnotifyRecognitionListeners(timestamp, getCurrentRecognition());\n\t\tnotifyPoseListeners(timestamp, getCurrentPose());\n\t}\n\t@Override\n\tpublic void nextFrame(BigInteger timestamp, FlSkeleton skeleton) {\n\t\tsuper.nextFrame(timestamp, skeleton);\n\t\tnotifySequenceListeners(timestamp, getCurrentSequence());\n\t\tnotifyRecognitionListeners(timestamp, getCurrentRecognition());\n\t\tnotifyPoseListeners(timestamp, getCurrentPose());\n\t}\n\tpublic void addListener(IJRecognitionListener listener) {\n\t\trecognitionListeners.add(listener);\n\t}\n\tpublic boolean removeListener(IJRecognitionListener listener) {\n\t\treturn recognitionListeners.remove(listener);\n\t}\n\tpublic void addListener(IJSequenceListener listener) {\n\t\tsequenceListeners.add(listener);\n\t}\n\tpublic boolean removeListener(IJSequenceListener listener) {\n\t\treturn sequenceListeners.remove(listener);\n\t}\n\tpublic void addListener(IJPoseListener listener) {\n\t\tposeListeners.add(listener);\n\t}\n\tpublic boolean removeListener(IJPoseListener listener) {\n\t\treturn poseListeners.remove(listener);\n\t}\n\tpublic void notifySequenceListeners(BigInteger timestamp, LabanSequence sequence) {\n\t\tfor (IJSequenceListener listener : sequenceListeners) {\n\t\t\tlistener.onSequence(timestamp, sequence);\n\t\t}\n\t}\n\tpublic void notifyRecognitionListeners(BigInteger timestamp,\n\t\t\tLabanSequenceVector sequences) {\n\t\tStringVector sequenceTitles = new StringVector();\n\t\tfor (int i = 0; i < sequences.size(); i++) {\n\t\t\tsequenceTitles.add(sequences.get(i).getTitle());\n\t\t}\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "length": 482, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "08b681d309832c3aa506f61679aefcaed7ca5b6c115d2701"}
{"input": "", "context": "#region License\n// Copyright (c) 2013, ClearCanvas Inc.\n// All rights reserved.\n// http://www.clearcanvas.ca\n//\n// This file is part of the ClearCanvas RIS/PACS open source project.\n//\n// The ClearCanvas RIS/PACS open source project is free software: you can\n// redistribute it and/or modify it under the terms of the GNU General Public\n// License as published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// The ClearCanvas RIS/PACS open source project is distributed in the hope that it\n// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along with\n// the ClearCanvas RIS/PACS open source project.  If not, see\n// <http://www.gnu.org/licenses/>.\n#endregion\nusing System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing ClearCanvas.Common.Utilities;\n[assembly: WebResource(\"ClearCanvas.ImageServer.Web.Common.WebControls.UI.ToolbarButton.js\", \"text/javascript\")]\nnamespace ClearCanvas.ImageServer.Web.Common.WebControls.UI\n{\n    public enum NoPermissionVisibility\n    {\n        Invisible,\n        Visible\n    }\n    [ToolboxData(\"<{0}:ToolbarButton runat=server></{0}:ToolbarButton>\")]\n    [Themeable(true)]\n    public class ToolbarButton : ImageButton, IScriptControl\n    {\n        #region Private Members\n        private string _roleSeparator = \",\";\n        private NoPermissionVisibility _noPermissionVisibilityMode;\n        #endregion\n        #region Public Properties\n        /// <summary>\n\t\t/// Specifies the roles which users must have to access to this button.\n\t\t/// </summary>\n        public string Roles\n        {\n            get\n            {\n                return ViewState[\"Roles\"] as string;\n            }\n            set\n            {\n                ViewState[\"Roles\"] = value;\n            }\n        }\n\t\t/// <summary>\n\t\t/// Specifies the visiblity of the button if the user doesn't have the roles specified in <see cref=\"Roles\"/>\n\t\t/// </summary>\n        public NoPermissionVisibility NoPermissionVisibilityMode\n        {\n            get { return _noPermissionVisibilityMode; }\n            set { _noPermissionVisibilityMode = value; }\n        }\n        /// <summary>\n        /// Sets or gets the url of the image to be used when the button is enabled.\n        /// </summary>\n        public string EnabledImageURL \n        {\n            get\n            {\n                String s = (String)ViewState[\"EnabledImageURL\"];\n                return ((s == null) ? String.Empty : s);\n            }\n            set\n            {\n                ViewState[\"EnabledImageURL\"] = inspectURL(value);\n            }\n        }\n        /// <summary>\n        /// Sets or gets the url of the image to be used when the button enabled and user hovers the mouse over the button.\n        /// </summary>\n        public string HoverImageURL\n        {\n            get\n            {\n                String s = (String)ViewState[\"HoverImageURL\"];\n                return (s ?? String.Empty);\n            }\n            set\n            {\n                ViewState[\"HoverImageURL\"] = inspectURL(value);\n            }\n        }\n        /// <summary>\n        /// Sets or gets the url of the image to be used when the mouse button is clicked.\n        /// </summary>\n        public string ClickedImageURL\n        {\n            get\n            {\n                String s = (String)ViewState[\"ClickedImageURL\"];\n                return (s ?? String.Empty);\n            }\n            set\n            {\n                ViewState[\"ClickedImageURL\"] = inspectURL(value);\n            }\n        }   \n        /// <summary>\n        /// Sets or gets the url of the image to be used when the button is disabled.\n        /// </summary>\n        public string DisabledImageURL\n        {\n            get\n            {\n                String s = (String)ViewState[\"DisabledImageURL\"];\n                return (s ?? String.Empty);\n            }\n            set\n            {\n                ViewState[\"DisabledImageURL\"] = inspectURL(value);\n            }\n        }\n        /// <summary>\n        /// Gets or sets the string that is used to seperate values in the <see cref=\"Roles\"/> property.\n        /// </summary>\n        public string RoleSeparator\n        {\n            get { return _roleSeparator; }\n            set { _roleSeparator = value; }\n        }\n        #endregion Public Properties\n        #region Private Methods\n        private string inspectURL(string value)\n        {\n            if (!value.StartsWith(\"~/\") && !value.StartsWith(\"/\")) \n                value = value.Insert(0, \"~/App_Themes/\" + Page.Theme + \"/\");\n            \n            return value;\n        }       \n        #endregion Private Methods\n        public override void  RenderControl(HtmlTextWriter writer)\n        {\n            if (Enabled)\n                ImageUrl = EnabledImageURL;\n            else\n                ImageUrl = DisabledImageURL;\n \t        base.RenderControl(writer);\n        }\n        #region IScriptControl Members\n        public IEnumerable<ScriptDescriptor> GetScriptDescriptors()\n        {\n            ScriptControlDescriptor desc = new ScriptControlDescriptor(\"ClearCanvas.ImageServer.Web.Common.WebControls.UI.ToolbarButton\", ClientID);\n            desc.AddProperty(\"EnabledImageUrl\", Page.ResolveClientUrl(EnabledImageURL));\n            desc.AddProperty(\"DisabledImageUrl\", Page.ResolveClientUrl(DisabledImageURL));\n            desc.AddProperty(\"HoverImageUrl\", Page.ResolveClientUrl(HoverImageURL));\n            desc.AddProperty(\"ClickedImageUrl\", Page.ResolveClientUrl(ClickedImageURL));\n            return new ScriptDescriptor[] { desc };\n        }\n        public IEnumerable<ScriptReference> GetScriptReferences()\n        {\n            ScriptReference reference = new ScriptReference();\n            reference.Path = Page.ClientScript.GetWebResourceUrl(typeof(ToolbarButton), \"ClearCanvas.ImageServer.Web.Common.WebControls.UI.ToolbarButton.js\");\n            return new ScriptReference[] { reference };\n        }\n        #endregion IScriptControl Members\n        protected override void OnPreRender(EventArgs e)\n        {\n            base.OnPreRender(e);\n            if (!DesignMode)\n            {\n                ScriptManager sm = ScriptManager.GetCurrent(Page);\n                sm.RegisterScriptControl(this);\n            }\n            if (String.IsNullOrEmpty(Roles)==false)\n            {\n                string[] roles = Roles.Split(new String[]{ RoleSeparator}, StringSplitOptions.RemoveEmptyEntries);\n                bool allow = CollectionUtils.Contains(roles,\n                                delegate(string role)\n                                 {\n                                     return Thread.CurrentPrincipal.IsInRole(role.Trim());\n                                 });\n                if (!allow)\n                {\n                    Enabled = false;\n                    Visible = NoPermissionVisibilityMode!=NoPermissionVisibility.Invisible;\n                }\n            }\n        }\n        protected override void Render(HtmlTextWriter writer)\n        {\n            if (!DesignMode)\n            {\n", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "length": 655, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "1472d733364caca77c7f2605a8ceaee6c18fb02ebc460475"}
{"input": "", "context": "package com.github.lazylazuli.traps.common.tile;\nimport com.github.lazylazuli.traps.common.block.BlockSpikeTrap;\nimport net.minecraft.block.state.IBlockState;\nimport net.minecraft.enchantment.Enchantment;\nimport net.minecraft.enchantment.EnchantmentDurability;\nimport net.minecraft.enchantment.EnchantmentHelper;\nimport net.minecraft.entity.Entity;\nimport net.minecraft.entity.monster.EntityMob;\nimport net.minecraft.init.Enchantments;\nimport net.minecraft.inventory.ItemStackHelper;\nimport net.minecraft.item.EnumDyeColor;\nimport net.minecraft.item.Item;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.nbt.NBTTagCompound;\nimport net.minecraft.nbt.NBTTagList;\nimport net.minecraft.tileentity.TileEntity;\nimport net.minecraft.util.DamageSource;\nimport net.minecraft.util.ITickable;\nimport net.minecraft.util.NonNullList;\nimport net.minecraft.util.math.BlockPos;\nimport net.minecraft.world.World;\nimport javax.annotation.Nonnull;\nimport java.util.Random;\nimport static com.github.lazylazuli.lib.common.block.BlockDyed.COLOR;\nimport static com.github.lazylazuli.traps.common.TrapObjects.SMOOTH_GRANITE_SLAB;\npublic class TileSpikeTrap extends TileEntity implements ITickable\n{\n\tprivate NonNullList<ItemStack> inventory = NonNullList.withSize(1, ItemStack.EMPTY);\n\t\n\tprivate int sharpness;\n\t\n\tprivate int fire;\n\t\n\tprivate int blast;\n\t\n\tprivate int smite;\n\t\n\tprivate int bane;\n\t\n\tprivate int damageCooldown;\n\t\n\tprivate int damage;\n\t\n\tpublic int getBlastResistance()\n\t{\n\t\treturn blast;\n\t}\n\t\n\t@Override\n\tpublic void update()\n\t{\n\t\tif (damageCooldown > 0)\n\t\t{\n\t\t\tdamageCooldown--;\n\t\t}\n\t}\n\t\n\tpublic void initializeStack(ItemStack stack)\n\t{\n\t\tinventory.set(0, stack.copy());\n\t\tinventory.get(0)\n\t\t\t\t .setCount(1);\n\t\t\n\t\tNBTTagCompound compound = stack.getTagCompound();\n\t\t\n\t\tif (compound == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamage = stack.getTagCompound()\n\t\t\t\t\t\t  .getInteger(\"ToolDamage\");\n\t\t}\n\t\t\n\t\tNBTTagList list = stack.getEnchantmentTagList();\n\t\t\n\t\tif (list == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < list.tagCount(); i++)\n\t\t{\n\t\t\tNBTTagCompound ench = (NBTTagCompound) list.get(i);\n\t\t\t\n\t\t\tint id = ench.getShort(\"id\");\n\t\t\tint lvl = ench.getShort(\"lvl\");\n\t\t\t\n\t\t\tif (Enchantment.REGISTRY.getIDForObject(Enchantments.SHARPNESS) == id)\n\t\t\t{\n\t\t\t\tsharpness = lvl;\n\t\t\t} else if (Enchantment.REGISTRY.getIDForObject(Enchantments.FIRE_ASPECT) == id)\n\t\t\t{\n\t\t\t\tfire = lvl;\n\t\t\t} else if (Enchantment.REGISTRY.getIDForObject(Enchantments.BLAST_PROTECTION) == id)\n\t\t\t{\n\t\t\t\tblast = lvl;\n\t\t\t} else if (Enchantment.REGISTRY.getIDForObject(Enchantments.BANE_OF_ARTHROPODS) == id)\n\t\t\t{\n\t\t\t\tbane = lvl;\n\t\t\t} else if (Enchantment.REGISTRY.getIDForObject(Enchantments.SMITE) == id)\n\t\t\t{\n\t\t\t\tsmite = lvl;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic ItemStack getItemDropped()\n\t{\n\t\tItemStack stack = inventory.get(0)\n\t\t\t\t\t\t\t\t   .copy();\n\t\t\n\t\tif (damage > 0)\n\t\t{\n\t\t\tNBTTagCompound compound = stack.getTagCompound();\n\t\t\t\n\t\t\tif (compound == null)\n\t\t\t{\n\t\t\t\tcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(compound);\n\t\t\t}\n\t\t\t\n\t\t\tcompound.setInteger(\"ToolDamage\", damage);\n\t\t}\n\t\t\n\t\treturn stack;\n\t}\n\t\n\tprivate Item.ToolMaterial getToolMaterial()\n\t{\n\t\treturn ((BlockSpikeTrap) getBlockType()).getToolMaterial();\n\t}\n\t\n\tprivate float getDamageMultiplier(Entity entityIn)\n\t{\n\t\tfloat dmg = getToolMaterial().getDamageVsEntity() + 1;\n\t\t\n\t\tdmg += sharpness;\n\t\t\n\t\tif (entityIn instanceof EntityMob)\n\t\t{\n\t\t\tswitch (((EntityMob) entityIn).getCreatureAttribute())\n\t\t\t{\n\t\t\tcase UNDEAD:\n\t\t\t\tdmg += smite;\n\t\t\t\tbreak;\n\t\t\tcase ARTHROPOD:\n\t\t\t\tdmg += bane;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dmg;\n\t}\n\t\n\tpublic void onFallenUpon(Entity entityIn, float fallDistance)\n\t{\n\t\tfloat dmg = getDamageMultiplier(entityIn) + 1;\n\t\t\n\t\tfloat fall = Math.max(4, fallDistance);\n\t\t\n\t\tentityIn.fall(fall, dmg);\n\t\tdamageBlock((int) fall);\n\t}\n\t\n\tpublic void onEntityWalk(Entity entityIn)\n\t{\n\t\tif (!entityIn.isSneaking())\n\t\t{\n\t\t\tentityIn.attackEntityFrom(DamageSource.CACTUS, getDamageMultiplier(entityIn));\n\t\t\t\n\t\t\tif (!world.isRaining())\n\t\t\t{\n\t\t\t\tentityIn.setFire(((int) getToolMaterial().getDamageVsEntity() + 1) * fire);\n\t\t\t}\n\t\t\t\n\t\t\tdamageBlock(1);\n\t\t}\n\t}\n\t\n\tprivate void damageBlock(int dmg)\n\t{\n\t\tif (damageCooldown > 0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tboolean isBroken = attemptDamageItem(dmg, world.rand);\n\t\t\n\t\tdamageCooldown = 8;\n\t\tmarkDirty();\n\t\t\n\t\tif (isBroken)\n\t\t{\n\t\t\tEnumDyeColor color = EnumDyeColor.byMetadata(getBlockMetadata());\n\t\t\tworld.setBlockState(pos, SMOOTH_GRANITE_SLAB.getDefaultState()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.withProperty(COLOR, color));\n\t\t}\n\t}\n\t\n\tprivate boolean attemptDamageItem(int amount, Random rand)\n\t{\n\t\tItemStack stack = inventory.get(0);\n\t\t\n\t\tint i = EnchantmentHelper.getEnchantmentLevel(Enchantments.UNBREAKING, stack);\n\t\tint j = 0;\n\t\t\n\t\tfor (int k = 0; i > 0 && k < amount; ++k)\n\t\t{\n\t\t\tif (EnchantmentDurability.negateDamage(stack, i, rand))\n\t\t\t{\n\t\t\t\t++j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tamount -= j;\n\t\t\n\t\tif (amount <= 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tdamage += amount;\n\t\treturn damage > getToolMaterial().getMaxUses();\n\t}\n\t\n\t@Override\n\tpublic boolean shouldRefresh(World world, BlockPos pos, IBlockState oldState, IBlockState newSate)\n\t{\n\t\treturn !oldState.getBlock()\n\t\t\t\t\t\t.isAssociatedBlock(newSate.getBlock());\n\t}\n\t\n\t// NBT\n\t\n\t@Override\n\tpublic void readFromNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.readFromNBT(compound);\n\t\t\n\t\tItemStackHelper.loadAllItems(compound, inventory);\n\t\t\n\t\tinitializeStack(inventory.get(0));\n\t\t\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "length": 475, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "2abe780e4777e159876fcba6fb9c21888d8a0782e7499c3e"}
{"input": "", "context": "/**\n *  Copyright (C) 2002-2015   The FreeCol Team\n *\n *  This file is part of FreeCol.\n *\n *  FreeCol is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  FreeCol is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with FreeCol.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage net.sf.freecol.common.model;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport javax.xml.stream.XMLStreamException;\nimport net.sf.freecol.common.io.FreeColXMLReader;\nimport net.sf.freecol.common.io.FreeColXMLWriter;\nimport static net.sf.freecol.common.util.CollectionUtils.*;\n/**\n * The effect of a natural disaster or other event. How the\n * probability of the effect is interpreted depends on the number of\n * effects value of the disaster or event. If the number of effects is\n * ALL, the probability is ignored. If it is ONE, then the probability\n * may be an arbitrary integer, and is used only for comparison with\n * other effects. If the number of effects is SEVERAL, however, the\n * probability must be a percentage.\n *\n * @see Disaster\n */\npublic class Effect extends FreeColGameObjectType {\n    public static final String DAMAGED_UNIT\n        = \"model.disaster.effect.damagedUnit\";\n    public static final String LOSS_OF_UNIT\n        = \"model.disaster.effect.lossOfUnit\";\n    public static final String LOSS_OF_MONEY\n        = \"model.disaster.effect.lossOfMoney\";\n    public static final String LOSS_OF_GOODS\n        = \"model.disaster.effect.lossOfGoods\";\n    public static final String LOSS_OF_TILE_PRODUCTION\n        = \"model.disaster.effect.lossOfTileProduction\";\n    public static final String LOSS_OF_BUILDING\n        = \"model.disaster.effect.lossOfBuilding\";\n    public static final String LOSS_OF_BUILDING_PRODUCTION\n        = \"model.disaster.effect.lossOfBuildingProduction\";\n    /** The probability of this effect. */\n    private int probability;\n    /** Scopes that might limit this Effect to certain types of objects. */\n    private List<Scope> scopes = null;\n    /**\n     * Deliberately empty constructor.\n     */\n    protected Effect() {}\n    /**\n     * Creates a new <code>Effect</code> instance.\n     *\n     * @param xr The <code>FreeColXMLReader</code> to read from.\n     * @param specification The <code>Specification</code> to refer to.\n     * @exception XMLStreamException if an error occurs\n     */\n    public Effect(FreeColXMLReader xr, Specification specification) throws XMLStreamException {\n        setSpecification(specification);\n        readFromXML(xr);\n    }\n    /**\n     * Create a new effect from an existing one.\n     *\n     * @param template The <code>Effect</code> to copy from.\n     */\n    public Effect(Effect template) {\n        setId(template.getId());\n        setSpecification(template.getSpecification());\n        this.probability = template.probability;\n        this.scopes = template.scopes;\n        addFeatures(template);\n    }\n    /**\n     * Get the probability of this effect.\n     *\n     * @return The probability.\n     */\n    public final int getProbability() {\n        return probability;\n    }\n    /**\n     * Get the scopes applicable to this effect.\n     *\n     * @return A list of <code>Scope</code>s.\n     */\n    public final List<Scope> getScopes() {\n        return (scopes == null) ? Collections.<Scope>emptyList()\n            : scopes;\n    }\n    /**\n     * Add a scope.\n     *\n     * @param scope The <code>Scope</code> to add.\n     */\n    private void addScope(Scope scope) {\n        if (scopes == null) scopes = new ArrayList<>();\n        scopes.add(scope);\n    }\n    /**\n     * Does at least one of this effect's scopes apply to an object.\n     *\n     * @param objectType The <code>FreeColGameObjectType</code> to check.\n     * @return True if this effect applies.\n     */\n    public boolean appliesTo(final FreeColGameObjectType objectType) {\n        return (scopes == null || scopes.isEmpty()) ? true\n            : any(scopes, s -> s.appliesTo(objectType));\n    }\n    // Serialization\n    private static final String PROBABILITY_TAG = \"probability\";\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void writeAttributes(FreeColXMLWriter xw) throws XMLStreamException {\n        super.writeAttributes(xw);\n        xw.writeAttribute(PROBABILITY_TAG, probability);\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void writeChildren(FreeColXMLWriter xw) throws XMLStreamException {\n        super.writeChildren(xw);\n        for (Scope scope : getScopes()) scope.toXML(xw);\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void readAttributes(FreeColXMLReader xr) throws XMLStreamException {\n        super.readAttributes(xr);\n        probability = xr.getAttribute(PROBABILITY_TAG, 0);\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void readChildren(FreeColXMLReader xr) throws XMLStreamException {\n        // Clear containers.\n        if (xr.shouldClearContainers()) {\n            scopes = null;\n        }\n        super.readChildren(xr);\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void readChild(FreeColXMLReader xr) throws XMLStreamException {\n        final String tag = xr.getLocalName();\n        if (Scope.getXMLElementTagName().equals(tag)) {\n            addScope(new Scope(xr));\n        } else {\n            super.readChild(xr);\n        }\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String toString() {\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "length": 661, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "214bccc94127564a29c72827ff53ccb4c3bd880918d517fa"}
{"input": "", "context": "import pytest\nfrom csirtg_indicator import Indicator\nfrom cif.store import Store\nfrom cif.auth import Auth\nfrom elasticsearch_dsl.connections import connections\nimport os\nimport arrow\nfrom cifsdk.exceptions import AuthError\nfrom pprint import pprint\nimport json\nDISABLE_TESTS = True\nif os.environ.get('CIF_ELASTICSEARCH_TEST'):\n    if os.environ['CIF_ELASTICSEARCH_TEST'] == '1':\n        DISABLE_TESTS = False\n@pytest.fixture\ndef store():\n    try:\n        connections.get_connection().indices.delete(index='indicators-*')\n        connections.get_connection().indices.delete(index='tokens')\n    except Exception as e:\n        pass\n    with Store(store_type='elasticsearch', nodes='127.0.0.1:9200', hunter_token='abc123') as s:\n        s._load_plugin(nodes='127.0.0.1:9200')\n        yield s\n    try:\n        assert connections.get_connection().indices.delete(index='indicators-*')\n        assert connections.get_connection().indices.delete(index='tokens')\n    except Exception:\n        pass\n@pytest.fixture\ndef auth():\n    with Auth(store_type='elasticsearch', nodes='127.0.0.1:9200') as a:\n        a._load_plugin(nodes='127.0.0.1:9200')\n        yield a\n@pytest.fixture\ndef token(store):\n    t = store.store.tokens.create({\n        'username': u'test_admin',\n        'groups': [u'everyone'],\n        'read': u'1',\n        'write': u'1',\n        'admin': u'1'\n    })\n    assert t\n    yield t\n@pytest.fixture\ndef indicator():\n    return Indicator(\n        indicator='example.com',\n        tags='botnet',\n        provider='csirtg.io',\n        group='everyone',\n        lasttime=arrow.utcnow().datetime,\n        reporttime=arrow.utcnow().datetime\n    )\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF_ELASTICSEARCH_TEST=1 to run')\ndef test_store_elasticsearch_tokens_groups1(store, auth, token, indicator):\n    t = store.store.tokens.create({\n        'username': 'test',\n        'groups': ['staff', 'everyone'],\n        'read': True,\n        'write': True\n    })\n    assert t\n    assert t['groups'] == ['staff', 'everyone']\n    assert t['write']\n    assert t['read']\n    assert not t.get('admin')\n    i = None\n    _t = auth.auth.handle_token_search(t['token'])\n    mtype = 'indicators_create'\n    data = json.dumps({\n            'indicator': 'example.com',\n            'group': 'staff2',\n            'provider': 'example.com',\n            'tags': ['test'],\n            'itype': 'fqdn',\n            'lasttime': arrow.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%fZ'),\n            'reporttime': arrow.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n        })\n    with pytest.raises(AuthError):\n        auth.check_token_perms(mtype, _t, data)\n    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'staff',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n        'reporttime': arrow.utcnow().datetime\n    }, flush=True)\n    assert i\n    i = store.handle_indicators_search(t, {'itype': 'fqdn'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(list(i)) > 0\n    pprint(i)\n    i = store.handle_indicators_search(t, {'indicator': 'example.com'})\n    assert len(list(i)) > 0\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF_ELASTICSEARCH_TEST=1 to run')\ndef test_store_elasticsearch_tokens_groups2(store, auth, indicator):\n    t = store.store.tokens.create({\n        'username': 'test',\n        'groups': ['staff'],\n        'read': True,\n        'write': True\n    })\n    _t = auth.auth.handle_token_search(t['token'])\n    mtype = 'indicators_create'\n    data = json.dumps({\n            'indicator': 'example.com',\n            'group': 'staff2',\n            'provider': 'example.com',\n            'tags': ['test'],\n            'itype': 'fqdn',\n            'lasttime': arrow.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%fZ'),\n            'reporttime': arrow.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n        })\n    with pytest.raises(AuthError):\n        auth.check_token_perms(mtype, _t, data)\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF_ELASTICSEARCH_TEST=1 to run')\ndef test_store_elasticsearch_tokens_groups3(store, indicator):\n    t = store.store.tokens.create({\n        'username': 'test',\n        'groups': ['staff'],\n        'write': True\n    })\n    t2 = store.store.tokens.create({\n        'username': 'test',\n        'groups': ['staff2'],\n        'read': True,\n    })\n    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'staff',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n        'reporttime': arrow.utcnow().datetime\n    }, flush=True)\n    assert i\n    i = store.handle_indicators_search(t2, {'itype': 'fqdn'})\n    i = json.loads(i)\n    assert len(i) == 0\n    i = store.handle_indicators_search(t2, {'indicator': 'example.com'})\n    i = json.loads(i)\n    assert len(i) == 0\n    i = store.handle_indicators_search(t2, {'indicator': 'example.com', 'groups': 'staff'})\n    i = json.loads(i)\n    assert len(i) == 0\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF_ELASTICSEARCH_TEST=1 to run')\ndef test_store_elasticsearch_tokens_groups4(store, indicator):\n    t = store.store.tokens.create({\n        'username': 'test',\n        'groups': ['staff', 'staff2'],\n        'write': True,\n        'read': True\n    })\n    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'staff',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n        'reporttime': arrow.utcnow().datetime\n    }, flush=True)\n    assert i\n    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'staff2',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n        'reporttime': arrow.utcnow().datetime\n    }, flush=True)\n    assert i\n    i = store.handle_indicators_search(t, {'itype': 'fqdn', 'groups': 'staff'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(i) == 1\n# test hunter submit to any group\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF_ELASTICSEARCH_TEST=1 to run')\ndef test_store_elasticsearch_tokens_groups5(store, token, indicator):\n    t = store.store.tokens.create({\n        'username': 'hunter',\n        'groups': ['hunter_test'],\n        'token': 'abc123',\n        'write': True,\n        'read': False\n    })\n    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.utcnow().datetime,\n        'reporttime': arrow.utcnow().datetime\n    }, flush=True)\n    assert i\n    i = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'everyone'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(i) == 1\n# allow admin to access any group\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF_ELASTICSEARCH_TEST=1 to run')\ndef test_store_elasticsearch_tokens_groups6(store, token, indicator):\n    t = store.store.tokens.create({\n        'username': 'test',\n        'groups': ['private'],\n        'write': True,\n        'read': False\n    })\n", "answers": ["    i = store.handle_indicators_create(t, {"], "length": 577, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "492de4fd744409d77007630f3cf7e7c49b13037cb2b2a8c6"}
{"input": "", "context": "# -*- coding: utf-8 -*-\nimport sys\nsys.path[0:0] = [\"\"]\nimport unittest\nfrom bson import SON\nfrom mongoengine import *\nfrom mongoengine.connection import get_db\n__all__ = (\"DeltaTest\",)\nclass DeltaTest(unittest.TestCase):\n    def setUp(self):\n        connect(db='mongoenginetest')\n        self.db = get_db()\n        class Person(Document):\n            name = StringField()\n            age = IntField()\n            non_field = True\n            meta = {\"allow_inheritance\": True}\n        self.Person = Person\n    def tearDown(self):\n        for collection in self.db.collection_names():\n            if 'system.' in collection:\n                continue\n            self.db.drop_collection(collection)\n    def test_delta(self):\n        self.delta(Document)\n        self.delta(DynamicDocument)\n    def delta(self, DocClass):\n        class Doc(DocClass):\n            string_field = StringField()\n            int_field = IntField()\n            dict_field = DictField()\n            list_field = ListField()\n        Doc.drop_collection()\n        doc = Doc()\n        doc.save()\n        doc = Doc.objects.first()\n        self.assertEqual(doc._get_changed_fields(), [])\n        self.assertEqual(doc._delta(), ({}, {}))\n        doc.string_field = 'hello'\n        self.assertEqual(doc._get_changed_fields(), ['string_field'])\n        self.assertEqual(doc._delta(), ({'string_field': 'hello'}, {}))\n        doc._changed_fields = []\n        doc.int_field = 1\n        self.assertEqual(doc._get_changed_fields(), ['int_field'])\n        self.assertEqual(doc._delta(), ({'int_field': 1}, {}))\n        doc._changed_fields = []\n        dict_value = {'hello': 'world', 'ping': 'pong'}\n        doc.dict_field = dict_value\n        self.assertEqual(doc._get_changed_fields(), ['dict_field'])\n        self.assertEqual(doc._delta(), ({'dict_field': dict_value}, {}))\n        doc._changed_fields = []\n        list_value = ['1', 2, {'hello': 'world'}]\n        doc.list_field = list_value\n        self.assertEqual(doc._get_changed_fields(), ['list_field'])\n        self.assertEqual(doc._delta(), ({'list_field': list_value}, {}))\n        # Test unsetting\n        doc._changed_fields = []\n        doc.dict_field = {}\n        self.assertEqual(doc._get_changed_fields(), ['dict_field'])\n        self.assertEqual(doc._delta(), ({}, {'dict_field': 1}))\n        doc._changed_fields = []\n        doc.list_field = []\n        self.assertEqual(doc._get_changed_fields(), ['list_field'])\n        self.assertEqual(doc._delta(), ({}, {'list_field': 1}))\n    def test_delta_recursive(self):\n        self.delta_recursive(Document, EmbeddedDocument)\n        self.delta_recursive(DynamicDocument, EmbeddedDocument)\n        self.delta_recursive(Document, DynamicEmbeddedDocument)\n        self.delta_recursive(DynamicDocument, DynamicEmbeddedDocument)\n    def delta_recursive(self, DocClass, EmbeddedClass):\n        class Embedded(EmbeddedClass):\n            string_field = StringField()\n            int_field = IntField()\n            dict_field = DictField()\n            list_field = ListField()\n        class Doc(DocClass):\n            string_field = StringField()\n            int_field = IntField()\n            dict_field = DictField()\n            list_field = ListField()\n            embedded_field = EmbeddedDocumentField(Embedded)\n        Doc.drop_collection()\n        doc = Doc()\n        doc.save()\n        doc = Doc.objects.first()\n        self.assertEqual(doc._get_changed_fields(), [])\n        self.assertEqual(doc._delta(), ({}, {}))\n        embedded_1 = Embedded()\n        embedded_1.string_field = 'hello'\n        embedded_1.int_field = 1\n        embedded_1.dict_field = {'hello': 'world'}\n        embedded_1.list_field = ['1', 2, {'hello': 'world'}]\n        doc.embedded_field = embedded_1\n        self.assertEqual(doc._get_changed_fields(), ['embedded_field'])\n        embedded_delta = {\n            'string_field': 'hello',\n            'int_field': 1,\n            'dict_field': {'hello': 'world'},\n            'list_field': ['1', 2, {'hello': 'world'}]\n        }\n        self.assertEqual(doc.embedded_field._delta(), (embedded_delta, {}))\n        self.assertEqual(doc._delta(),\n                         ({'embedded_field': embedded_delta}, {}))\n        doc.save()\n        doc = doc.reload(10)\n        doc.embedded_field.dict_field = {}\n        self.assertEqual(doc._get_changed_fields(),\n                         ['embedded_field.dict_field'])\n        self.assertEqual(doc.embedded_field._delta(), ({}, {'dict_field': 1}))\n        self.assertEqual(doc._delta(), ({}, {'embedded_field.dict_field': 1}))\n        doc.save()\n        doc = doc.reload(10)\n        self.assertEqual(doc.embedded_field.dict_field, {})\n        doc.embedded_field.list_field = []\n        self.assertEqual(doc._get_changed_fields(),\n                         ['embedded_field.list_field'])\n        self.assertEqual(doc.embedded_field._delta(), ({}, {'list_field': 1}))\n        self.assertEqual(doc._delta(), ({}, {'embedded_field.list_field': 1}))\n        doc.save()\n        doc = doc.reload(10)\n        self.assertEqual(doc.embedded_field.list_field, [])\n        embedded_2 = Embedded()\n        embedded_2.string_field = 'hello'\n        embedded_2.int_field = 1\n        embedded_2.dict_field = {'hello': 'world'}\n        embedded_2.list_field = ['1', 2, {'hello': 'world'}]\n        doc.embedded_field.list_field = ['1', 2, embedded_2]\n        self.assertEqual(doc._get_changed_fields(),\n                         ['embedded_field.list_field'])\n        self.assertEqual(doc.embedded_field._delta(), ({\n            'list_field': ['1', 2, {\n                '_cls': 'Embedded',\n                'string_field': 'hello',\n                'dict_field': {'hello': 'world'},\n                'int_field': 1,\n                'list_field': ['1', 2, {'hello': 'world'}],\n            }]\n        }, {}))\n        self.assertEqual(doc._delta(), ({\n            'embedded_field.list_field': ['1', 2, {\n                '_cls': 'Embedded',\n                'string_field': 'hello',\n                'dict_field': {'hello': 'world'},\n                'int_field': 1,\n                'list_field': ['1', 2, {'hello': 'world'}],\n            }]\n        }, {}))\n        doc.save()\n        doc = doc.reload(10)\n        self.assertEqual(doc.embedded_field.list_field[0], '1')\n        self.assertEqual(doc.embedded_field.list_field[1], 2)\n        for k in doc.embedded_field.list_field[2]._fields:\n            self.assertEqual(doc.embedded_field.list_field[2][k],\n                             embedded_2[k])\n        doc.embedded_field.list_field[2].string_field = 'world'\n        self.assertEqual(doc._get_changed_fields(),\n                         ['embedded_field.list_field.2.string_field'])\n        self.assertEqual(doc.embedded_field._delta(),\n                         ({'list_field.2.string_field': 'world'}, {}))\n        self.assertEqual(doc._delta(),\n                         ({'embedded_field.list_field.2.string_field': 'world'}, {}))\n        doc.save()\n        doc = doc.reload(10)\n        self.assertEqual(doc.embedded_field.list_field[2].string_field,\n                         'world')\n        # Test multiple assignments\n        doc.embedded_field.list_field[2].string_field = 'hello world'\n        doc.embedded_field.list_field[2] = doc.embedded_field.list_field[2]\n        self.assertEqual(doc._get_changed_fields(),\n                         ['embedded_field.list_field'])\n        self.assertEqual(doc.embedded_field._delta(), ({\n            'list_field': ['1', 2, {\n            '_cls': 'Embedded',\n            'string_field': 'hello world',\n            'int_field': 1,\n            'list_field': ['1', 2, {'hello': 'world'}],\n            'dict_field': {'hello': 'world'}}]}, {}))\n        self.assertEqual(doc._delta(), ({\n            'embedded_field.list_field': ['1', 2, {\n                '_cls': 'Embedded',\n                'string_field': 'hello world',\n                'int_field': 1,\n                'list_field': ['1', 2, {'hello': 'world'}],\n                'dict_field': {'hello': 'world'}}\n            ]}, {}))\n        doc.save()\n        doc = doc.reload(10)\n        self.assertEqual(doc.embedded_field.list_field[2].string_field,\n                         'hello world')\n        # Test list native methods\n        doc.embedded_field.list_field[2].list_field.pop(0)\n        self.assertEqual(doc._delta(),\n                         ({'embedded_field.list_field.2.list_field':\n                          [2, {'hello': 'world'}]}, {}))\n        doc.save()\n        doc = doc.reload(10)\n        doc.embedded_field.list_field[2].list_field.append(1)\n        self.assertEqual(doc._delta(),\n                         ({'embedded_field.list_field.2.list_field':\n                          [2, {'hello': 'world'}, 1]}, {}))\n        doc.save()\n        doc = doc.reload(10)\n        self.assertEqual(doc.embedded_field.list_field[2].list_field,\n                         [2, {'hello': 'world'}, 1])\n        doc.embedded_field.list_field[2].list_field.sort(key=str)\n        doc.save()\n        doc = doc.reload(10)\n        self.assertEqual(doc.embedded_field.list_field[2].list_field,\n                         [1, 2, {'hello': 'world'}])\n        del(doc.embedded_field.list_field[2].list_field[2]['hello'])\n        self.assertEqual(doc._delta(),\n                         ({'embedded_field.list_field.2.list_field': [1, 2, {}]}, {}))\n        doc.save()\n        doc = doc.reload(10)\n        del(doc.embedded_field.list_field[2].list_field)\n        self.assertEqual(doc._delta(),\n                         ({}, {'embedded_field.list_field.2.list_field': 1}))\n        doc.save()\n        doc = doc.reload(10)\n        doc.dict_field['Embedded'] = embedded_1\n        doc.save()\n        doc = doc.reload(10)\n        doc.dict_field['Embedded'].string_field = 'Hello World'\n        self.assertEqual(doc._get_changed_fields(),\n                         ['dict_field.Embedded.string_field'])\n        self.assertEqual(doc._delta(),\n                         ({'dict_field.Embedded.string_field': 'Hello World'}, {}))\n    def test_circular_reference_deltas(self):\n        self.circular_reference_deltas(Document, Document)\n        self.circular_reference_deltas(Document, DynamicDocument)\n        self.circular_reference_deltas(DynamicDocument, Document)\n        self.circular_reference_deltas(DynamicDocument, DynamicDocument)\n    def circular_reference_deltas(self, DocClass1, DocClass2):\n        class Person(DocClass1):\n            name = StringField()\n            owns = ListField(ReferenceField('Organization'))\n        class Organization(DocClass2):\n            name = StringField()\n            owner = ReferenceField('Person')\n        Person.drop_collection()\n        Organization.drop_collection()\n        person = Person(name=\"owner\").save()\n        organization = Organization(name=\"company\").save()\n        person.owns.append(organization)\n        organization.owner = person\n        person.save()\n        organization.save()\n        p = Person.objects[0].select_related()\n        o = Organization.objects.first()\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n    def test_circular_reference_deltas_2(self):\n        self.circular_reference_deltas_2(Document, Document)\n        self.circular_reference_deltas_2(Document, DynamicDocument)\n        self.circular_reference_deltas_2(DynamicDocument, Document)\n        self.circular_reference_deltas_2(DynamicDocument, DynamicDocument)\n    def circular_reference_deltas_2(self, DocClass1, DocClass2, dbref=True):\n        class Person(DocClass1):\n            name = StringField()\n            owns = ListField(ReferenceField('Organization', dbref=dbref))\n            employer = ReferenceField('Organization', dbref=dbref)\n        class Organization(DocClass2):\n            name = StringField()\n            owner = ReferenceField('Person', dbref=dbref)\n            employees = ListField(ReferenceField('Person', dbref=dbref))\n        Person.drop_collection()\n        Organization.drop_collection()\n        person = Person(name=\"owner\").save()\n        employee = Person(name=\"employee\").save()\n        organization = Organization(name=\"company\").save()\n        person.owns.append(organization)\n        organization.owner = person\n        organization.employees.append(employee)\n        employee.employer = organization\n        person.save()\n        organization.save()\n        employee.save()\n", "answers": ["        p = Person.objects.get(name=\"owner\")"], "length": 701, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "a507514e59d02bec9d48f262b48dffcb180b6665ae945f96"}
{"input": "", "context": "import os.path\nimport bokeh\nimport bokeh.io\nimport bokeh.model\nimport bokeh.plotting\nimport bokeh.util.platform\nimport ipywidgets as widgets\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pyproj\nfrom IPython.display import display\nfrom bokeh.models import ColumnDataSource, Circle\nfrom bokeh.tile_providers import STAMEN_TERRAIN\nfrom ipywidgets import interact, fixed\nfrom matplotlib.collections import LineCollection, PolyCollection\n# noinspection PyUnresolvedReferences\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom netCDF4 import Dataset, num2date\nfrom numpy import ndarray\nfrom .figurewriter import FigureWriter\n# (Plotting) Resources:\n# * http://matplotlib.org/api/pyplot_api.html\n# * http://matplotlib.org/users/image_tutorial.html\n# * http://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html#d-plots-in-3d\n# * http://ipywidgets.readthedocs.io/en/latest/\n# * http://bokeh.pydata.org/en/0.11.1/docs/user_guide/geo.html\n# * http://bokeh.pydata.org/en/0.11.1/docs/user_guide/notebook.html\ndef inspect_l1b_product(product_file_path, output_path=None, output_format=None) -> 'L1bProductInspector':\n    \"\"\"\n    Open a L1B product for inspection.\n    If *output_format* is \"dir\" then a new directory given by *output_path*\n    will be created. Each plot figure will will be saved in a new file.\n    If *output_format* is \"pdf\" then a new multi-page PDF document given by *output_path*\n    will be created or overwritten if it exists. Each plot figure will will be saved in a new PDF page.\n    Format \"pdf\" does not support all plot types.\n    If *output_format* is not given it defaults it is derived from *output_path*.\n    Note that both *output_path* and *output_format* arguments are ignored if the inspection is run in an\n    Jupyter (IPython) Notebook.\n    :param product_file_path: The file path of the LB product.\n    :param output_path: The output path where plot figures are written to.\n    :param output_format: The output format. Supported formats are \"pdf\" and \"dir\".\n    \"\"\"\n    if output_path:\n        figure_writer = FigureWriter(output_path, output_format)\n    else:\n        bokeh.io.output_notebook(hide_banner=True)\n        figure_writer = None\n    return L1bProductInspector(product_file_path, figure_writer)\nclass L1bProductInspector:\n    \"\"\"\n    The `L1bInspector` class provides access to L1B contents and provides a number of analysis functions.\n    \"\"\"\n    def __init__(self, product_file_path, figure_writer: FigureWriter):\n        if not product_file_path:\n            raise ValueError('product_file_path must be given')\n        self._plot = L1bProductInspectorPlots(self, figure_writer)\n        self._file_path = product_file_path\n        dataset = Dataset(product_file_path)\n        self._dataset = dataset\n        self.dim_names = sorted(list(dataset.dimensions.keys()))\n        self.var_names = sorted(list(dataset.variables))\n        if 'time_l1bs_echo_sar_ku' in self.var_names:\n            product_type = 'l1bs'\n            print('WARNING: L1BS product inspection not yet fully supported.')\n        elif 'time_l1b_echo_sar_ku' in self.var_names:\n            product_type = 'l1b'\n        else:\n            raise ValueError('\"%s\" is neither a supported L1B nor L1BS product' % product_file_path)\n        self.dim_name_to_size = {}\n        for name, dim in dataset.dimensions.items():\n            self.dim_name_to_size[name] = dim.size\n        self.dim_names_to_var_names = {}\n        for v in dataset.variables:\n            dims = tuple(dataset[v].dimensions)\n            if dims in self.dim_names_to_var_names:\n                self.dim_names_to_var_names[dims].add(v)\n            else:\n                self.dim_names_to_var_names[dims] = {v}\n        self.attributes = {name: dataset.getncattr(name) for name in dataset.ncattrs()}\n        self.lat = dataset['lat_%s_echo_sar_ku' % product_type][:]\n        self.lon = dataset['lon_%s_echo_sar_ku' % product_type][:]\n        self.lat_0 = self.lat.mean()\n        self.lon_0 = self.lon.mean()\n        self.lat_range = self.lat.min(), self.lat.max()\n        self.lon_range = self.lon.min(), self.lon.max()\n        time_var = dataset['time_%s_echo_sar_ku' % product_type]\n        time = time_var[:]\n        self.time = num2date(time, time_var.units, calendar=time_var.calendar)\n        self.time_0 = num2date(time.mean(), time_var.units, calendar=time_var.calendar)\n        self.time_range = self.time.min(), self.time.max()\n        waveform_counts = dataset['i2q2_meas_ku_%s_echo_sar_ku' % product_type][:]\n        waveform_scaling = dataset['scale_factor_ku_%s_echo_sar_ku' % product_type][:]\n        waveform_scaling = waveform_scaling.reshape(waveform_scaling.shape + (1,))\n        self._waveform = waveform_scaling * waveform_counts\n        self.waveform_range = self.waveform.min(), self.waveform.max()\n        self.num_times = waveform_counts.shape[0]\n        self.num_samples = waveform_counts.shape[1]\n        self.echo_sample_ind = np.arange(0, self.num_samples)\n    @property\n    def file_path(self) -> str:\n        \"\"\"\n        Get the L1b file path.\n        \"\"\"\n        return self._file_path\n    @property\n    def plot(self) -> 'L1bProductInspectorPlots':\n        \"\"\"\n        Get the plotting context.\n        \"\"\"\n        return self._plot\n    @property\n    def dataset(self) -> Dataset:\n        \"\"\"\n        Get the underlying netCDF dataset object.\n        \"\"\"\n        return self._dataset\n    @property\n    def waveform(self) -> ndarray:\n        \"\"\"\n        Get the pre-scaled waveform array.\n        \"\"\"\n        return self._waveform\n    def close(self):\n        \"\"\"Close the underlying dataset's file access.\"\"\"\n        self._dataset.close()\n        self._plot.close()\nclass L1bProductInspectorPlots:\n    def __init__(self, inspector: 'L1bProductInspector', figure_writer: FigureWriter):\n        self._inspector = inspector\n        self._interactive = figure_writer is None\n        self._figure_writer = figure_writer\n    def locations(self, color='blue'):\n        \"\"\"\n        Plot product locations as circles onto a world map.\n        \"\"\"\n        # Spherical Mercator\n        mercator = pyproj.Proj(init='epsg:3857')\n        # Equirectangular lat/lon on WGS84\n        equirectangular = pyproj.Proj(init='epsg:4326')\n        lon = self._inspector.lon\n        lat = self._inspector.lat\n        x, y = pyproj.transform(equirectangular, mercator, lon, lat)\n        # print(list(zip(lon, lat)))\n        # print(list(zip(x, y)))\n        source = ColumnDataSource(data=dict(x=x, y=y))\n        circle = Circle(x='x', y='y', size=6, fill_color=color, fill_alpha=0.5, line_color=None)\n        # map_options = GMapOptions(lat=30.29, lng=-97.73, map_type=\"roadmap\", zoom=11)\n        # plot = GMapPlot(x_range=DataRange1d(), y_range=DataRange1d(), map_options=map_options)\n        # plot.title.text = 'L1B Footprint'\n        # plot.add_glyph(source, circle)\n        # plot.add_tools(PanTool(), WheelZoomTool(), BoxSelectTool())\n        fig = bokeh.plotting.figure(x_range=(x.min(), x.max()), y_range=(y.min(), y.max()), toolbar_location='above')\n        fig.axis.visible = False\n        # fig.add_tile(STAMEN_TONER)\n        fig.add_tile(STAMEN_TERRAIN)\n        fig.title.text = 'L1B Locations'\n        # fig.title = 'L1B Footprint'\n        fig.add_glyph(source, circle)\n        if self._interactive:\n            bokeh.io.show(fig)\n        elif self._figure_writer.output_format == \"dir\":\n            os.makedirs(self._figure_writer.output_path, exist_ok=True)\n            bokeh.io.save(fig, os.path.join(self._figure_writer.output_path, 'fig-locations.html'),\n                          title='L1B Locations')\n        else:\n            print('warning: cannot save locations figure with output format \"%s\"' % self._figure_writer.output_format)\n    def waveform_im(self, vmin=None, vmax=None, cmap='jet'):\n        vmin = vmin if vmin else self._inspector.waveform_range[0]\n        vmax = vmax if vmax else self._inspector.waveform_range[1]\n        plt.figure(figsize=(10, 10))\n        plt.imshow(self._inspector.waveform, interpolation='nearest', aspect='auto', vmin=vmin, vmax=vmax, cmap=cmap)\n        plt.xlabel('Echo Sample Index')\n        plt.ylabel('Time Index')\n        plt.title('Waveform')\n        plt.colorbar(orientation='vertical')\n        if self._interactive:\n            plt.show()\n        else:\n            self.savefig(\"fig-waveform-im.png\")\n    def waveform_3d_surf(self, zmin=0, zmax=None, cmap='jet'):\n        self._waveform_3d(fig_type='surf', zmin=zmin, zmax=zmax, alpha=1, cmap=cmap)\n    def waveform_3d_poly(self, zmin=0, zmax=None, alpha=0.5, cmap='jet'):\n        self._waveform_3d(fig_type='poly', zmin=zmin, zmax=zmax, alpha=alpha, cmap=cmap)\n    def waveform_3d_line(self, zmin=0, zmax=None, alpha=0.5, cmap='jet'):\n        self._waveform_3d(fig_type='line', zmin=zmin, zmax=zmax, alpha=alpha, cmap=cmap)\n    def _waveform_3d(self, fig_type, zmin, zmax, alpha, cmap):\n        fig = plt.figure(figsize=(10, 10))\n        ax = fig.gca(projection='3d')\n        num_times = self._inspector.num_times\n        num_samples = self._inspector.num_samples\n        if fig_type == 'surf':\n            x = np.arange(0, num_samples)\n            y = np.arange(0, num_times)\n            x, y = np.meshgrid(x, y)\n            z = self._inspector.waveform\n            surf = ax.plot_surface(x, y, z, rstride=3, cstride=3, cmap=cmap, shade=True,\n                                   linewidth=0, antialiased=False)\n            # ax.zaxis.set_major_locator(LinearLocator(10))\n            # ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))\n            fig.colorbar(surf, shrink=0.5, aspect=5)\n        else:\n            waveforms = []\n            for y_index in range(num_times):\n                waveform = np.ndarray(shape=(num_samples, 2), dtype=np.float64)\n                waveform[:, 0] = np.arange(0, num_samples)\n                waveform[:, 1] = self._inspector.waveform[y_index]\n                waveforms.append(waveform)\n            line_widths = [0.5] * num_times\n            # TODO (forman, 20160725): check why cmap is not recognized\n            if fig_type == 'poly':\n                edge_colors = ((0.2, 0.2, 1., 0.7),) * num_times\n                face_colors = ((1., 1., 1., 0.5),) * num_times\n                collection = PolyCollection(waveforms, cmap=cmap,\n                                            linewidths=line_widths,\n                                            edgecolors=edge_colors,\n                                            facecolors=face_colors)\n            else:\n                colors = ((0.2, 0.2, 1., 0.7),) * num_times\n                collection = LineCollection(waveforms, cmap=cmap,\n                                            linewidths=line_widths, colors=colors)\n            collection.set_alpha(alpha)\n            ax.add_collection3d(collection, zs=np.arange(0, num_times), zdir='y')\n        wf_min, wf_max = self._inspector.waveform_range\n        ax.set_xlabel('Echo Sample Index')\n        ax.set_xlim3d(0, num_samples - 1)\n        ax.set_ylabel('Time Index')\n        ax.set_ylim3d(0, num_times - 1)\n        ax.set_zlabel('Waveform')\n        ax.set_zlim3d(zmin if zmin is not None else wf_min, zmax if zmax is not None else wf_max)\n        if self._interactive:\n            plt.show()\n        else:\n            self.savefig(\"fig-waveform-3d-%s.png\" % fig_type)\n    def waveform_hist(self, vmin=None, vmax=None, bins=128, log=False, color='green'):\n        \"\"\"\n        Draw waveform histogram.\n        :param vmin: Minimum display value\n        :param vmax: Maximum display value\n        :param bins: Number of bins\n        :param log: Show logarithms of bin counts\n        :param color: Color of the histogram bars, e.g. 'green'\n        \"\"\"\n        vmin = vmin if vmin else self._inspector.waveform_range[0]\n        vmax = vmax if vmax else self._inspector.waveform_range[1]\n        vmax = vmin + 1 if vmin == vmax else vmax\n        plt.figure(figsize=(12, 6))\n        plt.hist(self._inspector.waveform.flatten(),\n                 range=(vmin, vmax),\n                 bins=bins,\n                 log=log,\n                 facecolor=color,\n                 alpha=1,\n                 normed=True)\n        plt.xlabel('Waveform')\n        plt.ylabel('Counts')\n        plt.title('Waveform Histogram')\n        plt.grid(True)\n        if self._interactive:\n            plt.show()\n        else:\n            self.savefig(\"fig-waveform-hist.png\")\n    def waveform_line(self, ind=None, ref_ind=None):\n        \"\"\"\n        Draw waveform 2D line plot.\n        :param ind: Time index\n        :param ref_ind: Reference time index\n        \"\"\"\n        if ind is None and self._interactive:\n            interact(self._plot_waveform_line, ind=(0, self._inspector.num_times - 1), ref_ind=fixed(ref_ind))\n        else:\n            self._plot_waveform_line(ind=ind if ind else 0, ref_ind=ref_ind)\n    def _plot_waveform_line(self, ind: int, ref_ind=None):\n        plt.figure(figsize=(12, 6))\n        plt.plot(self._inspector.echo_sample_ind, self._inspector.waveform[ind], 'b-')\n        plt.xlabel('Echo Sample Index')\n        plt.ylabel('Waveform')\n        plt.title('Waveform at #%s' % ind)\n        plt.grid(True)\n        if ref_ind is not None:\n            plt.plot(self._inspector.echo_sample_ind, self._inspector.waveform[ref_ind], 'r-', label='ref')\n            plt.legend(['#%s' % ind, '#%s' % ref_ind])\n        if self._interactive:\n            plt.show()\n        else:\n            self.savefig(\"fig-waveform-x-%d.png\" % ind)\n    def im(self, z=None, zmin=None, zmax=None, cmap='jet'):\n        if z is None:\n            if self._interactive:\n                name_options = list()\n                for dim_names, var_names in self._inspector.dim_names_to_var_names.items():\n                    no_zero_dim = all([self._inspector.dim_name_to_size[dim] > 0 for dim in dim_names])\n                    if no_zero_dim and len(dim_names) == 2:\n                        name_options.extend(var_names)\n                name_options = sorted(name_options)\n                # TODO (forman, 20160709): add sliders for zmin, zmax\n                interact(self._plot_im, z_name=name_options, zmin=fixed(zmax), zmax=fixed(zmax), cmap=fixed(cmap))\n            else:\n                raise ValueError('name must be given')\n        else:\n            self._plot_im(z_name=z, zmin=zmin, zmax=zmax, cmap=cmap)\n    def _plot_im(self, z_name, zmin=None, zmax=None, cmap='jet'):\n        if z_name not in self._inspector.dataset.variables:\n            print('Error: \"%s\" is not a variable' % z_name)\n            return\n        var = self._inspector.dataset[z_name]\n        if len(var.shape) != 2:\n            print('Error: \"%s\" is not 2-dimensional' % z_name)\n            return\n        var_data = var[:]\n        zmin = zmin if zmin else var_data.min()\n        zmax = zmax if zmax else var_data.max()\n        plt.figure(figsize=(10, 10))\n        plt.imshow(self._inspector.waveform, interpolation='nearest', aspect='auto', vmin=zmin, vmax=zmax, cmap=cmap)\n        # TODO (forman, 20160709): show labels in units of dimension variables\n        plt.xlabel('%s (index)' % var.dimensions[1])\n        plt.ylabel('%s (index)' % var.dimensions[0])\n        plt.title('%s (%s)' % (z_name, var.units if hasattr(var, 'units') else '?'))\n        plt.colorbar(orientation='vertical')\n        if self._interactive:\n            plt.show()\n        else:\n            self.savefig('fig-%s.png' % z_name)\n    def line(self, x=None, y=None, sel_dim=False):\n        \"\"\"\n        Plot two 1D-variables against each other.\n        :param x: Name of a 1D-variable\n        :param y: Name of another 1D-variable, must have the same dimension as *x*.\n        :param sel_dim: Whether to display a dimension selector.\n        \"\"\"\n        if not x or not y:\n            if self._interactive:\n                valid_dim_names = set()\n                valid_var_names = []\n                for dim_names, var_names in self._inspector.dim_names_to_var_names.items():\n                    if len(dim_names) == 1 and len(var_names) > 1:\n                        dim_name = dim_names[0]\n                        if self._inspector.dim_name_to_size[dim_name] > 0:\n                            valid_dim_names.add(dim_name)\n                            valid_var_names.extend(var_names)\n                valid_dim_names = sorted(valid_dim_names)\n                valid_var_names = sorted(valid_var_names)\n                if sel_dim:\n                    widget_dim_options = valid_dim_names\n                    widget_dim_value = widget_dim_options[0]\n                    widget_y_options = sorted(list(self._inspector.dim_names_to_var_names[(widget_dim_value,)]))\n                    widget_y_value = y if y and y in widget_y_options else widget_y_options[0]\n                    widget_x_options = ['index'] + widget_y_options\n                    widget_x_value = x if x and x in widget_x_options else widget_x_options[0]\n                    widget_dim = widgets.Dropdown(options=widget_dim_options, value=widget_dim_value,\n                                                  description='Dim:')\n                    widget_x = widgets.Dropdown(options=widget_x_options, value=widget_x_value, description='X:')\n                    widget_y = widgets.Dropdown(options=widget_y_options, value=widget_y_value, description='Y:')\n                    display(widget_dim)\n                    # noinspection PyUnusedLocal\n                    def on_widget_dim_change(change):\n                        nonlocal widget_x, widget_y\n                        widget_y.options = sorted(list(self._inspector.dim_names_to_var_names[(widget_dim.value,)]))\n                        widget_x.options = ['index'] + widget_y.options\n                        widget_y.value = widget_y.options[0]\n                        widget_x.value = widget_x.options[0]\n                    # noinspection PyUnusedLocal\n                    def on_widget_x_change(change):\n                        display()\n                    # noinspection PyUnusedLocal\n                    def on_widget_y_change(change):\n                        display()\n                    widget_dim.observe(on_widget_dim_change, names='value')\n                    widget_x.observe(on_widget_x_change, names='value')\n                    widget_y.observe(on_widget_y_change, names='value')\n", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "length": 1433, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "821b5076e7642f35d6db6b0af29ca2ff7694928b53b0dace"}
{"input": "", "context": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing NLog;\nusing NzbDrone.Common.Disk;\nusing NzbDrone.Common.Extensions;\nusing NzbDrone.Common.TPL;\nusing NzbDrone.Core.Configuration;\nusing NzbDrone.Core.Configuration.Events;\nusing NzbDrone.Core.Datastore.Events;\nusing NzbDrone.Core.Lifecycle;\nusing NzbDrone.Core.MediaFiles.Commands;\nusing NzbDrone.Core.Messaging.Commands;\nusing NzbDrone.Core.Messaging.Events;\nusing NzbDrone.Core.RootFolders;\nnamespace NzbDrone.Core.MediaFiles\n{\n    public interface IRootFolderWatchingService\n    {\n        void ReportFileSystemChangeBeginning(params string[] paths);\n    }\n    public sealed class RootFolderWatchingService : IRootFolderWatchingService,\n        IDisposable,\n        IHandle<ModelEvent<RootFolder>>,\n        IHandle<ApplicationStartedEvent>,\n        IHandle<ConfigSavedEvent>\n    {\n        private const int DEBOUNCE_TIMEOUT_SECONDS = 30;\n        private readonly ConcurrentDictionary<string, FileSystemWatcher> _fileSystemWatchers = new ConcurrentDictionary<string, FileSystemWatcher>();\n        private readonly ConcurrentDictionary<string, int> _tempIgnoredPaths = new ConcurrentDictionary<string, int>();\n        private readonly ConcurrentDictionary<string, string> _changedPaths = new ConcurrentDictionary<string, string>();\n        private readonly IRootFolderService _rootFolderService;\n        private readonly IManageCommandQueue _commandQueueManager;\n        private readonly IConfigService _configService;\n        private readonly Logger _logger;\n        private readonly Debouncer _scanDebouncer;\n        private bool _watchForChanges;\n        public RootFolderWatchingService(IRootFolderService rootFolderService,\n                                         IManageCommandQueue commandQueueManager,\n                                         IConfigService configService,\n                                         Logger logger)\n        {\n            _rootFolderService = rootFolderService;\n            _commandQueueManager = commandQueueManager;\n            _configService = configService;\n            _logger = logger;\n            _scanDebouncer = new Debouncer(ScanPending, TimeSpan.FromSeconds(DEBOUNCE_TIMEOUT_SECONDS), true);\n        }\n        public void Dispose()\n        {\n            foreach (var watcher in _fileSystemWatchers.Values)\n            {\n                DisposeWatcher(watcher, false);\n            }\n        }\n        public void ReportFileSystemChangeBeginning(params string[] paths)\n        {\n            foreach (var path in paths.Where(x => x.IsNotNullOrWhiteSpace()))\n            {\n                _logger.Trace($\"reporting start of change to {path}\");\n                _tempIgnoredPaths.AddOrUpdate(path.CleanFilePathBasic(), 1, (key, value) => value + 1);\n            }\n        }\n        public void Handle(ApplicationStartedEvent message)\n        {\n            _watchForChanges = _configService.WatchLibraryForChanges;\n            if (_watchForChanges)\n            {\n                _rootFolderService.All().ForEach(x => StartWatchingPath(x.Path));\n            }\n        }\n        public void Handle(ConfigSavedEvent message)\n        {\n            var oldWatch = _watchForChanges;\n            _watchForChanges = _configService.WatchLibraryForChanges;\n            if (_watchForChanges != oldWatch)\n            {\n                if (_watchForChanges)\n                {\n                    _rootFolderService.All().ForEach(x => StartWatchingPath(x.Path));\n                }\n                else\n                {\n                    _rootFolderService.All().ForEach(x => StopWatchingPath(x.Path));\n                }\n            }\n        }\n        public void Handle(ModelEvent<RootFolder> message)\n        {\n            if (message.Action == ModelAction.Created && _watchForChanges)\n            {\n                StartWatchingPath(message.Model.Path);\n            }\n            else if (message.Action == ModelAction.Deleted)\n            {\n                StopWatchingPath(message.Model.Path);\n            }\n        }\n        private void StartWatchingPath(string path)\n        {\n            // Already being watched\n            if (_fileSystemWatchers.ContainsKey(path))\n            {\n                return;\n            }\n            // Creating a FileSystemWatcher over the LAN can take hundreds of milliseconds, so wrap it in a Task to do them all in parallel\n            Task.Run(() =>\n            {\n                try\n                {\n                    var newWatcher = new FileSystemWatcher(path, \"*\")\n                    {\n                        IncludeSubdirectories = true,\n                        InternalBufferSize = 65536,\n                        NotifyFilter = NotifyFilters.DirectoryName | NotifyFilters.FileName | NotifyFilters.LastWrite\n                    };\n                    newWatcher.Created += Watcher_Changed;\n                    newWatcher.Deleted += Watcher_Changed;\n                    newWatcher.Renamed += Watcher_Changed;\n                    newWatcher.Changed += Watcher_Changed;\n                    newWatcher.Error += Watcher_Error;\n                    if (_fileSystemWatchers.TryAdd(path, newWatcher))\n                    {\n                        newWatcher.EnableRaisingEvents = true;\n                        _logger.Info(\"Watching directory {0}\", path);\n                    }\n                    else\n                    {\n                        DisposeWatcher(newWatcher, false);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.Error(ex, \"Error watching path: {0}\", path);\n                }\n            });\n        }\n        private void StopWatchingPath(string path)\n        {\n            if (_fileSystemWatchers.TryGetValue(path, out var watcher))\n            {\n                DisposeWatcher(watcher, true);\n            }\n        }\n        private void Watcher_Error(object sender, ErrorEventArgs e)\n        {\n            var ex = e.GetException();\n            var dw = (FileSystemWatcher)sender;\n            if (ex.GetType() == typeof(InternalBufferOverflowException))\n            {\n                _logger.Warn(ex, \"The file system watcher experienced an internal buffer overflow for: {0}\", dw.Path);\n                _changedPaths.TryAdd(dw.Path, dw.Path);\n                _scanDebouncer.Execute();\n            }\n            else\n            {\n                _logger.Error(ex, \"Error in Directory watcher for: {0}\" + dw.Path);\n                DisposeWatcher(dw, true);\n            }\n        }\n        private void Watcher_Changed(object sender, FileSystemEventArgs e)\n        {\n            try\n            {\n                var rootFolder = ((FileSystemWatcher)sender).Path;\n                var path = e.FullPath;\n                if (path.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"path\");\n                }\n                _changedPaths.TryAdd(path, rootFolder);\n                _scanDebouncer.Execute();\n            }\n            catch (Exception ex)\n            {\n                _logger.Error(ex, \"Exception in ReportFileSystemChanged. Path: {0}\", e.FullPath);\n            }\n        }\n        private void ScanPending()\n        {\n            var pairs = _changedPaths.ToArray();\n            _changedPaths.Clear();\n            var ignored = _tempIgnoredPaths.Keys.ToArray();\n            _tempIgnoredPaths.Clear();\n            var toScan = new HashSet<string>();\n            foreach (var item in pairs)\n            {\n                var path = item.Key.CleanFilePathBasic();\n                var rootFolder = item.Value;\n", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "length": 513, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "33a191efb28d5b529c26b622495441d20e705cfb2dc5be9f"}
{"input": "", "context": "package com.electronwill.nightconfig.core.utils;\nimport java.util.AbstractMap;\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\n/**\n *\n * A TransformingMap contains an internal {@code Map<K, InternalV>} values, and exposes the\n * features of a {@code Map<K, ExternalV>} applying transformations to the values.\n * <p>\n * The transformations are applied \"just in time\", that is, the values are converted only when\n * they are used, not during the construction of the TransformingMap.\n * <p>\n * For instance, if you have a {@code Map<String, String>} and you want to convert its values\n * \"just in time\" to integers, you use a {@code TransformingMap<String, String, Integer>}.\n * To get one, you create these three functions:\n * <ul>\n * <li>one that converts a String to an Integer: that's the parse transformation. It converts an\n * Integer read from the internal map to a String.\n * <li>one that converts an Integer to a String: that's the write transformation. It converts a\n * String given to the TransformingMap to an Integer.\n * <li>one that converts an Object to another Object: that's the search transformation. It is used\n * (mainly) by the {@link #containsKey(Object)} method of the TransformingMap. If its argument is\n * an Integer then it should convert it to an String in the same way as the write transformation.\n * Otherwise, it is free to try to convert it to a String if possible, or not to.\n * </ul>\n *\n * @author TheElectronWill\n */\n@SuppressWarnings(\"unchecked\")\npublic final class TransformingMap<K, I, E> extends AbstractMap<K, E> {\n\tprivate final BiFunction<K, ? super I, ? extends E> readTransform;\n\tprivate final BiFunction<K, ? super E, ? extends I> writeTransform;\n\tprivate final Function<Object, ? extends I> searchTransform;\n\tprivate final Map<K, I> internalMap;\n\t/**\n\t * Create a new TransformingMap.\n\t *\n\t * @param map                  the internal map to use\n\t * @param readTransform   the parse transformation (see javadoc of the class)\n\t * @param writeTransform  the write transformation (see javadoc of the class)\n\t * @param searchTransform the search transformation (see javadoc of the class)\n\t */\n\tpublic TransformingMap(Map<K, I> map,\n\t\t\t\t\t\t   Function<? super I, ? extends E> readTransform,\n\t\t\t\t\t\t   Function<? super E, ? extends I> writeTransform,\n\t\t\t\t\t\t   Function<Object, ? extends I> searchTransform) {\n\t\tthis.internalMap = map;\n\t\tthis.readTransform = (k, v) -> readTransform.apply(v);\n\t\tthis.writeTransform = (k, v) -> writeTransform.apply(v);\n\t\tthis.searchTransform = searchTransform;\n\t}\n\t/**\n\t * Create a new TransformingMap.\n\t *\n\t * @param map                  the internal map to use\n\t * @param readTransform   the parse transformation (see javadoc of the class)\n\t * @param writeTransform  the write transformation (see javadoc of the class)\n\t * @param searchTransform the search transformation (see javadoc of the class)\n\t */\n\tpublic TransformingMap(Map<K, I> map,\n\t\t\t\t\t\t   BiFunction<K, ? super I, ? extends E> readTransform,\n\t\t\t\t\t\t   BiFunction<K, ? super E, ? extends I> writeTransform,\n\t\t\t\t\t\t   Function<Object, ? extends I> searchTransform) {\n\t\tthis.internalMap = map;\n\t\tthis.readTransform = readTransform;\n\t\tthis.writeTransform = writeTransform;\n\t\tthis.searchTransform = searchTransform;\n\t}\n\tprivate E read(Object key, I value) {\n\t\treturn readTransform.apply((K)key, value);\n\t}\n\tprivate I write(Object key, E value) {\n\t\treturn writeTransform.apply((K)key, value);\n\t}\n\tprivate I search(Object arg) {\n\t\treturn searchTransform.apply(arg);\n\t}\n\t@Override\n\tpublic int size() {\n\t\treturn internalMap.size();\n\t}\n\t@Override\n\tpublic boolean isEmpty() {\n\t\treturn internalMap.isEmpty();\n\t}\n\t@Override\n\tpublic boolean containsKey(Object key) {\n\t\treturn internalMap.containsKey(key);\n\t}\n\t@Override\n\tpublic boolean containsValue(Object value) {\n\t\treturn internalMap.containsValue(searchTransform.apply(value));\n\t}\n\t@Override\n\tpublic E get(Object key) {\n\t\treturn read(key, internalMap.get(key));\n\t}\n\t@Override\n\tpublic E put(K key, E value) {\n\t\treturn read(key, internalMap.put(key, write(key, value)));\n\t}\n\t@Override\n\tpublic E remove(Object key) {\n\t\treturn read(key, internalMap.remove(key));\n\t}\n\t@Override\n\tpublic void putAll(Map<? extends K, ? extends E> m) {\n\t\tinternalMap.putAll(new TransformingMap(m, writeTransform, (k, o) -> o, o -> o));\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tinternalMap.clear();\n\t}\n\t@Override\n\tpublic Set<K> keySet() {\n\t\treturn internalMap.keySet();\n\t}\n\t@Override\n\tpublic Collection<E> values() {\n\t\treturn new TransformingCollection<>(internalMap.values(), o->read(null,o),\n\t\t\t\t\t\t\t\t\t\t\to->write(null,o), searchTransform);\n\t}\n\t@Override\n\tpublic Set<Map.Entry<K, E>> entrySet() {\n\t\tFunction<Entry<K, I>, Entry<K, E>> read =\n\t\t\ti -> TransformingMapEntry.from(i, readTransform, writeTransform);\n\t\tFunction<Entry<K, E>, Entry<K, I>> write =\n\t\t\te -> TransformingMapEntry.from(e, writeTransform, readTransform);\n\t\tFunction<Object, Map.Entry<K, I>> search = o -> {\n\t\t\tif (o instanceof Map.Entry) {\n\t\t\t\tMap.Entry<K, E> entry = (Map.Entry)o;\n\t\t\t\treturn TransformingMapEntry.from(entry, writeTransform, readTransform);\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\treturn new TransformingSet<>(internalMap.entrySet(), read, write, search);\n\t}\n\t@Override\n\tpublic E getOrDefault(Object key, E defaultValue) {\n\t\tI result = internalMap.get(key);\n\t\treturn (result == null || result == defaultValue) ? defaultValue : read(key, result);\n\t}\n\t@Override\n\tpublic void forEach(BiConsumer<? super K, ? super E> action) {\n\t\tinternalMap.forEach((k, o) -> action.accept(k, read(k, o)));\n\t}\n\t@Override\n\tpublic void replaceAll(BiFunction<? super K, ? super E, ? extends E> function) {\n\t\tinternalMap.replaceAll(transform(function));\n\t}\n\t@Override\n\tpublic E putIfAbsent(K key, E value) {\n\t\treturn read(key, internalMap.putIfAbsent(key, write(key, value)));\n\t}\n\t@Override\n\tpublic boolean remove(Object key, Object value) {\n\t\treturn internalMap.remove(key, search(value));\n\t}\n\t@Override\n\tpublic boolean replace(K key, E oldValue, E newValue) {\n\t\treturn internalMap.replace(key, search(oldValue), write(key, newValue));\n\t}\n\t@Override\n\tpublic E replace(K key, E value) {\n\t\treturn read(key, internalMap.replace(key, write(key, value)));\n\t}\n\t@Override\n\tpublic E computeIfAbsent(K key, Function<? super K, ? extends E> mappingFunction) {\n\t\tFunction<K, I> function = k -> write(k, mappingFunction.apply(k));\n\t\treturn read(key, internalMap.computeIfAbsent(key, function));\n\t}\n\t@Override\n\tpublic E computeIfPresent(K key,\n\t\t\t\t\t\t\t  BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.computeIfPresent(key, transform(remappingFunction));\n", "answers": ["\t\treturn read(key, computed);"], "length": 837, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "6fac8d0b410c99d32f6421d53dcbd4534f8f4a65b4dcede9"}
{"input": "", "context": "###############################################################################\n#cyn.in is an open source Collaborative Knowledge Management Appliance that \n#enables teams to seamlessly work together on files, documents and content in \n#a secure central environment.\n#\n#cyn.in v2 an open source appliance is distributed under the GPL v3 license \n#along with commercial support options.\n#\n#cyn.in is a Cynapse Invention.\n#\n#Copyright (C) 2008 Cynapse India Pvt. Ltd.\n#\n#This program is free software: you can redistribute it and/or modify it under\n#the terms of the GNU General Public License as published by the Free Software \n#Foundation, either version 3 of the License, or any later version and observe \n#the Additional Terms applicable to this program and must display appropriate \n#legal notices. In accordance with Section 7(b) of the GNU General Public \n#License version 3, these Appropriate Legal Notices must retain the display of \n#the \"Powered by cyn.in\" AND \"A Cynapse Invention\" logos. You should have \n#received a copy of the detailed Additional Terms License with this program.\n#\n#This program is distributed in the hope that it will be useful,\n#but WITHOUT ANY WARRANTY; without even the implied warranty of \n#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General \n#Public License for more details.\n#\n#You should have received a copy of the GNU General Public License along with \n#this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n#You can contact Cynapse at support@cynapse.com with any problems with cyn.in. \n#For any queries regarding the licensing, please send your mails to \n# legal@cynapse.com\n#\n#You can also contact Cynapse at:\n#802, Building No. 1,\n#Dheeraj Sagar, Malad(W)\n#Mumbai-400064, India\n###############################################################################\nimport jsonlib\nfrom Products.CMFCore.utils import getToolByName\nfrom zope.component import getMultiAdapter\nfrom ubify.cyninv2theme import setCurrentStatusMessageForUser\nfrom ubify.cyninv2theme import getLocationListForAddContent\nfrom Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\nfrom ubify.policy import CyninMessageFactory as _\nfrom AccessControl import getSecurityManager\nfrom Acquisition import aq_inner, aq_parent\nfrom DateTime import DateTime\nfrom plone.intelligenttext.transforms import convertWebIntelligentPlainTextToHtml\nfrom ubify.policy import CyninMessageFactory as _\nfrom kss.core import force_unicode\nEmptymessageError = 'Empty message'\nEmptydiscussionError = 'Empty Discussion'\nRatingError = 'Rating Error'\nEmptycommentError = 'Empty comment text'\ndef get_displaycountforlist():\n    return 5\ndef canreply(obj):\n    return getSecurityManager().checkPermission('Reply to item', aq_inner(obj)) > 0\n    \ndef getjsondata(context,reply_dict,portal_url,item_url,extra_data={}):\n        site_encoding = context.plone_utils.getSiteEncoding()        \n        mi = getToolByName(context, 'portal_membership')\n        util = getToolByName(context,'translation_service')\n        output = {}\n        items = []\n        for eachobj in reply_dict:\n            temp = {}\n            temp['depth'] = 0\n            if eachobj.has_key('prev_id'):\n                temp['prev_id'] = eachobj['prev_id']\n            else:\n                temp['prev_id'] = ''\n            reply = eachobj['object']\n            if reply <> None:\n                temp['id'] = reply.id\n                temp['replyurl'] = reply.absolute_url()\n                temp['replytoid'] = '-1'\n                if reply.inReplyTo() and reply.inReplyTo().portal_type == 'Discussion Item':\n                    temp['replytoid'] = reply.inReplyTo().getId()\n                temp['depth'] = eachobj['depth']\n                temp['mdate'] = util.ulocalized_time(reply.ModificationDate(), 1, context, domain='plonelocales')                \n                creator = reply.Creator()\n                temp['userid'] = creator\n                temp['userinfourl'] = portal_url + '/userinfo?userid=' + creator\n                temp['useravatarurl'] = mi.getPersonalPortrait(creator).absolute_url()\n                temp['replycooked'] = reply.cooked_text.decode(site_encoding)                \n                temp['permalink'] = item_url + '#' + reply.id\n                \n            items.append(temp)\n        \n        output['items'] = items        \n        for key,val in extra_data.items():\n            output[key] = val\n        \n        return jsonlib.write(output)\n    \nclass CustomMethods(object):\n    \n    def findpreviouscommentid(self,allreplies,current_reply):\n        prev_id = ''        \n        indexlist =  [j for j in [allreplies.index(k) for k in allreplies if k['id'] == current_reply.id]]\n        if len(indexlist) > 0:\n            idx_reply = indexlist[0]\n            prev_idx = idx_reply - 1\n            #find id of an object with previndex\n            prev_list = [k['id'] for k in allreplies if allreplies.index(k) == prev_idx]\n            if len(prev_list) > 0:\n                prev_id = prev_list[0]\n                \n        return prev_id\n    \n    def get_replies(self,pd,object):\n        replies = []\n        def getRs(obj, replies, counter):\n            rs = pd.getDiscussionFor(obj).getReplies()\n            if len(rs) > 0:\n                rs.sort(lambda x, y: cmp(x.modified(), y.modified()))\n                for r in rs:\n                    replies.append({'depth':counter,'id':r.id, 'object':r})\n                    getRs(r, replies, counter=counter + 1)\n        try:\n            getRs(object, replies, 0)\n        except DiscussionNotAllowed:\n            # We tried to get discussions for an object that has not only\n            # discussions turned off but also no discussion container.\n            return []\n        return replies\n    \n    def setstatusmessage(self):        \n        portal_state = getMultiAdapter((self.context, self.request), name=u\"plone_portal_state\")\n        if portal_state.anonymous():\n            return\n        user_token = portal_state.member().getId()\n        if user_token is None:\n            return\n        \n        message = ''        \n        if self.request.form.has_key('com.cynapse.cynin.statusmessageinput'):\n            message = self.request.form['com.cynapse.cynin.statusmessageinput']\n        htmltitle = ''\n        if self.request.form.has_key('comcynapsesmessagetitle'):\n            htmltitle = self.request.form['comcynapsesmessagetitle']\n        message = message.strip(' ')\n        \n        if message == '' or message.lower() == htmltitle.lower():\n            raise EmptymessageError, 'Unable to set message.'\n        \n        obj = setCurrentStatusMessageForUser(portal_state.portal(),user_token,message,self.context)\n        \n        return message\n    \n    def creatediscussion(self):\n        strDiscussion = ''\n        strTags = ''\n        discussiontitle = ''\n        tagstitle = ''\n        obj = None\n        location = self.context\n        is_discussiontitle_reqd = False\n        strDiscussionTitle = ''\n        \n        portal_state = getMultiAdapter((self.context, self.request), name=u\"plone_portal_state\")\n        cat = getToolByName(self.context, 'uid_catalog')\n        portal = portal_state.portal()\n        if self.request.has_key('com.cynapse.cynin.discussionmessageinput'):\n            strDiscussion = self.request['com.cynapse.cynin.discussionmessageinput']\n        if self.request.has_key('comcynapsediscussiontag'):\n            strTags = self.request['comcynapsediscussiontag']\n        if self.request.has_key('comcynapsediscussiontitle'):\n            discussiontitle = self.request['comcynapsediscussiontitle']\n        if self.request.has_key('comcynapsetagstitle'):\n            tagstitle = self.request['comcynapsetagstitle']\n        if self.request.has_key('comcynapseadddiscussioncontextuid'):\n            locationuid = self.request['comcynapseadddiscussioncontextuid']\n        else:\n            locationuid = ''\n            \n        if self.request.has_key('com.cynapse.cynin.discussiontitle'):\n            is_discussiontitle_reqd = True\n            strDiscussionTitle = self.request['com.cynapse.cynin.discussiontitle']        \n        \n        query = {'UID':locationuid}\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            location = resbrains[0].getObject()\n        \n        if strDiscussion == '' or strDiscussion.lower() == discussiontitle.lower():            \n            raise EmptydiscussionError, 'Unable to add discussion with blank text.'\n        elif is_discussiontitle_reqd and (strDiscussionTitle == ''):\n            raise EmptydiscussionError, 'Unable to add discussion with blank title.'\n        else:\n            from ubify.cyninv2theme import addDiscussion\n            strActualTags = ''\n            if strTags.lower() != tagstitle.lower():\n                strActualTags = strTags\n            obj = addDiscussion(portal,strDiscussion,strActualTags,location,strDiscussionTitle)\n            if obj <> None:\n                here_text = _(u'lbl_here',u'here')\n                strlink = \"<a href='%s'>%s</a>\" % (obj.absolute_url(),self.context.translate(here_text),)\n                return strlink\n            \n    def fetchlocationstoaddcontent(self):\n        portal_state = getMultiAdapter((self.context, self.request), name=u\"plone_portal_state\")\n        portal = portal_state.portal()\n        \n        results = getLocationListForAddContent(portal)\n        \n        output = {}\n        items = []\n        for eachobj in results:\n            temp = {}\n            temp['title'] = force_unicode(eachobj['object'].Title,'utf8')\n            temp['UID'] = eachobj['object'].UID\n            temp['occ'] = ''\n            if eachobj['canAdd'] == False or 'Discussion' in eachobj['disallowedtypes']:\n                temp['occ'] = 'disabledspaceselection'\n            temp['depth'] = eachobj['depth']\n            items.append(temp)\n        \n        output['items'] = items\n        output = jsonlib.write(output)\n        \n    \n        return output\n    \n    def ratecontent(self):        \n        ratevalue = None\n        uid = None\n        if self.request.form.has_key('ratevalue'):\n            ratevalue = self.request.form['ratevalue']\n        if self.request.form.has_key('itemUID'):\n            uid = self.request.form['itemUID']\n            \n        if ratevalue is None:\n            raise RatingError,'No rating value.'\n        elif uid is None:\n            raise RatingError,'No rating item.'\n        else:\n            pr = getToolByName(self.context, 'portal_ratings', None)\n            cat = getToolByName(self.context, 'uid_catalog')\n            pr.addRating(int(ratevalue), uid)\n            \n            query = {'UID':uid}\n            resbrains = cat.searchResults(query)\n            if len(resbrains) == 1:\n                obj = resbrains[0].getObject()\n                obj.reindexObject()\n            \n            myval = int(pr.getUserRating(uid))\n            newval = int(pr.getRatingMean(uid))\n            ratecount = pr.getRatingCount(uid)\n            value_totalscore = pr.getCyninRating(uid)\n            value_scorecountlist = pr.getCyninRatingCount(uid)\n            value_pscore = value_scorecountlist['positivescore']\n            value_pcount = value_scorecountlist['positive']\n            value_nscore = value_scorecountlist['negativescore']\n            value_ncount = value_scorecountlist['negative']\n            \n            if myval == 1:\n                newtitle=_(u'hated_it',u\"Hate it (-2)\")\n            elif myval == 2:\n                newtitle=_(u'didnt_like_it',u\"Dislike it (-1)\")\n            elif myval == 3:\n                newtitle=''\n            elif myval == 4:\n                newtitle=_(u'liked_it',u\"Like it (+1)\")\n            elif myval == 5:\n                newtitle=_(u'loved_it',u\"Love it (+2)\")\n            \n            trans_title = self.context.translate(newtitle)\n            \n            if value_totalscore > 0:\n                plus_sign = \"+\"\n            else:\n                plus_sign = \"\"\n            totalscore = plus_sign + str(value_totalscore)\n            \n            output = trans_title + ',' + totalscore + ',' + str(value_pcount) + ',' + str(value_ncount)\n            return output\n    \n    def fetchcomments(self,uid,itemindex,lasttimestamp,commentcount,lastcommentid,viewtype):\n        \n        query = {'UID':uid}\n        pdt = getToolByName(self.context, 'portal_discussion', None)\n        cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        replydict = []\n        jsondata = getjsondata(self.context,replydict,self.context.portal_url(),'')        \n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            isDiscussable = contobj.isDiscussable()\n            canReply = canreply(contobj)\n            if isDiscussable and canReply:                \n                passedcommentcount = 0\n                passedcommentcount = int(commentcount)\n                flasttimestamp = float(lasttimestamp)\n                datefromlasttimestamp = DateTime(flasttimestamp)\n                newlastdate = datefromlasttimestamp.timeTime()\n                marker_delete_objectid = ''\n                removeallcomments = False\n                \n                disc_container = pdt.getDiscussionFor(contobj)\n                newreplycount = disc_container.replyCount(contobj)\n                allreplies = self.get_replies(pdt,contobj)\n                \n                if passedcommentcount <> newreplycount:                    \n                    jsondata = getjsondata(self.context,replydict,self.context.portal_url(),contobj.absolute_url())\n                    alldiscussions = disc_container.objectValues()\n                    newlastcommentid = lastcommentid\n                    \n                    newlyaddedcomments = [k for k in alldiscussions if k.modified().greaterThan(datefromlasttimestamp) and k.id not in (lastcommentid)]\n                    newlyaddedcomments.sort(lambda x,y:cmp(x.modified(),y.modified()))\n                    \n                    lenofnewcomments = len(newlyaddedcomments)\n                    display_count = get_displaycountforlist()\n                    \n                    lastxdiscussions = []\n                    if lenofnewcomments >= display_count:\n                        newlyaddedcomments.sort(lambda x,y:cmp(x.modified(),y.modified()),reverse=True)\n                        lastxdiscussions = newlyaddedcomments[:display_count]\n                        lastxdiscussions.sort(lambda x,y:cmp(x.modified(),y.modified()))\n                        if viewtype.lower() == 'listview':\n                            removeallcomments = True\n                    else:\n                        lastxdiscussions = newlyaddedcomments                        \n                        if lenofnewcomments > 0 and len(alldiscussions) > display_count and viewtype.lower() == 'listview':\n                            alldiscussions.sort(lambda x,y:cmp(x.modified(),y.modified()),reverse=True)\n                            marker_discussion = alldiscussions[display_count-1: display_count]\n                            if len(marker_discussion) > 0:\n                                #delete nodes before this item                                \n                                marker_delete_objectid = 'commenttable' + marker_discussion[0].id                                \n                    \n                    complete_output = ''\n                    list_reply_ids = []\n                    for eachcomment in lastxdiscussions:                    \n                        reply = disc_container.getReply(eachcomment.id)\n                        if reply <> None:     \n                            parentsInThread = reply.parentsInThread()\n                            depthvalue = 0\n                            if viewtype.lower() == 'threadedview':\n                                lenofparents = len(parentsInThread)\n                                depthvalue = lenofparents - 1\n                            \n                            prev_reply_id = self.findpreviouscommentid(allreplies,reply)\n                            \n                            newlastdate = reply.modified().timeTime()\n                            newlastcommentid = reply.id\n                            \n                            replydict.append({'depth': depthvalue, 'object': reply,'prev_id':prev_reply_id,'view_type':viewtype})\n                            list_reply_ids.append(reply.id)                            \n                            \n                    other_data = {}\n                    other_data['timeoutuid'] = uid\n                    other_data['timeoutindex'] = itemindex\n                    other_data['timeouttimestamp'] = str(newlastdate)\n                    other_data['timeoutlastcommentid'] = newlastcommentid\n                    other_data['timeoutcommentcount'] = str(newreplycount)\n                    \n                    other_data['marker_delete'] = marker_delete_objectid\n                    other_data['removeallcomments'] = str(removeallcomments)\n                    \n                    other_data['shownocomments'] = str(False)\n                    other_data['showmorecomments'] = str(False)\n                    other_data['view_type'] = viewtype\n                    other_data['canreply'] = str(canReply)\n                    \n                    if newreplycount > display_count:\n                        xmorecomments = newreplycount - display_count\n                        other_data['xmorecomments'] = str(xmorecomments)\n                        other_data['showmorecomments'] = str(True)\n                    elif newreplycount > 0 and newreplycount <= display_count:\n                        other_data['xmorecomments'] = ''\n                    else:\n                        other_data['shownocomments'] = str(True)\n                    \n                    jsondata = getjsondata(self.context,replydict,self.context.portal_url(),contobj.absolute_url(),other_data)\n        \n        return jsondata\n        \n    def fetchcommentsforlist(self):        \n        uid = self.request['comcynapsecyninfetchUID']\n        itemindex = self.request['comcynapsecyninfetchindex']\n        lasttimestamp = self.request['comcynapselasttimestamp']\n        lastcommentid = self.request['comcynapselastcommentid']\n        lastcommentcount = self.request['comcynapsecommentcount']\n        viewtype = self.request['comcynapseviewtype']\n        \n        return self.fetchcomments(uid,itemindex,lasttimestamp,lastcommentcount,lastcommentid,viewtype)\n        \n    def fetchnewcomments(self):        \n        uid = self.request['comcynapsecynincontextUID']\n        itemindex = ''\n        if self.request.has_key('comcynapsecyninfetchindex'):\n            itemindex = self.request['comcynapsecyninfetchindex']\n        lasttimestamp = self.request['comcynapselasttimestamp']\n        lastcommentid = self.request['comcynapselastcommentid']\n        lastcommentcount = self.request['comcynapsecommentcount']\n        viewtype = self.request['comcynapseviewtype']\n        \n        return self.fetchcomments(uid,itemindex,lasttimestamp,lastcommentcount,lastcommentid,viewtype)\n        \n    def addnewcomment(self):        \n        uid = ''\n        itemindex = ''\n        viewtype = ''\n        lasttimestamp = ''\n        lastcommentid = ''\n        commentscount = ''\n        inreplyto = ''\n        if self.request.has_key('comcynapsecynincontextUID'):\n            uid = self.request['comcynapsecynincontextUID']\n        if self.request.has_key('comcynapsecyninitemindex'):\n            itemindex = self.request['comcynapsecyninitemindex']\n        if self.request.has_key('comcynapseviewtype'):\n            viewtype = self.request['comcynapseviewtype']\n        if self.request.has_key('comcynapselasttimestamp'):\n            lasttimestamp = self.request['comcynapselasttimestamp']\n        if self.request.has_key('comcynapselastcommentid'):\n            lastcommentid = self.request['comcynapselastcommentid']\n        if self.request.has_key('comcynapsecommentcount'):\n            commentscount = self.request['comcynapsecommentcount']\n        if self.request.has_key('inreplyto'):\n            inreplyto = self.request['inreplyto']\n        \n        query = {'UID':uid}\n        pdt = getToolByName(self.context, 'portal_discussion', None)\n        cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\t    \n            \n            if contobj.isDiscussable() and canreply(contobj):\n                mtool = getToolByName(self.context, 'portal_membership')\n                username = mtool.getAuthenticatedMember().getId()\n                dobj = pdt.getDiscussionFor(contobj)\n                if len(self.request['comcynapsecyninNewCommentBody'].strip(' ')) == 0 or self.request['comcynapsecyninNewCommentBody'].lower() == self.request['comcynapsenewcommenttitle'].lower():                    \n                    raise EmptycommentError, 'No comment text provided.'\n                else:\n                    id = dobj.createReply(title=\"\",text=self.request['comcynapsecyninNewCommentBody'], Creator=username)\n                    reply = dobj.getReply(id)\n                    reply.cooked_text = convertWebIntelligentPlainTextToHtml(reply.text)\n                    if inreplyto != '':\n                        replyto = dobj.getReply(inreplyto)\n                        reply.setReplyTo(replyto)\n                    if reply <> None:\n                        from ubify.cyninv2theme import triggerAddOnDiscussionItem                        \n                        triggerAddOnDiscussionItem(reply)\n                        return self.fetchcomments(uid,itemindex,lasttimestamp,commentscount,lastcommentid,viewtype)\n                        \n    \n    def togglecommentsview(self):        \n        uid = ''\n        itemindex = ''\n        viewtype = ''\n        if self.request.has_key('uid'):\n            uid = self.request['uid']\n        if self.request.has_key('viewtype'):\n            viewtype = self.request['viewtype']\n        \n        objcommentslist = []\n        replydict = []\n        jsondata = getjsondata(self.context,replydict,self.context.portal_url(),'')\n        \n        pdt = getToolByName(self.context, 'portal_discussion', None)\n        query = {'UID':uid}\n", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "length": 1519, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "b581893ac400757aaad32eed292afd06559e04175e8d6fdf"}
{"input": "", "context": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.IO;\nusing System.Runtime.InteropServices;\nnamespace Server\n{\n\tpublic class TileMatrix\n\t{\n\t\tprivate static readonly ILog log = LogManager.GetLogger( System.Reflection.MethodBase.GetCurrentMethod().DeclaringType );\n\t\tprivate readonly Tile[][][][][] m_StaticTiles;\n\t\tprivate readonly Tile[][][] m_LandTiles;\n\t\tprivate readonly Tile[] m_InvalidLandBlock;\n\t\tprivate readonly UopIndex m_MapIndex;\n\t\tprivate readonly int m_FileIndex;\n\t\tprivate readonly int[][] m_StaticPatches;\n\t\tprivate readonly int[][] m_LandPatches;\n\t\tpublic Map Owner { get; }\n\t\tpublic int BlockWidth { get; }\n\t\tpublic int BlockHeight { get; }\n\t\tpublic int Width { get; }\n\t\tpublic int Height { get; }\n\t\tpublic FileStream MapStream { get; set; }\n\t\tpublic bool MapUOPPacked => ( m_MapIndex != null );\n\t\tpublic FileStream IndexStream { get; set; }\n\t\tpublic FileStream DataStream { get; set; }\n\t\tpublic BinaryReader IndexReader { get; set; }\n\t\tpublic bool Exists => ( MapStream != null && IndexStream != null && DataStream != null );\n\t\tprivate static readonly List<TileMatrix> m_Instances = new List<TileMatrix>();\n\t\tprivate readonly List<TileMatrix> m_FileShare;\n\t\tpublic TileMatrix( Map owner, int fileIndex, int mapID, int width, int height )\n\t\t{\n\t\t\tm_FileShare = new List<TileMatrix>();\n\t\t\tfor ( int i = 0; i < m_Instances.Count; ++i )\n\t\t\t{\n\t\t\t\tTileMatrix tm = m_Instances[i];\n\t\t\t\tif ( tm.m_FileIndex == fileIndex )\n\t\t\t\t{\n\t\t\t\t\ttm.m_FileShare.Add( this );\n\t\t\t\t\tm_FileShare.Add( tm );\n\t\t\t\t}\n\t\t\t}\n\t\t\tm_Instances.Add( this );\n\t\t\tm_FileIndex = fileIndex;\n\t\t\tWidth = width;\n\t\t\tHeight = height;\n\t\t\tBlockWidth = width >> 3;\n\t\t\tBlockHeight = height >> 3;\n\t\t\tOwner = owner;\n\t\t\tif ( fileIndex != 0x7F )\n\t\t\t{\n\t\t\t\tstring mapPath = Core.FindDataFile( \"map{0}.mul\", fileIndex );\n\t\t\t\tif ( File.Exists( mapPath ) )\n\t\t\t\t{\n\t\t\t\t\tMapStream = new FileStream( mapPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmapPath = Core.FindDataFile( \"map{0}LegacyMUL.uop\", fileIndex );\n\t\t\t\t\tif ( File.Exists( mapPath ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tMapStream = new FileStream( mapPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite );\n\t\t\t\t\t\tm_MapIndex = new UopIndex( MapStream );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstring indexPath = Core.FindDataFile( \"staidx{0}.mul\", fileIndex );\n\t\t\t\tif ( File.Exists( indexPath ) )\n\t\t\t\t{\n\t\t\t\t\tIndexStream = new FileStream( indexPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite );\n\t\t\t\t\tIndexReader = new BinaryReader( IndexStream );\n\t\t\t\t}\n\t\t\t\tstring staticsPath = Core.FindDataFile( \"statics{0}.mul\", fileIndex );\n\t\t\t\tif ( File.Exists( staticsPath ) )\n\t\t\t\t\tDataStream = new FileStream( staticsPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite );\n\t\t\t}\n\t\t\tEmptyStaticBlock = new Tile[8][][];\n\t\t\tfor ( int i = 0; i < 8; ++i )\n\t\t\t{\n\t\t\t\tEmptyStaticBlock[i] = new Tile[8][];\n\t\t\t\tfor ( int j = 0; j < 8; ++j )\n\t\t\t\t\tEmptyStaticBlock[i][j] = new Tile[0];\n\t\t\t}\n\t\t\tm_InvalidLandBlock = new Tile[196];\n\t\t\tm_LandTiles = new Tile[BlockWidth][][];\n\t\t\tm_StaticTiles = new Tile[BlockWidth][][][][];\n\t\t\tm_StaticPatches = new int[BlockWidth][];\n\t\t\tm_LandPatches = new int[BlockWidth][];\n\t\t}\n\t\tpublic Tile[][][] EmptyStaticBlock { get; }\n\t\tpublic void SetStaticBlock( int x, int y, Tile[][][] value )\n\t\t{\n\t\t\tif ( x < 0 || y < 0 || x >= BlockWidth || y >= BlockHeight )\n\t\t\t\treturn;\n\t\t\tif ( m_StaticTiles[x] == null )\n\t\t\t\tm_StaticTiles[x] = new Tile[BlockHeight][][][];\n\t\t\tm_StaticTiles[x][y] = value;\n\t\t\tif ( m_StaticPatches[x] == null )\n\t\t\t\tm_StaticPatches[x] = new int[( BlockHeight + 31 ) >> 5];\n\t\t\tm_StaticPatches[x][y >> 5] |= 1 << ( y & 0x1F );\n\t\t}\n\t\tpublic Tile[][][] GetStaticBlock( int x, int y )\n\t\t{\n\t\t\tif ( x < 0 || y < 0 || x >= BlockWidth || y >= BlockHeight || DataStream == null || IndexStream == null )\n\t\t\t\treturn EmptyStaticBlock;\n\t\t\tif ( m_StaticTiles[x] == null )\n\t\t\t\tm_StaticTiles[x] = new Tile[BlockHeight][][][];\n\t\t\tTile[][][] tiles = m_StaticTiles[x][y];\n\t\t\tif ( tiles == null )\n\t\t\t{\n\t\t\t\tfor ( int i = 0; tiles == null && i < m_FileShare.Count; ++i )\n\t\t\t\t{\n\t\t\t\t\tTileMatrix shared = m_FileShare[i];\n\t\t\t\t\tif ( x >= 0 && x < shared.BlockWidth && y >= 0 && y < shared.BlockHeight )\n\t\t\t\t\t{\n\t\t\t\t\t\tTile[][][][] theirTiles = shared.m_StaticTiles[x];\n\t\t\t\t\t\tif ( theirTiles != null )\n\t\t\t\t\t\t\ttiles = theirTiles[y];\n\t\t\t\t\t\tif ( tiles != null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint[] theirBits = shared.m_StaticPatches[x];\n\t\t\t\t\t\t\tif ( theirBits != null && ( theirBits[y >> 5] & ( 1 << ( y & 0x1F ) ) ) != 0 )\n\t\t\t\t\t\t\t\ttiles = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( tiles == null )\n\t\t\t\t\ttiles = ReadStaticBlock( x, y );\n\t\t\t\tm_StaticTiles[x][y] = tiles;\n\t\t\t}\n\t\t\treturn tiles;\n\t\t}\n\t\tpublic Tile[] GetStaticTiles( int x, int y )\n\t\t{\n\t\t\tTile[][][] tiles = GetStaticBlock( x >> 3, y >> 3 );\n\t\t\treturn Season.PatchTiles( tiles[x & 0x7][y & 0x7], Owner.Season );\n\t\t}\n\t\tprivate static readonly TileList m_TilesList = new TileList();\n\t\tpublic Tile[] GetStaticTiles( int x, int y, bool multis )\n\t\t{\n\t\t\tif ( !multis )\n\t\t\t\treturn GetStaticTiles( x, y );\n\t\t\tTile[][][] tiles = GetStaticBlock( x >> 3, y >> 3 );\n\t\t\tvar eable = Owner.GetMultiTilesAt( x, y );\n\t\t\tif ( !eable.Any() )\n\t\t\t\treturn Season.PatchTiles( tiles[x & 0x7][y & 0x7], Owner.Season );\n\t\t\tforeach ( Tile[] multiTiles in eable )\n\t\t\t{\n\t\t\t\tm_TilesList.AddRange( multiTiles );\n\t\t\t}\n\t\t\tm_TilesList.AddRange( Season.PatchTiles( tiles[x & 0x7][y & 0x7], Owner.Season ) );\n\t\t\treturn m_TilesList.ToArray();\n\t\t}\n\t\tpublic void SetLandBlock( int x, int y, Tile[] value )\n\t\t{\n\t\t\tif ( x < 0 || y < 0 || x >= BlockWidth || y >= BlockHeight )\n\t\t\t\treturn;\n\t\t\tif ( m_LandTiles[x] == null )\n\t\t\t\tm_LandTiles[x] = new Tile[BlockHeight][];\n\t\t\tm_LandTiles[x][y] = value;\n\t\t\tif ( m_LandPatches[x] == null )\n\t\t\t\tm_LandPatches[x] = new int[( BlockHeight + 31 ) >> 5];\n\t\t\tm_LandPatches[x][y >> 5] |= 1 << ( y & 0x1F );\n\t\t}\n\t\tpublic Tile[] GetLandBlock( int x, int y )\n\t\t{\n\t\t\tif ( x < 0 || y < 0 || x >= BlockWidth || y >= BlockHeight || MapStream == null )\n\t\t\t\treturn m_InvalidLandBlock;\n\t\t\tif ( m_LandTiles[x] == null )\n\t\t\t\tm_LandTiles[x] = new Tile[BlockHeight][];\n\t\t\tTile[] tiles = m_LandTiles[x][y];\n\t\t\tif ( tiles == null )\n\t\t\t{\n\t\t\t\tfor ( int i = 0; tiles == null && i < m_FileShare.Count; ++i )\n\t\t\t\t{\n\t\t\t\t\tTileMatrix shared = m_FileShare[i];\n\t\t\t\t\tif ( x >= 0 && x < shared.BlockWidth && y >= 0 && y < shared.BlockHeight )\n\t\t\t\t\t{\n\t\t\t\t\t\tTile[][] theirTiles = shared.m_LandTiles[x];\n\t\t\t\t\t\tif ( theirTiles != null )\n\t\t\t\t\t\t\ttiles = theirTiles[y];\n\t\t\t\t\t\tif ( tiles != null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint[] theirBits = shared.m_LandPatches[x];\n\t\t\t\t\t\t\tif ( theirBits != null && ( theirBits[y >> 5] & ( 1 << ( y & 0x1F ) ) ) != 0 )\n\t\t\t\t\t\t\t\ttiles = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( tiles == null )\n\t\t\t\t\ttiles = ReadLandBlock( x, y );\n\t\t\t\tm_LandTiles[x][y] = tiles;\n\t\t\t}\n\t\t\treturn tiles;\n\t\t}\n\t\tpublic Tile GetLandTile( int x, int y )\n\t\t{\n\t\t\tTile[] tiles = GetLandBlock( x >> 3, y >> 3 );\n\t\t\treturn tiles[( ( y & 0x7 ) << 3 ) + ( x & 0x7 )];\n\t\t}\n\t\tprivate static TileList[][] m_Lists;\n\t\tprivate static byte[] m_Buffer;\n\t\tprivate static StaticTile[] m_TileBuffer = new StaticTile[128];\n\t\tprivate unsafe Tile[][][] ReadStaticBlock( int x, int y )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIndexReader.BaseStream.Seek( ( ( x * BlockHeight ) + y ) * 12, SeekOrigin.Begin );\n\t\t\t\tint lookup = IndexReader.ReadInt32();\n\t\t\t\tint length = IndexReader.ReadInt32();\n\t\t\t\tif ( lookup < 0 || length <= 0 )\n\t\t\t\t{\n\t\t\t\t\treturn EmptyStaticBlock;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint count = length / 7;\n\t\t\t\t\tDataStream.Seek( lookup, SeekOrigin.Begin );\n\t\t\t\t\tif ( m_TileBuffer.Length < count )\n\t\t\t\t\t\tm_TileBuffer = new StaticTile[count];\n\t\t\t\t\tStaticTile[] staTiles = m_TileBuffer; // new StaticTile[tileCount];\n\t\t\t\t\tfixed ( StaticTile* pTiles = staTiles )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( m_Buffer == null || length > m_Buffer.Length )\n\t\t\t\t\t\t\tm_Buffer = new byte[length];\n\t\t\t\t\t\tDataStream.Read( m_Buffer, 0, length );\n\t\t\t\t\t\tMarshal.Copy( m_Buffer, 0, new IntPtr( pTiles ), length );\n\t\t\t\t\t\tif ( m_Lists == null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tm_Lists = new TileList[8][];\n\t\t\t\t\t\t\tfor ( int i = 0; i < 8; ++i )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tm_Lists[i] = new TileList[8];\n\t\t\t\t\t\t\t\tfor ( int j = 0; j < 8; ++j )\n\t\t\t\t\t\t\t\t\tm_Lists[i][j] = new TileList();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTileList[][] lists = m_Lists;\n\t\t\t\t\t\tfor ( int i = 0; i < count; i++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tStaticTile* pCur = pTiles + i;\n\t\t\t\t\t\t\tlists[pCur->m_X & 0x7][pCur->m_Y & 0x7].Add( pCur->m_ID, pCur->m_Z );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTile[][][] tiles = new Tile[8][][];\n\t\t\t\t\t\tfor ( int i = 0; i < 8; ++i )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttiles[i] = new Tile[8][];\n\t\t\t\t\t\t\tfor ( int j = 0; j < 8; ++j )\n\t\t\t\t\t\t\t\ttiles[i][j] = lists[i][j].ToArray();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn tiles;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch ( EndOfStreamException )\n\t\t\t{\n\t\t\t\tif ( DateTime.UtcNow >= m_NextStaticWarning )\n\t\t\t\t{\n\t\t\t\t\tlog.Warning( \"Static EOS for {0} ({1}, {2})\", Owner, x, y );\n\t\t\t\t\tm_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );\n\t\t\t\t}\n\t\t\t\treturn EmptyStaticBlock;\n\t\t\t}\n\t\t}\n\t\tprivate DateTime m_NextStaticWarning;\n\t\tprivate DateTime m_NextLandWarning;\n\t\tprivate unsafe Tile[] ReadLandBlock( int x, int y )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tint offset = ( ( x * BlockHeight ) + y ) * 196 + 4;\n\t\t\t\tif ( m_MapIndex != null )\n\t\t\t\t\toffset = m_MapIndex.Lookup( offset );\n\t\t\t\tMapStream.Seek( offset, SeekOrigin.Begin );\n\t\t\t\tTile[] tiles = new Tile[64];\n\t\t\t\tfixed ( Tile* pTiles = tiles )\n\t\t\t\t{\n\t\t\t\t\tif ( m_Buffer == null || 192 > m_Buffer.Length )\n\t\t\t\t\t\tm_Buffer = new byte[192];\n\t\t\t\t\tMapStream.Read( m_Buffer, 0, 192 );\n\t\t\t\t\tMarshal.Copy( m_Buffer, 0, new IntPtr( pTiles ), 192 );\n\t\t\t\t}\n\t\t\t\treturn tiles;\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tif ( DateTime.UtcNow >= m_NextLandWarning )\n\t\t\t\t{\n\t\t\t\t\tlog.Warning( \"Land EOS for {0} ({1}, {2})\", Owner, x, y );\n\t\t\t\t\tm_NextLandWarning = DateTime.UtcNow + TimeSpan.FromMinutes( 1.0 );\n\t\t\t\t}\n\t\t\t\treturn m_InvalidLandBlock;\n\t\t\t}\n\t\t}\n\t\tpublic void Dispose()\n\t\t{\n\t\t\tif ( MapStream != null )\n\t\t\t\tMapStream.Close();\n\t\t\tif ( m_MapIndex != null )\n\t\t\t\tm_MapIndex.Close();\n\t\t\tif ( DataStream != null )\n\t\t\t\tDataStream.Close();\n\t\t\tif ( IndexReader != null )\n\t\t\t\tIndexReader.Close();\n\t\t}\n\t}\n\t[System.Runtime.InteropServices.StructLayout( System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 1 )]\n\tpublic struct StaticTile\n\t{\n\t\tpublic ushort m_ID;\n\t\tpublic byte m_X;\n\t\tpublic byte m_Y;\n\t\tpublic sbyte m_Z;\n\t\tpublic short m_Hue;\n\t}\n\t[System.Runtime.InteropServices.StructLayout( System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 1 )]\n\tpublic struct Tile\n\t{\n\t\tinternal ushort m_ID;\n\t\tinternal sbyte m_Z;\n\t\tpublic int ID\n\t\t{\n\t\t\tget { return m_ID; }\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "length": 1528, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "b5474d9a2623627f5e344cff1193ab0629353b34b75b1c81"}
{"input": "", "context": "/*\n * Copyright (c) Contributors, http://opensimulator.org/\n * See CONTRIBUTORS.TXT for a full list of copyright holders.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of the OpenSimulator Project nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nusing System;\nusing System.IO;\nusing System.Net;\nusing System.Net.Security;\nusing System.Web;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Text;\nusing System.Xml;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing OpenMetaverse;\nusing OpenMetaverse.StructuredData;\nusing log4net;\nusing Nini.Config;\nusing Nwc.XmlRpc;\nusing OpenSim.Framework;\nusing Mono.Addins;\nusing OpenSim.Framework.Capabilities;\nusing OpenSim.Framework.Servers;\nusing OpenSim.Framework.Servers.HttpServer;\nusing OpenSim.Region.Framework.Interfaces;\nusing OpenSim.Region.Framework.Scenes;\nusing Caps = OpenSim.Framework.Capabilities.Caps;\nusing System.Text.RegularExpressions;\nusing OpenSim.Server.Base;\nusing OpenSim.Services.Interfaces;\nusing OSDMap = OpenMetaverse.StructuredData.OSDMap;\nnamespace OpenSim.Region.OptionalModules.Avatar.Voice.FreeSwitchVoice\n{\n    [Extension(Path = \"/OpenSim/RegionModules\", NodeName = \"RegionModule\", Id = \"FreeSwitchVoiceModule\")]\n    public class FreeSwitchVoiceModule : ISharedRegionModule, IVoiceModule\n    {\n        private static readonly ILog m_log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);\n        // Capability string prefixes\n        private static readonly string m_parcelVoiceInfoRequestPath = \"0207/\";\n        private static readonly string m_provisionVoiceAccountRequestPath = \"0208/\";\n        private static readonly string m_chatSessionRequestPath = \"0209/\";\n        // Control info\n        private static bool   m_Enabled  = false;\n        // FreeSwitch server is going to contact us and ask us all\n        // sorts of things.\n        // SLVoice client will do a GET on this prefix\n        private static string m_freeSwitchAPIPrefix;\n        // We need to return some information to SLVoice\n        // figured those out via curl\n        // http://vd1.vivox.com/api2/viv_get_prelogin.php\n        //\n        // need to figure out whether we do need to return ALL of\n        // these...\n        private static string m_freeSwitchRealm;\n        private static string m_freeSwitchSIPProxy;\n        private static bool m_freeSwitchAttemptUseSTUN;\n        private static string m_freeSwitchEchoServer;\n        private static int m_freeSwitchEchoPort;\n        private static string m_freeSwitchDefaultWellKnownIP;\n        private static int m_freeSwitchDefaultTimeout;\n        private static string m_freeSwitchUrlResetPassword;\n        private uint m_freeSwitchServicePort;\n        private string m_openSimWellKnownHTTPAddress;\n//        private string m_freeSwitchContext;\n        private readonly Dictionary<string, string> m_UUIDName = new Dictionary<string, string>();\n        private Dictionary<string, string> m_ParcelAddress = new Dictionary<string, string>();\n        private IConfig m_Config;\n        private IFreeswitchService m_FreeswitchService;\n        public void Initialise(IConfigSource config)\n        {\n            m_Config = config.Configs[\"FreeSwitchVoice\"];\n            if (m_Config == null)\n                return;\n            if (!m_Config.GetBoolean(\"Enabled\", false))\n                return;\n            try\n            {\n                string serviceDll = m_Config.GetString(\"LocalServiceModule\",\n                        String.Empty);\n                if (serviceDll == String.Empty)\n                {\n                    m_log.Error(\"[FreeSwitchVoice]: No LocalServiceModule named in section FreeSwitchVoice.  Not starting.\");\n                    return;\n                }\n                Object[] args = new Object[] { config };\n                m_FreeswitchService = ServerUtils.LoadPlugin<IFreeswitchService>(serviceDll, args);\n                string jsonConfig = m_FreeswitchService.GetJsonConfig();\n                //m_log.Debug(\"[FreeSwitchVoice]: Configuration string: \" + jsonConfig);\n                OSDMap map = (OSDMap)OSDParser.DeserializeJson(jsonConfig);\n                m_freeSwitchAPIPrefix = map[\"APIPrefix\"].AsString();\n                m_freeSwitchRealm = map[\"Realm\"].AsString();\n                m_freeSwitchSIPProxy = map[\"SIPProxy\"].AsString();\n                m_freeSwitchAttemptUseSTUN = map[\"AttemptUseSTUN\"].AsBoolean();\n                m_freeSwitchEchoServer = map[\"EchoServer\"].AsString();\n                m_freeSwitchEchoPort = map[\"EchoPort\"].AsInteger();\n                m_freeSwitchDefaultWellKnownIP = map[\"DefaultWellKnownIP\"].AsString();\n                m_freeSwitchDefaultTimeout = map[\"DefaultTimeout\"].AsInteger();\n                m_freeSwitchUrlResetPassword = String.Empty;\n//                m_freeSwitchContext = map[\"Context\"].AsString();\n                if (String.IsNullOrEmpty(m_freeSwitchRealm) ||\n                    String.IsNullOrEmpty(m_freeSwitchAPIPrefix))\n                {\n                    m_log.Error(\"[FreeSwitchVoice]: Freeswitch service mis-configured.  Not starting.\");                    \n                    return;\n                }\n                // set up http request handlers for\n                // - prelogin: viv_get_prelogin.php\n                // - signin: viv_signin.php\n                // - buddies: viv_buddy.php\n                // - ???: viv_watcher.php\n                // - signout: viv_signout.php\n                MainServer.Instance.AddHTTPHandler(String.Format(\"{0}/viv_get_prelogin.php\", m_freeSwitchAPIPrefix),\n                                                     FreeSwitchSLVoiceGetPreloginHTTPHandler);\n                MainServer.Instance.AddHTTPHandler(String.Format(\"{0}/freeswitch-config\", m_freeSwitchAPIPrefix), FreeSwitchConfigHTTPHandler);\n                // RestStreamHandler h = new\n                // RestStreamHandler(\"GET\",\n                // String.Format(\"{0}/viv_get_prelogin.php\", m_freeSwitchAPIPrefix), FreeSwitchSLVoiceGetPreloginHTTPHandler);\n                //  MainServer.Instance.AddStreamHandler(h);\n                MainServer.Instance.AddHTTPHandler(String.Format(\"{0}/viv_signin.php\", m_freeSwitchAPIPrefix),\n                                 FreeSwitchSLVoiceSigninHTTPHandler);\n                MainServer.Instance.AddHTTPHandler(String.Format(\"{0}/viv_buddy.php\", m_freeSwitchAPIPrefix),\n                                 FreeSwitchSLVoiceBuddyHTTPHandler);\n                \n                MainServer.Instance.AddHTTPHandler(String.Format(\"{0}/viv_watcher.php\", m_freeSwitchAPIPrefix),\n                                 FreeSwitchSLVoiceWatcherHTTPHandler);                \n                m_log.InfoFormat(\"[FreeSwitchVoice]: using FreeSwitch server {0}\", m_freeSwitchRealm);\n                m_Enabled = true;\n                m_log.Info(\"[FreeSwitchVoice]: plugin enabled\");\n            }\n            catch (Exception e)\n            {\n                m_log.ErrorFormat(\"[FreeSwitchVoice]: plugin initialization failed: {0} {1}\", e.Message, e.StackTrace);\n                return;\n            }\n            // This here is a region module trying to make a global setting.\n            // Not really a good idea but it's Windows only, so I can't test.\n            try\n            {\n                ServicePointManager.ServerCertificateValidationCallback += CustomCertificateValidation;\n            }\n            catch (NotImplementedException)\n            {\n                try\n                {\n#pragma warning disable 0612, 0618\n                    // Mono does not implement the ServicePointManager.ServerCertificateValidationCallback yet!  Don't remove this!\n                    ServicePointManager.CertificatePolicy = new MonoCert();\n#pragma warning restore 0612, 0618\n                }\n                catch (Exception)\n                {\n                    // COmmented multiline spam log message\n                    //m_log.Error(\"[FreeSwitchVoice]: Certificate validation handler change not supported.  You may get ssl certificate validation errors teleporting from your region to some SSL regions.\");\n                }\n            }\n        }\n        public void PostInitialise()\n        {\n        }\n        public void AddRegion(Scene scene)\n        {\n            // We generate these like this: The region's external host name\n            // as defined in Regions.ini is a good address to use. It's a\n            // dotted quad (or should be!) and it can reach this host from\n            // a client. The port is grabbed from the region's HTTP server.\n            m_openSimWellKnownHTTPAddress = scene.RegionInfo.ExternalHostName;\n            m_freeSwitchServicePort = MainServer.Instance.Port;\n            if (m_Enabled)\n            {\n                // we need to capture scene in an anonymous method\n                // here as we need it later in the callbacks\n                scene.EventManager.OnRegisterCaps += delegate(UUID agentID, Caps caps)\n                    {\n                        OnRegisterCaps(scene, agentID, caps);\n                    };\n            }\n        }\n        public void RemoveRegion(Scene scene)\n        {\n        }\n        public void RegionLoaded(Scene scene)\n        {\n            if (m_Enabled)\n            {\n                m_log.Info(\"[FreeSwitchVoice]: registering IVoiceModule with the scene\");\n                // register the voice interface for this module, so the script engine can call us\n                scene.RegisterModuleInterface<IVoiceModule>(this);\n            }\n        }\n        public void Close()\n        {\n        }\n        public string Name\n        {\n            get { return \"FreeSwitchVoiceModule\"; }\n        }\n        public Type ReplaceableInterface\n        {\n            get { return null; }\n        }\n        // <summary>\n        // implementation of IVoiceModule, called by osSetParcelSIPAddress script function\n        // </summary>\n        public void setLandSIPAddress(string SIPAddress,UUID GlobalID)\n        {\n            m_log.DebugFormat(\"[FreeSwitchVoice]: setLandSIPAddress parcel id {0}: setting sip address {1}\",\n                                  GlobalID, SIPAddress);\n            lock (m_ParcelAddress)\n            {\n                if (m_ParcelAddress.ContainsKey(GlobalID.ToString()))\n                {\n                    m_ParcelAddress[GlobalID.ToString()] = SIPAddress;\n                }\n                else\n                {\n                    m_ParcelAddress.Add(GlobalID.ToString(), SIPAddress);\n                }\n            }\n        }\n        // <summary>\n        // OnRegisterCaps is invoked via the scene.EventManager\n        // everytime OpenSim hands out capabilities to a client\n        // (login, region crossing). We contribute two capabilities to\n        // the set of capabilities handed back to the client:\n        // ProvisionVoiceAccountRequest and ParcelVoiceInfoRequest.\n        //\n        // ProvisionVoiceAccountRequest allows the client to obtain\n        // the voice account credentials for the avatar it is\n        // controlling (e.g., user name, password, etc).\n        //\n        // ParcelVoiceInfoRequest is invoked whenever the client\n        // changes from one region or parcel to another.\n        //\n        // Note that OnRegisterCaps is called here via a closure\n        // delegate containing the scene of the respective region (see\n        // Initialise()).\n        // </summary>\n        public void OnRegisterCaps(Scene scene, UUID agentID, Caps caps)\n        {\n            m_log.DebugFormat(\n                \"[FreeSwitchVoice]: OnRegisterCaps() called with agentID {0} caps {1} in scene {2}\", \n                agentID, caps, scene.RegionInfo.RegionName);\n            string capsBase = \"/CAPS/\" + caps.CapsObjectPath;\n            caps.RegisterHandler(\n                \"ProvisionVoiceAccountRequest\",\n                new RestStreamHandler(\n                    \"POST\",\n                    capsBase + m_provisionVoiceAccountRequestPath,\n                    (request, path, param, httpRequest, httpResponse)\n                        => ProvisionVoiceAccountRequest(scene, request, path, param, agentID, caps),\n                    \"ProvisionVoiceAccountRequest\",\n                    agentID.ToString()));\n            caps.RegisterHandler(\n                \"ParcelVoiceInfoRequest\",\n                new RestStreamHandler(\n                    \"POST\",\n                    capsBase + m_parcelVoiceInfoRequestPath,\n                        (request, path, param, httpRequest, httpResponse)\n                            => ParcelVoiceInfoRequest(scene, request, path, param, agentID, caps),\n                    \"ParcelVoiceInfoRequest\",\n                    agentID.ToString()));\n            caps.RegisterHandler(\n                \"ChatSessionRequest\",\n                new RestStreamHandler(\n                    \"POST\",\n                    capsBase + m_chatSessionRequestPath,\n                            (request, path, param, httpRequest, httpResponse)\n                                => ChatSessionRequest(scene, request, path, param, agentID, caps),\n                    \"ChatSessionRequest\",\n                    agentID.ToString()));\n        }\n        /// <summary>\n        /// Callback for a client request for Voice Account Details\n        /// </summary>\n        /// <param name=\"scene\">current scene object of the client</param>\n        /// <param name=\"request\"></param>\n        /// <param name=\"path\"></param>\n        /// <param name=\"param\"></param>\n        /// <param name=\"agentID\"></param>\n        /// <param name=\"caps\"></param>\n        /// <returns></returns>\n        public string ProvisionVoiceAccountRequest(Scene scene, string request, string path, string param,\n                                                   UUID agentID, Caps caps)\n        {\n            m_log.DebugFormat(\n                \"[FreeSwitchVoice][PROVISIONVOICE]: ProvisionVoiceAccountRequest() request: {0}, path: {1}, param: {2}\", request, path, param);\n            \n            ScenePresence avatar = scene.GetScenePresence(agentID);\n            if (avatar == null)\n            {\n                System.Threading.Thread.Sleep(2000);\n                avatar = scene.GetScenePresence(agentID);\n                if (avatar == null)\n                    return \"<llsd>undef</llsd>\";\n            }\n            string avatarName = avatar.Name;\n            try\n            {\n                //XmlElement    resp;\n                string agentname = \"x\" + Convert.ToBase64String(agentID.GetBytes());\n                string password  = \"1234\";//temp hack//new UUID(Guid.NewGuid()).ToString().Replace('-','Z').Substring(0,16);\n                // XXX: we need to cache the voice credentials, as\n                // FreeSwitch is later going to come and ask us for\n                // those\n                agentname = agentname.Replace('+', '-').Replace('/', '_');\n                lock (m_UUIDName)\n                {\n                    if (m_UUIDName.ContainsKey(agentname))\n                    {\n                        m_UUIDName[agentname] = avatarName;\n                    }\n                    else\n                    {\n                        m_UUIDName.Add(agentname, avatarName);\n                    }\n                }\n                // LLSDVoiceAccountResponse voiceAccountResponse =\n               //     new LLSDVoiceAccountResponse(agentname, password, m_freeSwitchRealm, \"http://etsvc02.hursley.ibm.com/api\");\n               LLSDVoiceAccountResponse voiceAccountResponse =\n                   new LLSDVoiceAccountResponse(agentname, password, m_freeSwitchRealm,\n                                                String.Format(\"http://{0}:{1}{2}/\", m_openSimWellKnownHTTPAddress,\n                                                              m_freeSwitchServicePort, m_freeSwitchAPIPrefix));\n                string r = LLSDHelpers.SerialiseLLSDReply(voiceAccountResponse);\n//                m_log.DebugFormat(\"[FreeSwitchVoice][PROVISIONVOICE]: avatar \\\"{0}\\\": {1}\", avatarName, r);\n                return r;\n            }\n            catch (Exception e)\n            {\n                m_log.ErrorFormat(\"[FreeSwitchVoice][PROVISIONVOICE]: avatar \\\"{0}\\\": {1}, retry later\", avatarName, e.Message);\n                m_log.DebugFormat(\"[FreeSwitchVoice][PROVISIONVOICE]: avatar \\\"{0}\\\": {1} failed\", avatarName, e.ToString());\n                return \"<llsd>undef</llsd>\";\n            }\n        }\n        /// <summary>\n        /// Callback for a client request for ParcelVoiceInfo\n        /// </summary>\n        /// <param name=\"scene\">current scene object of the client</param>\n        /// <param name=\"request\"></param>\n        /// <param name=\"path\"></param>\n        /// <param name=\"param\"></param>\n        /// <param name=\"agentID\"></param>\n        /// <param name=\"caps\"></param>\n        /// <returns></returns>\n        public string ParcelVoiceInfoRequest(Scene scene, string request, string path, string param,\n                                             UUID agentID, Caps caps)\n        {\n            m_log.DebugFormat(\n                \"[FreeSwitchVoice][PARCELVOICE]: ParcelVoiceInfoRequest() on {0} for {1}\", \n                scene.RegionInfo.RegionName, agentID);\n            \n            ScenePresence avatar = scene.GetScenePresence(agentID);\n            string avatarName = avatar.Name;\n            // - check whether we have a region channel in our cache\n            // - if not:\n            //       create it and cache it\n            // - send it to the client\n            // - send channel_uri: as \"sip:regionID@m_sipDomain\"\n            try\n            {\n                LLSDParcelVoiceInfoResponse parcelVoiceInfo;\n                string channelUri;\n                if (null == scene.LandChannel)\n                    throw new Exception(String.Format(\"region \\\"{0}\\\": avatar \\\"{1}\\\": land data not yet available\",\n                                                      scene.RegionInfo.RegionName, avatarName));\n                // get channel_uri: check first whether estate\n                // settings allow voice, then whether parcel allows\n                // voice, if all do retrieve or obtain the parcel\n                // voice channel\n                LandData land = scene.GetLandData(avatar.AbsolutePosition);\n                //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": request: {4}, path: {5}, param: {6}\",\n                //                  scene.RegionInfo.RegionName, land.Name, land.LocalID, avatarName, request, path, param);\n                // TODO: EstateSettings don't seem to get propagated...\n                // if (!scene.RegionInfo.EstateSettings.AllowVoice)\n                // {\n                //     m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": voice not enabled in estate settings\",\n                //                       scene.RegionInfo.RegionName);\n                //     channel_uri = String.Empty;\n                // }\n                // else\n                if ((land.Flags & (uint)ParcelFlags.AllowVoiceChat) == 0)\n                {\n//                    m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": voice not enabled for parcel\",\n//                                      scene.RegionInfo.RegionName, land.Name, land.LocalID, avatarName);\n                    channelUri = String.Empty;\n                }\n                else\n                {\n", "answers": ["                    channelUri = ChannelUri(scene, land);"], "length": 1661, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "c357dc85d4b8de20bfeb7e4f0a5fb6c3f1e2ad3fba2c7691"}
{"input": "", "context": "using System;\nusing System.Drawing;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Windows.Forms;\nusing OpenDentBusiness;\nnamespace OpenDental{\n\t/// <summary>\n\t/// Summary description for FormBasicTemplate.\n\t/// </summary>\n\tpublic class FormPayPeriodEdit : System.Windows.Forms.Form{\n\t\tprivate OpenDental.UI.Button butCancel;\n\t\tprivate OpenDental.UI.Button butOK;\n\t\t/// <summary>\n\t\t/// Required designer variable.\n\t\t/// </summary>\n\t\tprivate System.ComponentModel.Container components = null;\n\t\t///<summary></summary>\n\t\tpublic bool IsNew;\n\t\tprivate ValidDate textDateStart;\n\t\tprivate Label label1;\n\t\tprivate ValidDate textDateStop;\n\t\tprivate Label label2;\n\t\tprivate ValidDate textDatePaycheck;\n\t\tprivate Label label3;\n\t\tprivate PayPeriod PayPeriodCur;\n\t\t///<summary></summary>\n\t\tpublic FormPayPeriodEdit(PayPeriod payPeriodCur)\n\t\t{\n\t\t\t//\n\t\t\t// Required for Windows Form Designer support\n\t\t\t//\n\t\t\tPayPeriodCur=payPeriodCur;\n\t\t\tInitializeComponent();\n\t\t\tLan.F(this);\n\t\t}\n\t\t/// <summary>\n\t\t/// Clean up any resources being used.\n\t\t/// </summary>\n\t\tprotected override void Dispose( bool disposing )\n\t\t{\n\t\t\tif( disposing )\n\t\t\t{\n\t\t\t\tif(components != null)\n\t\t\t\t{\n\t\t\t\t\tcomponents.Dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t\tbase.Dispose( disposing );\n\t\t}\n\t\t#region Windows Form Designer generated code\n\t\t/// <summary>\n\t\t/// Required method for Designer support - do not modify\n\t\t/// the contents of this method with the code editor.\n\t\t/// </summary>\n\t\tprivate void InitializeComponent()\n\t\t{\n\t\t\tOpenDental.UI.Button butDelete;\n\t\t\tSystem.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FormPayPeriodEdit));\n\t\t\tthis.butCancel = new OpenDental.UI.Button();\n\t\t\tthis.butOK = new OpenDental.UI.Button();\n\t\t\tthis.textDateStart = new OpenDental.ValidDate();\n\t\t\tthis.label1 = new System.Windows.Forms.Label();\n\t\t\tthis.textDateStop = new OpenDental.ValidDate();\n\t\t\tthis.label2 = new System.Windows.Forms.Label();\n\t\t\tthis.textDatePaycheck = new OpenDental.ValidDate();\n\t\t\tthis.label3 = new System.Windows.Forms.Label();\n\t\t\tbutDelete = new OpenDental.UI.Button();\n\t\t\tthis.SuspendLayout();\n\t\t\t// \n\t\t\t// butDelete\n\t\t\t// \n\t\t\tbutDelete.AdjustImageLocation = new System.Drawing.Point(0,0);\n\t\t\tbutDelete.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));\n\t\t\tbutDelete.Autosize = true;\n\t\t\tbutDelete.BtnShape = OpenDental.UI.enumType.BtnShape.Rectangle;\n\t\t\tbutDelete.BtnStyle = OpenDental.UI.enumType.XPStyle.Silver;\n\t\t\tbutDelete.CornerRadius = 4F;\n\t\t\tbutDelete.Image = global::OpenDental.Properties.Resources.deleteX;\n\t\t\tbutDelete.ImageAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\tbutDelete.Location = new System.Drawing.Point(15,137);\n\t\t\tbutDelete.Name = \"butDelete\";\n\t\t\tbutDelete.Size = new System.Drawing.Size(75,26);\n\t\t\tbutDelete.TabIndex = 16;\n\t\t\tbutDelete.Text = \"&Delete\";\n\t\t\tbutDelete.Click += new System.EventHandler(this.butDelete_Click);\n\t\t\t// \n\t\t\t// butCancel\n\t\t\t// \n\t\t\tthis.butCancel.AdjustImageLocation = new System.Drawing.Point(0,0);\n\t\t\tthis.butCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));\n\t\t\tthis.butCancel.Autosize = true;\n\t\t\tthis.butCancel.BtnShape = OpenDental.UI.enumType.BtnShape.Rectangle;\n\t\t\tthis.butCancel.BtnStyle = OpenDental.UI.enumType.XPStyle.Silver;\n\t\t\tthis.butCancel.CornerRadius = 4F;\n\t\t\tthis.butCancel.Location = new System.Drawing.Point(314,137);\n\t\t\tthis.butCancel.Name = \"butCancel\";\n\t\t\tthis.butCancel.Size = new System.Drawing.Size(75,26);\n\t\t\tthis.butCancel.TabIndex = 9;\n\t\t\tthis.butCancel.Text = \"&Cancel\";\n\t\t\tthis.butCancel.Click += new System.EventHandler(this.butCancel_Click);\n\t\t\t// \n\t\t\t// butOK\n\t\t\t// \n\t\t\tthis.butOK.AdjustImageLocation = new System.Drawing.Point(0,0);\n\t\t\tthis.butOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));\n\t\t\tthis.butOK.Autosize = true;\n\t\t\tthis.butOK.BtnShape = OpenDental.UI.enumType.BtnShape.Rectangle;\n\t\t\tthis.butOK.BtnStyle = OpenDental.UI.enumType.XPStyle.Silver;\n\t\t\tthis.butOK.CornerRadius = 4F;\n\t\t\tthis.butOK.Location = new System.Drawing.Point(314,105);\n\t\t\tthis.butOK.Name = \"butOK\";\n\t\t\tthis.butOK.Size = new System.Drawing.Size(75,26);\n\t\t\tthis.butOK.TabIndex = 8;\n\t\t\tthis.butOK.Text = \"&OK\";\n\t\t\tthis.butOK.Click += new System.EventHandler(this.butOK_Click);\n\t\t\t// \n\t\t\t// textDateStart\n\t\t\t// \n\t\t\tthis.textDateStart.Location = new System.Drawing.Point(111,24);\n\t\t\tthis.textDateStart.Name = \"textDateStart\";\n\t\t\tthis.textDateStart.Size = new System.Drawing.Size(100,20);\n\t\t\tthis.textDateStart.TabIndex = 10;\n\t\t\t// \n\t\t\t// label1\n\t\t\t// \n\t\t\tthis.label1.Location = new System.Drawing.Point(12,24);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(100,20);\n\t\t\tthis.label1.TabIndex = 11;\n\t\t\tthis.label1.Text = \"Start Date\";\n\t\t\tthis.label1.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textDateStop\n\t\t\t// \n\t\t\tthis.textDateStop.Location = new System.Drawing.Point(111,50);\n\t\t\tthis.textDateStop.Name = \"textDateStop\";\n\t\t\tthis.textDateStop.Size = new System.Drawing.Size(100,20);\n\t\t\tthis.textDateStop.TabIndex = 12;\n\t\t\t// \n\t\t\t// label2\n\t\t\t// \n\t\t\tthis.label2.Location = new System.Drawing.Point(12,50);\n\t\t\tthis.label2.Name = \"label2\";\n\t\t\tthis.label2.Size = new System.Drawing.Size(100,20);\n\t\t\tthis.label2.TabIndex = 13;\n\t\t\tthis.label2.Text = \"End Date\";\n\t\t\tthis.label2.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textDatePaycheck\n\t\t\t// \n\t\t\tthis.textDatePaycheck.Location = new System.Drawing.Point(111,76);\n\t\t\tthis.textDatePaycheck.Name = \"textDatePaycheck\";\n\t\t\tthis.textDatePaycheck.Size = new System.Drawing.Size(100,20);\n\t\t\tthis.textDatePaycheck.TabIndex = 14;\n\t\t\t// \n\t\t\t// label3\n\t\t\t// \n\t\t\tthis.label3.Location = new System.Drawing.Point(12,76);\n\t\t\tthis.label3.Name = \"label3\";\n\t\t\tthis.label3.Size = new System.Drawing.Size(100,20);\n\t\t\tthis.label3.TabIndex = 15;\n\t\t\tthis.label3.Text = \"Paycheck Date\";\n\t\t\tthis.label3.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// FormPayPeriodEdit\n\t\t\t// \n\t\t\tthis.AutoScaleBaseSize = new System.Drawing.Size(5,13);\n\t\t\tthis.ClientSize = new System.Drawing.Size(415,181);\n\t\t\tthis.Controls.Add(butDelete);\n\t\t\tthis.Controls.Add(this.textDatePaycheck);\n\t\t\tthis.Controls.Add(this.label3);\n\t\t\tthis.Controls.Add(this.textDateStop);\n\t\t\tthis.Controls.Add(this.label2);\n\t\t\tthis.Controls.Add(this.textDateStart);\n\t\t\tthis.Controls.Add(this.label1);\n\t\t\tthis.Controls.Add(this.butOK);\n\t\t\tthis.Controls.Add(this.butCancel);\n\t\t\tthis.Icon = ((System.Drawing.Icon)(resources.GetObject(\"$this.Icon\")));\n\t\t\tthis.MaximizeBox = false;\n\t\t\tthis.MinimizeBox = false;\n\t\t\tthis.Name = \"FormPayPeriodEdit\";\n\t\t\tthis.ShowInTaskbar = false;\n\t\t\tthis.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;\n\t\t\tthis.Text = \"Edit Pay Period\";\n\t\t\tthis.Load += new System.EventHandler(this.FormPayPeriodEdit_Load);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate void FormPayPeriodEdit_Load(object sender, System.EventArgs e) {\n\t\t\tif(PayPeriodCur.DateStart.Year>1880){\n\t\t\t\ttextDateStart.Text=PayPeriodCur.DateStart.ToShortDateString();\n\t\t\t}\n\t\t\tif(PayPeriodCur.DateStop.Year>1880){\n\t\t\t\ttextDateStop.Text=PayPeriodCur.DateStop.ToShortDateString();\n\t\t\t}\n\t\t\tif(PayPeriodCur.DatePaycheck.Year>1880){\n\t\t\t\ttextDatePaycheck.Text=PayPeriodCur.DatePaycheck.ToShortDateString();\n\t\t\t}\n\t\t}\n\t\tprivate void butDelete_Click(object sender,EventArgs e) {\n\t\t\tif(IsNew){\n\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriods.Delete(PayPeriodCur);\n\t\t\tDialogResult=DialogResult.OK;\n\t\t}\n\t\tprivate void butOK_Click(object sender, System.EventArgs e) {\n\t\t\tif(textDateStart.errorProvider1.GetError(textDateStart)!=\"\"\n\t\t\t\t|| textDateStop.errorProvider1.GetError(textDateStop)!=\"\"\n\t\t\t\t|| textDatePaycheck.errorProvider1.GetError(textDatePaycheck)!=\"\")\n\t\t\t{\n", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "length": 576, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "7c3bba0835a61180b3615e5a45405828fb9f896470cd8acb"}
{"input": "", "context": "# (C) British Crown Copyright 2013 - 2015, Met Office\n#\n# This file is part of Iris.\n#\n# Iris is free software: you can redistribute it and/or modify it under\n# the terms of the GNU Lesser General Public License as published by the\n# Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Iris is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with Iris.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"NAME file format loading functions.\"\"\"\nfrom __future__ import (absolute_import, division, print_function)\nfrom six.moves import range, zip\nimport collections\nimport datetime\nimport re\nimport warnings\nimport numpy as np\nfrom iris.coords import AuxCoord, DimCoord, CellMethod\nimport iris.coord_systems\nimport iris.cube\nfrom iris.exceptions import TranslationError\nimport iris.util\nimport iris.unit\nEARTH_RADIUS = 6371229.0\nNAMEIII_DATETIME_FORMAT = '%d/%m/%Y  %H:%M %Z'\nNAMEII_FIELD_DATETIME_FORMAT = '%H%M%Z %d/%m/%Y'\nNAMEII_TIMESERIES_DATETIME_FORMAT = '%d/%m/%Y  %H:%M:%S'\nNAMECoord = collections.namedtuple('NAMECoord', ['name',\n                                                 'dimension',\n                                                 'values'])\ndef _split_name_and_units(name):\n    units = None\n    if \"(\" in name and \")\" in name:\n        split = name.rsplit(\"(\", 1)\n        try_units = split[1].replace(\")\", \"\").strip()\n        try:\n            try_units = iris.unit.Unit(try_units)\n        except ValueError:\n            pass\n        else:\n            name = split[0].strip()\n            units = try_units\n    return name, units\ndef read_header(file_handle):\n    \"\"\"\n    Return a dictionary containing the header information extracted\n    from the the provided NAME file object.\n    Args:\n    * file_handle (file-like object):\n        A file-like object from which to read the header information.\n    Returns:\n        A dictionary containing the extracted header information.\n    \"\"\"\n    header = {}\n    header['NAME Version'] = file_handle.next().strip()\n    for line in file_handle:\n        words = line.split(':', 1)\n        if len(words) != 2:\n            break\n        key, value = [word.strip() for word in words]\n        header[key] = value\n    # Cast some values into floats or integers if they match a\n    # given name. Set any empty string values to None.\n    for key, value in header.items():\n        if value:\n            if key in ['X grid origin', 'Y grid origin',\n                       'X grid resolution', 'Y grid resolution']:\n                header[key] = float(value)\n            elif key in ['X grid size', 'Y grid size',\n                         'Number of preliminary cols',\n                         'Number of field cols',\n                         'Number of fields',\n                         'Number of series']:\n                header[key] = int(value)\n        else:\n            header[key] = None\n    return header\ndef _read_data_arrays(file_handle, n_arrays, shape):\n    \"\"\"\n    Return a list of NumPy arrays containing the data extracted from\n    the provided file object. The number and shape of the arrays\n    must be specified.\n    \"\"\"\n    data_arrays = [np.zeros(shape, dtype=np.float32) for\n                   i in range(n_arrays)]\n    # Iterate over the remaining lines which represent the data in\n    # a column form.\n    for line in file_handle:\n        # Split the line by comma, removing the last empty column\n        # caused by the trailing comma\n        vals = line.split(',')[:-1]\n        # Cast the x and y grid positions to integers and convert\n        # them to zero based indices\n        x = int(float(vals[0])) - 1\n        y = int(float(vals[1])) - 1\n        # Populate the data arrays (i.e. all columns but the leading 4).\n        for i, data_array in enumerate(data_arrays):\n            data_array[y, x] = float(vals[i + 4])\n    return data_arrays\ndef _build_lat_lon_for_NAME_field(header):\n    \"\"\"\n    Return regular latitude and longitude coordinates extracted from\n    the provided header dictionary.\n    \"\"\"\n    start = header['X grid origin']\n    step = header['X grid resolution']\n    count = header['X grid size']\n    pts = start + np.arange(count, dtype=np.float64) * step\n    lon = NAMECoord(name='longitude', dimension=1, values=pts)\n    start = header['Y grid origin']\n    step = header['Y grid resolution']\n    count = header['Y grid size']\n    pts = start + np.arange(count, dtype=np.float64) * step\n    lat = NAMECoord(name='latitude', dimension=0, values=pts)\n    return lat, lon\ndef _build_lat_lon_for_NAME_timeseries(column_headings):\n    \"\"\"\n    Return regular latitude and longitude coordinates extracted from\n    the provided column_headings dictionary.\n    \"\"\"\n    pattern = re.compile(r'\\-?[0-9]*\\.[0-9]*')\n    new_Xlocation_column_header = []\n    for t in column_headings['X']:\n        if 'Lat-Long' in t:\n            matches = pattern.search(t)\n            new_Xlocation_column_header.append(float(matches.group(0)))\n        else:\n            new_Xlocation_column_header.append(t)\n    column_headings['X'] = new_Xlocation_column_header\n    lon = NAMECoord(name='longitude', dimension=None,\n                    values=column_headings['X'])\n    new_Ylocation_column_header = []\n    for t in column_headings['Y']:\n        if 'Lat-Long' in t:\n            matches = pattern.search(t)\n            new_Ylocation_column_header.append(float(matches.group(0)))\n        else:\n            new_Ylocation_column_header.append(t)\n    column_headings['Y'] = new_Ylocation_column_header\n    lat = NAMECoord(name='latitude', dimension=None,\n                    values=column_headings['Y'])\n    return lat, lon\ndef _calc_integration_period(time_avgs):\n    \"\"\"\n    Return a list of datetime.timedelta objects determined from the provided\n    list of averaging/integration period column headings.\n    \"\"\"\n    integration_periods = []\n    pattern = re.compile(\n        r'(\\d{0,2})(day)?\\s*(\\d{1,2})(hr)?\\s*(\\d{1,2})(min)?\\s*(\\w*)')\n    for time_str in time_avgs:\n        days = 0\n        hours = 0\n        minutes = 0\n        matches = pattern.search(time_str)\n        if matches:\n            if len(matches.group(1)) > 0:\n                days = float(matches.group(1))\n            if len(matches.group(3)) > 0:\n                hours = float(matches.group(3))\n            if len(matches.group(1)) > 0:\n                minutes = float(matches.group(5))\n        total_hours = days * 24.0 + hours + minutes / 60.0\n        integration_periods.append(datetime.timedelta(hours=total_hours))\n    return integration_periods\ndef _parse_units(units):\n    \"\"\"\n    Return a known :class:`iris.unit.Unit` given a NAME unit\n    .. note::\n        * Some NAME units are not currently handled.\n        * Units which are in the wrong case (case is ignored in NAME)\n        * Units where the space between SI units is missing\n        * Units where the characters used are non-standard (i.e. 'mc' for\n          micro instead of 'u')\n    Args:\n    * units (string):\n        NAME units.\n    Returns:\n        An instance of :class:`iris.unit.Unit`.\n    \"\"\"\n    unit_mapper = {'Risks/m3': '1',    # Used for Bluetongue\n                   'TCID50s/m3': '1',  # Used for Foot and Mouth\n                   'TCID50/m3': '1',   # Used for Foot and Mouth\n                   'N/A': '1',         # Used for CHEMET area at risk\n                   'lb': 'pounds',     # pounds\n                   'oz': '1',          # ounces\n                   'deg': 'degree',    # angular degree\n                   'oktas': '1',       # oktas\n                   'deg C': 'deg_C',   # degrees Celsius\n                   'FL': 'unknown'     # flight level\n                   }\n    units = unit_mapper.get(units, units)\n    units = units.replace('Kg', 'kg')\n    units = units.replace('gs', 'g s')\n    units = units.replace('Bqs', 'Bq s')\n    units = units.replace('mcBq', 'uBq')\n    units = units.replace('mcg', 'ug')\n    try:\n        units = iris.unit.Unit(units)\n    except ValueError:\n        warnings.warn('Unknown units: {!r}'.format(units))\n        units = iris.unit.Unit(None)\n    return units\ndef _cf_height_from_name(z_coord):\n    \"\"\"\n    Parser for the z component of field headings.\n    This parse is specifically for handling the z component of NAME field\n    headings, which include height above ground level, height above sea level\n    and flight level etc.  This function returns an iris coordinate\n    representing this field heading.\n    Args:\n    * z_coord (list):\n        A field heading, specifically the z component.\n    Returns:\n        An instance of :class:`iris.coords.AuxCoord` representing the\n        interpretation of the supplied field heading.\n    \"\"\"\n    # NAMEII - integer/float support.\n    # Match against height agl, asl and Pa.\n    pattern = re.compile(r'^From\\s*'\n                         '(?P<lower_bound>[0-9]+(\\.[0-9]+)?)'\n                         '\\s*-\\s*'\n                         '(?P<upper_bound>[0-9]+(\\.[0-9]+)?)'\n                         '\\s*(?P<type>m\\s*asl|m\\s*agl|Pa)'\n                         '(?P<extra>.*)')\n    # Match against flight level.\n    pattern_fl = re.compile(r'^From\\s*'\n                            '(?P<type>FL)'\n                            '(?P<lower_bound>[0-9]+(\\.[0-9]+)?)'\n                            '\\s*-\\s*FL'\n                            '(?P<upper_bound>[0-9]+(\\.[0-9]+)?)'\n                            '(?P<extra>.*)')\n    # NAMEIII - integer/float support.\n    # Match scalar against height agl, asl, Pa, FL\n    pattern_scalar = re.compile(r'Z\\s*=\\s*'\n                                '(?P<point>[0-9]+(\\.[0-9]+)?)'\n                                '\\s*(?P<type>m\\s*agl|m\\s*asl|FL|Pa)'\n                                '(?P<extra>.*)')\n    type_name = {'magl': 'height', 'masl': 'altitude', 'FL': 'flight_level',\n                 'Pa': 'air_pressure'}\n    patterns = [pattern, pattern_fl, pattern_scalar]\n    units = 'no-unit'\n    points = z_coord\n    bounds = None\n    standard_name = None\n    long_name = 'z'\n    for pattern in patterns:\n        match = pattern.match(z_coord)\n        if match:\n            match = match.groupdict()\n            # Do not interpret if there is additional information to the match\n            if match['extra']:\n                break\n            units = match['type'].replace(' ', '')\n            name = type_name[units]\n            # Interpret points if present.\n            if 'point' in match:\n                points = float(match['point'])\n            # Interpret points from bounds.\n            else:\n                bounds = np.array([float(match['lower_bound']),\n                                   float(match['upper_bound'])])\n                points = bounds.sum() / 2.\n            long_name = None\n            if name == 'altitude':\n                units = units[0]\n                standard_name = name\n                long_name = 'altitude above sea level'\n            elif name == 'height':\n                units = units[0]\n                standard_name = name\n                long_name = 'height above ground level'\n            elif name == 'air_pressure':\n                standard_name = name\n            elif name == 'flight_level':\n                long_name = name\n            units = _parse_units(units)\n            break\n    coord = AuxCoord(points, units=units, standard_name=standard_name,\n                     long_name=long_name, bounds=bounds)\n    return coord\ndef _generate_cubes(header, column_headings, coords, data_arrays,\n                    cell_methods=None):\n    \"\"\"\n    Yield :class:`iris.cube.Cube` instances given\n    the headers, column headings, coords and data_arrays extracted\n    from a NAME file.\n    \"\"\"\n    for i, data_array in enumerate(data_arrays):\n        # Turn the dictionary of column headings with a list of header\n        # information for each field into a dictionary of headings for\n        # just this field.\n        field_headings = {k: v[i] for k, v in\n                          column_headings.iteritems()}\n        # Make a cube.\n        cube = iris.cube.Cube(data_array)\n        # Determine the name and units.\n        name = '{} {}'.format(field_headings['Species'],\n                              field_headings['Quantity'])\n        name = name.upper().replace(' ', '_')\n        cube.rename(name)\n        # Some units are not in SI units, are missing spaces or typed\n        # in the wrong case. _parse_units returns units that are\n        # recognised by Iris.\n        cube.units = _parse_units(field_headings['Unit'])\n        # Define and add the singular coordinates of the field (flight\n        # level, time etc.)\n        z_coord = _cf_height_from_name(field_headings['Z'])\n        cube.add_aux_coord(z_coord)\n        # Define the time unit and use it to serialise the datetime for\n        # the time coordinate.\n        time_unit = iris.unit.Unit(\n            'hours since epoch', calendar=iris.unit.CALENDAR_GREGORIAN)\n        # Build time, latitude and longitude coordinates.\n        for coord in coords:\n            pts = coord.values\n            coord_sys = None\n            if coord.name == 'latitude' or coord.name == 'longitude':\n                coord_units = 'degrees'\n                coord_sys = iris.coord_systems.GeogCS(EARTH_RADIUS)\n            if coord.name == 'time':\n                coord_units = time_unit\n                pts = time_unit.date2num(coord.values)\n            if coord.dimension is not None:\n                if coord.name == 'longitude':\n                    circular = iris.util._is_circular(pts, 360.0)\n                else:\n                    circular = False\n                icoord = DimCoord(points=pts,\n                                  standard_name=coord.name,\n                                  units=coord_units,\n                                  coord_system=coord_sys,\n                                  circular=circular)\n                if coord.name == 'time' and 'Av or Int period' in \\\n                        field_headings:\n                    dt = coord.values - \\\n                        field_headings['Av or Int period']\n                    bnds = time_unit.date2num(\n                        np.vstack((dt, coord.values)).T)\n                    icoord.bounds = bnds\n                else:\n                    icoord.guess_bounds()\n                cube.add_dim_coord(icoord, coord.dimension)\n            else:\n                icoord = AuxCoord(points=pts[i],\n                                  standard_name=coord.name,\n                                  coord_system=coord_sys,\n                                  units=coord_units)\n                if coord.name == 'time' and 'Av or Int period' in \\\n                        field_headings:\n                    dt = coord.values - \\\n                        field_headings['Av or Int period']\n                    bnds = time_unit.date2num(\n                        np.vstack((dt, coord.values)).T)\n                    icoord.bounds = bnds[i, :]\n                cube.add_aux_coord(icoord)\n        # Headings/column headings which are encoded elsewhere.\n        headings = ['X', 'Y', 'Z', 'Time', 'Unit', 'Av or Int period',\n                    'X grid origin', 'Y grid origin',\n                    'X grid size', 'Y grid size',\n                    'X grid resolution', 'Y grid resolution', ]\n        # Add the Main Headings as attributes.\n        for key, value in header.iteritems():\n            if value is not None and value != '' and \\\n                    key not in headings:\n                cube.attributes[key] = value\n        # Add the Column Headings as attributes\n        for key, value in field_headings.iteritems():\n            if value is not None and value != '' and \\\n                    key not in headings:\n                cube.attributes[key] = value\n        if cell_methods is not None:\n            cube.add_cell_method(cell_methods[i])\n        yield cube\ndef _build_cell_methods(av_or_ints, coord):\n    \"\"\"\n    Return a list of :class:`iris.coords.CellMethod` instances\n    based on the provided list of column heading entries and the\n    associated coordinate. If a given entry does not correspond to a cell\n    method (e.g. \"No time averaging\"), a value of None is inserted.\n    Args:\n    * av_or_ints (iterable of strings):\n        An iterable of strings containing the colummn heading entries\n        to be parsed.\n    * coord (string or :class:`iris.coords.Coord`):\n        The coordinate name (or :class:`iris.coords.Coord` instance)\n        to which the column heading entries refer.\n    Returns:\n        A list that is the same length as `av_or_ints` containing\n        :class:`iris.coords.CellMethod` instances or values of None.\n    \"\"\"\n    cell_methods = []\n    no_avg_pattern = re.compile(r'^(no( (.* )?averaging)?)?$', re.IGNORECASE)\n    for av_or_int in av_or_ints:\n        if no_avg_pattern.search(av_or_int) is not None:\n            cell_method = None\n        elif 'average' in av_or_int or 'averaged' in av_or_int:\n            cell_method = CellMethod('mean', coord)\n        elif 'integral' in av_or_int or 'integrated' in av_or_int:\n            cell_method = CellMethod('sum', coord)\n        else:\n            cell_method = None\n            msg = 'Unknown {} statistic: {!r}. Unable to create cell method.'\n            warnings.warn(msg.format(coord, av_or_int))\n        cell_methods.append(cell_method)\n    return cell_methods\ndef load_NAMEIII_field(filename):\n    \"\"\"\n    Load a NAME III grid output file returning a\n    generator of :class:`iris.cube.Cube` instances.\n    Args:\n    * filename (string):\n        Name of file to load.\n    Returns:\n        A generator :class:`iris.cube.Cube` instances.\n    \"\"\"\n    # Loading a file gives a generator of lines which can be progressed using\n    # the next() method. This will come in handy as we wish to progress\n    # through the file line by line.\n    with open(filename, 'r') as file_handle:\n        # Create a dictionary which can hold the header metadata about this\n        # file.\n        header = read_header(file_handle)\n        # Skip the next line (contains the word Fields:) in the file.\n        next(file_handle)\n        # Read the lines of column definitions.\n        # In this version a fixed order of column headings is assumed (and\n        # first 4 columns are ignored).\n        column_headings = {}\n        for column_header_name in ['Species Category', 'Name', 'Quantity',\n                                   'Species', 'Unit', 'Sources', 'Ensemble Av',\n                                   'Time Av or Int', 'Horizontal Av or Int',\n                                   'Vertical Av or Int', 'Prob Perc',\n                                   'Prob Perc Ens', 'Prob Perc Time',\n                                   'Time', 'Z', 'D']:\n            cols = [col.strip() for col in file_handle.next().split(',')]\n            column_headings[column_header_name] = cols[4:-1]\n        # Convert the time to python datetimes.\n        new_time_column_header = []\n        for i, t in enumerate(column_headings['Time']):\n            dt = datetime.datetime.strptime(t, NAMEIII_DATETIME_FORMAT)\n            new_time_column_header.append(dt)\n        column_headings['Time'] = new_time_column_header\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_headings['Time Av or Int'])\n        # Build a time coordinate.\n        tdim = NAMECoord(name='time', dimension=None,\n                         values=np.array(column_headings['Time']))\n        cell_methods = _build_cell_methods(column_headings['Time Av or Int'],\n                                           tdim.name)\n        # Build regular latitude and longitude coordinates.\n        lat, lon = _build_lat_lon_for_NAME_field(header)\n        coords = [lon, lat, tdim]\n        # Skip the line after the column headings.\n        next(file_handle)\n        # Create data arrays to hold the data for each column.\n        n_arrays = header['Number of field cols']\n        shape = (header['Y grid size'], header['X grid size'])\n        data_arrays = _read_data_arrays(file_handle, n_arrays, shape)\n    return _generate_cubes(header, column_headings, coords, data_arrays,\n                           cell_methods)\ndef load_NAMEII_field(filename):\n    \"\"\"\n    Load a NAME II grid output file returning a\n    generator of :class:`iris.cube.Cube` instances.\n    Args:\n    * filename (string):\n        Name of file to load.\n    Returns:\n        A generator :class:`iris.cube.Cube` instances.\n    \"\"\"\n    with open(filename, 'r') as file_handle:\n        # Create a dictionary which can hold the header metadata about this\n        # file.\n        header = read_header(file_handle)\n        # Origin in namever=2 format is bottom-left hand corner so alter this\n        # to centre of a grid box\n        header['X grid origin'] = header['X grid origin'] + \\\n            header['X grid resolution'] / 2\n        header['Y grid origin'] = header['Y grid origin'] + \\\n            header['Y grid resolution'] / 2\n        # Read the lines of column definitions.\n        # In this version a fixed order of column headings is assumed (and\n        # first 4 columns are ignored).\n        column_headings = {}\n        for column_header_name in ['Species Category', 'Species',\n                                   'Time Av or Int', 'Quantity',\n                                   'Unit', 'Z', 'Time']:\n            cols = [col.strip() for col in file_handle.next().split(',')]\n            column_headings[column_header_name] = cols[4:-1]\n        # Convert the time to python datetimes\n        new_time_column_header = []\n        for i, t in enumerate(column_headings['Time']):\n            dt = datetime.datetime.strptime(t, NAMEII_FIELD_DATETIME_FORMAT)\n            new_time_column_header.append(dt)\n        column_headings['Time'] = new_time_column_header\n        # Convert averaging/integrating period to timedeltas.\n        pattern = re.compile(r'\\s*(\\d{3})\\s*(hr)?\\s*(time)\\s*(\\w*)')\n        column_headings['Av or Int period'] = []\n        for i, t in enumerate(column_headings['Time Av or Int']):\n            matches = pattern.search(t)\n            hours = 0\n            if matches:\n                if len(matches.group(1)) > 0:\n                    hours = float(matches.group(1))\n            column_headings['Av or Int period'].append(\n                datetime.timedelta(hours=hours))\n        # Build a time coordinate.\n        tdim = NAMECoord(name='time', dimension=None,\n                         values=np.array(column_headings['Time']))\n        cell_methods = _build_cell_methods(column_headings['Time Av or Int'],\n                                           tdim.name)\n        # Build regular latitude and longitude coordinates.\n        lat, lon = _build_lat_lon_for_NAME_field(header)\n        coords = [lon, lat, tdim]\n        # Skip the blank line after the column headings.\n        next(file_handle)\n        # Create data arrays to hold the data for each column.\n        n_arrays = header['Number of fields']\n        shape = (header['Y grid size'], header['X grid size'])\n        data_arrays = _read_data_arrays(file_handle, n_arrays, shape)\n    return _generate_cubes(header, column_headings, coords, data_arrays,\n                           cell_methods)\ndef load_NAMEIII_timeseries(filename):\n    \"\"\"\n    Load a NAME III time series file returning a\n    generator of :class:`iris.cube.Cube` instances.\n    Args:\n    * filename (string):\n        Name of file to load.\n    Returns:\n        A generator :class:`iris.cube.Cube` instances.\n    \"\"\"\n    with open(filename, 'r') as file_handle:\n        # Create a dictionary which can hold the header metadata about this\n        # file.\n        header = read_header(file_handle)\n        # skip the next line (contains the word Fields:) in the file.\n        next(file_handle)\n        # Read the lines of column definitions - currently hardwired\n        column_headings = {}\n        for column_header_name in ['Species Category', 'Name', 'Quantity',\n                                   'Species', 'Unit', 'Sources', 'Ens Av',\n                                   'Time Av or Int', 'Horizontal Av or Int',\n                                   'Vertical Av or Int', 'Prob Perc',\n                                   'Prob Perc Ens', 'Prob Perc Time',\n                                   'Location', 'X', 'Y', 'Z', 'D']:\n            cols = [col.strip() for col in file_handle.next().split(',')]\n            column_headings[column_header_name] = cols[1:-1]\n        # Determine the coordinates of the data and store in namedtuples.\n        # Extract latitude and longitude information from X, Y location\n        # headings.\n        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_headings['Time Av or Int'])\n        # Skip the line after the column headings.\n        next(file_handle)\n        # Make a list of data lists to hold the data for each column.\n        data_lists = [[] for i in range(header['Number of field cols'])]\n        time_list = []\n        # Iterate over the remaining lines which represent the data in a\n        # column form.\n        for line in file_handle:\n            # Split the line by comma, removing the last empty column caused\n            # by the trailing comma.\n            vals = line.split(',')[:-1]\n            # Time is stored in the first column.\n            t = vals[0].strip()\n            dt = datetime.datetime.strptime(t, NAMEIII_DATETIME_FORMAT)\n            time_list.append(dt)\n            # Populate the data arrays.\n            for i, data_list in enumerate(data_lists):\n                data_list.append(float(vals[i + 1]))\n        data_arrays = [np.array(l) for l in data_lists]\n        time_array = np.array(time_list)\n        tdim = NAMECoord(name='time', dimension=0, values=time_array)\n        coords = [lon, lat, tdim]\n    return _generate_cubes(header, column_headings, coords, data_arrays)\ndef load_NAMEII_timeseries(filename):\n    \"\"\"\n    Load a NAME II Time Series file returning a\n    generator of :class:`iris.cube.Cube` instances.\n    Args:\n    * filename (string):\n        Name of file to load.\n    Returns:\n        A generator :class:`iris.cube.Cube` instances.\n    \"\"\"\n    with open(filename, 'r') as file_handle:\n        # Create a dictionary which can hold the header metadata about this\n        # file.\n        header = read_header(file_handle)\n        # Read the lines of column definitions.\n        column_headings = {}\n        for column_header_name in ['Y', 'X', 'Location',\n                                   'Species Category', 'Species',\n                                   'Quantity', 'Z', 'Unit']:\n            cols = [col.strip() for col in file_handle.next().split(',')]\n            column_headings[column_header_name] = cols[1:-1]\n        # Determine the coordinates of the data and store in namedtuples.\n        # Extract latitude and longitude information from X, Y location\n        # headings.\n", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "length": 2765, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "d6baed6ebf26ec130b53d88863008a04aa5759c9dbf5f916"}
{"input": "", "context": "# encoding: utf-8\nimport ckan.logic as logic\nimport ckan.authz as authz\nimport ckan.logic.auth as logic_auth\nfrom ckan.common import _\n@logic.auth_allow_anonymous_access\ndef package_create(context, data_dict=None):\n    user = context['user']\n    if authz.auth_is_anon_user(context):\n        check1 = all(authz.check_config_permission(p) for p in (\n            'anon_create_dataset',\n            'create_dataset_if_not_in_organization',\n            'create_unowned_dataset',\n            ))\n    else:\n        check1 = all(authz.check_config_permission(p) for p in (\n            'create_dataset_if_not_in_organization',\n            'create_unowned_dataset',\n            )) or authz.has_user_permission_for_some_org(\n            user, 'create_dataset')\n    if not check1:\n        return {'success': False, 'msg': _('User %s not authorized to create packages') % user}\n    check2 = _check_group_auth(context,data_dict)\n    if not check2:\n        return {'success': False, 'msg': _('User %s not authorized to edit these groups') % user}\n    # If an organization is given are we able to add a dataset to it?\n    data_dict = data_dict or {}\n    org_id = data_dict.get('owner_org')\n    if org_id and not authz.has_user_permission_for_group_or_org(\n            org_id, user, 'create_dataset'):\n        return {'success': False, 'msg': _('User %s not authorized to add dataset to this organization') % user}\n    return {'success': True}\ndef file_upload(context, data_dict=None):\n    user = context['user']\n    if authz.auth_is_anon_user(context):\n        return {'success': False, 'msg': _('User %s not authorized to create packages') % user}\n    return {'success': True}\ndef resource_create(context, data_dict):\n    model = context['model']\n    user = context.get('user')\n    package_id = data_dict.get('package_id')\n    if not package_id and data_dict.get('id'):\n        # This can happen when auth is deferred, eg from `resource_view_create`\n        resource = logic_auth.get_resource_object(context, data_dict)\n        package_id = resource.package_id\n    if not package_id:\n        raise logic.NotFound(\n            _('No dataset id provided, cannot check auth.')\n        )\n    # check authentication against package\n    pkg = model.Package.get(package_id)\n    if not pkg:\n        raise logic.NotFound(\n            _('No package found for this resource, cannot check auth.')\n        )\n    pkg_dict = {'id': pkg.id}\n    authorized = authz.is_authorized('package_update', context, pkg_dict).get('success')\n    if not authorized:\n        return {'success': False,\n                'msg': _('User %s not authorized to create resources on dataset %s') %\n                        (str(user), package_id)}\n    else:\n        return {'success': True}\ndef resource_view_create(context, data_dict):\n    return authz.is_authorized('resource_create', context, {'id': data_dict['resource_id']})\ndef resource_create_default_resource_views(context, data_dict):\n    return authz.is_authorized('resource_create', context, {'id': data_dict['resource']['id']})\ndef package_create_default_resource_views(context, data_dict):\n    return authz.is_authorized('package_update', context,\n                               data_dict['package'])\ndef package_relationship_create(context, data_dict):\n    user = context['user']\n    id = data_dict['subject']\n    id2 = data_dict['object']\n    # If we can update each package we can see the relationships\n    authorized1 = authz.is_authorized_boolean(\n        'package_update', context, {'id': id})\n    authorized2 = authz.is_authorized_boolean(\n        'package_update', context, {'id': id2})\n    if not authorized1 and authorized2:\n        return {'success': False, 'msg': _('User %s not authorized to edit these packages') % user}\n    else:\n        return {'success': True}\ndef group_create(context, data_dict=None):\n    user = context['user']\n    user = authz.get_user_id_for_username(user, allow_none=True)\n    if user and authz.check_config_permission('user_create_groups'):\n        return {'success': True}\n    return {'success': False,\n            'msg': _('User %s not authorized to create groups') % user}\ndef organization_create(context, data_dict=None):\n    user = context['user']\n    user = authz.get_user_id_for_username(user, allow_none=True)\n    if user and authz.check_config_permission('user_create_organizations'):\n        return {'success': True}\n    return {'success': False,\n            'msg': _('User %s not authorized to create organizations') % user}\ndef rating_create(context, data_dict):\n    # No authz check in the logic function\n    return {'success': True}\n@logic.auth_allow_anonymous_access\ndef user_create(context, data_dict=None):\n    using_api = 'api_version' in context\n    create_user_via_api = authz.check_config_permission(\n            'create_user_via_api')\n    create_user_via_web = authz.check_config_permission(\n            'create_user_via_web')\n    if using_api and not create_user_via_api:\n        return {'success': False, 'msg': _('User {user} not authorized to '\n            'create users via the API').format(user=context.get('user'))}\n    if not using_api and not create_user_via_web:\n        return {'success': False, 'msg': _('Not authorized to '\n            'create users')}\n    return {'success': True}\ndef user_invite(context, data_dict):\n    data_dict['id'] = data_dict['group_id']\n    return group_member_create(context, data_dict)\ndef _check_group_auth(context, data_dict):\n    '''Has this user got update permission for all of the given groups?\n    If there is a package in the context then ignore that package's groups.\n    (owner_org is checked elsewhere.)\n    :returns: False if not allowed to update one (or more) of the given groups.\n              True otherwise. i.e. True is the default. A blank data_dict\n              mentions no groups, so it returns True.\n    '''\n    # FIXME This code is shared amoung other logic.auth files and should be\n    # somewhere better\n    if not data_dict:\n        return True\n    model = context['model']\n    user = context['user']\n    pkg = context.get(\"package\")\n    api_version = context.get('api_version') or '1'\n    group_blobs = data_dict.get('groups', [])\n    groups = set()\n    for group_blob in group_blobs:\n        # group_blob might be a dict or a group_ref\n        if isinstance(group_blob, dict):\n            # use group id by default, but we can accept name as well\n            id = group_blob.get('id') or group_blob.get('name')\n            if not id:\n                continue\n        else:\n            id = group_blob\n        grp = model.Group.get(id)\n        if grp is None:\n            raise logic.NotFound(_('Group was not found.'))\n        groups.add(grp)\n    if pkg:\n        pkg_groups = pkg.get_groups()\n        groups = groups - set(pkg_groups)\n    for group in groups:\n        if not authz.has_user_permission_for_group_or_org(group.id, user, 'update'):\n            return False\n    return True\n## Modifications for rest api\ndef package_create_rest(context, data_dict):\n    model = context['model']\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a package')}\n    return authz.is_authorized('package_create', context, data_dict)\ndef group_create_rest(context, data_dict):\n    model = context['model']\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group')}\n    return authz.is_authorized('group_create', context, data_dict)\ndef vocabulary_create(context, data_dict):\n    # sysadmins only\n    return {'success': False}\ndef activity_create(context, data_dict):\n    # sysadmins only\n    return {'success': False}\ndef tag_create(context, data_dict):\n    # sysadmins only\n    return {'success': False}\ndef _group_or_org_member_create(context, data_dict):\n    user = context['user']\n", "answers": ["    group_id = data_dict['id']"], "length": 772, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "37c8cc83faf991e5dab1a2d463f96ea1e173fbf645387307"}
{"input": "", "context": "/**\n * Copyright (C) 2001-2020 by RapidMiner and the contributors\n * \n * Complete list of developers available at our web site:\n * \n * http://rapidminer.com\n * \n * This program is free software: you can redistribute it and/or modify it under the terms of the\n * GNU Affero General Public License as published by the Free Software Foundation, either version 3\n * of the License, or (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Affero General Public License for more details.\n * \n * You should have received a copy of the GNU Affero General Public License along with this program.\n * If not, see http://www.gnu.org/licenses/.\n*/\npackage com.rapidminer.operator.learner.meta;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport com.rapidminer.example.Attribute;\nimport com.rapidminer.example.Example;\nimport com.rapidminer.example.ExampleSet;\nimport com.rapidminer.example.set.Partition;\nimport com.rapidminer.example.set.SplittedExampleSet;\nimport com.rapidminer.operator.Model;\nimport com.rapidminer.operator.OperatorException;\nimport com.rapidminer.operator.learner.PredictionModel;\n/**\n * This model of the hierarchical learner. This stores single models at each step to divide the\n * examples into the single branches of the binary model tree.\n *\n * @author Tobias Malbrecht, Sebastian Land\n */\npublic class HierarchicalMultiClassModel extends PredictionModel implements MetaModel {\n\tpublic static class Node implements Serializable {\n\t\tprivate static final long serialVersionUID = 1L;\n\t\tprivate final String className;\n\t\tprivate int partitionId;\n\t\tprivate final LinkedHashMap<String, Node> children = new LinkedHashMap<String, Node>();\n\t\tprivate final List<Node> childrenList = new ArrayList<Node>();\n\t\tprivate Node parent = null;\n\t\tprivate Model model = null;\n\t\tpublic Node(String className) {\n\t\t\tthis.className = className;\n\t\t}\n\t\t/**\n\t\t * Returns the children in order of insertion\n\t\t */\n\t\tpublic List<Node> getChildren() {\n\t\t\treturn childrenList;\n\t\t}\n\t\t/**\n\t\t * Adds a child node.\n\t\t */\n\t\tpublic void addChild(Node child) {\n\t\t\tchildrenList.add(child);\n\t\t\tchildren.put(child.getClassName(), child);\n\t\t\tchild.setParent(this);\n\t\t}\n\t\t/**\n\t\t * Sets the parent of this node. Only the root node may have a null parent.\n\t\t */\n\t\tpublic void setParent(Node parent) {\n\t\t\tthis.parent = parent;\n\t\t}\n\t\tpublic boolean isRoot() {\n\t\t\treturn parent == null;\n\t\t}\n\t\tpublic void setPartitionId(int partition) {\n\t\t\tthis.partitionId = partition;\n\t\t}\n\t\tpublic int getPartitionId() {\n\t\t\treturn partitionId;\n\t\t}\n\t\tpublic Node getParent() {\n\t\t\treturn this.parent;\n\t\t}\n\t\tpublic String getClassName() {\n\t\t\treturn this.className;\n\t\t}\n\t\tpublic boolean isLeaf() {\n\t\t\treturn children.isEmpty();\n\t\t}\n\t\tpublic void setModel(Model model) {\n\t\t\tthis.model = model;\n\t\t}\n\t\tpublic Model getModel() {\n\t\t\treturn this.model;\n\t\t}\n\t\tpublic Node getChild(String label) {\n\t\t\treturn children.get(label);\n\t\t}\n\t}\n\tprivate static final long serialVersionUID = -5792943818860734082L;\n\tprivate final Node root;\n\tpublic HierarchicalMultiClassModel(ExampleSet exampleSet, Node root) {\n\t\tsuper(exampleSet, null, null);\n\t\tthis.root = root;\n\t}\n\t@Override\n\tpublic ExampleSet performPrediction(ExampleSet exampleSet, Attribute predictedLabel) throws OperatorException {\n\t\tExampleSet applySet = (ExampleSet) exampleSet.clone();\n\t\t// defining arrays for transferring information over recursive calls\n\t\tdouble[] confidences = new double[applySet.size()];\n\t\tint[] outcomes = new int[applySet.size()];\n\t\tint[] depths = new int[applySet.size()];\n\t\tArrays.fill(outcomes, root.getPartitionId());\n\t\tArrays.fill(confidences, 1d);\n\t\t// applying predictions recursively\n\t\tperformPredictionRecursivly(applySet, root, confidences, outcomes, depths, 0, root.getPartitionId() + 1);\n\t\t// retrieving prediction attributes\n\t\tAttribute labelAttribute = getTrainingHeader().getAttributes().getLabel();\n\t\tint numberOfLabels = labelAttribute.getMapping().size();\n\t\tAttribute[] confidenceAttributes = new Attribute[numberOfLabels];\n\t\tfor (int i = 0; i < numberOfLabels; i++) {\n\t\t\tconfidenceAttributes[i] = exampleSet.getAttributes().getConfidence(labelAttribute.getMapping().mapIndex(i));\n\t\t}\n\t\t// assigning final outcome and confidences\n\t\tint i = 0;\n\t\tfor (Example example : exampleSet) {\n\t\t\t// setting label according to outcome\n\t\t\texample.setValue(predictedLabel, outcomes[i]);\n\t\t\t// calculating confidences\n\t\t\tdouble confidence = Math.pow(confidences[i], 1d / depths[i]);\n\t\t\tdouble defaultConfidence = (1d - confidence) / numberOfLabels;\n\t\t\t// setting confidences\n\t\t\tfor (int j = 0; j < numberOfLabels; j++) {\n\t\t\t\texample.setValue(confidenceAttributes[j], defaultConfidence);\n\t\t\t}\n\t\t\texample.setValue(confidenceAttributes[outcomes[i]], confidence);\n\t\t\ti++;\n\t\t}\n\t\treturn exampleSet;\n\t}\n\t/**\n\t * This method will apply all the nodes recursively. For each node it will be called when\n\t * descending the learner hierarchy. The outcomes array stores the information to which node\n\t * each example of the applySet has been assigned. Each node's model will be applied to the\n\t * subset of a partitioned example set according to the node's partition id. After the\n\t * classification has been performed, the examples will be assigned the partion id's of the\n\t * child nodes, to whose class the examples where classified.\n\t *\n\t * It is very important that after each application the predicted label and the confidences are\n\t * removed explicitly to avoid a memory leak in the memory table!\n\t *\n\t * Confidences are multiplied with the outcome every application.\n\t */\n\tprivate void performPredictionRecursivly(ExampleSet applySet, Node node, double[] confidences, int[] outcomes,\n\t\t\tint[] depths, int depth, int numberOfPartitions) throws OperatorException {\n\t\tif (!node.isLeaf()) {\n\t\t\t// creating partitioned example set\n\t\t\tSplittedExampleSet splittedSet = new SplittedExampleSet(applySet, new Partition(outcomes, numberOfPartitions));\n\t\t\tsplittedSet.selectSingleSubset(node.getPartitionId());\n\t\t\t// applying\n\t\t\tExampleSet currentResultSet = node.getModel().apply(splittedSet);\n\t\t\t// assign each example a child node regarding to the classification outcome\n\t\t\tint resultIndex = 0;\n\t\t\tAttribute predictionAttribute = currentResultSet.getAttributes().getPredictedLabel();\n\t\t\tfor (Example example : currentResultSet) {\n\t\t\t\tint parentIndex = splittedSet.getActualParentIndex(resultIndex);\n\t\t\t\t// extracting data\n", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "length": 784, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "d2fab0055348069f0d8e88dc8cdb2f46840753245d44d77d"}
{"input": "", "context": "// ---------------------------------\n// <copyright file=\"AbstractTrados2007LanguageDirection.cs\" company=\"SDL International\">\n// Copyright  2011 All Right Reserved\n// </copyright>\n// <author>Kostiantyn Lukianets</author>\n// <email>klukianets@sdl.com</email>\n// <date>2011-11-08</date>\n// ---------------------------------\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nnamespace Sdl.Community.Trados2007\n{\n    using System;\n    using System.Diagnostics.CodeAnalysis;\n    using System.Globalization;\n    using Sdl.LanguagePlatform.Core;\n    using Sdl.LanguagePlatform.TranslationMemory;\n    using Sdl.LanguagePlatform.TranslationMemoryApi;\n    using Trados.Interop.TMAccess;\n    using Action = Sdl.LanguagePlatform.TranslationMemory.Action;\n    using SearchResult = Sdl.LanguagePlatform.TranslationMemory.SearchResult;\n    \n    using Sdl.LanguagePlatform.Lingua.TermRecognition;\n    /// <summary>\n    /// Abstract base class for file- and server-based Trados 2007 language directions.\n    /// </summary>\n    [SuppressMessage(\"StyleCop.CSharp.DocumentationRules\", \"SA1623:PropertySummaryDocumentationMustMatchAccessors\",\n        Justification = \"By original SDL API design.\")]\n    public abstract class AbstractTrados2007LanguageDirection : ITranslationProviderLanguageDirection\n    {\n        #region Fields\n        protected readonly object locker = new object();\n        /// <summary>\n        /// Stores Trados 2007 Translation Provider that owns this particular Language Direction.\n        /// </summary>\n        private readonly AbstractTrados2007TranslationProvider translationProvider;\n        /// <summary>\n        /// Stores languages direction.\n        /// </summary>\n        private readonly LanguagePair languageDirection;\n        #endregion // Fields\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"AbstractTrados2007LanguageDirection\"/> class.\n        /// </summary>\n        /// <param name=\"translationProvider\">The Trados 2007 translation provider.</param>\n        protected AbstractTrados2007LanguageDirection(AbstractTrados2007TranslationProvider translationProvider)\n        {\n            if (translationProvider == null)\n            {\n                throw new ArgumentNullException(\"translationProvider\");\n            }\n            // Trados 2007 TP supports only one language direction, regardless file- or -server based\n            this.translationProvider = translationProvider;\n            this.languageDirection = translationProvider.LanguageDirection;\n        }\n        #region Properties\n        /// <summary>\n        /// The translation provider to which this language direction belongs.\n        /// </summary>\n        ITranslationProvider ITranslationProviderLanguageDirection.TranslationProvider\n        {\n            get\n            {\n                return this.translationProvider;\n            }\n        }\n        /// <summary>\n        /// Gets the source language.\n        /// </summary>\n        public CultureInfo SourceLanguage\n        {\n            get\n            {\n                return this.languageDirection.SourceCulture;\n            }\n        }\n        /// <summary>\n        /// Gets the target language.\n        /// </summary>\n        public CultureInfo TargetLanguage\n        {\n            get\n            {\n                return this.languageDirection.TargetCulture;\n            }\n        }\n        /// <summary>\n        /// Gets a flag which indicates whether the translation provider supports\n        /// searches in the reversed language direction.\n        /// </summary>\n        public bool CanReverseLanguageDirection\n        {\n            get\n            {\n                return false;\n            }\n        }\n        /// <summary>\n        /// The translation provider to which this language direction belongs.\n        /// </summary>\n        protected AbstractTrados2007TranslationProvider TranslationProvider\n        {\n            get\n            {\n                return this.translationProvider;\n            }\n        }\n        #endregion // Properties\n        #region Methods\n        /// <summary>\n        /// Adds a translation unit to the database. If the provider doesn't support adding/updating, the \n        ///             implementation should return a reasonable <see cref=\"T:Sdl.LanguagePlatform.TranslationMemory.ImportResult\"/> but should not throw an exception.\n        /// </summary>\n        /// <param name=\"translationUnit\">The translation unit.</param><param name=\"settings\">The settings used for this operation.</param>\n        /// <returns>\n        /// An <see cref=\"T:Sdl.LanguagePlatform.TranslationMemory.ImportResult\"/> which represents the status of the operation (succeeded, ignored, etc).\n        /// </returns>\n        [Obsolete(@\"Trados 2007 Translation Provider does not support adding\\editing.\")]\n        public virtual ImportResult AddTranslationUnit(TranslationUnit translationUnit, ImportSettings settings)\n        {\n            return new ImportResult { Action = Action.Add, ErrorCode = ErrorCode.InvalidOperation };\n        }\n        /// <summary>\n        /// Adds an array of translation units to the database. If the provider doesn't support adding/updating, the \n        ///             implementation should return a reasonable <see cref=\"T:Sdl.LanguagePlatform.TranslationMemory.ImportResult\"/> but should not throw an exception.\n        /// </summary>\n        /// <param name=\"translationUnits\">An arrays of translation units to be added.</param><param name=\"settings\">The settings used for this operation.</param>\n        /// <returns>\n        /// An array of <see cref=\"T:Sdl.LanguagePlatform.TranslationMemory.ImportResult\"/> objects, which mirrors the translation unit array. It has the exact same size and contains the\n        ///             status of each add operation for each particular translation unit with the same index within the array.\n        /// </returns>\n        [Obsolete(@\"Trados 2007 Translation Provider does not support adding\\editing.\")]\n        public virtual ImportResult[] AddTranslationUnits(TranslationUnit[] translationUnits, ImportSettings settings)\n        {\n            return new[] { new ImportResult() { Action = Action.Add, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Adds an array of translation units to the database. If hash codes of the previous translations are provided, \n        ///             a found translation will be overwritten. If none is found, or the hash is 0 or the collection is <c>null</c>, \n        ///             the operation behaves identical to <see cref=\"M:Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationProviderLanguageDirection.AddTranslationUnits(Sdl.LanguagePlatform.TranslationMemory.TranslationUnit[],Sdl.LanguagePlatform.TranslationMemory.ImportSettings)\"/>.\n        /// <para>\n        /// If the provider doesn't support adding/updating, the \n        ///             implementation should return a reasonable <see cref=\"T:Sdl.LanguagePlatform.TranslationMemory.ImportResult\"/> but should not throw an exception.\n        /// </para>\n        /// </summary>\n        /// <param name=\"translationUnits\">An arrays of translation units to be added.</param><param name=\"previousTranslationHashes\">If provided, a corresponding array of a the hash code of a previous translation.</param><param name=\"settings\">The settings used for this operation.</param>\n        /// <returns>\n        /// An array of <see cref=\"T:Sdl.LanguagePlatform.TranslationMemory.ImportResult\"/> objects, which mirrors the translation unit array. It has the exact same size and contains the\n        ///             status of each add operation for each particular translation unit with the same index within the array.\n        /// </returns>\n        [Obsolete(@\"Trados 2007 Translation Provider does not support adding\\editing.\")]\n        public virtual ImportResult[] AddOrUpdateTranslationUnits(TranslationUnit[] translationUnits, int[] previousTranslationHashes, ImportSettings settings)\n        {\n            int count = translationUnits.Length;\n            var result = new ImportResult[count];\n            var err = new ImportResult() { Action = Action.Add, ErrorCode = ErrorCode.InvalidOperation };\n            for (int i = 0; i < count; i++)\n            {\n                result[i] = err;\n            }\n            return result;\n        }\n        /// <summary>\n        /// Adds an array of translation units to the database, but will only add those\n        ///             for which the corresponding mask field is <c>true</c>. If the provider doesn't support adding/updating, the \n        ///             implementation should return a reasonable ImportResult but should not throw an exception.\n        /// </summary>\n        /// <param name=\"translationUnits\">An arrays of translation units to be added.</param><param name=\"settings\">The settings used for this operation.</param><param name=\"mask\">A boolean array with the same cardinality as the TU array, specifying which TUs to add.</param>\n        /// <returns>\n        /// An array of ImportResult objects, which mirrors the translation unit array. It has the exact same size and contains the\n        ///             status of each add operation for each particular translation unit with the same index within the array.\n        /// </returns>\n        [Obsolete(@\"Trados 2007 Translation Provider does not support adding\\editing.\")]\n        public virtual ImportResult[] AddTranslationUnitsMasked(TranslationUnit[] translationUnits, ImportSettings settings, bool[] mask)\n        {\n            return new[] { new ImportResult() { Action = Action.Add, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Adds an array of translation units to the database, but will only add those\n        ///             for which the corresponding mask field is true. If the previous translation hashes are provided,\n        ///             existing translations will be updated if the target segment hash changed.\n        /// <para>\n        /// If the provider doesn't support adding/updating, the \n        ///             implementation should return a reasonable ImportResult but should not throw an exception.\n        /// </para>\n        /// </summary>\n        /// <param name=\"translationUnits\">An arrays of translation units to be added.</param><param name=\"previousTranslationHashes\">Corresponding hash codes of a previous translation (0 if unknown). The parameter may be null.</param><param name=\"settings\">The settings used for this operation.</param><param name=\"mask\">A boolean array with the same cardinality as the TU array, specifying which TUs to add.</param>\n        /// <returns>\n        /// An array of ImportResult objects, which mirrors the translation unit array. It has the exact same size and contains the\n        ///             status of each add operation for each particular translation unit with the same index within the array.\n        /// </returns>\n        [Obsolete(@\"Trados 2007 Translation Provider does not support adding\\editing.\")]\n        public virtual ImportResult[] AddOrUpdateTranslationUnitsMasked(TranslationUnit[] translationUnits, int[] previousTranslationHashes, ImportSettings settings, bool[] mask)\n        {\n            return new[] { new ImportResult() { Action = Action.Add, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">The array containing the segments to search for.</param>\n        /// <returns>\n        /// An array of <see cref=\"T:Sdl.LanguagePlatform.TranslationMemory.SearchResults\"/> objects, which mirrors the segments array. It has the exact same size and contains the\n        ///             search results for each segment with the same index within the segments array.\n        /// </returns>\n        public virtual SearchResults[] SearchSegments(SearchSettings settings, Segment[] segments)\n        {\n", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "length": 1172, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "39981401e38829b7087717c9452de413a3ec15cf21ca091f"}
{"input": "", "context": "/*\n * Copyright (c) 1998-2010 Caucho Technology -- all rights reserved\n *\n * This file is part of Resin(R) Open Source\n *\n * Each copy or derived work must preserve the copyright notice and this\n * notice unmodified.\n *\n * Resin Open Source is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Resin Open Source is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty\n * of NON-INFRINGEMENT.  See the GNU General Public License for more\n * details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Resin Open Source; if not, write to the\n *\n *   Free Software Foundation, Inc.\n *   59 Temple Place, Suite 330\n *   Boston, MA 02111-1307  USA\n *\n * @author Scott Ferguson\n */\npackage com.caucho.quercus.lib.regexp;\nimport java.util.*;\nimport com.caucho.util.*;\nimport com.caucho.quercus.env.StringValue;\nclass RegexpNode {\n   private static final L10N L = new L10N(RegexpNode.class);\n   static final int RC_END = 0;\n   static final int RC_NULL = 1;\n   static final int RC_STRING = 2;\n   static final int RC_SET = 3;\n   static final int RC_NSET = 4;\n   static final int RC_BEG_GROUP = 5;\n   static final int RC_END_GROUP = 6;\n   static final int RC_GROUP_REF = 7;\n   static final int RC_LOOP = 8;\n   static final int RC_LOOP_INIT = 9;\n   static final int RC_LOOP_SHORT = 10;\n   static final int RC_LOOP_UNIQUE = 11;\n   static final int RC_LOOP_SHORT_UNIQUE = 12;\n   static final int RC_LOOP_LONG = 13;\n   static final int RC_OR = 64;\n   static final int RC_OR_UNIQUE = 65;\n   static final int RC_POS_LOOKAHEAD = 66;\n   static final int RC_NEG_LOOKAHEAD = 67;\n   static final int RC_POS_LOOKBEHIND = 68;\n   static final int RC_NEG_LOOKBEHIND = 69;\n   static final int RC_LOOKBEHIND_OR = 70;\n   static final int RC_WORD = 73;\n   static final int RC_NWORD = 74;\n   static final int RC_BLINE = 75;\n   static final int RC_ELINE = 76;\n   static final int RC_BSTRING = 77;\n   static final int RC_ESTRING = 78;\n   static final int RC_ENSTRING = 79;\n   static final int RC_GSTRING = 80;\n   // conditionals\n   static final int RC_COND = 81;\n   // ignore case\n   static final int RC_STRING_I = 128;\n   static final int RC_SET_I = 129;\n   static final int RC_NSET_I = 130;\n   static final int RC_GROUP_REF_I = 131;\n   static final int RC_LEXEME = 256;\n   // unicode properties\n   static final int RC_UNICODE = 512;\n   static final int RC_NUNICODE = 513;\n   // unicode properties sets\n   static final int RC_C = 1024;\n   static final int RC_L = 1025;\n   static final int RC_M = 1026;\n   static final int RC_N = 1027;\n   static final int RC_P = 1028;\n   static final int RC_S = 1029;\n   static final int RC_Z = 1030;\n   // negated unicode properties sets\n   static final int RC_NC = 1031;\n   static final int RC_NL = 1032;\n   static final int RC_NM = 1033;\n   static final int RC_NN = 1034;\n   static final int RC_NP = 1035;\n   // POSIX character classes\n   static final int RC_CHAR_CLASS = 2048;\n   static final int RC_ALNUM = 1;\n   static final int RC_ALPHA = 2;\n   static final int RC_BLANK = 3;\n   static final int RC_CNTRL = 4;\n   static final int RC_DIGIT = 5;\n   static final int RC_GRAPH = 6;\n   static final int RC_LOWER = 7;\n   static final int RC_PRINT = 8;\n   static final int RC_PUNCT = 9;\n   static final int RC_SPACE = 10;\n   static final int RC_UPPER = 11;\n   static final int RC_XDIGIT = 12;\n   // #2526, possible JIT/OS issue with Integer.MAX_VALUE\n   private static final int INTEGER_MAX = Integer.MAX_VALUE - 1;\n   public static final int FAIL = -1;\n   public static final int SUCCESS = 0;\n   static final RegexpNode N_END = new End();\n   static final RegexpNode ANY_CHAR;\n   /**\n    * Creates a node with a code\n    */\n   protected RegexpNode() {\n   }\n   //\n   // parsing constructors\n   //\n   RegexpNode concat(RegexpNode next) {\n      return new Concat(this, next);\n   }\n   /**\n    * '?' operator\n    */\n   RegexpNode createOptional(Regcomp parser) {\n      return createLoop(parser, 0, 1);\n   }\n   /**\n    * '*' operator\n    */\n   RegexpNode createStar(Regcomp parser) {\n      return createLoop(parser, 0, INTEGER_MAX);\n   }\n   /**\n    * '+' operator\n    */\n   RegexpNode createPlus(Regcomp parser) {\n      return createLoop(parser, 1, INTEGER_MAX);\n   }\n   /**\n    * Any loop\n    */\n   RegexpNode createLoop(Regcomp parser, int min, int max) {\n      return new LoopHead(parser, this, min, max);\n   }\n   /**\n    * Any loop\n    */\n   RegexpNode createLoopUngreedy(Regcomp parser, int min, int max) {\n      return new LoopHeadUngreedy(parser, this, min, max);\n   }\n   /**\n    * Possessive loop\n    */\n   RegexpNode createPossessiveLoop(int min, int max) {\n      return new PossessiveLoop(getHead(), min, max);\n   }\n   /**\n    * Create an or expression\n    */\n   RegexpNode createOr(RegexpNode node) {\n      return Or.create(this, node);\n   }\n   /**\n    * Create a not expression\n    */\n   RegexpNode createNot() {\n      return Not.create(this);\n   }\n   //\n   // optimization functions\n   //\n   int minLength() {\n      return 0;\n   }\n   String prefix() {\n      return \"\";\n   }\n   int firstChar() {\n      return -1;\n   }\n   boolean isNullable() {\n      return false;\n   }\n   boolean[] firstSet(boolean[] firstSet) {\n      return null;\n   }\n   boolean isAnchorBegin() {\n      return false;\n   }\n   RegexpNode getTail() {\n      return this;\n   }\n   RegexpNode getHead() {\n      return this;\n   }\n   //\n   // matching\n   //\n   int match(StringValue string, int length, int offset, RegexpState state) {\n      throw new UnsupportedOperationException(getClass().getName());\n   }\n   @Override\n   public String toString() {\n      Map<RegexpNode, Integer> map = new IdentityHashMap<RegexpNode, Integer>();\n      StringBuilder sb = new StringBuilder();\n      toString(sb, map);\n      return sb.toString();\n   }\n   protected void toString(StringBuilder sb, Map<RegexpNode, Integer> map) {\n      if (toStringAdd(sb, map)) {\n         return;\n      }\n      sb.append(toStringName()).append(\"[]\");\n   }\n   protected boolean toStringAdd(StringBuilder sb, Map<RegexpNode, Integer> map) {\n      Integer v = map.get(this);\n      if (v != null) {\n         sb.append(\"#\").append(v);\n         return true;\n      }\n      map.put(this, map.size());\n      return false;\n   }\n   protected String toStringName() {\n      String name = getClass().getName();\n      int p = name.lastIndexOf('$');\n      if (p < 0) {\n         p = name.lastIndexOf('.');\n      }\n      return name.substring(p + 1);\n   }\n   /**\n    * A node with exactly one character matches.\n    */\n   static class AbstractCharNode extends RegexpNode {\n      @Override\n      RegexpNode createLoop(Regcomp parser, int min, int max) {\n         return new CharLoop(this, min, max);\n      }\n      @Override\n      RegexpNode createLoopUngreedy(Regcomp parser, int min, int max) {\n         return new CharUngreedyLoop(this, min, max);\n      }\n      @Override\n      int minLength() {\n         return 1;\n      }\n   }\n   static class CharNode extends AbstractCharNode {\n      private char _ch;\n      CharNode(char ch) {\n         _ch = ch;\n      }\n      @Override\n      int firstChar() {\n         return _ch;\n      }\n      @Override\n      boolean[] firstSet(boolean[] firstSet) {\n         if (firstSet != null && _ch < firstSet.length) {\n            firstSet[_ch] = true;\n            return firstSet;\n         } else {\n            return null;\n         }\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         if (offset < length && string.charAt(offset) == _ch) {\n            return offset + 1;\n         } else {\n            return -1;\n         }\n      }\n   }\n   static final AnchorBegin ANCHOR_BEGIN = new AnchorBegin();\n   static final AnchorBeginOrNewline ANCHOR_BEGIN_OR_NEWLINE = new AnchorBeginOrNewline();\n   static final AnchorBeginRelative ANCHOR_BEGIN_RELATIVE = new AnchorBeginRelative();\n   static final AnchorEnd ANCHOR_END = new AnchorEnd();\n   static final AnchorEndOnly ANCHOR_END_ONLY = new AnchorEndOnly();\n   static final AnchorEndOrNewline ANCHOR_END_OR_NEWLINE = new AnchorEndOrNewline();\n   static class AnchorBegin extends NullableNode {\n      @Override\n      boolean isAnchorBegin() {\n         return true;\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         if (offset == 0) {\n            return offset;\n         } else {\n            return -1;\n         }\n      }\n   }\n   private static class AnchorBeginOrNewline extends NullableNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset == 0 || string.charAt(offset - 1) == '\\n') {\n            return offset;\n         } else {\n            return -1;\n         }\n      }\n   }\n   static class AnchorBeginRelative extends NullableNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset == state._start) {\n            return offset;\n         } else {\n            return -1;\n         }\n      }\n   }\n   private static class AnchorEnd extends NullableNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset == strlen\n                 || offset + 1 == strlen && string.charAt(offset) == '\\n') {\n            return offset;\n         } else {\n            return -1;\n         }\n      }\n   }\n   private static class AnchorEndOnly extends NullableNode {\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         if (offset == length) {\n            return offset;\n         } else {\n            return -1;\n         }\n      }\n   }\n   private static class AnchorEndOrNewline extends NullableNode {\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         if (offset == length || string.charAt(offset) == '\\n') {\n            return offset;\n         } else {\n            return -1;\n         }\n      }\n   }\n   static final RegexpNode DIGIT = RegexpSet.DIGIT.createNode();\n   static final RegexpNode NOT_DIGIT = RegexpSet.DIGIT.createNotNode();\n   static final RegexpNode DOT = RegexpSet.DOT.createNotNode();\n   static final RegexpNode NOT_DOT = RegexpSet.DOT.createNode();\n   static final RegexpNode SPACE = RegexpSet.SPACE.createNode();\n   static final RegexpNode NOT_SPACE = RegexpSet.SPACE.createNotNode();\n   static final RegexpNode S_WORD = RegexpSet.WORD.createNode();\n   static final RegexpNode NOT_S_WORD = RegexpSet.WORD.createNotNode();\n   static class AsciiSet extends AbstractCharNode {\n      private final boolean[] _set;\n      AsciiSet() {\n         _set = new boolean[128];\n      }\n      AsciiSet(boolean[] set) {\n         _set = set;\n      }\n      @Override\n      boolean[] firstSet(boolean[] firstSet) {\n         if (firstSet == null) {\n            return null;\n         }\n         for (int i = 0; i < _set.length; i++) {\n            if (_set[i]) {\n               firstSet[i] = true;\n            }\n         }\n         return firstSet;\n      }\n      void setChar(char ch) {\n         _set[ch] = true;\n      }\n      void clearChar(char ch) {\n         _set[ch] = false;\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         if (length <= offset) {\n            return -1;\n         }\n         char ch = string.charAt(offset);\n         if (ch < 128 && _set[ch]) {\n            return offset + 1;\n         } else {\n            return -1;\n         }\n      }\n   }\n   static class AsciiNotSet extends AbstractCharNode {\n      private final boolean[] _set;\n      AsciiNotSet() {\n         _set = new boolean[128];\n      }\n      AsciiNotSet(boolean[] set) {\n         _set = set;\n      }\n      void setChar(char ch) {\n         _set[ch] = true;\n      }\n      void clearChar(char ch) {\n         _set[ch] = false;\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         if (length <= offset) {\n            return -1;\n         }\n         char ch = string.charAt(offset);\n         if (ch < 128 && _set[ch]) {\n            return -1;\n         } else {\n            return offset + 1;\n         }\n      }\n   }\n   static class CharLoop extends RegexpNode {\n      private final RegexpNode _node;\n      private RegexpNode _next = N_END;\n      private int _min;\n      private int _max;\n      CharLoop(RegexpNode node, int min, int max) {\n         _node = node.getHead();\n         _min = min;\n         _max = max;\n         if (_min < 0) {\n            throw new IllegalStateException();\n         }\n      }\n      @Override\n      RegexpNode concat(RegexpNode next) {\n         if (next == null) {\n            throw new NullPointerException();\n         }\n         if (_next != null) {\n            _next = _next.concat(next);\n         } else {\n            _next = next.getHead();\n         }\n         return this;\n      }\n      @Override\n      RegexpNode createLoop(Regcomp parser, int min, int max) {\n         if (min == 0 && max == 1) {\n            _min = 0;\n            return this;\n         } else {\n            return new LoopHead(parser, this, min, max);\n         }\n      }\n      @Override\n      int minLength() {\n         return _min;\n      }\n      @Override\n      boolean[] firstSet(boolean[] firstSet) {\n         firstSet = _node.firstSet(firstSet);\n         if (_min > 0 && !_node.isNullable()) {\n            return firstSet;\n         }\n         firstSet = _next.firstSet(firstSet);\n         return firstSet;\n      }\n      //\n      // match functions\n      //\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         RegexpNode next = _next;\n         RegexpNode node = _node;\n         int min = _min;\n         int max = _max;\n         int i;\n         int tail;\n         for (i = 0; i < min; i++) {\n            tail = node.match(string, length, offset + i, state);\n            if (tail < 0) {\n               return tail;\n            }\n         }\n         for (; i < max; i++) {\n            if (node.match(string, length, offset + i, state) < 0) {\n               break;\n            }\n         }\n         for (; min <= i; i--) {\n            tail = next.match(string, length, offset + i, state);\n            if (tail >= 0) {\n               return tail;\n            }\n         }\n         return -1;\n      }\n      @Override\n      protected void toString(StringBuilder sb, Map<RegexpNode, Integer> map) {\n         if (toStringAdd(sb, map)) {\n            return;\n         }\n         sb.append(toStringName());\n         sb.append(\"[\").append(_min).append(\", \").append(_max).append(\", \");\n         _node.toString(sb, map);\n         sb.append(\", \");\n         _next.toString(sb, map);\n         sb.append(\"]\");\n      }\n   }\n   static class CharUngreedyLoop extends RegexpNode {\n      private final RegexpNode _node;\n      private RegexpNode _next = N_END;\n      private int _min;\n      private int _max;\n      CharUngreedyLoop(RegexpNode node, int min, int max) {\n         _node = node.getHead();\n         _min = min;\n         _max = max;\n         if (_min < 0) {\n            throw new IllegalStateException();\n         }\n      }\n      @Override\n      RegexpNode concat(RegexpNode next) {\n         if (next == null) {\n            throw new NullPointerException();\n         }\n         if (_next != null) {\n            _next = _next.concat(next);\n         } else {\n            _next = next.getHead();\n         }\n         return this;\n      }\n      @Override\n      RegexpNode createLoop(Regcomp parser, int min, int max) {\n         if (min == 0 && max == 1) {\n            _min = 0;\n            return this;\n         } else {\n            return new LoopHead(parser, this, min, max);\n         }\n      }\n      @Override\n      int minLength() {\n         return _min;\n      }\n      @Override\n      boolean[] firstSet(boolean[] firstSet) {\n         firstSet = _node.firstSet(firstSet);\n         if (_min > 0 && !_node.isNullable()) {\n            return firstSet;\n         }\n         firstSet = _next.firstSet(firstSet);\n         return firstSet;\n      }\n      //\n      // match functions\n      //\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         RegexpNode next = _next;\n         RegexpNode node = _node;\n         int min = _min;\n         int max = _max;\n         int i;\n         int tail;\n         for (i = 0; i < min; i++) {\n            tail = node.match(string, length, offset + i, state);\n            if (tail < 0) {\n               return tail;\n            }\n         }\n         for (; i <= max; i++) {\n            tail = next.match(string, length, offset + i, state);\n            if (tail >= 0) {\n               return tail;\n            }\n            if (node.match(string, length, offset + i, state) < 0) {\n               return -1;\n            }\n         }\n         return -1;\n      }\n      @Override\n      public String toString() {\n         return \"CharUngreedyLoop[\" + _min + \", \"\n                 + _max + \", \" + _node + \", \" + _next + \"]\";\n      }\n   }\n   final static class Concat extends RegexpNode {\n      private final RegexpNode _head;\n      private RegexpNode _next;\n      Concat(RegexpNode head, RegexpNode next) {\n         if (head == null || next == null) {\n            throw new NullPointerException();\n         }\n         _head = head;\n         _next = next;\n      }\n      @Override\n      RegexpNode concat(RegexpNode next) {\n         _next = _next.concat(next);\n         return this;\n      }\n      //\n      // optim functions\n      //\n      @Override\n      int minLength() {\n         return _head.minLength() + _next.minLength();\n      }\n      @Override\n      int firstChar() {\n         return _head.firstChar();\n      }\n      @Override\n      boolean[] firstSet(boolean[] firstSet) {\n         firstSet = _head.firstSet(firstSet);\n         if (_head.isNullable()) {\n            firstSet = _next.firstSet(firstSet);\n         }\n         return firstSet;\n      }\n      @Override\n      String prefix() {\n         return _head.prefix();\n      }\n      @Override\n      boolean isAnchorBegin() {\n         return _head.isAnchorBegin();\n      }\n      RegexpNode getConcatHead() {\n         return _head;\n      }\n      RegexpNode getConcatNext() {\n         return _next;\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         offset = _head.match(string, length, offset, state);\n         if (offset < 0) {\n            return -1;\n         } else {\n            return _next.match(string, length, offset, state);\n         }\n      }\n      @Override\n      protected void toString(StringBuilder sb, Map<RegexpNode, Integer> map) {\n         if (toStringAdd(sb, map)) {\n            return;\n         }\n         sb.append(toStringName());\n         sb.append(\"[\");\n         _head.toString(sb, map);\n         sb.append(\", \");\n         _next.toString(sb, map);\n         sb.append(\"]\");\n      }\n   }\n   static class ConditionalHead extends RegexpNode {\n      private RegexpNode _first;\n      private RegexpNode _second;\n      private RegexpNode _tail;\n      private final int _group;\n      ConditionalHead(int group) {\n         _group = group;\n         _tail = new ConditionalTail(this);\n      }\n      void setFirst(RegexpNode first) {\n         _first = first;\n      }\n      void setSecond(RegexpNode second) {\n         _second = second;\n      }\n      void setTail(RegexpNode tail) {\n         _tail = tail;\n      }\n      @Override\n      RegexpNode getTail() {\n         return _tail;\n      }\n      @Override\n      RegexpNode concat(RegexpNode next) {\n         _tail.concat(next);\n         return this;\n      }\n      @Override\n      RegexpNode createLoop(Regcomp parser, int min, int max) {\n         return _tail.createLoop(parser, min, max);\n      }\n      /**\n       * Create an or expression\n       */\n      @Override\n      RegexpNode createOr(RegexpNode node) {\n         return _tail.createOr(node);\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         int begin = state.getBegin(_group);\n         int end = state.getEnd(_group);\n         if (_group <= state.getLength() && begin >= 0 && begin <= end) {\n            int match = _first.match(string, length, offset, state);\n            return match;\n         } else if (_second != null) {\n            return _second.match(string, length, offset, state);\n         } else {\n            return _tail.match(string, length, offset, state);\n         }\n      }\n      @Override\n      public String toString() {\n         return (getClass().getSimpleName()\n                 + \"[\" + _group\n                 + \",\" + _first\n                 + \",\" + _tail\n                 + \"]\");\n      }\n   }\n   static class ConditionalTail extends RegexpNode {\n      private RegexpNode _head;\n      private RegexpNode _next;\n      ConditionalTail(ConditionalHead head) {\n         _next = N_END;\n         _head = head;\n         head.setTail(this);\n      }\n      @Override\n      RegexpNode getHead() {\n         return _head;\n      }\n      @Override\n      RegexpNode concat(RegexpNode next) {\n         if (_next != null) {\n            _next = _next.concat(next);\n         } else {\n            _next = next;\n         }\n         return _head;\n      }\n      @Override\n      RegexpNode createLoop(Regcomp parser, int min, int max) {\n         LoopHead head = new LoopHead(parser, _head, min, max);\n         _next = _next.concat(head.getTail());\n         return head;\n      }\n      @Override\n      RegexpNode createLoopUngreedy(Regcomp parser, int min, int max) {\n         LoopHeadUngreedy head = new LoopHeadUngreedy(parser, _head, min, max);\n         _next = _next.concat(head.getTail());\n         return head;\n      }\n      /**\n       * Create an or expression\n       */\n      @Override\n      RegexpNode createOr(RegexpNode node) {\n         _next = _next.createOr(node);\n         return getHead();\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         return _next.match(string, length, offset, state);\n      }\n   }\n   final static EmptyNode EMPTY = new EmptyNode();\n   /**\n    * Matches an empty production\n    */\n   static class EmptyNode extends RegexpNode {\n      // needed for php/4e6b\n      EmptyNode() {\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         return offset;\n      }\n   }\n   static class End extends RegexpNode {\n      @Override\n      RegexpNode concat(RegexpNode next) {\n         return next;\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         return offset;\n      }\n   }\n   static class Group extends RegexpNode {\n      private final RegexpNode _node;\n      private final int _group;\n      Group(RegexpNode node, int group) {\n         _node = node.getHead();\n         _group = group;\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         int oldBegin = state.getBegin(_group);\n         state.setBegin(_group, offset);\n         int tail = _node.match(string, length, offset, state);\n         if (tail >= 0) {\n            state.setEnd(_group, tail);\n            return tail;\n         } else {\n            state.setBegin(_group, oldBegin);\n            return -1;\n         }\n      }\n   }\n   static class GroupHead extends RegexpNode {\n      private RegexpNode _node;\n      private RegexpNode _tail;\n      private final int _group;\n      GroupHead(int group) {\n         _group = group;\n         _tail = new GroupTail(group, this);\n      }\n      void setNode(RegexpNode node) {\n         _node = node.getHead();\n         // php/4eh1\n         if (_node == this) {\n            _node = _tail;\n         }\n      }\n      @Override\n      RegexpNode getTail() {\n         return _tail;\n      }\n      @Override\n      RegexpNode concat(RegexpNode next) {\n         _tail.concat(next);\n         return this;\n      }\n      @Override\n      RegexpNode createLoop(Regcomp parser, int min, int max) {\n         return _tail.createLoop(parser, min, max);\n      }\n      @Override\n      RegexpNode createLoopUngreedy(Regcomp parser, int min, int max) {\n         return _tail.createLoopUngreedy(parser, min, max);\n      }\n      @Override\n      int minLength() {\n         return _node.minLength();\n      }\n      @Override\n      int firstChar() {\n         return _node.firstChar();\n      }\n      @Override\n      boolean[] firstSet(boolean[] firstSet) {\n         return _node.firstSet(firstSet);\n      }\n      @Override\n      String prefix() {\n         return _node.prefix();\n      }\n      @Override\n      boolean isAnchorBegin() {\n         return _node.isAnchorBegin();\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         int oldBegin = state.getBegin(_group);\n         state.setBegin(_group, offset);\n         int tail = _node.match(string, length, offset, state);\n         if (tail >= 0) {\n            return tail;\n         } else {\n            state.setBegin(_group, oldBegin);\n            return tail;\n         }\n      }\n      @Override\n      protected void toString(StringBuilder sb, Map<RegexpNode, Integer> map) {\n         if (toStringAdd(sb, map)) {\n            return;\n         }\n         sb.append(toStringName());\n         sb.append(\"[\");\n         sb.append(_group);\n         sb.append(\", \");\n         _node.toString(sb, map);\n         sb.append(\"]\");\n      }\n   }\n   static class GroupTail extends RegexpNode {\n      private RegexpNode _head;\n      private RegexpNode _next;\n      private final int _group;\n      private GroupTail(int group, GroupHead head) {\n         _next = N_END;\n         _head = head;\n         _group = group;\n      }\n      @Override\n      RegexpNode getHead() {\n         return _head;\n      }\n      @Override\n      RegexpNode concat(RegexpNode next) {\n         if (_next != null) {\n            _next = _next.concat(next);\n         } else {\n            _next = next;\n         }\n         return _head;\n      }\n      @Override\n      RegexpNode createLoop(Regcomp parser, int min, int max) {\n         LoopHead head = new LoopHead(parser, _head, min, max);\n         _next = head.getTail();\n         return head;\n      }\n      @Override\n      RegexpNode createLoopUngreedy(Regcomp parser, int min, int max) {\n         LoopHeadUngreedy head = new LoopHeadUngreedy(parser, _head, min, max);\n         _next = head.getTail();\n         return head;\n      }\n      /**\n       * Create an or expression\n       */\n      // php/4e6b\n    /*\n      @Override\n      RegexpNode createOr(RegexpNode node)\n      {\n      _next = _next.createOr(node);\n      return getHead();\n      }\n       */\n      @Override\n      int minLength() {\n         return _next.minLength();\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         int oldEnd = state.getEnd(_group);\n         int oldLength = state.getLength();\n         if (_group > 0) {\n            state.setEnd(_group, offset);\n            if (oldLength < _group) {\n               state.setLength(_group);\n            }\n         }\n         int tail = _next.match(string, length, offset, state);\n         if (tail < 0) {\n            state.setEnd(_group, oldEnd);\n            state.setLength(oldLength);\n            return -1;\n         } else {\n            return tail;\n         }\n      }\n      @Override\n      protected void toString(StringBuilder sb, Map<RegexpNode, Integer> map) {\n         if (toStringAdd(sb, map)) {\n            return;\n         }\n         sb.append(toStringName());\n         sb.append(\"[\");\n         sb.append(_group);\n         sb.append(\", \");\n         _next.toString(sb, map);\n         sb.append(\"]\");\n      }\n   }\n   static class GroupRef extends RegexpNode {\n      private final int _group;\n      GroupRef(int group) {\n         _group = group;\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         if (state.getLength() < _group) {\n            return -1;\n         }\n         int groupBegin = state.getBegin(_group);\n         int groupLength = state.getEnd(_group) - groupBegin;\n         if (string.regionMatches(offset, string, groupBegin, groupLength)) {\n            return offset + groupLength;\n         } else {\n            return -1;\n         }\n      }\n   }\n   static class Lookahead extends RegexpNode {\n      private final RegexpNode _head;\n      Lookahead(RegexpNode head) {\n         _head = head;\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         if (_head.match(string, length, offset, state) >= 0) {\n            return offset;\n         } else {\n            return -1;\n         }\n      }\n   }\n   static class NotLookahead extends RegexpNode {\n      private final RegexpNode _head;\n      NotLookahead(RegexpNode head) {\n         _head = head;\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         if (_head.match(string, length, offset, state) < 0) {\n            return offset;\n         } else {\n            return -1;\n         }\n      }\n   }\n   static class Lookbehind extends RegexpNode {\n      private final RegexpNode _head;\n      Lookbehind(RegexpNode head) {\n         _head = head.getHead();\n      }\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         int length = _head.minLength();\n         if (offset < length) {\n            return -1;\n         } else if (_head.match(string, strlen, offset - length, state) >= 0) {\n            return offset;\n         } else {\n            return -1;\n         }\n      }\n   }\n   static class NotLookbehind extends RegexpNode {\n      private final RegexpNode _head;\n      NotLookbehind(RegexpNode head) {\n         _head = head;\n      }\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         int length = _head.minLength();\n         if (offset < length) {\n            return offset;\n         } else if (_head.match(string, strlen, offset - length, state) < 0) {\n            return offset;\n         } else {\n            return -1;\n         }\n      }\n   }\n   /**\n    * A nullable node can match an empty string.\n    */\n   abstract static class NullableNode extends RegexpNode {\n      @Override\n      boolean isNullable() {\n         return true;\n      }\n   }\n   static class LoopHead extends RegexpNode {\n      private final int _index;\n      final RegexpNode _node;\n      private final RegexpNode _tail;\n      private int _min;\n      private int _max;\n      LoopHead(Regcomp parser, RegexpNode node, int min, int max) {\n         _index = parser.nextLoopIndex();\n         _tail = new LoopTail(_index, this);\n         _node = node.concat(_tail).getHead();\n         _min = min;\n         _max = max;\n      }\n      @Override\n      RegexpNode getTail() {\n         return _tail;\n      }\n      @Override\n      RegexpNode concat(RegexpNode next) {\n         _tail.concat(next);\n         return this;\n      }\n      @Override\n      RegexpNode createLoop(Regcomp parser, int min, int max) {\n         if (min == 0 && max == 1) {\n            _min = 0;\n            return this;\n         } else {\n            return new LoopHead(parser, this, min, max);\n         }\n      }\n      @Override\n      int minLength() {\n         return _min * _node.minLength() + _tail.minLength();\n      }\n      @Override\n      boolean[] firstSet(boolean[] firstSet) {\n         firstSet = _node.firstSet(firstSet);\n         if (_min > 0 && !_node.isNullable()) {\n            return firstSet;\n         }\n         firstSet = _tail.firstSet(firstSet);\n         return firstSet;\n      }\n      //\n      // match functions\n      //\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         state._loopCount[_index] = 0;\n         RegexpNode node = _node;\n         int min = _min;\n         int i;\n         for (i = 0; i < min - 1; i++) {\n            state._loopCount[_index] = i;\n            offset = node.match(string, strlen, offset, state);\n            if (offset < 0) {\n               return offset;\n            }\n         }\n         state._loopCount[_index] = i;\n         state._loopOffset[_index] = offset;\n         int tail = node.match(string, strlen, offset, state);\n         if (tail >= 0) {\n            return tail;\n         } else if (state._loopCount[_index] < _min) {\n            return tail;\n         } else {\n            return _tail.match(string, strlen, offset, state);\n         }\n      }\n      @Override\n      public String toString() {\n         return \"LoopHead[\" + _min + \", \" + _max + \", \" + _node + \"]\";\n      }\n   }\n   static class LoopTail extends RegexpNode {\n      private final int _index;\n      private LoopHead _head;\n      private RegexpNode _next;\n      LoopTail(int index, LoopHead head) {\n         _index = index;\n         _head = head;\n         _next = N_END;\n      }\n      @Override\n      RegexpNode getHead() {\n         return _head;\n      }\n      @Override\n      RegexpNode concat(RegexpNode next) {\n         if (_next != null) {\n            _next = _next.concat(next);\n         } else {\n            _next = next;\n         }\n         if (_next == this) {\n            throw new IllegalStateException();\n         }\n         return this;\n      }\n      //\n      // match functions\n      //\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         int oldCount = state._loopCount[_index];\n         if (oldCount + 1 < _head._min) {\n            return offset;\n         } else if (oldCount + 1 < _head._max) {\n            int oldOffset = state._loopOffset[_index];\n            if (oldOffset != offset) {\n               state._loopCount[_index] = oldCount + 1;\n               state._loopOffset[_index] = offset;\n               int tail = _head._node.match(string, strlen, offset, state);\n               if (tail >= 0) {\n                  return tail;\n               }\n               state._loopCount[_index] = oldCount;\n               state._loopOffset[_index] = oldOffset;\n            }\n         }\n         return _next.match(string, strlen, offset, state);\n      }\n      @Override\n      public String toString() {\n         return \"LoopTail[\" + _next + \"]\";\n      }\n   }\n   static class LoopHeadUngreedy extends RegexpNode {\n      private final int _index;\n      final RegexpNode _node;\n      private final LoopTailUngreedy _tail;\n      private int _min;\n      private int _max;\n      LoopHeadUngreedy(Regcomp parser, RegexpNode node, int min, int max) {\n         _index = parser.nextLoopIndex();\n         _min = min;\n         _max = max;\n         _tail = new LoopTailUngreedy(_index, this);\n         _node = node.getTail().concat(_tail).getHead();\n      }\n      @Override\n      RegexpNode getTail() {\n         return _tail;\n      }\n      @Override\n      RegexpNode concat(RegexpNode next) {\n         _tail.concat(next);\n         return this;\n      }\n      @Override\n      RegexpNode createLoop(Regcomp parser, int min, int max) {\n         if (min == 0 && max == 1) {\n            _min = 0;\n            return this;\n         } else {\n            return new LoopHead(parser, this, min, max);\n         }\n      }\n      @Override\n      int minLength() {\n         return _min * _node.minLength() + _tail.minLength();\n      }\n      //\n      // match functions\n      //\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         state._loopCount[_index] = 0;\n         RegexpNode node = _node;\n         int min = _min;\n         for (int i = 0; i < min; i++) {\n            state._loopCount[_index] = i;\n            state._loopOffset[_index] = offset;\n            offset = node.match(string, strlen, offset, state);\n            if (offset < 0) {\n               return -1;\n            }\n         }\n         int tail = _tail._next.match(string, strlen, offset, state);\n         if (tail >= 0) {\n            return tail;\n         }\n         if (min < _max) {\n            state._loopCount[_index] = min;\n            state._loopOffset[_index] = offset;\n            return node.match(string, strlen, offset, state);\n         } else {\n            return -1;\n         }\n      }\n      @Override\n      public String toString() {\n         return \"LoopHeadUngreedy[\" + _min + \", \" + _max + \", \" + _node + \"]\";\n      }\n   }\n   static class LoopTailUngreedy extends RegexpNode {\n      private final int _index;\n      private LoopHeadUngreedy _head;\n      private RegexpNode _next;\n      LoopTailUngreedy(int index, LoopHeadUngreedy head) {\n         _index = index;\n         _head = head;\n         _next = N_END;\n      }\n      @Override\n      RegexpNode getHead() {\n         return _head;\n      }\n      @Override\n      RegexpNode concat(RegexpNode next) {\n         if (_next != null) {\n            _next = _next.concat(next);\n         } else {\n            _next = next;\n         }\n         if (_next == this) {\n            throw new IllegalStateException();\n         }\n         return this;\n      }\n      //\n      // match functions\n      //\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         int i = state._loopCount[_index];\n         int oldOffset = state._loopOffset[_index];\n         if (i < _head._min) {\n            return offset;\n         }\n         if (offset == oldOffset) {\n            return -1;\n         }\n         int tail = _next.match(string, strlen, offset, state);\n         if (tail >= 0) {\n            return tail;\n         }\n         if (i + 1 < _head._max) {\n            state._loopCount[_index] = i + 1;\n            state._loopOffset[_index] = offset;\n            tail = _head._node.match(string, strlen, offset, state);\n            state._loopCount[_index] = i;\n            state._loopOffset[_index] = oldOffset;\n            return tail;\n         } else {\n            return -1;\n         }\n      }\n      @Override\n      public String toString() {\n         return \"LoopTailUngreedy[\" + _next + \"]\";\n      }\n   }\n   static class Not extends RegexpNode {\n      private RegexpNode _node;\n      private Not(RegexpNode node) {\n         _node = node;\n      }\n      static Not create(RegexpNode node) {\n         return new Not(node);\n      }\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         int result = _node.match(string, strlen, offset, state);\n         if (result >= 0) {\n            return -1;\n         } else {\n            return offset + 1;\n         }\n      }\n   }\n   final static class Or extends RegexpNode {\n      private final RegexpNode _left;\n      private Or _right;\n      private Or(RegexpNode left, Or right) {\n         _left = left;\n         _right = right;\n      }\n      static Or create(RegexpNode left, RegexpNode right) {\n         if (left instanceof Or) {\n            return ((Or) left).append(right);\n         } else if (right instanceof Or) {\n            return new Or(left, (Or) right);\n         } else {\n            return new Or(left, new Or(right, null));\n         }\n      }\n      private Or append(RegexpNode right) {\n         if (_right != null) {\n            _right = _right.append(right);\n         } else if (right instanceof Or) {\n            _right = (Or) right;\n         } else {\n            _right = new Or(right, null);\n         }\n         return this;\n      }\n      @Override\n      int minLength() {\n         if (_right != null) {\n            return Math.min(_left.minLength(), _right.minLength());\n         } else {\n            return _left.minLength();\n         }\n      }\n      @Override\n      int firstChar() {\n         if (_right == null) {\n            return _left.firstChar();\n         }\n         int leftChar = _left.firstChar();\n         int rightChar = _right.firstChar();\n         if (leftChar == rightChar) {\n            return leftChar;\n         } else {\n            return -1;\n         }\n      }\n      @Override\n      boolean[] firstSet(boolean[] firstSet) {\n         if (_right == null) {\n            return _left.firstSet(firstSet);\n         }\n         firstSet = _left.firstSet(firstSet);\n         firstSet = _right.firstSet(firstSet);\n         return firstSet;\n      }\n      @Override\n      boolean isAnchorBegin() {\n         return _left.isAnchorBegin() && _right != null && _right.isAnchorBegin();\n      }\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         for (Or ptr = this; ptr != null; ptr = ptr._right) {\n            int value = ptr._left.match(string, strlen, offset, state);\n            if (value >= 0) {\n               return value;\n            }\n         }\n         return -1;\n      }\n      @Override\n      protected void toString(StringBuilder sb, Map<RegexpNode, Integer> map) {\n         if (toStringAdd(sb, map)) {\n            return;\n         }\n         sb.append(toStringName());\n         sb.append(\"[\");\n         _left.toString(sb, map);\n         for (Or ptr = _right; ptr != null; ptr = ptr._right) {\n            sb.append(\",\");\n            ptr._left.toString(sb, map);\n         }\n         sb.append(\"]\");\n      }\n      @Override\n      public String toString() {\n         StringBuilder sb = new StringBuilder();\n         sb.append(\"Or[\");\n         sb.append(_left);\n         for (Or ptr = _right; ptr != null; ptr = ptr._right) {\n            sb.append(\",\");\n            sb.append(ptr._left);\n         }\n         sb.append(\"]\");\n         return sb.toString();\n      }\n   }\n   static class PossessiveLoop extends RegexpNode {\n      private final RegexpNode _node;\n      private RegexpNode _next = N_END;\n      private int _min;\n      private int _max;\n      PossessiveLoop(RegexpNode node, int min, int max) {\n         _node = node.getHead();\n         _min = min;\n         _max = max;\n      }\n      @Override\n      RegexpNode concat(RegexpNode next) {\n         if (next == null) {\n            throw new NullPointerException();\n         }\n         if (_next != null) {\n            _next = _next.concat(next);\n         } else {\n            _next = next;\n         }\n         return this;\n      }\n      @Override\n      RegexpNode createLoop(Regcomp parser, int min, int max) {\n         if (min == 0 && max == 1) {\n            _min = 0;\n            return this;\n         } else {\n            return new LoopHead(parser, this, min, max);\n         }\n      }\n      //\n      // match functions\n      //\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         RegexpNode node = _node;\n         int min = _min;\n         int max = _max;\n         int i;\n         for (i = 0; i < min; i++) {\n            offset = node.match(string, strlen, offset, state);\n            if (offset < 0) {\n               return -1;\n            }\n         }\n         for (; i < max; i++) {\n            int tail = node.match(string, strlen, offset, state);\n            if (tail < 0 || tail == offset) {\n               return _next.match(string, strlen, offset, state);\n            }\n            offset = tail;\n         }\n         return _next.match(string, strlen, offset, state);\n      }\n      @Override\n      public String toString() {\n         return \"PossessiveLoop[\" + _min + \", \"\n                 + _max + \", \" + _node + \", \" + _next + \"]\";\n      }\n   }\n   static final PropC PROP_C = new PropC();\n   static final PropNotC PROP_NOT_C = new PropNotC();\n   static final Prop PROP_Cc = new Prop(Character.CONTROL);\n   static final PropNot PROP_NOT_Cc = new PropNot(Character.CONTROL);\n   static final Prop PROP_Cf = new Prop(Character.FORMAT);\n   static final PropNot PROP_NOT_Cf = new PropNot(Character.FORMAT);\n   static final Prop PROP_Cn = new Prop(Character.UNASSIGNED);\n   static final PropNot PROP_NOT_Cn = new PropNot(Character.UNASSIGNED);\n   static final Prop PROP_Co = new Prop(Character.PRIVATE_USE);\n   static final PropNot PROP_NOT_Co = new PropNot(Character.PRIVATE_USE);\n   static final Prop PROP_Cs = new Prop(Character.SURROGATE);\n   static final PropNot PROP_NOT_Cs = new PropNot(Character.SURROGATE);\n   static final PropL PROP_L = new PropL();\n   static final PropNotL PROP_NOT_L = new PropNotL();\n   static final Prop PROP_Ll = new Prop(Character.LOWERCASE_LETTER);\n   static final PropNot PROP_NOT_Ll = new PropNot(Character.LOWERCASE_LETTER);\n   static final Prop PROP_Lm = new Prop(Character.MODIFIER_LETTER);\n   static final PropNot PROP_NOT_Lm = new PropNot(Character.MODIFIER_LETTER);\n   static final Prop PROP_Lo = new Prop(Character.OTHER_LETTER);\n   static final PropNot PROP_NOT_Lo = new PropNot(Character.OTHER_LETTER);\n   static final Prop PROP_Lt = new Prop(Character.TITLECASE_LETTER);\n   static final PropNot PROP_NOT_Lt = new PropNot(Character.TITLECASE_LETTER);\n   static final Prop PROP_Lu = new Prop(Character.UPPERCASE_LETTER);\n   static final PropNot PROP_NOT_Lu = new PropNot(Character.UPPERCASE_LETTER);\n   static final PropM PROP_M = new PropM();\n   static final PropNotM PROP_NOT_M = new PropNotM();\n   static final Prop PROP_Mc = new Prop(Character.COMBINING_SPACING_MARK);\n   static final PropNot PROP_NOT_Mc = new PropNot(Character.COMBINING_SPACING_MARK);\n   static final Prop PROP_Me = new Prop(Character.ENCLOSING_MARK);\n   static final PropNot PROP_NOT_Me = new PropNot(Character.ENCLOSING_MARK);\n   static final Prop PROP_Mn = new Prop(Character.NON_SPACING_MARK);\n   static final PropNot PROP_NOT_Mn = new PropNot(Character.NON_SPACING_MARK);\n   static final PropN PROP_N = new PropN();\n   static final PropNotN PROP_NOT_N = new PropNotN();\n   static final Prop PROP_Nd = new Prop(Character.DECIMAL_DIGIT_NUMBER);\n   static final PropNot PROP_NOT_Nd = new PropNot(Character.DECIMAL_DIGIT_NUMBER);\n   static final Prop PROP_Nl = new Prop(Character.LETTER_NUMBER);\n   static final PropNot PROP_NOT_Nl = new PropNot(Character.LETTER_NUMBER);\n   static final Prop PROP_No = new Prop(Character.OTHER_NUMBER);\n   static final PropNot PROP_NOT_No = new PropNot(Character.OTHER_NUMBER);\n   static final PropP PROP_P = new PropP();\n   static final PropNotP PROP_NOT_P = new PropNotP();\n   static final Prop PROP_Pc = new Prop(Character.CONNECTOR_PUNCTUATION);\n   static final PropNot PROP_NOT_Pc = new PropNot(Character.CONNECTOR_PUNCTUATION);\n   static final Prop PROP_Pd = new Prop(Character.DASH_PUNCTUATION);\n   static final PropNot PROP_NOT_Pd = new PropNot(Character.DASH_PUNCTUATION);\n   static final Prop PROP_Pe = new Prop(Character.END_PUNCTUATION);\n   static final PropNot PROP_NOT_Pe = new PropNot(Character.END_PUNCTUATION);\n   static final Prop PROP_Pf = new Prop(Character.FINAL_QUOTE_PUNCTUATION);\n   static final PropNot PROP_NOT_Pf = new PropNot(Character.FINAL_QUOTE_PUNCTUATION);\n   static final Prop PROP_Pi = new Prop(Character.INITIAL_QUOTE_PUNCTUATION);\n   static final PropNot PROP_NOT_Pi = new PropNot(Character.INITIAL_QUOTE_PUNCTUATION);\n   static final Prop PROP_Po = new Prop(Character.OTHER_PUNCTUATION);\n   static final PropNot PROP_NOT_Po = new PropNot(Character.OTHER_PUNCTUATION);\n   static final Prop PROP_Ps = new Prop(Character.START_PUNCTUATION);\n   static final PropNot PROP_NOT_Ps = new PropNot(Character.START_PUNCTUATION);\n   static final PropS PROP_S = new PropS();\n   static final PropNotS PROP_NOT_S = new PropNotS();\n   static final Prop PROP_Sc = new Prop(Character.CURRENCY_SYMBOL);\n   static final PropNot PROP_NOT_Sc = new PropNot(Character.CURRENCY_SYMBOL);\n   static final Prop PROP_Sk = new Prop(Character.MODIFIER_SYMBOL);\n   static final PropNot PROP_NOT_Sk = new PropNot(Character.MODIFIER_SYMBOL);\n   static final Prop PROP_Sm = new Prop(Character.MATH_SYMBOL);\n   static final PropNot PROP_NOT_Sm = new PropNot(Character.MATH_SYMBOL);\n   static final Prop PROP_So = new Prop(Character.OTHER_SYMBOL);\n   static final PropNot PROP_NOT_So = new PropNot(Character.OTHER_SYMBOL);\n   static final PropZ PROP_Z = new PropZ();\n   static final PropNotZ PROP_NOT_Z = new PropNotZ();\n   static final Prop PROP_Zl = new Prop(Character.LINE_SEPARATOR);\n   static final PropNot PROP_NOT_Zl = new PropNot(Character.LINE_SEPARATOR);\n   static final Prop PROP_Zp = new Prop(Character.PARAGRAPH_SEPARATOR);\n   static final PropNot PROP_NOT_Zp = new PropNot(Character.PARAGRAPH_SEPARATOR);\n   static final Prop PROP_Zs = new Prop(Character.SPACE_SEPARATOR);\n   static final PropNot PROP_NOT_Zs = new PropNot(Character.SPACE_SEPARATOR);\n   private static class Prop extends AbstractCharNode {\n      private final int _category;\n      Prop(int category) {\n         _category = category;\n      }\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            if (Character.getType(ch) == _category) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   private static class PropNot extends AbstractCharNode {\n      private final int _category;\n      PropNot(int category) {\n         _category = category;\n      }\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            if (Character.getType(ch) != _category) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropC extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (value == Character.CONTROL\n                    || value == Character.FORMAT\n                    || value == Character.UNASSIGNED\n                    || value == Character.PRIVATE_USE\n                    || value == Character.SURROGATE) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropNotC extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (!(value == Character.CONTROL\n                    || value == Character.FORMAT\n                    || value == Character.UNASSIGNED\n                    || value == Character.PRIVATE_USE\n                    || value == Character.SURROGATE)) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropL extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (value == Character.LOWERCASE_LETTER\n                    || value == Character.MODIFIER_LETTER\n                    || value == Character.OTHER_LETTER\n                    || value == Character.TITLECASE_LETTER\n                    || value == Character.UPPERCASE_LETTER) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropNotL extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (!(value == Character.LOWERCASE_LETTER\n                    || value == Character.MODIFIER_LETTER\n                    || value == Character.OTHER_LETTER\n                    || value == Character.TITLECASE_LETTER\n                    || value == Character.UPPERCASE_LETTER)) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropM extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (value == Character.COMBINING_SPACING_MARK\n                    || value == Character.ENCLOSING_MARK\n                    || value == Character.NON_SPACING_MARK) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropNotM extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (!(value == Character.COMBINING_SPACING_MARK\n                    || value == Character.ENCLOSING_MARK\n                    || value == Character.NON_SPACING_MARK)) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropN extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (value == Character.DECIMAL_DIGIT_NUMBER\n                    || value == Character.LETTER_NUMBER\n                    || value == Character.OTHER_NUMBER) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropNotN extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (!(value == Character.DECIMAL_DIGIT_NUMBER\n                    || value == Character.LETTER_NUMBER\n                    || value == Character.OTHER_NUMBER)) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropP extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (value == Character.CONNECTOR_PUNCTUATION\n                    || value == Character.DASH_PUNCTUATION\n                    || value == Character.END_PUNCTUATION\n                    || value == Character.FINAL_QUOTE_PUNCTUATION\n                    || value == Character.INITIAL_QUOTE_PUNCTUATION\n                    || value == Character.OTHER_PUNCTUATION\n                    || value == Character.START_PUNCTUATION) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropNotP extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (!(value == Character.CONNECTOR_PUNCTUATION\n                    || value == Character.DASH_PUNCTUATION\n                    || value == Character.END_PUNCTUATION\n                    || value == Character.FINAL_QUOTE_PUNCTUATION\n                    || value == Character.INITIAL_QUOTE_PUNCTUATION\n                    || value == Character.OTHER_PUNCTUATION\n                    || value == Character.START_PUNCTUATION)) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropS extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (value == Character.CURRENCY_SYMBOL\n                    || value == Character.MODIFIER_SYMBOL\n                    || value == Character.MATH_SYMBOL\n                    || value == Character.OTHER_SYMBOL) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropNotS extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (!(value == Character.CURRENCY_SYMBOL\n                    || value == Character.MODIFIER_SYMBOL\n                    || value == Character.MATH_SYMBOL\n                    || value == Character.OTHER_SYMBOL)) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropZ extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (value == Character.LINE_SEPARATOR\n                    || value == Character.PARAGRAPH_SEPARATOR\n                    || value == Character.SPACE_SEPARATOR) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class PropNotZ extends AbstractCharNode {\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (offset < strlen) {\n            char ch = string.charAt(offset);\n            int value = Character.getType(ch);\n            if (!(value == Character.LINE_SEPARATOR\n                    || value == Character.PARAGRAPH_SEPARATOR\n                    || value == Character.SPACE_SEPARATOR)) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class Recursive extends RegexpNode {\n      private RegexpNode _top;\n      Recursive() {\n      }\n      void setTop(RegexpNode top) {\n         _top = top;\n      }\n      @Override\n      int match(StringValue string, int length, int offset, RegexpState state) {\n         return _top.match(string, length, offset, state);\n      }\n   }\n   static class Set extends AbstractCharNode {\n      private final boolean[] _asciiSet;\n      private final IntSet _range;\n      Set(boolean[] set, IntSet range) {\n         _asciiSet = set;\n         _range = range;\n      }\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState state) {\n         if (strlen <= offset) {\n            return -1;\n         }\n         char ch = string.charAt(offset++);\n         if (ch < 128) {\n            return _asciiSet[ch] ? offset : -1;\n         }\n         int codePoint = ch;\n         if ('\\uD800' <= ch && ch <= '\\uDBFF' && offset < strlen) {\n", "answers": ["            char low = string.charAt(offset++);"], "length": 6474, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "d616bbc2ccc30cab16459d0300a1d8c933b33e1455e3aa84"}
{"input": "", "context": "/**\n* The contents of this file are subject to the Mozilla Public License\n* Version 1.1 (the \"License\"); you may not use this file except in\n* compliance with the License. You may obtain a copy of the License at\n* http://www.mozilla.org/MPL/\n*\n* Software distributed under the License is distributed on an \"AS IS\"\n* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n* License for the specific language governing rights and limitations under\n* the License.\n*\n* The Original Code is OpenELIS code.\n*\n* Copyright (C) The Minnesota Department of Health.  All Rights Reserved.\n*\n* Contributor(s): CIRG, University of Washington, Seattle WA.\n*/\npackage us.mn.state.health.lims.common.provider.validation;\nimport static us.mn.state.health.lims.common.provider.validation.IAccessionNumberValidator.ValidationResults.PATIENT_STATUS_FAIL;\nimport static us.mn.state.health.lims.common.provider.validation.IAccessionNumberValidator.ValidationResults.SAMPLE_FOUND;\nimport static us.mn.state.health.lims.common.provider.validation.IAccessionNumberValidator.ValidationResults.SAMPLE_STATUS_FAIL;\nimport java.util.List;\nimport org.apache.commons.validator.GenericValidator;\nimport us.mn.state.health.lims.common.action.IActionConstants;\nimport us.mn.state.health.lims.common.services.StatusService;\nimport us.mn.state.health.lims.common.services.StatusService.RecordStatus;\nimport us.mn.state.health.lims.common.services.StatusSet;\nimport us.mn.state.health.lims.common.util.StringUtil;\nimport us.mn.state.health.lims.observationhistory.dao.ObservationHistoryDAO;\nimport us.mn.state.health.lims.observationhistory.daoimpl.ObservationHistoryDAOImpl;\nimport us.mn.state.health.lims.observationhistory.valueholder.ObservationHistory;\nimport us.mn.state.health.lims.observationhistorytype.ObservationHistoryTypeMap;\nimport us.mn.state.health.lims.patient.valueholder.Patient;\nimport us.mn.state.health.lims.project.dao.ProjectDAO;\nimport us.mn.state.health.lims.project.daoimpl.ProjectDAOImpl;\nimport us.mn.state.health.lims.project.valueholder.Project;\nimport us.mn.state.health.lims.sample.dao.SampleDAO;\nimport us.mn.state.health.lims.sample.daoimpl.SampleDAOImpl;\nimport us.mn.state.health.lims.sample.util.AccessionNumberUtil;\nimport us.mn.state.health.lims.sample.valueholder.Sample;\npublic class ProgramAccessionValidator implements IAccessionNumberValidator {\n\tprivate static final String INCREMENT_STARTING_VALUE  = \"00001\";\n\tprivate static final int UPPER_INC_RANGE = 99999;\n\tprivate static final int INCREMENT_START = 4;\n\tprivate static final int PROGRAM_START = 0;\n\tprivate static final int PROGRAM_END = 4;\n\tprivate static final int LENGTH = 9;\n\tprivate static final boolean NEED_PROGRAM_CODE = true;\n\tprivate static ProjectDAO projectDAO;\n\t\n\tpublic boolean needProgramCode() {\n\t\treturn NEED_PROGRAM_CODE;\n\t}\n\tpublic String createFirstAccessionNumber(String programCode) {\n\t\treturn programCode + INCREMENT_STARTING_VALUE;\n\t}\n\tpublic String incrementAccessionNumber(String currentHighAccessionNumber) {\n\t\tint increment = Integer.parseInt(currentHighAccessionNumber.substring(INCREMENT_START));\n\t\tString incrementAsString = INCREMENT_STARTING_VALUE;\n\t\tif( increment < UPPER_INC_RANGE){\n\t\t\tincrement++;\n\t\t\tincrementAsString = String.format(\"%05d\", increment);\n\t\t}else{\n\t\t\tthrow new IllegalArgumentException(\"AccessionNumber has no next value\");\n\t\t}\n\t\tStringBuilder builder = new StringBuilder( currentHighAccessionNumber.substring(PROGRAM_START, PROGRAM_END).toUpperCase());\n\t\tbuilder.append(incrementAsString);\n\t\treturn builder.toString();\n\t}\n\tpublic ValidationResults validFormat(String accessionNumber, boolean checkDate) {\n\t\t// The rule is 4 digit program code and 4 incremented numbers\n\t\tif (accessionNumber.length() != LENGTH) {\n\t\t\treturn ValidationResults.LENGTH_FAIL;\n\t\t}\n\t\tString programCode = accessionNumber.substring(PROGRAM_START, PROGRAM_END).toUpperCase();\n\t\t//check program code validity\n\t\tProjectDAO projectDAO = getProjectDAO();\n\t\tList<Project> programCodes = projectDAO.getAllProjects();\n\t\tboolean found = false;\n\t\tfor ( Project code: programCodes ){\n\t\t\tif ( programCode.equals(code.getProgramCode())){\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t    }\n\t\tif ( !found ) {\n\t\t\treturn ValidationResults.PROGRAM_FAIL;\n\t\t}\n\t\ttry {\n\t\t\tInteger.parseInt(accessionNumber.substring(INCREMENT_START));\n\t\t} catch (NumberFormatException e) {\n\t\t\treturn ValidationResults.FORMAT_FAIL;\n\t\t}\n\t\treturn ValidationResults.SUCCESS;\n\t}\n\tpublic String getInvalidMessage(ValidationResults results){\n\t\tswitch(results){\n\t\t\tcase LENGTH_FAIL: \treturn StringUtil.getMessageForKey(\"sample.entry.invalid.accession.number.length\");\n\t\t\tcase USED_FAIL:\t\treturn StringUtil.getMessageForKey(\"sample.entry.invalid.accession.number.used\");\n\t\t\tcase PROGRAM_FAIL: \treturn StringUtil.getMessageForKey(\"sample.entry.invalid.accession.number.program\");\n\t\t\tcase FORMAT_FAIL:  \treturn StringUtil.getMessageForKey(\"sample.entry.invalid.accession.number.format\");\n\t\t\tcase REQUIRED_FAIL:\treturn StringUtil.getMessageForKey(\"sample.entry.invalid.accession.number.required\");\n            case PATIENT_STATUS_FAIL:   return StringUtil.getMessageForKey(\"sample.entry.invalid.accession.number.patientRecordStatus\");\n            case SAMPLE_STATUS_FAIL:   return StringUtil.getMessageForKey(\"sample.entry.invalid.accession.number.sampleRecordStatus\");\n\t\t\tdefault: \t\t\treturn StringUtil.getMessageForKey(\"sample.entry.invalid.accession.number\");\n\t\t}\n\t}\n    public String getInvalidFormatMessage( ValidationResults results ){\n        return StringUtil.getMessageForKey(\"sample.entry.invalid.accession.number.format\");\n    }\n\tpublic String getNextAvailableAccessionNumber(String prefix){\n\t\tString nextAccessionNumber = null;\n\t\tSampleDAO sampleDAO = new SampleDAOImpl();\n\t\tString curLargestAccessionNumber = sampleDAO.getLargestAccessionNumberWithPrefix(prefix);\n\t\tif( curLargestAccessionNumber == null){\n\t\t\tnextAccessionNumber = createFirstAccessionNumber(prefix);\n\t\t}else{\n\t\t\tnextAccessionNumber = incrementAccessionNumber(curLargestAccessionNumber);\n\t\t}\n\t\treturn nextAccessionNumber;\n\t}\n\tpublic boolean accessionNumberIsUsed(String accessionNumber, String recordType) {\n\t\tboolean accessionNumberUsed = new SampleDAOImpl().getSampleByAccessionNumber(accessionNumber) != null;\n\t\t\n\t\tif( recordType == null){\n\t\t\treturn accessionNumberUsed;\n\t\t}\n\t\tStatusSet statusSet = StatusService.getInstance().getStatusSetForAccessionNumber(accessionNumber);\n\t\tString recordStatus = new String();\n\t\tboolean isSampleEntry = recordType.contains(\"Sample\");\n\t\tboolean isPatientEntry = recordType.contains(\"Patient\");\n\t\tboolean isInitial = recordType.contains(\"initial\");\n\t\tboolean isDouble = recordType.contains(\"double\");\n\t\tif (accessionNumberUsed) {\n\t\t\t\t// sample entry, get SampleRecordStatus\n\t\t\t\tif (isSampleEntry){\n\t\t\t\t\trecordStatus = statusSet.getSampleRecordStatus().toString();\n\t\t\t\t}\n\t\t\t\t// patient entry, get PatientRecordStatus\n\t\t\t\telse if (isPatientEntry) {\n\t\t\t\t\trecordStatus = statusSet.getPatientRecordStatus().toString();\n\t\t\t\t}\n\t\t\t\t// initial entry, the status must be NotRegistered\n\t\t\t\tString notRegistered = RecordStatus.NotRegistered.toString();\n\t\t\t\tString initialReg = RecordStatus.InitialRegistration.toString();\n\t\t\t\tif (isInitial){\n\t\t\t\t\tif(!notRegistered.equals(recordStatus) ){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// double entry, the status must be InitialRegistration\n\t\t\t\telse if (isDouble) {\n\t\t\t\t\tif ( !initialReg.equals(recordStatus) ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic int getMaxAccessionLength() {\n\t\treturn LENGTH;\n\t}\n\t/**\n\t * There are many possible samples with various status, only some of which are valid during certain entry steps.\n\t * This method provides validation results identifying whether a given sample is appropriate given all the information.\n\t * @param accessionNumber  the number for the sample\n\t * @param recordType initialPatient, initialSample, doublePatient (double entry for patient), doubleSample\n\t * @param isRequired the step being done expects the sample to exist.  This is used generate appropriate results, either\n\t * REQUIRED_FAIL vs SAMPLE_NOT_FOUND\n\t * @param studyFormName - an additional\n\t * @return\n\t */\n  public ValidationResults checkAccessionNumberValidity(String accessionNumber, String recordType,\n          String isRequired, String studyFormName) {\n    ValidationResults results = validFormat(accessionNumber, true);\n    SampleDAO sampleDAO = new SampleDAOImpl();\n    boolean accessionUsed = (sampleDAO.getSampleByAccessionNumber(accessionNumber) != null);\n    if (results == ValidationResults.SUCCESS) {\n      if (IActionConstants.TRUE.equals(isRequired) && !accessionUsed) {\n        results = ValidationResults.REQUIRED_FAIL;\n        return results;\n      } else {\n        if (recordType == null) {\n          results = ValidationResults.USED_FAIL;\n        }\n        // record Type specified, so work out the detailed response to report\n        if (accessionUsed) {\n          if (recordType.contains(\"initial\")) {\n            if (recordType.contains(\"Patient\")) {\n              results = AccessionNumberUtil.isPatientStatusValid(accessionNumber,\n                      RecordStatus.NotRegistered);\n              if (results != PATIENT_STATUS_FAIL) {\n                results = matchExistingStudyFormName(accessionNumber, studyFormName, false);\n              }\n            } else if (recordType.contains(\"Sample\")) {\n              results = AccessionNumberUtil.isSampleStatusValid(accessionNumber,\n                      RecordStatus.NotRegistered);\n              if (results != SAMPLE_STATUS_FAIL) {\n                results = matchExistingStudyFormName(accessionNumber, studyFormName, false);\n              }\n            }\n          } else if (recordType.contains(\"double\")) {\n            if (recordType.contains(\"Patient\")) {\n              results = AccessionNumberUtil.isPatientStatusValid(accessionNumber,\n                      RecordStatus.InitialRegistration);\n              if (results != PATIENT_STATUS_FAIL) {\n                results = matchExistingStudyFormName(accessionNumber, studyFormName, true);\n              }\n            } else if (recordType.contains(\"Sample\")) {\n              results = AccessionNumberUtil.isSampleStatusValid(accessionNumber,\n                      RecordStatus.InitialRegistration);\n              if (results != SAMPLE_STATUS_FAIL) {\n                results = matchExistingStudyFormName(accessionNumber, studyFormName, true);\n              }\n            }\n          } else if (recordType.contains(\"orderModify\")) {\n            results = ValidationResults.USED_FAIL;\n          }\n        } else {\n          if (recordType.contains(\"initial\")) {\n            results = ValidationResults.SAMPLE_NOT_FOUND;    // initial entry not used is good\n          } else if (recordType.contains(\"double\")) {\n            results = ValidationResults.REQUIRED_FAIL;       // double entry not existing is a\n                                                             // problem\n          } else if (recordType.contains(\"orderModify\")) {\n            results = ValidationResults.SAMPLE_NOT_FOUND;    // modify order page\n          }\n        }\n      }\n    }\n    return results;\n  }\n\t/**\n\t * Can the existing accession number be used in the given form?\n\t * This method is useful when we have an existing accessionNumber and want to ask the question.\n     * @param accessionNumber\n\t * @param existingRequired true => it is required that there is an existing studyFormName?\n     * @return\n     */\n    private static ValidationResults matchExistingStudyFormName(String accessionNumber, String studyFormName, boolean existingRequired) {\n", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "length": 945, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "5d56dd41743ce710c9b0986b24ec730ba947774b15696336"}
{"input": "", "context": "#region Copyright & License Information\n/*\n * Copyright 2007-2017 The OpenRA Developers (see AUTHORS)\n * This file is part of OpenRA, which is free software. It is made\n * available to you under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version. For more\n * information, see COPYING.\n */\n#endregion\nusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Threading;\nusing OpenRA.Graphics;\nusing OpenRA.Network;\nusing OpenRA.Primitives;\nusing OpenRA.Support;\nnamespace OpenRA.Server\n{\n\tpublic enum ServerState\n\t{\n\t\tWaitingPlayers = 1,\n\t\tGameStarted = 2,\n\t\tShuttingDown = 3\n\t}\n\tpublic class Server\n\t{\n\t\tpublic readonly string TwoHumansRequiredText = \"This server requires at least two human players to start a match.\";\n\t\tpublic readonly IPAddress Ip;\n\t\tpublic readonly int Port;\n\t\tpublic readonly MersenneTwister Random = new MersenneTwister();\n\t\tpublic readonly bool Dedicated;\n\t\t// Valid player connections\n\t\tpublic List<Connection> Conns = new List<Connection>();\n\t\t// Pre-verified player connections\n\t\tpublic List<Connection> PreConns = new List<Connection>();\n\t\tpublic Session LobbyInfo;\n\t\tpublic ServerSettings Settings;\n\t\tpublic ModData ModData;\n\t\tpublic List<string> TempBans = new List<string>();\n\t\t// Managed by LobbyCommands\n\t\tpublic MapPreview Map;\n\t\treadonly int randomSeed;\n\t\treadonly TcpListener listener;\n\t\treadonly TypeDictionary serverTraits = new TypeDictionary();\n\t\tprotected volatile ServerState internalState = ServerState.WaitingPlayers;\n\t\tpublic ServerState State\n\t\t{\n\t\t\tget { return internalState; }\n\t\t\tprotected set { internalState = value; }\n\t\t}\n\t\tpublic static void SyncClientToPlayerReference(Session.Client c, PlayerReference pr)\n\t\t{\n\t\t\tif (pr == null)\n\t\t\t\treturn;\n\t\t\tif (pr.LockFaction)\n\t\t\t\tc.Faction = pr.Faction;\n\t\t\tif (pr.LockSpawn)\n\t\t\t\tc.SpawnPoint = pr.Spawn;\n\t\t\tif (pr.LockTeam)\n\t\t\t\tc.Team = pr.Team;\n\t\t\tc.Color = pr.LockColor ? pr.Color : c.PreferredColor;\n\t\t}\n\t\tstatic void SendData(Socket s, byte[] data)\n\t\t{\n\t\t\tvar start = 0;\n\t\t\tvar length = data.Length;\n\t\t\t// Non-blocking sends are free to send only part of the data\n\t\t\twhile (start < length)\n\t\t\t{\n\t\t\t\tSocketError error;\n\t\t\t\tvar sent = s.Send(data, start, length - start, SocketFlags.None, out error);\n\t\t\t\tif (error == SocketError.WouldBlock)\n\t\t\t\t{\n\t\t\t\t\tLog.Write(\"server\", \"Non-blocking send of {0} bytes failed. Falling back to blocking send.\", length - start);\n\t\t\t\t\ts.Blocking = true;\n\t\t\t\t\tsent = s.Send(data, start, length - start, SocketFlags.None);\n\t\t\t\t\ts.Blocking = false;\n\t\t\t\t}\n\t\t\t\telse if (error != SocketError.Success)\n\t\t\t\t\tthrow new SocketException((int)error);\n\t\t\t\tstart += sent;\n\t\t\t}\n\t\t}\n\t\tpublic void Shutdown()\n\t\t{\n\t\t\tState = ServerState.ShuttingDown;\n\t\t}\n\t\tpublic void EndGame()\n\t\t{\n\t\t\tforeach (var t in serverTraits.WithInterface<IEndGame>())\n\t\t\t\tt.GameEnded(this);\n\t\t}\n\t\tpublic Server(IPEndPoint endpoint, ServerSettings settings, ModData modData, bool dedicated)\n\t\t{\n\t\t\tLog.AddChannel(\"server\", \"server.log\");\n\t\t\tlistener = new TcpListener(endpoint);\n\t\t\tlistener.Start();\n\t\t\tvar localEndpoint = (IPEndPoint)listener.LocalEndpoint;\n\t\t\tIp = localEndpoint.Address;\n\t\t\tPort = localEndpoint.Port;\n\t\t\tDedicated = dedicated;\n\t\t\tSettings = settings;\n\t\t\tSettings.Name = OpenRA.Settings.SanitizedServerName(Settings.Name);\n\t\t\tModData = modData;\n\t\t\trandomSeed = (int)DateTime.Now.ToBinary();\n\t\t\tif (UPnP.Status == UPnPStatus.Enabled)\n\t\t\t\tUPnP.ForwardPort(Settings.ListenPort, Settings.ExternalPort).Wait();\n\t\t\tforeach (var trait in modData.Manifest.ServerTraits)\n\t\t\t\tserverTraits.Add(modData.ObjectCreator.CreateObject<ServerTrait>(trait));\n\t\t\tLobbyInfo = new Session\n\t\t\t{\n\t\t\t\tGlobalSettings =\n\t\t\t\t{\n\t\t\t\t\tRandomSeed = randomSeed,\n\t\t\t\t\tMap = settings.Map,\n\t\t\t\t\tServerName = settings.Name,\n\t\t\t\t\tEnableSingleplayer = settings.EnableSingleplayer || !dedicated,\n\t\t\t\t\tGameUid = Guid.NewGuid().ToString()\n\t\t\t\t}\n\t\t\t};\n\t\t\tnew Thread(_ =>\n\t\t\t{\n\t\t\t\tforeach (var t in serverTraits.WithInterface<INotifyServerStart>())\n\t\t\t\t\tt.ServerStarted(this);\n\t\t\t\tLog.Write(\"server\", \"Initial mod: {0}\", ModData.Manifest.Id);\n\t\t\t\tLog.Write(\"server\", \"Initial map: {0}\", LobbyInfo.GlobalSettings.Map);\n\t\t\t\tvar timeout = serverTraits.WithInterface<ITick>().Min(t => t.TickTimeout);\n\t\t\t\tfor (;;)\n\t\t\t\t{\n\t\t\t\t\tvar checkRead = new List<Socket>();\n\t\t\t\t\tif (State == ServerState.WaitingPlayers)\n\t\t\t\t\t\tcheckRead.Add(listener.Server);\n\t\t\t\t\tcheckRead.AddRange(Conns.Select(c => c.Socket));\n\t\t\t\t\tcheckRead.AddRange(PreConns.Select(c => c.Socket));\n\t\t\t\t\tif (checkRead.Count > 0)\n\t\t\t\t\t\tSocket.Select(checkRead, null, null, timeout);\n\t\t\t\t\tif (State == ServerState.ShuttingDown)\n\t\t\t\t\t{\n\t\t\t\t\t\tEndGame();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tforeach (var s in checkRead)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (s == listener.Server)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAcceptConnection();\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar preConn = PreConns.SingleOrDefault(c => c.Socket == s);\n\t\t\t\t\t\tif (preConn != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpreConn.ReadData(this);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar conn = Conns.SingleOrDefault(c => c.Socket == s);\n\t\t\t\t\t\tif (conn != null)\n\t\t\t\t\t\t\tconn.ReadData(this);\n\t\t\t\t\t}\n\t\t\t\t\tforeach (var t in serverTraits.WithInterface<ITick>())\n\t\t\t\t\t\tt.Tick(this);\n\t\t\t\t\tif (State == ServerState.ShuttingDown)\n\t\t\t\t\t{\n\t\t\t\t\t\tEndGame();\n\t\t\t\t\t\tif (UPnP.Status == UPnPStatus.Enabled)\n\t\t\t\t\t\t\tUPnP.RemovePortForward().Wait();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tforeach (var t in serverTraits.WithInterface<INotifyServerShutdown>())\n\t\t\t\t\tt.ServerShutdown(this);\n\t\t\t\tPreConns.Clear();\n\t\t\t\tConns.Clear();\n\t\t\t\ttry { listener.Stop(); }\n\t\t\t\tcatch { }\n\t\t\t}) { IsBackground = true }.Start();\n\t\t}\n\t\tint nextPlayerIndex;\n\t\tpublic int ChooseFreePlayerIndex()\n\t\t{\n\t\t\treturn nextPlayerIndex++;\n\t\t}\n\t\tvoid AcceptConnection()\n\t\t{\n\t\t\tSocket newSocket;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (!listener.Server.IsBound)\n\t\t\t\t\treturn;\n\t\t\t\tnewSocket = listener.AcceptSocket();\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\t/* TODO: Could have an exception here when listener 'goes away' when calling AcceptConnection! */\n\t\t\t\t/* Alternative would be to use locking but the listener doesn't go away without a reason. */\n\t\t\t\tLog.Write(\"server\", \"Accepting the connection failed.\", e);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar newConn = new Connection { Socket = newSocket };\n\t\t\ttry\n\t\t\t{\n\t\t\t\tnewConn.Socket.Blocking = false;\n\t\t\t\tnewConn.Socket.NoDelay = true;\n\t\t\t\t// assign the player number.\n\t\t\t\tnewConn.PlayerIndex = ChooseFreePlayerIndex();\n\t\t\t\tSendData(newConn.Socket, BitConverter.GetBytes(ProtocolVersion.Version));\n\t\t\t\tSendData(newConn.Socket, BitConverter.GetBytes(newConn.PlayerIndex));\n\t\t\t\tPreConns.Add(newConn);\n\t\t\t\t// Dispatch a handshake order\n\t\t\t\tvar request = new HandshakeRequest\n\t\t\t\t{\n\t\t\t\t\tMod = ModData.Manifest.Id,\n\t\t\t\t\tVersion = ModData.Manifest.Metadata.Version,\n\t\t\t\t\tMap = LobbyInfo.GlobalSettings.Map\n\t\t\t\t};\n\t\t\t\tDispatchOrdersToClient(newConn, 0, 0, new ServerOrder(\"HandshakeRequest\", request.Serialize()).Serialize());\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tDropClient(newConn);\n\t\t\t\tLog.Write(\"server\", \"Dropping client {0} because handshake failed: {1}\", newConn.PlayerIndex.ToString(CultureInfo.InvariantCulture), e);\n\t\t\t}\n\t\t}\n\t\tvoid ValidateClient(Connection newConn, string data)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (State == ServerState.GameStarted)\n\t\t\t\t{\n\t\t\t\t\tLog.Write(\"server\", \"Rejected connection from {0}; game is already started.\",\n\t\t\t\t\t\tnewConn.Socket.RemoteEndPoint);\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", \"The game has already started\");\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar handshake = HandshakeResponse.Deserialize(data);\n\t\t\t\tif (!string.IsNullOrEmpty(Settings.Password) && handshake.Password != Settings.Password)\n\t\t\t\t{\n\t\t\t\t\tvar message = string.IsNullOrEmpty(handshake.Password) ? \"Server requires a password\" : \"Incorrect password\";\n", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "length": 807, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "cb8ef7b164c1f9b4d27225f6b8e45ea33c8096c073d82e27"}
{"input": "", "context": "//#############################################################################\n//#                                                                           #\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\n//#                                                                           #\n//#  This program is free software: you can redistribute it and/or modify     #\n//#  it under the terms of the GNU Affero General Public License as           #\n//#  published by the Free Software Foundation, either version 3 of the       #\n//#  License, or (at your option) any later version.                          # \n//#                                                                           #\n//#  This program is distributed in the hope that it will be useful,          #\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\n//#  GNU Affero General Public License for more details.                      #\n//#                                                                           #\n//#  You should have received a copy of the GNU Affero General Public License #\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\n//#                                                                           #\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\n//#  this program.  Users of this software do so entirely at their own risk.  #\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\n//#  software that it builds, deploys and maintains.                          #\n//#                                                                           #\n//#############################################################################\n//#EOH\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\n// WARNING: DO NOT MODIFY the content of this file\npackage ims.core.vo;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport ims.framework.enumerations.SortOrder;\n/**\n * Linked to RefMan.CatsReferral business object (ID: 1004100035).\n */\npublic class CatsReferralPendingEmergencyNonEDAdmissionListVoCollection extends ims.vo.ValueObjectCollection implements ims.vo.ImsCloneable, Iterable<CatsReferralPendingEmergencyNonEDAdmissionListVo>, ims.vo.interfaces.IPendingAdmissionCollection\n{\n\tprivate static final long serialVersionUID = 1L;\n\tprivate ArrayList<CatsReferralPendingEmergencyNonEDAdmissionListVo> col = new ArrayList<CatsReferralPendingEmergencyNonEDAdmissionListVo>();\n\tpublic String getBoClassName()\n\t{\n\t\treturn \"ims.RefMan.domain.objects.CatsReferral\";\n\t}\n\tpublic boolean add(CatsReferralPendingEmergencyNonEDAdmissionListVo value)\n\t{\n\t\tif(value == null)\n\t\t\treturn false;\n\t\tif(this.col.indexOf(value) < 0)\n\t\t{\n\t\t\treturn this.col.add(value);\n\t\t}\n\t\treturn false;\n\t}\n\tpublic boolean add(int index, CatsReferralPendingEmergencyNonEDAdmissionListVo value)\n\t{\n\t\tif(value == null)\n\t\t\treturn false;\n\t\tif(this.col.indexOf(value) < 0)\n\t\t{\n\t\t\tthis.col.add(index, value);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic void clear()\n\t{\n\t\tthis.col.clear();\n\t}\n\tpublic void remove(int index)\n\t{\n\t\tthis.col.remove(index);\n\t}\n\tpublic int size()\n\t{\n\t\treturn this.col.size();\n\t}\n\tpublic int indexOf(CatsReferralPendingEmergencyNonEDAdmissionListVo instance)\n\t{\n\t\treturn col.indexOf(instance);\n\t}\n\tpublic CatsReferralPendingEmergencyNonEDAdmissionListVo get(int index)\n\t{\n\t\treturn this.col.get(index);\n\t}\n\tpublic boolean set(int index, CatsReferralPendingEmergencyNonEDAdmissionListVo value)\n\t{\n\t\tif(value == null)\n\t\t\treturn false;\n\t\tthis.col.set(index, value);\n\t\treturn true;\n\t}\n\tpublic void remove(CatsReferralPendingEmergencyNonEDAdmissionListVo instance)\n\t{\n\t\tif(instance != null)\n\t\t{\n\t\t\tint index = indexOf(instance);\n\t\t\tif(index >= 0)\n\t\t\t\tremove(index);\n\t\t}\n\t}\n\tpublic boolean contains(CatsReferralPendingEmergencyNonEDAdmissionListVo instance)\n\t{\n\t\treturn indexOf(instance) >= 0;\n\t}\n\tpublic Object clone()\n\t{\n\t\tCatsReferralPendingEmergencyNonEDAdmissionListVoCollection clone = new CatsReferralPendingEmergencyNonEDAdmissionListVoCollection();\n\t\t\n\t\tfor(int x = 0; x < this.col.size(); x++)\n\t\t{\n\t\t\tif(this.col.get(x) != null)\n\t\t\t\tclone.col.add((CatsReferralPendingEmergencyNonEDAdmissionListVo)this.col.get(x).clone());\n\t\t\telse\n\t\t\t\tclone.col.add(null);\n\t\t}\n\t\t\n\t\treturn clone;\n\t}\n\tpublic boolean isValidated()\n\t{\n\t\tfor(int x = 0; x < col.size(); x++)\n\t\t\tif(!this.col.get(x).isValidated())\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\tpublic String[] validate()\n\t{\n\t\treturn validate(null);\n\t}\n\tpublic String[] validate(String[] existingErrors)\n\t{\n\t\tif(col.size() == 0)\n\t\t\treturn null;\n\t\tjava.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();\n\t\tif(existingErrors != null)\n\t\t{\n\t\t\tfor(int x = 0; x < existingErrors.length; x++)\n\t\t\t{\n\t\t\t\tlistOfErrors.add(existingErrors[x]);\n\t\t\t}\n\t\t}\n\t\tfor(int x = 0; x < col.size(); x++)\n\t\t{\n\t\t\tString[] listOfOtherErrors = this.col.get(x).validate();\n\t\t\tif(listOfOtherErrors != null)\n\t\t\t{\n\t\t\t\tfor(int y = 0; y < listOfOtherErrors.length; y++)\n\t\t\t\t{\n\t\t\t\t\tlistOfErrors.add(listOfOtherErrors[y]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint errorCount = listOfErrors.size();\n\t\tif(errorCount == 0)\n\t\t\treturn null;\n\t\tString[] result = new String[errorCount];\n\t\tfor(int x = 0; x < errorCount; x++)\n\t\t\tresult[x] = (String)listOfErrors.get(x);\n\t\treturn result;\n\t}\n\tpublic CatsReferralPendingEmergencyNonEDAdmissionListVoCollection sort()\n\t{\n\t\treturn sort(SortOrder.ASCENDING);\n\t}\n\tpublic CatsReferralPendingEmergencyNonEDAdmissionListVoCollection sort(boolean caseInsensitive)\n\t{\n\t\treturn sort(SortOrder.ASCENDING, caseInsensitive);\n\t}\n\tpublic CatsReferralPendingEmergencyNonEDAdmissionListVoCollection sort(SortOrder order)\n\t{\n\t\treturn sort(new CatsReferralPendingEmergencyNonEDAdmissionListVoComparator(order));\n\t}\n\tpublic CatsReferralPendingEmergencyNonEDAdmissionListVoCollection sort(SortOrder order, boolean caseInsensitive)\n\t{\n\t\treturn sort(new CatsReferralPendingEmergencyNonEDAdmissionListVoComparator(order, caseInsensitive));\n\t}\n\t@SuppressWarnings(\"unchecked\")\n\tpublic CatsReferralPendingEmergencyNonEDAdmissionListVoCollection sort(Comparator comparator)\n\t{\n\t\tCollections.sort(col, comparator);\n\t\treturn this;\n\t}\n\tpublic ims.RefMan.vo.CatsReferralRefVoCollection toRefVoCollection()\n\t{\n\t\tims.RefMan.vo.CatsReferralRefVoCollection result = new ims.RefMan.vo.CatsReferralRefVoCollection();\n\t\tfor(int x = 0; x < this.col.size(); x++)\n\t\t{\n\t\t\tresult.add(this.col.get(x));\n\t\t}\n\t\treturn result;\n\t}\n\tpublic CatsReferralPendingEmergencyNonEDAdmissionListVo[] toArray()\n\t{\n\t\tCatsReferralPendingEmergencyNonEDAdmissionListVo[] arr = new CatsReferralPendingEmergencyNonEDAdmissionListVo[col.size()];\n\t\tcol.toArray(arr);\n\t\treturn arr;\n\t}\n\tpublic ims.vo.interfaces.IPendingAdmission[] toIPendingAdmissionArray()\n\t{\n\t\tims.vo.interfaces.IPendingAdmission[] arr = new ims.vo.interfaces.IPendingAdmission[col.size()];\n\t\tcol.toArray(arr);\n\t\treturn arr;\n\t}\n\tpublic ims.vo.interfaces.IPendingAdmissionDetails[] toIPendingAdmissionDetailsArray()\n\t{\n\t\tims.vo.interfaces.IPendingAdmissionDetails[] arr = new ims.vo.interfaces.IPendingAdmissionDetails[col.size()];\n\t\tcol.toArray(arr);\n\t\treturn arr;\n\t}\n\tpublic Iterator<CatsReferralPendingEmergencyNonEDAdmissionListVo> iterator()\n\t{\n\t\treturn col.iterator();\n\t}\n\t@Override\n\tprotected ArrayList getTypedCollection()\n\t{\n\t\treturn col;\n\t}\n\tprivate class CatsReferralPendingEmergencyNonEDAdmissionListVoComparator implements Comparator\n\t{\n\t\tprivate int direction = 1;\n\t\tprivate boolean caseInsensitive = true;\n\t\tpublic CatsReferralPendingEmergencyNonEDAdmissionListVoComparator()\n\t\t{\n\t\t\tthis(SortOrder.ASCENDING);\n\t\t}\n\t\tpublic CatsReferralPendingEmergencyNonEDAdmissionListVoComparator(SortOrder order)\n\t\t{\n\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\t\tpublic CatsReferralPendingEmergencyNonEDAdmissionListVoComparator(SortOrder order, boolean caseInsensitive)\n\t\t{\n\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object obj1, Object obj2)\n\t\t{\n\t\t\tCatsReferralPendingEmergencyNonEDAdmissionListVo voObj1 = (CatsReferralPendingEmergencyNonEDAdmissionListVo)obj1;\n\t\t\tCatsReferralPendingEmergencyNonEDAdmissionListVo voObj2 = (CatsReferralPendingEmergencyNonEDAdmissionListVo)obj2;\n\t\t\treturn direction*(voObj1.compareTo(voObj2, this.caseInsensitive));\n\t\t}\n\t\tpublic boolean equals(Object obj)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\tpublic ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean[] getBeanCollection()\n\t{\n\t\treturn getBeanCollectionArray();\n\t}\n\tpublic ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean[] getBeanCollectionArray()\n\t{\n\t\tims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean[] result = new ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean[col.size()];\n\t\tfor(int i = 0; i < col.size(); i++)\n\t\t{\n\t\t\tCatsReferralPendingEmergencyNonEDAdmissionListVo vo = ((CatsReferralPendingEmergencyNonEDAdmissionListVo)col.get(i));\n\t\t\tresult[i] = (ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean)vo.getBean();\n\t\t}\n\t\treturn result;\n\t}\n\tpublic static CatsReferralPendingEmergencyNonEDAdmissionListVoCollection buildFromBeanCollection(java.util.Collection beans)\n\t{\n\t\tCatsReferralPendingEmergencyNonEDAdmissionListVoCollection coll = new CatsReferralPendingEmergencyNonEDAdmissionListVoCollection();\n\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tjava.util.Iterator iter = beans.iterator();\n\t\twhile (iter.hasNext())\n\t\t{\n\t\t\tcoll.add(((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean)iter.next()).buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static CatsReferralPendingEmergencyNonEDAdmissionListVoCollection buildFromBeanCollection(ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean[] beans)\n\t{\n\t\tCatsReferralPendingEmergencyNonEDAdmissionListVoCollection coll = new CatsReferralPendingEmergencyNonEDAdmissionListVoCollection();\n", "answers": ["\t\tif(beans == null)"], "length": 833, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "6e13c44c01f4116cb114d1ed362252ac9e0da0ef7331a74b"}
{"input": "", "context": "#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n#    This script is based on script.randomitems & script.watchlist\n#    Thanks to their original authors\nimport os\nimport re\nimport sys\nimport xbmc\nimport xbmcgui\nimport xbmcplugin\nimport xbmcaddon\nimport random\nimport urllib\nimport shutil\nimport glob, os\nimport time\n__addon__     = xbmcaddon.Addon('skin.qonfluence')\n__addonid__   = __addon__.getAddonInfo('id')\n__language__  = __addon__.getLocalizedString\naddonPath = xbmcaddon.Addon('skin.qonfluence').getAddonInfo(\"path\")\nimage    = os.path.join(addonPath,'notification.png')\ndialog = xbmcgui.Dialog()\nlocaltxt2 = __language__(32007)\nlocaltxt3 = __language__(32008)\nlocaltxt8 = __language__(32014)\nlocaltxt9 = __language__(32028)\nlocaltxt10 = __language__(32040)\nprnum=\"\"\ntry:\n    prnum= sys.argv[ 1 ]\nexcept:\n    pass\ndef cache():\n    localtxt1 = __language__(32006)+__language__(32000)\n    destpath=xbmc.translatePath(os.path.join('special://temp',''))\n    if dialog.yesno(localtxt1, localtxt3):\n        shutil.rmtree(destpath)\n        os.mkdir(destpath)\n        xbmc.executebuiltin(\"Notification(\"+localtxt9+\",\"+localtxt2+\", 5000, %s)\" % (image))\n#-------------------\ndef packages():\n    localtxt1 = __language__(32006)+__language__(32002)\n    path=xbmc.translatePath(os.path.join('special://home/addons/packages',''))\n    if dialog.yesno(localtxt1, localtxt3):\n        shutil.rmtree(path)\n        os.mkdir(path)\n        xbmc.executebuiltin(\"Notification(\"+localtxt9+\",\"+localtxt2+\", 5000, %s)\" % (image))\n#-------------------\ndef musicdb():\n    localtxt1 = __language__(32006)+__language__(32005)\n    path = xbmc.translatePath(os.path.join('special://profile/Database',''))\n    if dialog.yesno(localtxt1, localtxt3):\n        database = os.path.join(path, 'MyMusic*.db')\n        print database\n        filelist = glob.glob(database)\n        print filelist\n        if filelist != []:\n            for f in filelist:\n                print f\n                os.remove(f)\n                xbmc.executebuiltin(\"Notification(\"+localtxt2+\",\"+localtxt8+\")\")\n                time.sleep(3)\n                xbmc.executebuiltin(\"Reboot\")\n        else:\n            print 'merdaa'\n            xbmc.executebuiltin(\"Notification(\"+localtxt9+\",\"+localtxt10+\", 5000, %s)\" % (image))\n#-------------------\ndef videodb():\n    localtxt1 = __language__(32006)+__language__(32004)\n    path = xbmc.translatePath(os.path.join('special://profile/Database',''))\n    if dialog.yesno(localtxt1, localtxt3):\n        database = os.path.join(path, 'MyVideos*.db')\n        print database\n        filelist = glob.glob(database)\n        print filelist\n        if filelist != []:\n            for f in filelist:\n                print f\n                os.remove(f)\n                xbmc.executebuiltin(\"Notification(\"+localtxt2+\",\"+localtxt8+\")\")\n                time.sleep(3)\n                xbmc.executebuiltin(\"Reboot\")\n        else:\n            print 'merdaa'\n            xbmc.executebuiltin(\"Notification(\"+localtxt9+\",\"+localtxt10+\", 5000, %s)\" % (image))\n#-------------------\ndef thumbs():\n    localtxt1 = __language__(32006)+__language__(32001)\n    thumbnails=xbmc.translatePath(os.path.join('special://profile/Thumbnails',''))\n    path=xbmc.translatePath(os.path.join('special://profile/Database',''))\n    dialog = xbmcgui.Dialog()\n    if dialog.yesno(localtxt1, localtxt3):\n        shutil.rmtree(thumbnails)\n        os.mkdir(thumbnails)\n        database = os.path.join(path, 'Textures*.db')\n        print database\n        filelist = glob.glob(database)\n        print filelist\n        if filelist != []:\n            for f in filelist:\n                print f\n                os.remove(f)\n                xbmc.executebuiltin(\"Notification(\"+localtxt2+\",\"+localtxt8+\", 5000, %s)\" % (image))\n                time.sleep(3)\n                xbmc.executebuiltin(\"Reboot\")\n        else:\n            print 'merdaa'\n            xbmc.executebuiltin(\"Notification(\"+localtxt9+\",\"+localtxt10+\", 5000, %s)\" % (image))\n#-------------------\ndef advanced():\n    localtxt1 = __language__(32006)+__language__(32003)\n    dialog = xbmcgui.Dialog()\n    if dialog.yesno(localtxt1, localtxt3):\n        path = xbmc.translatePath(os.path.join('special://profile/userdata',''))\n        advance=os.path.join(path, 'advancedsettings.xml')\n        try:\n            os.remove(advance)\n            xbmc.executebuiltin(\"Notification(,\"+localtxt2+\")\")\n        except:\n            xbmc.executebuiltin(\"Notification(\"+localtxt9+\",\"+localtxt10+\", 5000, %s)\" % (image))\n#-------------------\ndef viewsdb():\n    localtxt1 = __language__(32006)+__language__(32011)\n    path = xbmc.translatePath(os.path.join('special://profile/Database',''))\n    if dialog.yesno(localtxt1, localtxt3):\n        database = os.path.join(path, 'ViewModes*.db')\n        print database\n        filelist = glob.glob(database)\n        print filelist\n        if filelist != []:\n            for f in filelist:\n                print f\n                os.remove(f)\n                xbmc.executebuiltin(\"Notification(\"+localtxt2+\",\"+localtxt8+\", 5000, %s)\" % (image))\n                time.sleep(3)\n                xbmc.executebuiltin(\"Reboot\")\n        else:\n            print 'merdaa'\n            xbmc.executebuiltin(\"Notification(\"+localtxt9+\",\"+localtxt10+\", 5000, %s)\" % (image))\n#-------------------\ndef date():\n    localtxt1 = __language__(32012)\n    localtxt4 = __language__(32013)\n    localtxt5 = __language__(32014)\n    destpath=xbmc.translatePath(os.path.join('/storage/.cache/connman',''))\n    if dialog.yesno(localtxt1, localtxt3):\n        shutil.rmtree(destpath)\n        os.mkdir(destpath)\n        xbmc.executebuiltin(\"Notification(\"+localtxt4+\",\"+localtxt5+\", 5000, %s)\" % (image))\n\txbmc.sleep(1000)\n\txbmc.restart()\n#-------------------\ndef notify(header=\"\", message=\"\", icon=image, time=5000, sound=True):\n    dialog = xbmcgui.Dialog()\n    dialog.notification(heading=\"Service Clean Up\", message=\"This Addon needs arguments to run\", icon=icon, time=time, sound=sound)\n#-------------------\ndef donate():\n    localtxt1 = __language__(32929)\n    localtxt2 = __language__(32930)\n    localtxt3 = __language__(32931)\n    localtxt4 = __language__(32932)\n    localtxt5 = __language__(32933)\n    localtxt6 = __language__(32934)\n\t\n    xbmc.executebuiltin(\"Notification(\"+localtxt1+\",\"+localtxt2+\",7000)\")\n    time.sleep(7)\n    xbmc.executebuiltin(\"Notification(\"+localtxt3+\",\"+localtxt4+\",7000)\")\n    time.sleep(7)\n    xbmc.executebuiltin(\"Notification(\"+localtxt5+\",\"+localtxt6+\",7000)\")\n    time.sleep(7)\n#-------------------\nif prnum == 'cache':\n    cache()\nelif prnum == 'packages':\n    packages()\nelif prnum == 'videodb':\n    videodb()\nelif prnum == 'musicdb':\n    musicdb()\nelif prnum == 'thumbs':\n    thumbs()\n", "answers": ["elif prnum == 'advanced':"], "length": 549, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "73fefc41fc5fa1c47966c4abc5dc1e78bb36629f5e868c89"}
{"input": "", "context": "//////////////////////////////////////////////////////////////////\n//                                                              //\n//  This is an auto - manipulated source file.                  //\n//  Edits inside regions of HYCALPER AUTO GENERATED CODE        //\n//  will be lost and overwritten on the next build!             //\n//                                                              //\n//////////////////////////////////////////////////////////////////\n#region LGPL License\n/*    \n    This file is part of ILNumerics.Net Core Module.\n    ILNumerics.Net Core Module is free software: you can redistribute it \n    and/or modify it under the terms of the GNU Lesser General Public \n    License as published by the Free Software Foundation, either version 3\n    of the License, or (at your option) any later version.\n    ILNumerics.Net Core Module is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with ILNumerics.Net Core Module.  \n    If not, see <http://www.gnu.org/licenses/>.\n*/\n#endregion\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing ILNumerics;\nusing ILNumerics.Exceptions;\nusing ILNumerics.Storage;\nusing ILNumerics.Misc;\nnamespace ILNumerics.BuiltInFunctions {\n    public partial class ILMath {\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<double>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \n            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<float>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \n            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<complex>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \n            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<fcomplex>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \n            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<Int16>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \n            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<Int32>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \n            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<Int64>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \n            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<UInt16>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \n            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<UInt32>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \n            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<UInt64>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \n            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns>\n        /// <remarks><para>the length of the value returned will be the number of dimensions of A</para>\n        /// <para>if A is null or empty array, the return value will be of length 0</para>\n        /// </remarks>\n        /// <exception cref=\"System.IndexOutOfRangeException\">if seqindex is &lt; 0 or &gt; numel(A)</exception>\n        public static int[] ind2sub(ILArray<char>   A, int seqindex) {  \n            if (object.Equals(A,null) || A.IsEmpty)\n                return new int[0]; \n", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "length": 1174, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "5f7f8ad03839f70553f1bf1189d38d53af0f00c6db0c9584"}
{"input": "", "context": "import logging\nimport datetime\nimport simplejson\nimport tempfile\ntry:\n  from hashlib import md5\nexcept:\n  from md5 import md5\nfrom dirac.lib.base import *\nfrom dirac.lib.diset import getRPCClient, getTransferClient\nfrom dirac.lib.credentials import getUsername, getSelectedGroup, getSelectedSetup\nfrom DIRAC import S_OK, S_ERROR, gLogger, gConfig\nfrom DIRAC.Core.Utilities import Time, List\nfrom DIRAC.Core.Utilities.DictCache import DictCache\nfrom DIRAC.Core.Security import CS\nfrom DIRAC.AccountingSystem.Client.ReportsClient import ReportsClient\nfrom dirac.lib.webBase import defaultRedirect\nlog = logging.getLogger( __name__ )\nclass AccountingplotsController( BaseController ):\n  __keysCache = DictCache()\n  def __getUniqueKeyValues( self, typeName ):\n    userGroup = getSelectedGroup()\n    if 'NormalUser' in CS.getPropertiesForGroup( userGroup ):\n      cacheKey = ( getUsername(), userGroup, getSelectedSetup(), typeName )\n    else:\n      cacheKey = ( userGroup, getSelectedSetup(), typeName )\n    data = AccountingplotsController.__keysCache.get( cacheKey )\n    if not data:\n      rpcClient = getRPCClient( \"Accounting/ReportGenerator\" )\n      retVal = rpcClient.listUniqueKeyValues( typeName )\n      if 'rpcStub' in retVal:\n        del( retVal[ 'rpcStub' ] )\n      if not retVal[ 'OK' ]:\n        return retVal\n      #Site ordering based on TierLevel / alpha\n      if 'Site' in retVal[ 'Value' ]:\n        siteLevel = {}\n        for siteName in retVal[ 'Value' ][ 'Site' ]:\n          sitePrefix = siteName.split( \".\" )[0].strip()\n          level = gConfig.getValue( \"/Resources/Sites/%s/%s/MoUTierLevel\" % ( sitePrefix, siteName ), 10 )\n          if level not in siteLevel:\n            siteLevel[ level ] = []\n          siteLevel[ level ].append( siteName )\n        orderedSites = []\n        for level in sorted( siteLevel ):\n          orderedSites.extend( sorted( siteLevel[ level ] ) )\n        retVal[ 'Value' ][ 'Site' ] = orderedSites\n      data = retVal\n      AccountingplotsController.__keysCache.add( cacheKey, 300, data )\n    return data\n  def index( self ):\n    # Return a rendered template\n    #   return render('/some/template.mako')\n    # or, Return a response\n    return defaultRedirect()\n  def dataOperation( self ):\n    return self.__showPlotPage( \"DataOperation\", \"/systems/accounting/dataOperation.mako\" )\n  def job( self ):\n    return self.__showPlotPage( \"Job\", \"/systems/accounting/job.mako\" )\n  def WMSHistory( self ):\n    return self.__showPlotPage( \"WMSHistory\", \"/systems/accounting/WMSHistory.mako\" )\n  def pilot( self ):\n    return self.__showPlotPage( \"Pilot\", \"/systems/accounting/Pilot.mako\" )\n  def SRMSpaceTokenDeployment( self ):\n    return self.__showPlotPage( \"SRMSpaceTokenDeployment\", \"/systems/accounting/SRMSpaceTokenDeployment.mako\" )\n  def plotPage( self ):\n    try:\n      typeName = str( request.params[ 'typeName' ] )\n    except:\n      c.errorMessage = \"Oops. missing type\"\n      return render( \"/error.mako\" )\n    return self.__showPlotPage( typeName , \"/systems/accounting/%s.mako\" % typeName )\n  def __showPlotPage( self, typeName, templateFile ):\n    #Get unique key values\n    retVal = self.__getUniqueKeyValues( typeName )\n    if not retVal[ 'OK' ]:\n      c.error = retVal[ 'Message' ]\n      return render ( \"/error.mako\" )\n    c.selectionValues = simplejson.dumps( retVal[ 'Value' ] )\n    #Cache for plotsList?\n    data = AccountingplotsController.__keysCache.get( \"reportsList:%s\" % typeName )\n    if not data:\n      repClient = ReportsClient( rpcClient = getRPCClient( \"Accounting/ReportGenerator\" ) )\n      retVal = repClient.listReports( typeName )\n      if not retVal[ 'OK' ]:\n        c.error = retVal[ 'Message' ]\n        return render ( \"/error.mako\" )\n      data = simplejson.dumps( retVal[ 'Value' ] )\n      AccountingplotsController.__keysCache.add( \"reportsList:%s\" % typeName, 300, data )\n    c.plotsList = data\n    return render ( templateFile )\n  @jsonify\n  def getKeyValuesForType( self ):\n    try:\n      typeName = str( request.params[ 'typeName' ] )\n    except:\n      return S_ERROR( \"Missing or invalid type name!\" )\n    retVal = self.__getUniqueKeyValues( typeName )\n    if not retVal[ 'OK' ] and 'rpcStub' in retVal:\n      del( retVal[ 'rpcStub' ] )\n    return retVal\n  def __parseFormParams(self):\n    params = request.params\n    return parseFormParams(params)\n  def __translateToExpectedExtResult( self, retVal ):\n    if retVal[ 'OK' ]:\n      return { 'success' : True, 'data' : retVal[ 'Value' ][ 'plot' ] }\n    else:\n      return { 'success' : False, 'errors' : retVal[ 'Message' ] }\n  def __queryForPlot( self ):\n    retVal = self.__parseFormParams()\n    if not retVal[ 'OK' ]:\n      return retVal\n    params = retVal[ 'Value' ]\n    repClient = ReportsClient( rpcClient = getRPCClient( \"Accounting/ReportGenerator\" ) )\n    retVal = repClient.generateDelayedPlot( *params )\n    return retVal\n  def getPlotData( self ):\n    retVal = self.__parseFormParams()\n    if not retVal[ 'OK' ]:\n      c.error = retVal[ 'Message' ]\n      return render( \"/error.mako\" )\n    params = retVal[ 'Value' ]\n    repClient = ReportsClient( rpcClient = getRPCClient( \"Accounting/ReportGenerator\" ) )\n    retVal = repClient.getReport( *params )\n    if not retVal[ 'OK' ]:\n      c.error = retVal[ 'Message' ]\n      return render( \"/error.mako\" )\n    rawData = retVal[ 'Value' ]\n    groupKeys = rawData[ 'data' ].keys()\n    groupKeys.sort()\n    if 'granularity' in rawData:\n      granularity = rawData[ 'granularity' ]\n      data = rawData['data']\n      tS = int( Time.toEpoch( params[2] ) )\n      timeStart = tS - tS % granularity\n      strData = \"epoch,%s\\n\" % \",\".join( groupKeys )\n      for timeSlot in range( timeStart, int( Time.toEpoch( params[3] ) ), granularity ):\n        lineData = [ str( timeSlot ) ]\n        for key in groupKeys:\n          if timeSlot in data[ key ]:\n            lineData.append( str( data[ key ][ timeSlot ] ) )\n          else:\n            lineData.append( \"\" )\n        strData += \"%s\\n\" % \",\".join( lineData )\n    else:\n      strData = \"%s\\n\" % \",\".join( groupKeys )\n      strData += \",\".join( [ str( rawData[ 'data' ][ k ] ) for k in groupKeys ] )\n    response.headers['Content-type'] = 'text/csv'\n    response.headers['Content-Disposition'] = 'attachment; filename=\"%s.csv\"' % md5( str( params ) ).hexdigest()\n    response.headers['Content-Length'] = len( strData )\n    return strData\n  @jsonify\n  def generatePlot( self ):\n    return self.__translateToExpectedExtResult( self.__queryForPlot() )\n  def generatePlotAndGetHTML( self ):\n    retVal = self.__queryForPlot()\n    if not retVal[ 'OK' ]:\n      return \"<h2>Can't regenerate plot: %s</h2>\" % retVal[ 'Message' ]\n    return \"<img src='getPlotImg?file=%s'/>\" % retVal[ 'Value' ][ 'plot' ]\n  def getPlotImg( self ):\n    \"\"\"\n    Get plot image\n    \"\"\"\n    if 'file' not in request.params:\n      c.error = \"Maybe you forgot the file?\"\n      return render( \"/error.mako\" )\n    plotImageFile = str( request.params[ 'file' ] )\n    if plotImageFile.find( \".png\" ) < -1:\n      c.error = \"Not a valid image!\"\n      return render( \"/error.mako\" )\n    transferClient = getTransferClient( \"Accounting/ReportGenerator\" )\n    tempFile = tempfile.TemporaryFile()\n    retVal = transferClient.receiveFile( tempFile, plotImageFile )\n    if not retVal[ 'OK' ]:\n      c.error = retVal[ 'Message' ]\n      return render( \"/error.mako\" )\n    tempFile.seek( 0 )\n    data = tempFile.read()\n    response.headers['Content-type'] = 'image/png'\n    response.headers['Content-Disposition'] = 'attachment; filename=\"%s.png\"' % md5( plotImageFile ).hexdigest()\n    response.headers['Content-Length'] = len( data )\n    response.headers['Content-Transfer-Encoding'] = 'Binary'\n    response.headers['Cache-Control'] = \"no-cache, no-store, must-revalidate, max-age=0\"\n    response.headers['Pragma'] = \"no-cache\"\n    response.headers['Expires'] = ( datetime.datetime.utcnow() - datetime.timedelta( minutes = -10 ) ).strftime( \"%d %b %Y %H:%M:%S GMT\" )\n    return data\n  @jsonify\n  def getPlotListAndSelectionValues(self):\n    result = {}\n    try:\n      typeName = str( request.params[ 'typeName' ] )\n    except:\n      return S_ERROR( \"Missing or invalid type name!\" )\n    retVal = self.__getUniqueKeyValues( typeName )\n    if not retVal[ 'OK' ] and 'rpcStub' in retVal:\n      del( retVal[ 'rpcStub' ] )\n      return retVal\n    selectionValues = retVal['Value']\n    data = AccountingplotsController.__keysCache.get( \"reportsList:%s\" % typeName )\n    if not data:\n      repClient = ReportsClient( rpcClient = getRPCClient( \"Accounting/ReportGenerator\" ) )\n      retVal = repClient.listReports( typeName )\n      if not retVal[ 'OK' ]:\n        return retVal\n      data = simplejson.dumps( retVal[ 'Value' ] )\n      AccountingplotsController.__keysCache.add( \"reportsList:%s\" % typeName, 300, data )\n    try:\n      plotsList = eval(data)\n    except:\n      return S_ERROR('Failed to convert a string to a list!')\n    return S_OK({'SelectionData':selectionValues, 'PlotList':plotsList})\ndef parseFormParams(params):\n  pD = {}\n  extraParams = {}\n  pinDates = False\n  for name in params:\n    if name.find( \"_\" ) != 0:\n      continue\n    value = params[ name ]\n    name = name[1:]\n    pD[ name ] = str( value )\n  #Personalized title?\n  if 'plotTitle' in pD:\n    extraParams[ 'plotTitle' ] = pD[ 'plotTitle' ]\n    del( pD[ 'plotTitle' ] )\n  #Pin dates?\n  if 'pinDates' in pD:\n    pinDates = pD[ 'pinDates' ]\n    del( pD[ 'pinDates' ] )\n    pinDates = pinDates.lower() in ( \"yes\", \"y\", \"true\", \"1\" )\n  #Get plotname\n  if not 'grouping' in pD:\n    return S_ERROR( \"Missing grouping!\" )\n  grouping = pD[ 'grouping' ]\n  #Get plotname\n  if not 'typeName' in pD:\n    return S_ERROR( \"Missing type name!\" )\n  typeName = pD[ 'typeName' ]\n  del( pD[ 'typeName' ] )\n  #Get plotname\n  if not 'plotName' in pD:\n    return S_ERROR( \"Missing plot name!\" )\n", "answers": ["  reportName = pD[ 'plotName' ]"], "length": 1147, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "6f5d658cc2b84c64bf49c302dee4078f60fd158ed24b7b19"}
{"input": "", "context": "#region Copyright & License Information\n/*\n * Copyright 2007-2021 The OpenRA Developers (see AUTHORS)\n * This file is part of OpenRA, which is free software. It is made\n * available to you under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version. For more\n * information, see COPYING.\n */\n#endregion\nusing System.Collections.Generic;\nusing System.Linq;\nusing OpenRA.Traits;\nnamespace OpenRA.Mods.Common.Traits\n{\n\t[Desc(\"Manages AI base construction.\")]\n\tpublic class BaseBuilderBotModuleInfo : ConditionalTraitInfo\n\t{\n\t\t[Desc(\"Tells the AI what building types are considered construction yards.\")]\n\t\tpublic readonly HashSet<string> ConstructionYardTypes = new HashSet<string>();\n\t\t[Desc(\"Tells the AI what building types are considered vehicle production facilities.\")]\n\t\tpublic readonly HashSet<string> VehiclesFactoryTypes = new HashSet<string>();\n\t\t[Desc(\"Tells the AI what building types are considered refineries.\")]\n\t\tpublic readonly HashSet<string> RefineryTypes = new HashSet<string>();\n\t\t[Desc(\"Tells the AI what building types are considered power plants.\")]\n\t\tpublic readonly HashSet<string> PowerTypes = new HashSet<string>();\n\t\t[Desc(\"Tells the AI what building types are considered infantry production facilities.\")]\n\t\tpublic readonly HashSet<string> BarracksTypes = new HashSet<string>();\n\t\t[Desc(\"Tells the AI what building types are considered production facilities.\")]\n\t\tpublic readonly HashSet<string> ProductionTypes = new HashSet<string>();\n\t\t[Desc(\"Tells the AI what building types are considered naval production facilities.\")]\n\t\tpublic readonly HashSet<string> NavalProductionTypes = new HashSet<string>();\n\t\t[Desc(\"Tells the AI what building types are considered silos (resource storage).\")]\n\t\tpublic readonly HashSet<string> SiloTypes = new HashSet<string>();\n\t\t[Desc(\"Production queues AI uses for buildings.\")]\n\t\tpublic readonly HashSet<string> BuildingQueues = new HashSet<string> { \"Building\" };\n\t\t[Desc(\"Production queues AI uses for defenses.\")]\n\t\tpublic readonly HashSet<string> DefenseQueues = new HashSet<string> { \"Defense\" };\n\t\t[Desc(\"Minimum distance in cells from center of the base when checking for building placement.\")]\n\t\tpublic readonly int MinBaseRadius = 2;\n\t\t[Desc(\"Radius in cells around the center of the base to expand.\")]\n\t\tpublic readonly int MaxBaseRadius = 20;\n\t\t[Desc(\"Minimum excess power the AI should try to maintain.\")]\n\t\tpublic readonly int MinimumExcessPower = 0;\n\t\t[Desc(\"The targeted excess power the AI tries to maintain cannot rise above this.\")]\n\t\tpublic readonly int MaximumExcessPower = 0;\n\t\t[Desc(\"Increase maintained excess power by this amount for every ExcessPowerIncreaseThreshold of base buildings.\")]\n\t\tpublic readonly int ExcessPowerIncrement = 0;\n\t\t[Desc(\"Increase maintained excess power by ExcessPowerIncrement for every N base buildings.\")]\n\t\tpublic readonly int ExcessPowerIncreaseThreshold = 1;\n\t\t[Desc(\"Number of refineries to build before building a barracks.\")]\n\t\tpublic readonly int InititalMinimumRefineryCount = 1;\n\t\t[Desc(\"Number of refineries to build additionally after building a barracks.\")]\n\t\tpublic readonly int AdditionalMinimumRefineryCount = 1;\n\t\t[Desc(\"Additional delay (in ticks) between structure production checks when there is no active production.\",\n\t\t\t\"StructureProductionRandomBonusDelay is added to this.\")]\n\t\tpublic readonly int StructureProductionInactiveDelay = 125;\n\t\t[Desc(\"Additional delay (in ticks) added between structure production checks when actively building things.\",\n\t\t\t\"Note: this should be at least as large as the typical order latency to avoid duplicated build choices.\")]\n\t\tpublic readonly int StructureProductionActiveDelay = 25;\n\t\t[Desc(\"A random delay (in ticks) of up to this is added to active/inactive production delays.\")]\n\t\tpublic readonly int StructureProductionRandomBonusDelay = 10;\n\t\t[Desc(\"Delay (in ticks) until retrying to build structure after the last 3 consecutive attempts failed.\")]\n\t\tpublic readonly int StructureProductionResumeDelay = 1500;\n\t\t[Desc(\"After how many failed attempts to place a structure should AI give up and wait\",\n\t\t\t\"for StructureProductionResumeDelay before retrying.\")]\n\t\tpublic readonly int MaximumFailedPlacementAttempts = 3;\n\t\t[Desc(\"How many randomly chosen cells with resources to check when deciding refinery placement.\")]\n\t\tpublic readonly int MaxResourceCellsToCheck = 3;\n\t\t[Desc(\"Delay (in ticks) until rechecking for new BaseProviders.\")]\n\t\tpublic readonly int CheckForNewBasesDelay = 1500;\n\t\t[Desc(\"Chance that the AI will place the defenses in the direction of the closest enemy building.\")]\n\t\tpublic readonly int PlaceDefenseTowardsEnemyChance = 100;\n\t\t[Desc(\"Minimum range at which to build defensive structures near a combat hotspot.\")]\n\t\tpublic readonly int MinimumDefenseRadius = 5;\n\t\t[Desc(\"Maximum range at which to build defensive structures near a combat hotspot.\")]\n\t\tpublic readonly int MaximumDefenseRadius = 20;\n\t\t[Desc(\"Try to build another production building if there is too much cash.\")]\n\t\tpublic readonly int NewProductionCashThreshold = 5000;\n\t\t[Desc(\"Radius in cells around a factory scanned for rally points by the AI.\")]\n\t\tpublic readonly int RallyPointScanRadius = 8;\n\t\t[Desc(\"Radius in cells around each building with ProvideBuildableArea\",\n\t\t\t\"to check for a 3x3 area of water where naval structures can be built.\",\n\t\t\t\"Should match maximum adjacency of naval structures.\")]\n\t\tpublic readonly int CheckForWaterRadius = 8;\n\t\t[Desc(\"Terrain types which are considered water for base building purposes.\")]\n\t\tpublic readonly HashSet<string> WaterTerrainTypes = new HashSet<string> { \"Water\" };\n\t\t[Desc(\"What buildings to the AI should build.\", \"What integer percentage of the total base must be this type of building.\")]\n\t\tpublic readonly Dictionary<string, int> BuildingFractions = null;\n\t\t[Desc(\"What buildings should the AI have a maximum limit to build.\")]\n\t\tpublic readonly Dictionary<string, int> BuildingLimits = null;\n\t\t[Desc(\"When should the AI start building specific buildings.\")]\n\t\tpublic readonly Dictionary<string, int> BuildingDelays = null;\n\t\tpublic override object Create(ActorInitializer init) { return new BaseBuilderBotModule(init.Self, this); }\n\t}\n\tpublic class BaseBuilderBotModule : ConditionalTrait<BaseBuilderBotModuleInfo>, IGameSaveTraitData,\n\t\tIBotTick, IBotPositionsUpdated, IBotRespondToAttack, IBotRequestPauseUnitProduction\n\t{\n\t\tpublic CPos GetRandomBaseCenter()\n\t\t{\n\t\t\tvar randomConstructionYard = world.Actors.Where(a => a.Owner == player &&\n\t\t\t\tInfo.ConstructionYardTypes.Contains(a.Info.Name))\n\t\t\t\t.RandomOrDefault(world.LocalRandom);\n\t\t\treturn randomConstructionYard?.Location ?? initialBaseCenter;\n\t\t}\n\t\tpublic CPos DefenseCenter => defenseCenter;\n\t\treadonly World world;\n\t\treadonly Player player;\n\t\tPowerManager playerPower;\n\t\tPlayerResources playerResources;\n\t\tIResourceLayer resourceLayer;\n\t\tIBotPositionsUpdated[] positionsUpdatedModules;\n\t\tCPos initialBaseCenter;\n\t\tCPos defenseCenter;\n\t\tList<BaseBuilderQueueManager> builders = new List<BaseBuilderQueueManager>();\n\t\tpublic BaseBuilderBotModule(Actor self, BaseBuilderBotModuleInfo info)\n\t\t\t: base(info)\n\t\t{\n\t\t\tworld = self.World;\n\t\t\tplayer = self.Owner;\n\t\t}\n\t\tprotected override void Created(Actor self)\n\t\t{\n\t\t\tplayerPower = self.Owner.PlayerActor.TraitOrDefault<PowerManager>();\n\t\t\tplayerResources = self.Owner.PlayerActor.Trait<PlayerResources>();\n\t\t\tresourceLayer = self.World.WorldActor.TraitOrDefault<IResourceLayer>();\n\t\t\tpositionsUpdatedModules = self.Owner.PlayerActor.TraitsImplementing<IBotPositionsUpdated>().ToArray();\n\t\t}\n\t\tprotected override void TraitEnabled(Actor self)\n\t\t{\n\t\t\tforeach (var building in Info.BuildingQueues)\n\t\t\t\tbuilders.Add(new BaseBuilderQueueManager(this, building, player, playerPower, playerResources, resourceLayer));\n\t\t\tforeach (var defense in Info.DefenseQueues)\n\t\t\t\tbuilders.Add(new BaseBuilderQueueManager(this, defense, player, playerPower, playerResources, resourceLayer));\n\t\t}\n\t\tvoid IBotPositionsUpdated.UpdatedBaseCenter(CPos newLocation)\n\t\t{\n\t\t\tinitialBaseCenter = newLocation;\n\t\t}\n\t\tvoid IBotPositionsUpdated.UpdatedDefenseCenter(CPos newLocation)\n\t\t{\n\t\t\tdefenseCenter = newLocation;\n\t\t}\n\t\tbool IBotRequestPauseUnitProduction.PauseUnitProduction => !IsTraitDisabled && !HasAdequateRefineryCount;\n\t\tvoid IBotTick.BotTick(IBot bot)\n\t\t{\n\t\t\tSetRallyPointsForNewProductionBuildings(bot);\n\t\t\tforeach (var b in builders)\n\t\t\t\tb.Tick(bot);\n\t\t}\n\t\tvoid IBotRespondToAttack.RespondToAttack(IBot bot, Actor self, AttackInfo e)\n\t\t{\n\t\t\tif (e.Attacker == null || e.Attacker.Disposed)\n\t\t\t\treturn;\n\t\t\tif (e.Attacker.Owner.RelationshipWith(self.Owner) != PlayerRelationship.Enemy)\n\t\t\t\treturn;\n\t\t\tif (!e.Attacker.Info.HasTraitInfo<ITargetableInfo>())\n\t\t\t\treturn;\n\t\t\t// Protect buildings\n\t\t\tif (self.Info.HasTraitInfo<BuildingInfo>())\n\t\t\t\tforeach (var n in positionsUpdatedModules)\n\t\t\t\t\tn.UpdatedDefenseCenter(e.Attacker.Location);\n\t\t}\n\t\tvoid SetRallyPointsForNewProductionBuildings(IBot bot)\n\t\t{\n", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "length": 985, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "10f9dbc73235c1d307666e6143b4217f1b7b644ae2fe93d6"}
{"input": "", "context": "/* This file is part of VoltDB.\n * Copyright (C) 2008-2013 VoltDB Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\npackage org.voltdb.planner;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.hsqldb_voltpatches.HSQLInterface;\nimport org.json_voltpatches.JSONException;\nimport org.json_voltpatches.JSONObject;\nimport org.voltcore.utils.Pair;\nimport org.voltdb.VoltType;\nimport org.voltdb.catalog.Catalog;\nimport org.voltdb.catalog.Column;\nimport org.voltdb.catalog.Database;\nimport org.voltdb.catalog.Procedure;\nimport org.voltdb.catalog.Statement;\nimport org.voltdb.catalog.StmtParameter;\nimport org.voltdb.compiler.DDLCompiler;\nimport org.voltdb.compiler.DatabaseEstimates;\nimport org.voltdb.compiler.DeterminismMode;\nimport org.voltdb.compiler.StatementCompiler;\nimport org.voltdb.compiler.VoltCompiler;\nimport org.voltdb.compiler.VoltDDLElementTracker;\nimport org.voltdb.plannodes.AbstractPlanNode;\nimport org.voltdb.plannodes.PlanNodeList;\nimport org.voltdb.plannodes.SchemaColumn;\nimport org.voltdb.types.QueryType;\nimport org.voltdb.utils.BuildDirectoryUtils;\n/**\n * Some utility functions to compile SQL statements for plan generation tests.\n */\npublic class PlannerTestAideDeCamp {\n    private final Catalog catalog;\n    private final Procedure proc;\n    private final HSQLInterface hsql;\n    private final Database db;\n    int compileCounter = 0;\n    private CompiledPlan m_currentPlan = null;\n    /**\n     * Loads the schema at ddlurl and setups a voltcompiler / hsql instance.\n     * @param ddlurl URL to the schema/ddl file.\n     * @param basename Unique string, JSON plans [basename]-stmt-#_json.txt on disk\n     * @throws Exception\n     */\n    public PlannerTestAideDeCamp(URL ddlurl, String basename) throws Exception {\n        catalog = new Catalog();\n        catalog.execute(\"add / clusters cluster\");\n        catalog.execute(\"add /clusters[cluster] databases database\");\n        db = catalog.getClusters().get(\"cluster\").getDatabases().get(\"database\");\n        proc = db.getProcedures().add(basename);\n        String schemaPath = URLDecoder.decode(ddlurl.getPath(), \"UTF-8\");\n        VoltCompiler compiler = new VoltCompiler();\n        hsql = HSQLInterface.loadHsqldb();\n        //hsql.runDDLFile(schemaPath);\n        VoltDDLElementTracker partitionMap = new VoltDDLElementTracker(compiler);\n        DDLCompiler ddl_compiler = new DDLCompiler(compiler, hsql, partitionMap, db);\n        ddl_compiler.loadSchema(schemaPath);\n        ddl_compiler.compileToCatalog(catalog, db);\n    }\n    public void tearDown() {\n    }\n    public Catalog getCatalog() {\n        return catalog;\n    }\n    public Database getDatabase() {\n        return db;\n    }\n    /**\n     * Compile a statement and return the head of the plan.\n     * @param sql\n     */\n    public CompiledPlan compileAdHocPlan(String sql)\n    {\n        compile(sql, 0, null, null, true, false);\n        return m_currentPlan;\n    }\n    /**\n     * Compile a statement and return the head of the plan.\n     * @param sql\n     * @param detMode\n     */\n    public CompiledPlan compileAdHocPlan(String sql, DeterminismMode detMode)\n    {\n        compile(sql, 0, null, null, true, false, detMode);\n        return m_currentPlan;\n    }\n    public List<AbstractPlanNode> compile(String sql, int paramCount)\n    {\n        return compile(sql, paramCount, false, null);\n    }\n    public List<AbstractPlanNode> compile(String sql, int paramCount, boolean singlePartition) {\n        return compile(sql, paramCount, singlePartition, null);\n    }\n    public List<AbstractPlanNode> compile(String sql, int paramCount, boolean singlePartition, String joinOrder) {\n        Object partitionBy = null;\n        if (singlePartition) {\n            partitionBy = \"Forced single partitioning\";\n        }\n        return compile(sql, paramCount, joinOrder, partitionBy, true, false);\n    }\n    public List<AbstractPlanNode> compile(String sql, int paramCount, String joinOrder, Object partitionParameter, boolean inferSP, boolean lockInSP) {\n        return compile(sql, paramCount, joinOrder, partitionParameter, inferSP, lockInSP, DeterminismMode.SAFER);\n    }\n    /**\n     * Compile and cache the statement and plan and return the final plan graph.\n     */\n    public List<AbstractPlanNode> compile(String sql, int paramCount, String joinOrder, Object partitionParameter, boolean inferSP, boolean lockInSP, DeterminismMode detMode)\n    {\n        Statement catalogStmt = proc.getStatements().add(\"stmt-\" + String.valueOf(compileCounter++));\n        catalogStmt.setSqltext(sql);\n        catalogStmt.setSinglepartition(partitionParameter != null);\n        catalogStmt.setBatched(false);\n        catalogStmt.setParamnum(paramCount);\n        // determine the type of the query\n        QueryType qtype = QueryType.SELECT;\n        catalogStmt.setReadonly(true);\n        if (sql.toLowerCase().startsWith(\"insert\")) {\n            qtype = QueryType.INSERT;\n            catalogStmt.setReadonly(false);\n        }\n        if (sql.toLowerCase().startsWith(\"update\")) {\n            qtype = QueryType.UPDATE;\n            catalogStmt.setReadonly(false);\n        }\n        if (sql.toLowerCase().startsWith(\"delete\")) {\n            qtype = QueryType.DELETE;\n            catalogStmt.setReadonly(false);\n        }\n        catalogStmt.setQuerytype(qtype.getValue());\n        // name will look like \"basename-stmt-#\"\n        String name = catalogStmt.getParent().getTypeName() + \"-\" + catalogStmt.getTypeName();\n        DatabaseEstimates estimates = new DatabaseEstimates();\n        TrivialCostModel costModel = new TrivialCostModel();\n        PartitioningForStatement partitioning = new PartitioningForStatement(partitionParameter, inferSP, lockInSP);\n        QueryPlanner planner =\n            new QueryPlanner(catalogStmt.getSqltext(), catalogStmt.getTypeName(),\n                    catalogStmt.getParent().getTypeName(), catalog.getClusters().get(\"cluster\"),\n                    db, partitioning, hsql, estimates, false, StatementCompiler.DEFAULT_MAX_JOIN_TABLES,\n                    costModel, null, joinOrder, detMode);\n        CompiledPlan plan = null;\n        planner.parse();\n        plan = planner.plan();\n        assert(plan != null);\n        // Input Parameters\n        // We will need to update the system catalogs with this new information\n        // If this is an adhoc query then there won't be any parameters\n        for (int i = 0; i < plan.parameters.length; ++i) {\n            StmtParameter catalogParam = catalogStmt.getParameters().add(String.valueOf(i));\n            catalogParam.setJavatype(plan.parameters[i].getValue());\n            catalogParam.setIndex(i);\n        }\n        // Output Columns\n        int index = 0;\n        for (SchemaColumn col : plan.columns.getColumns())\n        {\n            Column catColumn = catalogStmt.getOutput_columns().add(String.valueOf(index));\n            catColumn.setNullable(false);\n            catColumn.setIndex(index);\n            catColumn.setName(col.getColumnName());\n            catColumn.setType(col.getType().getValue());\n            catColumn.setSize(col.getSize());\n            index++;\n        }\n", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "length": 768, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "fc248cbd17650fa9a1b49a55fb76191e355a916d55809db3"}
{"input": "", "context": "/* -*- Mode: C; tab-width: 4 -*-\n *\n * Copyright (c) 1997-2004 Apple Computer, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nusing System;\nusing System.Drawing;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Windows.Forms;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Data;\nusing System.Text;\nusing Bonjour;\nnamespace SimpleChat.NET\n{\n\t/// <summary>\n\t/// Summary description for Form1.\n\t/// </summary>\n\t/// \n\tpublic class SimpleChat : System.Windows.Forms.Form\n\t{\n\t\tprivate System.Windows.Forms.ComboBox   comboBox1;\n\t\tprivate System.Windows.Forms.TextBox    textBox2;\n\t\tprivate System.Windows.Forms.Button     button1;\n\t\tprivate System.Windows.Forms.Label      label1;\n        private Bonjour.DNSSDEventManager       m_eventManager = null;\n        private Bonjour.DNSSDService            m_service = null;\n        private Bonjour.DNSSDService            m_registrar = null;\n        private Bonjour.DNSSDService            m_browser = null;\n        private Bonjour.DNSSDService            m_resolver = null;\n\t\tprivate String\t\t\t\t\t        m_name;\n        private Socket                          m_socket = null;\n        private const int                       BUFFER_SIZE = 1024;\n        public byte[]                           m_buffer = new byte[BUFFER_SIZE];\n        public bool                             m_complete = false;\n        public StringBuilder                    m_sb = new StringBuilder();\n        delegate void                           ReadMessageCallback(String data);\n        ReadMessageCallback                     m_readMessageCallback;\n\t\t/// <summary>\n\t\t/// Required designer variable.\n\t\t/// </summary>\n\t\tprivate System.ComponentModel.Container components = null;\n\t\tprivate System.Windows.Forms.RichTextBox richTextBox1;\n\t\t// ServiceRegistered\n\t\t//\n\t\t// Called by DNSServices core as a result of Register()\n\t\t// call\n\t\t//\n        public void\n        ServiceRegistered\n                    (\n                    DNSSDService service,\n                    DNSSDFlags flags,\n                    String name,\n                    String regType,\n                    String domain\n                    )\n        {\n            m_name = name;\n\t\t\t//\n\t\t\t// Try to start browsing for other instances of this service\n\t\t\t//\n            try\n            {\n                m_browser = m_service.Browse(0, 0, \"_p2pchat._udp\", null, m_eventManager);\n            }\n            catch\n            {\n                MessageBox.Show(\"Browse Failed\", \"Error\");\n                Application.Exit();\n            }\n        }\n\t\t//\n\t\t// ServiceFound\n\t\t//\n\t\t// Called by DNSServices core as a result of a Browse call\n\t\t//\n\t\tpublic void\n        ServiceFound\n\t\t\t\t    (\n\t\t\t\t    DNSSDService    sref,\n\t\t\t\t    DNSSDFlags  \tflags,\n\t\t\t\t    uint\t\t\tifIndex,\n                    String          serviceName,\n                    String          regType,\n                    String          domain\n\t\t\t\t    )\n\t\t{\n            if (serviceName != m_name)\n            {\n                PeerData peer = new PeerData();\n                peer.InterfaceIndex = ifIndex;\n                peer.Name = serviceName;\n                peer.Type = regType;\n                peer.Domain = domain;\n                peer.Address = null;\n                comboBox1.Items.Add(peer);\n                if (comboBox1.Items.Count == 1)\n                {\n                    comboBox1.SelectedIndex = 0;\n                }\n            }\n\t\t}\n        //\n        // ServiceLost\n        //\n        // Called by DNSServices core as a result of a Browse call\n        //\n        public void\n        ServiceLost\n                    (\n                    DNSSDService sref,\n                    DNSSDFlags flags,\n                    uint ifIndex,\n                    String serviceName,\n                    String regType,\n                    String domain\n                    )\n        {\n            PeerData peer = new PeerData();\n            peer.InterfaceIndex = ifIndex;\n            peer.Name = serviceName;\n            peer.Type = regType;\n            peer.Domain = domain;\n            peer.Address = null;\n            comboBox1.Items.Remove(peer);\n        }\n\t\t//\n\t\t// ServiceResolved\n\t\t//\n\t\t// Called by DNSServices core as a result of DNSService.Resolve()\n\t\t// call\n\t\t//\n        public void\n        ServiceResolved\n                    (\n                    DNSSDService sref,\n                    DNSSDFlags flags,\n                    uint ifIndex,\n                    String fullName,\n                    String hostName,\n                    ushort port,\n                    TXTRecord txtRecord\n                    )\n\t\t{\n            m_resolver.Stop();\n            m_resolver = null;\n            PeerData peer = (PeerData)comboBox1.SelectedItem;\n            peer.Port = port;\n\t\t\t//\n\t\t\t// Query for the IP address associated with \"hostName\"\n\t\t\t//\n            try\n            {\n                m_resolver = m_service.QueryRecord(0, ifIndex, hostName, DNSSDRRType.kDNSSDType_A, DNSSDRRClass.kDNSSDClass_IN, m_eventManager );\n            }\n            catch\n            {\n                MessageBox.Show(\"QueryRecord Failed\", \"Error\");\n                Application.Exit();\n            }\n\t\t}\n\t\t//\n\t\t// QueryAnswered\n\t\t//\n\t\t// Called by DNSServices core as a result of DNSService.QueryRecord()\n\t\t// call\n\t\t//\n\t\tpublic void\n\t\tQueryAnswered\n\t\t\t(\n            DNSSDService    service, \n            DNSSDFlags      flags,\n            uint            ifIndex,\n            String          fullName,\n            DNSSDRRType     rrtype,\n            DNSSDRRClass    rrclass,\n            Object          rdata,\n            uint            ttl\n            )\n        {\n\t\t\t//\n\t\t\t// Stop the resolve to reduce the burden on the network\n\t\t\t//\n            m_resolver.Stop();\n            m_resolver = null;\n            PeerData peer = (PeerData) comboBox1.SelectedItem;\n\t\t\tuint bits = BitConverter.ToUInt32( (Byte[])rdata, 0);\n\t\t\tSystem.Net.IPAddress address = new System.Net.IPAddress(bits);\n            peer.Address = address;\n\t\t}\n        public void\n        OperationFailed\n                    (\n                    DNSSDService service,\n                    DNSSDError error\n                    )\n        {\n            MessageBox.Show(\"Operation returned an error code \" + error, \"Error\");\n        }\n        //\n        // OnReadMessage\n        //\n        // Called when there is data to be read on a socket\n        //\n        // This is called (indirectly) from OnReadSocket()\n        //\n        private void\n        OnReadMessage\n                (\n                String msg\n                )\n        {\n            int rgb = 0;\n            for (int i = 0; i < msg.Length && msg[i] != ':'; i++)\n            {\n                rgb = rgb ^ ((int)msg[i] << (i % 3 + 2) * 8);\n            }\n            Color color = Color.FromArgb(rgb & 0x007F7FFF);\n            richTextBox1.SelectionColor = color;\n            richTextBox1.AppendText(msg + Environment.NewLine);\n        }\n\t\t//\n\t\t// OnReadSocket\n\t\t//\n\t\t// Called by the .NET core when there is data to be read on a socket\n\t\t//\n\t\t// This is called from a worker thread by the .NET core\n\t\t//\n\t\tprivate void\n\t\tOnReadSocket\n\t\t\t\t(\n\t\t\t\tIAsyncResult ar\n\t\t\t\t)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tint read = m_socket.EndReceive(ar);\n\t\t\t\tif (read > 0)\n\t\t\t\t{\n\t\t\t\t\tString msg = Encoding.UTF8.GetString(m_buffer, 0, read);\n\t\t\t\t\tInvoke(m_readMessageCallback, new Object[]{msg});\n\t\t\t\t}\n\t\t\t\tm_socket.BeginReceive(m_buffer, 0, BUFFER_SIZE, 0, new AsyncCallback(OnReadSocket), this);\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t}\n\t\t}\n\t\tpublic SimpleChat()\n\t\t{\n\t\t\t//\n\t\t\t// Required for Windows Form Designer support\n\t\t\t//\n\t\t\tInitializeComponent();\n            try\n            {\n                m_service = new DNSSDService();\n            }\n            catch\n            {\n                MessageBox.Show(\"Bonjour Service is not available\", \"Error\");\n                Application.Exit();\n            }\n\t\t\t//\n\t\t\t// Associate event handlers with all the Bonjour events that the app is interested in.\n\t\t\t//\n            m_eventManager = new DNSSDEventManager();\n            m_eventManager.ServiceRegistered += new _IDNSSDEvents_ServiceRegisteredEventHandler(this.ServiceRegistered);\n            m_eventManager.ServiceFound += new _IDNSSDEvents_ServiceFoundEventHandler(this.ServiceFound);\n            m_eventManager.ServiceLost += new _IDNSSDEvents_ServiceLostEventHandler(this.ServiceLost);\n            m_eventManager.ServiceResolved += new _IDNSSDEvents_ServiceResolvedEventHandler(this.ServiceResolved);\n            m_eventManager.QueryRecordAnswered += new _IDNSSDEvents_QueryRecordAnsweredEventHandler(this.QueryAnswered);\n            m_eventManager.OperationFailed += new _IDNSSDEvents_OperationFailedEventHandler(this.OperationFailed);\n\t\t\t//\n\t\t\t// Socket read handler\n\t\t\t//\n\t\t\tm_readMessageCallback = new ReadMessageCallback(OnReadMessage);\n\t\t\tthis.Load += new System.EventHandler(this.Form1_Load);\n\t\t\tthis.AcceptButton = button1;\n\t\t}\n\t\t/// <summary>\n\t\t/// Clean up any resources being used.\n\t\t/// </summary>\n\t\tprotected override void\n\t\tDispose( bool disposing )\n\t\t{\n\t\t\tif( disposing )\n\t\t\t{\n\t\t\t\tif (components != null) \n\t\t\t\t{\n\t\t\t\t\tcomponents.Dispose();\n\t\t\t\t}\n\t\t\t\tif (m_registrar != null)\n\t\t\t\t{\n\t\t\t\t\tm_registrar.Stop();\n\t\t\t\t}\n\t\t\t\tif (m_browser != null)\n\t\t\t\t{\n\t\t\t\t\tm_browser.Stop();\n\t\t\t\t}\n                if (m_resolver != null)\n                {\n                    m_resolver.Stop();\n                }\n                m_eventManager.ServiceFound -= new _IDNSSDEvents_ServiceFoundEventHandler(this.ServiceFound);\n                m_eventManager.ServiceLost -= new _IDNSSDEvents_ServiceLostEventHandler(this.ServiceLost);\n                m_eventManager.ServiceResolved -= new _IDNSSDEvents_ServiceResolvedEventHandler(this.ServiceResolved);\n                m_eventManager.QueryRecordAnswered -= new _IDNSSDEvents_QueryRecordAnsweredEventHandler(this.QueryAnswered);\n                m_eventManager.OperationFailed -= new _IDNSSDEvents_OperationFailedEventHandler(this.OperationFailed);\n\t\t\t}\n\t\t\tbase.Dispose( disposing );\n\t\t}\n\t\t#region Windows Form Designer generated code\n\t\t/// <summary>\n\t\t/// Required method for Designer support - do not modify\n\t\t/// the contents of this method with the code editor.\n\t\t/// </summary>\n\t\tprivate void InitializeComponent()\n\t\t{\n\t\t\tthis.comboBox1 = new System.Windows.Forms.ComboBox();\n\t\t\tthis.textBox2 = new System.Windows.Forms.TextBox();\n\t\t\tthis.button1 = new System.Windows.Forms.Button();\n\t\t\tthis.label1 = new System.Windows.Forms.Label();\n\t\t\tthis.richTextBox1 = new System.Windows.Forms.RichTextBox();\n\t\t\tthis.SuspendLayout();\n\t\t\t// \n\t\t\t// comboBox1\n\t\t\t// \n\t\t\tthis.comboBox1.Anchor = ((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) \n\t\t\t\t| System.Windows.Forms.AnchorStyles.Right);\n\t\t\tthis.comboBox1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;\n\t\t\tthis.comboBox1.Location = new System.Drawing.Point(59, 208);\n\t\t\tthis.comboBox1.Name = \"comboBox1\";\n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "length": 1012, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "8f007015b8b3b455a6fcd8f989241324f18ff10327811d5b"}
{"input": "", "context": "//\n// System.IO.Ports.WinSerialStream.cs\n//\n// Authors:\n//\tCarlos Alberto Cortez (calberto.cortez@gmail.com)\n//\n// (c) Copyright 2006 Novell, Inc. (http://www.novell.com)\n//\nusing System;\nusing System.Text;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing System.Threading;\nusing System.ComponentModel;\nnamespace System.IO.Ports\n{\n\tclass WinSerialStream : Stream, ISerialStream, IDisposable\n\t{\n\t\t// Windows API Constants\n\t\tconst uint GenericRead = 0x80000000;\n\t\tconst uint GenericWrite = 0x40000000;\n\t\tconst uint OpenExisting = 3;\n\t\tconst uint FileFlagOverlapped = 0x40000000;\n\t\tconst uint PurgeRxClear = 0x0008;\n\t\tconst uint PurgeTxClear = 0x0004;\n\t\tconst uint WinInfiniteTimeout = 0xFFFFFFFF;\n\t\tconst uint FileIOPending = 997;\n\t\t// Signal constants\n\t\tconst uint SetRts = 3;\n\t\tconst uint ClearRts = 4;\n\t\tconst uint SetDtr = 5;\n\t\tconst uint ClearDtr = 6;\n\t\tconst uint SetBreak = 8;\n\t\tconst uint ClearBreak = 9;\n\t\tconst uint CtsOn = 0x0010;\n\t\tconst uint DsrOn = 0x0020;\n\t\tconst uint RsldOn = 0x0080;\n\t\t// Event constants\n\t\tconst uint EvRxChar = 0x0001;\n\t\tconst uint EvCts = 0x0008;\n\t\tconst uint EvDsr = 0x0010;\n\t\tconst uint EvRlsd = 0x0020;\n\t\tconst uint EvBreak = 0x0040;\n\t\tconst uint EvErr = 0x0080;\n\t\tconst uint EvRing = 0x0100;\n\t\tint handle;\n\t\tint read_timeout;\n\t\tint write_timeout;\n\t\tbool disposed;\n\t\tIntPtr write_overlapped;\n\t\tIntPtr read_overlapped;\n\t\tManualResetEvent read_event;\n\t\tManualResetEvent write_event;\n\t\tTimeouts timeouts;\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\n\t\tstatic extern int CreateFile(string port_name, uint desired_access,\n\t\t\t\tuint share_mode, uint security_attrs, uint creation, uint flags,\n\t\t\t\tuint template);\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\n\t\tstatic extern bool SetupComm(int handle, int read_buffer_size, int write_buffer_size);\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\n\t\tstatic extern bool PurgeComm(int handle, uint flags);\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\n\t\tstatic extern bool SetCommTimeouts(int handle, Timeouts timeouts);\n\t\tpublic WinSerialStream (string port_name, int baud_rate, int data_bits, Parity parity, StopBits sb,\n\t\t\t\tbool dtr_enable, bool rts_enable, Handshake hs, int read_timeout, int write_timeout,\n\t\t\t\tint read_buffer_size, int write_buffer_size)\n\t\t{\n\t\t\thandle = CreateFile (port_name != null && !port_name.StartsWith(@\"\\\\.\\\")\n\t\t\t\t\t? @\"\\\\.\\\" + port_name : port_name,\n\t\t\t\t\tGenericRead | GenericWrite, 0, 0, OpenExisting,\n\t\t\t\t\tFileFlagOverlapped, 0);\n\t\t\tif (handle == -1)\n\t\t\t\tReportIOError (port_name);\n\t\t\t// Set port low level attributes\n\t\t\tSetAttributes (baud_rate, parity, data_bits, sb, hs);\n\t\t\t// Clean buffers and set sizes\n\t\t\tif (!PurgeComm (handle, PurgeRxClear | PurgeTxClear) ||\n\t\t\t\t\t!SetupComm (handle, read_buffer_size, write_buffer_size))\n\t\t\t\tReportIOError (null);\n\t\t\t// Set timeouts\n\t\t\tthis.read_timeout = read_timeout;\n\t\t\tthis.write_timeout = write_timeout;\n\t\t\ttimeouts = new Timeouts (read_timeout, write_timeout);\n\t\t\tif (!SetCommTimeouts(handle, timeouts))\n\t\t\t\tReportIOError (null);\n\t\t\t/// Set DTR and RTS\n\t\t\tSetSignal(SerialSignal.Dtr, dtr_enable);\n\t\t\tif (hs != Handshake.RequestToSend &&\n\t\t\t\t\ths != Handshake.RequestToSendXOnXOff)\n\t\t\t\tSetSignal(SerialSignal.Rts, rts_enable);\n\t\t\t// Init overlapped structures\n\t\t\tNativeOverlapped wo = new NativeOverlapped ();\n\t\t\twrite_event = new ManualResetEvent (false);\n\t\t\two.EventHandle = write_event.Handle;\n\t\t\twrite_overlapped = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (NativeOverlapped)));\n\t\t\tMarshal.StructureToPtr (wo, write_overlapped, true);\n\t\t\tNativeOverlapped ro = new NativeOverlapped ();\n\t\t\tread_event = new ManualResetEvent (false);\n\t\t\tro.EventHandle = read_event.Handle;\n\t\t\tread_overlapped = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (NativeOverlapped)));\n\t\t\tMarshal.StructureToPtr (ro, read_overlapped, true);\n\t\t}\n\t\tpublic override bool CanRead {\n\t\t\tget {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tpublic override bool CanSeek {\n\t\t\tget {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tpublic override bool CanTimeout {\n\t\t\tget {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tpublic override bool CanWrite {\n\t\t\tget {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tpublic override int ReadTimeout {\n\t\t\tget {\n\t\t\t\treturn read_timeout;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tif (value < 0 && value != SerialPort.InfiniteTimeout)\n\t\t\t\t\tthrow new ArgumentOutOfRangeException (\"value\");\n\t\t\t\ttimeouts.SetValues (value, write_timeout);\n\t\t\t\tif (!SetCommTimeouts (handle, timeouts))\n\t\t\t\t\tReportIOError (null);\n\t\t\t\tread_timeout = value;\n\t\t\t}\n\t\t}\n\t\tpublic override int WriteTimeout {\n\t\t\tget {\n\t\t\t\treturn write_timeout;\n\t\t\t}\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value < 0 && value != SerialPort.InfiniteTimeout)\n\t\t\t\t\tthrow new ArgumentOutOfRangeException (\"value\");\n\t\t\t\ttimeouts.SetValues (read_timeout, value);\n\t\t\t\tif (!SetCommTimeouts (handle, timeouts))\n\t\t\t\t\tReportIOError (null);\n\t\t\t\twrite_timeout = value;\n\t\t\t}\n\t\t}\n\t\tpublic override long Length {\n\t\t\tget {\n\t\t\t\tthrow new NotSupportedException ();\n\t\t\t}\n\t\t}\n\t\tpublic override long Position {\n\t\t\tget {\n\t\t\t\tthrow new NotSupportedException ();\n\t\t\t}\n\t\t\tset {\n\t\t\t\tthrow new NotSupportedException ();\n\t\t\t}\n\t\t}\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\n\t\tstatic extern bool CloseHandle (int handle);\n\t\tprotected override void Dispose (bool disposing)\n\t\t{\n\t\t\tif (disposed)\n\t\t\t\treturn;\n\t\t\tdisposed = true;\n\t\t\tCloseHandle (handle);\n\t\t\tMarshal.FreeHGlobal (write_overlapped);\n\t\t\tMarshal.FreeHGlobal (read_overlapped);\n\t\t}\n\t\tvoid IDisposable.Dispose ()\n\t\t{\n\t\t\tDispose (true);\n\t\t\tGC.SuppressFinalize (this);\n\t\t}\n\t\tpublic override void Close ()\n\t\t{\n\t\t\t((IDisposable)this).Dispose ();\n\t\t}\n\t\t~WinSerialStream ()\n\t\t{\n\t\t\tDispose (false);\n\t\t}\n\t\tpublic override void Flush ()\n\t\t{\n\t\t\tCheckDisposed ();\n\t\t\t// No dothing by now\n\t\t}\n\t\tpublic override long Seek (long offset, SeekOrigin origin)\n\t\t{\n\t\t\tthrow new NotSupportedException();\n\t\t}\n\t\tpublic override void SetLength (long value)\n\t\t{\n\t\t\tthrow new NotSupportedException();\n\t\t}\n#if !TARGET_JVM\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\n\t\t\tstatic extern unsafe bool ReadFile (int handle, byte* buffer, int bytes_to_read,\n\t\t\t\t\tout int bytes_read, IntPtr overlapped);\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\n\t\t\tstatic extern unsafe bool GetOverlappedResult (int handle, IntPtr overlapped,\n\t\t\t\t\tref int bytes_transfered, bool wait);\n#endif\n\t\tpublic override int Read ([In, Out] byte [] buffer, int offset, int count)\n\t\t{\n\t\t\tCheckDisposed ();\n\t\t\tif (buffer == null)\n\t\t\t\tthrow new ArgumentNullException (\"buffer\");\n\t\t\tif (offset < 0 || count < 0)\n\t\t\t\tthrow new ArgumentOutOfRangeException (\"offset or count less than zero.\");\n\t\t\tif (buffer.Length - offset < count )\n\t\t\t\tthrow new ArgumentException (\"offset+count\",\n\t\t\t\t\t\t\t      \"The size of the buffer is less than offset + count.\");\n\t\t\tint bytes_read;\n\t\t\tunsafe {\n\t\t\t\tfixed (byte* ptr = buffer) {\n\t\t\t\t\tif (ReadFile (handle, ptr + offset, count, out bytes_read, read_overlapped))\n\t\t\t\t\t\treturn bytes_read;\n\t\t\t\t\n\t\t\t\t\t// Test for overlapped behavior\n\t\t\t\t\tif (Marshal.GetLastWin32Error () != FileIOPending)\n\t\t\t\t\t\tReportIOError (null);\n\t\t\t\t\n\t\t\t\t\tif (!GetOverlappedResult (handle, read_overlapped, ref bytes_read, true))\n\t\t\t\t\t\tReportIOError (null);\n\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (bytes_read == 0)\n\t\t\t\tthrow new TimeoutException (); // We didn't get any byte\n\t\t\treturn bytes_read;\n\t\t}\n#if !TARGET_JVM\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\n\t\tstatic extern unsafe bool WriteFile (int handle, byte* buffer, int bytes_to_write,\n\t\t\t\tout int bytes_written, IntPtr overlapped);\n#endif\n\t\tpublic override void Write (byte [] buffer, int offset, int count)\n\t\t{\n\t\t\tCheckDisposed ();\n\t\t\tif (buffer == null)\n\t\t\t\tthrow new ArgumentNullException (\"buffer\");\n\t\t\tif (offset < 0 || count < 0)\n\t\t\t\tthrow new ArgumentOutOfRangeException ();\n\t\t\tif (buffer.Length - offset < count)\n\t\t\t\tthrow new ArgumentException (\"offset+count\",\n\t\t\t\t\t\t\t     \"The size of the buffer is less than offset + count.\");\n\t\t\tint bytes_written = 0;\n\t\t\tunsafe {\n\t\t\t\tfixed (byte* ptr = buffer) {\n\t\t\t\t\tif (WriteFile (handle, ptr + offset, count, out bytes_written, write_overlapped))\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif (Marshal.GetLastWin32Error() != FileIOPending)\n\t\t\t\t\t\tReportIOError (null);\n\t\t\t\t\t\n\t\t\t\t\tif (!GetOverlappedResult(handle, write_overlapped, ref bytes_written, true))\n\t\t\t\t\t\tReportIOError (null);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the operation timed out, then\n\t\t\t// we transfered less bytes than the requested ones\n\t\t\tif (bytes_written < count)\n\t\t\t\tthrow new TimeoutException ();\n\t\t}\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\n\t\tstatic extern bool GetCommState (int handle, [Out] DCB dcb);\n\t\t[DllImport (\"kernel32\", SetLastError=true)]\n\t\tstatic extern bool SetCommState (int handle, DCB dcb);\n\t\tpublic void SetAttributes (int baud_rate, Parity parity, int data_bits, StopBits bits, Handshake hs)\n\t\t{\n\t\t\tDCB dcb = new DCB ();\n\t\t\tif (!GetCommState (handle, dcb))\n\t\t\t\tReportIOError (null);\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "length": 1031, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "d356cc0ece3ba9de9fcbb2613757dcabae2d8a589e1f370b"}
{"input": "", "context": "# Copyright (c) 2008-2009 Participatory Culture Foundation\n# See LICENSE for details.\nimport re\nfrom django.core import mail\nfrom django.core.urlresolvers import reverse\nfrom django.conf import settings\nfrom django.contrib.auth.models import User\nfrom django.utils.translation import ugettext as _\nfrom channelguide.testframework import TestCase\nfrom channelguide.cobranding.models import Cobranding\nclass UserProfileTest(TestCase):\n    def setUp(self):\n        TestCase.setUp(self)\n        self.user = self.make_user('mary')\n    def login_data(self):\n        return {'username': 'mary', 'password': 'password',\n                'which-form': 'login' }\n    def register_data(self):\n        \"\"\"\n        Return a dictionary of data used to register a new user.\n        \"\"\"\n        return {'newusername': u'mike\\xf6', 'email': 'mike@mike.com',\n                'newpassword': u'password\\xdf\\xdf',\n                'newpassword2': u'password\\xdf\\xdf',\n                'which-form': 'register' }\n    def register(self):\n        \"\"\"\n        Return the final response from registering a user.\n        \"\"\"\n        response = self.post_data(\"/accounts/register/\", self.register_data())\n        self.assertRedirect(response, '')\n        response = self.get_page('/')\n        context = response.context[0]\n        self.assertEquals(context['request'].notifications[0][0],\n                          _('Thanks for registering!'))\n        self.assertEquals(context['user'].username, u'mike\\xf6')\n        self.assertEquals(context['user'].email, 'mike@mike.com')\n        self.assert_(context['user'].check_password(\n                u'password\\xdf\\xdf'))\n        self.assertEquals(context['user'].get_profile().user,\n                          context['user'])\n        self.assertEquals(context['user'].is_active, True)\n        return response\n    def bad_login_data(self):\n        return {'username': 'mary', 'password': 'badpassword',\n                'which-form': 'login' }\n    def test_login(self):\n        response = self.post_data(settings.LOGIN_URL, self.login_data())\n        self.assertRedirect(response, '')\n        response = self.get_page('/')\n        self.assertEquals(response.context[0]['user'].username,\n                self.user.username)\n    def test_login_with_email(self):\n        data = self.login_data()\n        data['username'] = self.user.email\n        response = self.post_data(settings.LOGIN_URL, data)\n        self.assertRedirect(response, '')\n        response = self.get_page('/')\n        self.assertEquals(response.context[0]['user'].username,\n                self.user.username)\n    def test_bad_login(self):\n        response = self.post_data(settings.LOGIN_URL, self.bad_login_data())\n        self.assert_(not response.context[0]['user'].is_authenticated())\n    def test_register(self):\n        self.register()\n    def test_forgot_password(self):\n        user = self.make_user('rachel')\n        data = {'email': user.email}\n        self.post_data(\"/accounts/password_reset/\", data)\n        regex = re.compile(r'/accounts/reset/[\\w-]+/')\n        url = regex.search(mail.outbox[0].body).group(0)\n        data = {'new_password1': 'newpass', 'new_password2': 'badmatch'}\n        page = self.post_data(url, data=data)\n        self.assertEquals(page.status_code, 200) # didn't redirect to a new\n                                                 # page\n        data['new_password2'] = data['new_password1']\n        page = self.post_data(url, data=data)\n        self.assertEquals(page.status_code, 302)\n        user_check = User.objects.get(pk=user.pk)\n        self.assert_(user_check.check_password('newpass'))\n    def test_user_starts_unapproved(self):\n        \"\"\"\n        Users should start off unapproved.\n        \"\"\"\n        response = self.register()\n        user = response.context[0]['request'].user\n        self.assertEquals(user.get_profile().approved, False)\n    def test_registration_send_approval_email(self):\n        \"\"\"\n        Registering a user should send an e-mail to that user letting them\n        approve their account.\n        \"\"\"\n        response = self.register()\n        user = response.context[0]['request'].user\n        self.check_confirmation_email(user)\n    def check_confirmation_email(self, user):\n        email = mail.outbox[-1]\n        self.assertEquals(email.subject, 'Approve your Miro Guide account')\n        self.assertEquals(email.recipients(), ['mike@mike.com'])\n        m = re.match(\"\"\"\nYou have requested a new user account on Miro Guide and you specified\nthis address \\((.*?)\\) as your e-mail address.\nIf you did not do this, simply ignore this e-mail.  To confirm your\nregistration, please follow this link:\n(.*?)\nYour ratings will show up, but won't count towards the average until\nyou use this confirmation link.\nThanks,\nThe Miro Guide\"\"\", email.body)\n        self.assert_(m, 'Email does not match:\\n%s' % email.body)\n        self.assertEquals(m.groups()[0], 'mike@mike.com')\n        self.assertEquals(m.groups()[1],\n                '%saccounts/confirm/%s/%s' % (settings.BASE_URL_FULL,\n                    user.id, user.get_profile().generate_confirmation_code()))\n    def test_confirmation_url_confirms_user(self):\n        \"\"\"\n        When the user visits the confirmation url, it should set the approval\n        flag to true.\n        \"\"\"\n        response = self.register()\n        user = response.context[0]['request'].user\n        url = user.get_profile().generate_confirmation_url()\n        response = self.get_page(url[len(settings.BASE_URL_FULL)-1:])\n        user = User.objects.get(pk=user.pk)\n        self.assert_(user.get_profile().approved)\n    def test_no_confirmation_with_bad_code(self):\n        \"\"\"\n        If the user gives an incorrect code, they should not be confirmed.\n        \"\"\"\n        response = self.register()\n        user = response.context[0]['request'].user\n        url = user.get_profile().generate_confirmation_url()\n        response = self.get_page(url[len(settings.BASE_URL_FULL)-1:-1])\n        user = User.objects.get(pk=user.pk)\n        self.assert_(not user.get_profile().approved)\n    def test_resend_confirmation_code(self):\n        \"\"\"\n        /accounts/confirm/<id>/resend should resent the initial confirmation\n        email.\n        \"\"\"\n        response = self.register()\n        user = response.context[0]['request'].user\n        url = user.get_profile().generate_confirmation_url()\n        parts = url[len(settings.BASE_URL_FULL)-1:].split('/')\n        url = '/'.join(parts[:-1]) + '/resend'\n        mail.outbox = []\n        response = self.get_page(url)\n        self.check_confirmation_email(user)\n    def test_unicode_in_data(self):\n        \"\"\"\n        The profile page should render even when the user has Unicode elements.\n        \"\"\"\n        response = self.register()\n        user = response.context[0]['request'].user\n        user.city = u'S\\u1111o'\n        user.save()\n        self.get_page(user.get_absolute_url())\nclass ModerateUserTest(TestCase):\n    def setUp(self):\n        TestCase.setUp(self)\n        self.jane = self.make_user(\"jane\")\n        self.jane.is_superuser = True\n        self.jane.save()\n        self.bob = self.make_user(\"bob\")\n        self.cathy = self.make_user(\"cathy\")\n        self.adrian = self.make_user(\"adrian\")\n        self.judy = self.make_user(\"judy\")\n        self.judy.email = 'judy@bob.com'\n        self.judy.save()\n    def test_auth(self):\n        self.login(self.adrian)\n        response = self.get_page(\"/accounts/search\", data={'query': 'yahoo'})\n        self.assertLoginRedirect(response)\n        response = self.post_data(\"/accounts/profile/\",\n                {'action': 'promote', 'id': self.bob.id})\n        self.assertLoginRedirect(response)\n        response = self.post_data(\"/accounts/profile/\",\n                {'action': 'demote', 'id': self.bob.id})\n        self.assertLoginRedirect(response)\n    def check_search(self, query, *correct_results):\n        response = self.get_page(\"/accounts/search\", data={'query': query})\n        returned_names = [u.username for u in\n                          response.context[0]['page'].object_list]\n        correct_names = [u.username for u in correct_results]\n        self.assertSameSet(returned_names, correct_names)\n    def test_search_users(self):\n        self.login(self.jane)\n        self.check_search('cathy', self.cathy)\n        self.check_search('bob', self.bob, self.judy)\n        self.check_search('test.test', self.jane, self.bob, self.cathy,\n                self.adrian)\n        self.check_search('blahblah') # no users should be returned\n    def check_promote_demote(self, user, action, permission=None):\n        self.post_data(\"/accounts/profile/%i/\" % user.pk, {'action': action})\n        user = User.objects.get(pk=user.pk)\n        if permission is not None:\n            self.assert_(user.has_perm(permission))\n        else:\n            self.assert_(not user.get_all_permissions())\n        return user\n    def test_promote_user(self):\n        self.login(self.jane)\n        user = self.check_promote_demote(self.bob, 'promote',\n                                         'user_profile.betatester')\n        self.assertFalse(user.has_perm('channels.change_channel'))\n        user = self.check_promote_demote(self.bob, 'promote',\n                                  'channels.change_channel')\n        self.assertFalse(user.has_perm('featured_add_featured_queue'))\n        self.check_promote_demote(self.bob, 'promote',\n                                  'featured.add_featuredqueue')\n        # no group has this permission, so only superusers should have it\n        self.check_promote_demote(self.bob, 'promote',\n                                  'channels.add_generatedstats')\n        self.check_promote_demote(self.bob, 'promote',\n                                  'channels.add_generatedstats')\n    def test_demote_user(self):\n        self.login(self.jane)\n        for i in range(5):\n            self.cathy.get_profile().promote()\n        user = self.check_promote_demote(self.cathy, 'demote',\n                                         'featured.add_featuredqueue')\n        self.assertFalse(user.is_superuser)\n        user = self.check_promote_demote(self.cathy, 'demote',\n                                         'channels.change_channel')\n        self.assertFalse(user.has_perm('featured.add_featuredqueue'))\n        user = self.check_promote_demote(self.cathy, 'demote',\n                                         'user_profile.betatester')\n        self.assertFalse(user.has_perm('channels.change_channel'))\n        user = self.check_promote_demote(self.cathy, 'demote')\n        self.assertFalse(user.has_perm('user_profile.betatester'))\n        self.check_promote_demote(self.cathy, 'demote')\nclass EditUserTest(TestCase):\n    def setUp(self):\n        TestCase.setUp(self)\n        self.user = self.make_user('mary')\n        self.admin = self.make_user('joe')\n        self.admin.is_superuser = True\n        self.admin.save()\n        self.other_user = self.make_user('bobby',\n                                         group='cg_moderator')\n    def check_can_see_edit_page(self, user, should_see):\n        page = self.get_page('/accounts/profile/%i/' % self.user.id, user)\n        if should_see:\n            self.assertCanAccess(page)\n        else:\n            self.assertLoginRedirect(page)\n    def test_permissions(self):\n        self.check_can_see_edit_page(self.user, True)\n        self.check_can_see_edit_page(self.admin, True)\n        self.check_can_see_edit_page(self.other_user, False)\nclass UserViewTest(TestCase):\n    def setUp(self):\n        TestCase.setUp(self)\n        self.user = self.make_user('mary')\n        self.channel = self.make_channel(self.user)\n    def test_view(self):\n        page = self.get_page(self.user.get_profile().get_url())\n        self.assertEquals(page.status_code, 200)\n        self.assertEquals(page.context['for_user'], self.user)\n        self.assertEquals(page.context['cobrand'], None)\n        self.assertEquals(page.context['biggest'].paginator.count, 1)\n        self.assertEquals(page.context['biggest'].object_list[0], self.channel)\n    def test_view_with_site(self):\n        site = self.make_channel(self.user)\n        site.url = None\n        site.save()\n        page = self.get_page(self.user.get_profile().get_url())\n        self.assertEquals(page.status_code, 200)\n        self.assertEquals(page.context['for_user'], self.user)\n        self.assertEquals(page.context['cobrand'], None)\n        self.assertEquals(page.context['biggest'].paginator.count, 1)\n        self.assertEquals(page.context['feed_page'].object_list[0],\n                          self.channel)\n        self.assertEquals(page.context['site_page'].object_list[0], site)\n    def test_url_with_id_is_redirected(self):\n        url = reverse('channelguide.user_profile.views.for_user',\n                      args=(self.user.pk,))\n        page = self.get_page(url)\n        self.assertRedirect(page, self.user.get_profile().get_url())\n    def test_inactive_user_gives_404(self):\n        self.user.is_active = False\n        self.user.save()\n        page = self.get_page(self.user.get_profile().get_url())\n        self.assertEquals(page.status_code, 404)\n    def test_unknown_user_gives_404(self):\n        url = reverse('channelguide.user_profile.views.for_user',\n                      args=('unknown_username',))\n        page = self.get_page(url)\n        self.assertEquals(page.status_code, 404)\n    def test_user_with_cobrand(self):\n        cobrand = Cobranding.objects.create(user=self.user)\n        page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=self.user)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n    def test_user_with_cobrand_admin(self):\n        admin = self.make_user('admin')\n        admin.is_superuser = True\n        admin.save()\n        cobrand = Cobranding.objects.create(user=self.user)\n", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "length": 840, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "feedb243436593ce6db6b01f37eaf505c93f329ca6adb4ff"}
{"input": "", "context": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nfunctional_tests\n~~~~~~~~~~~~~~~~\nThis file contains the functional or acceptance tests for the fetchphotos project.\n\"\"\"\n# Time-stamp: <2015-02-22 14:17:50 bob>\n## invoke tests using the call_func_tests.sh script in this directory\n#pylint: disable=global-statement, invalid-name\nimport argparse\nfrom contextlib import contextmanager\nimport copy\nimport datetime\nimport os\nimport re\nimport shutil\nimport string\nimport subprocess\nimport sys\nimport tempfile\nimport unittest\nCF_TEMPLATE = string.Template(u'''\n[General]\nDIGICAMDIR=$src\nDESTINATIONDIR=$dst\n#IMAGE_EXTENSIONS= JPG, tiff\nVIDEO_EXTENSIONS=mov avi\n[File_processing]\nROTATE_PHOTOS=$rot\nADD_TIMESTAMP=$timestamp\nLOWERCASE_FILENAME=$lower\n''')\nCF_DEFAULTS = {'src': '/path-to-images',\n               'dst': '/path-to-dst',\n               'rot': True,\n               'timestamp': True,\n               'lower': True}\n_keep_tempdir = False\n# Adapted from: http://stackoverflow.com/a/22434262\n@contextmanager\ndef redirect_stdout_stderr(new_target, capture_stderr=False):\n    \"\"\"Make unit tests be quiet\"\"\"\n    if capture_stderr:\n        old_stderr, sys.stderr = sys.stderr, new_target # replace sys.stdout\n    old_target, sys.stdout = sys.stdout, new_target # replace sys.stdout\n    try:\n        yield new_target # run some code with the replaced stdout\n    finally:\n        sys.stdout = old_target # restore to the previous value\n        if capture_stderr:\n            sys.stderr = old_stderr\nclass TestMethods(unittest.TestCase):\n    \"\"\"Acceptance tests for fetchphotos.py.\n    These tests run the fetchphotos.py script, and do a lot of copying.\n    \"\"\"\n    def setUp(self):\n        \"\"\"fetchphotos needs logging to be initialized\"\"\"\n        #print \"argv is\", sys.argv\n        self.tempdir = tempfile.mkdtemp(dir='./')\n        self.cfgfile = os.path.join(self.tempdir, u\"config.cfg\")\n        self.srcdir = os.path.join(self.tempdir, u\"src\")\n        self.dstdir = os.path.join(self.tempdir, u\"dst\")\n        self.starttime = datetime.datetime.now()\n        shutil.copytree(u\"./tests/testdata/example_images\",\n                        self.srcdir)\n        os.makedirs(self.dstdir)\n        #print \"temp dir is:\", self.tempdir\n    def tearDown(self):\n        \"\"\"Clean up results of tests\"\"\"\n        if _keep_tempdir is False:\n            shutil.rmtree(self.tempdir)\n    def test_check_tempdir(self):\n        \"\"\"Basic happy case with one specified file.\"\"\"\n        write_config_file(self.cfgfile, self.tempdir)\n        subprocess.check_output([\"python\",\n                                 \"fetchphotos.py\",\n                                 \"-c\",\n                                 self.cfgfile,\n                                 os.path.join(self.tempdir,\n                                              u\"src\",\n                                              u\"IMG_0533_normal_top_left.JPG\")\n                                ],\n                                stderr=subprocess.STDOUT)\n        dstfile = os.path.join(\n            self.dstdir,\n            u\"2009-04-22T17.25.35_img_0533_normal_top_left.jpg\")\n        # print \"dstfile is\", dstfile\n        self.assertTrue(os.path.isfile(dstfile))\n    def test_check_nolower(self):\n        \"\"\"Basic case with LOWERCASE_FILENAME=False.\"\"\"\n        write_config_file(self.cfgfile, self.tempdir, ('lower', False))\n        subprocess.check_output([\"python\",\n                                 \"fetchphotos.py\",\n                                 \"-c\",\n                                 self.cfgfile,\n                                 os.path.join(self.tempdir,\n                                              u\"src\",\n                                              u\"IMG_0533_normal_top_left.JPG\")\n                                ],\n                                stderr=subprocess.STDOUT)\n        # print \"Result is \\\"{}\\\"\".format(result)\n        dstfile = os.path.join(\n            self.dstdir,\n            u\"2009-04-22T17.25.35_IMG_0533_normal_top_left.JPG\")\n        self.assertTrue(os.path.isfile(dstfile))\n    def test_check_no_metadata(self):\n        \"\"\"Basic case with a file without metadata\"\"\"\n        write_config_file(self.cfgfile, self.tempdir, ('lower', False))\n        try:\n            result = subprocess.check_output([\"python\",\n                                              \"fetchphotos.py\",\n                                              \"-c\",\n                                              self.cfgfile,\n                                              os.path.join(self.tempdir,\n                                                           u\"src\",\n                                                           u\"img_no_metadata.JPG\")\n                                             ],\n                                             stderr=subprocess.STDOUT)\n            #print \"Result is \\\"{}\\\"\".format(result)\n        except subprocess.CalledProcessError, e:\n            print \"Got exception: \\\"{}\\\"\".format(e.output)\n        match = re.match(r'^.*\\-\\-\\>\\s+(.*)$', result, re.MULTILINE)\n        self.assertIsNotNone(match)\n        if match is None:\n            return\n        destfile = match.group(1)\n        # The time for the new file will be sometime between when the\n        # tree copy was started and now (unless you're on a networked\n        # file system and the file server has a different time that\n        # this machine (unlikely))\n        # Try making a filename from each of these times until one\n        # matches.\n        then = copy.copy(self.starttime).replace(microsecond=0)\n        now = datetime.datetime.now().replace(microsecond=0)\n        got_match = False\n        while then <= now:\n            filename = os.path.join(\n                self.dstdir,\n                then.isoformat().replace(':', '.') + u\"_img_no_metadata.JPG\")\n            if filename == destfile:\n                got_match = True\n                break\n            then += datetime.timedelta(seconds=1)\n            then = then.replace(microsecond=0)\n        self.assertTrue(got_match)\n    def test_check_first_time(self):\n        \"\"\"Check what happens the first time fetchphotos is called\"\"\"\n        try:\n            subprocess.check_output([\"python\",\n                                     \"fetchphotos.py\",\n                                     \"-c\",\n                                     self.cfgfile,\n                                     \"--generate-configfile\"\n                                    ],\n                                    stderr=subprocess.STDOUT)\n            # print \"Result is \\\"{}\\\"\".format(result)\n        except subprocess.CalledProcessError, e:\n            print \"Got exception: \\\"{}\\\"\".format(e.output)\n        self.assertTrue(os.path.isfile(self.cfgfile))\ndef write_config_file(fname, tdir, *pairs):\n    \"\"\"Writes a config file for testing.\n    The path for the src dir must be 'src', as that is what is used in\n    the setUp() method.\n    If present, *pairs is a list of key-value pairs that will be put into cf_sub.\n    \"\"\"\n    cf_sub = copy.copy(CF_DEFAULTS)\n    for key, value in pairs:\n        cf_sub[key] = value\n    cf_sub['src'] = os.path.join(tdir, u'src')\n    cf_sub['dst'] = os.path.join(tdir, u'dst')\n    #pprint.pprint(cf_sub)\n    with open(fname, \"w\") as out:\n        out.write(CF_TEMPLATE.substitute(cf_sub))\ndef main():\n    \"\"\"Main routine for functional unit tests\"\"\"\n    global _keep_tempdir\n    # This handy code from http://stackoverflow.com/a/17259773\n    parser = argparse.ArgumentParser(add_help=False)\n    parser.add_argument('--keep-tempdir', dest='keep_tempdir',\n                        action='store_true')\n", "answers": ["    options, args = parser.parse_known_args()"], "length": 555, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "320e62adbcd607acda753d0d1559c566d029796c177de00e"}
{"input": "", "context": "from enigma import eTimer, eEnv\nfrom Screens.Screen import Screen\nfrom Components.ActionMap import ActionMap, NumberActionMap\nfrom Components.Pixmap import Pixmap, MultiPixmap\nfrom Components.Label import Label\nfrom Components.Sources.StaticText import StaticText\nfrom Components.Sources.List import List\nfrom Components.config import config, ConfigYesNo, NoSave, ConfigSubsection, ConfigText, ConfigSelection, ConfigPassword\nfrom Components.Network import iNetwork\nfrom Components.Console import Console\nfrom Plugins.Plugin import PluginDescriptor\nfrom Tools.Directories import resolveFilename, SCOPE_SKIN_IMAGE\nfrom Tools.LoadPixmap import LoadPixmap\nfrom Wlan import iWlan, iStatus, getWlanConfigName, existBcmWifi\nfrom time import time\nimport re\nplugin_path = eEnv.resolve(\"${libdir}/enigma2/python/Plugins/SystemPlugins/WirelessLan\")\nlist = [\"Unencrypted\", \"WEP\", \"WPA\", \"WPA/WPA2\", \"WPA2\"]\nweplist = [\"ASCII\", \"HEX\"]\nconfig.plugins.wlan = ConfigSubsection()\nconfig.plugins.wlan.essid = NoSave(ConfigText(default=\"\", fixed_size=False))\nconfig.plugins.wlan.hiddenessid = NoSave(ConfigYesNo(default=False))\nconfig.plugins.wlan.encryption = NoSave(ConfigSelection(list, default=\"WPA2\"))\nconfig.plugins.wlan.wepkeytype = NoSave(ConfigSelection(weplist, default=\"ASCII\"))\nconfig.plugins.wlan.psk = NoSave(ConfigPassword(default=\"\", fixed_size=False))\nclass WlanStatus(Screen):\n\tskin = \"\"\"\n\t\t<screen name=\"WlanStatus\" position=\"center,center\" size=\"560,400\" title=\"Wireless network status\" >\n\t\t\t<ePixmap pixmap=\"buttons/red.png\" position=\"0,0\" size=\"140,40\" alphatest=\"on\" />\n\t\t\t<widget source=\"key_red\" render=\"Label\" position=\"0,0\" zPosition=\"1\" size=\"140,40\" font=\"Regular;20\" halign=\"center\" valign=\"center\" backgroundColor=\"#9f1313\" transparent=\"1\" />\n\t\t\t<widget source=\"LabelBSSID\" render=\"Label\" position=\"10,60\" size=\"200,25\" valign=\"left\" font=\"Regular;20\" transparent=\"1\" foregroundColor=\"#FFFFFF\" />\n\t\t\t<widget source=\"LabelESSID\" render=\"Label\" position=\"10,100\" size=\"200,25\" valign=\"center\" font=\"Regular;20\" transparent=\"1\" foregroundColor=\"#FFFFFF\" />\n\t\t\t<widget source=\"LabelQuality\" render=\"Label\" position=\"10,140\" size=\"200,25\" valign=\"center\" font=\"Regular;20\" transparent=\"1\" foregroundColor=\"#FFFFFF\" />\n\t\t\t<widget source=\"LabelSignal\" render=\"Label\" position=\"10,180\" size=\"200,25\" valign=\"center\" font=\"Regular;20\" transparent=\"1\" foregroundColor=\"#FFFFFF\" />\n\t\t\t<widget source=\"LabelBitrate\" render=\"Label\" position=\"10,220\" size=\"200,25\" valign=\"center\" font=\"Regular;20\" transparent=\"1\" foregroundColor=\"#FFFFFF\" />\n\t\t\t<widget source=\"LabelEnc\" render=\"Label\" position=\"10,260\" size=\"200,25\" valign=\"center\" font=\"Regular;20\" transparent=\"1\" foregroundColor=\"#FFFFFF\" />\n\t\t\t<widget source=\"BSSID\" render=\"Label\" position=\"220,60\" size=\"330,25\" valign=\"center\" font=\"Regular;20\" transparent=\"1\" foregroundColor=\"#FFFFFF\" />\n\t\t\t<widget source=\"ESSID\" render=\"Label\" position=\"220,100\" size=\"330,25\" valign=\"center\" font=\"Regular;20\" transparent=\"1\" foregroundColor=\"#FFFFFF\" />\n\t\t\t<widget source=\"quality\" render=\"Label\" position=\"220,140\" size=\"330,25\" valign=\"center\" font=\"Regular;20\" transparent=\"1\" foregroundColor=\"#FFFFFF\" />\n\t\t\t<widget source=\"signal\" render=\"Label\" position=\"220,180\" size=\"330,25\" valign=\"center\" font=\"Regular;20\" transparent=\"1\" foregroundColor=\"#FFFFFF\" />\n\t\t\t<widget source=\"bitrate\" render=\"Label\" position=\"220,220\" size=\"330,25\" valign=\"center\" font=\"Regular;20\" transparent=\"1\" foregroundColor=\"#FFFFFF\" />\n\t\t\t<widget source=\"enc\" render=\"Label\" position=\"220,260\" size=\"330,25\" valign=\"center\" font=\"Regular;20\" transparent=\"1\" foregroundColor=\"#FFFFFF\" />\n\t\t\t<ePixmap pixmap=\"div-h.png\" position=\"0,350\" zPosition=\"1\" size=\"560,2\" />\n\t\t\t<widget source=\"IFtext\" render=\"Label\" position=\"10,355\" size=\"120,21\" zPosition=\"10\" font=\"Regular;20\" halign=\"left\" backgroundColor=\"#25062748\" transparent=\"1\" />\n\t\t\t<widget source=\"IF\" render=\"Label\" position=\"120,355\" size=\"400,21\" zPosition=\"10\" font=\"Regular;20\" halign=\"left\" backgroundColor=\"#25062748\" transparent=\"1\" />\n\t\t\t<widget source=\"Statustext\" render=\"Label\" position=\"10,375\" size=\"115,21\" zPosition=\"10\" font=\"Regular;20\" halign=\"left\" backgroundColor=\"#25062748\" transparent=\"1\"/>\n\t\t\t<widget name=\"statuspic\" pixmaps=\"buttons/button_green.png,buttons/button_green_off.png\" position=\"130,380\" zPosition=\"10\" size=\"15,16\" transparent=\"1\" alphatest=\"on\"/>\n\t\t</screen>\"\"\"\n\tdef __init__(self, session, iface):\n\t\tScreen.__init__(self, session)\n\t\tself.session = session\n\t\tself.iface = iface\n\t\tself[\"LabelBSSID\"] = StaticText(_('Accesspoint:'))\n\t\tself[\"LabelESSID\"] = StaticText(_('SSID:'))\n\t\tself[\"LabelQuality\"] = StaticText(_('Link quality:'))\n\t\tself[\"LabelSignal\"] = StaticText(_('Signal strength:'))\n\t\tself[\"LabelBitrate\"] = StaticText(_('Bitrate:'))\n\t\tself[\"LabelEnc\"] = StaticText(_('Encryption:'))\n\t\tself[\"BSSID\"] = StaticText()\n\t\tself[\"ESSID\"] = StaticText()\n\t\tself[\"quality\"] = StaticText()\n\t\tself[\"signal\"] = StaticText()\n\t\tself[\"bitrate\"] = StaticText()\n\t\tself[\"enc\"] = StaticText()\n\t\tself[\"IFtext\"] = StaticText()\n\t\tself[\"IF\"] = StaticText()\n\t\tself[\"Statustext\"] = StaticText()\n\t\tself[\"statuspic\"] = MultiPixmap()\n\t\tself[\"statuspic\"].hide()\n\t\tself[\"key_red\"] = StaticText(_(\"Close\"))\n\t\tself.resetList()\n\t\tself.updateStatusbar()\n\t\tself[\"actions\"] = NumberActionMap([\"WizardActions\", \"InputActions\", \"EPGSelectActions\", \"ShortcutActions\"],\n\t\t{\n\t\t\t\"ok\": self.exit,\n\t\t\t\"back\": self.exit,\n\t\t\t\"red\": self.exit,\n\t\t}, -1)\n\t\tself.timer = eTimer()\n\t\tself.timer.timeout.get().append(self.resetList)\n\t\tself.onShown.append(lambda: self.timer.start(8000))\n\t\tself.onLayoutFinish.append(self.layoutFinished)\n\t\tself.onClose.append(self.cleanup)\n\tdef cleanup(self):\n\t\tiStatus.stopWlanConsole()\n\tdef layoutFinished(self):\n\t\tself.setTitle(_(\"Wireless network state\"))\n\tdef resetList(self):\n\t\tiStatus.getDataForInterface(self.iface, self.getInfoCB)\n\tdef getInfoCB(self, data, status):\n\t\tif data is not None:\n\t\t\tif data is True:\n\t\t\t\tif status is not None:\n\t\t\t\t\tif status[self.iface][\"essid\"] == \"off\":\n\t\t\t\t\t\tessid = _(\"No Connection\")\n\t\t\t\t\telse:\n\t\t\t\t\t\tessid = status[self.iface][\"essid\"]\n\t\t\t\t\tif status[self.iface][\"accesspoint\"] == \"Not-Associated\":\n\t\t\t\t\t\taccesspoint = _(\"Not associated\")\n\t\t\t\t\t\tessid = _(\"No Connection\")\n\t\t\t\t\telse:\n\t\t\t\t\t\taccesspoint = status[self.iface][\"accesspoint\"]\n\t\t\t\t\tif \"BSSID\" in self:\n\t\t\t\t\t\tself[\"BSSID\"].setText(accesspoint)\n\t\t\t\t\tif \"ESSID\" in self:\n\t\t\t\t\t\tself[\"ESSID\"].setText(essid)\n\t\t\t\t\tquality = status[self.iface][\"quality\"]\n\t\t\t\t\tif \"quality\" in self:\n\t\t\t\t\t\tself[\"quality\"].setText(quality)\n\t\t\t\t\tif status[self.iface][\"bitrate\"] == '0':\n\t\t\t\t\t\tbitrate = _(\"Unsupported\")\n\t\t\t\t\telse:\n\t\t\t\t\t\tbitrate = str(status[self.iface][\"bitrate\"]) + \" Mb/s\"\n\t\t\t\t\tif \"bitrate\" in self:\n\t\t\t\t\t\tself[\"bitrate\"].setText(bitrate)\n\t\t\t\t\tsignal = status[self.iface][\"signal\"]\n\t\t\t\t\tif \"signal\" in self:\n\t\t\t\t\t\tself[\"signal\"].setText(signal)\n\t\t\t\t\tif status[self.iface][\"encryption\"] == \"off\":\n\t\t\t\t\t\tif accesspoint == \"Not-Associated\":\n\t\t\t\t\t\t\tencryption = _(\"Disabled\")\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tencryption = _(\"off or wpa2 on\")\n\t\t\t\t\telse:\n\t\t\t\t\t\tencryption = _(\"Enabled\")\n\t\t\t\t\tif \"enc\" in self:\n\t\t\t\t\t\tself[\"enc\"].setText(encryption)\n\t\t\t\t\tself.updateStatusLink(status)\n\tdef exit(self):\n\t\tself.timer.stop()\n\t\tself.close(True)\n\tdef updateStatusbar(self):\n\t\twait_txt = _(\"Please wait...\")\n\t\tself[\"BSSID\"].setText(wait_txt)\n\t\tself[\"ESSID\"].setText(wait_txt)\n\t\tself[\"quality\"].setText(wait_txt)\n\t\tself[\"signal\"].setText(wait_txt)\n\t\tself[\"bitrate\"].setText(wait_txt)\n\t\tself[\"enc\"].setText(wait_txt)\n\t\tself[\"IFtext\"].setText(_(\"Network:\"))\n\t\tself[\"IF\"].setText(iNetwork.getFriendlyAdapterName(self.iface))\n\t\tself[\"Statustext\"].setText(_(\"Link:\"))\n\tdef updateStatusLink(self, status):\n\t\tif status is not None:\n\t\t\tif status[self.iface][\"essid\"] == \"off\" or status[self.iface][\"accesspoint\"] == \"Not-Associated\" or status[self.iface][\"accesspoint\"] == False:\n\t\t\t\tself[\"statuspic\"].setPixmapNum(1)\n\t\t\telse:\n\t\t\t\tself[\"statuspic\"].setPixmapNum(0)\n\t\t\tself[\"statuspic\"].show()\nclass WlanScan(Screen):\n\tskin = \"\"\"\n\t\t<screen name=\"WlanScan\" position=\"center,center\" size=\"560,400\" title=\"Select a wireless network\" >\n\t\t\t<ePixmap pixmap=\"buttons/red.png\" position=\"0,0\" size=\"140,40\" alphatest=\"on\" />\n\t\t\t<ePixmap pixmap=\"buttons/green.png\" position=\"140,0\" size=\"140,40\" alphatest=\"on\" />\n\t\t\t<ePixmap pixmap=\"buttons/yellow.png\" position=\"280,0\" size=\"140,40\" alphatest=\"on\" />\n\t\t\t<widget source=\"key_red\" render=\"Label\" position=\"0,0\" zPosition=\"1\" size=\"140,40\" font=\"Regular;20\" halign=\"center\" valign=\"center\" backgroundColor=\"#9f1313\" transparent=\"1\" />\n\t\t\t<widget source=\"key_green\" render=\"Label\" position=\"140,0\" zPosition=\"1\" size=\"140,40\" font=\"Regular;20\" halign=\"center\" valign=\"center\" backgroundColor=\"#1f771f\" transparent=\"1\" />\n\t\t\t<widget source=\"key_yellow\" render=\"Label\" position=\"280,0\" zPosition=\"1\" size=\"140,40\" font=\"Regular;20\" halign=\"center\" valign=\"center\" backgroundColor=\"#a08500\" transparent=\"1\" />\n\t\t\t<widget source=\"list\" render=\"Listbox\" position=\"5,40\" size=\"550,300\" scrollbarMode=\"showOnDemand\">\n\t\t\t\t<convert type=\"TemplatedMultiContent\">\n\t\t\t\t\t{\"template\": [\n\t\t\t\t\t\t\tMultiContentEntryText(pos = (0, 0), size = (550, 30), font=0, flags = RT_HALIGN_LEFT, text = 0), # index 0 is the essid\n\t\t\t\t\t\t\tMultiContentEntryText(pos = (0, 30), size = (175, 20), font=1, flags = RT_HALIGN_LEFT, text = 5), # index 5 is the interface\n\t\t\t\t\t\t\tMultiContentEntryText(pos = (175, 30), size = (175, 20), font=1, flags = RT_HALIGN_LEFT, text = 4), # index 0 is the encryption\n\t\t\t\t\t\t\tMultiContentEntryText(pos = (350, 0), size = (200, 20), font=1, flags = RT_HALIGN_LEFT, text = 2), # index 0 is the signal\n\t\t\t\t\t\t\tMultiContentEntryText(pos = (350, 30), size = (200, 20), font=1, flags = RT_HALIGN_LEFT, text = 3), # index 0 is the maxrate\n\t\t\t\t\t\t\tMultiContentEntryPixmapAlphaTest(pos = (0, 52), size = (550, 2), png = 6), # index 6 is the div pixmap\n\t\t\t\t\t\t],\n\t\t\t\t\t\"fonts\": [gFont(\"Regular\", 28),gFont(\"Regular\", 18)],\n\t\t\t\t\t\"itemHeight\": 54\n\t\t\t\t\t}\n\t\t\t\t</convert>\n\t\t\t</widget>\n\t\t\t<ePixmap pixmap=\"div-h.png\" position=\"0,340\" zPosition=\"1\" size=\"560,2\" />\n\t\t\t<widget source=\"info\" render=\"Label\" position=\"0,350\" size=\"560,50\" font=\"Regular;24\" halign=\"center\" valign=\"center\" backgroundColor=\"#25062748\" transparent=\"1\" />\n\t\t</screen>\"\"\"\n\tdef __init__(self, session, iface):\n\t\tScreen.__init__(self, session)\n\t\tself.session = session\n\t\tself.iface = iface\n\t\tself.skin_path = plugin_path\n\t\tself.oldInterfaceState = iNetwork.getAdapterAttribute(self.iface, \"up\")\n\t\tself.APList = None\n\t\tself.newAPList = None\n\t\tself.WlanList = None\n\t\tself.cleanList = None\n\t\tself.oldlist = {}\n\t\tself.listLength = None\n\t\tself.divpng = LoadPixmap(path=resolveFilename(SCOPE_SKIN_IMAGE, \"div-h.png\"))\n\t\tself.rescanTimer = eTimer()\n\t\tself.rescanTimer.callback.append(self.rescanTimerFired)\n\t\tself[\"info\"] = StaticText()\n\t\tself.list = []\n\t\tself[\"list\"] = List(self.list)\n\t\tself[\"key_red\"] = StaticText(_(\"Close\"))\n\t\tself[\"key_green\"] = StaticText(_(\"Connect\"))\n\t\tself[\"key_yellow\"] = StaticText()\n\t\tself[\"actions\"] = NumberActionMap([\"WizardActions\", \"InputActions\", \"EPGSelectActions\"],\n\t\t{\n\t\t\t\"ok\": self.select,\n\t\t\t\"back\": self.cancel,\n\t\t}, -1)\n\t\tself[\"shortcuts\"] = ActionMap([\"ShortcutActions\"],\n\t\t{\n\t\t\t\"red\": self.cancel,\n\t\t\t\"green\": self.select,\n\t\t})\n\t\tiWlan.setInterface(self.iface)\n\t\tself.w = iWlan.getInterface()\n\t\tself.onLayoutFinish.append(self.layoutFinished)\n\t\tself.getAccessPoints(refresh=False)\n\tdef layoutFinished(self):\n\t\tself.setTitle(_(\"Select a wireless network\"))\n\tdef select(self):\n\t\tcur = self[\"list\"].getCurrent()\n\t\tif cur is not None:\n\t\t\tiWlan.stopGetNetworkList()\n\t\t\tself.rescanTimer.stop()\n\t\t\tdel self.rescanTimer\n\t\t\tif cur[0] is not None:\n\t\t\t\tself.close(cur[0])\n\t\t\telse:\n\t\t\t\tself.close(None)\n\t\telse:\n\t\t\tiWlan.stopGetNetworkList()\n\t\t\tself.rescanTimer.stop()\n\t\t\tdel self.rescanTimer\n\t\t\tself.close(None)\n\tdef cancel(self):\n\t\tiWlan.stopGetNetworkList()\n\t\tself.rescanTimer.stop()\n\t\tdel self.rescanTimer\n\t\tself.close(None)\n\tdef rescanTimerFired(self):\n\t\tself.rescanTimer.stop()\n\t\tself.updateAPList()\n\tdef buildEntryComponent(self, essid, bssid, encrypted, iface, maxrate, signal):\n\t\tencryption = encrypted and _(\"Yes\") or _(\"No\")\n\t\treturn((essid, bssid, _(\"Signal: \") + str(signal), _(\"Max. bitrate: \") + str(maxrate), _(\"Encrypted: \") + encryption, _(\"Interface: \") + str(iface), self.divpng))\n\tdef updateAPList(self):\n\t\tnewList = []\n\t\tnewList = self.getAccessPoints(refresh=True)\n\t\tself.newAPList = []\n\t\ttmpList = []\n\t\tnewListIndex = None\n\t\tcurrentListEntry = None\n\t\tcurrentListIndex = None\n\t\tfor ap in self.oldlist.keys():\n\t\t\tdata = self.oldlist[ap]['data']\n\t\t\tif data is not None:\n\t\t\t\ttmpList.append(data)\n\t\tif len(tmpList):\n\t\t\tfor entry in tmpList:\n\t\t\t\tself.newAPList.append(self.buildEntryComponent(entry[0], entry[1], entry[2], entry[3], entry[4], entry[5]))\n", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "length": 1024, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "544c63cee98145e32800b86cdc53d87ba73f46da8aeafade"}
{"input": "", "context": "using System;\nusing iTextSharp.text;\n/*\n * $Id: Barcode39.cs,v 1.5 2006/09/17 15:58:51 psoares33 Exp $\n *\n * Copyright 2002-2006 by Paulo Soares.\n *\n * The contents of this file are subject to the Mozilla Public License Version 1.1\n * (the \"License\"); you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the License.\n *\n * The Original Code is 'iText, a free JAVA-PDF library'.\n *\n * The Initial Developer of the Original Code is Bruno Lowagie. Portions created by\n * the Initial Developer are Copyright (C) 1999, 2000, 2001, 2002 by Bruno Lowagie.\n * All Rights Reserved.\n * Co-Developer of the code is Paulo Soares. Portions created by the Co-Developer\n * are Copyright (C) 2000, 2001, 2002 by Paulo Soares. All Rights Reserved.\n *\n * Contributor(s): all the names of the contributors are added in the source code\n * where applicable.\n *\n * Alternatively, the contents of this file may be used under the terms of the\n * LGPL license (the \"GNU LIBRARY GENERAL PUBLIC LICENSE\"), in which case the\n * provisions of LGPL are applicable instead of those above.  If you wish to\n * allow use of your version of this file only under the terms of the LGPL\n * License and not to allow others to use your version of this file under\n * the MPL, indicate your decision by deleting the provisions above and\n * replace them with the notice and other provisions required by the LGPL.\n * If you do not delete the provisions above, a recipient may use your version\n * of this file under either the MPL or the GNU LIBRARY GENERAL PUBLIC LICENSE.\n *\n * This library is free software; you can redistribute it and/or modify it\n * under the terms of the MPL as stated above or under the terms of the GNU\n * Library General Public License as published by the Free Software Foundation;\n * either version 2 of the License, or any later version.\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Library general Public License for more\n * details.\n *\n * If you didn't download this code from the following link, you should check if\n * you aren't using an obsolete version:\n * http://www.lowagie.com/iText/\n */\nnamespace iTextSharp.text.pdf {\n    /** Implements the code 39 and code 39 extended. The default parameters are:\n     * <pre>\n     *x = 0.8f;\n     *n = 2;\n     *font = BaseFont.CreateFont(\"Helvetica\", \"winansi\", false);\n     *size = 8;\n     *baseline = size;\n     *barHeight = size * 3;\n     *textint= Element.ALIGN_CENTER;\n     *generateChecksum = false;\n     *checksumText = false;\n     *startStopText = true;\n     *extended = false;\n     * </pre>\n     *\n     * @author Paulo Soares (psoares@consiste.pt)\n     */\n    public class Barcode39 : Barcode {\n        /** The bars to generate the code.\n        */    \n        private static readonly byte[][] BARS = \n        {\n            new byte[] {0,0,0,1,1,0,1,0,0},\n            new byte[] {1,0,0,1,0,0,0,0,1},\n            new byte[] {0,0,1,1,0,0,0,0,1},\n            new byte[] {1,0,1,1,0,0,0,0,0},\n            new byte[] {0,0,0,1,1,0,0,0,1},\n            new byte[] {1,0,0,1,1,0,0,0,0},\n            new byte[] {0,0,1,1,1,0,0,0,0},\n            new byte[] {0,0,0,1,0,0,1,0,1},\n            new byte[] {1,0,0,1,0,0,1,0,0},\n            new byte[] {0,0,1,1,0,0,1,0,0},\n            new byte[] {1,0,0,0,0,1,0,0,1},\n            new byte[] {0,0,1,0,0,1,0,0,1},\n            new byte[] {1,0,1,0,0,1,0,0,0},\n            new byte[] {0,0,0,0,1,1,0,0,1},\n            new byte[] {1,0,0,0,1,1,0,0,0},\n            new byte[] {0,0,1,0,1,1,0,0,0},\n            new byte[] {0,0,0,0,0,1,1,0,1},\n            new byte[] {1,0,0,0,0,1,1,0,0},\n            new byte[] {0,0,1,0,0,1,1,0,0},\n            new byte[] {0,0,0,0,1,1,1,0,0},\n            new byte[] {1,0,0,0,0,0,0,1,1},\n            new byte[] {0,0,1,0,0,0,0,1,1},\n            new byte[] {1,0,1,0,0,0,0,1,0},\n            new byte[] {0,0,0,0,1,0,0,1,1},\n            new byte[] {1,0,0,0,1,0,0,1,0},\n            new byte[] {0,0,1,0,1,0,0,1,0},\n            new byte[] {0,0,0,0,0,0,1,1,1},\n            new byte[] {1,0,0,0,0,0,1,1,0},\n            new byte[] {0,0,1,0,0,0,1,1,0},\n            new byte[] {0,0,0,0,1,0,1,1,0},\n            new byte[] {1,1,0,0,0,0,0,0,1},\n            new byte[] {0,1,1,0,0,0,0,0,1},\n            new byte[] {1,1,1,0,0,0,0,0,0},\n            new byte[] {0,1,0,0,1,0,0,0,1},\n            new byte[] {1,1,0,0,1,0,0,0,0},\n            new byte[] {0,1,1,0,1,0,0,0,0},\n            new byte[] {0,1,0,0,0,0,1,0,1},\n            new byte[] {1,1,0,0,0,0,1,0,0},\n            new byte[] {0,1,1,0,0,0,1,0,0},\n            new byte[] {0,1,0,1,0,1,0,0,0},\n            new byte[] {0,1,0,1,0,0,0,1,0},\n            new byte[] {0,1,0,0,0,1,0,1,0},\n            new byte[] {0,0,0,1,0,1,0,1,0},\n            new byte[] {0,1,0,0,1,0,1,0,0}\n        };\n     \n        /** The index chars to <CODE>BARS</CODE>.\n        */    \n        private const string CHARS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%*\";\n        \n        /** The character combinations to make the code 39 extended.\n        */    \n        private const string EXTENDED = \"%U\" +\n            \"$A$B$C$D$E$F$G$H$I$J$K$L$M$N$O$P$Q$R$S$T$U$V$W$X$Y$Z\" +\n            \"%A%B%C%D%E  /A/B/C/D/E/F/G/H/I/J/K/L - ./O\" +\n            \" 0 1 2 3 4 5 6 7 8 9/Z%F%G%H%I%J%V\" +\n            \" A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\" +\n            \"%K%L%M%N%O%W\" +\n            \"+A+B+C+D+E+F+G+H+I+J+K+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z\" +\n            \"%P%Q%R%S%T\";\n            \n        /** Creates a new Barcode39.\n        */    \n        public Barcode39() {\n            x = 0.8f;\n            n = 2;\n            font = BaseFont.CreateFont(\"Helvetica\", \"winansi\", false);\n            size = 8;\n            baseline = size;\n            barHeight = size * 3;\n            textAlignment = Element.ALIGN_CENTER;\n            generateChecksum = false;\n            checksumText = false;\n            startStopText = true;\n            extended = false;\n        }\n        \n        /** Creates the bars.\n        * @param text the text to create the bars. This text does not include the start and\n        * stop characters\n        * @return the bars\n        */    \n        public static byte[] GetBarsCode39(string text) {\n            text = \"*\" + text + \"*\";\n            byte[] bars = new byte[text.Length * 10 - 1];\n            for (int k = 0; k < text.Length; ++k) {\n                int idx = CHARS.IndexOf(text[k]);\n                if (idx < 0)\n                    throw new ArgumentException(\"The character '\" + text[k] + \"' is illegal in code 39.\");\n                Array.Copy(BARS[idx], 0, bars, k * 10, 9);\n            }\n            return bars;\n        }\n        \n        /** Converts the extended text into a normal, escaped text,\n        * ready to generate bars.\n        * @param text the extended text\n        * @return the escaped text\n        */    \n        public static string GetCode39Ex(string text) {\n            string ret = \"\";\n            for (int k = 0; k < text.Length; ++k) {\n                char c = text[k];\n                if (c > 127)\n                    throw new ArgumentException(\"The character '\" + c + \"' is illegal in code 39 extended.\");\n                char c1 = EXTENDED[c * 2];\n                char c2 = EXTENDED[c * 2 + 1];\n                if (c1 != ' ')\n                    ret += c1;\n                ret += c2;\n            }\n            return ret;\n        }\n        \n        /** Calculates the checksum.\n        * @param text the text\n        * @return the checksum\n        */    \n        internal static char GetChecksum(string text) {\n            int chk = 0;\n            for (int k = 0; k < text.Length; ++k) {\n                int idx = CHARS.IndexOf(text[k]);\n                if (idx < 0)\n                    throw new ArgumentException(\"The character '\" + text[k] + \"' is illegal in code 39.\");\n                chk += idx;\n            }\n            return CHARS[chk % 43];\n        }\n        \n        /** Gets the maximum area that the barcode and the text, if\n        * any, will occupy. The lower left corner is always (0, 0).\n        * @return the size the barcode occupies.\n        */    \n        public override Rectangle BarcodeSize {\n            get {\n                float fontX = 0;\n                float fontY = 0;\n                if (font != null) {\n                    if (baseline > 0)\n                        fontY = baseline - font.GetFontDescriptor(BaseFont.DESCENT, size);\n                    else\n                        fontY = -baseline + size;\n                    string fullCode = code;\n                    if (generateChecksum && checksumText)\n                        fullCode += GetChecksum(fullCode);\n                    if (startStopText)\n                        fullCode = \"*\" + fullCode + \"*\";\n                    fontX = font.GetWidthPoint(altText != null ? altText : fullCode, size);\n                }            \n                string fCode = code;\n                if (extended)\n                    fCode = GetCode39Ex(code);\n", "answers": ["                int len = fCode.Length + 2;"], "length": 1163, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "5c41dbe75be69a522492a261348f685fcc83189eb876ce02"}
{"input": "", "context": "package edu.stanford.nlp.util;\nimport java.io.PrintStream;\nimport java.lang.reflect.Type;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.Map.Entry;\npublic class PropertiesUtils {\n  private PropertiesUtils() {}\n  /**\n   * Returns true iff the given Properties contains a property with the given\n   * key (name), and its value is not \"false\" or \"no\" or \"off\".\n   *\n   * @param props Properties object\n   * @param key The key to test\n   * @return true iff the given Properties contains a property with the given\n   * key (name), and its value is not \"false\" or \"no\" or \"off\".\n   */\n  public static boolean hasProperty(Properties props, String key) {\n    String value = props.getProperty(key);\n    if (value == null) {\n      return false;\n    }\n    value = value.toLowerCase();\n    return ! (value.equals(\"false\") || value.equals(\"no\") || value.equals(\"off\"));\n  }\n  // printing -------------------------------------------------------------------\n  public static void printProperties(String message, Properties properties,\n                                     PrintStream stream) {\n    if (message != null) {\n      stream.println(message);\n    }\n    if (properties.isEmpty()) {\n      stream.println(\"  [empty]\");\n    } else {\n      List<Map.Entry<String, String>> entries = getSortedEntries(properties);\n      for (Map.Entry<String, String> entry : entries) {\n        if ( ! \"\".equals(entry.getKey())) {\n          stream.format(\"  %-30s = %s%n\", entry.getKey(), entry.getValue());\n        }\n      }\n    }\n    stream.println();\n  }\n  public static void printProperties(String message, Properties properties) {\n    printProperties(message, properties, System.out);\n  }\n  \n  /**\n   * Tired of Properties not behaving like Map<String,String>s?  This method will solve that problem for you.\n   */\n  public static Map<String, String> asMap(Properties properties) {\n    Map<String, String> map = Generics.newHashMap();\n    for (Entry<Object, Object> entry : properties.entrySet()) {\n      map.put((String)entry.getKey(), (String)entry.getValue());\n    }\n    return map;\n  }\n  \n  public static List<Map.Entry<String, String>> getSortedEntries(Properties properties) {\n    return Maps.sortedEntries(asMap(properties));\n  }\n  /**\n   * Checks to make sure that all properties specified in <code>properties</code>\n   * are known to the program by checking that each simply overrides\n   * a default value\n   * @param properties Current properties\n   * @param defaults Default properties which lists all known keys\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static void checkProperties(Properties properties, Properties defaults) {\n    Set<String> names = Generics.newHashSet();\n    for (Enumeration<String> e = (Enumeration<String>) properties.propertyNames();\n         e.hasMoreElements(); ) {\n      names.add(e.nextElement());\n    }\n    for (Enumeration<String> e = (Enumeration<String>) defaults.propertyNames();\n         e.hasMoreElements(); ) {\n      names.remove(e.nextElement());\n    }\n    if (!names.isEmpty()) {\n      if (names.size() == 1) {\n        throw new IllegalArgumentException(\"Unknown property: \" + names.iterator().next());\n      } else {\n        throw new IllegalArgumentException(\"Unknown properties: \" + names);\n      }\n    }\n  }\n  /**\n   * Get the value of a property and automatically cast it to a specific type.\n   * This differs from the original Properties.getProperty() method in that you\n   * need to specify the desired type (e.g. Double.class) and the default value\n   * is an object of that type, i.e. a double 0.0 instead of the String \"0.0\".\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <E> E get(Properties props, String key, E defaultValue, Type type) {\n    String value = props.getProperty(key);\n    if (value == null) {\n      return defaultValue;\n    } else {\n      return (E) MetaClass.cast(value, type);\n    }\n  }\n  \n  /**\n   * Load an integer property.  If the key is not present, returns 0.\n   */\n  public static int getInt(Properties props, String key) {\n    return getInt(props, key, 0);\n  }\n  \n  /**\n   * Load an integer property.  If the key is not present, returns defaultValue.\n   */\n  public static int getInt(Properties props, String key, int defaultValue) {\n    String value = props.getProperty(key);\n    if (value != null) {\n      return Integer.parseInt(value);\n    } else {\n      return defaultValue;\n    }\n  }\n    \n  /**\n   * Load an integer property as a long.  \n   * If the key is not present, returns defaultValue.\n   */\n  public static long getLong(Properties props, String key, long defaultValue) {\n    String value = props.getProperty(key);\n    if (value != null) {\n      return Long.parseLong(value);\n    } else {\n      return defaultValue;\n    }\n  }\n  /**\n   * Load a double property.  If the key is not present, returns 0.0.\n   */\n  public static double getDouble(Properties props, String key) {\n    return getDouble(props, key, 0.0);\n  }\n  \n  /**\n   * Load a double property.  If the key is not present, returns defaultValue.\n   */\n  public static double getDouble(Properties props, String key, double defaultValue) {\n    String value = props.getProperty(key);\n    if (value != null) {\n      return Double.parseDouble(value);\n    } else {\n      return defaultValue;\n    }\n  }\n \n  /**\n   * Load a boolean property.  If the key is not present, returns false.\n   */\n  public static boolean getBool(Properties props, String key) {\n    return getBool(props, key, false);\n  }  \n  \n  /**\n   * Load a boolean property.  If the key is not present, returns defaultValue.\n   */\n  public static boolean getBool(Properties props, String key, \n                                boolean defaultValue) {\n    String value = props.getProperty(key);\n    if (value != null) {\n      return Boolean.parseBoolean(value);\n    } else {\n      return defaultValue;\n    }\n  }  \n  \n  /**\n   * Loads a comma-separated list of integers from Properties.  The list cannot include any whitespace.\n   */\n  public static int[] getIntArray(Properties props, String key) {\n    Integer[] result = MetaClass.cast(props.getProperty(key), Integer [].class);\n    return ArrayUtils.toPrimitive(result);\n  }\n  /**\n   * Loads a comma-separated list of doubles from Properties.  The list cannot include any whitespace.\n   */\n  public static double[] getDoubleArray(Properties props, String key) {\n    Double[] result = MetaClass.cast(props.getProperty(key), Double [].class);\n    return ArrayUtils.toPrimitive(result);\n  }\n  \n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1\") should return the same thing as\n   *    new String[] { \"value1\", \"value2\", \"a quoted value\", \"another quoted value\" };\n   */\n  public static String[] getStringArray(Properties props, String key) {\n    String[] results = MetaClass.cast(props.getProperty(key), String [].class);\n", "answers": ["    if (results == null) {"], "length": 840, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "cdd96b1a6cdd32b52402ed8afa5c640bc81a206da183fee0"}
{"input": "", "context": "# Copyright Iris contributors\n#\n# This file is part of Iris and is released under the LGPL license.\n# See COPYING and COPYING.LESSER in the root of the repository for full\n# licensing details.\n\"\"\"Integration tests for :mod:`iris.analysis.trajectory`.\"\"\"\n# import iris tests first so that some things can be initialised before\n# importing anything else\nimport iris.tests as tests  # isort:skip\nimport numpy as np\nimport iris\nfrom iris._lazy_data import as_lazy_data\nfrom iris.analysis.trajectory import Trajectory\nfrom iris.analysis.trajectory import interpolate as traj_interpolate\nimport iris.tests.stock as istk\n@tests.skip_data\nclass TestColpex(tests.IrisTest):\n    def setUp(self):\n        # Load the COLPEX data => TZYX\n        path = tests.get_data_path(\n            [\"PP\", \"COLPEX\", \"theta_and_orog_subset.pp\"]\n        )\n        cube = iris.load_cube(path, \"air_potential_temperature\")\n        cube.coord(\"grid_latitude\").bounds = None\n        cube.coord(\"grid_longitude\").bounds = None\n        # TODO: Workaround until regrid can handle factories\n        cube.remove_aux_factory(cube.aux_factories[0])\n        cube.remove_coord(\"surface_altitude\")\n        self.cube = cube\n    def test_trajectory_extraction(self):\n        # Pull out a single point - no interpolation required\n        single_point = traj_interpolate(\n            self.cube,\n            [(\"grid_latitude\", [-0.1188]), (\"grid_longitude\", [359.57958984])],\n        )\n        expected = self.cube[..., 10, 0].data\n        self.assertArrayAllClose(\n            single_point[..., 0].data, expected, rtol=2.0e-7\n        )\n        self.assertCML(\n            single_point, (\"trajectory\", \"single_point.cml\"), checksum=False\n        )\n    def test_trajectory_extraction_calc(self):\n        # Pull out another point and test against a manually calculated result.\n        single_point = [\n            [\"grid_latitude\", [-0.1188]],\n            [\"grid_longitude\", [359.584090412]],\n        ]\n        scube = self.cube[0, 0, 10:11, 4:6]\n        x0 = scube.coord(\"grid_longitude\")[0].points\n        x1 = scube.coord(\"grid_longitude\")[1].points\n        y0 = scube.data[0, 0]\n        y1 = scube.data[0, 1]\n        expected = y0 + ((y1 - y0) * ((359.584090412 - x0) / (x1 - x0)))\n        trajectory_cube = traj_interpolate(scube, single_point)\n        self.assertArrayAllClose(trajectory_cube.data, expected, rtol=2.0e-7)\n    def _traj_to_sample_points(self, trajectory):\n        sample_points = []\n        src_points = trajectory.sampled_points\n        for name in src_points[0].keys():\n            values = [point[name] for point in src_points]\n            sample_points.append((name, values))\n        return sample_points\n    def test_trajectory_extraction_axis_aligned(self):\n        # Extract a simple, axis-aligned trajectory that is similar to an\n        # indexing operation.\n        # (It's not exactly the same because the source cube doesn't have\n        # regular spacing.)\n        waypoints = [\n            {\"grid_latitude\": -0.1188, \"grid_longitude\": 359.57958984},\n            {\"grid_latitude\": -0.1188, \"grid_longitude\": 359.66870117},\n        ]\n        trajectory = Trajectory(waypoints, sample_count=100)\n        sample_points = self._traj_to_sample_points(trajectory)\n        trajectory_cube = traj_interpolate(self.cube, sample_points)\n        self.assertCML(\n            trajectory_cube, (\"trajectory\", \"constant_latitude.cml\")\n        )\n    def test_trajectory_extraction_zigzag(self):\n        # Extract a zig-zag trajectory\n        waypoints = [\n            {\"grid_latitude\": -0.1188, \"grid_longitude\": 359.5886},\n            {\"grid_latitude\": -0.0828, \"grid_longitude\": 359.6606},\n            {\"grid_latitude\": -0.0468, \"grid_longitude\": 359.6246},\n        ]\n        trajectory = Trajectory(waypoints, sample_count=20)\n        sample_points = self._traj_to_sample_points(trajectory)\n        trajectory_cube = traj_interpolate(self.cube[0, 0], sample_points)\n        expected = np.array(\n            [\n                287.95953369,\n                287.9190979,\n                287.95550537,\n                287.93240356,\n                287.83850098,\n                287.87869263,\n                287.90942383,\n                287.9463501,\n                287.74365234,\n                287.68856812,\n                287.75588989,\n                287.54611206,\n                287.48522949,\n                287.53356934,\n                287.60217285,\n                287.43795776,\n                287.59701538,\n                287.52468872,\n                287.45025635,\n                287.52716064,\n            ],\n            dtype=np.float32,\n        )\n        self.assertCML(\n            trajectory_cube, (\"trajectory\", \"zigzag.cml\"), checksum=False\n        )\n        self.assertArrayAllClose(trajectory_cube.data, expected, rtol=2.0e-7)\n    def test_colpex__nearest(self):\n        # Check a smallish nearest-neighbour interpolation against a result\n        # snapshot.\n        test_cube = self.cube[0][0]\n        # Test points on a regular grid, a bit larger than the source region.\n        xmin, xmax = [\n            fn(test_cube.coord(axis=\"x\").points) for fn in (np.min, np.max)\n        ]\n        ymin, ymax = [\n            fn(test_cube.coord(axis=\"x\").points) for fn in (np.min, np.max)\n        ]\n        fractions = [-0.23, -0.01, 0.27, 0.624, 0.983, 1.052, 1.43]\n        x_points = [xmin + frac * (xmax - xmin) for frac in fractions]\n        y_points = [ymin + frac * (ymax - ymin) for frac in fractions]\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            (\"grid_longitude\", x_points.flatten()),\n            (\"grid_latitude\", y_points.flatten()),\n        ]\n        result = traj_interpolate(test_cube, sample_points, method=\"nearest\")\n        expected = [\n            288.07168579,\n            288.07168579,\n            287.9367981,\n            287.82736206,\n            287.78564453,\n            287.8374939,\n            287.8374939,\n            288.07168579,\n            288.07168579,\n            287.9367981,\n            287.82736206,\n            287.78564453,\n            287.8374939,\n            287.8374939,\n            288.07168579,\n            288.07168579,\n            287.9367981,\n            287.82736206,\n            287.78564453,\n            287.8374939,\n            287.8374939,\n            288.07168579,\n            288.07168579,\n            287.9367981,\n            287.82736206,\n            287.78564453,\n            287.8374939,\n            287.8374939,\n            288.07168579,\n            288.07168579,\n            287.9367981,\n            287.82736206,\n            287.78564453,\n            287.8374939,\n            287.8374939,\n            288.07168579,\n            288.07168579,\n            287.9367981,\n            287.82736206,\n            287.78564453,\n            287.8374939,\n            287.8374939,\n            288.07168579,\n            288.07168579,\n            287.9367981,\n            287.82736206,\n            287.78564453,\n            287.8374939,\n            287.8374939,\n        ]\n        self.assertArrayAllClose(result.data, expected)\n@tests.skip_data\nclass TestTriPolar(tests.IrisTest):\n    def setUp(self):\n        # load data\n        cubes = iris.load(\n            tests.get_data_path([\"NetCDF\", \"ORCA2\", \"votemper.nc\"])\n        )\n        cube = cubes[0]\n        # The netCDF file has different data types for the points and\n        # bounds of 'depth'. This wasn't previously supported, so we\n        # emulate that old behaviour.\n        b32 = cube.coord(\"depth\").bounds.astype(np.float32)\n        cube.coord(\"depth\").bounds = b32\n        self.cube = cube\n        # define a latitude trajectory (put coords in a different order\n        # to the cube, just to be awkward)\n        latitudes = list(range(-90, 90, 2))\n        longitudes = [-90] * len(latitudes)\n        self.sample_points = [\n            (\"longitude\", longitudes),\n            (\"latitude\", latitudes),\n        ]\n    def test_tri_polar(self):\n        # extract\n        sampled_cube = traj_interpolate(self.cube, self.sample_points)\n        self.assertCML(\n            sampled_cube, (\"trajectory\", \"tri_polar_latitude_slice.cml\")\n        )\n    def test_tri_polar_method_linear_fails(self):\n        # Try to request linear interpolation.\n        # Not allowed, as we have multi-dimensional coords.\n        self.assertRaises(\n            iris.exceptions.CoordinateMultiDimError,\n            traj_interpolate,\n            self.cube,\n            self.sample_points,\n            method=\"linear\",\n        )\n    def test_tri_polar_method_unknown_fails(self):\n        # Try to request unknown interpolation.\n        self.assertRaises(\n            ValueError,\n            traj_interpolate,\n            self.cube,\n            self.sample_points,\n            method=\"linekar\",\n        )\n    def test_tri_polar__nearest(self):\n        # Check a smallish nearest-neighbour interpolation against a result\n        # snapshot.\n        test_cube = self.cube\n        # Use just one 2d layer, just to be faster.\n        test_cube = test_cube[0][0]\n        # Fix the fill value of the data to zero, just so that we get the same\n        # result under numpy < 1.11 as with 1.11.\n        # NOTE: numpy<1.11 *used* to assign missing data points into an\n        # unmasked array as =0.0, now =fill-value.\n        # TODO: arguably, we should support masked data properly in the\n        # interpolation routine.  In the legacy code, that is unfortunately\n        # just not the case.\n        test_cube.data.fill_value = 0\n        # Test points on a regular global grid, with unrelated steps + offsets\n        # and an extended range of longitude values.\n        x_points = np.arange(-185.23, +360.0, 73.123)\n", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "length": 819, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "f199ac4b782288ef2a374c11cfb7bee86753f53493876247"}
{"input": "", "context": "//    CANAPE Network Testing Tool\n//    Copyright (C) 2014 Context Information Security\n//\n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, either version 3 of the License, or\n//    (at your option) any later version.\n//\n//    This program is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    You should have received a copy of the GNU General Public License\n//    along with this program.  If not, see <http://www.gnu.org/licenses/>.\nusing System;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\nusing System.Threading;\nusing System.Windows.Forms;\nusing CANAPE.Controls;\nusing CANAPE.Nodes;\nusing CANAPE.Utils;\nnamespace CANAPE.Forms\n{\n    internal partial class PacketLogViewerForm : Form\n    {\n        int _index;\n        IList<LogPacket> _packets;\n        PacketEntry[] _modifiedPackets;\n        bool _newStyleLogViewer;\n        private struct PacketEntry\n        {\n            public bool modified;\n            public LogPacket packet;\n        }\n        public bool ReadOnly { get; set; }\n        private bool IsFrameModified()\n        {\n            if (_packets.Count == 0)\n            {\n                return false;\n            }\n            return _modifiedPackets[_index].modified;\n        }\n        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)\n        {\n            bool ret = true;\n            switch(keyData)\n            {\n                case Keys.Control | Keys.N:\n                    toolStripButtonForward.PerformClick();\n                    break;\n                case Keys.Control | Keys.P:\n                    toolStripButtonBack.PerformClick();\n                    break;                    \n                case Keys.Control | Keys.S:\n                    if (_newStyleLogViewer && IsFrameModified())\n                    {\n                        toolStripButtonSave.PerformClick();\n                    }\n                    break;\n                default:\n                    ret = base.ProcessCmdKey(ref msg, keyData);\n                    break;\n            }\n            return ret;\n        }\n        public PacketLogViewerForm(LogPacket curr, IList<LogPacket> packets)\n        {\n            for (int i = 0; i < packets.Count; i++)\n            {\n                if (packets[i] == curr)\n                {\n                    _index = i;\n                    break;\n                }\n            }\n            \n            _packets = packets;\n            _modifiedPackets = new PacketEntry[_packets.Count];\n            _newStyleLogViewer = GlobalControlConfig.NewStyleLogViewer;\n            \n            InitializeComponent();\n            timer.Start();\n        }\n        private void SetModifiedFrame()\n        {\n            _modifiedPackets[_index].modified = false;\n            _modifiedPackets[_index].packet = _packets[_index].ClonePacket();\n            _modifiedPackets[_index].packet.Frame.FrameModified += new EventHandler(_currPacket_FrameModified);\n        }\n        private LogPacket GetCurrentPacket()\n        {\n            if (_packets.Count == 0)\n            {\n                return null;\n            }\n            if (_newStyleLogViewer)\n            {\n                if (_modifiedPackets[_index].packet == null)\n                {\n                    SetModifiedFrame();\n                }\n                return _modifiedPackets[_index].packet;\n            }\n            else\n            {\n                return _packets[_index];\n            }\n        }\n        private void OnFrameModified()\n        {\n            _modifiedPackets[_index].modified = true;\n            toolStripButtonSave.Enabled = true;\n            toolStripButtonRevert.Enabled = true;\n        }\n        void _currPacket_FrameModified(object sender, EventArgs e)\n        {\n            if (InvokeRequired)\n            {\n                Invoke(new Action(OnFrameModified));\n            }\n            else\n            {\n                OnFrameModified();\n            }\n        }\n        private void UpdatePacketDisplay()\n        {\n            LogPacket p = GetCurrentPacket();\n            if (p == null)\n            {\n                return;\n            }\n            if (!_newStyleLogViewer)\n            {\n                frameEditorControl.ReadOnly = ReadOnly;\n            }\n            frameEditorControl.SetFrame(p.Frame, null, ColorValueConverter.ToColor(p.Color));\n            if (p.Frame.IsBasic || (ReadOnly && !_newStyleLogViewer))\n            {\n                toolStripButtonConvertToBytes.Enabled = false;\n            }\n            else\n            {\n                toolStripButtonConvertToBytes.Enabled = true;\n            }\n            if (_newStyleLogViewer)\n            {\n                toolStripButtonSave.Enabled = IsFrameModified();\n                toolStripButtonRevert.Enabled = IsFrameModified();\n            }\n            toolStripLabelPosition.Text = String.Format(CANAPE.Properties.Resources.PacketLogViewerForm_Header, _index + 1, \n                _packets.Count, p.Tag, p.Network, p.Timestamp.ToString());\n        }\n        private void LogViewerForm_Load(object sender, EventArgs e)\n        {\n            if(_packets.Count == 0)\n            {\n                Close();\n            }\n            if (!_newStyleLogViewer)\n            {\n                Text = !ReadOnly ? CANAPE.Properties.Resources.PacketLogViewerForm_Title\n                        : CANAPE.Properties.Resources.PacketLogViewerForm_TitleReadOnly;\n                toolStripButtonSave.Visible = false;\n                toolStripButtonRevert.Visible = false;\n            }\n            else\n            {\n                Text = CANAPE.Properties.Resources.PacketLogViewerForm_Title;\n            }\n            UpdatePacketDisplay();\n        }\n        private void toolStripButtonBack_Click(object sender, EventArgs e)\n        {           \n            _index -= 1;\n            if (_index < 0)\n            {\n                _index = _packets.Count - 1;\n            }\n            UpdatePacketDisplay();\n        }\n        private void toolStripButtonForward_Click(object sender, EventArgs e)\n        {           \n            _index++;\n            if (_index > _packets.Count - 1)\n            {\n                _index = 0;\n            }\n            UpdatePacketDisplay();\n        }\n        private void toolStripButtonCopy_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n", "answers": ["            if (currPacket != null)"], "length": 518, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "6cbff4b2ab9cd811f4d0b2d6ed54a5ae26c2c9ed95c4d5cb"}
{"input": "", "context": "import cPickle\nimport wave\nimport gzip\nimport scipy\nimport scipy.io.wavfile\nfrom matplotlib import pylab\nimport scipy.io.wavfile\nimport os\nfrom numpy import *\nfrom pydub import AudioSegment\nfrom pyechonest import track, config\nimport numpy\nimport mfcc_diy\nclass Dataset:\n    \"\"\"Slices, shuffles and manages a small dataset for the HF optimizer.\"\"\"\n    def __init__(self, data, batch_size, number_batches=None, targets=None):\n        '''SequenceDataset __init__\n  data : list of lists of numpy arrays\n    Your dataset will be provided as a list (one list for each graph input) of\n    variable-length tensors that will be used as mini-batches. Typically, each\n    tensor is a sequence or a set of examples.\n  batch_size : int or None\n    If an int, the mini-batches will be further split in chunks of length\n    `batch_size`. This is useful for slicing subsequences or provide the full\n    dataset in a single tensor to be split here. All tensors in `data` must\n    then have the same leading dimension.\n  number_batches : int\n    Number of mini-batches over which you iterate to compute a gradient or\n    Gauss-Newton matrix product. If None, it will iterate over the entire dataset.\n  minimum_size : int\n    Reject all mini-batches that end up smaller than this length.'''\n        self.current_batch = 0\n        self.number_batches = number_batches\n        self.items = []\n        if targets is None:\n            if batch_size is None:\n                # self.items.append([data[i][i_sequence] for i in xrange(len(data))])\n                self.items = [[data[i]] for i in xrange(len(data))]\n            else:\n                # self.items = [sequence[i:i+batch_size] for sequence in data for i in xrange(0, len(sequence), batch_size)]\n                for sequence in data:\n                    num_batches = sequence.shape[0] / float(batch_size)\n                    num_batches = numpy.ceil(num_batches)\n                    for i in xrange(int(num_batches)):\n                        start = i * batch_size\n                        end = (i + 1) * batch_size\n                        if end > sequence.shape[0]:\n                            end = sequence.shape[0]\n                        self.items.append([sequence[start:end]])\n        else:\n            if batch_size is None:\n                self.items = [[data[i], targets[i]] for i in xrange(len(data))]\n            else:\n                for sequence, sequence_targets in zip(data, targets):\n                    num_batches = sequence.shape[0] / float(batch_size)\n                    num_batches = numpy.ceil(num_batches)\n                    for i in xrange(int(num_batches)):\n                        start = i * batch_size\n                        end = (i + 1) * batch_size\n                        if end > sequence.shape[0]:\n                            end = sequence.shape[0]\n                        self.items.append([sequence[start:end], sequence_targets[start:end]])\n        if not self.number_batches:\n            self.number_batches = len(self.items)\n        self.num_min_batches = len(self.items)\n        self.shuffle()\n    def shuffle(self):\n        numpy.random.shuffle(self.items)\n    def iterate(self, update=True):\n        for b in xrange(self.number_batches):\n            yield self.items[(self.current_batch + b) % len(self.items)]\n        if update: self.update()\n    def update(self):\n        if self.current_batch + self.number_batches >= len(self.items):\n            self.shuffle()\n            self.current_batch = 0\n        else:\n            self.current_batch += self.number_batches\ndef load_audio(song_dir):\n    file_format = song_dir.split('.')[1]\n    if 'wav' == file_format:\n        song = wave.open(song_dir, \"rb\")\n        params = song.getparams()\n        nchannels, samplewidth, framerate, nframes = params[:4]  # format info\n        song_data = song.readframes(nframes)\n        song.close()\n        wave_data = numpy.fromstring(song_data, dtype=numpy.short)\n        wave_data.shape = -1, 2\n        wave_data = wave_data.T\n    else:\n        raise NameError(\"now just support wav format audio files\")\n    return wave_data\ndef pickle_dataset(dataset, out_pkl='dataset.pkl'):\n    # pickle the file and for long time save\n    pkl_file = file(out_pkl, 'wb')\n    cPickle.dump(dataset, pkl_file, True)\n    pkl_file.close()\n    return 0\ndef build_song_set(songs_dir):\n    # save songs and singer lable to pickle file\n    songs_dataset = []\n    for parent, dirnames, filenames in os.walk(songs_dir):\n        for filename in filenames:\n            song_dir = os.path.join(parent, filename)\n            audio = load_audio(song_dir)\n            # change the value as your singer name level in the dir\n            # eg. short_wav/new_wav/dataset/singer_name so I set 3\n            singer = song_dir.split('/')[1]\n            # this value depends on the singer file level in the dir\n            songs_dataset.append((audio, singer))\n    pickle_dataset(songs_dataset, 'songs_audio_singer.pkl')\n    return 0\ndef load_data(pkl_dir='dataset.pkl'):\n    # load pickle data file\n    pkl_dataset = open(pkl_dir, 'rb')\n    dataset = cPickle.load(pkl_dataset)\n    pkl_dataset.close()\n    return dataset\ndef get_mono_left_right_audio(wavs_dir='mir1k-Wavfile'):\n    # split a audio to left and right channel\n    for parent, dirnames, filenames in os.walk(wavs_dir):\n        for filename in filenames:\n            audio_dir = os.path.join(parent, filename)\n            mono_sound_dir = 'mono/' + audio_dir\n            if not os.path.exists(os.path.split(mono_sound_dir)[0]):\n                os.makedirs(os.path.split(mono_sound_dir)[0])\n            left_audio_dir = 'left_right/' + os.path.splitext(mono_sound_dir)[0] + '_left.wav'\n            if not os.path.exists(os.path.split(left_audio_dir)[0]):\n                os.makedirs(os.path.split(left_audio_dir)[0])\n            right_audio_dir = 'left_right/' + os.path.splitext(mono_sound_dir)[0] + '_right.wav'\n            if not os.path.exists(os.path.split(right_audio_dir)[0]):\n                os.makedirs(os.path.split(right_audio_dir)[0])\n            sound = AudioSegment.from_wav(audio_dir)\n            mono = sound.set_channels(1)\n            left, right = sound.split_to_mono()\n            mono.export(mono_sound_dir, format='wav')\n            left.export(left_audio_dir, format='wav')\n            right.export(right_audio_dir, format='wav')\n    return 0\ndef get_right_voice_audio(wavs_dir='mir1k-Wavfile'):\n    # get singer voice from the right channel\n    for parent, dirnames, filenames in os.walk(wavs_dir):\n        for filename in filenames:\n            audio_dir = os.path.join(parent, filename)\n            right_audio_dir = 'right_voices/' + os.path.splitext(audio_dir)[0] + '_right.wav'\n            if not os.path.exists(os.path.split(right_audio_dir)[0]):\n                os.makedirs(os.path.split(right_audio_dir)[0])\n            sound = AudioSegment.from_wav(audio_dir)\n            left, right = sound.split_to_mono()\n            right.export(right_audio_dir, format='wav')\n    return 0\ndef draw_wav(wav_dir):\n    '''\n    draw the wav audio to show\n    '''\n    song = wave.open(wav_dir, \"rb\")\n    params = song.getparams()\n    nchannels, samplewidth, framerate, nframes = params[:4]  # format info\n    song_data = song.readframes(nframes)\n    song.close()\n    wave_data = numpy.fromstring(song_data, dtype=numpy.short)\n    wave_data.shape = -1, 1\n    wave_data = wave_data.T\n    time = numpy.arange(0, nframes) * (1.0 / framerate)\n    len_time = len(time)\n    time = time[0:len_time]\n    pylab.plot(time, wave_data[0])\n    pylab.xlabel(\"time\")\n    pylab.ylabel(\"wav_data\")\n    pylab.show()\n    return 0\ndef get_mfcc(wav_dir):\n    # mfccs\n    sample_rate, audio = scipy.io.wavfile.read(wav_dir)\n    # ceps, mspec, spec = mfcc(audio, nwin=256, fs=8000, nceps=13)\n    ceps, mspec, spec = mfcc_diy.mfcc(audio, nwin=8000, fs=8000, nceps=13)\n    mfccs = ceps\n    return mfccs\ndef get_raw(wav_dir):\n    # raw audio data\n    sample_rate, audio = scipy.io.wavfile.read(wav_dir)\n    return audio\ndef filter_nan_inf(mfccss):\n    # filter the nan and inf data point of mfcc\n    filter_nan_infs = []\n    for item in mfccss:\n        new_item = []\n        for ii in item:\n            if numpy.isinf(ii):\n                ii = 1000\n            elif numpy.isnan(ii):\n                ii = -11\n            else:\n                ii = ii\n            new_item.append(ii)\n        filter_nan_infs.append(new_item)\n    new_mfcc = numpy.array(filter_nan_infs)\n    return new_mfcc\ndef get_timbre_pitches_loudness(wav_dir):\n    # from echonest capture the timbre and pitches loudness et.al.\n    config.ECHO_NEST_API_KEY = \"BPQ7TEP9JXXDVIXA5\"  # daleloogn my api key\n    f = open(wav_dir)\n    print \"process:============ %s =============\" % wav_dir\n    t = track.track_from_file(f, 'wav', 256, force_upload=True)\n    t.get_analysis()\n    segments = t.segments  # list of dicts :timing,pitch,loudness and timbre for each segment\n    timbre_pitches_loudness = from_segments_get_timbre_pitch_etal(wav_dir, segments)\n    timbre_pitches_loudness_file_txt = open('timbre_pitches_loudness_file.txt', 'a')\n    timbre_pitches_loudness_file_txt.write(wav_dir + '\\r\\n')\n    timbre_pitches_loudness_file_txt.write(str(timbre_pitches_loudness))\n    timbre_pitches_loudness_file_txt.close()\n    return segments\ndef draw_segments_from_echonest(wav_dir, starts_point):\n    # just draw it and show the difference duration of segments\n    song = wave.open(wav_dir, \"rb\")\n    params = song.getparams()\n    nchannels, samplewidth, framerate, nframes = params[:4]  # format info\n    song_data = song.readframes(nframes)\n    song.close()\n    wave_data = numpy.fromstring(song_data, dtype=numpy.short)\n    wave_data.shape = -1, 1\n    wave_data = wave_data.T\n    time = numpy.arange(0, nframes) * (1.0 / framerate)\n    len_time = len(time)\n    time = time[0:len_time]\n    pylab.plot(time, wave_data[0])\n    num_len = len(starts_point)\n    pylab.plot(starts_point, [1] * num_len, 'ro')\n    pylab.xlabel(\"time\")\n    pylab.ylabel(\"wav_data\")\n    pylab.show()\n    return 0\ndef from_segments_get_timbre_pitch_etal(wav_dir, segments):\n    # from segments get the feature you want\n    timbre_pitches_loudness = []\n    starts_point = []\n    for segments_item in segments:\n        timbre = segments_item['timbre']\n        pitches = segments_item['pitches']\n        loudness_start = segments_item['loudness_start']\n        loudness_max_time = segments_item['loudness_max_time']\n        loudness_max = segments_item['loudness_max']\n        durarion = segments_item['duration']\n        start = segments_item['start']\n        starts_point.append(start)\n        segments_item_union = timbre + pitches + [loudness_start, loudness_max_time, loudness_max]\n        timbre_pitches_loudness.append(segments_item_union)\n        ##plot the segments seg\n    draw_segments_from_echonest(wav_dir, starts_point)\n    ####\n    return timbre_pitches_loudness\ndef generate_singer_label(wavs_dir):\n    # generate the singer to label dict\n    dict_singer_label = {}\n    singers = []\n    for parent, dirnames, filenames in os.walk(wavs_dir):\n        for filename in filenames:\n            singer_name = filename.split('_')[0]\n            singers.append(singer_name)\n    only_singers = sorted(list(set(singers)))\n    for item, singer in enumerate(only_singers):\n        dict_singer_label[singer] = item\n    # print dict_singer_label\n    return dict_singer_label\ndef build_dataset(wavs_dir):\n    print 'from %s build dataset==============' % wavs_dir\n    dataset = []\n    data = []\n    target = []\n    dict_singer_label = generate_singer_label(wavs_dir)\n    for parent, dirnames, filenames in os.walk(wavs_dir):\n        for filename in filenames:\n            song_dir = os.path.join(parent, filename)\n            print\"get mfcc of %s ====\" % filename\n            song_feature = get_mfcc(song_dir)\n            song_feature = filter_nan_inf(song_feature)  # feature=======================a song mfcc vector\n            singer = filename.split('_')[0]  # this value depends on the singer file level in the dir\n            singer_label = dict_singer_label[singer]  # target class====================\n            # song_mfcc_sum_vector = mfcc_sum_vector(song_feature)\n            #  feature=======================a song mfcc vector sum\n            songs_mfcc_vecto_link = []\n            for vector_item in song_feature:\n                vector_item = [x for x in vector_item]\n                # songs_mfcc_vecto_link.extend(vector_item)\n                # data.append(songs_mfcc_vecto_link)  # feature just a frame\n                data.append(vector_item)\n                target.append(singer_label)\n    dataset.append(data)\n    # print data[1:50]\n    dataset.append(target)\n    print 'pkl_to dataset.pkl'\n    pickle_dataset(dataset)\n    return 0\ndef slice_wav_beigin_one_end_one(wav_dir):\n    # it used for cut the wav file head and end\n    new_dir = 'sliced/' + wav_dir\n    if not os.path.exists(os.path.split(new_dir)[0]):\n        os.makedirs(os.path.split(new_dir)[0])\n    audio = AudioSegment.from_wav(wav_dir)\n    one_seconds = 1 * 1000\n    first_five_seconds = audio[one_seconds:-2000]\n    first_five_seconds.export(new_dir, format='wav')\n    return 0\ndef slice_wavs_dirs(dirs):\n    # in batach to slice\n    for parent, dirnames, filenames in os.walk(dirs):\n        for filename in filenames:\n            song_dir = os.path.join(parent, filename)\n            slice_wav_beigin_one_end_one(song_dir)\n    return 0\ndef save_echonest_data_to_txt(wav_dirs):\n    # cache the data from the internet\n    for parent, dirnames, filenames in os.walk(wav_dirs):\n        for filename in filenames:\n            song_dir = os.path.join(parent, filename)\n            if not os.path.exists('save_segments.txt'):\n                segments_file = open('save_segments.txt', 'w')\n                segments_file.close()\n            segments_file = open('save_segments.txt', 'r')\n            all_lines = segments_file.readlines()\n            segments_file.close()\n            dirs = []\n            for line_item in all_lines:\n                dir_song = line_item.split('@')[0]\n                dirs.append(dir_song)\n            if song_dir in dirs:\n                pass\n            else:\n                segments = get_timbre_pitches_loudness(song_dir)\n                lines = song_dir + '@' + str(segments) + '\\r\\n'\n                segments_file = open('save_segments.txt', 'a', )\n                segments_file.write(lines)\n                segments_file.close()\n    return 0\ndef print_color(color=\"red or yellow\"):\n    # consloe out color\n    if color == 'red':\n        print '\\033[1;31;40m'\n", "answers": ["    elif color == 'yellow':"], "length": 1319, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "6071885a8ddae41fc3b21de3b7edec8f485b65d210d0a2e3"}
{"input": "", "context": "///////////////////////////////////////////////////////////////////////////////////////\n// Copyright (C) 2006-2019 Esper Team. All rights reserved.                           /\n// http://esper.codehaus.org                                                          /\n// ---------------------------------------------------------------------------------- /\n// The software in this package is published under the terms of the GPL license       /\n// a copy of which has been included with this distribution in the license.txt file.  /\n///////////////////////////////////////////////////////////////////////////////////////\nusing System;\nusing System.Collections.Generic;\nnamespace com.espertech.esper.common.@internal.collection\n{\n    /// <summary> reference-counting set based on a HashMap implementation that stores keys and a reference counter for\n    /// each unique key value. Each time the same key is added, the reference counter increases.\n    /// Each time a key is removed, the reference counter decreases.\n    /// </summary>\n    public class RefCountedSet<TK>\n    {\n        private bool _hasNullEntry;\n        private int _nullEntry;\n        private readonly IDictionary<TK, int> _refSet;\n        private int _numValues;\n        /// <summary>\n        /// Constructor.\n        /// </summary>\n        public RefCountedSet()\n        {\n            _refSet = new Dictionary<TK, int>();\n        }\n        public RefCountedSet(\n            IDictionary<TK, int> refSet,\n            int numValues)\n        {\n            _refSet = refSet;\n            _numValues = numValues;\n        }\n        /// <summary>\n        /// Adds a key to the set, but the key is null.  It behaves the same, but has its own\n        /// variables that need to be incremented.\n        /// </summary>\n        private bool AddNull()\n        {\n            if (!_hasNullEntry) {\n                _hasNullEntry = true;\n                _numValues++;\n                _nullEntry = 0;\n                return true;\n            }\n            _numValues++;\n            _nullEntry++;\n            return false;\n        }\n        /// <summary> Add a key to the set. Add with a reference count of one if the key didn't exist in the set.\n        /// Increase the reference count by one if the key already exists.\n        /// Return true if this is the first time the key was encountered, or false if key is already in set.\n        /// </summary>\n        /// <param name=\"key\">to add\n        /// </param>\n        /// <returns> true if the key is not in the set already, false if the key is already in the set\n        /// </returns>\n        public virtual bool Add(TK key)\n        {\n            if (ReferenceEquals(key, null)) {\n                return AddNull();\n            }\n            int value;\n            if (!_refSet.TryGetValue(key, out value)) {\n                _refSet[key] = 1;\n                _numValues++;\n                return true;\n            }\n            value++;\n            _numValues++;\n            _refSet[key] = value;\n            return false;\n        }\n        /// <summary>\n        /// Removes the null key\n        /// </summary>\n        private bool RemoveNull()\n        {\n            if (_nullEntry == 1) {\n                _hasNullEntry = false;\n                _nullEntry--;\n                return true;\n            }\n            _nullEntry--;\n            _numValues--;\n            return false;\n        }\n        /// <summary>\n        /// Adds the specified key.\n        /// </summary>\n        /// <param name=\"key\">The key.</param>\n        /// <param name=\"numReferences\">The num references.</param>\n        public void Add(\n            TK key,\n            int numReferences)\n        {\n            int value;\n            if (!_refSet.TryGetValue(key, out value)) {\n                _refSet[key] = numReferences;\n                _numValues += numReferences;\n                return;\n            }\n            throw new ArgumentException(\"Value '\" + key + \"' already in collection\");\n        }\n        /// <summary> Removed a key to the set. Removes the key if the reference count is one.\n        /// Decreases the reference count by one if the reference count is more then one.\n        /// Return true if the reference count was one and the key thus removed, or false if key is stays in set.\n        /// </summary>\n        /// <param name=\"key\">to add\n        /// </param>\n        /// <returns> true if the key is removed, false if it stays in the set\n        /// </returns>\n        /// <throws>  IllegalStateException is a key is removed that wasn't added to the map </throws>\n        public virtual bool Remove(TK key)\n        {\n            if (ReferenceEquals(key, null)) {\n                return RemoveNull();\n            }\n            int value;\n            if (!_refSet.TryGetValue(key, out value)) {\n                return true; // ignore duplcate removals\n            }\n            if (value == 1) {\n                _refSet.Remove(key);\n                _numValues--;\n                return true;\n            }\n            value--;\n            _refSet[key] = value;\n            _numValues--;\n            return false;\n        }\n        /// <summary>\n        /// Remove a key from the set regardless of the number of references.\n        /// </summary>\n        /// <param name=\"key\">to add</param>\n        /// <returns>\n        /// true if the key is removed, false if the key was not found\n        /// </returns>\n        /// <throws>IllegalStateException if a key is removed that wasn't added to the map</throws>\n        public bool RemoveAll(TK key)\n        {\n            return _refSet.Remove(key);\n        }\n        /// <summary> Returns an iterator over the entry set.</summary>\n        /// <returns> entry set iterator\n        /// </returns>\n        public IEnumerator<KeyValuePair<TK, int>> GetEnumerator()\n        {\n            if (_hasNullEntry) {\n                yield return new KeyValuePair<TK, int>(default(TK), _nullEntry);\n            }\n            foreach (KeyValuePair<TK, int> value in _refSet) {\n                yield return value;\n            }\n        }\n        /// <summary>\n        /// Gets the keys.\n        /// </summary>\n        /// <value>The keys.</value>\n        public ICollection<TK> Keys {\n            get { return _refSet.Keys; }\n        }\n        /// <summary> Returns the number of values in the collection.</summary>\n        /// <returns> size\n        /// </returns>\n        public virtual int Count {\n            get { return _numValues; }\n        }\n        /// <summary>\n        /// Clear out the collection.\n        /// </summary>\n        public virtual void Clear()\n        {\n            _refSet.Clear();\n            _numValues = 0;\n        }\n        public IDictionary<TK, int> RefSet {\n            get { return _refSet; }\n        }\n        public int NumValues {\n            get { return _numValues; }\n", "answers": ["            set { _numValues = value; }"], "length": 743, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "90e9975c7f92d8ef21fcbe89fd1500b3a541124b7b4304fb"}
{"input": "", "context": "namespace Tripodmaps\n{\n    partial class DummySolutionExplorer\n    {\n        /// <summary>\n        /// Required designer variable.\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n        /// <summary>\n        /// Clean up any resources being used.\n        /// </summary>\n        /// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>\n        protected override void Dispose(bool disposing)\n        {\n            if (disposing && (components != null))\n            {\n                components.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n        #region Windows Form Designer generated code\n\t\t/// <summary>\n\t\t/// Required method for Designer support - do not modify\n\t\t/// the contents of this method with the code editor.\n\t\t/// </summary>\n\t\tprivate void InitializeComponent()\n\t\t{\n            this.components = new System.ComponentModel.Container();\n            System.Windows.Forms.TreeNode treeNode1 = new System.Windows.Forms.TreeNode(\"Solution \\'WinFormsUI\\' (2 projects)\");\n            System.Windows.Forms.TreeNode treeNode2 = new System.Windows.Forms.TreeNode(\"System\", 6, 6);\n            System.Windows.Forms.TreeNode treeNode3 = new System.Windows.Forms.TreeNode(\"System.Data\", 6, 6);\n            System.Windows.Forms.TreeNode treeNode4 = new System.Windows.Forms.TreeNode(\"System.Drawing\", 6, 6);\n            System.Windows.Forms.TreeNode treeNode5 = new System.Windows.Forms.TreeNode(\"System.Windows.Forms\", 6, 6);\n            System.Windows.Forms.TreeNode treeNode6 = new System.Windows.Forms.TreeNode(\"System.XML\", 6, 6);\n            System.Windows.Forms.TreeNode treeNode7 = new System.Windows.Forms.TreeNode(\"WeifenLuo.WinFormsUI.Docking\", 6, 6);\n            System.Windows.Forms.TreeNode treeNode8 = new System.Windows.Forms.TreeNode(\"References\", 4, 4, new System.Windows.Forms.TreeNode[] {\n            treeNode2,\n            treeNode3,\n            treeNode4,\n            treeNode5,\n            treeNode6,\n            treeNode7});\n            System.Windows.Forms.TreeNode treeNode9 = new System.Windows.Forms.TreeNode(\"BlankIcon.ico\", 5, 5);\n            System.Windows.Forms.TreeNode treeNode10 = new System.Windows.Forms.TreeNode(\"CSProject.ico\", 5, 5);\n            System.Windows.Forms.TreeNode treeNode11 = new System.Windows.Forms.TreeNode(\"OutputWindow.ico\", 5, 5);\n            System.Windows.Forms.TreeNode treeNode12 = new System.Windows.Forms.TreeNode(\"References.ico\", 5, 5);\n            System.Windows.Forms.TreeNode treeNode13 = new System.Windows.Forms.TreeNode(\"SolutionExplorer.ico\", 5, 5);\n            System.Windows.Forms.TreeNode treeNode14 = new System.Windows.Forms.TreeNode(\"TaskListWindow.ico\", 5, 5);\n            System.Windows.Forms.TreeNode treeNode15 = new System.Windows.Forms.TreeNode(\"ToolboxWindow.ico\", 5, 5);\n            System.Windows.Forms.TreeNode treeNode16 = new System.Windows.Forms.TreeNode(\"Images\", 2, 1, new System.Windows.Forms.TreeNode[] {\n            treeNode9,\n            treeNode10,\n            treeNode11,\n            treeNode12,\n            treeNode13,\n            treeNode14,\n            treeNode15});\n            System.Windows.Forms.TreeNode treeNode17 = new System.Windows.Forms.TreeNode(\"AboutDialog.cs\", 8, 8);\n            System.Windows.Forms.TreeNode treeNode18 = new System.Windows.Forms.TreeNode(\"App.ico\", 5, 5);\n            System.Windows.Forms.TreeNode treeNode19 = new System.Windows.Forms.TreeNode(\"AssemblyInfo.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode20 = new System.Windows.Forms.TreeNode(\"DummyOutputWindow.cs\", 8, 8);\n            System.Windows.Forms.TreeNode treeNode21 = new System.Windows.Forms.TreeNode(\"DummyPropertyWindow.cs\", 8, 8);\n            System.Windows.Forms.TreeNode treeNode22 = new System.Windows.Forms.TreeNode(\"DummySolutionExplorer.cs\", 8, 8);\n            System.Windows.Forms.TreeNode treeNode23 = new System.Windows.Forms.TreeNode(\"DummyTaskList.cs\", 8, 8);\n            System.Windows.Forms.TreeNode treeNode24 = new System.Windows.Forms.TreeNode(\"DummyToolbox.cs\", 8, 8);\n            System.Windows.Forms.TreeNode treeNode25 = new System.Windows.Forms.TreeNode(\"MianForm.cs\", 8, 8);\n            System.Windows.Forms.TreeNode treeNode26 = new System.Windows.Forms.TreeNode(\"Options.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode27 = new System.Windows.Forms.TreeNode(\"OptionsDialog.cs\", 8, 8);\n            System.Windows.Forms.TreeNode treeNode28 = new System.Windows.Forms.TreeNode(\"DockSample\", 3, 3, new System.Windows.Forms.TreeNode[] {\n            treeNode8,\n            treeNode16,\n            treeNode17,\n            treeNode18,\n            treeNode19,\n            treeNode20,\n            treeNode21,\n            treeNode22,\n            treeNode23,\n            treeNode24,\n            treeNode25,\n            treeNode26,\n            treeNode27});\n            System.Windows.Forms.TreeNode treeNode29 = new System.Windows.Forms.TreeNode(\"System\", 6, 6);\n            System.Windows.Forms.TreeNode treeNode30 = new System.Windows.Forms.TreeNode(\"System.Data\", 6, 6);\n            System.Windows.Forms.TreeNode treeNode31 = new System.Windows.Forms.TreeNode(\"System.Design\", 6, 6);\n            System.Windows.Forms.TreeNode treeNode32 = new System.Windows.Forms.TreeNode(\"System.Drawing\", 6, 6);\n            System.Windows.Forms.TreeNode treeNode33 = new System.Windows.Forms.TreeNode(\"System.Windows.Forms\", 6, 6);\n            System.Windows.Forms.TreeNode treeNode34 = new System.Windows.Forms.TreeNode(\"System.XML\", 6, 6);\n            System.Windows.Forms.TreeNode treeNode35 = new System.Windows.Forms.TreeNode(\"References\", 4, 4, new System.Windows.Forms.TreeNode[] {\n            treeNode29,\n            treeNode30,\n            treeNode31,\n            treeNode32,\n            treeNode33,\n            treeNode34});\n            System.Windows.Forms.TreeNode treeNode36 = new System.Windows.Forms.TreeNode(\"DockWindow.AutoHideNo.bmp\", 9, 9);\n            System.Windows.Forms.TreeNode treeNode37 = new System.Windows.Forms.TreeNode(\"DockWindow.AutoHideYes.bmp\", 9, 9);\n            System.Windows.Forms.TreeNode treeNode38 = new System.Windows.Forms.TreeNode(\"DockWindow.Close.bmp\", 9, 9);\n            System.Windows.Forms.TreeNode treeNode39 = new System.Windows.Forms.TreeNode(\"DocumentWindow.Close.bmp\", 9, 9);\n            System.Windows.Forms.TreeNode treeNode40 = new System.Windows.Forms.TreeNode(\"DocumentWindow.ScrollLeftDisabled.bmp\", 9, 9);\n            System.Windows.Forms.TreeNode treeNode41 = new System.Windows.Forms.TreeNode(\"DocumentWindow.ScrollLeftEnabled.bmp\", 9, 9);\n            System.Windows.Forms.TreeNode treeNode42 = new System.Windows.Forms.TreeNode(\"DocumentWindow.ScrollRightDisabled.bmp\", 9, 9);\n            System.Windows.Forms.TreeNode treeNode43 = new System.Windows.Forms.TreeNode(\"DocumentWindow.ScrollRightEnabled.bmp\", 9, 9);\n            System.Windows.Forms.TreeNode treeNode44 = new System.Windows.Forms.TreeNode(\"Resources\", 2, 1, new System.Windows.Forms.TreeNode[] {\n            treeNode36,\n            treeNode37,\n            treeNode38,\n            treeNode39,\n            treeNode40,\n            treeNode41,\n            treeNode42,\n            treeNode43});\n            System.Windows.Forms.TreeNode treeNode45 = new System.Windows.Forms.TreeNode(\"Enums.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode46 = new System.Windows.Forms.TreeNode(\"Gdi32.cs\", 7, 3);\n            System.Windows.Forms.TreeNode treeNode47 = new System.Windows.Forms.TreeNode(\"Structs.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode48 = new System.Windows.Forms.TreeNode(\"User32.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode49 = new System.Windows.Forms.TreeNode(\"Win32\", 2, 1, new System.Windows.Forms.TreeNode[] {\n            treeNode45,\n            treeNode46,\n            treeNode47,\n            treeNode48});\n            System.Windows.Forms.TreeNode treeNode50 = new System.Windows.Forms.TreeNode(\"AssemblyInfo.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode51 = new System.Windows.Forms.TreeNode(\"Content.cs\", 8, 8);\n            System.Windows.Forms.TreeNode treeNode52 = new System.Windows.Forms.TreeNode(\"CotentCollection.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode53 = new System.Windows.Forms.TreeNode(\"CotentWindowCollection.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode54 = new System.Windows.Forms.TreeNode(\"DockHelper.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode55 = new System.Windows.Forms.TreeNode(\"DragHandler.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode56 = new System.Windows.Forms.TreeNode(\"DragHandlerBase.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode57 = new System.Windows.Forms.TreeNode(\"FloatWindow.cs\", 8, 8);\n            System.Windows.Forms.TreeNode treeNode58 = new System.Windows.Forms.TreeNode(\"HiddenMdiChild.cs\", 8, 8);\n            System.Windows.Forms.TreeNode treeNode59 = new System.Windows.Forms.TreeNode(\"InertButton.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode60 = new System.Windows.Forms.TreeNode(\"Measures.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode61 = new System.Windows.Forms.TreeNode(\"NormalTabStripWindow.cs\", 8, 8);\n            System.Windows.Forms.TreeNode treeNode62 = new System.Windows.Forms.TreeNode(\"ResourceHelper.cs\", 7, 7);\n            System.Windows.Forms.TreeNode treeNode63 = new System.Windows.Forms.TreeNode(\"WeifenLuo.WinFormsUI.Docking\", 3, 3, new System.Windows.Forms.TreeNode[] {\n            treeNode35,\n            treeNode44,\n            treeNode49,\n            treeNode50,\n            treeNode51,\n            treeNode52,\n            treeNode53,\n            treeNode54,\n            treeNode55,\n            treeNode56,\n            treeNode57,\n            treeNode58,\n            treeNode59,\n            treeNode60,\n            treeNode61,\n            treeNode62});\n            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DummySolutionExplorer));\n            this.treeView1 = new System.Windows.Forms.TreeView();\n            this.imageList1 = new System.Windows.Forms.ImageList(this.components);\n            this.SuspendLayout();\n            // \n            // treeView1\n            // \n            this.treeView1.Dock = System.Windows.Forms.DockStyle.Fill;\n            this.treeView1.ImageIndex = 0;\n            this.treeView1.ImageList = this.imageList1;\n            this.treeView1.Indent = 19;\n            this.treeView1.Location = new System.Drawing.Point(0, 24);\n            this.treeView1.Name = \"treeView1\";\n            treeNode1.Name = \"\";\n            treeNode1.Text = \"Solution \\'WinFormsUI\\' (2 projects)\";\n            treeNode2.ImageIndex = 6;\n            treeNode2.Name = \"\";\n            treeNode2.SelectedImageIndex = 6;\n            treeNode2.Text = \"System\";\n            treeNode3.ImageIndex = 6;\n            treeNode3.Name = \"\";\n            treeNode3.SelectedImageIndex = 6;\n            treeNode3.Text = \"System.Data\";\n            treeNode4.ImageIndex = 6;\n            treeNode4.Name = \"\";\n            treeNode4.SelectedImageIndex = 6;\n            treeNode4.Text = \"System.Drawing\";\n            treeNode5.ImageIndex = 6;\n            treeNode5.Name = \"\";\n            treeNode5.SelectedImageIndex = 6;\n            treeNode5.Text = \"System.Windows.Forms\";\n            treeNode6.ImageIndex = 6;\n            treeNode6.Name = \"\";\n            treeNode6.SelectedImageIndex = 6;\n            treeNode6.Text = \"System.XML\";\n            treeNode7.ImageIndex = 6;\n            treeNode7.Name = \"\";\n            treeNode7.SelectedImageIndex = 6;\n            treeNode7.Text = \"WeifenLuo.WinFormsUI.Docking\";\n            treeNode8.ImageIndex = 4;\n            treeNode8.Name = \"\";\n            treeNode8.SelectedImageIndex = 4;\n            treeNode8.Text = \"References\";\n            treeNode9.ImageIndex = 5;\n            treeNode9.Name = \"\";\n            treeNode9.SelectedImageIndex = 5;\n            treeNode9.Text = \"BlankIcon.ico\";\n            treeNode10.ImageIndex = 5;\n            treeNode10.Name = \"\";\n            treeNode10.SelectedImageIndex = 5;\n            treeNode10.Text = \"CSProject.ico\";\n            treeNode11.ImageIndex = 5;\n            treeNode11.Name = \"\";\n            treeNode11.SelectedImageIndex = 5;\n            treeNode11.Text = \"OutputWindow.ico\";\n            treeNode12.ImageIndex = 5;\n            treeNode12.Name = \"\";\n            treeNode12.SelectedImageIndex = 5;\n            treeNode12.Text = \"References.ico\";\n            treeNode13.ImageIndex = 5;\n            treeNode13.Name = \"\";\n            treeNode13.SelectedImageIndex = 5;\n            treeNode13.Text = \"SolutionExplorer.ico\";\n            treeNode14.ImageIndex = 5;\n            treeNode14.Name = \"\";\n            treeNode14.SelectedImageIndex = 5;\n            treeNode14.Text = \"TaskListWindow.ico\";\n            treeNode15.ImageIndex = 5;\n            treeNode15.Name = \"\";\n            treeNode15.SelectedImageIndex = 5;\n            treeNode15.Text = \"ToolboxWindow.ico\";\n            treeNode16.ImageIndex = 2;\n            treeNode16.Name = \"\";\n            treeNode16.SelectedImageIndex = 1;\n            treeNode16.Text = \"Images\";\n            treeNode17.ImageIndex = 8;\n            treeNode17.Name = \"\";\n            treeNode17.SelectedImageIndex = 8;\n            treeNode17.Text = \"AboutDialog.cs\";\n            treeNode18.ImageIndex = 5;\n            treeNode18.Name = \"\";\n            treeNode18.SelectedImageIndex = 5;\n            treeNode18.Text = \"App.ico\";\n            treeNode19.ImageIndex = 7;\n            treeNode19.Name = \"\";\n            treeNode19.SelectedImageIndex = 7;\n            treeNode19.Text = \"AssemblyInfo.cs\";\n            treeNode20.ImageIndex = 8;\n            treeNode20.Name = \"\";\n            treeNode20.SelectedImageIndex = 8;\n            treeNode20.Text = \"DummyOutputWindow.cs\";\n            treeNode21.ImageIndex = 8;\n            treeNode21.Name = \"\";\n            treeNode21.SelectedImageIndex = 8;\n            treeNode21.Text = \"DummyPropertyWindow.cs\";\n            treeNode22.ImageIndex = 8;\n            treeNode22.Name = \"\";\n            treeNode22.SelectedImageIndex = 8;\n            treeNode22.Text = \"DummySolutionExplorer.cs\";\n            treeNode23.ImageIndex = 8;\n            treeNode23.Name = \"\";\n            treeNode23.SelectedImageIndex = 8;\n            treeNode23.Text = \"DummyTaskList.cs\";\n            treeNode24.ImageIndex = 8;\n            treeNode24.Name = \"\";\n            treeNode24.SelectedImageIndex = 8;\n            treeNode24.Text = \"DummyToolbox.cs\";\n            treeNode25.ImageIndex = 8;\n            treeNode25.Name = \"\";\n            treeNode25.SelectedImageIndex = 8;\n            treeNode25.Text = \"MianForm.cs\";\n            treeNode26.ImageIndex = 7;\n            treeNode26.Name = \"\";\n            treeNode26.SelectedImageIndex = 7;\n            treeNode26.Text = \"Options.cs\";\n            treeNode27.ImageIndex = 8;\n            treeNode27.Name = \"\";\n            treeNode27.SelectedImageIndex = 8;\n            treeNode27.Text = \"OptionsDialog.cs\";\n            treeNode28.ImageIndex = 3;\n            treeNode28.Name = \"\";\n            treeNode28.SelectedImageIndex = 3;\n            treeNode28.Text = \"DockSample\";\n            treeNode29.ImageIndex = 6;\n            treeNode29.Name = \"\";\n            treeNode29.SelectedImageIndex = 6;\n            treeNode29.Text = \"System\";\n            treeNode30.ImageIndex = 6;\n            treeNode30.Name = \"\";\n            treeNode30.SelectedImageIndex = 6;\n            treeNode30.Text = \"System.Data\";\n            treeNode31.ImageIndex = 6;\n            treeNode31.Name = \"\";\n            treeNode31.SelectedImageIndex = 6;\n            treeNode31.Text = \"System.Design\";\n            treeNode32.ImageIndex = 6;\n            treeNode32.Name = \"\";\n            treeNode32.SelectedImageIndex = 6;\n            treeNode32.Text = \"System.Drawing\";\n            treeNode33.ImageIndex = 6;\n            treeNode33.Name = \"\";\n            treeNode33.SelectedImageIndex = 6;\n            treeNode33.Text = \"System.Windows.Forms\";\n            treeNode34.ImageIndex = 6;\n            treeNode34.Name = \"\";\n            treeNode34.SelectedImageIndex = 6;\n            treeNode34.Text = \"System.XML\";\n            treeNode35.ImageIndex = 4;\n            treeNode35.Name = \"\";\n            treeNode35.SelectedImageIndex = 4;\n            treeNode35.Text = \"References\";\n            treeNode36.ImageIndex = 9;\n            treeNode36.Name = \"\";\n            treeNode36.SelectedImageIndex = 9;\n            treeNode36.Text = \"DockWindow.AutoHideNo.bmp\";\n            treeNode37.ImageIndex = 9;\n            treeNode37.Name = \"\";\n            treeNode37.SelectedImageIndex = 9;\n            treeNode37.Text = \"DockWindow.AutoHideYes.bmp\";\n            treeNode38.ImageIndex = 9;\n            treeNode38.Name = \"\";\n            treeNode38.SelectedImageIndex = 9;\n            treeNode38.Text = \"DockWindow.Close.bmp\";\n            treeNode39.ImageIndex = 9;\n            treeNode39.Name = \"\";\n            treeNode39.SelectedImageIndex = 9;\n            treeNode39.Text = \"DocumentWindow.Close.bmp\";\n            treeNode40.ImageIndex = 9;\n            treeNode40.Name = \"\";\n            treeNode40.SelectedImageIndex = 9;\n            treeNode40.Text = \"DocumentWindow.ScrollLeftDisabled.bmp\";\n            treeNode41.ImageIndex = 9;\n            treeNode41.Name = \"\";\n            treeNode41.SelectedImageIndex = 9;\n            treeNode41.Text = \"DocumentWindow.ScrollLeftEnabled.bmp\";\n            treeNode42.ImageIndex = 9;\n            treeNode42.Name = \"\";\n            treeNode42.SelectedImageIndex = 9;\n            treeNode42.Text = \"DocumentWindow.ScrollRightDisabled.bmp\";\n            treeNode43.ImageIndex = 9;\n            treeNode43.Name = \"\";\n            treeNode43.SelectedImageIndex = 9;\n            treeNode43.Text = \"DocumentWindow.ScrollRightEnabled.bmp\";\n            treeNode44.ImageIndex = 2;\n            treeNode44.Name = \"\";\n            treeNode44.SelectedImageIndex = 1;\n            treeNode44.Text = \"Resources\";\n            treeNode45.ImageIndex = 7;\n            treeNode45.Name = \"\";\n            treeNode45.SelectedImageIndex = 7;\n            treeNode45.Text = \"Enums.cs\";\n            treeNode46.ImageIndex = 7;\n            treeNode46.Name = \"\";\n            treeNode46.SelectedImageIndex = 3;\n            treeNode46.Text = \"Gdi32.cs\";\n            treeNode47.ImageIndex = 7;\n            treeNode47.Name = \"\";\n            treeNode47.SelectedImageIndex = 7;\n            treeNode47.Text = \"Structs.cs\";\n            treeNode48.ImageIndex = 7;\n            treeNode48.Name = \"\";\n            treeNode48.SelectedImageIndex = 7;\n            treeNode48.Text = \"User32.cs\";\n            treeNode49.ImageIndex = 2;\n            treeNode49.Name = \"\";\n            treeNode49.SelectedImageIndex = 1;\n            treeNode49.Text = \"Win32\";\n            treeNode50.ImageIndex = 7;\n            treeNode50.Name = \"\";\n            treeNode50.SelectedImageIndex = 7;\n            treeNode50.Text = \"AssemblyInfo.cs\";\n            treeNode51.ImageIndex = 8;\n            treeNode51.Name = \"\";\n            treeNode51.SelectedImageIndex = 8;\n            treeNode51.Text = \"Content.cs\";\n            treeNode52.ImageIndex = 7;\n            treeNode52.Name = \"\";\n            treeNode52.SelectedImageIndex = 7;\n            treeNode52.Text = \"CotentCollection.cs\";\n            treeNode53.ImageIndex = 7;\n            treeNode53.Name = \"\";\n            treeNode53.SelectedImageIndex = 7;\n            treeNode53.Text = \"CotentWindowCollection.cs\";\n            treeNode54.ImageIndex = 7;\n            treeNode54.Name = \"\";\n            treeNode54.SelectedImageIndex = 7;\n            treeNode54.Text = \"DockHelper.cs\";\n            treeNode55.ImageIndex = 7;\n            treeNode55.Name = \"\";\n            treeNode55.SelectedImageIndex = 7;\n            treeNode55.Text = \"DragHandler.cs\";\n            treeNode56.ImageIndex = 7;\n            treeNode56.Name = \"\";\n            treeNode56.SelectedImageIndex = 7;\n            treeNode56.Text = \"DragHandlerBase.cs\";\n            treeNode57.ImageIndex = 8;\n            treeNode57.Name = \"\";\n            treeNode57.SelectedImageIndex = 8;\n            treeNode57.Text = \"FloatWindow.cs\";\n            treeNode58.ImageIndex = 8;\n            treeNode58.Name = \"\";\n            treeNode58.SelectedImageIndex = 8;\n            treeNode58.Text = \"HiddenMdiChild.cs\";\n            treeNode59.ImageIndex = 7;\n            treeNode59.Name = \"\";\n            treeNode59.SelectedImageIndex = 7;\n            treeNode59.Text = \"InertButton.cs\";\n            treeNode60.ImageIndex = 7;\n            treeNode60.Name = \"\";\n            treeNode60.SelectedImageIndex = 7;\n            treeNode60.Text = \"Measures.cs\";\n            treeNode61.ImageIndex = 8;\n            treeNode61.Name = \"\";\n            treeNode61.SelectedImageIndex = 8;\n            treeNode61.Text = \"NormalTabStripWindow.cs\";\n            treeNode62.ImageIndex = 7;\n            treeNode62.Name = \"\";\n            treeNode62.SelectedImageIndex = 7;\n            treeNode62.Text = \"ResourceHelper.cs\";\n            treeNode63.ImageIndex = 3;\n            treeNode63.Name = \"\";\n            treeNode63.SelectedImageIndex = 3;\n            treeNode63.Text = \"WeifenLuo.WinFormsUI.Docking\";\n            this.treeView1.Nodes.AddRange(new System.Windows.Forms.TreeNode[] {\n            treeNode1,\n            treeNode28,\n            treeNode63});\n            this.treeView1.SelectedImageIndex = 0;\n            this.treeView1.Size = new System.Drawing.Size(245, 297);\n            this.treeView1.TabIndex = 0;\n            // \n            // imageList1\n            // \n            this.imageList1.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject(\"imageList1.ImageStream\")));\n            this.imageList1.TransparentColor = System.Drawing.Color.Transparent;\n            this.imageList1.Images.SetKeyName(0, \"\");\n            this.imageList1.Images.SetKeyName(1, \"\");\n            this.imageList1.Images.SetKeyName(2, \"\");\n            this.imageList1.Images.SetKeyName(3, \"\");\n            this.imageList1.Images.SetKeyName(4, \"\");\n            this.imageList1.Images.SetKeyName(5, \"\");\n            this.imageList1.Images.SetKeyName(6, \"\");\n            this.imageList1.Images.SetKeyName(7, \"\");\n            this.imageList1.Images.SetKeyName(8, \"\");\n            this.imageList1.Images.SetKeyName(9, \"\");\n            // \n            // DummySolutionExplorer\n            // \n", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "length": 1467, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "e51a6d98c9314e0d0e73c15da39e443dc71aa90ae24eefe6"}
{"input": "", "context": "\"\"\"Base class for platform implementations\n\"\"\"\nimport ctypes\nfrom OpenGL.platform import ctypesloader\nimport sys\nimport OpenGL as top_level_module\nfrom OpenGL import logs\nclass _CheckContext( object ):\n    def __init__( self, func, ccisvalid ):\n        self.func = func \n        self.ccisvalid = ccisvalid\n    def __setattr__( self, key, value ):\n        if key not in ('func','ccisvalid'):\n            return setattr( self.func, key, value )\n        else:\n            self.__dict__[key] = value \n    def __getattr__( self, key ):\n        if key != 'func':\n            return getattr(self.func, key )\n        raise AttributeError( key )\n    def __call__( self, *args, **named ):\n        if not self.ccisvalid():\n            from OpenGL import error\n            raise error.NoContext( self.func, args, named )\n        return self.func( *args, **named )\nclass BasePlatform( object ):\n    \"\"\"Base class for per-platform implementations\n    \n    Attributes of note:\n    \n        EXPORTED_NAMES -- set of names exported via the platform \n            module's namespace...\n    \n        GL, GLU, GLUT, GLE, OpenGL -- ctypes libraries\n    \n        DEFAULT_FUNCTION_TYPE -- used as the default function \n            type for functions unless overridden on a per-DLL\n            basis with a \"FunctionType\" member\n        \n        GLUT_GUARD_CALLBACKS -- if True, the GLUT wrappers \n            will provide guarding wrappers to prevent GLUT \n            errors with uninitialised GLUT.\n        \n        EXTENSIONS_USE_BASE_FUNCTIONS -- if True, uses regular\n            dll attribute-based lookup to retrieve extension \n            function pointers.\n    \"\"\"\n    \n    EXPORTED_NAMES = [\n        'GetCurrentContext','CurrentContextIsValid','safeGetError',\n        'createBaseFunction', 'createExtensionFunction', 'copyBaseFunction',\n        'GL','GLU','GLUT','GLE','OpenGL',\n        'getGLUTFontPointer',\n        'GLUT_GUARD_CALLBACKS',\n    ]\n    \n    DEFAULT_FUNCTION_TYPE = None\n    GLUT_GUARD_CALLBACKS = False\n    EXTENSIONS_USE_BASE_FUNCTIONS = False\n    \n    def install( self, namespace ):\n        \"\"\"Install this platform instance into the platform module\"\"\"\n        for name in self.EXPORTED_NAMES:\n            namespace[ name ] = getattr(self,name)\n        namespace['PLATFORM'] = self\n        return self\n    \n    def functionTypeFor( self, dll ):\n        \"\"\"Given a DLL, determine appropriate function type...\"\"\"\n        if hasattr( dll, 'FunctionType' ):\n            return dll.FunctionType\n        else:\n            return self.DEFAULT_FUNCTION_TYPE\n    \n    def errorChecking( self, func, dll ):\n        \"\"\"Add error checking to the function if appropriate\"\"\"\n        from OpenGL import error\n        if top_level_module.ERROR_CHECKING:\n            if dll not in (self.GLUT,):\n                #GLUT spec says error-checking is basically undefined...\n                # there *may* be GL errors on GLUT calls that e.g. render \n                # geometry, but that's all basically \"maybe\" stuff...\n                func.errcheck = error.glCheckError\n        return func\n    def wrapContextCheck( self, func, dll ):\n        \"\"\"Wrap function with context-checking if appropriate\"\"\"\n        if top_level_module.CONTEXT_CHECKING and dll is not self.GLUT:\n            return _CheckContext( func, self.CurrentContextIsValid )\n        return func \n    def wrapLogging( self, func ):\n        \"\"\"Wrap function with logging operations if appropriate\"\"\"\n        return logs.logOnFail( func, logs.getLog( 'OpenGL.errors' ))\n    \n    def finalArgType( self, typ ):\n        \"\"\"Retrieve a final type for arg-type\"\"\"\n        if typ == ctypes.POINTER( None ) and not getattr( typ, 'final',False):\n            from OpenGL.arrays import ArrayDatatype\n            return ArrayDatatype\n        else:\n            return typ\n    def constructFunction( \n        self,\n        functionName, dll, \n        resultType=ctypes.c_int, argTypes=(),\n        doc = None, argNames = (),\n        extension = None,\n        deprecated = False,\n    ):\n        \"\"\"Core operation to create a new base ctypes function\n        \n        raises AttributeError if can't find the procedure...\n        \"\"\"\n        if extension and not self.checkExtension( extension ):\n            raise AttributeError( \"\"\"Extension not available\"\"\" )\n        argTypes = [ self.finalArgType( t ) for t in argTypes ]\n        if extension and not self.EXTENSIONS_USE_BASE_FUNCTIONS:\n            # what about the VERSION values???\n            if self.checkExtension( extension ):\n                pointer = self.getExtensionProcedure( functionName )\n                if pointer:\n                    func = self.functionTypeFor( dll )(\n                        resultType,\n                        *argTypes\n                    )(\n                        pointer\n                    )\n                else:\n                    raise AttributeError( \"\"\"Extension %r available, but no pointer for function %r\"\"\"%(extension,functionName))\n            else:\n                raise AttributeError( \"\"\"No extension %r\"\"\"%(extension,))\n        else:\n            func = ctypesloader.buildFunction(\n                self.functionTypeFor( dll )(\n                    resultType,\n                    *argTypes\n                ),\n                functionName,\n                dll,\n            )\n        func.__doc__ = doc \n        func.argNames = list(argNames or ())\n        func.__name__ = functionName\n        func.DLL = dll\n        func.extension = extension\n        func.deprecated = deprecated\n        func = self.wrapLogging( \n            self.wrapContextCheck(\n                self.errorChecking( func, dll ),\n                dll,\n            )\n        )\n        return func\n    def createBaseFunction( \n        self,\n        functionName, dll, \n        resultType=ctypes.c_int, argTypes=(),\n        doc = None, argNames = (),\n        extension = None,\n        deprecated = False,\n    ):\n        \"\"\"Create a base function for given name\n        \n        Normally you can just use the dll.name hook to get the object,\n        but we want to be able to create different bindings for the \n        same function, so we do the work manually here to produce a\n        base function from a DLL.\n        \"\"\"\n        from OpenGL import wrapper\n        try:\n            if top_level_module.FORWARD_COMPATIBLE_ONLY and dll is self.GL:\n                if deprecated:\n                    return self.nullFunction(\n                        functionName, dll=dll,\n                        resultType=resultType, \n                        argTypes=argTypes,\n                        doc = doc, argNames = argNames,\n                        extension = extension,\n                        deprecated = deprecated,\n                    )\n            return self.constructFunction(\n                functionName, dll, \n                resultType=resultType, argTypes=argTypes,\n                doc = doc, argNames = argNames,\n                extension = extension,\n            )\n        except AttributeError, err:\n            return self.nullFunction( \n                functionName, dll=dll,\n                resultType=resultType, \n                argTypes=argTypes,\n                doc = doc, argNames = argNames,\n                extension = extension,\n            )\n    def checkExtension( self, name ):\n        \"\"\"Check whether the given extension is supported by current context\"\"\"\n        if not name:\n            return True\n        context = self.GetCurrentContext()\n        if context:\n            from OpenGL import contextdata\n            from OpenGL.raw.GL import GL_EXTENSIONS\n            set = contextdata.getValue( GL_EXTENSIONS, context=context )\n            if set is None:\n                set = {}\n                contextdata.setValue( \n                    GL_EXTENSIONS, set, context=context, weak=False \n                )\n            current = set.get( name )\n            if current is None:\n                from OpenGL import extensions\n                result = extensions.hasGLExtension( name )\n                set[name] = result \n                return result\n            return current\n        else:\n            return False\n    createExtensionFunction = createBaseFunction\n    def copyBaseFunction( self, original ):\n        \"\"\"Create a new base function based on an already-created function\n        \n        This is normally used to provide type-specific convenience versions of\n        a definition created by the automated generator.\n        \"\"\"\n        from OpenGL import wrapper, error\n        if isinstance( original, _NullFunctionPointer ):\n            return self.nullFunction(\n                original.__name__,\n                original.DLL,\n                resultType = original.restype,\n                argTypes= original.argtypes,\n                doc = original.__doc__,\n                argNames = original.argNames,\n                extension = original.extension,\n                deprecated = original.deprecated,\n            )\n", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "length": 831, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "e23602db74e35727f7f766eb0f92a05cdb9599280a144a07"}
{"input": "", "context": "/*\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage com.amaze.filemanager.filesystem.compressed.sevenz;\nimport android.annotation.TargetApi;\nimport java.io.ByteArrayOutputStream;\nimport java.io.Closeable;\nimport java.io.DataOutput;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.RandomAccessFile;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.channels.SeekableByteChannel;\nimport java.nio.file.Files;\nimport java.nio.file.StandardOpenOption;\nimport java.util.ArrayList;\nimport java.util.BitSet;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.LinkedList;\nimport java.util.Map;\nimport java.util.zip.CRC32;\nimport org.apache.commons.compress.archivers.ArchiveEntry;\nimport org.apache.commons.compress.utils.CountingOutputStream;\n/**\n * Writes a 7z file.\n * @since 1.6\n */\npublic class SevenZOutputFile implements Closeable {\n    private final RandomAccessFile channel;\n    private final List<SevenZArchiveEntry> files = new ArrayList<>();\n    private int numNonEmptyStreams = 0;\n    private final CRC32 crc32 = new CRC32();\n    private final CRC32 compressedCrc32 = new CRC32();\n    private long fileBytesWritten = 0;\n    private boolean finished = false;\n    private CountingOutputStream currentOutputStream;\n    private CountingOutputStream[] additionalCountingStreams;\n    private Iterable<? extends SevenZMethodConfiguration> contentMethods =\n            Collections.singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA2));\n    private final Map<SevenZArchiveEntry, long[]> additionalSizes = new HashMap<>();\n    /**\n     * Opens file to write a 7z archive to.\n     *\n     * @param filename the file to write to\n     * @throws IOException if opening the file fails\n     */\n    public SevenZOutputFile(final File filename) throws IOException {\n        this(new RandomAccessFile(filename, \"\"));\n    }\n    /**\n     * Prepares channel to write a 7z archive to.\n     *\n     * <p>{@link\n     * org.apache.commons.compress.utils.SeekableInMemoryByteChannel}\n     * allows you to write to an in-memory archive.</p>\n     *\n     * @param channel the channel to write to\n     * @throws IOException if the channel cannot be positioned properly\n     * @since 1.13\n     */\n    public SevenZOutputFile(final RandomAccessFile channel) throws IOException {\n        this.channel = channel;\n        channel.seek(SevenZFile.SIGNATURE_HEADER_SIZE);\n    }\n    /**\n     * Sets the default compression method to use for entry contents - the\n     * default is LZMA2.\n     *\n     * <p>Currently only {@link SevenZMethod#COPY}, {@link\n     * SevenZMethod#LZMA2}, {@link SevenZMethod#BZIP2} and {@link\n     * SevenZMethod#DEFLATE} are supported.</p>\n     *\n     * <p>This is a short form for passing a single-element iterable\n     * to {@link #setContentMethods}.</p>\n     * @param method the default compression method\n     */\n    public void setContentCompression(final SevenZMethod method) {\n        setContentMethods(Collections.singletonList(new SevenZMethodConfiguration(method)));\n    }\n    /**\n     * Sets the default (compression) methods to use for entry contents - the\n     * default is LZMA2.\n     *\n     * <p>Currently only {@link SevenZMethod#COPY}, {@link\n     * SevenZMethod#LZMA2}, {@link SevenZMethod#BZIP2} and {@link\n     * SevenZMethod#DEFLATE} are supported.</p>\n     *\n     * <p>The methods will be consulted in iteration order to create\n     * the final output.</p>\n     *\n     * @since 1.8\n     * @param methods the default (compression) methods\n     */\n    public void setContentMethods(final Iterable<? extends SevenZMethodConfiguration> methods) {\n        this.contentMethods = reverse(methods);\n    }\n    /**\n     * Closes the archive, calling {@link #finish} if necessary.\n     *\n     * @throws IOException on error\n     */\n    @Override\n    public void close() throws IOException {\n        try {\n            if (!finished) {\n                finish();\n            }\n        } finally {\n            channel.close();\n        }\n    }\n    /**\n     * Create an archive entry using the inputFile and entryName provided.\n     *\n     * @param inputFile file to create an entry from\n     * @param entryName the name to use\n     * @return the ArchiveEntry set up with details from the file\n     *\n     * @throws IOException on error\n     */\n    public SevenZArchiveEntry createArchiveEntry(final File inputFile,\n            final String entryName) throws IOException {\n        final SevenZArchiveEntry entry = new SevenZArchiveEntry();\n        entry.setDirectory(inputFile.isDirectory());\n        entry.setName(entryName);\n        entry.setLastModifiedDate(new Date(inputFile.lastModified()));\n        return entry;\n    }\n    /**\n     * Records an archive entry to add.\n     *\n     * The caller must then write the content to the archive and call\n     * {@link #closeArchiveEntry()} to complete the process.\n     *\n     * @param archiveEntry describes the entry\n     * @throws IOException on error\n     */\n    public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException {\n        final SevenZArchiveEntry entry = (SevenZArchiveEntry) archiveEntry;\n        files.add(entry);\n    }\n    /**\n     * Closes the archive entry.\n     * @throws IOException on error\n     */\n    public void closeArchiveEntry() throws IOException {\n        if (currentOutputStream != null) {\n            currentOutputStream.flush();\n            currentOutputStream.close();\n        }\n        final SevenZArchiveEntry entry = files.get(files.size() - 1);\n        if (fileBytesWritten > 0) { // this implies currentOutputStream != null\n            entry.setHasStream(true);\n            ++numNonEmptyStreams;\n            entry.setSize(currentOutputStream.getBytesWritten()); //NOSONAR\n            entry.setCompressedSize(fileBytesWritten);\n            entry.setCrcValue(crc32.getValue());\n            entry.setCompressedCrcValue(compressedCrc32.getValue());\n            entry.setHasCrc(true);\n            if (additionalCountingStreams != null) {\n                final long[] sizes = new long[additionalCountingStreams.length];\n                for (int i = 0; i < additionalCountingStreams.length; i++) {\n                    sizes[i] = additionalCountingStreams[i].getBytesWritten();\n                }\n                additionalSizes.put(entry, sizes);\n            }\n        } else {\n            entry.setHasStream(false);\n            entry.setSize(0);\n            entry.setCompressedSize(0);\n            entry.setHasCrc(false);\n        }\n        currentOutputStream = null;\n        additionalCountingStreams = null;\n        crc32.reset();\n        compressedCrc32.reset();\n        fileBytesWritten = 0;\n    }\n    /**\n     * Writes a byte to the current archive entry.\n     * @param b The byte to be written.\n     * @throws IOException on error\n     */\n    public void write(final int b) throws IOException {\n        getCurrentOutputStream().write(b);\n    }\n    /**\n     * Writes a byte array to the current archive entry.\n     * @param b The byte array to be written.\n     * @throws IOException on error\n     */\n    public void write(final byte[] b) throws IOException {\n        write(b, 0, b.length);\n    }\n    /**\n     * Writes part of a byte array to the current archive entry.\n     * @param b The byte array to be written.\n     * @param off offset into the array to start writing from\n     * @param len number of bytes to write\n     * @throws IOException on error\n     */\n    public void write(final byte[] b, final int off, final int len) throws IOException {\n        if (len > 0) {\n            getCurrentOutputStream().write(b, off, len);\n        }\n    }\n    /**\n     * Finishes the addition of entries to this archive, without closing it.\n     *\n     * @throws IOException if archive is already closed.\n     */\n    public void finish() throws IOException {\n        if (finished) {\n            throw new IOException(\"This archive has already been finished\");\n        }\n        finished = true;\n        final long headerPosition = channel.getFilePointer();\n        final ByteArrayOutputStream headerBaos = new ByteArrayOutputStream();\n        final DataOutputStream header = new DataOutputStream(headerBaos);\n        writeHeader(header);\n        header.flush();\n        final byte[] headerBytes = headerBaos.toByteArray();\n        channel.write(headerBytes);\n        final CRC32 crc32 = new CRC32();\n        crc32.update(headerBytes);\n        ByteBuffer bb = ByteBuffer.allocate(SevenZFile.sevenZSignature.length\n                                            + 2 /* version */\n                                            + 4 /* start header CRC */\n                                            + 8 /* next header position */\n                                            + 8 /* next header length */\n                                            + 4 /* next header CRC */)\n            .order(ByteOrder.LITTLE_ENDIAN);\n        // signature header\n        channel.seek(0);\n        bb.put(SevenZFile.sevenZSignature);\n        // version\n        bb.put((byte) 0).put((byte) 2);\n        // placeholder for start header CRC\n        bb.putInt(0);\n        // start header\n        bb.putLong(headerPosition - SevenZFile.SIGNATURE_HEADER_SIZE)\n            .putLong(0xffffFFFFL & headerBytes.length)\n            .putInt((int) crc32.getValue());\n        crc32.reset();\n        crc32.update(bb.array(), SevenZFile.sevenZSignature.length + 6, 20);\n        bb.putInt(SevenZFile.sevenZSignature.length + 2, (int) crc32.getValue());\n        bb.flip();\n        channel.write(bb.array());\n    }\n    /*\n     * Creation of output stream is deferred until data is actually\n     * written as some codecs might write header information even for\n     * empty streams and directories otherwise.\n     */\n    private OutputStream getCurrentOutputStream() throws IOException {\n        if (currentOutputStream == null) {\n            currentOutputStream = setupFileOutputStream();\n        }\n        return currentOutputStream;\n    }\n    private CountingOutputStream setupFileOutputStream() throws IOException {\n        if (files.isEmpty()) {\n            throw new IllegalStateException(\"No current 7z entry\");\n        }\n        OutputStream out = new OutputStreamWrapper();\n        final ArrayList<CountingOutputStream> moreStreams = new ArrayList<>();\n        boolean first = true;\n        for (final SevenZMethodConfiguration m : getContentMethods(files.get(files.size() - 1))) {\n            if (!first) {\n                final CountingOutputStream cos = new CountingOutputStream(out);\n                moreStreams.add(cos);\n                out = cos;\n            }\n            out = Coders.addEncoder(out, m.getMethod(), m.getOptions());\n            first = false;\n        }\n        if (!moreStreams.isEmpty()) {\n            additionalCountingStreams = moreStreams.toArray(new CountingOutputStream[moreStreams.size()]);\n        }\n        return new CountingOutputStream(out) {\n            @Override\n            public void write(final int b) throws IOException {\n                super.write(b);\n                crc32.update(b);\n            }\n            @Override\n            public void write(final byte[] b) throws IOException {\n                super.write(b);\n                crc32.update(b);\n            }\n            @Override\n            public void write(final byte[] b, final int off, final int len)\n                throws IOException {\n                super.write(b, off, len);\n                crc32.update(b, off, len);\n            }\n        };\n    }\n    private Iterable<? extends SevenZMethodConfiguration> getContentMethods(final SevenZArchiveEntry entry) {\n        final Iterable<? extends SevenZMethodConfiguration> ms = entry.getContentMethods();\n        return ms == null ? contentMethods : ms;\n    }\n    private void writeHeader(final DataOutput header) throws IOException {\n        header.write(NID.kHeader);\n        header.write(NID.kMainStreamsInfo);\n        writeStreamsInfo(header);\n        writeFilesInfo(header);\n        header.write(NID.kEnd);\n    }\n    private void writeStreamsInfo(final DataOutput header) throws IOException {\n        if (numNonEmptyStreams > 0) {\n            writePackInfo(header);\n            writeUnpackInfo(header);\n        }\n        writeSubStreamsInfo(header);\n        header.write(NID.kEnd);\n    }\n    private void writePackInfo(final DataOutput header) throws IOException {\n        header.write(NID.kPackInfo);\n        writeUint64(header, 0);\n        writeUint64(header, 0xffffFFFFL & numNonEmptyStreams);\n        header.write(NID.kSize);\n        for (final SevenZArchiveEntry entry : files) {\n            if (entry.hasStream()) {\n                writeUint64(header, entry.getCompressedSize());\n            }\n        }\n        header.write(NID.kCRC);\n        header.write(1); // \"allAreDefined\" == true\n        for (final SevenZArchiveEntry entry : files) {\n            if (entry.hasStream()) {\n                header.writeInt(Integer.reverseBytes((int) entry.getCompressedCrcValue()));\n            }\n        }\n        header.write(NID.kEnd);\n    }\n    private void writeUnpackInfo(final DataOutput header) throws IOException {\n        header.write(NID.kUnpackInfo);\n        header.write(NID.kFolder);\n        writeUint64(header, numNonEmptyStreams);\n        header.write(0);\n        for (final SevenZArchiveEntry entry : files) {\n            if (entry.hasStream()) {\n                writeFolder(header, entry);\n            }\n        }\n        header.write(NID.kCodersUnpackSize);\n        for (final SevenZArchiveEntry entry : files) {\n            if (entry.hasStream()) {\n                final long[] moreSizes = additionalSizes.get(entry);\n                if (moreSizes != null) {\n                    for (final long s : moreSizes) {\n                        writeUint64(header, s);\n                    }\n                }\n                writeUint64(header, entry.getSize());\n            }\n        }\n        header.write(NID.kCRC);\n        header.write(1); // \"allAreDefined\" == true\n        for (final SevenZArchiveEntry entry : files) {\n            if (entry.hasStream()) {\n                header.writeInt(Integer.reverseBytes((int) entry.getCrcValue()));\n            }\n        }\n        header.write(NID.kEnd);\n    }\n    private void writeFolder(final DataOutput header, final SevenZArchiveEntry entry) throws IOException {\n        final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        int numCoders = 0;\n        for (final SevenZMethodConfiguration m : getContentMethods(entry)) {\n            numCoders++;\n            writeSingleCodec(m, bos);\n        }\n        writeUint64(header, numCoders);\n        header.write(bos.toByteArray());\n        for (long i = 0; i < numCoders - 1; i++) {\n            writeUint64(header, i + 1);\n            writeUint64(header, i);\n        }\n    }\n    private void writeSingleCodec(final SevenZMethodConfiguration m, final OutputStream bos) throws IOException {\n        final byte[] id = m.getMethod().getId();\n        final byte[] properties = Coders.findByMethod(m.getMethod())\n            .getOptionsAsProperties(m.getOptions());\n        int codecFlags = id.length;\n        if (properties.length > 0) {\n            codecFlags |= 0x20;\n        }\n        bos.write(codecFlags);\n        bos.write(id);\n        if (properties.length > 0) {\n            bos.write(properties.length);\n            bos.write(properties);\n        }\n    }\n    private void writeSubStreamsInfo(final DataOutput header) throws IOException {\n        header.write(NID.kSubStreamsInfo);\n//\n//        header.write(NID.kCRC);\n//        header.write(1);\n//        for (final SevenZArchiveEntry entry : files) {\n//            if (entry.getHasCrc()) {\n//                header.writeInt(Integer.reverseBytes(entry.getCrc()));\n//            }\n//        }\n//\n        header.write(NID.kEnd);\n    }\n    private void writeFilesInfo(final DataOutput header) throws IOException {\n        header.write(NID.kFilesInfo);\n        writeUint64(header, files.size());\n        writeFileEmptyStreams(header);\n        writeFileEmptyFiles(header);\n        writeFileAntiItems(header);\n        writeFileNames(header);\n        writeFileCTimes(header);\n        writeFileATimes(header);\n        writeFileMTimes(header);\n        writeFileWindowsAttributes(header);\n        header.write(NID.kEnd);\n    }\n    private void writeFileEmptyStreams(final DataOutput header) throws IOException {\n        boolean hasEmptyStreams = false;\n        for (final SevenZArchiveEntry entry : files) {\n            if (!entry.hasStream()) {\n                hasEmptyStreams = true;\n                break;\n            }\n        }\n        if (hasEmptyStreams) {\n            header.write(NID.kEmptyStream);\n            final BitSet emptyStreams = new BitSet(files.size());\n            for (int i = 0; i < files.size(); i++) {\n                emptyStreams.set(i, !files.get(i).hasStream());\n            }\n            final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "length": 1652, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "ce9e73e7e622c7688ef392b99d6afaa87bea6b138e34fa82"}
{"input": "", "context": "package fr.nantes.univ.alma.tools.ui;\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.RenderingHints;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseListener;\nimport java.awt.font.FontRenderContext;\nimport java.awt.font.TextLayout;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Area;\nimport java.awt.geom.Ellipse2D;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport javax.swing.JComponent;\npublic class InfiniteProgressPanel extends JComponent implements MouseListener\n{\n\tprivate static final long serialVersionUID = 8770653983557145191L;\n\t\n\tprotected Area[]  ticker     = null;\n    protected Thread  animation  = null;\n    protected boolean started    = false;\n    protected int     alphaLevel = 0;\n    protected int     rampDelay  = 300;\n    protected float   shield     = 0.70f;\n    protected String  text       = \"\";\n    protected int     barsCount  = 14;\n    protected float   fps        = 15.0f;\n    protected RenderingHints hints = null;\n    public InfiniteProgressPanel()\n    {\n        this(\"\");\n    }\n    public InfiniteProgressPanel(String text)\n    {\n        this(text, 14);\n    }\n    public InfiniteProgressPanel(String text, int barsCount)\n    {\n        this(text, barsCount, 0.70f);\n    }\n    public InfiniteProgressPanel(String text, int barsCount, float shield)\n    {\n        this(text, barsCount, shield, 15.0f);\n    }\n    public InfiniteProgressPanel(String text, int barsCount, float shield, float fps)\n    {\n        this(text, barsCount, shield, fps, 300);\n    }\n    public InfiniteProgressPanel(String text, int barsCount, float shield, float fps, int rampDelay)\n    {\n        this.text \t   = text;\n        this.rampDelay = rampDelay >= 0 ? rampDelay : 0;\n        this.shield    = shield >= 0.0f ? shield : 0.0f;\n        this.fps       = fps > 0.0f ? fps : 15.0f;\n        this.barsCount = barsCount > 0 ? barsCount : 14;\n        this.hints = new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n        this.hints.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n        this.hints.put(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n    }\n    public void setText(String text)\n    {\n        repaint();\n        this.text = text;\n    }\n    public String getText()\n    {\n        return text;\n    }\n    public void start()\n    {\n        addMouseListener(this);\n        setVisible(true);\n        ticker = buildTicker();\n        animation = new Thread(new Animator(true));\n        animation.start();\n    }\n    public void stop()\n    {\n        if (animation != null) {\n\t        animation.interrupt();\n\t        animation = null;\n\t        animation = new Thread(new Animator(false));\n\t        animation.start();\n        }\n    }\n    \n    public void interrupt()\n    {\n        if (animation != null) {\n            animation.interrupt();\n            animation = null;\n            removeMouseListener(this);\n            setVisible(false);\n        }\n    }\n    public void paintComponent(Graphics g)\n    {\n        if (started)\n        {\n            int width  = getWidth();\n            double maxY = 0.0; \n            Graphics2D g2 = (Graphics2D) g;\n            g2.setRenderingHints(hints);\n            \n            g2.setColor(new Color(255, 255, 255, (int) (alphaLevel * shield)));\n            g2.fillRect(0, 0, getWidth(), getHeight());\n            for (int i = 0; i < ticker.length; i++)\n            {\n                int channel = 224 - 128 / (i + 1);\n                g2.setColor(new Color(channel, channel, channel, alphaLevel));\n                g2.fill(ticker[i]);\n                Rectangle2D bounds = ticker[i].getBounds2D();\n                if (bounds.getMaxY() > maxY)\n                    maxY = bounds.getMaxY();\n            }\n            if (text != null && text.length() > 0)\n            {\n\t            FontRenderContext context = g2.getFontRenderContext();\n\t            TextLayout layout = new TextLayout(text, getFont(), context);\n\t            Rectangle2D bounds = layout.getBounds();\n\t            g2.setColor(getForeground());\n\t            layout.draw(g2, (float) (width - bounds.getWidth()) / 2,\n\t                    \t\t(float) (maxY + layout.getLeading() + 2 * layout.getAscent()));\n            }\n        }\n    }\n    private Area[] buildTicker()\n    {\n        Area[] ticker = new Area[barsCount];\n        Point2D.Double center = new Point2D.Double((double) getWidth() / 2, (double) getHeight() / 2);\n        double fixedAngle = 2.0 * Math.PI / ((double) barsCount);\n        for (double i = 0.0; i < (double) barsCount; i++)\n        {\n            Area primitive = buildPrimitive();\n            AffineTransform toCenter = AffineTransform.getTranslateInstance(center.getX(), center.getY());\n            AffineTransform toBorder = AffineTransform.getTranslateInstance(45.0, -6.0);\n            AffineTransform toCircle = AffineTransform.getRotateInstance(-i * fixedAngle, center.getX(), center.getY());\n            AffineTransform toWheel = new AffineTransform();\n            toWheel.concatenate(toCenter);\n            toWheel.concatenate(toBorder);\n            primitive.transform(toWheel);\n            primitive.transform(toCircle);\n            \n            ticker[(int) i] = primitive;\n        }\n        return ticker;\n    }\n    private Area buildPrimitive()\n    {\n        Rectangle2D.Double body = new Rectangle2D.Double(6, 0, 30, 12);\n        Ellipse2D.Double   head = new Ellipse2D.Double(0, 0, 12, 12);\n        Ellipse2D.Double   tail = new Ellipse2D.Double(30, 0, 12, 12);\n        Area tick = new Area(body);\n        tick.add(new Area(head));\n        tick.add(new Area(tail));\n        return tick;\n    }\n    protected class Animator implements Runnable\n    {\n        private boolean rampUp = true;\n        protected Animator(boolean rampUp)\n        {\n            this.rampUp = rampUp;\n        }\n        public void run()\n        {\n            Point2D.Double center = new Point2D.Double((double) getWidth() / 2, (double) getHeight() / 2);\n            double fixedIncrement = 2.0 * Math.PI / ((double) barsCount);\n            AffineTransform toCircle = AffineTransform.getRotateInstance(fixedIncrement, center.getX(), center.getY());\n    \n            long start = System.currentTimeMillis();\n            if (rampDelay == 0)\n                alphaLevel = rampUp ? 255 : 0;\n            started = true;\n            boolean inRamp = rampUp;\n            while (!Thread.interrupted())\n            {\n                if (!inRamp)\n                {\n", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "length": 600, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "6a3563763220617ce12df989e13f3ad3d2a6e723fd3d119e"}
{"input": "", "context": "using System.Collections.Generic;\nusing System.Linq;\nusing FluentAssertions;\nusing Moq;\nusing NUnit.Framework;\nusing NzbDrone.Core.Download;\nusing NzbDrone.Core.Download.Clients.Transmission;\nnamespace NzbDrone.Core.Test.Download.DownloadClientTests.TransmissionTests\n{\n    [TestFixture]\n    public class TransmissionFixture : TransmissionFixtureBase<Transmission>\n    {\n        [Test]\n        public void queued_item_should_have_required_properties()\n        {\n            PrepareClientToReturnQueuedItem();\n            var item = Subject.GetItems().Single();\n            VerifyQueued(item);\n        }\n        [Test]\n        public void downloading_item_should_have_required_properties()\n        {\n            PrepareClientToReturnDownloadingItem();\n            var item = Subject.GetItems().Single();\n            VerifyDownloading(item);\n        }\n        [Test]\n        public void failed_item_should_have_required_properties()\n        {\n            PrepareClientToReturnFailedItem();\n            var item = Subject.GetItems().Single();\n            VerifyWarning(item);\n        }\n        [Test]\n        public void completed_download_should_have_required_properties()\n        {\n            PrepareClientToReturnCompletedItem();\n            var item = Subject.GetItems().Single();\n            VerifyCompleted(item);\n            item.CanBeRemoved.Should().BeFalse();\n            item.CanMoveFiles.Should().BeFalse();\n        }\n        [Test]\n        public void magnet_download_should_not_return_the_item()\n        {\n            PrepareClientToReturnMagnetItem();\n            Subject.GetItems().Count().Should().Be(0);\n        }\n        [Test]\n        public void Download_should_return_unique_id()\n        {\n            GivenSuccessfulDownload();\n            var remoteMovie = CreateRemoteMovie();\n            var id = Subject.Download(remoteMovie);\n            id.Should().NotBeNullOrEmpty();\n        }\n        [Test]\n        public void Download_with_MovieDirectory_should_force_directory()\n        {\n            GivenMovieDirectory();\n            GivenSuccessfulDownload();\n            var remoteMovie = CreateRemoteMovie();\n            var id = Subject.Download(remoteMovie);\n            id.Should().NotBeNullOrEmpty();\n            Mocker.GetMock<ITransmissionProxy>()\n                  .Verify(v => v.AddTorrentFromData(It.IsAny<byte[]>(), @\"C:/Downloads/Finished/radarr\", It.IsAny<TransmissionSettings>()), Times.Once());\n        }\n        [Test]\n        public void Download_with_category_should_force_directory()\n        {\n            GivenMovieCategory();\n            GivenSuccessfulDownload();\n            var remoteMovie = CreateRemoteMovie();\n            var id = Subject.Download(remoteMovie);\n            id.Should().NotBeNullOrEmpty();\n            Mocker.GetMock<ITransmissionProxy>()\n                  .Verify(v => v.AddTorrentFromData(It.IsAny<byte[]>(), @\"C:/Downloads/Finished/transmission/radarr\", It.IsAny<TransmissionSettings>()), Times.Once());\n        }\n        [Test]\n        public void Download_with_category_should_not_have_double_slashes()\n        {\n            GivenMovieCategory();\n            GivenSuccessfulDownload();\n            _transmissionConfigItems[\"download-dir\"] += \"/\";\n            var remoteMovie = CreateRemoteMovie();\n            var id = Subject.Download(remoteMovie);\n            id.Should().NotBeNullOrEmpty();\n            Mocker.GetMock<ITransmissionProxy>()\n                  .Verify(v => v.AddTorrentFromData(It.IsAny<byte[]>(), @\"C:/Downloads/Finished/transmission/radarr\", It.IsAny<TransmissionSettings>()), Times.Once());\n        }\n        [Test]\n        public void Download_without_TvDirectory_and_Category_should_use_default()\n        {\n            GivenSuccessfulDownload();\n            var remoteMovie = CreateRemoteMovie();\n            var id = Subject.Download(remoteMovie);\n            id.Should().NotBeNullOrEmpty();\n            Mocker.GetMock<ITransmissionProxy>()\n                  .Verify(v => v.AddTorrentFromData(It.IsAny<byte[]>(), null, It.IsAny<TransmissionSettings>()), Times.Once());\n        }\n        [TestCase(\"magnet:?xt=urn:btih:ZPBPA2P6ROZPKRHK44D5OW6NHXU5Z6KR&tr=udp\", \"CBC2F069FE8BB2F544EAE707D75BCD3DE9DCF951\")]\n        public void Download_should_get_hash_from_magnet_url(string magnetUrl, string expectedHash)\n        {\n            GivenSuccessfulDownload();\n            var remoteMovie = CreateRemoteMovie();\n            remoteMovie.Release.DownloadUrl = magnetUrl;\n            var id = Subject.Download(remoteMovie);\n            id.Should().Be(expectedHash);\n        }\n        [TestCase(TransmissionTorrentStatus.Stopped, DownloadItemStatus.Downloading)]\n        [TestCase(TransmissionTorrentStatus.CheckWait, DownloadItemStatus.Downloading)]\n        [TestCase(TransmissionTorrentStatus.Check, DownloadItemStatus.Downloading)]\n        [TestCase(TransmissionTorrentStatus.Queued, DownloadItemStatus.Queued)]\n        [TestCase(TransmissionTorrentStatus.Downloading, DownloadItemStatus.Downloading)]\n        [TestCase(TransmissionTorrentStatus.SeedingWait, DownloadItemStatus.Downloading)]\n        [TestCase(TransmissionTorrentStatus.Seeding, DownloadItemStatus.Downloading)]\n        public void GetItems_should_return_queued_item_as_downloadItemStatus(TransmissionTorrentStatus apiStatus, DownloadItemStatus expectedItemStatus)\n        {\n            _queued.Status = apiStatus;\n            PrepareClientToReturnQueuedItem();\n            var item = Subject.GetItems().Single();\n            item.Status.Should().Be(expectedItemStatus);\n        }\n        [TestCase(TransmissionTorrentStatus.Queued, DownloadItemStatus.Queued)]\n        [TestCase(TransmissionTorrentStatus.Downloading, DownloadItemStatus.Downloading)]\n        [TestCase(TransmissionTorrentStatus.Seeding, DownloadItemStatus.Downloading)]\n        public void GetItems_should_return_downloading_item_as_downloadItemStatus(TransmissionTorrentStatus apiStatus, DownloadItemStatus expectedItemStatus)\n        {\n            _downloading.Status = apiStatus;\n            PrepareClientToReturnDownloadingItem();\n            var item = Subject.GetItems().Single();\n            item.Status.Should().Be(expectedItemStatus);\n        }\n        [TestCase(TransmissionTorrentStatus.Stopped, DownloadItemStatus.Completed, false)]\n        [TestCase(TransmissionTorrentStatus.CheckWait, DownloadItemStatus.Downloading, false)]\n        [TestCase(TransmissionTorrentStatus.Check, DownloadItemStatus.Downloading, false)]\n        [TestCase(TransmissionTorrentStatus.Queued, DownloadItemStatus.Completed, false)]\n        [TestCase(TransmissionTorrentStatus.SeedingWait, DownloadItemStatus.Completed, false)]\n        [TestCase(TransmissionTorrentStatus.Seeding, DownloadItemStatus.Completed, false)]\n        public void GetItems_should_return_completed_item_as_downloadItemStatus(TransmissionTorrentStatus apiStatus, DownloadItemStatus expectedItemStatus, bool expectedValue)\n        {\n            _completed.Status = apiStatus;\n            PrepareClientToReturnCompletedItem();\n            var item = Subject.GetItems().Single();\n            item.Status.Should().Be(expectedItemStatus);\n            item.CanBeRemoved.Should().Be(expectedValue);\n            item.CanMoveFiles.Should().Be(expectedValue);\n        }\n        [Test]\n        public void should_return_status_with_outputdirs()\n        {\n            var result = Subject.GetStatus();\n            result.IsLocalhost.Should().BeTrue();\n            result.OutputRootFolders.Should().NotBeNull();\n            result.OutputRootFolders.First().Should().Be(@\"C:\\Downloads\\Finished\\transmission\");\n        }\n        [Test]\n        public void should_exclude_items_not_in_category()\n        {\n            GivenMovieCategory();\n            _downloading.DownloadDir = @\"C:/Downloads/Finished/transmission/radarr\";\n            GivenTorrents(new List<TransmissionTorrent>\n                {\n                    _downloading,\n                    _queued\n                });\n            var items = Subject.GetItems().ToList();\n            items.Count.Should().Be(1);\n            items.First().Status.Should().Be(DownloadItemStatus.Downloading);\n        }\n        [Test]\n        public void should_exclude_items_not_in_TvDirectory()\n        {\n            GivenMovieDirectory();\n            _downloading.DownloadDir = @\"C:/Downloads/Finished/radarr/subdir\";\n            GivenTorrents(new List<TransmissionTorrent>\n                {\n                    _downloading,\n                    _queued\n                });\n            var items = Subject.GetItems().ToList();\n            items.Count.Should().Be(1);\n            items.First().Status.Should().Be(DownloadItemStatus.Downloading);\n        }\n        [Test]\n        public void should_fix_forward_slashes()\n        {\n            WindowsOnly();\n            _downloading.DownloadDir = @\"C:/Downloads/Finished/transmission\";\n            GivenTorrents(new List<TransmissionTorrent>\n                {\n                    _downloading\n                });\n            var items = Subject.GetItems().ToList();\n            items.Should().HaveCount(1);\n            items.First().OutputPath.Should().Be(@\"C:\\Downloads\\Finished\\transmission\\\" + _title);\n        }\n        [TestCase(\"2.84 ()\")]\n        [TestCase(\"2.84+ ()\")]\n        [TestCase(\"2.84 (other info)\")]\n        [TestCase(\"2.84 (2.84)\")]\n        public void should_only_check_version_number(string version)\n        {\n            Mocker.GetMock<ITransmissionProxy>()\n                  .Setup(s => s.GetClientVersion(It.IsAny<TransmissionSettings>()))\n                  .Returns(version);\n            Subject.Test().IsValid.Should().BeTrue();\n        }\n        [TestCase(-1)] // Infinite/Unknown\n        [TestCase(-2)] // Magnet Downloading\n        public void should_ignore_negative_eta(int eta)\n        {\n            _completed.Eta = eta;\n            PrepareClientToReturnCompletedItem();\n            var item = Subject.GetItems().Single();\n            item.RemainingTime.Should().NotHaveValue();\n        }\n        [Test]\n        public void should_not_be_removable_and_should_not_allow_move_files_if_max_ratio_reached_and_not_stopped()\n        {\n            GivenGlobalSeedLimits(1.0);\n            PrepareClientToReturnCompletedItem(false, ratio: 1.0);\n            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeFalse();\n            item.CanMoveFiles.Should().BeFalse();\n        }\n        [Test]\n        public void should_not_be_removable_and_should_not_allow_move_files_if_max_ratio_is_not_set()\n        {\n            GivenGlobalSeedLimits();\n            PrepareClientToReturnCompletedItem(true, ratio: 1.0);\n            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeFalse();\n            item.CanMoveFiles.Should().BeFalse();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow_move_files_if_max_ratio_reached_and_paused()\n        {\n            GivenGlobalSeedLimits(1.0);\n            PrepareClientToReturnCompletedItem(true, ratio: 1.0);\n            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow_move_files_if_overridden_max_ratio_reached_and_paused()\n        {\n            GivenGlobalSeedLimits(2.0);\n            PrepareClientToReturnCompletedItem(true, ratio: 1.0, ratioLimit: 0.8);\n            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_overridden_max_ratio_not_reached_and_paused()\n        {\n            GivenGlobalSeedLimits(0.2);\n            PrepareClientToReturnCompletedItem(true, ratio: 0.5, ratioLimit: 0.8);\n            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeFalse();\n            item.CanMoveFiles.Should().BeFalse();\n        }\n        [Test]\n        public void should_not_be_removable_and_should_not_allow_move_files_if_max_idletime_reached_and_not_paused()\n        {\n            GivenGlobalSeedLimits(null, 20);\n            PrepareClientToReturnCompletedItem(false, ratio: 2.0, seedingTime: 30);\n            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeFalse();\n            item.CanMoveFiles.Should().BeFalse();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow_move_files_if_max_idletime_reached_and_paused()\n        {\n            GivenGlobalSeedLimits(null, 20);\n            PrepareClientToReturnCompletedItem(true, ratio: 2.0, seedingTime: 20);\n            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow_move_files_if_overridden_max_idletime_reached_and_paused()\n        {\n            GivenGlobalSeedLimits(null, 40);\n            PrepareClientToReturnCompletedItem(true, ratio: 2.0, seedingTime: 20, idleLimit: 10);\n            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_not_allow_move_files_if_overridden_max_idletime_reached_and_not_paused()\n        {\n            GivenGlobalSeedLimits(null, 40);\n            PrepareClientToReturnCompletedItem(false, ratio: 2.0, seedingTime: 20, idleLimit: 10);\n            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeFalse();\n        }\n        [Test]\n        public void should_not_be_removable_if_overridden_max_idletime_not_reached_and_paused()\n        {\n            GivenGlobalSeedLimits(null, 20);\n            PrepareClientToReturnCompletedItem(true, ratio: 2.0, seedingTime: 30, idleLimit: 40);\n            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeFalse();\n            item.CanMoveFiles.Should().BeFalse();\n        }\n        [Test]\n        public void should_not_be_removable_if_max_idletime_reached_but_ratio_not_and_not_paused()\n        {\n            GivenGlobalSeedLimits(2.0, 20);\n            PrepareClientToReturnCompletedItem(false, ratio: 1.0, seedingTime: 30);\n            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeFalse();\n            item.CanMoveFiles.Should().BeFalse();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow_move_files_if_max_idletime_configured_and_paused()\n        {\n            GivenGlobalSeedLimits(2.0, 20);\n            PrepareClientToReturnCompletedItem(true, ratio: 1.0, seedingTime: 30);\n", "answers": ["            var item = Subject.GetItems().Single();"], "length": 655, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "83459d6f1f2adf3b906ee4a28eaf21c3a195f75ae100c64b"}
{"input": "", "context": "#region using directives\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing PoGo.NecroBot.Logic.Common;\nusing PoGo.NecroBot.Logic.Event;\nusing PoGo.NecroBot.Logic.Logging;\nusing PoGo.NecroBot.Logic.State;\nusing PoGo.NecroBot.Logic.Utils;\nusing POGOProtos.Inventory.Item;\n#endregion\nnamespace PoGo.NecroBot.Logic.Tasks\n{\n    public class RecycleItemsTask\n    {\n        private static int _diff;\n        private static Random rnd = new Random();\n        public static async Task Execute(ISession session, CancellationToken cancellationToken)\n        {\n            cancellationToken.ThrowIfCancellationRequested();\n            await session.Inventory.RefreshCachedInventory();\n            var currentTotalItems = await session.Inventory.GetTotalItemCount();\n            if ((session.Profile.PlayerData.MaxItemStorage * session.LogicSettings.RecycleInventoryAtUsagePercentage / 100.0f) > currentTotalItems)\n                return;\n            var currentAmountOfPokeballs = await session.Inventory.GetItemAmountByType(ItemId.ItemPokeBall);\n            var currentAmountOfGreatballs = await session.Inventory.GetItemAmountByType(ItemId.ItemGreatBall);\n            var currentAmountOfUltraballs = await session.Inventory.GetItemAmountByType(ItemId.ItemUltraBall);\n            var currentAmountOfMasterballs = await session.Inventory.GetItemAmountByType(ItemId.ItemMasterBall);\n            if (session.LogicSettings.DetailedCountsBeforeRecycling)\n                Logger.Write(session.Translation.GetTranslation(TranslationString.CurrentPokeballInv,\n                    currentAmountOfPokeballs, currentAmountOfGreatballs, currentAmountOfUltraballs,\n                    currentAmountOfMasterballs));\n            var currentPotions = await session.Inventory.GetItemAmountByType(ItemId.ItemPotion);\n            var currentSuperPotions = await session.Inventory.GetItemAmountByType(ItemId.ItemSuperPotion);\n            var currentHyperPotions = await session.Inventory.GetItemAmountByType(ItemId.ItemHyperPotion);\n            var currentMaxPotions = await session.Inventory.GetItemAmountByType(ItemId.ItemMaxPotion);\n            var currentAmountOfPotions = currentPotions + currentSuperPotions + currentHyperPotions + currentMaxPotions;\n            if (session.LogicSettings.DetailedCountsBeforeRecycling)\n                Logger.Write(session.Translation.GetTranslation(TranslationString.CurrentPotionInv,\n                    currentPotions, currentSuperPotions, currentHyperPotions, currentMaxPotions));\n            \n            var currentRevives = await session.Inventory.GetItemAmountByType(ItemId.ItemRevive);\n            var currentMaxRevives = await session.Inventory.GetItemAmountByType(ItemId.ItemMaxRevive);\n            var currentAmountOfRevives = currentRevives + currentMaxRevives;\n            if (session.LogicSettings.DetailedCountsBeforeRecycling)\n                Logger.Write(session.Translation.GetTranslation(TranslationString.CurrentReviveInv,\n                    currentRevives, currentMaxRevives));\n            var currentAmountOfBerries = await session.Inventory.GetItemAmountByType(ItemId.ItemRazzBerry) +\n                await session.Inventory.GetItemAmountByType(ItemId.ItemBlukBerry) +\n                await session.Inventory.GetItemAmountByType(ItemId.ItemNanabBerry) +\n                await session.Inventory.GetItemAmountByType(ItemId.ItemWeparBerry) +\n                await session.Inventory.GetItemAmountByType(ItemId.ItemPinapBerry);\n            var currentAmountOfIncense = await session.Inventory.GetItemAmountByType(ItemId.ItemIncenseOrdinary) +\n                await session.Inventory.GetItemAmountByType(ItemId.ItemIncenseSpicy) +\n                await session.Inventory.GetItemAmountByType(ItemId.ItemIncenseCool) +\n                await session.Inventory.GetItemAmountByType(ItemId.ItemIncenseFloral);\n            var currentAmountOfLuckyEggs = await session.Inventory.GetItemAmountByType(ItemId.ItemLuckyEgg);\n            var currentAmountOfLures = await session.Inventory.GetItemAmountByType(ItemId.ItemTroyDisk);\n            if (session.LogicSettings.DetailedCountsBeforeRecycling)\n                Logger.Write(session.Translation.GetTranslation(TranslationString.CurrentMiscItemInv,\n                    currentAmountOfBerries, currentAmountOfIncense, currentAmountOfLuckyEggs, currentAmountOfLures));\n            if (session.LogicSettings.TotalAmountOfPokeballsToKeep != 0)\n                await OptimizedRecycleBalls(session, cancellationToken);\n            if (!session.LogicSettings.VerboseRecycling)\n                Logger.Write(session.Translation.GetTranslation(TranslationString.RecyclingQuietly), LogLevel.Recycling);\n            if (session.LogicSettings.TotalAmountOfPotionsToKeep>=0)\n                await OptimizedRecyclePotions(session, cancellationToken);\n            if (session.LogicSettings.TotalAmountOfRevivesToKeep>=0)\n                await OptimizedRecycleRevives(session, cancellationToken);\n            if (session.LogicSettings.TotalAmountOfBerriesToKeep >= 0)\n                await OptimizedRecycleBerries(session, cancellationToken);\n            \n            await session.Inventory.RefreshCachedInventory();\n            currentTotalItems = await session.Inventory.GetTotalItemCount();\n            if ((session.Profile.PlayerData.MaxItemStorage * session.LogicSettings.RecycleInventoryAtUsagePercentage / 100.0f) > currentTotalItems)\n                return;\n            var items = await session.Inventory.GetItemsToRecycle(session);\n            foreach (var item in items)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                await session.Client.Inventory.RecycleItem(item.ItemId, item.Count);\n                if (session.LogicSettings.VerboseRecycling)\n                    session.EventDispatcher.Send(new ItemRecycledEvent { Id = item.ItemId, Count = item.Count });\n                DelayingUtils.Delay(session.LogicSettings.RecycleActionDelay, 500);\n            }\n            await session.Inventory.RefreshCachedInventory();\n        }\n        private static async Task RecycleItems(ISession session, CancellationToken cancellationToken, int itemCount, ItemId item)\n        {\n            int itemsToRecycle = 0;\n            int itemsToKeep = itemCount - _diff;\n            if (itemsToKeep < 0)\n                itemsToKeep = 0;\n            itemsToRecycle = itemCount - itemsToKeep;\n            if (itemsToRecycle != 0)\n            {\n                _diff -= itemsToRecycle;\n                cancellationToken.ThrowIfCancellationRequested();\n                await session.Client.Inventory.RecycleItem(item, itemsToRecycle);\n                if (session.LogicSettings.VerboseRecycling)\n                    session.EventDispatcher.Send(new ItemRecycledEvent { Id = item, Count = itemsToRecycle });\n                DelayingUtils.Delay(session.LogicSettings.RecycleActionDelay, 500);\n            }\n        }\n        private static async Task OptimizedRecycleBalls(ISession session, CancellationToken cancellationToken)\n        {\n            var pokeBallsCount = await session.Inventory.GetItemAmountByType(ItemId.ItemPokeBall);\n            var greatBallsCount = await session.Inventory.GetItemAmountByType(ItemId.ItemGreatBall);\n            var ultraBallsCount = await session.Inventory.GetItemAmountByType(ItemId.ItemUltraBall);\n            var masterBallsCount = await session.Inventory.GetItemAmountByType(ItemId.ItemMasterBall);\n            int totalBallsCount = pokeBallsCount + greatBallsCount + ultraBallsCount + masterBallsCount;\n            int random = rnd.Next(-1 * session.LogicSettings.RandomRecycleValue, session.LogicSettings.RandomRecycleValue + 1);\n            if (totalBallsCount > session.LogicSettings.TotalAmountOfPokeballsToKeep)\n            {\n                if (session.LogicSettings.RandomizeRecycle)\n                {\n                    _diff = totalBallsCount - session.LogicSettings.TotalAmountOfPokeballsToKeep + random;\n                } else {\n                    _diff = totalBallsCount - session.LogicSettings.TotalAmountOfPokeballsToKeep;\n                }\n                \n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pokeBallsCount, ItemId.ItemPokeBall);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, greatBallsCount, ItemId.ItemGreatBall); \n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, ultraBallsCount, ItemId.ItemUltraBall);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, masterBallsCount, ItemId.ItemMasterBall);\n                }\n            }\n        }\n        private static async Task OptimizedRecyclePotions(ISession session, CancellationToken cancellationToken)\n        {\n            var potionCount = await session.Inventory.GetItemAmountByType(ItemId.ItemPotion);\n            var superPotionCount = await session.Inventory.GetItemAmountByType(ItemId.ItemSuperPotion);\n            var hyperPotionsCount = await session.Inventory.GetItemAmountByType(ItemId.ItemHyperPotion);\n            var maxPotionCount = await session.Inventory.GetItemAmountByType(ItemId.ItemMaxPotion);\n            \n            int totalPotionsCount = potionCount + superPotionCount + hyperPotionsCount + maxPotionCount;\n            int random = rnd.Next(-1 * session.LogicSettings.RandomRecycleValue, session.LogicSettings.RandomRecycleValue + 1);\n            if (totalPotionsCount > session.LogicSettings.TotalAmountOfPotionsToKeep)\n            {\n                if (session.LogicSettings.RandomizeRecycle)\n                {\n                    _diff = totalPotionsCount - session.LogicSettings.TotalAmountOfPotionsToKeep + random;\n                }\n                else\n                {\n                    _diff = totalPotionsCount - session.LogicSettings.TotalAmountOfPotionsToKeep;\n                }\n                \n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, potionCount, ItemId.ItemPotion);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, superPotionCount, ItemId.ItemSuperPotion);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, hyperPotionsCount, ItemId.ItemHyperPotion);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, maxPotionCount, ItemId.ItemMaxPotion);\n                }\n            }\n        }\n        private static async Task OptimizedRecycleRevives(ISession session, CancellationToken cancellationToken)\n        {\n            var reviveCount = await session.Inventory.GetItemAmountByType(ItemId.ItemRevive);\n            var maxReviveCount = await session.Inventory.GetItemAmountByType(ItemId.ItemMaxRevive);\n            int totalRevivesCount = reviveCount + maxReviveCount;\n            int random = rnd.Next(-1 * session.LogicSettings.RandomRecycleValue, session.LogicSettings.RandomRecycleValue + 1);\n            if (totalRevivesCount > session.LogicSettings.TotalAmountOfRevivesToKeep)\n            {\n                if (session.LogicSettings.RandomizeRecycle)\n                {\n                    _diff = totalRevivesCount - session.LogicSettings.TotalAmountOfRevivesToKeep + random;\n                }\n                else\n                {\n                    _diff = totalRevivesCount - session.LogicSettings.TotalAmountOfRevivesToKeep;\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, reviveCount, ItemId.ItemRevive);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, maxReviveCount, ItemId.ItemMaxRevive);\n                }\n            }\n        }\n        private static async Task OptimizedRecycleBerries(ISession session, CancellationToken cancellationToken)\n        {\n            var razz = await session.Inventory.GetItemAmountByType(ItemId.ItemRazzBerry);\n            var bluk = await session.Inventory.GetItemAmountByType(ItemId.ItemBlukBerry);\n            var nanab = await session.Inventory.GetItemAmountByType(ItemId.ItemNanabBerry);\n            var pinap = await session.Inventory.GetItemAmountByType(ItemId.ItemPinapBerry);\n            var wepar = await session.Inventory.GetItemAmountByType(ItemId.ItemWeparBerry);\n            int totalBerryCount = razz + bluk + nanab + pinap + wepar;\n            int random = rnd.Next(-1 * session.LogicSettings.RandomRecycleValue, session.LogicSettings.RandomRecycleValue + 1);\n            if (totalBerryCount > session.LogicSettings.TotalAmountOfBerriesToKeep)\n            {\n                if (session.LogicSettings.RandomizeRecycle)\n                {\n                    _diff = totalBerryCount - session.LogicSettings.TotalAmountOfBerriesToKeep + random;\n                }\n                else\n                {\n                    _diff = totalBerryCount - session.LogicSettings.TotalAmountOfBerriesToKeep;\n                }\n                \n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, razz, ItemId.ItemRazzBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, bluk, ItemId.ItemBlukBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, nanab, ItemId.ItemNanabBerry);\n                }\n", "answers": ["                if (_diff > 0)"], "length": 772, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "a35dec5733725ddbb50c8215f4db5a1bb8d03ea5bf6f87c7"}
{"input": "", "context": "import os\nimport sys\nimport pyfits\nimport config as c\nfrom os.path import exists\nfrom numpy import log10\nfrom readlog import ReadLog\nfrom runsexfunc import *\nfrom flagfunc import *\nclass ConfigIter:\n    \"\"\"The class making configuration file for GALFIT. The configuration file \n       consists of bulge and disk component of the object and only Sersic \n       component for the neighbours, if any. The sky is always fixed and has\n       the value of SExtractor. The disk/boxy parameter is also fixed to zero.\n       The initial value for Sersic index 'n' is 4.The configuration file has \n       the name G_string(galid).in. The output image has the name \n       O_string(galid).fits\"\"\"\n    def __init__(self, cutimage, whtimage, xcntr, ycntr, NXPTS, NYPTS, line_s, psffile):\n        self.cutimage = cutimage\n        self.line_s  = line_s\n        self.whtimage = whtimage\n        self.xcntr = xcntr\n        self.ycntr = ycntr\n        self.NXPTS = NXPTS\n        self.NYPTS = NYPTS \n        self.psffile = psffile\n        self.confiter    = confiter(cutimage, whtimage, xcntr, ycntr, NXPTS, NYPTS, line_s, psffile)\ndef confiter(cutimage, whtimage, xcntr, ycntr, NXPTS, NYPTS, line_s, psffile):\n    RunSex(cutimage, whtimage, 'TEMP.SEX.cat', 9999, 9999, 0)\n    imagefile = c.imagefile\n    sex_cata = 'TEMP.SEX.cat'\n    threshold = c.threshold\n    thresh_area = c.thresh_area\n    mask_reg = c.mask_reg\n    try:\n        ComP = c.components \n    except:\n        ComP = ['bulge', 'disk']\n    if len(ComP) == 0:\n        ComP = ['bulge', 'disk']\n    values = line_s.split()\n    outfile   = 'O_' + c.fstring + '.fits'\n    mask_file = 'M_' + c.fstring + '.fits'\n    config_file = 'G_' + c.fstring + '.in' #Name of the GALFIT configuration file\n    constrain_file = c.fstring + '.con'\n    try:\n    \tc.center_constrain = c.center_constrain\n    except:\n\t    c.center_constrain = 2.0\n    def SersicMainConstrain(constrain_file, cO):\n        f_constrain = open(constrain_file, 'ab')\n        f_constrain.write(str(cO) + '      n      ' + str(c.LN) + \\\n                          ' to ' + str(c.UN) +  '\\n')\n        f_constrain.write(str(cO) + '      x      ' + \\\n                          str(-c.center_constrain) + '     ' + \\\n                          str(c.center_constrain) + '\\n')\n        f_constrain.write(str(cO) + '      y      ' + \\\n                          str(-c.center_constrain) + '     ' + \\\n                          str(c.center_constrain) + '\\n')\n        f_constrain.write(str(cO) + '     mag     ' + str(c.UMag) + \\\n                          ' to ' + str(c.LMag) + '\\n')\n        f_constrain.write(str(cO) + '      re     ' + str(c.LRe) +\\\n                          ' to ' + str(c.URe) + '\\n')\n        f_constrain.write(str(cO) + '      q       0.0 to 1.0\\n')\n        f_constrain.write(str(cO) + '      pa       -360.0 to 360.0\\n')\n        f_constrain.close()\n    def BarConstrain(constrain_file, cO):\n        f_constrain = open(constrain_file, 'ab')\n        f_constrain.write(str(cO) + '      n      ' + str('0.1') + \\\n                          ' to ' + str('2.2') +  '\\n')\n        f_constrain.write(str(cO) + '      x      ' + \\\n                          str(-c.center_constrain) + '     ' + \\\n                          str(c.center_constrain) + '\\n')\n        f_constrain.write(str(cO) + '      y      ' + \\\n                          str(-c.center_constrain) + '     ' + \\\n                          str(c.center_constrain) + '\\n')\n        f_constrain.write(str(cO) + '     mag     ' + str(c.UMag) + \\\n                          ' to ' + str(c.LMag) + '\\n')\n        f_constrain.write(str(cO) + '      re     ' + str(c.LRe) +\\\n                          ' to ' + str(c.URe) + '\\n')\n        f_constrain.write(str(cO) + '      q       0.0 to 0.5\\n')\n        f_constrain.write(str(cO) + '      pa       -360.0 to 360.0\\n')\n        f_constrain.close()\n    def ExpdiskConstrain(constrain_file, cO):\n        f_constrain = open(constrain_file, 'ab')\n        f_constrain.write(str(cO) + '       x       ' + \\\n                          str(-c.center_constrain) + '     ' + \\\n                          str(c.center_constrain) + '\\n')\n        f_constrain.write(str(cO) + '       y       ' + \\\n                          str(-c.center_constrain) + '     ' + \\\n                          str(c.center_constrain) + '\\n')\n        f_constrain.write(str(cO) + '     mag     ' + str(c.UMag) + \\\n                          ' to ' + str(c.LMag) + '\\n')\n        f_constrain.write(str(cO) + '      rs     ' + str(c.LRd) + \\\n                          ' to ' + str(c.URd) + '\\n')\n        f_constrain.write(str(cO) + '      q       0.0 to 1.0\\n')\n        f_constrain.write(str(cO) + '      pa       -360.0 to 360.0\\n')\n        f_constrain.close()\n    def SersicConstrain(constrain_file, cO):\n        f_constrain = open(constrain_file, 'ab')\n        f_constrain.write(str(cO) + '      n      0.02 to 20.0  \\n')\n        f_constrain.write(str(cO) + '     mag    -100.0 to 100.0\\n')\n        f_constrain.write(str(cO) + '      re      0.0 to 500.0\\n')\n        f_constrain.write(str(cO) + '      q       0.0 to 1.0\\n')\n        f_constrain.write(str(cO) + '      pa    -360.0 to 360.0\\n')\n        f_constrain.close()\n    xcntr_o  = xcntr #float(values[1]) #x center of the object\n    ycntr_o  = ycntr #float(values[2]) #y center of the object\n    mag    = float(values[7]) #Magnitude\n    radius = float(values[9]) #Half light radius\n    mag_zero = c.mag_zero #magnitude zero point\n    sky\t = float(values[10]) #sky \n    pos_ang = float(values[11]) - 90.0 #position angle\n    axis_rat = 1.0/float(values[12]) #axis ration b/a\n    area_o = float(values[13])   # object's area\n    major_axis = float(values[14])\t#major axis of the object\n    ParamDict = {}\n    #Add components\n    AdComp = 1\n    if 'bulge' in ComP:\n        c.Flag = SetFlag(c.Flag, GetFlag('FIT_BULGE'))\n        ParamDict[AdComp] = {}\n        #Bulge Parameters\n        ParamDict[AdComp][1] = 'sersic'\n        ParamDict[AdComp][2] = [xcntr_o, ycntr_o]\n        ParamDict[AdComp][3] = mag\n        ParamDict[AdComp][4] = radius\n        ParamDict[AdComp][5] = 4.0\n        ParamDict[AdComp][6] = axis_rat\n        ParamDict[AdComp][7] = pos_ang\n        ParamDict[AdComp][8] = 0\n        ParamDict[AdComp][9] = 0\n        ParamDict[AdComp][11] = 'Main'\n        AdComp += 1\n    if 'bar' in ComP:\n        c.Flag = SetFlag(c.Flag, GetFlag('FIT_BAR'))\n        ParamDict[AdComp] = {}\n        #Bulge Parameters\n        ParamDict[AdComp][1] = 'bar'\n        ParamDict[AdComp][2] = [xcntr_o, ycntr_o]\n        ParamDict[AdComp][3] = mag + 2.5 * log10(2.0)\n        ParamDict[AdComp][4] = radius\n        ParamDict[AdComp][5] = 0.5\n        ParamDict[AdComp][6] = 0.3\n        ParamDict[AdComp][7] = pos_ang\n        ParamDict[AdComp][8] = 0\n        ParamDict[AdComp][9] = 0\n        ParamDict[AdComp][11] = 'Main'\n        AdComp += 1\n    if 'disk' in ComP:\n        c.Flag = SetFlag(c.Flag, GetFlag('FIT_DISK'))\n        #Disk parameters\n        ParamDict[AdComp] = {}\n        ParamDict[AdComp][1] = 'expdisk'\n        ParamDict[AdComp][2] = [xcntr_o, ycntr_o]\n        ParamDict[AdComp][3] = mag\n        ParamDict[AdComp][4] = radius\n        ParamDict[AdComp][5] = axis_rat\n        ParamDict[AdComp][6] = pos_ang\n        ParamDict[AdComp][7] = 0\n        ParamDict[AdComp][8] = 0\n        ParamDict[AdComp][11] = 'Main'\n        AdComp += 1\n    isneighbour = 0\n    f_constrain = open(constrain_file, 'ab')\n    for line_j in open(sex_cata,'r'):\n        try:\n            values = line_j.split()\n            xcntr_n  = float(values[1]) #x center of the neighbour\n            ycntr_n  = float(values[2]) #y center of the neighbour\n            mag    = float(values[7]) #Magnitude\n            radius = float(values[9]) #Half light radius\n            sky      = float(values[10]) #sky\n            pos_ang = float(values[11]) - 90.0 #position angle\n            axis_rat = 1.0/float(values[12]) #axis ration b/a\n            area_n = float(values[13]) # neighbour area\n            maj_axis = float(values[14])#major axis of neighbour\n            NotFitNeigh = 0\n            if abs(xcntr_n - xcntr_o) > NXPTS / 2.0 + c.avoidme or \\\n               abs(ycntr_n - ycntr_o) > NYPTS / 2.0 + c.avoidme:\n                NotFitNeigh = 1\n            if(abs(xcntr_n - xcntr_o) <= (major_axis + maj_axis) * \\\n               threshold and \\\n               abs(ycntr_n - ycntr_o) <= (major_axis  + maj_axis) * \\\n               threshold and area_n >= thresh_area * area_o and \\\n               xcntr_n != xcntr_o and ycntr_n != ycntr_o and NotFitNeigh == 0):\n                if((xcntr_o - xcntr_n) < 0):\n                    xn = xcntr + abs(xcntr_n - xcntr_o)\n                if((ycntr_o - ycntr_n) < 0):\n                    yn = ycntr + abs(ycntr_n - ycntr_o)\n                if((xcntr_o - xcntr_n) > 0):\n                    xn = xcntr - (xcntr_o - xcntr_n)\n                if((ycntr_o - ycntr_n) > 0):\n                    yn = ycntr - (ycntr_o - ycntr_n)\n                ParamDict[AdComp] = {}\n                ParamDict[AdComp][1] = 'sersic'\n                ParamDict[AdComp][2] = [xn, yn]\n                ParamDict[AdComp][3] = mag\n                ParamDict[AdComp][4] = radius\n                ParamDict[AdComp][5] = 4.0\n                ParamDict[AdComp][6] = axis_rat\n                ParamDict[AdComp][7] = pos_ang\n                ParamDict[AdComp][8] = 0\n                ParamDict[AdComp][9] = 0\n                ParamDict[AdComp][11] = 'Other'\n                isneighbour = 1\n                AdComp += 1\n        except:\n            pass\n    f_constrain.close()\n    if isneighbour:\n        c.Flag  = SetFlag(c.Flag, GetFlag('NEIGHBOUR_FIT'))\n    #Sky component\n    ParamDict[AdComp] = {}\n    ParamDict[AdComp][1] = 'sky'\n    ParamDict[AdComp][2] = sky\n    ParamDict[AdComp][3] = 0\n    ParamDict[AdComp][4] = 0\n    ParamDict[AdComp][5] = 0\n    ParamDict[AdComp][11] = 'Other'\n    #Write Sersic function\n    def SersicFunc(conffile, ParamDict, FitDict, No):\n        f=open(config_file, 'ab')\n        f.write('# Sersic function\\n\\n')\n        f.writelines([' 0) sersic \\n'])\n        f.writelines([' 1) ', str(ParamDict[No][2][0]), ' ', \\\n                              str(ParamDict[No][2][1]), ' ', \\\n                              str(FitDict[No][1][0]),   ' ', \\\n                              str(FitDict[No][1][1]),   '\\n'])\n        f.writelines([' 3) ', str(ParamDict[No][3]), ' ', \\\n                              str(FitDict[No][2]),  '\\n'])\n        f.writelines([' 4) ', str(ParamDict[No][4]), ' ', \\\n                              str(FitDict[No][3]),  '\\n'])\n        f.writelines([' 5) ', str(ParamDict[No][5]), ' ',\\\n                              str(FitDict[No][4]),  '\\n'])\n        f.writelines([' 8) ', str(ParamDict[No][6]), ' ', \\\n                              str(FitDict[No][5]),  '\\n'])\n        f.writelines([' 9) ', str(ParamDict[No][7]), ' ', \\\n                              str(FitDict[No][6]),  '\\n'])\n        if c.bdbox or c.bbox:\n            f.writelines(['10) 0.0 1\t\t\\n'])\n        else:\n            f.writelines(['10) 0.0 0            \\n'])\n        f.writelines([' Z) 0 \t\t\t\\n\\n\\n'])\n        f.close()\n    def ExpFunc(conffile, ParamDict, FitDict, No):\n        f=open(config_file, 'ab')\n        f.writelines(['# Exponential function\\n\\n'])\n        f.writelines([' 0) expdisk \\n'])\n        f.writelines([' 1) ', str(ParamDict[No][2][0]), ' ', \\\n                              str(ParamDict[No][2][1]),' ', \\\n                              str(FitDict[No][1][0]), ' ', \\\n                              str(FitDict[No][1][1]), '\\n'])\n        f.writelines([' 3) ', str(ParamDict[No][3]),  ' ', \\\n                              str(FitDict[No][2]),    '\\n'])\n        f.writelines([' 4) ', str(ParamDict[No][4]),  ' ', \\\n                              str(FitDict[No][3]),    '\\n'])\n        f.writelines([' 8) ', str(ParamDict[No][5]),  ' ', \\\n                              str(FitDict[No][4]),    '\\n'])\n        f.writelines([' 9) ', str(ParamDict[No][6]),  ' ', \\\n                              str(FitDict[No][5]),    '\\n'])\n        if c.bdbox or c.dbox:\n            f.writelines(['10) 0.0 1   \\n']) \n        else:\n            f.writelines(['10) 0.0 0   \\n'])\n        f.writelines([' Z) 0           \\n\\n\\n'])\n        f.close()\n    def SkyFunc(conffile, ParamDict, FitDict, No):\n        f=open(config_file, 'ab')\n        f.writelines([' 0) sky\\n'])\n        f.writelines([' 1) ', str(ParamDict[No][2]), \\\n                    '      ', str(FitDict[No][1]), '\\n'])\n        f.writelines([' 2) 0.000      0       \\n',\\\n                      ' 3) 0.000      0       \\n',\\\n                      ' Z) 0                  \\n\\n\\n'])\n        f.writelines(['# Neighbour sersic function\\n\\n'])\n        f.close()\n    \n    def DecideFitting(ParamDict, No):\n        FitDict = {}\n#        print ParamDict \n        if No == 1:\n            for j in range(len(ParamDict)):\n                i = j + 1\n                FitDict[i] = {} \n                if ParamDict[i][1] == 'sersic' and ParamDict[i][11] == 'Main':\n                    FitDict[i][1] = [1, 1]\n                    FitDict[i][2] = 1 \n                    FitDict[i][3] = 1 \n                    FitDict[i][4] = 1\n                    FitDict[i][5] = 1       \n                    FitDict[i][6] = 1   \n                if ParamDict[i][1] == 'bar' and ParamDict[i][11] == 'Main':\n                    FitDict[i][1] = [1, 1]\n                    FitDict[i][2] = 1 \n                    FitDict[i][3] = 1 \n                    FitDict[i][4] = 1\n                    FitDict[i][5] = 1       \n                    FitDict[i][6] = 1    \n                if ParamDict[i][1] == 'expdisk' and ParamDict[i][11] == 'Main':\n                    FitDict[i][1] = [1, 1]\n                    FitDict[i][2] = 1 \n                    FitDict[i][3] = 1 \n                    FitDict[i][4] = 1       \n                    FitDict[i][5] = 1    \n                if ParamDict[i][1] == 'sky':\n                    FitDict[i][1] = 1\n                    FitDict[i][2] = 0 \n                    FitDict[i][3] = 0 \n                if ParamDict[i][1] == 'sersic' and ParamDict[i][11] == 'Other':\n                    FitDict[i][1] = [1, 1]\n                    FitDict[i][2] = 1 \n                    FitDict[i][3] = 1 \n                    FitDict[i][4] = 1\n                    FitDict[i][5] = 1       \n                    FitDict[i][6] = 1    \n        if No == 4:\n            for j in range(len(ParamDict)):\n                i = j + 1\n                FitDict[i] = {}  \n                if ParamDict[i][1] == 'sersic' and ParamDict[i][11] == 'Main':\n                    FitDict[i][1] = [1, 1]\n                    FitDict[i][2] = 1 \n                    FitDict[i][3] = 1 \n                    FitDict[i][4] = 0\n                    FitDict[i][5] = 0       \n                    FitDict[i][6] = 0    \n                if ParamDict[i][1] == 'expdisk' and ParamDict[i][11] == 'Main':\n                    FitDict[i][1] = [0, 0]\n                    FitDict[i][2] = 0 \n                    FitDict[i][3] = 0 \n                    FitDict[i][4] = 0       \n                    FitDict[i][5] = 0    \n                if ParamDict[i][1] == 'sky':\n                    FitDict[i][1] = 1\n                    FitDict[i][2] = 0 \n                    FitDict[i][3] = 0 \n                if ParamDict[i][1] == 'sersic' and ParamDict[i][11] == 'Other':\n                    FitDict[i][1] = [0, 0]\n                    FitDict[i][2] = 0 \n                    FitDict[i][3] = 0 \n                    FitDict[i][4] = 0\n                    FitDict[i][5] = 0       \n                    FitDict[i][6] = 0    \n        if No == 3:\n            for j in range(len(ParamDict)):\n                i = j + 1\n                FitDict[i] = {}  \n                if ParamDict[i][1] == 'sersic' and ParamDict[i][11] == 'Main':\n                    FitDict[i][1] = [1, 1]\n                    FitDict[i][2] = 1 \n                    FitDict[i][3] = 1 \n                    FitDict[i][4] = 1\n                    FitDict[i][5] = 1       \n                    FitDict[i][6] = 1\n                if ParamDict[i][1] == 'bar' and ParamDict[i][11] == 'Main':\n                    FitDict[i][1] = [1, 1]\n                    FitDict[i][2] = 1 \n                    FitDict[i][3] = 1 \n                    FitDict[i][4] = 1\n                    FitDict[i][5] = 1       \n                    FitDict[i][6] = 1    \n                if ParamDict[i][1] == 'expdisk' and ParamDict[i][11] == 'Main':\n                    FitDict[i][1] = [1, 1]\n                    FitDict[i][2] = 1 \n                    FitDict[i][3] = 1 \n                    FitDict[i][4] = 1       \n                    FitDict[i][5] = 1    \n                if ParamDict[i][1] == 'sky':\n                    FitDict[i][1] = 1\n                    FitDict[i][2] = 0 \n                    FitDict[i][3] = 0 \n                if ParamDict[i][1] == 'sersic' and ParamDict[i][11] == 'Other':\n                    FitDict[i][1] = [0, 0]\n                    FitDict[i][2] = 0 \n                    FitDict[i][3] = 0 \n                    FitDict[i][4] = 0\n                    FitDict[i][5] = 0       \n                    FitDict[i][6] = 0    \n        if No == 2:\n            for j in range(len(ParamDict)):\n                i = j + 1\n                FitDict[i] = {}  \n                if ParamDict[i][1] == 'sersic' and ParamDict[i][11] == 'Main':\n                    FitDict[i][1] = [1, 1]\n                    FitDict[i][2] = 1 \n                    FitDict[i][3] = 1 \n                    FitDict[i][4] = 1\n                    FitDict[i][5] = 1       \n                    FitDict[i][6] = 1   \n                if ParamDict[i][1] == 'bar' and ParamDict[i][11] == 'Main':\n                    FitDict[i][1] = [1, 1]\n                    FitDict[i][2] = 1 \n                    FitDict[i][3] = 1 \n                    FitDict[i][4] = 1\n                    FitDict[i][5] = 0       \n                    FitDict[i][6] = 0    \n                if ParamDict[i][1] == 'expdisk' and ParamDict[i][11] == 'Main':\n                    FitDict[i][1] = [0, 0]\n                    FitDict[i][2] = 0 \n                    FitDict[i][3] = 0 \n                    FitDict[i][4] = 0       \n                    FitDict[i][5] = 0    \n                if ParamDict[i][1] == 'sky':\n                    FitDict[i][1] = 1\n                    FitDict[i][2] = 0 \n                    FitDict[i][3] = 0 \n                if ParamDict[i][1] == 'sersic' and ParamDict[i][11] == 'Other':\n                    FitDict[i][1] = [0, 0]\n                    FitDict[i][2] = 0 \n                    FitDict[i][3] = 0 \n                    FitDict[i][4] = 0\n                    FitDict[i][5] = 0       \n                    FitDict[i][6] = 0    \n        return FitDict\n    #Write configuration file. RunNo is the number of iteration\n    for RunNo in range(3):\n        f_constrain = open(constrain_file, 'w')\n        f_constrain.close()\n        f=open(config_file,'w')\n        f.write('# IMAGE PARAMETERS\\n')\n        f.writelines(['A) ', str(cutimage), '\t# Input data image',\\\n                      ' (FITS file)\\n'])\n        f.writelines(['B) ', str(outfile), '\t\t# Name for',\\\n                      ' the output image\\n'])\n        f.writelines(['C) ', str(whtimage), '\t\t# Noise image name', \\\n                      ' (made from data if blank or \"none\")\\n'])\n        f.writelines(['D) ', str(psffile), '\t\t\t# Input PSF', \\\n                      ' image for convolution (FITS file)\\n'])\n        f.writelines(['E) 1\t\t\t# PSF oversampling factor '\\\n", "answers": ["                      'relative to data\\n'])"], "length": 1863, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "c19772b78b722854250c2ccf8a287dc2802417dbeafa7d23"}
{"input": "", "context": "/*\nThis file is part of Arcadeflex.\nArcadeflex is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nArcadeflex is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with Arcadeflex.  If not, see <http://www.gnu.org/licenses/>.\n */\n /*\n * ported to v0.37b7\n * using automatic conversion tool v0.01\n */\npackage machine;\nimport static arcadeflex.fucPtr.WriteHandlerPtr;\nimport static arcadeflex.libc_v2.UBytePtr;\nimport static old.arcadeflex.osdepend.logerror;\nimport static old.mame.cpuintrfH.cpu_getpreviouspc;\nimport static old.vidhrdw.generic.videoram_w;\nimport static vidhrdw.segar.*;\npublic class segar {\n    public static abstract interface sega_decryptPtr {\n        public abstract void handler(int pc,/*unsinged*/ int[] lo);\n    }\n    public static sega_decryptPtr sega_decrypt;\n    public static UBytePtr segar_mem = new UBytePtr();\n    public static WriteHandlerPtr segar_w = new WriteHandlerPtr() {\n        public void handler(int offset, int data) {\n            int pc, op, page, off;\n            /*unsigned*/\n            int[] bad = new int[1];\n            off = offset;\n            pc = cpu_getpreviouspc();\n            if (pc != -1) {\n                op = segar_mem.read(pc) & 0xFF;\n                if (op == 0x32) {\n                    bad[0] = offset & 0x00FF;\n                    page = offset & 0xFF00;\n                    (sega_decrypt).handler(pc, bad);\n                    off = page | bad[0];\n                }\n            }\n            /* MWA_ROM */\n            if ((off >= 0x0000) && (off <= 0xC7FF)) {\n                ;\n            } /* MWA_RAM */ else if ((off >= 0xC800) && (off <= 0xCFFF)) {\n                segar_mem.write(off, data);\n            } else if ((off >= 0xE000) && (off <= 0xE3FF)) {\n                videoram_w.handler(off - 0xE000, data);\n            } /* MWA_RAM */ else if ((off >= 0xE400) && (off <= 0xE7FF)) {\n                segar_mem.write(off, data);\n            } else if ((off >= 0xE800) && (off <= 0xEFFF)) {\n                segar_characterram_w.handler(off - 0xE800, data);\n            } else if ((off >= 0xF000) && (off <= 0xF03F)) {\n                segar_colortable_w.handler(off - 0xF000, data);\n            } else if ((off >= 0xF040) && (off <= 0xF07F)) {\n                segar_bcolortable_w.handler(off - 0xF040, data);\n            } /* MWA_RAM */ else if ((off >= 0xF080) && (off <= 0xF7FF)) {\n                segar_mem.write(off, data);\n            } else if ((off >= 0xF800) && (off <= 0xFFFF)) {\n                segar_characterram2_w.handler(off - 0xF800, data);\n            } else {\n                logerror(\"unmapped write at %04X:%02X\\n\", off, data);\n            }\n        }\n    };\n    /**\n     * *************************************************************************\n     */\n    /* MB 971025 - Emulate Sega G80 security chip 315-0062                      */\n    /**\n     * *************************************************************************\n     */\n    public static sega_decryptPtr sega_decrypt62 = new sega_decryptPtr() {\n        public void handler(int pc,/*unsinged*/ int[] lo) {\n            /*unsigned*/\n            int i = 0;\n            /*unsigned*/\n            int b = lo[0];\n            switch (pc & 0x03) {\n                case 0x00:\n                    /* D */\n                    i = b & 0x23;\n                    i += ((b & 0xC0) >> 4);\n                    i += ((b & 0x10) << 2);\n                    i += ((b & 0x08) << 1);\n                    i += (((~b) & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x01:\n                    /* C */\n                    i = b & 0x03;\n                    i += ((b & 0x80) >> 4);\n                    i += (((~b) & 0x40) >> 1);\n                    i += ((b & 0x20) >> 1);\n                    i += ((b & 0x10) >> 2);\n                    i += ((b & 0x08) << 3);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    /* B */\n                    i = b & 0x03;\n                    i += ((b & 0x80) >> 1);\n                    i += ((b & 0x60) >> 3);\n                    i += ((~b) & 0x10);\n                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x03:\n                    /* A */\n                    i = b;\n                    break;\n            }\n            lo[0] = i;\n        }\n    };\n    /**\n     * *************************************************************************\n     */\n    /* MB 971025 - Emulate Sega G80 security chip 315-0063                      */\n    /**\n     * *************************************************************************\n     */\n    public static sega_decryptPtr sega_decrypt63 = new sega_decryptPtr() {\n        public void handler(int pc,/*unsinged*/ int[] lo) {\n            /*unsigned*/\n            int i = 0;\n            /*unsigned*/\n            int b = lo[0];\n            switch (pc & 0x09) {\n                case 0x00:\n                    /* D */\n                    i = b & 0x23;\n                    i += ((b & 0xC0) >> 4);\n                    i += ((b & 0x10) << 2);\n                    i += ((b & 0x08) << 1);\n                    i += (((~b) & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x01:\n                    /* C */\n                    i = b & 0x03;\n                    i += ((b & 0x80) >> 4);\n                    i += (((~b) & 0x40) >> 1);\n                    i += ((b & 0x20) >> 1);\n                    i += ((b & 0x10) >> 2);\n                    i += ((b & 0x08) << 3);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x08:\n                    /* B */\n                    i = b & 0x03;\n                    i += ((b & 0x80) >> 1);\n                    i += ((b & 0x60) >> 3);\n                    i += ((~b) & 0x10);\n                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x09:\n                    /* A */\n                    i = b;\n                    break;\n            }\n            lo[0] = i;\n        }\n    };\n    /**\n     * *************************************************************************\n     */\n    /* MB 971025 - Emulate Sega G80 security chip 315-0064                      */\n    /**\n     * *************************************************************************\n     */\n    public static sega_decryptPtr sega_decrypt64 = new sega_decryptPtr() {\n        public void handler(int pc,/*unsinged*/ int[] lo) {\n            /*unsigned*/\n            int i = 0;\n            /*unsigned*/\n            int b = lo[0];\n            switch (pc & 0x03) {\n                case 0x00:\n                    /* A */\n                    i = b;\n                    break;\n                case 0x01:\n                    /* B */\n                    i = b & 0x03;\n                    i += ((b & 0x80) >> 1);\n                    i += ((b & 0x60) >> 3);\n                    i += ((~b) & 0x10);\n                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x02:\n                    /* C */\n                    i = b & 0x03;\n                    i += ((b & 0x80) >> 4);\n                    i += (((~b) & 0x40) >> 1);\n                    i += ((b & 0x20) >> 1);\n                    i += ((b & 0x10) >> 2);\n                    i += ((b & 0x08) << 3);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x03:\n                    /* D */\n                    i = b & 0x23;\n                    i += ((b & 0xC0) >> 4);\n                    i += ((b & 0x10) << 2);\n                    i += ((b & 0x08) << 1);\n                    i += (((~b) & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n            }\n            lo[0] = i;\n        }\n    };\n    /**\n     * *************************************************************************\n     */\n    /* MB 971025 - Emulate Sega G80 security chip 315-0070                      */\n    /**\n     * *************************************************************************\n     */\n    public static sega_decryptPtr sega_decrypt70 = new sega_decryptPtr() {\n        public void handler(int pc,/*unsinged*/ int[] lo) {\n            /*unsigned*/\n            int i = 0;\n            /*unsigned*/\n            int b = lo[0];\n            switch (pc & 0x09) {\n                case 0x00:\n                    /* B */\n                    i = b & 0x03;\n                    i += ((b & 0x80) >> 1);\n                    i += ((b & 0x60) >> 3);\n                    i += ((~b) & 0x10);\n                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x01:\n                    /* A */\n                    i = b;\n                    break;\n                case 0x08:\n                    /* D */\n                    i = b & 0x23;\n                    i += ((b & 0xC0) >> 4);\n                    i += ((b & 0x10) << 2);\n                    i += ((b & 0x08) << 1);\n                    i += (((~b) & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x09:\n                    /* C */\n                    i = b & 0x03;\n                    i += ((b & 0x80) >> 4);\n                    i += (((~b) & 0x40) >> 1);\n                    i += ((b & 0x20) >> 1);\n                    i += ((b & 0x10) >> 2);\n                    i += ((b & 0x08) << 3);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n            }\n            lo[0] = i;\n        }\n    };\n    /**\n     * *************************************************************************\n     */\n    /* MB 971025 - Emulate Sega G80 security chip 315-0076                      */\n    /**\n     * *************************************************************************\n     */\n    public static sega_decryptPtr sega_decrypt76 = new sega_decryptPtr() {\n        public void handler(int pc,/*unsinged*/ int[] lo) {\n            /*unsigned*/\n            int i = 0;\n            /*unsigned*/\n            int b = lo[0];\n            switch (pc & 0x09) {\n                case 0x00:\n                    /* A */\n                    i = b;\n                    break;\n                case 0x01:\n                    /* B */\n                    i = b & 0x03;\n                    i += ((b & 0x80) >> 1);\n                    i += ((b & 0x60) >> 3);\n                    i += ((~b) & 0x10);\n", "answers": ["                    i += ((b & 0x08) << 2);"], "length": 1309, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "ce7af30933d25fa24c3982a8a49548083f6f94e48e102d6a"}
{"input": "", "context": "\"\"\"\nFixture to create a course and course components (XBlocks).\n\"\"\"\nimport datetime\nimport json\nimport mimetypes\nfrom collections import namedtuple\nfrom textwrap import dedent\nimport six\nfrom opaque_keys.edx.keys import CourseKey\nfrom path import Path\nfrom common.test.acceptance.fixtures import STUDIO_BASE_URL\nfrom common.test.acceptance.fixtures.base import FixtureError, XBlockContainerFixture\nclass XBlockFixtureDesc(object):\n    \"\"\"\n    Description of an XBlock, used to configure a course fixture.\n    \"\"\"\n    def __init__(self, category, display_name, data=None,\n                 metadata=None, grader_type=None, publish='make_public', **kwargs):\n        \"\"\"\n        Configure the XBlock to be created by the fixture.\n        These arguments have the same meaning as in the Studio REST API:\n            * `category`\n            * `display_name`\n            * `data`\n            * `metadata`\n            * `grader_type`\n            * `publish`\n        \"\"\"\n        self.category = category\n        self.display_name = display_name\n        self.data = data\n        self.metadata = metadata\n        self.grader_type = grader_type\n        self.publish = publish\n        self.children = []\n        self.locator = None\n        self.fields = kwargs\n    def add_children(self, *args):\n        \"\"\"\n        Add child XBlocks to this XBlock.\n        Each item in `args` is an `XBlockFixtureDesc` object.\n        Returns the `xblock_desc` instance to allow chaining.\n        \"\"\"\n        self.children.extend(args)\n        return self\n    def serialize(self):\n        \"\"\"\n        Return a JSON representation of the XBlock, suitable\n        for sending as POST data to /xblock\n        XBlocks are always set to public visibility.\n        \"\"\"\n        returned_data = {\n            'display_name': self.display_name,\n            'data': self.data,\n            'metadata': self.metadata,\n            'graderType': self.grader_type,\n            'publish': self.publish,\n            'fields': self.fields,\n        }\n        return json.dumps(returned_data)\n    def __str__(self):\n        \"\"\"\n        Return a string representation of the description.\n        Useful for error messages.\n        \"\"\"\n        return dedent(u\"\"\"\n            <XBlockFixtureDescriptor:\n                category={0},\n                data={1},\n                metadata={2},\n                grader_type={3},\n                publish={4},\n                children={5},\n                locator={6},\n            >\n        \"\"\").strip().format(\n            self.category, self.data, self.metadata,\n            self.grader_type, self.publish, self.children, self.locator\n        )\n# Description of course updates to add to the course\n# `date` is a str (e.g. \"January 29, 2014)\n# `content` is also a str (e.g. \"Test course\")\nCourseUpdateDesc = namedtuple(\"CourseUpdateDesc\", ['date', 'content'])\nclass CourseFixture(XBlockContainerFixture):\n    \"\"\"\n    Fixture for ensuring that a course exists.\n    WARNING: This fixture is NOT idempotent.  To avoid conflicts\n    between tests, you should use unique course identifiers for each fixture.\n    \"\"\"\n    def __init__(self, org, number, run, display_name, start_date=None, end_date=None, settings=None):\n        \"\"\"\n        Configure the course fixture to create a course with\n        `org`, `number`, `run`, and `display_name` (all unicode).\n        `start_date` and `end_date` are datetime objects indicating the course start and end date.\n        The default is for the course to have started in the distant past, which is generally what\n        we want for testing so students can enroll.\n        `settings` can be any additional course settings needs to be enabled. for example\n        to enable entrance exam settings would be a dict like this {\"entrance_exam_enabled\": \"true\"}\n        These have the same meaning as in the Studio restful API /course end-point.\n        \"\"\"\n        super(CourseFixture, self).__init__()  # lint-amnesty, pylint: disable=super-with-arguments\n        self._course_dict = {\n            'org': org,\n            'number': number,\n            'run': run,\n            'display_name': display_name\n        }\n        # Set a default start date to the past, but use Studio's\n        # default for the end date (meaning we don't set it here)\n        if start_date is None:\n            start_date = datetime.datetime(1970, 1, 1)\n        self._course_details = {\n            'start_date': start_date.isoformat(),\n        }\n        if end_date is not None:\n            self._course_details['end_date'] = end_date.isoformat()\n        if settings is not None:\n            self._course_details.update(settings)\n        self._updates = []\n        self._handouts = []\n        self._assets = []\n        self._textbooks = []\n        self._advanced_settings = {}\n        self._course_key = None\n    def __str__(self):\n        \"\"\"\n        String representation of the course fixture, useful for debugging.\n        \"\"\"\n        return u\"<CourseFixture: org='{org}', number='{number}', run='{run}'>\".format(**self._course_dict)\n    def add_course_details(self, course_details):\n        \"\"\"\n        Add course details to dict of course details to be updated when configure_course or install is called.\n        Arguments:\n            Dictionary containing key value pairs for course updates,\n            e.g. {'start_date': datetime.now() }\n        \"\"\"\n        if 'start_date' in course_details:\n            course_details['start_date'] = course_details['start_date'].isoformat()\n        if 'end_date' in course_details:\n            course_details['end_date'] = course_details['end_date'].isoformat()\n        self._course_details.update(course_details)\n    def add_update(self, update):\n        \"\"\"\n        Add an update to the course.  `update` should be a `CourseUpdateDesc`.\n        \"\"\"\n        self._updates.append(update)\n    def add_handout(self, asset_name):\n        \"\"\"\n        Add the handout named `asset_name` to the course info page.\n        Note that this does not actually *create* the static asset; it only links to it.\n        \"\"\"\n        self._handouts.append(asset_name)\n    def add_asset(self, asset_name):\n        \"\"\"\n        Add the asset to the list of assets to be uploaded when the install method is called.\n        \"\"\"\n        self._assets.extend(asset_name)\n    def add_textbook(self, book_title, chapters):\n        \"\"\"\n        Add textbook to the list of textbooks to be added when the install method is called.\n        \"\"\"\n        self._textbooks.append({\"chapters\": chapters, \"tab_title\": book_title})\n    def add_advanced_settings(self, settings):\n        \"\"\"\n        Adds advanced settings to be set on the course when the install method is called.\n        \"\"\"\n        self._advanced_settings.update(settings)\n    def install(self):\n        \"\"\"\n        Create the course and XBlocks within the course.\n        This is NOT an idempotent method; if the course already exists, this will\n        raise a `FixtureError`.  You should use unique course identifiers to avoid\n        conflicts between tests.\n        \"\"\"\n        self._create_course()\n        self._install_course_updates()\n        self._install_course_handouts()\n        self._install_course_textbooks()\n        self._configure_course()\n        self._upload_assets()\n        self._add_advanced_settings()\n        self._create_xblock_children(self._course_location, self.children)\n        return self\n    def configure_course(self):\n        \"\"\"\n        Configure Course Settings, take new course settings from self._course_details dict object\n        \"\"\"\n        self._configure_course()\n    @property\n    def studio_course_outline_as_json(self):\n        \"\"\"\n        Retrieves Studio course outline in JSON format.\n        \"\"\"\n        url = STUDIO_BASE_URL + '/course/' + self._course_key + \"?format=json\"\n        response = self.session.get(url, headers=self.headers)\n        if not response.ok:\n            raise FixtureError(\n                u\"Could not retrieve course outline json.  Status was {0}\".format(\n                    response.status_code))\n        try:\n            course_outline_json = response.json()\n        except ValueError:\n            raise FixtureError(  # lint-amnesty, pylint: disable=raise-missing-from\n                u\"Could not decode course outline as JSON: '{0}'\".format(response)\n            )\n        return course_outline_json\n    @property\n    def _course_location(self):\n        \"\"\"\n        Return the locator string for the course.\n        \"\"\"\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "length": 824, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "09ae4ef8effb51b554602ffbe68a496389bb548ebc5983ad"}
{"input": "", "context": "package de.tink.minecraft.plugin.safari;\n/*\nCopyright (C) 2012 Thomas Starl\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>\n*/\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Set;\nimport org.bukkit.ChatColor;\nimport org.bukkit.configuration.Configuration;\nimport org.bukkit.configuration.ConfigurationSection;\nimport org.bukkit.entity.EntityType;\nimport org.bukkit.entity.LivingEntity;\nimport org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.entity.EntityDeathEvent;\nimport org.bukkit.inventory.ItemStack;\npublic class SafariEventListener implements Listener {\n\tSafariPlugin plugin;\n\t\n\tprivate String SAFARI_FINISHED = \"Congratulations, you have successfully completed this safari!\";\n\tprivate String SAFARI_KILL_COUNTS = \"This kill is counting for your current safari! ?1/?2 mobs killed.\";\n\tprivate String SAFARI_DROPS_MESSAGES = \"Your reward for the completed safari:\";\n\tprivate String SAFARI_PLAYER_CREATED_NEW_RECORD_FEEDBACK = \"You scored a new record for this safari!\";\n\tprivate String SAFARI_PLAYER_CREATED_NEW_RECORD_WORLDSAY = \"Congratulations! ?1 managed to complete the \\\"?2\\\" safari within a new record-time of: ?3!\";\n\t\n\t@EventHandler\n\tpublic void onMobKill(EntityDeathEvent deathEvent) {\n\t\tLivingEntity killedMob = deathEvent.getEntity();\n\t\tEntityType killedMobType = deathEvent.getEntityType();\n\t\tPlayer player = killedMob.getKiller();\n\t\tif ( player == null ) {\n\t\t\treturn;\n\t\t}\n\t\tConfiguration playerConfig = plugin.getPlayerConfig();\n\t\tConfiguration safariConfig = plugin.getConfig();\n\t\tConfiguration groupsConfig = plugin.getGroupsConfig();\n\t\tConfigurationSection registeredPlayerSection = null;\n\t\tboolean playerIsInSafari = false;\n\t\tboolean killedByPlayer = false;\n\t\tboolean killIsInSafariTimeframe = false;\n\t\tboolean safariIsFulfilled = false;\n\t\tboolean newRecordForSafari = false;\n\t\tLong duration = null;\n\t\tString basePath = null;\n\t\t\n\t\tif ( player != null ) {\n\t\t\tkilledByPlayer = true;\n\t\t\tregisteredPlayerSection = playerConfig.getConfigurationSection(\"registered_players.\"+player.getName());\n\t\t}\n\t\tif ( registeredPlayerSection != null ) {\n\t\t\tplayerIsInSafari = true;\n\t\t}\n\t\tString currentSafari = playerConfig.getString(\"registered_players.\"+player.getName()+\".safari\");\n\t\t// check Safari Config for Night/Day Config\n\t\tkillIsInSafariTimeframe = false;\n\t\tLong currentHourLong = (player.getWorld().getFullTime())/1000;\n\t\tInteger currentHour = (Integer) currentHourLong.intValue();\n\t\tList<String> safariHours = safariConfig.getStringList(\"safaris.\"+currentSafari+\".valid_hours\");\n\t\tif ( safariHours == null || ( safariHours != null && safariHours.size() == 0 ) ) {\n\t\t\tkillIsInSafariTimeframe = true;\n\t\t} else {\n\t\t\tfor ( String safariHour : safariHours ) {\n\t\t\t\tInteger safariHourInt = Integer.parseInt(safariHour);\n\t\t\t\tif ( safariHourInt == currentHour ) {\n\t\t\t\t\tkillIsInSafariTimeframe = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t\t\n\t\t\n\t\t/*\n\t\t *  Skip/ignore the kill if\n\t\t *  a) the killing player is not registered for a safari\n\t\t *  or\n\t\t *  b) the mob was not killed by a player\n\t\t *  or\n\t\t *  c) the Safari is bound to a given Timeframe (e.g.: day, night, dusk, dawn) \n\t\t */\n\t\tif ( !killedByPlayer || !playerIsInSafari || !killIsInSafariTimeframe ) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t\n\t\tInteger currentSafariMobsToKill = playerConfig.getInt(\"registered_players.\"+player.getName()+\".mobs_to_kill\");\n\t\tInteger currentSafariMobsKilled = playerConfig.getInt(\"registered_players.\"+player.getName()+\".mobs_killed\");\n\t\tif ( currentSafariMobsKilled == null ) {\n\t\t\tcurrentSafariMobsKilled = 0; \n\t\t}\n\t\tString mobKey = \"safaris.\"+currentSafari+\".types_of_mobs_to_kill\";\n\t\tList<String> relevantMobs = safariConfig.getStringList(mobKey);\n\t\tboolean isRelevantMob = false;\n\t\tfor (String mobToKill : relevantMobs ) {\n\t\t\tif ( \"ANY\".equals(mobToKill) || killedMobType.getName().toLowerCase().equals(mobToKill.toLowerCase())) {\n\t\t\t\tisRelevantMob = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// add 1 to mobs_killed\n\t\tif ( isRelevantMob ) {\n\t\t\tcurrentSafariMobsKilled++;\n\t\t\tplayerConfig.set(\"registered_players.\"+player.getName()+\".mobs_killed\",currentSafariMobsKilled);\n\t\t\tplayer.sendMessage(SAFARI_KILL_COUNTS.replace(\"?1\", currentSafariMobsKilled.toString()).replace(\"?2\",currentSafariMobsToKill.toString()));\n\t\t\tplugin.savePlayerConfig();\n\t\t\tif ( currentSafariMobsKilled == currentSafariMobsToKill ) {\n\t\t\t\tplayer.sendMessage(SAFARI_FINISHED);\n\t\t\t\tplayer.sendMessage(SAFARI_DROPS_MESSAGES);\n\t\t\t\tbasePath = \"safaris.\"+currentSafari;\n\t\t\t\t// should we add drops?\n\t\t\t\tConfigurationSection addDropsSection = safariConfig.getConfigurationSection(basePath + \".addDrops\");\n\t\t\t\tif ( addDropsSection != null ){\n\t\t\t\t\tSet<String> addDrops = addDropsSection.getKeys(false);\n\t\t\t\t\tList<ItemStack> drops = deathEvent.getDrops();\n\t\t\t\t\tfor(String drop : addDrops) {\n\t\t\t\t\t\tString amount = plugin.getConfig().getString(basePath + \".addDrops.\" + drop);\n\t\t\t\t\t\tint itemAmount = parseInt(amount);\n\t\t\t\t\t\tif(itemAmount > 0) {\n\t\t\t\t\t\t\tItemStack newDrop = new ItemStack(Integer.parseInt(drop), itemAmount);\n\t\t\t\t\t\t\tdrops.add(newDrop);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// calculate time needed to complete the safari and check for new record\n\t\t\t\tLong safariStartedAt = playerConfig.getLong(\"registered_players.\"+player.getName()+\".safari_started\");\n\t\t\t\tif ( safariStartedAt == null ) {\n\t\t\t\t\tsafariStartedAt = 0L;\n\t\t\t\t}\n\t\t\t\tLong currentSafariRecordTime = safariConfig.getLong(\"safaris.\"+ currentSafari + \".current_recordtime\");\n\t\t\t\tif ( currentSafariRecordTime == null ) {\n\t\t\t\t\tcurrentSafariRecordTime = 0L;\n\t\t\t\t}\n\t\t\t\tLong now = (new Date()).getTime();\n\t\t\t\tduration = now - safariStartedAt;\n\t\t\t\t// Yippie, new record achieved!\n\t\t\t\tif ( duration < currentSafariRecordTime || currentSafariRecordTime == 0 ) {\n\t\t\t\t\tnewRecordForSafari = true;\n\t\t\t\t}\n\t\t\t\tsafariIsFulfilled = true;\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( newRecordForSafari ) {\n\t\t\tsafariConfig.set(\"safaris.\"+ currentSafari + \".current_recordtime\",duration);\n\t\t\tsafariConfig.set(\"safaris.\"+ currentSafari + \".current_recordholder\",player.getName());\n\t\t\tplugin.saveConfig();\n\t\t\tint minutes = (int) ((duration / (1000*60)) % 60);\n\t\t\tint hours   = (int) ((duration / (1000*60*60)) % 24);\n\t\t\tString durationString = hours+\":\"+minutes;\n\t\t\tplayer.sendMessage(ChatColor.BLUE+SAFARI_PLAYER_CREATED_NEW_RECORD_FEEDBACK);\n\t\t\tplugin.getServer().broadcastMessage(ChatColor.BLUE+SAFARI_PLAYER_CREATED_NEW_RECORD_WORLDSAY.replace(\"?1\",player.getName()).replace(\"?2\", currentSafari).replace(\"?3\",durationString));\n\t\t\tConfigurationSection addDropsSection = safariConfig.getConfigurationSection(basePath + \".addRecordDrops\");\n\t\t\tif ( addDropsSection != null ){\n\t\t\t\tSet<String> addDrops = addDropsSection.getKeys(false);\n\t\t\t\tList<ItemStack> drops = deathEvent.getDrops();\n\t\t\t\tfor(String drop : addDrops) {\n\t\t\t\t\tString amount = plugin.getConfig().getString(basePath + \".addRecordDrops.\" + drop);\n\t\t\t\t\tint itemAmount = parseInt(amount);\n\t\t\t\t\tif(itemAmount > 0) {\n\t\t\t\t\t\tItemStack newDrop = new ItemStack(Integer.parseInt(drop), itemAmount);\n\t\t\t\t\t\tdrops.add(newDrop);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( safariIsFulfilled ) {\n\t\t\tplugin.fulfillSafari(player);\n\t\t}\n\t}\n\t\n\t/*\n\t * Used to determine/calculate the drop(s) for the accomplished Safari\n\t * thanks to metakiwi: http://dev.bukkit.org/profiles/metakiwi/\n\t * for this nice piece of code which evolved from his\n\t * \"LessFood\" Plugin: http://dev.bukkit.org/server-mods/lessfood/\n\t * \n\t */\n\t\n\tprivate int parseInt(String number) {\n\t\tif(number == null) return 0;\n\t\tString[] splitNumber = number.split(\" \"); \n\t\tfloat chance=100;\n", "answers": ["\t\tint min = -1;"], "length": 803, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "56d619ed99235ddf5394f3518b191a845301a65eebac5d5e"}
{"input": "", "context": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\"\"\"\nAnsible module to add boundary meters.\n(c) 2013, curtis <curtis@serverascode.com>\nThis file is part of Ansible\nAnsible is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nAnsible is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'version': '1.0'}\nDOCUMENTATION = '''\nmodule: boundary_meter\nshort_description: Manage boundary meters\ndescription:\n    - This module manages boundary meters\nversion_added: \"1.3\"\nauthor: \"curtis (@ccollicutt)\"\nrequirements:\n    - Boundary API access\n    - bprobe is required to send data, but not to register a meter\noptions:\n    name:\n        description:\n            - meter name\n        required: true\n    state:\n        description:\n            - Whether to create or remove the client from boundary\n        required: false\n        default: true\n        choices: [\"present\", \"absent\"]\n    apiid:\n        description:\n            - Organizations boundary API ID\n        required: true\n    apikey:\n        description:\n            - Organizations boundary API KEY\n        required: true\n    validate_certs:\n        description:\n            - If C(no), SSL certificates will not be validated. This should only be used\n              on personally controlled sites using self-signed certificates.\n        required: false\n        default: 'yes'\n        choices: ['yes', 'no']\n        version_added: 1.5.1\nnotes:\n    - This module does not yet support boundary tags.\n'''\nEXAMPLES='''\n- name: Create meter\n  boundary_meter:\n    apiid: AAAAAA\n    apikey: BBBBBB\n    state: present\n    name: '{{ inventory_hostname }}'\n- name: Delete meter\n  boundary_meter:\n    apiid: AAAAAA\n    apikey: BBBBBB\n    state: absent\n    name: '{{ inventory_hostname }}'\n'''\nimport base64\nimport os\ntry:\n    import json\nexcept ImportError:\n    try:\n        import simplejson as json\n    except ImportError:\n        # Let snippet from module_utils/basic.py return a proper error in this case\n        pass\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.urls import fetch_url\napi_host = \"api.boundary.com\"\nconfig_directory = \"/etc/bprobe\"\n# \"resource\" like thing or apikey?\ndef auth_encode(apikey):\n    auth = base64.standard_b64encode(apikey)\n    auth.replace(\"\\n\", \"\")\n    return auth\ndef build_url(name, apiid, action, meter_id=None, cert_type=None):\n    if action == \"create\":\n        return 'https://%s/%s/meters' % (api_host, apiid)\n    elif action == \"search\":\n        return \"https://%s/%s/meters?name=%s\" % (api_host, apiid, name)\n    elif action == \"certificates\":\n        return \"https://%s/%s/meters/%s/%s.pem\" % (api_host, apiid, meter_id, cert_type)\n    elif action == \"tags\":\n        return \"https://%s/%s/meters/%s/tags\" % (api_host, apiid, meter_id)\n    elif action == \"delete\":\n        return \"https://%s/%s/meters/%s\" % (api_host, apiid, meter_id)\ndef http_request(module, name, apiid, apikey, action, data=None, meter_id=None, cert_type=None):\n    if meter_id is None:\n        url = build_url(name, apiid, action)\n    else:\n        if cert_type is None:\n            url = build_url(name, apiid, action, meter_id)\n        else:\n            url = build_url(name, apiid, action, meter_id, cert_type)\n    headers = dict()\n    headers[\"Authorization\"] = \"Basic %s\" % auth_encode(apikey)\n    headers[\"Content-Type\"] = \"application/json\"\n    return fetch_url(module, url, data=data, headers=headers)\ndef create_meter(module, name, apiid, apikey):\n    meters = search_meter(module, name, apiid, apikey)\n    if len(meters) > 0:\n        # If the meter already exists, do nothing\n        module.exit_json(status=\"Meter \" + name + \" already exists\",changed=False)\n    else:\n        # If it doesn't exist, create it\n        body = '{\"name\":\"' + name + '\"}'\n        response, info = http_request(module, name, apiid, apikey, data=body, action=\"create\")\n        if info['status'] != 200:\n            module.fail_json(msg=\"Failed to connect to api host to create meter\")\n        # If the config directory doesn't exist, create it\n        if not os.path.exists(config_directory):\n            try:\n                os.makedirs(config_directory)\n            except:\n                module.fail_json(\"Could not create \" + config_directory)\n        # Download both cert files from the api host\n        types = ['key', 'cert']\n        for cert_type in types:\n            try:\n                # If we can't open the file it's not there, so we should download it\n                cert_file = open('%s/%s.pem' % (config_directory,cert_type))\n            except IOError:\n                # Now download the file...\n                rc = download_request(module, name, apiid, apikey, cert_type)\n                if rc == False:\n                    module.fail_json(\"Download request for \" + cert_type + \".pem failed\")\n        return 0, \"Meter \" + name + \" created\"\ndef search_meter(module, name, apiid, apikey):\n    response, info = http_request(module, name, apiid, apikey, action=\"search\")\n    if info['status'] != 200:\n        module.fail_json(\"Failed to connect to api host to search for meter\")\n    # Return meters\n    return json.loads(response.read())\ndef get_meter_id(module, name, apiid, apikey):\n    # In order to delete the meter we need its id\n    meters = search_meter(module, name, apiid, apikey)\n    if len(meters) > 0:\n        return meters[0]['id']\n    else:\n        return None\ndef delete_meter(module, name, apiid, apikey):\n    meter_id = get_meter_id(module, name, apiid, apikey)\n    if meter_id is None:\n        return 1, \"Meter does not exist, so can't delete it\"\n    else:\n        response, info = http_request(module, name, apiid, apikey, action, meter_id)\n        if info['status'] != 200:\n            module.fail_json(\"Failed to delete meter\")\n        # Each new meter gets a new key.pem and ca.pem file, so they should be deleted\n", "answers": ["        types = ['cert', 'key']"], "length": 744, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "41849aea5e307f5199745185087b9ae2038c2a8673824a84"}
{"input": "", "context": "//$Header: /cvsroot/autowikibrowser/src/Project\\040select.Designer.cs,v 1.15 2006/06/15 10:14:49 wikibluemoose Exp $\nnamespace AutoWikiBrowser\n{\n    partial class MyPreferences\n    {\n        /// <summary>\n        /// Required designer variable.\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n        /// <summary>\n        /// Clean up any resources being used.\n        /// </summary>\n        /// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>\n        protected override void Dispose(bool disposing)\n        {\n            if (disposing && (components != null))\n            {\n                components.Dispose();\n                if (TextBoxFont != null) TextBoxFont.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n        #region Windows Form Designer generated code\n        /// <summary>\n        /// Required method for Designer support - do not modify\n        /// the contents of this method with the code editor.\n        /// </summary>\n        private void InitializeComponent()\n        {\n            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MyPreferences));\n            this.cmboLang = new System.Windows.Forms.ComboBox();\n            this.btnOK = new System.Windows.Forms.Button();\n            this.cmboProject = new System.Windows.Forms.ComboBox();\n            this.lblLang = new System.Windows.Forms.Label();\n            this.lblProject = new System.Windows.Forms.Label();\n            this.lblNonEnNotice = new System.Windows.Forms.Label();\n            this.btnTextBoxFont = new System.Windows.Forms.Button();\n            this.btnCancel = new System.Windows.Forms.Button();\n            this.lblPostfix = new System.Windows.Forms.Label();\n            this.cmboCustomProject = new System.Windows.Forms.ComboBox();\n            this.chkAddUsingAWBToActionSummaries = new System.Windows.Forms.CheckBox();\n            this.lblTimeoutPost = new System.Windows.Forms.Label();\n            this.chkAlwaysConfirmExit = new System.Windows.Forms.CheckBox();\n            this.chkSupressAWB = new System.Windows.Forms.CheckBox();\n            this.chkSaveArticleList = new System.Windows.Forms.CheckBox();\n            this.chkMinimize = new System.Windows.Forms.CheckBox();\n            this.lblTimeoutPre = new System.Windows.Forms.Label();\n            this.chkLowPriority = new System.Windows.Forms.CheckBox();\n            this.nudTimeOutLimit = new System.Windows.Forms.NumericUpDown();\n            this.chkBeep = new System.Windows.Forms.CheckBox();\n            this.chkFlash = new System.Windows.Forms.CheckBox();\n            this.lblDoneDo = new System.Windows.Forms.Label();\n            this.chkAutoSaveEdit = new System.Windows.Forms.CheckBox();\n            this.fontDialog = new System.Windows.Forms.FontDialog();\n            this.AutoSaveEditBoxGroup = new System.Windows.Forms.GroupBox();\n            this.btnSetFile = new System.Windows.Forms.Button();\n            this.txtAutosave = new System.Windows.Forms.TextBox();\n            this.lblAutosaveFile = new System.Windows.Forms.Label();\n            this.AutoSaveEditCont = new System.Windows.Forms.Label();\n            this.nudEditBoxAutosave = new System.Windows.Forms.NumericUpDown();\n            this.saveFile = new System.Windows.Forms.SaveFileDialog();\n            this.chkPrivacy = new System.Windows.Forms.CheckBox();\n            this.lblPrivacy = new System.Windows.Forms.Label();\n            this.tbPrefs = new System.Windows.Forms.TabControl();\n            this.tabGeneral = new System.Windows.Forms.TabPage();\n            this.tabSite = new System.Windows.Forms.TabPage();\n            this.chkPHP5Ext = new System.Windows.Forms.CheckBox();\n            this.chkIgnoreNoBots = new System.Windows.Forms.CheckBox();\n            this.tabEditing = new System.Windows.Forms.TabPage();\n            this.chkShowTimer = new System.Windows.Forms.CheckBox();\n            this.tabPrivacy = new System.Windows.Forms.TabPage();\n            this.lblSaveAsDefaultFile = new System.Windows.Forms.Label();\n            ((System.ComponentModel.ISupportInitialize)(this.nudTimeOutLimit)).BeginInit();\n            this.AutoSaveEditBoxGroup.SuspendLayout();\n            ((System.ComponentModel.ISupportInitialize)(this.nudEditBoxAutosave)).BeginInit();\n            this.tbPrefs.SuspendLayout();\n            this.tabGeneral.SuspendLayout();\n            this.tabSite.SuspendLayout();\n            this.tabEditing.SuspendLayout();\n            this.tabPrivacy.SuspendLayout();\n            this.SuspendLayout();\n            // \n            // cmboLang\n            // \n            this.cmboLang.DropDownHeight = 212;\n            this.cmboLang.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;\n            this.cmboLang.FormattingEnabled = true;\n            this.cmboLang.IntegralHeight = false;\n            this.cmboLang.Location = new System.Drawing.Point(70, 33);\n            this.cmboLang.Name = \"cmboLang\";\n            this.cmboLang.Size = new System.Drawing.Size(121, 21);\n            this.cmboLang.TabIndex = 3;\n            // \n            // btnOK\n            // \n            this.btnOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));\n            this.btnOK.DialogResult = System.Windows.Forms.DialogResult.OK;\n            this.btnOK.Location = new System.Drawing.Point(246, 228);\n            this.btnOK.Name = \"btnOK\";\n            this.btnOK.Size = new System.Drawing.Size(75, 23);\n            this.btnOK.TabIndex = 2;\n            this.btnOK.Text = \"OK\";\n            this.btnOK.Click += new System.EventHandler(this.btnApply_Click);\n            // \n            // cmboProject\n            // \n            this.cmboProject.DropDownHeight = 206;\n            this.cmboProject.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;\n            this.cmboProject.FormattingEnabled = true;\n            this.cmboProject.IntegralHeight = false;\n            this.cmboProject.Location = new System.Drawing.Point(70, 6);\n            this.cmboProject.Name = \"cmboProject\";\n            this.cmboProject.Size = new System.Drawing.Size(121, 21);\n            this.cmboProject.TabIndex = 1;\n            this.cmboProject.SelectedIndexChanged += new System.EventHandler(this.cmboProject_SelectedIndexChanged);\n            // \n            // lblLang\n            // \n            this.lblLang.Location = new System.Drawing.Point(6, 36);\n            this.lblLang.Name = \"lblLang\";\n            this.lblLang.Size = new System.Drawing.Size(58, 13);\n            this.lblLang.TabIndex = 2;\n            this.lblLang.Text = \"&Language:\";\n            this.lblLang.TextAlign = System.Drawing.ContentAlignment.TopRight;\n            // \n            // lblProject\n            // \n            this.lblProject.AutoSize = true;\n            this.lblProject.Location = new System.Drawing.Point(21, 9);\n            this.lblProject.Name = \"lblProject\";\n            this.lblProject.Size = new System.Drawing.Size(43, 13);\n            this.lblProject.TabIndex = 0;\n            this.lblProject.Text = \"&Project:\";\n            // \n            // lblNonEnNotice\n            // \n            this.lblNonEnNotice.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)\n                        | System.Windows.Forms.AnchorStyles.Right)));\n            this.lblNonEnNotice.Location = new System.Drawing.Point(6, 80);\n            this.lblNonEnNotice.Name = \"lblNonEnNotice\";\n            this.lblNonEnNotice.Size = new System.Drawing.Size(370, 26);\n            this.lblNonEnNotice.TabIndex = 6;\n            this.lblNonEnNotice.Text = \"Wikis not related to Wikimedia are not guaranteed to function properly.\";\n            // \n            // btnTextBoxFont\n            // \n            this.btnTextBoxFont.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));\n            this.btnTextBoxFont.Location = new System.Drawing.Point(267, 152);\n            this.btnTextBoxFont.Name = \"btnTextBoxFont\";\n            this.btnTextBoxFont.Size = new System.Drawing.Size(112, 23);\n            this.btnTextBoxFont.TabIndex = 5;\n            this.btnTextBoxFont.Text = \"Set edit box &font\";\n            this.btnTextBoxFont.UseVisualStyleBackColor = true;\n            this.btnTextBoxFont.Click += new System.EventHandler(this.btnTextBoxFont_Click);\n            // \n            // btnCancel\n            // \n            this.btnCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));\n            this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;\n            this.btnCancel.Location = new System.Drawing.Point(327, 228);\n            this.btnCancel.Name = \"btnCancel\";\n            this.btnCancel.Size = new System.Drawing.Size(75, 23);\n            this.btnCancel.TabIndex = 3;\n            this.btnCancel.Text = \"Cancel\";\n            // \n            // lblPostfix\n            // \n            this.lblPostfix.AutoSize = true;\n            this.lblPostfix.Location = new System.Drawing.Point(197, 36);\n            this.lblPostfix.Name = \"lblPostfix\";\n            this.lblPostfix.Size = new System.Drawing.Size(48, 13);\n            this.lblPostfix.TabIndex = 4;\n            this.lblPostfix.Text = \"lblPostfix\";\n            // \n            // cmboCustomProject\n            // \n            this.cmboCustomProject.FormattingEnabled = true;\n            this.cmboCustomProject.Location = new System.Drawing.Point(70, 33);\n            this.cmboCustomProject.Name = \"cmboCustomProject\";\n            this.cmboCustomProject.Size = new System.Drawing.Size(121, 21);\n            this.cmboCustomProject.TabIndex = 5;\n            this.cmboCustomProject.SelectedIndexChanged += new System.EventHandler(this.cmboCustomProjectChanged);\n            this.cmboCustomProject.Leave += new System.EventHandler(this.txtCustomProject_Leave);\n            this.cmboCustomProject.TextChanged += new System.EventHandler(this.cmboCustomProjectChanged);\n            // \n            // chkAddUsingAWBToActionSummaries\n            // \n            this.chkAddUsingAWBToActionSummaries.AutoSize = true;\n            this.chkAddUsingAWBToActionSummaries.Location = new System.Drawing.Point(6, 105);\n            this.chkAddUsingAWBToActionSummaries.Name = \"chkAddUsingAWBToActionSummaries\";\n            this.chkAddUsingAWBToActionSummaries.Size = new System.Drawing.Size(286, 17);\n            this.chkAddUsingAWBToActionSummaries.TabIndex = 1;\n            this.chkAddUsingAWBToActionSummaries.Text = \"Add \\\"using AWB\\\" to when deleting or protecting pages\";\n            this.chkAddUsingAWBToActionSummaries.UseVisualStyleBackColor = true;\n            // \n            // lblTimeoutPost\n            // \n            this.lblTimeoutPost.AutoSize = true;\n            this.lblTimeoutPost.Location = new System.Drawing.Point(98, 111);\n            this.lblTimeoutPost.Name = \"lblTimeoutPost\";\n            this.lblTimeoutPost.Size = new System.Drawing.Size(183, 13);\n            this.lblTimeoutPost.TabIndex = 7;\n            this.lblTimeoutPost.Text = \"seconds before web control &times out\";\n            // \n            // chkAlwaysConfirmExit\n            // \n            this.chkAlwaysConfirmExit.AutoSize = true;\n            this.chkAlwaysConfirmExit.Checked = true;\n            this.chkAlwaysConfirmExit.CheckState = System.Windows.Forms.CheckState.Checked;\n            this.chkAlwaysConfirmExit.Location = new System.Drawing.Point(6, 29);\n            this.chkAlwaysConfirmExit.Name = \"chkAlwaysConfirmExit\";\n            this.chkAlwaysConfirmExit.Size = new System.Drawing.Size(86, 17);\n            this.chkAlwaysConfirmExit.TabIndex = 2;\n            this.chkAlwaysConfirmExit.Text = \"&Warn on exit\";\n            this.chkAlwaysConfirmExit.UseVisualStyleBackColor = true;\n            // \n            // chkSupressAWB\n            // \n            this.chkSupressAWB.AutoSize = true;\n            this.chkSupressAWB.Enabled = false;\n            this.chkSupressAWB.Location = new System.Drawing.Point(70, 60);\n            this.chkSupressAWB.Name = \"chkSupressAWB\";\n            this.chkSupressAWB.Size = new System.Drawing.Size(138, 17);\n            this.chkSupressAWB.TabIndex = 5;\n            this.chkSupressAWB.Text = \"&Suppress \\\"Using AWB\\\"\";\n            this.chkSupressAWB.UseVisualStyleBackColor = true;\n            // \n            // chkSaveArticleList\n            // \n            this.chkSaveArticleList.AutoSize = true;\n            this.chkSaveArticleList.Checked = true;\n            this.chkSaveArticleList.CheckState = System.Windows.Forms.CheckState.Checked;\n            this.chkSaveArticleList.Location = new System.Drawing.Point(6, 52);\n            this.chkSaveArticleList.Name = \"chkSaveArticleList\";\n            this.chkSaveArticleList.Size = new System.Drawing.Size(154, 17);\n            this.chkSaveArticleList.TabIndex = 3;\n            this.chkSaveArticleList.Text = \"Save page &list with settings\";\n            this.chkSaveArticleList.UseVisualStyleBackColor = true;\n            // \n            // chkMinimize\n            // \n            this.chkMinimize.AutoSize = true;\n            this.chkMinimize.Location = new System.Drawing.Point(6, 6);\n            this.chkMinimize.Name = \"chkMinimize\";\n            this.chkMinimize.Size = new System.Drawing.Size(197, 17);\n            this.chkMinimize.TabIndex = 1;\n            this.chkMinimize.Text = \"&Minimize to notification area (systray)\";\n            this.chkMinimize.UseVisualStyleBackColor = true;\n            // \n            // lblTimeoutPre\n            // \n            this.lblTimeoutPre.AutoSize = true;\n            this.lblTimeoutPre.Location = new System.Drawing.Point(5, 111);\n            this.lblTimeoutPre.Name = \"lblTimeoutPre\";\n            this.lblTimeoutPre.Size = new System.Drawing.Size(29, 13);\n            this.lblTimeoutPre.TabIndex = 9;\n            this.lblTimeoutPre.Text = \"Wait\";\n            // \n            // chkLowPriority\n            // \n            this.chkLowPriority.AutoSize = true;\n            this.chkLowPriority.Location = new System.Drawing.Point(6, 75);\n            this.chkLowPriority.Name = \"chkLowPriority\";\n            this.chkLowPriority.Size = new System.Drawing.Size(250, 17);\n            this.chkLowPriority.TabIndex = 4;\n            this.chkLowPriority.Text = \"Low &thread priority (works better in background)\";\n            this.chkLowPriority.UseVisualStyleBackColor = true;\n            // \n            // nudTimeOutLimit\n            // \n            this.nudTimeOutLimit.Location = new System.Drawing.Point(37, 109);\n            this.nudTimeOutLimit.Margin = new System.Windows.Forms.Padding(0, 3, 0, 3);\n            this.nudTimeOutLimit.Maximum = new decimal(new int[] {\n            120,\n            0,\n            0,\n            0});\n            this.nudTimeOutLimit.Minimum = new decimal(new int[] {\n            30,\n            0,\n            0,\n            0});\n            this.nudTimeOutLimit.Name = \"nudTimeOutLimit\";\n            this.nudTimeOutLimit.Size = new System.Drawing.Size(58, 20);\n            this.nudTimeOutLimit.TabIndex = 8;\n            this.nudTimeOutLimit.Value = new decimal(new int[] {\n            30,\n            0,\n            0,\n            0});\n            // \n            // chkBeep\n            // \n            this.chkBeep.AutoSize = true;\n            this.chkBeep.Checked = true;\n            this.chkBeep.CheckState = System.Windows.Forms.CheckState.Checked;\n            this.chkBeep.Location = new System.Drawing.Point(178, 128);\n            this.chkBeep.Name = \"chkBeep\";\n            this.chkBeep.Size = new System.Drawing.Size(51, 17);\n            this.chkBeep.TabIndex = 4;\n            this.chkBeep.Text = \"&Beep\";\n            this.chkBeep.UseVisualStyleBackColor = true;\n            // \n            // chkFlash\n            // \n            this.chkFlash.AutoSize = true;\n            this.chkFlash.Checked = true;\n            this.chkFlash.CheckState = System.Windows.Forms.CheckState.Checked;\n            this.chkFlash.Location = new System.Drawing.Point(121, 128);\n            this.chkFlash.Name = \"chkFlash\";\n            this.chkFlash.Size = new System.Drawing.Size(51, 17);\n            this.chkFlash.TabIndex = 3;\n            this.chkFlash.Text = \"&Flash\";\n            this.chkFlash.UseVisualStyleBackColor = true;\n            // \n            // lblDoneDo\n            // \n            this.lblDoneDo.AutoSize = true;\n            this.lblDoneDo.Location = new System.Drawing.Point(9, 129);\n            this.lblDoneDo.Name = \"lblDoneDo\";\n            this.lblDoneDo.Size = new System.Drawing.Size(106, 13);\n            this.lblDoneDo.TabIndex = 2;\n            this.lblDoneDo.Text = \"When ready to save:\";\n            // \n            // chkAutoSaveEdit\n            // \n            this.chkAutoSaveEdit.AutoSize = true;\n            this.chkAutoSaveEdit.Location = new System.Drawing.Point(6, 19);\n            this.chkAutoSaveEdit.Name = \"chkAutoSaveEdit\";\n            this.chkAutoSaveEdit.Size = new System.Drawing.Size(183, 17);\n            this.chkAutoSaveEdit.TabIndex = 0;\n            this.chkAutoSaveEdit.Text = \"A&utomatically save edit box every\";\n            this.chkAutoSaveEdit.UseVisualStyleBackColor = true;\n            this.chkAutoSaveEdit.CheckedChanged += new System.EventHandler(this.chkAutoSaveEdit_CheckedChanged);\n            // \n            // AutoSaveEditBoxGroup\n            // \n            this.AutoSaveEditBoxGroup.Controls.Add(this.btnSetFile);\n            this.AutoSaveEditBoxGroup.Controls.Add(this.txtAutosave);\n            this.AutoSaveEditBoxGroup.Controls.Add(this.lblAutosaveFile);\n            this.AutoSaveEditBoxGroup.Controls.Add(this.AutoSaveEditCont);\n            this.AutoSaveEditBoxGroup.Controls.Add(this.nudEditBoxAutosave);\n            this.AutoSaveEditBoxGroup.Controls.Add(this.chkAutoSaveEdit);\n            this.AutoSaveEditBoxGroup.Location = new System.Drawing.Point(6, 6);\n            this.AutoSaveEditBoxGroup.Name = \"AutoSaveEditBoxGroup\";\n            this.AutoSaveEditBoxGroup.RightToLeft = System.Windows.Forms.RightToLeft.No;\n            this.AutoSaveEditBoxGroup.Size = new System.Drawing.Size(370, 70);\n            this.AutoSaveEditBoxGroup.TabIndex = 0;\n            this.AutoSaveEditBoxGroup.TabStop = false;\n            this.AutoSaveEditBoxGroup.Text = \"Auto save edit box\";\n            // \n            // btnSetFile\n            // \n            this.btnSetFile.Enabled = false;\n            this.btnSetFile.Location = new System.Drawing.Point(289, 40);\n            this.btnSetFile.Name = \"btnSetFile\";\n            this.btnSetFile.Size = new System.Drawing.Size(75, 23);\n            this.btnSetFile.TabIndex = 5;\n            this.btnSetFile.Text = \"&Browse\";\n            this.btnSetFile.UseVisualStyleBackColor = true;\n            this.btnSetFile.Click += new System.EventHandler(this.btnSetFile_Click);\n            // \n            // txtAutosave\n            // \n            this.txtAutosave.Location = new System.Drawing.Point(38, 42);\n            this.txtAutosave.Name = \"txtAutosave\";\n            this.txtAutosave.ReadOnly = true;\n            this.txtAutosave.Size = new System.Drawing.Size(245, 20);\n            this.txtAutosave.TabIndex = 4;\n            // \n            // lblAutosaveFile\n            // \n            this.lblAutosaveFile.AutoSize = true;\n            this.lblAutosaveFile.Location = new System.Drawing.Point(6, 45);\n            this.lblAutosaveFile.Name = \"lblAutosaveFile\";\n            this.lblAutosaveFile.Size = new System.Drawing.Size(26, 13);\n            this.lblAutosaveFile.TabIndex = 3;\n            this.lblAutosaveFile.Text = \"File:\";\n            // \n            // AutoSaveEditCont\n            // \n            this.AutoSaveEditCont.AutoSize = true;\n            this.AutoSaveEditCont.Location = new System.Drawing.Point(248, 20);\n            this.AutoSaveEditCont.Name = \"AutoSaveEditCont\";\n            this.AutoSaveEditCont.Size = new System.Drawing.Size(47, 13);\n            this.AutoSaveEditCont.TabIndex = 2;\n            this.AutoSaveEditCont.Text = \"seconds\";\n            // \n            // nudEditBoxAutosave\n            // \n            this.nudEditBoxAutosave.Location = new System.Drawing.Point(189, 18);\n            this.nudEditBoxAutosave.Maximum = new decimal(new int[] {\n            300,\n            0,\n            0,\n            0});\n            this.nudEditBoxAutosave.Minimum = new decimal(new int[] {\n            30,\n            0,\n            0,\n            0});\n            this.nudEditBoxAutosave.Name = \"nudEditBoxAutosave\";\n            this.nudEditBoxAutosave.Size = new System.Drawing.Size(58, 20);\n            this.nudEditBoxAutosave.TabIndex = 1;\n            this.nudEditBoxAutosave.Value = new decimal(new int[] {\n            30,\n            0,\n            0,\n            0});\n            // \n            // saveFile\n            // \n            this.saveFile.Filter = \".txt Files|*.txt\";\n            // \n            // chkPrivacy\n            // \n            this.chkPrivacy.AutoSize = true;\n            this.chkPrivacy.Checked = true;\n            this.chkPrivacy.CheckState = System.Windows.Forms.CheckState.Checked;\n            this.chkPrivacy.Location = new System.Drawing.Point(6, 6);\n            this.chkPrivacy.Name = \"chkPrivacy\";\n            this.chkPrivacy.Size = new System.Drawing.Size(209, 17);\n            this.chkPrivacy.TabIndex = 0;\n            this.chkPrivacy.Text = \"Include username to im&prove accuracy\";\n            // \n            // lblPrivacy\n            // \n            this.lblPrivacy.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)\n                        | System.Windows.Forms.AnchorStyles.Left)\n                        | System.Windows.Forms.AnchorStyles.Right)));\n", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "length": 1336, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "87a46bb8e4f77d817428047955d797ac5726abcbd031985c"}
{"input": "", "context": "\"\"\"\nGather information about a system and report it using plugins\nsupplied for application-specific information\n\"\"\"\n# sosreport.py\n# gather information about a system and report it\n# Copyright (C) 2006 Steve Conklin <sconklin@redhat.com>\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\nimport sys\nimport traceback\nimport os\nimport errno\nimport logging\nfrom optparse import OptionParser, Option\nfrom sos.plugins import import_plugin\nfrom sos.utilities import ImporterHelper\nfrom stat import ST_UID, ST_GID, ST_MODE, ST_CTIME, ST_ATIME, ST_MTIME, S_IMODE\nfrom time import strftime, localtime\nfrom collections import deque\nimport tempfile\nfrom sos import _sos as _\nfrom sos import __version__\nimport sos.policies\nfrom sos.archive import TarFileArchive, ZipFileArchive\nfrom sos.reporting import (Report, Section, Command, CopiedFile, CreatedFile,\n                           Alert, Note, PlainTextReport)\n# PYCOMPAT\nimport six\nfrom six.moves import zip, input\nif six.PY3:\n    from configparser import ConfigParser\nelse:\n    from ConfigParser import ConfigParser\nfrom six import print_\n# file system errors that should terminate a run\nfatal_fs_errors = (errno.ENOSPC, errno.EROFS)\ndef _format_list(first_line, items, indent=False):\n    lines = []\n    line = first_line\n    if indent:\n        newline = len(first_line) * ' '\n    else:\n        newline = \"\"\n    for item in items:\n        if len(line) + len(item) + 2 > 72:\n            lines.append(line)\n            line = newline\n        line = line + item + ', '\n    if line[-2:] == ', ':\n        line = line[:-2]\n    lines.append(line)\n    return lines\nclass TempFileUtil(object):\n    def __init__(self, tmp_dir):\n        self.tmp_dir = tmp_dir\n        self.files = []\n    def new(self):\n        fd, fname = tempfile.mkstemp(dir=self.tmp_dir)\n        fobj = open(fname, 'w')\n        self.files.append((fname, fobj))\n        return fobj\n    def clean(self):\n        for fname, f in self.files:\n            try:\n                f.flush()\n                f.close()\n            except Exception:\n                pass\n            try:\n                os.unlink(fname)\n            except Exception:\n                pass\n        self.files = []\nclass OptionParserExtended(OptionParser):\n    \"\"\" Show examples \"\"\"\n    def print_help(self, out=sys.stdout):\n        \"\"\" Prints help content including examples \"\"\"\n        OptionParser.print_help(self, out)\n        print_()\n        print_(\"Some examples:\")\n        print_()\n        print_(\" enable cluster plugin only and collect dlm lockdumps:\")\n        print_(\"   # sosreport -o cluster -k cluster.lockdump\")\n        print_()\n        print_(\" disable memory and samba plugins, turn off rpm -Va \"\n               \"collection:\")\n        print_(\"   # sosreport -n memory,samba -k rpm.rpmva=off\")\n        print_()\nclass SosOption(Option):\n    \"\"\"Allow to specify comma delimited list of plugins\"\"\"\n    ACTIONS = Option.ACTIONS + (\"extend\",)\n    STORE_ACTIONS = Option.STORE_ACTIONS + (\"extend\",)\n    TYPED_ACTIONS = Option.TYPED_ACTIONS + (\"extend\",)\n    def take_action(self, action, dest, opt, value, values, parser):\n        \"\"\" Performs list extension on plugins \"\"\"\n        if action == \"extend\":\n            try:\n                lvalue = value.split(\",\")\n            except:\n                pass\n            else:\n                values.ensure_value(dest, deque()).extend(lvalue)\n        else:\n            Option.take_action(self, action, dest, opt, value, values, parser)\nclass XmlReport(object):\n    \"\"\" Report build class \"\"\"\n    def __init__(self):\n        try:\n            import libxml2\n        except ImportError:\n            self.enabled = False\n            return\n        else:\n            self.enabled = False\n            return\n        self.doc = libxml2.newDoc(\"1.0\")\n        self.root = self.doc.newChild(None, \"sos\", None)\n        self.commands = self.root.newChild(None, \"commands\", None)\n        self.files = self.root.newChild(None, \"files\", None)\n    def add_command(self, cmdline, exitcode, stdout=None, stderr=None,\n                    f_stdout=None, f_stderr=None, runtime=None):\n        \"\"\" Appends command run into report \"\"\"\n        if not self.enabled:\n            return\n        cmd = self.commands.newChild(None, \"cmd\", None)\n        cmd.setNsProp(None, \"cmdline\", cmdline)\n        cmdchild = cmd.newChild(None, \"exitcode\", str(exitcode))\n        if runtime:\n            cmd.newChild(None, \"runtime\", str(runtime))\n        if stdout or f_stdout:\n            cmdchild = cmd.newChild(None, \"stdout\", stdout)\n            if f_stdout:\n                cmdchild.setNsProp(None, \"file\", f_stdout)\n        if stderr or f_stderr:\n            cmdchild = cmd.newChild(None, \"stderr\", stderr)\n            if f_stderr:\n                cmdchild.setNsProp(None, \"file\", f_stderr)\n    def add_file(self, fname, stats):\n        \"\"\" Appends file(s) added to report \"\"\"\n        if not self.enabled:\n            return\n        cfile = self.files.newChild(None, \"file\", None)\n        cfile.setNsProp(None, \"fname\", fname)\n        cchild = cfile.newChild(None, \"uid\", str(stats[ST_UID]))\n        cchild = cfile.newChild(None, \"gid\", str(stats[ST_GID]))\n        cfile.newChild(None, \"mode\", str(oct(S_IMODE(stats[ST_MODE]))))\n        cchild = cfile.newChild(None, \"ctime\",\n                                strftime('%a %b %d %H:%M:%S %Y',\n                                         localtime(stats[ST_CTIME])))\n        cchild.setNsProp(None, \"tstamp\", str(stats[ST_CTIME]))\n        cchild = cfile.newChild(None, \"atime\",\n                                strftime('%a %b %d %H:%M:%S %Y',\n                                         localtime(stats[ST_ATIME])))\n        cchild.setNsProp(None, \"tstamp\", str(stats[ST_ATIME]))\n        cchild = cfile.newChild(None, \"mtime\",\n                                strftime('%a %b %d %H:%M:%S %Y',\n                                         localtime(stats[ST_MTIME])))\n        cchild.setNsProp(None, \"tstamp\", str(stats[ST_MTIME]))\n    def serialize(self):\n        \"\"\" Serializes xml \"\"\"\n        if not self.enabled:\n            return\n        self.ui_log.info(self.doc.serialize(None,  1))\n    def serialize_to_file(self, fname):\n        \"\"\" Serializes to file \"\"\"\n        if not self.enabled:\n            return\n        outf = tempfile.NamedTemporaryFile()\n        outf.write(self.doc.serialize(None, 1))\n        outf.flush()\n        self.archive.add_file(outf.name, dest=fname)\n        outf.close()\nclass SoSOptions(object):\n    _list_plugins = False\n    _noplugins = []\n    _enableplugins = []\n    _onlyplugins = []\n    _plugopts = []\n    _usealloptions = False\n    _all_logs = False\n    _log_size = 10\n    _batch = False\n    _build = False\n    _verbosity = 0\n    _verify = False\n    _quiet = False\n    _debug = False\n    _case_id = \"\"\n    _customer_name = \"\"\n    _profiles = deque()\n    _list_profiles = False\n    _config_file = \"\"\n    _tmp_dir = \"\"\n    _report = True\n    _compression_type = 'auto'\n    _options = None\n    def __init__(self, args=None):\n        if args:\n            self._options = self._parse_args(args)\n        else:\n            self._options = None\n    def _check_options_initialized(self):\n        if self._options is not None:\n            raise ValueError(\"SoSOptions object already initialized \"\n                             + \"from command line\")\n    @property\n    def list_plugins(self):\n        if self._options is not None:\n            return self._options.list_plugins\n        return self._list_plugins\n    @list_plugins.setter\n    def list_plugins(self, value):\n        self._check_options_initialized()\n        if not isinstance(value, bool):\n            raise TypeError(\"SoSOptions.list_plugins expects a boolean\")\n        self._list_plugins = value\n    @property\n    def noplugins(self):\n        if self._options is not None:\n            return self._options.noplugins\n        return self._noplugins\n    @noplugins.setter\n    def noplugins(self, value):\n        self._check_options_initialized()\n        self._noplugins = value\n    @property\n    def enableplugins(self):\n        if self._options is not None:\n            return self._options.enableplugins\n        return self._enableplugins\n    @enableplugins.setter\n    def enableplugins(self, value):\n        self._check_options_initialized()\n        self._enableplugins = value\n    @property\n    def onlyplugins(self):\n        if self._options is not None:\n            return self._options.onlyplugins\n        return self._onlyplugins\n    @onlyplugins.setter\n    def onlyplugins(self, value):\n        self._check_options_initialized()\n        self._onlyplugins = value\n    @property\n    def plugopts(self):\n        if self._options is not None:\n            return self._options.plugopts\n        return self._plugopts\n    @plugopts.setter\n    def plugopts(self, value):\n        # If we check for anything it should be itterability.\n        # if not isinstance(value, list):\n        #    raise TypeError(\"SoSOptions.plugopts expects a list\")\n        self._plugopts = value\n    @property\n    def usealloptions(self):\n        if self._options is not None:\n            return self._options.usealloptions\n        return self._usealloptions\n    @usealloptions.setter\n    def usealloptions(self, value):\n        self._check_options_initialized()\n        if not isinstance(value, bool):\n            raise TypeError(\"SoSOptions.usealloptions expects a boolean\")\n        self._usealloptions = value\n    @property\n    def all_logs(self):\n        if self._options is not None:\n            return self._options.all_logs\n        return self._all_logs\n    @all_logs.setter\n    def all_logs(self, value):\n        self._check_options_initialized()\n        if not isinstance(value, bool):\n            raise TypeError(\"SoSOptions.all_logs expects a boolean\")\n        self._all_logs = value\n    @property\n    def log_size(self):\n        if self._options is not None:\n            return self._options.log_size\n        return self._log_size\n    @log_size.setter\n    def log_size(self, value):\n        self._check_options_initialized()\n        if value < 0:\n            raise ValueError(\"SoSOptions.log_size expects a value greater \"\n                             \"than zero\")\n        self._log_size = value\n    @property\n    def batch(self):\n        if self._options is not None:\n            return self._options.batch\n        return self._batch\n    @batch.setter\n    def batch(self, value):\n        self._check_options_initialized()\n        if not isinstance(value, bool):\n            raise TypeError(\"SoSOptions.batch expects a boolean\")\n        self._batch = value\n    @property\n    def build(self):\n        if self._options is not None:\n            return self._options.build\n        return self._build\n    @build.setter\n    def build(self, value):\n        self._check_options_initialized()\n        if not isinstance(value, bool):\n            raise TypeError(\"SoSOptions.build expects a boolean\")\n        self._build = value\n    @property\n    def verbosity(self):\n        if self._options is not None:\n            return self._options.verbosity\n        return self._verbosity\n    @verbosity.setter\n    def verbosity(self, value):\n        self._check_options_initialized()\n        if value < 0 or value > 3:\n            raise ValueError(\"SoSOptions.verbosity expects a value [0..3]\")\n        self._verbosity = value\n    @property\n    def verify(self):\n        if self._options is not None:\n            return self._options.verify\n        return self._verify\n    @verify.setter\n    def verify(self, value):\n        self._check_options_initialized()\n        if value < 0 or value > 3:\n            raise ValueError(\"SoSOptions.verify expects a value [0..3]\")\n        self._verify = value\n    @property\n    def quiet(self):\n        if self._options is not None:\n            return self._options.quiet\n        return self._quiet\n    @quiet.setter\n    def quiet(self, value):\n        self._check_options_initialized()\n        if not isinstance(value, bool):\n            raise TypeError(\"SoSOptions.quiet expects a boolean\")\n        self._quiet = value\n    @property\n    def debug(self):\n        if self._options is not None:\n            return self._options.debug\n        return self._debug\n    @debug.setter\n    def debug(self, value):\n        self._check_options_initialized()\n        if not isinstance(value, bool):\n            raise TypeError(\"SoSOptions.debug expects a boolean\")\n        self._debug = value\n    @property\n    def case_id(self):\n        if self._options is not None:\n            return self._options.case_id\n        return self._case_id\n    @case_id.setter\n    def case_id(self, value):\n        self._check_options_initialized()\n        self._case_id = value\n    @property\n    def customer_name(self):\n        if self._options is not None:\n            return self._options.customer_name\n        return self._customer_name\n    @customer_name.setter\n    def customer_name(self, value):\n        self._check_options_initialized()\n        self._customer_name = value\n    @property\n    def profiles(self):\n        if self._options is not None:\n            return self._options.profiles\n        return self._profiles\n    @profiles.setter\n    def profiles(self, value):\n        self._check_options_initialized()\n        self._profiles = value\n    @property\n    def list_profiles(self):\n        if self._options is not None:\n            return self._options.list_profiles\n        return self._list_profiles\n    @list_profiles.setter\n    def list_profiles(self, value):\n        self._check_options_initialized()\n        self._list_profiles = value\n    @property\n    def config_file(self):\n        if self._options is not None:\n            return self._options.config_file\n        return self._config_file\n    @config_file.setter\n    def config_file(self, value):\n        self._check_options_initialized()\n        self._config_file = value\n    @property\n    def tmp_dir(self):\n        if self._options is not None:\n            return self._options.tmp_dir\n        return self._tmp_dir\n    @tmp_dir.setter\n    def tmp_dir(self, value):\n        self._check_options_initialized()\n        self._tmp_dir = value\n    @property\n    def report(self):\n        if self._options is not None:\n            return self._options.report\n        return self._report\n    @report.setter\n    def report(self, value):\n        self._check_options_initialized()\n        if not isinstance(value, bool):\n            raise TypeError(\"SoSOptions.report expects a boolean\")\n        self._report = value\n    @property\n    def compression_type(self):\n        if self._options is not None:\n            return self._options.compression_type\n        return self._compression_type\n    @compression_type.setter\n    def compression_type(self, value):\n        self._check_options_initialized()\n        self._compression_type = value\n    def _parse_args(self, args):\n        \"\"\" Parse command line options and arguments\"\"\"\n        self.parser = parser = OptionParserExtended(option_class=SosOption)\n        parser.add_option(\"-l\", \"--list-plugins\", action=\"store_true\",\n                          dest=\"list_plugins\", default=False,\n                          help=\"list plugins and available plugin options\")\n        parser.add_option(\"-n\", \"--skip-plugins\", action=\"extend\",\n                          dest=\"noplugins\", type=\"string\",\n                          help=\"disable these plugins\", default=deque())\n        parser.add_option(\"-e\", \"--enable-plugins\", action=\"extend\",\n                          dest=\"enableplugins\", type=\"string\",\n                          help=\"enable these plugins\", default=deque())\n        parser.add_option(\"-o\", \"--only-plugins\", action=\"extend\",\n                          dest=\"onlyplugins\", type=\"string\",\n                          help=\"enable these plugins only\", default=deque())\n        parser.add_option(\"-k\", \"--plugin-option\", action=\"extend\",\n                          dest=\"plugopts\", type=\"string\",\n                          help=\"plugin options in plugname.option=value \"\n                               \"format (see -l)\",\n                          default=deque())\n        parser.add_option(\"--log-size\", action=\"store\",\n                          dest=\"log_size\", default=10, type=\"int\",\n                          help=\"set a limit on the size of collected logs\")\n        parser.add_option(\"-a\", \"--alloptions\", action=\"store_true\",\n                          dest=\"usealloptions\", default=False,\n                          help=\"enable all options for loaded plugins\")\n        parser.add_option(\"--all-logs\", action=\"store_true\",\n                          dest=\"all_logs\", default=False,\n                          help=\"collect all available logs regardless of size\")\n        parser.add_option(\"--batch\", action=\"store_true\",\n                          dest=\"batch\", default=False,\n                          help=\"batch mode - do not prompt interactively\")\n        parser.add_option(\"--build\", action=\"store_true\",\n                          dest=\"build\", default=False,\n                          help=\"preserve the temporary directory and do not \"\n                               \"package results\")\n        parser.add_option(\"-v\", \"--verbose\", action=\"count\",\n                          dest=\"verbosity\",\n                          help=\"increase verbosity\")\n        parser.add_option(\"\", \"--verify\", action=\"store_true\",\n                          dest=\"verify\", default=False,\n                          help=\"perform data verification during collection\")\n        parser.add_option(\"\", \"--quiet\", action=\"store_true\",\n                          dest=\"quiet\", default=False,\n                          help=\"only print fatal errors\")\n        parser.add_option(\"--debug\", action=\"count\",\n                          dest=\"debug\",\n                          help=\"enable interactive debugging using the python \"\n                               \"debugger\")\n        parser.add_option(\"--ticket-number\", action=\"store\",\n                          dest=\"case_id\",\n                          help=\"specify ticket number\")\n        parser.add_option(\"--case-id\", action=\"store\",\n                          dest=\"case_id\",\n                          help=\"specify case identifier\")\n        parser.add_option(\"-p\", \"--profile\", action=\"extend\",\n                          dest=\"profiles\", type=\"string\", default=deque(),\n                          help=\"enable plugins selected by the given profiles\")\n        parser.add_option(\"--list-profiles\", action=\"store_true\",\n                          dest=\"list_profiles\", default=False)\n        parser.add_option(\"--name\", action=\"store\",\n                          dest=\"customer_name\",\n                          help=\"specify report name\")\n        parser.add_option(\"--config-file\", action=\"store\",\n                          dest=\"config_file\",\n                          help=\"specify alternate configuration file\")\n        parser.add_option(\"--tmp-dir\", action=\"store\",\n                          dest=\"tmp_dir\",\n                          help=\"specify alternate temporary directory\",\n                          default=None)\n        parser.add_option(\"--no-report\", action=\"store_true\",\n                          dest=\"report\",\n                          help=\"Disable HTML/XML reporting\", default=False)\n        parser.add_option(\"-z\", \"--compression-type\", dest=\"compression_type\",\n                          help=\"compression technology to use [auto, zip, \"\n                               \"gzip, bzip2, xz] (default=auto)\",\n                          default=\"auto\")\n        return parser.parse_args(args)[0]\nclass SoSReport(object):\n    \"\"\"The main sosreport class\"\"\"\n    def __init__(self, args):\n        self.loaded_plugins = deque()\n        self.skipped_plugins = deque()\n        self.all_options = deque()\n        self.xml_report = XmlReport()\n        self.global_plugin_options = {}\n        self.archive = None\n        self.tempfile_util = None\n        self._args = args\n        try:\n            import signal\n            signal.signal(signal.SIGTERM, self.get_exit_handler())\n        except Exception:\n            pass  # not available in java, but we don't care\n        self.opts = SoSOptions(args)\n        self._set_debug()\n        self._read_config()\n        try:\n            self.policy = sos.policies.load()\n        except KeyboardInterrupt:\n            self._exit(0)\n        self._is_root = self.policy.is_root()\n        self.tmpdir = os.path.abspath(\n            self.policy.get_tmp_dir(self.opts.tmp_dir))\n        if not os.path.isdir(self.tmpdir) \\\n                or not os.access(self.tmpdir, os.W_OK):\n            # write directly to stderr as logging is not initialised yet\n            sys.stderr.write(\"temporary directory %s \" % self.tmpdir\n                             + \"does not exist or is not writable\\n\")\n            self._exit(1)\n        self.tempfile_util = TempFileUtil(self.tmpdir)\n        self._set_directories()\n    def print_header(self):\n        self.ui_log.info(\"\\n%s\\n\" % _(\"sosreport (version %s)\" %\n                         (__version__,)))\n    def get_commons(self):\n        return {\n            'cmddir': self.cmddir,\n            'logdir': self.logdir,\n            'rptdir': self.rptdir,\n            'tmpdir': self.tmpdir,\n            'soslog': self.soslog,\n            'policy': self.policy,\n            'verbosity': self.opts.verbosity,\n            'xmlreport': self.xml_report,\n            'cmdlineopts': self.opts,\n            'config': self.config,\n            'global_plugin_options': self.global_plugin_options,\n            }\n    def get_temp_file(self):\n        return self.tempfile_util.new()\n    def _set_archive(self):\n        archive_name = os.path.join(self.tmpdir,\n                                    self.policy.get_archive_name())\n        if self.opts.compression_type == 'auto':\n            auto_archive = self.policy.get_preferred_archive()\n            self.archive = auto_archive(archive_name, self.tmpdir)\n        elif self.opts.compression_type == 'zip':\n            self.archive = ZipFileArchive(archive_name, self.tmpdir)\n        else:\n            self.archive = TarFileArchive(archive_name, self.tmpdir)\n        self.archive.set_debug(True if self.opts.debug else False)\n    def _make_archive_paths(self):\n        self.archive.makedirs(self.cmddir, 0o755)\n        self.archive.makedirs(self.logdir, 0o755)\n        self.archive.makedirs(self.rptdir, 0o755)\n    def _set_directories(self):\n        self.cmddir = 'sos_commands'\n        self.logdir = 'sos_logs'\n        self.rptdir = 'sos_reports'\n    def _set_debug(self):\n        if self.opts.debug:\n            sys.excepthook = self._exception\n            self.raise_plugins = True\n        else:\n            self.raise_plugins = False\n    @staticmethod\n    def _exception(etype, eval_, etrace):\n        \"\"\" Wrap exception in debugger if not in tty \"\"\"\n        if hasattr(sys, 'ps1') or not sys.stderr.isatty():\n            # we are in interactive mode or we don't have a tty-like\n            # device, so we call the default hook\n            sys.__excepthook__(etype, eval_, etrace)\n        else:\n            import pdb\n            # we are NOT in interactive mode, print the exception...\n            traceback.print_exception(etype, eval_, etrace, limit=2,\n                                      file=sys.stdout)\n            print_()\n            # ...then start the debugger in post-mortem mode.\n            pdb.pm()\n    def _exit(self, error=0):\n        raise SystemExit()\n#        sys.exit(error)\n    def get_exit_handler(self):\n        def exit_handler(signum, frame):\n            self._exit()\n        return exit_handler\n    def _read_config(self):\n        self.config = ConfigParser()\n        if self.opts.config_file:\n            config_file = self.opts.config_file\n        else:\n            config_file = '/etc/sos.conf'\n        try:\n            self.config.readfp(open(config_file))\n        except IOError:\n            pass\n    def _setup_logging(self):\n        # main soslog\n        self.soslog = logging.getLogger('sos')\n        self.soslog.setLevel(logging.DEBUG)\n        self.sos_log_file = self.get_temp_file()\n        self.sos_log_file.close()\n        flog = logging.FileHandler(self.sos_log_file.name)\n        flog.setFormatter(logging.Formatter(\n            '%(asctime)s %(levelname)s: %(message)s'))\n        flog.setLevel(logging.INFO)\n        self.soslog.addHandler(flog)\n        if not self.opts.quiet:\n            console = logging.StreamHandler(sys.stderr)\n            console.setFormatter(logging.Formatter('%(message)s'))\n            if self.opts.verbosity and self.opts.verbosity > 1:\n                console.setLevel(logging.DEBUG)\n                flog.setLevel(logging.DEBUG)\n            elif self.opts.verbosity and self.opts.verbosity > 0:\n                console.setLevel(logging.INFO)\n                flog.setLevel(logging.DEBUG)\n            else:\n                console.setLevel(logging.WARNING)\n            self.soslog.addHandler(console)\n        # ui log\n        self.ui_log = logging.getLogger('sos_ui')\n        self.ui_log.setLevel(logging.INFO)\n        self.sos_ui_log_file = self.get_temp_file()\n        self.sos_ui_log_file.close()\n        ui_fhandler = logging.FileHandler(self.sos_ui_log_file.name)\n        ui_fhandler.setFormatter(logging.Formatter(\n            '%(asctime)s %(levelname)s: %(message)s'))\n        self.ui_log.addHandler(ui_fhandler)\n        if not self.opts.quiet:\n            ui_console = logging.StreamHandler(sys.stdout)\n            ui_console.setFormatter(logging.Formatter('%(message)s'))\n            ui_console.setLevel(logging.INFO)\n            self.ui_log.addHandler(ui_console)\n    def _finish_logging(self):\n        logging.shutdown()\n        # Make sure the log files are added before we remove the log\n        # handlers. This prevents \"No handlers could be found..\" messages\n        # from leaking to the console when running in --quiet mode when\n        # Archive classes attempt to acess the log API.\n        if getattr(self, \"sos_log_file\", None):\n            self.archive.add_file(self.sos_log_file.name,\n                                  dest=os.path.join('sos_logs', 'sos.log'))\n        if getattr(self, \"sos_ui_log_file\", None):\n            self.archive.add_file(self.sos_ui_log_file.name,\n                                  dest=os.path.join('sos_logs', 'ui.log'))\n    def _get_disabled_plugins(self):\n        disabled = []\n        if self.config.has_option(\"plugins\", \"disable\"):\n            disabled = [plugin.strip() for plugin in\n                        self.config.get(\"plugins\", \"disable\").split(',')]\n        return disabled\n    def _is_in_profile(self, plugin_class):\n        onlyplugins = self.opts.onlyplugins\n        if not len(self.opts.profiles):\n            return True\n        if not hasattr(plugin_class, \"profiles\"):\n            return False\n        if onlyplugins and not self._is_not_specified(plugin_class.name()):\n            return True\n        return any([p in self.opts.profiles for p in plugin_class.profiles])\n    def _is_skipped(self, plugin_name):\n        return (plugin_name in self.opts.noplugins or\n                plugin_name in self._get_disabled_plugins())\n    def _is_inactive(self, plugin_name, pluginClass):\n        return (not pluginClass(self.get_commons()).check_enabled() and\n                plugin_name not in self.opts.enableplugins and\n                plugin_name not in self.opts.onlyplugins)\n    def _is_not_default(self, plugin_name, pluginClass):\n        return (not pluginClass(self.get_commons()).default_enabled() and\n                plugin_name not in self.opts.enableplugins and\n                plugin_name not in self.opts.onlyplugins)\n    def _is_not_specified(self, plugin_name):\n        return (self.opts.onlyplugins and\n                plugin_name not in self.opts.onlyplugins)\n    def _skip(self, plugin_class, reason=\"unknown\"):\n        self.skipped_plugins.append((\n            plugin_class.name(),\n            plugin_class(self.get_commons()),\n            reason\n        ))\n    def _load(self, plugin_class):\n        self.loaded_plugins.append((\n            plugin_class.name(),\n            plugin_class(self.get_commons())\n        ))\n    def load_plugins(self):\n        import sos.plugins\n        helper = ImporterHelper(sos.plugins)\n        plugins = helper.get_modules()\n        self.plugin_names = deque()\n        self.profiles = set()\n        using_profiles = len(self.opts.profiles)\n        # validate and load plugins\n        for plug in plugins:\n            plugbase, ext = os.path.splitext(plug)\n            try:\n                plugin_classes = import_plugin(\n                    plugbase, tuple(self.policy.valid_subclasses))\n                if not len(plugin_classes):\n                    # no valid plugin classes for this policy\n                    continue\n                plugin_class = self.policy.match_plugin(plugin_classes)\n                if not self.policy.validate_plugin(plugin_class):\n                    self.soslog.warning(\n                        _(\"plugin %s does not validate, skipping\") % plug)\n                    if self.opts.verbosity > 0:\n                        self._skip(plugin_class, _(\"does not validate\"))\n                        continue\n                if plugin_class.requires_root and not self._is_root:\n                    self.soslog.info(_(\"plugin %s requires root permissions\"\n                                       \"to execute, skipping\") % plug)\n                    self._skip(plugin_class, _(\"requires root\"))\n                    continue\n                # plug-in is valid, let's decide whether run it or not\n                self.plugin_names.append(plugbase)\n                if hasattr(plugin_class, \"profiles\"):\n                    self.profiles.update(plugin_class.profiles)\n                in_profile = self._is_in_profile(plugin_class)\n                if not in_profile:\n                    self._skip(plugin_class, _(\"excluded\"))\n                    continue\n                if self._is_skipped(plugbase):\n                    self._skip(plugin_class, _(\"skipped\"))\n                    continue\n                if self._is_inactive(plugbase, plugin_class):\n                    self._skip(plugin_class, _(\"inactive\"))\n                    continue\n                if self._is_not_default(plugbase, plugin_class):\n                    self._skip(plugin_class, _(\"optional\"))\n                    continue\n                # true when the null (empty) profile is active\n                default_profile = not using_profiles and in_profile\n                if self._is_not_specified(plugbase) and default_profile:\n                    self._skip(plugin_class, _(\"not specified\"))\n                    continue\n                self._load(plugin_class)\n            except Exception as e:\n                self.soslog.warning(_(\"plugin %s does not install, \"\n                                    \"skipping: %s\") % (plug, e))\n                if self.raise_plugins:\n                    raise\n    def _set_all_options(self):\n        if self.opts.usealloptions:\n            for plugname, plug in self.loaded_plugins:\n                for name, parms in zip(plug.opt_names, plug.opt_parms):\n                    if type(parms[\"enabled\"]) == bool:\n                        parms[\"enabled\"] = True\n    def _set_tunables(self):\n        if self.config.has_section(\"tunables\"):\n            if not self.opts.plugopts:\n                self.opts.plugopts = deque()\n            for opt, val in self.config.items(\"tunables\"):\n                if not opt.split('.')[0] in self._get_disabled_plugins():\n                    self.opts.plugopts.append(opt + \"=\" + val)\n        if self.opts.plugopts:\n            opts = {}\n            for opt in self.opts.plugopts:\n                # split up \"general.syslogsize=5\"\n                try:\n                    opt, val = opt.split(\"=\")\n                except:\n                    val = True\n                else:\n                    if val.lower() in [\"off\", \"disable\", \"disabled\", \"false\"]:\n                        val = False\n                    else:\n                        # try to convert string \"val\" to int()\n                        try:\n                            val = int(val)\n                        except:\n                            pass\n                # split up \"general.syslogsize\"\n                try:\n                    plug, opt = opt.split(\".\")\n                except:\n                    plug = opt\n                    opt = True\n                try:\n                    opts[plug]\n                except KeyError:\n                    opts[plug] = deque()\n                opts[plug].append((opt, val))\n            for plugname, plug in self.loaded_plugins:\n                if plugname in opts:\n                    for opt, val in opts[plugname]:\n                        if not plug.set_option(opt, val):\n                            self.soslog.error('no such option \"%s\" for plugin '\n                                              '(%s)' % (opt, plugname))\n                            self._exit(1)\n                    del opts[plugname]\n            for plugname in opts.keys():\n                self.soslog.error('unable to set option for disabled or '\n                                  'non-existing plugin (%s)' % (plugname))\n    def _check_for_unknown_plugins(self):\n        import itertools\n        for plugin in itertools.chain(self.opts.onlyplugins,\n                                      self.opts.noplugins,\n                                      self.opts.enableplugins):\n            plugin_name = plugin.split(\".\")[0]\n            if plugin_name not in self.plugin_names:\n                self.soslog.fatal('a non-existing plugin (%s) was specified '\n                                  'in the command line' % (plugin_name))\n                self._exit(1)\n    def _set_plugin_options(self):\n        for plugin_name, plugin in self.loaded_plugins:\n            names, parms = plugin.get_all_options()\n            for optname, optparm in zip(names, parms):\n                self.all_options.append((plugin, plugin_name, optname,\n                                         optparm))\n    def list_plugins(self):\n        if not self.loaded_plugins and not self.skipped_plugins:\n            self.soslog.fatal(_(\"no valid plugins found\"))\n            return\n        if self.loaded_plugins:\n            self.ui_log.info(_(\"The following plugins are currently enabled:\"))\n            self.ui_log.info(\"\")\n            for (plugname, plug) in self.loaded_plugins:\n                self.ui_log.info(\" %-20s %s\" % (plugname,\n                                                plug.get_description()))\n        else:\n            self.ui_log.info(_(\"No plugin enabled.\"))\n        self.ui_log.info(\"\")\n        if self.skipped_plugins:\n            self.ui_log.info(_(\"The following plugins are currently \"\n                             \"disabled:\"))\n            self.ui_log.info(\"\")\n            for (plugname, plugclass, reason) in self.skipped_plugins:\n                self.ui_log.info(\" %-20s %-14s %s\" % (\n                    plugname,\n                    reason,\n                    plugclass.get_description()))\n        self.ui_log.info(\"\")\n        if self.all_options:\n            self.ui_log.info(_(\"The following plugin options are available:\"))\n            self.ui_log.info(\"\")\n            for (plug, plugname, optname, optparm) in self.all_options:\n                # format option value based on its type (int or bool)\n                if type(optparm[\"enabled\"]) == bool:\n                    if optparm[\"enabled\"] is True:\n                        tmpopt = \"on\"\n                    else:\n                        tmpopt = \"off\"\n                else:\n                    tmpopt = optparm[\"enabled\"]\n                self.ui_log.info(\" %-25s %-15s %s\" % (\n                    plugname + \".\" + optname, tmpopt, optparm[\"desc\"]))\n        else:\n            self.ui_log.info(_(\"No plugin options available.\"))\n        self.ui_log.info(\"\")\n        profiles = list(self.profiles)\n        profiles.sort()\n        lines = _format_list(\"Profiles: \", profiles, indent=True)\n        for line in lines:\n            self.ui_log.info(\" %s\" % line)\n        self.ui_log.info(\"\")\n        self.ui_log.info(\" %d profiles, %d plugins\"\n                         % (len(self.profiles), len(self.loaded_plugins)))\n        self.ui_log.info(\"\")\n    def list_profiles(self):\n        if not self.profiles:\n            self.soslog.fatal(_(\"no valid profiles found\"))\n            return\n        self.ui_log.info(_(\"The following profiles are available:\"))\n        self.ui_log.info(\"\")\n        def _has_prof(c):\n            return hasattr(c, \"profiles\")\n        profiles = list(self.profiles)\n        profiles.sort()\n        for profile in profiles:\n            plugins = []\n            for name, plugin in self.loaded_plugins:\n                if _has_prof(plugin) and profile in plugin.profiles:\n                    plugins.append(name)\n            lines = _format_list(\"%-15s \" % profile, plugins, indent=True)\n            for line in lines:\n                self.ui_log.info(\" %s\" % line)\n        self.ui_log.info(\"\")\n        self.ui_log.info(\" %d profiles, %d plugins\"\n                         % (len(profiles), len(self.loaded_plugins)))\n        self.ui_log.info(\"\")\n    def batch(self):\n        if self.opts.batch:\n            self.ui_log.info(self.policy.get_msg())\n        else:\n            msg = self.policy.get_msg()\n            msg += _(\"Press ENTER to continue, or CTRL-C to quit.\\n\")\n            try:\n                input(msg)\n            except:\n                self.ui_log.info(\"\")\n                self._exit()\n    def _log_plugin_exception(self, plugin_name):\n        self.soslog.error(\"%s\\n%s\" % (plugin_name, traceback.format_exc()))\n    def prework(self):\n        self.policy.pre_work()\n        try:\n            self.ui_log.info(_(\" Setting up archive ...\"))\n            compression_methods = ('auto', 'zip', 'bzip2', 'gzip', 'xz')\n            method = self.opts.compression_type\n            if method not in compression_methods:\n                compression_list = ', '.join(compression_methods)\n                self.ui_log.error(\"\")\n                self.ui_log.error(\"Invalid compression specified: \" + method)\n                self.ui_log.error(\"Valid types are: \" + compression_list)\n                self.ui_log.error(\"\")\n                self._exit(1)\n            self._set_archive()\n            self._make_archive_paths()\n            return\n        except (OSError, IOError) as e:\n            if e.errno in fatal_fs_errors:\n                self.ui_log.error(\"\")\n                self.ui_log.error(\" %s while setting up archive\" % e.strerror)\n                self.ui_log.error(\"\")\n            else:\n                raise e\n        except Exception as e:\n            import traceback\n            self.ui_log.error(\"\")\n            self.ui_log.error(\" Unexpected exception setting up archive:\")\n            traceback.print_exc(e)\n            self.ui_log.error(e)\n        self._exit(1)\n    def setup(self):\n        msg = \"[%s:%s] executing 'sosreport %s'\"\n        self.soslog.info(msg % (__name__, \"setup\", \" \".join(self._args)))\n        self.ui_log.info(_(\" Setting up plugins ...\"))\n        for plugname, plug in self.loaded_plugins:\n            try:\n                plug.archive = self.archive\n                plug.setup()\n            except KeyboardInterrupt:\n                raise\n            except (OSError, IOError) as e:\n                if e.errno in fatal_fs_errors:\n                    self.ui_log.error(\"\")\n                    self.ui_log.error(\" %s while setting up plugins\"\n                                      % e.strerror)\n                    self.ui_log.error(\"\")\n                    self._exit(1)\n            except:\n                if self.raise_plugins:\n                    raise\n                else:\n                    self._log_plugin_exception(plugname)\n    def version(self):\n        \"\"\"Fetch version information from all plugins and store in the report\n        version file\"\"\"\n        versions = []\n        versions.append(\"sosreport: %s\" % __version__)\n        for plugname, plug in self.loaded_plugins:\n            versions.append(\"%s: %s\" % (plugname, plug.version))\n        self.archive.add_string(content=\"\\n\".join(versions),\n                                dest='version.txt')\n    def collect(self):\n        self.ui_log.info(_(\" Running plugins. Please wait ...\"))\n        self.ui_log.info(\"\")\n        plugruncount = 0\n", "answers": ["        for i in zip(self.loaded_plugins):"], "length": 3043, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "0040aff29f9f6ccd4819e0793a5a66b9d75d882f56fae40c"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n##\n##\n## This file is part of Indico.\n## Copyright (C) 2002 - 2014 European Organization for Nuclear Research (CERN).\n##\n## Indico is free software; you can redistribute it and/or\n## modify it under the terms of the GNU General Public License as\n## published by the Free Software Foundation; either version 3 of the\n## License, or (at your option) any later version.\n##\n## Indico is distributed in the hope that it will be useful, but\n## WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n## General Public License for more details.\n##\n## You should have received a copy of the GNU General Public License\n## along with Indico;if not, see <http://www.gnu.org/licenses/>.\nfrom MaKaC.common.fossilize import IFossil\nfrom MaKaC.common.Conversion import Conversion\nfrom MaKaC.webinterface import urlHandlers\nfrom indico.core.fossils.event import ISupportInfoFossil\nclass ICategoryFossil(IFossil):\n    def getId(self):\n        \"\"\" Category Id \"\"\"\n    def getName(self):\n        \"\"\" Category Name \"\"\"\nclass IConferenceMinimalFossil(IFossil):\n    def getId(self):\n        \"\"\"Conference id\"\"\"\n    def getTitle(self):\n        \"\"\"Conference title\"\"\"\nclass IConferenceFossil(IConferenceMinimalFossil):\n    def getType(self):\n        \"\"\" Event type: 'conference', 'meeting', 'simple_event' \"\"\"\n    def getDescription(self):\n        \"\"\"Conference description\"\"\"\n    def getLocation(self):\n        \"\"\" Location (CERN/...) \"\"\"\n    getLocation.convert = lambda l: l and l.getName()\n    def getRoom(self):\n        \"\"\" Room (inside location) \"\"\"\n    getRoom.convert = lambda r: r and r.getName()\n    def getAddress(self):\n        \"\"\" Address of the event \"\"\"\n    getAddress.produce = lambda s: s.getLocation().getAddress() if s.getLocation() is not None else None\n    def getRoomBookingList(self):\n        \"\"\" Reservations \"\"\"\n    getRoomBookingList.convert = Conversion.reservationsList\n    getRoomBookingList.name = \"bookedRooms\"\n    def getStartDate(self):\n        \"\"\" Start Date \"\"\"\n    getStartDate.convert = Conversion.datetime\n    def getEndDate(self):\n        \"\"\" End Date \"\"\"\n    getEndDate.convert = Conversion.datetime\n    def getAdjustedStartDate(self):\n        \"\"\" Adjusted Start Date \"\"\"\n    getAdjustedStartDate.convert = Conversion.datetime\n    def getAdjustedEndDate(self):\n        \"\"\" Adjusted End Date \"\"\"\n    getAdjustedEndDate.convert = Conversion.datetime\n    def getTimezone(self):\n        \"\"\" Time zone \"\"\"\n    def getSupportInfo(self):\n        \"\"\" Support Info\"\"\"\n    getSupportInfo.result = ISupportInfoFossil\nclass IConferenceParticipationMinimalFossil(IFossil):\n    def getFirstName( self ):\n        \"\"\" Conference Participation First Name \"\"\"\n    def getFamilyName( self ):\n        \"\"\" Conference Participation Family Name \"\"\"\n    def getDirectFullName(self):\n        \"\"\" Conference Participation Full Name \"\"\"\n    getDirectFullName.name = \"name\"\nclass IConferenceParticipationFossil(IConferenceParticipationMinimalFossil):\n    def getId( self ):\n        \"\"\" Conference Participation Id \"\"\"\n    def getFullName( self ):\n        \"\"\" Conference Participation Full Name \"\"\"\n    def getFullNameNoTitle(self):\n        \"\"\" Conference Participation Full Name \"\"\"\n    getFullNameNoTitle.name = \"name\"\n    def getAffiliation(self):\n        \"\"\"Conference Participation Affiliation \"\"\"\n    def getAddress(self):\n        \"\"\"Conference Participation Address \"\"\"\n    def getEmail(self):\n        \"\"\"Conference Participation Email \"\"\"\n    def getFax(self):\n        \"\"\"Conference Participation Fax \"\"\"\n    def getTitle(self):\n        \"\"\"Conference Participation Title \"\"\"\n    def getPhone(self):\n        \"\"\"Conference Participation Phone \"\"\"\nclass IResourceBasicFossil(IFossil):\n    def getName(self):\n        \"\"\" Name of the Resource \"\"\"\n    def getDescription(self):\n        \"\"\" Resource Description \"\"\"\nclass IResourceMinimalFossil(IResourceBasicFossil):\n    def getProtectionURL(self):\n        \"\"\" Resource protection URL \"\"\"\n    getProtectionURL.produce = lambda s: str(urlHandlers.UHMaterialModification.getURL(s.getOwner()))\nclass ILinkMinimalFossil(IResourceMinimalFossil):\n    def getURL(self):\n        \"\"\" URL of the file pointed by the link \"\"\"\n    getURL.name = \"url\"\nclass ILocalFileMinimalFossil(IResourceMinimalFossil):\n    def getURL(self):\n        \"\"\" URL of the Local File \"\"\"\n    getURL.produce = lambda s: str(urlHandlers.UHFileAccess.getURL(s))\n    getURL.name = \"url\"\nclass IResourceFossil(IResourceMinimalFossil):\n    def getId(self):\n        \"\"\" Resource Id \"\"\"\n    def getDescription(self):\n        \"\"\" Resource description \"\"\"\n    def getAccessProtectionLevel(self):\n        \"\"\" Resource Access Protection Level \"\"\"\n    getAccessProtectionLevel.name = \"protection\"\n    def getReviewingState(self):\n        \"\"\" Resource reviewing state \"\"\"\n    def getPDFConversionStatus(self):\n        \"\"\" Resource PDF conversion status\"\"\"\n    getPDFConversionStatus.name = \"pdfConversionStatus\"\nclass ILinkFossil(IResourceFossil, ILinkMinimalFossil):\n    def getType(self):\n        \"\"\" Type \"\"\"\n    getType.produce = lambda s: 'external'\nclass ILocalFileFossil(IResourceFossil, ILocalFileMinimalFossil):\n    def getType(self):\n        \"\"\" Type \"\"\"\n    getType.produce = lambda s: 'stored'\nclass ILocalFileInfoFossil(IFossil):\n    def getFileName(self):\n        \"\"\" Local File Filename \"\"\"\n    getFileName.name = \"file.fileName\"\n    def getFileType(self):\n        \"\"\" Local File File Type \"\"\"\n    getFileType.name = \"file.fileType\"\n    def getCreationDate(self):\n        \"\"\" Local File Creation Date \"\"\"\n    getCreationDate.convert = lambda s: s.strftime(\"%d.%m.%Y %H:%M:%S\")\n    getCreationDate.name = \"file.creationDate\"\n    def getSize(self):\n        \"\"\" Local File File Size \"\"\"\n    getSize.name = \"file.fileSize\"\nclass ILocalFileExtendedFossil(ILocalFileFossil, ILocalFileInfoFossil):\n    pass\nclass ILocalFileAbstractMaterialFossil(IResourceBasicFossil, ILocalFileInfoFossil):\n    def getURL(self):\n        \"\"\" URL of the Local File \"\"\"\n    getURL.produce = lambda s: str(urlHandlers.UHAbstractAttachmentFileAccess.getURL(s))\n    getURL.name = \"url\"\nclass IMaterialMinimalFossil(IFossil):\n    def getId(self):\n        \"\"\" Material Id \"\"\"\n    def getTitle( self ):\n        \"\"\" Material Title \"\"\"\n    def getDescription( self ):\n        \"\"\" Material Description \"\"\"\n    def getResourceList(self):\n        \"\"\" Material Resource List \"\"\"\n    getResourceList.result = {\"MaKaC.conference.Link\": ILinkMinimalFossil, \"MaKaC.conference.LocalFile\": ILocalFileMinimalFossil}\n    getResourceList.name = \"resources\"\n    def getType(self):\n        \"\"\" The type of material\"\"\"\n    def getProtectionURL(self):\n        \"\"\" Material protection URL \"\"\"\n    getProtectionURL.produce = lambda s: str(urlHandlers.UHMaterialModification.getURL(s))\nclass IMaterialFossil(IMaterialMinimalFossil):\n    def getReviewingState(self):\n        \"\"\" Material Reviewing State \"\"\"\n    def getAccessProtectionLevel(self):\n        \"\"\" Material Access Protection Level \"\"\"\n    getAccessProtectionLevel.name = \"protection\"\n    def hasProtectedOwner(self):\n        \"\"\" Does it have a protected owner ?\"\"\"\n    def getDescription(self):\n        \"\"\" Material Description \"\"\"\n    def isHidden(self):\n        \"\"\" Whether the Material is hidden or not \"\"\"\n    isHidden.name = 'hidden'\n    def getAccessKey(self):\n        \"\"\" Material Access Key \"\"\"\n    def getResourceList(self):\n        \"\"\" Material Resource List \"\"\"\n    getResourceList.result = {\"MaKaC.conference.Link\": ILinkFossil, \"MaKaC.conference.LocalFile\": ILocalFileExtendedFossil}\n    getResourceList.name = \"resources\"\n    def getMainResource(self):\n        \"\"\" The main resource\"\"\"\n    getMainResource.result = {\"MaKaC.conference.Link\": ILinkFossil, \"MaKaC.conference.LocalFile\": ILocalFileExtendedFossil}\n    def isBuiltin(self):\n        \"\"\" The material is a default one (builtin) \"\"\"\nclass ISessionBasicFossil(IFossil):\n    def getId(self):\n        \"\"\" Session Id \"\"\"\n    def getTitle(self):\n        \"\"\" Session Title \"\"\"\n    def getDescription(self):\n        \"\"\" Session Description \"\"\"\nclass ISessionFossil(ISessionBasicFossil):\n    def getAllMaterialList(self):\n        \"\"\" Session List of all material \"\"\"\n    getAllMaterialList.result = IMaterialFossil\n    getAllMaterialList.name = \"material\"\n    def getNumSlots(self):\n        \"\"\" Number of slots present in the session \"\"\"\n    getNumSlots.produce = lambda s : len(s.getSlotList())\n    def getColor(self):\n        \"\"\" Session Color \"\"\"\n    def getAdjustedStartDate(self):\n        \"\"\" Session Start Date \"\"\"\n    getAdjustedStartDate.convert = Conversion.datetime\n    getAdjustedStartDate.name = \"startDate\"\n    def getAdjustedEndDate(self):\n        \"\"\" Session End Date \"\"\"\n    getAdjustedEndDate.convert = Conversion.datetime\n    getAdjustedEndDate.name = \"endDate\"\n    def getLocation(self):\n        \"\"\" Session Location \"\"\"\n    getLocation.convert = Conversion.locationName\n    def getAddress(self):\n        \"\"\" Session Address \"\"\"\n    getAddress.produce = lambda s: s.getLocation()\n    getAddress.convert = Conversion.locationAddress\n    def getRoom(self):\n        \"\"\" Session Room \"\"\"\n    getRoom.convert = Conversion.roomName\n    def getRoomFullName(self):\n        \"\"\" Session Room \"\"\"\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "length": 893, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "8a746e0f9e09ec54d8d1e7bf7ca7b8e16731fe8f4652e145"}
{"input": "", "context": "/*\n * Copyright (c) Mirth Corporation. All rights reserved.\n * \n * http://www.mirthcorp.com\n * \n * The software in this package is published under the terms of the MPL license a copy of which has\n * been included with this distribution in the LICENSE.txt file.\n */\npackage com.mirth.connect.client.ui;\nimport java.awt.Color;\nimport java.awt.Cursor;\nimport java.awt.Font;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.File;\nimport java.util.prefs.Preferences;\nimport javax.swing.ButtonGroup;\nimport javax.swing.JDialog;\nimport javax.swing.JFileChooser;\nimport javax.swing.JLabel;\nimport javax.swing.JSeparator;\nimport net.miginfocom.swing.MigLayout;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.SystemUtils;\nimport com.mirth.connect.client.core.ClientException;\nimport com.mirth.connect.client.ui.browsers.message.MessageBrowser;\nimport com.mirth.connect.client.ui.components.MirthButton;\nimport com.mirth.connect.client.ui.components.MirthCheckBox;\nimport com.mirth.connect.client.ui.components.MirthRadioButton;\nimport com.mirth.connect.client.ui.components.MirthTextField;\nimport com.mirth.connect.client.ui.util.DialogUtils;\nimport com.mirth.connect.donkey.model.message.Message;\nimport com.mirth.connect.model.MessageImportResult;\nimport com.mirth.connect.util.MessageImporter;\nimport com.mirth.connect.util.MessageImporter.MessageImportInvalidPathException;\nimport com.mirth.connect.util.messagewriter.MessageWriter;\nimport com.mirth.connect.util.messagewriter.MessageWriterException;\npublic class MessageImportDialog extends JDialog {\n    private String channelId;\n    private MessageBrowser messageBrowser;\n    private Frame parent;\n    private Preferences userPreferences;\n    private JLabel importFromLabel = new JLabel(\"Import From:\");\n    private ButtonGroup importFromButtonGroup = new ButtonGroup();\n    private MirthRadioButton importServerRadio = new MirthRadioButton(\"Server\");\n    private MirthRadioButton importLocalRadio = new MirthRadioButton(\"My Computer\");\n    private MirthButton browseButton = new MirthButton(\"Browse...\");\n    private JLabel fileLabel = new JLabel(\"File/Folder/Archive:\");\n    private MirthTextField fileTextField = new MirthTextField();\n    private MirthCheckBox subfoldersCheckbox = new MirthCheckBox(\"Include Sub-folders\");\n    private JLabel noteLabel = new JLabel(\"<html><i>Note: RECEIVED, QUEUED, or PENDING messages will be set to ERROR upon import.</i></html>\");\n    private MirthButton importButton = new MirthButton(\"Import\");\n    private MirthButton cancelButton = new MirthButton(\"Cancel\");\n    public MessageImportDialog() {\n        super(PlatformUI.MIRTH_FRAME);\n        parent = PlatformUI.MIRTH_FRAME;\n        userPreferences = Frame.userPreferences;\n        setTitle(\"Import Messages\");\n        setBackground(new Color(255, 255, 255));\n        setLocationRelativeTo(null);\n        setModal(true);\n        initComponents();\n        initLayout();\n        pack();\n    }\n    public void setChannelId(String channelId) {\n        this.channelId = channelId;\n    }\n    public void setMessageBrowser(MessageBrowser messageBrowser) {\n        this.messageBrowser = messageBrowser;\n    }\n    @Override\n    public void setBackground(Color color) {\n        super.setBackground(color);\n        getContentPane().setBackground(color);\n        importServerRadio.setBackground(color);\n        importLocalRadio.setBackground(color);\n        subfoldersCheckbox.setBackground(color);\n    }\n    private void initComponents() {\n        importServerRadio.setToolTipText(\"<html>Import messages from a file, folder or archive<br />on the Mirth Connect Server.</html>\");\n        importLocalRadio.setToolTipText(\"<html>Import messages from a file, folder<br />or archive on this computer.</html>\");\n        fileTextField.setToolTipText(\"<html>A file containing message(s) in XML format, or a folder/archive<br />containing files with message(s) in XML format.</html>\");\n        subfoldersCheckbox.setToolTipText(\"<html>If checked, sub-folders of the folder/archive shown above<br />will be searched for messages to import.</html>\");\n        importFromButtonGroup.add(importServerRadio);\n        importFromButtonGroup.add(importLocalRadio);\n        importServerRadio.setSelected(true);\n        subfoldersCheckbox.setSelected(true);\n        browseButton.setEnabled(false);\n        ActionListener browseSelected = new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                browseSelected();\n            }\n        };\n        ActionListener importDestinationChanged = new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                if (importServerRadio.isSelected()) {\n                    fileTextField.setText(null);\n                    browseButton.setEnabled(false);\n                } else {\n                    fileTextField.setText(null);\n                    browseButton.setEnabled(true);\n                }\n            }\n        };\n        ActionListener importMessages = new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                importMessages();\n            }\n        };\n        ActionListener cancel = new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                setVisible(false);\n            }\n        };\n        browseButton.addActionListener(browseSelected);\n        importServerRadio.addActionListener(importDestinationChanged);\n        importLocalRadio.addActionListener(importDestinationChanged);\n        importButton.addActionListener(importMessages);\n        cancelButton.addActionListener(cancel);\n        DialogUtils.registerEscapeKey(this, cancel);\n    }\n    private void browseSelected() {\n        JFileChooser chooser = new JFileChooser();\n        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);\n        if (userPreferences != null) {\n            File currentDir = new File(userPreferences.get(\"currentDirectory\", \"\"));\n            if (currentDir.exists()) {\n                chooser.setCurrentDirectory(currentDir);\n            }\n        }\n        if (chooser.showOpenDialog(getParent()) == JFileChooser.APPROVE_OPTION) {\n            if (userPreferences != null) {\n                userPreferences.put(\"currentDirectory\", chooser.getCurrentDirectory().getPath());\n            }\n            fileTextField.setText(chooser.getSelectedFile().getAbsolutePath());\n        }\n    }\n    private void initLayout() {\n        setLayout(new MigLayout(\"insets 12, wrap\", \"[right]4[left, grow]\", \"\"));\n        add(importFromLabel);\n        add(importServerRadio, \"split 3\");\n        add(importLocalRadio);\n        add(browseButton);\n        add(fileLabel);\n        add(fileTextField, \"grow\");\n        add(subfoldersCheckbox, \"skip\");\n        add(noteLabel, \"skip, grow, pushy, wrap push\");\n        add(new JSeparator(), \"grow, gaptop 6, span\");\n        add(importButton, \"skip, split 2, gaptop 4, alignx right, width 60\");\n        add(cancelButton, \"width 60\");\n    }\n    private void importMessages() {\n        if (StringUtils.isBlank(fileTextField.getText())) {\n            fileTextField.setBackground(UIConstants.INVALID_COLOR);\n            parent.alertError(parent, \"Please enter a file/folder to import.\");\n            setVisible(true);\n            return;\n        } else {\n            fileTextField.setBackground(null);\n        }\n        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n        MessageImportResult result;\n        try {\n            if (importLocalRadio.isSelected()) {\n                MessageWriter messageWriter = new MessageWriter() {\n                    @Override\n                    public boolean write(Message message) throws MessageWriterException {\n                        try {\n                            parent.mirthClient.importMessage(channelId, message);\n                        } catch (ClientException e) {\n", "answers": ["                            throw new MessageWriterException(e);"], "length": 543, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "bf41ff7b860961e0d3143422090577f24d568a16dd294083"}
{"input": "", "context": "/*\n * Axiom Stack Web Application Framework\n * Copyright (C) 2008  Axiom Software Inc.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Axiom Software Inc., 11480 Commerce Park Drive, Third Floor, Reston, VA 20191 USA\n * email: info@axiomsoftwareinc.com\n */\npackage axiom.scripting.rhino;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.apache.lucene.queryParser.QueryParser;\nimport org.apache.lucene.store.Directory;\nimport org.mozilla.javascript.NativeArray;\nimport org.mozilla.javascript.ScriptRuntime;\nimport org.mozilla.javascript.Scriptable;\nimport org.mozilla.javascript.Undefined;\nimport axiom.framework.core.Application;\nimport axiom.objectmodel.db.DbKey;\nimport axiom.objectmodel.db.PathIndexer;\nimport axiom.objectmodel.dom.LuceneManager;\nimport axiom.scripting.rhino.extensions.filter.IFilter;\nimport axiom.scripting.rhino.extensions.filter.SortObject;\nimport axiom.util.EhCacheMap;\npublic abstract class QueryDispatcher {\n\t\n    public static final String SORT_FIELD = \"sort\";\n    public static final String MAXLENGTH_FIELD = \"maxlength\";\n    public static final String UNIQUE_FIELD = \"unique\";\n    public static final String FIELD = \"field\";\n    public static final String LAYER = \"layer\";\n    public static final String VIEW = \"view\";\n\tprotected Application app;\n    protected RhinoCore core;\n    protected LuceneManager lmgr;\n    protected Directory directory;\n    protected PathIndexer pindxr;\n    protected QueryParser qparser;\n    protected EhCacheMap cache;\n\tpublic QueryDispatcher(){\n\t}\n\tpublic QueryDispatcher(Application app, String name) throws Exception {\n        this.core = null;\n        this.app = app;\n        this.lmgr = LuceneManager.getInstance(app);\n        this.directory = this.lmgr.getDirectory();\n        this.pindxr = app.getPathIndexer();\n        this.qparser = new QueryParser(LuceneManager.ID, this.lmgr.buildAnalyzer());\n        this.cache = new EhCacheMap();\n        this.cache.init(app, name);\n    }\n\tpublic void finalize() throws Throwable {\n\t\tsuper.finalize();\n\t\tthis.cache.shutdown();\n\t}\n\tpublic void shutdown() {\n\t\tthis.cache.shutdown();\n\t}\n\tpublic void setRhinoCore(RhinoCore core) {\n\t\tthis.core = core;\n\t}\n\t\n\tpublic RhinoCore getRhinoCore(){\n\t\treturn this.core;\n\t}\n    public ArrayList jsStringOrArrayToArrayList(Object value) {\n        ArrayList list = new ArrayList();\n        \n        if (value == null || value == Undefined.instance) {\n            return list;\n        }\n        \n        if (value instanceof String) {\n            list.add(value);\n        } else if (value instanceof NativeArray) {\n            final NativeArray na = (NativeArray) value;\n            final int length = (int) na.getLength();\n            for (int i = 0; i < length; i++) {\n                Object o = na.get(i, na);\n                if (o instanceof String) {\n                    list.add(o);\n                } \n            }\n        }\n        \n        return list;\n    }\n    \n    protected int getMaxResults(Object options) throws Exception {\n    \ttry{\n\t    \tint numResults = -1;\n\t    \tif (options != null) {\n\t    \t\tObject value = null;\n\t    \t\tif (options instanceof Scriptable) {\n\t    \t\t\tvalue = ((Scriptable) options).get(MAXLENGTH_FIELD, (Scriptable) options);\n\t    \t\t} else if (options instanceof java.util.Map) {\n\t    \t\t\tvalue = ((Map) options).get(MAXLENGTH_FIELD);\n\t    \t\t}\n\t    \t\tif (value != null) {\n    \t\t\t\tif (value instanceof Number) {\n    \t\t\t\t\tnumResults = ((Number) value).intValue();\n    \t\t\t\t} else if (value instanceof String) {\n    \t\t\t\t\tnumResults = Integer.parseInt((String)value);\n    \t\t\t\t}\n    \t\t\t}\n\t    \t}\n\t    \treturn numResults;\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    }\n    \n    protected boolean getUnique(Object options) throws Exception {\n    \ttry {\n\t    \tboolean unique = false;\n\t    \tif (options != null) {\n\t    \t\tObject value = null;\n\t    \t\tif (options instanceof Scriptable) {\n\t    \t\t\tvalue = ((Scriptable) options).get(UNIQUE_FIELD, (Scriptable) options);\n\t    \t\t} else if (options instanceof Map) {\n\t    \t\t\tvalue = ((Map) options).get(UNIQUE_FIELD);\n\t    \t\t}\n\t    \t\tif (value != null) {\n    \t\t\t\tif (value instanceof Boolean) {\n    \t\t\t\t\tunique = ((Boolean) value).booleanValue();\n    \t\t\t\t}\n    \t\t\t}\n\t    \t}\n\t    \treturn unique;\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    }\n    protected String getField(Object options) throws Exception {\n    \ttry {\n\t    \tString field = null;\n\t    \tif (options != null) {\n\t    \t\tObject value = null;\n\t    \t\tif (options instanceof Scriptable) {\n\t    \t\t\tvalue = ((Scriptable) options).get(FIELD, (Scriptable) options);\n\t    \t\t} else if (options instanceof Map) {\n\t    \t\t\tvalue = ((Map) options).get(FIELD);\n\t    \t\t}\n\t\t    \tif (value != null) {\n\t\t\t\t\tif (value instanceof String) {\n\t\t\t\t\t\tfield = (String)value;\n\t\t\t\t\t}\n\t\t    \t}\n\t    \t}\n\t    \treturn field;\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    }\n    \n    protected SortObject getSortObject(Object options) throws Exception {\n    \ttry {\n    \t\tSortObject theSort = null;\n    \t\tif (options != null) {\n    \t\t\tObject value = null;\n    \t\t\tif (options instanceof Scriptable) {\n    \t\t\t\tvalue = ((Scriptable) options).get(SORT_FIELD, (Scriptable) options);\n    \t\t\t} else if (options instanceof Map) {\n    \t\t\t\tvalue = ((Map) options).get(SORT_FIELD);\n    \t\t\t}\n\t\t    \tif (value != null) {\n\t\t       \t\tif (value instanceof Scriptable) {\n\t\t       \t\t\tif (value instanceof SortObject) {\n\t\t       \t\t\t\ttheSort = (SortObject)value;\n\t\t       \t\t\t} else {\n\t\t       \t\t\t\ttheSort = new SortObject(value);\n\t\t       \t\t\t}\n\t\t       \t\t}\n\t\t    \t}\n    \t\t}\n    \t\treturn theSort;\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    }\n    \n    protected int getLayer(Object options) throws Exception {\n\t\tint layer = -1;\n    \ttry {\n    \t\tif (options != null) {\n    \t\t\tObject value = null;\n    \t\t\tif (options instanceof Scriptable) {\n    \t\t\t\tvalue = ((Scriptable) options).get(LAYER, (Scriptable) options);\n    \t\t\t} else if (options instanceof Map) {\n    \t\t\t\tvalue = ((Map) options).get(LAYER);\n    \t\t\t}\n\t\t    \tif (value != null) {\n\t\t       \t\tif (value instanceof Scriptable) {\n", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "length": 762, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "5e5cdb6218b379ec44de7c00d3f6ce7f79c90829d6cf905f"}
{"input": "", "context": "/**\n * Copyright 2012 Facebook\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.facebook.widget;\nimport android.graphics.Bitmap;\nimport android.graphics.drawable.BitmapDrawable;\nimport android.graphics.drawable.Drawable;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;\nimport com.facebook.*;\nimport com.facebook.android.R;\nimport com.facebook.model.GraphUser;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.List;\n/**\n * A Fragment that displays a Login/Logout button as well as the user's\n * profile picture and name when logged in.\n * <p/>\n * This Fragment will create and use the active session upon construction\n * if it has the available data (if the app ID is specified in the manifest).\n * It will also open the active session if it does not require user interaction\n * (i.e. if the session is in the {@link com.facebook.SessionState#CREATED_TOKEN_LOADED} state.\n * Developers can override the use of the active session by calling\n * the {@link #setSession(com.facebook.Session)} method.\n */\npublic class UserSettingsFragment extends FacebookFragment {\n    private static final String NAME = \"name\";\n    private static final String ID = \"id\";\n    private static final String PICTURE = \"picture\";\n    private static final String FIELDS = \"fields\";\n    \n    private static final String REQUEST_FIELDS = TextUtils.join(\",\", new String[] {ID, NAME, PICTURE});\n    private LoginButton loginButton;\n    private LoginButton.LoginButtonProperties loginButtonProperties = new LoginButton.LoginButtonProperties();\n    private TextView connectedStateLabel;\n    private GraphUser user;\n    private Session userInfoSession; // the Session used to fetch the current user info\n    private Drawable userProfilePic;\n    private String userProfilePicID;\n    private Session.StatusCallback sessionStatusCallback;\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.com_facebook_usersettingsfragment, container, false);\n        loginButton = (LoginButton) view.findViewById(R.id.com_facebook_usersettingsfragment_login_button);\n        loginButton.setProperties(loginButtonProperties);\n        loginButton.setFragment(this);\n        Session session = getSession();\n        if (session != null && !session.equals(Session.getActiveSession())) {\n            loginButton.setSession(session);\n        }\n        connectedStateLabel = (TextView) view.findViewById(R.id.com_facebook_usersettingsfragment_profile_name);\n        \n        // if no background is set for some reason, then default to Facebook blue\n        if (view.getBackground() == null) {\n            view.setBackgroundColor(getResources().getColor(R.color.com_facebook_blue));\n        } else {\n            view.getBackground().setDither(true);\n        }\n        return view;\n    }\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRetainInstance(true);\n    }\n    /**\n     * @throws com.facebook.FacebookException if errors occur during the loading of user information\n     */\n    @Override\n    public void onResume() {\n        super.onResume();\n        fetchUserInfo();\n        updateUI();\n    }\n    /**\n     * Set the Session object to use instead of the active Session. Since a Session\n     * cannot be reused, if the user logs out from this Session, and tries to\n     * log in again, a new Active Session will be used instead.\n     * <p/>\n     * If the passed in session is currently opened, this method will also attempt to\n     * load some user information for display (if needed).\n     *\n     * @param newSession the Session object to use\n     * @throws com.facebook.FacebookException if errors occur during the loading of user information\n     */\n    @Override\n    public void setSession(Session newSession) {\n        super.setSession(newSession);\n        if (loginButton != null) {\n            loginButton.setSession(newSession);\n        }\n        fetchUserInfo();\n        updateUI();\n    }\n    /**\n     * Sets the default audience to use when the session is opened.\n     * This value is only useful when specifying write permissions for the native\n     * login dialog.\n     *\n     * @param defaultAudience the default audience value to use\n     */\n    public void setDefaultAudience(SessionDefaultAudience defaultAudience) {\n        loginButtonProperties.setDefaultAudience(defaultAudience);\n    }\n    /**\n     * Gets the default audience to use when the session is opened.\n     * This value is only useful when specifying write permissions for the native\n     * login dialog.\n     *\n     * @return the default audience value to use\n     */\n    public SessionDefaultAudience getDefaultAudience() {\n        return loginButtonProperties.getDefaultAudience();\n    }\n    /**\n     * Set the permissions to use when the session is opened. The permissions here\n     * can only be read permissions. If any publish permissions are included, the login\n     * attempt by the user will fail. The LoginButton can only be associated with either\n     * read permissions or publish permissions, but not both. Calling both\n     * setReadPermissions and setPublishPermissions on the same instance of LoginButton\n     * will result in an exception being thrown unless clearPermissions is called in between.\n     * <p/>\n     * This method is only meaningful if called before the session is open. If this is called\n     * after the session is opened, and the list of permissions passed in is not a subset\n     * of the permissions granted during the authorization, it will log an error.\n     * <p/>\n     * Since the session can be automatically opened when the UserSettingsFragment is constructed,\n     * it's important to always pass in a consistent set of permissions to this method, or\n     * manage the setting of permissions outside of the LoginButton class altogether\n     * (by managing the session explicitly).\n     *\n     * @param permissions the read permissions to use\n     *\n     * @throws UnsupportedOperationException if setPublishPermissions has been called\n     */\n    public void setReadPermissions(List<String> permissions) {\n        loginButtonProperties.setReadPermissions(permissions, getSession());\n    }\n    /**\n     * Set the permissions to use when the session is opened. The permissions here\n     * should only be publish permissions. If any read permissions are included, the login\n     * attempt by the user may fail. The LoginButton can only be associated with either\n     * read permissions or publish permissions, but not both. Calling both\n     * setReadPermissions and setPublishPermissions on the same instance of LoginButton\n     * will result in an exception being thrown unless clearPermissions is called in between.\n     * <p/>\n     * This method is only meaningful if called before the session is open. If this is called\n     * after the session is opened, and the list of permissions passed in is not a subset\n     * of the permissions granted during the authorization, it will log an error.\n     * <p/>\n     * Since the session can be automatically opened when the LoginButton is constructed,\n     * it's important to always pass in a consistent set of permissions to this method, or\n     * manage the setting of permissions outside of the LoginButton class altogether\n     * (by managing the session explicitly).\n     *\n     * @param permissions the read permissions to use\n     *\n     * @throws UnsupportedOperationException if setReadPermissions has been called\n     * @throws IllegalArgumentException if permissions is null or empty\n     */\n    public void setPublishPermissions(List<String> permissions) {\n        loginButtonProperties.setPublishPermissions(permissions, getSession());\n    }\n    /**\n     * Clears the permissions currently associated with this LoginButton.\n     */\n    public void clearPermissions() {\n        loginButtonProperties.clearPermissions();\n    }\n    /**\n     * Sets the login behavior for the session that will be opened. If null is specified,\n     * the default ({@link SessionLoginBehavior SessionLoginBehavior.SSO_WITH_FALLBACK}\n     * will be used.\n     *\n     * @param loginBehavior The {@link SessionLoginBehavior SessionLoginBehavior} that\n     *                      specifies what behaviors should be attempted during\n     *                      authorization.\n     */\n    public void setLoginBehavior(SessionLoginBehavior loginBehavior) {\n        loginButtonProperties.setLoginBehavior(loginBehavior);\n    }\n    /**\n     * Gets the login behavior for the session that will be opened. If null is returned,\n     * the default ({@link SessionLoginBehavior SessionLoginBehavior.SSO_WITH_FALLBACK}\n     * will be used.\n     *\n     * @return loginBehavior The {@link SessionLoginBehavior SessionLoginBehavior} that\n     *                      specifies what behaviors should be attempted during\n     *                      authorization.\n     */\n    public SessionLoginBehavior getLoginBehavior() {\n        return loginButtonProperties.getLoginBehavior();\n    }\n    /**\n     * Sets an OnErrorListener for this instance of UserSettingsFragment to call into when\n     * certain exceptions occur.\n     *\n     * @param onErrorListener The listener object to set\n     */\n    public void setOnErrorListener(LoginButton.OnErrorListener onErrorListener) {\n        loginButtonProperties.setOnErrorListener(onErrorListener);\n    }\n    /**\n     * Returns the current OnErrorListener for this instance of UserSettingsFragment.\n     *\n     * @return The OnErrorListener\n     */\n    public LoginButton.OnErrorListener getOnErrorListener() {\n        return loginButtonProperties.getOnErrorListener();\n    }\n    /**\n     * Sets the callback interface that will be called whenever the status of the Session\n     * associated with this LoginButton changes.\n     *\n     * @param callback the callback interface\n     */\n    public void setSessionStatusCallback(Session.StatusCallback callback) {\n        this.sessionStatusCallback = callback;\n    }\n    /**\n     * Sets the callback interface that will be called whenever the status of the Session\n     * associated with this LoginButton changes.\n     * @return the callback interface\n     */\n    public Session.StatusCallback getSessionStatusCallback() {\n        return sessionStatusCallback;\n    }\n    @Override\n    protected void onSessionStateChange(SessionState state, Exception exception) {\n        fetchUserInfo();\n        updateUI();\n        if (sessionStatusCallback != null) {\n            sessionStatusCallback.call(getSession(), state, exception);\n        }\n    }\n    // For Testing Only\n    List<String> getPermissions() {\n        return loginButtonProperties.getPermissions();\n    }\n    \n    private void fetchUserInfo() {\n        final Session currentSession = getSession();\n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "length": 1328, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "1d185bc0190b4d50ec508a59208f05925712f6455d6ece65"}
{"input": "", "context": "package info.deskchan.talking_system;\nimport info.deskchan.core_utils.TextOperations;\nimport org.json.JSONObject;\nimport java.util.*;\npublic class StandardEmotionsController implements EmotionsController{\n\tprivate static class Emotion{\n\t\t/** Emotion name. **/\n\t\tpublic String name;\n\t\t/** Array of pairs [feature index, force multiplier]. **/\n\t\tpublic int[][] influences;\n\t\t/** Current emotion strength. **/\n\t\tpublic int strength = 0;\n\t\t/** Chance of getting into this emotion state. **/\n\t\tpublic float chance = 1;\n\t\tpublic Emotion(String name, int[][] influences) {\n\t\t\tthis.name = name;\n\t\t\tthis.influences = influences;\n\t\t}\n\t\tpublic Emotion(Emotion copy) {\n\t\t\tthis.name = copy.name;\n\t\t\tthis.influences = new int[copy.influences.length][2];\n\t\t\tfor (int i=0; i<influences.length; i++) {\n\t\t\t\tinfluences[i][0] = copy.influences[i][0];\n\t\t\t\tinfluences[i][1] = copy.influences[i][1];\n\t\t\t}\n\t\t}\n\t\tpublic String toString(){\n\t\t\tString print = name + \", chance = \" + chance + \", strength = \" + strength + \"\\n\";\n\t\t\tfor(int i=0; i<influences.length; i++)\n\t\t\t\tprint += \"[feature: \" + CharacterFeatures.getFeatureName(influences[i][0]) + \", force=\" + influences[i][1] + \"\\n\";\n\t\t\treturn print;\n\t\t}\n\t}\n\tprivate static final Emotion[] STANDARD_EMOTIONS = {\n\t\t\tnew Emotion(\"happiness\", new int[][]{{0,  1}, {1,  1}, {4,  2}, {7,  1}}),\n\t\t\tnew Emotion(\"sorrow\",    new int[][]{{2, -1}, {3, -2}, {4, -2}}),\n\t\t\tnew Emotion(\"fun\",       new int[][]{{1,  2}, {3,  2}, {4,  1}}),\n\t\t\tnew Emotion(\"anger\",     new int[][]{{0, -2}, {1,  2}, {2,  1}, {3,  2}, {4,  -1}, {7, -2}}),\n\t\t\tnew Emotion(\"confusion\", new int[][]{{1, -1}, {2, -1}, {5, -1}}),\n\t\t\tnew Emotion(\"affection\", new int[][]{{1,  2}, {3,  1}, {7,  1}})\n\t};\n\tprivate Emotion[] emotions = Arrays.copyOf(STANDARD_EMOTIONS, STANDARD_EMOTIONS.length);\n\tprivate Emotion currentEmotion = null;\n\tStandardEmotionsController() {\n\t\tnormalize();\n\t\treset();\n\t}\n\tprivate UpdateHandler onUpdate = null;\n\tpublic void setUpdater(UpdateHandler handler){\n\t\tonUpdate = handler;\n\t}\n\tprivate void tryInform(){\n\t\tif (onUpdate != null) onUpdate.onUpdate();\n\t}\n\tpublic void reset() {\n\t\tcurrentEmotion = null;\n\t\ttryInform();\n\t}\n\t\n\tpublic String getCurrentEmotionName() {\n\t\treturn currentEmotion != null ? currentEmotion.name : null;\n\t}\n\tpublic void raiseEmotion(String emotionName) {\n\t\traiseEmotion(emotionName, 1);\n\t}\n\tpublic void raiseEmotion(String emotionName, int value) {\n\t\tif (currentEmotion != null){\n\t\t\tcurrentEmotion.strength -= value;\n\t\t\tif (currentEmotion.strength <= 0)\n\t\t\t\tcurrentEmotion = null;\n\t\t\telse return;\n\t\t}\n\t\tfor (Emotion emotion : emotions){\n\t\t\tif (emotion.name.equals(emotionName)){\n\t\t\t\tcurrentEmotion = emotion;\n\t\t\t\temotion.strength = value;\n\t\t\t\ttryInform();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tMain.log(\"No emotion by name: \" + emotionName);\n\t}\n\tpublic void raiseRandomEmotion(){\n\t\tif (currentEmotion != null){\n\t\t\tcurrentEmotion.strength += new Random().nextInt(2) - 1;\n\t\t\tif (currentEmotion.strength <= 0){\n\t\t\t\tcurrentEmotion = null;\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tfloat chance = (float) Math.random();\n\t\tfor (Emotion emotion : emotions){\n\t\t\tif (emotion.chance > chance){\n\t\t\t\tcurrentEmotion = emotion;\n\t\t\t\temotion.strength = 1 + new Random().nextInt(2);\n\t\t\t\ttryInform();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tchance -= emotion.chance;\n\t\t}\n\t}\n\tpublic List<String> getEmotionsList(){\n\t\tList<String> res = new ArrayList<>();\n\t\tfor (Emotion e : emotions)\n\t\t\tres.add(e.name);\n\t\treturn res;\n\t}\n\tpublic boolean phraseMatches(Phrase phrase){\n\t\tSet<String> allowedEmotions = phrase.getTag(\"emotion\");\n\t\tif (allowedEmotions == null || allowedEmotions.size() == 0){\n\t\t\treturn true;\n\t\t}\n\t\tif (currentEmotion != null){\n\t\t\treturn allowedEmotions.contains(currentEmotion.name);\n\t\t}\n\t\treturn false;\n\t}\n\tpublic CharacterController construct(CharacterController target) {\n\t\tif (currentEmotion == null) return target;\n\t\tCharacterController New = target.copy();\n\t\tfor (int i = 0; i < currentEmotion.influences.length; i++) {\n\t\t\tint index =  currentEmotion.influences[i][0], multiplier = currentEmotion.influences[i][1];\n\t\t\tNew.setValue(currentEmotion.influences[i][0], target.getValue(index) + currentEmotion.strength * multiplier);\n\t\t}\n\t\treturn New;\n\t}\n\tpublic void setFromJSON(JSONObject json) {\n\t\tif (json == null || json.keySet().size() == 0) return;\n\t\tList<Emotion> newEmotions = new ArrayList<>();\n\t\tfor (String emotionName : json.keySet()) {\n\t\t\tif (!(json.get(emotionName) instanceof JSONObject)) continue;\n\t\t\tJSONObject obj = json.getJSONObject(emotionName);\n\t\t\tList<int[]> influencesList = new ArrayList<>();\n\t\t\tfor (String feature : obj.keySet()) {\n\t\t\t\tint index = CharacterFeatures.getFeatureIndex(feature);\n\t\t\t\tif (index < 0) continue;\n\t\t\t\ttry {\n\t\t\t\t\tint force = obj.getInt(feature);\n\t\t\t\t\tinfluencesList.add(new int[]{index, force});\n\t\t\t\t} catch (Exception e){ }\n\t\t\t}\n\t\t\tif (influencesList.size() > 0) {\n\t\t\t\tint[][] influences = new int[influencesList.size()][];\n\t\t\t\tfor (int i = 0; i < influencesList.size(); i++)\n\t\t\t\t\tinfluences[i] = influencesList.get(i);\n\t\t\t\tEmotion emotion = new Emotion(emotionName, influences);\n\t\t\t\tif (obj.has(\"chance\")) emotion.chance = (float) obj.getDouble(\"chance\");\n\t\t\t\tnewEmotions.add(emotion);\n\t\t\t} else {\n\t\t\t\tfor (int i=0; i<emotions.length; i++)\n\t\t\t\t\tif (emotions[i].name.equals(emotionName)){\n\t\t\t\t\t\tEmotion emotion = new Emotion(emotions[i]);\n\t\t\t\t\t\tif (obj.has(\"chance\")) emotion.chance = (float) obj.getDouble(\"chance\");\n\t\t\t\t\t\tnewEmotions.add(emotion);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\temotions = newEmotions.toArray(new Emotion[newEmotions.size()]);\n\t\tnormalize();\n\t\treset();\n\t}\n\tpublic JSONObject toJSON() {\n\t\treturn new JSONObject();\n\t}\n\tprivate void normalize(){\n\t\tfloat sum = 0;\n", "answers": ["\t\tfor(Emotion emotion : emotions)"], "length": 630, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "2728509e7278c4d21b0ffa379c7ac4c266c2cb3953c53b51"}
{"input": "", "context": "# vim: set expandtab sw=4 ts=4:\n#\n# Unit tests for BuildJob class\n#\n# Copyright (C) 2014-2016 Dieter Adriaenssens <ruleant@users.sourceforge.net>\n#\n# This file is part of buildtimetrend/python-lib\n# <https://github.com/buildtimetrend/python-lib/>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\nimport buildtimetrend\nfrom buildtimetrend.settings import Settings\nfrom buildtimetrend.buildjob import BuildJob\nfrom buildtimetrend.stages import Stage\nfrom buildtimetrend.stages import Stages\nfrom formencode.doctest_xml_compare import xml_compare\nfrom buildtimetrend.test import constants\nfrom lxml import etree\nimport unittest\nclass TestBuildJob(unittest.TestCase):\n    \"\"\"Unit tests for BuildJob class\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Set up test fixture.\"\"\"\n        # show full diff in case of assert mismatch\n        cls.maxDiff = None\n    def setUp(self):\n        \"\"\"Initialise test environment before each test.\"\"\"\n        self.build = BuildJob()\n        # reinitialise settings\n        Settings().__init__()\n    def test_novalue(self):\n        \"\"\"Test freshly initialised Buildjob object.\"\"\"\n        # number of stages should be zero\n        self.assertEqual(0, len(self.build.stages.stages))\n        self.assertEqual(0, self.build.properties.get_size())\n        # get properties should return zero duration\n        self.assertDictEqual({'duration': 0}, self.build.get_properties())\n        # dict should be empty\n        self.assertDictEqual(\n            {'duration': 0, 'stages': []},\n            self.build.to_dict()\n        )\n        # list should be empty\n        self.assertListEqual([], self.build.stages_to_list())\n        # xml shouldn't contain items\n        self.assertEqual(\n            b'<build><stages/></build>', etree.tostring(self.build.to_xml()))\n        self.assertEqual(\n            b'<build>\\n'\n            b'  <stages/>\\n'\n            b'</build>\\n', self.build.to_xml_string())\n    def test_nofile(self):\n        \"\"\"Test creating BuildJob instance with invalid filename.\"\"\"\n        # number of stages should be zero when file doesn't exist\n        self.build = BuildJob('nofile.csv')\n        self.assertEqual(0, len(self.build.stages.stages))\n        self.build = BuildJob('')\n        self.assertEqual(0, len(self.build.stages.stages))\n    def test_end_timestamp(self):\n        \"\"\"Test setting end timestamp\"\"\"\n        self.assertEqual(0, self.build.stages.end_timestamp)\n        self.build = BuildJob('', 123)\n        self.assertEqual(123, self.build.stages.end_timestamp)\n    def test_set_started_at(self):\n        \"\"\"Test setting started_at timestamp\"\"\"\n        self.assertEqual(None, self.build.properties.get_item(\"started_at\"))\n        self.build.set_started_at(None)\n        self.assertEqual(None, self.build.properties.get_item(\"started_at\"))\n        # set as int, isotimestamp string expected\n        self.build.set_started_at(constants.TIMESTAMP_STARTED)\n        self.assertEqual(None, self.build.properties.get_item(\"started_at\"))\n        # set as isotimestamp string\n        self.build.set_started_at(constants.ISOTIMESTAMP_STARTED)\n        self.assertDictEqual(\n            constants.SPLIT_TIMESTAMP_STARTED,\n            self.build.properties.get_item(\"started_at\")\n        )\n    def test_set_finished_at(self):\n        \"\"\"Test setting finished_at timestamp\"\"\"\n        self.assertEqual(None, self.build.properties.get_item(\"finished_at\"))\n        self.build.set_finished_at(None)\n        self.assertEqual(None, self.build.properties.get_item(\"finished_at\"))\n        # set as int, isotimestamp string expected\n        self.build.set_finished_at(constants.TIMESTAMP_FINISHED)\n        self.assertEqual(None, self.build.properties.get_item(\"finished_at\"))\n        # set as isotimestamp string\n        self.build.set_finished_at(constants.ISOTIMESTAMP_FINISHED)\n        self.assertDictEqual(\n            constants.SPLIT_TIMESTAMP_FINISHED,\n            self.build.properties.get_item(\"finished_at\")\n        )\n    def test_add_stages(self):\n        \"\"\"Test adding stages\"\"\"\n        self.build.add_stages(None)\n        self.assertEqual(0, len(self.build.stages.stages))\n        self.build.add_stages(\"string\")\n        self.assertEqual(0, len(self.build.stages.stages))\n        stages = Stages()\n        stages.read_csv(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        self.build.add_stages(stages)\n        self.assertEqual(3, len(self.build.stages.stages))\n        # stages should not change when submitting an invalid object\n        self.build.add_stages(None)\n        self.assertEqual(3, len(self.build.stages.stages))\n        self.build.add_stages(\"string\")\n        self.assertEqual(3, len(self.build.stages.stages))\n        self.build.add_stages(Stages())\n        self.assertEqual(0, len(self.build.stages.stages))\n    def test_add_stage(self):\n        \"\"\"Test adding a stage\"\"\"\n        # error is thrown when called without parameters\n        self.assertRaises(TypeError, self.build.add_stage)\n        # error is thrown when called with an invalid parameter\n        self.assertRaises(TypeError, self.build.add_stage, None)\n        self.assertRaises(TypeError, self.build.add_stage, \"string\")\n        # add a stage\n        stage = Stage()\n        stage.set_name(\"stage1\")\n        stage.set_started_at(constants.TIMESTAMP_STARTED)\n        stage.set_finished_at(constants.TIMESTAMP1)\n        stage.set_duration(235)\n        self.build.add_stage(stage)\n        # test number of stages\n        self.assertEqual(1, len(self.build.stages.stages))\n        # test started_at\n        self.assertEqual(\n            constants.SPLIT_TIMESTAMP_STARTED,\n            self.build.stages.started_at\n        )\n        # test finished_at\n        self.assertEqual(\n            constants.SPLIT_TIMESTAMP1,\n            self.build.stages.finished_at\n        )\n        # test stages (names + duration)\n        self.assertListEqual(\n            [{\n                'duration': 235,\n                'finished_at': constants.SPLIT_TIMESTAMP1,\n                'name': 'stage1',\n                'started_at': constants.SPLIT_TIMESTAMP_STARTED\n            }],\n            self.build.stages.stages)\n        # add another stage\n        stage = Stage()\n        stage.set_name(\"stage2\")\n        stage.set_started_at(constants.TIMESTAMP1)\n        stage.set_finished_at(constants.TIMESTAMP_FINISHED)\n        stage.set_duration(136.234)\n        self.build.add_stage(stage)\n        # test number of stages\n        self.assertEqual(2, len(self.build.stages.stages))\n        # test started_at\n        self.assertEqual(\n            constants.SPLIT_TIMESTAMP_STARTED,\n            self.build.stages.started_at\n        )\n        # test finished_at\n        self.assertEqual(\n            constants.SPLIT_TIMESTAMP_FINISHED,\n            self.build.stages.finished_at\n        )\n        # test stages (names + duration)\n        self.assertListEqual([\n            {\n                'duration': 235,\n                'finished_at': constants.SPLIT_TIMESTAMP1,\n                'name': 'stage1',\n                'started_at': constants.SPLIT_TIMESTAMP_STARTED\n            },\n            {\n                'duration': 136.234,\n                'finished_at': constants.SPLIT_TIMESTAMP_FINISHED,\n                'name': 'stage2',\n                'started_at': constants.SPLIT_TIMESTAMP1\n            }],\n            self.build.stages.stages)\n    def test_add_property(self):\n        \"\"\"Test adding a property\"\"\"\n        self.build.add_property('property1', 2)\n        self.assertEqual(1, self.build.properties.get_size())\n        self.assertDictEqual(\n            {'property1': 2},\n            self.build.properties.get_items()\n        )\n        self.build.add_property('property2', 3)\n        self.assertEqual(2, self.build.properties.get_size())\n        self.assertDictEqual(\n            {'property1': 2, 'property2': 3},\n            self.build.properties.get_items()\n        )\n        self.build.add_property('property2', 4)\n        self.assertEqual(2, self.build.properties.get_size())\n        self.assertDictEqual(\n            {'property1': 2, 'property2': 4},\n            self.build.properties.get_items()\n        )\n    def test_get_property(self):\n        \"\"\"Test getting a property\"\"\"\n        self.build.add_property('property1', 2)\n        self.assertEqual(2, self.build.get_property('property1'))\n        self.build.add_property('property1', None)\n        self.assertEqual(None, self.build.get_property('property1'))\n        self.build.add_property('property2', 3)\n        self.assertEqual(3, self.build.get_property('property2'))\n        self.build.add_property('property2', 4)\n        self.assertEqual(4, self.build.get_property('property2'))\n    def test_get_property_does_not_exist(self):\n        \"\"\"Test getting a nonexistant property\"\"\"\n        self.assertEqual(None, self.build.get_property('no_property'))\n    def test_get_properties(self):\n        \"\"\"Test getting properties\"\"\"\n        self.build.add_property('property1', 2)\n        self.assertDictEqual(\n            {'duration': 0, 'property1': 2},\n            self.build.get_properties())\n        self.build.add_property('property2', 3)\n        self.assertDictEqual(\n            {'duration': 0, 'property1': 2, 'property2': 3},\n            self.build.get_properties())\n        self.build.add_property('property2', 4)\n        self.assertDictEqual(\n            {'duration': 0, 'property1': 2, 'property2': 4},\n            self.build.get_properties())\n    def test_load_properties(self):\n        \"\"\"Test loading properties\"\"\"\n        self.build.load_properties_from_settings()\n        self.assertDictEqual(\n            {'duration': 0, \"repo\": buildtimetrend.NAME},\n            self.build.get_properties())\n        settings = Settings()\n        settings.add_setting(\"ci_platform\", \"travis\")\n        settings.add_setting(\"build\", \"123\")\n        settings.add_setting(\"job\", \"123.1\")\n        settings.add_setting(\"branch\", \"branch1\")\n        settings.add_setting(\"result\", \"passed\")\n        settings.add_setting(\"build_trigger\", \"push\")\n        settings.add_setting(\n            \"pull_request\",\n            {\n                \"is_pull_request\": False,\n                \"title\": None,\n                \"number\": None\n            }\n        )\n        settings.set_project_name(\"test/project\")\n        self.build.load_properties_from_settings()\n        self.assertDictEqual(\n            {\n                'duration': 0,\n                'ci_platform': \"travis\",\n                'build': \"123\",\n                'job': \"123.1\",\n                'branch': \"branch1\",\n                'result': \"passed\",\n                'build_trigger': \"push\",\n                'pull_request': {\n                    \"is_pull_request\": False,\n                    \"title\": None,\n                    \"number\": None},\n                'repo': \"test/project\"\n            },\n            self.build.get_properties())\n    def test_set_duration(self):\n        \"\"\"Test calculating and setting a duration\"\"\"\n        self.build.add_property(\"duration\", 20)\n        self.assertDictEqual({'duration': 20}, self.build.get_properties())\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test dict\n        self.assertDictEqual({\n            'duration': 17,\n            'started_at': constants.SPLIT_TIMESTAMP1,\n            'finished_at': constants.SPLIT_TIMESTAMP4,\n            'stages': [\n                {\n                    'duration': 2,\n                    'finished_at': constants.SPLIT_TIMESTAMP2,\n                    'name': 'stage1',\n                    'started_at': constants.SPLIT_TIMESTAMP1\n                },\n                {\n                    'duration': 5,\n                    'finished_at': constants.SPLIT_TIMESTAMP3,\n                    'name': 'stage2',\n                    'started_at': constants.SPLIT_TIMESTAMP2\n                },\n                {\n                    'duration': 10,\n                    'finished_at': constants.SPLIT_TIMESTAMP4,\n                    'name': 'stage3',\n                    'started_at': constants.SPLIT_TIMESTAMP3\n                }\n            ]},\n            self.build.to_dict())\n        # setting duration, overrides total stage duration\n        self.build.add_property(\"duration\", 20)\n        # test dict\n        self.assertDictEqual({\n            'duration': 20,\n            'started_at': constants.SPLIT_TIMESTAMP1,\n            'finished_at': constants.SPLIT_TIMESTAMP4,\n            'stages': [\n                {\n                    'duration': 2,\n                    'finished_at': constants.SPLIT_TIMESTAMP2,\n                    'name': 'stage1',\n                    'started_at': constants.SPLIT_TIMESTAMP1\n                },\n                {\n                    'duration': 5,\n                    'finished_at': constants.SPLIT_TIMESTAMP3,\n                    'name': 'stage2',\n                    'started_at': constants.SPLIT_TIMESTAMP2\n                },\n                {\n                    'duration': 10,\n                    'finished_at': constants.SPLIT_TIMESTAMP4,\n                    'name': 'stage3',\n                    'started_at': constants.SPLIT_TIMESTAMP3\n                }\n            ]},\n            self.build.to_dict())\n    def test_to_dict(self):\n        \"\"\"Test exporting as a dictonary.\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test dict\n        self.assertDictEqual({\n            'duration': 17,\n            'started_at': constants.SPLIT_TIMESTAMP1,\n            'finished_at': constants.SPLIT_TIMESTAMP4,\n            'stages': [\n                {\n                    'duration': 2,\n                    'finished_at': constants.SPLIT_TIMESTAMP2,\n                    'name': 'stage1',\n                    'started_at': constants.SPLIT_TIMESTAMP1\n                },\n                {\n                    'duration': 5,\n                    'finished_at': constants.SPLIT_TIMESTAMP3,\n                    'name': 'stage2',\n                    'started_at': constants.SPLIT_TIMESTAMP2\n                },\n                {\n                    'duration': 10,\n                    'finished_at': constants.SPLIT_TIMESTAMP4,\n                    'name': 'stage3',\n                    'started_at': constants.SPLIT_TIMESTAMP3\n                }\n            ]},\n            self.build.to_dict())\n        # add properties\n        self.build.add_property('property1', 2)\n        self.build.add_property('property2', 3)\n        # started_at property should override default value\n        self.build.set_started_at(constants.ISOTIMESTAMP_STARTED)\n        # finished_at property should override default value\n        self.build.set_finished_at(constants.ISOTIMESTAMP_FINISHED)\n        # test dict\n        self.assertDictEqual({\n            'duration': 17,\n            'started_at': constants.SPLIT_TIMESTAMP_STARTED,\n            'finished_at': constants.SPLIT_TIMESTAMP_FINISHED,\n            'property1': 2, 'property2': 3,\n            'stages': [\n                {\n                    'duration': 2,\n                    'finished_at': constants.SPLIT_TIMESTAMP2,\n                    'name': 'stage1',\n                    'started_at': constants.SPLIT_TIMESTAMP1},\n                {\n                    'duration': 5,\n                    'finished_at': constants.SPLIT_TIMESTAMP3,\n                    'name': 'stage2',\n                    'started_at': constants.SPLIT_TIMESTAMP2},\n                {\n                    'duration': 10,\n                    'finished_at': constants.SPLIT_TIMESTAMP4,\n                    'name': 'stage3',\n                    'started_at': constants.SPLIT_TIMESTAMP3}\n            ]},\n            self.build.to_dict())\n    def test_stages_to_list(self):\n        \"\"\"Test exporting stages as a list.\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test list\n        self.assertListEqual([\n            {\n                'stage': {\n                    'duration': 2,\n                    'finished_at': constants.SPLIT_TIMESTAMP2,\n                    'name': 'stage1',\n                    'started_at': constants.SPLIT_TIMESTAMP1},\n                'job': {\n                    'duration': 17,\n                    'started_at': constants.SPLIT_TIMESTAMP1,\n                    'finished_at': constants.SPLIT_TIMESTAMP4}\n            },\n            {\n                'stage': {\n                    'duration': 5,\n                    'finished_at': constants.SPLIT_TIMESTAMP3,\n                    'name': 'stage2',\n                    'started_at': constants.SPLIT_TIMESTAMP2},\n                'job': {\n                    'duration': 17,\n                    'started_at': constants.SPLIT_TIMESTAMP1,\n                    'finished_at': constants.SPLIT_TIMESTAMP4}\n            },\n            {\n                'stage': {\n                    'duration': 10,\n                    'finished_at': constants.SPLIT_TIMESTAMP4,\n                    'name': 'stage3',\n                    'started_at': constants.SPLIT_TIMESTAMP3},\n                'job': {\n                    'duration': 17,\n                    'started_at': constants.SPLIT_TIMESTAMP1,\n                    'finished_at': constants.SPLIT_TIMESTAMP4}\n            }],\n            self.build.stages_to_list())\n        # add properties\n        self.build.add_property('property1', 2)\n        self.build.add_property('property2', 3)\n        # started_at property should override default value\n        self.build.set_started_at(constants.ISOTIMESTAMP_STARTED)\n        # finished_at property should override default value\n        self.build.set_finished_at(constants.ISOTIMESTAMP_FINISHED)\n        # test dict\n        self.assertListEqual([\n            {\n                'stage': {\n                    'duration': 2,\n                    'finished_at': constants.SPLIT_TIMESTAMP2,\n                    'name': 'stage1',\n                    'started_at': constants.SPLIT_TIMESTAMP1},\n                'job': {\n                    'duration': 17,\n                    'started_at': constants.SPLIT_TIMESTAMP_STARTED,\n                    'finished_at': constants.SPLIT_TIMESTAMP_FINISHED,\n                    'property1': 2, 'property2': 3}\n            },\n            {\n                'stage': {\n                    'duration': 5,\n                    'finished_at': constants.SPLIT_TIMESTAMP3,\n                    'name': 'stage2',\n                    'started_at': constants.SPLIT_TIMESTAMP2},\n                'job': {\n                    'duration': 17,\n                    'started_at': constants.SPLIT_TIMESTAMP_STARTED,\n                    'finished_at': constants.SPLIT_TIMESTAMP_FINISHED,\n                    'property1': 2, 'property2': 3}\n            },\n            {\n                'stage': {\n                    'duration': 10,\n                    'finished_at': constants.SPLIT_TIMESTAMP4,\n                    'name': 'stage3',\n                    'started_at': constants.SPLIT_TIMESTAMP3},\n                'job': {\n                    'duration': 17,\n                    'started_at': constants.SPLIT_TIMESTAMP_STARTED,\n                    'finished_at': constants.SPLIT_TIMESTAMP_FINISHED,\n", "answers": ["                    'property1': 2, 'property2': 3}"], "length": 1160, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "937eae55baa939e82bad4567e4b302435ea8891cfa090cc2"}
{"input": "", "context": "#!/usr/bin/env python\n\"\"\"\nThis modules contains functions for the conversion of  types.\nExamples:\nlat/lon <-> UTM\nlocal time <-> UTC\nmeters <-> furlongs\n.\n.\n.\n@UofA, 2013\n(LK)\n\"\"\"\n#=================================================================\nfrom math import pi, sin, cos, tan, sqrt\n#=================================================================\n# Lat Long - UTM, UTM - Lat Long conversions\n_deg2rad = pi / 180.0\n_rad2deg = 180.0 / pi\n_EquatorialRadius = 2\n_eccentricitySquared = 3\n_ellipsoid = [\n#  id, Ellipsoid name, Equatorial Radius, square of eccentricity    \n# first once is a placeholder only, To allow array indices to match id numbers\n    [ -1, \"Placeholder\", 0, 0],\n    [ 1, \"Airy\", 6377563, 0.00667054],\n    [ 2, \"Australian National\", 6378160, 0.006694542],\n    [ 3, \"Bessel 1841\", 6377397, 0.006674372],\n    [ 4, \"Bessel 1841 (Nambia] \", 6377484, 0.006674372],\n    [ 5, \"Clarke 1866\", 6378206, 0.006768658],\n    [ 6, \"Clarke 1880\", 6378249, 0.006803511],\n    [ 7, \"Everest\", 6377276, 0.006637847],\n    [ 8, \"Fischer 1960 (Mercury] \", 6378166, 0.006693422],\n    [ 9, \"Fischer 1968\", 6378150, 0.006693422],\n    [ 10, \"GRS 1967\", 6378160, 0.006694605],\n    [ 11, \"GRS 1980\", 6378137, 0.00669438],\n    [ 12, \"Helmert 1906\", 6378200, 0.006693422],\n    [ 13, \"Hough\", 6378270, 0.00672267],\n    [ 14, \"International\", 6378388, 0.00672267],\n    [ 15, \"Krassovsky\", 6378245, 0.006693422],\n    [ 16, \"Modified Airy\", 6377340, 0.00667054],\n    [ 17, \"Modified Everest\", 6377304, 0.006637847],\n    [ 18, \"Modified Fischer 1960\", 6378155, 0.006693422],\n    [ 19, \"South American 1969\", 6378160, 0.006694542],\n    [ 20, \"WGS 60\", 6378165, 0.006693422],\n    [ 21, \"WGS 66\", 6378145, 0.006694542],\n    [ 22, \"WGS-72\", 6378135, 0.006694318],\n    [ 23, \"WGS-84\", 6378137, 0.00669438]\n]\n#Reference ellipsoids derived from Peter H. Dana's website- \n#http://www.utexas.edu/depts/grg/gcraft/notes/datum/elist.html\n#Department of Geography, University of Texas at Austin\n#Internet: pdana@mail.utexas.edu\n#3/22/95\n#Source\n#Defense Mapping Agency. 1987b. DMA Technical Report: Supplement to Department of Defense World Geodetic System\n#1984 Technical Report. Part I and II. Washington, DC: Defense Mapping Agency\n#def LLtoUTM(int ReferenceEllipsoid, const double Lat, const double Long, \n#            double &UTMNorthing, double &UTMEasting, char* UTMZone)\ndef LLtoUTM(ReferenceEllipsoid, Lat, Long, zonenumber = None):\n    \"\"\"\n    converts lat/long to UTM coords.  Equations from USGS Bulletin 1532 \n    East Longitudes are positive, West longitudes are negative. \n    North latitudes are positive, South latitudes are negative\n    Lat and Long are in decimal degrees\n    Written by Chuck Gantz- chuck.gantz@globalstar.com  \n    \n    Outputs:\n        UTMzone, easting, northing\"\"\"\n    a = _ellipsoid[ReferenceEllipsoid][_EquatorialRadius]\n    eccSquared = _ellipsoid[ReferenceEllipsoid][_eccentricitySquared]\n    k0 = 0.9996\n#Make sure the longitude is between -180.00 .. 179.9\n    LongTemp = (Long+180)-int((Long+180)/360)*360-180 # -180.00 .. 179.9\n    LatRad = Lat*_deg2rad\n    LongRad = LongTemp*_deg2rad\n    \n    if zonenumber is not None:\n        try:\n            ZoneNumber = int(float(zonenumber))\n        except:\n            ZoneNumber = int((LongTemp + 180)/6) + 1\n            \n    else:\n        ZoneNumber = int((LongTemp + 180)/6) + 1\n  \n    if Lat >= 56.0 and Lat < 64.0 and LongTemp >= 3.0 and LongTemp < 12.0:\n        ZoneNumber = 32\n    # Special zones for Svalbard\n    if Lat >= 72.0 and Lat < 84.0:\n        if  LongTemp >= 0.0  and LongTemp <  9.0:ZoneNumber = 31\n        elif LongTemp >= 9.0  and LongTemp < 21.0: ZoneNumber = 33\n        elif LongTemp >= 21.0 and LongTemp < 33.0: ZoneNumber = 35\n        elif LongTemp >= 33.0 and LongTemp < 42.0: ZoneNumber = 37\n    LongOrigin = (ZoneNumber - 1)*6 - 180 + 3 #+3 puts origin in middle of zone\n    LongOriginRad = LongOrigin * _deg2rad\n    #compute the UTM Zone from the latitude and longitude\n    UTMZone = \"%d%c\" % (ZoneNumber, _UTMLetterDesignator(Lat))\n    eccPrimeSquared = (eccSquared)/(1-eccSquared)\n    N = a/sqrt(1-eccSquared*sin(LatRad)*sin(LatRad))\n    T = tan(LatRad)*tan(LatRad)\n    C = eccPrimeSquared*cos(LatRad)*cos(LatRad)\n    A = cos(LatRad)*(LongRad-LongOriginRad)\n    M = a*((1\n            - eccSquared/4\n            - 3*eccSquared*eccSquared/64\n            - 5*eccSquared*eccSquared*eccSquared/256)*LatRad \n           - (3*eccSquared/8\n              + 3*eccSquared*eccSquared/32\n              + 45*eccSquared*eccSquared*eccSquared/1024)*sin(2*LatRad)\n           + (15*eccSquared*eccSquared/256 + 45*eccSquared*eccSquared*eccSquared/1024)*sin(4*LatRad) \n           - (35*eccSquared*eccSquared*eccSquared/3072)*sin(6*LatRad))\n    \n    UTMEasting = (k0*N*(A+(1-T+C)*A*A*A/6\n                        + (5-18*T+T*T+72*C-58*eccPrimeSquared)*A*A*A*A*A/120)\n                  + 500000.0)\n    UTMNorthing = (k0*(M+N*tan(LatRad)*(A*A/2+(5-T+9*C+4*C*C)*A*A*A*A/24\n                                        + (61\n                                           -58*T\n                                           +T*T\n                                           +600*C\n                                           -330*eccPrimeSquared)*A*A*A*A*A*A/720)))\n    if Lat < 0:\n        UTMNorthing = UTMNorthing + 10000000.0; #10000000 meter offset for southern hemisphere\n    return (UTMZone, UTMEasting, UTMNorthing)\ndef _UTMLetterDesignator(Lat):\n#This routine determines the correct UTM letter designator for the given latitude\n#returns 'Z' if latitude is outside the UTM limits of 84N to 80S\n#Written by Chuck Gantz- chuck.gantz@globalstar.com\n    if 84 >= Lat >= 72: return 'X'\n    elif 72 > Lat >= 64: return 'W'\n    elif 64 > Lat >= 56: return 'V'\n    elif 56 > Lat >= 48: return 'U'\n    elif 48 > Lat >= 40: return 'T'\n    elif 40 > Lat >= 32: return 'S'\n    elif 32 > Lat >= 24: return 'R'\n    elif 24 > Lat >= 16: return 'Q'\n    elif 16 > Lat >= 8: return 'P'\n    elif  8 > Lat >= 0: return 'N'\n    elif  0 > Lat >= -8: return 'M'\n    elif -8> Lat >= -16: return 'L'\n    elif -16 > Lat >= -24: return 'K'\n    elif -24 > Lat >= -32: return 'J'\n    elif -32 > Lat >= -40: return 'H'\n    elif -40 > Lat >= -48: return 'G'\n    elif -48 > Lat >= -56: return 'F'\n    elif -56 > Lat >= -64: return 'E'\n    elif -64 > Lat >= -72: return 'D'\n    elif -72 > Lat >= -80: return 'C'\n    else: return 'Z'    # if the Latitude is outside the UTM limits\n#void UTMtoLL(int ReferenceEllipsoid, const double UTMNorthing, const double UTMEasting, const char* UTMZone,\n#             double& Lat,  double& Long )\ndef UTMtoLL(ReferenceEllipsoid, northing, easting, zone):\n    \"\"\"\n    converts UTM coords to lat/long.  Equations from USGS Bulletin 1532 \n    East Longitudes are positive, West longitudes are negative. \n    North latitudes are positive, South latitudes are negative\n    Lat and Long are in decimal degrees. \n    Written by Chuck Gantz- chuck.gantz@globalstar.com\n    Converted to Python by Russ Nelson <nelson@crynwr.com>\n    \n    Outputs:\n        Lat,Lon\n    \"\"\"\n    k0 = 0.9996\n    a = _ellipsoid[ReferenceEllipsoid][_EquatorialRadius]\n    eccSquared = _ellipsoid[ReferenceEllipsoid][_eccentricitySquared]\n    e1 = (1-sqrt(1-eccSquared))/(1+sqrt(1-eccSquared))\n    #NorthernHemisphere; //1 for northern hemispher, 0 for southern\n    x = easting - 500000.0 #remove 500,000 meter offset for longitude\n    y = northing\n    ZoneLetter = zone[-1]\n    ZoneNumber = int(zone[:-1])\n    if ZoneLetter >= 'N':\n        NorthernHemisphere = 1  # point is in northern hemisphere\n    else:\n        NorthernHemisphere = 0  # point is in southern hemisphere\n        y -= 10000000.0         # remove 10,000,000 meter offset used for southern hemisphere\n    LongOrigin = (ZoneNumber - 1)*6 - 180 + 3  # +3 puts origin in middle of zone\n    eccPrimeSquared = (eccSquared)/(1-eccSquared)\n    M = y / k0\n    mu = M/(a*(1-eccSquared/4-3*eccSquared*eccSquared/64-5*eccSquared*eccSquared*eccSquared/256))\n    phi1Rad = (mu + (3*e1/2-27*e1*e1*e1/32)*sin(2*mu) \n               + (21*e1*e1/16-55*e1*e1*e1*e1/32)*sin(4*mu)\n               +(151*e1*e1*e1/96)*sin(6*mu))\n    phi1 = phi1Rad*_rad2deg;\n", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "length": 980, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "b3d7b8ae829a609d04350475dc3cbba8c1903ae29d44f33f"}
{"input": "", "context": "from django.shortcuts import render_to_response, get_object_or_404\nfrom django.http import HttpResponse, HttpResponseRedirect, Http404\nfrom django.template import RequestContext\nfrom accounts.forms import RegisterForm, ChangeEmailForm, ChangeUsernameForm, SendPMForm, SendMassPMForm, ReportUserForm \nfrom django.core.urlresolvers import reverse\nfrom django.contrib.auth.models import User \nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.decorators import login_required\nfrom django.template.loader import render_to_string\nfrom django.conf import settings\nfrom accounts.models import UserProfile\nfrom messaging.models import UserMessage\nfrom django.contrib import messages\nfrom django.core.paginator import Paginator, EmptyPage, InvalidPage\nfrom django.views.generic import list_detail\nfrom django.contrib.sites.models import Site\nfrom submissions.models.artist import Artist\nfrom submissions.models.album import Album\nfrom submissions.models.link import Link\nfrom django.views.decorators.cache import cache_page\nfrom recaptcha.client import captcha\nfrom django.utils.safestring import mark_safe\nfrom django.contrib.auth import login, authenticate\ndef register(request):\n    if request.method == 'POST':\n        if 'recaptcha_challenge_field' in request.POST:\n            check_captcha = captcha.submit(request.POST['recaptcha_challenge_field'], request.POST['recaptcha_response_field'], settings.RECAPTCHA_PRIVATE_KEY, request.META['REMOTE_ADDR'])\n            if not check_captcha.is_valid:\n                messages.error(request, \"Captcha was incorrect!\") #% check_captcha.error_code)\n                return HttpResponseRedirect(reverse('register'))\n        form = RegisterForm(request.POST)\n        if form.is_valid():\n            cd = form.cleaned_data\n            username,email,password = cd['username'], cd['email'], cd['password']   \n            \n            new_user = User.objects.create_user(username = username, email = email, password = password)  \n            #TODO: fix this, weird postgres issue in django 1.3 see trac issue #15682\n            user = User.objects.get(username=new_user.username)\n            profile = UserProfile.objects.create(user=user)\n            \n            messages.success(request, \"Thanks for registering %s! Welcome to tehorng.\" % new_user)\n            \n            authed_user = authenticate(username=username, password=password)\n            login(request, authed_user)\n            return HttpResponseRedirect(reverse('profile'))    \n    else:\n        form = RegisterForm(initial=request.POST)\n    return render_to_response('registration/register.html', {\n        'form': form,\n        'captcha': mark_safe(captcha.displayhtml(settings.RECAPTCHA_PUBLIC_KEY)),\n    }, context_instance=RequestContext(request))\n@login_required\ndef profile(request):\n    user = request.user\n    profile = UserProfile.objects.get(user=user)\n    artists = profile.artists_for_user(10)\n    albums = profile.albums_for_user(10)\n    links = profile.links_for_user(10)\n    reports = user.report_set.all()\n    return render_to_response('accounts/profile.html', {\n        'profile': profile,\n        'artists_for_user': artists,\n        'albums_for_user': albums,\n        'links_for_user': links,\n        'reports': reports,\n    }, context_instance=RequestContext(request))\n@login_required\ndef profile_user(request, username):\n    user = get_object_or_404(User, username=username)\n    \n    if user == request.user:\n        return HttpResponseRedirect(reverse('profile'))\n    \n    profile = UserProfile.objects.get(user=user)\n    artists = profile.artists_for_user(10)\n    albums = profile.albums_for_user(10)\n    links = profile.links_for_user(10)\n    return render_to_response('accounts/profile_user.html', {\n        'profile': profile,\n        'artists_for_user': artists,\n        'albums_for_user': albums,\n        'links_for_user': links,\n    }, context_instance=RequestContext(request))\n@login_required\ndef view_links(request, username=None):\n    \n    if username:\n        user = get_object_or_404(User, username=username)\n        links = Link.objects.filter(uploader=user)\n    else:\n        user = request.user\n        links = Link.objects.filter(uploader=user).order_by('-created')\n    \n    return list_detail.object_list(\n        request=request,\n        queryset = links,\n        paginate_by = 50,\n        template_object_name = 'links',\n        template_name = 'accounts/viewlinks.html',\n        extra_context = {'profile': user.get_profile()}\n    )\n@login_required\ndef view_albums(request, username=None):\n    if username:\n        user = get_object_or_404(User, username=username)\n        albums = Album.objects.filter(uploader=user)\n    else:\n        user = request.user\n        albums = Album.objects.filter(uploader=user).order_by('-created')\n    return list_detail.object_list(\n        request=request,\n        queryset = albums,\n        paginate_by = 50,\n        template_object_name = 'albums',\n        template_name = 'accounts/viewalbums.html',\n        extra_context = {'profile': user.get_profile()}\n    )\n@login_required\ndef view_artists(request, username=None):\n    if username:\n        user = get_object_or_404(User, username=username)\n        artists = Artist.objects.filter(uploader=user, is_valid=True)\n    else:\n        user = request.user\n        artists = Artist.objects.filter(uploader=user, is_valid=True).order_by('-created')\n    \n    return list_detail.object_list(\n        request=request,\n        queryset = artists,\n        paginate_by = 50,\n        template_object_name = 'artists',\n        template_name = 'accounts/viewartists.html',\n        extra_context = {'profile': user.get_profile()}\n    )\n@login_required\ndef change_email(request):\n    user = User.objects.get(username=request.user)\n    if request.method == 'POST':\n        form = ChangeEmailForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Email changed successfully!\")\n            return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ChangeEmailForm(instance=user)\n    return render_to_response('accounts/changeemail.html', {\n        'form': form,\n    }, context_instance=RequestContext(request))\n@login_required\ndef inbox(request):\n    if request.method == 'POST':\n        msgids = request.POST.getlist('selected')\n        for id in msgids:\n            umsg = UserMessage.objects.get(id=id)\n            if \"delete\" in request.POST:\n                umsg.delete()\n            if \"mark\" in request.POST:\n                umsg.read = True\n                umsg.save(email=False)\n        messages.success(request, \"Action completed successfully!\")\n        return HttpResponseRedirect(reverse(\"inbox\"))\n    return render_to_response('accounts/inbox.html', {}, context_instance=RequestContext(request))\n@login_required\ndef change_username(request):\n    user = User.objects.get(username=request.user)\n    if request.method == 'POST':\n        form = ChangeUsernameForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Username changed successfully!\")\n            return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ChangeUsernameForm(instance=user)\n    return render_to_response('accounts/changeusername.html', {\n        'form': form,\n        'profile': profile,\n    }, context_instance=RequestContext(request))\n@login_required\ndef sendpm_user(request, username):\n    user = get_object_or_404(User, username=username)\n    profile = user.get_profile()\n    if request.method == 'POST':\n        form = SendPMForm(request.POST)\n        if form.is_valid():\n            message = form.cleaned_data['message']\n            msg = UserMessage.objects.create(\n                to_user = user,\n                from_user = request.user,\n                message = message,\n            )\n            messages.success(request, \"Message delivered!\")\n            return HttpResponseRedirect(reverse('profile-user', args=[user.username]))\n    else:\n        form = SendPMForm()\n    return render_to_response('accounts/sendpm.html', {\n        'form': form,\n        'profile': profile,\n    }, context_instance=RequestContext(request))\n@login_required\ndef sendpm(request):\n    profile = request.user.get_profile()\n    if request.method == 'POST':\n        form = SendMassPMForm(request.POST)\n        if form.is_valid():\n            to = form.cleaned_data['to']\n            message = form.cleaned_data['message']\n            usernames = [username.strip() for username in to.split(',') if username]\n            for username in usernames:\n                msg = UserMessage.objects.create(\n                    to_user = User.objects.get(username=username),\n                    from_user = request.user,\n                    message = message,\n                )\n            messages.success(request, \"Messages delivered!\")\n            return HttpResponseRedirect(reverse(\"profile\"))\n    else:\n        form = SendMassPMForm()\n    return render_to_response('accounts/sendmasspm.html', {\n        'form': form,\n        'profile': profile, \n    }, context_instance=RequestContext(request))\n@login_required\ndef report_user(request, username):\n    user = get_object_or_404(User, username=username)\n    profile = user.get_profile()\n   \n    if request.method == 'POST':\n", "answers": ["        form = ReportUserForm(request.POST)"], "length": 651, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "43b09bf2cf11206d57ef722d796e2250d60d38db8c309917"}
{"input": "", "context": "# Copyright 2009-2013 Canonical Ltd.  This software is licensed under the\n# GNU Affero General Public License version 3 (see the file LICENSE).\n\"\"\"Browser views for products.\"\"\"\n__metaclass__ = type\n__all__ = [\n    'ProductAddSeriesView',\n    'ProductAddView',\n    'ProductAddViewBase',\n    'ProductAdminView',\n    'ProductBrandingView',\n    'ProductBugsMenu',\n    'ProductConfigureBase',\n    'ProductConfigureAnswersView',\n    'ProductConfigureBlueprintsView',\n    'ProductDownloadFileMixin',\n    'ProductDownloadFilesView',\n    'ProductEditPeopleView',\n    'ProductEditView',\n    'ProductFacets',\n    'ProductInvolvementView',\n    'ProductNavigation',\n    'ProductNavigationMenu',\n    'ProductOverviewMenu',\n    'ProductPackagesView',\n    'ProductPackagesPortletView',\n    'ProductPurchaseSubscriptionView',\n    'ProductRdfView',\n    'ProductReviewLicenseView',\n    'ProductSeriesSetView',\n    'ProductSetBreadcrumb',\n    'ProductSetFacets',\n    'ProductSetNavigation',\n    'ProductSetReviewLicensesView',\n    'ProductSetView',\n    'ProductSpecificationsMenu',\n    'ProductView',\n    'SortSeriesMixin',\n    'ProjectAddStepOne',\n    'ProjectAddStepTwo',\n    ]\nfrom operator import attrgetter\nfrom lazr.delegates import delegates\nfrom lazr.restful.interface import copy_field\nfrom lazr.restful.interfaces import IJSONRequestCache\nfrom z3c.ptcompat import ViewPageTemplateFile\nfrom zope.component import getUtility\nfrom zope.event import notify\nfrom zope.formlib import form\nfrom zope.formlib.interfaces import WidgetInputError\nfrom zope.formlib.widget import CustomWidgetFactory\nfrom zope.formlib.widgets import (\n    CheckBoxWidget,\n    TextAreaWidget,\n    TextWidget,\n    )\nfrom zope.interface import (\n    implements,\n    Interface,\n    )\nfrom zope.lifecycleevent import ObjectCreatedEvent\nfrom zope.schema import (\n    Bool,\n    Choice,\n    )\nfrom zope.schema.vocabulary import (\n    SimpleTerm,\n    SimpleVocabulary,\n    )\nfrom lp import _\nfrom lp.answers.browser.faqtarget import FAQTargetNavigationMixin\nfrom lp.answers.browser.questiontarget import (\n    QuestionTargetFacetMixin,\n    QuestionTargetTraversalMixin,\n    )\nfrom lp.app.browser.launchpadform import (\n    action,\n    custom_widget,\n    LaunchpadEditFormView,\n    LaunchpadFormView,\n    ReturnToReferrerMixin,\n    safe_action,\n    )\nfrom lp.app.browser.lazrjs import (\n    BooleanChoiceWidget,\n    InlinePersonEditPickerWidget,\n    TextLineEditorWidget,\n    )\nfrom lp.app.browser.multistep import (\n    MultiStepView,\n    StepView,\n    )\nfrom lp.app.browser.stringformatter import FormattersAPI\nfrom lp.app.browser.tales import (\n    format_link,\n    MenuAPI,\n    )\nfrom lp.app.enums import (\n    InformationType,\n    PROPRIETARY_INFORMATION_TYPES,\n    PUBLIC_PROPRIETARY_INFORMATION_TYPES,\n    ServiceUsage,\n    )\nfrom lp.app.errors import NotFoundError\nfrom lp.app.interfaces.headings import IEditableContextTitle\nfrom lp.app.interfaces.launchpad import ILaunchpadCelebrities\nfrom lp.app.utilities import json_dump_information_types\nfrom lp.app.vocabularies import InformationTypeVocabulary\nfrom lp.app.widgets.date import DateWidget\nfrom lp.app.widgets.itemswidgets import (\n    CheckBoxMatrixWidget,\n    LaunchpadRadioWidget,\n    LaunchpadRadioWidgetWithDescription,\n    )\nfrom lp.app.widgets.popup import PersonPickerWidget\nfrom lp.app.widgets.product import (\n    GhostWidget,\n    LicenseWidget,\n    ProductNameWidget,\n    )\nfrom lp.app.widgets.textwidgets import StrippedTextWidget\nfrom lp.blueprints.browser.specificationtarget import (\n    HasSpecificationsMenuMixin,\n    )\nfrom lp.bugs.browser.bugtask import (\n    BugTargetTraversalMixin,\n    get_buglisting_search_filter_url,\n    )\nfrom lp.bugs.browser.structuralsubscription import (\n    expose_structural_subscription_data_to_js,\n    StructuralSubscriptionMenuMixin,\n    StructuralSubscriptionTargetTraversalMixin,\n    )\nfrom lp.bugs.interfaces.bugtask import RESOLVED_BUGTASK_STATUSES\nfrom lp.code.browser.branchref import BranchRef\nfrom lp.code.browser.sourcepackagerecipelisting import HasRecipesMenuMixin\nfrom lp.registry.browser import (\n    add_subscribe_link,\n    BaseRdfView,\n    )\nfrom lp.registry.browser.announcement import HasAnnouncementsView\nfrom lp.registry.browser.branding import BrandingChangeView\nfrom lp.registry.browser.menu import (\n    IRegistryCollectionNavigationMenu,\n    RegistryCollectionActionMenuBase,\n    )\nfrom lp.registry.browser.pillar import (\n    PillarBugsMenu,\n    PillarInvolvementView,\n    PillarNavigationMixin,\n    PillarViewMixin,\n    )\nfrom lp.registry.browser.productseries import get_series_branch_error\nfrom lp.registry.interfaces.pillar import IPillarNameSet\nfrom lp.registry.interfaces.product import (\n    IProduct,\n    IProductReviewSearch,\n    IProductSet,\n    License,\n    LicenseStatus,\n    )\nfrom lp.registry.interfaces.productrelease import (\n    IProductRelease,\n    IProductReleaseSet,\n    )\nfrom lp.registry.interfaces.productseries import IProductSeries\nfrom lp.registry.interfaces.series import SeriesStatus\nfrom lp.registry.interfaces.sourcepackagename import ISourcePackageNameSet\nfrom lp.services.config import config\nfrom lp.services.database.decoratedresultset import DecoratedResultSet\nfrom lp.services.feeds.browser import FeedsMixin\nfrom lp.services.fields import (\n    PillarAliases,\n    PublicPersonChoice,\n    )\nfrom lp.services.librarian.interfaces import ILibraryFileAliasSet\nfrom lp.services.propertycache import cachedproperty\nfrom lp.services.webapp import (\n    ApplicationMenu,\n    canonical_url,\n    enabled_with_permission,\n    LaunchpadView,\n    Link,\n    Navigation,\n    sorted_version_numbers,\n    StandardLaunchpadFacets,\n    stepthrough,\n    stepto,\n    structured,\n    )\nfrom lp.services.webapp.authorization import check_permission\nfrom lp.services.webapp.batching import BatchNavigator\nfrom lp.services.webapp.breadcrumb import Breadcrumb\nfrom lp.services.webapp.interfaces import UnsafeFormGetSubmissionError\nfrom lp.services.webapp.menu import NavigationMenu\nfrom lp.services.worlddata.helpers import browser_languages\nfrom lp.services.worlddata.interfaces.country import ICountry\nfrom lp.translations.browser.customlanguagecode import (\n    HasCustomLanguageCodesTraversalMixin,\n    )\nOR = ' OR '\nSPACE = ' '\nclass ProductNavigation(\n    Navigation, BugTargetTraversalMixin,\n    FAQTargetNavigationMixin, HasCustomLanguageCodesTraversalMixin,\n    QuestionTargetTraversalMixin, StructuralSubscriptionTargetTraversalMixin,\n    PillarNavigationMixin):\n    usedfor = IProduct\n    @stepto('.bzr')\n    def dotbzr(self):\n        if self.context.development_focus.branch:\n            return BranchRef(self.context.development_focus.branch)\n        else:\n            return None\n    @stepthrough('+spec')\n    def traverse_spec(self, name):\n        spec = self.context.getSpecification(name)\n        if not check_permission('launchpad.LimitedView', spec):\n            return None\n        return spec\n    @stepthrough('+milestone')\n    def traverse_milestone(self, name):\n        return self.context.getMilestone(name)\n    @stepthrough('+release')\n    def traverse_release(self, name):\n        return self.context.getRelease(name)\n    @stepthrough('+announcement')\n    def traverse_announcement(self, name):\n        return self.context.getAnnouncement(name)\n    @stepthrough('+commercialsubscription')\n    def traverse_commercialsubscription(self, name):\n        return self.context.commercial_subscription\n    def traverse(self, name):\n        return self.context.getSeries(name)\nclass ProductSetNavigation(Navigation):\n    usedfor = IProductSet\n    def traverse(self, name):\n        product = self.context.getByName(name)\n        if product is None:\n            raise NotFoundError(name)\n        return self.redirectSubTree(canonical_url(product))\nclass ProductLicenseMixin:\n    \"\"\"Adds licence validation and requests reviews of licences.\n    Subclasses must inherit from Launchpad[Edit]FormView as well.\n    Requires the \"product\" attribute be set in the child\n    classes' action handler.\n    \"\"\"\n    def validate(self, data):\n        \"\"\"Validate 'licenses' and 'license_info'.\n        'licenses' must not be empty unless the product already\n        exists and never has had a licence set.\n        'license_info' must not be empty if \"Other/Proprietary\"\n        or \"Other/Open Source\" is checked.\n        \"\"\"\n        licenses = data.get('licenses', [])\n        license_widget = self.widgets.get('licenses')\n        if (len(licenses) == 0 and license_widget is not None):\n            self.setFieldError(\n                'licenses',\n                'You must select at least one licence.  If you select '\n                'Other/Proprietary or Other/OpenSource you must include a '\n                'description of the licence.')\n        elif License.OTHER_PROPRIETARY in licenses:\n            if not data.get('license_info'):\n                self.setFieldError(\n                    'license_info',\n                    'A description of the \"Other/Proprietary\" '\n                    'licence you checked is required.')\n        elif License.OTHER_OPEN_SOURCE in licenses:\n            if not data.get('license_info'):\n                self.setFieldError(\n                    'license_info',\n                    'A description of the \"Other/Open Source\" '\n                    'licence you checked is required.')\n        else:\n            # Launchpad is ok with all licenses used in this project.\n            pass\nclass ProductFacets(QuestionTargetFacetMixin, StandardLaunchpadFacets):\n    \"\"\"The links that will appear in the facet menu for an IProduct.\"\"\"\n    usedfor = IProduct\n    enable_only = ['overview', 'bugs', 'answers', 'specifications',\n                   'translations', 'branches']\n    links = StandardLaunchpadFacets.links\n    def overview(self):\n        text = 'Overview'\n        summary = 'General information about %s' % self.context.displayname\n        return Link('', text, summary)\n    def bugs(self):\n        text = 'Bugs'\n        summary = 'Bugs reported about %s' % self.context.displayname\n        return Link('', text, summary)\n    def branches(self):\n        text = 'Code'\n        summary = 'Branches for %s' % self.context.displayname\n        return Link('', text, summary)\n    def specifications(self):\n        text = 'Blueprints'\n        summary = 'Feature specifications for %s' % self.context.displayname\n        return Link('', text, summary)\n    def translations(self):\n        text = 'Translations'\n        summary = 'Translations of %s in Launchpad' % self.context.displayname\n        return Link('', text, summary)\nclass ProductInvolvementView(PillarInvolvementView):\n    \"\"\"Encourage configuration of involvement links for projects.\"\"\"\n    has_involvement = True\n    @property\n    def visible_disabled_link_names(self):\n        \"\"\"Show all disabled links...except blueprints\"\"\"\n        involved_menu = MenuAPI(self).navigation\n        all_links = involved_menu.keys()\n        # The register blueprints link should not be shown since its use is\n        # not encouraged.\n        all_links.remove('register_blueprint')\n        return all_links\n    @cachedproperty\n    def configuration_states(self):\n        \"\"\"Create a dictionary indicating the configuration statuses.\n        Each app area will be represented in the return dictionary, except\n        blueprints which we are not currently promoting.\n        \"\"\"\n        states = {}\n        states['configure_bugtracker'] = (\n            self.context.bug_tracking_usage != ServiceUsage.UNKNOWN)\n        states['configure_answers'] = (\n            self.context.answers_usage != ServiceUsage.UNKNOWN)\n        states['configure_translations'] = (\n            self.context.translations_usage != ServiceUsage.UNKNOWN)\n        states['configure_codehosting'] = (\n            self.context.codehosting_usage != ServiceUsage.UNKNOWN)\n        return states\n    @property\n    def configuration_links(self):\n        \"\"\"The enabled involvement links.\n        Returns a list of dicts keyed by:\n        'link' -- the menu link, and\n        'configured' -- a boolean representing the configuration status.\n        \"\"\"\n        overview_menu = MenuAPI(self.context).overview\n        series_menu = MenuAPI(self.context.development_focus).overview\n        configuration_names = [\n            'configure_bugtracker',\n            'configure_answers',\n            'configure_translations',\n            #'configure_blueprints',\n            ]\n        config_list = []\n        config_statuses = self.configuration_states\n        for key in configuration_names:\n            config_list.append(dict(link=overview_menu[key],\n                                    configured=config_statuses[key]))\n        # Add the branch configuration in separately.\n        set_branch = series_menu['set_branch']\n        set_branch.text = 'Configure project branch'\n        set_branch.summary = \"Specify the location of this project's code.\"\n        config_list.append(\n            dict(link=set_branch,\n                 configured=config_statuses['configure_codehosting']))\n        return config_list\n    @property\n    def registration_completeness(self):\n        \"\"\"The percent complete for registration.\"\"\"\n        config_statuses = self.configuration_states\n        configured = sum(1 for val in config_statuses.values() if val)\n        scale = 100\n        done = int(float(configured) / len(config_statuses) * scale)\n        undone = scale - done\n        return dict(done=done, undone=undone)\n    @property\n    def registration_done(self):\n        \"\"\"A boolean indicating that the services are fully configured.\"\"\"\n        return (self.registration_completeness['done'] == 100)\nclass ProductNavigationMenu(NavigationMenu):\n    usedfor = IProduct\n    facet = 'overview'\n    links = [\n        'details',\n        'announcements',\n        'downloads',\n        ]\n    def details(self):\n        text = 'Details'\n        return Link('', text)\n    def announcements(self):\n        text = 'Announcements'\n        return Link('+announcements', text)\n    def downloads(self):\n        text = 'Downloads'\n        return Link('+download', text)\nclass ProductEditLinksMixin(StructuralSubscriptionMenuMixin):\n    \"\"\"A mixin class for menus that need Product edit links.\"\"\"\n    @enabled_with_permission('launchpad.Edit')\n    def edit(self):\n        text = 'Change details'\n        return Link('+edit', text, icon='edit')\n    @enabled_with_permission('launchpad.BugSupervisor')\n    def configure_bugtracker(self):\n        text = 'Configure bug tracker'\n        summary = 'Specify where bugs are tracked for this project'\n        return Link('+configure-bugtracker', text, summary, icon='edit')\n    @enabled_with_permission('launchpad.TranslationsAdmin')\n    def configure_translations(self):\n        text = 'Configure translations'\n        summary = 'Allow users to submit translations for this project'\n        return Link('+configure-translations', text, summary, icon='edit')\n    @enabled_with_permission('launchpad.Edit')\n    def configure_answers(self):\n        text = 'Configure support tracker'\n        summary = 'Allow users to ask questions on this project'\n        return Link('+configure-answers', text, summary, icon='edit')\n    @enabled_with_permission('launchpad.Edit')\n    def configure_blueprints(self):\n        text = 'Configure blueprints'\n        summary = 'Enable tracking of feature planning.'\n        return Link('+configure-blueprints', text, summary, icon='edit')\n    @enabled_with_permission('launchpad.Edit')\n    def branding(self):\n        text = 'Change branding'\n        return Link('+branding', text, icon='edit')\n    @enabled_with_permission('launchpad.Edit')\n    def reassign(self):\n        text = 'Change people'\n        return Link('+edit-people', text, icon='edit')\n    @enabled_with_permission('launchpad.Moderate')\n    def review_license(self):\n        text = 'Review project'\n        return Link('+review-license', text, icon='edit')\n    @enabled_with_permission('launchpad.Moderate')\n    def administer(self):\n        text = 'Administer'\n        return Link('+admin', text, icon='edit')\n    @enabled_with_permission('launchpad.Driver')\n    def sharing(self):\n        return Link('+sharing', 'Sharing', icon='edit')\nclass IProductEditMenu(Interface):\n    \"\"\"A marker interface for the 'Change details' navigation menu.\"\"\"\nclass IProductActionMenu(Interface):\n    \"\"\"A marker interface for the global action navigation menu.\"\"\"\nclass ProductActionNavigationMenu(NavigationMenu, ProductEditLinksMixin):\n    \"\"\"A sub-menu for acting upon a Product.\"\"\"\n    usedfor = IProductActionMenu\n    facet = 'overview'\n    title = 'Actions'\n    @cachedproperty\n    def links(self):\n        links = ['edit', 'review_license', 'administer', 'sharing']\n        add_subscribe_link(links)\n        return links\nclass ProductOverviewMenu(ApplicationMenu, ProductEditLinksMixin,\n                          HasRecipesMenuMixin):\n    usedfor = IProduct\n    facet = 'overview'\n    links = [\n        'edit',\n        'configure_answers',\n        'configure_blueprints',\n        'configure_bugtracker',\n        'configure_translations',\n        'reassign',\n        'top_contributors',\n        'distributions',\n        'packages',\n        'series',\n        'series_add',\n        'milestones',\n        'downloads',\n        'announce',\n        'announcements',\n        'administer',\n        'review_license',\n        'rdf',\n        'branding',\n        'view_recipes',\n        ]\n    def top_contributors(self):\n        text = 'More contributors'\n        return Link('+topcontributors', text, icon='info')\n    def distributions(self):\n        text = 'Distribution packaging information'\n        return Link('+distributions', text, icon='info')\n    def packages(self):\n        text = 'Show distribution packages'\n        return Link('+packages', text, icon='info')\n    def series(self):\n        text = 'View full history'\n        return Link('+series', text, icon='info')\n    @enabled_with_permission('launchpad.Driver')\n    def series_add(self):\n        text = 'Register a series'\n        return Link('+addseries', text, icon='add')\n    def milestones(self):\n        text = 'View milestones'\n        return Link('+milestones', text, icon='info')\n    @enabled_with_permission('launchpad.Edit')\n    def announce(self):\n        text = 'Make announcement'\n        summary = 'Publish an item of news for this project'\n        return Link('+announce', text, summary, icon='add')\n    def announcements(self):\n        text = 'Read all announcements'\n        enabled = bool(self.context.getAnnouncements())\n        return Link('+announcements', text, icon='info', enabled=enabled)\n    def rdf(self):\n        text = structured(\n            '<abbr title=\"Resource Description Framework\">'\n            'RDF</abbr> metadata')\n        return Link('+rdf', text, icon='download')\n    def downloads(self):\n        text = 'Downloads'\n        return Link('+download', text, icon='info')\nclass ProductBugsMenu(PillarBugsMenu, ProductEditLinksMixin):\n    usedfor = IProduct\n    facet = 'bugs'\n    configurable_bugtracker = True\n    @cachedproperty\n    def links(self):\n        links = ['filebug', 'bugsupervisor', 'cve']\n        add_subscribe_link(links)\n        links.append('configure_bugtracker')\n        return links\nclass ProductSpecificationsMenu(NavigationMenu, ProductEditLinksMixin,\n                                HasSpecificationsMenuMixin):\n    usedfor = IProduct\n    facet = 'specifications'\n    links = ['configure_blueprints', 'listall', 'doc', 'assignments', 'new',\n             'register_sprint']\ndef _cmp_distros(a, b):\n    \"\"\"Put Ubuntu first, otherwise in alpha order.\"\"\"\n    if a == 'ubuntu':\n        return -1\n    elif b == 'ubuntu':\n        return 1\n    else:\n        return cmp(a, b)\nclass ProductSetBreadcrumb(Breadcrumb):\n    \"\"\"Return a breadcrumb for an `IProductSet`.\"\"\"\n    text = \"Projects\"\nclass ProductSetFacets(StandardLaunchpadFacets):\n    \"\"\"The links that will appear in the facet menu for the IProductSet.\"\"\"\n    usedfor = IProductSet\n    enable_only = ['overview', 'branches']\nclass SortSeriesMixin:\n    \"\"\"Provide access to helpers for series.\"\"\"\n    def _sorted_filtered_list(self, filter=None):\n        \"\"\"Return a sorted, filtered list of series.\n        The series list is sorted by version in reverse order.  It is also\n        filtered by calling `filter` on every series.  If the `filter`\n        function returns False, don't include the series.  With None (the\n        default, include everything).\n        The development focus is always first in the list.\n        \"\"\"\n        series_list = []\n        for series in self.product.series:\n            if filter is None or filter(series):\n                series_list.append(series)\n        # In production data, there exist development focus series that are\n        # obsolete.  This may be caused by bad data, or it may be intended\n        # functionality.  In either case, ensure that the development focus\n        # branch is first in the list.\n        if self.product.development_focus in series_list:\n            series_list.remove(self.product.development_focus)\n        # Now sort the list by name with newer versions before older.\n        series_list = sorted_version_numbers(series_list,\n                                             key=attrgetter('name'))\n        series_list.insert(0, self.product.development_focus)\n        return series_list\n    @property\n    def sorted_series_list(self):\n        \"\"\"Return a sorted list of series.\n        The series list is sorted by version in reverse order.\n        The development focus is always first in the list.\n        \"\"\"\n        return self._sorted_filtered_list()\n    @property\n    def sorted_active_series_list(self):\n        \"\"\"Like `sorted_series_list()` but filters out OBSOLETE series.\"\"\"\n        # Callback for the filter which only allows series that have not been\n        # marked obsolete.\n        def check_active(series):\n            return series.status != SeriesStatus.OBSOLETE\n        return self._sorted_filtered_list(check_active)\nclass ProductWithSeries:\n    \"\"\"A decorated product that includes series data.\n    The extra data is included in this class to avoid repeated\n    database queries.  Rather than hitting the database, the data is\n    cached locally and simply returned.\n    \"\"\"\n    # `series` and `development_focus` need to be declared as class\n    # attributes so that this class will not delegate the actual instance\n    # variables to self.product, which would bypass the caching.\n    series = None\n    development_focus = None\n    delegates(IProduct, 'product')\n    def __init__(self, product):\n        self.product = product\n        self.series = []\n        for series in self.product.series:\n            series_with_releases = SeriesWithReleases(series, parent=self)\n            self.series.append(series_with_releases)\n            if self.product.development_focus == series:\n                self.development_focus = series_with_releases\n        # Get all of the releases for all of the series in a single\n        # query.  The query sorts the releases properly so we know the\n        # resulting list is sorted correctly.\n        series_by_id = dict((series.id, series) for series in self.series)\n        self.release_by_id = {}\n        milestones_and_releases = list(\n            self.product.getMilestonesAndReleases())\n        for milestone, release in milestones_and_releases:\n            series = series_by_id[milestone.productseries.id]\n            release_delegate = ReleaseWithFiles(release, parent=series)\n            series.addRelease(release_delegate)\n            self.release_by_id[release.id] = release_delegate\nclass DecoratedSeries:\n    \"\"\"A decorated series that includes helper attributes for templates.\"\"\"\n    delegates(IProductSeries, 'series')\n    def __init__(self, series):\n        self.series = series\n    @property\n    def css_class(self):\n        \"\"\"The highlight, lowlight, or normal CSS class.\"\"\"\n        if self.is_development_focus:\n            return 'highlight'\n        elif self.status == SeriesStatus.OBSOLETE:\n            return 'lowlight'\n        else:\n            # This is normal presentation.\n            return ''\n    @cachedproperty\n    def packagings(self):\n        \"\"\"Convert packagings to list to prevent multiple evaluations.\"\"\"\n        return list(self.series.packagings)\nclass SeriesWithReleases(DecoratedSeries):\n    \"\"\"A decorated series that includes releases.\n    The extra data is included in this class to avoid repeated\n    database queries.  Rather than hitting the database, the data is\n    cached locally and simply returned.\n    \"\"\"\n    # `parent` and `releases` need to be declared as class attributes so that\n    # this class will not delegate the actual instance variables to\n    # self.series, which would bypass the caching for self.releases and would\n    # raise an AttributeError for self.parent.\n    parent = None\n    releases = None\n    def __init__(self, series, parent):\n        super(SeriesWithReleases, self).__init__(series)\n        self.parent = parent\n        self.releases = []\n    def addRelease(self, release):\n        self.releases.append(release)\n    @cachedproperty\n    def has_release_files(self):\n        for release in self.releases:\n            if len(release.files) > 0:\n                return True\n        return False\nclass ReleaseWithFiles:\n    \"\"\"A decorated release that includes product release files.\n    The extra data is included in this class to avoid repeated\n    database queries.  Rather than hitting the database, the data is\n    cached locally and simply returned.\n    \"\"\"\n    # `parent` needs to be declared as class attributes so that\n    # this class will not delegate the actual instance variables to\n    # self.release, which would raise an AttributeError.\n    parent = None\n    delegates(IProductRelease, 'release')\n    def __init__(self, release, parent):\n        self.release = release\n        self.parent = parent\n        self._files = None\n    @property\n    def files(self):\n        \"\"\"Cache the release files for all the releases in the product.\"\"\"\n        if self._files is None:\n            # Get all of the files for all of the releases.  The query\n            # returns all releases sorted properly.\n            product = self.parent.parent\n            release_delegates = product.release_by_id.values()\n            files = getUtility(IProductReleaseSet).getFilesForReleases(\n                release_delegates)\n            for release_delegate in release_delegates:\n                release_delegate._files = []\n            for file in files:\n                id = file.productrelease.id\n                release_delegate = product.release_by_id[id]\n                release_delegate._files.append(file)\n        # self._files was set above, since self is actually in the\n        # release_delegates variable.\n        return self._files\n    @property\n    def name_with_codename(self):\n        milestone = self.release.milestone\n        if milestone.code_name:\n            return \"%s (%s)\" % (milestone.name, milestone.code_name)\n        else:\n            return milestone.name\n    @cachedproperty\n    def total_downloads(self):\n        \"\"\"Total downloads of files associated with this release.\"\"\"\n        return sum(file.libraryfile.hits for file in self.files)\nclass ProductDownloadFileMixin:\n    \"\"\"Provides methods for managing download files.\"\"\"\n    @cachedproperty\n    def product(self):\n        \"\"\"Product with all series, release and file data cached.\n        Decorated classes are created, and they contain cached data\n        obtained with a few queries rather than many iterated queries.\n        \"\"\"\n        return ProductWithSeries(self.context)\n    def deleteFiles(self, releases):\n        \"\"\"Delete the selected files from the set of releases.\n        :param releases: A set of releases in the view.\n        :return: The number of files deleted.\n        \"\"\"\n        del_count = 0\n        for release in releases:\n            for release_file in release.files:\n                if release_file.libraryfile.id in self.delete_ids:\n                    release_file.destroySelf()\n                    self.delete_ids.remove(release_file.libraryfile.id)\n                    del_count += 1\n        return del_count\n    def getReleases(self):\n        \"\"\"Find the releases with download files for view.\"\"\"\n        raise NotImplementedError\n    def processDeleteFiles(self):\n        \"\"\"If the 'delete_files' button was pressed, process the deletions.\"\"\"\n        del_count = None\n        if 'delete_files' in self.form:\n            if self.request.method == 'POST':\n                self.delete_ids = [\n                    int(value) for key, value in self.form.items()\n                    if key.startswith('checkbox')]\n                del(self.form['delete_files'])\n                releases = self.getReleases()\n                del_count = self.deleteFiles(releases)\n            else:\n                # If there is a form submission and it is not a POST then\n                # raise an error.  This is to protect against XSS exploits.\n                raise UnsafeFormGetSubmissionError(self.form['delete_files'])\n        if del_count is not None:\n            if del_count <= 0:\n                self.request.response.addNotification(\n                    \"No files were deleted.\")\n            elif del_count == 1:\n                self.request.response.addNotification(\n                    \"1 file has been deleted.\")\n            else:\n                self.request.response.addNotification(\n                    \"%d files have been deleted.\" %\n                    del_count)\n    @cachedproperty\n    def latest_release_with_download_files(self):\n        \"\"\"Return the latest release with download files.\"\"\"\n        for series in self.sorted_active_series_list:\n            for release in series.releases:\n                if len(list(release.files)) > 0:\n                    return release\n        return None\n    @cachedproperty\n    def has_download_files(self):\n        for series in self.context.series:\n            if series.status == SeriesStatus.OBSOLETE:\n                continue\n            for release in series.getCachedReleases():\n                if len(list(release.files)) > 0:\n                    return True\n        return False\nclass ProductView(PillarViewMixin, HasAnnouncementsView, SortSeriesMixin,\n                  FeedsMixin, ProductDownloadFileMixin):\n    implements(IProductActionMenu, IEditableContextTitle)\n    @property\n    def maintainer_widget(self):\n        return InlinePersonEditPickerWidget(\n            self.context, IProduct['owner'],\n            format_link(self.context.owner),\n            header='Change maintainer', edit_view='+edit-people',\n            step_title='Select a new maintainer', show_create_team=True)\n    @property\n    def driver_widget(self):\n        return InlinePersonEditPickerWidget(\n            self.context, IProduct['driver'],\n            format_link(self.context.driver, empty_value=\"Not yet selected\"),\n            header='Change driver', edit_view='+edit-people',\n            step_title='Select a new driver', show_create_team=True,\n            null_display_value=\"Not yet selected\",\n            help_link=\"/+help-registry/driver.html\")\n    def __init__(self, context, request):\n        HasAnnouncementsView.__init__(self, context, request)\n        self.form = request.form_ng\n    def initialize(self):\n        super(ProductView, self).initialize()\n        self.status_message = None\n        product = self.context\n        title_field = IProduct['title']\n        title = \"Edit this title\"\n        self.title_edit_widget = TextLineEditorWidget(\n            product, title_field, title, 'h1', max_width='95%',\n            truncate_lines=2)\n        programming_lang = IProduct['programminglang']\n        title = 'Edit programming languages'\n        additional_arguments = {\n            'width': '9em',\n            'css_class': 'nowrap'}\n        if self.context.programminglang is None:\n            additional_arguments.update(dict(\n                default_text='Not yet specified',\n                initial_value_override='',\n                ))\n        self.languages_edit_widget = TextLineEditorWidget(\n            product, programming_lang, title, 'span', **additional_arguments)\n        self.show_programming_languages = bool(\n            self.context.programminglang or\n            check_permission('launchpad.Edit', self.context))\n        expose_structural_subscription_data_to_js(\n            self.context, self.request, self.user)\n    @property\n    def page_title(self):\n        return '%s in Launchpad' % self.context.displayname\n    @property\n    def page_description(self):\n        return '\\n'.filter(\n            None,\n            [self.context.summary, self.context.description])\n    @property\n    def show_license_status(self):\n        return self.context.license_status != LicenseStatus.OPEN_SOURCE\n    @property\n    def freshmeat_url(self):\n        if self.context.freshmeatproject:\n            return (\"http://freshmeat.net/projects/%s\"\n                % self.context.freshmeatproject)\n        return None\n    @property\n    def sourceforge_url(self):\n        if self.context.sourceforgeproject:\n            return (\"http://sourceforge.net/projects/%s\"\n                % self.context.sourceforgeproject)\n        return None\n    @property\n    def has_external_links(self):\n        return (self.context.homepageurl or\n                self.context.sourceforgeproject or\n                self.context.freshmeatproject or\n                self.context.wikiurl or\n                self.context.screenshotsurl or\n                self.context.downloadurl)\n    @property\n    def external_links(self):\n        \"\"\"The project's external links.\n        The home page link is not included because its link must have the\n        rel=nofollow attribute.\n        \"\"\"\n        from lp.services.webapp.menu import MenuLink\n        urls = [\n            ('Sourceforge project', self.sourceforge_url),\n            ('Freshmeat record', self.freshmeat_url),\n            ('Wiki', self.context.wikiurl),\n            ('Screenshots', self.context.screenshotsurl),\n            ('External downloads', self.context.downloadurl),\n            ]\n        links = []\n        for (text, url) in urls:\n            if url is not None:\n                menu_link = MenuLink(\n                    Link(url, text, icon='external-link', enabled=True))\n                menu_link.url = url\n                links.append(menu_link)\n        return links\n    @property\n    def should_display_homepage(self):\n        return (self.context.homepageurl and\n                self.context.homepageurl not in\n                    [self.freshmeat_url, self.sourceforge_url])\n    def requestCountry(self):\n        return ICountry(self.request, None)\n    def browserLanguages(self):\n        return browser_languages(self.request)\n    def getClosedBugsURL(self, series):\n        status = [status.title for status in RESOLVED_BUGTASK_STATUSES]\n        url = canonical_url(series) + '/+bugs'\n        return get_buglisting_search_filter_url(url, status=status)\n    @property\n    def can_purchase_subscription(self):\n        return (check_permission('launchpad.Edit', self.context)\n                and not self.context.qualifies_for_free_hosting)\n    @cachedproperty\n    def effective_driver(self):\n        \"\"\"Return the product driver or the project driver.\"\"\"\n        if self.context.driver is not None:\n            driver = self.context.driver\n        elif (self.context.project is not None and\n              self.context.project.driver is not None):\n            driver = self.context.project.driver\n        else:\n            driver = None\n        return driver\n    @cachedproperty\n    def show_commercial_subscription_info(self):\n        \"\"\"Should subscription information be shown?\n        Subscription information is only shown to the project maintainers,\n        Launchpad admins, and members of the Launchpad commercial team.  The\n        first two are allowed via the Launchpad.Edit permission.  The latter\n        is allowed via Launchpad.Commercial.\n        \"\"\"\n        return (check_permission('launchpad.Edit', self.context) or\n                check_permission('launchpad.Commercial', self.context))\n    @cachedproperty\n    def show_license_info(self):\n        \"\"\"Should the view show the extra licence information.\"\"\"\n        return (\n            License.OTHER_OPEN_SOURCE in self.context.licenses\n            or License.OTHER_PROPRIETARY in self.context.licenses)\n    @cachedproperty\n    def is_proprietary(self):\n        \"\"\"Is the project proprietary.\"\"\"\n        return License.OTHER_PROPRIETARY in self.context.licenses\n    @property\n    def active_widget(self):\n        return BooleanChoiceWidget(\n            self.context, IProduct['active'],\n            content_box_id='%s-edit-active' % FormattersAPI(\n                self.context.name).css_id(),\n            edit_view='+review-license',\n            tag='span',\n            false_text='Deactivated',\n            true_text='Active',\n            header='Is this project active and usable by the community?')\n    @property\n    def project_reviewed_widget(self):\n        return BooleanChoiceWidget(\n            self.context, IProduct['project_reviewed'],\n            content_box_id='%s-edit-project-reviewed' % FormattersAPI(\n                self.context.name).css_id(),\n            edit_view='+review-license',\n            tag='span',\n            false_text='Unreviewed',\n            true_text='Reviewed',\n            header='Have you reviewed the project?')\n    @property\n    def license_approved_widget(self):\n        licenses = list(self.context.licenses)\n        if License.OTHER_PROPRIETARY in licenses:\n            return 'Commercial subscription required'\n        elif [License.DONT_KNOW] == licenses or [] == licenses:\n            return 'Licence required'\n        return BooleanChoiceWidget(\n            self.context, IProduct['license_approved'],\n            content_box_id='%s-edit-license-approved' % FormattersAPI(\n                self.context.name).css_id(),\n            edit_view='+review-license',\n            tag='span',\n            false_text='Unapproved',\n            true_text='Approved',\n            header='Does the licence qualifiy the project for free hosting?')\nclass ProductPurchaseSubscriptionView(ProductView):\n    \"\"\"View the instructions to purchase a commercial subscription.\"\"\"\n    page_title = 'Purchase subscription'\nclass ProductPackagesView(LaunchpadView):\n    \"\"\"View for displaying product packaging\"\"\"\n    label = 'Linked packages'\n    page_title = label\n    @cachedproperty\n    def series_batch(self):\n        \"\"\"A batch of series that are active or have packages.\"\"\"\n        decorated_series = DecoratedResultSet(\n            self.context.active_or_packaged_series, DecoratedSeries)\n        return BatchNavigator(decorated_series, self.request)\n    @property\n    def distro_packaging(self):\n        \"\"\"This method returns a representation of the product packagings\n        for this product, in a special structure used for the\n        product-distros.pt page template.\n        Specifically, it is a list of \"distro\" objects, each of which has a\n        title, and an attribute \"packagings\" which is a list of the relevant\n        packagings for this distro and product.\n        \"\"\"\n        distros = {}\n        for packaging in self.context.packagings:\n            distribution = packaging.distroseries.distribution\n            if distribution.name in distros:\n                distro = distros[distribution.name]\n            else:\n                # Create a dictionary for the distribution.\n                distro = dict(\n                    distribution=distribution,\n                    packagings=[])\n                distros[distribution.name] = distro\n            distro['packagings'].append(packaging)\n        # Now we sort the resulting list of \"distro\" objects, and return that.\n        distro_names = distros.keys()\n        distro_names.sort(cmp=_cmp_distros)\n        results = [distros[name] for name in distro_names]\n        return results\nclass ProductPackagesPortletView(LaunchpadView):\n    \"\"\"View class for product packaging portlet.\"\"\"\n    schema = Interface\n    @cachedproperty\n    def sourcepackages(self):\n        \"\"\"The project's latest source packages.\"\"\"\n        current_packages = [\n            sp for sp in self.context.sourcepackages\n            if sp.currentrelease is not None]\n        current_packages.reverse()\n        return current_packages[0:5]\n    @cachedproperty\n    def can_show_portlet(self):\n        \"\"\"Are there packages, or can packages be suggested.\"\"\"\n        if len(self.sourcepackages) > 0:\n            return True\nclass SeriesReleasePair:\n    \"\"\"Class for holding a series and release.\n    Replaces the use of a (series, release) tuple so that it can be more\n    clearly addressed in the view class.\n    \"\"\"\n    def __init__(self, series, release):\n        self.series = series\n        self.release = release\nclass ProductDownloadFilesView(LaunchpadView,\n                               SortSeriesMixin,\n                               ProductDownloadFileMixin):\n    \"\"\"View class for the product's file downloads page.\"\"\"\n    batch_size = config.launchpad.download_batch_size\n    @property\n    def page_title(self):\n        return \"%s project files\" % self.context.displayname\n    def initialize(self):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        self.form = self.request.form\n        # Manually process action for the 'Delete' button.\n        self.processDeleteFiles()\n    def getReleases(self):\n        \"\"\"See `ProductDownloadFileMixin`.\"\"\"\n        releases = set()\n        for series in self.product.series:\n            releases.update(series.releases)\n        return releases\n    @cachedproperty\n    def series_and_releases_batch(self):\n        \"\"\"Get a batch of series and release\n        Each entry returned is a tuple of (series, release).\n        \"\"\"\n        series_and_releases = []\n        for series in self.sorted_series_list:\n            for release in series.releases:\n                if len(release.files) > 0:\n                    pair = SeriesReleasePair(series, release)\n                    if pair not in series_and_releases:\n                        series_and_releases.append(pair)\n        batch = BatchNavigator(series_and_releases, self.request,\n                               size=self.batch_size)\n        batch.setHeadings(\"release\", \"releases\")\n        return batch\n    @cachedproperty\n    def has_download_files(self):\n        \"\"\"Across series and releases do any download files exist?\"\"\"\n        for series in self.product.series:\n            if series.has_release_files:\n                return True\n        return False\n    @cachedproperty\n    def any_download_files_with_signatures(self):\n        \"\"\"Do any series or release download files have signatures?\"\"\"\n        for series in self.product.series:\n            for release in series.releases:\n                for file in release.files:\n                    if file.signature:\n                        return True\n        return False\n    @cachedproperty\n    def milestones(self):\n        \"\"\"A mapping between series and releases that are milestones.\"\"\"\n        result = dict()\n        for series in self.product.series:\n            result[series.name] = set()\n            milestone_list = [m.name for m in series.milestones]\n            for release in series.releases:\n                if release.version in milestone_list:\n                    result[series.name].add(release.version)\n        return result\n    def is_milestone(self, series, release):\n        \"\"\"Determine whether a release is milestone for the series.\"\"\"\n        return (series.name in self.milestones and\n                release.version in self.milestones[series.name])\nclass ProductBrandingView(BrandingChangeView):\n    \"\"\"A view to set branding.\"\"\"\n    implements(IProductEditMenu)\n    label = \"Change branding\"\n    schema = IProduct\n    field_names = ['icon', 'logo', 'mugshot']\n    @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return \"Change %s's branding\" % self.context.title\n    @property\n    def cancel_url(self):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        return canonical_url(self.context)\nclass ProductConfigureBase(ReturnToReferrerMixin, LaunchpadEditFormView):\n    implements(IProductEditMenu)\n    schema = IProduct\n    usage_fieldname = None\n    def setUpFields(self):\n        super(ProductConfigureBase, self).setUpFields()\n        if self.usage_fieldname is not None:\n            # The usage fields are shared among pillars.  But when referring\n            # to an individual object in Launchpad it is better to call it by\n            # its real name, i.e. 'project' instead of 'pillar'.\n            usage_field = self.form_fields.get(self.usage_fieldname)\n            if usage_field:\n                usage_field.custom_widget = CustomWidgetFactory(\n                    LaunchpadRadioWidget, orientation='vertical')\n                # Copy the field or else the description in the interface will\n                # be modified in-place.\n                field = copy_field(usage_field.field)\n                field.description = (\n                    field.description.replace('pillar', 'project'))\n                usage_field.field = field\n                if (self.usage_fieldname in\n                    ('answers_usage', 'translations_usage') and\n                    self.context.information_type in\n                    PROPRIETARY_INFORMATION_TYPES):\n                    values = usage_field.field.vocabulary.items\n                    terms = [SimpleTerm(value, value.name, value.title)\n                             for value in values\n                             if value != ServiceUsage.LAUNCHPAD]\n                    usage_field.field.vocabulary = SimpleVocabulary(terms)\n    @property\n    def field_names(self):\n        return [self.usage_fieldname]\n    @property\n    def page_title(self):\n        return self.label\n    @action(\"Change\", name='change')\n    def change_action(self, action, data):\n        self.updateContextFromData(data)\nclass ProductConfigureBlueprintsView(ProductConfigureBase):\n    \"\"\"View class to configure the Launchpad Blueprints for a project.\"\"\"\n    label = \"Configure blueprints\"\n    usage_fieldname = 'blueprints_usage'\nclass ProductConfigureAnswersView(ProductConfigureBase):\n    \"\"\"View class to configure the Launchpad Answers for a project.\"\"\"\n    label = \"Configure answers\"\n    usage_fieldname = 'answers_usage'\nclass ProductEditView(ProductLicenseMixin, LaunchpadEditFormView):\n    \"\"\"View class that lets you edit a Product object.\"\"\"\n    implements(IProductEditMenu)\n    label = \"Edit details\"\n    schema = IProduct\n    field_names = [\n        \"displayname\",\n        \"title\",\n        \"summary\",\n        \"description\",\n        \"project\",\n        \"homepageurl\",\n        \"information_type\",\n        \"sourceforgeproject\",\n        \"freshmeatproject\",\n        \"wikiurl\",\n        \"screenshotsurl\",\n        \"downloadurl\",\n        \"programminglang\",\n        \"development_focus\",\n        \"licenses\",\n        \"license_info\",\n        ]\n    custom_widget('licenses', LicenseWidget)\n    custom_widget('license_info', GhostWidget)\n    custom_widget(\n        'information_type', LaunchpadRadioWidgetWithDescription,\n        vocabulary=InformationTypeVocabulary(\n            types=PUBLIC_PROPRIETARY_INFORMATION_TYPES))\n    @property\n    def next_url(self):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        if self.context.active:\n            if len(self.errors) > 0:\n                return None\n            return canonical_url(self.context)\n        else:\n            return canonical_url(getUtility(IProductSet))\n    cancel_url = next_url\n    @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return \"Change %s's details\" % self.context.title\n    def initialize(self):\n        # The JSON cache must be populated before the super call, since\n        # the form is rendered during LaunchpadFormView's initialize()\n        # when an action is invoked.\n        cache = IJSONRequestCache(self.request)\n        json_dump_information_types(\n            cache, PUBLIC_PROPRIETARY_INFORMATION_TYPES)\n        super(ProductEditView, self).initialize()\n    def validate(self, data):\n        \"\"\"Validate 'licenses' and 'license_info'.\n        'licenses' must not be empty unless the product already\n        exists and never has had a licence set.\n        'license_info' must not be empty if \"Other/Proprietary\"\n        or \"Other/Open Source\" is checked.\n        \"\"\"\n        super(ProductEditView, self).validate(data)\n        information_type = data.get('information_type')\n        if information_type:\n            errors = [\n                str(e) for e in self.context.checkInformationType(\n                    information_type)]\n            if len(errors) > 0:\n                self.setFieldError('information_type', ' '.join(errors))\n    def showOptionalMarker(self, field_name):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        # This has the effect of suppressing the \": (Optional)\" stuff for the\n        # license_info widget.  It's the last piece of the puzzle for\n        # manipulating the license_info widget into the table for the\n        # LicenseWidget instead of the enclosing form.\n        if field_name == 'license_info':\n            return False\n        return super(ProductEditView, self).showOptionalMarker(field_name)\n    @action(\"Change\", name='change')\n    def change_action(self, action, data):\n        self.updateContextFromData(data)\nclass ProductValidationMixin:\n    def validate_deactivation(self, data):\n        \"\"\"Verify whether a product can be safely deactivated.\"\"\"\n        if data['active'] == False and self.context.active == True:\n            if len(self.context.sourcepackages) > 0:\n                self.setFieldError('active',\n                    structured(\n                        'This project cannot be deactivated since it is '\n                        'linked to one or more '\n                        '<a href=\"%s\">source packages</a>.',\n                        canonical_url(self.context, view_name='+packages')))\nclass ProductAdminView(ProductEditView, ProductValidationMixin):\n    \"\"\"View for $project/+admin\"\"\"\n    label = \"Administer project details\"\n    default_field_names = [\n        \"name\",\n        \"owner\",\n        \"active\",\n        \"autoupdate\",\n        ]\n    @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return 'Administer %s' % self.context.title\n    def setUpFields(self):\n        \"\"\"Setup the normal fields from the schema plus adds 'Registrant'.\n        The registrant is normally a read-only field and thus does not have a\n        proper widget created by default.  Even though it is read-only, admins\n        need the ability to change it.\n        \"\"\"\n        self.field_names = self.default_field_names[:]\n        admin = check_permission('launchpad.Admin', self.context)\n        if not admin:\n            self.field_names.remove('owner')\n            self.field_names.remove('autoupdate')\n        super(ProductAdminView, self).setUpFields()\n        self.form_fields = self._createAliasesField() + self.form_fields\n        if admin:\n            self.form_fields = (\n                self.form_fields + self._createRegistrantField())\n    def _createAliasesField(self):\n        \"\"\"Return a PillarAliases field for IProduct.aliases.\"\"\"\n        return form.Fields(\n            PillarAliases(\n                __name__='aliases', title=_('Aliases'),\n                description=_('Other names (separated by space) under which '\n                              'this project is known.'),\n                required=False, readonly=False),\n            render_context=self.render_context)\n    def _createRegistrantField(self):\n        \"\"\"Return a popup widget person selector for the registrant.\n        This custom field is necessary because *normally* the registrant is\n        read-only but we want the admins to have the ability to correct legacy\n        data that was set before the registrant field existed.\n        \"\"\"\n        return form.Fields(\n            PublicPersonChoice(\n                __name__='registrant',\n                title=_('Project Registrant'),\n                description=_('The person who originally registered the '\n                              'product.  Distinct from the current '\n                              'owner.  This is historical data and should '\n                              'not be changed without good cause.'),\n                vocabulary='ValidPersonOrTeam',\n                required=True,\n                readonly=False,\n                ),\n            render_context=self.render_context\n            )\n    def validate(self, data):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        super(ProductAdminView, self).validate(data)\n        self.validate_deactivation(data)\n    @property\n    def cancel_url(self):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        return canonical_url(self.context)\nclass ProductReviewLicenseView(ReturnToReferrerMixin, ProductEditView,\n                               ProductValidationMixin):\n    \"\"\"A view to review a project and change project privileges.\"\"\"\n    label = \"Review project\"\n    field_names = [\n        \"project_reviewed\",\n        \"license_approved\",\n        \"active\",\n        \"reviewer_whiteboard\",\n        ]\n    @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return 'Review %s' % self.context.title\n    def validate(self, data):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        super(ProductReviewLicenseView, self).validate(data)\n        # A project can only be approved if it has OTHER_OPEN_SOURCE as one of\n        # its licenses and not OTHER_PROPRIETARY.\n        licenses = self.context.licenses\n        license_approved = data.get('license_approved', False)\n        if license_approved:\n            if License.OTHER_PROPRIETARY in licenses:\n                self.setFieldError(\n                    'license_approved',\n                    'Proprietary projects may not be manually '\n                    'approved to use Launchpad.  Proprietary projects '\n                    'must use the commercial subscription voucher system '\n                    'to be allowed to use Launchpad.')\n            else:\n                # An Other/Open Source licence was specified so it may be\n                # approved.\n                pass\n        self.validate_deactivation(data)\nclass ProductAddSeriesView(LaunchpadFormView):\n    \"\"\"A form to add new product series\"\"\"\n    schema = IProductSeries\n", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "length": 4413, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "c87c42b130a11ba81e64078e5be1ddb51be6aa08d42fa60d"}
{"input": "", "context": "/*\n  KeePass Password Safe - The Open-Source Password Manager\n  Copyright (C) 2003-2019 Dominik Reichl <dominik.reichl@t-online.de>\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Text;\nusing System.Xml;\nusing System.Xml.Serialization;\n#if !KeePassUAP\nusing System.Drawing;\nusing System.Windows.Forms;\n#endif\n#if KeePassLibSD\nusing ICSharpCode.SharpZipLib.GZip;\n#else\nusing System.IO.Compression;\n#endif\nusing KeePassLib.Interfaces;\nusing KeePassLib.Utility;\nnamespace KeePassLib.Translation\n{\n\t[XmlRoot(\"Translation\")]\n\tpublic sealed class KPTranslation\n\t{\n\t\tpublic static readonly string FileExtension = \"lngx\";\n\t\tprivate KPTranslationProperties m_props = new KPTranslationProperties();\n\t\tpublic KPTranslationProperties Properties\n\t\t{\n\t\t\tget { return m_props; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif(value == null) throw new ArgumentNullException(\"value\");\n\t\t\t\tm_props = value;\n\t\t\t}\n\t\t}\n\t\tprivate List<KPStringTable> m_vStringTables = new List<KPStringTable>();\n\t\t[XmlArrayItem(\"StringTable\")]\n\t\tpublic List<KPStringTable> StringTables\n\t\t{\n\t\t\tget { return m_vStringTables; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif(value == null) throw new ArgumentNullException(\"value\");\n\t\t\t\tm_vStringTables = value;\n\t\t\t}\n\t\t}\n\t\tprivate List<KPFormCustomization> m_vForms = new List<KPFormCustomization>();\n\t\t[XmlArrayItem(\"Form\")]\n\t\tpublic List<KPFormCustomization> Forms\n\t\t{\n\t\t\tget { return m_vForms; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif(value == null) throw new ArgumentNullException(\"value\");\n\t\t\t\tm_vForms = value;\n\t\t\t}\n\t\t}\n\t\tprivate string m_strUnusedText = string.Empty;\n\t\t[DefaultValue(\"\")]\n\t\tpublic string UnusedText\n\t\t{\n\t\t\tget { return m_strUnusedText; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif(value == null) throw new ArgumentNullException(\"value\");\n\t\t\t\tm_strUnusedText = value;\n\t\t\t}\n\t\t}\n\t\tpublic static void Save(KPTranslation kpTrl, string strFileName,\n\t\t\tIXmlSerializerEx xs)\n\t\t{\n\t\t\tusing(FileStream fs = new FileStream(strFileName, FileMode.Create,\n\t\t\t\tFileAccess.Write, FileShare.None))\n\t\t\t{\n\t\t\t\tSave(kpTrl, fs, xs);\n\t\t\t}\n\t\t}\n\t\tpublic static void Save(KPTranslation kpTrl, Stream sOut,\n\t\t\tIXmlSerializerEx xs)\n\t\t{\n\t\t\tif(xs == null) throw new ArgumentNullException(\"xs\");\n#if !KeePassLibSD\n\t\t\tusing(GZipStream gz = new GZipStream(sOut, CompressionMode.Compress))\n#else\n\t\t\tusing(GZipOutputStream gz = new GZipOutputStream(sOut))\n#endif\n\t\t\t{\n\t\t\t\tusing(XmlWriter xw = XmlUtilEx.CreateXmlWriter(gz))\n\t\t\t\t{\n\t\t\t\t\txs.Serialize(xw, kpTrl);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsOut.Close();\n\t\t}\n\t\tpublic static KPTranslation Load(string strFile, IXmlSerializerEx xs)\n\t\t{\n\t\t\tKPTranslation kpTrl = null;\n\t\t\tusing(FileStream fs = new FileStream(strFile, FileMode.Open,\n\t\t\t\tFileAccess.Read, FileShare.Read))\n\t\t\t{\n\t\t\t\tkpTrl = Load(fs, xs);\n\t\t\t}\n\t\t\treturn kpTrl;\n\t\t}\n\t\tpublic static KPTranslation Load(Stream s, IXmlSerializerEx xs)\n\t\t{\n\t\t\tif(xs == null) throw new ArgumentNullException(\"xs\");\n\t\t\tKPTranslation kpTrl = null;\n#if !KeePassLibSD\n\t\t\tusing(GZipStream gz = new GZipStream(s, CompressionMode.Decompress))\n#else\n\t\t\tusing(GZipInputStream gz = new GZipInputStream(s))\n#endif\n\t\t\t{\n\t\t\t\tkpTrl = (xs.Deserialize(gz) as KPTranslation);\n\t\t\t}\n\t\t\ts.Close();\n\t\t\treturn kpTrl;\n\t\t}\n\t\tpublic Dictionary<string, string> SafeGetStringTableDictionary(\n\t\t\tstring strTableName)\n\t\t{\n\t\t\tforeach(KPStringTable kpst in m_vStringTables)\n\t\t\t{\n\t\t\t\tif(kpst.Name == strTableName) return kpst.ToDictionary();\n\t\t\t}\n\t\t\treturn new Dictionary<string, string>();\n\t\t}\n#if (!KeePassLibSD && !KeePassUAP)\n\t\tpublic void ApplyTo(Form form)\n\t\t{\n\t\t\tif(form == null) throw new ArgumentNullException(\"form\");\n\t\t\tif(m_props.RightToLeft)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(false); }\n\t\t\t}\n\t\t\tstring strTypeName = form.GetType().FullName;\n\t\t\tforeach(KPFormCustomization kpfc in m_vForms)\n\t\t\t{\n\t\t\t\tif(kpfc.FullName == strTypeName)\n\t\t\t\t{\n\t\t\t\t\tkpfc.ApplyTo(form);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(m_props.RightToLeft)\n\t\t\t{\n", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "length": 511, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "6d015d2fedcdf18b400b44406bfa6c05a907c32559c2fac3"}
{"input": "", "context": "/**\n *  @author : Paul Taylor\n *  @author : Eric Farng\n *\n *  Version @version:$Id$\n *\n *  MusicTag Copyright (C)2003,2004\n *\n *  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser\n *  General Public  License as published by the Free Software Foundation; either version 2.1 of the License,\n *  or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even\n *  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n *  See the GNU Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public License along with this library; if not,\n *  you can get a copy from http://www.opensource.org/licenses/lgpl-license.php or write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n *\n * Description:\n *\n */\npackage org.jaudiotagger.tag.datatype;\nimport org.jaudiotagger.tag.InvalidDataTypeException;\nimport org.jaudiotagger.tag.id3.AbstractTagFrameBody;\nimport org.jaudiotagger.tag.id3.ID3Tags;\n/**\n * Represents a number which may span a number of bytes when written to file depending what size is to be represented.\n *\n * The bitorder in ID3v2 is most significant bit first (MSB). The byteorder in multibyte numbers is most significant\n * byte first (e.g. $12345678 would be encoded $12 34 56 78), also known as big endian and network byte order.\n *\n * In ID3Specification would be denoted as $xx xx xx xx (xx ...) , this denotes at least four bytes but may be more.\n * Sometimes may be completely optional (zero bytes)\n */\npublic class NumberVariableLength extends AbstractDataType\n{\n    private static final int MINIMUM_NO_OF_DIGITS = 1;\n    private static final int MAXIMUM_NO_OF_DIGITS = 8;\n    int minLength = MINIMUM_NO_OF_DIGITS;\n    /**\n     * Creates a new ObjectNumberVariableLength datatype, set minimum length to zero\n     * if this datatype is optional.\n     *\n     * @param identifier\n     * @param frameBody\n     * @param minimumSize\n     */\n    public NumberVariableLength(String identifier, AbstractTagFrameBody frameBody, int minimumSize)\n    {\n        super(identifier, frameBody);\n        //Set minimum length, which can be zero if optional\n        this.minLength = minimumSize;\n    }\n    public NumberVariableLength(NumberVariableLength copy)\n    {\n        super(copy);\n        this.minLength = copy.minLength;\n    }\n    /**\n     * Return the maximum number of digits that can be used to express the number\n     *\n     * @return the maximum number of digits that can be used to express the number\n     */\n    public int getMaximumLenth()\n    {\n        return MAXIMUM_NO_OF_DIGITS;\n    }\n    /**\n     * Return the  minimum  number of digits that can be used to express the number\n     *\n     * @return the minimum number of digits that can be used to express the number\n     */\n    public int getMinimumLength()\n    {\n        return minLength;\n    }\n    /**\n     * @param minimumSize\n     */\n    public void setMinimumSize(int minimumSize)\n    {\n        if (minimumSize > 0)\n        {\n            this.minLength = minimumSize;\n        }\n    }\n    /**\n     * @return the number of bytes required to write this to a file\n     */\n    public int getSize()\n    {\n        if (value == null)\n        {\n            return 0;\n        }\n        else\n        {\n            int current;\n            long temp = ID3Tags.getWholeNumber(value);\n            int size = 0;\n            for (int i = MINIMUM_NO_OF_DIGITS; i <= MAXIMUM_NO_OF_DIGITS; i++)\n            {\n                current = (byte) temp & 0xFF;\n                if (current != 0)\n                {\n                    size = i;\n                }\n                temp >>= MAXIMUM_NO_OF_DIGITS;\n            }\n            return (minLength > size) ? minLength : size;\n        }\n    }\n    /**\n     * @param obj\n     * @return\n     */\n    public boolean equals(Object obj)\n    {\n        if (!(obj instanceof NumberVariableLength))\n        {\n            return false;\n        }\n        NumberVariableLength object = (NumberVariableLength) obj;\n        return this.minLength == object.minLength && super.equals(obj);\n    }\n    /**\n     * Read from Byte Array\n     *\n     * @param arr\n     * @param offset\n     * @throws NullPointerException\n     * @throws IndexOutOfBoundsException\n     */\n    public void readByteArray(byte[] arr, int offset) throws InvalidDataTypeException\n    {\n        //Coding error, should never happen\n        if (arr == null)\n        {\n            throw new NullPointerException(\"Byte array is null\");\n        }\n        //Coding error, should never happen as far as I can see\n        if (offset < 0)\n        {\n            throw new IllegalArgumentException(\"negativer offset into an array offset:\" + offset);\n        }\n        //If optional then set value to zero, this will mean that if this frame is written back to file it will be created\n        //with this additional datatype wheras it didnt exist but I think this is probably an advantage the frame is\n        //more likely to be parsed by other applications if it contains optional fields.\n        //if not optional problem with this frame\n        if (offset >= arr.length)\n        {\n            if (minLength == 0)\n            {\n                value = (long) 0;\n                return;\n            }\n            else\n            {\n                throw new InvalidDataTypeException(\"Offset to byte array is out of bounds: offset = \" + offset + \", array.length = \" + arr.length);\n            }\n        }\n        long lvalue = 0;\n        //Read the bytes (starting from offset), the most significant byte of the number being constructed is read first,\n        //we then shift the resulting long one byte over to make room for the next byte\n        for (int i = offset; i < arr.length; i++)\n        {\n            lvalue <<= 8;\n            lvalue += (arr[i] & 0xff);\n        }\n        value = lvalue;\n    }\n    /**\n     * @return String representation of the number\n     */\n    public String toString()\n    {\n        if (value == null)\n        {\n            return \"\";\n        }\n        else\n        {\n            return value.toString();\n        }\n    }\n    /**\n     * Write to Byte Array\n     *\n     * @return the datatype converted to a byte array\n     */\n    public byte[] writeByteArray()\n    {\n        int size = getSize();\n        byte[] arr;\n        if (size == 0)\n        {\n            arr = new byte[0];\n        }\n        else\n        {\n            long temp = ID3Tags.getWholeNumber(value);\n            arr = new byte[size];\n            //keeps shifting the number downwards and masking the last 8 bist to get the value for the next byte\n            //to be written\n            for (int i = size - 1; i >= 0; i--)\n            {\n                arr[i] = (byte) (temp & 0xFF);\n", "answers": ["                temp >>= 8;"], "length": 917, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "de844ece27c689ffd57823fb8131dd2a4050b2ce6d5802d8"}
{"input": "", "context": "# Copyright (c) 2017 Mark D. Hill and David A. Wood\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are\n# met: redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer;\n# redistributions in binary form must reproduce the above copyright\n# notice, this list of conditions and the following disclaimer in the\n# documentation and/or other materials provided with the distribution;\n# neither the name of the copyright holders nor the names of its\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n# Authors: Sean Wilson\n'''\nGlobal configuration module which exposes two types of configuration\nvariables:\n1. config\n2. constants (Also attached to the config variable as an attribute)\nThe main motivation for this module is to have a centralized location for\ndefaults and configuration by command line and files for the test framework.\nA secondary goal is to reduce programming errors by providing common constant\nstrings and values as python attributes to simplify detection of typos.\nA simple typo in a string can take a lot of debugging to uncover the issue,\nattribute errors are easier to notice and most autocompletion systems detect\nthem.\nThe config variable is initialzed by calling :func:`initialize_config`.\nBefore this point only ``constants`` will be availaible. This is to ensure\nthat library function writers never accidentally get stale config attributes.\nProgram arguments/flag arguments are available from the config as attributes.\nIf an attribute was not set by the command line or the optional config file,\nthen it will fallback to the `_defaults` value, if still the value is not\nfound an AttributeError will be raised.\n:func define_defaults:\n    Provided by the config if the attribute is not found in the config or\n    commandline. For instance, if we are using the list command fixtures might\n    not be able to count on the build_dir being provided since we aren't going\n    to build anything.\n:var constants:\n    Values not directly exposed by the config, but are attached to the object\n    for centralized access. I.E. you can reach them with\n    :code:`config.constants.attribute`. These should be used for setting\n    common string names used across the test framework.\n    :code:`_defaults.build_dir = None` Once this module has been imported\n    constants should not be modified and their base attributes are frozen.\n'''\nimport abc\nimport argparse\nimport copy\nimport os\nimport re\nfrom ConfigParser import ConfigParser\nfrom pickle import HIGHEST_PROTOCOL as highest_pickle_protocol\nfrom helper import absdirpath, AttrDict, FrozenAttrDict\nclass UninitialzedAttributeException(Exception):\n    '''\n    Signals that an attribute in the config file was not initialized.\n    '''\n    pass\nclass UninitializedConfigException(Exception):\n    '''\n    Signals that the config was not initialized before trying to access an\n    attribute.\n    '''\n    pass\nclass TagRegex(object):\n    def __init__(self, include, regex):\n        self.include = include\n        self.regex = re.compile(regex)\n    def __str__(self):\n        type_ = 'Include' if self.include else 'Remove'\n        return '%10s: %s' % (type_, self.regex.pattern)\nclass _Config(object):\n    _initialized = False\n    __shared_dict = {}\n    constants = AttrDict()\n    _defaults = AttrDict()\n    _config = {}\n    _cli_args = {}\n    _post_processors = {}\n    def __init__(self):\n        # This object will act as if it were a singleton.\n        self.__dict__ = self.__shared_dict\n    def _init(self, parser):\n        self._parse_commandline_args(parser)\n        self._run_post_processors()\n        self._initialized = True\n    def _init_with_dicts(self, config, defaults):\n        self._config = config\n        self._defaults = defaults\n        self._initialized = True\n    def _add_post_processor(self, attr, post_processor):\n        '''\n        :param attr: Attribute to pass to and recieve from the\n        :func:`post_processor`.\n        :param post_processor: A callback functions called in a chain to\n            perform additional setup for a config argument. Should return a\n            tuple containing the new value for the config attr.\n        '''\n        if attr not in self._post_processors:\n            self._post_processors[attr] = []\n        self._post_processors[attr].append(post_processor)\n    def _set(self, name, value):\n        self._config[name] = value\n    def _parse_commandline_args(self, parser):\n        args = parser.parse_args()\n        self._config_file_args = {}\n        for attr in dir(args):\n            # Ignore non-argument attributes.\n            if not attr.startswith('_'):\n                self._config_file_args[attr] = getattr(args, attr)\n        self._config.update(self._config_file_args)\n    def _run_post_processors(self):\n        for attr, callbacks in self._post_processors.items():\n            newval = self._lookup_val(attr)\n            for callback in callbacks:\n                newval = callback(newval)\n            if newval is not None:\n                newval = newval[0]\n            self._set(attr, newval)\n    def _lookup_val(self, attr):\n        '''\n        Get the attribute from the config or fallback to defaults.\n        :returns: If the value is not stored return None. Otherwise a tuple\n            containing the value.\n        '''\n        if attr in self._config:\n            return (self._config[attr],)\n        elif hasattr(self._defaults, attr):\n            return (getattr(self._defaults, attr),)\n    def __getattr__(self, attr):\n        if attr in dir(super(_Config, self)):\n            return getattr(super(_Config, self), attr)\n        elif not self._initialized:\n            raise UninitializedConfigException(\n                'Cannot directly access elements from the config before it is'\n                ' initialized')\n        else:\n            val = self._lookup_val(attr)\n            if val is not None:\n                return val[0]\n            else:\n                raise UninitialzedAttributeException(\n                    '%s was not initialzed in the config.' % attr)\n    def get_tags(self):\n        d = {typ: set(self.__getattr__(typ))\n            for typ in self.constants.supported_tags}\n        if any(map(lambda vals: bool(vals), d.values())):\n            return d\n        else:\n            return {}\ndef define_defaults(defaults):\n    '''\n    Defaults are provided by the config if the attribute is not found in the\n    config or commandline. For instance, if we are using the list command\n    fixtures might not be able to count on the build_dir being provided since\n    we aren't going to build anything.\n    '''\n    defaults.base_dir = os.path.abspath(os.path.join(absdirpath(__file__),\n                                                      os.pardir,\n                                                      os.pardir))\n    defaults.result_path = os.path.join(os.getcwd(), '.testing-results')\n    defaults.list_only_failed = False\ndef define_constants(constants):\n    '''\n    'constants' are values not directly exposed by the config, but are attached\n    to the object for centralized access. These should be used for setting\n    common string names used across the test framework. A simple typo in\n    a string can take a lot of debugging to uncover the issue, attribute errors\n    are easier to notice and most autocompletion systems detect them.\n    '''\n    constants.system_out_name = 'system-out'\n    constants.system_err_name = 'system-err'\n    constants.isa_tag_type = 'isa'\n    constants.x86_tag = 'X86'\n    constants.sparc_tag = 'SPARC'\n    constants.alpha_tag = 'ALPHA'\n    constants.riscv_tag = 'RISCV'\n    constants.arm_tag = 'ARM'\n    constants.mips_tag = 'MIPS'\n    constants.power_tag = 'POWER'\n    constants.null_tag = 'NULL'\n    constants.variant_tag_type = 'variant'\n    constants.opt_tag = 'opt'\n    constants.debug_tag = 'debug'\n    constants.fast_tag = 'fast'\n    constants.length_tag_type = 'length'\n    constants.quick_tag = 'quick'\n    constants.long_tag = 'long'\n    constants.supported_tags = {\n        constants.isa_tag_type : (\n            constants.x86_tag,\n            constants.sparc_tag,\n            constants.alpha_tag,\n            constants.riscv_tag,\n            constants.arm_tag,\n            constants.mips_tag,\n            constants.power_tag,\n            constants.null_tag,\n            ),\n        constants.variant_tag_type: (\n            constants.opt_tag,\n            constants.debug_tag,\n            constants.fast_tag,\n        ),\n        constants.length_tag_type: (\n            constants.quick_tag,\n            constants.long_tag,\n        ),\n    }\n    constants.supported_isas = constants.supported_tags['isa']\n    constants.supported_variants = constants.supported_tags['variant']\n    constants.supported_lengths = constants.supported_tags['length']\n    constants.tempdir_fixture_name = 'tempdir'\n    constants.gem5_simulation_stderr = 'simerr'\n    constants.gem5_simulation_stdout = 'simout'\n    constants.gem5_simulation_stats = 'stats.txt'\n    constants.gem5_simulation_config_ini = 'config.ini'\n    constants.gem5_simulation_config_json = 'config.json'\n    constants.gem5_returncode_fixture_name = 'gem5-returncode'\n    constants.gem5_binary_fixture_name = 'gem5'\n    constants.xml_filename = 'results.xml'\n    constants.pickle_filename = 'results.pickle'\n    constants.pickle_protocol = highest_pickle_protocol\n    # The root directory which all test names will be based off of.\n    constants.testing_base = absdirpath(os.path.join(absdirpath(__file__),\n                                                     os.pardir))\ndef define_post_processors(config):\n    '''\n    post_processors are used to do final configuration of variables. This is\n    useful if there is a dynamically set default, or some function that needs\n    to be applied after parsing in order to set a configration value.\n    Post processors must accept a single argument that will either be a tuple\n    containing the already set config value or ``None`` if the config value\n    has not been set to anything. They must return the modified value in the\n    same format.\n    '''\n    def set_default_build_dir(build_dir):\n        '''\n        Post-processor to set the default build_dir based on the base_dir.\n        .. seealso :func:`~_Config._add_post_processor`\n        '''\n        if not build_dir or build_dir[0] is None:\n            base_dir = config._lookup_val('base_dir')[0]\n            build_dir = (os.path.join(base_dir, 'build'),)\n        return build_dir\n    def fix_verbosity_hack(verbose):\n        return (verbose[0].val,)\n    def threads_as_int(threads):\n        if threads is not None:\n            return (int(threads[0]),)\n    def test_threads_as_int(test_threads):\n        if test_threads is not None:\n            return (int(test_threads[0]),)\n    def default_isa(isa):\n        if not isa[0]:\n            return [constants.supported_tags[constants.isa_tag_type]]\n        else:\n            return isa\n    def default_variant(variant):\n        if not variant[0]:\n            # Default variant is only opt. No need to run tests with multiple\n            # different compilation targets\n            return [[constants.opt_tag]]\n        else:\n            return variant\n    def default_length(length):\n        if not length[0]:\n            return [[constants.quick_tag]]\n        else:\n            return length\n    def compile_tag_regex(positional_tags):\n        if not positional_tags:\n            return positional_tags\n        else:\n            new_positional_tags_list = []\n            positional_tags = positional_tags[0]\n            for flag, regex in positional_tags:\n", "answers": ["                if flag == 'exclude_tags':"], "length": 1382, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "0eae36deb9dbeb31e09db8bd01a91ef5b679925d700f9563"}
{"input": "", "context": "using System;\nusing System.Globalization;\nusing System.Reflection;\nnamespace CorApi2.Metadata\n{\n    namespace Microsoft.Samples.Debugging.CorMetadata\n    {\n        public class MethodGenericParameter : GenericParameter\n        {\n            public MethodGenericParameter (int index) : base (index)\n            {\n            }\n        }\n        public class TypeGenericParameter : GenericParameter\n        {\n            public TypeGenericParameter (int index) : base (index)\n            {\n            }\n        }\n        public abstract class GenericParameter : Type\n        {\n            public int Index { get; private set; }\n            public GenericParameter (int index)\n            {\n                Index = index;\n            }\n            public override Type MakeByRefType ()\n            {\n                return this;\n            }\n            public override Type MakePointerType ()\n            {\n                return this;\n            }\n            public override Type MakeArrayType ()\n            {\n                return this;\n            }\n            public override Type MakeArrayType (int rank)\n            {\n                return this;\n            }\n            public override Type MakeGenericType (params Type[] typeArguments)\n            {\n                return this;\n            }\n            public override object[] GetCustomAttributes (bool inherit)\n            {\n                return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)\n            {\n                throw new NotImplementedException ();\n            }\n            public override Type GetInterface (string name, bool ignoreCase)\n            {\n                return null;\n            }\n            public override Type[] GetInterfaces ()\n            {\n                return EmptyTypes;\n            }\n            public override EventInfo GetEvent (string name, BindingFlags bindingAttr)\n            {\n                return null;\n            }\n            public override EventInfo[] GetEvents (BindingFlags bindingAttr)\n            {\n                return new EventInfo[0];\n            }\n            public override Type[] GetNestedTypes (BindingFlags bindingAttr)\n            {\n                return EmptyTypes;\n            }\n            public override Type GetNestedType (string name, BindingFlags bindingAttr)\n            {\n                return null;\n            }\n            public override Type GetElementType ()\n            {\n                return null;\n            }\n            protected override bool HasElementTypeImpl ()\n            {\n                return false;\n            }\n            protected override PropertyInfo GetPropertyImpl (string name, BindingFlags bindingAttr, Binder binder,\n                Type returnType, Type[] types, ParameterModifier[] modifiers)\n            {\n                return null;\n            }\n            public override PropertyInfo[] GetProperties (BindingFlags bindingAttr)\n            {\n                return new PropertyInfo[0];\n            }\n            protected override MethodInfo GetMethodImpl (string name, BindingFlags bindingAttr, Binder binder,\n                CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)\n            {\n                return null;\n            }\n            public override MethodInfo[] GetMethods (BindingFlags bindingAttr)\n            {\n                return new MethodInfo[0];\n            }\n            public override FieldInfo GetField (string name, BindingFlags bindingAttr)\n            {\n                return null;\n            }\n            public override FieldInfo[] GetFields (BindingFlags bindingAttr)\n            {\n                return new FieldInfo[0];\n            }\n            public override MemberInfo[] GetMembers (BindingFlags bindingAttr)\n            {\n                return new MemberInfo[0];\n            }\n            protected override TypeAttributes GetAttributeFlagsImpl ()\n            {\n                throw new NotImplementedException ();\n            }\n            protected override bool IsArrayImpl ()\n            {\n                return false;\n            }\n            protected override bool IsByRefImpl ()\n            {\n                return false;\n            }\n            protected override bool IsPointerImpl ()\n            {\n                return false;\n            }\n            protected override bool IsPrimitiveImpl ()\n            {\n                return false;\n            }\n            protected override bool IsCOMObjectImpl ()\n            {\n                return false;\n            }\n            public override object InvokeMember (string name, BindingFlags invokeAttr, Binder binder, object target,\n                object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters)\n            {\n                throw new NotImplementedException ();\n            }\n            public override Type UnderlyingSystemType { get { throw new NotImplementedException (); } }\n            protected override ConstructorInfo GetConstructorImpl (BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)\n            {\n                throw new NotImplementedException ();\n            }\n            public override string Name { get { return string.Format(\"`{0}\", Index); }}\n            public override Guid GUID { get {return Guid.Empty;}}\n            public override Module Module { get {throw new NotImplementedException ();} }\n            public override Assembly Assembly { get { throw new NotImplementedException (); } }\n            public override string FullName { get { return Name; }}\n            public override string Namespace { get {throw new NotImplementedException ();} }\n            public override string AssemblyQualifiedName { get { throw new NotImplementedException (); }}\n            public override Type BaseType { get {throw new NotImplementedException ();} }\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n", "answers": ["                return new object[0];"], "length": 545, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "d9e11801221dccea3ae87a56625d947443bb2bb387b8a83d"}
{"input": "", "context": "# This file is part of Scapy\n# See http://www.secdev.org/projects/scapy for more information\n# Copyright (C) Andreas Korb <andreas.d.korb@gmail.com>\n# Copyright (C) Nils Weiss <nils@we155.de>\n# This program is published under a GPLv2 license\nfrom scapy.fields import StrFixedLenField, BitEnumField, BitField, \\\n    ScalingField, FlagsField, XByteEnumField, ShortField\nfrom scapy.contrib.automotive.obd.packet import OBD_Packet\n# See https://en.wikipedia.org/wiki/OBD-II_PIDs for further information\n# PID = Parameter IDentification\nclass OBD_PID00(OBD_Packet):\n    name = \"PID_00_PIDsSupported\"\n    fields_desc = [\n        FlagsField('supported_pids', b'', 32, [\n            'PID20',\n            'PID1F',\n            'PID1E',\n            'PID1D',\n            'PID1C',\n            'PID1B',\n            'PID1A',\n            'PID19',\n            'PID18',\n            'PID17',\n            'PID16',\n            'PID15',\n            'PID14',\n            'PID13',\n            'PID12',\n            'PID11',\n            'PID10',\n            'PID0F',\n            'PID0E',\n            'PID0D',\n            'PID0C',\n            'PID0B',\n            'PID0A',\n            'PID09',\n            'PID08',\n            'PID07',\n            'PID06',\n            'PID05',\n            'PID04',\n            'PID03',\n            'PID02',\n            'PID01'\n        ])\n    ]\nclass OBD_PID01(OBD_Packet):\n    name = \"PID_01_MonitorStatusSinceDtcsCleared\"\n    onOff = {\n        0: 'off',\n        1: 'on'\n    }\n    fields_desc = [\n        BitEnumField('mil', 0, 1, onOff),\n        BitField('dtc_count', 0, 7),\n        BitField('reserved1', 0, 1),\n        FlagsField('continuous_tests_ready', b'', 3, [\n            'misfire',\n            'fuelSystem',\n            'components'\n        ]),\n        BitField('reserved2', 0, 1),\n        FlagsField('continuous_tests_supported', b'', 3, [\n            'misfire',\n            'fuel_system',\n            'components'\n        ]),\n        FlagsField('once_per_trip_tests_supported', b'', 8, [\n            'egr',\n            'oxygenSensorHeater',\n            'oxygenSensor',\n            'acSystemRefrigerant',\n            'secondaryAirSystem',\n            'evaporativeSystem',\n            'heatedCatalyst',\n            'catalyst'\n        ]),\n        FlagsField('once_per_trip_tests_ready', b'', 8, [\n            'egr',\n            'oxygenSensorHeater',\n            'oxygenSensor',\n            'acSystemRefrigerant',\n            'secondaryAirSystem',\n            'evaporativeSystem',\n            'heatedCatalyst',\n            'catalyst'\n        ])\n    ]\nclass OBD_PID02(OBD_Packet):\n    name = \"PID_02_FreezeDtc\"\n    fields_desc = [\n        ShortField('data', 0)\n    ]\nclass OBD_PID03(OBD_Packet):\n    name = \"PID_03_FuelSystemStatus\"\n    loopStates = {\n        0x00: 'OpenLoopInsufficientEngineTemperature',\n        0x02: 'ClosedLoop',\n        0x04: 'OpenLoopEngineLoadOrFuelCut',\n        0x08: 'OpenLoopDueSystemFailure',\n        0x10: 'ClosedLoopWithFault'\n    }\n    fields_desc = [\n        XByteEnumField('fuel_system1', 0, loopStates),\n        XByteEnumField('fuel_system2', 0, loopStates)\n    ]\nclass OBD_PID04(OBD_Packet):\n    name = \"PID_04_CalculatedEngineLoad\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=100 / 255., unit=\"%\")\n    ]\nclass OBD_PID05(OBD_Packet):\n    name = \"PID_05_EngineCoolantTemperature\"\n    fields_desc = [\n        ScalingField('data', 0, unit=\"deg. C\", offset=-40.0)\n    ]\nclass OBD_PID06(OBD_Packet):\n    name = \"PID_06_ShortTermFuelTrimBank1\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=100 / 128.,\n                     unit=\"%\", offset=-100.0)\n    ]\nclass OBD_PID07(OBD_Packet):\n    name = \"PID_07_LongTermFuelTrimBank1\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=100 / 128.,\n                     unit=\"%\", offset=-100.0)\n    ]\nclass OBD_PID08(OBD_Packet):\n    name = \"PID_08_ShortTermFuelTrimBank2\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=100 / 128.,\n                     unit=\"%\", offset=-100.0)\n    ]\nclass OBD_PID09(OBD_Packet):\n    name = \"PID_09_LongTermFuelTrimBank2\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=100 / 128.,\n                     unit=\"%\", offset=-100.0)\n    ]\nclass OBD_PID0A(OBD_Packet):\n    name = \"PID_0A_FuelPressure\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=3, unit=\"kPa\")\n    ]\nclass OBD_PID0B(OBD_Packet):\n    name = \"PID_0B_IntakeManifoldAbsolutePressure\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=1, unit=\"kPa\")\n    ]\nclass OBD_PID0C(OBD_Packet):\n    name = \"PID_0C_EngineRpm\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=1 / 4., unit=\"min-1\", fmt=\"H\")\n    ]\nclass OBD_PID0D(OBD_Packet):\n    name = \"PID_0D_VehicleSpeed\"\n    fields_desc = [\n        ScalingField('data', 0, unit=\"km/h\")\n    ]\nclass OBD_PID0E(OBD_Packet):\n    name = \"PID_0E_TimingAdvance\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=1 / 2., unit=\"deg.\", offset=-64.0)\n    ]\nclass OBD_PID0F(OBD_Packet):\n    name = \"PID_0F_IntakeAirTemperature\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=1, unit=\"deg. C\", offset=-40.0)\n    ]\nclass OBD_PID10(OBD_Packet):\n    name = \"PID_10_MafAirFlowRate\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=1 / 100., unit=\"g/s\")\n    ]\nclass OBD_PID11(OBD_Packet):\n    name = \"PID_11_ThrottlePosition\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=100 / 255., unit=\"%\")\n    ]\nclass OBD_PID12(OBD_Packet):\n    name = \"PID_12_CommandedSecondaryAirStatus\"\n    states = {\n        0x00: 'upstream',\n        0x02: 'downstreamCatalyticConverter',\n        0x04: 'outsideAtmosphereOrOff',\n        0x08: 'pumpCommanded'\n    }\n    fields_desc = [\n        XByteEnumField('data', 0, states)\n    ]\nclass OBD_PID13(OBD_Packet):\n    name = \"PID_13_OxygenSensorsPresent\"\n    fields_desc = [\n        StrFixedLenField('data', b'', 1)\n    ]\nclass _OBD_PID14_1B(OBD_Packet):\n    fields_desc = [\n        ScalingField('outputVoltage', 0, scaling=0.005, unit=\"V\"),\n        ScalingField('trim', 0, scaling=100 / 128.,\n                     unit=\"%\", offset=-100)\n    ]\nclass OBD_PID14(_OBD_PID14_1B):\n    name = \"PID_14_OxygenSensor1\"\nclass OBD_PID15(_OBD_PID14_1B):\n    name = \"PID_15_OxygenSensor2\"\nclass OBD_PID16(_OBD_PID14_1B):\n    name = \"PID_16_OxygenSensor3\"\nclass OBD_PID17(_OBD_PID14_1B):\n    name = \"PID_17_OxygenSensor4\"\nclass OBD_PID18(_OBD_PID14_1B):\n    name = \"PID_18_OxygenSensor5\"\nclass OBD_PID19(_OBD_PID14_1B):\n    name = \"PID_19_OxygenSensor6\"\nclass OBD_PID1A(_OBD_PID14_1B):\n    name = \"PID_1A_OxygenSensor7\"\nclass OBD_PID1B(_OBD_PID14_1B):\n    name = \"PID_1B_OxygenSensor8\"\nclass OBD_PID1C(OBD_Packet):\n    name = \"PID_1C_ObdStandardsThisVehicleConformsTo\"\n    obdStandards = {\n        0x01: 'OBD-II as defined by the CARB',\n        0x02: 'OBD as defined by the EPA',\n        0x03: 'OBD and OBD-II ',\n        0x04: 'OBD-I ',\n        0x05: 'Not OBD compliant',\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "length": 557, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "bfeb58c9afcb4b7dfc22c93238798de6b1c61704eb37134a"}
{"input": "", "context": "#!/usr/bin/env python\n#\n# Copyright 2011 Stef Walter\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Lesser General Public License as published\n# by the Free Software Foundation; either version 2 of the licence or (at\n# your option) any later version.\n#\n# See the included COPYING file for more information.\n#\nimport getopt\nimport os\nimport sys\nimport time\nimport unittest\nimport aes\nimport dh\nimport hkdf\nimport dbus\nimport dbus.service\nimport dbus.glib\nimport gobject\nCOLLECTION_PREFIX = \"/org/freedesktop/secrets/collection/\"\nbus_name = 'org.freedesktop.Secret.MockService'\nready_pipe = -1\nobjects = { }\nclass NotSupported(dbus.exceptions.DBusException):\n\tdef __init__(self, msg):\n\t\tdbus.exceptions.DBusException.__init__(self, msg, name=\"org.freedesktop.DBus.Error.NotSupported\")\nclass InvalidArgs(dbus.exceptions.DBusException):\n\tdef __init__(self, msg):\n\t\tdbus.exceptions.DBusException.__init__(self, msg, name=\"org.freedesktop.DBus.Error.InvalidArgs\")\nclass IsLocked(dbus.exceptions.DBusException):\n\tdef __init__(self, msg):\n\t\tdbus.exceptions.DBusException.__init__(self, msg, name=\"org.freedesktop.Secret.Error.IsLocked\")\nclass NoSuchObject(dbus.exceptions.DBusException):\n\tdef __init__(self, msg):\n\t\tdbus.exceptions.DBusException.__init__(self, msg, name=\"org.freedesktop.Secret.Error.NoSuchObject\")\nunique_identifier = 111\ndef next_identifier(prefix=''):\n\tglobal unique_identifier\n\tunique_identifier += 1\n\treturn \"%s%d\" % (prefix, unique_identifier)\ndef encode_identifier(value):\n\treturn \"\".join([(c.isalpha() or c.isdigit()) and c or \"_%02x\" % ord(c) \\\n\t                       for c in value.encode('utf-8')])\ndef hex_encode(string):\n\treturn \"\".join([hex(ord(c))[2:].zfill(2) for c in string])\ndef alias_path(name):\n\treturn \"/org/freedesktop/secrets/aliases/%s\" % name\nclass PlainAlgorithm():\n\tdef negotiate(self, service, sender, param):\n\t\tif type (param) != dbus.String:\n\t\t\traise InvalidArgs(\"invalid argument passed to OpenSession\")\n\t\tsession = SecretSession(service, sender, self, None)\n\t\treturn (dbus.String(\"\", variant_level=1), session)\n\tdef encrypt(self, key, data):\n\t\treturn (\"\", data)\n\tdef decrypt(self, param, data):\n\t\tif params == \"\":\n\t\t\traise InvalidArgs(\"invalid secret plain parameter\")\n\t\treturn data\nclass AesAlgorithm():\n\tdef negotiate(self, service, sender, param):\n\t\tif type (param) != dbus.ByteArray:\n\t\t\traise InvalidArgs(\"invalid argument passed to OpenSession\")\n\t\tprivat, publi = dh.generate_pair()\n\t\tpeer = dh.bytes_to_number(param)\n\t\t# print \"mock publi: \", hex(publi)\n\t\t# print \" mock peer: \", hex(peer)\n\t\tikm = dh.derive_key(privat, peer)\n\t\t# print \"  mock ikm: \", hex_encode(ikm)\n\t\tkey = hkdf.hkdf(ikm, 16)\n\t\t# print \"  mock key: \", hex_encode(key)\n\t\tsession = SecretSession(service, sender, self, key)\n\t\treturn (dbus.ByteArray(dh.number_to_bytes(publi), variant_level=1), session)\n\tdef encrypt(self, key, data):\n\t\tkey = map(ord, key)\n\t\tdata = aes.append_PKCS7_padding(data)\n\t\tkeysize = len(key)\n\t\tiv = [ord(i) for i in os.urandom(16)]\n\t\tmode = aes.AESModeOfOperation.modeOfOperation[\"CBC\"]\n\t\tmoo = aes.AESModeOfOperation()\n\t\t(mode, length, ciph) = moo.encrypt(data, mode, key, keysize, iv)\n\t\treturn (\"\".join([chr(i) for i in iv]),\n\t\t        \"\".join([chr(i) for i in ciph]))\n\tdef decrypt(self, key, param, data):\n\t\tkey = map(ord, key)\n\t\tkeysize = len(key)\n\t\tiv = map(ord, param[:16])\n\t\tdata = map(ord, data)\n\t\tmoo = aes.AESModeOfOperation()\n\t\tmode = aes.AESModeOfOperation.modeOfOperation[\"CBC\"]\n\t\tdecr = moo.decrypt(data, None, mode, key, keysize, iv)\n\t\treturn aes.strip_PKCS7_padding(decr)\nclass SecretPrompt(dbus.service.Object):\n\tdef __init__(self, service, sender, prompt_name=None, delay=0,\n\t             dismiss=False, action=None):\n\t\tself.sender = sender\n\t\tself.service = service\n\t\tself.delay = 0\n\t\tself.dismiss = False\n\t\tself.result = dbus.String(\"\", variant_level=1)\n\t\tself.action = action\n\t\tself.completed = False\n\t\tif prompt_name:\n\t\t\tself.path = \"/org/freedesktop/secrets/prompts/%s\" % prompt_name\n\t\telse:\n\t\t\tself.path = \"/org/freedesktop/secrets/prompts/%s\" % next_identifier('p')\n\t\tdbus.service.Object.__init__(self, service.bus_name, self.path)\n\t\tservice.add_prompt(self)\n\t\tassert self.path not in objects\n\t\tobjects[self.path] = self\n\tdef _complete(self):\n\t\tif self.completed:\n\t\t\treturn\n\t\tself.completed = True\n\t\tself.Completed(self.dismiss, self.result)\n\t\tself.remove_from_connection()\n\t@dbus.service.method('org.freedesktop.Secret.Prompt')\n\tdef Prompt(self, window_id):\n\t\tif self.action:\n\t\t\tself.result = self.action()\n\t\tgobject.timeout_add(self.delay * 1000, self._complete)\n\t@dbus.service.method('org.freedesktop.Secret.Prompt')\n\tdef Dismiss(self):\n\t\tself._complete()\n\t@dbus.service.signal(dbus_interface='org.freedesktop.Secret.Prompt', signature='bv')\n\tdef Completed(self, dismiss, result):\n\t\tpass\nclass SecretSession(dbus.service.Object):\n\tdef __init__(self, service, sender, algorithm, key):\n\t\tself.sender = sender\n\t\tself.service = service\n\t\tself.algorithm = algorithm\n\t\tself.key = key\n\t\tself.path = \"/org/freedesktop/secrets/sessions/%s\" % next_identifier('s')\n\t\tdbus.service.Object.__init__(self, service.bus_name, self.path)\n\t\tservice.add_session(self)\n\t\tobjects[self.path] = self\n\tdef encode_secret(self, secret, content_type):\n\t\t(params, data) = self.algorithm.encrypt(self.key, secret)\n\t\t# print \"   mock iv: \", hex_encode(params)\n\t\t# print \" mock ciph: \", hex_encode(data)\n\t\treturn dbus.Struct((dbus.ObjectPath(self.path), dbus.ByteArray(params),\n\t\t                    dbus.ByteArray(data), dbus.String(content_type)),\n\t\t                   signature=\"oayays\")\n\tdef decode_secret(self, value):\n\t\tplain = self.algorithm.decrypt(self.key, value[1], value[2])\n\t\treturn (plain, value[3])\n\t@dbus.service.method('org.freedesktop.Secret.Session')\n\tdef Close(self):\n\t\tself.remove_from_connection()\n\t\tself.service.remove_session(self)\nclass SecretItem(dbus.service.Object):\n\tSUPPORTS_MULTIPLE_OBJECT_PATHS = True\n\tdef __init__(self, collection, identifier=None, label=\"Item\", attributes={ },\n\t             secret=\"\", confirm=False, content_type=\"text/plain\", type=None):\n\t\tif identifier is None:\n\t\t\tidentifier = next_identifier()\n\t\tidentifier = encode_identifier(identifier)\n\t\tself.collection = collection\n\t\tself.identifier = identifier\n\t\tself.label = label or \"Unnamed item\"\n\t\tself.secret = secret\n\t\tself.type = type or \"org.freedesktop.Secret.Generic\"\n\t\tself.attributes = attributes\n\t\tself.content_type = content_type\n\t\tself.path = \"%s/%s\" % (collection.path, identifier)\n\t\tself.confirm = confirm\n\t\tself.created = self.modified = time.time()\n\t\tdbus.service.Object.__init__(self, collection.service.bus_name, self.path)\n\t\tself.collection.add_item(self)\n\t\tobjects[self.path] = self\n\tdef add_alias(self, name):\n\t\tpath = \"%s/%s\" % (alias_path(name), self.identifier)\n\t\tobjects[path] = self\n\t\tself.add_to_connection(self.connection, path)\n\tdef remove_alias(self, name):\n\t\tpath = \"%s/%s\" % (alias_path(name), self.identifier)\n\t\tdel objects[path]\n\t\tself.remove_from_connection(self.connection, path)\n\tdef match_attributes(self, attributes):\n\t\tfor (key, value) in attributes.items():\n\t\t\tif not self.attributes.get(key) == value:\n\t\t\t\treturn False\n\t\treturn True\n\tdef get_locked(self):\n\t\treturn self.collection.locked\n\tdef perform_xlock(self, lock):\n\t\treturn self.collection.perform_xlock(lock)\n\tdef perform_delete(self):\n\t\tself.collection.remove_item(self)\n\t\tdel objects[self.path]\n\t\tself.remove_from_connection()\n\t@dbus.service.method('org.freedesktop.Secret.Item', sender_keyword='sender')\n\tdef GetSecret(self, session_path, sender=None):\n\t\tsession = objects.get(session_path, None)\n\t\tif not session or session.sender != sender:\n\t\t\traise InvalidArgs(\"session invalid: %s\" % session_path)\n\t\tif self.get_locked():\n\t\t\traise IsLocked(\"secret is locked: %s\" % self.path)\n\t\treturn session.encode_secret(self.secret, self.content_type)\n\t@dbus.service.method('org.freedesktop.Secret.Item', sender_keyword='sender', byte_arrays=True)\n\tdef SetSecret(self, secret, sender=None):\n\t\tsession = objects.get(secret[0], None)\n\t\tif not session or session.sender != sender:\n\t\t\traise InvalidArgs(\"session invalid: %s\" % secret[0])\n\t\tif self.get_locked():\n\t\t\traise IsLocked(\"secret is locked: %s\" % self.path)\n\t\t(self.secret, self.content_type) = session.decode_secret(secret)\n\t@dbus.service.method('org.freedesktop.Secret.Item', sender_keyword='sender')\n\tdef Delete(self, sender=None):\n\t\titem = self\n\t\tdef prompt_callback():\n\t\t\titem.perform_delete()\n\t\t\treturn dbus.String(\"\", variant_level=1)\n\t\tif self.confirm:\n\t\t\tprompt = SecretPrompt(self.collection.service, sender,\n\t\t\t                      dismiss=False, action=prompt_callback)\n\t\t\treturn dbus.ObjectPath(prompt.path)\n\t\telse:\n\t\t\tself.perform_delete()\n\t\t\treturn dbus.ObjectPath(\"/\")\n\t@dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='ss', out_signature='v')\n\tdef Get(self, interface_name, property_name):\n\t\treturn self.GetAll(interface_name)[property_name]\n\t@dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='s', out_signature='a{sv}')\n\tdef GetAll(self, interface_name):\n\t\tif interface_name == 'org.freedesktop.Secret.Item':\n\t\t\treturn {\n\t\t\t\t'Locked': self.get_locked(),\n\t\t\t\t'Attributes': dbus.Dictionary(self.attributes, signature='ss', variant_level=1),\n\t\t\t\t'Label': self.label,\n\t\t\t\t'Created': dbus.UInt64(self.created),\n\t\t\t\t'Modified': dbus.UInt64(self.modified),\n\t\t\t\t# For compatibility with libgnome-keyring, not part of spec\n\t\t\t\t'Type': self.type\n\t\t\t}\n\t\telse:\n\t\t\traise InvalidArgs('Unknown %s interface' % interface_name)\n\t@dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='ssv')\n\tdef Set(self, interface_name, property_name, new_value):\n\t\tif interface_name != 'org.freedesktop.Secret.Item':\n\t\t\traise InvalidArgs('Unknown %s interface' % interface_name)\n\t\tif property_name == \"Label\":\n\t\t\tself.label = str(new_value)\n\t\telif property_name == \"Attributes\":\n\t\t\tself.attributes = dict(new_value)\n\t\t# For compatibility with libgnome-keyring, not part of spec\n\t\telif property_name == \"Type\":\n\t\t\tself.type = str(new_value)\n\t\telse:\n\t\t\traise InvalidArgs('Not writable %s property' % property_name)\n\t\tself.PropertiesChanged(interface_name, { property_name: new_value }, [])\n\t@dbus.service.signal(dbus.PROPERTIES_IFACE, signature='sa{sv}as')\n\tdef PropertiesChanged(self, interface_name, changed_properties, invalidated_properties):\n\t\tself.modified = time.time()\nclass SecretCollection(dbus.service.Object):\n\tSUPPORTS_MULTIPLE_OBJECT_PATHS = True\n\tdef __init__(self, service, identifier=None, label=\"Collection\", locked=False,\n\t             confirm=False, master=None):\n\t\tif identifier is None:\n\t\t\tidentifier = next_identifier(label)\n\t\tidentifier = encode_identifier(identifier)\n\t\tself.service = service\n\t\tself.identifier = identifier\n\t\tself.label = label or \"Unnamed collection\"\n\t\tself.locked = locked\n\t\tself.items = { }\n\t\tself.confirm = confirm\n\t\tself.master = None\n\t\tself.created = self.modified = time.time()\n\t\tself.aliased = set()\n\t\tself.path = \"%s%s\" % (COLLECTION_PREFIX, identifier)\n\t\tdbus.service.Object.__init__(self, service.bus_name, self.path)\n\t\tself.service.add_collection(self)\n\t\tobjects[self.path] = self\n\tdef add_item(self, item):\n\t\tself.items[item.path] = item\n\t\tfor alias in self.aliased:\n\t\t\titem.add_alias(alias)\n\tdef remove_item(self, item):\n\t\tfor alias in self.aliased:\n\t\t\titem.remove_alias(alias)\n\t\tdel self.items[item.path]\n\tdef add_alias(self, name):\n\t\tif name in self.aliased:\n\t\t\treturn\n\t\tself.aliased.add(name)\n\t\tfor item in self.items.values():\n\t\t\titem.add_alias(name)\n\t\tpath = alias_path(name)\n\t\tobjects[path] = self\n\t\tself.add_to_connection(self.connection, path)\n\tdef remove_alias(self, name):\n\t\tif name not in self.aliased:\n\t\t\treturn\n\t\tpath = alias_path(name)\n\t\tself.aliased.remove(name)\n\t\tdel objects[path]\n\t\tself.remove_from_connection(self.connection, path)\n\t\tfor item in self.items.values():\n\t\t\titem.remove_alias(name)\n\tdef search_items(self, attributes):\n\t\tresults = []\n\t\tfor item in self.items.values():\n\t\t\tif item.match_attributes(attributes):\n\t\t\t\tresults.append(item)\n\t\treturn results\n\tdef get_locked(self):\n\t\treturn self.locked\n\tdef perform_xlock(self, lock):\n\t\tself.locked = lock\n\t\tfor item in self.items.values():\n\t\t\tself.PropertiesChanged('org.freedesktop.Secret.Item', { \"Locked\" : lock }, [])\n\t\tself.PropertiesChanged('org.freedesktop.Secret.Collection', { \"Locked\" : lock }, [])\n\tdef perform_delete(self):\n\t\tfor item in self.items.values():\n\t\t\titem.perform_delete()\n\t\tdel objects[self.path]\n\t\tself.service.remove_collection(self)\n\t\tfor alias in list(self.aliased):\n\t\t\tself.remove_alias(alias)\n\t\tself.remove_from_connection()\n\t@dbus.service.method('org.freedesktop.Secret.Collection', byte_arrays=True, sender_keyword='sender')\n\tdef CreateItem(self, properties, value, replace, sender=None):\n\t\tsession_path = value[0]\n\t\tsession = objects.get(session_path, None)\n\t\tif not session or session.sender != sender:\n\t\t\traise InvalidArgs(\"session invalid: %s\" % session_path)\n\t\tif self.locked:\n\t\t\traise IsLocked(\"collection is locked: %s\" % self.path)\n\t\tattributes = properties.get(\"org.freedesktop.Secret.Item.Attributes\", { })\n\t\tlabel = properties.get(\"org.freedesktop.Secret.Item.Label\", None)\n\t\t(secret, content_type) = session.decode_secret(value)\n\t\titem = None\n\t\t# This is done for compatibility with libgnome-keyring, not part of spec\n\t\ttype = properties.get(\"org.freedesktop.Secret.Item.Type\", None)\n\t\tif replace:\n\t\t\titems = self.search_items(attributes)\n\t\t\tif items:\n\t\t\t\titem = items[0]\n\t\tif item is None:\n\t\t\titem = SecretItem(self, next_identifier(), label, attributes, type=type,\n\t\t\t                  secret=secret, confirm=False, content_type=content_type)\n\t\telse:\n\t\t\titem.label = label\n\t\t\titem.type = type\n\t\t\titem.secret = secret\n\t\t\titem.attributes = attributes\n\t\t\titem.content_type = content_type\n\t\treturn (dbus.ObjectPath(item.path), dbus.ObjectPath(\"/\"))\n\t@dbus.service.method('org.freedesktop.Secret.Collection')\n\tdef SearchItems(self, attributes):\n\t\titems = self.search_items(attributes)\n\t\treturn (dbus.Array([item.path for item in items], \"o\"))\n\t@dbus.service.method('org.freedesktop.Secret.Collection', sender_keyword='sender')\n\tdef Delete(self, sender=None):\n\t\tcollection = self\n\t\tdef prompt_callback():\n\t\t\tcollection.perform_delete()\n\t\t\treturn dbus.String(\"\", variant_level=1)\n\t\tif self.confirm:\n\t\t\tprompt = SecretPrompt(self.service, sender, dismiss=False,\n\t\t\t                      action=prompt_callback)\n\t\t\treturn dbus.ObjectPath(prompt.path)\n\t\telse:\n\t\t\tself.perform_delete()\n\t\t\treturn dbus.ObjectPath(\"/\")\n\t@dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='ss', out_signature='v')\n\tdef Get(self, interface_name, property_name):\n\t\treturn self.GetAll(interface_name)[property_name]\n\t@dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='s', out_signature='a{sv}')\n\tdef GetAll(self, interface_name):\n\t\tif interface_name == 'org.freedesktop.Secret.Collection':\n\t\t\treturn {\n\t\t\t\t'Locked': self.get_locked(),\n\t\t\t\t'Label': self.label,\n\t\t\t\t'Created': dbus.UInt64(self.created),\n\t\t\t\t'Modified': dbus.UInt64(self.modified),\n\t\t\t\t'Items': dbus.Array([dbus.ObjectPath(i.path) for i in self.items.values()], signature='o', variant_level=1)\n\t\t\t}\n\t\telse:\n\t\t\traise InvalidArgs('Unknown %s interface' % interface_name)\n\t@dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='ssv')\n\tdef Set(self, interface_name, property_name, new_value):\n\t\tif interface_name != 'org.freedesktop.Secret.Collection':\n\t\t\traise InvalidArgs('Unknown %s interface' % interface_name)\n\t\tif property_name == \"Label\":\n\t\t\tself.label = str(new_value)\n\t\telse:\n\t\t\traise InvalidArgs('Not a writable property %s' % property_name)\n\t\tself.PropertiesChanged(interface_name, { property_name: new_value }, [])\n\t@dbus.service.signal(dbus.PROPERTIES_IFACE, signature='sa{sv}as')\n\tdef PropertiesChanged(self, interface_name, changed_properties, invalidated_properties):\n\t\tself.modified = time.time()\nclass SecretService(dbus.service.Object):\n\talgorithms = {\n\t\t'plain': PlainAlgorithm(),\n\t\t\"dh-ietf1024-sha256-aes128-cbc-pkcs7\": AesAlgorithm(),\n\t}\n\tdef __init__(self, name=None):\n\t\tif name == None:\n\t\t\tname = bus_name\n\t\tbus = dbus.SessionBus()\n\t\tself.bus_name = dbus.service.BusName(name, allow_replacement=True, replace_existing=True)\n\t\tdbus.service.Object.__init__(self, self.bus_name, '/org/freedesktop/secrets')\n\t\tself.sessions = { }\n\t\tself.prompts = { }\n\t\tself.collections = { }\n\t\tself.aliases = { }\n\t\tself.aliased = { }\n\t\tdef on_name_owner_changed(owned, old_owner, new_owner):\n\t\t\tif not new_owner:\n\t\t\t\tfor session in list(self.sessions.get(old_owner, [])):\n\t\t\t\t\tsession.Close()\n\t\tbus.add_signal_receiver(on_name_owner_changed,\n\t\t                        'NameOwnerChanged',\n\t\t                        'org.freedesktop.DBus')\n\tdef add_standard_objects(self):\n\t\tcollection = SecretCollection(self, \"english\", label=\"Collection One\", locked=False)\n\t\tSecretItem(collection, \"1\", label=\"Item One\", secret=\"111\",\n\t\t           attributes={ \"number\": \"1\", \"string\": \"one\", \"even\": \"false\", \"xdg:schema\": \"org.mock.Schema\" })\n\t\tSecretItem(collection, \"2\", label=\"Item Two\", secret=\"222\",\n\t\t           attributes={ \"number\": \"2\", \"string\": \"two\", \"even\": \"true\", \"xdg:schema\": \"org.mock.Schema\" })\n\t\tSecretItem(collection, \"3\", label=\"Item Three\", secret=\"333\",\n\t\t           attributes={ \"number\": \"3\", \"string\": \"three\", \"even\": \"false\", \"xdg:schema\": \"org.mock.Schema\" })\n\t\tself.set_alias('default', collection)\n\t\tcollection = SecretCollection(self, \"spanish\", locked=True)\n\t\tSecretItem(collection, \"10\", secret=\"111\",\n\t\t           attributes={ \"number\": \"1\", \"string\": \"uno\", \"even\": \"false\", \"xdg:schema\": \"org.mock.Schema\" })\n\t\tSecretItem(collection, \"20\", secret=\"222\",\n\t\t           attributes={ \"number\": \"2\", \"string\": \"dos\", \"even\": \"true\", \"xdg:schema\": \"org.mock.Schema\" })\n\t\tSecretItem(collection, \"30\", secret=\"3333\",\n\t\t           attributes={ \"number\": \"3\", \"string\": \"tres\", \"even\": \"false\", \"xdg:schema\": \"org.mock.Schema\" })\n\t\tcollection = SecretCollection(self, \"german\", locked=True)\n\t\tSecretItem(collection, \"300\", secret=\"333\",\n\t\t           attributes={ \"number\": \"3\", \"string\": \"drei\", \"prime\": \"true\", \"xdg:schema\": \"org.mock.Primes\" })\n\t\tSecretItem(collection, \"400\", secret=\"444\",\n\t\t           attributes={ \"number\": \"4\", \"string\": \"vier\", \"prime\": \"false\", \"xdg:schema\": \"org.mock.Primes\" })\n\t\tSecretItem(collection, \"500\", secret=\"555\",\n\t\t           attributes={ \"number\": \"5\", \"string\": \"fuenf\", \"prime\": \"true\", \"xdg:schema\": \"org.mock.Primes\" })\n\t\tSecretItem(collection, \"600\", secret=\"666\",\n\t\t           attributes={ \"number\": \"6\", \"string\": \"sechs\", \"prime\": \"false\", \"xdg:schema\": \"org.mock.Primes\" })\n\t\tcollection = SecretCollection(self, \"empty\", locked=False)\n\t\tcollection = SecretCollection(self, \"session\", label=\"Session Keyring\", locked=False)\n\t\tself.set_alias('session', collection)\n\tdef listen(self):\n\t\tglobal ready_pipe\n", "answers": ["\t\tloop = gobject.MainLoop()"], "length": 1595, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "fe11c4d3c4d9b1392973aed3ba28df9d9cf6a13123cc8e59"}
{"input": "", "context": "using System;\nusing Server.Items;\nusing Server.Spells;\nnamespace Server.Engines.Craft\n{\n    public class DefInscription : CraftSystem\n    {\n        public override SkillName MainSkill\n        {\n            get\n            {\n                return SkillName.Inscribe;\n            }\n        }\n        public override int GumpTitleNumber\n        {\n            get\n            {\n                return 1044009;\n            }// <CENTER>INSCRIPTION MENU</CENTER>\n        }\n        private static CraftSystem m_CraftSystem;\n        public static CraftSystem CraftSystem\n        {\n            get\n            {\n                if (m_CraftSystem == null)\n                    m_CraftSystem = new DefInscription();\n                return m_CraftSystem;\n            }\n        }\n        public override double GetChanceAtMin(CraftItem item)\n        {\n            return 0.0; // 0%\n        }\n        private DefInscription()\n            : base(1, 1, 1.25)// base( 1, 1, 3.0 )\n        {\n        }\n        public override int CanCraft(Mobile from, BaseTool tool, Type typeItem)\n        {\n            if (tool == null || tool.Deleted || tool.UsesRemaining < 0)\n                return 1044038; // You have worn out your tool!\n            else if (!BaseTool.CheckAccessible(tool, from))\n                return 1044263; // The tool must be on your person to use.\n            if (typeItem != null)\n            {\n                object o = Activator.CreateInstance(typeItem);\n                if (o is SpellScroll)\n                {\n                    SpellScroll scroll = (SpellScroll)o;\n                    Spellbook book = Spellbook.Find(from, scroll.SpellID);\n                    bool hasSpell = (book != null && book.HasSpell(scroll.SpellID));\n                    scroll.Delete();\n                    return (hasSpell ? 0 : 1042404); // null : You don't have that spell!\n                }\n                else if (o is Item)\n                {\n                    ((Item)o).Delete();\n                }\n            }\n            return 0;\n        }\n        public override void PlayCraftEffect(Mobile from)\n        {\n            from.PlaySound(0x249);\n        }\n        private static readonly Type typeofSpellScroll = typeof(SpellScroll);\n        public override int PlayEndingEffect(Mobile from, bool failed, bool lostMaterial, bool toolBroken, int quality, bool makersMark, CraftItem item)\n        {\n            if (toolBroken)\n                from.SendLocalizedMessage(1044038); // You have worn out your tool\n            if (!typeofSpellScroll.IsAssignableFrom(item.ItemType)) //  not a scroll\n            {\n                if (failed)\n                {\n                    if (lostMaterial)\n                        return 1044043; // You failed to create the item, and some of your materials are lost.\n                    else\n                        return 1044157; // You failed to create the item, but no materials were lost.\n                }\n                else\n                {\n                    if (quality == 0)\n                        return 502785; // You were barely able to make this item.  It's quality is below average.\n                    else if (makersMark && quality == 2)\n                        return 1044156; // You create an exceptional quality item and affix your maker's mark.\n                    else if (quality == 2)\n                        return 1044155; // You create an exceptional quality item.\n                    else\n                        return 1044154; // You create the item.\n                }\n            }\n            else\n            {\n                if (failed)\n                    return 501630; // You fail to inscribe the scroll, and the scroll is ruined.\n                else\n                    return 501629; // You inscribe the spell and put the scroll in your backpack.\n            }\n        }\n        private int m_Circle, m_Mana;\n        private enum Reg { BlackPearl, Bloodmoss, Garlic, Ginseng, MandrakeRoot, Nightshade, SulfurousAsh, SpidersSilk, BatWing, GraveDust, DaemonBlood, NoxCrystal, PigIron, Bone, DragonBlood, FertileDirt, DaemonBone }\n        private readonly Type[] m_RegTypes = new Type[]\n        {\n            typeof( BlackPearl ),\n\t\t\ttypeof( Bloodmoss ),\n\t\t\ttypeof( Garlic ),\n\t\t\ttypeof( Ginseng ),\n\t\t\ttypeof( MandrakeRoot ),\n\t\t\ttypeof( Nightshade ),\n\t\t\ttypeof( SulfurousAsh ),\t\n\t\t\ttypeof( SpidersSilk ),\n            typeof( BatWing ),\n            typeof( GraveDust ),\n            typeof( DaemonBlood ),\n            typeof( NoxCrystal ),\n            typeof( PigIron ),\n\t\t\ttypeof( Bone ),\n\t\t\ttypeof( DragonBlood ),\n\t\t\ttypeof( FertileDirt ),\n\t\t\ttypeof( DaemonBone )\t\t\t\n        };\n        private int m_Index;\n        private void AddSpell(Type type, params Reg[] regs)\n        {\n            double minSkill, maxSkill;\n            int cliloc;\n            switch (m_Circle)\n            {\n                default:\n                case 0: minSkill = -25.0; maxSkill = 25.0; cliloc = 1111691; break;\n                case 1: minSkill = -10.8; maxSkill = 39.2; cliloc = 1111691; break;\n                case 2: minSkill = 03.5; maxSkill = 53.5; cliloc = 1111692; break;\n                case 3: minSkill = 17.8; maxSkill = 67.8; cliloc = 1111692; break;\n                case 4: minSkill = 32.1; maxSkill = 82.1; cliloc = 1111693; break;\n                case 5: minSkill = 46.4; maxSkill = 96.4; cliloc = 1111693; break;\n                case 6: minSkill = 60.7; maxSkill = 110.7; cliloc = 1111694; break;\n                case 7: minSkill = 75.0; maxSkill = 125.0; cliloc = 1111694; break;\n            }\n            int index = AddCraft(type, cliloc, 1044381 + m_Index++, minSkill, maxSkill, m_RegTypes[(int)regs[0]], 1044353 + (int)regs[0], 1, 1044361 + (int)regs[0]);\n            for (int i = 1; i < regs.Length; ++i)\n                AddRes(index, m_RegTypes[(int)regs[i]], 1044353 + (int)regs[i], 1, 1044361 + (int)regs[i]);\n            AddRes(index, typeof(BlankScroll), 1044377, 1, 1044378);\n            SetManaReq(index, m_Mana);\n        }\n        private void AddNecroSpell(int spell, int mana, double minSkill, Type type, params Reg[] regs)\n        {\n            int id = GetRegLocalization(regs[0]);\n            int index = AddCraft(type, 1061677, 1060509 + spell, minSkill, minSkill + 1.0, m_RegTypes[(int)regs[0]], id, 1, 501627);\n            for (int i = 1; i < regs.Length; ++i)\n            {\n                id = GetRegLocalization(regs[i]);\n                AddRes(index, m_RegTypes[(int)regs[0]], id, 1, 501627);\n            }\n            AddRes(index, typeof(BlankScroll), 1044377, 1, 1044378);\n            SetManaReq(index, mana);\n        }\n        private void AddMysticSpell(int id, int mana, double minSkill, Type type, params Reg[] regs)\n        {\n            int index = AddCraft(type, 1111671, id, minSkill, minSkill + 1.0, m_RegTypes[(int)regs[0]], GetRegLocalization(regs[0]), 1, 501627);\t//Yes, on OSI it's only 1.0 skill diff'.  Don't blame me, blame OSI.\n            for (int i = 1; i < regs.Length; ++i)\n                AddRes(index, m_RegTypes[(int)regs[0]], GetRegLocalization(regs[i]), 1, 501627);\n            AddRes(index, typeof(BlankScroll), 1044377, 1, 1044378);\n            SetManaReq(index, mana);\n        }\n        private int GetRegLocalization(Reg reg)\n        {\n            int loc = 0;\n            switch (reg)\n            {\n                case Reg.BatWing: loc = 1023960; break;\n                case Reg.GraveDust: loc = 1023983; break;\n                case Reg.DaemonBlood: loc = 1023965; break;\n                case Reg.NoxCrystal: loc = 1023982; break;\n                case Reg.PigIron: loc = 1023978; break;\n                case Reg.Bone: loc = 1023966; break;\n                case Reg.DragonBlood: loc = 1023970; break;\n                case Reg.FertileDirt: loc = 1023969; break;\n                case Reg.DaemonBone: loc = 1023968; break;\n            }\n            if (loc == 0)\n                loc = 1044353 + (int)reg;\n            return loc;\n        }\n        public override void InitCraftList()\n        {\n            m_Circle = 0;\n\t\t\tm_Mana = 4;\n\t\t\tAddSpell( typeof( ReactiveArmorScroll ), Reg.Garlic, Reg.SpidersSilk, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( ClumsyScroll ), Reg.Bloodmoss, Reg.Nightshade );\n\t\t\tAddSpell( typeof( CreateFoodScroll ), Reg.Garlic, Reg.Ginseng, Reg.MandrakeRoot );\n\t\t\tAddSpell( typeof( FeeblemindScroll ), Reg.Nightshade, Reg.Ginseng );\n\t\t\tAddSpell( typeof( HealScroll ), Reg.Garlic, Reg.Ginseng, Reg.SpidersSilk );\n\t\t\tAddSpell( typeof( MagicArrowScroll ), Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( NightSightScroll ), Reg.SpidersSilk, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( WeakenScroll ), Reg.Garlic, Reg.Nightshade );\n\t\t\tm_Circle = 1;\n\t\t\tm_Mana = 6;\n\t\t\tAddSpell( typeof( AgilityScroll ), Reg.Bloodmoss, Reg.MandrakeRoot );\n\t\t\tAddSpell( typeof( CunningScroll ), Reg.Nightshade, Reg.MandrakeRoot );\n\t\t\tAddSpell( typeof( CureScroll ), Reg.Garlic, Reg.Ginseng );\n\t\t\tAddSpell( typeof( HarmScroll ), Reg.Nightshade, Reg.SpidersSilk );\n\t\t\tAddSpell( typeof( MagicTrapScroll ), Reg.Garlic, Reg.SpidersSilk, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( MagicUnTrapScroll ), Reg.Bloodmoss, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( ProtectionScroll ), Reg.Garlic, Reg.Ginseng, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( StrengthScroll ), Reg.Nightshade, Reg.MandrakeRoot );\n\t\t\tm_Circle = 2;\n\t\t\tm_Mana = 9;\n\t\t\tAddSpell( typeof( BlessScroll ), Reg.Garlic, Reg.MandrakeRoot );\n\t\t\tAddSpell( typeof( FireballScroll ), Reg.BlackPearl );\n\t\t\tAddSpell( typeof( MagicLockScroll ), Reg.Bloodmoss, Reg.Garlic, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( PoisonScroll ), Reg.Nightshade );\n\t\t\tAddSpell( typeof( TelekinisisScroll ), Reg.Bloodmoss, Reg.MandrakeRoot );\n\t\t\tAddSpell( typeof( TeleportScroll ), Reg.Bloodmoss, Reg.MandrakeRoot );\n\t\t\tAddSpell( typeof( UnlockScroll ), Reg.Bloodmoss, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( WallOfStoneScroll ), Reg.Bloodmoss, Reg.Garlic );\n\t\t\tm_Circle = 3;\n\t\t\tm_Mana = 11;\n\t\t\tAddSpell( typeof( ArchCureScroll ), Reg.Garlic, Reg.Ginseng, Reg.MandrakeRoot );\n\t\t\tAddSpell( typeof( ArchProtectionScroll ), Reg.Garlic, Reg.Ginseng, Reg.MandrakeRoot, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( CurseScroll ), Reg.Garlic, Reg.Nightshade, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( FireFieldScroll ), Reg.BlackPearl, Reg.SpidersSilk, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( GreaterHealScroll ), Reg.Garlic, Reg.SpidersSilk, Reg.MandrakeRoot, Reg.Ginseng );\n\t\t\tAddSpell( typeof( LightningScroll ), Reg.MandrakeRoot, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( ManaDrainScroll ), Reg.BlackPearl, Reg.SpidersSilk, Reg.MandrakeRoot );\n\t\t\tAddSpell( typeof( RecallScroll ), Reg.BlackPearl, Reg.Bloodmoss, Reg.MandrakeRoot );\n\t\t\tm_Circle = 4;\n\t\t\tm_Mana = 14;\n\t\t\tAddSpell( typeof( BladeSpiritsScroll ), Reg.BlackPearl, Reg.Nightshade, Reg.MandrakeRoot );\n\t\t\tAddSpell( typeof( DispelFieldScroll ), Reg.BlackPearl, Reg.Garlic, Reg.SpidersSilk, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( IncognitoScroll ), Reg.Bloodmoss, Reg.Garlic, Reg.Nightshade );\n\t\t\tAddSpell( typeof( MagicReflectScroll ), Reg.Garlic, Reg.MandrakeRoot, Reg.SpidersSilk );\n\t\t\tAddSpell( typeof( MindBlastScroll ), Reg.BlackPearl, Reg.MandrakeRoot, Reg.Nightshade, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( ParalyzeScroll ), Reg.Garlic, Reg.MandrakeRoot, Reg.SpidersSilk );\n\t\t\tAddSpell( typeof( PoisonFieldScroll ), Reg.BlackPearl, Reg.Nightshade, Reg.SpidersSilk );\n\t\t\tAddSpell( typeof( SummonCreatureScroll ), Reg.Bloodmoss, Reg.MandrakeRoot, Reg.SpidersSilk );\n\t\t\tm_Circle = 5;\n\t\t\tm_Mana = 20;\n\t\t\tAddSpell( typeof( DispelScroll ), Reg.Garlic, Reg.MandrakeRoot, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( EnergyBoltScroll ), Reg.BlackPearl, Reg.Nightshade );\n\t\t\tAddSpell( typeof( ExplosionScroll ), Reg.Bloodmoss, Reg.MandrakeRoot );\n\t\t\tAddSpell( typeof( InvisibilityScroll ), Reg.Bloodmoss, Reg.Nightshade );\n\t\t\tAddSpell( typeof( MarkScroll ), Reg.Bloodmoss, Reg.BlackPearl, Reg.MandrakeRoot );\n\t\t\tAddSpell( typeof( MassCurseScroll ), Reg.Garlic, Reg.MandrakeRoot, Reg.Nightshade, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( ParalyzeFieldScroll ), Reg.BlackPearl, Reg.Ginseng, Reg.SpidersSilk );\n\t\t\tAddSpell( typeof( RevealScroll ), Reg.Bloodmoss, Reg.SulfurousAsh );\n\t\t\tm_Circle = 6;\n\t\t\tm_Mana = 40;\n\t\t\tAddSpell( typeof( ChainLightningScroll ), Reg.BlackPearl, Reg.Bloodmoss, Reg.MandrakeRoot, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( EnergyFieldScroll ), Reg.BlackPearl, Reg.MandrakeRoot, Reg.SpidersSilk, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( FlamestrikeScroll ), Reg.SpidersSilk, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( GateTravelScroll ), Reg.BlackPearl, Reg.MandrakeRoot, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( ManaVampireScroll ), Reg.BlackPearl, Reg.Bloodmoss, Reg.MandrakeRoot, Reg.SpidersSilk );\n\t\t\tAddSpell( typeof( MassDispelScroll ), Reg.BlackPearl, Reg.Garlic, Reg.MandrakeRoot, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( MeteorSwarmScroll ), Reg.Bloodmoss, Reg.MandrakeRoot, Reg.SulfurousAsh, Reg.SpidersSilk );\n\t\t\tAddSpell( typeof( PolymorphScroll ), Reg.Bloodmoss, Reg.MandrakeRoot, Reg.SpidersSilk );\n\t\t\tm_Circle = 7;\n\t\t\tm_Mana = 50;\n\t\t\tAddSpell( typeof( EarthquakeScroll ), Reg.Bloodmoss, Reg.MandrakeRoot, Reg.Ginseng, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( EnergyVortexScroll ), Reg.BlackPearl, Reg.Bloodmoss, Reg.MandrakeRoot, Reg.Nightshade );\n\t\t\tAddSpell( typeof( ResurrectionScroll ), Reg.Bloodmoss, Reg.Garlic, Reg.Ginseng );\n\t\t\tAddSpell( typeof( SummonAirElementalScroll ), Reg.Bloodmoss, Reg.MandrakeRoot, Reg.SpidersSilk );\n\t\t\tAddSpell( typeof( SummonDaemonScroll ), Reg.Bloodmoss, Reg.MandrakeRoot, Reg.SpidersSilk, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( SummonEarthElementalScroll ), Reg.Bloodmoss, Reg.MandrakeRoot, Reg.SpidersSilk );\n\t\t\tAddSpell( typeof( SummonFireElementalScroll ), Reg.Bloodmoss, Reg.MandrakeRoot, Reg.SpidersSilk, Reg.SulfurousAsh );\n\t\t\tAddSpell( typeof( SummonWaterElementalScroll ), Reg.Bloodmoss, Reg.MandrakeRoot, Reg.SpidersSilk );\n\t\t\tif ( Core.SE )\n\t\t\t{\n\t\t\t\tAddNecroSpell(  0, 23, 39.6, typeof( AnimateDeadScroll ), Reg.GraveDust, Reg.DaemonBlood );\n\t\t\t\tAddNecroSpell(  1, 13, 19.6, typeof( BloodOathScroll ), Reg.DaemonBlood );\n\t\t\t\tAddNecroSpell(  2, 11, 19.6, typeof( CorpseSkinScroll ), Reg.BatWing, Reg.GraveDust );\n\t\t\t\tAddNecroSpell(  3,  7, 19.6, typeof( CurseWeaponScroll ), Reg.PigIron );\n\t\t\t\tAddNecroSpell(  4, 11, 19.6, typeof( EvilOmenScroll ), Reg.BatWing, Reg.NoxCrystal );\n\t\t\t\tAddNecroSpell(  5, 11, 39.6, typeof( HorrificBeastScroll ), Reg.BatWing, Reg.DaemonBlood );\n\t\t\t\tAddNecroSpell(  6, 23, 69.6, typeof( LichFormScroll ), Reg.GraveDust, Reg.DaemonBlood, Reg.NoxCrystal );\n\t\t\t\tAddNecroSpell(  7, 17, 29.6, typeof( MindRotScroll ), Reg.BatWing, Reg.DaemonBlood, Reg.PigIron );\n\t\t\t\tAddNecroSpell(  8,  5, 19.6, typeof( PainSpikeScroll ), Reg.GraveDust, Reg.PigIron );\n\t\t\t\tAddNecroSpell(  9, 17, 49.6, typeof( PoisonStrikeScroll ), Reg.NoxCrystal );\n\t\t\t\tAddNecroSpell( 10, 29, 64.6, typeof( StrangleScroll ), Reg.DaemonBlood, Reg.NoxCrystal );\n\t\t\t\tAddNecroSpell( 11, 17, 29.6, typeof( SummonFamiliarScroll ), Reg.BatWing, Reg.GraveDust, Reg.DaemonBlood );\n\t\t\t\tAddNecroSpell( 12, 23, 98.6, typeof( VampiricEmbraceScroll ), Reg.BatWing, Reg.NoxCrystal, Reg.PigIron );\n\t\t\t\tAddNecroSpell( 13, 41, 79.6, typeof( VengefulSpiritScroll ), Reg.BatWing, Reg.GraveDust, Reg.PigIron );\n\t\t\t\tAddNecroSpell( 14, 23, 59.6, typeof( WitherScroll ), Reg.GraveDust, Reg.NoxCrystal, Reg.PigIron );\n\t\t\t\tAddNecroSpell( 15, 17, 79.6, typeof( WraithFormScroll ), Reg.NoxCrystal, Reg.PigIron );\n\t\t\t\tAddNecroSpell( 16, 40, 79.6, typeof( ExorcismScroll ), Reg.NoxCrystal, Reg.GraveDust );\n\t\t\t}\n            int index;\n\t\t\t\n            if (Core.ML)\n            {\n                index = this.AddCraft(typeof(EnchantedSwitch), 1044294, 1072893, 45.0, 95.0, typeof(BlankScroll), 1044377, 1, 1044378);\n                this.AddRes(index, typeof(SpidersSilk), 1044360, 1, 1044253);\n                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(SwitchItem), 1073464, 1, 1044253);\n                this.ForceNonExceptional(index);\n                this.SetNeededExpansion(index, Expansion.ML);\n\t\t\t\t\n                index = this.AddCraft(typeof(RunedPrism), 1044294, 1073465, 45.0, 95.0, typeof(BlankScroll), 1044377, 1, 1044378);\n                this.AddRes(index, typeof(SpidersSilk), 1044360, 1, 1044253);\n", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "length": 1615, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "faf59e122b5cf0c3acab0447bcd6a53f208c972065c8414a"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n\"\"\"\n    flask.ctx\n    ~~~~~~~~~\n    Implements the objects required to keep the context.\n    :copyright: (c) 2015 by Armin Ronacher.\n    :license: BSD, see LICENSE for more details.\n\"\"\"\nfrom __future__ import with_statement\nimport sys\nfrom functools import update_wrapper\nfrom werkzeug.exceptions import HTTPException\nfrom .globals import _request_ctx_stack, _app_ctx_stack\nfrom .signals import appcontext_pushed, appcontext_popped\nfrom ._compat import BROKEN_PYPY_CTXMGR_EXIT, reraise\nclass _AppCtxGlobals(object):\n    \"\"\"A plain object.\"\"\"\n    def get(self, name, default=None):\n        return self.__dict__.get(name, default)\n    def __contains__(self, item):\n        return item in self.__dict__\n    def __iter__(self):\n        return iter(self.__dict__)\n    def __repr__(self):\n        top = _app_ctx_stack.top\n        if top is not None:\n            return '<flask.g of %r>' % top.app.name\n        return object.__repr__(self)\ndef after_this_request(f):\n    \"\"\"Executes a function after this request.  This is useful to modify\n    response objects.  The function is passed the response object and has\n    to return the same or a new one.\n    Example::\n        @app.route('/')\n        def index():\n            @after_this_request\n            def add_header(response):\n                response.headers['X-Foo'] = 'Parachute'\n                return response\n            return 'Hello World!'\n    This is more useful if a function other than the view function wants to\n    modify a response.  For instance think of a decorator that wants to add\n    some headers without converting the return value into a response object.\n    .. versionadded:: 0.9\n    \"\"\"\n    _request_ctx_stack.top._after_request_functions.append(f)\n    return f\ndef copy_current_request_context(f):\n    \"\"\"A helper function that decorates a function to retain the current\n    request context.  This is useful when working with greenlets.  The moment\n    the function is decorated a copy of the request context is created and\n    then pushed when the function is called.\n    Example::\n        import gevent\n        from flask import copy_current_request_context\n        @app.route('/')\n        def index():\n            @copy_current_request_context\n            def do_some_work():\n                # do some work here, it can access flask.request like you\n                # would otherwise in the view function.\n                ...\n            gevent.spawn(do_some_work)\n            return 'Regular response'\n    .. versionadded:: 0.10\n    \"\"\"\n    top = _request_ctx_stack.top\n    if top is None:\n        raise RuntimeError('This decorator can only be used at local scopes '\n            'when a request context is on the stack.  For instance within '\n            'view functions.')\n    reqctx = top.copy()\n    def wrapper(*args, **kwargs):\n        with reqctx:\n            return f(*args, **kwargs)\n    return update_wrapper(wrapper, f)\ndef has_request_context():\n    \"\"\"If you have code that wants to test if a request context is there or\n    not this function can be used.  For instance, you may want to take advantage\n    of request information if the request object is available, but fail\n    silently if it is unavailable.\n    ::\n        class User(db.Model):\n            def __init__(self, username, remote_addr=None):\n                self.username = username\n                if remote_addr is None and has_request_context():\n                    remote_addr = request.remote_addr\n                self.remote_addr = remote_addr\n    Alternatively you can also just test any of the context bound objects\n    (such as :class:`request` or :class:`g` for truthness)::\n        class User(db.Model):\n            def __init__(self, username, remote_addr=None):\n                self.username = username\n                if remote_addr is None and request:\n                    remote_addr = request.remote_addr\n                self.remote_addr = remote_addr\n    .. versionadded:: 0.7\n    \"\"\"\n    return _request_ctx_stack.top is not None\ndef has_app_context():\n    \"\"\"Works like :func:`has_request_context` but for the application\n    context.  You can also just do a boolean check on the\n    :data:`current_app` object instead.\n    .. versionadded:: 0.9\n    \"\"\"\n    return _app_ctx_stack.top is not None\nclass AppContext(object):\n    \"\"\"The application context binds an application object implicitly\n    to the current thread or greenlet, similar to how the\n    :class:`RequestContext` binds request information.  The application\n    context is also implicitly created if a request context is created\n    but the application is not on top of the individual application\n    context.\n    \"\"\"\n    def __init__(self, app):\n        self.app = app\n        self.url_adapter = app.create_url_adapter(None)\n        self.g = app.app_ctx_globals_class()\n        # Like request context, app contexts can be pushed multiple times\n        # but there a basic \"refcount\" is enough to track them.\n        self._refcnt = 0\n    def push(self):\n        \"\"\"Binds the app context to the current context.\"\"\"\n        self._refcnt += 1\n        if hasattr(sys, 'exc_clear'):\n            sys.exc_clear()\n        _app_ctx_stack.push(self)\n        appcontext_pushed.send(self.app)\n    def pop(self, exc=None):\n        \"\"\"Pops the app context.\"\"\"\n        self._refcnt -= 1\n        if self._refcnt <= 0:\n            if exc is None:\n                exc = sys.exc_info()[1]\n            self.app.do_teardown_appcontext(exc)\n        rv = _app_ctx_stack.pop()\n        assert rv is self, 'Popped wrong app context.  (%r instead of %r)' \\\n            % (rv, self)\n        appcontext_popped.send(self.app)\n    def __enter__(self):\n        self.push()\n        return self\n    def __exit__(self, exc_type, exc_value, tb):\n        self.pop(exc_value)\n        if BROKEN_PYPY_CTXMGR_EXIT and exc_type is not None:\n            reraise(exc_type, exc_value, tb)\nclass RequestContext(object):\n    \"\"\"The request context contains all request relevant information.  It is\n    created at the beginning of the request and pushed to the\n    `_request_ctx_stack` and removed at the end of it.  It will create the\n    URL adapter and request object for the WSGI environment provided.\n    Do not attempt to use this class directly, instead use\n    :meth:`~flask.Flask.test_request_context` and\n    :meth:`~flask.Flask.request_context` to create this object.\n    When the request context is popped, it will evaluate all the\n    functions registered on the application for teardown execution\n    (:meth:`~flask.Flask.teardown_request`).\n    The request context is automatically popped at the end of the request\n    for you.  In debug mode the request context is kept around if\n    exceptions happen so that interactive debuggers have a chance to\n    introspect the data.  With 0.4 this can also be forced for requests\n    that did not fail and outside of ``DEBUG`` mode.  By setting\n    ``'flask._preserve_context'`` to ``True`` on the WSGI environment the\n    context will not pop itself at the end of the request.  This is used by\n    the :meth:`~flask.Flask.test_client` for example to implement the\n    deferred cleanup functionality.\n    You might find this helpful for unittests where you need the\n    information from the context local around for a little longer.  Make\n    sure to properly :meth:`~werkzeug.LocalStack.pop` the stack yourself in\n    that situation, otherwise your unittests will leak memory.\n    \"\"\"\n    def __init__(self, app, environ, request=None):\n        self.app = app\n        if request is None:\n            request = app.request_class(environ)\n        self.request = request\n        self.url_adapter = app.create_url_adapter(self.request)\n        self.flashes = None\n        self.session = None\n        # Request contexts can be pushed multiple times and interleaved with\n        # other request contexts.  Now only if the last level is popped we\n        # get rid of them.  Additionally if an application context is missing\n        # one is created implicitly so for each level we add this information\n        self._implicit_app_ctx_stack = []\n        # indicator if the context was preserved.  Next time another context\n        # is pushed the preserved context is popped.\n        self.preserved = False\n        # remembers the exception for pop if there is one in case the context\n        # preservation kicks in.\n        self._preserved_exc = None\n        # Functions that should be executed after the request on the response\n        # object.  These will be called before the regular \"after_request\"\n        # functions.\n        self._after_request_functions = []\n        self.match_request()\n    def _get_g(self):\n        return _app_ctx_stack.top.g\n    def _set_g(self, value):\n        _app_ctx_stack.top.g = value\n    g = property(_get_g, _set_g)\n    del _get_g, _set_g\n    def copy(self):\n        \"\"\"Creates a copy of this request context with the same request object.\n        This can be used to move a request context to a different greenlet.\n        Because the actual request object is the same this cannot be used to\n        move a request context to a different thread unless access to the\n        request object is locked.\n        .. versionadded:: 0.10\n        \"\"\"\n        return self.__class__(self.app,\n            environ=self.request.environ,\n            request=self.request\n        )\n    def match_request(self):\n        \"\"\"Can be overridden by a subclass to hook into the matching\n        of the request.\n        \"\"\"\n        try:\n            url_rule, self.request.view_args = \\\n                self.url_adapter.match(return_rule=True)\n            self.request.url_rule = url_rule\n        except HTTPException as e:\n            self.request.routing_exception = e\n    def push(self):\n        \"\"\"Binds the request context to the current context.\"\"\"\n        # If an exception occurs in debug mode or if context preservation is\n        # activated under exception situations exactly one context stays\n        # on the stack.  The rationale is that you want to access that\n        # information under debug situations.  However if someone forgets to\n        # pop that context again we want to make sure that on the next push\n        # it's invalidated, otherwise we run at risk that something leaks\n        # memory.  This is usually only a problem in test suite since this\n        # functionality is not active in production environments.\n        top = _request_ctx_stack.top\n        if top is not None and top.preserved:\n            top.pop(top._preserved_exc)\n        # Before we push the request context we have to ensure that there\n        # is an application context.\n        app_ctx = _app_ctx_stack.top\n        if app_ctx is None or app_ctx.app != self.app:\n            app_ctx = self.app.app_context()\n            app_ctx.push()\n            self._implicit_app_ctx_stack.append(app_ctx)\n        else:\n            self._implicit_app_ctx_stack.append(None)\n        if hasattr(sys, 'exc_clear'):\n            sys.exc_clear()\n        _request_ctx_stack.push(self)\n        # Open the session at the moment that the request context is\n        # available. This allows a custom open_session method to use the\n        # request context (e.g. code that access database information\n        # stored on `g` instead of the appcontext).\n        self.session = self.app.open_session(self.request)\n        if self.session is None:\n            self.session = self.app.make_null_session()\n    def pop(self, exc=None):\n        \"\"\"Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        \"\"\"\n", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "length": 1358, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "5cba5adbc6ed3521940b6a136fc48a061a432b5260ca8c1f"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n\"\"\"\nCopyright (C) 2011 Dariusz Suchojad <dsuch at zato.io>\nLicensed under LGPLv3, see LICENSE.txt for terms and conditions.\n\"\"\"\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n# stdlib\nimport logging\nfrom functools import wraps\n# SQLAlchemy\nfrom sqlalchemy import func, not_\nfrom sqlalchemy.orm import aliased\nfrom sqlalchemy.sql.expression import case\n# Zato\nfrom zato.common import DEFAULT_HTTP_PING_METHOD, DEFAULT_HTTP_POOL_SIZE, HTTP_SOAP_SERIALIZATION_TYPE, PARAMS_PRIORITY, \\\n     URL_PARAMS_PRIORITY\nfrom zato.common.odb.model import AWSS3, APIKeySecurity, AWSSecurity, CassandraConn, CassandraQuery, ChannelAMQP, \\\n     ChannelSTOMP, ChannelWebSocket, ChannelWMQ, ChannelZMQ, Cluster, ConnDefAMQP, ConnDefWMQ, CronStyleJob, \\\n     DeliveryDefinitionBase, Delivery, DeliveryHistory, DeliveryPayload, ElasticSearch, HTTPBasicAuth, HTTPSOAP, HTTSOAPAudit, \\\n     IMAP, IntervalBasedJob, Job, JSONPointer, JWT, MsgNamespace, NotificationOpenStackSwift as NotifOSS, \\\n     NotificationSQL as NotifSQL, NTLM, OAuth, OutgoingOdoo, OpenStackSecurity, OpenStackSwift, OutgoingAMQP, OutgoingFTP, \\\n     OutgoingSTOMP, OutgoingWMQ, OutgoingZMQ, PubSubConsumer, PubSubProducer, PubSubTopic, RBACClientRole, RBACPermission, \\\n     RBACRole, RBACRolePermission, SecurityBase, Server, Service, SMTP, Solr, SQLConnectionPool, TechnicalAccount, TLSCACert, \\\n     TLSChannelSecurity, TLSKeyCertSecurity, WebSocketClient, WebSocketSubscription, WSSDefinition, VaultConnection, \\\n     XPath, XPathSecurity\n# ################################################################################################################################\nlogger = logging.getLogger(__name__)\n# ################################################################################################################################\n_no_page_limit = 2 ** 24 # ~16.7 million results, tops\n# ################################################################################################################################\nclass _SearchResult(object):\n    def __init__(self, q, result, columns, total):\n        self.q = q\n        self.result = result\n        self.total = total\n        self.columns = columns\n        self.num_pages = 0\n        self.cur_page = 0\n        self.prev_page = 0\n        self.next_page = 0\n        self.has_prev_page = False\n        self.has_next_page = False\n    def __iter__(self):\n        return iter(self.result)\n    def __repr__(self):\n        # To avoice circular imports - this is OK because we very rarely repr(self) anyway\n        from zato.common.util import make_repr\n        return make_repr(self)\nclass _SearchWrapper(object):\n    \"\"\" Wraps results in pagination and/or filters out objects by their name or other attributes.\n    \"\"\"\n    def __init__(self, q, default_page_size=_no_page_limit, **config):\n        # Apply WHERE conditions\n        for filter_by in config.get('filter_by', []):\n            for criterion in config.get('query', []):\n                q = q.filter(filter_by.contains(criterion))\n        # Total number of results\n        total_q = q.statement.with_only_columns([func.count()]).order_by(None)\n        self.total = q.session.execute(total_q).scalar()\n        # Pagination\n        page_size = config.get('page_size', default_page_size)\n        cur_page = config.get('cur_page', 0)\n        slice_from = cur_page * page_size\n        slice_to = slice_from + page_size\n        self.q = q.slice(slice_from, slice_to)\n# ################################################################################################################################\ndef query_wrapper(func):\n    \"\"\" A decorator for queries which works out whether a given query function should return the result only\n    or a column list retrieved in addition to the result. This is useful because some callers prefer the former\n    and some need the latter. Also, paginages the results if requested to by the caller.\n    \"\"\"\n    @wraps(func)\n    def inner(*args, **kwargs):\n        # needs_columns is always the last argument\n        # so we don't have to look it up using the 'inspect' module or anything like that.\n        needs_columns = args[-1]\n        tool = _SearchWrapper(func(*args), **kwargs)\n        result = _SearchResult(tool.q, tool.q.all(), tool.q.statement.columns, tool.total)\n        if needs_columns:\n            return result, result.columns\n        return result\n    return inner\n# ################################################################################################################################\ndef internal_channel_list(session, cluster_id):\n    \"\"\" All the HTTP/SOAP channels that point to internal services.\n    \"\"\"\n    return session.query(\n        HTTPSOAP.soap_action, Service.name).\\\n        filter(HTTPSOAP.cluster_id==Cluster.id).\\\n        filter(HTTPSOAP.service_id==Service.id).filter(Service.is_internal==True).filter(Cluster.id==cluster_id).filter(Cluster.id==HTTPSOAP.cluster_id) # noqa\n# ################################################################################################################################\ndef _job(session, cluster_id):\n    return session.query(\n        Job.id, Job.name, Job.is_active,\n        Job.job_type, Job.start_date, Job.extra,\n        Service.name.label('service_name'), Service.impl_name.label('service_impl_name'),\n        Service.id.label('service_id'),\n        IntervalBasedJob.weeks, IntervalBasedJob.days,\n        IntervalBasedJob.hours, IntervalBasedJob.minutes,\n        IntervalBasedJob.seconds, IntervalBasedJob.repeats,\n        CronStyleJob.cron_definition).\\\n        outerjoin(IntervalBasedJob, Job.id==IntervalBasedJob.job_id).\\\n        outerjoin(CronStyleJob, Job.id==CronStyleJob.job_id).\\\n        filter(Job.cluster_id==Cluster.id).\\\n        filter(Job.service_id==Service.id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by('job.name')\n@query_wrapper\ndef job_list(session, cluster_id, needs_columns=False):\n    \"\"\" All the scheduler's jobs defined in the ODB.\n    \"\"\"\n    return _job(session, cluster_id)\ndef job_by_name(session, cluster_id, name):\n    \"\"\" A scheduler's job fetched by its name.\n    \"\"\"\n    return _job(session, cluster_id).\\\n        filter(Job.name==name).\\\n        one()\n# ################################################################################################################################\n@query_wrapper\ndef apikey_security_list(session, cluster_id, needs_columns=False):\n    \"\"\" All the API keys.\n    \"\"\"\n    return session.query(\n        APIKeySecurity.id, APIKeySecurity.name,\n        APIKeySecurity.is_active,\n        APIKeySecurity.username,\n        APIKeySecurity.password, APIKeySecurity.sec_type).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==APIKeySecurity.cluster_id).\\\n        filter(SecurityBase.id==APIKeySecurity.id).\\\n        order_by('sec_base.name')\n@query_wrapper\ndef aws_security_list(session, cluster_id, needs_columns=False):\n    \"\"\" All the Amazon security definitions.\n    \"\"\"\n    return session.query(\n        AWSSecurity.id, AWSSecurity.name,\n        AWSSecurity.is_active,\n        AWSSecurity.username,\n        AWSSecurity.password, AWSSecurity.sec_type).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==AWSSecurity.cluster_id).\\\n        filter(SecurityBase.id==AWSSecurity.id).\\\n        order_by('sec_base.name')\n@query_wrapper\ndef basic_auth_list(session, cluster_id, cluster_name, needs_columns=False):\n    \"\"\" All the HTTP Basic Auth definitions.\n    \"\"\"\n    q = session.query(\n        HTTPBasicAuth.id, HTTPBasicAuth.name,\n        HTTPBasicAuth.is_active,\n        HTTPBasicAuth.username, HTTPBasicAuth.realm,\n        HTTPBasicAuth.password, HTTPBasicAuth.sec_type,\n        HTTPBasicAuth.password_type,\n        Cluster.id.label('cluster_id'), Cluster.name.label('cluster_name')).\\\n        filter(Cluster.id==HTTPBasicAuth.cluster_id)\n    if cluster_id:\n        q = q.filter(Cluster.id==cluster_id)\n    else:\n        q = q.filter(Cluster.name==cluster_name)\n    q = q.filter(SecurityBase.id==HTTPBasicAuth.id).\\\n        order_by('sec_base.name')\n    return q\ndef _jwt(session, cluster_id, cluster_name, needs_columns=False):\n    \"\"\" All the JWT definitions.\n    \"\"\"\n    q = session.query(\n        JWT.id, JWT.name, JWT.is_active, JWT.username, JWT.password,\n        JWT.ttl, JWT.sec_type, JWT.password_type,\n        Cluster.id.label('cluster_id'),\n        Cluster.name.label('cluster_name')).\\\n        filter(Cluster.id==JWT.cluster_id)\n    if cluster_id:\n        q = q.filter(Cluster.id==cluster_id)\n    else:\n        q = q.filter(Cluster.name==cluster_name)\n    q = q.filter(SecurityBase.id==JWT.id).\\\n        order_by('sec_base.name')\n    return q\n@query_wrapper\ndef jwt_list(*args, **kwargs):\n    return _jwt(*args, **kwargs)\ndef jwt_by_username(session, cluster_id, username, needs_columns=False):\n    \"\"\" An individual JWT definition by its username.\n    \"\"\"\n    return _jwt(session, cluster_id, None, needs_columns).\\\n        filter(JWT.username==username).\\\n        one()\n@query_wrapper\ndef ntlm_list(session, cluster_id, needs_columns=False):\n    \"\"\" All the NTLM definitions.\n    \"\"\"\n    return session.query(\n        NTLM.id, NTLM.name,\n        NTLM.is_active,\n        NTLM.username,\n        NTLM.password, NTLM.sec_type,\n        NTLM.password_type).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==NTLM.cluster_id).\\\n        filter(SecurityBase.id==NTLM.id).\\\n        order_by('sec_base.name')\n@query_wrapper\ndef oauth_list(session, cluster_id, needs_columns=False):\n    \"\"\" All the OAuth definitions.\n    \"\"\"\n    return session.query(\n        OAuth.id, OAuth.name,\n        OAuth.is_active,\n        OAuth.username, OAuth.password,\n        OAuth.proto_version, OAuth.sig_method,\n        OAuth.max_nonce_log, OAuth.sec_type).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==OAuth.cluster_id).\\\n        filter(SecurityBase.id==OAuth.id).\\\n        order_by('sec_base.name')\n@query_wrapper\ndef openstack_security_list(session, cluster_id, needs_columns=False):\n    \"\"\" All the OpenStackSecurity definitions.\n    \"\"\"\n    return session.query(\n        OpenStackSecurity.id, OpenStackSecurity.name, OpenStackSecurity.is_active,\n        OpenStackSecurity.username, OpenStackSecurity.sec_type).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==OpenStackSecurity.cluster_id).\\\n        filter(SecurityBase.id==OpenStackSecurity.id).\\\n        order_by('sec_base.name')\n@query_wrapper\ndef tech_acc_list(session, cluster_id, needs_columns=False):\n    \"\"\" All the technical accounts.\n    \"\"\"\n    return session.query(\n        TechnicalAccount.id, TechnicalAccount.name,\n        TechnicalAccount.is_active,\n        TechnicalAccount.password, TechnicalAccount.salt,\n        TechnicalAccount.sec_type, TechnicalAccount.password_type).\\\n        order_by(TechnicalAccount.name).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==TechnicalAccount.cluster_id).\\\n        filter(SecurityBase.id==TechnicalAccount.id).\\\n        order_by('sec_base.name')\n@query_wrapper\ndef tls_ca_cert_list(session, cluster_id, needs_columns=False):\n    \"\"\" TLS CA certs.\n    \"\"\"\n    return session.query(TLSCACert).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==TLSCACert.cluster_id).\\\n        order_by('sec_tls_ca_cert.name')\n@query_wrapper\ndef tls_channel_sec_list(session, cluster_id, needs_columns=False):\n    \"\"\" TLS-based channel security.\n    \"\"\"\n    return session.query(\n        TLSChannelSecurity.id, TLSChannelSecurity.name,\n        TLSChannelSecurity.is_active, TLSChannelSecurity.value,\n        TLSChannelSecurity.sec_type).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==TLSChannelSecurity.cluster_id).\\\n        filter(SecurityBase.id==TLSChannelSecurity.id).\\\n        order_by('sec_base.name')\n@query_wrapper\ndef tls_key_cert_list(session, cluster_id, needs_columns=False):\n    \"\"\" TLS key/cert pairs.\n    \"\"\"\n    return session.query(\n        TLSKeyCertSecurity.id, TLSKeyCertSecurity.name,\n        TLSKeyCertSecurity.is_active, TLSKeyCertSecurity.info,\n        TLSKeyCertSecurity.value, TLSKeyCertSecurity.sec_type).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==TLSKeyCertSecurity.cluster_id).\\\n        filter(SecurityBase.id==TLSKeyCertSecurity.id).\\\n        order_by('sec_base.name')\n@query_wrapper\ndef wss_list(session, cluster_id, needs_columns=False):\n    \"\"\" All the WS-Security definitions.\n    \"\"\"\n    return session.query(\n        WSSDefinition.id, WSSDefinition.name, WSSDefinition.is_active,\n        WSSDefinition.username, WSSDefinition.password, WSSDefinition.password_type,\n        WSSDefinition.reject_empty_nonce_creat, WSSDefinition.reject_stale_tokens,\n        WSSDefinition.reject_expiry_limit, WSSDefinition.nonce_freshness_time,\n        WSSDefinition.sec_type).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==WSSDefinition.cluster_id).\\\n        filter(SecurityBase.id==WSSDefinition.id).\\\n        order_by('sec_base.name')\n@query_wrapper\ndef xpath_sec_list(session, cluster_id, needs_columns=False):\n    \"\"\" All the XPath security definitions.\n    \"\"\"\n    return session.query(\n        XPathSecurity.id, XPathSecurity.name, XPathSecurity.is_active, XPathSecurity.username, XPathSecurity.username_expr,\n        XPathSecurity.password_expr, XPathSecurity.password, XPathSecurity.sec_type).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==XPathSecurity.cluster_id).\\\n        filter(SecurityBase.id==XPathSecurity.id).\\\n        order_by('sec_base.name')\n# ################################################################################################################################\ndef _def_amqp(session, cluster_id):\n    return session.query(\n        ConnDefAMQP.name, ConnDefAMQP.id, ConnDefAMQP.host,\n        ConnDefAMQP.port, ConnDefAMQP.vhost, ConnDefAMQP.username,\n        ConnDefAMQP.frame_max, ConnDefAMQP.heartbeat, ConnDefAMQP.password).\\\n        filter(ConnDefAMQP.def_type=='amqp').\\\n        filter(Cluster.id==ConnDefAMQP.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(ConnDefAMQP.name)\ndef def_amqp(session, cluster_id, id):\n    \"\"\" A particular AMQP definition\n    \"\"\"\n    return _def_amqp(session, cluster_id).\\\n        filter(ConnDefAMQP.id==id).\\\n        one()\n@query_wrapper\ndef def_amqp_list(session, cluster_id, needs_columns=False):\n    \"\"\" AMQP connection definitions.\n    \"\"\"\n    return _def_amqp(session, cluster_id)\n# ################################################################################################################################\ndef _def_jms_wmq(session, cluster_id):\n    return session.query(\n        ConnDefWMQ.id, ConnDefWMQ.name, ConnDefWMQ.host,\n        ConnDefWMQ.port, ConnDefWMQ.queue_manager, ConnDefWMQ.channel,\n        ConnDefWMQ.cache_open_send_queues, ConnDefWMQ.cache_open_receive_queues,\n        ConnDefWMQ.use_shared_connections, ConnDefWMQ.ssl, ConnDefWMQ.ssl_cipher_spec,\n        ConnDefWMQ.ssl_key_repository, ConnDefWMQ.needs_mcd, ConnDefWMQ.max_chars_printed).\\\n        filter(Cluster.id==ConnDefWMQ.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(ConnDefWMQ.name)\ndef def_jms_wmq(session, cluster_id, id):\n    \"\"\" A particular JMS WebSphere MQ definition\n    \"\"\"\n    return _def_jms_wmq(session, cluster_id).\\\n        filter(ConnDefWMQ.id==id).\\\n        one()\n@query_wrapper\ndef def_jms_wmq_list(session, cluster_id, needs_columns=False):\n    \"\"\" JMS WebSphere MQ connection definitions.\n    \"\"\"\n    return _def_jms_wmq(session, cluster_id)\n# ################################################################################################################################\ndef _out_amqp(session, cluster_id):\n    return session.query(\n        OutgoingAMQP.id, OutgoingAMQP.name, OutgoingAMQP.is_active,\n        OutgoingAMQP.delivery_mode, OutgoingAMQP.priority, OutgoingAMQP.content_type,\n        OutgoingAMQP.content_encoding, OutgoingAMQP.expiration, OutgoingAMQP.user_id,\n        OutgoingAMQP.app_id, ConnDefAMQP.name.label('def_name'), OutgoingAMQP.def_id).\\\n        filter(OutgoingAMQP.def_id==ConnDefAMQP.id).\\\n        filter(ConnDefAMQP.id==OutgoingAMQP.def_id).\\\n        filter(Cluster.id==ConnDefAMQP.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(OutgoingAMQP.name)\ndef out_amqp(session, cluster_id, id):\n    \"\"\" An outgoing AMQP connection.\n    \"\"\"\n    return _out_amqp(session, cluster_id).\\\n        filter(OutgoingAMQP.id==id).\\\n        one()\n@query_wrapper\ndef out_amqp_list(session, cluster_id, needs_columns=False):\n    \"\"\" Outgoing AMQP connections.\n    \"\"\"\n    return _out_amqp(session, cluster_id)\n# ################################################################################################################################\ndef _out_jms_wmq(session, cluster_id):\n    return session.query(\n        OutgoingWMQ.id, OutgoingWMQ.name, OutgoingWMQ.is_active,\n        OutgoingWMQ.delivery_mode, OutgoingWMQ.priority, OutgoingWMQ.expiration,\n        ConnDefWMQ.name.label('def_name'), OutgoingWMQ.def_id).\\\n        filter(OutgoingWMQ.def_id==ConnDefWMQ.id).\\\n        filter(ConnDefWMQ.id==OutgoingWMQ.def_id).\\\n        filter(Cluster.id==ConnDefWMQ.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(OutgoingWMQ.name)\ndef out_jms_wmq(session, cluster_id, id):\n    \"\"\" An outgoing JMS WebSphere MQ connection (by ID).\n    \"\"\"\n    return _out_jms_wmq(session, cluster_id).\\\n        filter(OutgoingWMQ.id==id).\\\n        one()\ndef out_jms_wmq_by_name(session, cluster_id, name):\n    \"\"\" An outgoing JMS WebSphere MQ connection (by name).\n    \"\"\"\n    return _out_jms_wmq(session, cluster_id).\\\n        filter(OutgoingWMQ.name==name).\\\n        first()\n@query_wrapper\ndef out_jms_wmq_list(session, cluster_id, needs_columns=False):\n    \"\"\" Outgoing JMS WebSphere MQ connections.\n    \"\"\"\n    return _out_jms_wmq(session, cluster_id)\n# ################################################################################################################################\ndef _channel_amqp(session, cluster_id):\n    return session.query(\n        ChannelAMQP.id, ChannelAMQP.name, ChannelAMQP.is_active,\n        ChannelAMQP.queue, ChannelAMQP.consumer_tag_prefix,\n        ConnDefAMQP.name.label('def_name'), ChannelAMQP.def_id,\n        ChannelAMQP.data_format,\n        Service.name.label('service_name'),\n        Service.impl_name.label('service_impl_name')).\\\n        filter(ChannelAMQP.def_id==ConnDefAMQP.id).\\\n        filter(ChannelAMQP.service_id==Service.id).\\\n        filter(Cluster.id==ConnDefAMQP.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(ChannelAMQP.name)\ndef channel_amqp(session, cluster_id, id):\n    \"\"\" A particular AMQP channel.\n    \"\"\"\n    return _channel_amqp(session, cluster_id).\\\n        filter(ChannelAMQP.id==id).\\\n        one()\n@query_wrapper\ndef channel_amqp_list(session, cluster_id, needs_columns=False):\n    \"\"\" AMQP channels.\n    \"\"\"\n    return _channel_amqp(session, cluster_id)\n# ################################################################################################################################\ndef _channel_stomp(session, cluster_id):\n    return session.query(\n        ChannelSTOMP.id, ChannelSTOMP.name, ChannelSTOMP.is_active, ChannelSTOMP.username,\n        ChannelSTOMP.password, ChannelSTOMP.address, ChannelSTOMP.proto_version,\n        ChannelSTOMP.timeout, ChannelSTOMP.sub_to, ChannelSTOMP.service_id,\n        Service.name.label('service_name')).\\\n        filter(Service.id==ChannelSTOMP.service_id).\\\n        filter(Cluster.id==ChannelSTOMP.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(ChannelSTOMP.name)\ndef channel_stomp(session, cluster_id, id):\n    \"\"\" A STOMP channel.\n    \"\"\"\n    return _channel_stomp(session, cluster_id).\\\n        filter(ChannelSTOMP.id==id).\\\n        one()\n@query_wrapper\ndef channel_stomp_list(session, cluster_id, needs_columns=False):\n    \"\"\" A list of STOMP channels.\n    \"\"\"\n    return _channel_stomp(session, cluster_id)\n# ################################################################################################################################\ndef _channel_jms_wmq(session, cluster_id):\n    return session.query(\n        ChannelWMQ.id, ChannelWMQ.name, ChannelWMQ.is_active,\n        ChannelWMQ.queue, ConnDefWMQ.name.label('def_name'), ChannelWMQ.def_id,\n        ChannelWMQ.data_format, Service.name.label('service_name'),\n        Service.impl_name.label('service_impl_name')).\\\n        filter(ChannelWMQ.def_id==ConnDefWMQ.id).\\\n        filter(ChannelWMQ.service_id==Service.id).\\\n        filter(Cluster.id==ConnDefWMQ.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(ChannelWMQ.name)\ndef channel_jms_wmq(session, cluster_id, id):\n    \"\"\" A particular JMS WebSphere MQ channel.\n    \"\"\"\n    return _channel_jms_wmq(session, cluster_id).\\\n        filter(ChannelWMQ.id==id).\\\n        one()\n@query_wrapper\ndef channel_jms_wmq_list(session, cluster_id, needs_columns=False):\n    \"\"\" JMS WebSphere MQ channels.\n    \"\"\"\n    return _channel_jms_wmq(session, cluster_id)\n# ################################################################################################################################\ndef _out_stomp(session, cluster_id):\n    return session.query(OutgoingSTOMP).\\\n        filter(Cluster.id==OutgoingSTOMP.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(OutgoingSTOMP.name)\ndef out_stomp(session, cluster_id, id):\n    \"\"\" An outgoing STOMP connection.\n    \"\"\"\n    return _out_zmq(session, cluster_id).\\\n        filter(OutgoingSTOMP.id==id).\\\n        one()\n@query_wrapper\ndef out_stomp_list(session, cluster_id, needs_columns=False):\n    \"\"\" Outgoing STOMP connections.\n    \"\"\"\n    return _out_stomp(session, cluster_id)\n# ################################################################################################################################\ndef _out_zmq(session, cluster_id):\n    return session.query(\n        OutgoingZMQ.id, OutgoingZMQ.name, OutgoingZMQ.is_active,\n        OutgoingZMQ.address, OutgoingZMQ.socket_type).\\\n        filter(Cluster.id==OutgoingZMQ.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(OutgoingZMQ.name)\ndef out_zmq(session, cluster_id, id):\n    \"\"\" An outgoing ZeroMQ connection.\n    \"\"\"\n    return _out_zmq(session, cluster_id).\\\n        filter(OutgoingZMQ.id==id).\\\n        one()\n@query_wrapper\ndef out_zmq_list(session, cluster_id, needs_columns=False):\n    \"\"\" Outgoing ZeroMQ connections.\n    \"\"\"\n    return _out_zmq(session, cluster_id)\n# ################################################################################################################################\ndef _channel_zmq(session, cluster_id):\n    return session.query(\n        ChannelZMQ.id, ChannelZMQ.name, ChannelZMQ.is_active,\n        ChannelZMQ.address, ChannelZMQ.socket_type, ChannelZMQ.socket_method, ChannelZMQ.sub_key,\n        ChannelZMQ.pool_strategy, ChannelZMQ.service_source, ChannelZMQ.data_format,\n        Service.name.label('service_name'), Service.impl_name.label('service_impl_name')).\\\n        filter(Service.id==ChannelZMQ.service_id).\\\n        filter(Cluster.id==ChannelZMQ.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(ChannelZMQ.name)\ndef channel_zmq(session, cluster_id, id):\n    \"\"\" An incoming ZeroMQ connection.\n    \"\"\"\n    return _channel_zmq(session, cluster_id).\\\n        filter(ChannelZMQ.id==id).\\\n        one()\n@query_wrapper\ndef channel_zmq_list(session, cluster_id, needs_columns=False):\n    \"\"\" Incoming ZeroMQ connections.\n    \"\"\"\n    return _channel_zmq(session, cluster_id)\n# ################################################################################################################################\ndef _http_soap(session, cluster_id):\n    return session.query(\n        HTTPSOAP.id, HTTPSOAP.name, HTTPSOAP.is_active,\n        HTTPSOAP.is_internal, HTTPSOAP.transport, HTTPSOAP.host,\n        HTTPSOAP.url_path, HTTPSOAP.method, HTTPSOAP.soap_action,\n        HTTPSOAP.soap_version, HTTPSOAP.data_format, HTTPSOAP.security_id,\n        HTTPSOAP.has_rbac,\n        HTTPSOAP.connection, HTTPSOAP.content_type,\n        case([(HTTPSOAP.ping_method != None, HTTPSOAP.ping_method)], else_=DEFAULT_HTTP_PING_METHOD).label('ping_method'), # noqa\n        case([(HTTPSOAP.pool_size != None, HTTPSOAP.pool_size)], else_=DEFAULT_HTTP_POOL_SIZE).label('pool_size'),\n        case([(HTTPSOAP.merge_url_params_req != None, HTTPSOAP.merge_url_params_req)], else_=True).label('merge_url_params_req'),\n        case([(HTTPSOAP.url_params_pri != None, HTTPSOAP.url_params_pri)], else_=URL_PARAMS_PRIORITY.DEFAULT).label('url_params_pri'),\n        case([(HTTPSOAP.params_pri != None, HTTPSOAP.params_pri)], else_=PARAMS_PRIORITY.DEFAULT).label('params_pri'),\n        case([(\n            HTTPSOAP.serialization_type != None, HTTPSOAP.serialization_type)],\n             else_=HTTP_SOAP_SERIALIZATION_TYPE.DEFAULT.id).label('serialization_type'),\n        HTTPSOAP.audit_enabled,\n        HTTPSOAP.audit_back_log,\n        HTTPSOAP.audit_max_payload,\n        HTTPSOAP.audit_repl_patt_type,\n        HTTPSOAP.timeout,\n        HTTPSOAP.sec_tls_ca_cert_id,\n        HTTPSOAP.sec_use_rbac,\n        TLSCACert.name.label('sec_tls_ca_cert_name'),\n        SecurityBase.sec_type,\n        Service.name.label('service_name'),\n        Service.id.label('service_id'),\n        Service.impl_name.label('service_impl_name'),\n        SecurityBase.name.label('security_name'),\n        SecurityBase.username.label('username'),\n        SecurityBase.password.label('password'),\n        SecurityBase.password_type.label('password_type'),).\\\n        outerjoin(Service, Service.id==HTTPSOAP.service_id).\\\n        outerjoin(TLSCACert, TLSCACert.id==HTTPSOAP.sec_tls_ca_cert_id).\\\n        outerjoin(SecurityBase, HTTPSOAP.security_id==SecurityBase.id).\\\n        filter(Cluster.id==HTTPSOAP.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(HTTPSOAP.name)\ndef http_soap_security_list(session, cluster_id, connection=None):\n    \"\"\" HTTP/SOAP security definitions.\n    \"\"\"\n    q = _http_soap(session, cluster_id)\n    if connection:\n        q = q.filter(HTTPSOAP.connection==connection)\n    return q\ndef http_soap(session, cluster_id, id):\n    \"\"\" An HTTP/SOAP connection.\n    \"\"\"\n    return _http_soap(session, cluster_id).\\\n        filter(HTTPSOAP.id==id).\\\n        one()\n@query_wrapper\ndef http_soap_list(session, cluster_id, connection=None, transport=None, return_internal=True, needs_columns=False, **kwargs):\n    \"\"\" HTTP/SOAP connections, both channels and outgoing ones.\n    \"\"\"\n    q = _http_soap(session, cluster_id)\n    if connection:\n        q = q.filter(HTTPSOAP.connection==connection)\n    if transport:\n        q = q.filter(HTTPSOAP.transport==transport)\n    if not return_internal:\n        q = q.filter(not_(HTTPSOAP.name.startswith('zato')))\n    return q\n# ################################################################################################################################\ndef _out_sql(session, cluster_id):\n    return session.query(SQLConnectionPool).\\\n        filter(Cluster.id==SQLConnectionPool.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(SQLConnectionPool.name)\ndef out_sql(session, cluster_id, id):\n    \"\"\" An outgoing SQL connection.\n    \"\"\"\n    return _out_sql(session, cluster_id).\\\n        filter(SQLConnectionPool.id==id).\\\n        one()\n@query_wrapper\ndef out_sql_list(session, cluster_id, needs_columns=False):\n    \"\"\" Outgoing SQL connections.\n    \"\"\"\n    return _out_sql(session, cluster_id)\n# ################################################################################################################################\ndef _out_ftp(session, cluster_id):\n    return session.query(\n        OutgoingFTP.id, OutgoingFTP.name, OutgoingFTP.is_active,\n        OutgoingFTP.host, OutgoingFTP.port, OutgoingFTP.user, OutgoingFTP.password,\n        OutgoingFTP.acct, OutgoingFTP.timeout, OutgoingFTP.dircache).\\\n        filter(Cluster.id==OutgoingFTP.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(OutgoingFTP.name)\ndef out_ftp(session, cluster_id, id):\n    \"\"\" An outgoing FTP connection.\n    \"\"\"\n    return _out_ftp(session, cluster_id).\\\n        filter(OutgoingFTP.id==id).\\\n        one()\n@query_wrapper\ndef out_ftp_list(session, cluster_id, needs_columns=False):\n    \"\"\" Outgoing FTP connections.\n    \"\"\"\n    return _out_ftp(session, cluster_id)\n# ################################################################################################################################\ndef _service(session, cluster_id):\n    return session.query(\n        Service.id, Service.name, Service.is_active,\n        Service.impl_name, Service.is_internal, Service.slow_threshold).\\\n        filter(Cluster.id==Service.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(Service.name)\ndef service(session, cluster_id, id):\n    \"\"\" A service.\n    \"\"\"\n    return _service(session, cluster_id).\\\n        filter(Service.id==id).\\\n        one()\n@query_wrapper\ndef service_list(session, cluster_id, return_internal=True, needs_columns=False):\n    \"\"\" All services.\n    \"\"\"\n    result = _service(session, cluster_id)\n    if not return_internal:\n        result = result.filter(not_(Service.name.startswith('zato')))\n    return result\n# ################################################################################################################################\ndef _delivery_definition(session, cluster_id):\n    return session.query(DeliveryDefinitionBase).\\\n        filter(Cluster.id==DeliveryDefinitionBase.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(DeliveryDefinitionBase.name)\ndef delivery_definition_list(session, cluster_id, target_type=None):\n    \"\"\" Returns a list of delivery definitions for a given target type.\n    \"\"\"\n    def_list = _delivery_definition(session, cluster_id)\n    if target_type:\n        def_list = def_list.\\\n            filter(DeliveryDefinitionBase.target_type==target_type)\n    return def_list\n# ################################################################################################################################\ndef delivery_count_by_state(session, def_id):\n    return session.query(Delivery.state, func.count(Delivery.state)).\\\n        filter(Delivery.definition_id==def_id).\\\n        group_by(Delivery.state)\ndef delivery_list(session, cluster_id, def_name, state, start=None, stop=None, needs_payload=False):\n    columns = [\n        DeliveryDefinitionBase.name.label('def_name'),\n        DeliveryDefinitionBase.target_type,\n        Delivery.task_id,\n        Delivery.creation_time.label('creation_time_utc'),\n        Delivery.last_used.label('last_used_utc'),\n        Delivery.source_count,\n        Delivery.target_count,\n        Delivery.resubmit_count,\n        Delivery.state,\n        DeliveryDefinitionBase.retry_repeats,\n        DeliveryDefinitionBase.check_after,\n        DeliveryDefinitionBase.retry_seconds\n    ]\n    if needs_payload:\n        columns.extend([DeliveryPayload.payload, Delivery.args, Delivery.kwargs])\n    q = session.query(*columns).\\\n        filter(DeliveryDefinitionBase.id==Delivery.definition_id).\\\n        filter(DeliveryDefinitionBase.cluster_id==cluster_id).\\\n        filter(DeliveryDefinitionBase.name==def_name).\\\n        filter(Delivery.state.in_(state))\n    if needs_payload:\n        q = q.filter(DeliveryPayload.task_id==Delivery.task_id)\n    if start:\n        q = q.filter(Delivery.last_used >= start)\n    if stop:\n        q = q.filter(Delivery.last_used <= stop)\n    q = q.order_by(Delivery.last_used.desc())\n    return q\ndef delivery(session, task_id, target_def_class):\n    return session.query(\n        target_def_class.name.label('def_name'),\n        target_def_class.target_type,\n        Delivery.task_id,\n        Delivery.creation_time.label('creation_time_utc'),\n        Delivery.last_used.label('last_used_utc'),\n        Delivery.source_count,\n        Delivery.target_count,\n        Delivery.resubmit_count,\n        Delivery.state,\n        target_def_class.retry_repeats,\n        target_def_class.check_after,\n        target_def_class.retry_seconds,\n        DeliveryPayload.payload,\n        Delivery.args,\n        Delivery.kwargs,\n        target_def_class.target,\n        ).\\\n        filter(target_def_class.id==Delivery.definition_id).\\\n        filter(Delivery.task_id==task_id).\\\n        filter(DeliveryPayload.task_id==Delivery.task_id)\n@query_wrapper\ndef delivery_history_list(session, task_id, needs_columns=True):\n    return session.query(\n        DeliveryHistory.entry_type,\n        DeliveryHistory.entry_time,\n        DeliveryHistory.entry_ctx,\n        DeliveryHistory.resubmit_count).\\\n        filter(DeliveryHistory.task_id==task_id).\\\n        order_by(DeliveryHistory.entry_time.desc())\n# ################################################################################################################################\ndef _msg_list(class_, order_by, session, cluster_id, needs_columns=False):\n    \"\"\" All the namespaces.\n    \"\"\"\n    return session.query(\n        class_.id, class_.name,\n        class_.value).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==class_.cluster_id).\\\n        order_by(order_by)\n@query_wrapper\ndef namespace_list(session, cluster_id, needs_columns=False):\n    \"\"\" All the namespaces.\n    \"\"\"\n    return _msg_list(MsgNamespace, 'msg_ns.name', session, cluster_id, query_wrapper)\n@query_wrapper\ndef xpath_list(session, cluster_id, needs_columns=False):\n    \"\"\" All the XPaths.\n    \"\"\"\n    return _msg_list(XPath, 'msg_xpath.name', session, cluster_id, query_wrapper)\n@query_wrapper\ndef json_pointer_list(session, cluster_id, needs_columns=False):\n    \"\"\" All the JSON Pointers.\n    \"\"\"\n    return _msg_list(JSONPointer, 'msg_json_pointer.name', session, cluster_id, query_wrapper)\n# ################################################################################################################################\ndef _http_soap_audit(session, cluster_id, conn_id=None, start=None, stop=None, query=None, id=None, needs_req_payload=False):\n    columns = [\n        HTTSOAPAudit.id,\n        HTTSOAPAudit.name.label('conn_name'),\n        HTTSOAPAudit.cid,\n        HTTSOAPAudit.transport,\n        HTTSOAPAudit.connection,\n        HTTSOAPAudit.req_time.label('req_time_utc'),\n        HTTSOAPAudit.resp_time.label('resp_time_utc'),\n        HTTSOAPAudit.user_token,\n        HTTSOAPAudit.invoke_ok,\n        HTTSOAPAudit.auth_ok,\n        HTTSOAPAudit.remote_addr,\n    ]\n    if needs_req_payload:\n        columns.extend([\n            HTTSOAPAudit.req_headers, HTTSOAPAudit.req_payload, HTTSOAPAudit.resp_headers, HTTSOAPAudit.resp_payload\n        ])\n    q = session.query(*columns)\n    if query:\n        query = '%{}%'.format(query)\n        q = q.filter(\n            HTTSOAPAudit.cid.ilike(query) |\n            HTTSOAPAudit.req_headers.ilike(query) | HTTSOAPAudit.req_payload.ilike(query) |\n            HTTSOAPAudit.resp_headers.ilike(query) | HTTSOAPAudit.resp_payload.ilike(query)\n        )\n    if id:\n        q = q.filter(HTTSOAPAudit.id == id)\n    if conn_id:\n        q = q.filter(HTTSOAPAudit.conn_id == conn_id)\n    if start:\n        q = q.filter(HTTSOAPAudit.req_time >= start)\n    if stop:\n        q = q.filter(HTTSOAPAudit.req_time <= start)\n    q = q.order_by(HTTSOAPAudit.req_time.desc())\n    return q\n@query_wrapper\ndef http_soap_audit_item_list(session, cluster_id, conn_id, start, stop, query, needs_req_payload, needs_columns=False):\n    return _http_soap_audit(session, cluster_id, conn_id, start, stop, query)\n@query_wrapper\ndef http_soap_audit_item(session, cluster_id, id, needs_columns=False):\n    return _http_soap_audit(session, cluster_id, id=id, needs_req_payload=True)\n# ################################################################################################################################\ndef _cloud_openstack_swift(session, cluster_id):\n    return session.query(OpenStackSwift).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==OpenStackSwift.cluster_id).\\\n        order_by(OpenStackSwift.name)\ndef cloud_openstack_swift(session, cluster_id, id):\n    \"\"\" An OpenStack Swift connection.\n    \"\"\"\n    return _cloud_openstack_swift(session, cluster_id).\\\n        filter(OpenStackSwift.id==id).\\\n        one()\n@query_wrapper\ndef cloud_openstack_swift_list(session, cluster_id, needs_columns=False):\n    \"\"\" OpenStack Swift connections.\n    \"\"\"\n    return _cloud_openstack_swift(session, cluster_id)\n# ################################################################################################################################\ndef _cloud_aws_s3(session, cluster_id):\n    return session.query(\n        AWSS3.id, AWSS3.name, AWSS3.is_active, AWSS3.pool_size, AWSS3.address, AWSS3.debug_level, AWSS3.suppr_cons_slashes,\n        AWSS3.content_type, AWSS3.metadata_, AWSS3.security_id, AWSS3.bucket, AWSS3.encrypt_at_rest, AWSS3.storage_class,\n        SecurityBase.username, SecurityBase.password).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(AWSS3.security_id==SecurityBase.id).\\\n        order_by(AWSS3.name)\ndef cloud_aws_s3(session, cluster_id, id):\n    \"\"\" An AWS S3 connection.\n    \"\"\"\n    return _cloud_aws_s3(session, cluster_id).\\\n        filter(AWSS3.id==id).\\\n        one()\n@query_wrapper\ndef cloud_aws_s3_list(session, cluster_id, needs_columns=False):\n    \"\"\" AWS S3 connections.\n    \"\"\"\n    return _cloud_aws_s3(session, cluster_id)\n# ################################################################################################################################\ndef _pubsub_topic(session, cluster_id):\n    return session.query(PubSubTopic.id, PubSubTopic.name, PubSubTopic.is_active, PubSubTopic.max_depth).\\\n        filter(Cluster.id==PubSubTopic.cluster_id).\\\n        filter(Cluster.id==cluster_id).\\\n        order_by(PubSubTopic.name)\ndef pubsub_topic(session, cluster_id, id):\n    \"\"\" A pub/sub topic.\n    \"\"\"\n    return _pubsub_topic(session, cluster_id).\\\n        filter(PubSubTopic.id==id).\\\n        one()\n@query_wrapper\ndef pubsub_topic_list(session, cluster_id, needs_columns=False):\n    \"\"\" All pub/sub topics.\n    \"\"\"\n    return _pubsub_topic(session, cluster_id)\ndef pubsub_default_client(session, cluster_id, name):\n    \"\"\" Returns a client ID of a given name used internally for pub/sub.\n    \"\"\"\n    return session.query(HTTPBasicAuth.id, HTTPBasicAuth.name).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(Cluster.id==HTTPBasicAuth.cluster_id).\\\n        filter(HTTPBasicAuth.name==name).\\\n        first()\n# ################################################################################################################################\ndef _pubsub_producer(session, cluster_id, needs_columns=False):\n    return session.query(\n        PubSubProducer.id,\n        PubSubProducer.is_active,\n        SecurityBase.id.label('client_id'),\n        SecurityBase.name,\n        SecurityBase.sec_type,\n        PubSubTopic.name.label('topic_name')).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(PubSubProducer.topic_id==PubSubTopic.id).\\\n        filter(PubSubProducer.cluster_id==Cluster.id).\\\n        filter(PubSubProducer.sec_def_id==SecurityBase.id).\\\n        order_by(SecurityBase.sec_type, SecurityBase.name)\n@query_wrapper\ndef pubsub_producer_list(session, cluster_id, topic_name, needs_columns=False):\n    \"\"\" All pub/sub producers.\n    \"\"\"\n    response = _pubsub_producer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\ndef _pubsub_consumer(session, cluster_id, needs_columns=False):\n    return session.query(\n        PubSubConsumer.id,\n        PubSubConsumer.is_active,\n        PubSubConsumer.max_depth,\n        PubSubConsumer.sub_key,\n        PubSubConsumer.delivery_mode,\n        PubSubConsumer.callback_id,\n        PubSubConsumer.callback_type,\n        HTTPSOAP.name.label('callback_name'),\n        HTTPSOAP.soap_version,\n        SecurityBase.id.label('client_id'),\n        SecurityBase.name,\n        SecurityBase.sec_type,\n        PubSubTopic.name.label('topic_name')).\\\n        outerjoin(HTTPSOAP, HTTPSOAP.id==PubSubConsumer.callback_id).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(PubSubConsumer.topic_id==PubSubTopic.id).\\\n        filter(PubSubConsumer.cluster_id==Cluster.id).\\\n        filter(PubSubConsumer.sec_def_id==SecurityBase.id).\\\n        order_by(SecurityBase.sec_type, SecurityBase.name)\n@query_wrapper\ndef pubsub_consumer_list(session, cluster_id, topic_name, needs_columns=False):\n    \"\"\" All pub/sub consumers.\n    \"\"\"\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "length": 2251, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "9621a523cfd2361541d82c5585397ca2326e223496d5585c"}
{"input": "", "context": "/*\n * AMW - Automated Middleware allows you to manage the configurations of\n * your Java EE applications on an unlimited number of different environments\n * with various versions, including the automated deployment of those apps.\n * Copyright (C) 2013-2016 by Puzzle ITC\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage ch.puzzle.itc.mobiliar.business.generator.control.extracted;\nimport ch.puzzle.itc.mobiliar.business.releasing.boundary.ReleaseLocator;\nimport ch.puzzle.itc.mobiliar.business.releasing.entity.ReleaseEntity;\nimport ch.puzzle.itc.mobiliar.business.resourcegroup.boundary.ResourceGroupLocator;\nimport ch.puzzle.itc.mobiliar.business.resourcegroup.control.ResourceReleaseComparator;\nimport ch.puzzle.itc.mobiliar.business.resourcegroup.entity.ResourceEntity;\nimport ch.puzzle.itc.mobiliar.business.resourcegroup.entity.ResourceGroupEntity;\nimport ch.puzzle.itc.mobiliar.business.resourcerelation.entity.ConsumedResourceRelationEntity;\nimport ch.puzzle.itc.mobiliar.business.resourcerelation.entity.ProvidedResourceRelationEntity;\nimport ch.puzzle.itc.mobiliar.common.util.DefaultResourceTypeDefinition;\nimport javax.ejb.Stateless;\nimport javax.inject.Inject;\nimport javax.validation.constraints.NotNull;\nimport java.util.*;\n/**\n * This service contains the logic of\n *\n */\n@Stateless\npublic class ResourceDependencyResolverService {\n    @Inject\n    ResourceReleaseComparator resourceReleaseComparator;\n    @Inject\n    ReleaseLocator releaseLocator;\n    @Inject\n    ResourceGroupLocator resourceGroupLocator;\n    static class ReleaseComparator implements Comparator<ReleaseEntity> {\n        @Override\n        public int compare(ReleaseEntity arg0, ReleaseEntity arg1) {\n            if (arg0 == null || arg0.getInstallationInProductionAt() == null) {\n                return arg1 == null || arg1.getInstallationInProductionAt() == null ? 0 : -1;\n            }\n            return arg1 == null || arg1.getInstallationInProductionAt() == null ? 1 : arg0.getInstallationInProductionAt().compareTo(arg1.getInstallationInProductionAt());\n        }\n    }\n    public Set<ConsumedResourceRelationEntity> getConsumedMasterRelationsForRelease(ResourceEntity resource, ReleaseEntity release) {\n        Set<ConsumedResourceRelationEntity> relations = resource.getConsumedMasterRelations();\n        Set<ConsumedResourceRelationEntity> result = new HashSet<ConsumedResourceRelationEntity>();\n        if (relations != null) {\n            for (ConsumedResourceRelationEntity r : relations) {\n                if (isBestResource(r.getSlaveResource(), release)) {\n                    result.add(r);\n                }\n            }\n        }\n        return result;\n    }\n    public Set<ProvidedResourceRelationEntity> getProvidedSlaveRelationsForRelease(ResourceEntity resource, ReleaseEntity release) {\n        Set<ProvidedResourceRelationEntity> relations = resource.getProvidedSlaveRelations();\n        Set<ProvidedResourceRelationEntity> result = new HashSet<ProvidedResourceRelationEntity>();\n        for (ProvidedResourceRelationEntity r : relations) {\n            if (isBestResource(r.getMasterResource(), release)) {\n                result.add(r);\n            }\n        }\n        return result;\n    }\n    public Set<ProvidedResourceRelationEntity> getProvidedMasterRelationsForRelease(ResourceEntity resource, ReleaseEntity release) {\n        Set<ProvidedResourceRelationEntity> relations = resource.getProvidedMasterRelations();\n        Set<ProvidedResourceRelationEntity> result = new HashSet<ProvidedResourceRelationEntity>();\n        for (ProvidedResourceRelationEntity r : relations) {\n            if (isBestResource(r.getSlaveResource(), release)) {\n                result.add(r);\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns best-matching Release. 1. Priority nearest in future 2. Priority nearest in past\n     *\n     * @param releases    Sorted set of Releases\n     * @param currentDate\n     * @return Returns ReleaseEntity\n     */\n    public ReleaseEntity findMostRelevantRelease(SortedSet<ReleaseEntity> releases, Date currentDate) {\n        return findMostRelevantRelease(releases, currentDate, true);\n    }\n    /**\n     * Returns best-matching Release. (nearest in past)\n     *\n     * @param releases    Sorted set of Releases\n     * @param currentDate\n     * @return Returns ReleaseEntity\n     */\n    public ReleaseEntity findExactOrClosestPastRelease(SortedSet<ReleaseEntity> releases, Date currentDate) {\n        return findMostRelevantRelease(releases, currentDate, false);\n    }\n    private ReleaseEntity findMostRelevantRelease(SortedSet<ReleaseEntity> releases, Date currentDate, boolean includingFuture) {\n        ReleaseEntity bestMatch = null;\n        long currentTime = currentDate != null ? currentDate.getTime() : (new Date()).getTime();\n        for (ReleaseEntity releaseEntity : releases) {\n            long releaseInstallationTime = releaseEntity.getInstallationInProductionAt().getTime();\n            Long bestMatchingReleaseTime = bestMatch != null ? bestMatch.getInstallationInProductionAt().getTime() : null;\n            if (includingFuture && isBestMatchingFutureReleaseTime(bestMatchingReleaseTime, releaseInstallationTime, currentTime)) {\n                bestMatch = releaseEntity;\n            }\n            if (isBestMatchingPastReleaseTime(bestMatchingReleaseTime, releaseInstallationTime, currentTime)) {\n                bestMatch = releaseEntity;\n            }\n        }\n        return bestMatch;\n    }\n    public boolean isBestMatchingPastReleaseTime(Long bestMatchingReleaseTime, long releaseInstallationTime, long currentTime) {\n        boolean isMatchingPastRelease = false;\n        if (releaseInstallationTime <= currentTime) {\n            // past release found\n            if (bestMatchingReleaseTime == null) {\n                // take it, it is the only one so far\n                isMatchingPastRelease = true;\n            } else if ((bestMatchingReleaseTime <= currentTime) && (releaseInstallationTime >= bestMatchingReleaseTime)) {\n                // take it, the existing bestMatch was an earlier date\n                isMatchingPastRelease = true;\n            }\n        }\n        return isMatchingPastRelease;\n    }\n    public Boolean isBestMatchingFutureReleaseTime(Long bestMatchingReleaseTime, long releaseInstallationTime, long currentTime) {\n        boolean isMatchingFutureRelease = false;\n        if (releaseInstallationTime >= currentTime) {\n            // future release found\n            if (bestMatchingReleaseTime == null) {\n                // take it, it is the only one so far\n                isMatchingFutureRelease = true;\n            } else if (bestMatchingReleaseTime < currentTime) {\n                // take it, the existing bestMatch was from past\n                isMatchingFutureRelease = true;\n            } else if (releaseInstallationTime < bestMatchingReleaseTime) {\n                // take it, the existing bestMatch was a later date\n                isMatchingFutureRelease = true;\n            }\n        }\n        return isMatchingFutureRelease;\n    }\n    public ResourceEntity findMostRelevantResource(List<ResourceEntity> resources, Date relevantDate) {\n        if (resources == null || relevantDate == null) {\n            return null;\n        }\n        List<ResourceEntity> allReleaseResourcesOrderedByRelease = new ArrayList<>(resources);\n        Collections.sort(allReleaseResourcesOrderedByRelease, resourceReleaseComparator);\n        SortedSet<ReleaseEntity> releases = new TreeSet<>();\n        for (ResourceEntity resourceEntity : allReleaseResourcesOrderedByRelease) {\n            releases.add(resourceEntity.getRelease());\n        }\n        ReleaseEntity mostRelevantRelease = findMostRelevantRelease(releases, relevantDate);\n        if (mostRelevantRelease != null) {\n            for (ResourceEntity resourceEntity : allReleaseResourcesOrderedByRelease) {\n                if (mostRelevantRelease.equals(resourceEntity.getRelease())) {\n                    return resourceEntity;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * @param resources\n     * @param limit\n     * @return all Resources that are linked to a Release which is after or equal the given limit\n     */\n    public List<ResourceEntity> getAllFutureReleases(Set<ResourceEntity> resources, ReleaseEntity limit) {\n        List<ResourceEntity> allReleaseResourcesOrderedByRelease = new ArrayList<>(resources);\n        Collections.sort(allReleaseResourcesOrderedByRelease, resourceReleaseComparator);\n        List<ResourceEntity> resourcesBefore = new ArrayList<>();\n        for (ResourceEntity resourceEntity : allReleaseResourcesOrderedByRelease) {\n            if (limit != null && limit.getInstallationInProductionAt() != null\n                    && !limit.getInstallationInProductionAt().after(resourceEntity.getRelease().getInstallationInProductionAt())) {\n                resourcesBefore.add(resourceEntity);\n            }\n        }\n        return resourcesBefore;\n    }\n    /**\n     * analyzes if the given resource is the best matching for the given release. returns true if so, false otherwise.\n     */\n    private boolean isBestResource(@NotNull ResourceEntity resource, @NotNull ReleaseEntity release) {\n        return resource.equals(getResourceEntityForRelease(resource.getResourceGroup(), release));\n    }\n    public ResourceEntity getResourceEntityForRelease(@NotNull ResourceGroupEntity resourceGroup, @NotNull ReleaseEntity release) {\n        return getResourceEntityForRelease(resourceGroup.getResources(), release);\n    }\n    /**\n     * Used by Angular-Rest\n     * @param resourceGroupId\n     * @param releaseId\n     * @return\n     */\n    public ResourceEntity getResourceEntityForRelease(@NotNull Integer resourceGroupId, @NotNull Integer releaseId) {\n        ResourceGroupEntity resourceGroup = resourceGroupLocator.getResourceGroupForCreateDeploy(resourceGroupId);\n        return getResourceEntityForRelease(resourceGroup.getResources(), releaseLocator.getReleaseById(releaseId));\n    }\n    public ResourceEntity getResourceEntityForRelease(@NotNull Collection<ResourceEntity> resources, @NotNull ReleaseEntity release) {\n        ReleaseComparator comparator = new ReleaseComparator();\n        ResourceEntity bestResource = null;\n        for (ResourceEntity resource : resources) {\n            int compareValue = comparator.compare(resource.getRelease(), release);\n            //If the resource group contains a matching release, this is the one we would like to use\n            if (compareValue == 0) {\n                return resource;\n            }\n            //Otherwise, we're only interested in earlier releases than the requested one\n            else if (compareValue < 0) {\n                if (comparator.compare(resource.getRelease(), bestResource == null ? null : bestResource.getRelease()) > 0) {\n                    //If the release date of the current resource is later than the the best release we've found yet, it is better suited and is our new \"best resource\"\n                    bestResource = resource;\n                }\n            }\n        }\n        return bestResource;\n    }\n    /**\n     * Expects a set of resource entities which possibly contains multiple instances for one resource group.\n     * Returns a subset of the given list of resource entities by extracting the best matching resource entity dependent on the given release\n     *\n     * @param resourceEntities\n     * @param release\n     * @return\n     */\n    public Set<ResourceEntity> getResourceEntitiesByRelease(Collection<ResourceEntity> resourceEntities, ReleaseEntity release) {\n        Set<ResourceGroupEntity> handledResourceGroups = new HashSet<ResourceGroupEntity>();\n        Set<ResourceEntity> result = new HashSet<ResourceEntity>();\n        if (resourceEntities != null) {\n            for (ResourceEntity r : resourceEntities) {\n                if (!handledResourceGroups.contains(r.getResourceGroup())) {\n                    ResourceEntity resourceForRelease = getResourceEntityForRelease(r.getResourceGroup(), release);\n                    if (resourceForRelease != null) {\n                        result.add(resourceForRelease);\n                    }\n                    handledResourceGroups.add(r.getResourceGroup());\n                }\n            }\n        }\n        return result;\n    }\n    //TODO extract logic from the resource entity and place it here\n    public Set<ResourceEntity> getConsumedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition defaultResourceTypeDefinition, ReleaseEntity release) {\n        List<ResourceEntity> resources = resource.getConsumedRelatedResourcesByResourceType(defaultResourceTypeDefinition);\n        if (resources == null) {\n            return null;\n        }\n        Set<ResourceEntity> result = new LinkedHashSet<ResourceEntity>();\n        for (ResourceEntity r : resources) {\n            ResourceEntity resourceEntityForRelease = getResourceEntityForRelease(r.getResourceGroup(), release);\n", "answers": ["            if (resourceEntityForRelease != null) {"], "length": 1149, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "693b0b0207d00086cfcee5f5943068055d8630c9db62e018"}
{"input": "", "context": "# Copyright 2014-2016 The ODL development group\n#\n# This file is part of ODL.\n#\n# ODL is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# ODL is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with ODL.  If not, see <http://www.gnu.org/licenses/>.\n# Imports for common Python 2/3 codebase\nfrom __future__ import print_function, division, absolute_import\nfrom future import standard_library\nstandard_library.install_aliases()\nimport numpy as np\nimport scipy as sp\nfrom odl.discr import ResizingOperator\nfrom odl.trafos import FourierTransform, PYFFTW_AVAILABLE\n__all__ = ('fbp_op', 'fbp_filter_op', 'tam_danielson_window',\n           'parker_weighting')\ndef _axis_in_detector(geometry):\n    \"\"\"A vector in the detector plane that points along the rotation axis.\"\"\"\n    du = geometry.det_init_axes[0]\n    dv = geometry.det_init_axes[1]\n    axis = geometry.axis\n    c = np.array([np.vdot(axis, du), np.vdot(axis, dv)])\n    cnorm = np.linalg.norm(c)\n    # Check for numerical errors\n    assert cnorm != 0\n    return c / cnorm\ndef _rotation_direction_in_detector(geometry):\n    \"\"\"A vector in the detector plane that points in the rotation direction.\"\"\"\n    du = geometry.det_init_axes[0]\n    dv = geometry.det_init_axes[1]\n    axis = geometry.axis\n    det_normal = np.cross(du, dv)\n    rot_dir = np.cross(axis, det_normal)\n    c = np.array([np.vdot(rot_dir, du), np.vdot(rot_dir, dv)])\n    cnorm = np.linalg.norm(c)\n    # Check for numerical errors\n    assert cnorm != 0\n    return c / cnorm\ndef _fbp_filter(norm_freq, filter_type, frequency_scaling):\n    \"\"\"Create a smoothing filter for FBP.\n    Parameters\n    ----------\n    norm_freq : `array-like`\n        Frequencies normalized to lie in the interval [0, 1].\n    filter_type : {'Ram-Lak', 'Shepp-Logan', 'Cosine', 'Hamming', 'Hann'}\n        The type of filter to be used.\n    frequency_scaling : float\n        Scaling of the frequencies for the filter. All frequencies are scaled\n        by this number, any relative frequency above ``frequency_scaling`` is\n        set to 0.\n    Returns\n    -------\n    smoothing_filter : `numpy.ndarray`\n    Examples\n    --------\n    Create an FBP filter\n    >>> norm_freq = np.linspace(0, 1, 10)\n    >>> filt = _fbp_filter(norm_freq,\n    ...                    filter_type='Hann',\n    ...                    frequency_scaling=0.8)\n    \"\"\"\n    if filter_type == 'Ram-Lak':\n        filt = 1\n    elif filter_type == 'Shepp-Logan':\n        filt = np.sinc(norm_freq / (2 * frequency_scaling))\n    elif filter_type == 'Cosine':\n        filt = np.cos(norm_freq * np.pi / (2 * frequency_scaling))\n    elif filter_type == 'Hamming':\n        filt = 0.54 + 0.46 * np.cos(norm_freq * np.pi / (frequency_scaling))\n    elif filter_type == 'Hann':\n        filt = np.cos(norm_freq * np.pi / (2 * frequency_scaling)) ** 2\n    else:\n        raise ValueError('unknown `filter_type` ({})'\n                         ''.format(filter_type))\n    indicator = (norm_freq <= frequency_scaling)\n    return indicator * filt\ndef tam_danielson_window(ray_trafo, smoothing_width=0.05, n_half_rot=1):\n    \"\"\"Create Tam-Danielson window from a `RayTransform`.\n    The Tam-Danielson window is an indicator function on the minimal set of\n    data needed to reconstruct a volume from given data. It is useful in\n    analytic reconstruction methods such as FBP to give a more accurate\n    reconstruction.\n    See TAM1998_ for more information.\n    Parameters\n    ----------\n    ray_trafo : `RayTransform`\n        The ray transform for which to compute the window.\n    smoothing_width : positive float, optional\n        Width of the smoothing applied to the window's edges given as a\n        fraction of the width of the full window.\n    n_half_rot : odd int\n        Total number of half rotations to include in the window. Values larger\n        than 1 should be used if the pitch is much smaller than the detector\n        height.\n    Returns\n    -------\n    tam_danielson_window : ``ray_trafo.range`` element\n    See Also\n    --------\n    fbp_op : Filtered back-projection operator from `RayTransform`\n    tam_danielson_window : Weighting for short scan data\n    HelicalConeFlatGeometry : The primary use case for this window function.\n    References\n    ----------\n    .. _TAM1998: http://iopscience.iop.org/article/10.1088/0031-9155/43/4/028\n    \"\"\"\n    # Extract parameters\n    src_radius = ray_trafo.geometry.src_radius\n    det_radius = ray_trafo.geometry.det_radius\n    pitch = ray_trafo.geometry.pitch\n    if pitch == 0:\n        raise ValueError('Tam-Danielson window is only defined with '\n                         '`pitch!=0`')\n    smoothing_width = float(smoothing_width)\n    if smoothing_width < 0:\n        raise ValueError('`smoothing_width` should be a positive float')\n    if n_half_rot % 2 != 1:\n        raise ValueError('`n_half_rot` must be odd, got {}'.format(n_half_rot))\n    # Find projection of axis on detector\n    axis_proj = _axis_in_detector(ray_trafo.geometry)\n    rot_dir = _rotation_direction_in_detector(ray_trafo.geometry)\n    # Find distance from projection of rotation axis for each pixel\n    dx = (rot_dir[0] * ray_trafo.range.meshgrid[1] +\n          rot_dir[1] * ray_trafo.range.meshgrid[2])\n    # Compute angles\n    phi = np.arctan(dx / (src_radius + det_radius))\n    theta = phi * 2\n    # Compute lower and upper bound\n    source_to_line_distance = src_radius + src_radius * np.cos(theta)\n    scale = (src_radius + det_radius) / source_to_line_distance\n    source_to_line_lower = pitch * (theta - n_half_rot * np.pi) / (2 * np.pi)\n    source_to_line_upper = pitch * (theta + n_half_rot * np.pi) / (2 * np.pi)\n    lower_proj = source_to_line_lower * scale\n    upper_proj = source_to_line_upper * scale\n    # Compute a smoothed width\n    interval = (upper_proj - lower_proj)\n    width = interval * smoothing_width / np.sqrt(2)\n    # Create window function\n    def window_fcn(x):\n        x_along_axis = axis_proj[0] * x[1] + axis_proj[1] * x[2]\n        if smoothing_width != 0:\n            lower_wndw = 0.5 * (\n                1 + sp.special.erf((x_along_axis - lower_proj) / width))\n            upper_wndw = 0.5 * (\n                1 + sp.special.erf((upper_proj - x_along_axis) / width))\n        else:\n            lower_wndw = (x_along_axis >= lower_proj)\n            upper_wndw = (x_along_axis <= upper_proj)\n        return lower_wndw * upper_wndw\n    return ray_trafo.range.element(window_fcn) / n_half_rot\ndef parker_weighting(ray_trafo, q=0.25):\n    \"\"\"Create parker weighting for a `RayTransform`.\n    Parker weighting is a weighting function that ensures that oversampled\n    fan/cone beam data are weighted such that each line has unit weight. It is\n    useful in analytic reconstruction methods such as FBP to give a more\n    accurate result and can improve convergence rates for iterative methods.\n    See the article `Parker weights revisited`_ for more information.\n    Parameters\n    ----------\n    ray_trafo : `RayTransform`\n        The ray transform for which to compute the weights.\n    q : float\n        Parameter controlling the speed of the roll-off at the edges of the\n        weighting. 1.0 gives the classical Parker weighting, while smaller\n        values in general lead to lower noise but stronger discretization\n        artifacts.\n    Returns\n    -------\n    parker_weighting : ``ray_trafo.range`` element\n    See Also\n    --------\n    fbp_op : Filtered back-projection operator from `RayTransform`\n    tam_danielson_window : Indicator function for helical data\n    FanFlatGeometry : Use case in 2d\n    CircularConeFlatGeometry : Use case in 3d\n    References\n    ----------\n    .. _Parker weights revisited: https://www.ncbi.nlm.nih.gov/pubmed/11929021\n    \"\"\"\n    # Note: Parameter names taken from WES2002\n    # Extract parameters\n    src_radius = ray_trafo.geometry.src_radius\n    det_radius = ray_trafo.geometry.det_radius\n    ndim = ray_trafo.geometry.ndim\n    angles = ray_trafo.range.meshgrid[0]\n    min_rot_angle = ray_trafo.geometry.motion_partition.min_pt\n    alen = ray_trafo.geometry.motion_params.length\n    # Parker weightings are not defined for helical geometries\n    if ray_trafo.geometry.ndim != 2:\n        pitch = ray_trafo.geometry.pitch\n        if pitch != 0:\n            raise ValueError('Parker weighting window is only defined with '\n                             '`pitch==0`')\n    # Find distance from projection of rotation axis for each pixel\n    if ndim == 2:\n", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "length": 1057, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "6515bcd028819c4ca6bc104bc8610724275c7ed4d429f30c"}
{"input": "", "context": "# coding=utf-8\n# Author: Nic Wolfe <nic@wolfeden.ca>\n# URL: http://code.google.com/p/sickbeard/\n#\n# This file is part of SickRage.\n#\n# SickRage is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# SickRage is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with SickRage.  If not, see <http://www.gnu.org/licenses/>.\nfrom __future__ import with_statement\nimport datetime\nimport os\nimport re\nimport itertools\nimport urllib\nimport sickbeard\nimport requests\nfrom sickbeard import helpers, classes, logger, db\nfrom sickbeard.common import MULTI_EP_RESULT, SEASON_RESULT, USER_AGENT\nfrom sickbeard import tvcache\nfrom sickbeard import encodingKludge as ek\nfrom sickbeard.exceptions import ex\nfrom sickbeard.name_parser.parser import NameParser, InvalidNameException, InvalidShowException\nfrom sickbeard.common import Quality\nfrom hachoir_parser import createParser\nfrom base64 import b16encode, b32decode\nclass GenericProvider:\n    NZB = \"nzb\"\n    TORRENT = \"torrent\"\n    def __init__(self, name):\n        # these need to be set in the subclass\n        self.providerType = None\n        self.name = name\n        self.proxy = ProviderProxy()\n        self.urls = {}\n        self.url = ''\n        self.show = None\n        self.supportsBacklog = False\n        self.supportsAbsoluteNumbering = False\n        self.anime_only = False\n        self.search_mode = None\n        self.search_fallback = False\n        self.enable_daily = False\n        self.enable_backlog = False\n        self.cache = tvcache.TVCache(self)\n        self.session = requests.session()\n        self.headers = {'User-Agent': USER_AGENT}\n    def getID(self):\n        return GenericProvider.makeID(self.name)\n    @staticmethod\n    def makeID(name):\n        return re.sub(\"[^\\w\\d_]\", \"_\", name.strip().lower())\n    def imageName(self):\n        return self.getID() + '.png'\n    def _checkAuth(self):\n        return True\n    def _doLogin(self):\n        return True\n    def isActive(self):\n        if self.providerType == GenericProvider.NZB and sickbeard.USE_NZBS:\n            return self.isEnabled()\n        elif self.providerType == GenericProvider.TORRENT and sickbeard.USE_TORRENTS:\n            return self.isEnabled()\n        else:\n            return False\n    def isEnabled(self):\n        \"\"\"\n        This should be overridden and should return the config setting eg. sickbeard.MYPROVIDER\n        \"\"\"\n        return False\n    def getResult(self, episodes):\n        \"\"\"\n        Returns a result of the correct type for this provider\n        \"\"\"\n        if self.providerType == GenericProvider.NZB:\n            result = classes.NZBSearchResult(episodes)\n        elif self.providerType == GenericProvider.TORRENT:\n            result = classes.TorrentSearchResult(episodes)\n        else:\n            result = classes.SearchResult(episodes)\n        result.provider = self\n        return result\n    def getURL(self, url, post_data=None, params=None, timeout=30, json=False):\n        \"\"\"\n        By default this is just a simple urlopen call but this method should be overridden\n        for providers with special URL requirements (like cookies)\n        \"\"\"\n        # check for auth\n        if not self._doLogin():\n            return\n        if self.proxy.isEnabled():\n            self.headers.update({'Referer': self.proxy.getProxyURL()})\n        return helpers.getURL(self.proxy._buildURL(url), post_data=post_data, params=params, headers=self.headers, timeout=timeout,\n                              session=self.session, json=json)\n    def downloadResult(self, result):\n        \"\"\"\n        Save the result to disk.\n        \"\"\"\n        # check for auth\n        if not self._doLogin():\n            return False\n        if self.providerType == GenericProvider.TORRENT:\n            try:\n                torrent_hash = re.findall('urn:btih:([\\w]{32,40})', result.url)[0].upper()\n                if len(torrent_hash) == 32:\n                    torrent_hash = b16encode(b32decode(torrent_hash)).lower()\n                if not torrent_hash:\n                    logger.log(\"Unable to extract torrent hash from link: \" + ex(result.url), logger.ERROR)\n                    return False\n                urls = [\n                    'http://torcache.net/torrent/' + torrent_hash + '.torrent',\n                    'http://torrage.com/torrent/' + torrent_hash + '.torrent',\n                    'http://zoink.it/torrent/' + torrent_hash + '.torrent',\n                ]\n            except:\n                urls = [result.url]\n            filename = ek.ek(os.path.join, sickbeard.TORRENT_DIR,\n                             helpers.sanitizeFileName(result.name) + '.' + self.providerType)\n        elif self.providerType == GenericProvider.NZB:\n            urls = [result.url]\n            filename = ek.ek(os.path.join, sickbeard.NZB_DIR,\n                             helpers.sanitizeFileName(result.name) + '.' + self.providerType)\n        else:\n            return\n        for url in urls:\n            if helpers.download_file(url, filename, session=self.session):\n                logger.log(u\"Downloading a result from \" + self.name + \" at \" + url)\n                if self.providerType == GenericProvider.TORRENT:\n                    logger.log(u\"Saved magnet link to \" + filename, logger.INFO)\n                else:\n                    logger.log(u\"Saved result to \" + filename, logger.INFO)\n                if self._verify_download(filename):\n                    return True\n        logger.log(u\"Failed to download result\", logger.WARNING)\n        return False\n    def _verify_download(self, file_name=None):\n        \"\"\"\n        Checks the saved file to see if it was actually valid, if not then consider the download a failure.\n        \"\"\"\n        # primitive verification of torrents, just make sure we didn't get a text file or something\n        if self.providerType == GenericProvider.TORRENT:\n            try:\n                parser = createParser(file_name)\n                if parser:\n                    mime_type = parser._getMimeType()\n                    try:\n                        parser.stream._input.close()\n                    except:\n                        pass\n                    if mime_type == 'application/x-bittorrent':\n                        return True\n            except Exception as e:\n                logger.log(u\"Failed to validate torrent file: \" + ex(e), logger.DEBUG)\n            logger.log(u\"Result is not a valid torrent file\", logger.WARNING)\n            return False\n        return True\n    def searchRSS(self, episodes):\n        return self.cache.findNeededEpisodes(episodes)\n    def getQuality(self, item, anime=False):\n        \"\"\"\n        Figures out the quality of the given RSS item node\n        \n        item: An elementtree.ElementTree element representing the <item> tag of the RSS feed\n        \n        Returns a Quality value obtained from the node's data \n        \"\"\"\n        (title, url) = self._get_title_and_url(item)\n        quality = Quality.sceneQuality(title, anime)\n        return quality\n    def _doSearch(self, search_params, search_mode='eponly', epcount=0, age=0):\n        return []\n    def _get_season_search_strings(self, episode):\n        return []\n    def _get_episode_search_strings(self, eb_obj, add_string=''):\n        return []\n    def _get_title_and_url(self, item):\n        \"\"\"\n        Retrieves the title and URL data from the item XML node\n        item: An elementtree.ElementTree element representing the <item> tag of the RSS feed\n        Returns: A tuple containing two strings representing title and URL respectively\n        \"\"\"\n        title = item.get('title')\n        if title:\n            title = u'' + title.replace(' ', '.')\n        url = item.get('link')\n        if url:\n            url = url.replace('&amp;', '&')\n        return title, url\n    def findSearchResults(self, show, episodes, search_mode, manualSearch=False):\n        self._checkAuth()\n        self.show = show\n        results = {}\n        itemList = []\n        searched_scene_season = None\n        for epObj in episodes:\n            # search cache for episode result\n            cacheResult = self.cache.searchCache(epObj, manualSearch)\n            if cacheResult:\n                if epObj.episode not in results:\n                    results[epObj.episode] = cacheResult\n                else:\n                    results[epObj.episode].extend(cacheResult)\n                # found result, search next episode\n                continue\n            # skip if season already searched\n            if len(episodes) > 1 and searched_scene_season == epObj.scene_season:\n                continue\n            # mark season searched for season pack searches so we can skip later on\n            searched_scene_season = epObj.scene_season\n            if len(episodes) > 1:\n                # get season search results\n                for curString in self._get_season_search_strings(epObj):\n                    itemList += self._doSearch(curString, search_mode, len(episodes))\n            else:\n                # get single episode search results\n                for curString in self._get_episode_search_strings(epObj):\n                    itemList += self._doSearch(curString, 'eponly', len(episodes))\n        # if we found what we needed already from cache then return results and exit\n        if len(results) == len(episodes):\n            return results\n        # sort list by quality\n        if len(itemList):\n            items = {}\n            itemsUnknown = []\n            for item in itemList:\n                quality = self.getQuality(item, anime=show.is_anime)\n                if quality == Quality.UNKNOWN:\n                    itemsUnknown += [item]\n                else:\n                    if quality not in items:\n                        items[quality] = [item]\n                    else:\n                        items[quality].append(item)\n            itemList = list(itertools.chain(*[v for (k, v) in sorted(items.items(), reverse=True)]))\n            itemList += itemsUnknown if itemsUnknown else []\n        # filter results\n        cl = []\n        for item in itemList:\n            (title, url) = self._get_title_and_url(item)\n            # parse the file name\n            try:\n                myParser = NameParser(False, convert=True)\n                parse_result = myParser.parse(title)\n            except InvalidNameException:\n                logger.log(u\"Unable to parse the filename \" + title + \" into a valid episode\", logger.DEBUG)\n                continue\n            except InvalidShowException:\n                logger.log(u\"Unable to parse the filename \" + title + \" into a valid show\", logger.DEBUG)\n                continue\n            showObj = parse_result.show\n            quality = parse_result.quality\n            release_group = parse_result.release_group\n            version = parse_result.version\n            addCacheEntry = False\n            if not (showObj.air_by_date or showObj.sports):\n                if search_mode == 'sponly': \n                    if len(parse_result.episode_numbers):\n                        logger.log(\n                            u\"This is supposed to be a season pack search but the result \" + title + \" is not a valid season pack, skipping it\",\n                            logger.DEBUG)\n                        addCacheEntry = True\n                    if len(parse_result.episode_numbers) and (\n                                    parse_result.season_number not in set([ep.season for ep in episodes]) or not [ep for ep in episodes if\n                                                                                 ep.scene_episode in parse_result.episode_numbers]):\n                        logger.log(\n                            u\"The result \" + title + \" doesn't seem to be a valid episode that we are trying to snatch, ignoring\",\n                            logger.DEBUG)\n                        addCacheEntry = True\n                else:\n                    if not len(parse_result.episode_numbers) and parse_result.season_number and not [ep for ep in\n                                                                                                     episodes if\n                                                                                                     ep.season == parse_result.season_number and ep.episode in parse_result.episode_numbers]:\n                        logger.log(\n                            u\"The result \" + title + \" doesn't seem to be a valid season that we are trying to snatch, ignoring\",\n                            logger.DEBUG)\n                        addCacheEntry = True\n                    elif len(parse_result.episode_numbers) and not [ep for ep in episodes if\n                                                                    ep.season == parse_result.season_number and ep.episode in parse_result.episode_numbers]:\n                        logger.log(\n                            u\"The result \" + title + \" doesn't seem to be a valid episode that we are trying to snatch, ignoring\",\n                            logger.DEBUG)\n                        addCacheEntry = True\n                if not addCacheEntry:\n                    # we just use the existing info for normal searches\n                    actual_season = parse_result.season_number\n                    actual_episodes = parse_result.episode_numbers\n            else:\n                if not (parse_result.is_air_by_date):\n                    logger.log(\n                        u\"This is supposed to be a date search but the result \" + title + \" didn't parse as one, skipping it\",\n                        logger.DEBUG)\n                    addCacheEntry = True\n                else:\n                    airdate = parse_result.air_date.toordinal()\n                    myDB = db.DBConnection()\n                    sql_results = myDB.select(\n                        \"SELECT season, episode FROM tv_episodes WHERE showid = ? AND airdate = ?\",\n                        [showObj.indexerid, airdate])\n                    if len(sql_results) != 1:\n                        logger.log(\n                            u\"Tried to look up the date for the episode \" + title + \" but the database didn't give proper results, skipping it\",\n                            logger.WARNING)\n                        addCacheEntry = True\n                if not addCacheEntry:\n                    actual_season = int(sql_results[0][\"season\"])\n                    actual_episodes = [int(sql_results[0][\"episode\"])]\n            # add parsed result to cache for usage later on\n            if addCacheEntry:\n                logger.log(u\"Adding item from search to cache: \" + title, logger.DEBUG)\n                ci = self.cache._addCacheEntry(title, url, parse_result=parse_result)\n                if ci is not None:\n                    cl.append(ci)\n                continue\n            # make sure we want the episode\n            wantEp = True\n            for epNo in actual_episodes:\n                if not showObj.wantEpisode(actual_season, epNo, quality, manualSearch):\n                    wantEp = False\n                    break\n            if not wantEp:\n                logger.log(\n                    u\"Ignoring result \" + title + \" because we don't want an episode that is \" +\n                    Quality.qualityStrings[\n                        quality], logger.DEBUG)\n                continue\n            logger.log(u\"Found result \" + title + \" at \" + url, logger.DEBUG)\n            # make a result object\n            epObj = []\n            for curEp in actual_episodes:\n                epObj.append(showObj.getEpisode(actual_season, curEp))\n            result = self.getResult(epObj)\n            result.show = showObj\n            result.url = url\n            result.name = title\n            result.quality = quality\n            result.release_group = release_group\n            result.content = None\n            result.version = version\n            if len(epObj) == 1:\n                epNum = epObj[0].episode\n                logger.log(u\"Single episode result.\", logger.DEBUG)\n            elif len(epObj) > 1:\n                epNum = MULTI_EP_RESULT\n                logger.log(u\"Separating multi-episode result to check for later - result contains episodes: \" + str(\n                    parse_result.episode_numbers), logger.DEBUG)\n            elif len(epObj) == 0:\n                epNum = SEASON_RESULT\n                logger.log(u\"Separating full season result to check for later\", logger.DEBUG)\n            if epNum not in results:\n                results[epNum] = [result]\n            else:\n                results[epNum].append(result)\n        # check if we have items to add to cache\n        if len(cl) > 0:\n            myDB = self.cache._getDB()\n            myDB.mass_action(cl)\n        return results\n    def findPropers(self, search_date=None):\n        results = self.cache.listPropers(search_date)\n        return [classes.Proper(x['name'], x['url'], datetime.datetime.fromtimestamp(x['time']), self.show) for x in\n                results]\n    def seedRatio(self):\n        '''\n        Provider should override this value if custom seed ratio enabled\n        It should return the value of the provider seed ratio\n        '''\n        return ''\nclass NZBProvider(GenericProvider):\n    def __init__(self, name):\n        GenericProvider.__init__(self, name)\n        self.providerType = GenericProvider.NZB\nclass TorrentProvider(GenericProvider):\n    def __init__(self, name):\n        GenericProvider.__init__(self, name)\n        self.providerType = GenericProvider.TORRENT\nclass ProviderProxy:\n    def __init__(self):\n        self.Type = 'GlypeProxy'\n        self.param = 'browse.php?u='\n        self.option = '&b=32&f=norefer'\n        self.enabled = False\n        self.url = None\n        self.urls = {\n            'getprivate.eu (NL)': 'http://getprivate.eu/',\n            'hideme.nl (NL)': 'http://hideme.nl/',\n            'proxite.eu (DE)': 'http://proxite.eu/',\n            'interproxy.net (EU)': 'http://interproxy.net/',\n        }\n    def isEnabled(self):\n        \"\"\" Return True if we Choose to call TPB via Proxy \"\"\"\n        return self.enabled\n    def getProxyURL(self):\n        \"\"\" Return the Proxy URL Choosen via Provider Setting \"\"\"\n        return str(self.url)\n    def _buildURL(self, url):\n        \"\"\" Return the Proxyfied URL of the page \"\"\"\n        if self.isEnabled():\n            url = self.getProxyURL() + self.param + urllib.quote_plus(url) + self.option\n            logger.log(u\"Proxified URL: \" + url, logger.DEBUG)\n        return url\n    def _buildRE(self, regx):\n        \"\"\" Return the Proxyfied RE string \"\"\"\n        if self.isEnabled():\n            regx = re.sub('//1', self.option, regx).replace('&', '&amp;')\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "length": 1751, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "73869275419cb7e29c3d7b53bed42f41e39223637ced7d1d"}
{"input": "", "context": "//\n// System.Web.UI.WebControls.FontUnit.cs\n//\n// Authors:\n//   Miguel de Icaza (miguel@novell.com)\n//   Ben Maurer (bmaurer@ximian.com).\n//\n// Copyright (C) 2005-2010 Novell, Inc (http://www.novell.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nusing System.Threading;\nusing System.Globalization;\nusing System.ComponentModel;\nusing System.Security.Permissions;\nusing System.Web.Util;\nnamespace System.Web.UI.WebControls\n{\n\t[TypeConverter  (typeof (FontUnitConverter))]\n\t[Serializable]\n\tpublic struct FontUnit\n\t{\n\t\tFontSize type;\n\t\tUnit unit;\n\t\t\n\t\tpublic static readonly FontUnit Empty;\n\t\tpublic static readonly FontUnit Smaller = new FontUnit (FontSize.Smaller);\n\t\tpublic static readonly FontUnit Larger = new FontUnit (FontSize.Larger);\n\t\tpublic static readonly FontUnit XXSmall = new FontUnit (FontSize.XXSmall);\n\t\tpublic static readonly FontUnit XSmall = new FontUnit (FontSize.XSmall);\n\t\tpublic static readonly FontUnit Small = new FontUnit (FontSize.Small);\n\t\tpublic static readonly FontUnit Medium = new FontUnit (FontSize.Medium);\n\t\tpublic static readonly FontUnit Large = new FontUnit (FontSize.Large);\n\t\tpublic static readonly FontUnit XLarge = new FontUnit (FontSize.XLarge);\n\t\tpublic static readonly FontUnit XXLarge = new FontUnit (FontSize.XXLarge);\n\t\tstatic string [] font_size_names = new string [] {null, null, \"Smaller\", \"Larger\", \"XX-Small\", \"X-Small\", \"Small\",\n\t\t\t\t\t\t\t\t  \"Medium\", \"Large\", \"X-Large\", \"XX-Large\" };\n\t\t\n\t\tpublic FontUnit (FontSize type)\n\t\t{\n\t\t\tint t = (int) type;\n\t\t\t\n\t\t\tif (t < 0 || t > (int)FontSize.XXLarge)\n\t\t\t\tthrow new ArgumentOutOfRangeException (\"type\");\n\t\t\t\n\t\t\tthis.type = type;\n\t\t\tif (type == FontSize.AsUnit)\n\t\t\t\tunit = new Unit (10, UnitType.Point);\n\t\t\telse\n\t\t\t\tunit = Unit.Empty;\n\t\t}\n\t\tpublic FontUnit (int value) : this (new Unit (value, UnitType.Point))\n\t\t{\n\t\t}\n\t\tpublic FontUnit (double value) : this (new Unit (value, UnitType.Point))\n\t\t{\n\t\t}\n\t\tpublic FontUnit (double value, UnitType type) : this (new Unit (value, type))\n\t\t{\n\t\t}\n\t\tpublic FontUnit (Unit value)\n\t\t{\n\t\t\ttype = FontSize.AsUnit;\n\t\t\tunit = value;\n\t\t}\n\t\t\n\t\tpublic FontUnit (string value) : this (value, Thread.CurrentThread.CurrentCulture)\n\t\t{}\n\t\tpublic FontUnit (string value, CultureInfo culture)\n\t\t{\n\t\t\tif (String.IsNullOrEmpty (value)) {\n\t\t\t\ttype = FontSize.NotSet;\n\t\t\t\tunit = Unit.Empty;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tswitch (value.ToLower (Helpers.InvariantCulture)) {\n\t\t\t\tcase \"smaller\":\n\t\t\t\t\ttype = FontSize.Smaller;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"larger\":\n\t\t\t\t\ttype = FontSize.Larger;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"xxsmall\":\n\t\t\t\t\ttype = FontSize.XXSmall;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"xx-small\":\n\t\t\t\t\ttype = FontSize.XXSmall;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"xsmall\":\n\t\t\t\t\ttype = FontSize.XSmall;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"x-small\":\n\t\t\t\t\ttype = FontSize.XSmall;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"small\":\n\t\t\t\t\ttype = FontSize.Small;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"medium\":\n\t\t\t\t\ttype = FontSize.Medium;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"large\":\n\t\t\t\t\ttype = FontSize.Large;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"xlarge\":\n\t\t\t\t\ttype = FontSize.XLarge;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"x-large\":\n\t\t\t\t\ttype = FontSize.XLarge;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"xxlarge\":\n\t\t\t\t\ttype = FontSize.XXLarge;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"xx-large\":\n\t\t\t\t\ttype = FontSize.XXLarge;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttype = FontSize.AsUnit;\n\t\t\t\t\tunit = new Unit (value, culture);\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tunit = Unit.Empty;\n\t\t}\n\t\t\n\t\tpublic bool IsEmpty {\n\t\t\tget { return type == FontSize.NotSet; }\n\t\t}\n\t\tpublic FontSize Type {\n\t\t\tget { return type; }\n\t\t}\n\t\tpublic Unit Unit {\n\t\t\tget { return unit; }\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s)\n\t\t{\n\t\t\treturn new FontUnit (s);\n\t\t}\n\t\tpublic static FontUnit Parse (string s, CultureInfo culture)\n\t\t{\n\t\t\treturn new FontUnit (s, culture);\n\t\t}\n\t\tpublic static FontUnit Point (int n)\n\t\t{\n\t\t\treturn new FontUnit (n);\n\t\t}\n\t\t\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif (obj is FontUnit) {\n\t\t\t\tFontUnit other = (FontUnit) obj;\n\t\t\t\treturn (other.type == type && other.unit == unit);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\treturn type.GetHashCode () ^ unit.GetHashCode ();\n\t\t}\n\t\t\n\t\tpublic static bool operator == (FontUnit left, FontUnit right)\n\t\t{\n\t\t\treturn left.type == right.type && left.unit == right.unit;\n\t\t}\n\t\tpublic static bool operator != (FontUnit left, FontUnit right)\n\t\t{\n\t\t\treturn left.type != right.type || left.unit != right.unit;\n\t\t}\n\t\t\n\t\tpublic static implicit operator FontUnit (int n)\n\t\t{\n\t\t\treturn new FontUnit (n);\n\t\t}\n\t\tpublic string ToString (IFormatProvider fmt)\n\t\t{\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "length": 726, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "a1362f2667219e18121103e3f58abc48d5b819038a41374c"}
{"input": "", "context": "using System;\nusing System.Collections;\nusing Nequeo.Cryptography.Key.Crypto.Parameters;\nusing Nequeo.Cryptography.Key.Math;\nusing Nequeo.Cryptography.Key.Utilities;\nnamespace Nequeo.Cryptography.Key.Crypto.Engines\n{\n\t/**\n\t* NaccacheStern Engine. For details on this cipher, please see\n\t* http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf\n\t*/\n\tpublic class NaccacheSternEngine\n\t\t: IAsymmetricBlockCipher\n\t{\n\t\tprivate bool forEncryption;\n\t\tprivate NaccacheSternKeyParameters key;\n\t\tprivate IList[] lookup = null;\n\t\tprivate bool debug = false;\n\t\tpublic string AlgorithmName\n\t\t{\n\t\t\tget { return \"NaccacheStern\"; }\n\t\t}\n\t\t/**\n\t\t* Initializes this algorithm. Must be called before all other Functions.\n\t\t*\n\t\t* @see Nequeo.Cryptography.Key.crypto.AsymmetricBlockCipher#init(bool,\n\t\t*      Nequeo.Cryptography.Key.crypto.CipherParameters)\n\t\t*/\n\t\tpublic void Init(\n\t\t\tbool\t\t\t\tforEncryption,\n\t\t\tICipherParameters\tparameters)\n\t\t{\n\t\t\tthis.forEncryption = forEncryption;\n\t\t\tif (parameters is ParametersWithRandom)\n\t\t\t{\n\t\t\t\tparameters = ((ParametersWithRandom) parameters).Parameters;\n\t\t\t}\n\t\t\tkey = (NaccacheSternKeyParameters)parameters;\n\t\t\t// construct lookup table for faster decryption if necessary\n\t\t\tif (!this.forEncryption)\n\t\t\t{\n\t\t\t\tif (debug)\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"Constructing lookup Array\");\n\t\t\t\t}\n\t\t\t\tNaccacheSternPrivateKeyParameters priv = (NaccacheSternPrivateKeyParameters)key;\n\t\t\t\tIList primes = priv.SmallPrimesList;\n\t\t\t\tlookup = new IList[primes.Count];\n\t\t\t\tfor (int i = 0; i < primes.Count; i++)\n\t\t\t\t{\n\t\t\t\t\tBigInteger actualPrime = (BigInteger) primes[i];\n\t\t\t\t\tint actualPrimeValue = actualPrime.IntValue;\n\t\t\t\t\tlookup[i] = Platform.CreateArrayList(actualPrimeValue);\n\t\t\t\t\tlookup[i].Add(BigInteger.One);\n\t\t\t\t\tif (debug)\n\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(\"Constructing lookup ArrayList for \" + actualPrimeValue);\n\t\t\t\t\t}\n\t\t\t\t\tBigInteger accJ = BigInteger.Zero;\n\t\t\t\t\tfor (int j = 1; j < actualPrimeValue; j++)\n\t\t\t\t\t{\n//\t\t\t\t\t\tBigInteger bigJ = BigInteger.ValueOf(j);\n//\t\t\t\t\t\taccJ = priv.PhiN.Multiply(bigJ);\n\t\t\t\t\t\taccJ = accJ.Add(priv.PhiN);\n\t\t\t\t\t\tBigInteger comp = accJ.Divide(actualPrime);\n\t\t\t\t\t\tlookup[i].Add(priv.G.ModPow(comp, priv.Modulus));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic bool Debug\n\t\t{\n\t\t\tset { this.debug = value; }\n\t\t}\n\t\t/**\n\t\t* Returns the input block size of this algorithm.\n\t\t*\n\t\t* @see Nequeo.Cryptography.Key.crypto.AsymmetricBlockCipher#GetInputBlockSize()\n\t\t*/\n\t\tpublic int GetInputBlockSize()\n\t\t{\n\t\t\tif (forEncryption)\n\t\t\t{\n\t\t\t\t// We can only encrypt values up to lowerSigmaBound\n\t\t\t\treturn (key.LowerSigmaBound + 7) / 8 - 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// We pad to modulus-size bytes for easier decryption.\n//\t\t\t\treturn key.Modulus.ToByteArray().Length;\n\t\t\t\treturn key.Modulus.BitLength / 8 + 1;\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t* Returns the output block size of this algorithm.\n\t\t*\n\t\t* @see Nequeo.Cryptography.Key.crypto.AsymmetricBlockCipher#GetOutputBlockSize()\n\t\t*/\n\t\tpublic int GetOutputBlockSize()\n\t\t{\n\t\t\tif (forEncryption)\n\t\t\t{\n\t\t\t\t// encrypted Data is always padded up to modulus size\n//\t\t\t\treturn key.Modulus.ToByteArray().Length;\n\t\t\t\treturn key.Modulus.BitLength / 8 + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// decrypted Data has upper limit lowerSigmaBound\n\t\t\t\treturn (key.LowerSigmaBound + 7) / 8 - 1;\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t* Process a single Block using the Naccache-Stern algorithm.\n\t\t*\n\t\t* @see Nequeo.Cryptography.Key.crypto.AsymmetricBlockCipher#ProcessBlock(byte[],\n\t\t*      int, int)\n\t\t*/\n\t\tpublic byte[] ProcessBlock(\n\t\t\tbyte[]\tinBytes,\n\t\t\tint\t\tinOff,\n\t\t\tint\t\tlength)\n\t\t{\n\t\t\tif (key == null)\n\t\t\t\tthrow new InvalidOperationException(\"NaccacheStern engine not initialised\");\n\t\t\tif (length > (GetInputBlockSize() + 1))\n\t\t\t\tthrow new DataLengthException(\"input too large for Naccache-Stern cipher.\\n\");\n\t\t\tif (!forEncryption)\n\t\t\t{\n\t\t\t\t// At decryption make sure that we receive padded data blocks\n\t\t\t\tif (length < GetInputBlockSize())\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\"BlockLength does not match modulus for Naccache-Stern cipher.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// transform input into BigInteger\n\t\t\tBigInteger input = new BigInteger(1, inBytes, inOff, length);\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"input as BigInteger: \" + input);\n\t\t\t}\n\t\t\tbyte[] output;\n\t\t\tif (forEncryption)\n\t\t\t{\n\t\t\t\toutput = Encrypt(input);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tIList plain = Platform.CreateArrayList();\n\t\t\t\tNaccacheSternPrivateKeyParameters priv = (NaccacheSternPrivateKeyParameters)key;\n\t\t\t\tIList primes = priv.SmallPrimesList;\n\t\t\t\t// Get Chinese Remainders of CipherText\n\t\t\t\tfor (int i = 0; i < primes.Count; i++)\n\t\t\t\t{\n\t\t\t\t\tBigInteger exp = input.ModPow(priv.PhiN.Divide((BigInteger)primes[i]), priv.Modulus);\n\t\t\t\t\tIList al = lookup[i];\n\t\t\t\t\tif (lookup[i].Count != ((BigInteger)primes[i]).IntValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (debug)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tConsole.WriteLine(\"Prime is \" + primes[i] + \", lookup table has size \" + al.Count);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new InvalidCipherTextException(\"Error in lookup Array for \"\n\t\t\t\t\t\t\t\t\t\t+ ((BigInteger)primes[i]).IntValue\n\t\t\t\t\t\t\t\t\t\t+ \": Size mismatch. Expected ArrayList with length \"\n\t\t\t\t\t\t\t\t\t\t+ ((BigInteger)primes[i]).IntValue + \" but found ArrayList of length \"\n\t\t\t\t\t\t\t\t\t\t+ lookup[i].Count);\n\t\t\t\t\t}\n\t\t\t\t\tint lookedup = al.IndexOf(exp);\n\t\t\t\t\tif (lookedup == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (debug)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tConsole.WriteLine(\"Actual prime is \" + primes[i]);\n\t\t\t\t\t\t\tConsole.WriteLine(\"Decrypted value is \" + exp);\n\t\t\t\t\t\t\tConsole.WriteLine(\"LookupList for \" + primes[i] + \" with size \" + lookup[i].Count\n\t\t\t\t\t\t\t\t\t\t\t+ \" is: \");\n\t\t\t\t\t\t\tfor (int j = 0; j < lookup[i].Count; j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tConsole.WriteLine(lookup[i][j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new InvalidCipherTextException(\"Lookup failed\");\n\t\t\t\t\t}\n\t\t\t\t\tplain.Add(BigInteger.ValueOf(lookedup));\n\t\t\t\t}\n\t\t\t\tBigInteger test = chineseRemainder(plain, primes);\n\t\t\t\t// Should not be used as an oracle, so reencrypt output to see\n\t\t\t\t// if it corresponds to input\n\t\t\t\t// this breaks probabilisic encryption, so disable it. Anyway, we do\n\t\t\t\t// use the first n primes for key generation, so it is pretty easy\n\t\t\t\t// to guess them. But as stated in the paper, this is not a security\n\t\t\t\t// breach. So we can just work with the correct sigma.\n\t\t\t\t// if (debug) {\n\t\t\t\t//      Console.WriteLine(\"Decryption is \" + test);\n\t\t\t\t// }\n\t\t\t\t// if ((key.G.ModPow(test, key.Modulus)).Equals(input)) {\n\t\t\t\t//      output = test.ToByteArray();\n\t\t\t\t// } else {\n\t\t\t\t//      if(debug){\n\t\t\t\t//          Console.WriteLine(\"Engine seems to be used as an oracle,\n\t\t\t\t//          returning null\");\n\t\t\t\t//      }\n\t\t\t\t//      output = null;\n\t\t\t\t// }\n\t\t\t\toutput = test.ToByteArray();\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\t\t/**\n\t\t* Encrypts a BigInteger aka Plaintext with the public key.\n\t\t*\n\t\t* @param plain\n\t\t*            The BigInteger to encrypt\n\t\t* @return The byte[] representation of the encrypted BigInteger (i.e.\n\t\t*         crypted.toByteArray())\n\t\t*/\n\t\tpublic byte[] Encrypt(\n\t\t\tBigInteger plain)\n\t\t{\n\t\t\t// Always return modulus size values 0-padded at the beginning\n\t\t\t// 0-padding at the beginning is correctly parsed by BigInteger :)\n//\t\t\tbyte[] output = key.Modulus.ToByteArray();\n//\t\t\tArray.Clear(output, 0, output.Length);\n\t\t\tbyte[] output = new byte[key.Modulus.BitLength / 8 + 1];\n\t\t\tbyte[] tmp = key.G.ModPow(plain, key.Modulus).ToByteArray();\n\t\t\tArray.Copy(tmp, 0, output, output.Length - tmp.Length, tmp.Length);\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"Encrypted value is:  \" + new BigInteger(output));\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\t\t/**\n\t\t* Adds the contents of two encrypted blocks mod sigma\n\t\t*\n\t\t* @param block1\n\t\t*            the first encrypted block\n\t\t* @param block2\n\t\t*            the second encrypted block\n\t\t* @return encrypt((block1 + block2) mod sigma)\n\t\t* @throws InvalidCipherTextException\n\t\t*/\n\t\tpublic byte[] AddCryptedBlocks(\n\t\t\tbyte[] block1,\n\t\t\tbyte[] block2)\n\t\t{\n\t\t\t// check for correct blocksize\n\t\t\tif (forEncryption)\n\t\t\t{\n\t\t\t\tif ((block1.Length > GetOutputBlockSize())\n\t\t\t\t\t\t|| (block2.Length > GetOutputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ((block1.Length > GetInputBlockSize())\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "length": 924, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "dc4f68ed20529e95f1739fef515a496692b2f641f11bc128"}
{"input": "", "context": "using NUnit.Framework;\nusing System;\nusing NConfiguration.Json.Parsing;\nusing System.Linq;\nnamespace NConfiguration.Json\n{\n\t[TestFixture]\n\tpublic class ParsingTests\n\t{\n\t\t[TestCase(@\"[\"\"Unclosed array\"\"\")]\n\t\t[TestCase(@\"{unquoted_key: \"\"keys must be quoted\"\"}\")]\n\t\t[TestCase(@\"[\"\"extra comma\"\",]\")]\n\t\t[TestCase(@\"[\"\"double extra comma\"\",,]\")]\n\t\t[TestCase(@\"[   , \"\"<-- missing value\"\"]\")]\n\t\t[TestCase(@\"[\"\"Comma after the close\"\"],\")]\n\t\t[TestCase(@\"[\"\"Extra close\"\"]]\")]\n\t\t[TestCase(@\"{\"\"Extra comma\"\": true,}\")]\n\t\t[TestCase(@\"{\"\"Extra value after close\"\": true} \"\"misplaced quoted value\"\"\")]\n\t\t[TestCase(@\"{\"\"Illegal expression\"\": 1 + 2}\")]\n\t\t[TestCase(@\"{\"\"Illegal invocation\"\": alert()}\")]\n\t\t[TestCase(@\"{\"\"Numbers cannot have leading zeroes\"\": 013}\")]\n\t\t[TestCase(@\"{\"\"Numbers cannot be hex\"\": 0x14}\")]\n\t\t[TestCase(@\"[\"\"Illegal backslash escape: \\x15\"\"]\")]\n\t\t[TestCase(@\"[\\naked]\")]\n\t\t[TestCase(@\"[\"\"Illegal backslash escape: \\017\"\"]\")]\n\t\t[TestCase(@\"{\"\"Missing colon\"\" null}\")]\n\t\t[TestCase(@\"{\"\"Double colon\"\":: null}\")]\n\t\t[TestCase(@\"{\"\"Comma instead of colon\"\", null}\")]\n\t\t[TestCase(@\"[\"\"Colon instead of comma\"\": false]\")]\n\t\t[TestCase(@\"[\"\"Bad value\"\", truth]\")]\n\t\t[TestCase(@\"['single quote']\")]\n\t\t[TestCase(@\"[\"\"\ttab\tcharacter\tin\tstring\t\"\"]\")]\n\t\t[TestCase(@\"[\"\"tab\\   character\\   in\\  string\\  \"\"]\")]\n\t\t[TestCase(@\"[\"\"line\nbreak\"\"]\")]\n\t\t[TestCase(@\"[\"\"line\\\nbreak\"\"]\")]\n\t\t[TestCase(@\"[0e]\")]\n\t\t[TestCase(@\"[0e+]\")]\n\t\t[TestCase(@\"[0e+-1]\")]\n\t\t[TestCase(@\"{\"\"Comma instead if closing brace\"\": true,\")]\n\t\t[TestCase(@\"[\"\"mismatch\"\"}\")]\n\t\tpublic void BadParse(string text)\n\t\t{\n\t\t\tAssert.Throws<FormatException>(() => JValue.Parse(text));\n\t\t}\n\t\tstring _text1 = @\"[\n    \"\"JSON Test Pattern pass1\"\",\n    {\"\"object with 1 member\"\":[\"\"array with 1 element\"\"]},\n    {},\n    [],\n    -42,\n    true,\n    false,\n    null,\n    {\n        \"\"integer\"\": 1234567890,\n        \"\"real\"\": -9876.543210,\n        \"\"e\"\": 0.123456789e-12,\n        \"\"E\"\": 1.234567890E+34,\n        \"\"\"\":  23456789012E66,\n        \"\"zero\"\": 0,\n        \"\"one\"\": 1,\n        \"\"space\"\": \"\" \"\",\n        \"\"quote\"\": \"\"\\\"\"\"\",\n        \"\"backslash\"\": \"\"\\\\\"\",\n        \"\"controls\"\": \"\"\\b\\f\\n\\r\\t\"\",\n        \"\"slash\"\": \"\"/ & \\/\"\",\n        \"\"alpha\"\": \"\"abcdefghijklmnopqrstuvwyz\"\",\n        \"\"ALPHA\"\": \"\"ABCDEFGHIJKLMNOPQRSTUVWYZ\"\",\n        \"\"digit\"\": \"\"0123456789\"\",\n        \"\"0123456789\"\": \"\"digit\"\",\n        \"\"special\"\": \"\"`1~!@#$%^&*()_+-={':[,]}|;.</>?\"\",\n        \"\"hex\"\": \"\"\\u0123\\u4567\\u89AB\\uCDEF\\uabcd\\uef4A\"\",\n        \"\"true\"\": true,\n        \"\"false\"\": false,\n        \"\"null\"\": null,\n        \"\"array\"\":[  ],\n        \"\"object\"\":{  },\n        \"\"address\"\": \"\"50 St. James Street\"\",\n        \"\"url\"\": \"\"http://www.JSON.org/\"\",\n        \"\"comment\"\": \"\"// /* <!-- --\"\",\n        \"\"# -- --> */\"\": \"\" \"\",\n        \"\" s p a c e d \"\" :[1,2 , 3\n,\n4 , 5        ,          6           ,7        ],\"\"compact\"\":[1,2,3,4,5,6,7],\n        \"\"jsontext\"\": \"\"{\\\"\"object with 1 member\\\"\":[\\\"\"array with 1 element\\\"\"]}\"\",\n        \"\"quotes\"\": \"\"&#34; \\u0022 %22 0x22 034 &#x22;\"\",\n        \"\"\\/\\\\\\\"\"\\uCAFE\\uBABE\\uAB98\\uFCDE\\ubcda\\uef4A\\b\\f\\n\\r\\t`1~!@#$%^&*()_+-=[]{}|;:',./<>?\"\"\n: \"\"A key can be any string\"\"\n    },\n    0.5 ,98.6\n,\n99.44\n,\n1066,\n1e1,\n0.1e1,\n1e-1,\n1e00,2e+00,2e-00\n,\"\"rosebud\"\"]\";\n\t\t[Test]\n\t\tpublic void SuccessParse1()\n\t\t{\n\t\t\tvar rootArr = (JArray)JValue.Parse(_text1);\n\t\t\tAssert.That(rootArr.Items[0].ToString(), Is.EqualTo(\"JSON Test Pattern pass1\"));\n\t\t\tAssert.That(((JArray)(((JObject)rootArr.Items[1])[\"object with 1 member\"])).Items[0].ToString(),\n\t\t\t\tIs.EqualTo(\"array with 1 element\"));\n\t\t\tAssert.That(((JObject)rootArr.Items[2]).Properties, Is.Empty);\n\t\t\tAssert.That(((JArray)rootArr.Items[3]).Items, Is.Empty);\n\t\t\tAssert.That(rootArr.Items[4].ToString(), Is.EqualTo(\"-42\"));\n\t\t\tAssert.That(rootArr.Items[5].ToString(), Is.EqualTo(\"true\"));\n\t\t\tAssert.That(rootArr.Items[6].ToString(), Is.EqualTo(\"false\"));\n\t\t\tAssert.That(rootArr.Items[7].ToString(), Is.EqualTo(\"null\"));\n\t\t\tvar o8 = (JObject)rootArr.Items[8];\n\t\t\tAssert.That(o8[\"integer\"].ToString(), Is.EqualTo(\"1234567890\"));\n\t\t\tAssert.That(o8[\"real\"].ToString(), Is.EqualTo(\"-9876.543210\"));\n\t\t\tAssert.That(o8[\"e\"].ToString(), Is.EqualTo(\"0.123456789e-12\"));\n\t\t\tAssert.That(o8[\"E\"].ToString(), Is.EqualTo(\"1.234567890E+34\"));\n\t\t\tAssert.That(o8[\"\"].ToString(), Is.EqualTo(\"23456789012E66\"));\n\t\t\tAssert.That(o8[\"zero\"].ToString(), Is.EqualTo(\"0\"));\n\t\t\tAssert.That(o8[\"one\"].ToString(), Is.EqualTo(\"1\"));\n\t\t\tAssert.That(o8[\"space\"].ToString(), Is.EqualTo(\" \"));\n\t\t\tAssert.That(o8[\"quote\"].ToString(), Is.EqualTo(\"\\\"\"));\n\t\t\tAssert.That(o8[\"backslash\"].ToString(), Is.EqualTo(\"\\\\\"));\n\t\t\tAssert.That(o8[\"controls\"].ToString(), Is.EqualTo(\"\\b\\f\\n\\r\\t\"));\n\t\t\tAssert.That(o8[\"slash\"].ToString(), Is.EqualTo(\"/ & /\"));\n\t\t\tAssert.That(o8[\"alpha\"].ToString(), Is.EqualTo(\"abcdefghijklmnopqrstuvwyz\"));\n\t\t\tAssert.That(o8[\"ALPHA\"].ToString(), Is.EqualTo(\"ABCDEFGHIJKLMNOPQRSTUVWYZ\"));\n\t\t\tAssert.That(o8[\"digit\"].ToString(), Is.EqualTo(\"0123456789\"));\n\t\t\tAssert.That(o8[\"0123456789\"].ToString(), Is.EqualTo(\"digit\"));\n\t\t\tAssert.That(o8[\"special\"].ToString(), Is.EqualTo(\"`1~!@#$%^&*()_+-={':[,]}|;.</>?\"));\n\t\t\tAssert.That(o8[\"hex\"].ToString(), Is.EqualTo(\"\\u0123\\u4567\\u89AB\\uCDEF\\uabcd\\uef4A\"));\n\t\t\tAssert.That(o8[\"true\"].ToString(), Is.EqualTo(\"true\"));\n\t\t\tAssert.That(o8[\"false\"].ToString(), Is.EqualTo(\"false\"));\n\t\t\tAssert.That(o8[\"null\"].ToString(), Is.EqualTo(\"null\"));\n\t\t\tAssert.That(o8[\"array\"], Is.InstanceOf<JArray>());\n\t\t\tAssert.That(o8[\"object\"], Is.InstanceOf<JObject>());\n\t\t\tAssert.That(o8[\"address\"].ToString(), Is.EqualTo(\"50 St. James Street\"));\n\t\t\tAssert.That(o8[\"url\"].ToString(), Is.EqualTo(\"http://www.JSON.org/\"));\n\t\t\tAssert.That(o8[\"comment\"].ToString(), Is.EqualTo(\"// /* <!-- --\"));\n\t\t\tAssert.That(o8[\"# -- --> */\"].ToString(), Is.EqualTo(\" \"));\n\t\t\tAssert.That(((JArray)o8[\" s p a c e d \"]).Items.Select(i => i.ToString()), Is.EquivalentTo(Enumerable.Range(1, 7).Select(i => i.ToString())));\n\t\t\tAssert.That(((JArray)o8[\"compact\"]).Items.Select(i => i.ToString()), Is.EquivalentTo(Enumerable.Range(1, 7).Select(i => i.ToString())));\n\t\t\tAssert.That(o8[\"jsontext\"].ToString(), Is.EqualTo(@\"{\"\"object with 1 member\"\":[\"\"array with 1 element\"\"]}\"));\n\t\t\tAssert.That(o8[\"quotes\"].ToString(), Is.EqualTo(\"&#34; \\u0022 %22 0x22 034 &#x22;\"));\n\t\t\tAssert.That(o8[\"/\\\\\\\"\\uCAFE\\uBABE\\uAB98\\uFCDE\\ubcda\\uef4A\\b\\f\\n\\r\\t`1~!@#$%^&*()_+-=[]{}|;:',./<>?\"].ToString(), Is.EqualTo(\"A key can be any string\"));\n\t\t\tAssert.That(rootArr.Items[9].ToString(), Is.EqualTo(\"0.5\"));\n\t\t\tAssert.That(rootArr.Items[10].ToString(), Is.EqualTo(\"98.6\"));\n\t\t\tAssert.That(rootArr.Items[11].ToString(), Is.EqualTo(\"99.44\"));\n\t\t\tAssert.That(rootArr.Items[12].ToString(), Is.EqualTo(\"1066\"));\n\t\t\tAssert.That(rootArr.Items[13].ToString(), Is.EqualTo(\"1e1\"));\n\t\t\tAssert.That(rootArr.Items[14].ToString(), Is.EqualTo(\"0.1e1\"));\n\t\t\tAssert.That(rootArr.Items[15].ToString(), Is.EqualTo(\"1e-1\"));\n\t\t\tAssert.That(rootArr.Items[16].ToString(), Is.EqualTo(\"1e00\"));\n\t\t\tAssert.That(rootArr.Items[17].ToString(), Is.EqualTo(\"2e+00\"));\n\t\t\tAssert.That(rootArr.Items[18].ToString(), Is.EqualTo(\"2e-00\"));\n\t\t\tAssert.That(rootArr.Items[19].ToString(), Is.EqualTo(\"rosebud\"));\n\t\t}\n\t\tstring _text2 = @\"[[[[[[[[[[[[[[[[[[[\"\"Too deep\"\"]]]]]]]]]]]]]]]]]]]\";\n\t\t[Test]\n\t\tpublic void SuccessParse2()\n\t\t{\n\t\t\tvar rootVal = JValue.Parse(_text2);\n\t\t\tAssert.That(rootVal.Type, Is.EqualTo(TokenType.Array));\n\t\t\t\n\t\t\tvar arr = (JArray)rootVal;\n\t\t\tfor(int i=0;i<18; i++)\n\t\t\t{\n\t\t\t\tAssert.That(arr.Items.Count, Is.EqualTo(1));\n\t\t\t\tarr = (JArray)arr.Items[0];\n\t\t\t}\n\t\t\tAssert.That(arr.Items.Count, Is.EqualTo(1));\n\t\t\tAssert.That(arr.Items[0].Type, Is.EqualTo(TokenType.String));\n\t\t\tAssert.That(((JString)arr.Items[0]).Value, Is.EqualTo(\"Too deep\"));\n\t\t}\n\t\tstring _text3 = @\"{\n    \"\"JSON Test Pattern pass3\"\": {\n        \"\"The outermost value\"\": \"\"must be an object or array.\"\",\n        \"\"In this test\"\": \"\"It is an object.\"\"\n    }\n}\";\n\t\t[Test]\n\t\tpublic void SuccessParse3()\n\t\t{\n\t\t\tvar rootVal = JValue.Parse(_text3);\n\t\t\tAssert.That(rootVal.Type, Is.EqualTo(TokenType.Object));\n\t\t\tvar obj = (JObject)rootVal;\n\t\t\tAssert.That(obj.Properties[0].Key, Is.EqualTo(\"JSON Test Pattern pass3\"));\n\t\t\tAssert.That(obj.Properties[0].Value.Type, Is.EqualTo(TokenType.Object));\n", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "length": 537, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "05a84c831d09b24c15be892934f316b53ccabf77bfe3253f"}
{"input": "", "context": "/*\n * WANDORA Knowledge Extraction, Management, and Publishing Application\n * http://wandora.org\n *\n * Copyright (C) 2004-2016 Wandora Team\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any later\n * version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n * details.\n *\n * You should have received a copy of the GNU General Public License along with\n * this program. If not, see <http://www.gnu.org/licenses/>.\n *\n *\n * CylinderGenerator.java\n *\n * Created on 2012-05-11\n *\n */\npackage org.wandora.application.tools.generators;\nimport org.wandora.application.tools.*;\nimport org.wandora.topicmap.*;\nimport org.wandora.topicmap.layered.*;\nimport org.wandora.application.contexts.*;\nimport org.wandora.application.*;\nimport java.io.*;\nimport java.util.*;\nimport org.wandora.application.gui.WandoraOptionPane;\nimport static org.wandora.utils.Tuples.T2;\nimport org.wandora.utils.swing.GuiTools;\n/**\n *\n * http://en.wikipedia.org/wiki/Tiling_by_regular_polygons\n *\n * @author elehtonen\n */\npublic class CylinderGenerator extends AbstractGenerator implements WandoraTool {\n    public static String globalSiPattern = \"\";\n    public static String globalBasenamePattern = \"\";\n    public static boolean connectWithWandoraClass = true;\n    \n    \n    /**\n     * Creates a new instance of Cylinder Generator\n     */\n    public CylinderGenerator() {\n    }\n    @Override\n    public String getName() {\n        return \"Cylinder graph generator\";\n    }\n    @Override\n    public String getDescription() {\n        return \"Generates cylinder graph topic maps\";\n    }\n    @Override\n    public void execute(Wandora wandora, Context context) throws TopicMapException {\n        TopicMap topicmap = solveContextTopicMap(wandora, context);\n        GenericOptionsDialog god = new GenericOptionsDialog(wandora,\n            \"Cylinder graph generator\",\n            \"Cylinder graph generator creates simple graphs that resemble cylinders created with regular polygons. \"+\n            \"Created cylinders consist of topics and associations. Topics can be thought as cylinder vertices and \"+\n            \"associations as cylinder edges. Select the type and size of created tiling below. Optionally you \"+\n            \"can set the name and subject identifier patterns for vertex topics as well as the assocation type and \"+\n            \"roles of cylinder graph edges. Connecting topics with Wandora class creates some additional topics and \"+\n            \"associations that link the cylinder graph with Wandora class topic.\",\n            true, new String[][]{\n                new String[]{\"Create a cylinder with square tiling\", \"boolean\"},\n                new String[]{\"Create a cylinder with triangular tiling\", \"boolean\"},\n                new String[]{\"Create a cylinder with hexagonal tiling\", \"boolean\"},\n                new String[]{\"Width of cylinder\", \"string\"},\n                new String[]{\"Height of cylinder\", \"string\"},\n                new String[]{\"Toroid\", \"boolean\"},\n                new String[]{\"---3\",\"separator\"},\n                new String[]{\"Subject identifier pattern\",\"string\",globalSiPattern,\"Subject identifier patterns for the created node topics. Part __n__ in patterns is replaced with vertex identifier.\"},\n                new String[]{\"Basename pattern\",\"string\",globalBasenamePattern,\"Basename patterns for the created node topics. Part __n__ in patterns is replaced with vertex identifier.\"},\n                new String[]{\"Connect topics with Wandora class\",\"boolean\", connectWithWandoraClass ? \"true\" : \"false\",\"Create additional topics and associations that connect created topics with the Wandora class.\" },\n                new String[]{\"Association type topic\",\"topic\",null,\"Optional association type for graph edges.\"},\n                new String[]{\"First role topic\",\"topic\",null,\"Optional role topic for graph edges.\"},\n                new String[]{\"Second role topic\",\"topic\",null,\"Optional role topic for graph edges.\"},\n            }, \n            wandora);\n        \n        god.setSize(700, 620);\n        GuiTools.centerWindow(god,wandora);\n        god.setVisible(true);\n        if (god.wasCancelled()) {\n            return;\n        }\n        Map<String, String> values = god.getValues();\n        try {\n            globalSiPattern = values.get(\"Subject identifier pattern\");\n            if(globalSiPattern != null && globalSiPattern.trim().length() > 0) {\n                if(!globalSiPattern.contains(\"__n__\")) {\n                    int a = WandoraOptionPane.showConfirmDialog(Wandora.getWandora(), \"Subject identifier pattern doesn't contain part for topic counter '__n__'. This causes all generated topics to merge. Do you want to use it?\", \"Missing topic counter part\", WandoraOptionPane.WARNING_MESSAGE);\n                    if(a != WandoraOptionPane.YES_OPTION) globalSiPattern = null;\n                }\n            }\n            globalBasenamePattern = values.get(\"Basename pattern\");\n            if(globalBasenamePattern != null && globalBasenamePattern.trim().length() > 0) {\n                if(!globalBasenamePattern.contains(\"__n__\")) {\n                    int a = WandoraOptionPane.showConfirmDialog(Wandora.getWandora(), \"Basename pattern doesn't contain part for topic counter '__n__'. This causes all generated topics to merge. Do you want to use it?\", \"Missing topic counter part\", WandoraOptionPane.WARNING_MESSAGE);\n                    if(a != WandoraOptionPane.YES_OPTION) globalBasenamePattern = null;\n                }\n            }\n            connectWithWandoraClass = \"true\".equalsIgnoreCase(values.get(\"Connect topics with Wandora class\"));\n        }\n        catch(Exception e) {\n            log(e);\n        }\n        \n        \n        ArrayList<Cylinder> cylinders = new ArrayList<>();\n        int progress = 0;\n        int width = 0;\n        int height = 0;\n        boolean toggleToroid = false;\n        try {\n            toggleToroid = \"true\".equals(values.get(\"Toroid\"));\n            width = Integer.parseInt(values.get(\"Width of cylinder\"));\n            height = Integer.parseInt(values.get(\"Height of cylinder\"));\n            if (\"true\".equals(values.get(\"Create a cylinder with square tiling\"))) {\n                cylinders.add(new SquareCylinder(width, height, toggleToroid));\n            }\n            if (\"true\".equals(values.get(\"Create a cylinder with triangular tiling\"))) {\n                cylinders.add(new TriangularCylinder(width, height, toggleToroid));\n            }\n            if (\"true\".equals(values.get(\"Create a cylinder with hexagonal tiling\"))) {\n                cylinders.add(new HexagonalCylinder(width, height, toggleToroid));\n            }\n        } \n        catch (Exception e) {\n            singleLog(e);\n            return;\n        }\n        \n        setDefaultLogger();\n        setLogTitle(\"Cylinder graph generator\");\n        for (Cylinder cylinder : cylinders) {\n            Collection<T2> edges = cylinder.getEdges();\n            log(\"Creating \" + cylinder.getName() + \" graph\");\n            Topic atype = cylinder.getAssociationTypeTopic(topicmap,values);\n            Topic role1 = cylinder.getRole1Topic(topicmap,values);\n            Topic role2 = cylinder.getRole2Topic(topicmap,values);\n            \n            Association a = null;\n            Topic node1 = null;\n            Topic node2 = null;\n            if (edges.size() > 0) {\n                setProgressMax(edges.size());\n                for (T2<String,String> edge : edges) {\n                    if (edge != null) {\n                        node1 = cylinder.getVertexTopic(edge.e1, topicmap, values);\n                        node2 = cylinder.getVertexTopic(edge.e2, topicmap, values);\n                        if (node1 != null && node2 != null) {\n                            a = topicmap.createAssociation(atype);\n                            a.addPlayer(node1, role1);\n                            a.addPlayer(node2, role2);\n                        }\n                        setProgress(progress++);\n                    }\n                }\n                \n                if(connectWithWandoraClass) {\n                    log(\"You'll find created topics under the '\"+cylinder.getName()+\" graph' topic.\");\n                }\n                else {\n                    String searchWord = cylinder.getName();\n                    if(globalBasenamePattern != null && globalBasenamePattern.trim().length() > 0) {\n                        searchWord = globalBasenamePattern.replaceAll(\"__n__\", \"\");\n                        searchWord = searchWord.trim();\n                    }\n                    log(\"You'll find created topics by searching with a '\"+searchWord+\"'.\");\n                }\n            }\n            else {\n                log(\"Number of cylinder edges is zero. Cylinder has no vertices neithers.\");\n            }\n        }\n        if(cylinders.isEmpty()) {\n            log(\"No cylinder selected.\");\n        }\n        log(\"Ready.\");\n        setState(WAIT);\n    }\n    \n    // -------------------------------------------------------------------------\n    // ----------------------------------------------------------- CYLINDERS ---\n    // -------------------------------------------------------------------------\n    \n    \n    public interface Cylinder {\n        public String getSIPrefix();\n        public String getName();\n        public int getSize();\n        public Collection<T2> getEdges();\n        public Collection<String> getVertices();\n        public Topic getVertexTopic(String vertex, TopicMap topicmap, Map<String,String> optionsValues);\n        public Topic getAssociationTypeTopic(TopicMap topicmap, Map<String,String> optionsValues);\n        public Topic getRole1Topic(TopicMap topicmap, Map<String,String> optionsValues);\n        public Topic getRole2Topic(TopicMap topicmap, Map<String,String> optionsValues);\n    }\n    \n    \n    public abstract class AbstractCylinder implements Cylinder {\n        @Override\n        public Topic getVertexTopic(String vertex, TopicMap topicmap, Map<String,String> optionsValues) {\n            String newBasename = getName()+\" vertex \"+vertex;\n            if(globalBasenamePattern != null && globalBasenamePattern.trim().length() > 0) {\n                newBasename = globalBasenamePattern.replaceAll(\"__n__\", vertex);\n            }\n            \n            String newSubjectIdentifier = getSIPrefix()+\"vertex-\"+vertex;\n            if(globalSiPattern != null && globalSiPattern.trim().length() > 0) {\n                newSubjectIdentifier = globalSiPattern.replaceAll(\"__n__\", vertex);\n            }\n      \n            Topic t = getOrCreateTopic(topicmap, newSubjectIdentifier, newBasename);\n            if(connectWithWandoraClass) {\n                try {\n                    Topic graphTopic = getOrCreateTopic(topicmap, getSIPrefix(), getName()+\" graph\");\n                    Topic wandoraClass = getOrCreateTopic(topicmap, TMBox.WANDORACLASS_SI);\n                    makeSuperclassSubclass(topicmap, wandoraClass, graphTopic);\n                    t.addType(graphTopic);\n                }\n                catch(Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            return t;\n        }\n        \n        @Override\n        public Topic getAssociationTypeTopic(TopicMap topicmap, Map<String,String> optionsValues) {\n            String atypeStr = null;\n            Topic atype = null;\n            if(optionsValues != null) {\n                atypeStr = optionsValues.get(\"Association type topic\");\n            }\n            if(atypeStr != null) {\n                try {\n                    atype = topicmap.getTopic(atypeStr);\n                }\n                catch(Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if(atype == null) {\n                atype = getOrCreateTopic(topicmap, getSIPrefix()+\"edge\", getName()+\" edge\");\n            }\n            return atype;\n        }\n        \n        \n        @Override\n        public Topic getRole1Topic(TopicMap topicmap, Map<String,String> optionsValues) {\n            String roleStr = null;\n            Topic role = null;\n            if(optionsValues != null) {\n                roleStr = optionsValues.get(\"First role topic\");\n            }\n            if(roleStr != null) {\n                try {\n                    role = topicmap.getTopic(roleStr);\n                }\n                catch(Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if(role == null) {\n                role = getOrCreateTopic(topicmap, getSIPrefix()+\"role-1\", \"role 1\");\n            }\n            return role;\n        }\n        \n        @Override\n        public Topic getRole2Topic(TopicMap topicmap, Map<String,String> optionsValues) {\n            String roleStr = null;\n            Topic role = null;\n            if(optionsValues != null) {\n                roleStr = optionsValues.get(\"Second role topic\");\n            }\n            if(roleStr != null) {\n                try {\n                    role = topicmap.getTopic(roleStr);\n                }\n                catch(Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            if(role == null) {\n                role = getOrCreateTopic(topicmap, getSIPrefix()+\"role-2\", \"role 2\");\n            }\n            return role;\n        }\n    }\n    \n    // -------------------------------------------------------------------------\n    \n    \n    public class SquareCylinder extends AbstractCylinder implements Cylinder {\n        private int size = 0;\n        private int width = 0;\n        private int height = 0;\n        private boolean isToroid = false;\n        public SquareCylinder(int w, int h, boolean toroid) {\n            this.width = w;\n            this.height = h;\n            this.size = w * h;\n            this.isToroid = toroid;\n        }\n        @Override\n        public String getSIPrefix() {\n            return \"http://wandora.org/si/cylinder/square/\";\n        }\n        @Override\n        public String getName() {\n            return \"Square-cylinder\";\n        }\n        @Override\n        public int getSize() {\n            return size;\n        }\n        @Override\n        public Collection<T2> getEdges() {\n            ArrayList<T2> edges = new ArrayList<>();\n            for (int h = 0; h < height; h++) {\n", "answers": ["                for (int w = 0; w < width; w++) {"], "length": 1282, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "74db7236c3c75feb5089de045fc0919ca9061c171999a049"}
{"input": "", "context": "import pathlib\nimport warnings\nimport numpy as np\nimport dclab\nfrom dclab import isoelastics as iso\nfrom dclab.features import emodulus\nfrom dclab.features.emodulus import pxcorr\nfrom helper_methods import example_data_dict\ndef get_isofile(name=\"example_isoelastics.txt\"):\n    thisdir = pathlib.Path(__file__).parent\n    return thisdir / \"data\" / name\ndef test_bad_isoelastic():\n    i1 = iso.Isoelastics([get_isofile()])\n    try:\n        i1.get(col1=\"deform\",\n               col2=\"area_ratio\",\n               lut_identifier=\"test-LE-2D-ana-18\",\n               channel_width=20,\n               flow_rate=0.04,\n               viscosity=15,\n               add_px_err=False,\n               px_um=None)\n    except KeyError:\n        pass\n    else:\n        assert False, \"features should not work\"\ndef test_bad_isoelastic_2():\n    i1 = iso.Isoelastics([get_isofile()])\n    try:\n        i1.get(col1=\"deform\",\n               col2=\"area_um\",\n               lut_identifier=\"LE-2D-FEM-19\",\n               channel_width=20,\n               flow_rate=0.04,\n               viscosity=15,\n               add_px_err=False,\n               px_um=None)\n    except KeyError:\n        pass\n    else:\n        assert False, \"only analytical should not work with this set\"\ndef test_bad_isoelastic_3():\n    i1 = iso.Isoelastics([get_isofile()])\n    try:\n        i1.get(col1=\"deform\",\n               col2=\"bad_feature\",\n               lut_identifier=\"LE-2D-FEM-19\",\n               channel_width=20,\n               flow_rate=0.04,\n               viscosity=15,\n               add_px_err=False,\n               px_um=None)\n    except ValueError:\n        pass\n    else:\n        assert False, \"bad feature does not work\"\ndef test_bad_isoelastic_4():\n    i1 = iso.Isoelastics([get_isofile()])\n    try:\n        i1.get(col1=\"deform\",\n               col2=\"area_um\",\n               lut_identifier=\"LE-2D-FEM-99-nonexistent\",\n               channel_width=20,\n               flow_rate=0.04,\n               viscosity=15,\n               add_px_err=False,\n               px_um=None)\n    except KeyError:\n        pass\n    else:\n        assert False, \"bad lut_identifier does not work\"\ndef test_circ():\n    i1 = iso.Isoelastics([get_isofile()])\n    iso1 = i1._data[\"test-LE-2D-ana-18\"][\"area_um\"][\"deform\"][\"isoelastics\"]\n    iso2 = i1._data[\"test-LE-2D-ana-18\"][\"area_um\"][\"circ\"][\"isoelastics\"]\n    assert np.allclose(iso1[0][:, 1], 1 - iso2[0][:, 1])\ndef test_circ_get():\n    i1 = iso.Isoelastics([get_isofile()])\n    iso_circ = i1.get(col1=\"area_um\",\n                      col2=\"circ\",\n                      lut_identifier=\"test-LE-2D-ana-18\",\n                      channel_width=15,\n                      flow_rate=0.04,\n                      viscosity=15)\n    iso_deform = i1.get(col1=\"area_um\",\n                        col2=\"deform\",\n                        lut_identifier=\"test-LE-2D-ana-18\",\n                        channel_width=15,\n                        flow_rate=0.04,\n                        viscosity=15)\n    for ii in range(len(iso_circ)):\n        isc = iso_circ[ii]\n        isd = iso_deform[ii]\n        assert np.allclose(isc[:, 0], isd[:, 0])\n        assert np.allclose(isc[:, 1], 1 - isd[:, 1])\ndef test_convert():\n    i1 = iso.Isoelastics([get_isofile()])\n    isoel = i1._data[\"test-LE-2D-ana-18\"][\"area_um\"][\"deform\"][\"isoelastics\"]\n    isoel15 = i1.convert(isoel=isoel,\n                         col1=\"area_um\",\n                         col2=\"deform\",\n                         channel_width_in=20,\n                         channel_width_out=15,\n                         flow_rate_in=0.04,\n                         flow_rate_out=0.04,\n                         viscosity_in=15,\n                         viscosity_out=15)\n    # These values were taken from previous isoelasticity files\n    # used in Shape-Out.\n    assert np.allclose(isoel15[0][:, 2], 7.11111111e-01)\n    assert np.allclose(isoel15[1][:, 2], 9.48148148e-01)\n    # area_um\n    assert np.allclose(isoel15[0][1, 0], 2.245995843750000276e+00)\n    assert np.allclose(isoel15[0][9, 0], 9.954733499999999680e+00)\n    assert np.allclose(isoel15[1][1, 0], 2.247747243750000123e+00)\n    # deform\n    assert np.allclose(isoel15[0][1, 1], 5.164055600000000065e-03)\n    assert np.allclose(isoel15[0][9, 1], 2.311524599999999902e-02)\n    assert np.allclose(isoel15[1][1, 1], 2.904264599999999922e-03)\ndef test_convert_error():\n    i1 = iso.Isoelastics([get_isofile()])\n    isoel = i1.get(col1=\"area_um\",\n                   col2=\"deform\",\n                   lut_identifier=\"test-LE-2D-ana-18\",\n                   channel_width=15)\n    kwargs = dict(channel_width_in=15,\n                  channel_width_out=20,\n                  flow_rate_in=.12,\n                  flow_rate_out=.08,\n                  viscosity_in=15,\n                  viscosity_out=15)\n    try:\n        i1.convert(isoel=isoel,\n                   col1=\"deform\",\n                   col2=\"area_ratio\",\n                   **kwargs)\n    except KeyError:\n        pass\n    except BaseException:\n        raise\n    else:\n        assert False, \"undefined column volume\"\ndef test_data_slicing():\n    i1 = iso.Isoelastics([get_isofile()])\n    iso1 = i1._data[\"test-LE-2D-ana-18\"][\"area_um\"][\"deform\"][\"isoelastics\"]\n    iso2 = i1._data[\"test-LE-2D-ana-18\"][\"deform\"][\"area_um\"][\"isoelastics\"]\n    for ii in range(len(iso1)):\n        assert np.all(iso1[ii][:, 2] == iso2[ii][:, 2])\n        assert np.all(iso1[ii][:, 0] == iso2[ii][:, 1])\n        assert np.all(iso1[ii][:, 1] == iso2[ii][:, 0])\ndef test_data_structure():\n    i1 = iso.Isoelastics([get_isofile()])\n    # basic import\n    assert \"test-LE-2D-ana-18\" in i1._data\n    assert \"deform\" in i1._data[\"test-LE-2D-ana-18\"]\n    assert \"area_um\" in i1._data[\"test-LE-2D-ana-18\"][\"deform\"]\n    assert \"area_um\" in i1._data[\"test-LE-2D-ana-18\"]\n    assert \"deform\" in i1._data[\"test-LE-2D-ana-18\"][\"area_um\"]\n    # circularity\n    assert \"circ\" in i1._data[\"test-LE-2D-ana-18\"]\n    assert \"area_um\" in i1._data[\"test-LE-2D-ana-18\"][\"circ\"]\n    assert \"area_um\" in i1._data[\"test-LE-2D-ana-18\"]\n    assert \"circ\" in i1._data[\"test-LE-2D-ana-18\"][\"area_um\"]\n    # metadata\n    meta1 = i1._data[\"test-LE-2D-ana-18\"][\"area_um\"][\"deform\"][\"meta\"]\n    meta2 = i1._data[\"test-LE-2D-ana-18\"][\"deform\"][\"area_um\"][\"meta\"]\n    assert meta1 == meta2\ndef test_get():\n    i1 = iso.Isoelastics([get_isofile()])\n    data = i1.get(col1=\"area_um\",\n                  col2=\"deform\",\n                  channel_width=20,\n                  flow_rate=0.04,\n                  viscosity=15,\n                  lut_identifier=\"test-LE-2D-ana-18\")\n    refd = i1._data[\"test-LE-2D-ana-18\"][\"area_um\"][\"deform\"][\"isoelastics\"]\n    for a, b in zip(data, refd):\n        assert np.all(a == b)\ndef test_pixel_err():\n    i1 = iso.Isoelastics([get_isofile()])\n    isoel = i1._data[\"test-LE-2D-ana-18\"][\"area_um\"][\"deform\"][\"isoelastics\"]\n    px_um = .10\n    # add the error\n    isoel_err = i1.add_px_err(isoel=isoel,\n                              col1=\"area_um\",\n                              col2=\"deform\",\n                              px_um=px_um,\n                              inplace=False)\n    # remove the error manually\n    isoel_corr = []\n    for iss in isoel_err:\n        iss = iss.copy()\n        iss[:, 1] -= pxcorr.corr_deform_with_area_um(area_um=iss[:, 0],\n                                                     px_um=px_um)\n        isoel_corr.append(iss)\n    for ii in range(len(isoel)):\n        assert not np.allclose(isoel[ii], isoel_err[ii])\n        assert np.allclose(isoel[ii], isoel_corr[ii])\n    try:\n        i1.add_px_err(isoel=isoel,\n                      col1=\"deform\",\n                      col2=\"deform\",\n                      px_um=px_um,\n                      inplace=False)\n    except ValueError:\n        pass\n    else:\n        assert False, \"identical columns\"\n    try:\n        i1.add_px_err(isoel=isoel,\n                      col1=\"deform\",\n                      col2=\"circ\",\n                      px_um=px_um,\n                      inplace=False)\n    except KeyError:\n        pass\n    except BaseException:\n        raise\n    else:\n        assert False, \"area_um required\"\ndef test_volume_basic():\n    \"\"\"Reproduce exact data from simulation result\"\"\"\n    i1 = iso.get_default()\n    data = i1.get(col1=\"volume\",\n                  col2=\"deform\",\n                  channel_width=20,\n                  flow_rate=0.04,\n                  viscosity=15,\n                  lut_identifier=\"LE-2D-FEM-19\",\n                  add_px_err=False,\n                  px_um=None)\n    assert np.allclose(data[0][0], [1.61819e+02, 4.18005e-02, 1.08000e+00])\n    assert np.allclose(data[0][-1], [5.90127e+02, 1.47449e-01, 1.08000e+00])\n    assert np.allclose(data[1][0], [1.61819e+02, 2.52114e-02, 1.36000e+00])\n    assert np.allclose(data[-1][-1], [3.16212e+03, 1.26408e-02, 1.08400e+01])\ndef test_volume_pxcorr():\n    \"\"\"Deformation is pixelation-corrected using volume\"\"\"\n    i1 = iso.get_default()\n    data = i1.get(col1=\"volume\",\n                  col2=\"deform\",\n                  channel_width=20,\n                  flow_rate=None,\n                  viscosity=None,\n                  lut_identifier=\"LE-2D-FEM-19\",\n                  add_px_err=True,\n                  px_um=0.34)\n    ddelt = pxcorr.corr_deform_with_volume(1.61819e+02, px_um=0.34)\n    assert np.allclose(data[0][0], [1.61819e+02,\n                                    4.18005e-02 + ddelt,\n                                    1.08000e+00])\ndef test_volume_scale():\n    \"\"\"Simple volume scale\"\"\"\n    i1 = iso.get_default()\n    data = i1.get(col1=\"volume\",\n                  col2=\"deform\",\n                  channel_width=25,\n                  flow_rate=0.04,\n                  viscosity=15,\n                  lut_identifier=\"LE-2D-FEM-19\",\n                  add_px_err=False,\n                  px_um=None)\n    assert np.allclose(data[0][0], [1.61819e+02 * (25 / 20)**3,\n                                    4.18005e-02,\n                                    1.08000e+00 * (20 / 25)**3])\ndef test_volume_scale_2():\n    \"\"\"The default values are used if set to None\"\"\"\n    i1 = iso.get_default()\n    data = i1.get(col1=\"volume\",\n                  col2=\"deform\",\n                  channel_width=25,\n                  flow_rate=None,\n                  viscosity=None,\n                  lut_identifier=\"LE-2D-FEM-19\",\n                  add_px_err=False,\n                  px_um=None)\n    assert np.allclose(data[0][0], [1.61819e+02 * (25 / 20)**3,\n                                    4.18005e-02,\n                                    1.08000e+00 * (20 / 25)**3])\ndef test_volume_switch():\n    \"\"\"Switch the columns\"\"\"\n    i1 = iso.get_default()\n    data = i1.get(col1=\"deform\",\n                  col2=\"volume\",\n                  channel_width=20,\n                  flow_rate=0.04,\n                  viscosity=15,\n                  lut_identifier=\"LE-2D-FEM-19\",\n                  add_px_err=False,\n                  px_um=None)\n    assert np.allclose(data[0][0], [4.18005e-02, 1.61819e+02, 1.08000e+00])\n    assert np.allclose(data[-1][-1], [1.26408e-02, 3.16212e+03, 1.08400e+01])\ndef test_volume_switch_scale():\n    \"\"\"Switch the columns and change the scale\"\"\"\n    i1 = iso.get_default()\n    data = i1.get(col1=\"deform\",\n                  col2=\"volume\",\n                  channel_width=25,\n                  flow_rate=0.04,\n                  viscosity=15,\n                  lut_identifier=\"LE-2D-FEM-19\",\n                  add_px_err=False,\n                  px_um=None)\n    assert np.allclose(data[0][0], [4.18005e-02,\n                                    1.61819e+02 * (25 / 20)**3,\n                                    1.08000e+00 * (20 / 25)**3])\n    assert np.allclose(data[-1][-1], [1.26408e-02,\n                                      3.16212e+03 * (25 / 20)**3,\n                                      1.08400e+01 * (20 / 25)**3])\ndef test_with_rtdc():\n    keys = [\"area_um\", \"deform\"]\n    ddict = example_data_dict(size=8472, keys=keys)\n    # legacy\n    ds = dclab.new_dataset(ddict)\n    ds.config[\"setup\"][\"flow rate\"] = 0.16\n    ds.config[\"setup\"][\"channel width\"] = 30\n    ds.config[\"setup\"][\"temperature\"] = 23.0\n    ds.config[\"setup\"][\"medium\"] = \"CellCarrier\"\n    ds.config[\"imaging\"][\"pixel size\"] = .34\n", "answers": ["    i1 = iso.get_default()"], "length": 761, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "815f132424cf8772d1a660e02d231ddd3309d07fe636e616"}
{"input": "", "context": "/*\nCopyright (C) SYSTAP, LLC DBA Blazegraph 2006-2016.  All rights reserved.\nContact:\n     SYSTAP, LLC DBA Blazegraph\n     2501 Calvert ST NW #106\n     Washington, DC 20008\n     licenses@blazegraph.com\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; version 2 of the License.\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n/*\n * Created on Nov 14, 2008\n */\npackage com.bigdata.rdf.store;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Properties;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.FutureTask;\nimport org.apache.log4j.Logger;\nimport org.openrdf.model.Statement;\nimport com.bigdata.journal.Journal;\nimport com.bigdata.journal.TimestampUtility;\nimport com.bigdata.rdf.axioms.Axioms;\nimport com.bigdata.rdf.axioms.NoAxioms;\nimport com.bigdata.rdf.internal.IV;\nimport com.bigdata.rdf.model.BigdataStatement;\nimport com.bigdata.rdf.rio.AbstractStatementBuffer.StatementBuffer2;\nimport com.bigdata.rdf.rio.StatementBuffer;\nimport com.bigdata.rdf.rules.BackchainAccessPath;\nimport com.bigdata.rdf.spo.ISPO;\nimport com.bigdata.rdf.spo.SPO;\nimport com.bigdata.rdf.store.AbstractTripleStore.Options;\nimport com.bigdata.relation.accesspath.BlockingBuffer;\nimport com.bigdata.relation.accesspath.IAccessPath;\nimport com.bigdata.striterator.IChunkedOrderedIterator;\nimport cutthecrap.utils.striterators.ICloseableIterator;\n/**\n * Utility class for comparing graphs for equality, bulk export, etc.\n * \n * @author <a href=\"mailto:thompsonbry@users.sourceforge.net\">Bryan Thompson</a>\n * @version $Id$\n */\npublic class TripleStoreUtility {\n    \n    protected static final Logger log = Logger.getLogger(TripleStoreUtility.class);\n    /**\n     * Compares two RDF graphs for equality (same statements).\n     * <p>\n     * Note: This does NOT handle bnodes, which much be treated as variables for\n     * RDF semantics.\n     * <p>\n     * Note: Comparison is performed in terms of the externalized RDF\n     * {@link Statement}s rather than {@link SPO}s since different graphs use\n     * different lexicons.\n     * <p>\n     * Note: If the graphs differ in which entailments they are storing in their\n     * data and which entailments are backchained then you MUST make them\n     * consistent in this regard. You can do this by exporting one or both using\n     * {@link #bulkExport(AbstractTripleStore)}, which will cause all\n     * entailments to be materialized in the returned {@link TempTripleStore}.\n     * \n     * @param expected\n     *            One graph.\n     * \n     * @param actual\n     *            Another graph <strong>with a consistent policy for forward and\n     *            backchained entailments</strong>.\n     * \n     * @return true if all statements in the expected graph are in the actual\n     *         graph and if the actual graph does not contain any statements\n     *         that are not also in the expected graph.\n     */\n    public static boolean modelsEqual(AbstractTripleStore expected,\n            AbstractTripleStore actual) throws Exception {\n        //        int actualSize = 0;\n        int notExpecting = 0;\n        int expecting = 0;\n        boolean sameStatements1 = true;\n        {\n            final ICloseableIterator<BigdataStatement> it = notFoundInTarget(actual, expected);\n            try {\n                while (it.hasNext()) {\n                    final BigdataStatement stmt = it.next();\n                    sameStatements1 = false;\n                    log(\"Not expecting: \" + stmt);\n                    notExpecting++;\n                    //                    actualSize++; // count #of statements actually visited.\n                }\n            } finally {\n                it.close();\n            }\n            log(\"all the statements in actual in expected? \" + sameStatements1);\n        }\n        //        int expectedSize = 0;\n        boolean sameStatements2 = true;\n        {\n            final ICloseableIterator<BigdataStatement> it = notFoundInTarget(expected, actual);\n            try {\n                while (it.hasNext()) {\n                    final BigdataStatement stmt = it.next();\n                    sameStatements2 = false;\n                    log(\"    Expecting: \" + stmt);\n                    expecting++;\n                    //                    expectedSize++; // counts statements actually visited.\n                }\n            } finally {\n                it.close();\n            }\n            //          BigdataStatementIterator it = expected.asStatementIterator(expected\n            //          .getInferenceEngine().backchainIterator(\n            //                  expected.getAccessPath(NULL, NULL, NULL)));\n            //\n            //            try {\n            //\n            //                while(it.hasNext()) {\n            //\n            //                BigdataStatement stmt = it.next();\n            //\n            //                if (!hasStatement(actual,//\n            //                        (Resource)actual.getValueFactory().asValue(stmt.getSubject()),//\n            //                        (URI)actual.getValueFactory().asValue(stmt.getPredicate()),//\n            //                        (Value)actual.getValueFactory().asValue(stmt.getObject()))//\n            //                        ) {\n            //\n            //                    sameStatements2 = false;\n            //\n            //                    log(\"    Expecting: \" + stmt);\n            //                    \n            //                    expecting++;\n            //\n            //                }\n            //                \n            //                expectedSize++; // counts statements actually visited.\n            //\n            //                }\n            //                \n            //            } finally {\n            //                \n            //                it.close();\n            //                \n            //            }\n            log(\"all the statements in expected in actual? \" + sameStatements2);\n        }\n        //        final boolean sameSize = expectedSize == actualSize;\n        //        \n        //        log(\"size of 'expected' repository: \" + expectedSize);\n        //\n        //        log(\"size of 'actual'   repository: \" + actualSize);\n        log(\"# expected but not found: \" + expecting);\n        log(\"# not expected but found: \" + notExpecting);\n        return /*sameSize &&*/sameStatements1 && sameStatements2;\n    }\n    public static void log(final String s) {\n    \tif(log.isInfoEnabled())\n    \t\tlog.info(s);\n    }\n    /**\n     * Visits <i>expected</i> {@link BigdataStatement}s not found in <i>actual</i>.\n     * \n     * @param expected\n     * @param actual\n     * \n     * @return An iterator visiting {@link BigdataStatement}s present in\n     *         <i>expected</i> but not found in <i>actual</i>.\n     * \n     * @throws ExecutionException\n     * @throws InterruptedException\n     */\n    public static ICloseableIterator<BigdataStatement> notFoundInTarget(//\n            final AbstractTripleStore expected,//\n            final AbstractTripleStore actual //\n    ) throws InterruptedException, ExecutionException {\n        /*\n         * The source access path is a full scan of the SPO index.\n         */\n        final IAccessPath<ISPO> expectedAccessPath = expected.getAccessPath(\n                (IV) null, (IV) null, (IV) null);\n        /*\n         * Efficiently convert SPOs to BigdataStatements (externalizes\n         * statements).\n         */\n        final BigdataStatementIterator itr2 = expected\n                .asStatementIterator(expectedAccessPath.iterator());\n        final int capacity = 100000;\n        final BlockingBuffer<BigdataStatement> buffer = new BlockingBuffer<BigdataStatement>(\n                capacity);\n        final StatementBuffer2<Statement, BigdataStatement> sb = new StatementBuffer2<Statement, BigdataStatement>(\n                actual, true/* readOnly */, capacity) {\n            /**\n             * Statements not found in [actual] are written on the\n             * BlockingBuffer.\n             * \n             * @return The #of statements that were not found.\n             */\n            @Override\n            protected int handleProcessedStatements(final BigdataStatement[] a) {\n                if (log.isInfoEnabled())\n                    log.info(\"Given \" + a.length + \" statements\");\n                // bulk filter for statements not present in [actual].\n                final IChunkedOrderedIterator<ISPO> notFoundItr = actual\n                        .bulkFilterStatements(a, a.length, false/* present */);\n                int nnotFound = 0;\n                try {\n                    while (notFoundItr.hasNext()) {\n                        final ISPO notFoundStmt = notFoundItr.next();\n                        if (log.isInfoEnabled())\n                            log.info(\"Not found: \" + notFoundStmt);\n                        buffer.add((BigdataStatement) notFoundStmt);\n                        nnotFound++;\n                    }\n                } finally {\n                    notFoundItr.close();\n                }\n                if (log.isInfoEnabled())\n                    log.info(\"Given \" + a.length + \" statements, \" + nnotFound\n                            + \" of them were not found\");\n                return nnotFound;\n            }\n        };\n        /**\n         * Run task. The task consumes externalized statements from [expected]\n         * and writes statements not found in [actual] onto the blocking buffer.\n         */\n        final Callable<Void> myTask = new Callable<Void>() {\n                public Void call() throws Exception {\n                    try {\n                        while (itr2.hasNext()) {\n                            // a statement from the source db.\n                            final BigdataStatement stmt = itr2.next();\n                            // if (log.isInfoEnabled()) log.info(\"Source: \"\n                            // + stmt);\n                            // add to the buffer.\n                            sb.add(stmt);\n                        }\n                    } finally {\n                        itr2.close();\n                    }\n                    /*\n                     * Flush everything in the StatementBuffer so that it\n                     * shows up in the BlockingBuffer's iterator().\n                     */\n                    final long nnotFound = sb.flush();\n                    if (log.isInfoEnabled())\n                        log.info(\"Flushed: #notFound=\" + nnotFound);\n                    return null;\n                }\n        };\n        /**\n         * @see <a href=\"https://sourceforge.net/apps/trac/bigdata/ticket/707\">\n         *      BlockingBuffer.close() does not unblock threads </a>\n         */\n        // Wrap computation as FutureTask.\n        final FutureTask<Void> ft = new FutureTask<Void>(myTask);\n        \n        // Set Future on BlockingBuffer.\n        buffer.setFuture(ft);\n        \n        // Submit computation for evaluation.\n        actual.getExecutorService().submit(ft);\n        /*\n         * Return iterator reading \"not found\" statements from the blocking\n         * buffer.\n         */\n        return buffer.iterator();\n    }\n    /**\n     * Exports all statements found in the data and all backchained entailments\n     * for the <i>db</i> into a {@link TempTripleStore}. This may be used to\n     * compare graphs purely in their data by pre-generation of all backchained\n     * entailments.\n     * <p>\n     * Note: This is not a general purpose bulk export as it uses only a single\n     * access path, does not store justifications, and does retain the\n     * {@link Axioms} model of the source graph. This method is specifically\n     * designed to export \"just the triples\", e.g., for purposes of comparison.\n     * \n     * @param db\n     *            The source database.\n     * \n     * @return The {@link TempTripleStore}.\n     */\n    static public TempTripleStore bulkExport(final AbstractTripleStore db) {\n    \n        final Properties properties = new Properties();\n        \n        properties.setProperty(Options.ONE_ACCESS_PATH, \"true\");\n        \n        properties.setProperty(Options.JUSTIFY, \"false\");\n        \n        properties.setProperty(Options.AXIOMS_CLASS,\n                NoAxioms.class.getName());\n        properties.setProperty(Options.STATEMENT_IDENTIFIERS,\n                \"\" + db.isStatementIdentifiers());\n        final TempTripleStore tmp = new TempTripleStore(properties);\n        try {\n\t\t\tfinal StatementBuffer<Statement> sb = new StatementBuffer<Statement>(tmp, 100000/* capacity */,\n\t\t\t\t\t10/* queueCapacity */);\n            final IV NULL = null;\n            final IChunkedOrderedIterator<ISPO> itr1 = new BackchainAccessPath(\n                    db, db.getAccessPath(NULL, NULL, NULL)).iterator();\n            final BigdataStatementIterator itr2 = db.asStatementIterator(itr1);\n            try {\n                while (itr2.hasNext()) {\n                    final BigdataStatement stmt = itr2.next();\n                    sb.add(stmt);\n                }\n            } finally {\n                itr2.close();\n            }\n            sb.flush();\n        } catch (Throwable t) {\n            tmp.close();\n            throw new RuntimeException(t);\n        }\n    \n        return tmp;\n    \n    }\n    /**\n     * Compares two {@link LocalTripleStore}s\n     * \n     * @param args\n     *            filename filename (namespace)\n     * \n     * @throws Exception\n     *  \n     * @todo namespace for each, could be the same file, and timestamp for each.\n     * \n     * @todo handle other database modes.\n     */\n    public static void main(String[] args) throws Exception {\n        \n", "answers": ["        if (args.length < 2 || args.length > 3) {"], "length": 1331, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "0ab3fa6fa37f02b5f789515e8bd2a7357fa959242a06e4e3"}
{"input": "", "context": "#!/usr/bin/env python\n\"\"\"\nTest alerts\n\"\"\"\nimport unittest\nimport datetime\nfrom dateutil.tz import tzutc\nfrom spotbot import alert\ndef isclose(a, b, rel_tol=1e-09, abs_tol=0.0):\n    \"\"\" Borrow isclose from Python 3.5 \"\"\"\n    return abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\nclass AlertTest(unittest.TestCase):\n    def setUp(self):\n        pass\n    def tearDown(self):\n        pass\n    def test_check_for_alert_empty_history_and_subscriptions(self):\n        \"\"\" Test that we handle no history and no subscriptions in a sane way.\"\"\"\n        assert alert.check_for_alert([],None) is None, \"Alerts should have been an empty list.\"\n    def test_check_for_alert_over_under(self):\n        \"\"\" Test that we can match an alert description against relevant history. \"\"\"\n        history = [ {u'Timestamp': datetime.datetime(2015, 12, 31, 22, 13, 43,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.105200',\n                     u'AvailabilityZone': 'us-east-1b'},\n                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 56, 18,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.104400',\n                     u'AvailabilityZone': 'us-east-1d'},\n                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 56, 18,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.106300',\n                     u'AvailabilityZone': 'us-east-1c'},\n                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 31, 6,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.767100',\n                     u'AvailabilityZone': 'us-east-1e'},\n                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.105300',\n                     u'AvailabilityZone': 'us-east-1b'},\n        ]\n        virginia_under_a_nickle = {'name': 'Virginia Under A Nickle',\n                                   'threshold':'0.05', 'region':'us-east-1', 'zone':\n                                   'us-east-1b', 'instance_type':'g2.2xlarge',\n                                   'product':'Windows', 'user':'1', 'last_alert':'Under'}\n        virginia_over_twenty = {'name': 'Virginia Over Twenty',\n                                'threshold':'0.2', 'region':'us-east-1', 'zone':\n                                'us-east-1b', 'instance_type':'g2.2xlarge',\n                                'product':'Windows', 'user':'1', 'last_alert':'Over'}\n        assert not alert.check_for_alert(history, virginia_under_a_nickle) is None, \"Should see an alert for Virginia Under A Nickle\"\n        assert not alert.check_for_alert(history, virginia_over_twenty) is None, \"Should see an alert for Virginia Over Twenty\"\n        dublin_under_twenty = {'name': 'Dublin Under Twenty',\n                               'threshold':'0.2', 'region':'eu-west-1', 'zone': 'eu-west-1b',\n                               'instance_type':'g2.2xlarge', 'product':'Windows', 'user':'1',\n                               'last_alert':'Under'}\n        virginia_under_twenty = {'name': 'Virginia Under Twenty',\n                                 'threshold':'0.2', 'region':'us-east-1', 'zone': 'us-east-1b',\n                                 'instance_type':'g2.2xlarge', 'product':'Windows', 'user':'1',\n                                 'last_alert':'Under'}\n        assert alert.check_for_alert(history, dublin_under_twenty) is None, \"Should not see an alert for Dublin Under Twenty\"\n        assert alert.check_for_alert(history, virginia_under_twenty) is None, \"Should not see an alert for Virginia Under Twenty\"\n    def test_check_for_alert_with_no_matched_zones(self):\n        \"\"\"Alerts are only valid if the availability zone in the history matches an availability zone in the subscription\"\"\"\n        history = [{u'Timestamp': datetime.datetime(2015, 12, 31, 22, 13, 43,\n                                                    tzinfo=tzutc()),\n                    u'ProductDescription': 'Windows',\n                    u'InstanceType': 'g2.2xlarge',\n                    u'SpotPrice': '0.105200',\n                    u'AvailabilityZone': 'us-east-1d'},\n                   {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 56, 18,\n                                                    tzinfo=tzutc()),\n                    u'ProductDescription': 'Windows',\n                    u'InstanceType': 'g2.2xlarge',\n                    u'SpotPrice': '0.104400',\n                    u'AvailabilityZone': 'us-east-1d'}]\n        just_1a = {'name': 'Just 1a',\n                          'threshold':'0.05',\n                          'region':'us-east-1',\n                          'zone': 'us-east-1a',\n                          'instance_type':'g2.2xlarge',\n                          'product':'Windows',\n                          'user':'1',\n                          'last_alert':'Under'}\n        result = alert.check_for_alert(history, just_1a)\n        assert result is None, 'There should not be an alert for Just 1a'\n    def test_check_that_alert_matches_zone(self):\n        \"\"\"When we match a zone and all other criteria, we should create an alert.\"\"\"\n        history = [{u'Timestamp': datetime.datetime(2015, 12, 31, 22, 13, 43,\n                                                    tzinfo=tzutc()),\n                    u'ProductDescription': 'Windows',\n                    u'InstanceType': 'g2.2xlarge',\n                    u'SpotPrice': '0.105200',\n                    u'AvailabilityZone': 'us-east-1d'},\n                   {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 56, 18,\n                                                    tzinfo=tzutc()),\n                    u'ProductDescription': 'Windows',\n                    u'InstanceType': 'g2.2xlarge',\n                    u'SpotPrice': '0.104400',\n                    u'AvailabilityZone': 'us-east-1d'}]\n        match_1d = {'name': 'Sub for just 1d',\n                     'threshold':'0.05',\n                     'region':'us-east-1',\n                     'zone': 'us-east-1d',\n                     'instance_type':'g2.2xlarge',\n                     'product':'Windows',\n                     'user':'1',\n                     'last_alert':'Under'}\n        assert not alert.check_for_alert(history, match_1d) is None, \"There should be an alert from match_1d\"\n        match_1q = {'name': 'Sub for 1q',\n                     'threshold':'0.05',\n                     'region':'us-east-1',\n                     'zone': 'us-east-1q',\n                     'instance_type':'g2.2xlarge',\n                     'product':'Windows',\n                     'user':'1',\n                     'last_alert':'Under'}\n        assert alert.check_for_alert(history, match_1q) is None, \"There should not be any alerts for us_east-1q\"\n    def test_check_for_alert_sets_last_alert(self):\n        \"\"\"check_for_alert should set the last_alert attribute of the alert to indication the type of the alert.\"\"\"\n        history = [ {u'Timestamp': datetime.datetime(2015, 12, 31, 22, 13, 43,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.105200',\n                     u'AvailabilityZone': 'us-east-1b'}]\n        subscription = {'name': 'Sub for 1b',\n                     'threshold':'0.05',\n                     'region':'us-east-1',\n                     'zone': 'us-east-1b',\n                     'instance_type':'g2.2xlarge',\n                     'product':'Windows',\n                     'user':'1',\n                     'last_alert':'Under'}\n        result = alert.check_for_alert(history, subscription)\n        assert not result is None, \"There should be an alert for us_east-1b\"\n        assert result['last_alert'] == 'Over'\n    def test_check_for_alert_sets_spotprice(self):\n        \"\"\"check_for_alert should set the last_alert attribute of the alert to indication the type of the alert.\"\"\"\n        history = [ {u'Timestamp': datetime.datetime(2015, 12, 31, 22, 13, 43,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.105200',\n                     u'AvailabilityZone': 'us-east-1b'}]\n        subscription = {'name': 'Sub for 1b',\n                     'threshold':'0.05',\n                     'region':'us-east-1',\n                     'zone': 'us-east-1b',\n                     'instance_type':'g2.2xlarge',\n                     'product':'Windows',\n                     'user':'1',\n                     'last_alert':'Under'}\n        result = alert.check_for_alert(history, subscription)\n        assert not result is None, \"There should be an alert for us_east-1b\"\n        assert result['spot_price'] == 0.105200\n    def test_lowest_spotprice(self):\n        \"\"\"We should find the lowest spotprice for a given zone or return None.\"\"\"\n        history = [ {u'Timestamp': datetime.datetime(2015, 12, 31, 22, 13, 43,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.105200',\n                     u'AvailabilityZone': 'us-east-1b'},\n                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 56, 18,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.104400',\n                     u'AvailabilityZone': 'us-east-1d'},\n                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 56, 18,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.106300',\n                     u'AvailabilityZone': 'us-east-1c'},\n                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 31, 6,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'InstanceType': 'g2.2xlarge',\n                     u'SpotPrice': '0.767100',\n                     u'AvailabilityZone': 'us-east-1e'},\n", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "length": 706, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "ec079a446c9b8d37501282c4d7ea9038eeec3621948ada9e"}
{"input": "", "context": "package fr.inria.arles.yarta.desktop.library.util;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport javax.swing.JOptionPane;\nimport fr.inria.arles.yarta.desktop.library.DownloaderDialog;\nimport fr.inria.arles.yarta.desktop.library.RMIUtil;\nimport fr.inria.arles.yarta.desktop.library.Service;\n/**\n * Helper class which permits (un)installing & updating the application.\n */\npublic class Installer {\n\tpublic static final String InstallPath = System.getProperty(\"user.home\")\n\t\t\t+ \"/.yarta/\";\n\tpublic static final String FilesPath = InstallPath + \"res/\";\n\tprivate static final String[] files = { \"mse-1.2.rdf\", \"policies\" };\n\tprivate String currentJarPath;\n\tprivate String installedJarPath;\n\tprivate Exception error;\n\tpublic Installer() {\n\t\tString jarFile = System.getProperty(\"java.class.path\");\n\t\tif (!jarFile.endsWith(\"jar\")) {\n\t\t\tjarFile = \"yarta.jar\";\n\t\t}\n\t\tcurrentJarPath = new File(jarFile).getAbsolutePath();\n\t\tinstalledJarPath = InstallPath + \"yarta.jar\";\n\t}\n\t/**\n\t * Checks whether Yarta is installed on the current machine.\n\t * \n\t * @return\n\t */\n\tpublic boolean isInstalled() {\n\t\treturn checkFilesConsistency();\n\t}\n\t/**\n\t * Checks if Yarta Service is running.\n\t * \n\t * @return\n\t */\n\tpublic boolean isRunning() {\n\t\tService service = RMIUtil.getObject(Service.Name);\n\t\tboolean running = service != null;\n\t\tservice = null;\n\t\treturn running;\n\t}\n\t/**\n\t * Runs a jar file with the specified arguments;\n\t * \n\t * @param jarPath\n\t * @param args\n\t * @return\n\t */\n\tprivate Process runJar(String jarPath, String... args) {\n\t\tString command = \"java -jar \" + jarPath;\n\t\tif (isWindows()) {\n\t\t\tcommand = \"javaw -jar \" + jarPath;\n\t\t}\n\t\tfor (String arg : args) {\n\t\t\tcommand += \" \" + arg;\n\t\t}\n\t\ttry {\n\t\t\treturn Runtime.getRuntime().exec(command);\n\t\t} catch (Exception ex) {\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * Launches the application.\n\t * \n\t * @return\n\t */\n\tpublic boolean launchApp() {\n\t\treturn runJar(installedJarPath) != null;\n\t}\n\t/**\n\t * Returns the timestamp of yarta.jar from Internet.\n\t * \n\t * @return\n\t */\n\tprivate long getLastModifiedRemote() {\n\t\tlong lastModified = 0;\n\t\ttry {\n\t\t\tURL url = new URL(Strings.DownloaderYartaLink);\n\t\t\tURLConnection conn = url.openConnection();\n\t\t\tlastModified = conn.getLastModified();\n\t\t} catch (Exception ex) {\n\t\t}\n\t\treturn lastModified;\n\t}\n\t/**\n\t * Checks for updates, and if there are any, asks users and update. Returns\n\t * false otherwise.\n\t * \n\t * @return true/false\n\t */\n\tpublic boolean checkAndUpdate() {\n\t\tlong lastModifiedLocal = new File(installedJarPath).lastModified();\n\t\tlong lastModifiedRemote = getLastModifiedRemote();\n\t\tif (lastModifiedRemote > lastModifiedLocal) {\n\t\t\tint option = 0;\n\t\t\ttry {\n\t\t\t\toption = JOptionPane.showConfirmDialog(null,\n\t\t\t\t\t\tStrings.InstallerUpdatePrompt,\n\t\t\t\t\t\tStrings.InstallerUpdateTitle,\n\t\t\t\t\t\tJOptionPane.OK_CANCEL_OPTION,\n\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\t\t} catch (Exception ex) {\n\t\t\t\t// system does not have UI\n\t\t\t\toption = JOptionPane.OK_OPTION;\n\t\t\t}\n\t\t\tif (option == JOptionPane.OK_OPTION) {\n\t\t\t\tString downloadedJarFile = performDownload();\n\t\t\t\tif (downloadedJarFile != null) {\n\t\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic boolean launchService() {\n\t\treturn runJar(installedJarPath, \"/start\") != null;\n\t}\n\tpublic boolean stopService() {\n\t\tif (!new File(installedJarPath).exists()) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\tProcess process = runJar(installedJarPath, \"/stop\");\n\t\t\tprocess.waitFor();\n\t\t\treturn true;\n\t\t} catch (Exception ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tpublic boolean install() {\n\t\tboolean hasUI = true;\n\t\ttry {\n\t\t\tint selection = JOptionPane.showConfirmDialog(null,\n\t\t\t\t\tStrings.InstallerPrompt, Strings.InstallerPromptTitle,\n\t\t\t\t\tJOptionPane.OK_CANCEL_OPTION,\n\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\t\tif (selection == JOptionPane.OK_OPTION) {\n\t\t\t\treturn performInstallation();\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\thasUI = false;\n\t\t}\n\t\tif (!hasUI) {\n\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t * \n\t * @return true/false\n\t */\n\tpublic boolean downloadAndInstall() {\n\t\tint selection = JOptionPane.showConfirmDialog(null,\n\t\t\t\tStrings.InstallerDownloadPrompt,\n\t\t\t\tStrings.InstallerDownloadTitle, JOptionPane.OK_CANCEL_OPTION,\n\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\tif (selection == JOptionPane.OK_OPTION) {\n", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "length": 519, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "2048127690b0643c5439f0746443d4a8223e39ac290d9891"}
{"input": "", "context": "#region Copyright & License Information\n/*\n * Copyright 2007-2019 The OpenRA Developers (see AUTHORS)\n * This file is part of OpenRA, which is free software. It is made\n * available to you under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version. For more\n * information, see COPYING.\n */\n#endregion\nusing System;\nusing OpenRA.Graphics;\nusing OpenRA.Primitives;\nusing SDL2;\nnamespace OpenRA.Platforms.Default\n{\n\tsealed class Sdl2GraphicsContext : ThreadAffine, IGraphicsContext\n\t{\n\t\treadonly Sdl2PlatformWindow window;\n\t\tbool disposed;\n\t\tIntPtr context;\n\t\tpublic Sdl2GraphicsContext(Sdl2PlatformWindow window)\n\t\t{\n\t\t\tthis.window = window;\n\t\t}\n\t\tinternal void InitializeOpenGL()\n\t\t{\n\t\t\tSetThreadAffinity();\n\t\t\tcontext = SDL.SDL_GL_CreateContext(window.Window);\n\t\t\tif (context == IntPtr.Zero || SDL.SDL_GL_MakeCurrent(window.Window, context) < 0)\n\t\t\t\tthrow new InvalidOperationException(\"Can not create OpenGL context. (Error: {0})\".F(SDL.SDL_GetError()));\n\t\t\tOpenGL.Initialize();\n\t\t\tuint vao;\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glGenVertexArrays(1, out vao);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glBindVertexArray(vao);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glEnableVertexAttribArray(Shader.VertexPosAttributeIndex);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glEnableVertexAttribArray(Shader.TexCoordAttributeIndex);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glEnableVertexAttribArray(Shader.TexMetadataAttributeIndex);\n\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t\tpublic IVertexBuffer<Vertex> CreateVertexBuffer(int size)\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\treturn new VertexBuffer<Vertex>(size);\n\t\t}\n\t\tpublic ITexture CreateTexture()\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\treturn new Texture();\n\t\t}\n\t\tpublic IFrameBuffer CreateFrameBuffer(Size s)\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\treturn new FrameBuffer(s, new Texture(), Color.FromArgb(0));\n\t\t}\n\t\tpublic IFrameBuffer CreateFrameBuffer(Size s, Color clearColor)\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\treturn new FrameBuffer(s, new Texture(), clearColor);\n\t\t}\n\t\tpublic IFrameBuffer CreateFrameBuffer(Size s, ITextureInternal texture, Color clearColor)\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\treturn new FrameBuffer(s, texture, clearColor);\n\t\t}\n\t\tpublic IShader CreateShader(string name)\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\treturn new Shader(name);\n\t\t}\n\t\tpublic void EnableScissor(int x, int y, int width, int height)\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\tif (width < 0)\n\t\t\t\twidth = 0;\n\t\t\tif (height < 0)\n\t\t\t\theight = 0;\n\t\t\tvar windowSize = window.WindowSize;\n\t\t\tvar windowScale = window.WindowScale;\n\t\t\tvar surfaceSize = window.SurfaceSize;\n\t\t\tif (windowSize != surfaceSize)\n\t\t\t{\n\t\t\t\tx = (int)Math.Round(windowScale * x);\n\t\t\t\ty = (int)Math.Round(windowScale * y);\n\t\t\t\twidth = (int)Math.Round(windowScale * width);\n\t\t\t\theight = (int)Math.Round(windowScale * height);\n\t\t\t}\n\t\t\tOpenGL.glScissor(x, y, width, height);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glEnable(OpenGL.GL_SCISSOR_TEST);\n\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t\tpublic void DisableScissor()\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\tOpenGL.glDisable(OpenGL.GL_SCISSOR_TEST);\n\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t\tpublic void Present()\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\tSDL.SDL_GL_SwapWindow(window.Window);\n\t\t}\n\t\tstatic int ModeFromPrimitiveType(PrimitiveType pt)\n\t\t{\n\t\t\tswitch (pt)\n\t\t\t{\n\t\t\t\tcase PrimitiveType.PointList: return OpenGL.GL_POINTS;\n\t\t\t\tcase PrimitiveType.LineList: return OpenGL.GL_LINES;\n\t\t\t\tcase PrimitiveType.TriangleList: return OpenGL.GL_TRIANGLES;\n\t\t\t}\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic void DrawPrimitives(PrimitiveType pt, int firstVertex, int numVertices)\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\tOpenGL.glDrawArrays(ModeFromPrimitiveType(pt), firstVertex, numVertices);\n\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t\tpublic void Clear()\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\tOpenGL.glClearColor(0, 0, 0, 1);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glClear(OpenGL.GL_COLOR_BUFFER_BIT | OpenGL.GL_DEPTH_BUFFER_BIT);\n\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t\tpublic void EnableDepthBuffer()\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\tOpenGL.glClear(OpenGL.GL_DEPTH_BUFFER_BIT);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glEnable(OpenGL.GL_DEPTH_TEST);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDepthFunc(OpenGL.GL_LEQUAL);\n\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t\tpublic void DisableDepthBuffer()\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\tOpenGL.glDisable(OpenGL.GL_DEPTH_TEST);\n\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t\tpublic void ClearDepthBuffer()\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\tOpenGL.glClear(OpenGL.GL_DEPTH_BUFFER_BIT);\n\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t\tpublic void SetBlendMode(BlendMode mode)\n\t\t{\n\t\t\tVerifyThreadAffinity();\n\t\t\tOpenGL.glBlendEquation(OpenGL.GL_FUNC_ADD);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tswitch (mode)\n\t\t\t{\n\t\t\t\tcase BlendMode.None:\n\t\t\t\t\tOpenGL.glDisable(OpenGL.GL_BLEND);\n\t\t\t\t\tbreak;\n\t\t\t\tcase BlendMode.Alpha:\n\t\t\t\t\tOpenGL.glEnable(OpenGL.GL_BLEND);\n\t\t\t\t\tOpenGL.CheckGLError();\n\t\t\t\t\tOpenGL.glBlendFunc(OpenGL.GL_ONE, OpenGL.GL_ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\tbreak;\n\t\t\t\tcase BlendMode.Additive:\n\t\t\t\tcase BlendMode.Subtractive:\n\t\t\t\t\tOpenGL.glEnable(OpenGL.GL_BLEND);\n\t\t\t\t\tOpenGL.CheckGLError();\n\t\t\t\t\tOpenGL.glBlendFunc(OpenGL.GL_ONE, OpenGL.GL_ONE);\n\t\t\t\t\tif (mode == BlendMode.Subtractive)\n\t\t\t\t\t{\n\t\t\t\t\t\tOpenGL.CheckGLError();\n\t\t\t\t\t\tOpenGL.glBlendEquationSeparate(OpenGL.GL_FUNC_REVERSE_SUBTRACT, OpenGL.GL_FUNC_ADD);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase BlendMode.Multiply:\n\t\t\t\t\tOpenGL.glEnable(OpenGL.GL_BLEND);\n\t\t\t\t\tOpenGL.CheckGLError();\n\t\t\t\t\tOpenGL.glBlendFunc(OpenGL.GL_DST_COLOR, OpenGL.GL_ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\tOpenGL.CheckGLError();\n\t\t\t\t\tbreak;\n\t\t\t\tcase BlendMode.Multiplicative:\n\t\t\t\t\tOpenGL.glEnable(OpenGL.GL_BLEND);\n\t\t\t\t\tOpenGL.CheckGLError();\n\t\t\t\t\tOpenGL.glBlendFunc(OpenGL.GL_ZERO, OpenGL.GL_SRC_COLOR);\n\t\t\t\t\tbreak;\n\t\t\t\tcase BlendMode.DoubleMultiplicative:\n\t\t\t\t\tOpenGL.glEnable(OpenGL.GL_BLEND);\n\t\t\t\t\tOpenGL.CheckGLError();\n\t\t\t\t\tOpenGL.glBlendFunc(OpenGL.GL_DST_COLOR, OpenGL.GL_SRC_COLOR);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tOpenGL.CheckGLError();\n\t\t}\n\t\tpublic void Dispose()\n\t\t{\n\t\t\tif (disposed)\n\t\t\t\treturn;\n\t\t\tdisposed = true;\n", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "length": 469, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "704587a1d393bef058060b716bb0ae02a9df9635baed95b0"}
{"input": "", "context": "try:\n    import typing  # help IDEs with type-hinting inside docstrings\nexcept ImportError:\n    pass\nimport numpy  # help IDEs with type-hinting inside docstrings\nfrom collections import OrderedDict\nfrom copy import deepcopy\nimport numpy as np\nfrom ...core.error import CovMat\nfrom ...tools import print_dict_as_table\nfrom .._base import FitException, FitBase, DataContainerBase, ModelFunctionBase\nfrom .container import XYContainer\nfrom .cost import XYCostFunction_Chi2, STRING_TO_COST_FUNCTION\nfrom .model import XYParametricModel\nfrom .plot import XYPlotAdapter\nfrom ..util import function_library, add_in_quadrature, invert_matrix\n__all__ = ['XYFit', 'XYFitException']\nclass XYFitException(FitException):\n    pass\nclass XYFit(FitBase):\n    CONTAINER_TYPE = XYContainer\n    MODEL_TYPE = XYParametricModel\n    MODEL_FUNCTION_TYPE = ModelFunctionBase\n    PLOT_ADAPTER_TYPE = XYPlotAdapter\n    EXCEPTION_TYPE = XYFitException\n    RESERVED_NODE_NAMES = {'y_data', 'y_model', 'cost',\n                           'x_error', 'y_data_error', 'y_model_error', 'total_error',\n                           'x_cov_mat', 'y_data_cov_mat', 'y_model_cov_mat', 'total_cov_mat',\n                           'x_cor_mat', 'y_data_cor_mat', 'y_model_cor_mat', 'total_cor_mat',\n                           'x_cov_mat_inverse', 'y_data_cov_mat_inverse', 'y_model_cov_mat_inverse', 'total_cor_mat_inverse'\n                           'x_data_cov_mat'}\n    _BASIC_ERROR_NAMES = {\n        'x_data_error', 'x_model_error', 'x_data_cov_mat', 'x_model_cov_mat',\n        'y_data_error', 'y_model_error', 'y_data_cov_mat', 'y_model_cov_mat'\n    }\n    X_ERROR_ALGORITHMS = ('iterative linear', 'nonlinear')\n    _STRING_TO_COST_FUNCTION = STRING_TO_COST_FUNCTION\n    _AXES = (None, \"x\", \"y\")\n    _MODEL_NAME = \"y_model\"\n    _MODEL_ERROR_NODE_NAMES = [\"y_model_error\", \"y_model_cov_mat\"]\n    _PROJECTED_NODE_NAMES = [\"total_error\", \"total_cov_mat\"]\n    def __init__(self,\n                 xy_data,\n                 model_function=function_library.linear_model,\n                 cost_function=XYCostFunction_Chi2(\n                    axes_to_use='xy', errors_to_use='covariance'),\n                 minimizer=None, minimizer_kwargs=None,\n                 dynamic_error_algorithm=\"nonlinear\"):\n        \"\"\"Construct a fit of a model to *xy* data.\n        :param xy_data: A :py:obj:`~.XYContainer` or a raw 2D array of shape ``(2, N)``\n         containing the measurement data.\n        :type xy_data: XYContainer or typing.Sequence\n        :param model_function: The model function as a native Python function where the first\n            argument denotes the independent *x* variable or an already defined\n            :py:class:`~kafe2.fit.xy.XYModelFunction` object.\n        :type model_function: typing.Callable\n        :param cost_function: The cost function this fit uses to find the best parameters.\n        :type cost_function: str or typing.Callable\n        :param minimizer: The minimizer to use for fitting. Either :py:obj:`None`, ``\"iminuit\"``,\n            ``\"tminuit\"``, or ``\"scipy\"``.\n        :type minimizer: str or None\n        :param minimizer_kwargs: Dictionary with kwargs for the minimizer.\n        :type minimizer_kwargs: dict\n        \"\"\"\n        super(XYFit, self).__init__(\n            data=xy_data, model_function=model_function, cost_function=cost_function,\n            minimizer=minimizer, minimizer_kwargs=minimizer_kwargs,\n            dynamic_error_algorithm=dynamic_error_algorithm)\n    # -- private methods\n    def _init_nexus(self):\n        super(XYFit, self)._init_nexus()\n        self._nexus.add_function(\n            func=self._project_cov_mat,\n            func_name=\"total_cov_mat\",\n            par_names=[\n                \"x_total_cov_mat\",\n                \"y_total_cov_mat\",\n                \"x_model\",\n                \"parameter_values\"\n            ],\n            existing_behavior=\"replace\"\n        )\n        self._nexus.add_function(\n            func=self._project_error,\n            func_name=\"total_error\",\n            par_names=[\n                \"x_total_error\",\n                \"y_total_error\",\n                \"x_model\",\n                \"parameter_values\"\n            ],\n            existing_behavior=\"replace\"\n        )\n        self._nexus.add_dependency(\n            'y_model',\n            depends_on=(\n                'x_model',\n                'parameter_values'\n            )\n        )\n        self._nexus.add_dependency(\n            'x_model',\n            depends_on=(\n                'x_data',\n            )\n        )\n    def _set_new_data(self, new_data):\n        if isinstance(new_data, self.CONTAINER_TYPE):\n            self._data_container = deepcopy(new_data)\n        elif isinstance(new_data, DataContainerBase):\n            raise XYFitException(\"Incompatible container type '%s' (expected '%s')\"\n                                 % (type(new_data), self.CONTAINER_TYPE))\n        else:\n            _x_data = new_data[0]\n            _y_data = new_data[1]\n            self._data_container = XYContainer(_x_data, _y_data, dtype=float)\n        self._data_container._on_error_change_callback = self._on_error_change\n        # update nexus data nodes\n        self._nexus.get('x_data').mark_for_update()\n        self._nexus.get('y_data').mark_for_update()\n    def _set_new_parametric_model(self):\n        self._param_model = XYParametricModel(\n            self.x_model,\n            self._model_function,\n            self.parameter_values\n        )\n    def _report_data(self, output_stream, indent, indentation_level):\n        output_stream.write(indent * indentation_level + '########\\n')\n        output_stream.write(indent * indentation_level + '# Data #\\n')\n        output_stream.write(indent * indentation_level + '########\\n\\n')\n        _data_table_dict = OrderedDict()\n        _data_table_dict['X Data'] = self.x_data\n        if self._data_container.has_x_errors:\n            _data_table_dict['X Data Error'] = self.x_data_error\n            _data_table_dict['X Data Correlation Matrix'] = self.x_data_cor_mat\n        print_dict_as_table(_data_table_dict, output_stream=output_stream, indent_level=indentation_level + 1)\n        output_stream.write('\\n')\n        _data_table_dict = OrderedDict()\n        _data_table_dict['Y Data'] = self.y_data\n        if self._data_container.has_y_errors:\n            _data_table_dict['Y Data Error'] = self.y_data_error\n            _data_table_dict['Y Data Correlation Matrix'] = self.y_data_cor_mat\n        print_dict_as_table(_data_table_dict, output_stream=output_stream, indent_level=indentation_level + 1)\n        output_stream.write('\\n')\n    def _report_model(self, output_stream, indent, indentation_level):\n        # call base method to show header and model function\n        super(XYFit, self)._report_model(output_stream, indent, indentation_level)\n        _model_table_dict = OrderedDict()\n        _model_table_dict['X Model'] = self.x_model\n        if self._param_model.has_x_errors:\n            _model_table_dict['X Model Error'] = self.x_model_error\n            _model_table_dict['X Model Correlation Matrix'] = self.x_model_cor_mat\n        print_dict_as_table(_model_table_dict, output_stream=output_stream, indent_level=indentation_level + 1)\n        output_stream.write('\\n')\n        _model_table_dict = OrderedDict()\n        _model_table_dict['Y Model'] = self.y_model\n        if self._param_model.has_y_errors:\n            _model_table_dict['Y Model Error'] = self.y_model_error\n            _model_table_dict['Y Model Correlation Matrix'] = self.y_model_cor_mat\n        print_dict_as_table(_model_table_dict, output_stream=output_stream, indent_level=indentation_level + 1)\n        output_stream.write('\\n')\n        if self._param_model.get_matching_errors({\"relative\": True, \"axis\": 1}):\n            output_stream.write(indent * (indentation_level + 1))\n            output_stream.write(\n                \"y model covariance matrix was calculated dynamically relative to y model values.\\n\"\n            )\n            output_stream.write(\"\\n\")\n    def _project_cov_mat(self, x_cov_mat, y_cov_mat, x_model, parameter_values):\n        _derivatives = self._param_model.eval_model_function_derivative_by_x(\n            x=x_model,\n            dx=0.01 * np.sqrt(np.diag(x_cov_mat)),\n            model_parameters=parameter_values\n        )\n        return y_cov_mat + x_cov_mat * np.outer(_derivatives, _derivatives)\n    def _project_error(self, x_error, y_error, x_model, parameter_values):\n        _derivatives = self._param_model.eval_model_function_derivative_by_x(\n            x=x_model,\n            dx=0.01 * x_error,\n            model_parameters=parameter_values\n        )\n        return np.sqrt(np.square(y_error) + np.square(x_error * _derivatives))\n    def _set_data_as_model_ref(self):\n        _errs_and_old_refs = []\n        for _err in self._param_model.get_matching_errors({\"relative\": True, \"axis\": 1}).values():\n            _old_ref = _err.reference\n            _err.reference = self._data_container.y\n            _errs_and_old_refs.append((_err, _old_ref))\n        return _errs_and_old_refs\n    def _iterative_fits_needed(self):\n        return (bool(self._param_model.get_matching_errors({\"relative\": True, \"axis\": 1}))\n                or self.has_x_errors) \\\n               and self._dynamic_error_algorithm == \"iterative\"\n    def _second_fit_needed(self):\n        return bool(self._param_model.get_matching_errors({\"relative\": True, \"axis\": 1})) \\\n               and self._dynamic_error_algorithm == \"nonlinear\"\n    def _get_node_names_to_freeze(self, first_fit):\n        if not self.has_x_errors or self._dynamic_error_algorithm == \"iterative\":\n            return self._PROJECTED_NODE_NAMES + super(\n                XYFit, self)._get_node_names_to_freeze(first_fit)\n        else:\n            return super(XYFit, self)._get_node_names_to_freeze(first_fit)\n    # -- public properties\n    @property\n    def has_x_errors(self):\n        \"\"\":py:obj:`True`` if at least one *x* uncertainty source has been defined.\n        :rtype: bool\n        \"\"\"\n        return self._data_container.has_x_errors or self._param_model.has_x_errors\n    @property\n    def has_y_errors(self):\n        \"\"\":py:obj:`True`` if at least one *y* uncertainty source has been defined\n        :rtype: bool\n        \"\"\"\n        return self._data_container.has_y_errors or self._param_model.has_y_errors\n    @property\n    def x_data(self):\n        \"\"\"1D array containing the measurement *x* values.\n        :rtype: numpy.ndarray[float]\n        \"\"\"\n        return self._data_container.x\n    @property\n    def x_model(self):\n        \"\"\"1D array containing the model *x* values. The same as :py;obj:`.x_data` for an\n            :py:obj:`~.XYFit`.\n        :rtype: numpy.ndarray[float]\n        \"\"\"\n        return self.x_data\n    @property\n    def y_data(self):\n        \"\"\"1D array containing the measurement *y* values.\n        :rtype: numpy.ndarray[float]\n        \"\"\"\n        return self._data_container.y\n    @property\n    def model(self):\n        \"\"\"2D array of shape ``(2, N)`` containing the *x* and *y* model values\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._param_model.data\n    @property\n    def x_data_error(self):\n        \"\"\"1D array containing the pointwise *x* data uncertainties\n        :rtype: numpy.ndarray[float]\n        \"\"\"\n        return self._data_container.x_err\n    @property\n    def y_data_error(self):\n        \"\"\"1D array containing the pointwise *y* data uncertainties\n        :rtype: numpy.ndarray[float]\n        \"\"\"\n        return self._data_container.y_err\n    @property\n    def data_error(self):\n        \"\"\"1D array containing the pointwise *xy* uncertainties projected onto the *y* axis.\n        :rtype: numpy.ndarray[float]\n        \"\"\"\n        return self._project_error(\n            self.x_data_error, self.y_data_error, self.x_model, self.parameter_values)\n    @property\n    def x_data_cov_mat(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the data *x* covariance matrix.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._data_container.x_cov_mat\n    @property\n    def y_data_cov_mat(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the data *y* covariance matrix.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._data_container.y_cov_mat\n    @property\n    def data_cov_mat(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the data *xy* covariance matrix (projected\n        onto the *y* axis).\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat, self.y_data_cov_mat, self.x_model, self.parameter_values)\n    @property\n    def x_data_cov_mat_inverse(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the inverse of the data *x* covariance matrix or\n        :py:obj:`None` if singular.\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.x_cov_mat_inverse\n    @property\n    def y_data_cov_mat_inverse(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the inverse of the data *y* covariance matrix or\n        :py:obj:`None` if singular.\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.y_cov_mat_inverse\n    @property\n    def data_cov_mat_inverse(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the inverse of the data *xy* covariance matrix\n", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "length": 985, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "846340ba2c3c023a2837435e9ce17bc793645f33a20dcb42"}
{"input": "", "context": "/*\n * This library is part of OpenCms -\n * the Open Source Content Management System\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * For further information about Alkacon Software, please see the\n * company website: http://www.alkacon.com\n *\n * For further information about OpenCms, please see the\n * project website: http://www.opencms.org\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage org.opencms.relations;\nimport org.opencms.util.CmsUUID;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\nimport org.apache.commons.lang3.builder.ReflectionToStringBuilder;\nimport org.apache.commons.lang3.builder.ToStringStyle;\n/**\n * Immutable bean representing most of the information in a CmsLink.\n *\n */\npublic class CmsLinkInfo {\n    /** Empty link. */\n    public static final CmsLinkInfo EMPTY = new CmsLinkInfo(CmsUUID.getNullUUID(), null, null, null, null, true);\n    /** The anchor. */\n    private String m_anchor;\n    /** Cached hash code. */\n    private transient int m_hashCode;\n    /** Indicates whether the link is internal or not. */\n    private boolean m_internal;\n    /** The query. */\n    private String m_query;\n    /** The structure id. */\n    private CmsUUID m_structureId;\n    /** The link target. */\n    private String m_target;\n    /** Cached toString() result. */\n    private transient String m_toStringRepr;\n    /** The relation type. */\n    private CmsRelationType m_type;\n    /**\n     * Creates a new instance.\n     *\n     * @param structureId the structure id\n     * @param target the link target\n     * @param query the query\n     * @param anchor the anchor\n     * @param type the type\n     * @param internal true if the link is internal\n     */\n    public CmsLinkInfo(\n        CmsUUID structureId,\n        String target,\n        String query,\n        String anchor,\n        CmsRelationType type,\n        boolean internal) {\n        m_structureId = structureId;\n        m_target = target;\n        m_query = query;\n        m_anchor = anchor;\n        m_type = type;\n        m_internal = internal;\n        HashCodeBuilder hashCodeBuilder = new HashCodeBuilder();\n        // don't use the type in the hash code\n        m_hashCode = hashCodeBuilder.append(m_structureId).append(m_target).append(m_query).append(m_anchor).append(\n            m_internal).toHashCode();\n    }\n    /**\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    @Override\n    public boolean equals(Object obj) {\n        // equals() method auto-generated by Eclipse. Does *not* compare the type.\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        CmsLinkInfo other = (CmsLinkInfo)obj;\n        if (m_anchor == null) {\n            if (other.m_anchor != null) {\n                return false;\n            }\n        } else if (!m_anchor.equals(other.m_anchor)) {\n            return false;\n        }\n        if (m_internal != other.m_internal) {\n            return false;\n        }\n        if (m_query == null) {\n            if (other.m_query != null) {\n                return false;\n            }\n        } else if (!m_query.equals(other.m_query)) {\n            return false;\n        }\n        if (m_structureId == null) {\n            if (other.m_structureId != null) {\n                return false;\n            }\n        } else if (!m_structureId.equals(other.m_structureId)) {\n            return false;\n        }\n        if (m_target == null) {\n            if (other.m_target != null) {\n                return false;\n            }\n        } else if (!m_target.equals(other.m_target)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Gets the anchor.\n     *\n     * @return the anchor\n     */\n    public String getAnchor() {\n        return m_anchor;\n    }\n    /**\n     * Gets the query\n     *\n     * @return the query\n     */\n    public String getQuery() {\n        return m_query;\n    }\n    /**\n     * Gets the structure id.\n     *\n     * @return the structure id\n     */\n    public CmsUUID getStructureId() {\n        return m_structureId;\n    }\n    /**\n     * Gets the target.\n     *\n     * @return the target\n     */\n    public String getTarget() {\n        return m_target;\n    }\n    /**\n     * Gets the relation type.\n     *\n     * @return the type\n     */\n    public CmsRelationType getType() {\n        return m_type;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        return m_hashCode;\n    }\n    /**\n     * Checks whether the link is internal.\n     *\n     * @return true if this is an internal\n     */\n    public boolean isInternal() {\n        return m_internal;\n    }\n    /**\n     * Converts this to a CmsLink.\n     *\n     * @return a new CmsLink instance with the information from this bean\n     */\n    public CmsLink toLink() {\n", "answers": ["        if (this == EMPTY) {"], "length": 703, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "1915494441abd4076b5a0f96dc9ffb2c41a828a4c1abde95"}
{"input": "", "context": "/*************************************************************************\n * Copyright 2009-2015 Eucalyptus Systems, Inc.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; version 3 of the License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see http://www.gnu.org/licenses/.\n *\n * Please contact Eucalyptus Systems, Inc., 6755 Hollister Ave., Goleta\n * CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need\n * additional information or have any questions.\n *\n * This file may incorporate work covered under the following copyright\n * and permission notice:\n *\n *   Software License Agreement (BSD License)\n *\n *   Copyright (c) 2008, Regents of the University of California\n *   All rights reserved.\n *\n *   Redistribution and use of this software in source and binary forms,\n *   with or without modification, are permitted provided that the\n *   following conditions are met:\n *\n *     Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n *\n *     Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer\n *     in the documentation and/or other materials provided with the\n *     distribution.\n *\n *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n *   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n *   COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n *   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n *   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n *   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n *   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n *   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n *   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *   POSSIBILITY OF SUCH DAMAGE. USERS OF THIS SOFTWARE ACKNOWLEDGE\n *   THE POSSIBLE PRESENCE OF OTHER OPEN SOURCE LICENSED MATERIAL,\n *   COPYRIGHTED MATERIAL OR PATENTED MATERIAL IN THIS SOFTWARE,\n *   AND IF ANY SUCH MATERIAL IS DISCOVERED THE PARTY DISCOVERING\n *   IT MAY INFORM DR. RICH WOLSKI AT THE UNIVERSITY OF CALIFORNIA,\n *   SANTA BARBARA WHO WILL THEN ASCERTAIN THE MOST APPROPRIATE REMEDY,\n *   WHICH IN THE REGENTS' DISCRETION MAY INCLUDE, WITHOUT LIMITATION,\n *   REPLACEMENT OF THE CODE SO IDENTIFIED, LICENSING OF THE CODE SO\n *   IDENTIFIED, OR WITHDRAWAL OF THE CODE CAPABILITY TO THE EXTENT\n *   NEEDED TO COMPLY WITH ANY SUCH LICENSES OR RIGHTS.\n ************************************************************************/\npackage com.eucalyptus.objectstorage.entities.upgrade;\nimport static com.eucalyptus.upgrade.Upgrades.Version.v4_0_0;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.UUID;\nimport javax.annotation.Nonnull;\nimport javax.annotation.Nullable;\nimport javax.persistence.EntityTransaction;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.eucalyptus.auth.Accounts;\nimport com.eucalyptus.auth.AuthException;\nimport com.eucalyptus.auth.euare.persist.entities.AccountEntity;\nimport com.eucalyptus.auth.principal.AccountIdentifiers;\nimport com.eucalyptus.auth.principal.User;\nimport com.eucalyptus.auth.util.SystemAccountProvider;\nimport com.eucalyptus.entities.Entities;\nimport com.eucalyptus.entities.Transactions;\nimport com.eucalyptus.objectstorage.BucketState;\nimport com.eucalyptus.objectstorage.ObjectState;\nimport com.eucalyptus.objectstorage.ObjectStorage;\nimport com.eucalyptus.objectstorage.entities.Bucket;\nimport com.eucalyptus.objectstorage.entities.ObjectEntity;\nimport com.eucalyptus.objectstorage.util.ObjectStorageProperties;\nimport com.eucalyptus.objectstorage.util.ObjectStorageProperties.VersioningStatus;\nimport com.eucalyptus.storage.msgs.s3.AccessControlList;\nimport com.eucalyptus.storage.msgs.s3.AccessControlPolicy;\nimport com.eucalyptus.storage.msgs.s3.CanonicalUser;\nimport com.eucalyptus.storage.msgs.s3.Grant;\nimport com.eucalyptus.storage.msgs.s3.Grantee;\nimport com.eucalyptus.storage.msgs.s3.Group;\nimport com.eucalyptus.upgrade.Upgrades.EntityUpgrade;\nimport com.eucalyptus.util.Exceptions;\nimport com.eucalyptus.walrus.entities.BucketInfo;\nimport com.eucalyptus.walrus.entities.GrantInfo;\nimport com.eucalyptus.walrus.entities.ImageCacheInfo;\nimport com.eucalyptus.walrus.entities.ObjectInfo;\nimport com.eucalyptus.walrus.entities.WalrusSnapshotInfo;\nimport com.eucalyptus.walrus.util.WalrusProperties;\nimport com.google.common.base.Function;\nimport com.google.common.base.Predicate;\nimport com.google.common.collect.Iterators;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\n/**\n * Upgrade process for transferring information from Walrus to OSG, and modifying Walrus entities to work with OSG. The upgrade is broken down in to\n * well defined ordered stages. A failing stage will halt the upgrade process and the subsequent stages won't be processed.\n * \n * @author Swathi Gangisetty\n */\npublic class ObjectStorage400Upgrade {\n  private static Logger LOG = Logger.getLogger(ObjectStorage400Upgrade.class);\n  private static Map<String, AccountIdentifiers> accountIdAccountMap = Maps.newHashMap(); // Cache account ID -> account info\n  private static Map<String, User> accountIdAdminMap = Maps.newHashMap(); // Cache account ID -> admin user info\n  private static Map<String, User> userIdUserMap = Maps.newHashMap(); // Cache user ID -> user info\n  private static Set<String> deletedAccountIds = Sets.newHashSet(); // Cache deleted account IDs\n  private static Set<String> deletedUserIds = Sets.newHashSet(); // Cache deleted user IDs\n  private static Set<String> deletedAdminAccountIds = Sets.newHashSet(); // Cache account IDs whose admin is deleted\n  private static Set<String> noCanonicalIdAccountIds = Sets.newHashSet(); // Cache account IDs without any canonical IDs\n  private static Map<String, Bucket> bucketMap = Maps.newHashMap(); // Cache bucket name -> bucket object\n  private static Set<String> walrusSnapshotBuckets = Sets.newHashSet(); // Cache all snapshot buckets\n  private static Set<String> walrusSnapshotObjects = Sets.newHashSet(); // Cache all snapshot objects\n  private static AccountIdentifiers eucalyptusAccount = null;\n  private static User eucalyptusAdmin = null;\n  private static AccountIdentifiers blockStorageAccount = null;\n  private static User blockStorageAdmin = null;\n  public interface UpgradeTask {\n    public void apply() throws Exception;\n  }\n  private static final ArrayList<? extends UpgradeTask> upgrades = Lists.newArrayList(Setup.INSTANCE, CopyBucketsToOSG.INSTANCE,\n      CopyObjectsToOSG.INSTANCE, ModifyWalrusBuckets.INSTANCE, ModifyWalrusObjects.INSTANCE, FlushImageCache.INSTANCE);\n  @EntityUpgrade(entities = {ObjectEntity.class}, since = v4_0_0, value = ObjectStorage.class)\n  public static enum OSGUpgrade implements Predicate<Class> {\n    INSTANCE;\n    @Override\n    public boolean apply(@Nullable Class arg0) {\n      // Iterate through each upgrade task, using iterators.all to bail out on the first failure\n      return Iterators.all(upgrades.iterator(), new Predicate<UpgradeTask>() {\n        @Override\n        public boolean apply(UpgradeTask task) {\n          try {\n            LOG.info(\"Executing objectstorage upgrade task: \" + task.getClass().getSimpleName());\n            task.apply();\n            return true;\n          } catch (Exception e) {\n            LOG.error(\"Upgrade task failed: \" + task.getClass().getSimpleName());\n            // Returning false does not seem to halt the upgrade and cause a rollback, must throw an exception\n            throw Exceptions.toUndeclared(\"Objectstorage upgrade failed due to an error in upgrade task: \" + task.getClass().getSimpleName(), e);\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Setup stage for configuring the prerequisites before performing the upgrade\n   * \n   * <li>Initialize the Accounts library</li>\n   * \n   * <li>Setup a blockstorage account</li>\n   * \n   * <li>Assign canonical IDs to accounts that don't have it</li>\n   * \n   */\n  public enum Setup implements UpgradeTask {\n    INSTANCE;\n    @Override\n    public void apply() throws Exception {\n      // Setup the blockstorage account\n      createBlockStorageAccount();\n      // Generate canonical IDs for accounts that don't have them\n      generateCanonicaIDs();\n    }\n  }\n  /**\n   * Transform Walrus bucket entities to OSG bucket entities and persist them. A transformation function is used for converting a Walrus bucket entity\n   * to OSG bucket entity\n   * \n   */\n  public enum CopyBucketsToOSG implements UpgradeTask {\n    INSTANCE;\n    @Override\n    public void apply() throws Exception {\n      EntityTransaction osgTran = Entities.get(Bucket.class);\n      try {\n        List<Bucket> osgBuckets = Entities.query(new Bucket());\n        if (osgBuckets != null && osgBuckets.isEmpty()) { // Perform the upgrade only if osg entities are empty\n          EntityTransaction walrusTran = Entities.get(BucketInfo.class);\n          try {\n            List<BucketInfo> walrusBuckets = Entities.query(new BucketInfo(), Boolean.TRUE);\n            if (walrusBuckets != null && !walrusBuckets.isEmpty()) { // Check if there are any walrus objects to upgrade\n              // Populate snapshot buckets and objects the snapshot buckets and objects\n              populateSnapshotBucketsAndObjects();\n              // Create an OSG bucket for the corresponding walrus Bucket and persist it\n              for (Bucket osgBucket : Lists.transform(walrusBuckets, bucketTransformationFunction())) {\n                Entities.persist(osgBucket);\n              }\n            } else {\n              // no buckets in walrus, nothing to do here\n            }\n            walrusTran.commit();\n          } catch (Exception e) {\n            walrusTran.rollback();\n            throw e;\n          } finally {\n            if (walrusTran.isActive()) {\n              walrusTran.commit();\n            }\n          }\n        } else {\n          // nothing to do here since buckets might already be there\n        }\n        osgTran.commit();\n      } catch (Exception e) {\n        osgTran.rollback();\n        throw e;\n      } finally {\n        if (osgTran.isActive()) {\n          osgTran.commit();\n        }\n      }\n    }\n  }\n  /**\n   * Transform Walrus object entities to OSG object entities and persist them. A transformation function is used for converting a Walrus object entity\n   * to OSG object entity\n   * \n   */\n  public enum CopyObjectsToOSG implements UpgradeTask {\n    INSTANCE;\n    @Override\n    public void apply() throws Exception {\n      EntityTransaction osgTran = Entities.get(ObjectEntity.class);\n      try {\n        List<ObjectEntity> osgObjects = Entities.query(new ObjectEntity());\n        if (osgObjects != null && osgObjects.isEmpty()) { // Perform the upgrade only if osg entities are empty\n          EntityTransaction walrusTran = Entities.get(ObjectInfo.class);\n          try {\n            List<ObjectInfo> walrusObjects = Entities.query(new ObjectInfo(), Boolean.TRUE);\n            if (walrusObjects != null && !walrusObjects.isEmpty()) { // Check if there are any walrus objects to upgrade\n              // Lists.transform() is a lazy operation, so all elements are iterated through only once\n              for (ObjectEntity osgObject : Lists.transform(walrusObjects, objectTransformationFunction())) {\n                Entities.persist(osgObject);\n              }\n            } else {\n              // no objects in walrus, nothing to do here\n            }\n            walrusTran.commit();\n          } catch (Exception e) {\n            walrusTran.rollback();\n            throw e;\n          } finally {\n            if (walrusTran.isActive()) {\n              walrusTran.commit();\n            }\n          }\n        } else {\n          // nothing to do here since buckets might already be there\n        }\n        osgTran.commit();\n      } catch (Exception e) {\n        osgTran.rollback();\n        throw e;\n      } finally {\n        if (osgTran.isActive()) {\n          osgTran.commit();\n        }\n      }\n    }\n  }\n  /**\n   * Modify Walrus buckets to work better with OSG\n   * \n   * <li>Reset the ownership of every bucket to Eucalyptus account</li>\n   * \n   * <li>Reset the ACLs on every bucket and set it to private (FULL_CONTROL for the bucket owner)</li>\n   * \n   * <li>Disable versioning entirely (even if its suspended)</li>\n   */\n  public enum ModifyWalrusBuckets implements UpgradeTask {\n    INSTANCE;\n    @Override\n    public void apply() throws Exception {\n      EntityTransaction tran = Entities.get(BucketInfo.class);\n      try {\n        List<BucketInfo> walrusBuckets = Entities.query(new BucketInfo());\n        if (walrusBuckets != null && !walrusBuckets.isEmpty()) { // Check if there are any walrus objects to upgrade\n          for (BucketInfo walrusBucket : walrusBuckets) {\n            try {\n              // Reset the ownership and assign it to Eucalyptus admin account and user\n              walrusBucket.setOwnerId(getEucalyptusAccount().getAccountNumber());\n              walrusBucket.setUserId(getEucalyptusAdmin().getUserId());\n              // Reset the ACLs and assign the owner full control\n              walrusBucket.resetGlobalGrants();\n              List<GrantInfo> grantInfos = new ArrayList<GrantInfo>();\n              GrantInfo.setFullControl(walrusBucket.getOwnerId(), grantInfos);\n              walrusBucket.setGrants(grantInfos);\n              // Disable versioning, could probably suspend it but that might not entirely stop walrus from doing versioning related tasks\n              if (walrusBucket.getVersioning() != null\n                  && (WalrusProperties.VersioningStatus.Enabled.toString().equals(walrusBucket.getVersioning()) || WalrusProperties.VersioningStatus.Suspended\n                      .toString().equals(walrusBucket.getVersioning()))) {\n                walrusBucket.setVersioning(WalrusProperties.VersioningStatus.Disabled.toString());\n              }\n            } catch (Exception e) {\n              LOG.error(\"Failed to modify Walrus bucket \" + walrusBucket.getBucketName(), e);\n              throw e;\n            }\n          }\n        } else {\n          // no buckets in walrus, nothing to do here\n        }\n        tran.commit();\n      } catch (Exception e) {\n        tran.rollback();\n        throw e;\n      } finally {\n        if (tran.isActive()) {\n          tran.commit();\n        }\n      }\n    }\n  }\n  /**\n   * Modify Walrus objects to work with OSG\n   * \n   * <li>Remove delete markers since versioning is entirely handled by OSG</li>\n   * \n   * <li>Overwrite objectKey with the objectName, this is the same as the objectUuid in OSG and will be used by the OSG to refer to the object</li>\n   * \n   * <li>Overwrite the version ID with the string \"null\" as Walrus no longer keeps track of versions</li>\n   * \n   * <li>Mark the object as the latest since all the objects are unique to Walrus after changing the object key</li>\n   * \n   * <li>Reset the ownership of every object to Eucalyptus account</li>\n   * \n   * <li>Reset the ACLs on every object and set it to private (FULL_CONTROL for the object owner)</li>\n   */\n  public enum ModifyWalrusObjects implements UpgradeTask {\n    INSTANCE;\n    @Override\n    public void apply() throws Exception {\n      EntityTransaction tran = Entities.get(ObjectInfo.class);\n      try {\n        List<ObjectInfo> walrusObjects = Entities.query(new ObjectInfo());\n        if (walrusObjects != null && !walrusObjects.isEmpty()) { // Check if there are any walrus objects to upgrade\n          for (ObjectInfo walrusObject : walrusObjects) {\n            try {\n              // Check and remove the record if its a delete marker\n              if (walrusObject.getDeleted() != null && walrusObject.getDeleted()) {\n                LOG.info(\"Removing delete marker from Walrus for object \" + walrusObject.getObjectKey() + \" in bucket \"\n                    + walrusObject.getBucketName() + \" with version ID \" + walrusObject.getVersionId());\n                Entities.delete(walrusObject);\n                continue;\n              }\n              // Copy object name to object key since thats the reference used by OSG\n              walrusObject.setObjectKey(walrusObject.getObjectName());\n              // Change the version ID to null\n              walrusObject.setVersionId(WalrusProperties.NULL_VERSION_ID);\n              // Mark the object as latest\n              walrusObject.setLast(Boolean.TRUE);\n              // Reset the ownership and assign it to Eucalyptus admin account\n              walrusObject.setOwnerId(getEucalyptusAccount().getAccountNumber());\n              // Reset the ACLs and assign the owner full control\n              walrusObject.resetGlobalGrants();\n              List<GrantInfo> grantInfos = new ArrayList<GrantInfo>();\n              GrantInfo.setFullControl(walrusObject.getOwnerId(), grantInfos);\n              walrusObject.setGrants(grantInfos);\n            } catch (Exception e) {\n              LOG.error(\"Failed to modify Walrus object \" + walrusObject.getObjectKey(), e);\n              throw e;\n            }\n          }\n        } else {\n          // no objects in walrus, nothing to do here\n        }\n        tran.commit();\n      } catch (Exception e) {\n        tran.rollback();\n        throw e;\n      } finally {\n        if (tran.isActive()) {\n          tran.commit();\n        }\n      }\n    }\n  }\n  /**\n   * Add cached images as objects to walrus and OSG and mark them for deletion in OSG. When the OSG boots up, it'll start deleting the objects\n   * \n   */\n  public enum FlushImageCache implements UpgradeTask {\n    INSTANCE;\n    @Override\n    public void apply() throws Exception {\n      EntityTransaction walrusImageTran = Entities.get(ImageCacheInfo.class);\n      try {\n        List<ImageCacheInfo> images = Entities.query(new ImageCacheInfo());\n        if (images != null && !images.isEmpty()) { // Check if there are any cached images to delete\n          EntityTransaction osgObjectTran = Entities.get(ObjectEntity.class);\n          EntityTransaction walrusObjectTran = Entities.get(ObjectInfo.class);\n          try {\n            for (ImageCacheInfo image : images) {\n              Entities.persist(imageToOSGObjectTransformation().apply(image)); // Persist a new OSG object\n              Entities.persist(imageToWalrusObjectTransformation().apply(image));\n              Entities.delete(image); // Delete the cached image from database\n            }\n            osgObjectTran.commit();\n            walrusObjectTran.commit();\n          } catch (Exception e) {\n            osgObjectTran.rollback();\n            walrusObjectTran.rollback();\n            throw e;\n          } finally {\n            if (osgObjectTran.isActive()) {\n              osgObjectTran.commit();\n            }\n            if (walrusObjectTran.isActive()) {\n              walrusObjectTran.commit();\n            }\n          }\n        } else {\n          // no images in walrus, nothing to do here\n        }\n        walrusImageTran.commit();\n      } catch (Exception e) {\n        walrusImageTran.rollback();\n        // Exceptions here should not halt the upgrade process, the cached images can be flushed manually\n        LOG.warn(\"Cannot flush cached images in Walrus due to an error. May have to be flushed manually\");\n      } finally {\n        if (walrusImageTran.isActive()) {\n          walrusImageTran.commit();\n        }\n      }\n    }\n  }\n  private static AccountIdentifiers getEucalyptusAccount() throws Exception {\n    if (eucalyptusAccount == null) {\n      eucalyptusAccount = Accounts.lookupAccountIdentifiersByAlias( AccountIdentifiers.SYSTEM_ACCOUNT );\n    }\n    return eucalyptusAccount;\n  }\n  private static User getEucalyptusAdmin() throws Exception {\n    if (eucalyptusAdmin == null) {\n      eucalyptusAdmin = Accounts.lookupPrincipalByAccountNumber( getEucalyptusAccount( ).getAccountNumber( ) );\n    }\n    return eucalyptusAdmin;\n  }\n  private static void createBlockStorageAccount () throws Exception {\n    SystemAccountProvider.Init.initialize( (SystemAccountProvider)\n        Class.forName( \"com.eucalyptus.blockstorage.BlockStorageSystemAccountProvider\" ).newInstance( ) );\n  }\n  private static AccountIdentifiers getBlockStorageAccount() throws Exception {\n    if (blockStorageAccount == null) {\n      createBlockStorageAccount( );\n      blockStorageAccount = Accounts.lookupAccountIdentifiersByAlias( AccountIdentifiers.BLOCKSTORAGE_SYSTEM_ACCOUNT );\n    }\n    return blockStorageAccount;\n  }\n  private static User getBlockStorageAdmin() throws Exception {\n    if (blockStorageAdmin == null) {\n      blockStorageAdmin = Accounts.lookupPrincipalByAccountNumber( getBlockStorageAccount().getAccountNumber() );\n    }\n    return blockStorageAdmin;\n  }\n  private static void populateSnapshotBucketsAndObjects() {\n    EntityTransaction tran = Entities.get(WalrusSnapshotInfo.class);\n    try {\n      List<WalrusSnapshotInfo> walrusSnapshots = Entities.query(new WalrusSnapshotInfo(), Boolean.TRUE);\n      for (WalrusSnapshotInfo walrusSnapshot : walrusSnapshots) {\n        walrusSnapshotBuckets.add(walrusSnapshot.getSnapshotBucket());\n        walrusSnapshotObjects.add(walrusSnapshot.getSnapshotId());\n      }\n      tran.commit();\n    } catch (Exception e) {\n      LOG.error(\"Failed to lookup snapshots stored in Walrus\", e);\n      tran.rollback();\n      throw e;\n    } finally {\n      if (tran.isActive()) {\n        tran.commit();\n      }\n    }\n  }\n  private static void generateCanonicaIDs() throws Exception {\n    EntityTransaction tran = Entities.get(AccountEntity.class);\n    try {\n      List<AccountEntity> accounts = Entities.query(new AccountEntity());\n      if (accounts != null && accounts.size() > 0) {\n        for (AccountEntity account : accounts) {\n          if (account.getCanonicalId() == null || account.getCanonicalId().equals(\"\")) {\n            account.populateCanonicalId();\n            LOG.debug(\"Assigning canonical id \" + account.getCanonicalId() + \" for account \" + account.getAccountNumber());\n          }\n        }\n      }\n      tran.commit();\n    } catch (Exception e) {\n      LOG.error(\"Failed to generate and assign canonical ids\", e);\n      tran.rollback();\n      throw e;\n    } finally {\n      if (tran.isActive()) {\n        tran.commit();\n      }\n    }\n  }\n  private static ArrayList<Grant> getBucketGrants(BucketInfo walrusBucket) throws Exception {\n    ArrayList<Grant> grants = new ArrayList<Grant>();\n    walrusBucket.readPermissions(grants); // Add global grants\n    grants = convertGrantInfosToGrants(grants, walrusBucket.getGrants()); // Add account/group specific grant\n    return grants;\n  }\n  private static ArrayList<Grant> getObjectGrants(ObjectInfo walrusObject) throws Exception {\n    ArrayList<Grant> grants = new ArrayList<Grant>();\n    walrusObject.readPermissions(grants); // Add global grants\n    grants = convertGrantInfosToGrants(grants, walrusObject.getGrants()); // Add account/group specific grant\n    return grants;\n  }\n  private static ArrayList<Grant> convertGrantInfosToGrants(ArrayList<Grant> grants, List<GrantInfo> grantInfos) throws Exception {\n    if (grants == null) {\n      grants = new ArrayList<Grant>();\n    }\n    if (grantInfos == null) {\n      // nothing to do here\n      return grants;\n    }\n    for (GrantInfo grantInfo : grantInfos) {\n      if (grantInfo.getGrantGroup() != null) {\n        // Add it as a group\n        Group group = new Group(grantInfo.getGrantGroup());\n        transferPermissions(grants, grantInfo, new Grantee(group));\n      } else {\n        // Assume it's a user/account\n        AccountIdentifiers account = null;\n        if (accountIdAccountMap.containsKey(grantInfo.getUserId())) {\n          account = accountIdAccountMap.get(grantInfo.getUserId());\n        } else if (deletedAccountIds.contains(grantInfo.getUserId())) {// In case the account is deleted, skip the grant\n          LOG.warn(\"Account ID \" + grantInfo.getUserId() + \" does not not exist. Skipping this grant\");\n          continue;\n        } else if (noCanonicalIdAccountIds.contains(grantInfo.getUserId())) { // If canonical ID is missing, use the eucalyptus admin account\n          LOG.warn(\"Account ID \" + grantInfo.getUserId() + \" does not not have a canonical ID. Skipping this grant\");\n          continue;\n        } else {\n          try {\n            // Lookup owning account\n            account = Accounts.lookupAccountIdentifiersById( grantInfo.getUserId() );\n            if (StringUtils.isBlank(grantInfo.getUserId())) { // If canonical ID is missing, use the eucalyptus admin account\n              LOG.warn(\"Account ID \" + grantInfo.getUserId() + \" does not not have a canonical ID. Skipping this grant\");\n              noCanonicalIdAccountIds.add(grantInfo.getUserId());\n              continue;\n            } else {\n              // Add it to the map\n              accountIdAccountMap.put(grantInfo.getUserId(), account);\n            }\n          } catch (Exception e) { // In case the account is deleted, skip the grant\n            LOG.warn(\"Account ID \" + grantInfo.getUserId() + \" does not not exist. Skipping this grant\");\n            deletedAccountIds.add(grantInfo.getUserId());\n            continue;\n          }\n        }\n        CanonicalUser user = new CanonicalUser(account.getCanonicalId(), account.getAccountAlias());\n        transferPermissions(grants, grantInfo, new Grantee(user));\n      }\n    }\n    return grants;\n  }\n  private static void transferPermissions(List<Grant> grants, GrantInfo grantInfo, Grantee grantee) {\n    if (grantInfo.canRead() && grantInfo.canWrite() && grantInfo.canReadACP() && grantInfo.canWriteACP()) {\n      grants.add(new Grant(grantee, ObjectStorageProperties.Permission.FULL_CONTROL.toString()));\n      return;\n    }\n    if (grantInfo.canRead()) {\n      grants.add(new Grant(grantee, ObjectStorageProperties.Permission.READ.toString()));\n    }\n    if (grantInfo.canWrite()) {\n      grants.add(new Grant(grantee, ObjectStorageProperties.Permission.WRITE.toString()));\n    }\n    if (grantInfo.canReadACP()) {\n      grants.add(new Grant(grantee, ObjectStorageProperties.Permission.READ_ACP.toString()));\n    }\n    if (grantInfo.canWriteACP()) {\n      grants.add(new Grant(grantee, ObjectStorageProperties.Permission.WRITE_ACP.toString()));\n    }\n  }\n  /**\n   * This method transforms a Walrus bucket to an OSG bucket. While the appropriate fields are copied over from the Walrus entity to OSG entity when\n   * available, the process includes the following additional steps\n   * \n   * <li>Copy the bucketName in Walrus entity to bucketName and bucketUuid of the OSG entity</li>\n   * \n   * <li>If any account information is missing due to unavailable/deleted accounts, transfer the ownership of the bucket to the Eucalyptus account</li>\n   * \n   * <li>If the user associated with the bucket is unavailable, transfer the IAM ownership to either the admin of the owning account if available or\n   * the Eucalyptus account admin</li>\n   * \n   * <li>Skip the grant if the grant owner cannot be retrieved</li>\n   * \n   * <li>Transfer the ownership of Snapshot buckets to the blockstorage system account and configure the ACL to private</li>\n   */\n  public static Function<BucketInfo, Bucket> bucketTransformationFunction() {\n    return new Function<BucketInfo, Bucket>() {\n      @Override\n      @Nullable\n      public Bucket apply(@Nonnull BucketInfo walrusBucket) {\n        Bucket osgBucket = null;\n        try {\n          AccountIdentifiers owningAccount = null;\n          User owningUser = null;\n          // Get the owning account\n          if (walrusSnapshotBuckets.contains(walrusBucket.getBucketName())) { // If its a snapshot bucket, set the owner to blockstorage account\n            LOG.warn(\"Changing the ownership of snapshot bucket \" + walrusBucket.getBucketName() + \" to blockstorage system account\");\n            owningAccount = getBlockStorageAccount();\n            owningUser = getBlockStorageAdmin();\n          } else if (accountIdAccountMap.containsKey(walrusBucket.getOwnerId())) { // If account was previously looked up, get it from the map\n            owningAccount = accountIdAccountMap.get(walrusBucket.getOwnerId());\n          } else if (deletedAccountIds.contains(walrusBucket.getOwnerId())) { // If the account is deleted, use the eucalyptus admin account\n            LOG.warn(\"Account ID \" + walrusBucket.getOwnerId() + \" does not not exist. Changing the ownership of bucket \"\n                + walrusBucket.getBucketName() + \" to eucalyptus admin account\");\n            owningAccount = getEucalyptusAccount();\n            owningUser = getEucalyptusAdmin();\n          } else if (noCanonicalIdAccountIds.contains(walrusBucket.getOwnerId())) { // If canonical ID is missing, use eucalyptus admin account\n            LOG.warn(\"Account ID \" + walrusBucket.getOwnerId() + \" does not have a canonical ID. Changing the ownership of bucket \"\n                + walrusBucket.getBucketName() + \" to eucalyptus admin account\");\n            owningAccount = getEucalyptusAccount();\n            owningUser = getEucalyptusAdmin();\n          } else { // If none of the above conditions match, lookup for the account\n            try {\n              owningAccount = Accounts.lookupAccountIdentifiersById( walrusBucket.getOwnerId() );\n              if (StringUtils.isBlank(owningAccount.getCanonicalId())) { // If canonical ID is missing, use eucalyptus admin account\n                LOG.warn(\"Account ID \" + walrusBucket.getOwnerId() + \" does not have a canonical ID. Changing the ownership of bucket \"\n                    + walrusBucket.getBucketName() + \" to eucalyptus admin account\");\n                owningAccount = getEucalyptusAccount();\n                owningUser = getEucalyptusAdmin();\n                noCanonicalIdAccountIds.add(walrusBucket.getOwnerId());\n              } else {\n                accountIdAccountMap.put(walrusBucket.getOwnerId(), owningAccount);\n              }\n            } catch (AuthException e) { // In case the account is deleted, transfer the ownership to eucalyptus admin\n              LOG.warn(\"Account ID \" + walrusBucket.getOwnerId() + \" does not not exist. Changing the ownership of bucket \"\n                  + walrusBucket.getBucketName() + \" to eucalyptus admin account\");\n              owningAccount = getEucalyptusAccount();\n              owningUser = getEucalyptusAdmin();\n              deletedAccountIds.add(walrusBucket.getOwnerId());\n              deletedUserIds.add(walrusBucket.getUserId());\n            }\n          }\n          // Get the owning user if its not already set\n          if (owningUser == null) {\n            if (userIdUserMap.containsKey(walrusBucket.getUserId())) { // If the user was previously looked up, get it from the map\n              owningUser = userIdUserMap.get(walrusBucket.getUserId());\n            } else if (deletedUserIds.contains(walrusBucket.getUserId()) && accountIdAdminMap.containsKey(walrusBucket.getOwnerId())) {\n              // If the user was deleted and the admin for the account was previously looked up, get it from the map\n              LOG.warn(\"User ID \" + walrusBucket.getUserId() + \" does not exist. Changing the IAM ownership of bucket \"\n                  + walrusBucket.getBucketName() + \" to the account admin\");\n              owningUser = accountIdAdminMap.get(walrusBucket.getOwnerId());\n            } else if (deletedUserIds.contains(walrusBucket.getUserId()) && deletedAdminAccountIds.contains(walrusBucket.getOwnerId())) {\n              // If the user was deleted and the account was also deleted, transfer the IAM ownership to eucalyptus admin\n              LOG.warn(\"User ID \" + walrusBucket.getUserId() + \" and the account admin do not exist. Changing the IAM ownership of bucket \"\n                  + walrusBucket.getBucketName() + \" to the eucalyptus account admin\");\n              owningUser = getEucalyptusAdmin();\n            } else { // If none of the above conditions match, lookup for the user\n              if (walrusBucket.getUserId() != null) {\n                try {\n                  owningUser = Accounts.lookupPrincipalByUserId( walrusBucket.getUserId() );\n                  userIdUserMap.put(walrusBucket.getUserId(), owningUser);\n                } catch (AuthException e) { // User is deleted, lookup for the account admin\n                  deletedUserIds.add(walrusBucket.getUserId());\n                  try {\n                    owningUser = Accounts.lookupPrincipalByAccountNumber( owningAccount.getAccountNumber( ) );\n                    accountIdAdminMap.put(walrusBucket.getOwnerId(), owningUser);\n                    LOG.warn(\"User ID \" + walrusBucket.getUserId() + \" does not exist. Changing the IAM ownership of bucket \"\n                        + walrusBucket.getBucketName() + \" to the account admin\");\n                  } catch (AuthException ie) { // User and admin are both deleted, transfer the IAM ownership to the eucalyptus admin\n                    LOG.warn(\"User ID \" + walrusBucket.getUserId() + \" and the account admin do not exist. Changing the IAM ownership of bucket \"\n                        + walrusBucket.getBucketName() + \" to the eucalyptus account admin\");\n                    owningUser = getEucalyptusAdmin();\n                    deletedAdminAccountIds.add(walrusBucket.getOwnerId());\n                  }\n                }\n              } else { // If no owner ID was found for the bucket, set user to account admin or eucalyptus admin.\n                // This is to avoid insert null IDs into cached sets/maps\n                if (accountIdAdminMap.containsKey(walrusBucket.getOwnerId())) {\n                  // If the admin to the account was looked up previously, get it from the map\n                  LOG.warn(\"No user ID listed for bucket \" + walrusBucket.getBucketName()\n                      + \". Changing the IAM ownership of bucket to the account admin\");\n                  owningUser = accountIdAdminMap.get(walrusBucket.getBucketName());\n                } else { // Lookup up the admin if its not available in the map\n                  try {\n                    owningUser = Accounts.lookupPrincipalByAccountNumber( owningAccount.getAccountNumber( ) );\n                    accountIdAdminMap.put(walrusBucket.getOwnerId(), owningUser);\n                    LOG.warn(\"No user ID listed for bucket \" + walrusBucket.getBucketName()\n                        + \". Changing the IAM ownership of bucket to the account admin\");\n                  } catch (AuthException ie) {// User and admin are both deleted, transfer the IAM ownership to the eucalyptus admin\n                    LOG.warn(\"No user ID listed for bucket \" + walrusBucket.getBucketName()\n                        + \" and account admin does not exist. Changing the IAM ownership of bucket to the eucalyptus account admin\");\n                    owningUser = getEucalyptusAdmin();\n                  }\n                }\n              }\n            }\n          }\n          // Create a new instance of osg bucket and popluate all the fields\n          osgBucket = new Bucket();\n          osgBucket.setBucketName(walrusBucket.getBucketName());\n          osgBucket.withUuid(walrusBucket.getBucketName());\n          osgBucket.setBucketSize(walrusBucket.getBucketSize());\n          osgBucket.setLocation(walrusBucket.getLocation());\n          osgBucket.setLoggingEnabled(walrusBucket.getLoggingEnabled());\n          osgBucket.setState(BucketState.extant);\n          osgBucket.setLastState(BucketState.creating); // Set the last state after setting the current state\n          osgBucket.setTargetBucket(walrusBucket.getTargetBucket());\n          osgBucket.setTargetPrefix(walrusBucket.getTargetPrefix());\n          osgBucket.setVersioning(VersioningStatus.valueOf(walrusBucket.getVersioning()));\n          // Set the owner and IAM user fields\n          osgBucket.setOwnerCanonicalId(owningAccount.getCanonicalId());\n          osgBucket.setOwnerDisplayName(owningAccount.getAccountAlias());\n          osgBucket.setOwnerIamUserId(owningUser.getUserId());\n          osgBucket.setOwnerIamUserDisplayName(owningUser.getName());\n          // Generate access control policy\n          AccessControlList acl = new AccessControlList();\n          if (walrusSnapshotBuckets.contains(walrusBucket.getBucketName())) { // Dont set any grants for a snapshot bucket\n            acl.setGrants(new ArrayList<Grant>());\n          } else {\n            acl.setGrants(getBucketGrants(walrusBucket));\n          }\n          AccessControlPolicy acp = new AccessControlPolicy(new CanonicalUser(owningAccount.getCanonicalId(), owningAccount.getAccountAlias()), acl);\n          osgBucket.setAcl(acp);\n        } catch (Exception e) {\n          LOG.error(\"Failed to transform Walrus bucket \" + walrusBucket.getBucketName() + \" to objectstorage bucket\", e);\n          Exceptions.toUndeclared(\"Failed to transform Walrus bucket \" + walrusBucket.getBucketName() + \" to objectstorage bucket\", e);\n        }\n        return osgBucket;\n      }\n    };\n  }\n  /**\n   * This method transforms a Walrus object to an OSG object. While the appropriate fields are copied over from the Walrus entity to OSG entity when\n   * available, the process includes the following additional steps\n   * \n   * <li>For delete markers, generate the objectUuid, set the ownership to bucket owner and the leave the grants empty</li>\n   * \n   * <li>OSG refers to the backend object using the objectUuid. Use objectName of Walrus entity as the objectUuid in OSG entity. Second part of this\n   * step is to overwrite the objectKey with the objectName in the Walrus entity. This is executed in the {@code ModifyWalrusBuckets} stage</li>\n   * \n   * <li>If any account information is missing due to unavailable/deleted accounts, transfer the ownership of the object to the Eucalyptus account</li>\n   * \n   * <li>Since Walrus does not keep track of the user that created the object, transfer the IAM ownership to either the admin of the owning account if\n   * available or the Eucalyptus account admin</li>\n   * \n   * <li>Skip the grant if the grant owner cannot be retrieved</li>\n   * \n   * <li>Transfer the ownership of Snapshot objects to the blockstorage system account and configure the ACL to private</li>\n   */\n  public static Function<ObjectInfo, ObjectEntity> objectTransformationFunction() {\n    return new Function<ObjectInfo, ObjectEntity>() {\n      @Override\n      @Nullable\n      public ObjectEntity apply(@Nonnull ObjectInfo walrusObject) {\n        ObjectEntity osgObject = null;\n        try {\n          Bucket osgBucket = null;\n          if (bucketMap.containsKey(walrusObject.getBucketName())) {\n            osgBucket = bucketMap.get(walrusObject.getBucketName());\n          } else {\n            osgBucket = Transactions.find(new Bucket(walrusObject.getBucketName()));\n            bucketMap.put(walrusObject.getBucketName(), osgBucket);\n          }\n          osgObject = new ObjectEntity(osgBucket, walrusObject.getObjectKey(), walrusObject.getVersionId());\n          if (walrusObject.getDeleted() != null && walrusObject.getDeleted()) { // delete marker\n            osgObject.setObjectUuid(UUID.randomUUID().toString());\n            osgObject.setStorageClass(ObjectStorageProperties.STORAGE_CLASS.STANDARD.toString());\n            osgObject.setObjectModifiedTimestamp(walrusObject.getLastModified());\n            osgObject.setIsDeleteMarker(Boolean.TRUE);\n            osgObject.setSize(0L);\n            osgObject.setIsLatest(walrusObject.getLast());\n            osgObject.setState(ObjectState.extant);\n            // Set the ownership to bucket owner as the bucket owning account/user\n            osgObject.setOwnerCanonicalId(osgBucket.getOwnerCanonicalId());\n            osgObject.setOwnerDisplayName(osgBucket.getOwnerDisplayName());\n            osgObject.setOwnerIamUserId(osgBucket.getOwnerIamUserId());\n            osgObject.setOwnerIamUserDisplayName(osgBucket.getOwnerIamUserDisplayName());\n            // Generate empty access control policy, OSG should set it to private acl for the owner\n            AccessControlList acl = new AccessControlList();\n            acl.setGrants(new ArrayList<Grant>());\n            AccessControlPolicy acp =\n                new AccessControlPolicy(new CanonicalUser(osgBucket.getOwnerCanonicalId(), osgBucket.getOwnerDisplayName()), acl);\n            osgObject.setAcl(acp);\n          } else { // not a delete marker\n            AccountIdentifiers owningAccount = null;\n            User adminUser = null;\n            // Get the owning account\n            if (walrusSnapshotObjects.contains(walrusObject.getObjectKey())) {// If its a snapshot object, set the owner to blockstorage account\n              LOG.warn(\"Changing the ownership of snapshot object \" + walrusObject.getObjectKey() + \" to blockstorage system account\");\n              owningAccount = getBlockStorageAccount();\n              adminUser = getBlockStorageAdmin();\n            } else if (accountIdAccountMap.containsKey(walrusObject.getOwnerId())) { // If account was previously looked up, get it from the map\n              owningAccount = accountIdAccountMap.get(walrusObject.getOwnerId());\n            } else if (deletedAccountIds.contains(walrusObject.getOwnerId())) { // If the account is deleted, use the eucalyptus admin account\n              // Account is deleted, transfer the entire ownership to eucalyptus account admin\n              LOG.warn(\"Account ID \" + walrusObject.getOwnerId() + \" does not not exist. Changing the ownership of object \"\n                  + walrusObject.getObjectKey() + \" in bucket \" + walrusObject.getBucketName() + \" to eucalyptus admin account\");\n              owningAccount = getEucalyptusAccount();\n              adminUser = getEucalyptusAdmin();\n            } else if (noCanonicalIdAccountIds.contains(walrusObject.getOwnerId())) { // If canonical ID is missing, use eucalyptus admin account\n              LOG.warn(\"Account ID \" + walrusObject.getOwnerId() + \" does not have a canonical ID. Changing the ownership of object \"\n                  + walrusObject.getObjectKey() + \" in bucket \" + walrusObject.getBucketName() + \" to eucalyptus admin account\");\n              owningAccount = getEucalyptusAccount();\n              adminUser = getEucalyptusAdmin();\n            } else { // If none of the above conditions match, lookup for the account\n              try {\n                owningAccount = Accounts.lookupAccountIdentifiersById( walrusObject.getOwnerId() );\n                if (StringUtils.isBlank(owningAccount.getCanonicalId())) {\n                  LOG.warn(\"Account ID \" + walrusObject.getOwnerId() + \" does not have a canonical ID. Changing the ownership of object \"\n                      + walrusObject.getObjectKey() + \" in bucket \" + walrusObject.getBucketName() + \" to eucalyptus admin account\");\n                  owningAccount = getEucalyptusAccount();\n", "answers": ["                  adminUser = getEucalyptusAdmin();"], "length": 4345, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "cf6d3d1f0f07aeb719a37db4e37a1cd437cb894df0b12bdd"}
{"input": "", "context": "#region License\n// Copyright (c) 2013, ClearCanvas Inc.\n// All rights reserved.\n// http://www.clearcanvas.ca\n//\n// This file is part of the ClearCanvas RIS/PACS open source project.\n//\n// The ClearCanvas RIS/PACS open source project is free software: you can\n// redistribute it and/or modify it under the terms of the GNU General Public\n// License as published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// The ClearCanvas RIS/PACS open source project is distributed in the hope that it\n// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along with\n// the ClearCanvas RIS/PACS open source project.  If not, see\n// <http://www.gnu.org/licenses/>.\n#endregion\nusing System;\nusing ClearCanvas.Common;\nusing ClearCanvas.Common.Utilities;\nusing ClearCanvas.Desktop;\nusing ClearCanvas.Desktop.Trees;\nusing ClearCanvas.Desktop.Tables;\nusing ClearCanvas.Desktop.Actions;\nnamespace ClearCanvas.Ris.Client\n{\n    /// <summary>\n    /// Extension point for views onto <see cref=\"FolderExplorerComponent\"/>\n    /// </summary>\n    [ExtensionPoint]\n    public class FolderExplorerComponentViewExtensionPoint : ExtensionPoint<IApplicationComponentView>\n    {\n    }\n    /// <summary>\n    /// WorklistExplorerComponent class\n    /// </summary>\n    [AssociateView(typeof(FolderExplorerComponentViewExtensionPoint))]\n    public class FolderExplorerComponent : ApplicationComponent, IFolderExplorerComponent\n    {\n\t\tenum InitializationState\n\t\t{\n\t\t\tNotInitialized,\n\t\t\tInitializing,\n\t\t\tInitialized\n\t\t}\n\t\tprivate readonly FolderTreeRoot _folderTreeRoot;\n\t\tprivate FolderTreeNode _selectedTreeNode;\n        private event EventHandler _selectedFolderChanged;\n    \tprivate event EventHandler _intialized;\n\t\tprivate InitializationState _initializationState;\n        private readonly IFolderSystem _folderSystem;\n    \tprivate Timer _folderInvalidateTimer;\n    \tprivate readonly FolderExplorerGroupComponent _owner;\n        /// <summary>\n        /// Constructor\n        /// </summary>\n        public FolderExplorerComponent(IFolderSystem folderSystem, FolderExplorerGroupComponent owner)\n        {\n\t\t\t_folderTreeRoot = new FolderTreeRoot(this);\n            _folderSystem = folderSystem;\n        \t_owner = owner;\n        }\n\t\t#region IFolderExplorerComponent implementation\n    \t/// <summary>\n    \t/// Gets a value indicating whether this folder explorer has already been initialized.\n    \t/// </summary>\n    \tbool IFolderExplorerComponent.IsInitialized\n    \t{\n\t\t\tget { return IsInitialized; }\n    \t}\n    \t/// <summary>\n    \t/// Instructs the folder explorer to initialize (build the folder system).\n    \t/// </summary>\n    \tvoid IFolderExplorerComponent.Initialize()\n\t\t{\n\t\t\tInitialize();\n\t\t}\n\t\t/// <summary>\n\t\t/// Occurs when asynchronous initialization of this folder system has completed.\n\t\t/// </summary>\n\t\tevent EventHandler IFolderExplorerComponent.Initialized\n\t\t{\n\t\t\tadd { _intialized += value; }\n\t\t\tremove { _intialized -= value; }\n\t\t}\n\t\t/// <summary>\n\t\t/// Gets or sets the currently selected folder.\n\t\t/// </summary>\n\t\tIFolder IFolderExplorerComponent.SelectedFolder\n\t\t{\n\t\t\tget { return this.SelectedFolder; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tthis.SelectedFolder = value;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Invalidates all folders.\n\t\t/// </summary>\n    \tvoid IFolderExplorerComponent.InvalidateFolders()\n\t\t{\n\t\t\t// check initialized\n\t\t\tif (!IsInitialized)\n\t\t\t\treturn;\n\t\t\t// invalidate all folders, and update starting at the root\n\t\t\t_folderSystem.InvalidateFolders();\n\t\t}\n    \t/// <summary>\n    \t/// Gets the underlying folder system associated with this folder explorer.\n    \t/// </summary>\n    \tIFolderSystem IFolderExplorerComponent.FolderSystem\n\t\t{\n\t\t\tget { return _folderSystem; }\n\t\t}\n    \t/// <summary>\n    \t/// Occurs when the selected folder changes.\n    \t/// </summary>\n    \tevent EventHandler IFolderExplorerComponent.SelectedFolderChanged\n\t\t{\n\t\t\tadd { _selectedFolderChanged += value; }\n\t\t\tremove { _selectedFolderChanged -= value; }\n\t\t}\n\t\t/// <summary>\n\t\t/// Executes a search on this folder system.\n\t\t/// </summary>\n\t\t/// <param name=\"searchParams\"></param>\n\t\tvoid IFolderExplorerComponent.ExecuteSearch(SearchParams searchParams)\n\t\t{\n\t\t\t// check initialized\n\t\t\tif (!IsInitialized)\n\t\t\t\treturn;\n\t\t\tif (_folderSystem.SearchEnabled)\n\t\t\t\t_folderSystem.ExecuteSearch(searchParams);\n\t\t}\n\t\tvoid IFolderExplorerComponent.LaunchAdvancedSearchComponent()\n\t\t{\n\t\t\t_folderSystem.LaunchSearchComponent();\n\t\t}\n    \t/// <summary>\n    \t/// Gets the application component that displays the content of a folder for this folder system.\n    \t/// </summary>\n    \t/// <returns></returns>\n    \tIApplicationComponent IFolderExplorerComponent.GetContentComponent()\n    \t{\n    \t\treturn _folderSystem.GetContentComponent();\n    \t}\n    \t#endregion\n\t\t#region Application Component overrides\n\t\tpublic override void Start()\n        {\n\t\t\t// if the folder system needs immediate initialization, do that now\n\t\t\tif(!_folderSystem.LazyInitialize)\n\t\t\t{\n\t\t\t\tInitialize();\n\t\t\t}\n        \tbase.Start();\n        }\n    \tpublic override void Stop()\n\t\t{\n\t\t\tif (_folderInvalidateTimer != null)\n\t\t\t{\n\t\t\t\t_folderInvalidateTimer.Stop();\n\t\t\t\t_folderInvalidateTimer.Dispose();\n\t\t\t}\n\t\t\t// un-subscribe to events (important because the folderSystem object may be re-used by another explorer)\n\t\t\t_folderSystem.Folders.ItemAdded -= FolderAddedEventHandler;\n\t\t\t_folderSystem.Folders.ItemRemoved -= FolderRemovedEventHandler;\n\t\t\t_folderSystem.FoldersChanged -= FoldersChangedEventHandler;\n\t\t\t_folderSystem.FoldersInvalidated -= FoldersInvalidatedEventHandler;\n\t\t\t_folderSystem.FolderPropertiesChanged -= FolderPropertiesChangedEventHandler;\n\t\t\t_folderSystem.Dispose();\n\t\t\tbase.Stop();\n\t\t}\n        public override IActionSet ExportedActions\n        {\n            get \n            { \n                return _folderSystem.FolderTools == null\n                    ? new ActionSet()\n                    : _folderSystem.FolderTools.Actions; \n            }\n        }\n        #endregion\n        #region Presentation Model\n    \tpublic ITree FolderTree\n        {\n\t\t\tget { return _folderTreeRoot.GetSubTree(); }\n        }\n        public ISelection SelectedFolderTreeNode\n        {\n            get { return new Selection(_selectedTreeNode); }\n            set\n            {\n\t\t\t\tvar nodeToSelect = (FolderTreeNode)value.Item;\n                SelectFolder(nodeToSelect);\n            }\n        }\n        public ITable FolderContentsTable\n        {\n            get { return _selectedTreeNode == null ? null : _selectedTreeNode.Folder.ItemsTable; }\n        }\n        public event EventHandler SelectedFolderChanged\n        {\n", "answers": ["            add { _selectedFolderChanged += value; }"], "length": 666, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "2a81205ef1f5abf727ff63850ffd1162fadd475e92b2d3ca"}
{"input": "", "context": "package org.ovirt.engine.core.bll;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyList;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.when;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport org.junit.Test;\nimport org.mockito.Mockito;\nimport org.ovirt.engine.core.bll.context.EngineContext;\nimport org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy;\nimport org.ovirt.engine.core.common.action.ImportVmTemplateParameters;\nimport org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions;\nimport org.ovirt.engine.core.common.businessentities.StorageDomain;\nimport org.ovirt.engine.core.common.businessentities.StorageDomainStatic;\nimport org.ovirt.engine.core.common.businessentities.StorageDomainStatus;\nimport org.ovirt.engine.core.common.businessentities.StorageDomainType;\nimport org.ovirt.engine.core.common.businessentities.StoragePool;\nimport org.ovirt.engine.core.common.businessentities.VDSGroup;\nimport org.ovirt.engine.core.common.businessentities.VmDevice;\nimport org.ovirt.engine.core.common.businessentities.VmTemplate;\nimport org.ovirt.engine.core.common.businessentities.storage.DiskImage;\nimport org.ovirt.engine.core.common.businessentities.storage.StorageType;\nimport org.ovirt.engine.core.common.businessentities.storage.VolumeFormat;\nimport org.ovirt.engine.core.common.businessentities.storage.VolumeType;\nimport org.ovirt.engine.core.common.errors.EngineMessage;\nimport org.ovirt.engine.core.common.queries.VdcQueryParametersBase;\nimport org.ovirt.engine.core.common.queries.VdcQueryReturnValue;\nimport org.ovirt.engine.core.common.queries.VdcQueryType;\nimport org.ovirt.engine.core.common.utils.ValidationUtils;\nimport org.ovirt.engine.core.compat.Guid;\nimport org.ovirt.engine.core.dao.StorageDomainDao;\nimport org.ovirt.engine.core.dao.StorageDomainStaticDao;\nimport org.ovirt.engine.core.dao.StoragePoolDao;\nimport org.ovirt.engine.core.dao.VmTemplateDao;\nimport org.springframework.util.Assert;\npublic class ImportVmTemplateCommandTest {\n    @Test\n    public void insufficientDiskSpace() {\n        // The following is enough since the validation is mocked out anyway. Just want to make sure the flow in CDA is correct.\n        // Full test for the scenarios is done in the inherited class.\n        final ImportVmTemplateCommand command = setupVolumeFormatAndTypeTest(VolumeFormat.RAW, VolumeType.Preallocated, StorageType.NFS);\n        doReturn(false).when(command).validateSpaceRequirements(anyList());\n        assertFalse(command.canDoAction());\n    }\n    @Test\n    public void validVolumeFormatAndTypeCombinations() throws Exception {\n        assertValidVolumeInfoCombination(VolumeFormat.RAW, VolumeType.Preallocated, StorageType.NFS);\n        assertValidVolumeInfoCombination(VolumeFormat.RAW, VolumeType.Sparse, StorageType.NFS);\n        assertValidVolumeInfoCombination(VolumeFormat.COW, VolumeType.Sparse, StorageType.NFS);\n        assertValidVolumeInfoCombination(VolumeFormat.RAW, VolumeType.Preallocated, StorageType.ISCSI);\n        assertValidVolumeInfoCombination(VolumeFormat.COW, VolumeType.Sparse, StorageType.ISCSI);\n        assertValidVolumeInfoCombination(VolumeFormat.RAW, VolumeType.Sparse, StorageType.ISCSI);\n        assertValidVolumeInfoCombination(VolumeFormat.RAW, VolumeType.Preallocated, StorageType.FCP);\n        assertValidVolumeInfoCombination(VolumeFormat.COW, VolumeType.Sparse, StorageType.FCP);\n        assertValidVolumeInfoCombination(VolumeFormat.RAW, VolumeType.Sparse, StorageType.FCP);\n        assertValidVolumeInfoCombination(VolumeFormat.RAW, VolumeType.Preallocated, StorageType.LOCALFS);\n        assertValidVolumeInfoCombination(VolumeFormat.RAW, VolumeType.Sparse, StorageType.LOCALFS);\n        assertValidVolumeInfoCombination(VolumeFormat.COW, VolumeType.Sparse, StorageType.LOCALFS);\n    }\n    @Test\n    public void invalidVolumeFormatAndTypeCombinations() throws Exception {\n        assertInvalidVolumeInfoCombination(VolumeFormat.COW, VolumeType.Preallocated, StorageType.NFS);\n        assertInvalidVolumeInfoCombination(VolumeFormat.COW, VolumeType.Preallocated, StorageType.ISCSI);\n        assertInvalidVolumeInfoCombination(VolumeFormat.COW, VolumeType.Preallocated, StorageType.FCP);\n        assertInvalidVolumeInfoCombination(VolumeFormat.COW, VolumeType.Preallocated, StorageType.LOCALFS);\n        assertInvalidVolumeInfoCombination(VolumeFormat.RAW, VolumeType.Unassigned, StorageType.NFS);\n        assertInvalidVolumeInfoCombination(VolumeFormat.RAW, VolumeType.Unassigned, StorageType.ISCSI);\n        assertInvalidVolumeInfoCombination(VolumeFormat.RAW, VolumeType.Unassigned, StorageType.FCP);\n        assertInvalidVolumeInfoCombination(VolumeFormat.RAW, VolumeType.Unassigned, StorageType.LOCALFS);\n        assertInvalidVolumeInfoCombination(VolumeFormat.Unassigned, VolumeType.Preallocated, StorageType.NFS);\n        assertInvalidVolumeInfoCombination(VolumeFormat.Unassigned, VolumeType.Preallocated, StorageType.ISCSI);\n        assertInvalidVolumeInfoCombination(VolumeFormat.Unassigned, VolumeType.Preallocated, StorageType.FCP);\n        assertInvalidVolumeInfoCombination(VolumeFormat.Unassigned, VolumeType.Preallocated, StorageType.LOCALFS);\n    }\n    public void testValidateUniqueTemplateNameInDC() {\n        ImportVmTemplateCommand command =\n                setupVolumeFormatAndTypeTest(VolumeFormat.RAW, VolumeType.Preallocated, StorageType.NFS);\n        doReturn(true).when(command).isVmTemplateWithSameNameExist();\n        CanDoActionTestUtils.runAndAssertCanDoActionFailure(command,\n                EngineMessage.VM_CANNOT_IMPORT_TEMPLATE_NAME_EXISTS);\n    }\n    private void assertValidVolumeInfoCombination(VolumeFormat volumeFormat,\n            VolumeType volumeType,\n            StorageType storageType) {\n        CanDoActionTestUtils.runAndAssertCanDoActionSuccess(\n                setupVolumeFormatAndTypeTest(volumeFormat, volumeType, storageType));\n    }\n    private void assertInvalidVolumeInfoCombination(VolumeFormat volumeFormat,\n            VolumeType volumeType,\n            StorageType storageType) {\n        CanDoActionTestUtils.runAndAssertCanDoActionFailure(\n                setupVolumeFormatAndTypeTest(volumeFormat, volumeType, storageType),\n                EngineMessage.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED);\n    }\n    /**\n     * Prepare a command for testing the given volume format and type combination.\n     *\n     * @param volumeFormat\n     *            The volume format of the \"imported\" image.\n     * @param volumeType\n     *            The volume type of the \"imported\" image.\n     * @param storageType\n     *            The target domain's storage type.\n     * @return The command which can be called to test the given combination.\n     */\n    private ImportVmTemplateCommand setupVolumeFormatAndTypeTest(\n            VolumeFormat volumeFormat,\n            VolumeType volumeType,\n            StorageType storageType) {\n        ImportVmTemplateCommand command = spy(new ImportVmTemplateCommand(createParameters()){\n            @Override\n            public VDSGroup getVdsGroup() {\n                return null;\n            }\n        });\n        Backend backend = mock(Backend.class);\n        doReturn(backend).when(command).getBackend();\n        doReturn(false).when(command).isVmTemplateWithSameNameExist();\n        doReturn(true).when(command).isVDSGroupCompatible();\n        doReturn(true).when(command).validateNoDuplicateDiskImages(any(Iterable.class));\n        mockGetTemplatesFromExportDomainQuery(volumeFormat, volumeType, command);\n        mockStorageDomainStatic(command, storageType);\n        doReturn(mock(VmTemplateDao.class)).when(command).getVmTemplateDao();\n        doReturn(Mockito.mock(MacPoolManagerStrategy.class)).when(command).getMacPool();\n        mockStoragePool(command);\n        mockStorageDomains(command);\n        doReturn(true).when(command).setAndValidateDiskProfiles();\n        doReturn(true).when(command).setAndValidateCpuProfile();\n        doReturn(true).when(command).validateSpaceRequirements(anyList());\n        return command;\n    }\n    private static void mockStorageDomains(ImportVmTemplateCommand command) {\n        final ImportVmTemplateParameters parameters = command.getParameters();\n        final StorageDomainDao dao = mock(StorageDomainDao.class);\n        final StorageDomain srcDomain = new StorageDomain();\n        srcDomain.setStorageDomainType(StorageDomainType.ImportExport);\n        srcDomain.setStatus(StorageDomainStatus.Active);\n        when(dao.getForStoragePool(parameters.getSourceDomainId(), parameters.getStoragePoolId()))\n                .thenReturn(srcDomain);\n        final StorageDomain destDomain = new StorageDomain();\n        destDomain.setStorageDomainType(StorageDomainType.Data);\n        destDomain.setUsedDiskSize(0);\n        destDomain.setAvailableDiskSize(1000);\n        destDomain.setStatus(StorageDomainStatus.Active);\n        when(dao.getForStoragePool(parameters.getDestDomainId(), parameters.getStoragePoolId()))\n                .thenReturn(destDomain);\n        doReturn(dao).when(command).getStorageDomainDao();\n    }\n    private static void mockStoragePool(ImportVmTemplateCommand command) {\n        final StoragePoolDao dao = mock(StoragePoolDao.class);\n        final StoragePool pool = new StoragePool();\n        pool.setId(command.getParameters().getStoragePoolId());\n        when(dao.get(any(Guid.class))).thenReturn(pool);\n        doReturn(dao).when(command).getStoragePoolDao();\n    }\n    private static void mockGetTemplatesFromExportDomainQuery(VolumeFormat volumeFormat,\n            VolumeType volumeType,\n            ImportVmTemplateCommand command) {\n        final VdcQueryReturnValue result = new VdcQueryReturnValue();\n        Map<VmTemplate, List<DiskImage>> resultMap = new HashMap<VmTemplate, List<DiskImage>>();\n        DiskImage image = new DiskImage();\n        image.setActualSizeInBytes(2);\n        image.setvolumeFormat(volumeFormat);\n        image.setVolumeType(volumeType);\n        resultMap.put(new VmTemplate(), Arrays.asList(image));\n        result.setReturnValue(resultMap);\n        result.setSucceeded(true);\n        when(command.getBackend().runInternalQuery(eq(VdcQueryType.GetTemplatesFromExportDomain),\n                any(VdcQueryParametersBase.class), any(EngineContext.class))).thenReturn(result);\n    }\n    private static void mockStorageDomainStatic(\n            ImportVmTemplateCommand command,\n            StorageType storageType) {\n        final StorageDomainStaticDao dao = mock(StorageDomainStaticDao.class);\n        final StorageDomainStatic domain = new StorageDomainStatic();\n        domain.setStorageType(storageType);\n        when(dao.get(any(Guid.class))).thenReturn(domain);\n        doReturn(dao).when(command).getStorageDomainStaticDao();\n    }\n    protected ImportVmTemplateParameters createParameters() {\n        VmTemplate t = new VmTemplate();\n        t.setName(\"testTemplate\");\n        final ImportVmTemplateParameters p =\n                new ImportVmTemplateParameters(Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), t);\n        return p;\n    }\n    private final String string100 = \"0987654321\" +\n            \"0987654321\" +\n            \"0987654321\" +\n            \"0987654321\" +\n            \"0987654321\" +\n            \"0987654321\" +\n            \"0987654321\" +\n            \"0987654321\" +\n            \"0987654321\" +\n            \"0987654321\";\n    @Test\n    public void testValidateNameSizeImportAsCloned() {\n        checkTemplateName(true, string100);\n    }\n    @Test\n    public void testDoNotValidateNameSizeImport() {\n        checkTemplateName(false, string100);\n    }\n    @Test\n    public void testValidateNameSpecialCharImportAsCloned() {\n        checkTemplateName(true, \"vm_$%$#%#$\");\n    }\n    @Test\n    public void testDoNotValidateNameSpecialCharImport() {\n        checkTemplateName(false, \"vm_$%$#%#$\");\n    }\n    private void checkTemplateName(boolean isImportAsNewEntity, String name) {\n", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "length": 616, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "b8a0388946b2d3e0cf2a7f1db681ccb8c70cc44275b2f173"}
{"input": "", "context": "\n// This file has been generated by the GUI designer. Do not modify.\nnamespace BlinkStickClient\n{\n\tpublic partial class CpuEditorWidget\n\t{\n\t\tprivate global::Gtk.VBox vbox2;\n\t\t\n\t\tprivate global::Gtk.Frame frame1;\n\t\t\n\t\tprivate global::Gtk.Alignment GtkAlignment;\n\t\t\n\t\tprivate global::Gtk.VBox vbox3;\n\t\t\n\t\tprivate global::Gtk.RadioButton radiobuttonMonitor;\n\t\t\n\t\tprivate global::Gtk.Label labelMonitorHint;\n\t\t\n\t\tprivate global::Gtk.RadioButton radiobuttonAlert;\n\t\t\n\t\tprivate global::Gtk.Label labelAlertHint;\n\t\t\n\t\tprivate global::Gtk.Alignment alignment2;\n\t\t\n\t\tprivate global::Gtk.Table table1;\n\t\t\n\t\tprivate global::Gtk.ComboBox comboboxTriggerType;\n\t\t\n\t\tprivate global::Gtk.Label labelCheck;\n\t\t\n\t\tprivate global::Gtk.Label labelMinutes;\n\t\t\n\t\tprivate global::Gtk.Label labelPercent;\n\t\t\n\t\tprivate global::Gtk.Label labelWhen;\n\t\t\n\t\tprivate global::Gtk.SpinButton spinbuttonCheckPeriod;\n\t\t\n\t\tprivate global::Gtk.SpinButton spinbuttonCpuPercent;\n\t\t\n\t\tprivate global::Gtk.Label GtkLabel2;\n\t\t\n\t\tprivate global::Gtk.Frame frame3;\n\t\t\n\t\tprivate global::Gtk.Alignment GtkAlignment1;\n\t\t\n\t\tprivate global::Gtk.HBox hbox1;\n\t\t\n\t\tprivate global::Gtk.Label labelCurrentValue;\n\t\t\n\t\tprivate global::Gtk.Button buttonRefresh;\n\t\t\n\t\tprivate global::Gtk.Label GtkLabel3;\n\t\tprotected virtual void Build ()\n\t\t{\n\t\t\tglobal::Stetic.Gui.Initialize (this);\n\t\t\t// Widget BlinkStickClient.CpuEditorWidget\n\t\t\tglobal::Stetic.BinContainer.Attach (this);\n\t\t\tthis.Name = \"BlinkStickClient.CpuEditorWidget\";\n\t\t\t// Container child BlinkStickClient.CpuEditorWidget.Gtk.Container+ContainerChild\n\t\t\tthis.vbox2 = new global::Gtk.VBox ();\n\t\t\tthis.vbox2.Name = \"vbox2\";\n\t\t\tthis.vbox2.Spacing = 6;\n\t\t\t// Container child vbox2.Gtk.Box+BoxChild\n\t\t\tthis.frame1 = new global::Gtk.Frame ();\n\t\t\tthis.frame1.Name = \"frame1\";\n\t\t\tthis.frame1.ShadowType = ((global::Gtk.ShadowType)(0));\n\t\t\t// Container child frame1.Gtk.Container+ContainerChild\n\t\t\tthis.GtkAlignment = new global::Gtk.Alignment (0F, 0F, 1F, 1F);\n\t\t\tthis.GtkAlignment.Name = \"GtkAlignment\";\n\t\t\tthis.GtkAlignment.LeftPadding = ((uint)(12));\n\t\t\tthis.GtkAlignment.TopPadding = ((uint)(12));\n\t\t\t// Container child GtkAlignment.Gtk.Container+ContainerChild\n\t\t\tthis.vbox3 = new global::Gtk.VBox ();\n\t\t\tthis.vbox3.Name = \"vbox3\";\n\t\t\tthis.vbox3.Spacing = 6;\n\t\t\t// Container child vbox3.Gtk.Box+BoxChild\n\t\t\tthis.radiobuttonMonitor = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString (\"Monitor\"));\n\t\t\tthis.radiobuttonMonitor.CanFocus = true;\n\t\t\tthis.radiobuttonMonitor.Name = \"radiobuttonMonitor\";\n\t\t\tthis.radiobuttonMonitor.DrawIndicator = true;\n\t\t\tthis.radiobuttonMonitor.UseUnderline = true;\n\t\t\tthis.radiobuttonMonitor.Group = new global::GLib.SList (global::System.IntPtr.Zero);\n\t\t\tthis.vbox3.Add (this.radiobuttonMonitor);\n\t\t\tglobal::Gtk.Box.BoxChild w1 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.radiobuttonMonitor]));\n\t\t\tw1.Position = 0;\n\t\t\tw1.Expand = false;\n\t\t\tw1.Fill = false;\n\t\t\t// Container child vbox3.Gtk.Box+BoxChild\n\t\t\tthis.labelMonitorHint = new global::Gtk.Label ();\n\t\t\tthis.labelMonitorHint.Name = \"labelMonitorHint\";\n\t\t\tthis.labelMonitorHint.Xpad = 20;\n\t\t\tthis.labelMonitorHint.Xalign = 0F;\n\t\t\tthis.labelMonitorHint.LabelProp = global::Mono.Unix.Catalog.GetString (\"<i>Uses pattern\\'s first animation color to display 0% and second to transition to\" +\n\t\t\t\" 100%. Define a pattern with two Set Color animations for this to take effect</i\" +\n\t\t\t\">\");\n\t\t\tthis.labelMonitorHint.UseMarkup = true;\n\t\t\tthis.labelMonitorHint.Wrap = true;\n\t\t\tthis.vbox3.Add (this.labelMonitorHint);\n\t\t\tglobal::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.labelMonitorHint]));\n\t\t\tw2.Position = 1;\n\t\t\tw2.Expand = false;\n\t\t\tw2.Fill = false;\n\t\t\t// Container child vbox3.Gtk.Box+BoxChild\n\t\t\tthis.radiobuttonAlert = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString (\"Alert\"));\n\t\t\tthis.radiobuttonAlert.CanFocus = true;\n\t\t\tthis.radiobuttonAlert.Name = \"radiobuttonAlert\";\n\t\t\tthis.radiobuttonAlert.DrawIndicator = true;\n\t\t\tthis.radiobuttonAlert.UseUnderline = true;\n\t\t\tthis.radiobuttonAlert.Group = this.radiobuttonMonitor.Group;\n\t\t\tthis.vbox3.Add (this.radiobuttonAlert);\n\t\t\tglobal::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.radiobuttonAlert]));\n\t\t\tw3.Position = 2;\n\t\t\tw3.Expand = false;\n\t\t\tw3.Fill = false;\n\t\t\t// Container child vbox3.Gtk.Box+BoxChild\n\t\t\tthis.labelAlertHint = new global::Gtk.Label ();\n\t\t\tthis.labelAlertHint.Name = \"labelAlertHint\";\n\t\t\tthis.labelAlertHint.Xpad = 20;\n\t\t\tthis.labelAlertHint.Xalign = 0F;\n\t\t\tthis.labelAlertHint.LabelProp = global::Mono.Unix.Catalog.GetString (\"<i>When event occurs triggers pattern playback</i>\");\n\t\t\tthis.labelAlertHint.UseMarkup = true;\n\t\t\tthis.labelAlertHint.Wrap = true;\n\t\t\tthis.vbox3.Add (this.labelAlertHint);\n\t\t\tglobal::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox3 [this.labelAlertHint]));\n\t\t\tw4.Position = 3;\n\t\t\tw4.Expand = false;\n\t\t\tw4.Fill = false;\n\t\t\t// Container child vbox3.Gtk.Box+BoxChild\n\t\t\tthis.alignment2 = new global::Gtk.Alignment (0.5F, 0.5F, 1F, 1F);\n\t\t\tthis.alignment2.Name = \"alignment2\";\n\t\t\tthis.alignment2.LeftPadding = ((uint)(40));\n\t\t\t// Container child alignment2.Gtk.Container+ContainerChild\n\t\t\tthis.table1 = new global::Gtk.Table (((uint)(2)), ((uint)(5)), false);\n\t\t\tthis.table1.Name = \"table1\";\n\t\t\tthis.table1.RowSpacing = ((uint)(6));\n\t\t\tthis.table1.ColumnSpacing = ((uint)(6));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t\t\tthis.comboboxTriggerType = global::Gtk.ComboBox.NewText ();\n\t\t\tthis.comboboxTriggerType.AppendText (global::Mono.Unix.Catalog.GetString (\"increases above\"));\n\t\t\tthis.comboboxTriggerType.AppendText (global::Mono.Unix.Catalog.GetString (\"drops below\"));\n\t\t\tthis.comboboxTriggerType.Name = \"comboboxTriggerType\";\n\t\t\tthis.table1.Add (this.comboboxTriggerType);\n\t\t\tglobal::Gtk.Table.TableChild w5 = ((global::Gtk.Table.TableChild)(this.table1 [this.comboboxTriggerType]));\n\t\t\tw5.LeftAttach = ((uint)(1));\n\t\t\tw5.RightAttach = ((uint)(2));\n\t\t\tw5.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw5.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t\t\tthis.labelCheck = new global::Gtk.Label ();\n\t\t\tthis.labelCheck.Name = \"labelCheck\";\n\t\t\tthis.labelCheck.Xalign = 1F;\n\t\t\tthis.labelCheck.LabelProp = global::Mono.Unix.Catalog.GetString (\"Check every\");\n\t\t\tthis.table1.Add (this.labelCheck);\n\t\t\tglobal::Gtk.Table.TableChild w6 = ((global::Gtk.Table.TableChild)(this.table1 [this.labelCheck]));\n\t\t\tw6.TopAttach = ((uint)(1));\n\t\t\tw6.BottomAttach = ((uint)(2));\n\t\t\tw6.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw6.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t\t\tthis.labelMinutes = new global::Gtk.Label ();\n\t\t\tthis.labelMinutes.Name = \"labelMinutes\";\n\t\t\tthis.labelMinutes.Xalign = 0F;\n\t\t\tthis.labelMinutes.LabelProp = global::Mono.Unix.Catalog.GetString (\"min\");\n\t\t\tthis.table1.Add (this.labelMinutes);\n\t\t\tglobal::Gtk.Table.TableChild w7 = ((global::Gtk.Table.TableChild)(this.table1 [this.labelMinutes]));\n\t\t\tw7.TopAttach = ((uint)(1));\n\t\t\tw7.BottomAttach = ((uint)(2));\n\t\t\tw7.LeftAttach = ((uint)(3));\n\t\t\tw7.RightAttach = ((uint)(4));\n\t\t\tw7.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw7.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t\t\tthis.labelPercent = new global::Gtk.Label ();\n\t\t\tthis.labelPercent.Name = \"labelPercent\";\n\t\t\tthis.labelPercent.Xalign = 0F;\n\t\t\tthis.labelPercent.LabelProp = global::Mono.Unix.Catalog.GetString (\"%\");\n\t\t\tthis.table1.Add (this.labelPercent);\n\t\t\tglobal::Gtk.Table.TableChild w8 = ((global::Gtk.Table.TableChild)(this.table1 [this.labelPercent]));\n\t\t\tw8.LeftAttach = ((uint)(3));\n\t\t\tw8.RightAttach = ((uint)(4));\n\t\t\tw8.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw8.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t\t\tthis.labelWhen = new global::Gtk.Label ();\n\t\t\tthis.labelWhen.Name = \"labelWhen\";\n\t\t\tthis.labelWhen.Xalign = 1F;\n\t\t\tthis.labelWhen.LabelProp = global::Mono.Unix.Catalog.GetString (\"When\");\n\t\t\tthis.table1.Add (this.labelWhen);\n\t\t\tglobal::Gtk.Table.TableChild w9 = ((global::Gtk.Table.TableChild)(this.table1 [this.labelWhen]));\n\t\t\tw9.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw9.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t\t\tthis.spinbuttonCheckPeriod = new global::Gtk.SpinButton (1D, 120D, 1D);\n\t\t\tthis.spinbuttonCheckPeriod.CanFocus = true;\n\t\t\tthis.spinbuttonCheckPeriod.Name = \"spinbuttonCheckPeriod\";\n\t\t\tthis.spinbuttonCheckPeriod.Adjustment.PageIncrement = 10D;\n\t\t\tthis.spinbuttonCheckPeriod.ClimbRate = 1D;\n\t\t\tthis.spinbuttonCheckPeriod.Numeric = true;\n\t\t\tthis.spinbuttonCheckPeriod.Value = 1D;\n\t\t\tthis.table1.Add (this.spinbuttonCheckPeriod);\n\t\t\tglobal::Gtk.Table.TableChild w10 = ((global::Gtk.Table.TableChild)(this.table1 [this.spinbuttonCheckPeriod]));\n", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "length": 650, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "6261fc22209c7ae19b5098f7004853c527e546aedd74f793"}
{"input": "", "context": "# -*- encoding: utf-8 -*-\n#\n# A scripting wrapper for NZBGet's Post Processing Scripting\n#\n# Copyright (C) 2014 Chris Caron <lead2gold@gmail.com>\n#\n# This program is free software; you can redistribute it and/or modify it\n# under the terms of the GNU Lesser General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Lesser General Public License for more details.\n#\n\"\"\"\nThis class was intended to make writing NZBGet Scripts easier to manage and\nwrite by handling the common error handling and provide the most reused code\nin a re-usable container. It was initially written to work with NZBGet v13\nbut provides most backwards compatibility.\nIt was designed to be inheritied as a base class requiring you to only write\nthe main() function which should preform the task you are intending.\nIt looks after fetching all of the environment variables and will parse\nthe meta information out of the NZB-File.\nIt allows you to set variables that other scripts can access if they need to\nusing the set() and get() variables. This is done through a simply self\nmaintained hash table type structure within a sqlite database. All the\nwrapper functions are already written.  If you call 'set('MYKEY', 1')\nyou can call get('MYKEY') in another script and continue working\npush() functions written to pass information back to nzbget using it's\nprocessing engine.\nall exceptions are now automatically handled and logging can be easily\nchanged from stdout, to stderr or to a file.\nTest suite built in (using python-nose) to ensure old global variables\nwill still work as well as make them easier to access and manipulate.\nSome inline documentation was based on content provided at:\n   - http://nzbget.net/Extension_scripts\n############################################################################\nPost Process Script Usage/Example\n############################################################################\n#############################################################################\n### NZBGET POST-PROCESSING SCRIPT                                         ###\n#\n# Describe your Post-Process Script here\n# Author: Chris Caron <lead2gold@gmail.com>\n#\n############################################################################\n### OPTIONS                                                              ###\n#\n# Enable NZBGet debug logging (yes, no)\n# Debug=no\n#\n### NZBGET POST-PROCESSING SCRIPT                                         ###\n#############################################################################\nfrom nzbget import PostProcessScript\n# Now define your class while inheriting the rest\nclass MyPostProcessScript(PostProcessScript):\n    def main(self, *args, **kwargs):\n        # Version Checking, Environment Variables Present, etc\n        if not self.validate():\n            # No need to document a failure, validate will do that\n            # on the reason it failed anyway\n            return False\n        # write all of your code here you would have otherwise put in the\n        # script\n        # All system environment variables (NZBOP_.*) as well as Post\n        # Process script specific content (NZBPP_.*)\n        # following dictionary (without the NZBOP_ or NZBPP_ prefix):\n        print('TEMPDIR (directory is: %s' % self.get('TEMPDIR'))\n        print('DIRECTORY %s' self.get('DIRECTORY'))\n        print('NZBNAME %s' self.get('NZBNAME'))\n        print('NZBFILENAME %s' self.get('NZBFILENAME'))\n        print('CATEGORY %s' self.get('CATEGORY'))\n        print('TOTALSTATUS %s' self.get('TOTALSTATUS'))\n        print('STATUS %s' self.get('STATUS'))\n        print('SCRIPTSTATUS %s' self.get('SCRIPTSTATUS'))\n        # Set any variable you want by any key.  Note that if you use\n        # keys that were defined by the system (such as CATEGORY, DIRECTORY,\n        # etc, you may have some undesirable results.  Try to avoid reusing\n        # system variables already defined (identified above):\n        self.set('MY_KEY', 'MY_VALUE')\n        # You can fetch it back; this will also set an entry in  the\n        # sqlite database for each hash references that can be pulled from\n        # another script that simply calls self.get('MY_KEY')\n        print(self.get('MY_KEY')) # prints MY_VALUE\n        # You can also use push() which is similar to set()\n        # except that it interacts with the NZBGet Server and does not use\n        # the sqlite database. This can only be reached across other\n        # scripts if the calling application is NZBGet itself\n        self.push('ANOTHER_KEY', 'ANOTHER_VALUE')\n        # You can still however locally retrieve what you set using push()\n        # with the get() function\n        print(self.get('ANOTHER_KEY')) # prints ANOTHER_VALUE\n        # Your script configuration files (NZBPP_.*) are here in this\n        # dictionary (again without the NZBPP_ prefix):\n        # assume you defined `Debug=no` in the first 10K of your\n        # PostProcessScript NZBGet translates this to `NZBPP_DEBUG` which can\n        # be retrieved as follows:\n        print('DEBUG %s' self.get('DEBUG'))\n        # Returns have been made easy.  Just return:\n        #   * True if everything was successful\n        #   * False if there was a problem\n        #   * None if you want to report that you've just gracefully\n                  skipped processing (this is better then False)\n                  in some circumstances. This is neither a failure or a\n                  success status.\n        # Feel free to use the actual exit codes as well defined by\n        # NZBGet on their website.  They have also been defined here\n        # from nzbget import EXIT_CODE\n        return True\n# Call your script as follows:\nif __name__ == \"__main__\":\n    from sys import exit\n    # Create an instance of your Script\n    myscript = MyPostProcessScript()\n    # call run() and exit() using it's returned value\n    exit(myscript.run())\n\"\"\"\nimport re\nimport six\nfrom os import chdir\nfrom os import environ\nfrom os.path import isdir\nfrom os.path import join\nfrom os.path import splitext\nfrom os.path import basename\nfrom os.path import abspath\nfrom socket import error as SocketError\n# Relative Includes\nfrom .ScriptBase import ScriptBase\nfrom .ScriptBase import Health\nfrom .ScriptBase import SCRIPT_MODE\nfrom .ScriptBase import NZBGET_BOOL_FALSE\nfrom .Utils import os_path_split as split\nfrom .PostProcessCommon import OBFUSCATED_PATH_RE\nfrom .PostProcessCommon import OBFUSCATED_FILE_RE\nfrom .PostProcessCommon import PAR_STATUS\nfrom .PostProcessCommon import UNPACK_STATUS\nclass TOTAL_STATUS(object):\n    \"\"\"Cumulative (Total) Status of NZB Processing\n    \"\"\"\n    # everything OK\n    SUCCESS = 'SUCCESS'\n    # download is damaged but probably can be repaired; user intervention is\n    # required;\n    WARNING = 'WARNING'\n    # download has failed or a serious error occurred during\n    # post-processing (unpack, par);\n    FAILURE = 'FAILURE'\n    # download was deleted; post-processing scripts are usually not called in\n    # this case; however it's possible to force calling scripts with command\n    # \"post-process again\".\n    DELETED = 'DELETED'\n# Environment variable that prefixes all NZBGET options being passed into\n# scripts with respect to the NZB-File (used in Post Processing Scripts)\nPOSTPROC_ENVIRO_ID = 'NZBPP_'\n# Precompile Regulare Expression for Speed\nPOSTPROC_OPTS_RE = re.compile('^%s([A-Z0-9_]+)$' % POSTPROC_ENVIRO_ID)\nclass PostProcessScript(ScriptBase):\n    \"\"\"POST PROCESS mode is called after the unpack stage\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n        # Multi-Script Support\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n        if not hasattr(self, 'script_dict'):\n            # Only define once\n            self.script_dict = {}\n        self.script_dict[SCRIPT_MODE.POSTPROCESSING] = self\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n        # Initialize Parent\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n        super(PostProcessScript, self).__init__(*args, **kwargs)\n    def postprocess_init(self, *args, **kwargs):\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n        # Fetch Script Specific Arguments\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n        directory = kwargs.get('directory')\n        nzbname = kwargs.get('nzbname')\n        nzbfilename = kwargs.get('nzbfilename')\n        category = kwargs.get('category')\n        totalstatus = kwargs.get('totalstatus')\n        status = kwargs.get('status')\n        scriptstatus = kwargs.get('scriptstatus')\n        parse_nzbfile = kwargs.get('parse_nzbfile', True)\n        use_database = kwargs.get('use_database', True)\n        # Support Depricated Variables\n        parstatus = kwargs.get('parstatus')\n        unpackstatus = kwargs.get('unpackstatus')\n        # Fetch/Load Post Process Script Configuration\n        script_config = \\\n            dict([(POSTPROC_OPTS_RE.match(k).group(1), v.strip())\n                 for (k, v) in environ.items() if POSTPROC_OPTS_RE.match(k)])\n        if self.vvdebug:\n            # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n            # Print Global Script Varables to help debugging process\n            # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n            for k, v in script_config.items():\n                self.logger.vvdebug('%s%s=%s' % (POSTPROC_ENVIRO_ID, k, v))\n        # Merge Script Configuration With System Config\n        script_config.update(self.system)\n        self.system = script_config\n        # self.directory\n        # This is the path to the destination directory for downloaded files.\n        if directory is None:\n            self.directory = environ.get(\n                '%sDIRECTORY' % POSTPROC_ENVIRO_ID,\n            )\n            _final_directory = environ.get(\n                '%sFINALDIR' % POSTPROC_ENVIRO_ID,\n            )\n            if self.directory and not isdir(self.directory):\n                if _final_directory and isdir(_final_directory):\n                    # adjust path\n                    self.directory = _final_directory\n        else:\n            self.directory = directory\n        if self.directory:\n            self.directory = abspath(self.directory)\n        # self.nzbname\n        # User-friendly name of processed nzb-file as it is displayed by the\n        # program.  The file path and extension are removed.  If download was\n        # renamed, this parameter reflects the new name.\n        if nzbname is None:\n            self.nzbname = environ.get(\n                '%sNZBNAME' % POSTPROC_ENVIRO_ID,\n            )\n        else:\n            self.nzbname = nzbname\n        # self.nzbfilename\n        # Name of processed nzb-file. If the file was added from incoming\n        # nzb-directory, this is a full file name, including path and\n        # extension. If the file was added from web-interface, it's only the\n        # file name with extension. If the file was added via RPC-API (method\n        # append), this can be any string but the use of actual file name is\n        # recommended for developers.\n        if nzbfilename is None:\n            self.nzbfilename = environ.get(\n                '%sNZBFILENAME' % POSTPROC_ENVIRO_ID,\n            )\n        else:\n            self.nzbfilename = nzbfilename\n        # self.category\n        # Category assigned to nzb-file (can be empty string).\n        if category is None:\n            self.category = environ.get(\n                '%sCATEGORY' % POSTPROC_ENVIRO_ID,\n            )\n        else:\n            self.category = category\n        # self.totalstatus\n        # Total status of the processing of the NZB-File.  This value\n        # includes the result from previous scripts that may have ran\n        # before this one.\n        if totalstatus is None:\n            self.totalstatus = environ.get(\n                '%sTOTALSTATUS' % POSTPROC_ENVIRO_ID,\n            )\n        else:\n            self.totalstatus = totalstatus\n        # self.status\n        # Complete status info for nzb-file: it consists of total status and\n        # status detail separated with slash. There are many combinations.\n        # Just few examples:\n        #         FAILURE/HEALTH\n        #         FAILURE/PAR\n        #         FAILURE/UNPACK\n        #         WARNING/REPAIRABLE\n        #         WARNING/SPACE\n        #         WARNING/PASSWORD\n        #         SUCCESS/ALL\n        #         SUCCESS/UNPACK\n        #\n        # For the complete list see description of method history in RPC API\n        # reference: http://nzbget.net/RPC_API_reference\n        if status is None:\n            self.status = Health(environ.get(\n                '%sSTATUS' % POSTPROC_ENVIRO_ID,\n            ))\n        else:\n            self.status = Health(status)\n        # self.scriptstatus\n        # Summary status of the scripts executed before the current one\n        if scriptstatus is None:\n            self.scriptstatus = environ.get(\n                '%sSCRIPTSTATUS' % POSTPROC_ENVIRO_ID,\n            )\n        else:\n            self.scriptstatus = scriptstatus\n        # self.parstatus (NZBGet < v13) - Depreciated\n        # Result of par-check\n        if parstatus is None:\n            self.parstatus = environ.get(\n                '%sPARSTATUS' % POSTPROC_ENVIRO_ID,\n                # Default\n                PAR_STATUS.SKIPPED,\n            )\n        else:\n            self.parstatus = parstatus\n        # self.unpackstatus (NZBGet < v13) - Depreciated\n        # Result of unpack\n        if unpackstatus is None:\n            self.unpackstatus = environ.get(\n                '%sUNPACKSTATUS' % POSTPROC_ENVIRO_ID,\n                # Default\n                UNPACK_STATUS.SKIPPED,\n            )\n        else:\n            self.unpackstatus = unpackstatus\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n        # Error Handling\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n        if self.nzbfilename:\n            # absolute path names\n            self.nzbfilename = abspath(self.nzbfilename)\n            if parse_nzbfile:\n                # Initialize information fetched from NZB-File\n                # We intentionally allow existing nzbheaders to over-ride\n                # any found in the nzbfile\n                self.nzbheaders = \\\n                    self.parse_nzbfile(self.nzbfilename, check_queued=True)\n                self.nzbheaders.update(self.pull_dnzb())\n        if self.directory:\n            # absolute path names\n            self.directory = abspath(self.directory)\n        if not (self.directory and isdir(self.directory)):\n            self.logger.debug(\n                'Process directory is missing: %s' % self.directory)\n        else:\n            try:\n                chdir(self.directory)\n            except OSError:\n                self.logger.debug(\n                    'Process directory is not accessible: %s' % self.directory)\n        # Total Status\n        if not isinstance(self.totalstatus, six.string_types):\n            self.totalstatus = TOTAL_STATUS.SUCCESS\n        # Par Status\n        if not isinstance(self.parstatus, int):\n            try:\n                self.parstatus = int(self.parstatus)\n            except:\n                self.parstatus = PAR_STATUS.SKIPPED\n        # Unpack Status\n        if not isinstance(self.unpackstatus, int):\n            try:\n                self.unpackstatus = int(self.unpackstatus)\n            except:\n                self.unpackstatus = UNPACK_STATUS.SKIPPED\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n        # Enforce system/global variables for script processing\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n        self.system['DIRECTORY'] = self.directory\n        if self.directory is not None:\n            environ['%sDIRECTORY' % POSTPROC_ENVIRO_ID] = \\\n                self.directory\n        self.system['NZBNAME'] = self.nzbname\n        if self.nzbname is not None:\n            environ['%sNZBNAME' % POSTPROC_ENVIRO_ID] = \\\n                self.nzbname\n        self.system['NZBFILENAME'] = self.nzbfilename\n        if self.nzbfilename is not None:\n            environ['%sNZBFILENAME' % POSTPROC_ENVIRO_ID] = \\\n                self.nzbfilename\n        self.system['CATEGORY'] = self.category\n        if self.category is not None:\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "length": 1764, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "a5e1e43a793649afc91e7bd083f0d034f0df3e24509c448e"}
{"input": "", "context": "/*\n  Copyright (C) 2008-2011 Jeroen Frijters\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n  Jeroen Frijters\n  jeroen@frijters.net\n  \n*/\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing IKVM.Reflection.Impl;\nusing IKVM.Reflection.Metadata;\nusing IKVM.Reflection.Writer;\nnamespace IKVM.Reflection.Emit\n{\n\tpublic sealed class GenericTypeParameterBuilder : TypeInfo\n\t{\n\t\tprivate readonly string name;\n\t\tprivate readonly TypeBuilder type;\n\t\tprivate readonly MethodBuilder method;\n\t\tprivate readonly int paramPseudoIndex;\n\t\tprivate readonly int position;\n\t\tprivate int typeToken;\n\t\tprivate Type baseType;\n\t\tprivate GenericParameterAttributes attr;\n\t\tinternal GenericTypeParameterBuilder(string name, TypeBuilder type, int position)\n\t\t\t: this(name, type, null, position, Signature.ELEMENT_TYPE_VAR)\n\t\t{\n\t\t}\n\t\tinternal GenericTypeParameterBuilder(string name, MethodBuilder method, int position)\n\t\t\t: this(name, null, method, position, Signature.ELEMENT_TYPE_MVAR)\n\t\t{\n\t\t}\n\t\tprivate GenericTypeParameterBuilder(string name, TypeBuilder type, MethodBuilder method, int position, byte sigElementType)\n\t\t\t: base(sigElementType)\n\t\t{\n\t\t\tthis.name = name;\n\t\t\tthis.type = type;\n\t\t\tthis.method = method;\n\t\t\tthis.position = position;\n\t\t\tGenericParamTable.Record rec = new GenericParamTable.Record();\n\t\t\trec.Number = (short)position;\n\t\t\trec.Flags = 0;\n\t\t\trec.Owner = type != null ? type.MetadataToken : method.MetadataToken;\n\t\t\trec.Name = this.ModuleBuilder.Strings.Add(name);\n\t\t\tthis.paramPseudoIndex = this.ModuleBuilder.GenericParam.AddRecord(rec);\n\t\t}\n\t\tpublic override string AssemblyQualifiedName\n\t\t{\n\t\t\tget { return null; }\n\t\t}\n\t\tpublic override bool IsValueType\n\t\t{\n\t\t\tget { return (this.GenericParameterAttributes & GenericParameterAttributes.NotNullableValueTypeConstraint) != 0; }\n\t\t}\n\t\tpublic override Type BaseType\n\t\t{\n\t\t\tget { return baseType; }\n\t\t}\n\t\tpublic override Type[] __GetDeclaredInterfaces()\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic override TypeAttributes Attributes\n\t\t{\n\t\t\tget { return TypeAttributes.Public; }\n\t\t}\n\t\tpublic override string Namespace\n\t\t{\n\t\t\tget { return DeclaringType.Namespace; }\n\t\t}\n\t\tpublic override string Name\n\t\t{\n\t\t\tget { return name; }\n\t\t}\n\t\tpublic override string FullName\n\t\t{\n\t\t\tget { return null; }\n\t\t}\n\t\tpublic override string ToString()\n\t\t{\n\t\t\treturn this.Name;\n\t\t}\n\t\tprivate ModuleBuilder ModuleBuilder\n\t\t{\n\t\t\tget { return type != null ? type.ModuleBuilder : method.ModuleBuilder; }\n\t\t}\n\t\tpublic override Module Module\n\t\t{\n\t\t\tget { return ModuleBuilder; }\n\t\t}\n\t\tpublic override int GenericParameterPosition\n\t\t{\n\t\t\tget { return position; }\n\t\t}\n\t\tpublic override Type DeclaringType\n\t\t{\n\t\t\tget { return type; }\n\t\t}\n\t\tpublic override MethodBase DeclaringMethod\n\t\t{\n\t\t\tget { return method; }\n\t\t}\n\t\tpublic override Type[] GetGenericParameterConstraints()\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic override GenericParameterAttributes GenericParameterAttributes\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tCheckBaked();\n\t\t\t\treturn attr;\n\t\t\t}\n\t\t}\n\t\tinternal override void CheckBaked()\n\t\t{\n\t\t\tif (type != null)\n\t\t\t{\n\t\t\t\ttype.CheckBaked();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmethod.CheckBaked();\n\t\t\t}\n\t\t}\n\t\tprivate void AddConstraint(Type type)\n\t\t{\n\t\t\tGenericParamConstraintTable.Record rec = new GenericParamConstraintTable.Record();\n\t\t\trec.Owner = paramPseudoIndex;\n\t\t\trec.Constraint = this.ModuleBuilder.GetTypeTokenForMemberRef(type);\n\t\t\tthis.ModuleBuilder.GenericParamConstraint.AddRecord(rec);\n\t\t}\n\t\tpublic void SetBaseTypeConstraint(Type baseTypeConstraint)\n\t\t{\n\t\t\tthis.baseType = baseTypeConstraint;\n\t\t\tAddConstraint(baseTypeConstraint);\n\t\t}\n\t\tpublic void SetInterfaceConstraints(params Type[] interfaceConstraints)\n\t\t{\n\t\t\tforeach (Type type in interfaceConstraints)\n\t\t\t{\n\t\t\t\tAddConstraint(type);\n\t\t\t}\n\t\t}\n\t\tpublic void SetGenericParameterAttributes(GenericParameterAttributes genericParameterAttributes)\n\t\t{\n\t\t\tthis.attr = genericParameterAttributes;\n\t\t\t// for now we'll back patch the table\n\t\t\tthis.ModuleBuilder.GenericParam.PatchAttribute(paramPseudoIndex, genericParameterAttributes);\n\t\t}\n\t\tpublic void SetCustomAttribute(CustomAttributeBuilder customBuilder)\n\t\t{\n\t\t\tthis.ModuleBuilder.SetCustomAttribute((GenericParamTable.Index << 24) | paramPseudoIndex, customBuilder);\n\t\t}\n\t\tpublic void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)\n\t\t{\n\t\t\tSetCustomAttribute(new CustomAttributeBuilder(con, binaryAttribute));\n\t\t}\n\t\tpublic override int MetadataToken\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tCheckBaked();\n\t\t\t\treturn (GenericParamTable.Index << 24) | paramPseudoIndex;\n\t\t\t}\n\t\t}\n\t\tinternal override int GetModuleBuilderToken()\n\t\t{\n\t\t\tif (typeToken == 0)\n\t\t\t{\n\t\t\t\tByteBuffer spec = new ByteBuffer(5);\n\t\t\t\tSignature.WriteTypeSpec(this.ModuleBuilder, spec, this);\n\t\t\t\ttypeToken = 0x1B000000 | this.ModuleBuilder.TypeSpec.AddRecord(this.ModuleBuilder.Blobs.Add(spec));\n\t\t\t}\n\t\t\treturn typeToken;\n\t\t}\n\t\tinternal override Type BindTypeParameters(IGenericBinder binder)\n\t\t{\n\t\t\tif (type != null)\n\t\t\t{\n\t\t\t\treturn binder.BindTypeParameter(this);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn binder.BindMethodParameter(this);\n\t\t\t}\n\t\t}\n\t\tinternal override int GetCurrentToken()\n\t\t{\n\t\t\tif (this.ModuleBuilder.IsSaved)\n\t\t\t{\n\t\t\t\treturn (GenericParamTable.Index << 24) | this.Module.GenericParam.GetIndexFixup()[paramPseudoIndex - 1] + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn (GenericParamTable.Index << 24) | paramPseudoIndex;\n\t\t\t}\n\t\t}\n\t\tinternal override bool IsBaked\n\t\t{\n\t\t\tget { return ((MemberInfo)type ?? method).IsBaked; }\n\t\t}\n\t}\n\tpublic sealed class TypeBuilder : TypeInfo, ITypeOwner\n\t{\n\t\tpublic const int UnspecifiedTypeSize = 0;\n\t\tprivate readonly ITypeOwner owner;\n\t\tprivate readonly int token;\n\t\tprivate int extends;\n\t\tprivate Type lazyBaseType;\t\t// (lazyBaseType == null && attribs & TypeAttributes.Interface) == 0) => BaseType == System.Object\n\t\tprivate readonly int typeName;\n\t\tprivate readonly int typeNameSpace;\n\t\tprivate readonly string ns;\n\t\tprivate readonly string name;\n\t\tprivate readonly List<MethodBuilder> methods = new List<MethodBuilder>();\n\t\tprivate readonly List<FieldBuilder> fields = new List<FieldBuilder>();\n\t\tprivate List<PropertyBuilder> properties;\n\t\tprivate List<EventBuilder> events;\n\t\tprivate TypeAttributes attribs;\n\t\tprivate GenericTypeParameterBuilder[] gtpb;\n\t\tprivate List<CustomAttributeBuilder> declarativeSecurity;\n\t\tprivate List<Type> interfaces;\n\t\tprivate int size;\n\t\tprivate short pack;\n\t\tprivate bool hasLayout;\n\t\tinternal TypeBuilder(ITypeOwner owner, string ns, string name)\n\t\t{\n\t\t\tthis.owner = owner;\n\t\t\tthis.token = this.ModuleBuilder.TypeDef.AllocToken();\n\t\t\tthis.ns = ns;\n\t\t\tthis.name = name;\n\t\t\tthis.typeNameSpace = ns == null ? 0 : this.ModuleBuilder.Strings.Add(ns);\n\t\t\tthis.typeName = this.ModuleBuilder.Strings.Add(name);\n\t\t\tMarkKnownType(ns, name);\n\t\t}\n\t\tpublic ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes)\n\t\t{\n\t\t\tConstructorBuilder cb = DefineConstructor(attributes, CallingConventions.Standard, Type.EmptyTypes);\n\t\t\tILGenerator ilgen = cb.GetILGenerator();\n\t\t\tilgen.Emit(OpCodes.Ldarg_0);\n\t\t\tilgen.Emit(OpCodes.Call, BaseType.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, Type.EmptyTypes, null));\n\t\t\tilgen.Emit(OpCodes.Ret);\n\t\t\treturn cb;\n\t\t}\n\t\tpublic ConstructorBuilder DefineConstructor(MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes)\n\t\t{\n\t\t\treturn DefineConstructor(attribs, callConv, parameterTypes, null, null);\n\t\t}\n\t\tpublic ConstructorBuilder DefineConstructor(MethodAttributes attribs, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t{\n\t\t\tattribs |= MethodAttributes.RTSpecialName | MethodAttributes.SpecialName;\n\t\t\tstring name = (attribs & MethodAttributes.Static) == 0 ? ConstructorInfo.ConstructorName : ConstructorInfo.TypeConstructorName;\n\t\t\tMethodBuilder mb = DefineMethod(name, attribs, callingConvention, null, null, null, parameterTypes, requiredCustomModifiers, optionalCustomModifiers);\n\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic ConstructorBuilder DefineTypeInitializer()\n\t\t{\n\t\t\tMethodBuilder mb = DefineMethod(ConstructorInfo.TypeConstructorName, MethodAttributes.Private | MethodAttributes.Static | MethodAttributes.RTSpecialName | MethodAttributes.SpecialName, null, Type.EmptyTypes);\n", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "length": 910, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "6b78cc0ec714622bb22d89aa972b1eae59e59788b357955a"}
{"input": "", "context": "// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!\n#pragma warning disable 1591\n#region Designer generated code\nusing pb = global::Google.ProtocolBuffers;\nusing pbc = global::Google.ProtocolBuffers.Collections;\nusing pbd = global::Google.ProtocolBuffers.Descriptors;\nusing scg = global::System.Collections.Generic;\nnamespace bnet.protocol.channel_invitation {\n  \n  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n  public static partial class ChannelInvitationTypes {\n  \n    #region Extension registration\n    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {\n      registry.Add(global::bnet.protocol.channel_invitation.Invitation.ChannelInvitation);\n      registry.Add(global::bnet.protocol.channel_invitation.SendInvitationRequest.ChannelInvitation);\n    }\n    #endregion\n    #region Static variables\n    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_invitation_Invitation__Descriptor;\n    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel_invitation.Invitation, global::bnet.protocol.channel_invitation.Invitation.Builder> internal__static_bnet_protocol_channel_invitation_Invitation__FieldAccessorTable;\n    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__Descriptor;\n    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel_invitation.SendInvitationRequest, global::bnet.protocol.channel_invitation.SendInvitationRequest.Builder> internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__FieldAccessorTable;\n    internal static pbd::MessageDescriptor internal__static_bnet_protocol_channel_invitation_InvitationCollection__Descriptor;\n    internal static pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel_invitation.InvitationCollection, global::bnet.protocol.channel_invitation.InvitationCollection.Builder> internal__static_bnet_protocol_channel_invitation_InvitationCollection__FieldAccessorTable;\n    #endregion\n    #region Descriptor\n    public static pbd::FileDescriptor Descriptor {\n      get { return descriptor; }\n    }\n    private static pbd::FileDescriptor descriptor;\n    \n    static ChannelInvitationTypes() {\n      byte[] descriptorData = global::System.Convert.FromBase64String(\n          \"CjlzZXJ2aWNlL2NoYW5uZWxfaW52aXRhdGlvbi9jaGFubmVsX2ludml0YXRp\" + \n          \"b25fdHlwZXMucHJvdG8SIGJuZXQucHJvdG9jb2wuY2hhbm5lbF9pbnZpdGF0\" + \n          \"aW9uGh1saWIvcHJvdG9jb2wvaW52aXRhdGlvbi5wcm90bxoZbGliL3Byb3Rv\" + \n          \"Y29sL2VudGl0eS5wcm90bxojc2VydmljZS9jaGFubmVsL2NoYW5uZWxfdHlw\" + \n          \"ZXMucHJvdG8iigIKCkludml0YXRpb24SRgoTY2hhbm5lbF9kZXNjcmlwdGlv\" + \n          \"bhgBIAIoCzIpLmJuZXQucHJvdG9jb2wuY2hhbm5lbC5DaGFubmVsRGVzY3Jp\" + \n          \"cHRpb24SFwoIcmVzZXJ2ZWQYAiABKAg6BWZhbHNlEhUKBnJlam9pbhgDIAEo\" + \n          \"CDoFZmFsc2USFAoMc2VydmljZV90eXBlGAQgASgNMm4KEmNoYW5uZWxfaW52\" + \n          \"aXRhdGlvbhIkLmJuZXQucHJvdG9jb2wuaW52aXRhdGlvbi5JbnZpdGF0aW9u\" + \n          \"GGkgASgLMiwuYm5ldC5wcm90b2NvbC5jaGFubmVsX2ludml0YXRpb24uSW52\" + \n          \"aXRhdGlvbiKDAgoVU2VuZEludml0YXRpb25SZXF1ZXN0EisKCmNoYW5uZWxf\" + \n          \"aWQYASABKAsyFy5ibmV0LnByb3RvY29sLkVudGl0eUlkEhAKCHJlc2VydmVk\" + \n          \"GAIgASgIEg4KBnJlam9pbhgDIAEoCBIUCgxzZXJ2aWNlX3R5cGUYBCABKA0y\" + \n          \"hAEKEmNoYW5uZWxfaW52aXRhdGlvbhIvLmJuZXQucHJvdG9jb2wuaW52aXRh\" + \n          \"dGlvbi5TZW5kSW52aXRhdGlvblJlcXVlc3QYaSABKAsyNy5ibmV0LnByb3Rv\" + \n          \"Y29sLmNoYW5uZWxfaW52aXRhdGlvbi5TZW5kSW52aXRhdGlvblJlcXVlc3Qi\" + \n          \"pAEKFEludml0YXRpb25Db2xsZWN0aW9uEhQKDHNlcnZpY2VfdHlwZRgBIAEo\" + \n          \"DRIgChhtYXhfcmVjZWl2ZWRfaW52aXRhdGlvbnMYAiABKA0SEQoJb2JqZWN0\" + \n          \"X2lkGAMgASgEEkEKE3JlY2VpdmVkX2ludml0YXRpb24YBCADKAsyJC5ibmV0\" + \n          \"LnByb3RvY29sLmludml0YXRpb24uSW52aXRhdGlvbg==\");\n      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {\n        descriptor = root;\n        internal__static_bnet_protocol_channel_invitation_Invitation__Descriptor = Descriptor.MessageTypes[0];\n        internal__static_bnet_protocol_channel_invitation_Invitation__FieldAccessorTable = \n            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel_invitation.Invitation, global::bnet.protocol.channel_invitation.Invitation.Builder>(internal__static_bnet_protocol_channel_invitation_Invitation__Descriptor,\n                new string[] { \"ChannelDescription\", \"Reserved\", \"Rejoin\", \"ServiceType\", });\n        global::bnet.protocol.channel_invitation.Invitation.ChannelInvitation = pb::GeneratedSingleExtension<global::bnet.protocol.channel_invitation.Invitation>.CreateInstance(global::bnet.protocol.channel_invitation.Invitation.Descriptor.Extensions[0]);\n        internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__Descriptor = Descriptor.MessageTypes[1];\n        internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__FieldAccessorTable = \n            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel_invitation.SendInvitationRequest, global::bnet.protocol.channel_invitation.SendInvitationRequest.Builder>(internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__Descriptor,\n                new string[] { \"ChannelId\", \"Reserved\", \"Rejoin\", \"ServiceType\", });\n        global::bnet.protocol.channel_invitation.SendInvitationRequest.ChannelInvitation = pb::GeneratedSingleExtension<global::bnet.protocol.channel_invitation.SendInvitationRequest>.CreateInstance(global::bnet.protocol.channel_invitation.SendInvitationRequest.Descriptor.Extensions[0]);\n        internal__static_bnet_protocol_channel_invitation_InvitationCollection__Descriptor = Descriptor.MessageTypes[2];\n        internal__static_bnet_protocol_channel_invitation_InvitationCollection__FieldAccessorTable = \n            new pb::FieldAccess.FieldAccessorTable<global::bnet.protocol.channel_invitation.InvitationCollection, global::bnet.protocol.channel_invitation.InvitationCollection.Builder>(internal__static_bnet_protocol_channel_invitation_InvitationCollection__Descriptor,\n                new string[] { \"ServiceType\", \"MaxReceivedInvitations\", \"ObjectId\", \"ReceivedInvitation\", });\n        return null;\n      };\n      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,\n          new pbd::FileDescriptor[] {\n          global::bnet.protocol.invitation.Proto.Invitation.Descriptor, \n          global::bnet.protocol.Entity.Descriptor, \n          global::bnet.protocol.channel.ChannelTypes.Descriptor, \n          }, assigner);\n    }\n    #endregion\n    \n  }\n  #region Messages\n  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n  public sealed partial class Invitation : pb::GeneratedMessage<Invitation, Invitation.Builder> {\n    private static readonly Invitation defaultInstance = new Builder().BuildPartial();\n    private static readonly string[] _invitationFieldNames = new string[] { \"channel_description\", \"rejoin\", \"reserved\", \"service_type\" };\n    private static readonly uint[] _invitationFieldTags = new uint[] { 10, 24, 16, 32 };\n    public static Invitation DefaultInstance {\n      get { return defaultInstance; }\n    }\n    \n    public override Invitation DefaultInstanceForType {\n      get { return defaultInstance; }\n    }\n    \n    protected override Invitation ThisMessage {\n      get { return this; }\n    }\n    \n    public static pbd::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.channel_invitation.ChannelInvitationTypes.internal__static_bnet_protocol_channel_invitation_Invitation__Descriptor; }\n    }\n    \n    protected override pb::FieldAccess.FieldAccessorTable<Invitation, Invitation.Builder> InternalFieldAccessors {\n      get { return global::bnet.protocol.channel_invitation.ChannelInvitationTypes.internal__static_bnet_protocol_channel_invitation_Invitation__FieldAccessorTable; }\n    }\n    \n    public const int ChannelInvitationFieldNumber = 105;\n    public static pb::GeneratedExtensionBase<global::bnet.protocol.channel_invitation.Invitation> ChannelInvitation;\n    public const int ChannelDescriptionFieldNumber = 1;\n    private bool hasChannelDescription;\n    private global::bnet.protocol.channel.ChannelDescription channelDescription_ = global::bnet.protocol.channel.ChannelDescription.DefaultInstance;\n    public bool HasChannelDescription {\n      get { return hasChannelDescription; }\n    }\n    public global::bnet.protocol.channel.ChannelDescription ChannelDescription {\n      get { return channelDescription_; }\n    }\n    \n    public const int ReservedFieldNumber = 2;\n    private bool hasReserved;\n    private bool reserved_;\n    public bool HasReserved {\n      get { return hasReserved; }\n    }\n    public bool Reserved {\n      get { return reserved_; }\n    }\n    \n    public const int RejoinFieldNumber = 3;\n    private bool hasRejoin;\n    private bool rejoin_;\n    public bool HasRejoin {\n      get { return hasRejoin; }\n    }\n    public bool Rejoin {\n      get { return rejoin_; }\n    }\n    \n    public const int ServiceTypeFieldNumber = 4;\n    private bool hasServiceType;\n    private uint serviceType_;\n    public bool HasServiceType {\n      get { return hasServiceType; }\n    }\n    public uint ServiceType {\n      get { return serviceType_; }\n    }\n    \n    public override bool IsInitialized {\n      get {\n        if (!hasChannelDescription) return false;\n        if (!ChannelDescription.IsInitialized) return false;\n        return true;\n      }\n    }\n    \n    public override void WriteTo(pb::ICodedOutputStream output) {\n      int size = SerializedSize;\n      string[] field_names = _invitationFieldNames;\n      if (hasChannelDescription) {\n        output.WriteMessage(1, field_names[0], ChannelDescription);\n      }\n      if (hasReserved) {\n        output.WriteBool(2, field_names[2], Reserved);\n      }\n      if (hasRejoin) {\n        output.WriteBool(3, field_names[1], Rejoin);\n      }\n      if (hasServiceType) {\n        output.WriteUInt32(4, field_names[3], ServiceType);\n      }\n      UnknownFields.WriteTo(output);\n    }\n    \n    private int memoizedSerializedSize = -1;\n    public override int SerializedSize {\n      get {\n        int size = memoizedSerializedSize;\n        if (size != -1) return size;\n        \n        size = 0;\n        if (hasChannelDescription) {\n          size += pb::CodedOutputStream.ComputeMessageSize(1, ChannelDescription);\n        }\n        if (hasReserved) {\n          size += pb::CodedOutputStream.ComputeBoolSize(2, Reserved);\n        }\n        if (hasRejoin) {\n          size += pb::CodedOutputStream.ComputeBoolSize(3, Rejoin);\n        }\n        if (hasServiceType) {\n          size += pb::CodedOutputStream.ComputeUInt32Size(4, ServiceType);\n        }\n        size += UnknownFields.SerializedSize;\n        memoizedSerializedSize = size;\n        return size;\n      }\n    }\n    \n    public static Invitation ParseFrom(pb::ByteString data) {\n      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();\n    }\n    public static Invitation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {\n      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();\n    }\n    public static Invitation ParseFrom(byte[] data) {\n      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();\n    }\n    public static Invitation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {\n      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();\n    }\n    public static Invitation ParseFrom(global::System.IO.Stream input) {\n      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();\n    }\n    public static Invitation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {\n      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();\n    }\n    public static Invitation ParseDelimitedFrom(global::System.IO.Stream input) {\n      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();\n    }\n    public static Invitation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {\n      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();\n    }\n    public static Invitation ParseFrom(pb::ICodedInputStream input) {\n      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();\n    }\n    public static Invitation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {\n      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();\n    }\n    public static Builder CreateBuilder() { return new Builder(); }\n    public override Builder ToBuilder() { return CreateBuilder(this); }\n    public override Builder CreateBuilderForType() { return new Builder(); }\n    public static Builder CreateBuilder(Invitation prototype) {\n      return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n    public sealed partial class Builder : pb::GeneratedBuilder<Invitation, Builder> {\n      protected override Builder ThisBuilder {\n        get { return this; }\n      }\n      public Builder() {}\n      \n      Invitation result = new Invitation();\n      \n      protected override Invitation MessageBeingBuilt {\n        get { return result; }\n      }\n      \n      public override Builder Clear() {\n        result = new Invitation();\n        return this;\n      }\n      \n      public override Builder Clone() {\n        return new Builder().MergeFrom(result);\n      }\n      \n      public override pbd::MessageDescriptor DescriptorForType {\n        get { return global::bnet.protocol.channel_invitation.Invitation.Descriptor; }\n      }\n      \n      public override Invitation DefaultInstanceForType {\n        get { return global::bnet.protocol.channel_invitation.Invitation.DefaultInstance; }\n      }\n      \n      public override Invitation BuildPartial() {\n        if (result == null) {\n          throw new global::System.InvalidOperationException(\"build() has already been called on this Builder\");\n        }\n        Invitation returnMe = result;\n        result = null;\n        return returnMe;\n      }\n      \n      public override Builder MergeFrom(pb::IMessage other) {\n        if (other is Invitation) {\n          return MergeFrom((Invitation) other);\n        } else {\n          base.MergeFrom(other);\n          return this;\n        }\n      }\n      \n      public override Builder MergeFrom(Invitation other) {\n        if (other == global::bnet.protocol.channel_invitation.Invitation.DefaultInstance) return this;\n        if (other.HasChannelDescription) {\n          MergeChannelDescription(other.ChannelDescription);\n        }\n        if (other.HasReserved) {\n          Reserved = other.Reserved;\n        }\n        if (other.HasRejoin) {\n          Rejoin = other.Rejoin;\n        }\n        if (other.HasServiceType) {\n          ServiceType = other.ServiceType;\n        }\n        this.MergeUnknownFields(other.UnknownFields);\n        return this;\n      }\n      \n      public override Builder MergeFrom(pb::ICodedInputStream input) {\n        return MergeFrom(input, pb::ExtensionRegistry.Empty);\n      }\n      \n      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {\n        pb::UnknownFieldSet.Builder unknownFields = null;\n        uint tag;\n        string field_name;\n        while (input.ReadTag(out tag, out field_name)) {\n          if(tag == 0 && field_name != null) {\n            int field_ordinal = global::System.Array.BinarySearch(_invitationFieldNames, field_name, global::System.StringComparer.Ordinal);\n            if(field_ordinal >= 0)\n              tag = _invitationFieldTags[field_ordinal];\n            else {\n              if (unknownFields == null) {\n                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);\n              }\n              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);\n              continue;\n            }\n          }\n          switch (tag) {\n            case 0: {\n              throw pb::InvalidProtocolBufferException.InvalidTag();\n            }\n            default: {\n              if (pb::WireFormat.IsEndGroupTag(tag)) {\n                if (unknownFields != null) {\n                  this.UnknownFields = unknownFields.Build();\n                }\n                return this;\n              }\n              if (unknownFields == null) {\n                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);\n              }\n              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);\n              break;\n            }\n            case 10: {\n              global::bnet.protocol.channel.ChannelDescription.Builder subBuilder = global::bnet.protocol.channel.ChannelDescription.CreateBuilder();\n              if (result.hasChannelDescription) {\n                subBuilder.MergeFrom(ChannelDescription);\n              }\n              input.ReadMessage(subBuilder, extensionRegistry);\n              ChannelDescription = subBuilder.BuildPartial();\n              break;\n            }\n            case 16: {\n              result.hasReserved = input.ReadBool(ref result.reserved_);\n              break;\n            }\n            case 24: {\n              result.hasRejoin = input.ReadBool(ref result.rejoin_);\n              break;\n            }\n            case 32: {\n              result.hasServiceType = input.ReadUInt32(ref result.serviceType_);\n              break;\n            }\n          }\n        }\n        \n        if (unknownFields != null) {\n          this.UnknownFields = unknownFields.Build();\n        }\n        return this;\n      }\n      \n      \n      public bool HasChannelDescription {\n       get { return result.hasChannelDescription; }\n      }\n      public global::bnet.protocol.channel.ChannelDescription ChannelDescription {\n        get { return result.ChannelDescription; }\n        set { SetChannelDescription(value); }\n      }\n      public Builder SetChannelDescription(global::bnet.protocol.channel.ChannelDescription value) {\n        pb::ThrowHelper.ThrowIfNull(value, \"value\");\n        result.hasChannelDescription = true;\n        result.channelDescription_ = value;\n        return this;\n      }\n      public Builder SetChannelDescription(global::bnet.protocol.channel.ChannelDescription.Builder builderForValue) {\n        pb::ThrowHelper.ThrowIfNull(builderForValue, \"builderForValue\");\n        result.hasChannelDescription = true;\n        result.channelDescription_ = builderForValue.Build();\n        return this;\n      }\n      public Builder MergeChannelDescription(global::bnet.protocol.channel.ChannelDescription value) {\n        pb::ThrowHelper.ThrowIfNull(value, \"value\");\n        if (result.hasChannelDescription &&\n            result.channelDescription_ != global::bnet.protocol.channel.ChannelDescription.DefaultInstance) {\n            result.channelDescription_ = global::bnet.protocol.channel.ChannelDescription.CreateBuilder(result.channelDescription_).MergeFrom(value).BuildPartial();\n        } else {\n          result.channelDescription_ = value;\n        }\n        result.hasChannelDescription = true;\n        return this;\n      }\n      public Builder ClearChannelDescription() {\n        result.hasChannelDescription = false;\n        result.channelDescription_ = global::bnet.protocol.channel.ChannelDescription.DefaultInstance;\n        return this;\n      }\n      \n      public bool HasReserved {\n        get { return result.hasReserved; }\n      }\n      public bool Reserved {\n        get { return result.Reserved; }\n        set { SetReserved(value); }\n      }\n      public Builder SetReserved(bool value) {\n        result.hasReserved = true;\n        result.reserved_ = value;\n        return this;\n      }\n      public Builder ClearReserved() {\n        result.hasReserved = false;\n        result.reserved_ = false;\n        return this;\n      }\n      \n      public bool HasRejoin {\n        get { return result.hasRejoin; }\n      }\n      public bool Rejoin {\n        get { return result.Rejoin; }\n        set { SetRejoin(value); }\n      }\n      public Builder SetRejoin(bool value) {\n        result.hasRejoin = true;\n        result.rejoin_ = value;\n        return this;\n      }\n      public Builder ClearRejoin() {\n        result.hasRejoin = false;\n        result.rejoin_ = false;\n        return this;\n      }\n      \n      public bool HasServiceType {\n        get { return result.hasServiceType; }\n      }\n      public uint ServiceType {\n        get { return result.ServiceType; }\n        set { SetServiceType(value); }\n      }\n      public Builder SetServiceType(uint value) {\n        result.hasServiceType = true;\n        result.serviceType_ = value;\n        return this;\n      }\n      public Builder ClearServiceType() {\n        result.hasServiceType = false;\n        result.serviceType_ = 0;\n        return this;\n      }\n    }\n    static Invitation() {\n      object.ReferenceEquals(global::bnet.protocol.channel_invitation.ChannelInvitationTypes.Descriptor, null);\n    }\n  }\n  \n  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n  public sealed partial class SendInvitationRequest : pb::GeneratedMessage<SendInvitationRequest, SendInvitationRequest.Builder> {\n    private static readonly SendInvitationRequest defaultInstance = new Builder().BuildPartial();\n    private static readonly string[] _sendInvitationRequestFieldNames = new string[] { \"channel_id\", \"rejoin\", \"reserved\", \"service_type\" };\n    private static readonly uint[] _sendInvitationRequestFieldTags = new uint[] { 10, 24, 16, 32 };\n    public static SendInvitationRequest DefaultInstance {\n      get { return defaultInstance; }\n    }\n    \n    public override SendInvitationRequest DefaultInstanceForType {\n      get { return defaultInstance; }\n    }\n    \n    protected override SendInvitationRequest ThisMessage {\n      get { return this; }\n    }\n    \n    public static pbd::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.channel_invitation.ChannelInvitationTypes.internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__Descriptor; }\n    }\n    \n    protected override pb::FieldAccess.FieldAccessorTable<SendInvitationRequest, SendInvitationRequest.Builder> InternalFieldAccessors {\n      get { return global::bnet.protocol.channel_invitation.ChannelInvitationTypes.internal__static_bnet_protocol_channel_invitation_SendInvitationRequest__FieldAccessorTable; }\n    }\n    \n    public const int ChannelInvitationFieldNumber = 105;\n    public static pb::GeneratedExtensionBase<global::bnet.protocol.channel_invitation.SendInvitationRequest> ChannelInvitation;\n    public const int ChannelIdFieldNumber = 1;\n    private bool hasChannelId;\n    private global::bnet.protocol.EntityId channelId_ = global::bnet.protocol.EntityId.DefaultInstance;\n    public bool HasChannelId {\n      get { return hasChannelId; }\n    }\n    public global::bnet.protocol.EntityId ChannelId {\n      get { return channelId_; }\n    }\n    \n    public const int ReservedFieldNumber = 2;\n    private bool hasReserved;\n    private bool reserved_;\n    public bool HasReserved {\n      get { return hasReserved; }\n    }\n    public bool Reserved {\n      get { return reserved_; }\n    }\n    \n    public const int RejoinFieldNumber = 3;\n    private bool hasRejoin;\n    private bool rejoin_;\n    public bool HasRejoin {\n      get { return hasRejoin; }\n    }\n    public bool Rejoin {\n      get { return rejoin_; }\n    }\n    \n    public const int ServiceTypeFieldNumber = 4;\n    private bool hasServiceType;\n    private uint serviceType_;\n    public bool HasServiceType {\n      get { return hasServiceType; }\n    }\n    public uint ServiceType {\n      get { return serviceType_; }\n    }\n    \n    public override bool IsInitialized {\n      get {\n        if (HasChannelId) {\n          if (!ChannelId.IsInitialized) return false;\n        }\n        return true;\n      }\n    }\n    \n    public override void WriteTo(pb::ICodedOutputStream output) {\n      int size = SerializedSize;\n      string[] field_names = _sendInvitationRequestFieldNames;\n      if (hasChannelId) {\n        output.WriteMessage(1, field_names[0], ChannelId);\n      }\n      if (hasReserved) {\n        output.WriteBool(2, field_names[2], Reserved);\n      }\n      if (hasRejoin) {\n        output.WriteBool(3, field_names[1], Rejoin);\n      }\n      if (hasServiceType) {\n        output.WriteUInt32(4, field_names[3], ServiceType);\n      }\n      UnknownFields.WriteTo(output);\n    }\n    \n    private int memoizedSerializedSize = -1;\n    public override int SerializedSize {\n      get {\n        int size = memoizedSerializedSize;\n        if (size != -1) return size;\n        \n        size = 0;\n        if (hasChannelId) {\n          size += pb::CodedOutputStream.ComputeMessageSize(1, ChannelId);\n        }\n        if (hasReserved) {\n          size += pb::CodedOutputStream.ComputeBoolSize(2, Reserved);\n        }\n        if (hasRejoin) {\n          size += pb::CodedOutputStream.ComputeBoolSize(3, Rejoin);\n        }\n        if (hasServiceType) {\n          size += pb::CodedOutputStream.ComputeUInt32Size(4, ServiceType);\n        }\n        size += UnknownFields.SerializedSize;\n        memoizedSerializedSize = size;\n        return size;\n      }\n    }\n    \n    public static SendInvitationRequest ParseFrom(pb::ByteString data) {\n      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();\n    }\n    public static SendInvitationRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {\n      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();\n    }\n    public static SendInvitationRequest ParseFrom(byte[] data) {\n      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();\n    }\n    public static SendInvitationRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {\n      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();\n    }\n    public static SendInvitationRequest ParseFrom(global::System.IO.Stream input) {\n      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();\n    }\n    public static SendInvitationRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {\n      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();\n    }\n    public static SendInvitationRequest ParseDelimitedFrom(global::System.IO.Stream input) {\n      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();\n    }\n    public static SendInvitationRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {\n      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();\n    }\n    public static SendInvitationRequest ParseFrom(pb::ICodedInputStream input) {\n      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();\n    }\n    public static SendInvitationRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {\n      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();\n    }\n    public static Builder CreateBuilder() { return new Builder(); }\n    public override Builder ToBuilder() { return CreateBuilder(this); }\n    public override Builder CreateBuilderForType() { return new Builder(); }\n    public static Builder CreateBuilder(SendInvitationRequest prototype) {\n", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "length": 1897, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "773a363f2c8a3fdcc084a85466fde2a1350769f67776f1f4"}
{"input": "", "context": "/*\n * Copyright (c) 2003-2009 jMonkeyEngine\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * * Neither the name of 'jMonkeyEngine' nor the names of its contributors\n *   may be used to endorse or promote products derived from this software\n *   without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.jme.scene;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.nio.FloatBuffer;\nimport java.nio.IntBuffer;\nimport java.util.logging.Logger;\nimport com.jme.intersection.CollisionResults;\nimport com.jme.math.Vector3f;\nimport com.jme.renderer.Renderer;\nimport com.jme.system.JmeException;\nimport com.jme.util.export.InputCapsule;\nimport com.jme.util.export.JMEExporter;\nimport com.jme.util.export.JMEImporter;\nimport com.jme.util.export.OutputCapsule;\nimport com.jme.util.geom.BufferUtils;\n/**\n * <code>QuadMesh</code> defines a geometry mesh. This mesh defines a three\n * dimensional object via a collection of points, colors, normals and textures.\n * The points are referenced via a indices array. This array instructs the\n * renderer the order in which to draw the points, creating quads based on the mode set.\n * \n * @author Joshua Slack\n * @version $Id: $\n */\npublic class QuadMesh extends Geometry implements Serializable {\n    private static final Logger logger = Logger.getLogger(QuadMesh.class\n            .getName());\n    private static final long serialVersionUID = 2L;\n    public enum Mode {\n        /**\n         * Every four vertices referenced by the indexbuffer will be considered\n         * a stand-alone quad.\n         */\n        Quads,\n        /**\n         * The first four vertices referenced by the indexbuffer create a\n         * triangle, from there, every two additional vertices are paired with\n         * the two preceding vertices to make a new quad.\n         */\n        Strip;\n    }\n    protected transient IntBuffer indexBuffer;\n    protected Mode mode = Mode.Quads;\n    protected int quadQuantity;\n    private static Vector3f[] quads;\n    /**\n     * Empty Constructor to be used internally only.\n     */\n    public QuadMesh() {\n        super();\n    }\n    /**\n     * Constructor instantiates a new <code>TriMesh</code> object.\n     * \n     * @param name\n     *            the name of the scene element. This is required for\n     *            identification and comparision purposes.\n     */\n    public QuadMesh(String name) {\n        super(name);\n    }\n    /**\n     * Constructor instantiates a new <code>TriMesh</code> object. Provided\n     * are the attributes that make up the mesh all attributes may be null,\n     * except for vertices and indices.\n     * \n     * @param name\n     *            the name of the scene element. This is required for\n     *            identification and comparision purposes.\n     * @param vertices\n     *            the vertices of the geometry.\n     * @param normal\n     *            the normals of the geometry.\n     * @param color\n     *            the colors of the geometry.\n     * @param coords\n     *            the texture coordinates of the mesh.\n     * @param indices\n     *            the indices of the vertex array.\n     */\n    public QuadMesh(String name, FloatBuffer vertices, FloatBuffer normal,\n            FloatBuffer color, TexCoords coords, IntBuffer indices) {\n        super(name);\n        reconstruct(vertices, normal, color, coords);\n        if (null == indices) {\n            logger.severe(\"Indices may not be null.\");\n            throw new JmeException(\"Indices may not be null.\");\n        }\n        setIndexBuffer(indices);\n        logger.info(\"QuadMesh created.\");\n    }\n    /**\n     * Recreates the geometric information of this TriMesh from scratch. The\n     * index and vertex array must not be null, but the others may be. Every 3\n     * indices define an index in the <code>vertices</code> array that\n     * refrences a vertex of a triangle.\n     * \n     * @param vertices\n     *            The vertex information for this TriMesh.\n     * @param normal\n     *            The normal information for this TriMesh.\n     * @param color\n     *            The color information for this TriMesh.\n     * @param coords\n     *            The texture information for this TriMesh.\n     * @param indices\n     *            The index information for this TriMesh.\n     */\n    public void reconstruct(FloatBuffer vertices, FloatBuffer normal,\n            FloatBuffer color, TexCoords coords, IntBuffer indices) {\n        super.reconstruct(vertices, normal, color, coords);\n        if (null == indices) {\n            logger.severe(\"Indices may not be null.\");\n            throw new JmeException(\"Indices may not be null.\");\n        }\n        setIndexBuffer(indices);\n    }\n    public void setMode(Mode mode) {\n        this.mode = mode;\n    }\n    public Mode getMode() {\n        return mode;\n    }\n    public IntBuffer getIndexBuffer() {\n        return indexBuffer;\n    }\n    public void setIndexBuffer(IntBuffer indices) {\n        this.indexBuffer = indices;\n        recalcQuadQuantity();\n    }\n    protected void recalcQuadQuantity() {\n        if (indexBuffer == null) {\n            quadQuantity = 0;\n            return;\n        }\n        \n        switch (mode) {\n            case Quads:\n                quadQuantity = indexBuffer.limit() / 4;\n                break;\n            case Strip:\n                quadQuantity = indexBuffer.limit() / 2 - 1;\n                break;\n        }\n    }\n    /**\n     * Returns the number of triangles contained in this mesh.\n     */\n    public int getQuadCount() {\n        return quadQuantity;\n    }\n    public void setQuadQuantity(int quadQuantity) {\n        this.quadQuantity = quadQuantity;\n    }\n    /**\n     * Clears the buffers of this QuadMesh. The buffers include its indexBuffer\n     * only.\n     */\n    public void clearBuffers() {\n        super.clearBuffers();\n        setIndexBuffer(null);\n    }\n    \n    public static Vector3f[] getQuads() {\n        return quads;\n    }\n    public static void setQuads(Vector3f[] quads) {\n        QuadMesh.quads = quads;\n    }\n    /**\n     * Stores in the <code>storage</code> array the indices of quad\n     * <code>i</code>. If <code>i</code> is an invalid index, or if\n     * <code>storage.length<4</code>, then nothing happens\n     * \n     * @param i\n     *            The index of the quad to get.\n     * @param storage\n     *            The array that will hold the i's indexes.\n     */\n    public void getQuad(int i, int[] storage) {\n        if (i < getQuadCount() && storage.length >= 4) {\n            IntBuffer indices = getIndexBuffer();\n            storage[0] = indices.get(getVertIndex(i, 0));\n            storage[1] = indices.get(getVertIndex(i, 1));\n            storage[2] = indices.get(getVertIndex(i, 2));\n            storage[3] = indices.get(getVertIndex(i, 3));\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <code>i</code> is an invalid quad index,\n     * nothing happens.\n     * \n     * @param i\n     * @param vertices\n     */\n    public void getQuad(int i, Vector3f[] vertices) {\n        if (i < getQuadCount() && i >= 0) {\n            for (int x = 0; x < 4; x++) {\n                if (vertices[x] == null)\n", "answers": ["                    vertices[x] = new Vector3f();"], "length": 1059, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "1354213b38f26ed15b8f898742ff5002cfb7db09baf32dd7"}
{"input": "", "context": "/*\n * File   : $Source: /alkacon/cvs/alkacon/com.alkacon.opencms.documentcenter/src/com/alkacon/opencms/documentcenter/CmsDocumentFrontend.java,v $\n * Date   : $Date: 2010/03/19 15:31:13 $\n * Version: $Revision: 1.3 $\n *\n * This file is part of the Alkacon OpenCms Add-On Module Package\n *\n * Copyright (c) 2010 Alkacon Software GmbH (http://www.alkacon.com)\n *\n * The Alkacon OpenCms Add-On Module Package is free software: \n * you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * The Alkacon OpenCms Add-On Module Package is distributed \n * in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with the Alkacon OpenCms Add-On Module Package.  \n * If not, see http://www.gnu.org/licenses/.\n *\n * For further information about Alkacon Software GmbH, please see the\n * company website: http://www.alkacon.com.\n *\n * For further information about OpenCms, please see the\n * project website: http://www.opencms.org.\n */\npackage com.alkacon.opencms.v8.documentcenter;\nimport org.opencms.file.CmsPropertyDefinition;\nimport org.opencms.i18n.CmsMessages;\nimport org.opencms.jsp.CmsJspActionElement;\nimport org.opencms.jsp.CmsJspNavElement;\nimport org.opencms.util.CmsStringUtil;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.jsp.PageContext;\n/**\n * Provides customized methods for the document center frontend output.<p>\n * \n * @author Andreas Zahner\n * \n * @version $Revision: 1.3 $ \n * \n * @since 6.2.1\n */\n/**\n *\n */\npublic class CmsDocumentFrontend extends CmsJspActionElement {\n    /** Request attribute that stores if a disclaimer should be shown. */\n    public static final String ATTR_DISCLAIMER = \"oamp_doccenter_disclaimer\";\n    /** Request attribute that stores the absolute path to the current document center folder. */\n    public static final String ATTR_FULLPATH = \"oamp_doccenter_fullpath\";\n    /** Request attribute that stores the relative path to the current document center folder. */\n    public static final String ATTR_PATHPART = \"oamp_doccenter_pathpart\";\n    /** Request attribute that stores the absolute path to the document center start folder. */\n    public static final String ATTR_STARTPATH = \"oamp_doccenter_startpath\";\n    /** Name of the column: date created. */\n    public static final String COLUMN_NAME_DATECREATED = \"datecreated\";\n    /** Name of the column: date modified. */\n    public static final String COLUMN_NAME_DATEMODIFIED = \"datemodified\";\n    /** Name of the column: document folder. */\n    public static final String COLUMN_NAME_FOLDER = \"folder\";\n    /** Name of the column: document id. */\n    public static final String COLUMN_NAME_ID = \"id\";\n    /** Name of the column: document languages. */\n    public static final String COLUMN_NAME_LANGUAGE = \"lang\";\n    /** Name of the column: document size. */\n    public static final String COLUMN_NAME_SIZE = \"size\";\n    /** Name of the column: document title. */\n    public static final String COLUMN_NAME_TITLE = \"title\";\n    /** Name of the column: document type. */\n    public static final String COLUMN_NAME_TYPE = \"type\";\n    /** The sortable column default sort directions, must correspond to the sortable columns {@link #COLUMNS_SORTABLE}. */\n    public static final String[] COLUMNS_DIRECTIONS = {\n        CmsDocument.SORT_DIRECTION_ASC,\n        CmsDocument.SORT_DIRECTION_ASC,\n        CmsDocument.SORT_DIRECTION_ASC,\n        CmsDocument.SORT_DIRECTION_DESC,\n        CmsDocument.SORT_DIRECTION_DESC,\n        CmsDocument.SORT_DIRECTION_DESC};\n    /** The sortable column default sort directions as list. */\n    public static final List<String> COLUMNS_DIRECTIONS_LIST = Arrays.asList(COLUMNS_DIRECTIONS);\n    /** Stores the column names that are sortable. */\n    public static final String[] COLUMNS_SORTABLE = {\n        COLUMN_NAME_TYPE,\n        COLUMN_NAME_ID,\n        COLUMN_NAME_TITLE,\n        COLUMN_NAME_SIZE,\n        COLUMN_NAME_DATEMODIFIED,\n        COLUMN_NAME_DATECREATED};\n    /** The column names that are sortable as list. */\n    public static final List<String> COLUMNS_SORTABLE_LIST = Arrays.asList(COLUMNS_SORTABLE);\n    /** Name of the file extensions of the icons of the document list. */\n    public static final String ICON_POSTFIX = \".gif\";\n    /** Page type: default (shows the document list). */\n    public static final String PAGE_TYPE_DEFAULT = \"default\";\n    /** Request parameter name for the sort column parameter. */\n    public static final String PARAM_SORT_COLUMN = \"sortcol\";\n    /** Request parameter name for the sort direction parameter. */\n    public static final String PARAM_SORT_DIRECTION = \"sortdir\";\n    /** Property name to look if the document id column is shown. */\n    public static final String PROPERTY_COLUMN_ID = \"docs.columnid\";\n    /** Property name to look for document list column names to hide. */\n    public static final String PROPERTY_COLUMNS_HIDE = \"docs.hidecolumns\";\n    /** Property name to look for document list date columns to hide (old way, used for compatibility reasons). */\n    public static final String PROPERTY_COLUMNS_HIDE_DATE = \"categoryDateCreated\";\n    /** Property name to determine if the document center should consider attachments of the documents. */\n    public static final String PROPERTY_USE_ATTACHMENTS = \"docs.useattachments\";\n    /** Property name to set the default type if using different types. */\n    public static final String PROPERTY_USE_DEFAULTTYPE = \"docs.defaulttype\";\n    /** Property name to determine if the document center should consider language versions of the documents. */\n    public static final String PROPERTY_USE_LANGUAGES = \"docs.uselanguages\";\n    /** Property name to determine if the document center should consider different types of the documents. */\n    public static final String PROPERTY_USE_TYPES = \"docs.usetypes\";\n    /** The property values of the sort methods, must be in the same order as {@link #COLUMNS_SORTABLE}. */\n    public static final String[] SORT_METHODS = {\n        CmsDocument.SORT_METHOD_TYPE,\n        CmsDocument.SORT_METHOD_BY_ID,\n        CmsDocument.SORT_METHOD_ALPHABETICAL,\n        CmsDocument.SORT_METHOD_SIZE,\n        CmsDocument.SORT_METHOD_BY_DATEMODIFIED,\n        CmsDocument.SORT_METHOD_BY_DATECREATED};\n    /** The property values of the sort methods as list. */\n    public static final List<String> SORT_METHODS_LIST = Arrays.asList(SORT_METHODS);\n    /** The extension of the default type if using different types of documents. */\n    private String m_defaultType;\n    /** The page type to show. */\n    private String m_pageType;\n    /** The parameter of the sort column. */\n    private String m_paramSortColumn;\n    /** The parameter of the sort direction. */\n    private String m_paramSortDirection;\n    /** The value of the sort method property (\"method:direction:includefolders\"). */\n    private String m_sortMethod;\n    /** Determines if attachments of documents are present. */\n    private Boolean m_useAttachments;\n    /** Determines if language versions of documents are present. */\n    private Boolean m_useLanguages;\n    /** Determines if different types of documents are present. */\n    private Boolean m_useTypes;\n    /**\n     * Empty constructor, required for every JavaBean.\n     */\n    public CmsDocumentFrontend() {\n        super();\n    }\n    /**\n     * Constructor, with parameters.\n     * \n     * @param context the JSP page context object\n     * @param req the JSP request \n     * @param res the JSP response \n     */\n    public CmsDocumentFrontend(PageContext context, HttpServletRequest req, HttpServletResponse res) {\n        super(context, req, res);\n        // TODO: fix all current uri references to use proper sitepath\n    }\n    /**\n     * Creates the HTML code for the default breadcrumb navigation without the \"up one folder\" icon.<p>\n     * \n     * Used by: elements/navigation.jsp.<p>\n     * \n     * @param startFolder the start folder to build the navigation from\n     * @param navList the navigation elements (CmsJspNavElement)\n     * @param anchorClass the CSS class which will be used for the anchors\n     * @param separator the separator which will be used to separate the entries\n     * @param sepBeforeFirst if true, separator will be displayed before first element, too\n     * @return the HTML code for the breadcrumb navigation\n     */\n    public String buildBreadCrumbNavigation(\n        String startFolder,\n        List<CmsJspNavElement> navList,\n        String anchorClass,\n        String separator,\n        boolean sepBeforeFirst) {\n        StringBuffer result = new StringBuffer(64);\n        boolean isFirst = true;\n        if (sepBeforeFirst) {\n            isFirst = false;\n        }\n        String locNavText = CmsPropertyDefinition.PROPERTY_NAVTEXT + \"_\" + getRequestContext().getLocale().toString();\n        String locTitle = CmsPropertyDefinition.PROPERTY_TITLE + \"_\" + getRequestContext().getLocale().toString();\n        String currFolder = (String)getRequest().getAttribute(ATTR_FULLPATH);\n        // create the navigation \n        Iterator<CmsJspNavElement> i = navList.iterator();\n        while (i.hasNext()) {\n            CmsJspNavElement navElement = i.next();\n            String navText = navElement.getProperties().get(locNavText);\n            if (CmsStringUtil.isEmptyOrWhitespaceOnly(navText)) {\n                navText = navElement.getNavText();\n            }\n            if (navElement.getResourceName().startsWith(startFolder)) {\n                // check the navigation text\n                if (navText.indexOf(\"??? NavText\") != -1) {\n                    navText = navElement.getProperties().get(locTitle);\n                    if (CmsStringUtil.isEmptyOrWhitespaceOnly(navText)) {\n                        navText = navElement.getTitle();\n                    }\n                    if (CmsStringUtil.isEmptyOrWhitespaceOnly(navText)) {\n                        navText = navElement.getFileName();\n                    }\n                    if (navText.endsWith(\"/\")) {\n                        navText = navText.substring(0, (navText.length() - 1));\n                    }\n                }\n                // don't show separator in front of first element\n                if (!isFirst) {\n                    result.append(separator);\n                } else {\n                    isFirst = false;\n                }\n                if (navElement.getResourceName().equals(currFolder) && (navList.size() > 1)) {\n                    // the current folder will not be linked\n                    result.append(\"<span class=\\\"\");\n                    result.append(anchorClass);\n                    result.append(\"\\\">\");\n                    result.append(navText);\n                    result.append(\"</span>\");\n                } else {\n                    // create the link to the folder\n                    result.append(\"<a href=\\\"\");\n                    result.append(CmsDocumentFactory.getLink(this, navElement.getResourceName()));\n                    result.append(\"\\\" class=\\\"\");\n                    result.append(anchorClass);\n                    result.append(\"\\\">\");\n                    result.append(navText);\n                    result.append(\"</a>\");\n                }\n            }\n        }\n        return result.toString();\n    }\n    /**\n     * Creates the HTML code for the document or resource icon in document list, version list and search result list.<p>\n     * \n     * Used by: jsptemplates/list_documents.txt, elements/docversions.jsp, pages/jsp_pages/page_search_code.jsp.<p>\n     * \n     * @param docName the resource name of the document\n     * @param messages the localized messages\n     * @param resourcePath the path to the images\n     * @param isFolder true if the document is a folder, otherwise false\n     * @return the HTML code for the document icon\n     */\n    public String buildDocIcon(String docName, CmsMessages messages, String resourcePath, boolean isFolder) {\n        return buildDocIcon(docName, messages, resourcePath, isFolder, 16, 16);\n    }\n    /**\n     * Creates the HTML code for the document or resource icon in document list, version list and search result list.<p>\n     * \n     * Used by: jsptemplates/list_documents.txt, elements/docversions.jsp, pages/jsp_pages/page_search_code.jsp.<p>\n     * \n     * @param docName the resource name of the document\n     * @param messages the localized messages\n     * @param resourcePath the path to the images\n     * @param isFolder true if the document is a folder, otherwise false\n     * @param imgWidth the width of the icon image\n     * @param imgHeight the height of the icon image\n     * @return the HTML code for the document icon\n     */\n    public String buildDocIcon(\n        String docName,\n        CmsMessages messages,\n        String resourcePath,\n        boolean isFolder,\n        int imgWidth,\n        int imgHeight) {\n        String iconSrc, iconTitle, iconAlt;\n        // folder\n        if (isFolder) {\n            iconSrc = \"ic_folder\";\n            iconTitle = messages.key(\"documentlist.icon.folder.title\");\n            iconAlt = messages.key(\"documentlist.icon.folder.alt\");\n        }\n        // file\n        else {\n            String postfix = CmsDocument.getPostfix(docName);\n            postfix = CmsDocument.getPostfixAdjusted(postfix);\n            iconSrc = \"ic_app_\" + postfix;\n            iconTitle = messages.keyDefault(\"documentlist.icon.file.title.\" + postfix, \"\");\n            iconAlt = messages.keyDefault(\"documentlist.icon.file.alt.\" + postfix, \"\");\n            if ((postfix.equals(\"\")) || (!getCmsObject().existsResource(resourcePath + iconSrc + ICON_POSTFIX))) {\n                iconSrc = \"ic_app_unknown\";\n                iconTitle = messages.key(\"documentlist.icon.file.title.unknown\");\n                iconAlt = messages.key(\"documentlist.icon.file.alt.unknown\");\n            }\n        }\n        StringBuffer result = new StringBuffer(256);\n        result.append(\"<img src=\\\"\");\n        result.append(link(resourcePath + iconSrc + ICON_POSTFIX));\n        result.append(\"\\\" width=\\\"\").append(imgWidth).append(\"\\\" height=\\\"\").append(imgHeight);\n        result.append(\"\\\" border=\\\"0\\\" alt=\\\"\");\n        result.append(iconAlt);\n        result.append(\"\\\" title=\\\"\");\n        result.append(iconTitle);\n        result.append(\"\\\"/>\");\n        return result.toString();\n    }\n    /**\n     * Returns the column header including the link to sort the list by the column criteria.<p>\n     * \n     * @param columnName the internal column name\n     * @param resourcePath the path to the image resources\n     * @param messages the initialized localized messages to use\n     * @return the column header including the link to sort the list by the column criteria\n     */\n    public String getColumnHeader(String columnName, String resourcePath, CmsMessages messages) {\n        if (!isBeanSortInitialized()) {\n            initSort();\n        }\n        if (m_pageType.equals(\"default\") && COLUMNS_SORTABLE_LIST.contains(columnName)) {\n            // column is sortable and we are on a default page, so columns are sortable\n            StringBuffer result = new StringBuffer(256);\n            String dir = m_paramSortDirection;\n            String newDir = dir;\n            boolean isCurrentColumn = false;\n            if (columnName.equals(m_paramSortColumn)) {\n                // the column is the current sort column\n                isCurrentColumn = true;\n                // switch new sort direction link for current sort column\n                if ((dir != null) && dir.equals(CmsDocument.SORT_DIRECTION_ASC)) {\n                    newDir = CmsDocument.SORT_DIRECTION_DESC;\n                } else {\n                    newDir = CmsDocument.SORT_DIRECTION_ASC;\n                }\n            } else {\n                // use default sort direction for other columns\n                newDir = COLUMNS_DIRECTIONS_LIST.get(COLUMNS_SORTABLE_LIST.indexOf(columnName));\n            }\n            // create the link for sorting the column\n            StringBuffer link = new StringBuffer(128);\n            link.append((String)getRequest().getAttribute(ATTR_FULLPATH));\n            link.append(\"?\").append(PARAM_SORT_COLUMN).append(\"=\").append(columnName);\n            link.append(\"&amp;\").append(PARAM_SORT_DIRECTION).append(\"=\").append(newDir);\n            // set the title for the headline\n            String sortTitle = messages.key(\n                \"documentlist.sort.\" + newDir,\n                messages.key(\"documentlist.headline.\" + columnName));\n            result.append(\"<a href=\\\"\");\n            result.append(CmsDocumentFactory.getLink(this, link.toString()));\n            result.append(\"\\\" class=\\\"docshead\\\" title=\\\"\");\n            result.append(sortTitle);\n            result.append(\"\\\">\");\n            result.append(messages.key(\"documentlist.headline.\" + columnName));\n            if (isCurrentColumn) {\n                // set the marker icon for the current sort column\n                result.append(\"&nbsp;\");\n                result.append(\"<img src=\\\"\");\n                result.append(resourcePath).append(\"ic_sort_\").append(dir).append(\".png\");\n                result.append(\"\\\" border=\\\"0\\\" alt=\\\"\");\n                result.append(sortTitle);\n                result.append(\"\\\" title=\\\"\");\n                result.append(sortTitle);\n                result.append(\"\\\"/>\");\n            }\n            result.append(\"</a>\");\n            return result.toString();\n        } else {\n            // column is not sortable, simply print localized headline\n            return messages.key(\"documentlist.headline.\" + columnName);\n        }\n    }\n    /**\n     * Returns the defaultType.<p>\n     *\n     * @return the defaultType\n     */\n    public String getDefaultType() {\n        return m_defaultType;\n    }\n    /**\n     * Collects the names of the columns to hide in the document list view.<p>\n     * \n     * Columns that can be hidden are: date created, date last modified, document id.<p>\n     * \n     * @return the names of the clumns to hide\n     */\n    public List<String> getHiddenColumns() {\n        List<String> result = new ArrayList<String>(4);\n        String ignoredCols = property(PROPERTY_COLUMNS_HIDE, \"search\", \"\");\n        result = CmsStringUtil.splitAsList(ignoredCols, ';');\n        // backward compatibility: check for property defining visibility of date columns\n        String showDateData = property(\"categoryDateCreated\", \"search\", \"\");\n", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "length": 1920, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "5b8e2643405d58c8009b6c2812341072d705748a64e8f971"}
{"input": "", "context": "//  Copyright 2014 Invex Games http://invexgames.com\n//\tLicensed under the Apache License, Version 2.0 (the \"License\");\n//\tyou may not use this file except in compliance with the License.\n//\tYou may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n//\tUnless required by applicable law or agreed to in writing, software\n//\tdistributed under the License is distributed on an \"AS IS\" BASIS,\n//\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//\tSee the License for the specific language governing permissions and\n//\tlimitations under the License.\nusing UnityEngine;\nusing System.Collections;\nusing UnityEngine.UI;\nusing UnityEngine.EventSystems;\nnamespace MaterialUI\n{\n\tpublic class InputFieldConfig : MonoBehaviour, ISelectHandler, IDeselectHandler\n\t{\t\n\t\tpublic Color activeColor = Color.black;\n\t\tbool dynamicHeight;\n\t\tbool selected;\n\t\tpublic float animationDuration = 0.75f;\n\t\t[SerializeField] private RectTransform parentRect;\n\t\t[SerializeField] private Text placeholderText;\n\t\t[SerializeField] private Text inputText;\n\t\t[SerializeField] private Text displayText;\n\t\t[SerializeField] private Image activeLine;\n\t\tRectTransform textRect;\n\t\tRectTransform displayTextRect;\n\t\tInputField inputField;\n\t\tRectTransform activeLineRect;\n\t\tRectTransform placeholderRect;\n\t\tColor placeholderOffColor;\n\t\tColor placeholderColor;\n\t\tfloat placeholderScale;\n\t\tfloat placeholderPivot;\n\t\tfloat activeLineAlpha;\n\t\tfloat activeLinePos;\n\t\t\n\t\tfloat animStartTime;\n\t\tfloat animDeltaTime;\n\t\tbool selectedBefore;\n\t\tint state;\n\t\tvoid Awake()  //  Get references\n\t\t{\n\t\t\tinputField = gameObject.GetComponent<InputField>();\n\t\t\tactiveLineRect = activeLine.GetComponent<RectTransform>();\n\t\t\tplaceholderRect = placeholderText.GetComponent<RectTransform>();\n\t\t\ttextRect = inputText.GetComponent<RectTransform>();\n\t\t\tdisplayTextRect = displayText.GetComponent<RectTransform>();\n\t\t}\n\t\tvoid Start ()\n\t\t{\n\t\t\tactiveLineRect.sizeDelta = new Vector2 (placeholderRect.rect.width, activeLineRect.sizeDelta.y);\n\t\t\tinputText.font = displayText.font;\n\t\t\tinputText.fontStyle = displayText.fontStyle;\n\t\t\tinputText.fontSize = displayText.fontSize;\n\t\t\tinputText.lineSpacing = displayText.lineSpacing;\n\t\t\tinputText.supportRichText = displayText.supportRichText;\n\t\t\tinputText.alignment = displayText.alignment;\n\t\t\tinputText.horizontalOverflow = displayText.horizontalOverflow;\n\t\t\tinputText.resizeTextForBestFit = displayText.resizeTextForBestFit;\n\t\t\tinputText.material = displayText.material;\n\t\t\tinputText.color = displayText.color;\n\t\t\tplaceholderOffColor = placeholderText.color;\n\t\t\tif (inputField.lineType == InputField.LineType.MultiLineNewline || inputField.lineType == InputField.LineType.MultiLineSubmit)\n\t\t\t{\n\t\t\t\tdynamicHeight = true;\n\t\t\t}\n\t\t}\n\t\tpublic void OnSelect (BaseEventData data)\n\t\t{\n\t\t\tplaceholderColor = placeholderText.color;\n\t\t\tplaceholderPivot = placeholderRect.pivot.y;\n\t\t\tplaceholderScale = placeholderRect.localScale.x;\n\t\t\tactiveLine.color = activeColor;\n\t\t\tselected = true;\n\t\t\tactiveLineRect.position = Input.mousePosition;\n\t\t\tactiveLineRect.localPosition = new Vector3 (activeLineRect.localPosition.x, 0.5f, 0f);\n\t\t\tactiveLineRect.localScale = new Vector3 (0f, 1f, 1f);\n\t\t\tactiveLinePos = activeLineRect.localPosition.x;\n\t\t\tanimStartTime = Time.realtimeSinceStartup;\n\t\t\tstate = 1;\n\t\t}\n\t\t\n\t\tpublic void OnDeselect (BaseEventData data)\n\t\t{\n\t\t\tplaceholderColor = placeholderText.color;\n\t\t\tplaceholderPivot = placeholderRect.pivot.y;\n\t\t\tplaceholderScale = placeholderRect.localScale.x;\n\t\t\tselected = false;\n\t\t\tanimStartTime = Time.realtimeSinceStartup;\n\t\t\tstate = 2;\n\t\t}\n\t\tpublic void CalculateHeight ()\n\t\t{\n\t\t\tStartCoroutine (DelayedHeight());\n\t\t}\n\t\t\n\t\tvoid Update ()\n\t\t{\n\t\t\tanimDeltaTime = Time.realtimeSinceStartup - animStartTime;\n\t\t\t\n\t\t\tif (state == 1)    // Activating\n\t\t\t{\n\t\t\t\tif (animDeltaTime <= animationDuration)\n\t\t\t\t{\n\t\t\t\t\tColor tempColor = placeholderText.color;\n\t\t\t\t\ttempColor.r = Anim.Quint.Out(placeholderColor.r, activeColor.r, animDeltaTime, animationDuration);\n\t\t\t\t\ttempColor.g = Anim.Quint.Out(placeholderColor.g, activeColor.g, animDeltaTime, animationDuration);\n\t\t\t\t\ttempColor.b = Anim.Quint.Out(placeholderColor.b, activeColor.b, animDeltaTime, animationDuration);\n\t\t\t\t\ttempColor.a = Anim.Quint.Out(placeholderColor.a, activeColor.a, animDeltaTime, animationDuration);\n\t\t\t\t\tplaceholderText.color = tempColor;\n\t\t\t\t\tVector3 tempVec3 = placeholderRect.localScale;\n\t\t\t\t\ttempVec3.x = Anim.Quint.Out (placeholderScale, 0.75f, animDeltaTime, animationDuration);\n\t\t\t\t\ttempVec3.y =tempVec3.x;\n\t\t\t\t\ttempVec3.z =tempVec3.x;\n\t\t\t\t\tplaceholderRect.localScale = tempVec3;\n\t\t\t\t\tVector2 tempVec2 = placeholderRect.pivot;\n\t\t\t\t\ttempVec2.y = Anim.Quint.InOut (placeholderPivot, 0f, animDeltaTime, animationDuration);\n\t\t\t\t\tplaceholderRect.pivot = tempVec2;\n\t\t\t\t\ttempVec3 = activeLineRect.localScale;\n\t\t\t\t\ttempVec3.x = Anim.Quint.Out(0f, 1f, animDeltaTime, animationDuration);\n\t\t\t\t\tactiveLineRect.localScale = tempVec3;\n\t\t\t\t\ttempVec2 = activeLineRect.localPosition;\n\t\t\t\t\ttempVec2.x = Anim.Quint.Out (activeLinePos, 0f, animDeltaTime, animationDuration);\n\t\t\t\t\tactiveLineRect.localPosition = tempVec2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstate = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (state == 2)    // Deactivating\n\t\t\t{\n\t\t\t\tif (animDeltaTime <= 1f)\n\t\t\t\t{\n\t\t\t\t\tColor tempColor = placeholderText.color;\n\t\t\t\t\ttempColor.r = Anim.Quint.Out(placeholderColor.r, placeholderOffColor.r, animDeltaTime, animationDuration);\n\t\t\t\t\ttempColor.g = Anim.Quint.Out(placeholderColor.g, placeholderOffColor.g, animDeltaTime, animationDuration);\n\t\t\t\t\ttempColor.b = Anim.Quint.Out(placeholderColor.b, placeholderOffColor.b, animDeltaTime, animationDuration);\n\t\t\t\t\ttempColor.a = Anim.Quint.Out(placeholderColor.a, placeholderOffColor.a, animDeltaTime, animationDuration);\n\t\t\t\t\tplaceholderText.color = tempColor;\n\t\t\t\t\t\n\t\t\t\t\tif (inputField.text.Length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tVector3 tempVec3 = placeholderRect.localScale;\n\t\t\t\t\t\ttempVec3.x = Anim.Quint.InOut (placeholderScale, 1f, animDeltaTime, animationDuration);\n\t\t\t\t\t\ttempVec3.y =tempVec3.x;\n\t\t\t\t\t\ttempVec3.z =tempVec3.x;\n\t\t\t\t\t\tplaceholderRect.localScale = tempVec3;\n\t\t\t\t\t\t\n\t\t\t\t\t\tVector2 tempVec2 = placeholderRect.pivot;\n\t\t\t\t\t\ttempVec2.y = Anim.Quint.Out (placeholderPivot, 1f, animDeltaTime, animationDuration);\n\t\t\t\t\t\tplaceholderRect.pivot = tempVec2;\n\t\t\t\t\t}\n\t\t\t\t\ttempColor = activeLine.color;\n\t\t\t\t\ttempColor.a = Anim.Quint.Out(1f, 0f, animDeltaTime, animationDuration);\n\t\t\t\t\tactiveLine.color = tempColor;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstate = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (selected)\n\t\t\t{\n\t\t\t\tif (dynamicHeight)\n\t\t\t\t{\n\t\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\t\tdisplayText.text = inputField.text;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdisplayText.text = inputText.text;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tIEnumerator DelayedHeight ()\n\t\t{\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "length": 583, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "6f54b8bdeec79fa980ac72092ce615f8de384ea5d04ccc11"}
{"input": "", "context": "using System;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing System.Windows.Forms;\nnamespace mRemoteNG.UI.TaskDialog\n{\n  public sealed partial class CommandButton : Button\n  {\n    //--------------------------------------------------------------------------------\n    #region PRIVATE MEMBERS\n    //--------------------------------------------------------------------------------\n    Image imgArrow1;\n    Image imgArrow2;\n    const int LEFT_MARGIN = 10;\n    const int TOP_MARGIN = 10;\n    const int ARROW_WIDTH = 19;\n    enum eButtonState { Normal, MouseOver, Down }\n    eButtonState m_State = eButtonState.Normal;\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region PUBLIC PROPERTIES\n    //--------------------------------------------------------------------------------\n    // Override this to make sure the control is invalidated (repainted) when 'Text' is changed\n    public override string Text\n    {\n      get { return base.Text; }\n      set\n      {\n        base.Text = value;\n        if (m_autoHeight)\n          Height = GetBestHeight();\n        Invalidate(); \n      }\n    }\n    // SmallFont is the font used for secondary lines\n      private Font SmallFont { get; set; }\n      // AutoHeight determines whether the button automatically resizes itself to fit the Text\n    bool m_autoHeight = true;\n    [Browsable(true)]\n    [Category(\"Behavior\")]\n    [DefaultValue(true)]\n    public bool AutoHeight { get { return m_autoHeight; } set { m_autoHeight = value; if (m_autoHeight) Invalidate(); } }\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region CONSTRUCTOR\n    //--------------------------------------------------------------------------------\n    public CommandButton()\n    {\n      InitializeComponent();\n      Font = new Font(\"Segoe UI\", 11.75F, FontStyle.Regular, GraphicsUnit.Point, 0);\n      SmallFont = new Font(\"Segoe UI\", 8F, FontStyle.Regular, GraphicsUnit.Point, 0);\n    }\n    \n    #endregion\n    //--------------------------------------------------------------------------------\n    #region PUBLIC ROUTINES\n    //--------------------------------------------------------------------------------\n    public int GetBestHeight()\n    {\n      return (TOP_MARGIN * 2) + (int)GetSmallTextSizeF().Height + (int)GetLargeTextSizeF().Height;\n    }\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region PRIVATE ROUTINES\n    //--------------------------------------------------------------------------------\n    string GetLargeText()\n    {\n      string[] lines = Text.Split('\\n');\n      return lines[0];\n    }\n    string GetSmallText()\n    {\n      if (Text.IndexOf('\\n') < 0)\n        return \"\";\n      string s = Text;\n      string[] lines = s.Split('\\n');\n      s = \"\";\n      for (int i = 1; i < lines.Length; i++)\n        s += lines[i] + \"\\n\";\n      return s.Trim('\\n');\n    }\n    SizeF GetLargeTextSizeF()\n    {\n      int x = LEFT_MARGIN + ARROW_WIDTH + 5;\n      SizeF mzSize = new SizeF(Width - x - LEFT_MARGIN, 5000.0F);  // presume RIGHT_MARGIN = LEFT_MARGIN\n      Graphics g = Graphics.FromHwnd(Handle);\n      SizeF textSize = g.MeasureString(GetLargeText(), Font, mzSize);\n      return textSize;\n    }\n    SizeF GetSmallTextSizeF()\n    {\n      string s = GetSmallText();\n      if (s == \"\") return new SizeF(0, 0);\n      int x = LEFT_MARGIN + ARROW_WIDTH + 8; // <- indent small text slightly more\n      SizeF mzSize = new SizeF(Width - x - LEFT_MARGIN, 5000.0F);  // presume RIGHT_MARGIN = LEFT_MARGIN\n      Graphics g = Graphics.FromHwnd(Handle);\n      SizeF textSize = g.MeasureString(s, SmallFont, mzSize);\n      return textSize;\n    }\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region OVERRIDEs\n    //--------------------------------------------------------------------------------\n    protected override void OnCreateControl()\n    {\n        base.OnCreateControl();\n        imgArrow1 = Resources.green_arrow1;\n        imgArrow2 = Resources.green_arrow2;\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnPaint(PaintEventArgs e)\n    {\n      e.Graphics.SmoothingMode = SmoothingMode.HighQuality;\n      e.Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit;\n      LinearGradientBrush brush;\n      LinearGradientMode mode = LinearGradientMode.Vertical;\n      Rectangle newRect = new Rectangle(ClientRectangle.X, ClientRectangle.Y, ClientRectangle.Width - 1, ClientRectangle.Height - 1);\n      Color text_color = SystemColors.WindowText;\n      Image img = imgArrow1;\n      \n      if (Enabled)\n      {\n        switch (m_State)\n        {\n          case eButtonState.Normal:\n            e.Graphics.FillRectangle(SystemBrushes.Control, newRect);\n                e.Graphics.DrawRectangle(Focused ? new Pen(Color.Silver, 1) : new Pen(SystemColors.Control, 1), newRect);\n                text_color = Color.DarkBlue;\n            break;\n          case eButtonState.MouseOver:\n            brush = new LinearGradientBrush(newRect, SystemColors.Control, SystemColors.Control, mode);\n            e.Graphics.FillRectangle(brush, newRect);\n            e.Graphics.DrawRectangle(new Pen(Color.Silver, 1), newRect);\n            img = imgArrow2;\n            text_color = Color.Blue;\n            break;\n          case eButtonState.Down:\n            brush = new LinearGradientBrush(newRect, SystemColors.Control, SystemColors.Control, mode);\n            e.Graphics.FillRectangle(brush, newRect);\n            e.Graphics.DrawRectangle(new Pen(Color.DarkGray, 1), newRect);\n            text_color = Color.DarkBlue;\n            break;\n        }\n      }\n      else\n      {\n        brush = new LinearGradientBrush(newRect, SystemColors.Control, SystemColors.Control, mode);\n        e.Graphics.FillRectangle(brush, newRect);\n        e.Graphics.DrawRectangle(new Pen(Color.DarkGray, 1), newRect);\n        text_color = Color.DarkBlue;\n      }\n      string largetext = GetLargeText();\n      string smalltext = GetSmallText();\n      SizeF szL = GetLargeTextSizeF();\n      //e.Graphics.DrawString(largetext, base.Font, new SolidBrush(text_color), new RectangleF(new PointF(LEFT_MARGIN + imgArrow1.Width + 5, TOP_MARGIN), szL));\n      TextRenderer.DrawText(e.Graphics, largetext, Font, new Rectangle(LEFT_MARGIN + imgArrow1.Width + 5, TOP_MARGIN, (int)szL.Width, (int)szL.Height), text_color, TextFormatFlags.Default);\n      if (smalltext != \"\")\n      {\n        SizeF szS = GetSmallTextSizeF();\n        e.Graphics.DrawString(smalltext, SmallFont, new SolidBrush(text_color), new RectangleF(new PointF(LEFT_MARGIN + imgArrow1.Width + 8, TOP_MARGIN + (int)szL.Height), szS));\n      }\n      e.Graphics.DrawImage(img, new Point(LEFT_MARGIN, TOP_MARGIN + (int)(szL.Height / 2) - img.Height / 2));\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnMouseLeave(EventArgs e)\n    {\n      m_State = eButtonState.Normal;\n      Invalidate();\n      base.OnMouseLeave(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnMouseEnter(EventArgs e)\n    {\n      m_State = eButtonState.MouseOver;\n      Invalidate();\n      base.OnMouseEnter(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnMouseUp(MouseEventArgs e)\n    {\n      m_State = eButtonState.MouseOver;\n      Invalidate();\n      base.OnMouseUp(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnMouseDown(MouseEventArgs e)\n    {\n      m_State = eButtonState.Down;\n      Invalidate();\n      base.OnMouseDown(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnSizeChanged(EventArgs e)\n    {\n      if (m_autoHeight)\n      {\n", "answers": ["        int h = GetBestHeight();"], "length": 638, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "9ee2a42b13526dd952de8a27bb5404cee70aa93dc9e35ee7"}
{"input": "", "context": "//\n// DO NOT REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n//\n// @Authors:\n//       timop\n//\n// Copyright 2004-2013 by OM International\n//\n// This file is part of OpenPetra.org.\n//\n// OpenPetra.org is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// OpenPetra.org is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with OpenPetra.org.  If not, see <http://www.gnu.org/licenses/>.\n//\nusing System;\nusing System.IO;\nusing System.Data;\nusing System.Collections.Generic;\nusing Ict.Common;\nusing Ict.Common.DB;\nusing Ict.Common.Data;\nusing Ict.Common.IO;\nusing Ict.Petra.Server.MSysMan.Cacheable.WebConnectors;\nusing Ict.Petra.Shared.MSysMan.Data;\nusing Ict.Petra.Server.MSysMan.Maintenance.SystemDefaults.WebConnectors;\nusing Ict.Petra.Server.MSysMan.Data.Access;\nnamespace Ict.Petra.Server.MCommon.Processing\n{\n    /// <summary>\n    /// run some data checks against the database and tell the users how to fix consistency issues\n    /// </summary>\n    public class TProcessDataChecks\n    {\n        private const string PROCESSDATACHECK_LAST_RUN = \"PROCESSDATACHECK_LAST_RUN\";\n        private const float SENDREPORTFORDAYS_TOUSERS = 14.0f;\n        private static DateTime Errors_SinceDate;\n        /// <summary>\n        /// Gets called in regular intervals from a Timer in Class TTimedProcessing.\n        /// </summary>\n        /// <param name=\"ADBAccessObj\">Instantiated DB Access object with opened DB connection.</param>\n        /// <param name=\"ARunManually\">this is true if the process was called manually from the server admin console</param>\n        public static void Process(TDataBase ADBAccessObj, bool ARunManually)\n        {\n            // only check once a day (or as specified in config file), if not manually called\n            if (!ARunManually)\n            {\n                DateTime LastRun =\n                    TVariant.DecodeFromString(\n                        TSystemDefaults.GetSystemDefault(\n                            PROCESSDATACHECK_LAST_RUN,\n                            new TVariant(DateTime.MinValue).EncodeToString())).ToDate();\n                if (LastRun.AddDays(TAppSettingsManager.GetInt16(\"DataChecks.RunEveryXDays\", 1)) > DateTime.Now)\n                {\n                    // do not run the data check more than once a day or a week (depending on configuration setting), too many emails\n                    TLogging.LogAtLevel(1, \"TProcessDataChecks.Process: not running, since last run was at \" + LastRun.ToString());\n                    return;\n                }\n            }\n            Errors_SinceDate = DateTime.Today.AddDays(-1 * SENDREPORTFORDAYS_TOUSERS);\n            TLogging.LogAtLevel(1, \"TProcessDataChecks.Process: Checking Modules\");\n            CheckModule(ADBAccessObj, \"DataCheck.MPartner.\");\n            TSystemDefaults.SetSystemDefault(PROCESSDATACHECK_LAST_RUN, new TVariant(DateTime.Now).EncodeToString());\n        }\n        private static void CheckModule(TDataBase ADBAccessObj, string AModule)\n        {\n            // get all sql files starting with module\n            string[] sqlfiles = Directory.GetFiles(Path.GetFullPath(TAppSettingsManager.GetValue(\"SqlFiles.Path\", \".\")),\n                AModule + \"*.sql\");\n            DataTable errors = new DataTable(AModule + \"Errors\");\n            foreach (string sqlfile in sqlfiles)\n            {\n                string sql = TDataBase.ReadSqlFile(Path.GetFileName(sqlfile));\n                // extend the sql to load the s_date_created_d, s_created_by_c, s_date_modified_d, s_modified_by_c\n                // only for the first table in the FROM clause\n                string firstTableAlias = sql.Substring(sql.ToUpper().IndexOf(\"FROM \") + \"FROM \".Length);\n                firstTableAlias = firstTableAlias.Substring(0, firstTableAlias.ToUpper().IndexOf(\"WHERE\"));\n                int indexOfAs = firstTableAlias.ToUpper().IndexOf(\" AS \");\n                if (indexOfAs > -1)\n                {\n                    firstTableAlias = firstTableAlias.Substring(indexOfAs + \" AS \".Length).Trim();\n                    if (firstTableAlias.Contains(\",\"))\n                    {\n                        firstTableAlias = firstTableAlias.Substring(0, firstTableAlias.IndexOf(\",\")).Trim();\n                    }\n                }\n                sql = sql.Replace(\"FROM \", \", \" + firstTableAlias + \".s_date_created_d AS DateCreated, \" +\n                    firstTableAlias + \".s_created_by_c AS CreatedBy, \" +\n                    firstTableAlias + \".s_date_modified_d AS DateModified, \" +\n                    firstTableAlias + \".s_modified_by_c AS ModifiedBy FROM \");\n                errors.Merge(ADBAccessObj.SelectDT(sql, \"temp\", null));\n            }\n            if (errors.Rows.Count > 0)\n            {\n                SendEmailToAdmin(errors);\n                SendEmailsPerUser(errors);\n            }\n        }\n        private static void SendEmailToAdmin(DataTable AErrors)\n        {\n            // Create excel output of the errors table\n            string excelfile = TAppSettingsManager.GetValue(\"DataChecks.TempPath\") + \"/errors.xlsx\";\n            try\n            {\n                using (StreamWriter sw = new StreamWriter(excelfile))\n                {\n                    using (MemoryStream m = new MemoryStream())\n                    {\n                        if (!TCsv2Xml.DataTable2ExcelStream(AErrors, m))\n                        {\n                            return;\n                        }\n                        m.WriteTo(sw.BaseStream);\n                        m.Close();\n                        sw.Close();\n                    }\n                }\n            }\n            catch (Exception e)\n            {\n                TLogging.Log(\"Problems writing to file \" + excelfile);\n                TLogging.Log(e.ToString());\n                return;\n            }\n            if (TAppSettingsManager.HasValue(\"DataChecks.Email.Recipient\"))\n            {\n                new TSmtpSender().SendEmail(\"<\" + TAppSettingsManager.GetValue(\"DataChecks.Email.Sender\") + \">\",\n                    \"OpenPetra DataCheck Robot\",\n                    TAppSettingsManager.GetValue(\"DataChecks.Email.Recipient\"),\n                    \"Data Check\",\n                    \"there are \" + AErrors.Rows.Count.ToString() + \" errors. Please see attachment!\",\n                    new string[] { excelfile });\n            }\n            else\n            {\n                TLogging.Log(\"there is no email sent because DataChecks.Email.Recipient is not defined in the config file\");\n            }\n        }\n        private static void SendEmailForUser(string AUserId, DataTable AErrors)\n        {\n            // get the email address of the user\n            SUserRow userrow = SUserAccess.LoadByPrimaryKey(AUserId, null)[0];\n            string excelfile = TAppSettingsManager.GetValue(\"DataChecks.TempPath\") + \"/errors\" + AUserId + \".xlsx\";\n            DataView v = new DataView(AErrors,\n                \"(CreatedBy='\" + AUserId + \"' AND ModifiedBy IS NULL AND DateCreated > #\" + Errors_SinceDate.ToString(\"MM/dd/yyyy\") + \"#) \" +\n                \"OR (ModifiedBy='\" + AUserId + \"' AND DateModified > #\" + Errors_SinceDate.ToString(\"MM/dd/yyyy\") + \"#)\",\n                string.Empty, DataViewRowState.CurrentRows);\n            try\n            {\n                using (StreamWriter sw = new StreamWriter(excelfile))\n                {\n                    using (MemoryStream m = new MemoryStream())\n                    {\n                        if (!TCsv2Xml.DataTable2ExcelStream(v.ToTable(), m))\n                        {\n                            return;\n                        }\n                        m.WriteTo(sw.BaseStream);\n                        m.Close();\n                        sw.Close();\n                    }\n                }\n            }\n            catch (Exception e)\n            {\n                TLogging.Log(\"Problems writing to file \" + excelfile);\n                TLogging.Log(e.ToString());\n                return;\n            }\n            string recipientEmail = string.Empty;\n            if (!userrow.IsEmailAddressNull())\n            {\n                recipientEmail = userrow.EmailAddress;\n            }\n            else if (TAppSettingsManager.HasValue(\"DataChecks.Email.Recipient.UserDomain\"))\n            {\n                recipientEmail = userrow.FirstName + \".\" + userrow.LastName + \"@\" + TAppSettingsManager.GetValue(\n                    \"DataChecks.Email.Recipient.UserDomain\");\n            }\n            else if (TAppSettingsManager.HasValue(\"DataChecks.Email.Recipient\"))\n            {\n                recipientEmail = TAppSettingsManager.GetValue(\"DataChecks.Email.Recipient\");\n            }\n            if (recipientEmail.Length > 0)\n            {\n                new TSmtpSender().SendEmail(\"<\" + TAppSettingsManager.GetValue(\"DataChecks.Email.Sender\") + \">\",\n                    \"OpenPetra DataCheck Robot\",\n                    recipientEmail,\n                    \"Data Check for \" + AUserId,\n                    \"there are \" + v.Count.ToString() + \" errors. Please see attachment!\",\n                    new string[] { excelfile });\n            }\n            else\n            {\n                TLogging.Log(\"no email can be sent to \" + AUserId);\n            }\n        }\n        private static void SendEmailsPerUser(DataTable AErrors)\n        {\n            // get all users that have created or modified the records in the past week(s)\n            List <String>Users = new List <string>();\n            foreach (DataRow r in AErrors.Rows)\n            {\n                string lastUser = string.Empty;\n                if (!r.IsNull(\"DateModified\") && (Convert.ToDateTime(r[\"DateModified\"]) > Errors_SinceDate))\n                {\n                    lastUser = r[\"ModifiedBy\"].ToString();\n                }\n                else if (!r.IsNull(\"DateCreated\") && (Convert.ToDateTime(r[\"DateCreated\"]) > Errors_SinceDate))\n                {\n", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "length": 864, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "fee4dc71675158dd9374b556629af2d83cdc0503955dba84"}
{"input": "", "context": "#region Copyright & License Information\n/*\n * Copyright 2007-2014 The OpenRA Developers (see AUTHORS)\n * This file is part of OpenRA, which is free software. It is made\n * available to you under the terms of the GNU General Public License\n * as published by the Free Software Foundation. For more information,\n * see COPYING.\n */\n#endregion\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing OpenRA.Graphics;\nusing OpenRA.Orders;\nusing OpenRA.Traits;\nnamespace OpenRA.Widgets\n{\n\tpublic enum WorldTooltipType { None, Unexplored, Actor, FrozenActor }\n\tpublic class ViewportControllerWidget : Widget\n\t{\n\t\tpublic readonly string TooltipTemplate = \"WORLD_TOOLTIP\";\n\t\tpublic readonly string TooltipContainer;\n\t\tLazy<TooltipContainerWidget> tooltipContainer;\n\t\tpublic WorldTooltipType TooltipType { get; private set; }\n\t\tpublic IToolTip ActorTooltip { get; private set; }\n\t\tpublic FrozenActor FrozenActorTooltip { get; private set; }\n\t\tpublic int EdgeScrollThreshold = 15;\n\t\tpublic int EdgeCornerScrollThreshold = 35;\n\t\tstatic readonly Dictionary<ScrollDirection, string> ScrollCursors = new Dictionary<ScrollDirection, string>\n\t\t{\n\t\t\t{ ScrollDirection.Up | ScrollDirection.Left, \"scroll-tl\" },\n\t\t\t{ ScrollDirection.Up | ScrollDirection.Right, \"scroll-tr\" },\n\t\t\t{ ScrollDirection.Down | ScrollDirection.Left, \"scroll-bl\" },\n\t\t\t{ ScrollDirection.Down | ScrollDirection.Right, \"scroll-br\" },\n\t\t\t{ ScrollDirection.Up, \"scroll-t\" },\n\t\t\t{ ScrollDirection.Down, \"scroll-b\" },\n\t\t\t{ ScrollDirection.Left, \"scroll-l\" },\n\t\t\t{ ScrollDirection.Right, \"scroll-r\" },\n\t\t};\n\t\tstatic readonly Dictionary<ScrollDirection, float2> ScrollOffsets = new Dictionary<ScrollDirection, float2>\n\t\t{\n\t\t\t{ ScrollDirection.Up, new float2(0, -1) },\n\t\t\t{ ScrollDirection.Down, new float2(0, 1) },\n\t\t\t{ ScrollDirection.Left, new float2(-1, 0) },\n\t\t\t{ ScrollDirection.Right, new float2(1, 0) },\n\t\t};\n\t\tScrollDirection keyboardDirections;\n\t\tScrollDirection edgeDirections;\n\t\tWorld world;\n\t\tWorldRenderer worldRenderer;\n\t\t[ObjectCreator.UseCtor]\n\t\tpublic ViewportControllerWidget(World world, WorldRenderer worldRenderer)\n\t\t{\n\t\t\tthis.world = world;\n\t\t\tthis.worldRenderer = worldRenderer;\n\t\t\ttooltipContainer = Exts.Lazy(() =>\n\t\t\t\tUi.Root.Get<TooltipContainerWidget>(TooltipContainer));\n\t\t}\n\t\tpublic override void MouseEntered()\n\t\t{\n\t\t\tif (TooltipContainer == null)\n\t\t\t\treturn;\n\t\t\ttooltipContainer.Value.SetTooltip(TooltipTemplate,\n\t\t\t\tnew WidgetArgs() {{ \"world\", world }, { \"viewport\", this }});\n\t\t}\n\t\tpublic override void MouseExited()\n\t\t{\n\t\t\tif (TooltipContainer == null)\n\t\t\t\treturn;\n\t\t\ttooltipContainer.Value.RemoveTooltip();\n\t\t}\n\t\tpublic override void Draw()\n\t\t{\n\t\t\tUpdateMouseover();\n\t\t\tbase.Draw();\n\t\t}\n\t\tpublic void UpdateMouseover()\n\t\t{\n\t\t\tTooltipType = WorldTooltipType.None;\n\t\t\tvar cell = worldRenderer.Viewport.ViewToWorld(Viewport.LastMousePos);\n\t\t\tif (!world.Map.Contains(cell))\n\t\t\t\treturn;\n\t\t\tif (world.ShroudObscures(cell))\n\t\t\t{\n\t\t\t\tTooltipType = WorldTooltipType.Unexplored;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar underCursor = world.ScreenMap.ActorsAt(worldRenderer.Viewport.ViewToWorldPx(Viewport.LastMousePos))\n\t\t\t\t.Where(a => !world.FogObscures(a) && a.HasTrait<IToolTip>())\n\t\t\t\t.WithHighestSelectionPriority();\n\t\t\tif (underCursor != null)\n\t\t\t{\n\t\t\t\tActorTooltip = underCursor.TraitsImplementing<IToolTip>().First();\n\t\t\t\tTooltipType = WorldTooltipType.Actor;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar frozen = world.ScreenMap.FrozenActorsAt(world.RenderPlayer, worldRenderer.Viewport.ViewToWorldPx(Viewport.LastMousePos))\n\t\t\t\t.Where(a => a.TooltipName != null && a.IsValid)\n\t\t\t\t.WithHighestSelectionPriority();\n\t\t\tif (frozen != null)\n\t\t\t{\n\t\t\t\tFrozenActorTooltip = frozen;\n\t\t\t\tTooltipType = WorldTooltipType.FrozenActor;\n\t\t\t}\n\t\t}\n\t\tpublic override string GetCursor(int2 pos)\n\t\t{\n\t\t\tif (!Game.Settings.Game.ViewportEdgeScroll || Ui.MouseOverWidget != this)\n\t\t\t\treturn null;\n\t\t\tvar blockedDirections = worldRenderer.Viewport.GetBlockedDirections();\n\t\t\tforeach (var dir in ScrollCursors)\n\t\t\t\tif (edgeDirections.Includes(dir.Key))\n\t\t\t\t\treturn dir.Value + (blockedDirections.Includes(dir.Key) ? \"-blocked\" : \"\");\n\t\t\treturn null;\n\t\t}\n\t\tpublic override bool HandleMouseInput(MouseInput mi)\n\t\t{\n\t\t\tvar scrolltype = Game.Settings.Game.MouseScroll;\n\t\t\tif (scrolltype == MouseScrollType.Disabled)\n\t\t\t\treturn false;\n\t\t\tif (mi.Event == MouseInputEvent.Move &&\n\t\t\t\t(mi.Button == MouseButton.Middle || mi.Button == (MouseButton.Left | MouseButton.Right)))\n\t\t\t{\n\t\t\t\tvar d = scrolltype == MouseScrollType.Inverted ? -1 : 1;\n\t\t\t\tworldRenderer.Viewport.Scroll((Viewport.LastMousePos - mi.Location) * d, false);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tpublic override bool YieldKeyboardFocus()\n\t\t{\n\t\t\tkeyboardDirections = ScrollDirection.None;\n\t\t\treturn base.YieldKeyboardFocus();\n\t\t}\n\t\tpublic override bool HandleKeyPress(KeyInput e)\n\t\t{\n\t\t\tswitch (e.Key)\n\t\t\t{\n\t\t\t\tcase Keycode.UP: keyboardDirections = keyboardDirections.Set(ScrollDirection.Up, e.Event == KeyInputEvent.Down); return true;\n\t\t\t\tcase Keycode.DOWN: keyboardDirections = keyboardDirections.Set(ScrollDirection.Down, e.Event == KeyInputEvent.Down); return true;\n\t\t\t\tcase Keycode.LEFT: keyboardDirections = keyboardDirections.Set(ScrollDirection.Left, e.Event == KeyInputEvent.Down); return true;\n\t\t\t\tcase Keycode.RIGHT: keyboardDirections = keyboardDirections.Set(ScrollDirection.Right, e.Event == KeyInputEvent.Down); return true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tpublic override void Tick()\n\t\t{\n\t\t\tedgeDirections = ScrollDirection.None;\n\t\t\tif (Game.Settings.Game.ViewportEdgeScroll && Game.HasInputFocus)\n\t\t\t\tedgeDirections = CheckForDirections();\n\t\t\tif (keyboardDirections != ScrollDirection.None || edgeDirections != ScrollDirection.None)\n\t\t\t{\n\t\t\t\tvar scroll = float2.Zero;\n\t\t\t\tforeach (var kv in ScrollOffsets)\n\t\t\t\t\tif (keyboardDirections.Includes(kv.Key) || edgeDirections.Includes(kv.Key))\n\t\t\t\t\t\tscroll += kv.Value;\n\t\t\t\tvar length = Math.Max(1, scroll.Length);\n\t\t\t\tscroll *= (1f / length) * Game.Settings.Game.ViewportEdgeScrollStep;\n\t\t\t\tworldRenderer.Viewport.Scroll(scroll, false);\n\t\t\t}\n\t\t}\n\t\tScrollDirection CheckForDirections()\n\t\t{\n\t\t\tvar directions = ScrollDirection.None;\n\t\t\tif (Viewport.LastMousePos.X < EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Left;\n\t\t\tif (Viewport.LastMousePos.Y < EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Up;\n\t\t\tif (Viewport.LastMousePos.X >= Game.Renderer.Resolution.Width - EdgeScrollThreshold)\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "length": 598, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "91b83a11b6dc2c86381251a96905d31244b8ac184fe12ef5"}
{"input": "", "context": "//\n// DO NOT REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n//\n// @Authors:\n//       peters\n//\n// Copyright 2004-2012 by OM International\n//\n// This file is part of OpenPetra.org.\n//\n// OpenPetra.org is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// OpenPetra.org is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with OpenPetra.org.  If not, see <http://www.gnu.org/licenses/>.\n//\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Windows.Forms;\nusing GNU.Gettext;\nusing Ict.Common;\nusing Ict.Common.Exceptions;\nusing Ict.Common.Verification;\nusing Ict.Petra.Client.App.Core;\nusing Ict.Petra.Client.App.Core.RemoteObjects;\nusing Ict.Petra.Client.MPartner.Gui;\nusing Ict.Petra.Shared;\nusing Ict.Petra.Shared.MConference;\nusing Ict.Petra.Shared.MConference.Data;\nusing Ict.Petra.Shared.MConference.Validation;\nusing Ict.Petra.Shared.MPartner;\nusing Ict.Petra.Shared.MPartner.Partner.Data;\nnamespace Ict.Petra.Client.MConference.Gui.Setup\n{\n    public partial class TFrmConferenceMasterSettings\n    {\n        /// PartnerKey for selected conference to be set from outside\n        public static Int64 FPartnerKey {\n            private get; set;\n        }\n        private void InitializeManualCode()\n        {\n            string ConferenceName;\n            // load data into dataset\n            FMainDS.Clear();\n            FMainDS.Merge(TRemote.MConference.Conference.WebConnectors.LoadConferenceSettings(FPartnerKey, out ConferenceName));\n            // display conference name\n            this.Text = this.Text + \" [\" + ConferenceName + \"]\";\n            txtConferenceName.Text = ConferenceName;\n            // display campaign code prefix\n            txtCampaignPrefixCode.Text = ((PcConferenceRow)FMainDS.PcConference.Rows[0]).OutreachPrefix;\n            // display start/end dates\n            dtpStartDate.Date = ((PPartnerLocationRow)FMainDS.PPartnerLocation.Rows[0]).DateEffective;\n            dtpEndDate.Date = ((PPartnerLocationRow)FMainDS.PPartnerLocation.Rows[0]).DateGoodUntil;\n            // enable dtps only if date is null\n            if ((dtpStartDate.Date == null) || (dtpStartDate.Date == DateTime.MinValue))\n            {\n                dtpStartDate.Enabled = true;\n            }\n            if ((dtpEndDate.Date == null) || (dtpEndDate.Date == DateTime.MinValue))\n            {\n                dtpEndDate.Enabled = true;\n            }\n            // display currency (if currency code in PUnit has changed then use that over the currency code in PcConference)\n            if ((FMainDS.PUnit.Rows.Count == 0)\n                || (((PUnitRow)FMainDS.PUnit.Rows[0]).OutreachCostCurrencyCode == ((PcConferenceRow)FMainDS.PcConference.Rows[0]).CurrencyCode))\n            {\n                cmbCurrency.SetSelectedString(((PcConferenceRow)FMainDS.PcConference.Rows[0]).CurrencyCode, -1);\n            }\n            else\n            {\n                cmbCurrency.SetSelectedString(((PUnitRow)FMainDS.PUnit.Rows[0]).OutreachCostCurrencyCode, -1);\n            }\n            // set radio buttons and checkbox\n            Boolean ChargeCampaign = true;\n            Boolean AddAccommodationCosts = false;\n            foreach (PcConferenceOptionRow CurrentRow in FMainDS.PcConferenceOption.Rows)\n            {\n                if ((CurrentRow.OptionTypeCode == \"COST_PER_NIGHT\") && (CurrentRow.OptionSet == true))\n                {\n                    ChargeCampaign = false;\n                    rbtNight.Checked = true;\n                }\n                else if ((CurrentRow.OptionTypeCode == \"COST_PER_DAY\") && (CurrentRow.OptionSet == true))\n                {\n                    ChargeCampaign = false;\n                    rbtDay.Checked = true;\n                }\n                else if ((CurrentRow.OptionTypeCode == \"ADD_ACCOMM_COST_FOR_TOTAL\") && (CurrentRow.OptionSet == true))\n                {\n                    AddAccommodationCosts = true;\n                }\n            }\n            if (ChargeCampaign == true)\n            {\n                rbtCampaign.Checked = true;\n                chkAddAccommodationCosts.Enabled = false;\n            }\n            else if (AddAccommodationCosts == true)\n            {\n                chkAddAccommodationCosts.Checked = true;\n                txtSpecialRolePreAccommodation.ReadOnly = false;\n                txtVolunteerPreAccommodation.ReadOnly = false;\n                txtParticipantPreAccommodation.ReadOnly = false;\n                txtSpecialRoleAccommodation.ReadOnly = false;\n                txtVolunteerAccommodation.ReadOnly = false;\n                txtSpecialRoleCampaignAccommodation.ReadOnly = false;\n                txtSpecialRolePreAccommodation.TabStop = true;\n                txtVolunteerPreAccommodation.TabStop = true;\n                txtParticipantPreAccommodation.TabStop = true;\n                txtSpecialRoleAccommodation.TabStop = true;\n                txtVolunteerAccommodation.TabStop = true;\n                txtSpecialRoleCampaignAccommodation.TabStop = true;\n            }\n            // display conference discounts\n            foreach (PcDiscountRow CurrentRow in FMainDS.PcDiscount.Rows)\n            {\n                if (CurrentRow.CostTypeCode == \"CONFERENCE\")\n                {\n                    if (CurrentRow.Validity == \"PRE\")\n                    {\n                        if (CurrentRow.DiscountCriteriaCode == \"ROLE\")\n                        {\n                            txtSpecialRolePreAttendance.NumberValueInt = (int)CurrentRow.Discount;\n                        }\n                        else if (CurrentRow.DiscountCriteriaCode == \"VOL\")\n                        {\n                            txtVolunteerPreAttendance.NumberValueInt = (int)CurrentRow.Discount;\n                        }\n                        else if (CurrentRow.DiscountCriteriaCode == \"OTHER\")\n                        {\n                            txtParticipantPreAttendance.NumberValueInt = (int)CurrentRow.Discount;\n                        }\n                    }\n                    else if (CurrentRow.Validity == \"CONF\")\n                    {\n                        if (CurrentRow.DiscountCriteriaCode == \"ROLE\")\n                        {\n                            txtSpecialRoleAttendance.NumberValueInt = (int)CurrentRow.Discount;\n                        }\n                        else if (CurrentRow.DiscountCriteriaCode == \"VOL\")\n                        {\n                            txtVolunteerAttendance.NumberValueInt = (int)CurrentRow.Discount;\n                        }\n                    }\n                    else if ((CurrentRow.Validity == \"POST\") && (CurrentRow.DiscountCriteriaCode == \"ROLE\"))\n                    {\n                        txtSpecialRoleCampaignAttendance.NumberValueInt = (int)CurrentRow.Discount;\n                    }\n                }\n                else if (CurrentRow.CostTypeCode == \"ACCOMMODATION\")\n                {\n                    if (CurrentRow.Validity == \"PRE\")\n                    {\n                        if (CurrentRow.DiscountCriteriaCode == \"ROLE\")\n                        {\n                            txtSpecialRolePreAccommodation.NumberValueInt = (int)CurrentRow.Discount;\n                        }\n                        else if (CurrentRow.DiscountCriteriaCode == \"VOL\")\n                        {\n                            txtVolunteerPreAccommodation.NumberValueInt = (int)CurrentRow.Discount;\n                        }\n                        else if (CurrentRow.DiscountCriteriaCode == \"OTHER\")\n                        {\n                            txtParticipantPreAccommodation.NumberValueInt = (int)CurrentRow.Discount;\n                        }\n                    }\n                    else if (CurrentRow.Validity == \"CONF\")\n                    {\n                        if (CurrentRow.DiscountCriteriaCode == \"ROLE\")\n                        {\n                            txtSpecialRoleAccommodation.NumberValueInt = (int)CurrentRow.Discount;\n                        }\n                        else if (CurrentRow.DiscountCriteriaCode == \"VOL\")\n                        {\n                            txtVolunteerAccommodation.NumberValueInt = (int)CurrentRow.Discount;\n                        }\n                    }\n                    else if ((CurrentRow.Validity == \"POST\") && (CurrentRow.DiscountCriteriaCode == \"ROLE\"))\n                    {\n                        txtSpecialRoleCampaignAccommodation.NumberValueInt = (int)CurrentRow.Discount;\n                    }\n                }\n            }\n            // display grid containing venue details\n            grdVenues.Columns.Clear();\n            grdVenues.AddPartnerKeyColumn(Catalog.GetString(\"Venue Key\"), FMainDS.PcConferenceVenue.ColumnVenueKey);\n            grdVenues.AddTextColumn(Catalog.GetString(\"Venue Name\"), FMainDS.PcConferenceVenue.ColumnVenueName);\n            DataView MyDataView = FMainDS.PcConferenceVenue.DefaultView;\n            MyDataView.Sort = \"p_venue_name_c ASC\";\n            MyDataView.AllowNew = false;\n            grdVenues.DataSource = new DevAge.ComponentModel.BoundDataView(MyDataView);\n        }\n        // disables or enables the checkbox when a different radio button is selected\n        private void AttendanceChargeChanged(object sender, EventArgs e)\n        {\n            if (rbtDay.Checked || rbtNight.Checked)\n            {\n                chkAddAccommodationCosts.Enabled = true;\n            }\n            else\n            {\n                chkAddAccommodationCosts.Checked = false;\n                chkAddAccommodationCosts.Enabled = false;\n            }\n        }\n        // Called when the checkbox is changed. Toggles textboxes' ReadOnly property.\n        private void UpdateDiscounts(object sender, EventArgs e)\n        {\n            Boolean AccommodationDiscountsReadOnly = true;\n            if (chkAddAccommodationCosts.Checked)\n            {\n                AccommodationDiscountsReadOnly = false;\n            }\n            txtSpecialRolePreAccommodation.ReadOnly = AccommodationDiscountsReadOnly;\n            txtVolunteerPreAccommodation.ReadOnly = AccommodationDiscountsReadOnly;\n            txtParticipantPreAccommodation.ReadOnly = AccommodationDiscountsReadOnly;\n            txtSpecialRoleAccommodation.ReadOnly = AccommodationDiscountsReadOnly;\n            txtVolunteerAccommodation.ReadOnly = AccommodationDiscountsReadOnly;\n            txtSpecialRoleCampaignAccommodation.ReadOnly = AccommodationDiscountsReadOnly;\n            txtSpecialRolePreAccommodation.TabStop = !AccommodationDiscountsReadOnly;\n            txtVolunteerPreAccommodation.TabStop = !AccommodationDiscountsReadOnly;\n            txtParticipantPreAccommodation.TabStop = !AccommodationDiscountsReadOnly;\n            txtSpecialRoleAccommodation.TabStop = !AccommodationDiscountsReadOnly;\n            txtVolunteerAccommodation.TabStop = !AccommodationDiscountsReadOnly;\n            txtSpecialRoleCampaignAccommodation.TabStop = !AccommodationDiscountsReadOnly;\n        }\n        // Called with Add button. Adds new venue to conference.\n        private void AddVenue(object sender, EventArgs e)\n        {\n            long ResultVenueKey;\n            String ResultVenueName;\n            TPartnerClass? PartnerClass;\n            TLocationPK ResultLocationPK;\n            DataRow[] ExistingVenueDataRows;\n            // the user has to select an existing venue to make that venue a conference venue\n            try\n            {\n                // launches partner find screen and returns true if a venue is selected\n                if (TPartnerFindScreenManager.OpenModalForm(\"VENUE\", out ResultVenueKey, out ResultVenueName, out PartnerClass, out ResultLocationPK,\n                        this))\n                {\n                    // search for selected venue in dataset\n                    ExistingVenueDataRows = FMainDS.PcConferenceVenue.Select(ConferenceSetupTDSPcConferenceVenueTable.GetVenueKeyDBName() +\n                        \" = \" + ResultVenueKey.ToString());\n                    // if venue does not already exist for venue\n                    if (ExistingVenueDataRows.Length == 0)\n                    {\n                        ConferenceSetupTDSPcConferenceVenueRow AddedVenue = FMainDS.PcConferenceVenue.NewRowTyped(true);\n                        AddedVenue.ConferenceKey = FPartnerKey;\n                        AddedVenue.VenueKey = ResultVenueKey;\n                        AddedVenue.VenueName = ResultVenueName;\n                        FMainDS.PcConferenceVenue.Rows.Add(AddedVenue);\n                        FPetraUtilsObject.SetChangedFlag();\n                    }\n                    // if venue does already exist for venue\n                    else\n                    {\n                        MessageBox.Show(Catalog.GetString(\"This venue is already included for this conference\"),\n                            Catalog.GetString(\"Add Venue to Conference\"),\n                            MessageBoxButtons.OK,\n                            MessageBoxIcon.Information);\n                    }\n                }\n            }\n            catch (Exception exp)\n            {\n                throw new EOPAppException(\"Exception occured while calling VenueFindScreen!\", exp);\n            }\n        }\n        // Called with Remove button. Removes a venue from conference.\n        private void RemoveVenue(object sender, EventArgs e)\n        {\n            if (grdVenues.SelectedDataRows.Length == 1)\n            {\n                long SelectedVenueKey;\n                SelectedVenueKey = (Int64)((DataRowView)grdVenues.SelectedDataRows[0]).Row[PcConferenceVenueTable.GetVenueKeyDBName()];\n                DataRow RowToRemove = FMainDS.PcConferenceVenue.Rows.Find(new object[] { FPartnerKey, SelectedVenueKey });\n                RowToRemove.Delete();\n                FPetraUtilsObject.SetChangedFlag();\n            }\n        }\n        // get data from screen and ammend/add to dataset\n        private void GetDataFromControlsManual(PcConferenceRow ARow)\n        {\n            PcConferenceRow ConferenceData = (PcConferenceRow)FMainDS.PcConference.Rows[0];\n            PPartnerLocationRow PartnerLocationData = (PPartnerLocationRow)FMainDS.PPartnerLocation.Rows[0];\n            PUnitRow UnitData = (PUnitRow)FMainDS.PUnit.Rows[0];\n            // do not save currency if it is blank but instead change the combo box to display original value\n            if (cmbCurrency.GetSelectedString() != \"\")\n            {\n                ConferenceData.CurrencyCode = cmbCurrency.GetSelectedString();\n                UnitData.OutreachCostCurrencyCode = cmbCurrency.GetSelectedString();\n            }\n            else\n            {\n                cmbCurrency.SetSelectedString(ConferenceData.CurrencyCode);\n            }\n            ConferenceData.Start = dtpStartDate.Date;\n            ConferenceData.End = dtpEndDate.Date;\n            PartnerLocationData.DateEffective = dtpStartDate.Date;\n            PartnerLocationData.DateGoodUntil = dtpEndDate.Date;\n            // get data from radio buttons and check button for PcConferenceOption\n            string[] OptionTypeCodes =\n            {\n                \"COST_PER_NIGHT\", \"COST_PER_DAY\", \"ADD_ACCOMM_COST_FOR_TOTAL\"\n            };\n            Boolean[] OptionSet =\n            {\n                rbtNight.Checked, rbtDay.Checked, chkAddAccommodationCosts.Checked\n            };\n            for (int i = 0; i < 3; i++)\n            {\n                DataRow RowExists = FMainDS.PcConferenceOption.Rows.Find(new object[] { FPartnerKey, OptionTypeCodes[i] });\n                // create new row if needed\n                if ((RowExists == null) && OptionSet[i])\n                {\n                    PcConferenceOptionRow RowToAdd = FMainDS.PcConferenceOption.NewRowTyped(true);\n                    RowToAdd.ConferenceKey = FPartnerKey;\n                    RowToAdd.OptionTypeCode = OptionTypeCodes[i];\n                    RowToAdd.OptionSet = true;\n                    FMainDS.PcConferenceOption.Rows.Add(RowToAdd);\n                }\n                // update existing record\n                else if ((RowExists != null) && OptionSet[i])\n                {\n                    ((PcConferenceOptionRow)RowExists).OptionSet = true;\n                }\n                // delete existing record if discount is 0\n                else if ((RowExists != null) && !OptionSet[i])\n                {\n                    RowExists.Delete();\n                }\n            }\n            // reset the Accommodation text boxs to 0 if no longer needed\n            if (!chkAddAccommodationCosts.Checked)\n            {\n                txtSpecialRolePreAccommodation.NumberValueInt = 0;\n                txtVolunteerPreAccommodation.NumberValueInt = 0;\n                txtParticipantPreAccommodation.NumberValueInt = 0;\n                txtSpecialRoleAccommodation.NumberValueInt = 0;\n                txtVolunteerAccommodation.NumberValueInt = 0;\n                txtSpecialRoleCampaignAccommodation.NumberValueInt = 0;\n            }\n            // get data from discount text boxes for PcDiscount\n            string[, ] Discounts =\n            {\n                { \"ROLE\", \"CONFERENCE\", \"PRE\", txtSpecialRolePreAttendance.Text.TrimEnd(new char[] { ' ', '%' }) },\n                { \"VOL\", \"CONFERENCE\", \"PRE\", txtVolunteerPreAttendance.Text.TrimEnd(new char[] { ' ', '%' }) },\n                { \"OTHER\", \"CONFERENCE\", \"PRE\", txtParticipantPreAttendance.Text.TrimEnd(new char[] { ' ', '%' }) },\n                { \"ROLE\", \"CONFERENCE\", \"CONF\", txtSpecialRoleAttendance.Text.TrimEnd(new char[] { ' ', '%' }) },\n                { \"VOL\", \"CONFERENCE\", \"CONF\", txtVolunteerAttendance.Text.TrimEnd(new char[] { ' ', '%' }) },\n                { \"ROLE\", \"CONFERENCE\", \"POST\", txtSpecialRoleCampaignAttendance.Text.TrimEnd(new char[] { ' ', '%' }) },\n                { \"ROLE\", \"ACCOMMODATION\", \"PRE\", txtSpecialRolePreAccommodation.Text.TrimEnd(new char[] { ' ', '%' }) },\n                { \"VOL\", \"ACCOMMODATION\", \"PRE\", txtVolunteerPreAccommodation.Text.TrimEnd(new char[] { ' ', '%' }) },\n                { \"OTHER\", \"ACCOMMODATION\", \"PRE\", txtParticipantPreAccommodation.Text.TrimEnd(new char[] { ' ', '%' }) },\n                { \"ROLE\", \"ACCOMMODATION\", \"CONF\", txtSpecialRoleAccommodation.Text.TrimEnd(new char[] { ' ', '%' }) },\n                { \"VOL\", \"ACCOMMODATION\", \"CONF\", txtVolunteerAccommodation.Text.TrimEnd(new char[] { ' ', '%' }) },\n                { \"ROLE\", \"ACCOMMODATION\", \"POST\", txtSpecialRoleCampaignAccommodation.Text.TrimEnd(new char[] { ' ', '%' }) }\n            };\n            for (int i = 0; i < 12; i++)\n            {\n                DataRow RowExists = FMainDS.PcDiscount.Rows.Find(new object[] { FPartnerKey, Discounts[i, 0], Discounts[i, 1], Discounts[i, 2], -1 });\n                if (Discounts[i, 3] == \"\")\n                {\n                    Discounts[i, 3] = \"0\";\n                }\n                // create new row if needed\n                if ((RowExists == null) && (Convert.ToInt32(Discounts[i, 3]) != 0))\n                {\n                    PcDiscountRow RowToAdd = FMainDS.PcDiscount.NewRowTyped(true);\n                    RowToAdd.ConferenceKey = FPartnerKey;\n                    RowToAdd.DiscountCriteriaCode = Discounts[i, 0];\n                    RowToAdd.CostTypeCode = Discounts[i, 1];\n                    RowToAdd.Validity = Discounts[i, 2];\n                    RowToAdd.UpToAge = -1;\n                    RowToAdd.Percentage = true;\n                    RowToAdd.Discount = Convert.ToInt32(Discounts[i, 3]);\n                    FMainDS.PcDiscount.Rows.Add(RowToAdd);\n                }\n                // update existing record\n                else if ((RowExists != null) && (Convert.ToInt32(Discounts[i, 3]) != 0))\n                {\n                    ((PcDiscountRow)RowExists).Discount = Convert.ToInt32(Discounts[i, 3]);\n                }\n                // delete existing record if discount is 0\n                else if ((RowExists != null) && (Convert.ToInt32(Discounts[i, 3]) == 0))\n                {\n                    RowExists.Delete();\n                }\n            }\n        }\n        // save data\n        private TSubmitChangesResult StoreManualCode(ref ConferenceSetupTDS ASubmitChanges, out TVerificationResultCollection AVerificationResult)\n        {\n            AVerificationResult = null;\n            return TRemote.MConference.Conference.WebConnectors.SaveConferenceSetupTDS(ref ASubmitChanges);\n        }\n        private void ValidateDataManual(PcConferenceRow ARow)\n        {\n            PcDiscountTable DiscountTable = FMainDS.PcDiscount;\n            TVerificationResultCollection VerificationResultCollection = FPetraUtilsObject.VerificationResultCollection;\n            TValidationControlsData ValidationControlsData;\n            TScreenVerificationResult VerificationResult = null;\n            DataColumn ValidationColumn;\n            List <string>CriteriaCodesUsed = new List <string>();\n            foreach (PcDiscountRow Row in DiscountTable.Rows)\n            {\n                if ((Row.RowState != DataRowState.Deleted) && (Row.DiscountCriteriaCode != \"CHILD\"))\n                {\n                    if (Row.Discount > 100)\n                    {\n                        ValidationColumn = Row.Table.Columns[PcDiscountTable.ColumnDiscountId];\n                        // displays a warning message\n                        VerificationResult = new TScreenVerificationResult(new TVerificationResult(this, ErrorCodes.GetErrorInfo(\n                                    PetraErrorCodes.ERR_DISCOUNT_PERCENTAGE_GREATER_THAN_100)),\n                            ValidationColumn, ValidationControlsData.ValidationControl);\n                        // Handle addition to/removal from TVerificationResultCollection\n                        VerificationResultCollection.Auto_Add_Or_AddOrRemove(this, VerificationResult, ValidationColumn);\n                    }\n                    if (!CriteriaCodesUsed.Exists(element => element == Row.DiscountCriteriaCode))\n                    {\n                        CriteriaCodesUsed.Add(Row.DiscountCriteriaCode);\n                    }\n                }\n            }\n", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "length": 1562, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "56926abd2bf7483455bb0fefd23ad8e304fab1e8b70b8eee"}
{"input": "", "context": "/*\n * Phosphorus Five, copyright 2014 - 2017, Thomas Hansen, thomas@gaiasoul.com\n * \n * This file is part of Phosphorus Five.\n *\n * Phosphorus Five is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 3, as published by\n * the Free Software Foundation.\n *\n *\n * Phosphorus Five is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Phosphorus Five.  If not, see <http://www.gnu.org/licenses/>.\n * \n * If you cannot for some reasons use the GPL license, Phosphorus\n * Five is also commercially available under Quid Pro Quo terms. Check \n * out our website at http://gaiasoul.com for more details.\n */\nusing System;\nusing System.IO;\nusing p5.exp;\nusing p5.core;\nusing p5.io.common;\nusing p5.exp.exceptions;\nnamespace p5.io.file\n{\n    /// <summary>\n    ///     Loads one or more file(s).\n    /// </summary>\n    public static class Load\n    {\n        /// <summary>\n        ///     Loads one or more file(s) from local disc.\n        /// </summary>\n        /// <param name=\"context\">Application Context</param>\n        /// <param name=\"e\">Parameters passed into Active Event</param>\n        [ActiveEvent (Name = \"load-file\")]\n        [ActiveEvent (Name = \"p5.io.file.load\")]\n        public static void p5_io_file_load (ApplicationContext context, ActiveEventArgs e)\n        {\n            ObjectIterator.Iterate (\n                context,\n                e.Args,\n                true,\n                \"read-file\",\n                delegate (string filename, string fullpath) {\n                    if (File.Exists (fullpath)) {\n                        // Text files and binary files are loaded differently.\n                        // Text file might for instance be converted automatically.\n                        if (IsTextFile (filename)) {\n                            // Text file of some sort.\n                            LoadTextFile (context, e.Args, fullpath, filename);\n                        } else {\n                            // Some sort of binary file (probably).\n                            LoadBinaryFile (e.Args, fullpath, filename);\n                        }\n                    } else {\n                        // Oops, file didn't exist.\n                        throw new LambdaException (\n                            string.Format (\"Couldn't find file '{0}'\", filename),\n                            e.Args,\n                            context);\n                    }\n                });\n        }\n        /// <summary>\n        ///     Loads one or more file(s) from local disc and saves into given stream.\n        /// </summary>\n        /// <param name=\"context\">Application Context</param>\n        /// <param name=\"e\">Parameters passed into Active Event</param>\n        [ActiveEvent (Name = \".p5.io.file.serialize-to-stream\")]\n        public static void _p5_io_file_serialize_to_stream (ApplicationContext context, ActiveEventArgs e)\n        {\n            // Retrieving stream argument.\n            var tuple = e.Args.Value as Tuple<object, Stream>;\n            // Retrieving stream and doing some basic sanity check.\n            var outStream = tuple.Item2;\n            if (outStream == null)\n                throw new LambdaException (\"No stream supplied to [.p5.io.file.serialize-to-stream]\", e.Args, context);\n            // Iterating through files specified.\n            ObjectIterator.Iterate (\n                context,\n                e.Args,\n                true,\n                \"read-file\",\n                delegate (string filename, string fullpath) {\n                    if (File.Exists (fullpath)) {\n                        // Serializing file into stream.\n                        using (FileStream stream = File.OpenRead (fullpath)) {\n                            stream.CopyTo (outStream);\n                        }\n                    } else {\n                        // Oops, file didn't exist.\n                        throw new LambdaException (\n                            string.Format (\"Couldn't find file '{0}'\", filename),\n                            e.Args,\n                            context);\n                    }\n                });\n        }\n        /*\n         * Determines if file is text according to the most common file extensions\n         */\n        static bool IsTextFile (string fileName)\n        {\n            switch (Path.GetExtension (fileName)) {\n            case \".txt\":\n            case \".md\":\n            case \".css\":\n            case \".js\":\n            case \".html\":\n            case \".htm\":\n            case \".hl\":\n            case \".xml\":\n            case \".csv\":\n                return true;\n            default:\n                return false;\n            }\n        }\n        /*\n         * Loads specified file as text and appends into args, possibly converting into lambda.\n         */\n        static void LoadTextFile (\n            ApplicationContext context,\n            Node args,\n            string fullpath,\n            string fileName)\n        {\n            // Checking if we should automatically convert file content to lambda.\n            if (fileName.EndsWithEx (\".hl\") && args.GetExChildValue (\"convert\", context, true)) {\n                // Automatically converting to lambda before returning, making sure we \n                // parse the lambda directly from the stream.\n                using (Stream stream = File.OpenRead (fullpath)) {\n                    // Invoking our \"stream to lambda\" event.\n                    var fileNode = args.Add (fileName, stream).LastChild;\n                    try {\n                        context.RaiseEvent (\".stream2lambda\", fileNode);\n                    } finally {\n                        fileNode.Value = null;\n                    }\n                }\n            } else {\n                // Using a TextReader to read file's content.\n                using (TextReader reader = File.OpenText (fullpath)) {\n                    // Reading file content.\n                    string fileContent = reader.ReadToEnd ();\n                    if (fileName.EndsWithEx (\".csv\") && args.GetExChildValue (\"convert\", context, true)) {\n                        // Automatically converting to lambda before returning.\n                        var csvLambda = new Node (\"\", fileContent);\n                        context.RaiseEvent (\"p5.csv.csv2lambda\", csvLambda);\n                        args.Add (fileName, null, csvLambda [\"result\"].Children);\n                    } else {\n                        // Adding file content as string.\n                        args.Add (fileName, fileContent);\n                    }\n                }\n            }\n        }\n        /*\n         * Loads a binary file and appends as blob/byte[] into args.\n         */\n        static void LoadBinaryFile (\n            Node args,\n            string fullpath,\n            string filename)\n        {\n            using (FileStream stream = File.OpenRead (fullpath)) {\n                // Reading file content\n                var buffer = new byte [stream.Length];\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "length": 722, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "50f7d00750145f888361c63d85ebf5e9fb68a039385b8255"}
{"input": "", "context": "#\n# Copyright (C) 2019  Red Hat, Inc.\n#\n# This copyrighted material is made available to anyone wishing to use,\n# modify, copy, or redistribute it subject to the terms and conditions of\n# the GNU General Public License v.2, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY expressed or implied, including the implied warranties of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n# Public License for more details.  You should have received a copy of the\n# GNU General Public License along with this program; if not, write to the\n# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n# 02110-1301, USA.  Any Red Hat trademarks that are incorporated in the\n# source code or documentation are not subject to the GNU General Public\n# License and may only be used or replicated with the express permission of\n# Red Hat, Inc.\n#\nfrom collections import OrderedDict, namedtuple\nfrom pyanaconda.core.constants import PayloadRequirementType\nfrom pyanaconda.payload.errors import PayloadRequirementsMissingApply\nfrom pyanaconda.anaconda_loggers import get_module_logger\nlog = get_module_logger(__name__)\nPayloadRequirementReason = namedtuple('PayloadRequirementReason', ['reason', 'strong'])\n__all__ = [\"PayloadRequirements\", \"PayloadRequirement\"]\nclass PayloadRequirement(object):\n    \"\"\"An object to store a payload requirement with info about its reasons.\n    For each requirement multiple reasons together with their strength\n    can be stored in this object using the add_reason method.\n    A reason should be just a string with description (ie for tracking purposes).\n    Strength is a boolean flag that can be used to indicate whether missing the\n    requirement should be considered fatal. Strength of the requirement is\n    given by strength of all its reasons.\n    \"\"\"\n    def __init__(self, req_id, reasons=None):\n        self._id = req_id\n        self._reasons = reasons or []\n    @property\n    def id(self):\n        \"\"\"Identifier of the requirement (eg a package name)\"\"\"\n        return self._id\n    @property\n    def reasons(self):\n        \"\"\"List of reasons for the requirement\"\"\"\n        return [reason for reason, strong in self._reasons]\n    @property\n    def strong(self):\n        \"\"\"Strength of the requirement (ie should it be considered fatal?)\"\"\"\n        return any(strong for reason, strong in self._reasons)\n    def add_reason(self, reason, strong=False):\n        \"\"\"Adds a reason to the requirement with optional strength of the reason\"\"\"\n        self._reasons.append(PayloadRequirementReason(reason, strong))\n    def __str__(self):\n        return \"PayloadRequirement(id=%s, reasons=%s, strong=%s)\" % (self.id,\n                                                                     self.reasons,\n                                                                     self.strong)\n    def __repr__(self):\n        return 'PayloadRequirement(id=%s, reasons=%s)' % (self.id, self._reasons)\nclass PayloadRequirements(object):\n    \"\"\"A container for payload requirements imposed by installed functionality.\n    Stores names of packages and groups required by used installer features,\n    together with descriptions of reasons why the object is required and if the\n    requirement is strong. Not satisfying strong requirement would be fatal for\n    installation.\n    \"\"\"\n    def __init__(self):\n        self._apply_called_for_all_requirements = True\n        self._apply_cb = None\n        self._reqs = {}\n        for req_type in PayloadRequirementType:\n            self._reqs[req_type] = OrderedDict()\n    def add_packages(self, package_names, reason, strong=True):\n        \"\"\"Add packages required for the reason.\n        If a package is already required, the new reason will be\n        added and the strength of the requirement will be updated.\n        :param package_names: names of packages to be added\n        :type package_names: list of str\n        :param reason: description of reason for adding the packages\n        :type reason: str\n        :param strong: is the requirement strong (ie is not satisfying it fatal?)\n        :type strong: bool\n        \"\"\"\n        self._add(PayloadRequirementType.package, package_names, reason, strong)\n    def add_groups(self, group_ids, reason, strong=True):\n        \"\"\"Add groups required for the reason.\n        If a group is already required, the new reason will be\n        added and the strength of the requirement will be updated.\n        :param group_ids: ids of groups to be added\n        :type group_ids: list of str\n        :param reason: descripiton of reason for adding the groups\n        :type reason: str\n        :param strong: is the requirement strong\n        :type strong: bool\n        \"\"\"\n        self._add(PayloadRequirementType.group, group_ids, reason, strong)\n    def add_requirements(self, requirements):\n        \"\"\"Add requirements from a list of Requirement instances.\n        :param requirements: list of Requirement instances\n        \"\"\"\n        for requirement in requirements:\n            # check requirement type and add a payload requirement appropriately\n            if requirement.type == \"package\":\n                self.add_packages([requirement.name], reason=requirement.reason)\n            elif requirement.type == \"group\":\n                self.add_groups([requirement.name], reason=requirement.reason)\n            else:\n                log.warning(\"Unknown type: %s in requirement: %s, skipping.\", requirement.type, requirement)\n    def _add(self, req_type, ids, reason, strong):\n        if not ids:\n            log.debug(\"no %s requirement added for %s\", req_type.value, reason)\n        reqs = self._reqs[req_type]\n        for r_id in ids:\n            if r_id not in reqs:\n                reqs[r_id] = PayloadRequirement(r_id)\n            reqs[r_id].add_reason(reason, strong)\n            self._apply_called_for_all_requirements = False\n            log.debug(\"added %s requirement '%s' for %s, strong=%s\",\n                      req_type.value, r_id, reason, strong)\n    @property\n    def packages(self):\n        \"\"\"List of package requirements.\n        return: list of package requirements\n        rtype: list of PayloadRequirement\n        \"\"\"\n        return list(self._reqs[PayloadRequirementType.package].values())\n    @property\n    def groups(self):\n        \"\"\"List of group requirements.\n        return: list of group requirements\n        rtype: list of PayloadRequirement\n        \"\"\"\n        return list(self._reqs[PayloadRequirementType.group].values())\n    def set_apply_callback(self, callback):\n        \"\"\"Set the callback for applying requirements.\n        The callback will be called by apply() method.\n        param callback: callback function to be called by apply() method\n        type callback: a function taking one argument (requirements object)\n        \"\"\"\n        self._apply_cb = callback\n    def apply(self):\n        \"\"\"Apply requirements using callback function.\n        Calls the callback supplied via set_apply_callback() method. If no\n        callback was set, an axception is raised.\n        return: return value of the callback\n        rtype: type of the callback return value\n        raise PayloadRequirementsMissingApply: if there is no callback set\n        \"\"\"\n        if self._apply_cb:\n            self._apply_called_for_all_requirements = True\n            rv = self._apply_cb(self)\n            log.debug(\"apply with result %s called on requirements %s\", rv, self)\n            return rv\n        else:\n            raise PayloadRequirementsMissingApply\n    @property\n    def applied(self):\n        \"\"\"Was all requirements applied?\n        return: Was apply called for all current requirements?\n        rtype: bool\n        \"\"\"\n        return self.empty or self._apply_called_for_all_requirements\n    @property\n    def empty(self):\n        \"\"\"Are requirements empty?\n        return: True if there are no requirements, else False\n        rtype: bool\n        \"\"\"\n", "answers": ["        return not any(self._reqs.values())"], "length": 879, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "59b6354e9591524b4ada354f2fa122917bcd1253262c12f2"}
{"input": "", "context": "#region License\n// Copyright (c) 2013, ClearCanvas Inc.\n// All rights reserved.\n// http://www.ClearCanvas.ca\n//\n// This file is part of the ClearCanvas RIS/PACS open source project.\n//\n// The ClearCanvas RIS/PACS open source project is free software: you can\n// redistribute it and/or modify it under the terms of the GNU General Public\n// License as published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// The ClearCanvas RIS/PACS open source project is distributed in the hope that it\n// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along with\n// the ClearCanvas RIS/PACS open source project.  If not, see\n// <http://www.gnu.org/licenses/>.\n#endregion\nusing System;\nusing System.Collections.Generic;\nusing Macro.Common;\nusing Macro.Common.Utilities;\nusing Macro.Desktop;\nusing Macro.Desktop.Validation;\nusing Macro.ImageViewer.StudyManagement;\n#pragma warning disable 0419,1574,1587,1591\nnamespace Macro.ImageViewer.Clipboard.CopyToClipboard\n{\n\tpublic sealed class CopySubsetToClipboardComponentViewExtensionPoint : ExtensionPoint<IApplicationComponentView>\n\t{\n\t}\n\t[AssociateView(typeof(CopySubsetToClipboardComponentViewExtensionPoint))]\n\tpublic partial class CopySubsetToClipboardComponent : ApplicationComponent\n\t{\n\t\tprivate enum RangeSelectionOption\n\t\t{\n\t\t\tInstanceNumber = 0,\n\t\t\tPosition \n\t\t}\n\t\tprivate enum CopyOption\n\t\t{\n\t\t\tCopyRange = 0,\n\t\t\tCopyCustom\n\t\t}\n\t\tprivate enum CopyRangeOption\n\t\t{\n\t\t\tCopyAll = 0,\n\t\t\tCopyAtInterval\n\t\t}\n\t\tprivate readonly IDesktopWindow _desktopWindow;\n\t\tprivate IImageViewer _activeViewer;\n\t\tprivate IDisplaySet _currentDisplaySet;\n\t\tprivate int _numberOfImages;\n\t\tprivate RangeSelectionOption _rangeSelectionOption;\n\t\tprivate int _minInstanceNumber;\n\t\tprivate int _maxInstanceNumber;\n\t\tprivate CopyOption _copyOption;\n\t\tprivate CopyRangeOption _copyRangeOption;\n\t\tprivate int _copyRangeStart;\n\t\tprivate int _copyRangeEnd;\n\t\tprivate int _rangeMinimum;\n\t\tprivate int _rangeMaximum;\n\t\tprivate bool _updatingCopyRange;\n\t\tprivate int _copyRangeInterval;\n\t\tprivate static readonly int _rangeMinInterval = 2;\n\t\tprivate int _rangeMaxInterval;\n\t\tprivate string _customRange;\n\t\tinternal CopySubsetToClipboardComponent(IDesktopWindow desktopWindow)\n\t\t{\n\t\t\tPlatform.CheckForNullReference(desktopWindow, \"desktopWindow\");\n\t\t\t_desktopWindow = desktopWindow;\n\t\t}\n\t\t#region Internal / Private Methods\n\t\tinternal IDesktopWindow DesktopWindow\n\t\t{\n\t\t\tget { return _desktopWindow; }\t\n\t\t}\n\t\tinternal void Close()\n\t\t{\n\t\t\tthis.Host.Exit();\n\t\t}\n\t\tprivate void OnWorkspaceChanged(object sender, ItemEventArgs<Workspace> e)\n\t\t{\n\t\t\tIImageViewer viewer = null;\n\t\t\tif (_desktopWindow.ActiveWorkspace != null)\n\t\t\t\tviewer = ImageViewerComponent.GetAsImageViewer(_desktopWindow.ActiveWorkspace);\n\t\t\t\n\t\t\tSetActiveViewer(viewer);\n\t\t}\n\t\tprivate void OnImageBoxSelected(object sender, ImageBoxSelectedEventArgs e)\n\t\t{\n\t\t\tCurrentDisplaySet = e.SelectedImageBox.DisplaySet;\n\t\t}\n\t\tprivate void OnDisplaySetSelected(object sender, DisplaySetSelectedEventArgs e)\n\t\t{\n\t\t\tCurrentDisplaySet = e.SelectedDisplaySet;\n\t\t}\n\t\tprivate void SetActiveViewer(IImageViewer viewer)\n\t\t{\n\t\t\tif (_activeViewer != null)\n\t\t\t{\n\t\t\t\t_activeViewer.EventBroker.ImageBoxSelected -= OnImageBoxSelected;\n\t\t\t\t_activeViewer.EventBroker.DisplaySetSelected -= OnDisplaySetSelected;\n\t\t\t}\n\t\t\t_activeViewer = viewer;\n\t\t\tIDisplaySet displaySet = null;\n\t\t\tif (_activeViewer != null)\n\t\t\t{\n\t\t\t\t_activeViewer.EventBroker.ImageBoxSelected += OnImageBoxSelected;\n\t\t\t\t_activeViewer.EventBroker.DisplaySetSelected += OnDisplaySetSelected;\n\t\t\t\tif (_activeViewer.SelectedImageBox != null)\n\t\t\t\t\tdisplaySet = _activeViewer.SelectedImageBox.DisplaySet;\n\t\t\t}\n\t\t\tCurrentDisplaySet = displaySet;\n\t\t}\n\t\tprivate void CopyToClipboardInternal()\n\t\t{\n\t\t\tif (this.HasValidationErrors)\n\t\t\t{\n\t\t\t\tbase.ShowValidation(true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tIImageSelectionStrategy strategy;\n\t\t\t\tif (CopyRange)\n\t\t\t\t{\n\t\t\t\t\tint interval = 1;\n\t\t\t\t\tif (CopyRangeAtInterval)\n\t\t\t\t\t\tinterval = CopyRangeInterval;\n\t\t\t\t\tstrategy = new RangeImageSelectionStrategy(CopyRangeStart, CopyRangeEnd, interval, UseInstanceNumber);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstrategy = new CustomImageSelectionStrategy(CustomRange, RangeMinimum, RangeMaximum, UseInstanceNumber);\n\t\t\t\t}\n\t\t\t\tClipboard.Add(CurrentDisplaySet, strategy);\n\t\t\t\tthis.Host.Exit();\n\t\t\t}\n\t\t}\n\t\t#endregion\n\t\tpublic override void Start()\n\t\t{\n\t\t\t_desktopWindow.Workspaces.ItemActivationChanged += OnWorkspaceChanged;\n\t\t\tOnWorkspaceChanged(null, null);\n\t\t\tbase.Start();\n\t\t}\n\t\tpublic override void Stop()\n\t\t{\n\t\t\t_desktopWindow.Workspaces.ItemActivationChanged -= OnWorkspaceChanged;\n\t\t\tSetActiveViewer(null);\n\t\t\tbase.Stop();\n\t\t}\n\t\t#region Validation Methods\n\t\t[ValidationMethodFor(\"CustomRange\")]\n\t\tprivate ValidationResult ValidateCustomRange()\n\t\t{\n\t\t\tList<Range> ranges;\n\t\t\tif (CopyCustom && !CustomImageSelectionStrategy.Parse(CustomRange, RangeMinimum, RangeMaximum, out ranges))\n\t\t\t\treturn new ValidationResult(false, SR.MessageCustomRangeInvalid);\n\t\t\treturn new ValidationResult(true, \"\");\n\t\t}\n\t\t[ValidationMethodFor(\"CopyRangeStart\")]\n\t\tprivate ValidationResult ValidateCopyRangeStart()\n\t\t{\n\t\t\tif (CopyRange && (CopyRangeStart < RangeMinimum || CopyRangeStart > CopyRangeEnd))\n\t\t\t\treturn new ValidationResult(false, SR.MessageStartValueOutOfRange);\n\t\t\treturn new ValidationResult(true, \"\");\n\t\t}\n\t\t[ValidationMethodFor(\"CopyRangeEnd\")]\n\t\tprivate ValidationResult ValidateCopyRangeEnd()\n\t\t{\n\t\t\tif (CopyRange)\n\t\t\t{\n\t\t\t\tif (CopyRangeEnd < CopyRangeStart || CopyRangeEnd > RangeMaximum)\n\t\t\t\t\treturn new ValidationResult(false, SR.MessageEndValueOutOfRange);\n\t\t\t}\n\t\t\treturn new ValidationResult(true, \"\");\n\t\t}\n\t\t[ValidationMethodFor(\"CopyRangeInterval\")]\n\t\tprivate ValidationResult ValidateCopyRangeInterval()\n\t\t{\n\t\t\tif (CopyRange && CopyRangeAtInterval)\n\t\t\t{\n\t\t\t\tif (CopyRangeInterval < RangeMinInterval || CopyRangeInterval > RangeMaxInterval)\n\t\t\t\t\treturn new ValidationResult(false, SR.MessageRangeIntervalInvalid);\n\t\t\t}\n\t\t\treturn new ValidationResult(true, \"\");\n\t\t}\n\t\t#endregion\n\t\tprivate IDisplaySet CurrentDisplaySet\n\t\t{\n\t\t\tget { return _currentDisplaySet; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (_currentDisplaySet == value)\n\t\t\t\t\treturn;\n\t\t\t\t_currentDisplaySet = value;\n\t\t\t\tUpdateUseInstanceNumber();\n\t\t\t\tUpdateCopyRange();\n\t\t\t\tUpdateCopyCustom();\n\t\t\t\tNotifyPropertyChanged(\"SourceDisplaySetDescription\");\n\t\t\t\tNotifyPropertyChanged(\"UsePositionNumberEnabled\");\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeEnabled\");\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeAllEnabled\");\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeStartEnabled\");\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeEndEnabled\");\n\t\t\t\tNotifyPropertyChanged(\"Enabled\");\n\t\t\t}\n\t\t}\n\t\tprivate void UpdateUseInstanceNumber()\n\t\t{\n\t\t\t//only change values when there is a display set.\n\t\t\tif (CurrentDisplaySet != null)\n\t\t\t{\n\t\t\t\t_numberOfImages = 0;\n\t\t\t\t_minInstanceNumber = int.MaxValue;\n\t\t\t\t_maxInstanceNumber = int.MinValue;\n\t\t\t\t_numberOfImages = CurrentDisplaySet.PresentationImages.Count;\n\t\t\t\tforeach (IPresentationImage image in CurrentDisplaySet.PresentationImages)\n\t\t\t\t{\n\t\t\t\t\tif (image is IImageSopProvider)\n\t\t\t\t\t{\n\t\t\t\t\t\tIImageSopProvider provider = (IImageSopProvider)image;\n\t\t\t\t\t\tif (provider.ImageSop.InstanceNumber < _minInstanceNumber)\n\t\t\t\t\t\t\t_minInstanceNumber = provider.ImageSop.InstanceNumber;\n\t\t\t\t\t\tif (provider.ImageSop.InstanceNumber > _maxInstanceNumber)\n\t\t\t\t\t\t\t_maxInstanceNumber = provider.ImageSop.InstanceNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!UseInstanceNumberEnabled)\n\t\t\t\t\tUseInstanceNumber = false;\n\t\t\t}\n\t\t\tNotifyPropertyChanged(\"UseInstanceNumberEnabled\");\n\t\t}\n\t\tprivate void UpdateCopyRange()\n\t\t{\n\t\t\tif (CurrentDisplaySet == null)\n\t\t\t\treturn;\n\t\t\t_updatingCopyRange = true;\n\t\t\tif (UseInstanceNumber)\n\t\t\t{\n\t\t\t\tRangeMinimum = _minInstanceNumber;\n\t\t\t\tRangeMaximum = _maxInstanceNumber;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tRangeMinimum = 1;\n\t\t\t\tRangeMaximum = _currentDisplaySet == null ? 1 : _currentDisplaySet.PresentationImages.Count;\n\t\t\t}\n\t\t\tCopyRangeStart = RangeMinimum;\n\t\t\tCopyRangeEnd = RangeMaximum;\n\t\t\t_updatingCopyRange = false;\n\t\t\tUpdateRangeInterval();\n\t\t}\n\t\tprivate void UpdateRangeInterval()\n\t\t{\n\t\t\tif (_updatingCopyRange)\n\t\t\t\treturn;\n\t\t\tif (CurrentDisplaySet != null)\n\t\t\t{\n\t\t\t\tRangeMaxInterval = Math.Max(RangeMinInterval, CopyRangeEnd - CopyRangeStart);\n\t\t\t\tCopyRangeInterval = Math.Min(CopyRangeInterval, RangeMaxInterval);\n\t\t\t\tCopyRangeInterval = Math.Max(CopyRangeInterval, RangeMinInterval);\n\t\t\t\tif (!CopyRangeAtIntervalEnabled)\n\t\t\t\t\tCopyRangeAtInterval = false;\n\t\t\t}\n\t\t\tNotifyPropertyChanged(\"CopyRangeIntervalEnabled\");\n\t\t\tNotifyPropertyChanged(\"CopyRangeAtIntervalEnabled\");\n\t\t}\n\t\tprivate void UpdateCopyCustom()\n\t\t{\n\t\t\tif (CurrentDisplaySet != null)\n\t\t\t{\n\t\t\t\tif (!CopyCustomEnabled)\n\t\t\t\t\tCopyCustom = false;\n\t\t\t}\n\t\t\tNotifyPropertyChanged(\"CustomRangeEnabled\");\n\t\t\tNotifyPropertyChanged(\"CopyCustomEnabled\");\n\t\t}\n\t\t#region Presentation Model\n\t\tpublic string SourceDisplaySetDescription\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (this.CurrentDisplaySet != null)\n\t\t\t\t\treturn this.CurrentDisplaySet.Name;\n\t\t\t\telse\n\t\t\t\t\treturn SR.MessageNotApplicable;\n\t\t\t}\t\n\t\t}\n\t\tpublic bool UsePositionNumber\n\t\t{\n\t\t\tget { return _rangeSelectionOption == RangeSelectionOption.Position; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (!value)\n\t\t\t\t{\n\t\t\t\t\t_rangeSelectionOption = RangeSelectionOption.InstanceNumber;\n\t\t\t\t\tNotifyPropertyChanged(\"UsePositionNumber\");\n\t\t\t\t\tNotifyPropertyChanged(\"UseInstanceNumber\");\n\t\t\t\t\tUpdateCopyRange();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic bool UsePositionNumberEnabled\n\t\t{\n\t\t\tget { return Enabled; }\t\n\t\t}\n\t\tpublic bool UseInstanceNumber\n\t\t{\n\t\t\tget { return _rangeSelectionOption == RangeSelectionOption.InstanceNumber; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (!value)\n\t\t\t\t{\n\t\t\t\t\t_rangeSelectionOption = RangeSelectionOption.Position;\n\t\t\t\t\tNotifyPropertyChanged(\"UseInstanceNumber\");\n\t\t\t\t\tNotifyPropertyChanged(\"UsePositionNumber\");\n\t\t\t\t\tUpdateCopyRange();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic bool UseInstanceNumberEnabled\n\t\t{\n\t\t\tget { return Enabled && _minInstanceNumber != int.MaxValue && _maxInstanceNumber != int.MinValue; }\n\t\t}\n\t\tpublic int RangeMinimum\n\t\t{\n\t\t\tget { return _rangeMinimum; }\n\t\t\tprivate set\n\t\t\t{\n\t\t\t\tif (_rangeMinimum == value)\n\t\t\t\t\treturn;\n\t\t\t\t_rangeMinimum = value;\n\t\t\t\tNotifyPropertyChanged(\"RangeMinimum\");\n\t\t\t}\n\t\t}\n\t\tpublic int RangeMaximum\n\t\t{\n\t\t\tget { return _rangeMaximum; }\n\t\t\tprivate set\n\t\t\t{\n\t\t\t\tif (_rangeMaximum == value)\n\t\t\t\t\treturn;\n\t\t\t\t_rangeMaximum = value;\n\t\t\t\tNotifyPropertyChanged(\"RangeMaximum\");\n\t\t\t}\n\t\t}\n\t\tpublic int RangeMinInterval\n\t\t{\n\t\t\tget { return _rangeMinInterval; }\t\n\t\t}\n\t\tpublic int RangeMaxInterval\n\t\t{\n\t\t\tget { return _rangeMaxInterval; }\n\t\t\tprivate set\n\t\t\t{\n\t\t\t\tif (value == _rangeMaxInterval)\n\t\t\t\t\treturn;\n\t\t\t\t_rangeMaxInterval = value;\n\t\t\t\tNotifyPropertyChanged(\"RangeMaxInterval\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic bool CopyRange\n\t\t{\n\t\t\tget { return _copyOption == CopyOption.CopyRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (!value)\n\t\t\t\t{\n\t\t\t\t\t_copyOption = CopyOption.CopyCustom;\n\t\t\t\t\tNotifyPropertyChanged(\"CopyRange\");\n\t\t\t\t\tNotifyPropertyChanged(\"CopyCustom\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic bool CopyRangeEnabled\n\t\t{\n\t\t\tget { return Enabled; }\t\n\t\t}\n\t\tpublic bool CopyRangeAll\n\t\t{\n\t\t\tget { return _copyRangeOption == CopyRangeOption.CopyAll; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (!value)\n\t\t\t\t{\n\t\t\t\t\t_copyRangeOption = CopyRangeOption.CopyAtInterval;\n\t\t\t\t\tNotifyPropertyChanged(\"CopyRangeAll\");\n\t\t\t\t\tNotifyPropertyChanged(\"CopyRangeAtInterval\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic bool CopyRangeAllEnabled\n\t\t{\n\t\t\tget { return Enabled && CopyRange; }\t\n\t\t}\n\t\tpublic int CopyRangeStart\n\t\t{\n\t\t\tget { return _copyRangeStart; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _copyRangeStart)\n\t\t\t\t\treturn;\n\t\t\t\t_copyRangeStart = value;\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeStart\");\n\t\t\t\tUpdateRangeInterval();\n\t\t\t}\n\t\t}\n\t\tpublic bool CopyRangeStartEnabled\n\t\t{\n\t\t\tget { return Enabled && CopyRange; }\n\t\t}\n\t\tpublic int CopyRangeEnd\n\t\t{\n\t\t\tget { return _copyRangeEnd; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _copyRangeEnd)\n\t\t\t\t\treturn;\n\t\t\t\t_copyRangeEnd = value;\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeEnd\");\n\t\t\t\tUpdateRangeInterval();\n\t\t\t}\n\t\t}\n\t\tpublic bool CopyRangeEndEnabled\n\t\t{\n\t\t\tget { return Enabled && CopyRange; }\n\t\t}\n\t\tpublic bool CopyRangeAtInterval\n\t\t{\n\t\t\tget { return _copyRangeOption == CopyRangeOption.CopyAtInterval; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (!value)\n\t\t\t\t{\n\t\t\t\t\t_copyRangeOption = CopyRangeOption.CopyAll;\n\t\t\t\t\tNotifyPropertyChanged(\"CopyRangeAtInterval\");\n\t\t\t\t\tNotifyPropertyChanged(\"CopyRangeAll\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic bool CopyRangeAtIntervalEnabled\n\t\t{\n\t\t\tget { return CopyRange && CopyRangeEnabled && (CopyRangeEnd - CopyRangeStart) >= RangeMinInterval; }\n\t\t}\n\t\tpublic int CopyRangeInterval\n\t\t{\n\t\t\tget { return _copyRangeInterval; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _copyRangeInterval)\n\t\t\t\t\treturn;\n\t\t\t\t_copyRangeInterval = value;\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeInterval\");\n\t\t\t}\n\t\t}\n\t\tpublic bool CopyRangeIntervalEnabled\n\t\t{\n\t\t\tget { return CopyRangeAtInterval && CopyRangeAtIntervalEnabled; }\n\t\t}\n\t\tpublic bool CopyCustom\n\t\t{\n\t\t\tget { return _copyOption == CopyOption.CopyCustom; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (!value)\n\t\t\t\t{\n\t\t\t\t\t_copyOption = CopyOption.CopyRange;\n\t\t\t\t\tNotifyPropertyChanged(\"CopyCustom\");\n\t\t\t\t\tNotifyPropertyChanged(\"CopyRange\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic bool CopyCustomEnabled\n\t\t{\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "length": 1205, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "949612e418b169f935d6b0410ff5626ba21152c71a086f2d"}
{"input": "", "context": "using System;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.IO;\nusing System.Xml;\nusing Mono.Unix;\nusing Mono.Unix.Native;\nusing Hyena;\nusing NDesk.DBus;\nusing org.gnome.SessionManager;\nnamespace Tomboy\n{\n\tpublic class GnomeApplication : INativeApplication\n\t{\n#if PANEL_APPLET\n\t\tprivate Gnome.Program program;\n#endif\n\t\tprivate static string confDir;\n\t\tprivate static string dataDir;\n\t\tprivate static string cacheDir;\n\t\tprivate static ObjectPath session_client_id;\n\t\tprivate const string tomboyDirName = \"tomboy\";\n\t\tstatic GnomeApplication ()\n\t\t{\n\t\t\tdataDir = Path.Combine (XdgBaseDirectorySpec.GetUserDirectory (\"XDG_DATA_HOME\",\n\t\t\t                                                               Path.Combine (\".local\", \"share\")),\n\t\t\t                        tomboyDirName);\n\t\t\tconfDir = Path.Combine (XdgBaseDirectorySpec.GetUserDirectory (\"XDG_CONFIG_HOME\",\n\t\t\t                                                               \".config\"),\n\t\t\t                        tomboyDirName);\n\t\t\tcacheDir = Path.Combine (XdgBaseDirectorySpec.GetUserDirectory (\"XDG_CACHE_HOME\",\n\t\t\t                                                                \".cache\"),\n\t\t\t                         tomboyDirName);\n\t\t\t// NOTE: Other directories created on demand\n\t\t\t//       (non-existence is an indicator that migration is needed)\n\t\t\tif (!Directory.Exists (cacheDir))\n\t\t\t\tDirectory.CreateDirectory (cacheDir);\n\t\t}\n\t\tpublic void Initialize (string locale_dir,\n\t\t                        string display_name,\n\t\t                        string process_name,\n\t\t                        string [] args)\n\t\t{\n\t\t\ttry {\n\t\t\t\tSetProcessName (process_name);\n\t\t\t} catch {} // Ignore exception if fail (not needed to run)\n\t\t\t// Register handler for saving session when logging out of Gnome\n\t\t\tBusG.Init ();\n\t\t\tstring startup_id = Environment.GetEnvironmentVariable (\"DESKTOP_AUTOSTART_ID\");\n\t\t\tif (String.IsNullOrEmpty (startup_id))\n\t\t\t\tstartup_id = display_name;\n\t\t\ttry {\n\t\t\t\tSessionManager session = Bus.Session.GetObject<SessionManager> (Constants.SessionManagerInterfaceName,\n\t\t\t\t                                                                new ObjectPath (Constants.SessionManagerPath));\n\t\t\t\tsession_client_id = session.RegisterClient (display_name, startup_id);\n\t\t\t\t\n\t\t\t\tClientPrivate client = Bus.Session.GetObject<ClientPrivate> (Constants.SessionManagerInterfaceName,\n\t\t\t\t                                                             session_client_id);\n\t\t\t\tclient.QueryEndSession += OnQueryEndSession;\n\t\t\t\tclient.EndSession += OnEndSession;\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.Debug (\"Failed to register with session manager: {0}\", e.Message);\n\t\t\t}\n\t\t\tGtk.Application.Init ();\n#if PANEL_APPLET\n\t\t\tprogram = new Gnome.Program (display_name,\n\t\t\t                             Defines.VERSION,\n\t\t\t                             Gnome.Modules.UI,\n\t\t\t                             args);\n#endif\n\t\t}\n\t\tpublic void RegisterSessionManagerRestart (string executable_path,\n\t\t                string[] args,\n\t\t                string[] environment)\n\t\t{\n\t\t\t// Nothing to do, we dropped the .desktop file in the autostart\n\t\t\t// folder which should be enough to handle this in Gnome\n\t\t}\n\t\tpublic void RegisterSignalHandlers ()\n\t\t{\n\t\t\t// Connect to SIGTERM and SIGINT, so we don't lose\n\t\t\t// unsaved notes on exit...\n\t\t\tStdlib.signal (Signum.SIGTERM, OnExitSignal);\n\t\t\tStdlib.signal (Signum.SIGINT, OnExitSignal);\n\t\t}\n\t\tpublic event EventHandler ExitingEvent;\n\t\tpublic void Exit (int exitcode)\n\t\t{\n\t\t\tOnExitSignal (-1);\n\t\t\tSystem.Environment.Exit (exitcode);\n\t\t}\n\t\tpublic void StartMainLoop ()\n\t\t{\n#if PANEL_APPLET\n\t\t\tprogram.Run ();\n#else\n\t\t\tGtk.Application.Run ();\n#endif\n\t\t}\n\t\t[DllImport(\"libc\")]\n\t\tprivate static extern int prctl (int option,\n\t\t\t                                 byte [] arg2,\n\t\t\t                                 IntPtr arg3,\n\t\t\t                                 IntPtr arg4,\n\t\t\t                                 IntPtr arg5);\n\t\t// From Banshee: Banshee.Base/Utilities.cs\n\t\tprivate void SetProcessName (string name)\n\t\t{\n\t\t\tif (prctl (15 /* PR_SET_NAME */,\n\t\t\t                Encoding.ASCII.GetBytes (name + \"\\0\"),\n\t\t\t                IntPtr.Zero,\n\t\t\t                IntPtr.Zero,\n\t\t\t                IntPtr.Zero) != 0)\n\t\t\t\tthrow new ApplicationException (\n\t\t\t\t        \"Error setting process name: \" +\n\t\t\t\t        Mono.Unix.Native.Stdlib.GetLastError ());\n\t\t}\n\t\tprivate void OnExitSignal (int signal)\n\t\t{\n\t\t\tif (ExitingEvent != null)\n\t\t\t\tExitingEvent (null, new EventArgs ());\n\t\t\tif (signal >= 0)\n\t\t\t\tSystem.Environment.Exit (0);\n\t\t}\n\t\tprivate void OnQueryEndSession (uint flags)\n\t\t{\n\t\t\tLogger.Info (\"Received end session query\");\n\t\t\t// The session might not actually end but it would be nice to start\n\t\t\t// some cleanup actions like saving notes here\n\t\t\t// Let the session manager know its OK to continue\n\t\t\ttry {\n\t\t\t\tClientPrivate client = Bus.Session.GetObject<ClientPrivate> (Constants.SessionManagerInterfaceName,\n\t\t\t\t                                                             session_client_id);\n\t\t\t\tclient.EndSessionResponse(true, String.Empty);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.Debug(\"Failed to respond to session manager: {0}\", e.Message);\n\t\t\t}\n\t\t}\n\t\tprivate void OnEndSession (uint flags)\n\t\t{\n\t\t\tLogger.Info (\"Received end session signal\");\n\t\t\tif (ExitingEvent != null)\n\t\t\t\tExitingEvent (null, new EventArgs ());\n\t\t\t// Let the session manager know its OK to continue\n\t\t\t// Ideally we would wait for all the exit events to finish\n\t\t\ttry {\n\t\t\t\tClientPrivate client = Bus.Session.GetObject<ClientPrivate> (Constants.SessionManagerInterfaceName,\n\t\t\t\t                                                             session_client_id);\n\t\t\t\tclient.EndSessionResponse (true, String.Empty);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLogger.Debug (\"Failed to respond to session manager: {0}\", e.Message);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void OpenUrl (string url, Gdk.Screen screen)\n\t\t{\n\t\t\tGtkBeans.Global.ShowUri (screen, url);\n\t\t}\n\t\t[DllImport (\"glib-2.0.dll\")]\n\t\tstatic extern IntPtr g_get_language_names ();\n\t\t\n\t\tpublic void DisplayHelp (string project, string page, Gdk.Screen screen)\n\t\t{\n\t\t\tstring helpUrl = string.Format(\"http://library.gnome.org/users/{0}/\", project);\n\t\t\tvar langsPtr = g_get_language_names ();\n\t\t\tvar langs = GLib.Marshaller.NullTermPtrToStringArray (langsPtr, false);\n\t\t\tvar baseHelpDir = Path.Combine (Path.Combine (Defines.DATADIR, \"gnome/help\"), project);\n\t\t\tif (Directory.Exists (baseHelpDir)) {\n\t\t\t\tforeach (var lang in langs) {\n\t\t\t\t\tvar langHelpDir = Path.Combine (baseHelpDir, lang);\n\t\t\t\t\tif (Directory.Exists (langHelpDir))\n\t\t\t\t\t\t// TODO:Support page\n\t\t\t\t\t\thelpUrl = String.Format (\"ghelp://{0}\", langHelpDir);\n\t\t\t\t}\n\t\t\t}\n\t\t\tOpenUrl (helpUrl, screen);\n\t\t}\n\t\t\n\t\tpublic string DataDirectory {\n", "answers": ["\t\t\tget { return dataDir; }"], "length": 614, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "e2ce1e79b1ea6b76bdda716904c17e746e52a6a0261ef941"}
{"input": "", "context": "/*\n * FindBugs - Find bugs in Java programs\n * Copyright (C) 2003-2008, University of Maryland\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage edu.umd.cs.findbugs;\nimport java.io.PrintStream;\nimport java.io.PrintWriter;\nimport java.util.Iterator;\nimport edu.umd.cs.findbugs.charsets.UTF8;\n/**\n * Base class for BugReporters which provides convenient formatting and\n * reporting of warnings and analysis errors.\n *\n * <p>\n * \"TextUIBugReporter\" is a bit of a misnomer, since this class is useful in\n * GUIs, too.\n * </p>\n *\n * @author David Hovemeyer\n */\npublic abstract class TextUIBugReporter extends AbstractBugReporter {\n    private boolean reportStackTrace;\n    private boolean useLongBugCodes = false;\n    private boolean showRank = false;\n    private boolean reportHistory = false;\n    private boolean applySuppressions = false;\n    static final String OTHER_CATEGORY_ABBREV = \"X\";\n    protected PrintWriter outputStream = UTF8.printWriter(System.out, true);\n    public TextUIBugReporter() {\n        reportStackTrace = true;\n    }\n    /**\n     * Set the PrintStream to write bug output to.\n     *\n     * @param outputStream\n     *            the PrintStream to write bug output to\n     */\n    public void setOutputStream(PrintStream outputStream) {\n        this.outputStream = UTF8.printWriter(outputStream, true);\n    }\n    public void setWriter(PrintWriter writer) {\n        this.outputStream = writer;\n    }\n    /**\n     * Set whether or not stack traces should be reported in error output.\n     *\n     * @param reportStackTrace\n     *            true if stack traces should be reported, false if not\n     */\n    public void setReportStackTrace(boolean reportStackTrace) {\n        this.reportStackTrace = reportStackTrace;\n    }\n    /**\n     * Print bug in one-line format.\n     *\n     * @param bugInstance\n     *            the bug to print\n     */\n    protected void printBug(BugInstance bugInstance) {\n        if (showRank) {\n            int rank = BugRanker.findRank(bugInstance);\n            outputStream.printf(\"%2d \", rank);\n        }\n        switch (bugInstance.getPriority()) {\n        case Priorities.EXP_PRIORITY:\n            outputStream.print(\"E \");\n            break;\n        case Priorities.LOW_PRIORITY:\n            outputStream.print(\"L \");\n            break;\n        case Priorities.NORMAL_PRIORITY:\n            outputStream.print(\"M \");\n            break;\n        case Priorities.HIGH_PRIORITY:\n            outputStream.print(\"H \");\n            break;\n        default:\n            assert false;\n        }\n        BugPattern pattern = bugInstance.getBugPattern();\n        if (pattern != null) {\n            String categoryAbbrev = null;\n            BugCategory bcat = DetectorFactoryCollection.instance().getBugCategory(pattern.getCategory());\n            if (bcat != null) {\n                categoryAbbrev = bcat.getAbbrev();\n            }\n            if (categoryAbbrev == null) {\n                categoryAbbrev = OTHER_CATEGORY_ABBREV;\n            }\n            outputStream.print(categoryAbbrev);\n            outputStream.print(\" \");\n        }\n        if (useLongBugCodes) {\n            outputStream.print(bugInstance.getType());\n            outputStream.print(\" \");\n        }\n        if (reportHistory) {\n            long first = bugInstance.getFirstVersion();\n            long last = bugInstance.getLastVersion();\n            outputStream.print(first);\n            outputStream.print(\" \");\n            outputStream.print(last);\n            outputStream.print(\" \");\n        }\n        SourceLineAnnotation line = bugInstance.getPrimarySourceLineAnnotation();\n        outputStream.println(bugInstance.getMessage().replace('\\n', ' ') + \"  \" + line.toString());\n    }\n    private boolean analysisErrors;\n    private boolean missingClasses;\n    @Override\n    public void reportQueuedErrors() {\n        boolean errors = analysisErrors || missingClasses || getQueuedErrors().size() > 0;\n        analysisErrors = missingClasses = false;\n        super.reportQueuedErrors();\n        if (errors) {\n            emitLine(\"\");\n        }\n    }\n    @Override\n    public void reportAnalysisError(AnalysisError error) {\n        if (!analysisErrors) {\n            emitLine(\"The following errors occurred during analysis:\");\n            analysisErrors = true;\n        }\n        emitLine(\"\\t\" + error.getMessage());\n        if (error.getExceptionMessage() != null) {\n            emitLine(\"\\t\\t\" + error.getExceptionMessage());\n            if (reportStackTrace) {\n                String[] stackTrace = error.getStackTrace();\n                if (stackTrace != null) {\n                    for (String aStackTrace : stackTrace) {\n                        emitLine(\"\\t\\t\\tAt \" + aStackTrace);\n                    }\n                }\n            }\n        }\n    }\n    @Override\n    public void reportMissingClass(String message) {\n        if (!missingClasses) {\n            emitLine(\"The following classes needed for analysis were missing:\");\n            missingClasses = true;\n        }\n        emitLine(\"\\t\" + message);\n    }\n    /**\n     * Emit one line of the error message report. By default, error messages are\n     * printed to System.err. Subclasses may override.\n     *\n     * @param line\n     *            one line of the error report\n     */\n    protected void emitLine(String line) {\n        line = line.replaceAll(\"\\t\", \"  \");\n        System.err.println(line);\n    }\n    public boolean getUseLongBugCodes() {\n        return useLongBugCodes;\n    }\n    public void setReportHistory(boolean reportHistory) {\n        this.reportHistory = reportHistory;\n    }\n    public void setUseLongBugCodes(boolean useLongBugCodes) {\n        this.useLongBugCodes = useLongBugCodes;\n    }\n    public void setShowRank(boolean showRank) {\n        this.showRank = showRank;\n    }\n    public void setApplySuppressions(boolean applySuppressions) {\n        this.applySuppressions = applySuppressions;\n    }\n    /*\n     * (non-Javadoc)\n     *\n     * @see edu.umd.cs.findbugs.BugReporter#getRealBugReporter()\n     */\n    public BugReporter getRealBugReporter() {\n        return this;\n    }\n    /**\n     * For debugging: check a BugInstance to make sure it is valid.\n     *\n     * @param bugInstance\n     *            the BugInstance to check\n     */\n    protected void checkBugInstance(BugInstance bugInstance) {\n        for (Iterator<BugAnnotation> i = bugInstance.annotationIterator(); i.hasNext();) {\n            BugAnnotation bugAnnotation = i.next();\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "length": 733, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "cb3e34be4795caaf719f520787549681e8b00fbac71530a7"}
{"input": "", "context": "using System;\nusing System.Collections;\nusing Server.Network;\nusing System.Collections.Generic;\nusing Server.ContextMenus;\nnamespace Server.Items\n{\n\tpublic abstract class Food : Item\n\t{\n\t\tprivate Mobile m_Poisoner;\n\t\tprivate Poison m_Poison;\n\t\tprivate int m_FillFactor;\n\t\t[CommandProperty( AccessLevel.GameMaster )]\n\t\tpublic Mobile Poisoner\n\t\t{\n\t\t\tget { return m_Poisoner; }\n\t\t\tset { m_Poisoner = value; }\n\t\t}\n\t\t[CommandProperty( AccessLevel.GameMaster )]\n\t\tpublic Poison Poison\n\t\t{\n\t\t\tget { return m_Poison; }\n\t\t\tset { m_Poison = value; }\n\t\t}\n\t\t[CommandProperty( AccessLevel.GameMaster )]\n\t\tpublic int FillFactor\n\t\t{\n\t\t\tget { return m_FillFactor; }\n\t\t\tset { m_FillFactor = value; }\n\t\t}\n\t\tpublic Food( int itemID ) : this( 1, itemID )\n\t\t{\n\t\t}\n\t\tpublic Food( int amount, int itemID ) : base( itemID )\n\t\t{\n\t\t\tStackable = true;\n\t\t\tAmount = amount;\n\t\t\tm_FillFactor = 1;\n\t\t}\n\t\tpublic Food( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void GetContextMenuEntries( Mobile from, List<ContextMenuEntry> list )\n\t\t{\n\t\t\tbase.GetContextMenuEntries( from, list );\n\t\t\tif ( from.Alive )\n\t\t\t\tlist.Add( new ContextMenus.EatEntry( from, this ) );\n\t\t}\n\t\tpublic override void OnDoubleClick( Mobile from )\n\t\t{\n\t\t\tif ( !Movable )\n\t\t\t\treturn;\n\t\t\tif ( from.InRange( this.GetWorldLocation(), 1 ) )\n\t\t\t{\n\t\t\t\tEat( from );\n\t\t\t}\n\t\t}\n\t\tpublic virtual bool Eat( Mobile from )\n\t\t{\n\t\t\t// Fill the Mobile with FillFactor\n\t\t\tif ( CheckHunger( from ) )\n\t\t\t{\n\t\t\t\t// Play a random \"eat\" sound\n\t\t\t\tfrom.PlaySound( Utility.Random( 0x3A, 3 ) );\n\t\t\t\tif ( from.Body.IsHuman && !from.Mounted )\n\t\t\t\t\tfrom.Animate( 34, 5, 1, true, false, 0 );\n\t\t\t\tif ( m_Poison != null )\n\t\t\t\t\tfrom.ApplyPoison( m_Poisoner, m_Poison );\n\t\t\t\tConsume();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tpublic virtual bool CheckHunger( Mobile from )\n\t\t{\n\t\t\treturn FillHunger( from, m_FillFactor );\n\t\t}\n\t\tpublic static bool FillHunger( Mobile from, int fillFactor )\n\t\t{\n\t\t\tif ( from.Hunger >= 20 )\n\t\t\t{\n\t\t\t\tfrom.SendLocalizedMessage( 500867 ); // You are simply too full to eat any more!\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tint iHunger = from.Hunger + fillFactor;\n\t\t\tif ( from.Stam < from.StamMax )\n\t\t\t\tfrom.Stam += Utility.Random( 6, 3 ) + fillFactor / 5;\n\t\t\tif ( iHunger >= 20 )\n\t\t\t{\n\t\t\t\tfrom.Hunger = 20;\n\t\t\t\tfrom.SendLocalizedMessage( 500872 ); // You manage to eat the food, but you are stuffed!\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfrom.Hunger = iHunger;\n\t\t\t\tif ( iHunger < 5 )\n\t\t\t\t\tfrom.SendLocalizedMessage( 500868 ); // You eat the food, but are still extremely hungry.\n\t\t\t\telse if ( iHunger < 10 )\n\t\t\t\t\tfrom.SendLocalizedMessage( 500869 ); // You eat the food, and begin to feel more satiated.\n\t\t\t\telse if ( iHunger < 15 )\n\t\t\t\t\tfrom.SendLocalizedMessage( 500870 ); // After eating the food, you feel much less hungry.\n\t\t\t\telse\n\t\t\t\t\tfrom.SendLocalizedMessage( 500871 ); // You feel quite full after consuming the food.\n\t\t\t}\n\t\t\tMisc.FoodDecayTimer.ApplyHungerStatMod(from);\n\t\t\treturn true;\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 4 ); // version\n\t\t\twriter.Write( m_Poisoner );\n\t\t\tPoison.Serialize( m_Poison, writer );\n\t\t\twriter.Write( m_FillFactor );\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t\tswitch ( version )\n\t\t\t{\n\t\t\t\tcase 1:\n\t\t\t\t{\n\t\t\t\t\tswitch ( reader.ReadInt() )\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 0: m_Poison = null; break;\n\t\t\t\t\t\tcase 1: m_Poison = Poison.Lesser; break;\n\t\t\t\t\t\tcase 2: m_Poison = Poison.Regular; break;\n\t\t\t\t\t\tcase 3: m_Poison = Poison.Greater; break;\n\t\t\t\t\t\tcase 4: m_Poison = Poison.Deadly; break;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 2:\n\t\t\t\t{\n\t\t\t\t\tm_Poison = Poison.Deserialize( reader );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 3:\n\t\t\t\t{\n\t\t\t\t\tm_Poison = Poison.Deserialize( reader );\n\t\t\t\t\tm_FillFactor = reader.ReadInt();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 4:\n\t\t\t\t{\n\t\t\t\t\tm_Poisoner = reader.ReadMobile();\n\t\t\t\t\tgoto case 3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tpublic class BreadLoaf : Food\n\t{\n\t\t[Constructable]\n\t\tpublic BreadLoaf() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic BreadLoaf( int amount ) : base( amount, 0x103B )\n\t\t{\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 3;\n\t\t}\n\t\tpublic BreadLoaf( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class Bacon : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Bacon() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic Bacon( int amount ) : base( amount, 0x979 )\n\t\t{\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 1;\n\t\t}\n\t\tpublic Bacon( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class SlabOfBacon : Food\n\t{\n\t\t[Constructable]\n\t\tpublic SlabOfBacon() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic SlabOfBacon( int amount ) : base( amount, 0x976 )\n\t\t{\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 3;\n\t\t}\n\t\tpublic SlabOfBacon( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class FishSteak : Food\n\t{\n\t\tpublic override double DefaultWeight\n\t\t{\n\t\t\tget { return 0.1; }\n\t\t}\n\t\t[Constructable]\n\t\tpublic FishSteak() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic FishSteak( int amount ) : base( amount, 0x97B )\n\t\t{\n\t\t\tthis.FillFactor = 3;\n\t\t}\n\t\tpublic FishSteak( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class CheeseWheel : Food\n\t{\n\t\tpublic override double DefaultWeight\n\t\t{\n\t\t\tget { return 0.1; }\n\t\t}\n\t\t[Constructable]\n\t\tpublic CheeseWheel() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic CheeseWheel( int amount ) : base( amount, 0x97E )\n\t\t{\n\t\t\tthis.FillFactor = 3;\n\t\t}\n\t\tpublic CheeseWheel( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class CheeseWedge : Food\n\t{\n\t\tpublic override double DefaultWeight\n\t\t{\n\t\t\tget { return 0.1; }\n\t\t}\n\t\t[Constructable]\n\t\tpublic CheeseWedge() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic CheeseWedge( int amount ) : base( amount, 0x97D )\n\t\t{\n\t\t\tthis.FillFactor = 3;\n\t\t}\n\t\tpublic CheeseWedge( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class CheeseSlice : Food\n\t{\n\t\tpublic override double DefaultWeight\n\t\t{\n\t\t\tget { return 0.1; }\n\t\t}\n\t\t[Constructable]\n\t\tpublic CheeseSlice() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic CheeseSlice( int amount ) : base( amount, 0x97C )\n\t\t{\n\t\t\tthis.FillFactor = 1;\n\t\t}\n\t\tpublic CheeseSlice( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class FrenchBread : Food\n\t{\n\t\t[Constructable]\n\t\tpublic FrenchBread() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic FrenchBread( int amount ) : base( amount, 0x98C )\n\t\t{\n\t\t\tthis.Weight = 2.0;\n\t\t\tthis.FillFactor = 3;\n\t\t}\n\t\tpublic FrenchBread( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class FriedEggs : Food\n\t{\n\t\t[Constructable]\n\t\tpublic FriedEggs() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic FriedEggs( int amount ) : base( amount, 0x9B6 )\n\t\t{\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 4;\n\t\t}\n\t\tpublic FriedEggs( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class CookedBird : Food\n\t{\n\t\t[Constructable]\n\t\tpublic CookedBird() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic CookedBird( int amount ) : base( amount, 0x9B7 )\n\t\t{\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 5;\n\t\t}\n\t\tpublic CookedBird( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class RoastPig : Food\n\t{\n\t\t[Constructable]\n\t\tpublic RoastPig() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic RoastPig( int amount ) : base( amount, 0x9BB )\n\t\t{\n\t\t\tthis.Weight = 45.0;\n\t\t\tthis.FillFactor = 20;\n\t\t}\n\t\tpublic RoastPig( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class Sausage : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Sausage() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic Sausage( int amount ) : base( amount, 0x9C0 )\n\t\t{\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 4;\n\t\t}\n\t\tpublic Sausage( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class Ham : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Ham() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic Ham( int amount ) : base( amount, 0x9C9 )\n\t\t{\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 5;\n\t\t}\n\t\tpublic Ham( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class Cake : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Cake() : base( 0x9E9 )\n\t\t{\n\t\t\tStackable = false;\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 10;\n\t\t}\n\t\tpublic Cake( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class Ribs : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Ribs() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic Ribs( int amount ) : base( amount, 0x9F2 )\n\t\t{\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 5;\n\t\t}\n\t\tpublic Ribs( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class Cookies : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Cookies() : base( 0x160b )\n\t\t{\n\t\t\tStackable = Core.ML;\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 4;\n\t\t}\n\t\tpublic Cookies( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class Muffins : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Muffins() : base( 0x9eb )\n\t\t{\n\t\t\tStackable = false;\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 4;\n\t\t}\n\t\tpublic Muffins( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( (int) 0 ); // version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "length": 1914, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "c539b59ccd2559e5f2823b3d0c876ed3d71dad59f7a6e121"}
{"input": "", "context": "using EloBuddy; \nusing LeagueSharp.Common; \nnamespace Flowers_ADC_Series.Pluging\n{\n    using ADCCOMMON;\n    using System;\n    using System.Linq;\n    using LeagueSharp;\n    using LeagueSharp.Common;\n    using Color = System.Drawing.Color;\n    \n    internal class KogMaw : Logic\n    {\n        public KogMaw()\n        {\n            Q = new Spell(SpellSlot.Q, 980f);\n            W = new Spell(SpellSlot.W, Me.AttackRange);\n            E = new Spell(SpellSlot.E, 1200f);\n            R = new Spell(SpellSlot.R, 1800f);\n            Q.SetSkillshot(0.25f, 50f, 2000f, true, SkillshotType.SkillshotLine);\n            E.SetSkillshot(0.25f, 120f, 1400f, false, SkillshotType.SkillshotLine);\n            R.SetSkillshot(1.2f, 120f, float.MaxValue, false, SkillshotType.SkillshotCircle);\n            var comboMenu = Menu.AddSubMenu(new Menu(\"Combo\", \"Combo\"));\n            {\n                comboMenu.AddItem(new MenuItem(\"ComboQ\", \"Use Q\", true).SetValue(true));\n                comboMenu.AddItem(new MenuItem(\"ComboW\", \"Use W\", true).SetValue(true));\n                comboMenu.AddItem(new MenuItem(\"ComboE\", \"Use E\", true).SetValue(true));\n                comboMenu.AddItem(new MenuItem(\"ComboR\", \"Use R\", true).SetValue(true));\n                comboMenu.AddItem(\n                    new MenuItem(\"ComboRLimit\", \"Use R|Limit Stack >= x\", true).SetValue(new Slider(3, 0, 10)));\n            }\n            var harassMenu = Menu.AddSubMenu(new Menu(\"Harass\", \"Harass\"));\n            {\n                harassMenu.AddItem(new MenuItem(\"HarassQ\", \"Use Q\", true).SetValue(true));\n                harassMenu.AddItem(new MenuItem(\"HarassE\", \"Use E\", true).SetValue(true));\n                harassMenu.AddItem(new MenuItem(\"HarassR\", \"Use R\", true).SetValue(true));\n                harassMenu.AddItem(\n                    new MenuItem(\"HarassRLimit\", \"Use R|Limit Stack >= x\", true).SetValue(new Slider(5, 0, 10)));\n                harassMenu.AddItem(\n                    new MenuItem(\"HarassMana\", \"When Player ManaPercent >= x%\", true).SetValue(new Slider(60)));\n            }\n            var clearMenu = Menu.AddSubMenu(new Menu(\"Clear\", \"Clear\"));\n            {\n                var laneClearMenu = clearMenu.AddSubMenu(new Menu(\"LaneClear\", \"LaneClear\"));\n                {\n                    laneClearMenu.AddItem(new MenuItem(\"LaneClearQ\", \"Use Q\", true).SetValue(true));\n                    laneClearMenu.AddItem(new MenuItem(\"LaneClearE\", \"Use E\", true).SetValue(true));\n                    laneClearMenu.AddItem(\n                        new MenuItem(\"LaneClearECount\", \"If E CanHit Counts >= x\", true).SetValue(new Slider(3, 1, 5)));\n                    laneClearMenu.AddItem(new MenuItem(\"LaneClearR\", \"Use R\", true).SetValue(true));\n                    laneClearMenu.AddItem(\n                        new MenuItem(\"LaneClearRLimit\", \"Use R|Limit Stack >= x\", true).SetValue(new Slider(4, 0, 10)));\n                    laneClearMenu.AddItem(\n                        new MenuItem(\"LaneClearMana\", \"If Player ManaPercent >= %\", true).SetValue(new Slider(60)));\n                }\n                var jungleClearMenu = clearMenu.AddSubMenu(new Menu(\"JungleClear\", \"JungleClear\"));\n                {\n                    jungleClearMenu.AddItem(new MenuItem(\"JungleClearQ\", \"Use Q\", true).SetValue(true));\n                    jungleClearMenu.AddItem(new MenuItem(\"JungleClearW\", \"Use W\", true).SetValue(true));\n                    jungleClearMenu.AddItem(new MenuItem(\"JungleClearE\", \"Use E\", true).SetValue(true));\n                    jungleClearMenu.AddItem(new MenuItem(\"JungleClearR\", \"Use R\", true).SetValue(true));\n                    jungleClearMenu.AddItem(\n                        new MenuItem(\"JungleClearRLimit\", \"Use R|Limit Stack >= x\", true).SetValue(new Slider(5, 0, 10)));\n                    jungleClearMenu.AddItem(\n                        new MenuItem(\"JungleClearMana\", \"When Player ManaPercent >= x%\", true).SetValue(new Slider(30)));\n                }\n                clearMenu.AddItem(new MenuItem(\"asdqweqwe\", \" \", true));\n                ManaManager.AddSpellFarm(clearMenu);\n            }\n            var killStealMenu = Menu.AddSubMenu(new Menu(\"KillSteal\", \"KillSteal\"));\n            {\n                killStealMenu.AddItem(new MenuItem(\"KillStealQ\", \"Use Q\", true).SetValue(true));\n                killStealMenu.AddItem(new MenuItem(\"KillStealE\", \"Use E\", true).SetValue(true));\n                killStealMenu.AddItem(new MenuItem(\"KillStealR\", \"Use R\", true).SetValue(true));\n            }\n            var miscMenu = Menu.AddSubMenu(new Menu(\"Misc\", \"Misc\"));\n            {\n                miscMenu.AddItem(new MenuItem(\"GapE\", \"Anti GapCloser E\", true).SetValue(true));\n                miscMenu.AddItem(\n                    new MenuItem(\"SemiR\", \"Semi-manual R Key\", true).SetValue(new KeyBind('T', KeyBindType.Press)));\n            }\n            var utilityMenu = Menu.AddSubMenu(new Menu(\"Utility\", \"Utility\"));\n            {\n                var skinMenu = utilityMenu.AddSubMenu(new Menu(\"Skin Change\", \"Skin Change\"));\n                {\n                    SkinManager.AddToMenu(skinMenu);\n                }\n                var autoLevelMenu = utilityMenu.AddSubMenu(new Menu(\"Auto Levels\", \"Auto Levels\"));\n                {\n                    LevelsManager.AddToMenu(autoLevelMenu);\n                }\n                var humainzerMenu = utilityMenu.AddSubMenu(new Menu(\"Humanier\", \"Humanizer\"));\n                {\n                    HumanizerManager.AddToMenu(humainzerMenu);\n                }\n                var itemsMenu = utilityMenu.AddSubMenu(new Menu(\"Items\", \"Items\"));\n                {\n                    ItemsManager.AddToMenu(itemsMenu);\n                }\n            }\n            var drawMenu = Menu.AddSubMenu(new Menu(\"Drawings\", \"Drawings\"));\n            {\n                drawMenu.AddItem(new MenuItem(\"DrawQ\", \"Draw Q Range\", true).SetValue(false));\n                drawMenu.AddItem(new MenuItem(\"DrawW\", \"Draw W Range\", true).SetValue(false));\n                drawMenu.AddItem(new MenuItem(\"DrawE\", \"Draw E Range\", true).SetValue(false));\n                drawMenu.AddItem(new MenuItem(\"DrawR\", \"Draw R Range\", true).SetValue(false));\n                ManaManager.AddDrawFarm(drawMenu);\n                DamageIndicator.AddToMenu(drawMenu);\n            }\n            AntiGapcloser.OnEnemyGapcloser += OnEnemyGapcloser;\n            Obj_AI_Base.OnSpellCast += OnSpellCast;\n            Game.OnUpdate += OnUpdate;\n            Drawing.OnDraw += OnDraw;\n        }\n        private void OnEnemyGapcloser(ActiveGapcloser Args)\n        {\n            if (Menu.GetBool(\"GapE\") && E.IsReady() && Args.Sender.IsValidTarget(E.Range))\n            {\n                SpellManager.PredCast(E, Args.Sender, true);\n            }\n        }\n        private void OnSpellCast(Obj_AI_Base sender, GameObjectProcessSpellCastEventArgs Args)\n        {\n            if (!sender.IsMe || !Orbwalking.IsAutoAttack(Args.SData.Name))\n            {\n                return;\n            }\n            if (Orbwalker.ActiveMode == Orbwalking.OrbwalkingMode.Combo)\n            {\n                var target = (AIHeroClient)Args.Target;\n                if (target != null && !target.IsDead && !target.IsZombie)\n                {\n                    if (Menu.GetBool(\"ComboW\") && W.IsReady() && target.IsValidTarget(W.Range))\n                    {\n                        W.Cast();\n                    }\n                    else if (Menu.GetBool(\"ComboR\") && R.IsReady() && Menu.GetSlider(\"ComboRLimit\") >= GetRCount &&\n                        target.IsValidTarget(R.Range))\n                    {\n                        SpellManager.PredCast(R, target, true);\n                    }\n                    else if (Menu.GetBool(\"ComboQ\") && Q.IsReady() && target.IsValidTarget(Q.Range))\n                    {\n                        SpellManager.PredCast(Q, target);\n                    }\n                    else if (Menu.GetBool(\"ComboE\") && E.IsReady() && target.IsValidTarget(E.Range))\n                    {\n                        SpellManager.PredCast(E, target, true);\n                    }\n                }\n            }\n            if (Orbwalker.ActiveMode == Orbwalking.OrbwalkingMode.LaneClear)\n            {\n                if (ManaManager.HasEnoughMana(Menu.GetSlider(\"JungleClearMana\")) && ManaManager.SpellFarm)\n                {\n                    var mobs = MinionManager.GetMinions(Me.Position, R.Range, MinionTypes.All, MinionTeam.Neutral,\n                        MinionOrderTypes.MaxHealth);\n                    if (mobs.Any())\n                    {\n                        var mob = mobs.FirstOrDefault();\n                        var bigmob = mobs.FirstOrDefault(x => !x.Name.ToLower().Contains(\"mini\"));\n                        if (Menu.GetBool(\"JungleClearW\") && W.IsReady() && bigmob != null && bigmob.IsValidTarget(W.Range))\n                        {\n                            W.Cast();\n                        }\n                        else if (Menu.GetBool(\"JungleClearR\") && R.IsReady() && Menu.GetSlider(\"JungleClearRLimit\") >= GetRCount && \n                            bigmob != null)\n                        {\n                            R.Cast(bigmob);\n                        }\n                        else if (Menu.GetBool(\"JungleClearE\") && E.IsReady())\n                        {\n                            if (bigmob != null && bigmob.IsValidTarget(E.Range))\n                            {\n                                E.Cast(bigmob);\n                            }\n                            else\n                            {\n                                var eMobs = MinionManager.GetMinions(Me.Position, E.Range, MinionTypes.All, MinionTeam.Neutral,\n                                    MinionOrderTypes.MaxHealth);\n                                var eFarm = E.GetLineFarmLocation(eMobs, E.Width);\n                                if (eFarm.MinionsHit >= 2)\n                                {\n                                    E.Cast(eFarm.Position);\n                                }\n                            }\n                        }\n                        else if (Menu.GetBool(\"JungleClearQ\") && Q.IsReady() && mob != null && mob.IsValidTarget(Q.Range))\n                        {\n                            Q.Cast(mob);\n                        }\n                    }\n                }\n            }\n        }\n        private void OnUpdate(EventArgs Args)\n        {\n            if (Me.IsDead || Me.IsRecalling())\n            {\n                return;\n            }\n            if (W.Level > 0)\n            {\n                W.Range = Me.AttackRange + new[] { 130, 150, 170, 190, 210 }[W.Level - 1];\n            }\n            if (R.Level > 0)\n            {\n                R.Range = 1200 + 300*R.Level - 1;\n            }\n            SemiRLogic();\n            KillSteal();\n            switch (Orbwalker.ActiveMode)\n            {\n                case Orbwalking.OrbwalkingMode.Combo:\n                    Combo();\n                    break;\n                case Orbwalking.OrbwalkingMode.Mixed:\n                    Harass();\n                    break;\n                case Orbwalking.OrbwalkingMode.LaneClear:\n                    FarmHarass();\n                    LaneClear();\n                    JungleClear();\n                    break;\n            }\n        }\n        private void SemiRLogic()\n        {\n            if (Menu.GetKey(\"SemiR\") && R.IsReady())\n            {\n                var target = TargetSelector.GetSelectedTarget() ??\n                             TargetSelector.GetTarget(R.Range, TargetSelector.DamageType.Physical);\n                if (target.Check(R.Range))\n                {\n                    SpellManager.PredCast(R, target, true);\n                }\n            }\n        }\n        private void KillSteal()\n        {\n            if (Menu.GetBool(\"KillStealQ\") && Q.IsReady())\n            {\n                foreach (var target in HeroManager.Enemies.Where(x => x.IsValidTarget(Q.Range) && x.Health < Q.GetDamage(x)))\n                {\n                    SpellManager.PredCast(Q, target);\n                    return;\n                }\n            }\n            if (Menu.GetBool(\"KillStealE\") && E.IsReady())\n            {\n                foreach (var target in HeroManager.Enemies.Where(x => x.IsValidTarget(E.Range) && x.Health < E.GetDamage(x)))\n                {\n                    SpellManager.PredCast(E, target, true);\n                    return;\n                }\n            }\n            if (Menu.GetBool(\"KillStealR\") && R.IsReady())\n            {\n                foreach (var target in HeroManager.Enemies.Where(x => x.IsValidTarget(R.Range) && x.Health < R.GetDamage(x)))\n                {\n                    SpellManager.PredCast(R, target, true);\n                    return;\n                }\n            }\n        }\n        private void Combo()\n        {\n            var target = TargetSelector.GetSelectedTarget() ??\n                         TargetSelector.GetTarget(R.Range, TargetSelector.DamageType.Physical);\n            if (target.Check(R.Range))\n            {\n                if (Menu.GetBool(\"ComboR\") && R.IsReady() &&\n                    Menu.GetSlider(\"ComboRLimit\") >= GetRCount &&\n                    target.IsValidTarget(R.Range))\n                {\n                    SpellManager.PredCast(R, target, true);\n                }\n                if (Menu.GetBool(\"ComboQ\") && Q.IsReady() && target.IsValidTarget(Q.Range))\n                {\n                    SpellManager.PredCast(Q, target, true);\n                }\n                if (Menu.GetBool(\"ComboE\") && E.IsReady() && target.IsValidTarget(E.Range))\n                {\n                    SpellManager.PredCast(E, target);\n                }\n                if (Menu.GetBool(\"ComboW\") && W.IsReady() && target.IsValidTarget(W.Range) &&\n                    target.DistanceToPlayer() > Orbwalking.GetRealAutoAttackRange(Me) && Me.CanAttack)\n                {\n                    W.Cast();\n                }\n            }\n        }\n        private void Harass()\n        {\n            if (ManaManager.HasEnoughMana(Menu.GetSlider(\"HarassMana\")))\n            {\n                var target = TargetSelector.GetTarget(R.Range, TargetSelector.DamageType.Magical);\n                if (target.Check(R.Range))\n                {\n                    if (Menu.GetBool(\"HarassR\") && R.IsReady() && Menu.GetSlider(\"HarassRLimit\") >= GetRCount &&\n                        target.IsValidTarget(R.Range))\n                    {\n                        SpellManager.PredCast(R, target, true);\n                    }\n                    if (Menu.GetBool(\"HarassQ\") && Q.IsReady() && target.IsValidTarget(Q.Range))\n                    {\n                        SpellManager.PredCast(Q, target);\n                    }\n                    if (Menu.GetBool(\"HarassE\") && E.IsReady() && target.IsValidTarget(E.Range))\n                    {\n                        SpellManager.PredCast(E, target, true);\n                    }\n                }\n            }\n        }\n        private void FarmHarass()\n        {\n            if (ManaManager.SpellHarass)\n            {\n                Harass();\n            }\n        }\n        private void LaneClear()\n        {\n            if (ManaManager.HasEnoughMana(Menu.GetSlider(\"LaneClearMana\")) && ManaManager.SpellFarm)\n            {\n                var minions = MinionManager.GetMinions(Me.Position, R.Range);\n                if (minions.Any())\n                {\n                    if (Menu.GetBool(\"LaneClearR\") && R.IsReady() && Menu.GetSlider(\"LaneClearRLimit\") >= GetRCount)\n                    {\n                        var rMinion =\n                            minions.FirstOrDefault(x => x.DistanceToPlayer() > Orbwalking.GetRealAutoAttackRange(Me));\n                        if (rMinion != null && HealthPrediction.GetHealthPrediction(rMinion, 250) > 0)\n                        {\n                            R.Cast(rMinion);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearE\") && E.IsReady())\n                    {\n                        var eMinions = MinionManager.GetMinions(Me.Position, E.Range);\n                        var eFarm =\n                            MinionManager.GetBestLineFarmLocation(eMinions.Select(x => x.Position.To2D()).ToList(),\n                                E.Width, E.Range);\n", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "length": 993, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "d8843d3a7c6577b304c94d48767a3f75337b2aeadd3c5f76"}
{"input": "", "context": "package ch.sfdr.fractals.gui.component;\nimport java.awt.GridBagConstraints;\nimport java.awt.Insets;\n/**\n * GBC, a small helper class to create GridBagConstraints in a more readable way\n * with less typing: just use the static methods when adding a component, eg.\n * <code>\n * \t\tcontainer.add(someComponent, GBC.get(0, 0, 1, 1, 'b'));\n * </code>\n * Imported from another (old) project, adopted a bit\n */\npublic final class GBC\n{\n\tprivate static char DEFAULT_FILL = 'n';\n\tprivate static String DEFAULT_ANCHOR = \"W\";\n\tprivate static String[] ANCHOR_STRINGS = {\n\t\t\"n\", \"ne\", \"e\", \"se\", \"s\", \"sw\", \"w\", \"nw\", \"c\"\n\t};\n\tprivate static int[] ANCHOR_VALUES = {\n\t\tGridBagConstraints.NORTH, GridBagConstraints.NORTHEAST,\n\t\tGridBagConstraints.EAST, GridBagConstraints.SOUTHEAST,\n\t\tGridBagConstraints.SOUTH, GridBagConstraints.SOUTHWEST,\n\t\tGridBagConstraints.WEST, GridBagConstraints.NORTHWEST,\n\t\tGridBagConstraints.CENTER\n\t};\n\tprivate static int getAnchor(String str)\n\t{\n\t\tstr = str.toLowerCase();\n\t\tfor (int i = 0; i < ANCHOR_STRINGS.length; i++) {\n\t\t\tif (str.equals(ANCHOR_STRINGS[i]))\n\t\t\t\treturn ANCHOR_VALUES[i];\n\t\t}\n\t\treturn -1;\n\t}\n\tprivate static int getFill(char c)\n\t{\n\t\tswitch (c) {\n\t\tcase 'n':\n\t\tcase 'N':\n\t\t\treturn GridBagConstraints.NONE;\n\t\tcase 'v':\n\t\tcase 'V':\n\t\t\treturn GridBagConstraints.VERTICAL;\n\t\tcase 'h':\n\t\tcase 'H':\n\t\t\treturn GridBagConstraints.HORIZONTAL;\n\t\tcase 'b':\n\t\tcase 'B':\n\t\t\treturn GridBagConstraints.BOTH;\n\t\t}\n\t\treturn -1;\n\t}\n\t/**\n\t * Returns a GridBagConstraint, setting all values directly\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param wx\n\t * @param wy\n\t * @param insetTop\n\t * @param insetLeft\n\t * @param insetBottom\n\t * @param insetRight\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tdouble wx, double wy, int insetTop, int insetLeft, int insetBottom,\n\t\t\tint insetRight, char fill, String anchor)\n\t{\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\twx, wy, getAnchor(anchor), getFill(fill),\n\t\t\tnew Insets(insetTop, insetLeft, insetBottom, insetRight),\n\t\t\t0, 0);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param wx\n\t * @param wy\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tdouble wx, double wy, char fill, String anchor)\n\t{\n\t\treturn get(x, y, width, height, wx, wy, 2, 2, 2, 2, fill, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param wx\n\t * @param wy\n\t * @param fill\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tdouble wx, double wy, char fill)\n\t{\n\t\treturn get(x, y, width, height, wx, wy, fill, DEFAULT_ANCHOR);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param wx\n\t * @param wy\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tdouble wx, double wy)\n\t{\n\t\treturn get(x, y, width, height, wx, wy, DEFAULT_FILL, DEFAULT_ANCHOR);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param wx\n\t * @param wy\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tdouble wx, double wy, String anchor)\n\t{\n\t\treturn get(x, y, width, height, wx, wy, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill, String anchor)\n\t{\n\t\treturn get(x, y, width, height, 0.0, 0.0, fill, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param fill\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tchar fill)\n\t{\n\t\treturn get(x, y, width, height, 0.0, 0.0, fill, DEFAULT_ANCHOR);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height)\n\t{\n\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, DEFAULT_ANCHOR);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param anchor\n\t * @return GridBagConstraints\n\t */\n\tpublic static GridBagConstraints get(int x, int y, int width, int height,\n\t\t\tString anchor)\n\t{\n", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "length": 691, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "9812a3e53ee25cf9a764b1de80d781f37d829475a8bf8980"}
{"input": "", "context": "#!/usr/bin/env python3\n# vim: set encoding=utf-8 tabstop=4 softtabstop=4 shiftwidth=4 expandtab\n#########################################################################\n#  Copyright 2012-2013 Marcus Popp                         marcus@popp.mx\n#########################################################################\n#  This file is part of SmartHome.py.    http://mknx.github.io/smarthome/\n#\n#  SmartHome.py is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  SmartHome.py is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with SmartHome.py.  If not, see <http://www.gnu.org/licenses/>.\n#########################################################################\nimport logging\nimport csv\nimport ftplib\nimport socket\nimport re\nimport datetime\nimport dateutil.parser\nimport dateutil.tz\nimport dateutil.relativedelta\nimport xml.etree.cElementTree\nimport threading\nlogger = logging.getLogger('')\nclass DWD():\n    _dwd_host = 'ftp-outgoing2.dwd.de'\n    _warning_cat = {}\n    def __init__(self, smarthome, username, password=True):\n        self._sh = smarthome\n        self._warnings_csv = smarthome.base_dir + '/plugins/dwd/warnings.csv'\n        self._dwd_user = username\n        self._dwd_password = password\n        self.lock = threading.Lock()\n        self.tz = dateutil.tz.gettz('Europe/Berlin')\n        try:\n            warnings = csv.reader(open(self._warnings_csv, \"r\", encoding='utf_8'), delimiter=';')\n        except IOError as e:\n            logger.error('Could not open warning catalog {}: {}'.format(self._warnings_csv, e))\n        for row in warnings:\n            self._warning_cat[int(row[0])] = {'summary': row[1], 'kind': row[2]}\n    def _connect(self):\n        # open ftp connection to dwd\n        if not hasattr(self, '_ftp'):\n            try:\n                self._ftp = ftplib.FTP(self._dwd_host, self._dwd_user, self._dwd_password, timeout=1)\n            except (socket.error, socket.gaierror) as e:\n                logger.error('Could not connect to {}: {}'.format(self._dwd_host, e))\n                self.ftp_quit()\n            except ftplib.error_perm as e:\n                logger.error('Could not login: {}'.format(e))\n                self.ftp_quit()\n    def run(self):\n        self.alive = True\n    def stop(self):\n        self.ftp_quit()\n        self.alive = False\n    def ftp_quit(self):\n        try:\n            self._ftp.close()\n        except Exception:\n            pass\n        if hasattr(self, '_ftp'):\n            del(self._ftp)\n    def parse_item(self, item):\n        return None\n    def parse_logic(self, logic):\n        return None\n    def _buffer_file(self, data):\n        self._buffer.extend(data)\n    def _retr_file(self, filename):\n        self.lock.acquire()\n        self._connect()\n        self._buffer = bytearray()\n        try:\n            self._ftp.retrbinary(\"RETR {}\".format(filename), self._buffer_file)\n        except Exception as e:\n            logger.info(\"problem fetching {0}: {1}\".format(filename, e))\n            del(self._buffer)\n            self._buffer = bytearray()\n            self.ftp_quit()\n        self.lock.release()\n        return self._buffer.decode('iso-8859-1')\n    def _retr_list(self, dirname):\n        self.lock.acquire()\n        self._connect()\n        try:\n            filelist = self._ftp.nlst(dirname)\n        except Exception:\n            filelist = []\n        finally:\n            self.lock.release()\n        return filelist\n    def warnings(self, region, location):\n        directory = 'gds/specials/warnings'\n        warnings = []\n        filepath = \"{0}/{1}/W*_{2}_*\".format(directory, region, location)\n        files = self._retr_list(filepath)\n        for filename in files:\n            fb = self._retr_file(filename)\n            if fb == '':\n                continue\n            dates = re.findall(r\"\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d \\d\\d:\\d\\d\", fb)\n            now = datetime.datetime.now(self.tz)\n            if len(dates) > 1:  # Entwarnungen haben nur ein Datum\n                start = dateutil.parser.parse(dates[0], dayfirst=True)\n                start = start.replace(tzinfo=self.tz)\n                end = dateutil.parser.parse(dates[1], dayfirst=True)\n                end = end.replace(tzinfo=self.tz)\n                notice = dateutil.parser.parse(dates[2])\n                notice = notice.replace(tzinfo=self.tz)\n                if end > now:\n                    area_splitter = re.compile(r'^\\r\\r\\n', re.M)\n                    area = area_splitter.split(fb)\n                    code = int(re.findall(r\"\\d\\d\", area[0])[0])\n                    desc = area[5].replace('\\r\\r\\n', '').strip()\n                    kind = self._warning_cat[code]['kind']\n                    warnings.append({'start': start, 'end': end, 'kind': kind, 'notice': notice, 'desc': desc})\n        return warnings\n    def current(self, location):\n        directory = 'gds/specials/observations/tables/germany'\n        files = self._retr_list(directory)\n        if files == []:\n            return {}\n        last = sorted(files)[-1]\n        fb = self._retr_file(last)\n        fb = fb.splitlines()\n        if len(fb) < 8:\n            logger.info(\"problem fetching {0}\".format(last))\n            return {}\n        header = fb[4]\n        legend = fb[8].split()\n        date = re.findall(r\"\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d\", header)[0].split('.')\n        date = \"{}-{}-{}\".format(date[2], date[1], date[0])\n        for line in fb:\n            if line.count(location):\n                space = re.compile(r'  +')\n                line = space.split(line)\n                return dict(zip(legend, line))\n        return {}\n    def forecast(self, region, location):\n        path = 'gds/specials/forecasts/tables/germany/Daten_'\n        frames = ['frueh', 'mittag', 'spaet', 'nacht', 'morgen_frueh', 'morgen_spaet', 'uebermorgen_frueh', 'uebermorgen_spaet', 'Tag4_frueh', 'Tag4_spaet']\n        forecast = {}\n        for frame in frames:\n            filepath = \"{0}{1}_{2}\".format(path, region, frame)\n            fb = self._retr_file(filepath)\n            if fb == '':\n                continue\n            minute = 0\n            if frame.count('frueh'):\n                hour = 6\n            elif frame == 'mittag':\n                hour = 12\n            elif frame == 'nacht':\n                hour = 23\n                minute = 59\n            else:\n                hour = 18\n            for line in fb.splitlines():\n                if line.count('Termin ist nicht mehr'):  # already past\n                    date = self._sh.now().replace(hour=hour, minute=minute, second=0, microsecond=0, tzinfo=self.tz)\n                    forecast[date] = ['', '', '']\n                    continue\n                elif line.startswith('Vorhersage'):\n                    header = line\n                elif line.count(location):\n                    header = re.sub(r\"/\\d\\d?\", '', header)\n                    day, month, year = re.findall(r\"\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d\", header)[0].split('.')\n                    date = datetime.datetime(int(year), int(month), int(day), hour, tzinfo=self.tz)\n                    space = re.compile(r'  +')\n                    fc = space.split(line)\n                    forecast[date] = fc[1:]\n        return forecast\n    def uvi(self, location):\n        directory = 'gds/specials/warnings/FG'\n        forecast = {}\n        for frame in ['12', '36', '60']:\n            filename = \"{0}/u_vindex{1}.xml\".format(directory, frame)\n            fb = self._retr_file(filename)\n            try:\n                year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n            except:\n                continue\n            date = datetime.datetime(int(year), int(month), int(day), 12, 0, 0, 0, tzinfo=self.tz)\n            uv = re.findall(r\"{}<\\/tns:Ort>\\n *<tns:Wert>([^<]+)\".format(location), fb)\n            if len(uv) == 1:\n                forecast[date] = int(uv[0])\n        return forecast\n    def pollen(self, region):\n        filename = 'gds/specials/warnings/FG/s_b31fg.xml'\n", "answers": ["        filexml = self._retr_file(filename)"], "length": 709, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "140b5a1cf9a62eb1f7eac54fcb8dec74b23e9ea6e4d3d93a"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n##\n## This file is part of Invenio.\n## Copyright (C) 2014 CERN.\n##\n## Invenio is free software; you can redistribute it and/or\n## modify it under the terms of the GNU General Public License as\n## published by the Free Software Foundation; either version 2 of the\n## License, or (at your option) any later version.\n##\n## Invenio is distributed in the hope that it will be useful, but\n## WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n## General Public License for more details.\n##\n## You should have received a copy of the GNU General Public License\n## along with Invenio; if not, write to the Free Software Foundation, Inc.,\n## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\"\"\"Unit tests for the parser engine.\"\"\"\n__revision__ = \\\n    \"$Id$\"\nimport tempfile\nfrom flask.ext.registry import PkgResourcesDirDiscoveryRegistry, \\\n    ImportPathRegistry, RegistryProxy\nfrom invenio.base.wrappers import lazy_import\nfrom invenio.testsuite import make_test_suite, run_test_suite, InvenioTestCase\nField_parser = lazy_import('invenio.modules.jsonalchemy.parser:FieldParser')\nModel_parser = lazy_import('invenio.modules.jsonalchemy.parser:ModelParser')\nguess_legacy_field_names = lazy_import(\n    'invenio.modules.jsonalchemy.parser:guess_legacy_field_names')\nget_producer_rules = lazy_import(\n    'invenio.modules.jsonalchemy.parser:get_producer_rules')\nTEST_PACKAGE = 'invenio.modules.jsonalchemy.testsuite'\ntest_registry = RegistryProxy('testsuite', ImportPathRegistry,\n                              initial=[TEST_PACKAGE])\nfield_definitions = lambda: PkgResourcesDirDiscoveryRegistry(\n    'fields', registry_namespace=test_registry)\nmodel_definitions = lambda: PkgResourcesDirDiscoveryRegistry(\n    'models', registry_namespace=test_registry)\ndef clean_field_model_definitions():\n    Field_parser._field_definitions = {}\n    Field_parser._legacy_field_matchings = {}\n    Model_parser._model_definitions = {}\nclass TestParser(InvenioTestCase):\n    def setUp(self):\n        self.app.extensions['registry'][\n            'testsuite.fields'] = field_definitions()\n        self.app.extensions['registry'][\n            'testsuite.models'] = model_definitions()\n    def tearDown(self):\n        del self.app.extensions['registry']['testsuite.fields']\n        del self.app.extensions['registry']['testsuite.models']\n    def test_wrong_indent(self):\n        \"\"\"JSONAlchemy - wrong indent\"\"\"\n        from invenio.modules.jsonalchemy.parser import _create_field_parser\n        import pyparsing\n        parser = _create_field_parser()\n        test = \"\"\"\n        foo:\n            creator:\n        bar, '1', foo()\n        \"\"\"\n        self.assertRaises(pyparsing.ParseException, parser.parseString, test)\n        from invenio.modules.jsonalchemy.errors import FieldParserException\n        tmp_file = tempfile.NamedTemporaryFile()\n        config = \"\"\"\n        foo:\n            creator:\n        bar, '1', foo()\n        \"\"\"\n        tmp_file.write(config)\n        tmp_file.flush()\n        self.app.extensions['registry'][\n            'testsuite.fields'].register(tmp_file.name)\n        clean_field_model_definitions()\n        self.assertRaises(\n            FieldParserException, Field_parser.reparse, 'testsuite')\n        tmp_file.close()\n        clean_field_model_definitions()\n    def test_wrong_field_definitions(self):\n        \"\"\"JSONAlchemy - wrong field definitions\"\"\"\n        from invenio.modules.jsonalchemy.errors import FieldParserException\n        tmp_file_4 = tempfile.NamedTemporaryFile()\n        config_4 = '''\n        title:\n            creator:\n                marc, '245__', value\n        '''\n        tmp_file_4.write(config_4)\n        tmp_file_4.flush()\n        clean_field_model_definitions()\n        self.app.extensions['registry'][\n            'testsuite.fields'].register(tmp_file_4.name)\n        self.assertRaises(\n            FieldParserException, Field_parser.reparse, 'testsuite')\n        tmp_file_4.close()\n        clean_field_model_definitions()\n    def test_wrong_field_inheritance(self):\n        \"\"\"JSONAlchmey - not parent field definition\"\"\"\n        from invenio.modules.jsonalchemy.errors import FieldParserException\n        tmp_file_5 = tempfile.NamedTemporaryFile()\n        config_5 = '''\n        @extend\n        wrong_field:\n            \"\"\" Desc \"\"\"\n        '''\n        tmp_file_5.write(config_5)\n        tmp_file_5.flush()\n        clean_field_model_definitions()\n        self.app.extensions['registry'][\n            'testsuite.fields'].register(tmp_file_5.name)\n        self.assertRaises(\n            FieldParserException, Field_parser.reparse, 'testsuite')\n        tmp_file_5.close()\n        clean_field_model_definitions()\n    def test_field_rules(self):\n        \"\"\"JsonAlchemy - field parser\"\"\"\n        self.assertTrue(len(Field_parser.field_definitions('testsuite')) >= 22)\n        # Check that all files are parsed\n        self.assertTrue(\n            'authors' in Field_parser.field_definitions('testsuite'))\n        self.assertTrue('title' in Field_parser.field_definitions('testsuite'))\n        # Check work around for [n] and [0]\n        self.assertTrue(\n            Field_parser.field_definitions('testsuite')['doi']['pid'])\n        # Check if derived and calulated are well parserd\n        self.assertTrue('dummy' in Field_parser.field_definitions('testsuite'))\n        self.assertEquals(\n            Field_parser.field_definitions('testsuite')['dummy']['pid'], 2)\n        self.assertEquals(Field_parser.field_definitions(\n            'testsuite')['dummy']['rules'].keys(), ['json', 'derived'])\n        self.assertTrue(\n            len(Field_parser.field_definitions(\n                'testsuite')['dummy']['producer']\n                ),\n            2\n        )\n        self.assertTrue(Field_parser.field_definitions('testsuite')['_random'])\n        # Check override\n        value = {'a': 'a', 'b': 'b', 'k': 'k'}  # noqa\n        self.assertEquals(\n            eval(Field_parser.field_definitions('testsuite')\n                 ['title']['rules']['marc'][1]['function']),\n            {'form': 'k', 'subtitle': 'b', 'title': 'a'})\n        # Check extras\n        self.assertTrue(\n            'json_ext' in\n            Field_parser.field_definitions('testsuite')['modification_date']\n        )\n        tmp = Field_parser.field_definitions('testsuite')\n        Field_parser.reparse('testsuite')\n        self.assertEquals(\n            len(Field_parser.field_definitions('testsuite')), len(tmp))\n    def test_wrong_field_name_inside_model(self):\n        \"\"\"JSONAlchmey - wrong field name inside model\"\"\"\n        from invenio.modules.jsonalchemy.errors import ModelParserException\n        tmp_file_8 = tempfile.NamedTemporaryFile()\n        config_8 = '''\n        fields:\n            not_existing_field\n        '''\n        tmp_file_8.write(config_8)\n        tmp_file_8.flush()\n        clean_field_model_definitions()\n        self.app.extensions['registry'][\n            'testsuite.models'].register(tmp_file_8.name)\n        self.assertRaises(\n            ModelParserException, Model_parser.reparse, 'testsuite')\n        tmp_file_8.close()\n        clean_field_model_definitions()\n    def test_model_definitions(self):\n        \"\"\"JsonAlchemy - model parser\"\"\"\n        clean_field_model_definitions()\n        self.assertTrue(len(Model_parser.model_definitions('testsuite')) >= 2)\n        self.assertTrue(\n            'test_base' in Model_parser.model_definitions('testsuite'))\n        tmp = Model_parser.model_definitions('testsuite')\n        Model_parser.reparse('testsuite')\n        self.assertEquals(\n            len(Model_parser.model_definitions('testsuite')), len(tmp))\n        clean_field_model_definitions()\n    def test_resolve_several_models(self):\n        \"\"\"JSONAlchemy - test resolve several models\"\"\"\n        test_model = Model_parser.model_definitions('testsuite')['test_model']\n        clean_field_model_definitions()\n        self.assertEquals(\n            Model_parser.resolve_models('test_model', 'testsuite')['fields'],\n            test_model['fields'])\n        self.assertEquals(\n            Model_parser.resolve_models(\n                ['test_base', 'test_model'], 'testsuite')['fields'],\n            test_model['fields'])\n        clean_field_model_definitions()\n    def test_field_name_model_based(self):\n        \"\"\"JSONAlchemy - field name model based\"\"\"\n        clean_field_model_definitions()\n        field_model_def = Field_parser.field_definition_model_based(\n            'title', 'test_model', 'testsuite')\n        field_def = Field_parser.field_definitions('testsuite')['title_title']\n", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "length": 559, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "377a5cd5de82ca79a2db39ae2f6c6eefe06766c9245639af"}
{"input": "", "context": "///////////////////////////////////////////////////////////////////////////////////////\n// Copyright (C) 2006-2015 Esper Team. All rights reserved.                           /\n// http://esper.codehaus.org                                                          /\n// ---------------------------------------------------------------------------------- /\n// The software in this package is published under the terms of the GPL license       /\n// a copy of which has been included with this distribution in the license.txt file.  /\n///////////////////////////////////////////////////////////////////////////////////////\nusing System;\nusing System.Collections.Generic;\nusing com.espertech.esper.common.client.scopetest;\nusing com.espertech.esper.common.@internal.epl.@join.lookup;\nusing com.espertech.esper.common.@internal.epl.lookupplansubord;\nusing com.espertech.esper.common.@internal.support;\nusing com.espertech.esper.compat;\nusing com.espertech.esper.compat.collections;\nusing com.espertech.esper.regressionlib.framework;\nusing com.espertech.esper.regressionlib.support.bean;\nusing com.espertech.esper.regressionlib.support.util;\nusing NUnit.Framework;\nusing static com.espertech.esper.regressionlib.framework.SupportMessageAssertUtil;\nnamespace com.espertech.esper.regressionlib.suite.infra.nwtable\n{\n    public class InfraNWTableCreateIndex\n    {\n        public static IList<RegressionExecution> Executions()\n        {\n            var execs = new List<RegressionExecution>();\n            execs.Add(new InfraMultiRangeAndKey(true));\n            execs.Add(new InfraMultiRangeAndKey(false));\n            execs.Add(new InfraHashBTreeWidening(true));\n            execs.Add(new InfraHashBTreeWidening(false));\n            execs.Add(new InfraWidening(true));\n            execs.Add(new InfraWidening(false));\n            execs.Add(new InfraCompositeIndex(true));\n            execs.Add(new InfraCompositeIndex(false));\n            execs.Add(new InfraLateCreate(true));\n            execs.Add(new InfraLateCreate(false));\n            execs.Add(new InfraLateCreateSceneTwo(true));\n            execs.Add(new InfraLateCreateSceneTwo(false));\n            execs.Add(new InfraMultipleColumnMultipleIndex(true));\n            execs.Add(new InfraMultipleColumnMultipleIndex(false));\n            execs.Add(new InfraDropCreate(true));\n            execs.Add(new InfraDropCreate(false));\n            execs.Add(new InfraOnSelectReUse(true));\n            execs.Add(new InfraOnSelectReUse(false));\n            execs.Add(new InfraInvalid(true));\n            execs.Add(new InfraInvalid(false));\n            execs.Add(new InfraMultikeyIndexFAF(true));\n            execs.Add(new InfraMultikeyIndexFAF(false));\n            return execs;\n        }\n        private static void RunQueryAssertion(\n            RegressionEnvironment env,\n            RegressionPath path,\n            string epl,\n            string[] fields,\n            object[][] expected)\n        {\n            var result = env.CompileExecuteFAF(epl, path);\n            EPAssertionUtil.AssertPropsPerRow(result.Array, fields, expected);\n        }\n        private static void SendEventLong(\n            RegressionEnvironment env,\n            string theString,\n            long longPrimitive)\n        {\n            var theEvent = new SupportBean();\n            theEvent.TheString = theString;\n            theEvent.LongPrimitive = longPrimitive;\n            env.SendEventBean(theEvent);\n        }\n        private static void SendEventShort(\n            RegressionEnvironment env,\n            string theString,\n            short shortPrimitive)\n        {\n            var theEvent = new SupportBean();\n            theEvent.TheString = theString;\n            theEvent.ShortPrimitive = shortPrimitive;\n            env.SendEventBean(theEvent);\n        }\n        private static void MakeSendSupportBean(\n            RegressionEnvironment env,\n            string theString,\n            int intPrimitive,\n            long longPrimitive)\n        {\n            var b = new SupportBean(theString, intPrimitive);\n            b.LongPrimitive = longPrimitive;\n            env.SendEventBean(b);\n        }\n        private static void AssertCols(\n            RegressionEnvironment env,\n            string listOfP00,\n            object[][] expected)\n        {\n            var p00s = listOfP00.SplitCsv();\n            Assert.AreEqual(p00s.Length, expected.Length);\n            for (var i = 0; i < p00s.Length; i++) {\n                env.SendEventBean(new SupportBean_S0(0, p00s[i]));\n                if (expected[i] == null) {\n                    Assert.IsFalse(env.Listener(\"s0\").IsInvoked);\n                }\n                else {\n                    EPAssertionUtil.AssertProps(\n                        env.Listener(\"s0\").AssertOneGetNewAndReset(),\n                        new [] { \"col0\",\"col1\" },\n                        expected[i]);\n                }\n            }\n        }\n        private static int GetIndexCount(\n            RegressionEnvironment env,\n            bool namedWindow,\n            string infraStmtName,\n            string infraName)\n        {\n            return SupportInfraUtil.GetIndexCountNoContext(env, namedWindow, infraStmtName, infraName);\n        }\n        private static void AssertIndexesRef(\n            RegressionEnvironment env,\n            bool namedWindow,\n            string name,\n            string csvNames)\n        {\n            var entry = GetIndexEntry(env, namedWindow, name);\n            if (string.IsNullOrEmpty(csvNames)) {\n                Assert.IsNull(entry);\n            }\n            else {\n                EPAssertionUtil.AssertEqualsAnyOrder(csvNames.SplitCsv(), entry.ReferringDeployments);\n            }\n        }\n        private static void AssertIndexCountInstance(\n            RegressionEnvironment env,\n            bool namedWindow,\n            string name,\n            int count)\n        {\n            var repo = GetIndexInstanceRepo(env, namedWindow, name);\n            Assert.AreEqual(count, repo.Tables.Count);\n        }\n        private static EventTableIndexRepository GetIndexInstanceRepo(\n            RegressionEnvironment env,\n            bool namedWindow,\n            string name)\n        {\n            if (namedWindow) {\n                var namedWindowInstance = SupportInfraUtil.GetInstanceNoContextNW(env, \"create\", name);\n                return namedWindowInstance.RootViewInstance.IndexRepository;\n            }\n            var instance = SupportInfraUtil.GetInstanceNoContextTable(env, \"create\", name);\n            return instance.IndexRepository;\n        }\n        private static EventTableIndexMetadataEntry GetIndexEntry(\n            RegressionEnvironment env,\n            bool namedWindow,\n            string name)\n        {\n            var descOne = new IndexedPropDesc(\"col0\", typeof(string));\n            var index = new IndexMultiKey(\n                false,\n                Arrays.AsList(descOne),\n                Collections.GetEmptyList<IndexedPropDesc>(),\n                null);\n            var meta = GetIndexMetaRepo(env, namedWindow, name);\n            return meta.Indexes.Get(index);\n        }\n        private static EventTableIndexMetadata GetIndexMetaRepo(\n            RegressionEnvironment env,\n            bool namedWindow,\n            string name)\n        {\n            if (namedWindow) {\n                var processor = SupportInfraUtil.GetNamedWindow(env, \"create\", name);\n                return processor.EventTableIndexMetadata;\n            }\n            var table = SupportInfraUtil.GetTable(env, \"create\", name);\n            return table.EventTableIndexMetadata;\n        }\n        internal class InfraInvalid : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public InfraInvalid(bool namedWindow)\n            {\n                this.namedWindow = namedWindow;\n            }\n            public void Run(RegressionEnvironment env)\n            {\n                var path = new RegressionPath();\n                var eplCreate = namedWindow\n                    ? \"create window MyInfraOne#keepall as (f1 string, f2 int)\"\n                    : \"create table MyInfraOne as (f1 string primary key, f2 int primary key)\";\n                env.CompileDeploy(eplCreate, path);\n                env.CompileDeploy(\"create index MyInfraIndex on MyInfraOne(f1)\", path);\n                env.CompileDeploy(\"create context ContextOne initiated by SupportBean terminated after 5 sec\", path);\n                env.CompileDeploy(\"create context ContextTwo initiated by SupportBean terminated after 5 sec\", path);\n                var eplCreateWContext = namedWindow\n                    ? \"context ContextOne create window MyInfraCtx#keepall as (f1 string, f2 int)\"\n                    : \"context ContextOne create table MyInfraCtx as (f1 string primary key, f2 int primary key)\";\n                env.CompileDeploy(eplCreateWContext, path);\n                // invalid context\n                TryInvalidCompile(\n                    env,\n                    path,\n                    \"create unique index IndexTwo on MyInfraCtx(f1)\",\n                    (namedWindow ? \"Named window\" : \"Table\") +\n                    \" by name 'MyInfraCtx' has been declared for context 'ContextOne' and can only be used within the same context\");\n                TryInvalidCompile(\n                    env,\n                    path,\n                    \"context ContextTwo create unique index IndexTwo on MyInfraCtx(f1)\",\n                    (namedWindow ? \"Named window\" : \"Table\") +\n                    \" by name 'MyInfraCtx' has been declared for context 'ContextOne' and can only be used within the same context\");\n                TryInvalidCompile(\n                    env,\n                    path,\n                    \"create index MyInfraIndex on MyInfraOne(f1)\",\n                    \"An index by name 'MyInfraIndex' already exists [\");\n                TryInvalidCompile(\n                    env,\n                    path,\n                    \"create index IndexTwo on MyInfraOne(fx)\",\n                    \"Property named 'fx' not found\");\n                TryInvalidCompile(\n                    env,\n                    path,\n                    \"create index IndexTwo on MyInfraOne(f1, f1)\",\n                    \"Property named 'f1' has been declared more then once [create index IndexTwo on MyInfraOne(f1, f1)]\");\n                TryInvalidCompile(\n                    env,\n                    path,\n                    \"create index IndexTwo on MyWindowX(f1, f1)\",\n                    \"A named window or table by name 'MyWindowX' does not exist [create index IndexTwo on MyWindowX(f1, f1)]\");\n                TryInvalidCompile(\n                    env,\n                    path,\n                    \"create index IndexTwo on MyInfraOne(f1 bubu, f2)\",\n                    \"Unrecognized advanced-type index 'bubu'\");\n                TryInvalidCompile(\n                    env,\n                    path,\n                    \"create gugu index IndexTwo on MyInfraOne(f2)\",\n                    \"Invalid keyword 'gugu' in create-index encountered, expected 'unique' [create gugu index IndexTwo on MyInfraOne(f2)]\");\n                TryInvalidCompile(\n                    env,\n                    path,\n                    \"create unique index IndexTwo on MyInfraOne(f2 btree)\",\n                    \"Combination of unique index with btree (range) is not supported [create unique index IndexTwo on MyInfraOne(f2 btree)]\");\n                // invalid insert-into unique index\n                var eplCreateTwo = namedWindow\n                    ? \"@Name('create') create window MyInfraTwo#keepall as SupportBean\"\n                    : \"@Name('create') create table MyInfraTwo(TheString string primary key, IntPrimitive int primary key)\";\n                env.CompileDeploy(eplCreateTwo, path);\n                env.CompileDeploy(\n                    \"@Name('insert') insert into MyInfraTwo select TheString, IntPrimitive from SupportBean\",\n                    path);\n                env.CompileDeploy(\"create unique index I1 on MyInfraTwo(TheString)\", path);\n                env.SendEventBean(new SupportBean(\"E1\", 1));\n                try {\n                    env.SendEventBean(new SupportBean(\"E1\", 2));\n                    Assert.Fail();\n                }\n                catch (Exception ex) {\n                    var text = namedWindow\n                        ? \"Unexpected exception in statement 'create': Unique index violation, index 'I1' is a unique index and key 'E1' already exists\"\n                        : \"Unexpected exception in statement 'insert': Unique index violation, index 'I1' is a unique index and key 'E1' already exists\";\n                    Assert.AreEqual(text, ex.Message);\n                }\n                if (!namedWindow) {\n                    env.CompileDeploy(\"create table MyTable (p0 string, sumint sum(int))\", path);\n                    TryInvalidCompile(\n                        env,\n                        path,\n                        \"create index MyIndex on MyTable(p0)\",\n                        \"Tables without primary key column(s) do not allow creating an index [\");\n                }\n                env.UndeployAll();\n            }\n        }\n        internal class InfraOnSelectReUse : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public InfraOnSelectReUse(bool namedWindow)\n            {\n                this.namedWindow = namedWindow;\n            }\n            public void Run(RegressionEnvironment env)\n            {\n                var path = new RegressionPath();\n                var stmtTextCreateOne = namedWindow\n                    ? \"@Name('create') create window MyInfraONR#keepall as (f1 string, f2 int)\"\n                    : \"@Name('create') create table MyInfraONR as (f1 string primary key, f2 int primary key)\";\n                env.CompileDeploy(stmtTextCreateOne, path);\n                env.CompileDeploy(\n                    \"insert into MyInfraONR(f1, f2) select TheString, IntPrimitive from SupportBean\",\n                    path);\n                env.CompileDeploy(\"@Name('indexOne') create index MyInfraONRIndex1 on MyInfraONR(f2)\", path);\n                var fields = new [] { \"f1\",\"f2\" };\n                env.SendEventBean(new SupportBean(\"E1\", 1));\n                env.CompileDeploy(\n                        \"@Name('s0') on SupportBean_S0 S0 select nw.f1 as f1, nw.f2 as f2 from MyInfraONR nw where nw.f2 = S0.Id\",\n                        path)\n                    .AddListener(\"s0\");\n                Assert.AreEqual(namedWindow ? 1 : 2, GetIndexCount(env, namedWindow, \"create\", \"MyInfraONR\"));\n                env.SendEventBean(new SupportBean_S0(1));\n                EPAssertionUtil.AssertProps(\n                    env.Listener(\"s0\").AssertOneGetNewAndReset(),\n                    fields,\n                    new object[] {\"E1\", 1});\n                // create second identical statement\n                env.CompileDeploy(\n                    \"@Name('stmtTwo') on SupportBean_S0 S0 select nw.f1 as f1, nw.f2 as f2 from MyInfraONR nw where nw.f2 = S0.Id\",\n                    path);\n                Assert.AreEqual(namedWindow ? 1 : 2, GetIndexCount(env, namedWindow, \"create\", \"MyInfraONR\"));\n                env.UndeployModuleContaining(\"s0\");\n                Assert.AreEqual(namedWindow ? 1 : 2, GetIndexCount(env, namedWindow, \"create\", \"MyInfraONR\"));\n                env.UndeployModuleContaining(\"stmtTwo\");\n                Assert.AreEqual(namedWindow ? 1 : 2, GetIndexCount(env, namedWindow, \"create\", \"MyInfraONR\"));\n                env.UndeployModuleContaining(\"indexOne\");\n                // two-key index order test\n                env.CompileDeploy(\"@Name('cw') create window MyInfraFour#keepall as SupportBean\", path);\n                env.CompileDeploy(\"create index Idx1 on MyInfraFour (TheString, IntPrimitive)\", path);\n                env.CompileDeploy(\n                    \"on SupportBean sb select * from MyInfraFour w where w.TheString = sb.TheString and w.IntPrimitive = sb.IntPrimitive\",\n                    path);\n                env.CompileDeploy(\n                    \"on SupportBean sb select * from MyInfraFour w where w.IntPrimitive = sb.IntPrimitive and w.TheString = sb.TheString\",\n                    path);\n                Assert.AreEqual(1, SupportInfraUtil.GetIndexCountNoContext(env, true, \"cw\", \"MyInfraFour\"));\n                env.UndeployAll();\n            }\n        }\n        internal class InfraDropCreate : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public InfraDropCreate(bool namedWindow)\n            {\n                this.namedWindow = namedWindow;\n            }\n            public void Run(RegressionEnvironment env)\n            {\n                var path = new RegressionPath();\n                var stmtTextCreateOne = namedWindow\n                    ? \"@Name('create') create window MyInfraDC#keepall as (f1 string, f2 int, f3 string, f4 string)\"\n                    : \"@Name('create') create table MyInfraDC as (f1 string primary key, f2 int primary key, f3 string primary key, f4 string primary key)\";\n                env.CompileDeploy(stmtTextCreateOne, path);\n                env.CompileDeploy(\n                    \"insert into MyInfraDC(f1, f2, f3, f4) select TheString, IntPrimitive, '>'||TheString||'<', '?'||TheString||'?' from SupportBean\",\n                    path);\n                env.CompileDeploy(\"@Name('indexOne') create index MyInfraDCIndex1 on MyInfraDC(f1)\", path);\n                env.CompileDeploy(\"@Name('indexTwo') create index MyInfraDCIndex2 on MyInfraDC(f4)\", path);\n                var fields = new [] { \"f1\",\"f2\" };\n                env.SendEventBean(new SupportBean(\"E1\", -2));\n                env.UndeployModuleContaining(\"indexOne\");\n                var result = env.CompileExecuteFAF(\"select * from MyInfraDC where f1='E1'\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2}});\n                result = env.CompileExecuteFAF(\"select * from MyInfraDC where f4='?E1?'\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2}});\n                env.UndeployModuleContaining(\"indexTwo\");\n                result = env.CompileExecuteFAF(\"select * from MyInfraDC where f1='E1'\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2}});\n                result = env.CompileExecuteFAF(\"select * from MyInfraDC where f4='?E1?'\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2}});\n                path.Compileds.RemoveAt(path.Compileds.Count - 1);\n                env.CompileDeploy(\"@Name('IndexThree') create index MyInfraDCIndex2 on MyInfraDC(f4)\", path);\n                result = env.CompileExecuteFAF(\"select * from MyInfraDC where f1='E1'\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2}});\n                result = env.CompileExecuteFAF(\"select * from MyInfraDC where f4='?E1?'\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2}});\n                env.UndeployModuleContaining(\"IndexThree\");\n                Assert.AreEqual(namedWindow ? 0 : 1, GetIndexCount(env, namedWindow, \"create\", \"MyInfraDC\"));\n                env.UndeployAll();\n            }\n        }\n        internal class InfraMultipleColumnMultipleIndex : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public InfraMultipleColumnMultipleIndex(bool namedWindow)\n            {\n                this.namedWindow = namedWindow;\n            }\n            public void Run(RegressionEnvironment env)\n            {\n                var path = new RegressionPath();\n                var stmtTextCreateOne = namedWindow\n                    ? \"create window MyInfraMCMI#keepall as (f1 string, f2 int, f3 string, f4 string)\"\n                    : \"create table MyInfraMCMI as (f1 string primary key, f2 int, f3 string, f4 string)\";\n                env.CompileDeploy(stmtTextCreateOne, path);\n                env.CompileDeploy(\n                    \"insert into MyInfraMCMI(f1, f2, f3, f4) select TheString, IntPrimitive, '>'||TheString||'<', '?'||TheString||'?' from SupportBean\",\n                    path);\n                env.CompileDeploy(\"create index MyInfraMCMIIndex1 on MyInfraMCMI(f2, f3, f1)\", path);\n                env.CompileDeploy(\"create index MyInfraMCMIIndex2 on MyInfraMCMI(f2, f3)\", path);\n                env.CompileDeploy(\"create index MyInfraMCMIIndex3 on MyInfraMCMI(f2)\", path);\n                var fields = new [] { \"f1\",\"f2\",\"f3\",\"f4\" };\n                env.SendEventBean(new SupportBean(\"E1\", -2));\n                env.SendEventBean(new SupportBean(\"E2\", -4));\n                env.SendEventBean(new SupportBean(\"E3\", -3));\n                var result = env.CompileExecuteFAF(\"select * from MyInfraMCMI where f3='>E1<'\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2, \">E1<\", \"?E1?\"}});\n                result = env.CompileExecuteFAF(\"select * from MyInfraMCMI where f3='>E1<' and f2=-2\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2, \">E1<\", \"?E1?\"}});\n                result = env.CompileExecuteFAF(\"select * from MyInfraMCMI where f3='>E1<' and f2=-2 and f1='E1'\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2, \">E1<\", \"?E1?\"}});\n                result = env.CompileExecuteFAF(\"select * from MyInfraMCMI where f2=-2\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2, \">E1<\", \"?E1?\"}});\n                result = env.CompileExecuteFAF(\"select * from MyInfraMCMI where f1='E1'\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2, \">E1<\", \"?E1?\"}});\n                result = env.CompileExecuteFAF(\n                    \"select * from MyInfraMCMI where f3='>E1<' and f2=-2 and f1='E1' and f4='?E1?'\",\n                    path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2, \">E1<\", \"?E1?\"}});\n                env.UndeployAll();\n            }\n        }\n        public class InfraLateCreate : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public InfraLateCreate(bool namedWindow)\n            {\n                this.namedWindow = namedWindow;\n            }\n            public void Run(RegressionEnvironment env)\n            {\n                string[] fields = {\"TheString\", \"IntPrimitive\"};\n                var path = new RegressionPath();\n                // create infra\n                var stmtTextCreate = namedWindow\n                    ? \"@Name('Create') create window MyInfra.win:keepall() as SupportBean\"\n                    : \"@Name('Create') create table MyInfra(TheString string primary key, IntPrimitive int primary key)\";\n                env.CompileDeploy(stmtTextCreate, path).AddListener(\"Create\");\n                // create insert into\n                var stmtTextInsertOne =\n                    \"@Name('Insert') insert into MyInfra select TheString, IntPrimitive from SupportBean\";\n                env.CompileDeploy(stmtTextInsertOne, path);\n                env.SendEventBean(new SupportBean(\"A1\", 1));\n                env.SendEventBean(new SupportBean(\"B2\", 2));\n                env.SendEventBean(new SupportBean(\"B2\", 1));\n                // create index\n                var stmtTextCreateIndex = \"@Name('Index') create index MyInfra_IDX on MyInfra(TheString)\";\n                env.CompileDeploy(stmtTextCreateIndex, path);\n                env.Milestone(0);\n                // perform on-demand query\n                var result = env.CompileExecuteFAF(\n                    \"select * from MyInfra where TheString = 'B2' order by IntPrimitive asc\",\n                    path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"B2\", 1}, new object[] {\"B2\", 2}});\n                // cleanup\n                env.UndeployAll();\n                env.Milestone(1);\n            }\n        }\n        internal class InfraLateCreateSceneTwo : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public InfraLateCreateSceneTwo(bool namedWindow)\n            {\n                this.namedWindow = namedWindow;\n            }\n            public void Run(RegressionEnvironment env)\n            {\n                var path = new RegressionPath();\n                var stmtTextCreateOne = namedWindow\n                    ? \"create window MyInfraLC#keepall as (f1 string, f2 int, f3 string, f4 string)\"\n                    : \"create table MyInfraLC as (f1 string primary key, f2 int primary key, f3 string primary key, f4 string primary key)\";\n                env.CompileDeploy(stmtTextCreateOne, path);\n                env.CompileDeploy(\n                    \"insert into MyInfraLC(f1, f2, f3, f4) select TheString, IntPrimitive, '>'||TheString||'<', '?'||TheString||'?' from SupportBean\",\n                    path);\n                env.SendEventBean(new SupportBean(\"E1\", -4));\n                env.Milestone(0);\n                env.SendEventBean(new SupportBean(\"E1\", -2));\n                env.SendEventBean(new SupportBean(\"E1\", -3));\n                env.CompileDeploy(\"create index MyInfraLCIndex on MyInfraLC(f2, f3, f1)\", path);\n                var fields = new [] { \"f1\",\"f2\",\"f3\",\"f4\" };\n                env.Milestone(1);\n                var result = env.CompileExecuteFAF(\"select * from MyInfraLC where f3='>E1<' order by f2 asc\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {\n                        new object[] {\"E1\", -4, \">E1<\", \"?E1?\"}, new object[] {\"E1\", -3, \">E1<\", \"?E1?\"},\n                        new object[] {\"E1\", -2, \">E1<\", \"?E1?\"}\n                    });\n                env.UndeployAll();\n            }\n        }\n        internal class InfraCompositeIndex : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public InfraCompositeIndex(bool namedWindow)\n            {\n                this.namedWindow = namedWindow;\n            }\n            public void Run(RegressionEnvironment env)\n            {\n                var path = new RegressionPath();\n                var stmtTextCreate = namedWindow\n                    ? \"create window MyInfraCI#keepall as (f1 string, f2 int, f3 string, f4 string)\"\n                    : \"create table MyInfraCI as (f1 string primary key, f2 int, f3 string, f4 string)\";\n                env.CompileDeploy(stmtTextCreate, path);\n                var compiledWindow = path.Compileds[0];\n                env.CompileDeploy(\n                    \"insert into MyInfraCI(f1, f2, f3, f4) select TheString, IntPrimitive, '>'||TheString||'<', '?'||TheString||'?' from SupportBean\",\n                    path);\n                env.CompileDeploy(\"@Name('indexOne') create index MyInfraCIIndex on MyInfraCI(f2, f3, f1)\", path);\n                var fields = new [] { \"f1\",\"f2\",\"f3\",\"f4\" };\n                env.SendEventBean(new SupportBean(\"E1\", -2));\n                var result = env.CompileExecuteFAF(\"select * from MyInfraCI where f3='>E1<'\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2, \">E1<\", \"?E1?\"}});\n                result = env.CompileExecuteFAF(\"select * from MyInfraCI where f3='>E1<' and f2=-2\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2, \">E1<\", \"?E1?\"}});\n                result = env.CompileExecuteFAF(\"select * from MyInfraCI where f3='>E1<' and f2=-2 and f1='E1'\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n                    new[] {new object[] {\"E1\", -2, \">E1<\", \"?E1?\"}});\n                env.UndeployModuleContaining(\"indexOne\");\n                // test SODA\n                path.Clear();\n                path.Add(compiledWindow);\n                env.EplToModelCompileDeploy(\"create index MyInfraCIIndexTwo on MyInfraCI(f2, f3, f1)\", path)\n                    .UndeployAll();\n            }\n        }\n        internal class InfraWidening : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public InfraWidening(bool namedWindow)\n            {\n                this.namedWindow = namedWindow;\n            }\n            public void Run(RegressionEnvironment env)\n            {\n                var path = new RegressionPath();\n                // widen to long\n                var stmtTextCreate = namedWindow\n                    ? \"create window MyInfraW#keepall as (f1 long, f2 string)\"\n                    : \"create table MyInfraW as (f1 long primary key, f2 string primary key)\";\n                env.CompileDeploy(stmtTextCreate, path);\n                env.CompileDeploy(\n                    \"insert into MyInfraW(f1, f2) select LongPrimitive, TheString from SupportBean\",\n                    path);\n                env.CompileDeploy(\"create index MyInfraWIndex1 on MyInfraW(f1)\", path);\n                var fields = new [] { \"f1\",\"f2\" };\n                SendEventLong(env, \"E1\", 10L);\n                var result = env.CompileExecuteFAF(\"select * from MyInfraW where f1=10\", path);\n                EPAssertionUtil.AssertPropsPerRow(\n                    result.Array,\n                    fields,\n", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "length": 2245, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "3b38e1fde0c4d94fe262da07601e96359f818e86edae6271"}
{"input": "", "context": "from ctypes import Structure, c_double, c_int, byref, memmove, sizeof, c_uint32, c_uint, c_ulong\nfrom . import clibrebound\nimport math\nimport ctypes.util\nimport rebound\nimport sys\nimport random\n__all__ = [\"Particle\"]\ndef notNone(a):\n    \"\"\"\n    Returns True if array a contains at least one element that is not None. Returns False otherwise.\n    \"\"\"\n    return a.count(None) != len(a)\nclass Particle(Structure):\n    \"\"\"\n    The main REBOUND particle data structure. \n    This is an abstraction of the reb_particle structure in C.\n    The Particle fields are set at the end of simulation.py to avoid circular references.\n    \n    Attributes\n    ----------\n    x, y, z     : float       \n        Particle positions\n    vx, vy, vz  : float       \n        Particle velocities\n    ax, ay, az  : float       \n        Particle accelerations\n    m           : float       \n        Particle mass\n    r           : float       \n        Particle radius\n    lastcollision : float       \n        Last time the particle had a physical collision (if checking for collisions)\n    c           : c_void_p (C void pointer) \n        Pointer to the cell the particle is currently in (if using tree code)\n    hash          : c_uint32         \n        Particle hash (permanent identifier for the particle)\n    ap          : c_void_p (C void pointer)\n        Pointer to additional parameters one might want to add to particles\n    _sim        : POINTER(rebound.Simulation)\n        Internal pointer to the parent simulation (used in C version of REBOUND)\n    a, e, inc, Omega, omega, f\t: float\n\t    (Kepler Elements) Semi-major axis, eccentricity, inclination, longitude of the ascending node, argument of periapsis, and true anomaly respectively. The Keplerian Elements are in Jacobi coordinates (with mu = G*Minc, where Minc is the total mass from index 0 to the particle's index, inclusive).\n    \"\"\"\n    def __str__(self):\n        \"\"\" \n        Returns a string with the position and velocity of the particle.\n        \"\"\"\n        return \"<rebound.Particle object, m=%s x=%s y=%s z=%s vx=%s vy=%s vz=%s>\"%(self.m,self.x,self.y,self.z,self.vx,self.vy,self.vz)\n   \n    __repr__ = __str__\n    def __init__(self, simulation=None, particle=None, m=None, x=None, y=None, z=None, vx=None, vy=None, vz=None, primary=None, a=None, P=None, e=None, inc=None, Omega=None, omega=None, pomega=None, f=None, M=None, l=None, theta=None, T=None, r=None, date=None, variation=None, variation2=None, h=None, k=None, ix=None, iy=None, hash=0, jacobi_masses=False):\n        \"\"\"\n        Initializes a Particle structure. Rather than explicitly creating \n        a Particle structure, users may use the ``add()`` member function \n        of a Simulation instance, which will both create a Particle and \n        then add it to the simulation with one function call.\n        This function accepts either cartesian positions and velocities, \n        classical orbital elements together with the reference Particle \n        (the primary), as well as orbital parameters defined by Pal (2009).\n        For convenience, optional keywords that are not passed default \n        to zero (mass, cartesian and orbital elements). \n        Whenever initializing a particle from orbital elements, one must \n        specify either the semimajor axis or the period of the orbit.\n        \n        For classical orbital paramerers, one can specify the longitude \n        of the ascending node by passing Omega, to specify the pericenter \n        one can pass either omega or pomega (not both), and for the \n        longitude/anomaly one can pass one of f, M, l or theta.  \n        See ipython_examples/OrbitalElements.ipynb for examples.  \n        See also Murray & Dermott Solar System Dynamics for formal \n        definitions of angles in orbital mechanics.\n        All angles should be specified in radians.\n        \n        Parameters\n        ----------\n        simulation  : Simulation  \n            Simulation instance associated with this particle (Required if passing orbital elements or setting up a variation).\n        particle    : Particle, optional    \n            If a particle is passed, a copy of that particle is returned.\n            If a variational particle is initialized, then ``particle`` is \n            original particle that will be varied. \n        m           : float       \n            Mass        (Default: 0)\n        x, y, z     : float       \n            Positions in Cartesian coordinates  (Default: 0)\n        vx, vy, vz  : float       \n            Velocities in Cartesian coordinates (Default: 0)\n        primary     : Particle    \n            Primary body for converting orbital elements to cartesian (Default: center of mass of the particles in the passed simulation, i.e., this will yield Jacobi coordinates as one progressively adds particles) \n        a           : float       \n            Semimajor axis (a or P required if passing orbital elements)\n        P           : float\n            Orbital period (a or P required if passing orbital elements)\n        e           : float       \n            Eccentricity                (Default: 0)\n        inc         : float       \n            Inclination                 (Default: 0)\n        Omega       : float       \n            Longitude of ascending node (Default: 0)\n        omega       : float       \n            Argument of pericenter      (Default: 0)\n        pomega      : float       \n            Longitude of pericenter     (Default: 0)\n        f           : float       \n            True anomaly                (Default: 0)\n        M           : float       \n            Mean anomaly                (Default: 0)\n        l           : float       \n            Mean longitude              (Default: 0)\n        theta       : float       \n            True longitude              (Default: 0)\n        T           : float \n            Time of pericenter passage  \n        h           : float       \n            h variable, see Pal (2009) for a definition  (Default: 0)\n        k           : float       \n            k variable, see Pal (2009) for a definition  (Default: 0)\n        ix          : float       \n            ix variable, see Pal (2009) for a definition  (Default: 0)\n        iy           : float       \n            iy variable, see Pal (2009) for a definition  (Default: 0)\n        r           : float       \n            Particle radius (only used for collisional simulations)\n        date        : string      \n            For consistency with adding particles through horizons.  Not used here.\n        variation   : string            (Default: None)\n            Set this string to the name of an orbital parameter to initialize the particle as a variational particle.\n            Can be one of the following: m, a, e, inc, omega, Omega, f, k, h, lambda, ix, iy.\n        variation2  : string            (Default: None)\n            Set this string to the name of a second orbital parameter to initialize the particle as a second order variational particle. Only used for second order variational equations. \n            Can be one of the following: m, a, e, inc, omega, Omega, f, k, h, lambda, ix, iy.\n        hash        : c_uint32  \n            Unsigned integer identifier for particle.  Can pass an integer directly, or a string that will be converted to a hash. User is responsible for assigning unique hashes.\n        jacobi_masses: bool\n            Whether to use jacobi primary mass in orbit initialization. Particle mass will still be set to physical value (Default: False)\n        Examples\n        --------\n        >>> sim = rebound.Simulation()\n        >>> sim.add(m=1.)\n        >>> p1 = rebound.Particle(simulation=sim, m=0.001, a=0.5, e=0.01)\n        >>> p2 = rebound.Particle(simulation=sim, m=0.0, x=1., vy=1.)\n        >>> p3 = rebound.Particle(simulation=sim, m=0.001, a=1.5, h=0.1, k=0.2, l=0.1)\n        >>> p4 = rebound.Particle(simulation=sim, m=0.001, a=1.5, omega=\"uniform\")  # omega will be a random number between 0 and 2pi\n        \"\"\"        \n        if Omega == \"uniform\":\n            Omega = random.vonmisesvariate(0.,0.) \n        if omega == \"uniform\":\n            omega = random.vonmisesvariate(0.,0.) \n        if pomega == \"uniform\":\n            pomega = random.vonmisesvariate(0.,0.) \n        if f == \"uniform\":\n            f = random.vonmisesvariate(0.,0.) \n        if M == \"uniform\":\n            M = random.vonmisesvariate(0.,0.) \n        if l == \"uniform\":\n            l = random.vonmisesvariate(0.,0.) \n        if theta == \"uniform\":\n            theta = random.vonmisesvariate(0.,0.) \n        self.hash = hash # set via the property, which checks for type\n        if variation:\n            if primary is None:\n                primary = simulation.particles[0]\n            # Find particle to differenciate\n            lc = locals().copy()\n            del lc[\"self\"]\n            del lc[\"variation\"]\n            del lc[\"variation2\"]\n            if particle is None:\n                particle = Particle(**lc)\n            # First or second order?\n            if variation and variation2:\n                variation_order = 2\n            else:\n                variation_order = 1\n            # Shortcuts for variable names\n            if variation == \"l\":\n                variation = \"lambda\"\n            if variation2 == \"l\":\n                variation2 = \"lambda\"\n            if variation == \"i\":\n                variation = \"inc\"\n            if variation2 == \"i\":\n                variation2 = \"inc\"\n            variationtypes = [\"m\",\"a\",\"e\",\"inc\",\"omega\",\"Omega\",\"f\",\"k\",\"h\",\"lambda\",\"ix\",\"iy\"]\n            if variation_order==1:\n                if variation in variationtypes:\n                    method = getattr(clibrebound, 'reb_derivatives_'+variation)\n                    method.restype = Particle\n                    p = method(c_double(simulation.G), primary, particle)\n                else:\n                    raise ValueError(\"Variational particles can only be initializes using the derivatives with respect to one of the following: %s.\"%\", \".join(variationtypes))\n            elif variation_order==2:\n                if variation in variationtypes and variation2 in variationtypes:\n                    # Swap variations if needed\n                    vi1 = variationtypes.index(variation)\n                    vi2 = variationtypes.index(variation2)\n                    if vi2 < vi1:\n                        variation, variation2 = variation2, variation\n                    method = getattr(clibrebound, 'reb_derivatives_'+variation+'_'+variation2)\n                    method.restype = Particle\n                    p = method(c_double(simulation.G), primary, particle)\n                else:\n                    raise ValueError(\"Variational particles can only be initializes using the derivatives with respect to one of the following: %s.\"%\", \".join(variationtypes))\n            else:\n                raise ValueError(\"Variational equations beyond second order are not implemented.\")\n            self.m = p.m\n            self.x = p.x\n            self.y = p.y\n            self.z = p.z\n            self.vx = p.vx\n            self.vy = p.vy\n            self.vz = p.vz\n            return \n        if particle is not None:\n            memmove(byref(self), byref(particle), sizeof(self))\n            return\n        cart = [x,y,z,vx,vy,vz]\n        orbi = [primary,a,P,e,inc,Omega,omega,pomega,f,M,l,theta,T]\n        pal  = [h,k,ix,iy]\n       \n        self.ax = 0.\n        self.ay = 0.\n        self.az = 0.\n        if m is None:\n            self.m = 0.\n        else:\n            self.m = m \n        if r is None:\n            self.r = 0.\n        else:\n            self.r = r\n        self.lastcollision = 0.\n        self.c = None\n        self.ap = None\n        \n        if notNone([e,inc,omega,pomega,Omega,M,f,theta,T]) and notNone(pal):\n            raise ValueError(\"You cannot mix Pal coordinates (h,k,ix,iy) with the following orbital elements: e,inc,Omega,omega,pomega,f,M,theta,T. If a longitude/anomaly is needed in Pal coordinates, use l.\")\n        if notNone(cart) and notNone(orbi):\n                raise ValueError(\"You cannot pass cartesian coordinates and orbital elements (and/or primary) at the same time.\")\n        if notNone(orbi):\n            if simulation is None:\n                raise ValueError(\"Need to specify simulation when initializing particle with orbital elements.\")\n            if primary is None:\n                clibrebound.reb_get_com.restype = Particle\n                primary = clibrebound.reb_get_com(byref(simulation)) # this corresponds to adding in Jacobi coordinates\n            if jacobi_masses is True:\n                interior_mass = 0\n                for p in simulation.particles:\n                    interior_mass += p.m\n                # orbit conversion uses mu=G*(p.m+primary.m) so set prim.m=Mjac-m so mu=G*Mjac\n                primary.m = simulation.particles[0].m*(self.m + interior_mass)/interior_mass - self.m\n            if a is None and P is None:\n                raise ValueError(\"You need to pass either a semimajor axis or orbital period to initialize the particle using orbital elements.\")\n            if a is not None and P is not None:\n                raise ValueError(\"You can pass either the semimajor axis or orbital period, but not both.\")\n            if a is None:\n                a = (P**2*simulation.G*(primary.m + self.m)/(4.*math.pi**2))**(1./3.)\n            if notNone(pal):\n                # Pal orbital parameters\n                if h is None:\n                    h = 0.\n                if k is None:\n                    k = 0.\n                if l is None:\n                    l = 0.\n                if ix is None:\n                    ix = 0.\n                if iy is None:\n                    iy = 0.\n                if((ix*ix + iy*iy) > 4.0):\n                    raise ValueError(\"Passed (ix, iy) coordinates are not valid, squared sum exceeds 4.\")\n                clibrebound.reb_tools_pal_to_particle.restype = Particle\n                p = clibrebound.reb_tools_pal_to_particle(c_double(simulation.G), primary, c_double(self.m), c_double(a), c_double(l), c_double(k), c_double(h), c_double(ix), c_double(iy))\n            else:\n                # Normal orbital parameters\n                if e is None:\n                    e = 0.\n                if inc is None:\n                    inc = 0.\n                if Omega is None:               # we require that Omega be passed if you want to specify longitude of node\n                    Omega = 0.\n                pericenters = [omega, pomega]   # Need omega for C function. Can specify it either directly or through pomega indirectly. \n                numNones = pericenters.count(None)\n                if numNones == 0:\n                    raise ValueError(\"Can't pass both omega and pomega\")\n                if numNones == 2:                   # Neither passed.  Default to 0.\n                    omega = 0.\n                if numNones == 1:\n                    if pomega is not None:          # Only have to find omega is pomega was passed\n                        if math.cos(inc) > 0:       # inc is in range [-pi/2, pi/2] (prograde), so pomega = Omega + omega\n                            omega = pomega - Omega\n                        else:\n                            omega = Omega - pomega  # for retrograde orbits, pomega = Omega - omega\n                longitudes = [f,M,l,theta,T]      # can specify longitude through any of these four.  Need f for C function.\n                numNones = longitudes.count(None)\n                if numNones < 4:\n                    raise ValueError(\"Can only pass one longitude/anomaly in the set [f, M, l, theta, T]\")\n                if numNones == 5:                           # none of them passed.  Default to 0.\n                    f = 0.\n                if numNones == 4:                           # Only one was passed.\n                    if f is None:                           # Only have to work if f wasn't passed.\n                        if theta is not None:               # theta is next easiest\n                            if math.cos(inc) > 0:           # for prograde orbits, theta = Omega + omega + f\n                                f = theta - Omega - omega\n                            else:\n                                f = Omega - omega - theta   # for retrograde, theta = Omega - omega - f\n                        else:                               # Either M, l, or T was passed.  Will need to find M first (if not passed) to find f\n                            if l is not None:\n                                if math.cos(inc) > 0:       # for prograde orbits, l = Omega + omega + M\n                                    M = l - Omega - omega\n                                else:\n                                    M = Omega - omega - l   # for retrograde, l = Omega - omega - M\n                            else:\n                                if T is not None:           # works for both elliptical and hyperbolic orbits\n                                                            # TODO: has accuracy problems for M=n*(t-T) << 1\n                                    n = (simulation.G*(primary.m+self.m)/abs(a**3))**0.5\n                                    M = n*(simulation.t - T)\n                            clibrebound.reb_tools_M_to_f.restype = c_double\n                            f = clibrebound.reb_tools_M_to_f(c_double(e), c_double(M))\n                err = c_int()\n                clibrebound.reb_tools_orbit_to_particle_err.restype = Particle\n                p = clibrebound.reb_tools_orbit_to_particle_err(c_double(simulation.G), primary, c_double(self.m), c_double(a), c_double(e), c_double(inc), c_double(Omega), c_double(omega), c_double(f), byref(err))\n                if err.value == 1:\n                    raise ValueError(\"Can't set e exactly to 1.\")\n                if err.value == 2:\n                    raise ValueError(\"Eccentricity must be greater than or equal to zero.\")\n                if err.value == 3:\n                    raise ValueError(\"Bound orbit (a > 0) must have e < 1.\")\n                if err.value == 4:\n                    raise ValueError(\"Unbound orbit (a < 0) must have e > 1.\")\n                if err.value == 5:\n                    raise ValueError(\"Unbound orbit can't have f beyond the range allowed by the asymptotes set by the hyperbola.\")\n                if err.value == 6:\n                    raise ValueError(\"Primary has no mass.\")\n            self.x = p.x\n            self.y = p.y\n            self.z = p.z\n            self.vx = p.vx\n            self.vy = p.vy\n            self.vz = p.vz\n        else:\n            if x is None:\n                x = 0.\n            if y is None:\n                y = 0.\n            if z is None:\n                z = 0.\n            if vx is None:\n                vx = 0.\n            if vy is None:\n                vy = 0.\n            if vz is None:\n                vz = 0.\n            self.x = x\n            self.y = y\n            self.z = z\n            self.vx = vx\n            self.vy = vy\n            self.vz = vz\n        \n    def copy(self):\n        \"\"\"\n        Returns a deep copy of the particle. The particle is not added to any simulation by default.\n        \"\"\"\n        np = Particle()\n        memmove(byref(np), byref(self), sizeof(self))\n        return np\n    def calculate_orbit(self, primary=None, G=None):\n        \"\"\" \n        Returns a rebound.Orbit object with the keplerian orbital elements\n        corresponding to the particle around the passed primary\n        (rebound.Particle) If no primary is passed, defaults to Jacobi coordinates\n        (with mu = G*Minc, where Minc is the total mass from index 0 to the particle's index, inclusive). \n        \n        Examples\n        --------\n        \n        >>> sim = rebound.Simulation()\n        >>> sim.add(m=1.)\n        >>> sim.add(x=1.,vy=1.)\n        >>> orbit = sim.particles[1].calculate_orbit(sim.particles[0])\n        >>> print(orbit.e) # gives the eccentricity\n        Parameters\n        ----------\n        primary : rebound.Particle\n            Central body (Optional. Default uses Jacobi coordinates)\n        G : float\n            Gravitational constant (Optional. Default takes G from simulation in which particle is in)\n        \n        Returns\n        -------\n        A rebound.Orbit object \n        \"\"\"\n        if not self._sim:\n            # Particle not in a simulation\n            if primary is None:\n                raise ValueError(\"Particle does not belong to any simulation and no primary given. Cannot calculate orbit.\")\n            if G is None:\n                raise ValueError(\"Particle does not belong to any simulation and G not given. Cannot calculate orbit.\")\n            else:\n                G = c_double(G)\n        else:\n            # First check whether this is particles[0]\n            clibrebound.reb_get_particle_index.restype = c_int\n            index = clibrebound.reb_get_particle_index(byref(self)) # first check this isn't particles[0]\n            if index == 0 and primary is None:\n                raise ValueError(\"Orbital elements for particle[0] not implemented unless primary is provided\")\n            if primary is None:    # Use default, i.e., Jacobi coordinates\n                clibrebound.reb_get_jacobi_com.restype = Particle   # now return jacobi center of mass\n                primary = clibrebound.reb_get_jacobi_com(byref(self))\n            G = c_double(self._sim.contents.G)\n        \n        err = c_int()\n        clibrebound.reb_tools_particle_to_orbit_err.restype = rebound.Orbit\n        o = clibrebound.reb_tools_particle_to_orbit_err(G, self, primary, byref(err))\n        if err.value == 1:\n            raise ValueError(\"Primary has no mass.\")\n        if err.value == 2:\n            raise ValueError(\"Particle and primary positions are the same.\")\n        return o\n    \n    def sample_orbit(self, Npts=100, primary=None, trailing=True, timespan=None, useTrueAnomaly=True):\n        \"\"\"\n        Returns a nested list of xyz positions along the osculating orbit of the particle. \n        If primary is not passed, returns xyz positions along the Jacobi osculating orbit\n        (with mu = G*Minc, where Minc is the total mass from index 0 to the particle's index, inclusive). \n        Parameters\n        ----------\n        Npts    : int, optional  \n            Number of points along the orbit to return  (default: 100)\n        primary : rebound.Particle, optional\n            Primary to use for the osculating orbit (default: Jacobi center of mass)\n        trailing: bool, optional\n            Whether to return points stepping backwards in time (True) or forwards (False). (default: True)\n        timespan: float, optional    \n            Return points (for the osculating orbit) from the current position to timespan (forwards or backwards in time depending on trailing keyword). \n            Defaults to the orbital period for bound orbits, and to the rough time it takes the orbit to move by the current distance from the primary for a hyperbolic orbit. Implementation currently only supports this option if useTrueAnomaly=False.\n        useTrueAnomaly: bool, optional\n            Will sample equally spaced points in true anomaly if True, otherwise in mean anomaly.\n            Latter might be better for hyperbolic orbits, where true anomaly can stay near the limiting value for a long time, and then switch abruptly at pericenter. (Default: True)\n        \"\"\"\n        pts = []\n        if primary is None:\n            primary = self.jacobi_com\n        o = self.calculate_orbit(primary=primary)\n        if timespan is None:\n            if o.a < 0.: # hyperbolic orbit\n                timespan = 2*math.pi*o.d/o.v # rough time to cross display box\n            else:\n                timespan = o.P\n        \n        lim_phase = abs(o.n)*timespan # n is negative for hyperbolic orbits\n        if trailing is True:\n            lim_phase *= -1 # sample phase backwards from current value\n        phase = [lim_phase*i/(Npts-1) for i in range(Npts)]\n        for i,ph in enumerate(phase):\n            if useTrueAnomaly is True:\n                newp = Particle(a=o.a, f=o.f+ph, inc=o.inc, omega=o.omega, Omega=o.Omega, e=o.e, m=self.m, primary=primary, simulation=self._sim.contents)\n            else: \n                newp = Particle(a=o.a, M=o.M+ph, inc=o.inc, omega=o.omega, Omega=o.Omega, e=o.e, m=self.m, primary=primary, simulation=self._sim.contents)\n            pts.append(newp.xyz)\n        \n        return pts\n    # Simple operators for particles.\n    \n    def __add__(self, other):\n        if not isinstance(other, Particle):\n            return NotImplemented \n        c = self.copy()\n        return c.__iadd__(other)\n    \n    def __iadd__(self, other):\n        if not isinstance(other, Particle):\n            return NotImplemented \n        clibrebound.reb_particle_iadd(byref(self), byref(other))\n        return self\n    \n    def __sub__(self, other):\n        if not isinstance(other, Particle):\n            return NotImplemented \n        c = self.copy()\n        return c.__isub__(other)\n    \n    def __isub__(self, other):\n        if not isinstance(other, Particle):\n            return NotImplemented \n        clibrebound.reb_particle_isub(byref(self), byref(other))\n        return self\n    \n    def __mul__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__imul__(other)\n    \n    def __imul__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        clibrebound.reb_particle_imul(byref(self), c_double(other))\n        return self\n    \n    def __rmul__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n", "answers": ["        c = self.copy()"], "length": 2793, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "87167f35efb4266c3e3919ffabd45083b35092d703ea2b45"}
{"input": "", "context": "# -*- coding: utf-8 -*-\nimport copy\nimport re\nimport simplejson\nimport werkzeug\nfrom lxml import etree, html\nfrom openerp import SUPERUSER_ID\nfrom openerp.addons.website.models import website\nfrom openerp.http import request\nfrom openerp.osv import osv, fields\nclass view(osv.osv):\n    _inherit = \"ir.ui.view\"\n    _columns = {\n        'page': fields.boolean(\"Whether this view is a web page template (complete)\"),\n        'website_meta_title': fields.char(\"Website meta title\", size=70, translate=True),\n        'website_meta_description': fields.text(\"Website meta description\", size=160, translate=True),\n        'website_meta_keywords': fields.char(\"Website meta keywords\", translate=True),\n    }\n    _defaults = {\n        'page': False,\n    }\n    def _view_obj(self, cr, uid, view_id, context=None):\n        if isinstance(view_id, basestring):\n            return self.pool['ir.model.data'].xmlid_to_object(\n                cr, uid, view_id, raise_if_not_found=True, context=context\n            )\n        elif isinstance(view_id, (int, long)):\n            return self.browse(cr, uid, view_id, context=context)\n        # assume it's already a view object (WTF?)\n        return view_id\n    # Returns all views (called and inherited) related to a view\n    # Used by translation mechanism, SEO and optional templates\n    def _views_get(self, cr, uid, view_id, options=True, context=None, root=True):\n        \"\"\" For a given view ``view_id``, should return:\n        * the view itself\n        * all views inheriting from it, enabled or not\n          - but not the optional children of a non-enabled child\n        * all views called from it (via t-call)\n        \"\"\"\n        try:\n            view = self._view_obj(cr, uid, view_id, context=context)\n        except ValueError:\n            # Shall we log that ?\n            return []\n        while root and view.inherit_id:\n            view = view.inherit_id\n        result = [view]\n        node = etree.fromstring(view.arch)\n        for child in node.xpath(\"//t[@t-call]\"):\n            try:\n                called_view = self._view_obj(cr, uid, child.get('t-call'), context=context)\n            except ValueError:\n                continue\n            if called_view not in result:\n                result += self._views_get(cr, uid, called_view, options=options, context=context)\n        extensions = view.inherit_children_ids\n        if not options:\n            # only active children\n            extensions = (v for v in view.inherit_children_ids\n                          if v.application in ('always', 'enabled'))\n        # Keep options in a deterministic order regardless of their applicability\n        for extension in sorted(extensions, key=lambda v: v.id):\n            for r in self._views_get(\n                    cr, uid, extension,\n                    # only return optional grandchildren if this child is enabled\n                    options=extension.application in ('always', 'enabled'),\n                    context=context, root=False):\n                if r not in result:\n                    result.append(r)\n        return result\n    def extract_embedded_fields(self, cr, uid, arch, context=None):\n        return arch.xpath('//*[@data-oe-model != \"ir.ui.view\"]')\n    def save_embedded_field(self, cr, uid, el, context=None):\n        Model = self.pool[el.get('data-oe-model')]\n        field = el.get('data-oe-field')\n        column = Model._all_columns[field].column\n        converter = self.pool['website.qweb'].get_converter_for(\n            el.get('data-oe-type'))\n        value = converter.from_html(cr, uid, Model, column, el)\n        if value is not None:\n            # TODO: batch writes?\n            Model.write(cr, uid, [int(el.get('data-oe-id'))], {\n                field: value\n            }, context=context)\n    def to_field_ref(self, cr, uid, el, context=None):\n        # filter out meta-information inserted in the document\n        attributes = dict((k, v) for k, v in el.items()\n                          if not k.startswith('data-oe-'))\n        attributes['t-field'] = el.get('data-oe-expression')\n        out = html.html_parser.makeelement(el.tag, attrib=attributes)\n        out.tail = el.tail\n        return out\n    def replace_arch_section(self, cr, uid, view_id, section_xpath, replacement, context=None):\n        # the root of the arch section shouldn't actually be replaced as it's\n        # not really editable itself, only the content truly is editable.\n        [view] = self.browse(cr, uid, [view_id], context=context)\n        arch = etree.fromstring(view.arch.encode('utf-8'))\n        # => get the replacement root\n        if not section_xpath:\n            root = arch\n        else:\n            # ensure there's only one match\n            [root] = arch.xpath(section_xpath)\n        root.text = replacement.text\n        root.tail = replacement.tail\n        # replace all children\n        del root[:]\n        for child in replacement:\n            root.append(copy.deepcopy(child))\n        return arch\n    def render(self, cr, uid, id_or_xml_id, values=None, engine='ir.qweb', context=None):\n        if request and getattr(request, 'website_enabled', False):\n            engine='website.qweb'\n            if isinstance(id_or_xml_id, list):\n                id_or_xml_id = id_or_xml_id[0]\n            if not context:\n                context = {}\n            qcontext = dict(\n                context.copy(),\n                website=request.website,\n                url_for=website.url_for,\n                slug=website.slug,\n                res_company=request.website.company_id,\n                user_id=self.pool.get(\"res.users\").browse(cr, uid, uid),\n                translatable=context.get('lang') != request.website.default_lang_code,\n                editable=request.website.is_publisher(),\n                menu_data=self.pool['ir.ui.menu'].load_menus_root(cr, uid, context=context) if request.website.is_user() else None,\n            )\n            # add some values\n            if values:\n                qcontext.update(values)\n            # in edit mode ir.ui.view will tag nodes\n            context['inherit_branding'] = qcontext.get('editable', False)\n            view_obj = request.website.get_template(id_or_xml_id)\n            if 'main_object' not in qcontext:\n                qcontext['main_object'] = view_obj\n            values = qcontext\n        return super(view, self).render(cr, uid, id_or_xml_id, values=values, engine=engine, context=context)\n    def _pretty_arch(self, arch):\n        # remove_blank_string does not seem to work on HTMLParser, and\n        # pretty-printing with lxml more or less requires stripping\n        # whitespace: http://lxml.de/FAQ.html#why-doesn-t-the-pretty-print-option-reformat-my-xml-output\n        # so serialize to XML, parse as XML (remove whitespace) then serialize\n        # as XML (pretty print)\n        arch_no_whitespace = etree.fromstring(\n            etree.tostring(arch, encoding='utf-8'),\n            parser=etree.XMLParser(encoding='utf-8', remove_blank_text=True))\n        return etree.tostring(\n            arch_no_whitespace, encoding='unicode', pretty_print=True)\n    def save(self, cr, uid, res_id, value, xpath=None, context=None):\n        \"\"\" Update a view section. The view section may embed fields to write\n        :param str model:\n        :param int res_id:\n        :param str xpath: valid xpath to the tag to replace\n        \"\"\"\n        res_id = int(res_id)\n        arch_section = html.fromstring(\n            value, parser=html.HTMLParser(encoding='utf-8'))\n        if xpath is None:\n            # value is an embedded field on its own, not a view section\n            self.save_embedded_field(cr, uid, arch_section, context=context)\n            return\n        for el in self.extract_embedded_fields(cr, uid, arch_section, context=context):\n            self.save_embedded_field(cr, uid, el, context=context)\n            # transform embedded field back to t-field\n            el.getparent().replace(el, self.to_field_ref(cr, uid, el, context=context))\n        arch = self.replace_arch_section(cr, uid, res_id, xpath, arch_section, context=context)\n        self.write(cr, uid, res_id, {\n            'arch': self._pretty_arch(arch)\n        }, context=context)\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "length": 739, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "f1012042daf639a1e2d064433991b95b1734be709802fbc1"}
{"input": "", "context": "/*\n * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage javax.swing.plaf.basic;\nimport java.io.*;\nimport java.awt.*;\nimport java.net.URL;\nimport javax.accessibility.AccessibleContext;\nimport javax.swing.*;\nimport javax.swing.text.*;\nimport javax.swing.text.html.*;\nimport sun.swing.SwingUtilities2;\n/**\n * Support for providing html views for the swing components.\n * This translates a simple html string to a javax.swing.text.View\n * implementation that can render the html and provide the necessary\n * layout semantics.\n *\n * @author  Timothy Prinzing\n * @since 1.3\n */\npublic class BasicHTML {\n    /**\n     * Create an html renderer for the given component and\n     * string of html.\n     *\n     * @param c a component\n     * @param html an HTML string\n     * @return an HTML renderer\n     */\n    public static View createHTMLView(JComponent c, String html) {\n        BasicEditorKit kit = getFactory();\n        Document doc = kit.createDefaultDocument(c.getFont(),\n                                                 c.getForeground());\n        Object base = c.getClientProperty(documentBaseKey);\n        if (base instanceof URL) {\n            ((HTMLDocument)doc).setBase((URL)base);\n        }\n        Reader r = new StringReader(html);\n        try {\n            kit.read(r, doc, 0);\n        } catch (Throwable e) {\n        }\n        ViewFactory f = kit.getViewFactory();\n        View hview = f.create(doc.getDefaultRootElement());\n        View v = new Renderer(c, f, hview);\n        return v;\n    }\n    /**\n     * Returns the baseline for the html renderer.\n     *\n     * @param view the View to get the baseline for\n     * @param w the width to get the baseline for\n     * @param h the height to get the baseline for\n     * @throws IllegalArgumentException if width or height is &lt; 0\n     * @return baseline or a value &lt; 0 indicating there is no reasonable\n     *                  baseline\n     * @see java.awt.FontMetrics\n     * @see javax.swing.JComponent#getBaseline(int,int)\n     * @since 1.6\n     */\n    public static int getHTMLBaseline(View view, int w, int h) {\n        if (w < 0 || h < 0) {\n            throw new IllegalArgumentException(\n                    \"Width and height must be >= 0\");\n        }\n        if (view instanceof Renderer) {\n            return getBaseline(view.getView(0), w, h);\n        }\n        return -1;\n    }\n    /**\n     * Gets the baseline for the specified component.  This digs out\n     * the View client property, and if non-null the baseline is calculated\n     * from it.  Otherwise the baseline is the value <code>y + ascent</code>.\n     */\n    static int getBaseline(JComponent c, int y, int ascent,\n                                  int w, int h) {\n        View view = (View)c.getClientProperty(BasicHTML.propertyKey);\n        if (view != null) {\n            int baseline = getHTMLBaseline(view, w, h);\n            if (baseline < 0) {\n                return baseline;\n            }\n            return y + baseline;\n        }\n        return y + ascent;\n    }\n    /**\n     * Gets the baseline for the specified View.\n     */\n    static int getBaseline(View view, int w, int h) {\n        if (hasParagraph(view)) {\n            view.setSize(w, h);\n            return getBaseline(view, new Rectangle(0, 0, w, h));\n        }\n        return -1;\n    }\n    private static int getBaseline(View view, Shape bounds) {\n        if (view.getViewCount() == 0) {\n            return -1;\n        }\n        AttributeSet attributes = view.getElement().getAttributes();\n        Object name = null;\n        if (attributes != null) {\n            name = attributes.getAttribute(StyleConstants.NameAttribute);\n        }\n        int index = 0;\n        if (name == HTML.Tag.HTML && view.getViewCount() > 1) {\n            // For html on widgets the header is not visible, skip it.\n            index++;\n        }\n        bounds = view.getChildAllocation(index, bounds);\n        if (bounds == null) {\n            return -1;\n        }\n        View child = view.getView(index);\n        if (view instanceof javax.swing.text.ParagraphView) {\n            Rectangle rect;\n            if (bounds instanceof Rectangle) {\n                rect = (Rectangle)bounds;\n            }\n            else {\n                rect = bounds.getBounds();\n            }\n            return rect.y + (int)(rect.height *\n                                  child.getAlignment(View.Y_AXIS));\n        }\n        return getBaseline(child, bounds);\n    }\n    private static boolean hasParagraph(View view) {\n        if (view instanceof javax.swing.text.ParagraphView) {\n            return true;\n        }\n        if (view.getViewCount() == 0) {\n            return false;\n        }\n        AttributeSet attributes = view.getElement().getAttributes();\n        Object name = null;\n        if (attributes != null) {\n            name = attributes.getAttribute(StyleConstants.NameAttribute);\n        }\n        int index = 0;\n        if (name == HTML.Tag.HTML && view.getViewCount() > 1) {\n            // For html on widgets the header is not visible, skip it.\n            index = 1;\n        }\n        return hasParagraph(view.getView(index));\n    }\n    /**\n     * Check the given string to see if it should trigger the\n     * html rendering logic in a non-text component that supports\n     * html rendering.\n     *\n     * @param s a text\n     * @return {@code true} if the given string should trigger the\n     *         html rendering logic in a non-text component\n     */\n    public static boolean isHTMLString(String s) {\n        if (s != null) {\n            if ((s.length() >= 6) && (s.charAt(0) == '<') && (s.charAt(5) == '>')) {\n                String tag = s.substring(1,5);\n                return tag.equalsIgnoreCase(propertyKey);\n            }\n        }\n        return false;\n    }\n    /**\n     * Stash the HTML render for the given text into the client\n     * properties of the given JComponent. If the given text is\n     * <em>NOT HTML</em> the property will be cleared of any\n     * renderer.\n     * <p>\n     * This method is useful for ComponentUI implementations\n     * that are static (i.e. shared) and get their state\n     * entirely from the JComponent.\n     *\n     * @param c a component\n     * @param text a text\n     */\n    public static void updateRenderer(JComponent c, String text) {\n        View value = null;\n        View oldValue = (View)c.getClientProperty(BasicHTML.propertyKey);\n        Boolean htmlDisabled = (Boolean) c.getClientProperty(htmlDisable);\n        if (htmlDisabled != Boolean.TRUE && BasicHTML.isHTMLString(text)) {\n", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "length": 980, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "79f8206b5d5b0bfc5beeb608d3ce99dca25c4d4a1db02f09"}
{"input": "", "context": "import os\nimport pytest\nfrom six import BytesIO\nfrom ..sourcefile import SourceFile, read_script_metadata, js_meta_re, python_meta_re\ndef create(filename, contents=b\"\"):\n    assert isinstance(contents, bytes)\n    return SourceFile(\"/\", filename, \"/\", contents=contents)\ndef items(s):\n    item_type, items = s.manifest_items()\n    if item_type == \"support\":\n        return []\n    else:\n        return [(item_type, item.url) for item in items]\n@pytest.mark.parametrize(\"rel_path\", [\n    \".gitignore\",\n    \".travis.yml\",\n    \"MANIFEST.json\",\n    \"tools/test.html\",\n    \"resources/test.html\",\n    \"common/test.html\",\n    \"support/test.html\",\n    \"css21/archive/test.html\",\n    \"work-in-progress/test.html\",\n    \"conformance-checkers/test.html\",\n    \"conformance-checkers/README.md\",\n    \"conformance-checkers/html/Makefile\",\n    \"conformance-checkers/html/test.html\",\n    \"foo/tools/test.html\",\n    \"foo/resources/test.html\",\n    \"foo/support/test.html\",\n    \"foo/test-support.html\",\n    \"css/common/test.html\",\n    \"css/CSS2/archive/test.html\",\n    \"css/work-in-progress/test.html\",\n])\ndef test_name_is_non_test(rel_path):\n    s = create(rel_path)\n    assert s.name_is_non_test or s.name_is_conformance_support\n    assert not s.content_is_testharness\n    assert items(s) == []\n@pytest.mark.parametrize(\"rel_path\", [\n    \"foo/common/test.html\",\n    \"foo/conformance-checkers/test.html\",\n    \"foo/_certs/test.html\",\n    \"foo/css21/archive/test.html\",\n    \"foo/work-in-progress/test.html\",\n    \"foo/CSS2/archive/test.html\",\n    \"css/css21/archive/test.html\",\n])\ndef test_not_name_is_non_test(rel_path):\n    s = create(rel_path)\n    assert not (s.name_is_non_test or s.name_is_conformance_support)\n    # We aren't actually asserting what type of test these are, just their\n    # name doesn't prohibit them from being tests.\n@pytest.mark.parametrize(\"rel_path\", [\n    \"html/test-manual.html\",\n    \"html/test-manual.xhtml\",\n    \"html/test-manual.https.html\",\n    \"html/test-manual.https.xhtml\"\n])\ndef test_name_is_manual(rel_path):\n    s = create(rel_path)\n    assert not s.name_is_non_test\n    assert s.name_is_manual\n    assert not s.content_is_testharness\n    assert items(s) == [(\"manual\", \"/\" + rel_path)]\n@pytest.mark.parametrize(\"rel_path\", [\n    \"html/test-visual.html\",\n    \"html/test-visual.xhtml\",\n])\ndef test_name_is_visual(rel_path):\n    s = create(rel_path)\n    assert not s.name_is_non_test\n    assert s.name_is_visual\n    assert not s.content_is_testharness\n    assert items(s) == [(\"visual\", \"/\" + rel_path)]\n@pytest.mark.parametrize(\"rel_path\", [\n    \"css-namespaces-3/reftest/ref-lime-1.xml\",\n    \"css21/reference/pass_if_box_ahem.html\",\n    \"css21/csswg-issues/submitted/css2.1/reference/ref-green-box-100x100.xht\",\n    \"selectors-3/selectors-empty-001-ref.xml\",\n    \"css21/text/text-indent-wrap-001-notref-block-margin.xht\",\n    \"css21/text/text-indent-wrap-001-notref-block-margin.xht\",\n    \"css21/css-e-notation-ref-1.html\",\n    \"css21/floats/floats-placement-vertical-004-ref2.xht\",\n    \"css21/box/rtl-linebreak-notref1.xht\",\n    \"css21/box/rtl-linebreak-notref2.xht\",\n    \"2dcontext/drawing-images-to-the-canvas/drawimage_html_image_5_ref.html\",\n    \"2dcontext/line-styles/lineto_ref.html\",\n    \"html/rendering/non-replaced-elements/the-fieldset-element-0/ref.html\"\n])\ndef test_name_is_reference(rel_path):\n    s = create(rel_path)\n    assert not s.name_is_non_test\n    assert s.name_is_reference\n    assert not s.content_is_testharness\n    assert items(s) == []\ndef test_worker():\n    s = create(\"html/test.worker.js\")\n    assert not s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert s.name_is_worker\n    assert not s.name_is_window\n    assert not s.name_is_reference\n    assert not s.content_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/html/test.worker.html\",\n    ]\n    assert len(items) == len(expected_urls)\n    for item, url in zip(items, expected_urls):\n        assert item.url == url\n        assert item.timeout is None\ndef test_window():\n    s = create(\"html/test.window.js\")\n    assert not s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert not s.name_is_worker\n    assert s.name_is_window\n    assert not s.name_is_reference\n    assert not s.content_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/html/test.window.html\",\n    ]\n    assert len(items) == len(expected_urls)\n    for item, url in zip(items, expected_urls):\n        assert item.url == url\n        assert item.timeout is None\ndef test_worker_long_timeout():\n    contents = b\"\"\"// META: timeout=long\nimportScripts('/resources/testharness.js')\ntest()\"\"\"\n    metadata = list(read_script_metadata(BytesIO(contents), js_meta_re))\n    assert metadata == [(b\"timeout\", b\"long\")]\n    s = create(\"html/test.worker.js\", contents=contents)\n    assert s.name_is_worker\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    for item in items:\n        assert item.timeout == \"long\"\ndef test_window_long_timeout():\n    contents = b\"\"\"// META: timeout=long\ntest()\"\"\"\n    metadata = list(read_script_metadata(BytesIO(contents), js_meta_re))\n    assert metadata == [(b\"timeout\", b\"long\")]\n    s = create(\"html/test.window.js\", contents=contents)\n    assert s.name_is_window\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    for item in items:\n        assert item.timeout == \"long\"\ndef test_python_long_timeout():\n    contents = b\"\"\"# META: timeout=long\n\"\"\"\n    metadata = list(read_script_metadata(BytesIO(contents),\n                                         python_meta_re))\n    assert metadata == [(b\"timeout\", b\"long\")]\n    s = create(\"webdriver/test.py\", contents=contents)\n    assert s.name_is_webdriver\n    item_type, items = s.manifest_items()\n    assert item_type == \"wdspec\"\n    for item in items:\n        assert item.timeout == \"long\"\ndef test_multi_global():\n    s = create(\"html/test.any.js\")\n    assert not s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert s.name_is_multi_global\n    assert not s.name_is_worker\n    assert not s.name_is_reference\n    assert not s.content_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/html/test.any.html\",\n        \"/html/test.any.worker.html\",\n    ]\n    assert len(items) == len(expected_urls)\n    for item, url in zip(items, expected_urls):\n        assert item.url == url\n        assert item.timeout is None\ndef test_multi_global_long_timeout():\n    contents = b\"\"\"// META: timeout=long\nimportScripts('/resources/testharness.js')\ntest()\"\"\"\n    metadata = list(read_script_metadata(BytesIO(contents), js_meta_re))\n    assert metadata == [(b\"timeout\", b\"long\")]\n    s = create(\"html/test.any.js\", contents=contents)\n    assert s.name_is_multi_global\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    for item in items:\n        assert item.timeout == \"long\"\n@pytest.mark.parametrize(\"input,expected\", [\n    (b\"\"\"//META: foo=bar\\n\"\"\", [(b\"foo\", b\"bar\")]),\n    (b\"\"\"// META: foo=bar\\n\"\"\", [(b\"foo\", b\"bar\")]),\n    (b\"\"\"//  META: foo=bar\\n\"\"\", [(b\"foo\", b\"bar\")]),\n    (b\"\"\"\\n// META: foo=bar\\n\"\"\", []),\n    (b\"\"\" // META: foo=bar\\n\"\"\", []),\n    (b\"\"\"// META: foo=bar\\n// META: baz=quux\\n\"\"\", [(b\"foo\", b\"bar\"), (b\"baz\", b\"quux\")]),\n    (b\"\"\"// META: foo=bar\\n\\n// META: baz=quux\\n\"\"\", [(b\"foo\", b\"bar\")]),\n    (b\"\"\"// META: foo=bar\\n// Start of the test\\n// META: baz=quux\\n\"\"\", [(b\"foo\", b\"bar\")]),\n    (b\"\"\"// META:\\n\"\"\", []),\n    (b\"\"\"// META: foobar\\n\"\"\", []),\n])\ndef test_script_metadata(input, expected):\n    metadata = read_script_metadata(BytesIO(input), js_meta_re)\n    assert list(metadata) == expected\n@pytest.mark.parametrize(\"ext\", [\"htm\", \"html\"])\ndef test_testharness(ext):\n    content = b\"<script src=/resources/testharness.js></script>\"\n    filename = \"html/test.\" + ext\n", "answers": ["    s = create(filename, content)"], "length": 633, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "d15c99c3eb39bc99358e7e6768ef9b03d171255c2c8c033a"}
{"input": "", "context": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing NHibernate.Cfg.MappingSchema;\nusing NHibernate.Persister.Collection;\nusing NHibernate.UserTypes;\nnamespace NHibernate.Mapping.ByCode.Impl\n{\n\tpublic class MapMapper : IMapPropertiesMapper\n\t{\n\t\tprivate readonly IAccessorPropertyMapper entityPropertyMapper;\n\t\tprivate readonly KeyMapper keyMapper;\n\t\tprivate readonly HbmMapping mapDoc;\n\t\tprivate readonly HbmMap mapping;\n\t\tprivate ICacheMapper cacheMapper;\n\t\tpublic MapMapper(System.Type ownerType, System.Type keyType, System.Type valueType, HbmMap mapping, HbmMapping mapDoc)\n\t\t\t: this(ownerType, keyType, valueType, new AccessorPropertyMapper(ownerType, mapping.Name, x => mapping.access = x), mapping, mapDoc) {}\n\t\tpublic MapMapper(System.Type ownerType, System.Type keyType, System.Type valueType, IAccessorPropertyMapper accessorMapper, HbmMap mapping, HbmMapping mapDoc)\n\t\t{\n\t\t\tif (ownerType == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(\"ownerType\");\n\t\t\t}\n\t\t\tif (keyType == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(\"keyType\");\n\t\t\t}\n\t\t\tif (valueType == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(\"valueType\");\n\t\t\t}\n\t\t\tif (mapping == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(\"mapping\");\n\t\t\t}\n\t\t\tOwnerType = ownerType;\n\t\t\tKeyType = keyType;\n\t\t\tValueType = valueType;\n\t\t\tthis.mapping = mapping;\n\t\t\tthis.mapDoc = mapDoc;\n\t\t\tif (mapping.Key == null)\n\t\t\t{\n\t\t\t\tmapping.key = new HbmKey();\n\t\t\t}\n\t\t\tkeyMapper = new KeyMapper(ownerType, mapping.Key);\n\t\t\tif (KeyType.IsValueType || KeyType == typeof (string))\n\t\t\t{\n\t\t\t\tmapping.Item = new HbmMapKey {type = KeyType.GetNhTypeName()};\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmapping.Item = new HbmMapKeyManyToMany {@class = KeyType.GetShortClassName(mapDoc)};\n\t\t\t}\n\t\t\tentityPropertyMapper = accessorMapper;\n\t\t}\n\t\tpublic System.Type OwnerType { get; private set; }\n\t\tpublic System.Type KeyType { get; private set; }\n\t\tpublic System.Type ValueType { get; private set; }\n\t\t#region Implementation of IMapPropertiesMapper\n\t\tpublic void Inverse(bool value)\n\t\t{\n\t\t\tmapping.inverse = value;\n\t\t}\n\t\tpublic void Mutable(bool value)\n\t\t{\n\t\t\tmapping.mutable = value;\n\t\t}\n\t\tpublic void Where(string sqlWhereClause)\n\t\t{\n\t\t\tmapping.where = sqlWhereClause;\n\t\t}\n\t\tpublic void BatchSize(int value)\n\t\t{\n\t\t\tif (value > 0)\n\t\t\t{\n\t\t\t\tmapping.batchsize = value;\n\t\t\t\tmapping.batchsizeSpecified = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmapping.batchsize = 0;\n\t\t\t\tmapping.batchsizeSpecified = false;\n\t\t\t}\n\t\t}\n\t\tpublic void Lazy(CollectionLazy collectionLazy)\n\t\t{\n\t\t\tmapping.lazySpecified = true;\n\t\t\tswitch (collectionLazy)\n\t\t\t{\n\t\t\t\tcase CollectionLazy.Lazy:\n\t\t\t\t\tmapping.lazy = HbmCollectionLazy.True;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CollectionLazy.NoLazy:\n\t\t\t\t\tmapping.lazy = HbmCollectionLazy.False;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CollectionLazy.Extra:\n\t\t\t\t\tmapping.lazy = HbmCollectionLazy.Extra;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tpublic void Key(Action<IKeyMapper> keyMapping)\n\t\t{\n\t\t\tkeyMapping(keyMapper);\n\t\t}\n\t\tpublic void OrderBy(MemberInfo property)\n\t\t{\n\t\t\t// TODO: read the mapping of the element to know the column of the property (second-pass)\n\t\t\tmapping.orderby = property.Name;\n\t\t}\n\t\tpublic void OrderBy(string sqlOrderByClause)\n\t\t{\n\t\t\tmapping.orderby = sqlOrderByClause;\n\t\t}\n\t\tpublic void Sort()\n\t\t{\n\t\t\tmapping.sort = \"natural\";\n\t\t}\n\t\tpublic void Sort<TComparer>() {}\n\t\tpublic void Cascade(Cascade cascadeStyle)\n\t\t{\n\t\t\tmapping.cascade = cascadeStyle.ToCascadeString();\n\t\t}\n\t\tpublic void Type<TCollection>() where TCollection : IUserCollectionType\n\t\t{\n\t\t\tmapping.collectiontype = typeof (TCollection).AssemblyQualifiedName;\n\t\t}\n\t\tpublic void Type(System.Type collectionType)\n\t\t{\n\t\t\tif (collectionType == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(\"collectionType\");\n\t\t\t}\n\t\t\tif (!typeof (IUserCollectionType).IsAssignableFrom(collectionType))\n\t\t\t{\n\t\t\t\tthrow new ArgumentOutOfRangeException(\"collectionType\",\n\t\t\t\t                                      string.Format(\n\t\t\t\t                                      \t\"The collection type should be an implementation of IUserCollectionType.({0})\",\n\t\t\t\t                                      \tcollectionType));\n\t\t\t}\n\t\t\tmapping.collectiontype = collectionType.AssemblyQualifiedName;\n\t\t}\n\t\tpublic void Type(string collectionType)\n\t\t{\n\t\t\tmapping.collectiontype = collectionType ?? throw new ArgumentNullException(nameof(collectionType));\n\t\t}\n\t\tpublic void Table(string tableName)\n\t\t{\n\t\t\tmapping.table = tableName;\n\t\t}\n\t\tpublic void Catalog(string catalogName)\n\t\t{\n\t\t\tmapping.catalog = catalogName;\n\t\t}\n\t\tpublic void Schema(string schemaName)\n\t\t{\n\t\t\tmapping.schema = schemaName;\n\t\t}\n\t\tpublic void Cache(Action<ICacheMapper> cacheMapping)\n\t\t{\n\t\t\tif (cacheMapper == null)\n\t\t\t{\n\t\t\t\tvar hbmCache = new HbmCache();\n\t\t\t\tmapping.cache = hbmCache;\n\t\t\t\tcacheMapper = new CacheMapper(hbmCache);\n\t\t\t}\n\t\t\tcacheMapping(cacheMapper);\n\t\t}\n\t\tpublic void Filter(string filterName, Action<IFilterMapper> filterMapping)\n\t\t{\n\t\t\tif (filterMapping == null)\n\t\t\t{\n\t\t\t\tfilterMapping = x => { };\n\t\t\t}\n\t\t\tvar hbmFilter = new HbmFilter();\n\t\t\tvar filterMapper = new FilterMapper(filterName, hbmFilter);\n\t\t\tfilterMapping(filterMapper);\n\t\t\tDictionary<string, HbmFilter> filters = mapping.filter != null ? mapping.filter.ToDictionary(f => f.name, f => f) : new Dictionary<string, HbmFilter>(1);\n\t\t\tfilters[filterName] = hbmFilter;\n\t\t\tmapping.filter = filters.Values.ToArray();\n\t\t}\n\t\tpublic void Fetch(CollectionFetchMode fetchMode)\n\t\t{\n\t\t\tif (fetchMode == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmapping.fetch = fetchMode.ToHbm();\n\t\t\tmapping.fetchSpecified = mapping.fetch != HbmCollectionFetchMode.Select;\n\t\t}\n\t\tpublic void Persister(System.Type persister)\n\t\t{\n\t\t\tif (persister == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(\"persister\");\n\t\t\t}\n\t\t\tif (!typeof(ICollectionPersister).IsAssignableFrom(persister))\n\t\t\t{\n\t\t\t\tthrow new ArgumentOutOfRangeException(\"persister\", \"Expected type implementing ICollectionPersister.\");\n\t\t\t}\n\t\t\tmapping.persister = persister.AssemblyQualifiedName;\n\t\t}\n\t\t#endregion\n\t\t#region Implementation of IEntityPropertyMapper\n\t\tpublic void Access(Accessor accessor)\n\t\t{\n\t\t\tentityPropertyMapper.Access(accessor);\n\t\t}\n\t\tpublic void Access(System.Type accessorType)\n\t\t{\n\t\t\tentityPropertyMapper.Access(accessorType);\n\t\t}\n\t\tpublic void OptimisticLock(bool takeInConsiderationForOptimisticLock)\n\t\t{\n\t\t\tmapping.optimisticlock = takeInConsiderationForOptimisticLock;\n\t\t}\n\t\t#endregion\n\t\t#region IMapPropertiesMapper Members\n\t\tpublic void Loader(string namedQueryReference)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "length": 620, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "941de4a30042444c37ae61552e7f11d288717b818793b5d1"}
{"input": "", "context": "using System;\nnamespace Server.Factions\n{\n\tpublic class FactionState\n\t{\n\t\tprivate Faction m_Faction;\n\t\tprivate Mobile m_Commander;\n\t\tprivate int m_Tithe;\n\t\tprivate int m_Silver;\n\t\tprivate PlayerStateCollection m_Members;\n\t\tprivate Election m_Election;\n\t\tprivate FactionItemCollection m_FactionItems;\n\t\tprivate FactionTrapCollection m_FactionTraps;\n\t\tprivate const int BroadcastsPerPeriod = 2;\n\t\tprivate static readonly TimeSpan BroadcastPeriod = TimeSpan.FromHours( 1.0 );\n\t\tprivate DateTime[] m_LastBroadcasts = new DateTime[BroadcastsPerPeriod];\n\t\tpublic bool FactionMessageReady\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tfor ( int i = 0; i < m_LastBroadcasts.Length; ++i )\n\t\t\t\t{\n\t\t\t\t\tif ( DateTime.UtcNow >= ( m_LastBroadcasts[i] + BroadcastPeriod ) )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tpublic void RegisterBroadcast()\n\t\t{\n\t\t\tfor ( int i = 0; i < m_LastBroadcasts.Length; ++i )\n\t\t\t{\n\t\t\t\tif ( DateTime.UtcNow >= ( m_LastBroadcasts[i] + BroadcastPeriod ) )\n\t\t\t\t{\n\t\t\t\t\tm_LastBroadcasts[i] = DateTime.UtcNow;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic FactionItemCollection FactionItems { get { return m_FactionItems; } set { m_FactionItems = value; } }\n\t\tpublic FactionTrapCollection Traps { get { return m_FactionTraps; } set { m_FactionTraps = value; } }\n\t\tpublic Election Election { get { return m_Election; } set { m_Election = value; } }\n\t\tpublic Mobile Commander\n\t\t{\n\t\t\tget { return m_Commander; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif ( m_Commander != null )\n\t\t\t\t{\n\t\t\t\t\tm_Commander.InvalidateProperties();\n\t\t\t\t}\n\t\t\t\tm_Commander = value;\n\t\t\t\tif ( m_Commander != null )\n\t\t\t\t{\n\t\t\t\t\tm_Commander.SendLocalizedMessage( 1042227 ); // You have been elected Commander of your faction\n\t\t\t\t\tm_Commander.InvalidateProperties();\n\t\t\t\t\tPlayerState pl = PlayerState.Find( m_Commander );\n\t\t\t\t\tif ( pl != null && pl.Finance != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tpl.Finance.Finance = null;\n\t\t\t\t\t}\n\t\t\t\t\tif ( pl != null && pl.Sheriff != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tpl.Sheriff.Sheriff = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic int Tithe { get { return m_Tithe; } set { m_Tithe = value; } }\n\t\tpublic int Silver { get { return m_Silver; } set { m_Silver = value; } }\n\t\tpublic PlayerStateCollection Members { get { return m_Members; } set { m_Members = value; } }\n\t\tpublic FactionState( Faction faction )\n\t\t{\n\t\t\tm_Faction = faction;\n\t\t\tm_Tithe = 50;\n\t\t\tm_Members = new PlayerStateCollection();\n\t\t\tm_Election = new Election( faction );\n\t\t\tm_FactionItems = new FactionItemCollection();\n\t\t\tm_FactionTraps = new FactionTrapCollection();\n\t\t}\n\t\tpublic FactionState( GenericReader reader )\n\t\t{\n\t\t\tint version = reader.ReadEncodedInt();\n\t\t\tswitch ( version )\n\t\t\t{\n\t\t\t\tcase 4:\n\t\t\t\t\t{\n\t\t\t\t\t\tint count = reader.ReadEncodedInt();\n\t\t\t\t\t\tfor ( int i = 0; i < count; ++i )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDateTime time = reader.ReadDateTime();\n\t\t\t\t\t\t\tif ( i < m_LastBroadcasts.Length )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tm_LastBroadcasts[i] = time;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgoto case 3;\n\t\t\t\t\t}\n\t\t\t\tcase 3:\n\t\t\t\tcase 2:\n\t\t\t\tcase 1:\n\t\t\t\t\t{\n\t\t\t\t\t\tm_Election = new Election( reader );\n\t\t\t\t\t\tgoto case 0;\n\t\t\t\t\t}\n\t\t\t\tcase 0:\n\t\t\t\t\t{\n\t\t\t\t\t\tm_Faction = Faction.ReadReference( reader );\n\t\t\t\t\t\tm_Commander = reader.ReadMobile();\n\t\t\t\t\t\tif ( version < 4 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDateTime time = reader.ReadDateTime();\n\t\t\t\t\t\t\tif ( m_LastBroadcasts.Length > 0 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tm_LastBroadcasts[0] = time;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tm_Tithe = reader.ReadEncodedInt();\n\t\t\t\t\t\tm_Silver = reader.ReadEncodedInt();\n\t\t\t\t\t\tint memberCount = reader.ReadEncodedInt();\n\t\t\t\t\t\tm_Members = new PlayerStateCollection();\n\t\t\t\t\t\tfor ( int i = 0; i < memberCount; ++i )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tPlayerState pl = new PlayerState( reader, m_Faction, m_Members );\n\t\t\t\t\t\t\tif ( pl.Mobile != null )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tm_Members.Add( pl );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tm_Faction.State = this;\n\t\t\t\t\t\tm_Faction.UpdateRanks();\n\t\t\t\t\t\tm_FactionItems = new FactionItemCollection();\n\t\t\t\t\t\tif ( version >= 2 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint factionItemCount = reader.ReadEncodedInt();\n\t\t\t\t\t\t\tfor ( int i = 0; i < factionItemCount; ++i )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tFactionItem factionItem = new FactionItem( reader, m_Faction );\n\t\t\t\t\t\t\t\tif ( !factionItem.HasExpired )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfactionItem.Attach();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tTimer.DelayCall( TimeSpan.Zero, new TimerCallback( factionItem.Detach ) ); // sandbox detachment\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tm_FactionTraps = new FactionTrapCollection();\n\t\t\t\t\t\tif ( version >= 3 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint factionTrapCount = reader.ReadEncodedInt();\n\t\t\t\t\t\t\tfor ( int i = 0; i < factionTrapCount; ++i )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tBaseFactionTrap trap = reader.ReadItem() as BaseFactionTrap;\n\t\t\t\t\t\t\t\tif ( trap != null && !trap.CheckDecay() )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tm_FactionTraps.Add( trap );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\tif ( version < 1 )\n\t\t\t{\n\t\t\t\tm_Election = new Election( m_Faction );\n\t\t\t}\n\t\t}\n\t\tpublic void Serialize( GenericWriter writer )\n\t\t{\n\t\t\twriter.WriteEncodedInt( (int) 4 ); // version\n\t\t\twriter.WriteEncodedInt( (int) m_LastBroadcasts.Length );\n\t\t\tfor ( int i = 0; i < m_LastBroadcasts.Length; ++i )\n\t\t\t{\n\t\t\t\twriter.Write( (DateTime) m_LastBroadcasts[i] );\n\t\t\t}\n\t\t\tm_Election.Serialize( writer );\n\t\t\tFaction.WriteReference( writer, m_Faction );\n\t\t\twriter.Write( (Mobile) m_Commander );\n\t\t\twriter.WriteEncodedInt( (int) m_Tithe );\n\t\t\twriter.WriteEncodedInt( (int) m_Silver );\n", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "length": 670, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "8beb1da6b11326207584621c562d0cde00dc7c7e21ffd3f0"}
{"input": "", "context": "/*\n * Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.graal.phases.common.inlining.walker;\nimport static com.oracle.graal.compiler.common.GraalOptions.Intrinsify;\nimport static com.oracle.graal.compiler.common.GraalOptions.MaximumRecursiveInlining;\nimport static com.oracle.graal.compiler.common.GraalOptions.MegamorphicInliningMinMethodProbability;\nimport static com.oracle.graal.compiler.common.GraalOptions.OptCanonicalizer;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.BitSet;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport jdk.vm.ci.code.BailoutException;\nimport jdk.vm.ci.common.JVMCIError;\nimport jdk.vm.ci.meta.Assumptions.AssumptionResult;\nimport jdk.vm.ci.meta.JavaTypeProfile;\nimport jdk.vm.ci.meta.ResolvedJavaMethod;\nimport jdk.vm.ci.meta.ResolvedJavaType;\nimport com.oracle.graal.compiler.common.type.ObjectStamp;\nimport com.oracle.graal.debug.Debug;\nimport com.oracle.graal.debug.DebugMetric;\nimport com.oracle.graal.graph.Graph;\nimport com.oracle.graal.graph.Node;\nimport com.oracle.graal.nodes.CallTargetNode;\nimport com.oracle.graal.nodes.Invoke;\nimport com.oracle.graal.nodes.ParameterNode;\nimport com.oracle.graal.nodes.StructuredGraph;\nimport com.oracle.graal.nodes.ValueNode;\nimport com.oracle.graal.nodes.java.AbstractNewObjectNode;\nimport com.oracle.graal.nodes.java.MethodCallTargetNode;\nimport com.oracle.graal.nodes.virtual.AllocatedObjectNode;\nimport com.oracle.graal.nodes.virtual.VirtualObjectNode;\nimport com.oracle.graal.phases.OptimisticOptimizations;\nimport com.oracle.graal.phases.common.CanonicalizerPhase;\nimport com.oracle.graal.phases.common.inlining.InliningUtil;\nimport com.oracle.graal.phases.common.inlining.info.AssumptionInlineInfo;\nimport com.oracle.graal.phases.common.inlining.info.ExactInlineInfo;\nimport com.oracle.graal.phases.common.inlining.info.InlineInfo;\nimport com.oracle.graal.phases.common.inlining.info.MultiTypeGuardInlineInfo;\nimport com.oracle.graal.phases.common.inlining.info.TypeGuardInlineInfo;\nimport com.oracle.graal.phases.common.inlining.info.elem.Inlineable;\nimport com.oracle.graal.phases.common.inlining.info.elem.InlineableGraph;\nimport com.oracle.graal.phases.common.inlining.policy.InliningPolicy;\nimport com.oracle.graal.phases.tiers.HighTierContext;\nimport com.oracle.graal.phases.util.Providers;\n/**\n * <p>\n * The space of inlining decisions is explored depth-first with the help of a stack realized by\n * {@link InliningData}. At any point in time, the topmost element of that stack consists of:\n * <ul>\n * <li>the callsite under consideration is tracked as a {@link MethodInvocation}.</li>\n * <li>\n * one or more {@link CallsiteHolder}s, all of them associated to the callsite above. Why more than\n * one? Depending on the type-profile for the receiver more than one concrete method may be feasible\n * target.</li>\n * </ul>\n * </p>\n *\n * <p>\n * The bottom element in the stack consists of:\n * <ul>\n * <li>\n * a single {@link MethodInvocation} (the\n * {@link com.oracle.graal.phases.common.inlining.walker.MethodInvocation#isRoot root} one, ie the\n * unknown caller of the root graph)</li>\n * <li>\n * a single {@link CallsiteHolder} (the root one, for the method on which inlining was called)</li>\n * </ul>\n * </p>\n *\n * @see #moveForward()\n */\npublic class InliningData {\n    // Metrics\n    private static final DebugMetric metricInliningPerformed = Debug.metric(\"InliningPerformed\");\n    private static final DebugMetric metricInliningRuns = Debug.metric(\"InliningRuns\");\n    private static final DebugMetric metricInliningConsidered = Debug.metric(\"InliningConsidered\");\n    /**\n     * Call hierarchy from outer most call (i.e., compilation unit) to inner most callee.\n     */\n    private final ArrayDeque<CallsiteHolder> graphQueue = new ArrayDeque<>();\n    private final ArrayDeque<MethodInvocation> invocationQueue = new ArrayDeque<>();\n    private final HighTierContext context;\n    private final int maxMethodPerInlining;\n    private final CanonicalizerPhase canonicalizer;\n    private final InliningPolicy inliningPolicy;\n    private final StructuredGraph rootGraph;\n    private int maxGraphs;\n    public InliningData(StructuredGraph rootGraph, HighTierContext context, int maxMethodPerInlining, CanonicalizerPhase canonicalizer, InliningPolicy inliningPolicy) {\n        assert rootGraph != null;\n        this.context = context;\n        this.maxMethodPerInlining = maxMethodPerInlining;\n        this.canonicalizer = canonicalizer;\n        this.inliningPolicy = inliningPolicy;\n        this.maxGraphs = 1;\n        this.rootGraph = rootGraph;\n        invocationQueue.push(new MethodInvocation(null, 1.0, 1.0, null));\n        graphQueue.push(new CallsiteHolderExplorable(rootGraph, 1.0, 1.0, null));\n    }\n    public static boolean isFreshInstantiation(ValueNode arg) {\n        return (arg instanceof AbstractNewObjectNode) || (arg instanceof AllocatedObjectNode) || (arg instanceof VirtualObjectNode);\n    }\n    private String checkTargetConditionsHelper(ResolvedJavaMethod method, int invokeBci) {\n        if (method == null) {\n            return \"the method is not resolved\";\n        } else if (method.isNative() && (!Intrinsify.getValue() || !InliningUtil.canIntrinsify(context.getReplacements(), method, invokeBci))) {\n            return \"it is a non-intrinsic native method\";\n        } else if (method.isAbstract()) {\n            return \"it is an abstract method\";\n        } else if (!method.getDeclaringClass().isInitialized()) {\n            return \"the method's class is not initialized\";\n        } else if (!method.canBeInlined()) {\n            return \"it is marked non-inlinable\";\n        } else if (countRecursiveInlining(method) > MaximumRecursiveInlining.getValue()) {\n            return \"it exceeds the maximum recursive inlining depth\";\n        } else if (new OptimisticOptimizations(rootGraph.getProfilingInfo(method)).lessOptimisticThan(context.getOptimisticOptimizations())) {\n            return \"the callee uses less optimistic optimizations than caller\";\n        } else {\n            return null;\n        }\n    }\n    private boolean checkTargetConditions(Invoke invoke, ResolvedJavaMethod method) {\n        final String failureMessage = checkTargetConditionsHelper(method, invoke.bci());\n        if (failureMessage == null) {\n            return true;\n        } else {\n            InliningUtil.logNotInlined(invoke, inliningDepth(), method, failureMessage);\n            return false;\n        }\n    }\n    /**\n     * Determines if inlining is possible at the given invoke node.\n     *\n     * @param invoke the invoke that should be inlined\n     * @return an instance of InlineInfo, or null if no inlining is possible at the given invoke\n     */\n    private InlineInfo getInlineInfo(Invoke invoke) {\n        final String failureMessage = InliningUtil.checkInvokeConditions(invoke);\n        if (failureMessage != null) {\n            InliningUtil.logNotInlinedMethod(invoke, failureMessage);\n            return null;\n        }\n        MethodCallTargetNode callTarget = (MethodCallTargetNode) invoke.callTarget();\n        ResolvedJavaMethod targetMethod = callTarget.targetMethod();\n        if (callTarget.invokeKind() == CallTargetNode.InvokeKind.Special || targetMethod.canBeStaticallyBound()) {\n            return getExactInlineInfo(invoke, targetMethod);\n        }\n        assert callTarget.invokeKind().isIndirect();\n        ResolvedJavaType holder = targetMethod.getDeclaringClass();\n        if (!(callTarget.receiver().stamp() instanceof ObjectStamp)) {\n            return null;\n        }\n        ObjectStamp receiverStamp = (ObjectStamp) callTarget.receiver().stamp();\n        if (receiverStamp.alwaysNull()) {\n            // Don't inline if receiver is known to be null\n            return null;\n        }\n        ResolvedJavaType contextType = invoke.getContextType();\n        if (receiverStamp.type() != null) {\n            // the invoke target might be more specific than the holder (happens after inlining:\n            // parameters lose their declared type...)\n            ResolvedJavaType receiverType = receiverStamp.type();\n            if (receiverType != null && holder.isAssignableFrom(receiverType)) {\n                holder = receiverType;\n                if (receiverStamp.isExactType()) {\n                    assert targetMethod.getDeclaringClass().isAssignableFrom(holder) : holder + \" subtype of \" + targetMethod.getDeclaringClass() + \" for \" + targetMethod;\n                    ResolvedJavaMethod resolvedMethod = holder.resolveConcreteMethod(targetMethod, contextType);\n                    if (resolvedMethod != null) {\n                        return getExactInlineInfo(invoke, resolvedMethod);\n                    }\n                }\n            }\n        }\n        if (holder.isArray()) {\n            // arrays can be treated as Objects\n            ResolvedJavaMethod resolvedMethod = holder.resolveConcreteMethod(targetMethod, contextType);\n            if (resolvedMethod != null) {\n                return getExactInlineInfo(invoke, resolvedMethod);\n            }\n        }\n        if (callTarget.graph().getAssumptions() != null) {\n            AssumptionResult<ResolvedJavaType> leafConcreteSubtype = holder.findLeafConcreteSubtype();\n            if (leafConcreteSubtype != null) {\n                ResolvedJavaMethod resolvedMethod = leafConcreteSubtype.getResult().resolveConcreteMethod(targetMethod, contextType);\n                if (resolvedMethod != null) {\n                    return getAssumptionInlineInfo(invoke, resolvedMethod, leafConcreteSubtype);\n                }\n            }\n            AssumptionResult<ResolvedJavaMethod> concrete = holder.findUniqueConcreteMethod(targetMethod);\n            if (concrete != null) {\n                return getAssumptionInlineInfo(invoke, concrete.getResult(), concrete);\n            }\n        }\n        // type check based inlining\n        return getTypeCheckedInlineInfo(invoke, targetMethod);\n    }\n    private InlineInfo getTypeCheckedInlineInfo(Invoke invoke, ResolvedJavaMethod targetMethod) {\n        JavaTypeProfile typeProfile = ((MethodCallTargetNode) invoke.callTarget()).getProfile();\n        if (typeProfile == null) {\n            InliningUtil.logNotInlined(invoke, inliningDepth(), targetMethod, \"no type profile exists\");\n            return null;\n        }\n        JavaTypeProfile.ProfiledType[] ptypes = typeProfile.getTypes();\n        if (ptypes == null || ptypes.length <= 0) {\n            InliningUtil.logNotInlined(invoke, inliningDepth(), targetMethod, \"no types in profile\");\n            return null;\n        }\n        ResolvedJavaType contextType = invoke.getContextType();\n        double notRecordedTypeProbability = typeProfile.getNotRecordedProbability();\n        final OptimisticOptimizations optimisticOpts = context.getOptimisticOptimizations();\n        if (ptypes.length == 1 && notRecordedTypeProbability == 0) {\n            if (!optimisticOpts.inlineMonomorphicCalls()) {\n                InliningUtil.logNotInlined(invoke, inliningDepth(), targetMethod, \"inlining monomorphic calls is disabled\");\n                return null;\n            }\n            ResolvedJavaType type = ptypes[0].getType();\n            assert type.isArray() || type.isConcrete();\n            ResolvedJavaMethod concrete = type.resolveConcreteMethod(targetMethod, contextType);\n            if (!checkTargetConditions(invoke, concrete)) {\n                return null;\n            }\n            return new TypeGuardInlineInfo(invoke, concrete, type);\n        } else {\n            invoke.setPolymorphic(true);\n            if (!optimisticOpts.inlinePolymorphicCalls() && notRecordedTypeProbability == 0) {\n                InliningUtil.logNotInlinedInvoke(invoke, inliningDepth(), targetMethod, \"inlining polymorphic calls is disabled (%d types)\", ptypes.length);\n                return null;\n            }\n            if (!optimisticOpts.inlineMegamorphicCalls() && notRecordedTypeProbability > 0) {\n                // due to filtering impossible types, notRecordedTypeProbability can be > 0 although\n                // the number of types is lower than what can be recorded in a type profile\n                InliningUtil.logNotInlinedInvoke(invoke, inliningDepth(), targetMethod, \"inlining megamorphic calls is disabled (%d types, %f %% not recorded types)\", ptypes.length,\n                                notRecordedTypeProbability * 100);\n                return null;\n            }\n            // Find unique methods and their probabilities.\n            ArrayList<ResolvedJavaMethod> concreteMethods = new ArrayList<>();\n            ArrayList<Double> concreteMethodsProbabilities = new ArrayList<>();\n            for (int i = 0; i < ptypes.length; i++) {\n                ResolvedJavaMethod concrete = ptypes[i].getType().resolveConcreteMethod(targetMethod, contextType);\n                if (concrete == null) {\n                    InliningUtil.logNotInlined(invoke, inliningDepth(), targetMethod, \"could not resolve method\");\n                    return null;\n                }\n                int index = concreteMethods.indexOf(concrete);\n                double curProbability = ptypes[i].getProbability();\n                if (index < 0) {\n                    index = concreteMethods.size();\n                    concreteMethods.add(concrete);\n                    concreteMethodsProbabilities.add(curProbability);\n                } else {\n                    concreteMethodsProbabilities.set(index, concreteMethodsProbabilities.get(index) + curProbability);\n                }\n            }\n            // Clear methods that fall below the threshold.\n            if (notRecordedTypeProbability > 0) {\n                ArrayList<ResolvedJavaMethod> newConcreteMethods = new ArrayList<>();\n                ArrayList<Double> newConcreteMethodsProbabilities = new ArrayList<>();\n                for (int i = 0; i < concreteMethods.size(); ++i) {\n                    if (concreteMethodsProbabilities.get(i) >= MegamorphicInliningMinMethodProbability.getValue()) {\n                        newConcreteMethods.add(concreteMethods.get(i));\n                        newConcreteMethodsProbabilities.add(concreteMethodsProbabilities.get(i));\n                    }\n                }\n                if (newConcreteMethods.isEmpty()) {\n                    // No method left that is worth inlining.\n                    InliningUtil.logNotInlinedInvoke(invoke, inliningDepth(), targetMethod, \"no methods remaining after filtering less frequent methods (%d methods previously)\",\n                                    concreteMethods.size());\n                    return null;\n                }\n                concreteMethods = newConcreteMethods;\n                concreteMethodsProbabilities = newConcreteMethodsProbabilities;\n            }\n            if (concreteMethods.size() > maxMethodPerInlining) {\n                InliningUtil.logNotInlinedInvoke(invoke, inliningDepth(), targetMethod, \"polymorphic call with more than %d target methods\", maxMethodPerInlining);\n                return null;\n            }\n            // Clean out types whose methods are no longer available.\n            ArrayList<JavaTypeProfile.ProfiledType> usedTypes = new ArrayList<>();\n            ArrayList<Integer> typesToConcretes = new ArrayList<>();\n            for (JavaTypeProfile.ProfiledType type : ptypes) {\n                ResolvedJavaMethod concrete = type.getType().resolveConcreteMethod(targetMethod, contextType);\n                int index = concreteMethods.indexOf(concrete);\n                if (index == -1) {\n                    notRecordedTypeProbability += type.getProbability();\n                } else {\n                    assert type.getType().isArray() || !type.getType().isAbstract() : type + \" \" + concrete;\n                    usedTypes.add(type);\n                    typesToConcretes.add(index);\n                }\n            }\n            if (usedTypes.isEmpty()) {\n                // No type left that is worth checking for.\n                InliningUtil.logNotInlinedInvoke(invoke, inliningDepth(), targetMethod, \"no types remaining after filtering less frequent types (%d types previously)\", ptypes.length);\n                return null;\n            }\n            for (ResolvedJavaMethod concrete : concreteMethods) {\n                if (!checkTargetConditions(invoke, concrete)) {\n                    InliningUtil.logNotInlined(invoke, inliningDepth(), targetMethod, \"it is a polymorphic method call and at least one invoked method cannot be inlined\");\n                    return null;\n                }\n            }\n            return new MultiTypeGuardInlineInfo(invoke, concreteMethods, usedTypes, typesToConcretes, notRecordedTypeProbability);\n        }\n    }\n    private InlineInfo getAssumptionInlineInfo(Invoke invoke, ResolvedJavaMethod concrete, AssumptionResult<?> takenAssumption) {\n        assert concrete.isConcrete();\n        if (checkTargetConditions(invoke, concrete)) {\n            return new AssumptionInlineInfo(invoke, concrete, takenAssumption);\n        }\n        return null;\n    }\n    private InlineInfo getExactInlineInfo(Invoke invoke, ResolvedJavaMethod targetMethod) {\n        assert targetMethod.isConcrete();\n        if (checkTargetConditions(invoke, targetMethod)) {\n            return new ExactInlineInfo(invoke, targetMethod);\n        }\n        return null;\n    }\n    @SuppressWarnings(\"try\")\n    private void doInline(CallsiteHolderExplorable callerCallsiteHolder, MethodInvocation calleeInvocation) {\n        StructuredGraph callerGraph = callerCallsiteHolder.graph();\n        InlineInfo calleeInfo = calleeInvocation.callee();\n        try {\n            try (Debug.Scope scope = Debug.scope(\"doInline\", callerGraph)) {\n                Set<Node> canonicalizedNodes = Node.newSet();\n                calleeInfo.invoke().asNode().usages().snapshotTo(canonicalizedNodes);\n                Collection<Node> parameterUsages = calleeInfo.inline(new Providers(context));\n                canonicalizedNodes.addAll(parameterUsages);\n                metricInliningRuns.increment();\n                Debug.dump(callerGraph, \"after %s\", calleeInfo);\n                if (OptCanonicalizer.getValue()) {\n                    Graph.Mark markBeforeCanonicalization = callerGraph.getMark();\n                    canonicalizer.applyIncremental(callerGraph, context, canonicalizedNodes);\n                    // process invokes that are possibly created during canonicalization\n                    for (Node newNode : callerGraph.getNewNodes(markBeforeCanonicalization)) {\n                        if (newNode instanceof Invoke) {\n                            callerCallsiteHolder.pushInvoke((Invoke) newNode);\n                        }\n                    }\n                }\n                callerCallsiteHolder.computeProbabilities();\n                metricInliningPerformed.increment();\n            }\n        } catch (BailoutException bailout) {\n            throw bailout;\n        } catch (AssertionError | RuntimeException e) {\n            throw new JVMCIError(e).addContext(calleeInfo.toString());\n        } catch (JVMCIError e) {\n            throw e.addContext(calleeInfo.toString());\n        } catch (Throwable e) {\n            throw Debug.handle(e);\n        }\n    }\n    /**\n     *\n     * This method attempts:\n     * <ol>\n     * <li>\n     * to inline at the callsite given by <code>calleeInvocation</code>, where that callsite belongs\n     * to the {@link CallsiteHolderExplorable} at the top of the {@link #graphQueue} maintained in\n     * this class.</li>\n     * <li>\n     * otherwise, to devirtualize the callsite in question.</li>\n     * </ol>\n     *\n     * @return true iff inlining was actually performed\n     */\n    private boolean tryToInline(MethodInvocation calleeInvocation, int inliningDepth) {\n        CallsiteHolderExplorable callerCallsiteHolder = (CallsiteHolderExplorable) currentGraph();\n        InlineInfo calleeInfo = calleeInvocation.callee();\n        assert callerCallsiteHolder.containsInvoke(calleeInfo.invoke());\n        metricInliningConsidered.increment();\n        if (inliningPolicy.isWorthInlining(context.getReplacements(), calleeInvocation, inliningDepth, true)) {\n            doInline(callerCallsiteHolder, calleeInvocation);\n            return true;\n        }\n        if (context.getOptimisticOptimizations().devirtualizeInvokes()) {\n            calleeInfo.tryToDevirtualizeInvoke(new Providers(context));\n        }\n        return false;\n    }\n    /**\n     * This method picks one of the callsites belonging to the current\n     * {@link CallsiteHolderExplorable}. Provided the callsite qualifies to be analyzed for\n     * inlining, this method prepares a new stack top in {@link InliningData} for such callsite,\n     * which comprises:\n     * <ul>\n     * <li>preparing a summary of feasible targets, ie preparing an {@link InlineInfo}</li>\n     * <li>based on it, preparing the stack top proper which consists of:</li>\n     * <ul>\n     * <li>one {@link MethodInvocation}</li>\n     * <li>a {@link CallsiteHolder} for each feasible target</li>\n     * </ul>\n     * </ul>\n     *\n     * <p>\n     * The thus prepared \"stack top\" is needed by {@link #moveForward()} to explore the space of\n     * inlining decisions (each decision one of: backtracking, delving, inlining).\n     * </p>\n     *\n     * <p>\n     * The {@link InlineInfo} used to get things rolling is kept around in the\n     * {@link MethodInvocation}, it will be needed in case of inlining, see\n     * {@link InlineInfo#inline(Providers)}\n     * </p>\n     */\n    private void processNextInvoke() {\n        CallsiteHolderExplorable callsiteHolder = (CallsiteHolderExplorable) currentGraph();\n        Invoke invoke = callsiteHolder.popInvoke();\n        InlineInfo info = getInlineInfo(invoke);\n        if (info != null) {\n            info.populateInlinableElements(context, currentGraph().graph(), canonicalizer);\n            double invokeProbability = callsiteHolder.invokeProbability(invoke);\n            double invokeRelevance = callsiteHolder.invokeRelevance(invoke);\n            MethodInvocation methodInvocation = new MethodInvocation(info, invokeProbability, invokeRelevance, freshlyInstantiatedArguments(invoke, callsiteHolder.getFixedParams()));\n            pushInvocationAndGraphs(methodInvocation);\n        }\n    }\n    /**\n     * Gets the freshly instantiated arguments.\n     * <p>\n     * A freshly instantiated argument is either:\n     * <uL>\n     * <li>an {@link InliningData#isFreshInstantiation(com.oracle.graal.nodes.ValueNode)}</li>\n     * <li>a fixed-param, ie a {@link ParameterNode} receiving a freshly instantiated argument</li>\n     * </uL>\n     * </p>\n     *\n     * @return the positions of freshly instantiated arguments in the argument list of the\n     *         <code>invoke</code>, or null if no such positions exist.\n     */\n    public static BitSet freshlyInstantiatedArguments(Invoke invoke, Set<ParameterNode> fixedParams) {\n        assert fixedParams != null;\n        assert paramsAndInvokeAreInSameGraph(invoke, fixedParams);\n        BitSet result = null;\n        int argIdx = 0;\n        for (ValueNode arg : invoke.callTarget().arguments()) {\n            assert arg != null;\n            if (isFreshInstantiation(arg) || fixedParams.contains(arg)) {\n                if (result == null) {\n                    result = new BitSet();\n                }\n                result.set(argIdx);\n            }\n            argIdx++;\n        }\n        return result;\n    }\n    private static boolean paramsAndInvokeAreInSameGraph(Invoke invoke, Set<ParameterNode> fixedParams) {\n        if (fixedParams.isEmpty()) {\n            return true;\n        }\n        for (ParameterNode p : fixedParams) {\n            if (p.graph() != invoke.asNode().graph()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public int graphCount() {\n        return graphQueue.size();\n    }\n    public boolean hasUnprocessedGraphs() {\n        return !graphQueue.isEmpty();\n    }\n    private CallsiteHolder currentGraph() {\n        return graphQueue.peek();\n    }\n    private void popGraph() {\n        graphQueue.pop();\n        assert graphQueue.size() <= maxGraphs;\n    }\n    private void popGraphs(int count) {\n        assert count >= 0;\n        for (int i = 0; i < count; i++) {\n            graphQueue.pop();\n        }\n    }\n    private static final Object[] NO_CONTEXT = {};\n    /**\n     * Gets the call hierarchy of this inlining from outer most call to inner most callee.\n     */\n    private Object[] inliningContext() {\n        if (!Debug.isDumpEnabled()) {\n            return NO_CONTEXT;\n        }\n        Object[] result = new Object[graphQueue.size()];\n        int i = 0;\n        for (CallsiteHolder g : graphQueue) {\n            result[i++] = g.method();\n        }\n        return result;\n    }\n    private MethodInvocation currentInvocation() {\n        return invocationQueue.peekFirst();\n    }\n    private void pushInvocationAndGraphs(MethodInvocation methodInvocation) {\n        invocationQueue.addFirst(methodInvocation);\n        InlineInfo info = methodInvocation.callee();\n        maxGraphs += info.numberOfMethods();\n        assert graphQueue.size() <= maxGraphs;\n        for (int i = 0; i < info.numberOfMethods(); i++) {\n            CallsiteHolder ch = methodInvocation.buildCallsiteHolderForElement(i);\n            assert !contains(ch.graph());\n            graphQueue.push(ch);\n            assert graphQueue.size() <= maxGraphs;\n        }\n    }\n    private void popInvocation() {\n        maxGraphs -= invocationQueue.peekFirst().callee().numberOfMethods();\n", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "length": 2259, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "67ef14339142182591850f1edd39a2ecbd4e4b7e0f37c376"}
{"input": "", "context": "#!/usr/bin/env python2\nfrom cfme.utils.conf import docker as docker_conf\nfrom cfme.utils.net import random_port, my_ip_address\nimport argparse\nimport fauxfactory\nimport requests\nimport os\nimport os.path\nimport docker\nimport re\nimport subprocess\nimport sys\nimport yaml\nfrom six.moves.urllib.parse import urlsplit\ndef _dgci(d, key):\n    # dgci = dict get case-insensitive\n    keymap = {k.lower(): k for k in d.keys()}\n    return d.get(keymap[key.lower()])\ndef _name(docker_info):\n    return _dgci(docker_info, 'name').strip('/')\nif os.getenv(\"DOCKER_MACHINE_NAME\", \"None\") == \"None\":\n    dc = docker.Client(base_url='unix://var/run/docker.sock',\n                       version='1.12',\n                       timeout=10)\nelse:\n    from docker.utils import kwargs_from_env\n    dc = docker.Client(version='1.12',\n                       timeout=10,\n                       **kwargs_from_env(assert_hostname=False))\nclass DockerInstance(object):\n    def process_bindings(self, bindings):\n        self.port_bindings = {}\n        self.ports = []\n        for bind in bindings:\n            self.port_bindings[bindings[bind][0]] = bindings[bind][1]\n            print(\"  {}: {}\".format(bind, bindings[bind][1]))\n            self.ports.append(bindings[bind][1])\n    def wait(self):\n        if not self.dry_run:\n            dc.wait(self.container_id)\n        else:\n            print(\"Waiting for container\")\n    def stop(self):\n        if not self.dry_run:\n            dc.stop(self.container_id)\n        else:\n            print(\"Stopping container\")\n    def remove(self):\n        if not self.dry_run:\n            dc.remove_container(self.container_id, v=True)\n        else:\n            print(\"Removing container\")\n    def kill(self):\n        if not self.dry_run:\n            dc.kill(self.container_id)\n        else:\n            print(\"Killing container\")\nclass SeleniumDocker(DockerInstance):\n    def __init__(self, bindings, image, dry_run=False):\n        self.dry_run = dry_run\n        sel_name = fauxfactory.gen_alphanumeric(8)\n        if not self.dry_run:\n            sel_create_info = dc.create_container(image, tty=True, name=sel_name)\n            self.container_id = _dgci(sel_create_info, 'id')\n            sel_container_info = dc.inspect_container(self.container_id)\n            self.sel_name = _name(sel_container_info)\n        else:\n            self.sel_name = \"SEL_FF_CHROME_TEST\"\n        self.process_bindings(bindings)\n    def run(self):\n        if not self.dry_run:\n            dc.start(self.container_id, privileged=True, port_bindings=self.port_bindings)\n        else:\n            print(\"Dry run running sel_ff_chrome\")\nclass PytestDocker(DockerInstance):\n    def __init__(self, name, bindings, env, log_path, links, pytest_con, artifactor_dir,\n                 dry_run=False):\n        self.dry_run = dry_run\n        self.links = links\n        self.log_path = log_path\n        self.artifactor_dir = artifactor_dir\n        self.process_bindings(bindings)\n        if not self.dry_run:\n            pt_name = name\n            pt_create_info = dc.create_container(pytest_con, tty=True,\n                                                 name=pt_name, environment=env,\n                                                 command='sh /setup.sh',\n                                                 volumes=[artifactor_dir],\n                                                 ports=self.ports)\n            self.container_id = _dgci(pt_create_info, 'id')\n            pt_container_info = dc.inspect_container(self.container_id)\n            pt_name = _name(pt_container_info)\n    def run(self):\n        if not self.dry_run:\n            dc.start(self.container_id, privileged=True, links=self.links,\n                     binds={self.log_path: {'bind': self.artifactor_dir, 'ro': False}},\n                     port_bindings=self.port_bindings)\n        else:\n            print(\"Dry run running pytest\")\nclass DockerBot(object):\n    def __init__(self, **args):\n        links = []\n        self.args = args\n        self.base_branch = 'master'\n        self.validate_args()\n        self.display_banner()\n        self.process_appliance()\n        self.cache_files()\n        self.create_pytest_command()\n        if not self.args['use_wharf']:\n            self.sel_vnc_port = random_port()\n            sel = SeleniumDocker(bindings={'VNC_PORT': (5999, self.sel_vnc_port)},\n                                 image=self.args['selff'], dry_run=self.args['dry_run'])\n            sel.run()\n            sel_container_name = sel.sel_name\n            links = [(sel_container_name, 'selff')]\n        self.pytest_name = self.args['test_id']\n        self.create_pytest_envvars()\n        self.handle_pr()\n        self.log_path = self.create_log_path()\n        self.pytest_bindings = self.create_pytest_bindings()\n        if self.args['dry_run']:\n            for i in self.env_details:\n                print('export {}=\"{}\"'.format(i, self.env_details[i]))\n            print(self.env_details)\n        pytest = PytestDocker(name=self.pytest_name, bindings=self.pytest_bindings,\n                              env=self.env_details, log_path=self.log_path,\n                              links=links,\n                              pytest_con=self.args['pytest_con'],\n                              artifactor_dir=self.args['artifactor_dir'],\n                              dry_run=self.args['dry_run'])\n        pytest.run()\n        if not self.args['nowait']:\n            self.handle_watch()\n            if self.args['dry_run']:\n                with open(os.path.join(self.log_path, 'setup.txt'), \"w\") as f:\n                    f.write(\"finshed\")\n            try:\n                pytest.wait()\n            except KeyboardInterrupt:\n                print(\"  TEST INTERRUPTED....KILLING ALL THE THINGS\")\n                pass\n            pytest.kill()\n            pytest.remove()\n            if not self.args['use_wharf']:\n                sel.kill()\n                sel.remove()\n            self.handle_output()\n    def cache_files(self):\n        if self.args['pr']:\n            self.modified_files = self.find_files_by_pr(self.args['pr'])\n            if self.requirements_update:\n                self.args['update_pip'] = True\n    def get_base_branch(self, pr):\n        token = self.args['gh_token']\n        owner = self.args['gh_owner']\n        repo = self.args['gh_repo']\n        if token:\n            headers = {'Authorization': 'token {}'.format(token)}\n            r = requests.get(\n                'https://api.github.com/repos/{}/{}/pulls/{}'.format(owner, repo, pr),\n                headers=headers)\n            return r.json()['base']['ref']\n    def get_dev_branch(self, pr=None):\n        token = self.args['gh_token']\n        owner = self.args['gh_dev_owner']\n        repo = self.args['gh_dev_repo']\n        if token:\n            headers = {'Authorization': 'token {}'.format(token)}\n            r = requests.get(\n                'https://api.github.com/repos/{}/{}/pulls/{}'.format(owner, repo, pr),\n                headers=headers)\n            user, user_branch = r.json()['head']['label'].split(\":\")\n        return \"https://github.com/{}/{}.git\".format(user, repo), user_branch\n    def get_pr_metadata(self, pr=None):\n        token = self.args['gh_token']\n        owner = self.args['gh_owner']\n        repo = self.args['gh_repo']\n        if token:\n            headers = {'Authorization': 'token {}'.format(token)}\n            r = requests.get(\n                'https://api.github.com/repos/{}/{}/pulls/{}'.format(owner, repo, pr),\n                headers=headers)\n            body = r.json()['body'] or \"\"\n            metadata = re.findall(\"{{(.*?)}}\", body)\n            if not metadata:\n                return {}\n            else:\n                ydata = yaml.safe_load(metadata[0])\n                return ydata\n    def find_files_by_pr(self, pr=None):\n        self.requirements_update = False\n        files = []\n        token = self.args['gh_token']\n        owner = self.args['gh_owner']\n        repo = self.args['gh_repo']\n        if token:\n            headers = {'Authorization': 'token {}'.format(token)}\n            page = 1\n            while True:\n                r = requests.get(\n                    'https://api.github.com/repos/{}/{}/pulls/{}/files?page={}'.format(\n                        owner, repo, pr, page),\n                    headers=headers)\n                try:\n                    if not r.json():\n                        break\n                    for filen in r.json():\n                        if filen['status'] != \"deleted\" and filen['status'] != \"removed\":\n                            if filen['filename'].startswith('cfme/tests') or \\\n                               filen['filename'].startswith('utils/tests'):\n                                files.append(filen['filename'])\n                        if filen['filename'].endswith('requirements/frozen.txt'):\n                            self.requirements_update = True\n                except:\n                    return None\n                page += 1\n            return files\n    def check_arg(self, name, default):\n        self.args[name] = self.args.get(name)\n        if not self.args[name]:\n            self.args[name] = docker_conf.get(name, default)\n    def validate_args(self):\n        ec = 0\n        appliance = self.args.get('appliance', None)\n        if self.args.get('appliance_name', None) and not appliance:\n            self.args['appliance'] = docker_conf['appliances'][self.args['appliance_name']]\n        self.check_arg('nowait', False)\n        self.check_arg('banner', False)\n        self.check_arg('watch', False)\n        self.check_arg('output', True)\n        self.check_arg('dry_run', False)\n        self.check_arg('server_ip', None)\n        if not self.args['server_ip']:\n            self.args['server_ip'] = my_ip_address()\n        self.check_arg('sprout', False)\n        self.check_arg('provision_appliance', False)\n        if self.args['provision_appliance']:\n            if not self.args['provision_template'] or not self.args['provision_provider'] or \\\n               not self.args['provision_vm_name']:\n                print(\"You don't have all the required options to provision an appliance\")\n                ec += 1\n        self.check_arg('sprout_stream', None)\n        if self.args['sprout'] and not self.args['sprout_stream']:\n            print(\"You need to supply a stream for sprout\")\n            ec += 1\n        self.check_arg('appliance_name', None)\n        self.check_arg('appliance', None)\n        if not self.args['appliance_name'] != self.args['appliance'] and \\\n           not self.args['provision_appliance'] and not self.args['sprout']:\n            print(\"You must supply either an appliance OR an appliance name from config\")\n            ec += 1\n        self.check_arg('branch', 'origin/master')\n        self.check_arg('pr', None)\n        self.check_arg('dev_pr', None)\n        self.check_arg('cfme_repo', None)\n        self.check_arg('cfme_repo_dir', '/cfme_tests_te')\n        self.check_arg('cfme_cred_repo', None)\n        self.check_arg('cfme_cred_repo_dir', '/cfme-qe-yamls')\n        self.check_arg('dev_repo', None)\n        if not self.args['cfme_repo']:\n            print(\"You must supply a CFME REPO\")\n            ec += 1\n        if not self.args['cfme_cred_repo']:\n            print(\"You must supply a CFME Credentials REPO\")\n            ec += 1\n        self.check_arg('selff', 'cfme/sel_ff_chrome')\n        self.check_arg('gh_token', None)\n        self.check_arg('gh_owner', None)\n        self.check_arg('gh_repo', None)\n        self.check_arg('gh_dev_repo', None)\n        self.check_arg('gh_dev_owner', None)\n        if self.args['dev_pr']:\n            dev_check = [self.args[i] for i in ['gh_dev_repo', 'gh_dev_owner']]\n            if not all(dev_check):\n                print(\"To use dev_pr you must have a gh_dev_repo and gh_dev_owner defined\")\n                ec += 1\n        self.check_arg('browser', 'firefox')\n        self.check_arg('pytest', None)\n        self.check_arg('pytest_con', 'py_test_base')\n        if not self.args['pytest']:\n            print(\"You must specify a py.test command\")\n            ec += 1\n        self.check_arg('update_pip', False)\n        self.check_arg('wheel_host_url', None)\n        self.check_arg('auto_gen_test', False)\n        self.check_arg('artifactor_dir', '/log_depot')\n        self.check_arg('log_depot', None)\n        if not self.args['log_depot']:\n            print(\"You must specify a log_depot\")\n            ec += 1\n        if self.args['pr'] and self.args['auto_gen_test'] and not \\\n           all([self.args['gh_token'], self.args['gh_owner'], self.args['gh_repo']]):\n            print(\"You chose to use Auto Test Gen, without supplying GitHub details\")\n            ec += 1\n        self.check_arg('capture', False)\n        self.check_arg('test_id', fauxfactory.gen_alphanumeric(8))\n        self.check_arg('prtester', False)\n        self.check_arg('trackerbot', None)\n        self.check_arg('wharf', False)\n        self.check_arg('sprout_username', None)\n        self.check_arg('sprout_password', None)\n        self.check_arg('sprout_description', None)\n        if ec:\n            sys.exit(127)\n    def display_banner(self):\n        if self.args['banner']:\n            banner = \"\"\"\n==================================================================\n               ____             __             ____        __\n     :        / __ \\____  _____/ /_____  _____/ __ )____  / /_\n   [* *]     / / / / __ \\/ ___/ //_/ _ \\/ ___/ __  / __ \\/ __/\n  -[___]-   / /_/ / /_/ / /__/ ,< /  __/ /  / /_/ / /_/ / /_\n           /_____/\\____/\\___/_/|_|\\___/_/  /_____/\\____/\\__/\n==================================================================\n            \"\"\"\n            print(banner)\n    def process_appliance(self):\n        self.appliance = self.args['appliance']\n        self.app_name = self.args.get('appliance_name', \"Unnamed\")\n        print(\"  APPLIANCE: {} ({})\".format(self.appliance, self.app_name))\n    def create_pytest_command(self):\n        if self.args['auto_gen_test'] and self.args['pr']:\n            self.pr_metadata = self.get_pr_metadata(self.args['pr'])\n            pytest = self.pr_metadata.get('pytest', None)\n            sprout_appliances = self.pr_metadata.get('sprouts', 1)\n            if pytest:\n", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "length": 951, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "7b8b8a69f57173dd972113558b3540a67621319e219d30c4"}
{"input": "", "context": "/*\n * Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.graal.virtual.phases.ea;\nimport static com.oracle.graal.api.meta.LocationIdentity.*;\nimport java.util.*;\nimport com.oracle.graal.api.meta.*;\nimport com.oracle.graal.compiler.common.type.*;\nimport com.oracle.graal.graph.*;\nimport com.oracle.graal.nodes.*;\nimport com.oracle.graal.nodes.cfg.*;\nimport com.oracle.graal.nodes.extended.*;\nimport com.oracle.graal.nodes.java.*;\nimport com.oracle.graal.nodes.util.*;\nimport com.oracle.graal.virtual.phases.ea.ReadEliminationBlockState.CacheEntry;\nimport com.oracle.graal.virtual.phases.ea.ReadEliminationBlockState.LoadCacheEntry;\nimport com.oracle.graal.virtual.phases.ea.ReadEliminationBlockState.ReadCacheEntry;\nimport com.oracle.graal.virtual.phases.ea.ReadEliminationBlockState.UnsafeLoadCacheEntry;\npublic class ReadEliminationClosure extends EffectsClosure<ReadEliminationBlockState> {\n    public ReadEliminationClosure(ControlFlowGraph cfg) {\n        super(null, cfg);\n    }\n    @Override\n    protected ReadEliminationBlockState getInitialState() {\n        return new ReadEliminationBlockState();\n    }\n    @Override\n    protected boolean processNode(Node node, ReadEliminationBlockState state, GraphEffectList effects, FixedWithNextNode lastFixedNode) {\n        boolean deleted = false;\n        if (node instanceof AccessFieldNode) {\n            AccessFieldNode access = (AccessFieldNode) node;\n            if (access.isVolatile()) {\n                processIdentity(state, ANY_LOCATION);\n            } else {\n                ValueNode object = GraphUtil.unproxify(access.object());\n                LoadCacheEntry identifier = new LoadCacheEntry(object, access.field());\n                ValueNode cachedValue = state.getCacheEntry(identifier);\n                if (node instanceof LoadFieldNode) {\n                    if (cachedValue != null) {\n                        effects.replaceAtUsages(access, cachedValue);\n                        addScalarAlias(access, cachedValue);\n                        deleted = true;\n                    } else {\n                        state.addCacheEntry(identifier, access);\n                    }\n                } else {\n                    assert node instanceof StoreFieldNode;\n                    StoreFieldNode store = (StoreFieldNode) node;\n                    ValueNode value = getScalarAlias(store.value());\n                    if (GraphUtil.unproxify(value) == GraphUtil.unproxify(cachedValue)) {\n                        effects.deleteFixedNode(store);\n                        deleted = true;\n                    }\n                    state.killReadCache(store.field());\n                    state.addCacheEntry(identifier, value);\n                }\n            }\n        } else if (node instanceof ReadNode) {\n            ReadNode read = (ReadNode) node;\n            if (read.location() instanceof ConstantLocationNode) {\n                ValueNode object = GraphUtil.unproxify(read.object());\n                ReadCacheEntry identifier = new ReadCacheEntry(object, read.location());\n                ValueNode cachedValue = state.getCacheEntry(identifier);\n                if (cachedValue != null) {\n                    if (read.getGuard() != null && !(read.getGuard() instanceof FixedNode)) {\n                        effects.addFixedNodeBefore(ValueAnchorNode.create((ValueNode) read.getGuard()), read);\n                    }\n                    effects.replaceAtUsages(read, cachedValue);\n                    addScalarAlias(read, cachedValue);\n                    deleted = true;\n                } else {\n                    state.addCacheEntry(identifier, read);\n                }\n            }\n        } else if (node instanceof WriteNode) {\n            WriteNode write = (WriteNode) node;\n            if (write.location() instanceof ConstantLocationNode) {\n                ValueNode object = GraphUtil.unproxify(write.object());\n                ReadCacheEntry identifier = new ReadCacheEntry(object, write.location());\n                ValueNode cachedValue = state.getCacheEntry(identifier);\n                ValueNode value = getScalarAlias(write.value());\n                if (GraphUtil.unproxify(value) == GraphUtil.unproxify(cachedValue)) {\n                    effects.deleteFixedNode(write);\n                    deleted = true;\n                }\n                processIdentity(state, write.location().getLocationIdentity());\n                state.addCacheEntry(identifier, value);\n            } else {\n                processIdentity(state, write.location().getLocationIdentity());\n            }\n        } else if (node instanceof UnsafeAccessNode) {\n            if (node instanceof UnsafeLoadNode) {\n                UnsafeLoadNode load = (UnsafeLoadNode) node;\n                if (load.offset().isConstant() && load.getLocationIdentity() != LocationIdentity.ANY_LOCATION) {\n                    ValueNode object = GraphUtil.unproxify(load.object());\n                    UnsafeLoadCacheEntry identifier = new UnsafeLoadCacheEntry(object, load.offset(), load.getLocationIdentity());\n                    ValueNode cachedValue = state.getCacheEntry(identifier);\n                    if (cachedValue != null) {\n                        effects.replaceAtUsages(load, cachedValue);\n                        addScalarAlias(load, cachedValue);\n                        deleted = true;\n                    } else {\n                        state.addCacheEntry(identifier, load);\n                    }\n                }\n            } else {\n                assert node instanceof UnsafeStoreNode;\n                UnsafeStoreNode write = (UnsafeStoreNode) node;\n                if (write.offset().isConstant() && write.getLocationIdentity() != LocationIdentity.ANY_LOCATION) {\n                    ValueNode object = GraphUtil.unproxify(write.object());\n                    UnsafeLoadCacheEntry identifier = new UnsafeLoadCacheEntry(object, write.offset(), write.getLocationIdentity());\n                    ValueNode cachedValue = state.getCacheEntry(identifier);\n                    ValueNode value = getScalarAlias(write.value());\n                    if (GraphUtil.unproxify(value) == GraphUtil.unproxify(cachedValue)) {\n                        effects.deleteFixedNode(write);\n                        deleted = true;\n                    }\n                    processIdentity(state, write.getLocationIdentity());\n                    state.addCacheEntry(identifier, value);\n                } else {\n                    processIdentity(state, write.getLocationIdentity());\n                }\n            }\n        } else if (node instanceof MemoryCheckpoint.Single) {\n            LocationIdentity identity = ((MemoryCheckpoint.Single) node).getLocationIdentity();\n            processIdentity(state, identity);\n        } else if (node instanceof MemoryCheckpoint.Multi) {\n            for (LocationIdentity identity : ((MemoryCheckpoint.Multi) node).getLocationIdentities()) {\n                processIdentity(state, identity);\n            }\n        }\n        return deleted;\n    }\n    private static void processIdentity(ReadEliminationBlockState state, LocationIdentity identity) {\n        if (identity == ANY_LOCATION) {\n            state.killReadCache();\n            return;\n        }\n        state.killReadCache(identity);\n    }\n    @Override\n    protected void processLoopExit(LoopExitNode exitNode, ReadEliminationBlockState initialState, ReadEliminationBlockState exitState, GraphEffectList effects) {\n        if (exitNode.graph().hasValueProxies()) {\n            for (Map.Entry<CacheEntry<?>, ValueNode> entry : exitState.getReadCache().entrySet()) {\n                if (initialState.getReadCache().get(entry.getKey()) != entry.getValue()) {\n                    ProxyNode proxy = ValueProxyNode.create(exitState.getCacheEntry(entry.getKey()), exitNode);\n                    effects.addFloatingNode(proxy, \"readCacheProxy\");\n                    entry.setValue(proxy);\n                }\n            }\n        }\n    }\n    @Override\n    protected ReadEliminationBlockState cloneState(ReadEliminationBlockState other) {\n        return new ReadEliminationBlockState(other);\n    }\n    @Override\n    protected MergeProcessor createMergeProcessor(Block merge) {\n        return new ReadEliminationMergeProcessor(merge);\n    }\n    private class ReadEliminationMergeProcessor extends EffectsClosure<ReadEliminationBlockState>.MergeProcessor {\n        private final HashMap<Object, ValuePhiNode> materializedPhis = new HashMap<>();\n        public ReadEliminationMergeProcessor(Block mergeBlock) {\n            super(mergeBlock);\n        }\n        protected <T> PhiNode getCachedPhi(T virtual, Stamp stamp) {\n            ValuePhiNode result = materializedPhis.get(virtual);\n            if (result == null) {\n                result = ValuePhiNode.create(stamp, merge);\n                materializedPhis.put(virtual, result);\n            }\n            return result;\n        }\n        @Override\n        protected void merge(List<ReadEliminationBlockState> states) {\n            super.merge(states);\n            mergeReadCache(states);\n        }\n        private void mergeReadCache(List<ReadEliminationBlockState> states) {\n            for (Map.Entry<CacheEntry<?>, ValueNode> entry : states.get(0).readCache.entrySet()) {\n                CacheEntry<?> key = entry.getKey();\n                ValueNode value = entry.getValue();\n                boolean phi = false;\n                for (int i = 1; i < states.size(); i++) {\n                    ValueNode otherValue = states.get(i).readCache.get(key);\n                    if (otherValue == null) {\n                        value = null;\n                        phi = false;\n                        break;\n                    }\n                    if (!phi && otherValue != value) {\n                        phi = true;\n                    }\n                }\n", "answers": ["                if (phi) {"], "length": 810, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "f6536b39e8505ccb4c694576fea0f11053ae3a52c68fe5c6"}
{"input": "", "context": "/*\n * Copyright (C) 2014 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License\n */\npackage com.android.ims.internal;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.os.Message;\nimport android.os.RemoteException;\nimport android.telecom.CameraCapabilities;\nimport android.telecom.Connection;\nimport android.telecom.VideoProfile;\nimport android.view.Surface;\npublic abstract class ImsVideoCallProvider {\n    private static final int MSG_SET_CALLBACK = 1;\n    private static final int MSG_SET_CAMERA = 2;\n    private static final int MSG_SET_PREVIEW_SURFACE = 3;\n    private static final int MSG_SET_DISPLAY_SURFACE = 4;\n    private static final int MSG_SET_DEVICE_ORIENTATION = 5;\n    private static final int MSG_SET_ZOOM = 6;\n    private static final int MSG_SEND_SESSION_MODIFY_REQUEST = 7;\n    private static final int MSG_SEND_SESSION_MODIFY_RESPONSE = 8;\n    private static final int MSG_REQUEST_CAMERA_CAPABILITIES = 9;\n    private static final int MSG_REQUEST_CALL_DATA_USAGE = 10;\n    private static final int MSG_SET_PAUSE_IMAGE = 11;\n    private final ImsVideoCallProviderBinder mBinder;\n    private IImsVideoCallCallback mCallback;\n    /**\n     * Default handler used to consolidate binder method calls onto a single thread.\n     */\n    private final Handler mProviderHandler = new Handler(Looper.getMainLooper()) {\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case MSG_SET_CALLBACK:\n                    mCallback = (IImsVideoCallCallback) msg.obj;\n                    break;\n                case MSG_SET_CAMERA:\n                    onSetCamera((String) msg.obj);\n                    break;\n                case MSG_SET_PREVIEW_SURFACE:\n                    onSetPreviewSurface((Surface) msg.obj);\n                    break;\n                case MSG_SET_DISPLAY_SURFACE:\n                    onSetDisplaySurface((Surface) msg.obj);\n                    break;\n                case MSG_SET_DEVICE_ORIENTATION:\n                    onSetDeviceOrientation(msg.arg1);\n                    break;\n                case MSG_SET_ZOOM:\n                    onSetZoom((Float) msg.obj);\n                    break;\n                case MSG_SEND_SESSION_MODIFY_REQUEST:\n                    onSendSessionModifyRequest((VideoProfile) msg.obj);\n                    break;\n                case MSG_SEND_SESSION_MODIFY_RESPONSE:\n                    onSendSessionModifyResponse((VideoProfile) msg.obj);\n                    break;\n                case MSG_REQUEST_CAMERA_CAPABILITIES:\n                    onRequestCameraCapabilities();\n                    break;\n                case MSG_REQUEST_CALL_DATA_USAGE:\n                    onRequestCallDataUsage();\n                    break;\n                case MSG_SET_PAUSE_IMAGE:\n                    onSetPauseImage((String) msg.obj);\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n    /**\n     * IImsVideoCallProvider stub implementation.\n     */\n    private final class ImsVideoCallProviderBinder extends IImsVideoCallProvider.Stub {\n        public void setCallback(IImsVideoCallCallback callback) {\n            mProviderHandler.obtainMessage(MSG_SET_CALLBACK, callback).sendToTarget();\n        }\n        public void setCamera(String cameraId) {\n            mProviderHandler.obtainMessage(MSG_SET_CAMERA, cameraId).sendToTarget();\n        }\n        public void setPreviewSurface(Surface surface) {\n            mProviderHandler.obtainMessage(MSG_SET_PREVIEW_SURFACE, surface).sendToTarget();\n        }\n        public void setDisplaySurface(Surface surface) {\n            mProviderHandler.obtainMessage(MSG_SET_DISPLAY_SURFACE, surface).sendToTarget();\n        }\n        public void setDeviceOrientation(int rotation) {\n            mProviderHandler.obtainMessage(MSG_SET_DEVICE_ORIENTATION, rotation).sendToTarget();\n        }\n        public void setZoom(float value) {\n            mProviderHandler.obtainMessage(MSG_SET_ZOOM, value).sendToTarget();\n        }\n        public void sendSessionModifyRequest(VideoProfile requestProfile) {\n            mProviderHandler.obtainMessage(\n                    MSG_SEND_SESSION_MODIFY_REQUEST, requestProfile).sendToTarget();\n        }\n        public void sendSessionModifyResponse(VideoProfile responseProfile) {\n            mProviderHandler.obtainMessage(\n                    MSG_SEND_SESSION_MODIFY_RESPONSE, responseProfile).sendToTarget();\n        }\n        public void requestCameraCapabilities() {\n            mProviderHandler.obtainMessage(MSG_REQUEST_CAMERA_CAPABILITIES).sendToTarget();\n        }\n        public void requestCallDataUsage() {\n            mProviderHandler.obtainMessage(MSG_REQUEST_CALL_DATA_USAGE).sendToTarget();\n        }\n        public void setPauseImage(String uri) {\n            mProviderHandler.obtainMessage(MSG_SET_PAUSE_IMAGE, uri).sendToTarget();\n        }\n    }\n    public ImsVideoCallProvider() {\n        mBinder = new ImsVideoCallProviderBinder();\n    }\n    /**\n     * Returns binder object which can be used across IPC methods.\n     */\n    public final IImsVideoCallProvider getInterface() {\n        return mBinder;\n    }\n    /** @see Connection.VideoProvider#onSetCamera */\n    public abstract void onSetCamera(String cameraId);\n    /** @see Connection.VideoProvider#onSetPreviewSurface */\n    public abstract void onSetPreviewSurface(Surface surface);\n    /** @see Connection.VideoProvider#onSetDisplaySurface */\n    public abstract void onSetDisplaySurface(Surface surface);\n    /** @see Connection.VideoProvider#onSetDeviceOrientation */\n    public abstract void onSetDeviceOrientation(int rotation);\n    /** @see Connection.VideoProvider#onSetZoom */\n    public abstract void onSetZoom(float value);\n    /** @see Connection.VideoProvider#onSendSessionModifyRequest */\n    public abstract void onSendSessionModifyRequest(VideoProfile requestProfile);\n    /** @see Connection.VideoProvider#onSendSessionModifyResponse */\n    public abstract void onSendSessionModifyResponse(VideoProfile responseProfile);\n    /** @see Connection.VideoProvider#onRequestCameraCapabilities */\n    public abstract void onRequestCameraCapabilities();\n    /** @see Connection.VideoProvider#onRequestCallDataUsage */\n    public abstract void onRequestCallDataUsage();\n    /** @see Connection.VideoProvider#onSetPauseImage */\n    public abstract void onSetPauseImage(String uri);\n    /** @see Connection.VideoProvider#receiveSessionModifyRequest */\n    public void receiveSessionModifyRequest(VideoProfile VideoProfile) {\n        if (mCallback != null) {\n            try {\n                mCallback.receiveSessionModifyRequest(VideoProfile);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#receiveSessionModifyResponse */\n    public void receiveSessionModifyResponse(\n            int status, VideoProfile requestedProfile, VideoProfile responseProfile) {\n        if (mCallback != null) {\n            try {\n                mCallback.receiveSessionModifyResponse(status, requestedProfile, responseProfile);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCallSessionEvent */\n    public void handleCallSessionEvent(int event) {\n", "answers": ["        if (mCallback != null) {"], "length": 587, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "eda13b1d2aeeeac450c99e7b1bd4ab5d92449eda79b54da5"}
{"input": "", "context": "using Server;\nusing System;\nusing Server.Mobiles;\nusing Server.Gumps;\nusing System.Collections.Generic;\nusing Server.Engines.Quests;\nusing Server.Network;\nusing Server.ContextMenus;\nusing Server.Multis;\nnamespace Server.Items\n{\n    public class MyrmidexRewardBag : Backpack\n    {\n        public MyrmidexRewardBag()\n        {\n            Hue = BaseReward.RewardBagHue();\n            switch (Utility.Random(4))\n            {\n                default:\n                case 0: DropItem(new RecipeScroll(Utility.RandomMinMax(900, 905))); break;\n                case 1: DropItem(new EodonTribeRewardTitleToken()); break;\n                case 2: DropItem(new RecipeScroll(455)); break;\n                case 3: DropItem(new MoonstoneCrystal()); break;\n            }\n        }\n        public MyrmidexRewardBag(Serial serial)\n            : base(serial)\n\t\t{\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t\twriter.Write(0);\n\t\t}\n\t\t\n\t\tpublic override void Deserialize(GenericReader reader)\n\t\t{\n\t\t\tbase.Deserialize(reader);\n\t\t\tint version = reader.ReadInt();\n\t\t}\n    }\n    public class EodonianRewardBag : Backpack\n    {\n        public EodonianRewardBag()\n        {\n            Hue = BaseReward.RewardBagHue();\n            switch (Utility.Random(4))\n            {\n                default:\n                case 0: DropItem(new MonsterStatuette(MonsterStatuetteType.SakkhranBirdOfPrey)); break;\n                case 1: DropItem(new EodonTribeRewardTitleToken()); break;\n                case 2: DropItem(new RecipeScroll(1000)); break;\n                case 3:\n                    if (0.5 > Utility.RandomDouble())\n                        DropItem(new RawMoonstoneLargeAddonDeed());\n                    else\n                        DropItem(new RawMoonstoneSmallAddonDeed());\n                    break;\n            }\n        }\n        public EodonianRewardBag(Serial serial)\n            : base(serial)\n        {\n        }\n        public override void Serialize(GenericWriter writer)\n        {\n            base.Serialize(writer);\n            writer.Write(0);\n        }\n        public override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n            int version = reader.ReadInt();\n        }\n    }\n\tpublic class MoonstoneCrystal : Item, ISecurable\n\t{\n\t\tpublic static Dictionary<int, Point3D> Locations { get; set; }\n        private SecureLevel m_SecureLevel;\n     \n\t\tpublic static void Initialize()\n\t\t{\n\t\t\tLocations = new Dictionary<int, Point3D>();\n\t\t\t\n\t\t\tLocations[1156706] = new Point3D(642, 1721, 40); // Barako Village\n            Locations[1156707] = new Point3D(701, 2106, 40); // Jukari Village\n\t\t\tLocations[1156708] = new Point3D(355, 1873, 0);  // Kurak Village\n\t\t\tLocations[1156709] = new Point3D(552, 1471, 40); // Sakkhra Village\n\t\t\tLocations[1156710] = new Point3D(412, 1595, 40); // Urali Village\n\t\t\tLocations[1156711] = new Point3D(167, 1800, 80); // Barrab Village\n\t\t\tLocations[1156712] = new Point3D(929, 2016, 50); // Shadowguard\n\t\t\tLocations[1156713] = new Point3D(731, 1603, 40); // The great ape cave\n\t\t\tLocations[1156714] = new Point3D(878, 2105, 40); // The Volcano\n\t\t\tLocations[1156715] = new Point3D(390, 1690, 40); // Dragon Turtle Habitat\n\t\t\tLocations[1156716] = new Point3D(269, 1726, 80); // Britannian Encampment\n\t\t}\n        [CommandProperty(AccessLevel.GameMaster)]\n        public SecureLevel Level\n        {\n            get\n            {\n                return this.m_SecureLevel;\n            }\n            set\n            {\n                this.m_SecureLevel = value;\n            }\n        }\n \n        public override void GetContextMenuEntries(Mobile from, List<ContextMenuEntry> list)\n        {\n            base.GetContextMenuEntries(from, list);\n            SetSecureLevelEntry.AddTo(from, this, list);\n        }\n     \n        public override int LabelNumber { get { return 1124143; } } // Moonstone Crystal\n\t\t\n\t\t[Constructable]\n\t\tpublic MoonstoneCrystal() : base(40123)\n\t\t{\n\t\t}\n\t\t\n\t\tpublic override void OnDoubleClick(Mobile from)\n\t\t{\n\t\t\tif((IsLockedDown || IsSecure) && from.InRange(GetWorldLocation(), 3))\n\t\t\t{\n\t\t\t\tfrom.SendGump(new InternalGump(from as PlayerMobile, this));\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate class InternalGump : Gump\n\t\t{\n\t\t\tpublic Item Moonstone { get; set; }\n            public PlayerMobile User { get; set; }\n\t\t\t\n\t\t\tpublic InternalGump(PlayerMobile pm, Item moonstone) : base(75, 75)\n\t\t\t{\n\t\t\t\tMoonstone = moonstone;\n                User = pm;\n                AddGumpLayout();\n\t\t\t}\n\t\t\t\n\t\t\tpublic void AddGumpLayout()\n\t\t\t{\n\t\t\t\tAddBackground( 0, 0, 400, 400, 9270 );\n\t\t\t\t\n\t\t\t\tAddHtmlLocalized( 0, 15, 400, 16, 1154645, \"#1156704\", 0xFFFF, false, false ); // Select your destination:\n                ColUtility.For<int, Point3D>(MoonstoneCrystal.Locations, (i, key, value) =>\n\t\t\t\t{\n\t\t\t\t\tAddHtmlLocalized(60, 45 + (i * 25), 250, 16, key, 0xFFFF, false, false);\n\t\t\t\t\tAddButton(20, 50 + (i * 25), 2117, 2118, key, GumpButtonType.Reply, 0);\n\t\t\t\t});\n\t\t\t}\n            public override void OnResponse(NetState state, RelayInfo info)\n            {\n                if (info.ButtonID > 0)\n                {\n                    int id = info.ButtonID;\n                    if (MoonstoneCrystal.Locations.ContainsKey(id))\n                    {\n                        Point3D p = MoonstoneCrystal.Locations[id];\n                        if (CheckTravel(p))\n                        {\n                            BaseCreature.TeleportPets(User, p, Map.TerMur);\n                            User.Combatant = null;\n                            User.Warmode = false;\n                            User.Hidden = true;\n                            User.MoveToWorld(p, Map.TerMur);\n                            Effects.PlaySound(p, Map.TerMur, 0x1FE);\n                        }\n                    }\n                }\n            }\n\t\t\t\n\t\t\tprivate bool CheckTravel(Point3D p)\n\t\t\t{\n\t\t\t\tif ( !User.InRange( Moonstone.GetWorldLocation(), 1 ) || User.Map != Moonstone.Map )\n\t\t\t\t{\n\t\t\t\t\tUser.SendLocalizedMessage( 1019002 ); // You are too far away to use the gate.\n\t\t\t\t}\n\t\t\t\t/* CEO - 02/20/06 - Removed to allow Reds access to other lands\n\t\t\t\telse if ( User.Murderer )\n\t\t\t\t{\n\t\t\t\t\tUser.SendLocalizedMessage( 1019004 ); // You are not allowed to travel there.\n\t\t\t\t}\n\t\t\t\t */\n\t\t\t\telse if ( Server.Factions.Sigil.ExistsOn( User ) )\n\t\t\t\t{\n\t\t\t\t\tUser.SendLocalizedMessage( 1019004 ); // You are not allowed to travel there.\n\t\t\t\t}\n\t\t\t\telse if ( User.Criminal )\n\t\t\t\t{\n\t\t\t\t\tUser.SendLocalizedMessage( 1005561, \"\", 0x22 ); // Thou'rt a criminal and cannot escape so easily.\n\t\t\t\t}\n\t\t\t\telse if ( Server.Spells.SpellHelper.CheckCombat( User ) )\n\t\t\t\t{\n\t\t\t\t\tUser.SendLocalizedMessage( 1005564, \"\", 0x22 ); // Wouldst thou flee during the heat of battle??\n\t\t\t\t}\n\t\t\t\telse if ( User.Spell != null )\n\t\t\t\t{\n\t\t\t\t\tUser.SendLocalizedMessage( 1049616 ); // You are too busy to do that at the moment.\n\t\t\t\t}\n\t\t\t\telse if ( User.Map == Map.TerMur && User.InRange( p, 1 ) )\n\t\t\t\t{\n\t\t\t\t\tUser.SendLocalizedMessage( 1019003 ); // You are already there.\n\t\t\t\t}\n                else\n                    return true;\n                return false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic MoonstoneCrystal(Serial serial) : base(serial)\n\t\t{\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t\twriter.Write(0);\n            writer.Write((int)this.m_SecureLevel);  // At first, need to save world with this line before next starting.\n\t\t}\n\t\t\n\t\tpublic override void Deserialize(GenericReader reader)\n\t\t{\n\t\t\tbase.Deserialize(reader);\n\t\t\tint version = reader.ReadInt();\n            this.m_SecureLevel = (SecureLevel)reader.ReadInt();  // If you have not saved world with above line in Serialize(), you should not add this line.\n\t\t}\n\t}\n\t\n    [TypeAlias(\"Server.Items.KotlPowerCoil\")]\n\tpublic class KotlPowerCore : Item\n\t{\n        public override int LabelNumber { get { return 1124179; } } // Kotl Power Core\n\t\t[Constructable]\n\t\tpublic KotlPowerCore() : base(40147)\n\t\t{\n\t\t}\n\t\t\n\t\tpublic KotlPowerCore(Serial serial) : base(serial)\n\t\t{\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t\twriter.Write(0);\n\t\t}\n\t\t\n\t\tpublic override void Deserialize(GenericReader reader)\n\t\t{\n\t\t\tbase.Deserialize(reader);\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\t\n\tpublic class EodonianWallMap : Item\n\t{\n\t\tpublic override int LabelNumber { get { return 1156690; } } // Wall Map of Eodon\n\t\t[Constructable]\n\t\tpublic EodonianWallMap() : base(11635)\n\t\t{\n\t\t}\n\t\t\n\t\tpublic override void OnDoubleClick(Mobile from)\n\t\t{\n\t\t\tif(from.InRange(GetWorldLocation(), 5))\n\t\t\t{\n", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "length": 854, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "93191c3c840c04430c2e0222e3643013a8af4e2b709e6f95"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n#\n# This file is part of Invenio.\n# Copyright (C) 2014, 2015 CERN.\n#\n# Invenio is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# Invenio is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Invenio; if not, write to the Free Software Foundation, Inc.,\n# 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n\"\"\"Record models.\"\"\"\nfrom flask import current_app\nfrom intbitset import intbitset\nfrom sqlalchemy.ext.declarative import declared_attr\nfrom werkzeug import cached_property\nfrom invenio.ext.sqlalchemy import db, utils\nclass Record(db.Model):\n    \"\"\"Represent a record object inside the SQL database.\"\"\"\n    __tablename__ = 'bibrec'\n    id = db.Column(\n        db.MediumInteger(8, unsigned=True), primary_key=True,\n        nullable=False, autoincrement=True)\n    creation_date = db.Column(\n        db.DateTime, nullable=False,\n        server_default='1900-01-01 00:00:00',\n        index=True)\n    modification_date = db.Column(\n        db.DateTime, nullable=False,\n        server_default='1900-01-01 00:00:00',\n        index=True)\n    master_format = db.Column(\n        db.String(16), nullable=False,\n        server_default='marc')\n    additional_info = db.Column(db.JSON)\n    # FIXME: remove this from the model and add them to the record class, all?\n    @property\n    def deleted(self):\n        \"\"\"Return True if record is marked as deleted.\"\"\"\n        from invenio.legacy.bibrecord import get_fieldvalues\n        # record exists; now check whether it isn't marked as deleted:\n        dbcollids = get_fieldvalues(self.id, \"980__%\")\n        return (\"DELETED\" in dbcollids) or \\\n               (current_app.config.get('CFG_CERN_SITE')\n                and \"DUMMY\" in dbcollids)\n    @staticmethod\n    def _next_merged_recid(recid):\n        \"\"\"Return the ID of record merged with record with ID = recid.\"\"\"\n        from invenio.legacy.bibrecord import get_fieldvalues\n        merged_recid = None\n        for val in get_fieldvalues(recid, \"970__d\"):\n            try:\n                merged_recid = int(val)\n                break\n            except ValueError:\n                pass\n        if not merged_recid:\n            return None\n        else:\n            return merged_recid\n    @cached_property\n    def merged_recid(self):\n        \"\"\"Return record object with which the given record has been merged.\n        :param recID: deleted record recID\n        :return: merged record recID\n        \"\"\"\n        return Record._next_merged_recid(self.id)\n    @property\n    def merged_recid_final(self):\n        \"\"\"Return the last record from hierarchy merged with this one.\"\"\"\n        cur_id = self.id\n        next_id = Record._next_merged_recid(cur_id)\n        while next_id:\n            cur_id = next_id\n            next_id = Record._next_merged_recid(cur_id)\n        return cur_id\n    @cached_property\n    def is_restricted(self):\n        \"\"\"Return True is record is restricted.\"\"\"\n        from invenio.modules.collections.cache import get_all_restricted_recids\n        return self.id in get_all_restricted_recids() or self.is_processed\n    @cached_property\n    def is_processed(self):\n        \"\"\"Return True is recods is processed (not in any collection).\"\"\"\n        from invenio.modules.collections.cache import is_record_in_any_collection\n        return not is_record_in_any_collection(self.id,\n                                               recreate_cache_if_needed=False)\n    @classmethod\n    def filter_time_interval(cls, datetext, column='c'):\n        \"\"\"Return filter based on date text and column type.\"\"\"\n        column = cls.creation_date if column == 'c' else cls.modification_date\n        parts = datetext.split('->')\n        where = []\n        if len(parts) == 2:\n            if parts[0] != '':\n                where.append(column >= parts[0])\n            if parts[1] != '':\n                where.append(column <= parts[1])\n        else:\n            where.append(column.like(datetext + '%'))\n        return where\n    @classmethod\n    def allids(cls):\n        \"\"\"Return all existing record ids.\"\"\"\n        return intbitset(db.session.query(cls.id).all())\nclass RecordMetadata(db.Model):\n    \"\"\"Represent a json record inside the SQL database.\"\"\"\n    __tablename__ = 'record_json'\n    id = db.Column(\n        db.MediumInteger(8, unsigned=True),\n        db.ForeignKey(Record.id),\n        primary_key=True,\n        nullable=False,\n        autoincrement=True\n    )\n    json = db.Column(db.JSON, nullable=False)\n    record = db.relationship(Record, backref='record_json')\nclass BibxxxMixin(utils.TableNameMixin):\n    \"\"\"Mixin for Bibxxx tables.\"\"\"\n    id = db.Column(db.MediumInteger(8, unsigned=True),\n                   primary_key=True,\n                   autoincrement=True)\n    tag = db.Column(db.String(6), nullable=False, index=True,\n                    server_default='')\n    value = db.Column(db.Text(35), nullable=False,\n                      index=True)\nclass BibrecBibxxxMixin(utils.TableFromCamelNameMixin):\n    \"\"\"Mixin for BibrecBibxxx tables.\"\"\"\n    @declared_attr\n    def _bibxxx(cls):\n        return globals()[cls.__name__[6:]]\n    @declared_attr\n    def id_bibrec(cls):\n        return db.Column(db.MediumInteger(8, unsigned=True),\n                         db.ForeignKey(Record.id), nullable=False,\n                         primary_key=True, index=True, server_default='0')\n    @declared_attr\n    def id_bibxxx(cls):\n        return db.Column(db.MediumInteger(8, unsigned=True),\n                         db.ForeignKey(cls._bibxxx.id), nullable=False,\n                         primary_key=True, index=True, server_default='0')\n    field_number = db.Column(db.SmallInteger(5, unsigned=True),\n                             primary_key=True)\n    @declared_attr\n    def bibrec(cls):\n        return db.relationship(Record)\n    @declared_attr\n    def bibxxx(cls):\n        return db.relationship(cls._bibxxx, backref='bibrecs')\nmodels = []\nfor idx in range(100):\n    Bibxxx = \"Bib{0:02d}x\".format(idx)\n    globals()[Bibxxx] = type(Bibxxx, (db.Model, BibxxxMixin), {})\n    BibrecBibxxx = \"BibrecBib{0:02d}x\".format(idx)\n    globals()[BibrecBibxxx] = type(BibrecBibxxx,\n                                   (db.Model, BibrecBibxxxMixin), {})\n    models += [Bibxxx, BibrecBibxxx]\n__all__ = tuple([\n    'Record',\n    'RecordMetadata',\n", "answers": ["] + models)"], "length": 609, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "588825a49d4fdd244fc2fb3cce5086b306490b945a3bc787"}
{"input": "", "context": "# This file is part of xmpp-backends (https://github.com/mathiasertl/xmpp-backends).\n#\n# xmpp-backends is free software: you can redistribute it and/or modify it under the terms of the GNU General\n# Public License as published by the Free Software Foundation, either version 3 of the License, or (at your\n# option) any later version.\n#\n# xmpp-backends is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n# for more details.\n#\n# You should have received a copy of the GNU General Public License along with xmpp-backends.  If not, see\n# <http://www.gnu.org/licenses/>.\nimport ipaddress\nimport logging\nimport time\nfrom datetime import datetime\nimport pytz\nfrom .base import BackendError\nfrom .base import UserExists\nfrom .base import UserNotFound\nfrom .base import UserSession\nfrom .base import XmppBackendBase\nfrom .constants import CONNECTION_XMPP\nlog = logging.getLogger(__name__)\nclass DummyBackend(XmppBackendBase):\n    \"\"\"A dummy backend for development using Djangos caching framework.\n    By default, Djangos caching framework uses in-memory data structures, so every registration will be\n    removed if you restart the development server.  You can configure a different cache (e.g. memcached), see\n    `Django's cache framework <https://docs.djangoproject.com/en/dev/topics/cache/>`_ for details.\n    :params domains: A list of domains to serve.\n    \"\"\"\n    library = 'django.core.cache.cache'\n    def __init__(self, domains):\n        super(DummyBackend, self).__init__()\n        self._domains = domains\n    def get_api_version(self):\n        return (1, 0)\n    def user_exists(self, username, domain):\n        if domain not in self._domains:\n            return False\n        user = '%s@%s' % (username, domain)\n        return self.module.get(user) is not None\n    def user_sessions(self, username, domain):\n        user = '%s@%s' % (username, domain)\n        return self.module.get(user, {}).get('sessions', set())\n    def start_user_session(self, username, domain, resource, **kwargs):\n        \"\"\"Method to add a user session for debugging.\n        Accepted parameters are the same as to the constructor of :py:class:`~xmpp_backends.base.UserSession`.\n        \"\"\"\n        kwargs.setdefault('uptime', pytz.utc.localize(datetime.utcnow()))\n        kwargs.setdefault('priority', 0)\n        kwargs.setdefault('status', 'online')\n        kwargs.setdefault('status_text', '')\n        kwargs.setdefault('connection_type', CONNECTION_XMPP)\n        kwargs.setdefault('encrypted', True)\n        kwargs.setdefault('compressed', False)\n        kwargs.setdefault('ip_address', '127.0.0.1')\n        if isinstance(kwargs['ip_address'], str):\n            kwargs['ip_address'] = ipaddress.ip_address(kwargs['ip_address'])\n        user = '%s@%s' % (username, domain)\n        session = UserSession(self, username, domain, resource, **kwargs)\n        data = self.module.get(user)\n        if data is None:\n            raise UserNotFound(username, domain, resource)\n        data.setdefault('sessions', set())\n        if isinstance(data['sessions'], list):\n            # Cast old data to set\n            data['sessions'] = set(data['sessions'])\n        data['sessions'].add(session)\n        self.module.set(user, data)\n        all_sessions = self.module.get('all_sessions', set())\n        all_sessions.add(session)\n        self.module.set('all_sessions', all_sessions)\n    def stop_user_session(self, username, domain, resource, reason=''):\n        user = '%s@%s' % (username, domain)\n        data = self.module.get(user)\n        if data is None:\n            raise UserNotFound(username, domain)\n        data['sessions'] = set([d for d in data.get('sessions', []) if d.resource != resource])\n        self.module.set(user, data)\n        all_sessions = self.module.get('all_sessions', set())\n        all_sessions = set([s for s in all_sessions if s.jid != user])\n        self.module.set('all_sessions', all_sessions)\n    def create_user(self, username, domain, password, email=None):\n        if domain not in self._domains:\n            raise BackendError('Backend does not serve domain %s.' % domain)\n        user = '%s@%s' % (username, domain)\n        log.debug('Create user: %s (%s)', user, password)\n        data = self.module.get(user)\n        if data is None:\n            data = {\n                'pass': password,\n                'last_status': (time.time(), 'Registered'),\n                'sessions': set(),\n            }\n            if email is not None:\n                data['email'] = email\n            self.module.set(user, data)\n            # maintain list of users in cache\n            users = self.module.get('all_users', set())\n            users.add(user)\n            self.module.set('all_users', users)\n        else:\n            raise UserExists()\n    def check_password(self, username, domain, password):\n        user = '%s@%s' % (username, domain)\n        log.debug('Check pass: %s -> %s', user, password)\n        data = self.module.get(user)\n        if data is None:\n            return False\n        else:\n            return data['pass'] == password\n    def check_email(self, username, domain, email):\n        user = '%s@%s' % (username, domain)\n        log.debug('Check email: %s --> %s', user, email)\n        data = self.module.get(user)\n        if data is None:\n            return False\n        else:\n            return data['email'] == email\n    def set_password(self, username, domain, password):\n        user = '%s@%s' % (username, domain)\n        log.debug('Set pass: %s -> %s', user, password)\n        data = self.module.get(user)\n        if data is None:\n            raise UserNotFound(username, domain)\n        else:\n            data['pass'] = password\n            self.module.set(user, data)\n    def set_email(self, username, domain, email):\n        user = '%s@%s' % (username, domain)\n        log.debug('Set email: %s --> %s', user, email)\n        data = self.module.get(user)\n        if data is None:\n            raise UserNotFound(username, domain)\n        else:\n            data['email'] = email\n            self.module.set(user, data)\n    def get_last_activity(self, username, domain):\n        user = '%s@%s' % (username, domain)\n        data = self.module.get(user)\n        if data is None:\n            raise UserNotFound(username, domain)\n        else:\n            return datetime.utcfromtimestamp(data['last_status'][0])\n    def set_last_activity(self, username, domain, status='', timestamp=None):\n        user = '%s@%s' % (username, domain)\n        if timestamp is None:\n            timestamp = time.time()\n        else:\n            timestamp = self.datetime_to_timestamp(timestamp)\n        data = self.module.get(user)\n        if data is None:\n            pass  # NOTE: real APIs provide no error either :-/\n        else:\n            data['last_status'] = (timestamp, status)\n            self.module.set(user, data)\n    def block_user(self, username, domain):\n        # overwritten so we pass tests\n        self.set_password(username, domain, self.get_random_password())\n    def all_domains(self):\n        \"\"\"Just returns the domains passed to the constructor.\"\"\"\n        return list(self._domains)\n    def all_users(self, domain):\n        return set([u.split('@')[0] for u in self.module.get('all_users', set())\n                    if u.endswith('@%s' % domain)])\n    def all_user_sessions(self):\n        return self.module.get('all_sessions', set())\n    def remove_user(self, username, domain):\n", "answers": ["        user = '%s@%s' % (username, domain)"], "length": 744, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "a94d83a5503d88913110cc5d278d085fdccea0e30d2e9d9b"}
{"input": "", "context": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# License: MIT (see LICENSE file provided)\n# vim600: fdm=marker tabstop=4 shiftwidth=4 expandtab ai\n#\n# This file has been modified by Manuel Saelices <msaelices _at_ yaco.es> \n# and belongs to David JEAN LOUIS <izimobil@gmail.com>.\n#\n# You can find more information about polib at http://code.google.com/p/polib/\n#\n# Description {{{\n\"\"\"\n**polib** allows you to manipulate, create, modify gettext files (pot, po\nand mo files).  You can load existing files, iterate through it's entries,\nadd, modify entries, comments or metadata, etc... or create new po files\nfrom scratch.\n**polib** provides a simple and pythonic API, exporting only three\nconvenience functions (*pofile*, *mofile* and *detect_encoding*), and the\nfour core classes, *POFile*, *MOFile*, *POEntry* and *MOEntry* for creating\nnew files/entries.\n**Basic example**:\n>>> import polib\n>>> # load an existing po file\n>>> po = polib.pofile('tests/test_utf8.po')\n>>> for entry in po:\n...     # do something with entry...\n...     pass\n>>> # add an entry\n>>> entry = polib.POEntry(msgid='Welcome', msgstr='Bienvenue')\n>>> entry.occurrences = [('welcome.py', '12'), ('anotherfile.py', '34')]\n>>> po.append(entry)\n>>> # to save our modified po file:\n>>> # po.save()\n>>> # or you may want to compile the po file\n>>> # po.save_as_mofile('tests/test_utf8.mo')\n\"\"\"\n# }}}\n__author__    = 'David JEAN LOUIS <izimobil@gmail.com>'\n__version__   = '0.3.1'\n# dependencies {{{\ntry:\n    import struct\n    import textwrap\n    import warnings\nexcept ImportError, exc:\n    raise ImportError('polib requires python 2.3 or later with the standard' \\\n        ' modules \"struct\", \"textwrap\" and \"warnings\" (details: %s)' % exc)\n# }}}\n__all__ = ['pofile', 'POFile', 'POEntry', 'mofile', 'MOFile', 'MOEntry',\n           'detect_encoding', 'quote', 'unquote']\n# shortcuts for performance improvement {{{\n# yes, yes, this is quite ugly but *very* efficient\n_dictget    = dict.get\n_listappend = list.append\n_listpop    = list.pop\n_strjoin    = str.join\n_strsplit   = str.split\n_strstrip   = str.strip\n_strreplace = str.replace\n_textwrap   = textwrap.wrap\n# }}}\ndefault_encoding = 'utf-8'\ndef pofile(fpath, **kwargs):\n    \"\"\"\n    Convenience function that parse the po/pot file *fpath* and return\n    a POFile instance.\n    **Keyword arguments**:\n      - *fpath*: string, full or relative path to the po/pot file to parse\n      - *wrapwidth*: integer, the wrap width, only useful when -w option was\n        passed to xgettext (optional, default to 78)\n      - *autodetect_encoding*: boolean, if set to False the function will\n        not try to detect the po file encoding (optional, default to True)\n      - *encoding*: string, an encoding, only relevant if autodetect_encoding\n        is set to False\n    **Example**:\n    >>> import polib\n    >>> po = polib.pofile('tests/test_utf8.po')\n    >>> po #doctest: +ELLIPSIS\n    <POFile instance at ...>\n    >>> import os, tempfile\n    >>> for fname in ['test_iso-8859-15.po', 'test_utf8.po']:\n    ...     orig_po = polib.pofile('tests/'+fname)\n    ...     tmpf = tempfile.NamedTemporaryFile().name\n    ...     orig_po.save(tmpf)\n    ...     try:\n    ...         new_po = polib.pofile(tmpf)\n    ...         for old, new in zip(orig_po, new_po):\n    ...             if old.msgid != new.msgid:\n    ...                 old.msgid\n    ...                 new.msgid\n    ...             if old.msgstr != new.msgstr:\n    ...                 old.msgid\n    ...                 new.msgid\n    ...     finally:\n    ...         os.unlink(tmpf)\n    \"\"\"\n    # pofile {{{\n    if _dictget(kwargs, 'autodetect_encoding', True) == True:\n        enc = detect_encoding(fpath)\n    else:\n        enc = _dictget(kwargs, 'encoding', default_encoding)\n    parser = _POFileParser(fpath)\n    instance = parser.parse()\n    instance.wrapwidth = _dictget(kwargs, 'wrapwidth', 78)\n    instance.encoding  = enc\n    return instance\n    # }}}\ndef mofile(fpath, **kwargs):\n    \"\"\"\n    Convenience function that parse the mo file *fpath* and return\n    a MOFile instance.\n    **Keyword arguments**:\n      - *fpath*: string, full or relative path to the mo file to parse\n      - *wrapwidth*: integer, the wrap width, only useful when -w option was\n        passed to xgettext to generate the po file that was used to format\n        the mo file (optional, default to 78)\n      - *autodetect_encoding*: boolean, if set to False the function will\n        not try to detect the po file encoding (optional, default to True)\n      - *encoding*: string, an encoding, only relevant if autodetect_encoding\n        is set to False\n    **Example**:\n    >>> import polib\n    >>> mo = polib.mofile('tests/test_utf8.mo')\n    >>> mo #doctest: +ELLIPSIS\n    <MOFile instance at ...>\n    >>> import os, tempfile\n    >>> for fname in ['test_iso-8859-15.mo', 'test_utf8.mo']:\n    ...     orig_mo = polib.mofile('tests/'+fname)\n    ...     tmpf = tempfile.NamedTemporaryFile().name\n    ...     orig_mo.save(tmpf)\n    ...     try:\n    ...         new_mo = polib.mofile(tmpf)\n    ...         for old, new in zip(orig_mo, new_mo):\n    ...             if old.msgid != new.msgid:\n    ...                 old.msgstr\n    ...                 new.msgstr\n    ...     finally:\n    ...         os.unlink(tmpf)\n    \"\"\"\n    # mofile {{{\n    if _dictget(kwargs, 'autodetect_encoding', True) == True:\n        enc = detect_encoding(fpath)\n    else:\n        enc = _dictget(kwargs, 'encoding', default_encoding)\n    parser = _MOFileParser(fpath)\n    instance = parser.parse()\n    instance.wrapwidth = _dictget(kwargs, 'wrapwidth', 78)\n    instance.encoding = enc\n    return instance\n    # }}}\ndef detect_encoding(fpath):\n    \"\"\"\n    Try to detect the encoding used by the file *fpath*. The function will\n    return polib default *encoding* if it's unable to detect it.\n    **Keyword argument**:\n      - *fpath*: string, full or relative path to the mo file to parse.\n    **Examples**:\n    >>> print detect_encoding('tests/test_noencoding.po')\n    utf-8\n    >>> print detect_encoding('tests/test_utf8.po')\n    UTF-8\n    >>> print detect_encoding('tests/test_utf8.mo')\n    UTF-8\n    >>> print detect_encoding('tests/test_iso-8859-15.po')\n    ISO_8859-15\n    >>> print detect_encoding('tests/test_iso-8859-15.mo')\n    ISO_8859-15\n    \"\"\"\n    # detect_encoding {{{\n    import re\n    rx = re.compile(r'\"?Content-Type:.+? charset=([\\w_\\-:\\.]+)')\n    f = open(fpath)\n    for l in f:\n        match = rx.search(l)\n        if match:\n            f.close()\n            return _strstrip(match.group(1))\n    f.close()\n    return default_encoding\n    # }}}\ndef quote(st):\n    \"\"\"\n    Quote and return the given string *st*.\n    **Examples**:\n    >>> quote('\\\\t and \\\\n and \\\\r and \" and \\\\\\\\')\n    '\\\\\\\\t and \\\\\\\\n and \\\\\\\\r and \\\\\\\\\" and \\\\\\\\\\\\\\\\'\n    \"\"\"\n    # quote {{{\n    st = _strreplace(st, '\\\\', r'\\\\')\n    st = _strreplace(st, '\\t', r'\\t')\n    st = _strreplace(st, '\\r', r'\\r')\n    st = _strreplace(st, '\\n', r'\\n')\n    st = _strreplace(st, '\\\"', r'\\\"')\n    return st\n    # }}}\ndef unquote(st):\n    \"\"\"\n    Unquote and return the given string *st*.\n    **Examples**:\n    >>> unquote('\\\\\\\\t and \\\\\\\\n and \\\\\\\\r and \\\\\\\\\" and \\\\\\\\\\\\\\\\')\n    '\\\\t and \\\\n and \\\\r and \" and \\\\\\\\'\n    \"\"\"\n    # unquote {{{\n    st = _strreplace(st, r'\\\"', '\"')\n    st = _strreplace(st, r'\\n', '\\n')\n    st = _strreplace(st, r'\\r', '\\r')\n    st = _strreplace(st, r'\\t', '\\t')\n    st = _strreplace(st, r'\\\\', '\\\\')\n    return st\n    # }}}\nclass _BaseFile(list):\n    \"\"\"\n    Common parent class for POFile and MOFile classes.\n    This class must **not** be instanciated directly.\n    \"\"\"\n    # class _BaseFile {{{\n    def __init__(self, fpath=None, wrapwidth=78, encoding=default_encoding):\n        \"\"\"\n        Constructor.\n        **Keyword arguments**:\n          - *fpath*: string, path to po or mo file\n          - *wrapwidth*: integer, the wrap width, only useful when -w option\n            was passed to xgettext to generate the po file that was used to\n            format the mo file, default to 78 (optional).\n        \"\"\"\n        list.__init__(self)\n        # the opened file handle\n        self.fpath = fpath\n        # the width at which lines should be wrapped\n        self.wrapwidth = wrapwidth\n        # the file encoding\n        self.encoding = encoding\n        # header\n        self.header = ''\n        # both po and mo files have metadata\n        self.metadata = {}\n        self.metadata_is_fuzzy = 0\n    def __str__(self):\n        \"\"\"String representation of the file.\"\"\"\n        ret = []\n        entries = [self.metadata_as_entry()] + \\\n                  [e for e in self if not e.obsolete]\n        for entry in entries:\n            _listappend(ret, entry.__str__(self.wrapwidth))\n        for entry in self.obsolete_entries():\n            _listappend(ret, entry.__str__(self.wrapwidth))\n        return _strjoin('\\n', ret)\n    def __repr__(self):\n        \"\"\"Return the official string representation of the object.\"\"\"\n        return '<%s instance at %x>' % (self.__class__.__name__, id(self))\n    def metadata_as_entry(self):\n        \"\"\"Return the metadata as an entry\"\"\"\n        e = POEntry(msgid='')\n        mdata = self.ordered_metadata()\n        if mdata:\n            strs = []\n            for name, value in mdata:\n                # Strip whitespace off each line in a multi-line entry\n                value = _strjoin('\\n', [_strstrip(v)\n                                        for v in _strsplit(value, '\\n')])\n                _listappend(strs, '%s: %s' % (name, value))\n            e.msgstr = _strjoin('\\n', strs) + '\\n'\n        return e\n    def save(self, fpath=None, repr_method='__str__'):\n        \"\"\"\n        Save the po file to file *fpath* if no file handle exists for\n        the object. If there's already an open file and no fpath is\n        provided, then the existing file is rewritten with the modified\n        data.\n        **Keyword arguments**:\n          - *fpath*: string, full or relative path to the file.\n          - *repr_method*: string, the method to use for output.\n        \"\"\"\n        if self.fpath is None and fpath is None:\n            raise IOError('You must provide a file path to save() method')\n        contents = getattr(self, repr_method)()\n        if fpath is None:\n            fpath = self.fpath\n        mode = 'w'\n        if repr_method == 'to_binary':\n            mode += 'b'\n        fhandle = open(fpath, mode)\n        fhandle.write(contents)\n        fhandle.close()\n    def find(self, st, by='msgid'):\n        \"\"\"\n        Find entry which msgid (or property identified by the *by*\n        attribute) matches the string *st*.\n        **Keyword arguments**:\n          - *st*: string, the string to search for\n          - *by*: string, the comparison attribute\n        **Examples**:\n        >>> po = pofile('tests/test_utf8.po')\n        >>> entry = po.find('Thursday')\n        >>> entry.msgstr\n        'Jueves'\n        >>> entry = po.find('Some unexistant msgid')\n        >>> entry is None\n        True\n        >>> entry = po.find('Jueves', 'msgstr')\n        >>> entry.msgid\n        'Thursday'\n        \"\"\"\n        try:\n            return [e for e in self if getattr(e, by) == st][0]\n        except IndexError:\n            return None\n    def ordered_metadata(self):\n        \"\"\"\n        Convenience method that return the metadata ordered. The return\n        value is list of tuples (metadata name, metadata_value).\n        \"\"\"\n        # copy the dict first\n        metadata = self.metadata.copy()\n        data_order = [\n            'Project-Id-Version',\n            'Report-Msgid-Bugs-To',\n            'POT-Creation-Date',\n            'PO-Revision-Date',\n            'Last-Translator',\n            'Language-Team',\n            'MIME-Version',\n            'Content-Type',\n            'Content-Transfer-Encoding'\n        ]\n        ordered_data = []\n        for data in data_order:\n            try:\n                value = metadata.pop(data)\n                _listappend(ordered_data, (data, value))\n            except KeyError:\n                pass\n        # the rest of the metadata won't be ordered there are no specs for this\n        keys = metadata.keys()\n        keys.sort()\n        for data in keys:\n            value = metadata[data]\n            _listappend(ordered_data, (data, value))\n        return ordered_data\n    def to_binary(self):\n        \"\"\"Return the mofile binary representation.\"\"\"\n        import struct\n        import array\n        output = ''\n        offsets = []\n        ids = strs = ''\n        entries = self.translated_entries()\n        # the keys are sorted in the .mo file\n        def cmp(_self, other):\n            if _self.msgid > other.msgid:\n                return 1\n            elif _self.msgid < other.msgid:\n                return -1\n            else:\n                return 0\n        entries.sort(cmp)\n        # add metadata entry\n        mentry = self.metadata_as_entry()\n        mentry.msgstr = _strreplace(mentry.msgstr, '\\\\n', '').lstrip() + '\\n'\n        entries = [mentry] + entries\n        entries_len = len(entries)\n        for e in entries:\n            # For each string, we need size and file offset.  Each string is\n            # NUL terminated; the NUL does not count into the size.\n            msgid = e._decode(e.msgid)\n            msgstr = e._decode(e.msgstr)\n            offsets.append((len(ids), len(msgid), len(strs), len(msgstr)))\n            ids  += msgid  + '\\0'\n            strs += msgstr + '\\0'\n        # The header is 7 32-bit unsigned integers.\n        keystart = 7*4+16*entries_len\n        # and the values start after the keys\n        valuestart = keystart + len(ids)\n        koffsets = []\n        voffsets = []\n        # The string table first has the list of keys, then the list of values.\n        # Each entry has first the size of the string, then the file offset.\n        for o1, l1, o2, l2 in offsets:\n            koffsets += [l1, o1+keystart]\n            voffsets += [l2, o2+valuestart]\n        offsets = koffsets + voffsets\n        output = struct.pack(\"Iiiiiii\",\n                             0x950412de,        # Magic number\n                             0,                 # Version\n                             entries_len,       # # of entries\n                             7*4,               # start of key index\n                             7*4+entries_len*8, # start of value index\n                             0, 0)              # size and offset of hash table\n        output += array.array(\"i\", offsets).tostring()\n        output += ids\n        output += strs\n        return output\n    # }}}\nclass POFile(_BaseFile):\n    '''\n    Po (or Pot) file reader/writer.\n    POFile objects inherit the list objects methods.\n    **Example**:\n    >>> po = POFile()\n    >>> entry1 = POEntry(\n    ...     msgid=\"Some english text\",\n    ...     msgstr=\"Un texte en anglais\"\n    ... )\n    >>> entry1.occurrences = [('testfile', 12),('another_file', 1)]\n    >>> entry1.comment = \"Some useful comment\"\n    >>> entry2 = POEntry(\n    ...     msgid=\"I need my dirty cheese\",\n    ...     msgstr=\"Je veux mon sale fromage\"\n    ... )\n    >>> entry2.occurrences = [('testfile', 15),('another_file', 5)]\n    >>> entry2.comment = \"Another useful comment\"\n    >>> entry3 = POEntry(\n    ...     msgid='Some entry with quotes \" \\\\\"',\n    ...     msgstr=u'Un message unicode avec des quotes \" \\\\\"'\n    ... )\n    >>> entry3.comment = \"Test string quoting\"\n    >>> po.append(entry1)\n    >>> po.append(entry2)\n    >>> po.append(entry3)\n    >>> po.header = \"Some Header\"\n    >>> print po\n    # Some Header\n    msgid \"\"\n    msgstr \"\"\n    <BLANKLINE>\n    #. Some useful comment\n    #: testfile:12 another_file:1\n    msgid \"Some english text\"\n    msgstr \"Un texte en anglais\"\n    <BLANKLINE>\n    #. Another useful comment\n    #: testfile:15 another_file:5\n    msgid \"I need my dirty cheese\"\n    msgstr \"Je veux mon sale fromage\"\n    <BLANKLINE>\n    #. Test string quoting\n    msgid \"Some entry with quotes \\\\\" \\\\\"\"\n    msgstr \"Un message unicode avec des quotes \\\\\" \\\\\"\"\n    <BLANKLINE>\n    '''\n    # class POFile {{{\n    def __str__(self):\n        \"\"\"Return the string representation of the po file\"\"\"\n        ret, headers = '', _strsplit(self.header, '\\n')\n        for header in headers:\n            if header[:1] in [',', ':']:\n                ret += '#%s\\n' % header\n            else:\n                ret += '# %s\\n' % header\n        return ret + _BaseFile.__str__(self)\n    def save_as_mofile(self, fpath):\n        \"\"\"\n        Save the binary representation of the file to *fpath*.\n        **Keyword arguments**:\n          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated\n        messages.\n        **Example**:\n        >>> import polib\n        >>> po = polib.pofile('tests/test_pofile_helpers.po')\n        >>> po.percent_translated()\n        50\n        >>> po = POFile()\n        >>> po.percent_translated()\n        100\n        \"\"\"\n        total = len([e for e in self if not e.obsolete])\n        if total == 0:\n            return 100\n        translated = len(self.translated_entries())\n        return int((100.00 / float(total)) * translated)\n    def translated_entries(self):\n        \"\"\"\n        Convenience method that return a list of translated entries.\n        **Example**:\n        >>> import polib\n        >>> po = polib.pofile('tests/test_pofile_helpers.po')\n        >>> len(po.translated_entries())\n        6\n        \"\"\"\n        return [e for e in self if e.translated() and not e.obsolete]\n    def untranslated_entries(self):\n        \"\"\"\n        Convenience method that return a list of untranslated entries.\n        **Example**:\n        >>> import polib\n        >>> po = polib.pofile('tests/test_pofile_helpers.po')\n        >>> len(po.untranslated_entries())\n        6\n        \"\"\"\n        return [e for e in self if not e.translated() and not e.obsolete]\n    def fuzzy_entries(self):\n        \"\"\"\n        Convenience method that return the list of 'fuzzy' entries.\n        **Example**:\n        >>> import polib\n        >>> po = polib.pofile('tests/test_pofile_helpers.po')\n        >>> len(po.fuzzy_entries())\n        2\n        \"\"\"\n        return [e for e in self if 'fuzzy' in e.flags]\n    def obsolete_entries(self):\n        \"\"\"\n        Convenience method that return the list of obsolete entries.\n        **Example**:\n        >>> import polib\n        >>> po = polib.pofile('tests/test_pofile_helpers.po')\n        >>> len(po.obsolete_entries())\n        4\n        \"\"\"\n        return [e for e in self if e.obsolete]\n    def merge(self, refpot):\n        \"\"\"\n        XXX this could not work if encodings are different, needs thinking\n        and general refactoring of how polib handles encoding...\n        Convenience method that merge the current pofile with the pot file\n        provided. It behaves exactly as the gettext msgmerge utility:\n          - comments of this file will be preserved, but extracted comments\n            and occurrences will be discarded\n          - any translations or comments in the file will be discarded,\n            however dot comments and file positions will be preserved\n        **Keyword argument**:\n          - *refpot*: object POFile, the reference catalog.\n        **Example**:\n        >>> import polib\n        >>> refpot = polib.pofile('tests/test_merge.pot')\n        >>> po = polib.pofile('tests/test_merge_before.po')\n        >>> po.merge(refpot)\n        >>> expected_po = polib.pofile('tests/test_merge_after.po')\n        >>> str(po) == str(expected_po)\n        True\n        \"\"\"\n        for entry in refpot:\n            e = self.find(entry.msgid)\n            if e is None:\n                # entry is not in the po file, we must add it\n                # entry is created with msgid, occurrences and comment\n                self.append(POEntry(\n                    msgid=entry.msgid,\n                    occurrences=entry.occurrences,\n                    comment=entry.comment\n                ))\n            else:\n                # entry found, we update it...\n                e.occurrences = entry.occurrences\n                e.comment = entry.comment\n        # ok, now we must \"obsolete\" entries that are not in the refpot\n        # anymore\n        for entry in self:\n            if refpot.find(entry.msgid) is None:\n                entry.obsolete = True\n    # }}}\nclass MOFile(_BaseFile):\n    '''\n    Mo file reader/writer.\n    MOFile objects inherit the list objects methods.\n    **Example**:\n    >>> mo = MOFile()\n    >>> entry1 = POEntry(\n    ...     msgid=\"Some english text\",\n    ...     msgstr=\"Un texte en anglais\"\n    ... )\n    >>> entry2 = POEntry(\n    ...     msgid=\"I need my dirty cheese\",\n    ...     msgstr=\"Je veux mon sale fromage\"\n    ... )\n    >>> entry3 = MOEntry(\n    ...     msgid='Some entry with quotes \" \\\\\"',\n    ...     msgstr=u'Un message unicode avec des quotes \" \\\\\"'\n    ... )\n    >>> mo.append(entry1)\n    >>> mo.append(entry2)\n    >>> mo.append(entry3)\n    >>> print mo\n    msgid \"\"\n    msgstr \"\"\n    <BLANKLINE>\n    msgid \"Some english text\"\n    msgstr \"Un texte en anglais\"\n    <BLANKLINE>\n    msgid \"I need my dirty cheese\"\n    msgstr \"Je veux mon sale fromage\"\n    <BLANKLINE>\n    msgid \"Some entry with quotes \\\\\" \\\\\"\"\n    msgstr \"Un message unicode avec des quotes \\\\\" \\\\\"\"\n    <BLANKLINE>\n    '''\n    # class MOFile {{{\n    def __init__(self, fpath=None, wrapwidth=78):\n        \"\"\"\n        MOFile constructor.\n        See _BaseFile.__construct.\n        \"\"\"\n        _BaseFile.__init__(self, fpath, wrapwidth)\n        self.magic_number = None\n        self.version = 0\n    def save_as_pofile(self, fpath):\n        \"\"\"\n        Save the string representation of the file to *fpath*.\n        **Keyword argument**:\n          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath)\n    def save(self, fpath):\n        \"\"\"\n        Save the binary representation of the file to *fpath*.\n        **Keyword argument**:\n", "answers": ["          - *fpath*: string, full or relative path to the file."], "length": 2528, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "a80d3f058a72bdd5747b39d44c4b55204d02f090d3568cee"}
{"input": "", "context": "\"\"\" Runs few integrity checks\n\"\"\"\n__RCSID__ = \"$Id$\"\nfrom DIRAC                                                     import S_OK, S_ERROR, gLogger\nfrom DIRAC.Core.Base.AgentModule                               import AgentModule\nfrom DIRAC.Core.Utilities.List                                 import sortList\nfrom DIRAC.ConfigurationSystem.Client.Helpers.Operations       import Operations\nfrom DIRAC.DataManagementSystem.Client.DataIntegrityClient     import DataIntegrityClient\nfrom DIRAC.Resources.Catalog.FileCatalog                       import FileCatalog\nfrom DIRAC.Resources.Catalog.FileCatalogClient                 import FileCatalogClient\nfrom DIRAC.TransformationSystem.Client.TransformationClient    import TransformationClient\nimport re\nAGENT_NAME = 'Transformation/ValidateOutputDataAgent'\nclass ValidateOutputDataAgent( AgentModule ):\n  def __init__( self, *args, **kwargs ):\n    \"\"\" c'tor\n    \"\"\"\n    AgentModule.__init__( self, *args, **kwargs )\n    self.integrityClient = DataIntegrityClient()\n    self.fc = FileCatalog()\n    self.transClient = TransformationClient()\n    self.fileCatalogClient = FileCatalogClient()\n    agentTSTypes = self.am_getOption( 'TransformationTypes', [] )\n    if agentTSTypes:\n      self.transformationTypes = agentTSTypes\n    else:\n      self.transformationTypes = Operations().getValue( 'Transformations/DataProcessing', ['MCSimulation', 'Merge'] )\n    self.directoryLocations = sortList( self.am_getOption( 'DirectoryLocations', ['TransformationDB',\n                                                                                  'MetadataCatalog'] ) )\n    self.activeStorages = sortList( self.am_getOption( 'ActiveSEs', [] ) )\n    self.transfidmeta = self.am_getOption( 'TransfIDMeta', \"TransformationID\" )\n    self.enableFlag = True\n  #############################################################################\n  def initialize( self ):\n    \"\"\" Sets defaults\n    \"\"\"\n    # This sets the Default Proxy to used as that defined under\n    # /Operations/Shifter/DataManager\n    # the shifterProxy option in the Configuration can be used to change this default.\n    self.am_setOption( 'shifterProxy', 'DataManager' )\n    gLogger.info( \"Will treat the following transformation types: %s\" % str( self.transformationTypes ) )\n    gLogger.info( \"Will search for directories in the following locations: %s\" % str( self.directoryLocations ) )\n    gLogger.info( \"Will check the following storage elements: %s\" % str( self.activeStorages ) )\n    gLogger.info( \"Will use %s as metadata tag name for TransformationID\" % self.transfidmeta )\n    return S_OK()\n  #############################################################################\n  def execute( self ):\n    \"\"\" The VerifyOutputData execution method\n    \"\"\"\n    self.enableFlag = self.am_getOption( 'EnableFlag', 'True' )\n    if not self.enableFlag == 'True':\n      self.log.info( \"VerifyOutputData is disabled by configuration option 'EnableFlag'\" )\n      return S_OK( 'Disabled via CS flag' )\n    gLogger.info( \"-\" * 40 )\n    self.updateWaitingIntegrity()\n    gLogger.info( \"-\" * 40 )\n    res = self.transClient.getTransformations( {'Status':'ValidatingOutput', 'Type':self.transformationTypes} )\n    if not res['OK']:\n      gLogger.error( \"Failed to get ValidatingOutput transformations\", res['Message'] )\n      return res\n    transDicts = res['Value']\n    if not transDicts:\n      gLogger.info( \"No transformations found in ValidatingOutput status\" )\n      return S_OK()\n    gLogger.info( \"Found %s transformations in ValidatingOutput status\" % len( transDicts ) )\n    for transDict in transDicts:\n      transID = transDict['TransformationID']\n      res = self.checkTransformationIntegrity( int( transID ) )\n      if not res['OK']:\n        gLogger.error( \"Failed to perform full integrity check for transformation %d\" % transID )\n      else:\n        self.finalizeCheck( transID )\n        gLogger.info( \"-\" * 40 )\n    return S_OK()\n  def updateWaitingIntegrity( self ):\n    \"\"\" Get 'WaitingIntegrity' transformations, update to 'ValidatedOutput'\n    \"\"\"\n    gLogger.info( \"Looking for transformations in the WaitingIntegrity status to update\" )\n    res = self.transClient.getTransformations( {'Status':'WaitingIntegrity'} )\n    if not res['OK']:\n      gLogger.error( \"Failed to get WaitingIntegrity transformations\", res['Message'] )\n      return res\n    transDicts = res['Value']\n    if not transDicts:\n      gLogger.info( \"No transformations found in WaitingIntegrity status\" )\n      return S_OK()\n    gLogger.info( \"Found %s transformations in WaitingIntegrity status\" % len( transDicts ) )\n    for transDict in transDicts:\n      transID = transDict['TransformationID']\n      gLogger.info( \"-\" * 40 )\n      res = self.integrityClient.getTransformationProblematics( int( transID ) )\n      if not res['OK']:\n        gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      elif not res['Value']:\n        res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput' )\n        if not res['OK']:\n          gLogger.error( \"Failed to update status of transformation %s to ValidatedOutput\" % ( transID ) )\n        else:\n          gLogger.info( \"Updated status of transformation %s to ValidatedOutput\" % ( transID ) )\n      else:\n        gLogger.info( \"%d problematic files for transformation %s were found\" % ( len( res['Value'] ), transID ) )\n    return\n  #############################################################################\n  #\n  # Get the transformation directories for checking\n  #\n  def getTransformationDirectories( self, transID ):\n    \"\"\" Get the directories for the supplied transformation from the transformation system\n    \"\"\"\n    directories = []\n    if 'TransformationDB' in self.directoryLocations:\n      res = self.transClient.getTransformationParameters( transID, ['OutputDirectories'] )\n      if not res['OK']:\n        gLogger.error( \"Failed to obtain transformation directories\", res['Message'] )\n        return res\n      transDirectories = res['Value'].splitlines()\n      directories = self._addDirs( transID, transDirectories, directories )\n    if 'MetadataCatalog' in self.directoryLocations:\n      res = self.fileCatalogClient.findDirectoriesByMetadata( {self.transfidmeta:transID} )\n      if not res['OK']:\n        gLogger.error( \"Failed to obtain metadata catalog directories\", res['Message'] )\n        return res\n      transDirectories = res['Value']\n      directories = self._addDirs( transID, transDirectories, directories )\n    if not directories:\n      gLogger.info( \"No output directories found\" )\n    directories = sortList( directories )\n    return S_OK( directories )\n  @staticmethod\n  def _addDirs( transID, newDirs, existingDirs ):\n    for nDir in newDirs:\n      transStr = str( transID ).zfill( 8 )\n      if re.search( transStr, nDir ):\n        if not nDir in existingDirs:\n          existingDirs.append( nDir )\n    return existingDirs\n  #############################################################################\n  def checkTransformationIntegrity( self, transID ):\n    \"\"\" This method contains the real work\n    \"\"\"\n    gLogger.info( \"-\" * 40 )\n    gLogger.info( \"Checking the integrity of transformation %s\" % transID )\n    gLogger.info( \"-\" * 40 )\n    res = self.getTransformationDirectories( transID )\n    if not res['OK']:\n      return res\n    directories = res['Value']\n    if not directories:\n      return S_OK()\n    ######################################################\n    #\n    # This check performs Catalog->SE for possible output directories\n    #\n    res = self.fc.exists( directories )\n    if not res['OK']:\n      gLogger.error( res['Message'] )\n      return res\n    for directory, error in res['Value']['Failed']:\n      gLogger.error( 'Failed to determine existance of directory', '%s %s' % ( directory, error ) )\n    if res['Value']['Failed']:\n      return S_ERROR( \"Failed to determine the existance of directories\" )\n    directoryExists = res['Value']['Successful']\n    for directory in sortList( directoryExists.keys() ):\n      if not directoryExists[directory]:\n        continue\n      iRes = self.integrityClient.catalogDirectoryToSE( directory )\n      if not iRes['OK']:\n        gLogger.error( iRes['Message'] )\n        return iRes\n    ######################################################\n    #\n    # This check performs SE->Catalog for possible output directories\n    #\n    for storageElementName in sortList( self.activeStorages ):\n      res = self.integrityClient.storageDirectoryToCatalog( directories, storageElementName )\n      if not res['OK']:\n        gLogger.error( res['Message'] )\n        return res\n    gLogger.info( \"-\" * 40 )\n    gLogger.info( \"Completed integrity check for transformation %s\" % transID )\n    return S_OK()\n  def finalizeCheck( self, transID ):\n    \"\"\" Move to 'WaitingIntegrity' or 'ValidatedOutput'\n    \"\"\"\n    res = self.integrityClient.getTransformationProblematics( int( transID ) )\n", "answers": ["    if not res['OK']:"], "length": 873, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "924bc05657c826f5fa04974021bf21c5946ff1d3a39ea9ef"}
{"input": "", "context": "/* This code is part of Freenet. It is distributed under the GNU General\n * Public License, version 2 (or at your option any later version). See\n * http://www.gnu.org/ for further details of the GPL. */\npackage freenet.client.filter;\nimport freenet.client.filter.HTMLFilter.ParsedTag;\nimport freenet.clients.http.ExternalLinkToadlet;\nimport freenet.clients.http.HTTPRequestImpl;\nimport freenet.clients.http.StaticToadlet;\nimport freenet.keys.FreenetURI;\nimport freenet.l10n.NodeL10n;\nimport freenet.support.*;\nimport freenet.support.Logger.LogLevel;\nimport freenet.support.api.HTTPRequest;\nimport java.io.UnsupportedEncodingException;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URLEncoder;\nimport java.nio.charset.Charset;\nimport java.util.HashSet;\nimport java.util.regex.Pattern;\npublic class GenericReadFilterCallback implements FilterCallback, URIProcessor {\n\tpublic static final HashSet<String> allowedProtocols;\n\t\n\tstatic {\n\t\tallowedProtocols = new HashSet<String>();\n\t\tallowedProtocols.add(\"http\");\n\t\tallowedProtocols.add(\"https\");\n\t\tallowedProtocols.add(\"ftp\");\n\t\tallowedProtocols.add(\"mailto\");\n\t\tallowedProtocols.add(\"nntp\");\n\t\tallowedProtocols.add(\"news\");\n\t\tallowedProtocols.add(\"snews\");\n\t\tallowedProtocols.add(\"about\");\n\t\tallowedProtocols.add(\"irc\");\n\t\t// file:// ?\n\t}\n\tprivate URI baseURI;\n\tprivate URI strippedBaseURI;\n\tprivate final FoundURICallback cb;\n\tprivate final TagReplacerCallback trc;\n\t/** Provider for link filter exceptions. */\n\tprivate final LinkFilterExceptionProvider linkFilterExceptionProvider;\n        private static volatile boolean logMINOR;\n\tstatic {\n\t\tLogger.registerLogThresholdCallback(new LogThresholdCallback(){\n\t\t\t@Override\n\t\t\tpublic void shouldUpdate(){\n\t\t\t\tlogMINOR = Logger.shouldLog(LogLevel.MINOR, this);\n\t\t\t}\n\t\t});\n\t}\n\tpublic GenericReadFilterCallback(URI uri, FoundURICallback cb,TagReplacerCallback trc, LinkFilterExceptionProvider linkFilterExceptionProvider) {\n\t\tthis.baseURI = uri;\n\t\tthis.cb = cb;\n\t\tthis.trc=trc;\n\t\tthis.linkFilterExceptionProvider = linkFilterExceptionProvider;\n\t\tsetStrippedURI(uri.toString());\n\t}\n\t\n\tpublic GenericReadFilterCallback(FreenetURI uri, FoundURICallback cb,TagReplacerCallback trc, LinkFilterExceptionProvider linkFilterExceptionProvider) {\n\t\ttry {\n\t\t\tthis.baseURI = uri.toRelativeURI();\n\t\t\tsetStrippedURI(baseURI.toString());\n\t\t\tthis.cb = cb;\n\t\t\tthis.trc=trc;\n\t\t\tthis.linkFilterExceptionProvider = linkFilterExceptionProvider;\n\t\t} catch (URISyntaxException e) {\n\t\t\tthrow new Error(e);\n\t\t}\n\t}\n\tprivate void setStrippedURI(String u) {\n\t\tint idx = u.lastIndexOf('/');\n\t\tif(idx > 0) {\n\t\t\tu = u.substring(0, idx+1);\n\t\t\ttry {\n\t\t\t\tstrippedBaseURI = new URI(u);\n\t\t\t} catch (URISyntaxException e) {\n\t\t\t\tLogger.error(this, \"Can't strip base URI: \"+e+\" parsing \"+u);\n\t\t\t\tstrippedBaseURI = baseURI;\n\t\t\t}\n\t\t} else\n\t\t\tstrippedBaseURI = baseURI;\n\t}\n\t@Override\n\tpublic String processURI(String u, String overrideType) throws CommentException {\n\t\treturn processURI(u, overrideType, false, false);\n\t}\n\t\n\t// RFC3986\n\t//  unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n\tprotected static final String UNRESERVED = \"[a-zA-Z0-9\\\\-\\\\._~]\";\n\t//  pct-encoded   = \"%\" HEXDIG HEXDIG\n\tprotected static final String PCT_ENCODED = \"(?:%[0-9A-Fa-f][0-9A-Fa-f])\";\n\t//  sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n\t//                / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\tprotected static final String SUB_DELIMS  = \"[\\\\!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]\";\n\t//  pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n\tprotected static final String PCHAR      = \"(?>\" + UNRESERVED + \"|\" + PCT_ENCODED + \"|\" + SUB_DELIMS + \"|[:@])\";\n\t//  fragment      = *( pchar / \"/\" / \"?\" )\n\tprotected static final String FRAGMENT   = \"(?>\" + PCHAR + \"|\\\\/|\\\\?)*\";\n\tprivate static final Pattern anchorRegex;\n\tstatic {\n\t    anchorRegex = Pattern.compile(\"^#\" + FRAGMENT + \"$\");\n\t}\n\t@Override\n\tpublic String processURI(String u, String overrideType, boolean forBaseHref, boolean inline) throws CommentException {\n\t\tif(anchorRegex.matcher(u).matches()) {\n\t\t\t// Hack for anchors, see #710\n\t\t\treturn u;\n\t\t}\n\t\t\n\t\tboolean noRelative = forBaseHref;\n\t\t// evil hack, see #2451 and r24565,r24566\n\t\tu = u.replaceAll(\" #\", \" %23\");\n\t\t\n\t\tURI uri;\n\t\tURI resolved;\n\t\ttry {\n\t\t\tif(logMINOR) Logger.minor(this, \"Processing \"+u);\n\t\t\turi = URIPreEncoder.encodeURI(u).normalize();\n\t\t\tif(logMINOR) Logger.minor(this, \"Processing \"+uri);\n\t\t\tif(u.startsWith(\"/\") || u.startsWith(\"%2f\"))\n\t\t\t\t// Don't bother with relative URIs if it's obviously absolute.\n\t\t\t\t// Don't allow encoded /'s, they're just too confusing (here they would get decoded and then coalesced with other slashes).\n\t\t\t\tnoRelative = true;\n\t\t\tif(!noRelative)\n\t\t\t\tresolved = baseURI.resolve(uri);\n\t\t\telse\n\t\t\t\tresolved = uri;\n\t\t\tif(logMINOR) Logger.minor(this, \"Resolved: \"+resolved);\n\t\t} catch (URISyntaxException e1) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Failed to parse URI: \"+e1);\n\t\t\tthrow new CommentException(l10n(\"couldNotParseURIWithError\", \"error\", e1.getMessage()));\n\t\t}\n\t\tString path = uri.getPath();\n\t\t\n\t\tHTTPRequest req = new HTTPRequestImpl(uri, \"GET\");\n\t\tif (path != null) {\n\t\t\tif (path.equals(\"/\") && req.isParameterSet(\"newbookmark\") && !forBaseHref) {\n\t\t\t\t// allow links to the root to add bookmarks\n\t\t\t\tString bookmark_key = req.getParam(\"newbookmark\");\n\t\t\t\tString bookmark_desc = req.getParam(\"desc\");\n\t\t\t\tString bookmark_activelink = req.getParam(\"hasAnActivelink\", \"\");\n\t\t\t\ttry {\n\t\t\t\t\tFreenetURI furi = new FreenetURI(bookmark_key);\n\t\t\t\t\tbookmark_key = furi.toString();\n\t\t\t\t\tbookmark_desc = URLEncoder.encode(bookmark_desc, \"UTF-8\");\n\t\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\t\t// impossible, UTF-8 is always supported\n\t\t\t\t} catch (MalformedURLException e) {\n\t\t\t\t\tthrow new CommentException(\"Invalid Freenet URI: \" + e);\n\t\t\t\t}\n\t\t\t\tString url = \"/?newbookmark=\"+bookmark_key+\"&desc=\"+bookmark_desc;\n\t\t\t\tif (bookmark_activelink.equals(\"true\")) {\n\t\t\t\t\turl = url + \"&hasAnActivelink=true\";\n\t\t\t\t}\n\t\t\t\treturn url;\n\t\t\t} else if(path.startsWith(StaticToadlet.ROOT_URL)) {\n\t\t\t\t// @see bug #2297\n\t\t\t\treturn path;\n\t\t\t} else if (linkFilterExceptionProvider != null) {\n\t\t\t\tif (linkFilterExceptionProvider.isLinkExcepted(uri)) {\n\t\t\t\t\treturn path + ((uri.getQuery() != null) ? (\"?\" + uri.getQuery()) : \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tString reason = l10n(\"deletedURI\");\n\t\t\n\t\t// Try as an absolute URI\n\t\t\n\t\tURI origURI = uri;\n\t\t\n\t\t// Convert localhost uri's to relative internal ones.\n\t\t\n\t\tString host = uri.getHost();\n\t\tif(host != null && (host.equals(\"localhost\") || host.equals(\"127.0.0.1\")) && uri.getPort() == 8888) {\n\t\t\ttry {\n\t\t\t\turi = new URI(null, null, null, -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t} catch (URISyntaxException e) {\n\t\t\t\tLogger.error(this, \"URI \"+uri+\" looked like localhost but could not parse\", e);\n\t\t\t\tthrow new CommentException(\"URI looked like localhost but could not parse: \"+e);\n\t\t\t}\n\t\t\thost = null;\n\t\t}\n\t\t\n\t\tString rpath = uri.getPath();\n\t\tif(logMINOR) Logger.minor(this, \"Path: \\\"\"+path+\"\\\" rpath: \\\"\"+rpath+\"\\\"\");\n\t\t\n\t\tif(host == null) {\n\t\t\n\t\t\tboolean isAbsolute = false;\n\t\t\t\n\t\t\tif(rpath != null) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Resolved URI (rpath absolute): \\\"\"+rpath+\"\\\"\");\n\t\t\t\t\n\t\t\t\t// Valid FreenetURI?\n\t\t\t\ttry {\n\t\t\t\t\tString p = rpath;\n\t\t\t\t\twhile(p.startsWith(\"/\")) {\n\t\t\t\t\t\tp = p.substring(1);\n\t\t\t\t\t}\n\t\t\t\t\tFreenetURI furi = new FreenetURI(p, true);\n\t\t\t\t\tisAbsolute = true;\n\t\t\t\t\tif(logMINOR) Logger.minor(this, \"Parsed: \"+furi);\n\t\t\t\t\treturn processURI(furi, uri, overrideType, true, inline);\n\t\t\t\t} catch (MalformedURLException e) {\n\t\t\t\t\t// Not a FreenetURI\n\t\t\t\t\tif(logMINOR) Logger.minor(this, \"Malformed URL (a): \"+e, e);\n\t\t\t\t\tif(e.getMessage() != null) {\n\t\t\t\t\t\treason = l10n(\"malformedAbsoluteURL\", \"error\", e.getMessage());\n\t\t\t\t\t} else {\n\t\t\t\t\t\treason = l10n(\"couldNotParseAbsoluteFreenetURI\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif((!isAbsolute) && (!forBaseHref)) {\n\t\t\t\t\n\t\t\t\t// Relative URI\n\t\t\t\t\n\t\t\t\trpath = resolved.getPath();\n\t\t\t\tif(rpath == null) throw new CommentException(\"No URI\");\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Resolved URI (rpath relative): \"+rpath);\n\t\t\t\t\n\t\t\t\t// Valid FreenetURI?\n\t\t\t\ttry {\n\t\t\t\t\tString p = rpath;\n\t\t\t\t\twhile(p.startsWith(\"/\")) p = p.substring(1);\n\t\t\t\t\tFreenetURI furi = new FreenetURI(p, true);\n\t\t\t\t\tif(logMINOR) Logger.minor(this, \"Parsed: \"+furi);\n\t\t\t\t\treturn processURI(furi, uri, overrideType, forBaseHref, inline);\n\t\t\t\t} catch (MalformedURLException e) {\n\t\t\t\t\tif(logMINOR) Logger.minor(this, \"Malformed URL (b): \"+e, e);\n\t\t\t\t\tif(e.getMessage() != null) {\n\t\t\t\t\t\treason = l10n(\"malformedRelativeURL\", \"error\", e.getMessage());\n\t\t\t\t\t} else {\n\t\t\t\t\t\treason = l10n(\"couldNotParseRelativeFreenetURI\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t}\n\t\t\n\t\turi = origURI;\n\t\t\n\t\tif(forBaseHref)\n\t\t\tthrow new CommentException(l10n(\"bogusBaseHref\"));\n\t\tif(GenericReadFilterCallback.allowedProtocols.contains(uri.getScheme()))\n\t\t\treturn ExternalLinkToadlet.escape(uri.toString());\n\t\telse {\n\t\t\tif(uri.getScheme() == null) {\n\t\t\t\tthrow new CommentException(reason);\n\t\t\t}\n\t\t\tthrow new CommentException(l10n(\"protocolNotEscaped\", \"protocol\", uri.getScheme()));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic String makeURIAbsolute(String uri) throws URISyntaxException{\n\t\treturn baseURI.resolve(URIPreEncoder.encodeURI(uri).normalize()).toASCIIString();\n\t}\n\tprivate static String l10n(String key, String pattern, String value) {\n\t\treturn NodeL10n.getBase().getString(\"GenericReadFilterCallback.\"+key, pattern, value);\n\t}\n\tprivate static String l10n(String key) {\n\t\treturn NodeL10n.getBase().getString(\"GenericReadFilterCallback.\"+key);\n\t}\n\tprivate String finishProcess(HTTPRequest req, String overrideType, String path, URI u, boolean noRelative) {\n\t\tString typeOverride = req.getParam(\"type\", null);\n\t\tif(overrideType != null)\n\t\t\ttypeOverride = overrideType;\n\t\tif(typeOverride != null) {\n\t\t\tString[] split = HTMLFilter.splitType(typeOverride);\n\t\t\tif(split[1] != null) {\n\t\t\t\tString charset = split[1];\n\t\t\t\tif(charset != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcharset = URLDecoder.decode(charset, false);\n\t\t\t\t\t} catch (URLEncodedFormatException e) {\n\t\t\t\t\t\tcharset = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(charset != null && charset.indexOf('&') != -1)\n\t\t\t\t\tcharset = null;\n\t\t\t\tif(charset != null && !Charset.isSupported(charset))\n\t\t\t\t\tcharset = null;\n\t\t\t\tif(charset != null)\n\t\t\t\t\ttypeOverride = split[0]+\"; charset=\"+charset;\n\t\t\t\telse\n\t\t\t\t\ttypeOverride = split[0];\n\t\t\t}\n\t\t}\n\t\t\n\t\t// REDFLAG any other options we should support? \n\t\t// Obviously we don't want to support ?force= !!\n\t\t// At the moment, ?type= and ?force= are the only options supported by FProxy anyway.\n\t\t\n\t\ttry {\n\t\t\t// URI encoding issues: FreenetURI.toString() does URLEncode'ing of critical components.\n\t\t\t// So if we just pass it in to the component-wise constructor, we end up encoding twice, \n\t\t\t// so get %2520 for a space.\n\t\t\t\n\t\t\t// However, we want to support encoded slashes or @'s in the path, so we don't want to\n\t\t\t// just decode before feeding it to the constructor. It looks like the best option is\n\t\t\t// to construct it ourselves and then re-parse it. This is doing unnecessary work, it\n\t\t\t// would be much easier if we had a component-wise constructor for URI that didn't \n\t\t\t// re-encode, but at least it works...\n\t\t\t\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tif(strippedBaseURI.getScheme() != null && !noRelative) {\n\t\t\t\tsb.append(strippedBaseURI.getScheme());\n\t\t\t\tsb.append(\"://\");\n\t\t\t\tsb.append(strippedBaseURI.getAuthority());\n\t\t\t\tassert(path.startsWith(\"/\"));\n\t\t\t}\n\t\t\tsb.append(path);\n\t\t\tif(typeOverride != null) {\n\t\t\t\tsb.append(\"?type=\");\n\t\t\t\tsb.append(freenet.support.URLEncoder.encode(typeOverride, \"\", false, \"=\"));\n\t\t\t}\n\t\t\tif(u.getFragment() != null) {\n\t\t\t\tsb.append('#');\n\t\t\t\tsb.append(u.getRawFragment());\n\t\t\t}\n\t\t\t\n\t\t\tURI uri = new URI(sb.toString());\n\t\t\t\n\t\t\tif(!noRelative)\n\t\t\t\turi = strippedBaseURI.relativize(uri);\n\t\t\tif(logMINOR)\n\t\t\t\tLogger.minor(this, \"Returning \"+uri.toASCIIString()+\" from \"+path+\" from baseURI=\"+baseURI+\" stripped base uri=\"+strippedBaseURI.toString());\n\t\t\treturn uri.toASCIIString();\n\t\t} catch (URISyntaxException e) {\n\t\t\tLogger.error(this, \"Could not parse own URI: path=\"+path+\", typeOverride=\"+typeOverride+\", frag=\"+u.getFragment()+\" : \"+e, e);\n\t\t\tString p = path;\n\t\t\tif(typeOverride != null)\n\t\t\t\tp += \"?type=\"+typeOverride;\n\t\t\tif(u.getFragment() != null){\n\t\t\t\ttry{\n\t\t\t\t// FIXME encode it properly\n\t\t\t\t\tp += URLEncoder.encode(u.getFragment(),\"UTF-8\");\n\t\t\t\t}catch (UnsupportedEncodingException e1){\n\t\t\t\t\tthrow new Error(\"Impossible: JVM doesn't support UTF-8: \" + e, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn p;\n\t\t}\n\t}\n\tprivate String processURI(FreenetURI furi, URI uri, String overrideType, boolean noRelative, boolean inline) {\n\t\t// Valid Freenet URI, allow it\n\t\t// Now what about the queries?\n\t\tHTTPRequest req = new HTTPRequestImpl(uri, \"GET\");\n\t\tif(cb != null) cb.foundURI(furi);\n\t\tif(cb != null) cb.foundURI(furi, inline);\n\t\treturn finishProcess(req, overrideType, '/' + furi.toString(false, false), uri, noRelative);\n\t}\n\t@Override\n\tpublic String onBaseHref(String baseHref) {\n\t\tString ret;\n\t\ttry {\n\t\t\tret = processURI(baseHref, null, true, false);\n\t\t} catch (CommentException e1) {\n\t\t\tLogger.error(this, \"Failed to parse base href: \"+baseHref+\" -> \"+e1.getMessage());\n\t\t\tret = null;\n\t\t}\n\t\tif(ret == null) {\n\t\t\tLogger.error(this, \"onBaseHref() failed: cannot sanitize \"+baseHref);\n\t\t\treturn null;\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tbaseURI = new URI(ret);\n\t\t\t\tsetStrippedURI(ret);\n\t\t\t} catch (URISyntaxException e) {\n\t\t\t\tthrow new Error(e); // Impossible\n\t\t\t}\n\t\t\treturn baseURI.toASCIIString();\n\t\t}\n\t}\n\t@Override\n\tpublic void onText(String s, String type) {\n\t\tif(cb != null)\n\t\t\tcb.onText(s, type, baseURI);\n\t}\n\tstatic final String PLUGINS_PREFIX = \"/plugins/\";\n\t\n\t/**\n\t * Process a form.\n\t * Current strategy:\n\t * - Both POST and GET forms are allowed to /\n\t * Anything that is hazardous should be protected through formPassword.\n\t * @throws CommentException If the form element could not be parsed and the user should be told.\n\t */\n\t@Override\n\tpublic String processForm(String method, String action) throws CommentException {\n\t\tif(action == null) return null;\n\t\tif(method == null) method = \"GET\";\n\t\tmethod = method.toUpperCase();\n\t\tif(!(method.equals(\"POST\") || method.equals(\"GET\"))) \n\t\t\treturn null; // no irregular form sending methods\n\t\t// FIXME what about /downloads/ /friends/ etc?\n\t\t// Allow access to Library for searching, form passwords are used for actions such as adding bookmarks\n\t\tif(action.equals(\"/library/\"))\n\t\t\treturn action;\n\t\ttry {\n\t\t\tURI uri = URIPreEncoder.encodeURI(action);\n\t\t\tif(uri.getScheme() != null || uri.getHost() != null || uri.getPort() != -1 || uri.getUserInfo() != null)\n\t\t\t\tthrow new CommentException(l10n(\"invalidFormURI\"));\n", "answers": ["\t\t\tString path = uri.getPath();"], "length": 1604, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "e19ebd2a302575d8fb0c11be6536df7e0face2889546ed8d"}
{"input": "", "context": "# This file is part of Buildbot.  Buildbot is free software: you can\n# redistribute it and/or modify it under the terms of the GNU General Public\n# License as published by the Free Software Foundation, version 2.\n#\n# This program is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n# details.\n#\n# You should have received a copy of the GNU General Public License along with\n# this program; if not, write to the Free Software Foundation, Inc., 51\n# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n# Copyright Buildbot Team Members\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom future.builtins import range\nimport warnings\nfrom mock import Mock\nfrom mock import call\nfrom twisted.internet import defer\nfrom twisted.trial import unittest\nfrom buildbot.process.results import FAILURE\nfrom buildbot.process.results import RETRY\nfrom buildbot.process.results import SUCCESS\nfrom buildbot.reporters import utils\nfrom buildbot.reporters.gerrit import GERRIT_LABEL_REVIEWED\nfrom buildbot.reporters.gerrit import GERRIT_LABEL_VERIFIED\nfrom buildbot.reporters.gerrit import GerritStatusPush\nfrom buildbot.reporters.gerrit import defaultReviewCB\nfrom buildbot.reporters.gerrit import defaultSummaryCB\nfrom buildbot.reporters.gerrit import makeReviewResult\nfrom buildbot.test.fake import fakemaster\nfrom buildbot.test.util.reporter import ReporterTestMixin\nwarnings.filterwarnings('error', message='.*Gerrit status')\ndef sampleReviewCB(builderName, build, result, status, arg):\n    verified = 1 if result == SUCCESS else -1\n    return makeReviewResult(str({'name': builderName, 'result': result}),\n                            (GERRIT_LABEL_VERIFIED, verified))\n@defer.inlineCallbacks\ndef sampleReviewCBDeferred(builderName, build, result, status, arg):\n    verified = 1 if result == SUCCESS else -1\n    result = yield makeReviewResult(str({'name': builderName, 'result': result}),\n                                    (GERRIT_LABEL_VERIFIED, verified))\n    defer.returnValue(result)\ndef sampleStartCB(builderName, build, arg):\n    return makeReviewResult(str({'name': builderName}),\n                            (GERRIT_LABEL_REVIEWED, 0))\n@defer.inlineCallbacks\ndef sampleStartCBDeferred(builderName, build, arg):\n    result = yield makeReviewResult(str({'name': builderName}),\n                                    (GERRIT_LABEL_REVIEWED, 0))\n    defer.returnValue(result)\ndef sampleSummaryCB(buildInfoList, results, status, arg):\n    success = False\n    failure = False\n    for buildInfo in buildInfoList:\n        if buildInfo['result'] == SUCCESS:  # pylint: disable=simplifiable-if-statement\n            success = True\n        else:\n            failure = True\n    if failure:\n        verified = -1\n    elif success:\n        verified = 1\n    else:\n        verified = 0\n    return makeReviewResult(str(buildInfoList),\n                            (GERRIT_LABEL_VERIFIED, verified))\n@defer.inlineCallbacks\ndef sampleSummaryCBDeferred(buildInfoList, results, master, arg):\n    success = False\n    failure = False\n    for buildInfo in buildInfoList:\n        if buildInfo['result'] == SUCCESS:  # pylint: disable=simplifiable-if-statement\n            success = True\n        else:\n            failure = True\n    if failure:\n        verified = -1\n    elif success:\n        verified = 1\n    else:\n        verified = 0\n    result = yield makeReviewResult(str(buildInfoList),\n                                    (GERRIT_LABEL_VERIFIED, verified))\n    defer.returnValue(result)\ndef legacyTestReviewCB(builderName, build, result, status, arg):\n    msg = str({'name': builderName, 'result': result})\n    return (msg, 1 if result == SUCCESS else -1, 0)\ndef legacyTestSummaryCB(buildInfoList, results, status, arg):\n    success = False\n    failure = False\n    for buildInfo in buildInfoList:\n        if buildInfo['result'] == SUCCESS:  # pylint: disable=simplifiable-if-statement\n            success = True\n        else:\n            failure = True\n    if failure:\n        verified = -1\n    elif success:\n        verified = 1\n    else:\n        verified = 0\n    return (str(buildInfoList), verified, 0)\nclass TestGerritStatusPush(unittest.TestCase, ReporterTestMixin):\n    def setUp(self):\n        self.master = fakemaster.make_master(testcase=self,\n                                             wantData=True, wantDb=True, wantMq=True)\n    @defer.inlineCallbacks\n    def setupGerritStatusPushSimple(self, *args, **kwargs):\n        serv = kwargs.pop(\"server\", \"serv\")\n        username = kwargs.pop(\"username\", \"user\")\n        gsp = GerritStatusPush(serv, username, *args, **kwargs)\n        yield gsp.setServiceParent(self.master)\n        yield gsp.startService()\n        defer.returnValue(gsp)\n    @defer.inlineCallbacks\n    def setupGerritStatusPush(self, *args, **kwargs):\n        gsp = yield self.setupGerritStatusPushSimple(*args, **kwargs)\n        gsp.sendCodeReview = Mock()\n        defer.returnValue(gsp)\n    @defer.inlineCallbacks\n    def setupBuildResults(self, buildResults, finalResult):\n        self.insertTestData(buildResults, finalResult)\n        res = yield utils.getDetailsForBuildset(self.master, 98, wantProperties=True)\n        builds = res['builds']\n        buildset = res['buildset']\n        @defer.inlineCallbacks\n        def getChangesForBuild(buildid):\n            assert buildid == 20\n            ch = yield self.master.db.changes.getChange(13)\n            defer.returnValue([ch])\n        self.master.db.changes.getChangesForBuild = getChangesForBuild\n        defer.returnValue((buildset, builds))\n    def makeBuildInfo(self, buildResults, resultText, builds):\n        info = []\n        for i in range(len(buildResults)):\n            info.append({'name': u\"Builder%d\" % i, 'result': buildResults[i],\n                         'resultText': resultText[i], 'text': u'buildText',\n                         'url': \"http://localhost:8080/#builders/%d/builds/%d\" % (79 + i, i),\n                         'build': builds[i]})\n        return info\n    @defer.inlineCallbacks\n    def run_fake_summary_build(self, gsp, buildResults, finalResult,\n                               resultText, expWarning=False):\n        buildset, builds = yield self.setupBuildResults(buildResults, finalResult)\n        yield gsp.buildsetComplete('buildset.98.complete'.split(\".\"),\n                                   buildset)\n        info = self.makeBuildInfo(buildResults, resultText, builds)\n        if expWarning:\n            self.assertEqual([w['message'] for w in self.flushWarnings()],\n                             ['The Gerrit status callback uses the old '\n                              'way to communicate results.  The outcome '\n                              'might be not what is expected.'])\n        defer.returnValue(str(info))\n    # check_summary_build and check_summary_build_legacy differ in two things:\n    #   * the callback used\n    #   * the expected result\n    @defer.inlineCallbacks\n    def check_summary_build_deferred(self, buildResults, finalResult, resultText,\n                                     verifiedScore):\n        gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCBDeferred)\n        msg = yield self.run_fake_summary_build(gsp, buildResults, finalResult,\n                                                resultText)\n        result = makeReviewResult(msg,\n                                  (GERRIT_LABEL_VERIFIED, verifiedScore))\n        gsp.sendCodeReview.assert_called_once_with(self.TEST_PROJECT,\n                                                   self.TEST_REVISION,\n                                                   result)\n    @defer.inlineCallbacks\n    def check_summary_build(self, buildResults, finalResult, resultText,\n                            verifiedScore):\n        gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        msg = yield self.run_fake_summary_build(gsp, buildResults, finalResult,\n                                                resultText)\n        result = makeReviewResult(msg,\n                                  (GERRIT_LABEL_VERIFIED, verifiedScore))\n        gsp.sendCodeReview.assert_called_once_with(self.TEST_PROJECT,\n                                                   self.TEST_REVISION,\n                                                   result)\n    @defer.inlineCallbacks\n    def check_summary_build_legacy(self, buildResults, finalResult, resultText,\n                                   verifiedScore):\n        gsp = yield self.setupGerritStatusPush(summaryCB=legacyTestSummaryCB)\n        msg = yield self.run_fake_summary_build(gsp, buildResults, finalResult,\n                                                resultText, expWarning=True)\n        result = makeReviewResult(msg,\n                                  (GERRIT_LABEL_VERIFIED, verifiedScore),\n                                  (GERRIT_LABEL_REVIEWED, 0))\n        gsp.sendCodeReview.assert_called_once_with(self.TEST_PROJECT,\n                                                   self.TEST_REVISION,\n                                                   result)\n    @defer.inlineCallbacks\n    def test_gerrit_ssh_cmd(self):\n        kwargs = {\n            'server': 'example.com',\n            'username': 'buildbot',\n        }\n        without_identity = yield self.setupGerritStatusPush(**kwargs)\n        expected1 = [\n            'ssh', 'buildbot@example.com', '-p', '29418', 'gerrit', 'foo']\n        self.assertEqual(expected1, without_identity._gerritCmd('foo'))\n        yield without_identity.disownServiceParent()\n        with_identity = yield self.setupGerritStatusPush(\n            identity_file='/path/to/id_rsa', **kwargs)\n        expected2 = [\n            'ssh', '-i', '/path/to/id_rsa', 'buildbot@example.com', '-p', '29418',\n            'gerrit', 'foo',\n        ]\n        self.assertEqual(expected2, with_identity._gerritCmd('foo'))\n    def test_buildsetComplete_success_sends_summary_review_deferred(self):\n        d = self.check_summary_build_deferred(buildResults=[SUCCESS, SUCCESS],\n                                              finalResult=SUCCESS,\n                                              resultText=[\n                                                  \"succeeded\", \"succeeded\"],\n                                              verifiedScore=1)\n        return d\n    def test_buildsetComplete_success_sends_summary_review(self):\n        d = self.check_summary_build(buildResults=[SUCCESS, SUCCESS],\n                                     finalResult=SUCCESS,\n                                     resultText=[\"succeeded\", \"succeeded\"],\n                                     verifiedScore=1)\n        return d\n    def test_buildsetComplete_failure_sends_summary_review(self):\n        d = self.check_summary_build(buildResults=[FAILURE, FAILURE],\n                                     finalResult=FAILURE,\n                                     resultText=[\"failed\", \"failed\"],\n                                     verifiedScore=-1)\n        return d\n    def test_buildsetComplete_mixed_sends_summary_review(self):\n        d = self.check_summary_build(buildResults=[SUCCESS, FAILURE],\n                                     finalResult=FAILURE,\n                                     resultText=[\"succeeded\", \"failed\"],\n                                     verifiedScore=-1)\n        return d\n    def test_buildsetComplete_success_sends_summary_review_legacy(self):\n        d = self.check_summary_build_legacy(buildResults=[SUCCESS, SUCCESS],\n                                            finalResult=SUCCESS,\n                                            resultText=[\n                                                \"succeeded\", \"succeeded\"],\n                                            verifiedScore=1)\n        return d\n    def test_buildsetComplete_failure_sends_summary_review_legacy(self):\n        d = self.check_summary_build_legacy(buildResults=[FAILURE, FAILURE],\n                                            finalResult=FAILURE,\n                                            resultText=[\"failed\", \"failed\"],\n                                            verifiedScore=-1)\n        return d\n    def test_buildsetComplete_mixed_sends_summary_review_legacy(self):\n        d = self.check_summary_build_legacy(buildResults=[SUCCESS, FAILURE],\n                                            finalResult=FAILURE,\n                                            resultText=[\"succeeded\", \"failed\"],\n                                            verifiedScore=-1)\n        return d\n    @defer.inlineCallbacks\n    def test_buildsetComplete_filtered_builder(self):\n        gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        gsp.builders = [\"foo\"]\n        yield self.run_fake_summary_build(gsp, [FAILURE, FAILURE], FAILURE,\n                                          [\"failed\", \"failed\"])\n        self.assertFalse(\n            gsp.sendCodeReview.called, \"sendCodeReview should not be called\")\n    @defer.inlineCallbacks\n    def test_buildsetComplete_filtered_matching_builder(self):\n        gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        gsp.builders = [\"Builder1\"]\n        yield self.run_fake_summary_build(gsp, [FAILURE, FAILURE], FAILURE,\n                                          [\"failed\", \"failed\"])\n        self.assertTrue(\n            gsp.sendCodeReview.called, \"sendCodeReview should be called\")\n    @defer.inlineCallbacks\n    def run_fake_single_build(self, gsp, buildResult, expWarning=False):\n        buildset, builds = yield self.setupBuildResults([buildResult], buildResult)\n        yield gsp.buildStarted(None, builds[0])\n        yield gsp.buildComplete(None, builds[0])\n        if expWarning:\n            self.assertEqual([w['message'] for w in self.flushWarnings()],\n                             ['The Gerrit status callback uses the old '\n                              'way to communicate results.  The outcome '\n                              'might be not what is expected.'])\n        defer.returnValue(str({'name': u'Builder0', 'result': buildResult}))\n    # same goes for check_single_build and check_single_build_legacy\n    @defer.inlineCallbacks\n    def check_single_build(self, buildResult, verifiedScore):\n", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "length": 958, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "6dad6c68d75d75e242d0bbeb5900a85521954edf3aeb5975"}
{"input": "", "context": "#!/usr/bin/python\n# -*-*- encoding: utf-8 -*-*-\n#\n# Copyright (C) 2006 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n__author__ = 'j.s@google.com (Jeff Scudder)'\nimport sys\nimport unittest\ntry:\n  from xml.etree import ElementTree\nexcept ImportError:\n  from elementtree import ElementTree\nimport atom\nfrom gdata import test_data\nimport gdata.test_config as conf\nclass AuthorTest(unittest.TestCase):\n  \n  def setUp(self):\n    self.author = atom.Author()\n    \n  def testEmptyAuthorShouldHaveEmptyExtensionsList(self):\n    self.assert_(isinstance(self.author.extension_elements, list))\n    self.assert_(len(self.author.extension_elements) == 0)\n    \n  def testNormalAuthorShouldHaveNoExtensionElements(self):\n    self.author.name = atom.Name(text='Jeff Scudder')\n    self.assert_(self.author.name.text == 'Jeff Scudder')\n    self.assert_(len(self.author.extension_elements) == 0)\n    new_author = atom.AuthorFromString(self.author.ToString())\n    self.assert_(len(self.author.extension_elements) == 0)\n    \n    self.author.extension_elements.append(atom.ExtensionElement(\n        'foo', text='bar'))\n    self.assert_(len(self.author.extension_elements) == 1)\n    self.assert_(self.author.name.text == 'Jeff Scudder')\n    new_author = atom.AuthorFromString(self.author.ToString())\n    self.assert_(len(self.author.extension_elements) == 1)\n    self.assert_(new_author.name.text == 'Jeff Scudder')\n  def testEmptyAuthorToAndFromStringShouldMatch(self):\n    string_from_author = self.author.ToString()\n    new_author = atom.AuthorFromString(string_from_author)\n    string_from_new_author = new_author.ToString()\n    self.assert_(string_from_author == string_from_new_author)\n    \n  def testAuthorWithNameToAndFromStringShouldMatch(self):\n    self.author.name = atom.Name()\n    self.author.name.text = 'Jeff Scudder'\n    string_from_author = self.author.ToString()\n    new_author = atom.AuthorFromString(string_from_author)\n    string_from_new_author = new_author.ToString()\n    self.assert_(string_from_author == string_from_new_author)\n    self.assert_(self.author.name.text == new_author.name.text)\n  \n  def testExtensionElements(self):\n    self.author.extension_attributes['foo1'] = 'bar'\n    self.author.extension_attributes['foo2'] = 'rab'\n    self.assert_(self.author.extension_attributes['foo1'] == 'bar')\n    self.assert_(self.author.extension_attributes['foo2'] == 'rab')\n    new_author = atom.AuthorFromString(self.author.ToString())\n    self.assert_(new_author.extension_attributes['foo1'] == 'bar')\n    self.assert_(new_author.extension_attributes['foo2'] == 'rab')\n    \n  def testConvertFullAuthorToAndFromString(self):\n    author = atom.AuthorFromString(test_data.TEST_AUTHOR)\n    self.assert_(author.name.text == 'John Doe')\n    self.assert_(author.email.text == 'johndoes@someemailadress.com')\n    self.assert_(author.uri.text == 'http://www.google.com')\n    \n    \nclass EmailTest(unittest.TestCase):\n  \n  def setUp(self):\n    self.email = atom.Email()\n    \n  def testEmailToAndFromString(self):\n    self.email.text = 'This is a test'\n    new_email = atom.EmailFromString(self.email.ToString())\n    self.assert_(self.email.text == new_email.text)\n    self.assert_(self.email.extension_elements == \n        new_email.extension_elements)\n    \n  \nclass NameTest(unittest.TestCase):\n  def setUp(self):\n    self.name = atom.Name()\n    \n  def testEmptyNameToAndFromStringShouldMatch(self):\n    string_from_name = self.name.ToString()\n    new_name = atom.NameFromString(string_from_name)\n    string_from_new_name = new_name.ToString()\n    self.assert_(string_from_name == string_from_new_name)\n    \n  def testText(self):\n    self.assert_(self.name.text is None)\n    self.name.text = 'Jeff Scudder'\n    self.assert_(self.name.text == 'Jeff Scudder')\n    new_name = atom.NameFromString(self.name.ToString())\n    self.assert_(new_name.text == self.name.text)\n    \n  def testExtensionElements(self):\n    self.name.extension_attributes['foo'] = 'bar'\n    self.assert_(self.name.extension_attributes['foo'] == 'bar')\n    new_name = atom.NameFromString(self.name.ToString())\n    self.assert_(new_name.extension_attributes['foo'] == 'bar')\n    \n    \nclass ExtensionElementTest(unittest.TestCase):\n  \n  def setUp(self):\n    self.ee = atom.ExtensionElement('foo')\n    \n  def testEmptyEEShouldProduceEmptyString(self):\n    pass\n    \n  def testEEParsesTreeCorrectly(self):\n    deep_tree = atom.ExtensionElementFromString(test_data.EXTENSION_TREE)\n    self.assert_(deep_tree.tag == 'feed')\n    self.assert_(deep_tree.namespace == 'http://www.w3.org/2005/Atom')\n    self.assert_(deep_tree.children[0].tag == 'author')\n    self.assert_(deep_tree.children[0].namespace == 'http://www.google.com')\n    self.assert_(deep_tree.children[0].children[0].tag == 'name')\n    self.assert_(deep_tree.children[0].children[0].namespace == \n        'http://www.google.com')\n    self.assert_(deep_tree.children[0].children[0].text.strip() == 'John Doe')\n    self.assert_(deep_tree.children[0].children[0].children[0].text.strip() ==\n        'Bar')\n    foo = deep_tree.children[0].children[0].children[0]\n    self.assert_(foo.tag == 'foo')\n    self.assert_(foo.namespace == 'http://www.google.com')\n    self.assert_(foo.attributes['up'] == 'down')\n    self.assert_(foo.attributes['yes'] == 'no')\n    self.assert_(foo.children == [])\n  \n  def testEEToAndFromStringShouldMatch(self):\n    string_from_ee = self.ee.ToString()\n    new_ee = atom.ExtensionElementFromString(string_from_ee)\n    string_from_new_ee = new_ee.ToString()\n    self.assert_(string_from_ee == string_from_new_ee)\n    \n    deep_tree = atom.ExtensionElementFromString(test_data.EXTENSION_TREE)    \n    string_from_deep_tree = deep_tree.ToString()\n    new_deep_tree = atom.ExtensionElementFromString(string_from_deep_tree)\n    string_from_new_deep_tree = new_deep_tree.ToString()\n    self.assert_(string_from_deep_tree == string_from_new_deep_tree)\n    \n    \nclass LinkTest(unittest.TestCase):\n  \n  def setUp(self):\n    self.link = atom.Link()\n    \n  def testLinkToAndFromString(self):\n    self.link.href = 'test href'\n    self.link.hreflang = 'english'\n    self.link.type = 'text/html'\n    self.link.extension_attributes['foo'] = 'bar'\n    self.assert_(self.link.href == 'test href')\n    self.assert_(self.link.hreflang == 'english')\n    self.assert_(self.link.type == 'text/html')\n    self.assert_(self.link.extension_attributes['foo'] == 'bar')\n    new_link = atom.LinkFromString(self.link.ToString())\n    self.assert_(self.link.href == new_link.href)\n    self.assert_(self.link.type == new_link.type)\n    self.assert_(self.link.hreflang == new_link.hreflang)\n    self.assert_(self.link.extension_attributes['foo'] == \n        new_link.extension_attributes['foo'])\n  def testLinkType(self):\n    test_link = atom.Link(link_type='text/html')\n    self.assert_(test_link.type == 'text/html')\nclass GeneratorTest(unittest.TestCase):\n  def setUp(self):\n    self.generator = atom.Generator()\n  def testGeneratorToAndFromString(self):\n    self.generator.uri = 'www.google.com'\n    self.generator.version = '1.0'\n    self.generator.extension_attributes['foo'] = 'bar'\n    self.assert_(self.generator.uri == 'www.google.com')\n    self.assert_(self.generator.version == '1.0')\n    self.assert_(self.generator.extension_attributes['foo'] == 'bar')\n    new_generator = atom.GeneratorFromString(self.generator.ToString())\n    self.assert_(self.generator.uri == new_generator.uri)\n    self.assert_(self.generator.version == new_generator.version)\n    self.assert_(self.generator.extension_attributes['foo'] ==\n        new_generator.extension_attributes['foo'])\nclass TitleTest(unittest.TestCase):\n  def setUp(self):\n    self.title = atom.Title()\n  def testTitleToAndFromString(self):\n    self.title.type = 'text'\n    self.title.text = 'Less: &lt;'\n    self.assert_(self.title.type == 'text')\n    self.assert_(self.title.text == 'Less: &lt;')\n    new_title = atom.TitleFromString(self.title.ToString())\n    self.assert_(self.title.type == new_title.type)\n    self.assert_(self.title.text == new_title.text)\nclass SubtitleTest(unittest.TestCase):\n  def setUp(self):\n    self.subtitle = atom.Subtitle()\n  def testTitleToAndFromString(self):\n    self.subtitle.type = 'text'\n    self.subtitle.text = 'sub & title'\n    self.assert_(self.subtitle.type == 'text')\n    self.assert_(self.subtitle.text == 'sub & title')\n    new_subtitle = atom.SubtitleFromString(self.subtitle.ToString())\n    self.assert_(self.subtitle.type == new_subtitle.type)\n    self.assert_(self.subtitle.text == new_subtitle.text)\nclass SummaryTest(unittest.TestCase):\n  def setUp(self):\n    self.summary = atom.Summary()\n  def testTitleToAndFromString(self):\n    self.summary.type = 'text'\n    self.summary.text = 'Less: &lt;'\n    self.assert_(self.summary.type == 'text')\n    self.assert_(self.summary.text == 'Less: &lt;')\n    new_summary = atom.SummaryFromString(self.summary.ToString())\n    self.assert_(self.summary.type == new_summary.type)\n    self.assert_(self.summary.text == new_summary.text)\nclass CategoryTest(unittest.TestCase):\n  def setUp(self):\n", "answers": ["    self.category = atom.Category()"], "length": 629, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "0bad08e092a4b3c97228cda53b001b7ddfd62dc3a8be077b"}
{"input": "", "context": "package org.checkerframework.checker.igj;\nimport org.checkerframework.checker.igj.qual.AssignsFields;\nimport org.checkerframework.checker.igj.qual.I;\nimport org.checkerframework.checker.igj.qual.Immutable;\nimport org.checkerframework.checker.igj.qual.Mutable;\nimport org.checkerframework.checker.igj.qual.ReadOnly;\nimport org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\nimport org.checkerframework.common.basetype.BaseTypeChecker;\nimport org.checkerframework.framework.type.AnnotatedTypeFactory;\nimport org.checkerframework.framework.type.AnnotatedTypeMirror;\nimport org.checkerframework.framework.type.AnnotatedTypeMirror.AnnotatedArrayType;\nimport org.checkerframework.framework.type.AnnotatedTypeMirror.AnnotatedDeclaredType;\nimport org.checkerframework.framework.type.AnnotatedTypeMirror.AnnotatedExecutableType;\nimport org.checkerframework.framework.type.AnnotatedTypeMirror.AnnotatedTypeVariable;\nimport org.checkerframework.framework.type.AnnotatedTypeMirror.AnnotatedWildcardType;\nimport org.checkerframework.framework.type.DefaultTypeHierarchy;\nimport org.checkerframework.framework.type.QualifierHierarchy;\nimport org.checkerframework.framework.type.TypeHierarchy;\nimport org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\nimport org.checkerframework.framework.type.treeannotator.TreeAnnotator;\nimport org.checkerframework.framework.type.typeannotator.ListTypeAnnotator;\nimport org.checkerframework.framework.type.typeannotator.TypeAnnotator;\nimport org.checkerframework.framework.type.visitor.AnnotatedTypeScanner;\nimport org.checkerframework.framework.type.visitor.SimpleAnnotatedTypeVisitor;\nimport org.checkerframework.framework.type.visitor.VisitHistory;\nimport org.checkerframework.framework.util.AnnotatedTypes;\nimport org.checkerframework.framework.util.GraphQualifierHierarchy;\nimport org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\nimport org.checkerframework.javacutil.AnnotationUtils;\nimport org.checkerframework.javacutil.ElementUtils;\nimport org.checkerframework.javacutil.ErrorReporter;\nimport org.checkerframework.javacutil.Pair;\nimport org.checkerframework.javacutil.TreeUtils;\nimport org.checkerframework.javacutil.TypesUtils;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.lang.model.element.AnnotationMirror;\nimport javax.lang.model.element.Element;\nimport javax.lang.model.element.ElementKind;\nimport javax.lang.model.element.TypeElement;\nimport javax.lang.model.type.TypeKind;\nimport javax.lang.model.type.TypeVariable;\nimport com.sun.source.tree.ClassTree;\nimport com.sun.source.tree.ExpressionTree;\nimport com.sun.source.tree.MethodInvocationTree;\nimport com.sun.source.tree.NewClassTree;\nimport com.sun.source.tree.Tree;\nimport com.sun.source.tree.TypeCastTree;\n/**\n * Adds implicit and default IGJ annotations, only if the user does not\n * annotate the type explicitly.  The default annotations are designed\n * to minimize the number of {@code Immutable} or {@code ReadOnly}\n * appearing in the source code.\n * <p>\n *\n * Implicit Annotations for literals:<br>\n * Immutable  -  any primitive literal (e.g. integer, long, boolean, etc.)<br>\n * IGJBottom  -  a null literal\n * <p>\n *\n * However, due to the default setting being similar to the implicit\n * annotations, there is no significant distinction between the two in\n * implementation.\n * <p>\n *\n * Default Annotations:\n * <p>\n *\n * This factory will add the {@link Immutable} annotation to a type if the\n * input is\n * <ol>\n * <li value=\"1\">(*)a primitive type,\n * <li value=\"2\">a known immutable type, if the class type is annotated as\n *    {@code Immutable}\n * </ol>\n *\n * It will add the {@link ReadOnly} annotation to a type if the input is\n * <ol>\n * <li value=\"3\">a method receiver for an immutable class\n * <li value=\"4\">a result of unification of different immutabilities (e.g.\n *    within Conditional Expressions)\n * <li value=\"5\">supertype of a wildcard/type parameter in a class/method declaration\n * </ol>\n *\n * It will add {@link IGJBottom}, a special bottom annotation to a type if\n * the input can be assigned to anything, like the following cases:\n * <ol>\n * <li value=\"6\">(*)the input is a {@code null} literal\n * <li value=\"7\">(*)the input is an unannotated new array tree\n * <li value=\"8\">the input is an unannotated new class tree invoking a constructor\n *    of {@code ReadOnly} or {@code AssignsFields} receiver type\n * <li value=\"9\">the input is the class or interface declaration\n * </ol>\n *\n * It will add the {@link Mutable} annotation to a type if\n * <ol>\n * <li value=\"10\">any remaining unqualified types (i.e. Mutable is the default)\n * </ol>\n *\n * Implementation detail:  (*) cases are handled with a meta-annotation\n * rather than in this class.\n * <p>\n *\n * Furthermore, it resolves {@link I} annotation to the proper annotation,\n * according to its specification (described in {@link I} javadoc).\n */\n//\n// To ease dealing with libraries, this inserts the bottom qualifier\n// rather than immutable in many cases, like all literals.\n// Should change that\npublic class IGJAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n    //\n    // IGJ tries to adhere to the various rules specified by the\n    // type system and the conventions of the framework, except for two\n    // things:\n    // 1. overloading the meaning of BOTTOM_QUAL\n    //    Review the javadoc of #createQualiferHierarchy\n    //\n    // 2. Having two qualifiers for a given type in one particular case\n    //    which is that the self type (i.e. type of 'this' identifier) within\n    //    a method with an AssignsFields receiver within I classes, then the self type is\n    //    '@AssignsFields @I EnclosingClass' and they are treated as\n    //    Incomparable.  This is useful in the following cases:\n    //\n    //    a. for method invocability tests, a method with an AssignsFields receiver from within\n    //       a readonly context can be called only via AssignsFields reference\n    //       of 'this'.  I cannot be a receiver type, so it doesn't interfere.\n    //\n    //    b. for assignment, 'this' can be assigned to '@I EnclosingClass'\n    //       reference within such methods (assignment encompasses the escape\n    //       of this when passed to method parameters).  Fields and variables\n    //       cannot be AssignsFields, so it's safe.\n    //\n    //    The design of QualifierHierarchy.isSubtype(Collection, Collection)\n    //    reflect this choice.\n    //\n    /** Supported annotations for IGJ.  Used for subtyping rules. **/\n    protected final AnnotationMirror READONLY, MUTABLE, IMMUTABLE, I, ASSIGNS_FIELDS, BOTTOM_QUAL;\n    /** the {@link I} annotation value key */\n    protected static final String IMMUTABILITY_KEY = \"value\";\n    /**\n     * Constructor for IGJAnnotatedTypeFactory object.\n     *\n     * @param checker the checker to which this factory belongs\n     */\n    public IGJAnnotatedTypeFactory(BaseTypeChecker checker) {\n        super(checker);\n        READONLY = AnnotationUtils.fromClass(elements, ReadOnly.class);\n        MUTABLE = AnnotationUtils.fromClass(elements, Mutable.class);\n        IMMUTABLE = AnnotationUtils.fromClass(elements, Immutable.class);\n        I = AnnotationUtils.fromClass(elements, I.class);\n        ASSIGNS_FIELDS = AnnotationUtils.fromClass(elements, AssignsFields.class);\n        BOTTOM_QUAL = AnnotationUtils.fromClass(elements, IGJBottom.class);\n        addAliasedAnnotation(org.jmlspecs.annotation.Immutable.class, IMMUTABLE);\n        addAliasedAnnotation(org.jmlspecs.annotation.Readonly.class, READONLY);\n        addAliasedAnnotation(net.jcip.annotations.Immutable.class, IMMUTABLE);\n        // TODO: Add an alias for the Pure JML annotation. It's not a type qualifier, I think adding\n        // it above does not work. Also see NullnessAnnotatedTypeFactory.\n        // this.addAliasedDeclAnnotation(org.jmlspecs.annotation.Pure.class, Pure.class, annotationToUse);\n        this.postInit();\n    }\n    @Override\n    protected TreeAnnotator createTreeAnnotator() {\n        return new ListTreeAnnotator(\n                super.createTreeAnnotator(),\n                new IGJTreePreAnnotator(this)\n        );\n    }\n    @Override\n    protected TypeAnnotator createTypeAnnotator() {\n        return new ListTypeAnnotator(\n                new IGJTypePostAnnotator(this),\n                super.createTypeAnnotator()\n        );\n    }\n    // TODO: do store annotations into the Element -> remove this override\n    // Currently, many test cases fail without this.\n    @Override\n    public void postProcessClassTree(ClassTree tree) {\n    }\n    // **********************************************************************\n    // add implicit annotations\n    // **********************************************************************\n    /**\n     * Helper class for annotating unannotated types.\n     */\n    private class IGJTypePostAnnotator extends TypeAnnotator {\n        public IGJTypePostAnnotator(IGJAnnotatedTypeFactory atypeFactory) {\n            super(atypeFactory);\n        }\n        /**\n         * For Declared types:\n         *  Classes are mutable\n         *  Interface declaration are placeholders\n         *  Enum and annotations  are immutable\n         */\n        @Override\n        public Void visitDeclared(AnnotatedDeclaredType type, Void p) {\n            if (!hasImmutabilityAnnotation(type)) {\n                // Actual element\n                TypeElement element = (TypeElement)type.getUnderlyingType().asElement();\n                AnnotatedDeclaredType elementType = fromElement(element);\n                // ElementKind elemKind = elem != null ? elem.getKind() : ElementKind.OTHER;\n                if (TypesUtils.isBoxedPrimitive(type.getUnderlyingType())\n                        || element.getQualifiedName().contentEquals(\"java.lang.String\")\n                        || ElementUtils.isObject(element)) {\n                    // variation of case 1\n                    // TODO: These cases are more of hacks and they should\n                    // really be immutable or readonly\n                    type.addAnnotation(BOTTOM_QUAL);\n                } else if (elementType.hasEffectiveAnnotation(IMMUTABLE)) {\n                    // case 2: known immutable types\n                    type.addAnnotation(IMMUTABLE);\n                }\n            }\n            return null; //super.visitDeclared(type, p);\n            /*\n            if (!hasImmutabilityAnnotation(type)) {\n                // Actual element\n                TypeElement element = (TypeElement)type.getUnderlyingType().asElement();\n                AnnotatedDeclaredType elementType = fromElement(element);\n                // ElementKind elemKind = elem != null ? elem.getKind() : ElementKind.OTHER;\n                if (TypesUtils.isBoxedPrimitive(type.getUnderlyingType())\n                        || element.getQualifiedName().contentEquals(\"java.lang.String\")\n                        || ElementUtils.isObject(element)) {\n                    // variation of case 1\n                    // TODO: These cases are more of hacks and they should\n                    // really be immutable or readonly\n                    type.replaceAnnotation(BOTTOM_QUAL);\n                } else if (elementType.hasEffectiveAnnotation(IMMUTABLE)) {\n                    // case 2: known immutable types\n                    type.replaceAnnotation(IMMUTABLE);\n                //} else if (elemKind == ElementKind.LOCAL_VARIABLE) {\n                //    type.replaceAnnotation(READONLY);\n                } else if (elementType.hasEffectiveAnnotation(MUTABLE)) { // not immutable\n                    // case 7: mutable by default\n                    type.replaceAnnotation(MUTABLE);\n                //} else if (elemKind.isClass() || elemKind.isInterface()) {\n                    // case 9: class or interface declaration\n                //    type.replaceAnnotation(BOTTOM_QUAL);\n                //} else if (elemKind.isField()) {\n                    /*\n                        && type.getElement() != null // We don't know the field context here\n                        && getAnnotatedType(ElementUtils.enclosingClass(type.getElement())).hasEffectiveAnnotation(IMMUTABLE)) {\n                    type.replaceAnnotation(IMMUTABLE);\n                    TODO: This case is not exercised by any of the test cases. Is it needed?\n                } else if (element.getKind().isClass() || element.getKind().isInterface()) {\n                    // case 10\n                    type.replaceAnnotation(MUTABLE);\n                } else {\n                    assert false : \"shouldn't be here!\";\n                }\n            }\n            return super.visitDeclared(type, p);\n            */\n        }\n        @Override\n        public Void visitExecutable(AnnotatedExecutableType type, Void p) {\n            AnnotatedDeclaredType receiver;\n            if (type.getElement().getKind() == ElementKind.CONSTRUCTOR) {\n                receiver = (AnnotatedDeclaredType) type.getReturnType();\n            } else {\n                receiver = type.getReceiverType();\n            }\n            if (receiver != null &&\n                    hasImmutabilityAnnotation(receiver)) {\n                return super.visitExecutable(type, p);\n            }\n            TypeElement ownerElement = ElementUtils.enclosingClass(type.getElement());\n            AnnotatedDeclaredType ownerType = getAnnotatedType(ownerElement);\n            if (type.getElement().getKind() == ElementKind.CONSTRUCTOR) {\n                // TODO: hack\n                if (ownerType.hasEffectiveAnnotation(MUTABLE) || ownerType.hasEffectiveAnnotation(BOTTOM_QUAL))\n                    receiver.replaceAnnotation(MUTABLE);\n                else\n                    receiver.replaceAnnotation(ASSIGNS_FIELDS);\n            } else if (receiver == null) {\n                // Nothing to do for static methods.\n            } else if (ElementUtils.isObject(ownerElement) || ownerType.hasEffectiveAnnotation(IMMUTABLE)) {\n                // case 3\n                receiver.replaceAnnotation(BOTTOM_QUAL);\n            } else {\n                // case 10: rest\n                receiver.replaceAnnotation(MUTABLE);\n            }\n            return super.visitExecutable(type, p);\n        }\n/*\n        @Override\n        public Void visitTypeVariable(AnnotatedTypeVariable type, Void p) {\n            // In a declaration the upperbound is ReadOnly, while\n            // the upper bound in a use is Mutable\n            if (type.getUpperBoundField() != null\n                    && !hasImmutabilityAnnotation(type.getUpperBoundField())) {\n                // ElementKind elemKind = elem != null ? elem.getKind() : ElementKind.OTHER;\n                /*if (elemKind.isClass() || elemKind.isInterface()\n                        || elemKind == ElementKind.CONSTRUCTOR\n                        || elemKind == ElementKind.METHOD)\n                    // case 5: upper bound within a class/method declaration\n                    type.getUpperBoundField().replaceAnnotation(READONLY);\n                else* / if (TypesUtils.isObject(type.getUnderlyingType()))\n                    // case 10: remaining cases\n                    type.getUpperBoundField().replaceAnnotation(MUTABLE);\n            }\n            return super.visitTypeVariable(type, p);\n        }\n*/\n        @Override\n        public Void visitWildcard(AnnotatedWildcardType type, Void p) {\n            // In a declaration the upper bound is ReadOnly, while\n            // the upper bound in a use is Mutable\n            if (type.getExtendsBound() != null\n                    && !hasImmutabilityAnnotation(type.getExtendsBound())) {\n                // ElementKind elemKind = elem != null ? elem.getKind() : ElementKind.OTHER;\n                /*if (elemKind.isClass() || elemKind.isInterface()\n                        || elemKind == ElementKind.CONSTRUCTOR\n                        || elemKind == ElementKind.METHOD)\n                    // case 5: upper bound within a class/method declaration\n                    type.getExtendsBound().replaceAnnotation(READONLY);\n                else*/ if (TypesUtils.isObject(type.getUnderlyingType()))\n                    // case 10: remaining cases\n                    type.getExtendsBound().replaceAnnotation(MUTABLE);\n            }\n            return super.visitWildcard(type, p);\n        }\n    }\n    /**\n     * Helper class to annotate trees.\n     *\n     * It only adds a BOTTOM_QUAL for new classes and new arrays,\n     * when an annotation is not specified\n     */\n    private class IGJTreePreAnnotator extends TreeAnnotator {\n        public IGJTreePreAnnotator(IGJAnnotatedTypeFactory atypeFactory) {\n            super(atypeFactory);\n        }\n        @Override\n        public Void visitNewClass(NewClassTree node, AnnotatedTypeMirror p) {\n            /*\n            if (node.getClassBody() != null) {\n                System.out.println(\"Visit anonymous: \" + node + \" + input: \" + p);\n                AnnotatedTypeMirror tt = IGJAnnotatedTypeFactory.this.getAnnotatedType(node.getIdentifier());\n                p.replaceAnnotations(tt.getAnnotations());\n                System.out.println(\"  final type: \" + p);\n                // Is this the right way to handle anonymous classes?\n            } else */\n            if (!hasImmutabilityAnnotation(p)) {\n                AnnotatedTypeMirror ct = fromElement(\n                        ((AnnotatedDeclaredType)p).getUnderlyingType().asElement());\n                if (!hasImmutabilityAnnotation(ct) || ct.hasAnnotationRelaxed(I)) {\n                    AnnotatedExecutableType con = getAnnotatedType(TreeUtils.elementFromUse(node));\n                    if (con.getReceiverType() != null &&\n                            con.getReceiverType().hasEffectiveAnnotation(IMMUTABLE))\n                        p.replaceAnnotation(IMMUTABLE);\n                    else\n                        p.replaceAnnotation(MUTABLE);\n                } else {\n                    // case 2: known immutability type\n                    p.addAnnotations(ct.getAnnotations());\n                }\n            }\n            return null;\n        }\n        @Override\n        public Void visitTypeCast(TypeCastTree node, AnnotatedTypeMirror p) {\n            if (!hasImmutabilityAnnotation(p)) {\n                AnnotatedTypeMirror castedType = getAnnotatedType(node.getExpression());\n                p.addAnnotations(castedType.getAnnotations());\n            }\n            return null;\n        }\n    }\n    @Override\n    protected AnnotatedDeclaredType getImplicitReceiverType(ExpressionTree tree) {\n        AnnotatedDeclaredType receiver = super.getImplicitReceiverType(tree);\n        if (receiver != null && !isMostEnclosingThisDeref(tree)) {\n            receiver.replaceAnnotation(READONLY);\n        }\n        return receiver;\n    }\n    /**\n     * Returns the type of field {@code this},  for the scope of this tree.\n     * In IGJ, the self type is the method receiver in this scope.\n     */\n    @Override\n    public AnnotatedDeclaredType getSelfType(Tree tree) {\n        AnnotatedDeclaredType act = getCurrentClassType(tree);\n        AnnotatedDeclaredType methodReceiver;\n        if (isWithinConstructor(tree)) {\n            methodReceiver = (AnnotatedDeclaredType) getAnnotatedType(visitorState.getMethodTree()).getReturnType();\n        } else {\n            methodReceiver = getCurrentMethodReceiver(tree);\n        }\n        if (methodReceiver == null)\n            return act;\n        // Are we in a mutable or Immutable scope\n        if (isWithinConstructor(tree) && !methodReceiver.hasEffectiveAnnotation(MUTABLE)) {\n            methodReceiver.replaceAnnotation(ASSIGNS_FIELDS);\n        }\n        if (methodReceiver.hasEffectiveAnnotation(MUTABLE) ||\n                methodReceiver.hasEffectiveAnnotation(IMMUTABLE)) {\n            return methodReceiver;\n        } else if (act.hasAnnotationRelaxed(I) || act.hasEffectiveAnnotation(IMMUTABLE)) {\n            if (methodReceiver.hasEffectiveAnnotation(ASSIGNS_FIELDS))\n                act.replaceAnnotation(ASSIGNS_FIELDS);\n            return act;\n        } else\n            return methodReceiver;\n    }\n    // **********************************************************************\n    // resolving @I Immutability\n    // **********************************************************************\n    /**\n     * Replace all instances of {@code @I} in the super types with the\n     * immutability of the current type\n     *\n     * @param type  the type whose supertypes are requested\n     * @param supertypes    the supertypes of type\n     */\n    @Override\n    protected void postDirectSuperTypes(AnnotatedTypeMirror type,\n            List<? extends AnnotatedTypeMirror> supertypes) {\n        super.postDirectSuperTypes(type, supertypes);\n        Map<String, AnnotationMirror> templateMapping =\n            new ImmutabilityTemplateCollector().visit(type);\n        new ImmutabilityResolver().visit(supertypes, templateMapping);\n        for (AnnotatedTypeMirror supertype: supertypes) {\n            typeAnnotator.visit(supertype, null);\n        }\n    }\n    /**\n     * Resolve the instances of {@code @I} in the {@code elementType} based\n     * on {@code owner}, according to is specification.\n     */\n    @Override\n    public void postAsMemberOf(AnnotatedTypeMirror elementType,\n            AnnotatedTypeMirror owner, Element element) {\n        resolveImmutabilityTypeVar(elementType, owner);\n    }\n    @Override\n    protected void annotateInheritedFromClass(/*@Mutable*/ AnnotatedTypeMirror type,\n            Set<AnnotationMirror> fromClass) {\n        // Ignore annotations inherited from a class.\n        // TODO: this mechanism is implemented in special IGJ logic and\n        // should be cleaned up.\n    }\n    /**\n     * Resolves {@code @I} in the type of the method type base on the method\n     * invocation tree parameters.  Any unresolved {@code @I}s is resolved to a\n     * place holder type.\n     *\n     * It resolves {@code @I} annotation in the following way:\n     * <ul>\n     *  <li>based on the tree receiver, done automatically through implicit\n     *      invocation of\n     *      {@link AnnotatedTypes#asMemberOf(Types, AnnotatedTypeFactory, AnnotatedTypeMirror, Element)}</li>\n     *  <li>based on the invocation passed parameters</li>\n     *  <li>if any yet unresolved immutability variables get resolved to a\n     *      wildcard type</li>\n     * </ul>\n     */\n    @Override\n    public Pair<AnnotatedExecutableType, List<AnnotatedTypeMirror>> methodFromUse(MethodInvocationTree tree) {\n        Pair<AnnotatedExecutableType, List<AnnotatedTypeMirror>> mfuPair = super.methodFromUse(tree);\n        AnnotatedExecutableType type = mfuPair.first;\n        // javac produces enum super calls with zero arguments even though the\n        // method element requires two.\n        // See also BaseTypeVisitor.visitMethodInvocation and\n        // CFGBuilder.CFGTranslationPhaseOne.visitMethodInvocation\n        if (TreeUtils.isEnumSuper(tree)) return mfuPair;\n        List<AnnotatedTypeMirror> requiredArgs = AnnotatedTypes.expandVarArgs(this, type, tree.getArguments());\n        List<AnnotatedTypeMirror> arguments = AnnotatedTypes.getAnnotatedTypes(this, requiredArgs, tree.getArguments());\n        ImmutabilityTemplateCollector collector = new ImmutabilityTemplateCollector();\n        Map<String, AnnotationMirror> matchingMapping = collector.visit(arguments, requiredArgs);\n        if (!matchingMapping.isEmpty())\n            new ImmutabilityResolver().visit(type, matchingMapping);\n        // For finding resolved types, rather than to actually resolve immutability\n        Map<String, AnnotationMirror> fromReceiver = collector.visit(getReceiverType(tree));\n        final Map<String, AnnotationMirror> mapping =\n            collector.reduce(matchingMapping, fromReceiver);\n        new AnnotatedTypeScanner<Void, Void>() {\n            @Override\n            public Void visitDeclared(AnnotatedDeclaredType type, Void p) {\n                if (type.hasAnnotationRelaxed(I)) {\n                    AnnotationMirror anno =\n                        type.getAnnotation(I.class);\n                    if (!mapping.containsValue(anno)) {\n                        type.replaceAnnotation(BOTTOM_QUAL);\n                    }\n                }\n                return super.visitDeclared(type, p);\n            }\n        }.visit(type);\n        return mfuPair;\n    }\n    /**\n     * Infers the immutability of {@code @I}s based on the provided types, and\n     * replace all instances of {@code @I} with their corresponding qualifiers.\n     * The {@code @I} annotations that are not resolved are left intact.\n     *\n     * @param type      the type with {@code @I} annotation\n     * @param provided  the types with qualifiers that may be bound to\n     *                  {@code @I}\n     * @return true iff a qualifier has been resolved.\n     */\n    private boolean resolveImmutabilityTypeVar(AnnotatedTypeMirror type,\n            AnnotatedTypeMirror ...provided) {\n        ImmutabilityTemplateCollector collector = new ImmutabilityTemplateCollector();\n        // maps the @I values to I resolved annotations\n        Map<String, AnnotationMirror> templateMapping = Collections.emptyMap();\n        for (AnnotatedTypeMirror pt : provided)\n            templateMapping = collector.reduce(templateMapping, collector.visit(pt));\n        // There is nothing to resolve\n        if (templateMapping.isEmpty())\n            return false;\n        new ImmutabilityResolver().visit(type, templateMapping);\n        return true;\n    }\n    /**\n     * A helper class that resolves the immutability on a types based on a\n     * provided mapping.\n     *\n     * It returns a set of the annotations that were inserted. This is important\n     * to recognize which immutability type variables were resolved and which\n     * are to be made into place holder.\n     */\n    private class ImmutabilityResolver extends\n    AnnotatedTypeScanner<Void, Map<String, AnnotationMirror>> {\n        public void visit(Iterable<? extends AnnotatedTypeMirror> types,\n                Map<String, AnnotationMirror> templateMapping) {\n            if (templateMapping != null && !templateMapping.isEmpty()) {\n                for (AnnotatedTypeMirror type : types)\n                    visit(type, templateMapping);\n            }\n        }\n        @Override\n        public Void visitDeclared(AnnotatedDeclaredType type,\n                Map<String, AnnotationMirror> p) {\n            if (type.hasAnnotationRelaxed(I)) {\n                String immutableString =\n                    AnnotationUtils.getElementValue(getImmutabilityAnnotation(type),\n                            IMMUTABILITY_KEY, String.class, true);\n                if (p.containsKey(immutableString)) {\n                    type.replaceAnnotation(p.get(immutableString));\n                }\n            }\n            return super.visitDeclared(type, p);\n        }\n    }\n    /**\n     * A Helper class that tries to resolve the immutability type variable,\n     * as the type variable is assigned to the most restricted immutability\n     */\n    private class ImmutabilityTemplateCollector\n    extends SimpleAnnotatedTypeVisitor<Map<String, AnnotationMirror>, AnnotatedTypeMirror> {\n        public Map<String, AnnotationMirror> reduce(Map<String, AnnotationMirror> r1,\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "length": 2339, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "0d5ebe09775314436fb1f120cb4c0d408be485ca49b27ab0"}
{"input": "", "context": "# ##### BEGIN GPL LICENSE BLOCK #####\n#\n#  This program is free software; you can redistribute it and/or\n#  modify it under the terms of the GNU General Public License\n#  as published by the Free Software Foundation; either version 2\n#  of the License, or (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software Foundation,\n#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n#\n# ##### END GPL LICENSE BLOCK #####\n# <pep8 compliant>\nimport bpy\nfrom bpy.types import Menu, Panel, UIList\nfrom rna_prop_ui import PropertyPanel\nfrom bpy.app.translations import pgettext_iface as iface_\ndef active_node_mat(mat):\n    # TODO, 2.4x has a pipeline section, for 2.5 we need to communicate\n    # which settings from node-materials are used\n    if mat is not None:\n        mat_node = mat.active_node_material\n        if mat_node:\n            return mat_node\n        else:\n            return mat\n    return None\ndef check_material(mat):\n    if mat is not None:\n        if mat.use_nodes:\n            if mat.active_node_material is not None:\n                return True\n            return False\n        return True\n    return False\ndef simple_material(mat):\n    if (mat is not None) and (not mat.use_nodes):\n        return True\n    return False\nclass MATERIAL_MT_sss_presets(Menu):\n    bl_label = \"SSS Presets\"\n    preset_subdir = \"sss\"\n    preset_operator = \"script.execute_preset\"\n    draw = Menu.draw_preset\nclass MATERIAL_MT_specials(Menu):\n    bl_label = \"Material Specials\"\n    def draw(self, context):\n        layout = self.layout\n        layout.operator(\"object.material_slot_copy\", icon='COPY_ID')\n        layout.operator(\"material.copy\", icon='COPYDOWN')\n        layout.operator(\"material.paste\", icon='PASTEDOWN')\nclass MATERIAL_UL_matslots(UIList):\n    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):\n        # assert(isinstance(item, bpy.types.MaterialSlot)\n        # ob = data\n        slot = item\n        ma = slot.material\n        if self.layout_type in {'DEFAULT', 'COMPACT'}:\n            if ma:\n                layout.prop(ma, \"name\", text=\"\", emboss=False, icon_value=icon)\n            else:\n                layout.label(text=\"\", icon_value=icon)\n            if ma and not context.scene.render.use_shading_nodes:\n                manode = ma.active_node_material\n                if manode:\n                    layout.label(text=iface_(\"Node %s\") % manode.name, translate=False, icon_value=layout.icon(manode))\n                elif ma.use_nodes:\n                    layout.label(text=\"Node <none>\")\n        elif self.layout_type == 'GRID':\n            layout.alignment = 'CENTER'\n            layout.label(text=\"\", icon_value=icon)\nclass MaterialButtonsPanel:\n    bl_space_type = 'PROPERTIES'\n    bl_region_type = 'WINDOW'\n    bl_context = \"material\"\n    # COMPAT_ENGINES must be defined in each subclass, external engines can add themselves here\n    @classmethod\n    def poll(cls, context):\n        return context.material and (context.scene.render.engine in cls.COMPAT_ENGINES)\nclass MATERIAL_PT_context_material(MaterialButtonsPanel, Panel):\n    bl_label = \"\"\n    bl_options = {'HIDE_HEADER'}\n    COMPAT_ENGINES = {'BLENDER_RENDER', 'BLENDER_GAME'}\n    @classmethod\n    def poll(cls, context):\n        # An exception, don't call the parent poll func because\n        # this manages materials for all engine types\n        engine = context.scene.render.engine\n        return (context.material or context.object) and (engine in cls.COMPAT_ENGINES)\n    def draw(self, context):\n        layout = self.layout\n        mat = context.material\n        ob = context.object\n        slot = context.material_slot\n        space = context.space_data\n        is_sortable = (len(ob.material_slots) > 1)\n        if ob:\n            rows = 1\n            if is_sortable:\n                rows = 4\n            row = layout.row()\n            row.template_list(\"MATERIAL_UL_matslots\", \"\", ob, \"material_slots\", ob, \"active_material_index\", rows=rows)\n            col = row.column(align=True)\n            col.operator(\"object.material_slot_add\", icon='ZOOMIN', text=\"\")\n            col.operator(\"object.material_slot_remove\", icon='ZOOMOUT', text=\"\")\n            col.menu(\"MATERIAL_MT_specials\", icon='DOWNARROW_HLT', text=\"\")\n            if is_sortable:\n                col.separator()\n                col.operator(\"object.material_slot_move\", icon='TRIA_UP', text=\"\").direction = 'UP'\n                col.operator(\"object.material_slot_move\", icon='TRIA_DOWN', text=\"\").direction = 'DOWN'\n            if ob.mode == 'EDIT':\n                row = layout.row(align=True)\n                row.operator(\"object.material_slot_assign\", text=\"Assign\")\n                row.operator(\"object.material_slot_select\", text=\"Select\")\n                row.operator(\"object.material_slot_deselect\", text=\"Deselect\")\n        split = layout.split(percentage=0.65)\n        if ob:\n            split.template_ID(ob, \"active_material\", new=\"material.new\")\n            row = split.row()\n            if mat:\n                row.prop(mat, \"use_nodes\", icon='NODETREE', text=\"\")\n            if slot:\n                row.prop(slot, \"link\", text=\"\")\n            else:\n                row.label()\n        elif mat:\n            split.template_ID(space, \"pin_id\")\n            split.separator()\n        if mat:\n            layout.prop(mat, \"type\", expand=True)\n            if mat.use_nodes:\n                row = layout.row()\n                row.label(text=\"\", icon='NODETREE')\n                if mat.active_node_material:\n                    row.prop(mat.active_node_material, \"name\", text=\"\")\n                else:\n                    row.label(text=\"No material node selected\")\nclass MATERIAL_PT_preview(MaterialButtonsPanel, Panel):\n    bl_label = \"Preview\"\n    COMPAT_ENGINES = {'BLENDER_RENDER', 'BLENDER_GAME'}\n    def draw(self, context):\n        self.layout.template_preview(context.material)\nclass MATERIAL_PT_pipeline(MaterialButtonsPanel, Panel):\n    bl_label = \"Render Pipeline Options\"\n    bl_options = {'DEFAULT_CLOSED'}\n    COMPAT_ENGINES = {'BLENDER_RENDER', 'BLENDER_GAME'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n        engine = context.scene.render.engine\n        return mat and (not simple_material(mat)) and (mat.type in {'SURFACE', 'WIRE', 'VOLUME'}) and (engine in cls.COMPAT_ENGINES)\n    def draw(self, context):\n        layout = self. layout\n        mat = context.material\n        mat_type = mat.type in {'SURFACE', 'WIRE'}\n        row = layout.row()\n        row.active = mat_type\n        row.prop(mat, \"use_transparency\")\n        sub = row.column()\n        sub.prop(mat, \"offset_z\")\n        sub.active = mat_type and mat.use_transparency and mat.transparency_method == 'Z_TRANSPARENCY'\n        row = layout.row()\n        row.active = mat.use_transparency or not mat_type\n        row.prop(mat, \"transparency_method\", expand=True)\n        layout.separator()\n        split = layout.split()\n        col = split.column()\n        col.prop(mat, \"use_raytrace\")\n        col.prop(mat, \"use_full_oversampling\")\n        sub = col.column()\n        sub.active = mat_type\n        sub.prop(mat, \"use_sky\")\n        sub.prop(mat, \"invert_z\")\n        col.prop(mat, \"pass_index\")\n        col = split.column()\n        col.active = mat_type\n        col.prop(mat, \"use_cast_shadows\", text=\"Cast\")\n        col.prop(mat, \"use_cast_shadows_only\", text=\"Cast Only\")\n        col.prop(mat, \"use_cast_buffer_shadows\")\n        sub = col.column()\n        sub.active = mat.use_cast_buffer_shadows\n        sub.prop(mat, \"shadow_cast_alpha\", text=\"Casting Alpha\")\n        col.prop(mat, \"use_cast_approximate\")\nclass MATERIAL_PT_diffuse(MaterialButtonsPanel, Panel):\n    bl_label = \"Diffuse\"\n    COMPAT_ENGINES = {'BLENDER_RENDER', 'BLENDER_GAME'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n        engine = context.scene.render.engine\n        return check_material(mat) and (mat.type in {'SURFACE', 'WIRE'}) and (engine in cls.COMPAT_ENGINES)\n    def draw(self, context):\n        layout = self.layout\n        mat = active_node_mat(context.material)\n        split = layout.split()\n        col = split.column()\n        col.prop(mat, \"diffuse_color\", text=\"\")\n        sub = col.column()\n        sub.active = (not mat.use_shadeless)\n        sub.prop(mat, \"diffuse_intensity\", text=\"Intensity\")\n        col = split.column()\n        col.active = (not mat.use_shadeless)\n        col.prop(mat, \"diffuse_shader\", text=\"\")\n        col.prop(mat, \"use_diffuse_ramp\", text=\"Ramp\")\n        col = layout.column()\n        col.active = (not mat.use_shadeless)\n        if mat.diffuse_shader == 'OREN_NAYAR':\n            col.prop(mat, \"roughness\")\n        elif mat.diffuse_shader == 'MINNAERT':\n            col.prop(mat, \"darkness\")\n        elif mat.diffuse_shader == 'TOON':\n            row = col.row()\n            row.prop(mat, \"diffuse_toon_size\", text=\"Size\")\n            row.prop(mat, \"diffuse_toon_smooth\", text=\"Smooth\")\n        elif mat.diffuse_shader == 'FRESNEL':\n            row = col.row()\n            row.prop(mat, \"diffuse_fresnel\", text=\"Fresnel\")\n            row.prop(mat, \"diffuse_fresnel_factor\", text=\"Factor\")\n        if mat.use_diffuse_ramp:\n            col = layout.column()\n            col.active = (not mat.use_shadeless)\n            col.separator()\n            col.template_color_ramp(mat, \"diffuse_ramp\", expand=True)\n            col.separator()\n            row = col.row()\n            row.prop(mat, \"diffuse_ramp_input\", text=\"Input\")\n            row.prop(mat, \"diffuse_ramp_blend\", text=\"Blend\")\n            col.prop(mat, \"diffuse_ramp_factor\", text=\"Factor\")\nclass MATERIAL_PT_specular(MaterialButtonsPanel, Panel):\n    bl_label = \"Specular\"\n    COMPAT_ENGINES = {'BLENDER_RENDER', 'BLENDER_GAME'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n        engine = context.scene.render.engine\n        return check_material(mat) and (mat.type in {'SURFACE', 'WIRE'}) and (engine in cls.COMPAT_ENGINES)\n    def draw(self, context):\n        layout = self.layout\n        mat = active_node_mat(context.material)\n        layout.active = (not mat.use_shadeless)\n        split = layout.split()\n        col = split.column()\n        col.prop(mat, \"specular_color\", text=\"\")\n        col.prop(mat, \"specular_intensity\", text=\"Intensity\")\n        col = split.column()\n        col.prop(mat, \"specular_shader\", text=\"\")\n        col.prop(mat, \"use_specular_ramp\", text=\"Ramp\")\n        col = layout.column()\n        if mat.specular_shader in {'COOKTORR', 'PHONG'}:\n            col.prop(mat, \"specular_hardness\", text=\"Hardness\")\n        elif mat.specular_shader == 'BLINN':\n            row = col.row()\n            row.prop(mat, \"specular_hardness\", text=\"Hardness\")\n            row.prop(mat, \"specular_ior\", text=\"IOR\")\n        elif mat.specular_shader == 'WARDISO':\n            col.prop(mat, \"specular_slope\", text=\"Slope\")\n        elif mat.specular_shader == 'TOON':\n            row = col.row()\n            row.prop(mat, \"specular_toon_size\", text=\"Size\")\n            row.prop(mat, \"specular_toon_smooth\", text=\"Smooth\")\n        if mat.use_specular_ramp:\n            layout.separator()\n            layout.template_color_ramp(mat, \"specular_ramp\", expand=True)\n            layout.separator()\n            row = layout.row()\n            row.prop(mat, \"specular_ramp_input\", text=\"Input\")\n            row.prop(mat, \"specular_ramp_blend\", text=\"Blend\")\n            layout.prop(mat, \"specular_ramp_factor\", text=\"Factor\")\nclass MATERIAL_PT_shading(MaterialButtonsPanel, Panel):\n    bl_label = \"Shading\"\n    COMPAT_ENGINES = {'BLENDER_RENDER', 'BLENDER_GAME'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n        engine = context.scene.render.engine\n        return check_material(mat) and (mat.type in {'SURFACE', 'WIRE'}) and (engine in cls.COMPAT_ENGINES)\n    def draw(self, context):\n        layout = self.layout\n        mat = active_node_mat(context.material)\n        if mat.type in {'SURFACE', 'WIRE'}:\n            split = layout.split()\n            col = split.column()\n            sub = col.column()\n            sub.active = not mat.use_shadeless\n            sub.prop(mat, \"emit\")\n            sub.prop(mat, \"ambient\")\n            sub = col.column()\n            sub.prop(mat, \"translucency\")\n            col = split.column()\n            col.prop(mat, \"use_shadeless\")\n            sub = col.column()\n            sub.active = not mat.use_shadeless\n            sub.prop(mat, \"use_tangent_shading\")\n            sub.prop(mat, \"use_cubic\")\nclass MATERIAL_PT_transp(MaterialButtonsPanel, Panel):\n    bl_label = \"Transparency\"\n    COMPAT_ENGINES = {'BLENDER_RENDER'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n        engine = context.scene.render.engine\n        return check_material(mat) and (mat.type in {'SURFACE', 'WIRE'}) and (engine in cls.COMPAT_ENGINES)\n    def draw_header(self, context):\n        mat = context.material\n        if simple_material(mat):\n            self.layout.prop(mat, \"use_transparency\", text=\"\")\n    def draw(self, context):\n        layout = self.layout\n        base_mat = context.material\n        mat = active_node_mat(context.material)\n        rayt = mat.raytrace_transparency\n        if simple_material(base_mat):\n            row = layout.row()\n            row.active = mat.use_transparency\n            row.prop(mat, \"transparency_method\", expand=True)\n        split = layout.split()\n        split.active = base_mat.use_transparency\n        col = split.column()\n        col.prop(mat, \"alpha\")\n        row = col.row()\n        row.active = (base_mat.transparency_method != 'MASK') and (not mat.use_shadeless)\n        row.prop(mat, \"specular_alpha\", text=\"Specular\")\n        col = split.column()\n        col.active = (not mat.use_shadeless)\n        col.prop(rayt, \"fresnel\")\n        sub = col.column()\n        sub.active = (rayt.fresnel > 0.0)\n        sub.prop(rayt, \"fresnel_factor\", text=\"Blend\")\n        if base_mat.transparency_method == 'RAYTRACE':\n            layout.separator()\n            split = layout.split()\n            split.active = base_mat.use_transparency\n            col = split.column()\n            col.prop(rayt, \"ior\")\n            col.prop(rayt, \"filter\")\n            col.prop(rayt, \"falloff\")\n            col.prop(rayt, \"depth_max\")\n            col.prop(rayt, \"depth\")\n            col = split.column()\n            col.label(text=\"Gloss:\")\n            col.prop(rayt, \"gloss_factor\", text=\"Amount\")\n            sub = col.column()\n            sub.active = rayt.gloss_factor < 1.0\n            sub.prop(rayt, \"gloss_threshold\", text=\"Threshold\")\n            sub.prop(rayt, \"gloss_samples\", text=\"Samples\")\nclass MATERIAL_PT_mirror(MaterialButtonsPanel, Panel):\n    bl_label = \"Mirror\"\n    bl_options = {'DEFAULT_CLOSED'}\n    COMPAT_ENGINES = {'BLENDER_RENDER'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n        engine = context.scene.render.engine\n        return check_material(mat) and (mat.type in {'SURFACE', 'WIRE'}) and (engine in cls.COMPAT_ENGINES)\n    def draw_header(self, context):\n        raym = active_node_mat(context.material).raytrace_mirror\n        self.layout.prop(raym, \"use\", text=\"\")\n    def draw(self, context):\n        layout = self.layout\n        mat = active_node_mat(context.material)\n        raym = mat.raytrace_mirror\n        layout.active = raym.use\n        split = layout.split()\n        col = split.column()\n        col.prop(raym, \"reflect_factor\")\n        col.prop(mat, \"mirror_color\", text=\"\")\n        col = split.column()\n        col.prop(raym, \"fresnel\")\n        sub = col.column()\n        sub.active = (raym.fresnel > 0.0)\n        sub.prop(raym, \"fresnel_factor\", text=\"Blend\")\n        split = layout.split()\n        col = split.column()\n        col.separator()\n        col.prop(raym, \"depth\")\n        col.prop(raym, \"distance\", text=\"Max Dist\")\n        col.separator()\n        sub = col.split(percentage=0.4)\n        sub.active = (raym.distance > 0.0)\n        sub.label(text=\"Fade To:\")\n        sub.prop(raym, \"fade_to\", text=\"\")\n        col = split.column()\n        col.label(text=\"Gloss:\")\n        col.prop(raym, \"gloss_factor\", text=\"Amount\")\n        sub = col.column()\n        sub.active = (raym.gloss_factor < 1.0)\n        sub.prop(raym, \"gloss_threshold\", text=\"Threshold\")\n        sub.prop(raym, \"gloss_samples\", text=\"Samples\")\n        sub.prop(raym, \"gloss_anisotropic\", text=\"Anisotropic\")\nclass MATERIAL_PT_sss(MaterialButtonsPanel, Panel):\n    bl_label = \"Subsurface Scattering\"\n    bl_options = {'DEFAULT_CLOSED'}\n    COMPAT_ENGINES = {'BLENDER_RENDER'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n        engine = context.scene.render.engine\n        return check_material(mat) and (mat.type in {'SURFACE', 'WIRE'}) and (engine in cls.COMPAT_ENGINES)\n    def draw_header(self, context):\n        mat = active_node_mat(context.material)\n        sss = mat.subsurface_scattering\n        self.layout.active = (not mat.use_shadeless)\n        self.layout.prop(sss, \"use\", text=\"\")\n    def draw(self, context):\n        layout = self.layout\n        mat = active_node_mat(context.material)\n        sss = mat.subsurface_scattering\n        layout.active = (sss.use) and (not mat.use_shadeless)\n        row = layout.row().split()\n        sub = row.row(align=True).split(align=True, percentage=0.75)\n        sub.menu(\"MATERIAL_MT_sss_presets\", text=bpy.types.MATERIAL_MT_sss_presets.bl_label)\n        sub.operator(\"material.sss_preset_add\", text=\"\", icon='ZOOMIN')\n        sub.operator(\"material.sss_preset_add\", text=\"\", icon='ZOOMOUT').remove_active = True\n        split = layout.split()\n        col = split.column()\n        col.prop(sss, \"ior\")\n        col.prop(sss, \"scale\")\n        col.prop(sss, \"color\", text=\"\")\n        col.prop(sss, \"radius\", text=\"RGB Radius\", expand=True)\n        col = split.column()\n        sub = col.column(align=True)\n        sub.label(text=\"Blend:\")\n        sub.prop(sss, \"color_factor\", text=\"Color\")\n        sub.prop(sss, \"texture_factor\", text=\"Texture\")\n        sub.label(text=\"Scattering Weight:\")\n        sub.prop(sss, \"front\")\n        sub.prop(sss, \"back\")\n        col.separator()\n        col.prop(sss, \"error_threshold\", text=\"Error\")\nclass MATERIAL_PT_halo(MaterialButtonsPanel, Panel):\n    bl_label = \"Halo\"\n    COMPAT_ENGINES = {'BLENDER_RENDER'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n        engine = context.scene.render.engine\n        return mat and (mat.type == 'HALO') and (engine in cls.COMPAT_ENGINES)\n    def draw(self, context):\n        layout = self.layout\n        mat = context.material  # don't use node material\n        halo = mat.halo\n        def number_but(layout, toggle, number, name, color):\n            row = layout.row(align=True)\n            row.prop(halo, toggle, text=\"\")\n            sub = row.column(align=True)\n            sub.active = getattr(halo, toggle)\n            sub.prop(halo, number, text=name, translate=False)\n            if not color == \"\":\n                sub.prop(mat, color, text=\"\")\n        split = layout.split()\n        col = split.column()\n        col.prop(mat, \"alpha\")\n        col.prop(mat, \"diffuse_color\", text=\"\")\n        col.prop(halo, \"seed\")\n        col = split.column()\n        col.prop(halo, \"size\")\n        col.prop(halo, \"hardness\")\n        col.prop(halo, \"add\")\n        layout.label(text=\"Options:\")\n        split = layout.split()\n        col = split.column()\n        col.prop(halo, \"use_texture\")\n        col.prop(halo, \"use_vertex_normal\")\n        col.prop(halo, \"use_extreme_alpha\")\n        col.prop(halo, \"use_shaded\")\n        col.prop(halo, \"use_soft\")\n        col = split.column()\n        number_but(col, \"use_ring\", \"ring_count\", iface_(\"Rings\"), \"mirror_color\")\n        number_but(col, \"use_lines\", \"line_count\", iface_(\"Lines\"), \"specular_color\")\n        number_but(col, \"use_star\", \"star_tip_count\", iface_(\"Star Tips\"), \"\")\nclass MATERIAL_PT_flare(MaterialButtonsPanel, Panel):\n    bl_label = \"Flare\"\n    COMPAT_ENGINES = {'BLENDER_RENDER'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n        engine = context.scene.render.engine\n        return mat and (mat.type == 'HALO') and (engine in cls.COMPAT_ENGINES)\n    def draw_header(self, context):\n        halo = context.material.halo\n        self.layout.prop(halo, \"use_flare_mode\", text=\"\")\n    def draw(self, context):\n        layout = self.layout\n        mat = context.material  # don't use node material\n        halo = mat.halo\n        layout.active = halo.use_flare_mode\n        split = layout.split()\n        col = split.column()\n        col.prop(halo, \"flare_size\", text=\"Size\")\n        col.prop(halo, \"flare_boost\", text=\"Boost\")\n        col.prop(halo, \"flare_seed\", text=\"Seed\")\n        col = split.column()\n        col.prop(halo, \"flare_subflare_count\", text=\"Subflares\")\n        col.prop(halo, \"flare_subflare_size\", text=\"Subsize\")\nclass MATERIAL_PT_game_settings(MaterialButtonsPanel, Panel):\n    bl_label = \"Game Settings\"\n    COMPAT_ENGINES = {'BLENDER_GAME'}\n    @classmethod\n    def poll(cls, context):\n        return context.material and (context.scene.render.engine in cls.COMPAT_ENGINES)\n    def draw(self, context):\n        layout = self.layout\n        game = context.material.game_settings  # don't use node material\n        row = layout.row()\n        row.prop(game, \"use_backface_culling\")\n        row.prop(game, \"invisible\")\n        row.prop(game, \"text\")\n        row = layout.row()\n        row.label(text=\"Alpha Blend:\")\n        row.label(text=\"Face Orientation:\")\n        row = layout.row()\n        row.prop(game, \"alpha_blend\", text=\"\")\n        row.prop(game, \"face_orientation\", text=\"\")\nclass MATERIAL_PT_physics(MaterialButtonsPanel, Panel):\n    bl_label = \"Physics\"\n    COMPAT_ENGINES = {'BLENDER_GAME'}\n    def draw_header(self, context):\n        game = context.material.game_settings\n        self.layout.prop(game, \"physics\", text=\"\")\n    @classmethod\n    def poll(cls, context):\n        return context.material and (context.scene.render.engine in cls.COMPAT_ENGINES)\n    def draw(self, context):\n        layout = self.layout\n        layout.active = context.material.game_settings.physics\n        phys = context.material.physics  # don't use node material\n        split = layout.split()\n        row = split.row()\n        row.prop(phys, \"friction\")\n        row.prop(phys, \"elasticity\", slider=True)\n        row = layout.row()\n        row.label(text=\"Force Field:\")\n        row = layout.row()\n        row.prop(phys, \"fh_force\")\n        row.prop(phys, \"fh_damping\", slider=True)\n        row = layout.row()\n        row.prop(phys, \"fh_distance\")\n        row.prop(phys, \"use_fh_normal\")\nclass MATERIAL_PT_strand(MaterialButtonsPanel, Panel):\n    bl_label = \"Strand\"\n    bl_options = {'DEFAULT_CLOSED'}\n    COMPAT_ENGINES = {'BLENDER_RENDER'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n        engine = context.scene.render.engine\n        return mat and (mat.type in {'SURFACE', 'WIRE', 'HALO'}) and (engine in cls.COMPAT_ENGINES)\n    def draw(self, context):\n        layout = self.layout\n        mat = context.material  # don't use node material\n        tan = mat.strand\n        split = layout.split()\n        col = split.column()\n        sub = col.column(align=True)\n        sub.label(text=\"Size:\")\n        sub.prop(tan, \"root_size\", text=\"Root\")\n        sub.prop(tan, \"tip_size\", text=\"Tip\")\n        sub.prop(tan, \"size_min\", text=\"Minimum\")\n        sub.prop(tan, \"use_blender_units\")\n        sub = col.column()\n        sub.active = (not mat.use_shadeless)\n        sub.prop(tan, \"use_tangent_shading\")\n        col.prop(tan, \"shape\")\n        col = split.column()\n        col.label(text=\"Shading:\")\n        col.prop(tan, \"width_fade\")\n        ob = context.object\n        if ob and ob.type == 'MESH':\n            col.prop_search(tan, \"uv_layer\", ob.data, \"uv_textures\", text=\"\")\n        else:\n            col.prop(tan, \"uv_layer\", text=\"\")\n        col.separator()\n        sub = col.column()\n        sub.active = (not mat.use_shadeless)\n        sub.label(\"Surface diffuse:\")\n        sub = col.column()\n        sub.prop(tan, \"blend_distance\", text=\"Distance\")\nclass MATERIAL_PT_options(MaterialButtonsPanel, Panel):\n    bl_label = \"Options\"\n    COMPAT_ENGINES = {'BLENDER_RENDER', 'BLENDER_GAME'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n        engine = context.scene.render.engine\n        return check_material(mat) and (mat.type in {'SURFACE', 'WIRE'}) and (engine in cls.COMPAT_ENGINES)\n    def draw(self, context):\n        layout = self.layout\n        base_mat = context.material\n        mat = active_node_mat(base_mat)\n        split = layout.split()\n        col = split.column()\n        if simple_material(base_mat):\n            col.prop(mat, \"use_raytrace\")\n            col.prop(mat, \"use_full_oversampling\")\n            col.prop(mat, \"use_sky\")\n        col.prop(mat, \"use_mist\")\n        if simple_material(base_mat):\n            col.prop(mat, \"invert_z\")\n            sub = col.row()\n            sub.prop(mat, \"offset_z\")\n            sub.active = mat.use_transparency and mat.transparency_method == 'Z_TRANSPARENCY'\n        sub = col.column(align=True)\n        sub.label(text=\"Light Group:\")\n        sub.prop(mat, \"light_group\", text=\"\")\n        row = sub.row(align=True)\n        row.active = bool(mat.light_group)\n        row.prop(mat, \"use_light_group_exclusive\", text=\"Exclusive\")\n        row.prop(mat, \"use_light_group_local\", text=\"Local\")\n", "answers": ["        col = split.column()"], "length": 2052, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "6303ed98c58fa08f8639667add933df524657e812b3495b5"}
{"input": "", "context": "using System;\nusing NesHd.Core.Memory;\nusing NesHd.Core.Memory.Mappers;\nnamespace NesHd.Core.Misc\n{\n    [Serializable]\n    public class StateHolder\n    {\n        #region CPU\n        public int CycleCounter;\n        private int _cyclesPerScanline;\n        private bool _flagB;\n        private bool _flagC;\n        private bool _flagD;\n        private bool _flagI = true;\n        private bool _flagN;\n        private bool _flagV;\n        private bool _flagZ;\n        private byte _opCode;\n        private ushort _prevPc;\n        private byte _regA;\n        private ushort _regPc;\n        private byte _regS;\n        private byte _regX;\n        private byte _regY;\n        #endregion\n        #region MEMORY\n        private int _joyData1;\n        private int _joyData2;\n        private byte _joyStrobe;\n        private byte[] _ram;\n        private byte[] _sram;\n        #endregion\n        #region CART\n        private byte[][] _chr;\n        private Mirroring _mirroring;\n        private bool _isVram;\n        private uint _mirroringBase;\n        private bool _saveRAMPresent;\n        #endregion\n        #region _map\n        public uint[] CurrentChrRomPage;\n        public uint[] CurrentPRGRomPage;\n        #endregion\n        #region PPU\n        private bool _backgroundClipping;\n        private bool _backgroundVisibility;\n        private ushort _colorEmphasis;\n        private int _currentScanLine;\n        /*2000*/\n        private bool _executeNMIonVBlank;\n        private byte _hScroll;\n        private bool _monochromeMode;\n        private bool _ppuToggle;\n        private int _patternTableAddress8X8Sprites;\n        private int _patternTableAddressBackground;\n        private byte _reloadBits2000;\n        private byte[] _sprram;\n        private int _scanlineOfVblank;\n        private int _scanlinesPerFrame;\n        private bool _sprite0Hit;\n        /*2001*/\n        private bool _spriteClipping;\n        private int _spriteCrossed;\n        /*2003*/\n        private byte _spriteRamAddress;\n        private bool _spriteSize; //true=8x16, false=8x8\n        private bool _spriteVisibility;\n        private int _tileY;\n        private bool _vblank;\n        private int _vBits;\n        private byte[] _vram;\n        private ushort _vramAddress;\n        private int _vramAddressIncrement = 1;\n        private byte _vramReadBuffer;\n        /*2005,2006*/\n        private ushort _vramTemp;\n        /*Draw stuff*/\n        private int _vScroll;\n        private int _fps;\n        private bool _noLimiter;\n        #endregion\n        #region APU\n        public byte DMCDAC;\n        public ushort DMCDMAAddress;\n        public ushort DMCDMALength;\n        public ushort DMCDMALengthCounter;\n        public ushort DMCDMAStartAddress;\n        public byte DMCDMCBIT;\n        public byte DMCDMCBYTE;\n        public bool DMCDMCIRQEnabled;\n        private bool DMCIRQPending;\n        public bool DMC_Enabled;\n        public double DMC_FreqTimer;\n        public double DMC_Frequency;\n        public bool DMC_Loop;\n        public double DMC_RenderedLength;\n        public double DMC_SampleCount;\n        private bool FrameIRQEnabled;\n        private bool FrameIRQPending;\n        public short NOIZEOUT;\n        public byte NOIZE_DecayCount;\n        public bool NOIZE_DecayDiable;\n        public bool NOIZE_DecayLoopEnable;\n        public bool NOIZE_DecayReset;\n        public byte NOIZE_DecayTimer;\n        //NOIZE\n        public bool NOIZE_Enabled;\n        public byte NOIZE_Envelope;\n        public double NOIZE_FreqTimer;\n        public double NOIZE_Frequency;\n        public byte NOIZE_LengthCount;\n        public int NOIZE_NoiseMode;\n        public double NOIZE_RenderedLength;\n        public double NOIZE_SampleCount;\n        public ushort NOIZE_ShiftReg = 1;\n        public byte NOIZE_Volume;\n        public double Rectangle1DutyPercentage;\n        public bool Rectangle1WaveStatus;\n        public byte Rectangle1_DecayCount;\n        public bool Rectangle1_DecayDiable;\n        public bool Rectangle1_DecayLoopEnable;\n        public bool Rectangle1_DecayReset;\n        public byte Rectangle1_DecayTimer;\n        public int Rectangle1_DutyCycle;\n        public bool Rectangle1_Enabled;\n        public byte Rectangle1_Envelope;\n        public int Rectangle1_FreqTimer;\n        public double Rectangle1_Frequency;\n        public byte Rectangle1_LengthCount;\n        public double Rectangle1_RenderedLength;\n        public double Rectangle1_SampleCount;\n        public byte Rectangle1_SweepCount;\n        public bool Rectangle1_SweepDirection;\n        public bool Rectangle1_SweepEnable;\n        public bool Rectangle1_SweepForceSilence;\n        public byte Rectangle1_SweepRate;\n        public bool Rectangle1_SweepReset;\n        public byte Rectangle1_SweepShift;\n        public byte Rectangle1_Volume;\n        public double Rectangle2DutyPercentage;\n        public bool Rectangle2WaveStatus;\n        public byte Rectangle2_DecayCount;\n        public bool Rectangle2_DecayDiable;\n        public bool Rectangle2_DecayLoopEnable;\n        public bool Rectangle2_DecayReset;\n        public byte Rectangle2_DecayTimer;\n        public int Rectangle2_DutyCycle;\n        public bool Rectangle2_Enabled;\n        public byte Rectangle2_Envelope;\n        public int Rectangle2_FreqTimer;\n        public double Rectangle2_Frequency;\n        public byte Rectangle2_LengthCount;\n        public double Rectangle2_RenderedLength;\n        public double Rectangle2_SampleCount;\n        public byte Rectangle2_SweepCount;\n        public bool Rectangle2_SweepDirection;\n        public bool Rectangle2_SweepEnable;\n        public bool Rectangle2_SweepForceSilence;\n        public byte Rectangle2_SweepRate;\n        public bool Rectangle2_SweepReset;\n        public byte Rectangle2_SweepShift;\n        public byte Rectangle2_Volume;\n        public bool TriangleHALT;\n        public short TriangleOUT;\n        public bool Triangle_Enabled;\n        public int Triangle_FreqTimer;\n        public double Triangle_Frequency;\n        public byte Triangle_LengthCount;\n        public bool Triangle_LengthEnabled;\n        public bool Triangle_LinearControl;\n        public int Triangle_LinearCounter;\n        public int Triangle_LinearCounterLoad;\n        public double Triangle_RenderedLength;\n        public double Triangle_SampleCount;\n        public int Triangle_Sequence;\n        public double VRC6Pulse1DutyPercentage;\n        public short VRC6Pulse1OUT;\n        public bool VRC6Pulse1WaveStatus;\n        public int VRC6Pulse1_DutyCycle;\n        public bool VRC6Pulse1_Enabled;\n        public int VRC6Pulse1_FreqTimer;\n        public double VRC6Pulse1_Frequency;\n        public double VRC6Pulse1_RenderedLength;\n        public double VRC6Pulse1_SampleCount;\n        public byte VRC6Pulse1_Volume;\n        public double VRC6Pulse2DutyPercentage;\n        public short VRC6Pulse2OUT;\n        public bool VRC6Pulse2WaveStatus;\n        public int VRC6Pulse2_DutyCycle;\n        public bool VRC6Pulse2_Enabled;\n        public int VRC6Pulse2_FreqTimer;\n        public double VRC6Pulse2_Frequency;\n        public double VRC6Pulse2_RenderedLength;\n        public double VRC6Pulse2_SampleCount;\n        public byte VRC6Pulse2_Volume;\n        public byte VRC6SawtoothAccum;\n        //VRC6 Sawtooth\n        public byte VRC6SawtoothAccumRate;\n        public byte VRC6SawtoothAccumStep;\n        public short VRC6SawtoothOUT;\n        public bool VRC6Sawtooth_Enabled;\n        public int VRC6Sawtooth_FreqTimer;\n        public double VRC6Sawtooth_Frequency;\n        public double VRC6Sawtooth_RenderedLength;\n        public double VRC6Sawtooth_SampleCount;\n        private int _FrameCounter;\n        private bool _PAL;\n        #endregion\n        #region MAPPERS\n        //MAPPER 1\n        //MAPPER 18\n        private int Mapper18_IRQWidth;\n        private short Mapper18_Timer;\n        private short Mapper18_latch;\n        private bool Mapper18_timer_irq_enabled;\n        private byte[] Mapper18_x = new byte[22];\n        private bool Mapper19_IRQEnabled;\n        //MAPPER 19\n        private bool Mapper19_VROMRAMfor0000;\n        private bool Mapper19_VROMRAMfor1000;\n        private short Mapper19_irq_counter;\n        //MAPPER 21\n        private bool Mapper21_PRGMode = true;\n        private byte[] Mapper21_REG = new byte[8];\n        private int Mapper21_irq_clock;\n        private int Mapper21_irq_counter;\n        private int Mapper21_irq_enable;\n        private int Mapper21_irq_latch;\n        //MAPPER 23\n        //MAPPER 225\n        private byte Mapper225_reg0 = 0xF;\n        private byte Mapper225_reg1 = 0xF;\n        private byte Mapper225_reg2 = 0xF;\n        private byte Mapper225_reg3 = 0xF;\n        private bool Mapper23_PRGMode = true;\n        private byte[] Mapper23_REG = new byte[8];\n        private int Mapper23_irq_clock;\n        private int Mapper23_irq_counter;\n        private int Mapper23_irq_enable;\n        private int Mapper23_irq_latch;\n        private int Mapper24_irq_clock;\n        private int Mapper24_irq_counter;\n        private bool Mapper24_irq_enable;\n        private int Mapper24_irq_latch;\n        private byte Mapper41_CHR_High;\n        private byte Mapper41_CHR_Low;\n        private byte mapper10_latch1;\n        private int mapper10_latch1data1;\n        private int mapper10_latch1data2;\n        private byte mapper10_latch2;\n        private int mapper10_latch2data1;\n        private int mapper10_latch2data2;\n        private bool mapper17_IRQEnabled;\n        private int mapper17_irq_counter;\n        private byte mapper18_control;\n        private byte mapper1_mirroringFlag;\n        private byte mapper1_onePageMirroring;\n        private byte mapper1_prgSwitchingArea;\n        private byte mapper1_prgSwitchingSize;\n        private int mapper1_register8000BitPosition;\n        private int mapper1_register8000Value;\n        private int mapper1_registerA000BitPosition;\n        private int mapper1_registerA000Value;\n        private int mapper1_registerC000BitPosition;\n        private int mapper1_registerC000Value;\n        private int mapper1_registerE000BitPosition;\n        private int mapper1_registerE000Value;\n        private byte mapper1_vromSwitchingSize;\n        //MAPPER 32\n        private int mapper32SwitchingMode;\n        //MAPPER 33\n        private byte mapper33_IRQCounter;\n        private bool mapper33_IRQEabled;\n        private bool mapper33_type1 = true;\n        private int mapper4_chrAddressSelect;\n        private int mapper4_commandNumber;\n        private int mapper4_prgAddressSelect;\n        private uint mapper4_timer_irq_count;\n        private bool mapper4_timer_irq_enabled;\n        private uint mapper4_timer_irq_reload;\n        private byte mapper5_chrBankSize;\n        private byte mapper5_prgBankSize;\n        private int mapper5_scanlineSplit;\n        private bool mapper5_splitIrqEnabled;\n        private byte mapper64_chrAddressSelect;\n        //MAPPER 41\n        //MAPPER 64\n        private byte mapper64_commandNumber;\n        private byte mapper64_prgAddressSelect;\n        private short mapper65_timer_irq_Latch_65;\n        private short mapper65_timer_irq_counter_65;\n        private bool mapper65_timer_irq_enabled;\n        //MAPPER 69\n        private ushort mapper69_reg;\n        private short mapper69_timer_irq_counter_69;\n        private bool mapper69_timer_irq_enabled;\n        private bool mapper6_IRQEnabled;\n        private int mapper6_irq_counter;\n        //MAPPER 8\n        private bool mapper8_IRQEnabled;\n        private int mapper8_irq_counter;\n        //MAPPER 91\n        private int mapper91_IRQCount;\n        private bool mapper91_IRQEnabled;\n        private byte mapper9_latch1;\n        private int mapper9_latch1data1;\n        private int mapper9_latch1data2;\n        private byte mapper9_latch2;\n        private int mapper9_latch2data1;\n        private int mapper9_latch2data2;\n        private short timer_irq_Latch_16;\n        private short timer_irq_counter_16;\n        private bool timer_irq_enabled;\n        #endregion\n        public void LoadNesData(NesEngine _engine)\n        {\n            #region CPU\n            _regA = _engine.Cpu.REG_A;\n            _regX = _engine.Cpu.REG_X;\n            _regY = _engine.Cpu.REG_Y;\n            _regS = _engine.Cpu.REG_S;\n            _regPc = _engine.Cpu.REG_PC;\n            _flagN = _engine.Cpu.Flag_N;\n            _flagV = _engine.Cpu.Flag_V;\n            _flagB = _engine.Cpu.Flag_B;\n            _flagD = _engine.Cpu.Flag_D;\n            _flagI = _engine.Cpu.Flag_I;\n            _flagZ = _engine.Cpu.Flag_Z;\n            _flagC = _engine.Cpu.Flag_C;\n            CycleCounter = _engine.Cpu.CycleCounter;\n            _cyclesPerScanline = _engine.Cpu.CyclesPerScanline;\n            _opCode = _engine.Cpu.OpCode;\n            _prevPc = _engine.Cpu.PrevPc;\n            #endregion\n            #region MEMORY\n            _ram = _engine.Memory.Ram;\n            _sram = _engine.Memory.SRam;\n            _joyData1 = _engine.Memory.JoyData1;\n            _joyData2 = _engine.Memory.JoyData2;\n            _joyStrobe = _engine.Memory.JoyStrobe;\n            #endregion\n            #region CART\n            if (_engine.Memory.Map.Cartridge.ChrPages == 0)\n                _chr = _engine.Memory.Map.Cartridge.Chr;\n            _mirroring = _engine.Memory.Map.Cartridge.Mirroring;\n            _saveRAMPresent = _engine.Memory.Map.Cartridge.IsSaveRam;\n            _isVram = _engine.Memory.Map.Cartridge.IsVram;\n            _mirroringBase = _engine.Memory.Map.Cartridge.MirroringBase;\n            #endregion\n            #region _map\n            CurrentPRGRomPage = _engine.Memory.Map.CurrentPrgRomPage;\n            CurrentChrRomPage = _engine.Memory.Map.CurrentChrRomPage;\n            #endregion\n            #region PPU\n            _sprram = _engine.Ppu.SprRam;\n            _vram = _engine.Ppu.VRam;\n            _currentScanLine = _engine.Ppu.CurrentScanLine;\n            _vramAddress = _engine.Ppu.VRamAddress;\n            _sprite0Hit = _engine.Ppu.Sprite0Hit;\n            _spriteCrossed = _engine.Ppu.SpriteCrossed;\n            _scanlinesPerFrame = _engine.Ppu.ScanlinesPerFrame;\n            _scanlineOfVblank = _engine.Ppu.ScanlineOfVblank;\n            _fps = _engine.Ppu.Fps;\n            _vblank = _engine.Ppu.VBlank;\n            _vramReadBuffer = _engine.Ppu.VRamReadBuffer;\n            _noLimiter = _engine.Ppu.NoLimiter;\n            /*2000*/\n            _executeNMIonVBlank = _engine.Ppu.ExecuteNMIonVBlank;\n            _spriteSize = _engine.Ppu.SpriteSize;\n            _patternTableAddressBackground = _engine.Ppu.PatternTableAddressBackground;\n            _patternTableAddress8X8Sprites = _engine.Ppu.PatternTableAddress8X8Sprites;\n            _vramAddressIncrement = _engine.Ppu.VRamAddressIncrement;\n            _reloadBits2000 = _engine.Ppu.ReloadBits2000;\n            /*2001*/\n            _colorEmphasis = _engine.Ppu.ColorEmphasis;\n            _spriteVisibility = _engine.Ppu.SpriteVisibility;\n            _backgroundVisibility = _engine.Ppu.BackgroundVisibility;\n            _spriteClipping = _engine.Ppu.SpriteClipping;\n            _backgroundClipping = _engine.Ppu.BackgroundClipping;\n            _monochromeMode = _engine.Ppu.MonochromeMode;\n            /*2003*/\n            _spriteRamAddress = _engine.Ppu.SpriteRamAddress;\n            /*2005,2006*/\n            _ppuToggle = _engine.Ppu.PpuToggle;\n            _vramTemp = _engine.Ppu.VRamTemp;\n            /*Draw stuff*/\n            _hScroll = _engine.Ppu.HScroll;\n            _vScroll = _engine.Ppu.VScroll;\n            _vBits = _engine.Ppu.VBits;\n            _tileY = _engine.Ppu.TileY;\n            #endregion\n            #region APU\n            _FrameCounter = _engine.Apu._FrameCounter;\n            _PAL = _engine.Apu._PAL;\n            DMCIRQPending = _engine.Apu.DMCIRQPending;\n            FrameIRQEnabled = _engine.Apu.FrameIRQEnabled;\n            FrameIRQPending = _engine.Apu.FrameIRQPending;\n            _engine.Apu.DMC.SaveState(this);\n            _engine.Apu.NOIZE.SaveState(this);\n            _engine.Apu.RECT1.SaveState(this);\n            _engine.Apu.RECT2.SaveState(this);\n            _engine.Apu.TRIANGLE.SaveState(this);\n            _engine.Apu.VRC6PULSE1.SaveState(this);\n            _engine.Apu.VRC6PULSE2.SaveState(this);\n            _engine.Apu.VRC6SAWTOOTH.SaveState(this);\n            #endregion\n            #region Mappers\n            //MAPPER 1\n            if (_engine.Memory.Map.Cartridge.MapperNo == 1)\n            {\n                var map1 = (Mapper01) _engine.Memory.Map.CurrentMapper;\n                mapper1_register8000BitPosition = map1.Mapper1Register8000BitPosition;\n                mapper1_registerA000BitPosition = map1.Mapper1RegisterA000BitPosition;\n                mapper1_registerC000BitPosition = map1.Mapper1RegisterC000BitPosition;\n                mapper1_registerE000BitPosition = map1.Mapper1RegisterE000BitPosition;\n                mapper1_register8000Value = map1.Mapper1Register8000Value;\n                mapper1_registerA000Value = map1.Mapper1RegisterA000Value;\n                mapper1_registerC000Value = map1.Mapper1RegisterC000Value;\n                mapper1_registerE000Value = map1.Mapper1RegisterE000Value;\n                mapper1_mirroringFlag = map1.Mapper1MirroringFlag;\n                mapper1_onePageMirroring = map1.Mapper1OnePageMirroring;\n                mapper1_prgSwitchingArea = map1.Mapper1PRGSwitchingArea;\n                mapper1_prgSwitchingSize = map1.Mapper1PRGSwitchingSize;\n                mapper1_vromSwitchingSize = map1.Mapper1VromSwitchingSize;\n            }\n            //MAPPER 4\n            if (_engine.Memory.Map.Cartridge.MapperNo == 4)\n            {\n                var map4 = (Mapper04) _engine.Memory.Map.CurrentMapper;\n                mapper4_commandNumber = map4.Mapper4CommandNumber;\n                mapper4_prgAddressSelect = map4.Mapper4PRGAddressSelect;\n                mapper4_chrAddressSelect = map4.Mapper4ChrAddressSelect;\n                mapper4_timer_irq_enabled = map4.TimerIrqEnabled;\n                mapper4_timer_irq_count = map4.TimerIrqCount;\n                mapper4_timer_irq_reload = map4.TimerIrqReload;\n            }\n            //MAPPER 5\n            if (_engine.Memory.Map.Cartridge.MapperNo == 5)\n            {\n                var map5 = (Mapper05) _engine.Memory.Map.CurrentMapper;\n                mapper5_prgBankSize = map5.Mapper5PRGBankSize;\n                mapper5_chrBankSize = map5.Mapper5ChrBankSize;\n                mapper5_scanlineSplit = map5.Mapper5ScanlineSplit;\n                mapper5_splitIrqEnabled = map5.Mapper5SplitIrqEnabled;\n            }\n            //MAPPER 6\n            if (_engine.Memory.Map.Cartridge.MapperNo == 6)\n            {\n                var map6 = (Mapper06) _engine.Memory.Map.CurrentMapper;\n                mapper6_IRQEnabled = map6.IRQEnabled;\n                mapper6_irq_counter = map6.irq_counter;\n            }\n            //MAPPER 8\n            if (_engine.Memory.Map.Cartridge.MapperNo == 8)\n            {\n                var map8 = (Mapper08) _engine.Memory.Map.CurrentMapper;\n                mapper8_IRQEnabled = map8.IRQEnabled;\n                mapper8_irq_counter = map8.irq_counter;\n            }\n            //MAPPER 9\n            if (_engine.Memory.Map.Cartridge.MapperNo == 9)\n            {\n                var map9 = (Mapper09) _engine.Memory.Map.CurrentMapper;\n                mapper9_latch1 = map9.latch1;\n                mapper9_latch2 = map9.latch2;\n                mapper9_latch1data1 = map9.latch1data1;\n                mapper9_latch1data2 = map9.latch1data2;\n                mapper9_latch2data1 = map9.latch2data1;\n                mapper9_latch2data2 = map9.latch2data2;\n            }\n            //MAPPER 10\n            if (_engine.Memory.Map.Cartridge.MapperNo == 10)\n            {\n                var map10 = (Mapper10) _engine.Memory.Map.CurrentMapper;\n                mapper10_latch1 = map10.Latch1;\n                mapper10_latch2 = map10.Latch2;\n                mapper10_latch1data1 = map10.Latch1Data1;\n                mapper10_latch1data2 = map10.Latch1Data2;\n                mapper10_latch2data1 = map10.Latch2Data1;\n                mapper10_latch2data2 = map10.Latch2Data2;\n            }\n            //MAPPER 16\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "length": 1369, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "23b0090fa6618a3171db2086d8cc9478f03e22182380161d"}
{"input": "", "context": "/*************************************************************************\n *\n *  The Contents of this file are made available subject to the terms of\n *  the BSD license.\n *\n *  Copyright 2000, 2010 Oracle and/or its affiliates.\n *  All rights reserved.\n *\n *  Redistribution and use in source and binary forms, with or without\n *  modification, are permitted provided that the following conditions\n *  are met:\n *  1. Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n *  2. Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *  3. Neither the name of Sun Microsystems, Inc. nor the names of its\n *     contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n *  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\n *  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n *  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n *************************************************************************/\nimport com.sun.star.uno.XComponentContext;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport javax.swing.ButtonGroup;\nimport javax.swing.JDialog;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JTabbedPane;\nimport javax.swing.KeyStroke;\npublic class SwingDialogProvider implements XDialogProvider{\n    private JPopupMenu m_jPopupMenu = new JPopupMenu();\n    private XComponentContext m_xComponentContext;\n    private Inspector._Inspector m_oInspector;\n    private JDialog m_jInspectorDialog = new JDialog();\n    private JTabbedPane m_jTabbedPane1 = new JTabbedPane();\n    private Container cp;\n    private JMenu jMnuOptions = new JMenu(\"Options\");\n    private JRadioButtonMenuItem jJavaMenuItem = null;\n    private JRadioButtonMenuItem jCPlusPlusMenuItem = null;\n    private JRadioButtonMenuItem jBasicMenuItem = null;\n    /** Creates a new instance of SwingPopupMentuProvider */\n    public SwingDialogProvider(Inspector._Inspector _oInspector, String _sTitle) {\n        m_oInspector = _oInspector;\n        m_xComponentContext = _oInspector.getXComponentContext();\n        insertMenus();\n        initializePopupMenu();\n        cp = m_jInspectorDialog.getContentPane();\n        cp.setLayout(new java.awt.BorderLayout(0, 10));\n        m_jTabbedPane1.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\n        m_jInspectorDialog.addWindowListener(new InspectorWindowAdapter());\n        m_jInspectorDialog.addComponentListener(new InspectorComponentAdapter());\n        m_jInspectorDialog.setTitle(_sTitle);\n        m_jInspectorDialog.setLocation(100, 50);\n        m_jInspectorDialog.getContentPane().add(m_jTabbedPane1);\n    }\n        public JDialog getDialog(){\n            return m_jInspectorDialog;\n        }\n        private void addMenuBar(JMenuBar _jMenuBar){\n            getDialog().setJMenuBar(_jMenuBar);\n        }\n        private void  removeTabPaneByIndex(int _nIndex){\n            if (_nIndex > -1){\n                String sSelInspectorPanelTitle = m_jTabbedPane1.getTitleAt(_nIndex);\n                m_jTabbedPane1.remove(_nIndex);\n                m_oInspector.getInspectorPages().remove(sSelInspectorPanelTitle);\n            }\n        }\n        public void selectInspectorPageByIndex(int nTabIndex){\n            m_jTabbedPane1.setSelectedIndex(nTabIndex);\n        }\n        public int getInspectorPageCount(){\n            return  m_jTabbedPane1.getTabCount();\n        }\n        public JTabbedPane getTabbedPane(){\n            return m_jTabbedPane1;\n        }\n        public InspectorPane getSelectedInspectorPage(){\n            int nIndex = m_jTabbedPane1.getSelectedIndex();\n            return getInspectorPage(nIndex);\n        }\n        public InspectorPane getInspectorPage(int _nIndex){\n            InspectorPane oInspectorPane = null;\n            if (_nIndex > -1){\n                String sInspectorPanelTitle = m_jTabbedPane1.getTitleAt(_nIndex);\n                oInspectorPane = m_oInspector.getInspectorPages().get(sInspectorPanelTitle);\n            }\n            return oInspectorPane;\n        }\n        private void removeTabPanes(){\n            int nCount = m_jTabbedPane1.getTabCount();\n            if (nCount > 0){\n                for (int i = nCount-1; i >= 0; i--){\n                    removeTabPaneByIndex(i);\n                }\n            }\n        }\n        private void removeSelectedTabPane(){\n            int nIndex = getTabbedPane().getSelectedIndex();\n            removeTabPaneByIndex(nIndex);\n        }\n        private class InspectorComponentAdapter extends ComponentAdapter{\n            @Override\n            public void componentHidden(ComponentEvent e){\n                m_jInspectorDialog.pack();\n                m_jInspectorDialog.invalidate();\n            }\n            @Override\n            public void componentShown(ComponentEvent e){\n                m_jInspectorDialog.pack();\n                m_jInspectorDialog.invalidate();\n            }\n        }\n        private class InspectorWindowAdapter extends WindowAdapter{\n            @Override\n            public void windowClosed(WindowEvent e){\n                removeTabPanes();\n                m_oInspector.disposeHiddenDocuments();\n            }\n            @Override\n            public void windowClosing(WindowEvent e){\n                removeTabPanes();\n                m_oInspector.disposeHiddenDocuments();\n            }\n        }\n        private void initializePopupMenu(){\n            m_jPopupMenu.add(getInspectMenuItem(\"Inspect\"));\n            m_jPopupMenu.add(getSourceCodeMenuItem(SADDTOSOURCECODE));\n            m_jPopupMenu.add(getInvokeMenuItem(SINVOKE));\n            m_jPopupMenu.addSeparator();\n            m_jPopupMenu.add(getHelpMenuItem(\"Help\"));\n        }\n        private void addOpenDocumentMenu(JMenu _jMnuRoot){\n            ActionListener oActionListener = new ActionListener(){\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                    String sTDocUrl = evt.getActionCommand();\n                    m_oInspector.inspectOpenDocument(sTDocUrl);\n                }\n            };\n", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "length": 594, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "4d661a278930364d65e248d5f8bbbf7992b0f866443d527f"}
{"input": "", "context": "//--- Aura Script -----------------------------------------------------------\n// Aranwen\n//--- Description -----------------------------------------------------------\n// Teacher\n//---------------------------------------------------------------------------\npublic class AranwenScript : NpcScript\n{\n\tpublic override void Load()\n\t{\n\t\tSetName(\"_aranwen\");\n\t\tSetRace(10001);\n\t\tSetBody(height: 1.15f, weight: 0.9f, upper: 1.1f, lower: 0.8f);\n\t\tSetFace(skinColor: 15, eyeType: 3, eyeColor: 192);\n\t\tSetLocation(14, 43378, 40048, 125);\n\t\tEquipItem(Pocket.Face, 3900, 0x00344300, 0x0000163E, 0x008B0021);\n\t\tEquipItem(Pocket.Hair, 3026, 0x00BDC2E5, 0x00BDC2E5, 0x00BDC2E5);\n\t\tEquipItem(Pocket.Armor, 13008, 0x00C6D8EA, 0x00C6D8EA, 0x00635985);\n\t\tEquipItem(Pocket.Glove, 16503, 0x00C6D8EA, 0x00B20859, 0x00A7131C);\n\t\tEquipItem(Pocket.Shoe, 17504, 0x00C6D8EA, 0x00C6D8EA, 0x003F6577);\n\t\tEquipItem(Pocket.RightHand1, 40012, 0x00C0C0C0, 0x008C84A4, 0x00403C47);\n        \n\t\tAddPhrase(\"...\");\n\t\tAddPhrase(\"A sword does not betray its own will.\");\n\t\tAddPhrase(\"A sword is not a stick. I don't feel any tension from you!\");\n\t\tAddPhrase(\"Aren't you well?\");\n\t\tAddPhrase(\"Focus when you're practicing.\");\n\t\tAddPhrase(\"Hahaha.\");\n\t\tAddPhrase(\"If you're done resting, let's keep practicing!\");\n\t\tAddPhrase(\"It's those people who really need to learn swordsmanship.\");\n\t\tAddPhrase(\"Put more into the wrists!\");\n\t\tAddPhrase(\"That student may need to rest a while.\");\n\t}\n    \n\tprotected override async Task Talk()\n\t{\n\t\tSetBgm(\"NPC_Aranwen.mp3\");\n\t\tawait Intro(\n\t\t\t\"A lady decked out in shining armor is confidently training students in swordsmanship in front of the school.\",\n\t\t\t\"Unlike a typical swordswoman, her moves seem delicate and elegant.\",\n\t\t\t\"Her long, braided silver hair falls down her back, leaving her eyes sternly fixed on me.\"\n\t\t);\n\t\tMsg(\"What brings you here?\", Button(\"Start a Conversation\", \"@talk\"), Button(\"Shop\", \"@shop\"), Button(\"Modify Item\", \"@upgrade\"));\n\t\tswitch (await Select()) \n\t\t{\n\t\t\tcase \"@talk\":\n\t\t\t\tMsg(\"Hmm. <username/>, right?<br/>Of course.\");\n\t\t\t\t// Msg(\"Hmm. <username/>, right?\");\n\t\t\t\t// Msg(\"Yes? Please don't block my view.\");\n\t\t\t\t// if the player is wearing the Savior of Erinn title, she will say this after the first message\n\t\t\t\t// Msg(\"Guardian of Erinn...<br/>If it were anyone else,<br/>I would tell them to stop being so arrogant...\");\n\t\t\t\t// Msg(\"But with you, <username/>, you are definitely qualified.<br/>Good job.\");\n\t\t\t\tawait StartConversation();\n\t\t\t\tbreak;\n\t\t\tcase \"@shop\":\n\t\t\t\tMsg(\"Are you looking for a party quest scroll?\");\n\t\t\t\tOpenShop(\"AranwenShop\");\n\t\t\t\tbreak;\n\t\t\tcase \"@upgrade\":\n\t\t\t\tMsg(\"Please select the weapon you'd like to modify.<br/>Each weapon can be modified according to its kind.<upgrade />\");\n\t\t\t\tMsg(\"Unimplemented\");\n\t\t\t\tMsg(\"A bow is weaker than a crossbow?<br/>That's because you don't know a bow very well.<br/>Crossbows are advanced weapons for sure,<br/>but a weapon that reflects your strength and senses is closer to nature than machinery.\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tprotected override async Task Keywords(string keyword) \n\t{\n\t\tswitch (keyword) {\n\t\t\tcase \"personal_info\":\n\t\t\t\tMsg(\"Let me introduce myself.<br/>My name is Aranwen. I teach combat skills at the Dunbarton School.\");\n\t\t\t\tbreak;\n\t\t\tcase \"rumor\":\n\t\t\t\tMsg(\"If you need a weapon for the training,<br/>why don't you go see Nerys in the south side?<br/>She runs the Weapons Shop.\");\n\t\t\t\tbreak;\n\t\t\tcase \"about_skill\":\n\t\t\t\tMsg(\"...I am sorry, but someone that has yet to master the skill<br/>should not be bluntly asking questions about skills like this.\");\n\t\t\t\tMsg(\"...if you are interested in high-leveled bowman skills, then<br/>you should at least master the Fire Arrow skill first.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_misc\": // General Shop\n\t\t\t\tMsg(\"Hmm. Looking for the General Shop?<br/>You'll find it down there across the Square.\");\n\t\t\t\tMsg(\"Walter should be standing by the door.<br/>You can buy instruments, music scores, gifts, and tailoring goods such as sewing patterns.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_grocery\":\n\t\t\t\tMsg(\"If you are looking to buy cooking ingredients,<br/>the Restaurant will be your best bet.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_healing\":\n\t\t\t\tMsg(\"A Healer's House? Are you looking for Manus?<br/>Manus runs a Healer's House near<br/>the Weapons Shop in the southern part of town.\");\n\t\t\t\tMsg(\"Even if you're not ill<br/>and you're simply looking for things like potions,<br/>that's the place to go.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_inn\":\n\t\t\t\tMsg(\"There is no inn in this town.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_bank\":\n\t\t\t\tMsg(\"If you're looking for a bank, you can go to<br/>the Erskin Bank in the west end of the Square.<br/>Talk to Austeyn there for anything involving money or items.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_smith\":\n\t\t\t\tMsg(\"There is no blacksmith's shop in this town, but<br/>if you are looking for anything like weapons or armor,<br/>why don't you head south and visit the Weapons Shop?\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_range\":\n\t\t\t\tMsg(\"I suppose I could take my time and verbally explain it to you,<br/>but you should be able to quickly get the hang of it<br/>once you equip and use a bow a few times.\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_tailoring\":\n\t\t\t\tMsg(\"It would be most logical to get Simon's help<br/>at the Clothing Shop.\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_magnum_shot\":\n\t\t\t\tMsg(\"Magnum Shot?<br/>Haven't you learned such a basic skill alrerady?<br/>You must seriously lack training.\");\n\t\t\t\tMsg(\"It may be rather time-consuming, but<br/>please go back to Tir Chonaill.<br/>Ranald will teach you the skill.\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_counter_attack\":\n\t\t\t\tMsg(\"If you don't know the Counterattack skill yet, that is definitely a problem.<br/>Very well. First, you'll need to fight a powerful monster and get hit by its Counterattack.\");\n\t\t\t\tMsg(\"Monsters like bears use Counterattack<br/>so watch how they use it and take a hit,<br/>and you should be able to quickly get the hang of it without any particular training.\");\n\t\t\t\tMsg(\"In fact, if you are not willing to take the hit,<br/>there is no other way to learn that skill.<br/>Simply reading books will not help.\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_smash\":\n\t\t\t\tMsg(\"Smash...<br/>For the Smash skill, why don't you go to the Bookstore and<br/>look for a book on it?\");\n\t\t\t\tMsg(\"You should learn it by yourself before bothering<br/>people with questions.<br/>You should be ashamed of yourself.\");\n\t\t\t\tbreak;\n\t\t\tcase \"square\":\n\t\t\t\tMsg(\"The Square is just over here.<br/>Perhaps it totally escaped you<br/>because it's so large.\");\n\t\t\t\tbreak;\n\t\t\tcase \"farmland\":\n\t\t\t\tMsg(\"Strangely, large rats have been seen<br/>in large numbers in the farmlands recently.<br/>This obviously isn't normal.\");\n\t\t\t\tMsg(\"If you are willing,<br/>would you go and take some out?<br/>You'll be appreciated by many.\");\n\t\t\t\tbreak;\n\t\t\tcase \"brook\": // Adelia Stream\n\t\t\t\tMsg(\"Adelia Stream...<br/>I believe you're speaking of the<br/>stream in Tir Chonaill...\");\n\t\t\t\tMsg(\"Shouldn't you be asking<br/>these questions<br/>in Tir Chonaill?\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_headman\": // Chief's House\n\t\t\t\tMsg(\"A chief?<br/>This town is ruled by a Lord,<br/>so there is no such person as a chief here.\");\n\t\t\t\tbreak;\n\t\t\tcase \"temple\": // Church\n\t\t\t\tMsg(\"You must have something to discuss with Priestess Kristell.<br/>You'll find her at the Church up north.\");\n\t\t\t\tMsg(\"You can also take the stairs that head<br/>northwest to the Square.<br/>There are other ways to get there, too,<br/>so it shouldn't be too difficult to find it.\");\n\t\t\t\tbreak;\n\t\t\tcase \"school\":\n\t\t\t\tMsg(\"Mmm? This is the only school around here.\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_windmill\":\n\t\t\t\tPlayer.Keywords.Remove(\"skill_windmill\");\n\t\t\t\tMsg(\"Are you curious about the Windmill skill?<br/>It is a useful skill to have when you're surrounded by enemies.<br/>Very well. I will teach you the Windmill skill.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_restaurant\":\n\t\t\t\tMsg(\"If you're looking for a restaurant, you are looking for Glenis' place.<br/>She not only sells food, but also a lot of cooking ingredients, so<br/>you should pay a visit if you need something.\");\n\t\t\t\tMsg(\"The Restaurant is in the north alley of the Square.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_armory\": // Weapon Shop\n\t\t\t\tMsg(\"Nerys is the owner of the Weapons Shop.<br/>Keep following the road that leads down south<br/>and you'll see her mending weapons outside.\");\n\t\t\t\tMsg(\"She may seem a little aloof,<br/>but don't let that get to you too much<br/>and you'll get used to it.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_cloth\":\n\t\t\t\tMsg(\"There is no decent clothing shop in this town...<br/>But, if you must, go visit Simon's place.<br/>You should be able to find something that fits right away.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_bookstore\":\n\t\t\t\tMsg(\"You mean Aeira's Bookstore.<br/>It's just around here.<br/>Follow the road in front of the school up north.\");\n\t\t\t\tMsg(\"Many types of books go through that place,<br/>so even if you don't find what you want right away,<br/>keep visiting and you'll soon get it.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_goverment_office\": // Town Office\n\t\t\t\tMsg(\"Are you looking for Eavan?<br/>The Lord and the Captain of the Royal Guards<br/>are very hard to reach. \");\n\t\t\t\tMsg(\"If you're really looking for Eavan,<br/>go over to that large building to the north of the Square.\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tRndMsg(\n\t\t\t\t\t\"I don't know anything about it. I'm sorry I can't be much help.\",\n\t\t\t\t\t\"I don't know anything about it. Why don't you ask others?\",\n\t\t\t\t\t\"Being a teacher doesn't mean that I know everything.\",\n\t\t\t\t\t\"Hey! Asking me about such things is a waste of time.\",\n\t\t\t\t\t\"It doesn't seem bad but... I don't think I can help you with it.\",\n\t\t\t\t\t\"I don't know too much about anything other than combat skills.\",\n\t\t\t\t\t\"If you keep bringing up topics like this, I can't say much to you.\",\n\t\t\t\t\t\"Will you tell me about it when you find out more?\"\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tpublic override void EndConversation() \n\t{\n\t\tClose(\"Thank you, Aranwen. I'll see you later!\");\n\t}\n}\npublic class AranwenShop : NpcShopScript\n{\n\tpublic override void Setup()\n\t{\n\t\t//----------------\n\t\t// Party Quest\n\t\t//----------------\n\t\t// Page 1\n\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [10 Red Bears]\n", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "length": 1340, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "972aa86922fe3fc5000647badc4783f41e4e10f292b5d31b"}
{"input": "", "context": "using System;\nusing Android.App;\nusing Android.Widget;\nusing Android.Graphics;\nusing Java.Interop;\nusing Android.Animation;\nusing Android.Util;\nusing Android.Graphics.Drawables;\nusing Android.Runtime;\nusing Android.Views;\nnamespace StartClockApp\n{\n\tinternal class UIView : RelativeLayout\n\t{\n\t\tpublic const string LEFT_MARGIN = \"LeftMargin\";\n\t\tpublic const string TOP_MARGIN = \"TopMargin\";\n\t\tpublic const string NEW_WIDTH = \"NewWidth\";\n\t\tconst int ALPHAANIMATIONTIME = 100;\n\t\tconst int FRAMEANIMATIONTIME = 200;\n\t\tFrame frame;\n\t\tColor backgroundColor;\n\t\tColor borderColor;\n\t\tbool hidden;\n\t\tUIView leftBorder, rightBorder, topBorder, bottomBorder;\n\t\tprotected Activity context;\n\t\tpublic virtual Frame Frame {\n\t\t\tget {\n\t\t\t\tif (frame == null) {\n\t\t\t\t\treturn new Frame ();\n\t\t\t\t}\n\t\t\t\treturn frame;\n\t\t\t} set {\n\t\t\t\tframe = value;\n\t\t\t\tRelativeLayout.LayoutParams parameters = new RelativeLayout.LayoutParams(value.W, value.H);\n\t\t\t\tparameters.LeftMargin = value.X;\n\t\t\t\tparameters.TopMargin = value.Y;\n\t\t\t\tLayoutParameters = parameters;\n\t\t\t\tLayoutSubviews ();\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tpublic virtual Color BackgroundColor {\n\t\t\tget {\n\t\t\t\treturn backgroundColor;\n\t\t\t} set {\n\t\t\t\tbackgroundColor = value;\n\t\t\t\tSetBackgroundColor (backgroundColor);\n\t\t\t}\n\t\t}\n\t\tpublic bool HasParent {\n\t\t\tget {\n\t\t\t\treturn Parent != null;\t\t\n\t\t\t}\n\t\t}\n\t\tpublic Rect HitRect {\n\t\t\tget {\n\t\t\t\tRect cellRect = new Rect ();\n\t\t\t\tGetHitRect (cellRect);\n\t\t\t\treturn cellRect;\n\t\t\t}\n\t\t}\n\t\tpublic Color BorderColor {\n\t\t\tget {\n\t\t\t\treturn borderColor;\t\t\n\t\t\t}\n\t\t\tset {\n\t\t\t\tborderColor = value;\n\t\t\t\tif (leftBorder != null) {\n\t\t\t\t\tleftBorder.BackgroundColor = borderColor;\n\t\t\t\t}\n\t\t\t\tif (rightBorder != null) {\n\t\t\t\t\trightBorder.BackgroundColor = borderColor;\n\t\t\t\t}\n\t\t\t\tif (topBorder != null) {\n\t\t\t\t\ttopBorder.BackgroundColor = borderColor;\n\t\t\t\t}\n\t\t\t\tif (bottomBorder != null) {\n\t\t\t\t\tbottomBorder.BackgroundColor = borderColor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic bool Hidden {\n\t\t\tget {\n\t\t\t\treturn hidden;\n\t\t\t} set {\n\t\t\t\thidden = value;\n\t\t\t\tif (hidden) {\n\t\t\t\t\tHide ();\n\t\t\t\t} else {\n\t\t\t\t\tShow ();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic ObjectAnimator AlphaOutAnimator {\n\t\t\tget {\n\t\t\t\treturn ObjectAnimator.OfFloat (this, \"Alpha\", Alpha, 0);\n\t\t\t}\n\t\t}\n\t\tpublic ObjectAnimator AlphaInAnimator {\n\t\t\tget {\n\t\t\t\treturn ObjectAnimator.OfFloat (this, \"Alpha\", Alpha, 1);\n\t\t\t}\n\t\t}\n\t\tpublic UIView (Activity context) : base (context)\n\t\t{\n\t\t\tthis.context = context;\n\t\t}\n\t\tpublic UIView (IntPtr a, JniHandleOwnership b) : base (a, b)\n\t\t{\n\t\t\t\n\t\t}\n\t\tpublic virtual void LayoutSubviews ()\n\t\t{\n\t\t\t\n\t\t}\n\t\t\t\n\t\tpublic void SetSlightlyRoundWithBackgroundColor (Color color)\n\t\t{\n\t\t\tGradientDrawable background = new GradientDrawable ();\n\t\t\tbackground.SetCornerRadius (Sizes.GetRealSize (6));\n\t\t\tbackground.SetColor (color);\n\t\t\tBackground = background;\n\t\t\tRemoveBorders ();\n\t\t}\n\t\tpublic void SetMultiColorBackground (int[] colours)\n\t\t{\n\t\t\tGradientDrawable drawable = new GradientDrawable (GradientDrawable.Orientation.LeftRight, colours);\n\t\t\tBackground = drawable;\n\t\t}\n\t\tpublic void AddBorders (Activity context, bool left, bool right, bool top, bool bottom)\n\t\t{\n\t\t\tif (left) {\n\t\t\t\tleftBorder = new UIView (context) { BackgroundColor = borderColor };\n\t\t\t\tAddView (leftBorder);\n\t\t\t}\n\t\t\tif (right) {\n\t\t\t\trightBorder = new UIView (context) { BackgroundColor = borderColor };\n\t\t\t\tAddView (rightBorder);\n\t\t\t}\n\t\t\tif (top) {\n\t\t\t\ttopBorder = new UIView (context) { BackgroundColor = borderColor };\n\t\t\t\tAddView (topBorder);\n\t\t\t}\n\t\t\tif (bottom) {\n\t\t\t\tbottomBorder = new UIView (context) { BackgroundColor = borderColor };\n\t\t\t\tAddView (bottomBorder);\n\t\t\t}\n\t\t}\n\t\tpublic void SetBorderFrames (int w)\n\t\t{\n\t\t\tif (leftBorder != null) {\n\t\t\t\tleftBorder.Frame = new Frame (0, 0, w, Frame.H);\n\t\t\t}\n\t\t\tif (rightBorder != null) {\n\t\t\t\trightBorder.Frame = new Frame (Frame.W - w, 0, w, Frame.H);\n\t\t\t}\n\t\t\tif (topBorder != null) {\n\t\t\t\ttopBorder.Frame = new Frame (0, 0, Frame.W, w);\n\t\t\t}\n\t\t\tif (bottomBorder != null) {\n\t\t\t\tbottomBorder.Frame = new Frame (0, Frame.H - w, Frame.W, w);\n\t\t\t}\n\t\t}\n\t\tpublic void RemoveBorders ()\n\t\t{\n\t\t\tRemoveView (leftBorder);\n\t\t\tRemoveView (rightBorder);\n\t\t\tRemoveView (topBorder);\n\t\t\tRemoveView (bottomBorder);\n\t\t}\n\t\tpublic void AnimateHide (Action completed)\n\t\t{\n\t\t\tObjectAnimator animator = AlphaOutAnimator;\n\t\t\tanimator.SetDuration (ALPHAANIMATIONTIME);\n\t\t\tanimator.Start ();\n\t\t\tanimator.AnimationEnd += delegate {\n\t\t\t\tcompleted ();\n\t\t\t\tVisibility = ViewStates.Gone;\n\t\t\t};\t\n\t\t}\n\t\tpublic void AnimateShow (Action completed)\n\t\t{\n\t\t\tObjectAnimator animator = AlphaInAnimator;\n\t\t\tanimator.SetDuration (ALPHAANIMATIONTIME);\n\t\t\tanimator.Start ();\n\t\t\tanimator.AnimationEnd += delegate {\n\t\t\t\tcompleted ();\n\t\t\t\tVisibility = ViewStates.Visible;\n\t\t\t};\n\t\t}\n\t\tpublic void AnimateY (int y)\n\t\t{\n\t\t\tObjectAnimator xAnim = ObjectAnimator.OfFloat (this, TOP_MARGIN, Frame.Y, y);\n\t\t\txAnim.SetDuration (FRAMEANIMATIONTIME);\n\t\t\txAnim.Start ();\n\t\t}\n\t\tpublic void AnimateX (Frame newFrame)\n\t\t{\n\t\t\tObjectAnimator xAnim = ObjectAnimator.OfInt (this, LEFT_MARGIN, Frame.X, newFrame.X);\n\t\t\txAnim.SetDuration (FRAMEANIMATIONTIME);\n\t\t\txAnim.Start ();\n\t\t}\n\t\tpublic void AnimateWidth (Frame newFrame, Action completed)\n\t\t{\n\t\t\tObjectAnimator wAnim = ObjectAnimator.OfInt (this, NEW_WIDTH, Frame.W, newFrame.W);\n\t\t\twAnim.SetDuration (FRAMEANIMATIONTIME);\n\t\t\twAnim.Start ();\n\t\t\twAnim.AnimationEnd += delegate {\n\t\t\t\tcompleted ();\n\t\t\t};\n\t\t}\n\t\tpublic void AnimateXAndWidth (Frame newFrame, Action completed)\n\t\t{\n\t\t\tObjectAnimator xAnim = ObjectAnimator.OfFloat (this, LEFT_MARGIN, (float)Frame.X, (float)newFrame.X);\n\t\t\tObjectAnimator wAnim = ObjectAnimator.OfInt (this, NEW_WIDTH, Frame.W, newFrame.W);\n\t\t\tAnimatorSet set = new AnimatorSet ();\n\t\t\tset.SetDuration (FRAMEANIMATIONTIME);\n\t\t\tset.PlayTogether (new ObjectAnimator[] { xAnim, wAnim });\n\t\t\tset.Start ();\n\t\t\tset.AnimationEnd += delegate {\n\t\t\t\tcompleted ();\n\t\t\t};\n\t\t}\n\t\tpublic virtual void Hide ()\n\t\t{\n\t\t\tAlpha = 0;\n\t\t\tVisibility = ViewStates.Gone;\n\t\t}\n\t\tpublic virtual void Show ()\n\t\t{\n\t\t\tAlpha = 1;\n\t\t\tVisibility = ViewStates.Visible;\n\t\t}\n\t\tpublic void UpdateY (int y)\n\t\t{\n\t\t\tFrame = new Frame (Frame.X, y, Frame.W, Frame.H);\n\t\t}\n\t\tpublic void UpdateX (int x)\n\t\t{\n\t\t\tFrame = new Frame (x, Frame.Y, Frame.W, Frame.H);\n\t\t}\n\t\tpublic void UpdateHeight (int height)\n\t\t{\n\t\t\tFrame = new Frame (Frame.X, Frame.Y, Frame.W, height);\n\t\t}\n\t\tpublic void AddViews (params object[] items)\n\t\t{\n\t\t\tforeach (object item in items) {\n\t\t\t\tAddView (item as View);\n\t\t\t}\n\t\t}\n\t\tpublic void RemoveViews (params object[] items)\n\t\t{\n\t\t\tforeach (object item in items) {\n\t\t\t\tRemoveView (item as View);\n\t\t\t}\n\t\t}\t\n\t\tpublic void UpdateFrameBy (int x, int y, int w, int h)\n\t\t{\n\t\t\tFrame = new Frame (Frame.X + x, Frame.Y + y, Frame.W + w, Frame.H + h);\n\t\t}\n\t\tpublic override void AddView (View child)\n\t\t{\n\t\t\ttry {\n\t\t\t\tbase.AddView (child);\n\t\t\t} catch {\n\t\t\t\tConsole.WriteLine (\"!!!! Caught exception: Failed to add View: \" + child.GetType ());\n\t\t\t}\n\t\t}\n\t\tpublic int SizeHeightToFit ()\n\t\t{\n\t\t\treturn SizeHeightToFitWithMin (0);\n\t\t}\n\t\tpublic int SizeHeightToFitWithMin (int min)\n\t\t{\n", "answers": ["\t\t\tMeasure (0, 0);"], "length": 853, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "d9359fe4b11ff3d0cc4c2102fccceb75920f6435962b6b84"}
{"input": "", "context": "\"\"\"\nData models for the announcements app.\n\"\"\"\nfrom django.db import models\nfrom django.conf import settings\nfrom django.core.urlresolvers import reverse\nfrom django.utils import timezone\nfrom django.utils.translation import ugettext_lazy as _\nfrom apps.tools.utils import unique_slug\nfrom apps.tools.models import ModelDiffMixin\nfrom apps.txtrender.fields import RenderTextField\nfrom apps.txtrender.utils import render_document\nfrom apps.txtrender.signals import render_engine_changed\nfrom .managers import (AnnouncementManager,\n                       AnnouncementTwitterCrossPublicationManager)\nfrom .constants import (ANNOUNCEMENTS_TYPE_CHOICES,\n                        ANNOUNCEMENTS_TYPE_DEFAULT)\nclass Announcement(ModelDiffMixin, models.Model):\n    \"\"\"\n    Announcement data model. Use to quickly broadcast information about the site.\n    An announcement is made of:\n    - a title,\n    - a slug (unique and indexed),\n    - an author,\n    - a creation, last content modification and publication date,\n    - a type,\n    - a \"site wide\" flag, used to determine if the announcement should be displayed on the front page.\n    - some text (source and HTML version).\n    Announcements made by a specific user are available using the reverse relation ``authored_announcements``.\n    \"\"\"\n    title = models.CharField(_('Title'),\n                             max_length=255)\n    # FIXME AutoSlugField\n    slug = models.SlugField(_('Slug'),\n                            max_length=255,\n                            unique=True)\n    author = models.ForeignKey(settings.AUTH_USER_MODEL,\n                               db_index=True,  # Database optimization\n                               related_name='authored_announcements',\n                               verbose_name=_('Author'))\n    creation_date = models.DateTimeField(_('Creation date'),\n                                         auto_now_add=True,\n                                         db_index=True)  # Database optimization\n    last_content_modification_date = models.DateTimeField(_('Last content modification date'),\n                                                          default=None,\n                                                          editable=False,\n                                                          blank=True,\n                                                          null=True,\n                                                          db_index=True)  # Database optimization\n    pub_date = models.DateTimeField(_('Publication date'),\n                                    default=None,\n                                    blank=True,\n                                    null=True,\n                                    db_index=True)  # Database optimization\n    type = models.CharField(_('Type'),\n                            max_length=10,\n                            choices=ANNOUNCEMENTS_TYPE_CHOICES,\n                            default=ANNOUNCEMENTS_TYPE_DEFAULT)\n    site_wide = models.BooleanField(_('Broadcast all over the site'),\n                                    default=False)\n    content = RenderTextField(_('Content'))\n    content_html = models.TextField(_('Content (raw HTML)'))\n    content_text = models.TextField(_('Content (raw text)'))\n    tags = models.ManyToManyField('AnnouncementTag',\n                                  related_name='announcements',\n                                  verbose_name=_('Announcement\\'s tags'),\n                                  blank=True)\n    last_modification_date = models.DateTimeField(_('Last modification date'),\n                                                  auto_now=True)\n    objects = AnnouncementManager()\n    class Meta:\n        verbose_name = _('Announcement')\n        verbose_name_plural = _('Announcements')\n        permissions = (\n            ('can_see_preview', 'Can see any announcements in preview'),\n        )\n        get_latest_by = 'pub_date'\n        ordering = ('-pub_date',)\n    def __str__(self):\n        return self.title\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this announcement.\n        \"\"\"\n        return reverse('announcements:announcement_detail', kwargs={'slug': self.slug})\n    def save(self, *args, **kwargs):\n        \"\"\"\n        Save the announcement, fix non-unique slug, fix/update last content modification date and render the text.\n        :param args: For super()\n        :param kwargs: For super()\n        \"\"\"\n        # Avoid duplicate slug\n        # FIXME AutoSlugField\n        self.slug = unique_slug(Announcement, self, self.slug, 'slug', self.title)\n        # Fix the modification date if necessary\n        self.fix_last_content_modification_date()\n        # Render the content\n        self.render_text()\n        # Save the model\n        super(Announcement, self).save(*args, **kwargs)\n    def save_no_rendering(self, *args, **kwargs):\n        \"\"\"\n        Save the announcement without doing any text rendering or fields cleanup.\n        This method just call the parent ``save`` method.\n        :param args: For super()\n        :param kwargs: For super()\n        \"\"\"\n        super(Announcement, self).save(*args, **kwargs)\n    def fix_last_content_modification_date(self):\n        \"\"\"\n        Fix the ``last_content_modification_date`` field according to ``pub_date`` and other fields.\n        \"\"\"\n        if self.pub_date:\n            changed_fields = self.changed_fields\n            if self.pk and 'title' in changed_fields or 'content' in changed_fields:\n                self.last_content_modification_date = timezone.now()\n            if self.last_content_modification_date \\\n                    and self.last_content_modification_date <= self.pub_date:\n                self.last_content_modification_date = None\n        else:\n            self.last_content_modification_date = None\n    def is_published(self):\n        \"\"\"\n        Return ``True`` if this announcement is published and so, readable by anyone.\n        \"\"\"\n        now = timezone.now()\n        return self.pub_date is not None and self.pub_date <= now\n    is_published.boolean = True\n    is_published.short_description = _('Published')\n    def can_see_preview(self, user):\n        \"\"\"\n        Return True if the given user can see this announcement in preview mode.\n        :param user: The user to be checked for permission\n        \"\"\"\n        return user == self.author or user.has_perm('announcements.can_see_preview')\n    def has_been_modified_after_publication(self):\n        \"\"\"\n        Return True if the announcement has been modified after publication.\n        \"\"\"\n        return self.last_content_modification_date is not None \\\n               and self.last_content_modification_date != self.pub_date\n    def render_text(self, save=False):\n        \"\"\"\n        Render the content.\n        :param save: Save the model field ``content_html`` if ``True``.\n        \"\"\"\n        # Render HTML\n        content_html, content_text, _ = render_document(self.content,\n                                                        allow_titles=True,\n                                                        allow_code_blocks=True,\n                                                        allow_text_formating=True,\n                                                        allow_text_extra=True,\n                                                        allow_text_alignments=True,\n                                                        allow_text_directions=True,\n                                                        allow_text_modifiers=True,\n                                                        allow_text_colors=True,\n                                                        allow_spoilers=True,\n                                                        allow_figures=True,\n                                                        allow_lists=True,\n                                                        allow_todo_lists=True,\n                                                        allow_definition_lists=True,\n                                                        allow_tables=True,\n                                                        allow_quotes=True,\n                                                        allow_footnotes=True,\n                                                        allow_acronyms=True,\n                                                        allow_links=True,\n                                                        allow_medias=True,\n                                                        allow_cdm_extra=True,\n                                                        force_nofollow=False,\n                                                        render_text_version=True,\n                                                        merge_footnotes_html=True,\n                                                        merge_footnotes_text=True)\n        self.content_html = content_html\n        self.content_text = content_text\n        # Save if required\n        if save:\n            self.save_no_rendering(update_fields=('content_html', 'content_text'))\ndef _redo_announcements_text_rendering(sender, **kwargs):\n    \"\"\"\n    Redo text rendering of all announcements.\n    :param sender: Not used.\n    :param kwargs: Not used.\n    \"\"\"\n    for announcement in Announcement.objects.all():\n        announcement.render_text(save=True)\nrender_engine_changed.connect(_redo_announcements_text_rendering)\nclass AnnouncementTag(models.Model):\n    \"\"\"\n    Announcement tag data model.\n    An announcement's tag is made of:\n    - a slug (unique and indexed in database),\n    - a name (human readable).\n    \"\"\"\n    # FIXME AutoSlugField\n    slug = models.SlugField(_('Slug'),\n                            max_length=255,\n                            unique=True)\n    name = models.CharField(_('Name'),\n                            max_length=255)\n    class Meta:\n        verbose_name = _('Announcement tag')\n        verbose_name_plural = _('Announcement tags')\n    def __str__(self):\n        return self.name\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this announcement's tag.\n        \"\"\"\n        return reverse('announcements:tag_detail', kwargs={'slug': self.slug})\n    def get_latest_announcements_rss_feed_url(self):\n        \"\"\"\n        Return the permalink to \"latest announcements\" RSS feed for this tag.\n        \"\"\"\n        return reverse('announcements:latest_tag_announcements_rss', kwargs={'slug': self.slug})\n    def get_latest_announcements_atom_feed_url(self):\n        \"\"\"\n        Return the permalink to \"latest announcements\" Atom feed for this tag.\n        \"\"\"\n        return reverse('announcements:latest_tag_announcements_atom', kwargs={'slug': self.slug})\n    def save(self, *args, **kwargs):\n        \"\"\"\n        Save the model\n        :param args: For super()\n        :param kwargs: For super()\n        \"\"\"\n        # Avoid duplicate slug\n        # FIXME AutoSlugField\n        self.slug = unique_slug(AnnouncementTag, self, self.slug, 'slug', self.name)\n        # Save the tag\n        super(AnnouncementTag, self).save(*args, **kwargs)\nclass AnnouncementTwitterCrossPublication(models.Model):\n    \"\"\"\n    Cross-publication marker for the Twitter platform.\n    This simple model store three information:\n    - the cross-published announcement,\n    - the tweet ID of the cross-publication (for history in case of problem),\n    - the date of cross-publication.\n    \"\"\"\n    announcement = models.ForeignKey('Announcement',\n                                     db_index=True,  # Database optimization\n                                     related_name='twitter_pubs',\n                                     verbose_name=_('Announcement'))\n    tweet_id = models.CharField(_('Tweet ID'),\n                                db_index=True,  # Database optimization\n                                max_length=255)\n    pub_date = models.DateTimeField(_('Creation date'),\n                                    auto_now_add=True,\n                                    db_index=True)  # Database optimization\n    objects = AnnouncementTwitterCrossPublicationManager()\n    class Meta:\n        verbose_name = _('Twitter cross-publication')\n        verbose_name_plural = _('Twitter cross-publications')\n        get_latest_by = 'pub_date'\n        ordering = ('-pub_date', )\n    def __str__(self):\n", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "length": 846, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "795a770e3d8fd600446fa22b4ced986b2139cc631f903b24"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n#\n# Kotori documentation build configuration file, created by\n# sphinx-quickstart on Fri Nov  6 21:36:37 2015.\n#\n# This file is execfile()d with the current directory set to its\n# containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\nimport sys\nimport os\nimport shlex\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#sys.path.insert(0, os.path.abspath('.'))\n#sys.path.insert(0, os.path.join(os.path.abspath('.'), '_extensions'))\n# -- General configuration ------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    'sphinx.ext.intersphinx',\n    'sphinx.ext.todo',\n    'sphinx.ext.ifconfig',\n    'sphinx.ext.graphviz',\n    #'nfotools',\n]\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n# source_suffix = ['.rst', '.md']\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Kotori'\ncopyright = u'2013-2020, The Kotori Developers'\nauthor = u'The Kotori Developers'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '0.24.5'\n# The full version, including alpha/beta/rc tags.\nrelease = '0.24.5'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = 'en'\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = []\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n#keep_warnings = False\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = True\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#html_theme = 'sphinx_rtd_theme'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n#html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\nhtml_last_updated_fmt = \"\"\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\nhtml_domain_indices = True\n# If false, no index is generated.\nhtml_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Language to be used for generating the HTML full-text search index.\n# Sphinx supports the following languages:\n#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'\n#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'\n#html_search_language = 'en'\n# A dictionary with options for the search language support, empty by default.\n# Now only 'ja' uses this config value\n#html_search_options = {'type': 'default'}\n# The name of a javascript file (relative to the configuration directory) that\n# implements a search results scorer. If empty, the default will be used.\n#html_search_scorer = 'scorer.js'\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'Kotoridoc'\n# -- Options for LaTeX output ---------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n# Latex figure (float) alignment\n#'figure_align': 'htbp',\n}\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n  (master_doc, 'Kotori.tex', u'Kotori Documentation',\n   u'Kotori Developers', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output ---------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (master_doc, 'kotori', u'Kotori Documentation',\n     [author], 1)\n]\n# If true, show URL addresses after external links.\n#man_show_urls = False\n# -- Options for Texinfo output -------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  (master_doc, 'Kotori', u'Kotori Documentation',\n   author, 'Kotori', 'Data Acquisition and Telemetry',\n   'DAQ'),\n]\n# Documents to append as an appendix to all manuals.\n#texinfo_appendices = []\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n# If true, do not generate a @detailmenu in the \"Top\" node's menu.\n#texinfo_no_detailmenu = False\n# -- Custom options -------------------------------------------\nimport sphinx_material\nhtml_show_sourcelink = True\nhtml_sidebars = {\n    \"**\": [\"logo-text.html\", \"globaltoc.html\", \"localtoc.html\", \"searchbox.html\"]\n}\n# Required theme setup\nextensions.append('sphinx_material')\nhtml_theme = 'sphinx_material'\nhtml_theme_path = sphinx_material.html_theme_path()\nhtml_context = sphinx_material.get_html_context()\n# Material theme options (see theme.conf for more information)\nhtml_theme_options = {\n    # Set the name of the project to appear in the navigation.\n    'nav_title': 'Kotori',\n    # Set you GA account ID to enable tracking\n    #'google_analytics_account': 'UA-XXXXX',\n    # Specify a base_url used to generate sitemap.xml. If not\n    # specified, then no sitemap will be built.\n    'base_url': 'https://getkotori.org/docs/',\n    # Set the color and the accent color\n    'color_primary': 'blue',\n    'color_accent': 'light-blue',\n    # Set the repo location to get a badge with stats\n    'repo_url': 'https://github.com/daq-tools/kotori/',\n    'repo_name': 'Kotori',\n    # Visible levels of the global TOC; -1 means unlimited\n    'globaltoc_depth': 3,\n    # If False, expand all TOC entries\n    #'globaltoc_collapse': False,\n    # If True, show hidden TOC entries\n    #'globaltoc_includehidden': False,\n    \"master_doc\": False,\n    \"nav_links\": [\n    ],\n    \"heroes\": {\n        \"index\": \"A data historian based on InfluxDB, Grafana, MQTT and more.\",\n        \"about/index\": \"A data historian based on InfluxDB, Grafana, MQTT and more.\",\n        \"about/scenarios\": \"Conceived for consumers, integrators and developers.\",\n        \"about/technologies\": \"Standing on the shoulders of giants.\",\n        \"examples/index\": \"Telemetry data acquisition and sensor networks for humans.\",\n        \"setup/index\": \"Easy to install and operate.\",\n    },\n}\nhtml_logo = '_static/img/kotori-logo.png'\ndef setup(app):\n    # https://github.com/snide/sphinx_rtd_theme/issues/117#issuecomment-41571653\n    # foundation\n    # Bootstrap conflicts with Sphinx\n    #app.add_stylesheet(\"assets/css/bootstrap.min.css\")\n    app.add_stylesheet(\"assets/css/font-awesome.min.css\")\n    app.add_stylesheet(\"assets/css/font-entypo.css\")\n    app.add_stylesheet(\"assets/css/hexagons.min.css\")\n    # jQuery 2.1.0 conflicts with jQuery 1.11.1 from Sphinx\n    #app.add_javascript(\"assets/js/jquery-2.1.0.min.js\")\n    app.add_javascript(\"assets/js/hexagons.min.js\")\n    # application\n    #app.add_javascript(\"custom.js\")\n    app.add_stylesheet(\"css/kotori-sphinx.css\")\n# Link with BERadio and Hiveeyes projects\nintersphinx_mapping = {\n    'beradio':  ('https://hiveeyes.org/docs/beradio/', None),\n    'hiveeyes': ('https://hiveeyes.org/docs/system/', None),\n    'hiveeyes-arduino': ('https://hiveeyes.org/docs/arduino/', None),\n    }\n# Disable caching remote inventories completely\n# http://www.sphinx-doc.org/en/stable/ext/intersphinx.html#confval-intersphinx_cache_limit\nintersphinx_cache_limit = 0\n# Enable proper highlighting for inline PHP by tuning Pygments' PHP lexer.\n# See also http://mbless.de/blog/2015/03/02/php-syntax-highlighting-in-sphinx.html\n# Load PhpLexer\nfrom sphinx.highlighting import lexers\nfrom pygments.lexers.web import PhpLexer\n# Enable highlighting for PHP code not between <?php ... ?> by default\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "length": 1773, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "9ff8464a2c0b3eaf3e56da2bde63d1a0b3109df20a251c6e"}
{"input": "", "context": "\nimport settings\nimport string\nimport datetime\nimport time\nfrom time import mktime\nimport sqlite3\nimport pytz\nfrom datetime import timedelta\n# Creates or opens a file called mydb with a SQLite3 DB\ndb = sqlite3.connect('flogger.sql3')\n# Get a cursor object\ncursor = db.cursor()\ncursor.execute('''CREATE TABLE IF NOT EXISTS\n                    aircraft(id INTEGER PRIMARY KEY,registration TEXT,type TEXT,model TEXT,owner TEXT,airfield TEXT,flarm_id TEXT)''')\ncursor.execute('''CREATE TABLE IF NOT EXISTS\n                    flight_times(id INTEGER PRIMARY KEY,registration TEXT,type TEXT,model TEXT,\n                        flarm_id TEXT,date, TEXT,start_time TEXT,duration TEXT,max_altitude TEXT)''')\ncursor.execute('''DROP TABLE flight_log_final''')\ncursor.execute('''CREATE TABLE IF NOT EXISTS\n                    flight_log_final(id INTEGER PRIMARY KEY, sdate TEXT, stime TEXT, edate TEXT, etime TEXT, duration TEXT,\n                            src_callsign TEXT, max_altitude TEXT, speed TEXT, registration TEXT)''') \ncursor.execute('''DROP TABLE flight_log''')\ncursor.execute('''CREATE TABLE IF NOT EXISTS\n                    flight_log(id INTEGER PRIMARY KEY, sdate TEXT, stime TEXT, edate TEXT, etime TEXT, duration TEXT,\n                            src_callsign TEXT, max_altitude TEXT, speed TEXT, registration TEXT)''') \ncursor.execute('''DROP TABLE flight_group''')\ncursor.execute('''CREATE TABLE IF NOT EXISTS\n                    flight_group(id INTEGER PRIMARY KEY, groupID TEXT, sdate TEXT, stime TEXT, edate TEXT, etime TEXT, duration TEXT,\n                            src_callsign TEXT, max_altitude TEXT, registration TEXT)''')\ncursor.execute('''DROP TABLE flights''') \ncursor.execute('''CREATE TABLE IF NOT EXISTS\n                    flights(id INTEGER PRIMARY KEY, sdate TEXT, stime TEXT, edate TEXT, etime TEXT, duration TEXT,\n                            src_callsign TEXT, max_altitude TEXT, registration TEXT)''') \n#cursor.execute('''DELETE FROM flight_log''') \nMINTIME = time.strptime(\"0:5:0\", \"%H:%M:%S\")       # 5 minutes minimum flight time\nprint \"MINTIME is: \", MINTIME\n# Need to find the highest date record in flight_log and for each record in flight_log_final\n# if this has a date greater than this then process it to check whether it should be added\n#\ncursor.execute('''SELECT max(sdate) FROM flight_log''')\nrow = cursor.fetchone()\nprint \"row is: \", row\n#\n# The following takes into account the situation when there are no records in flight_log\n# and there is therefore no highest date record. Note it does require that this code is\n# run on the same day as the flights are recorded in flight_log_final\n#\nif row <> (None,):\n    max_date = datetime.datetime.strptime(row[0], \"%y/%m/%d\")\n    print \"Last record date in flight_log is: \", max_date\nelse:\n    print \"No records in flight_log so set date to today\"\n    today = datetime.date.today().strftime(\"%y/%m/%d\")\n    max_date = datetime.datetime.strptime(today, \"%y/%m/%d\")\n    \nprint \"max_date set to today: \", max_date\n  \ncursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, speed, registration FROM flight_log_final''')\ndata = cursor.fetchall()\nfor row in data:\n    print \"Row is: sdate %s, stime %s, edate %s, etime %s, duration %s, src_callsign %s, altitude %s, speed %s, registration %s\" % (row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8])\n#    print \"Row is: sdate %s\" % row[0] \n#    print \"stime %s \" % row[1] \n#    print \"edate %s \" % row[2]\n#    print \"etime %s \" % row[3]\n#    print \"duration %s \" % row[4]\n#    print \"src_callsign %s \" % row[5]\n#    print \"altitude %s \" % row[6]\n#    print \"speed %s\"  % row[7]\n#    print \"registration %s\" % row[8]\n    time_str = row[4].replace(\"h\", \"\")\n    time_str = time_str.replace(\"m\", \"\")\n    time_str = time_str.replace(\"s\", \"\")\n    print \"Duration now: \", time_str\n    duration = time.strptime(time_str, \"%H: %M: %S\")\n    \n    strt_date = datetime.datetime.strptime(row[0], \"%y/%m/%d\")\n    if strt_date >= max_date:\n        print \"**** Record start date: \", strt_date, \" after last flight_log record, copy: \", max_date\n        if duration > MINTIME:\n            print \"#### Copy record. Duration is: \", time_str\n            cursor.execute('''INSERT INTO flight_log(sdate, stime, edate, etime, duration, src_callsign, max_altitude, speed, registration)\n                                VALUES(:sdate,:stime,:edate,:etime,:duration,:src_callsign,:max_altitude,:speed, :registration)''',\n                                {'sdate':row[0], 'stime':row[1], 'edate': row[2], 'etime':row[3],\n                                'duration': row[4], 'src_callsign':row[5], 'max_altitude':row[6], 'speed':row[7], 'registration':row[8]})\n            print \"Row copied\"\n        else:\n            print \"====Ignore row, flight time too short: \", row[4]\n    else:\n        print \"???? Record start date: \", strt_date, \" before last flight_log record, ignore: \", max_date\nprint \"Done\"\ndb.commit()  \n# Phase 2 processing\n# For some records for each flight the end time and next start time are too close together\n# to be independent flights.\n# This phase examines all the records and puts them into groups such that each group has \n# an end and start time, such that they are distinct flights ie their end and start times are greater than\n# TIME_DELTA, and not just therefore data\n# jiggles (eg moving moving the plane to a new position on the flight line),\n# ie the end and start time of subsequent flights is such that it couldn't have been a real flight\nprint \"Phase 2\"\nTIME_DELTA = \"0:2:0\"        # Time in hrs:min:sec of shortest flight\n#\n# Note the following code processes each unique or distinct call_sign ie each group\n# of flights for a call_sign\n# SELECT DISTINCT call_sign FROM flight_log\n# rows = cursor.fetchall()\n# for call_sign in rows\ngroup = 0                   # Number of groups set for case there are none\ncursor.execute('''SELECT DISTINCT src_callsign FROM flight_log ORDER BY sdate, stime ''')\nall_callsigns = cursor.fetchall()\nprint \"All call_signs: \", all_callsigns\nfor acallsign in all_callsigns:\n#    call_sign = \"FLRDDE671\"\n    call_sign = ''.join(acallsign)                   # callsign is a tuple ie (u'cccccc',) converts ccccc to string\n    print \"Processing for call_sign: \", call_sign\n    cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude \n                   FROM flight_log WHERE src_callsign=?\n                   ORDER BY sdate, stime ''', (call_sign,)) \n    #for row in rows: \n    row_count = len(cursor.fetchall())\n    print \"nos rows is: \", row_count \n      \n    cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration \n                 FROM flight_log WHERE src_callsign=?\n                 ORDER BY sdate, stime ''', (call_sign,))\n    i = 1\n    group = 1\n    while i <= row_count: \n        try:\n             row_0 =cursor.next()\n             row_1 = cursor.next()\n             print \"Row pair: \", i\n             print \"row_0 is: \", row_0\n             print \"row_1 is: \", row_1\n             time.strptime(TIME_DELTA, \"%H:%M:%S\")\n             time_delta = datetime.datetime.strptime(row_1[1], \"%H:%M:%S\") - datetime.datetime.strptime(row_0[3], \"%H:%M:%S\")\n             delta_secs = time_delta.total_seconds()\n             time_lmt = datetime.datetime.strptime(TIME_DELTA, \"%H:%M:%S\") - datetime.datetime.strptime(\"0:0:0\", \"%H:%M:%S\")\n             lmt_secs = time_lmt.total_seconds()\n             print \"Delta secs is: \", delta_secs, \" Time limit is: \", lmt_secs\n             if (delta_secs) < lmt_secs:\n                 print \"++++Same flight\"    \n                 cursor.execute('''INSERT INTO flight_group(groupID, sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration)\n                                    VALUES(:groupID,:sdate,:stime,:edate,:etime,:duration,:src_callsign,:max_altitude, :registration)''',\n                                    {'groupID':group, 'sdate':row_0[0], 'stime':row_0[1], 'edate': row_0[2], 'etime':row_0[3],\n                                    'duration': row_0[4], 'src_callsign':row_0[5], 'max_altitude':row_0[6], 'registration': row[7]})             \n             else:\n                 # Different flight so start next group ID\n                 print \"----Different flight\"  \n                 cursor.execute('''INSERT INTO flight_group(groupID, sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration)\n                                    VALUES(:groupID,:sdate,:stime,:edate,:etime,:duration,:src_callsign,:max_altitude, :registration)''',\n                                    {'groupID':group, 'sdate':row_0[0], 'stime':row_0[1], 'edate': row_0[2], 'etime':row_0[3],\n                                    'duration': row_0[4], 'src_callsign':row_0[5], 'max_altitude':row_0[6], 'registration': row[7]})\n                 group = group + 1\n             i = i + 1\n             cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration \n                     FROM flight_log WHERE src_callsign=?\n                     ORDER BY sdate, stime ''', (call_sign,))\n             j = 1\n             print \"i is: \", i, \" j is: \",j\n             while j < i:\n                 print \"Move to row: \", j\n                 row_0 = cursor.next()\n                 j = j + 1\n        except StopIteration:\n             print \"Last row\"\n             break\ndb.commit()\n# Phase 3.  This sums the flight durations for each of the flight groups\n# hence resulting in the actual flight start, end times and duration\nprint \"+++++++Phase 3\"\n#\n# This function since I can't find a library function that does what I want; dates & times\n# are very confusing in Python!\n#\ndef time_add(t1, t2):\n    ts = 0\n    tm = 0\n    th = 0\n    t = t1[5] + t2[5]\n    if t >= 60:\n        ts = t - 60\n        tm = int(t / 60)\n    else:\n        ts = t\n    t = t1[4] + t2[4] + tm\n    if t >= 60:\n        tm = t - 60\n        th = int(t/60)\n    else:\n        tm = t\n    th = t1[3] + t2[3] + th\n    print \"Time tuple is: \", (th, tm, ts)\n    tstring = \"%s:%s:%s\" % (th, tm, ts)\n    print \"tstring is: \", tstring\n    time_return = time.strptime(tstring, \"%H:%M:%S\")\n    return time_return\n    \nif group <> 0:    \n    max_groupID = group - 1\n    print \"Max groupID is: \", max_groupID\nelse:\n    print \"No groups to process\"\n    exit()\ni = 1\nwhile i <= max_groupID:\n    \n    cursor.execute('''SELECT max(max_altitude) FROM flight_group WHERE groupID=? ''', (i,))\n    r = cursor.fetchone()\n    max_altitude = r[0]\n    print \"Max altitude from group: \", i, \" is: \", r[0]\n    \n    cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration\n                 FROM flight_group WHERE groupID=?\n", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "length": 1259, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "3a72959ac7abd9d2f988ade3c891be2582b4b66a6cc74678"}
{"input": "", "context": "#!/usr/bin/env python3\nimport datetime, json, os, requests, rethinkdb, shutil, signal, socket, subprocess, time\nHOSTS = '/node/etc/hosts'\n# POD_NAMESPACE must be explicitly set in deployment yaml using downward api --\n# see https://github.com/kubernetes/kubernetes/blob/release-1.0/docs/user-guide/downward-api.md\nPOD_NAMESPACE = os.environ.get('POD_NAMESPACE', 'default')\ndef log(*args, **kwds):\n    print(time_to_timestamp(), *args, **kwds)\nalarm_time=0\ndef mysig(a,b):\n    raise KeyboardInterrupt\ndef alarm(seconds):\n    seconds = int(seconds)\n    signal.signal(signal.SIGALRM, mysig)\n    global alarm_time\n    alarm_time = seconds\n    signal.alarm(seconds)\ndef cancel_alarm():\n    signal.signal(signal.SIGALRM, signal.SIG_IGN)\ndef run(v, shell=False, path='.', get_output=False, env=None, verbose=True, timeout=20):\n    try:\n        alarm(timeout)\n        t = time.time()\n        if isinstance(v, str):\n            cmd = v\n            shell = True\n        else:\n            cmd = ' '.join([(x if len(x.split())<=1 else '\"%s\"'%x) for x in v])\n        if path != '.':\n            cur = os.path.abspath(os.curdir)\n            if verbose:\n                log('chdir %s'%path)\n            os.chdir(path)\n        try:\n            if verbose:\n                log(cmd)\n            if shell:\n                kwds = {'shell':True, 'executable':'/bin/bash', 'env':env}\n            else:\n                kwds = {'env':env}\n            if get_output:\n                output = subprocess.Popen(v, stdout=subprocess.PIPE, **kwds).stdout.read().decode()\n            else:\n                if subprocess.call(v, **kwds):\n                    raise RuntimeError(\"error running '{cmd}'\".format(cmd=cmd))\n                output = None\n            seconds = time.time() - t\n            if verbose:\n                log(\"TOTAL TIME: {seconds} seconds -- to run '{cmd}'\".format(seconds=seconds, cmd=cmd))\n            return output\n        finally:\n            if path != '.':\n                os.chdir(cur)\n    finally:\n        cancel_alarm()\ndef get_service(service):\n    \"\"\"\n    Get in json format the kubernetes information about the given service.\n    \"\"\"\n    if not os.environ['KUBERNETES_SERVICE_HOST']:\n        log('KUBERNETES_SERVICE_HOST environment variable not set')\n        return None\n    URL = \"https://{KUBERNETES_SERVICE_HOST}:{KUBERNETES_SERVICE_PORT}/api/v1/namespaces/{POD_NAMESPACE}/endpoints/{service}\"\n    URL = URL.format(KUBERNETES_SERVICE_HOST=os.environ['KUBERNETES_SERVICE_HOST'],\n                     KUBERNETES_SERVICE_PORT=os.environ['KUBERNETES_SERVICE_PORT'],\n                     POD_NAMESPACE=POD_NAMESPACE,\n                     service=service)\n    token = open('/var/run/secrets/kubernetes.io/serviceaccount/token').read()\n    headers={'Authorization':'Bearer {token}'.format(token=token)}\n    log(\"Getting k8s information about '{service}' from '{URL}'\".format(service=service, URL=URL))\n    x = requests.get(URL, headers=headers, verify='/var/run/secrets/kubernetes.io/serviceaccount/ca.crt').json()\n    log(\"Got {x}\".format(x=x))\n    return x\ndef update_etc_hosts():\n    log('udpate_etc_hosts')\n    try:\n        v = get_service('storage-projects')\n    except Exception as err:\n        # Expected to happen when node is starting up, etc. - we'll retry later soon!\n        log(\"Failed getting storage service info\", err)\n        return\n    if v.get('status', None) == 'Failure':\n        return\n    try:\n        if 'addresses' not in v['subsets'][0]:\n            return   # nothing to do; no known addresses\n        namespace = v['metadata']['namespace']\n        hosts = [\"{ip}    {namespace}-{name}\".format(ip=x['ip'], namespace=namespace,\n                              name=x['targetRef']['name'].split('-')[0]) for x in v['subsets'][0]['addresses']]\n        start = \"# start smc-storage dns - namespace=\"+namespace+\"\\n\\n\"\n        end = \"# end smc-storage dns - namespace=\"+namespace+\"\\n\\n\"\n        block = '\\n'.join([start] + hosts + [end])\n        current = open(HOSTS).read()\n        if block in current:\n            return\n        i = current.find(start)\n        j = current.find(end)\n        if i == -1 or j == -1:\n            new = current + '\\n' + block\n        else:\n            new = current[:i] + block + current[j+len(end):]\n        open(HOSTS,'w').write(new)\n    except Exception as err:\n        log(\"Problem in update_etc_hosts\", err)\nMINION_IP = 'unknown'\ndef enable_ssh_access_to_minion():\n    global MINION_IP\n    # create our own local ssh key\n    if os.path.exists('/root/.ssh'):\n        shutil.rmtree('/root/.ssh')\n    run(['ssh-keygen', '-b', '2048', '-N', '', '-f', '/root/.ssh/id_rsa'])\n    # make root user of minion allow login using this (and only this) key.\n    run('cat /root/.ssh/id_rsa.pub >> /node/root/.ssh/authorized_keys')\n    open(\"/root/.ssh/config\",'w').write(\"StrictHostKeyChecking no\\nUserKnownHostsFile=/dev/null\\n\")\n    # record hostname of minion\n    for x in open(\"/node/etc/hosts\").readlines():\n        if 'group' in x:\n            MINION_IP = x.split()[0]\n            open(\"/node/minion_ip\",'w').write(MINION_IP)\ndef minion_ip():\n    global MINION_IP\n    if MINION_IP == 'unknown':\n        if os.path.exists(\"/node/minion_ip\"):\n            MINION_IP = open(\"/node/minion_ip\").read()\n            return MINION_IP\n        else:\n            enable_ssh_access_to_minion()\n            if MINION_IP == 'unknown':\n                raise RuntimeError(\"first run enable_ssh_access_to_minion\")\n            else:\n                return MINION_IP\n    else:\n        return MINION_IP\ndef run_on_minion(v, *args, **kwds):\n    if isinstance(v, str):\n        v = \"ssh \" + minion_ip() + \" '%s'\"%v\n    else:\n        v = ['ssh', minion_ip() ] + v\n    return run(v, *args, **kwds)\ndef smc_storage(*args, **kwds):\n    return run_on_minion([\"/usr/libexec/kubernetes/kubelet-plugins/volume/exec/smc~smc-storage/smc-storage\"] + list(args), **kwds)\ndef install_flexvolume_plugin():\n    # we always copy it over, which at least upgrades it if necessary.\n    shutil.copyfile(\"/install/smc-storage\", \"/node/plugin/smc-storage\")\n    shutil.copymode(\"/install/smc-storage\", \"/node/plugin/smc-storage\")\ndef is_plugin_loaded():\n    try:\n        if int(run_on_minion(\"zgrep Loaded /var/log/kubelet*|grep smc-storage|wc -l\", get_output=True).strip()) > 0:\n            return True\n        else:\n            return False\n    except Exception as err:\n        log(err)\n        return False\ndef install_zfs():\n    try:\n        run_on_minion('zpool status')\n        log(\"OK: zfs is installed\")\n    except:\n        log(\"zfs not installed, so installing it\")\n        run(['scp', '-r', '/install/gke-zfs', minion_ip()+\":\"])\n        run_on_minion(\"cd /root/gke-zfs/3.16.0-4-amd64/ && ./install.sh\")\ndef install_bindfs():\n    try:\n        run_on_minion('which bindfs')\n        log(\"OK: bindfs is installed\")\n    except:\n        log(\"bindfs not installed, so installing it\")\n        run_on_minion([\"apt-get\", \"update\"])\n        run_on_minion([\"apt-get\", \"install\", \"-y\", \"bindfs\"])\ndef install_sshfs():\n    try:\n        run_on_minion('which sshfs')\n        log(\"OK: bindfs is installed\")\n    except:\n        log(\"bindfs not installed, so installing it\")\n        run_on_minion([\"apt-get\", \"update\"])\n        run_on_minion([\"apt-get\", \"install\", \"-y\", \"sshfs\"])\ndef install_ssh_keys():\n    # Copy the shared secret ssh keys to the minion so that it is able to sshfs\n    # mount the storage servers.\n    path = '/node/root/.ssh/smc-storage/{POD_NAMESPACE}'.format(POD_NAMESPACE = POD_NAMESPACE)\n    if not os.path.exists(path):\n        os.makedirs(path)\n    for x in ['id-rsa', 'id-rsa.pub']:\n        src = os.path.join('/ssh', x); target = os.path.join(path, x.replace('-', '_'))\n        shutil.copyfile(src, target)\n        os.chmod(target, 0o600)\ndef restart_kubelet():\n    run_on_minion(\"kill `pidof /usr/local/bin/kubelet`\")\nTIMESTAMP_FORMAT = \"%Y-%m-%d-%H%M%S\"      # e.g., 2016-06-27-141131\ndef time_to_timestamp(tm=None):\n    if tm is None:\n        tm = time.time()\n    return datetime.datetime.fromtimestamp(tm).strftime(TIMESTAMP_FORMAT)\ndef timestamp_to_rethinkdb(timestamp):\n    i = timestamp.rfind('-')\n    return rethinkdb.iso8601(timestamp[:i].replace('-','') + 'T' + timestamp[i+1:].replace(':','') + 'Z')\n# TODO: this entire approach is pointless and broken because when multiple processes\n# append to the same file, the result is broken corruption.\ndef update_zpool_active_log():\n    \"\"\"\n    Update log file showing which ZFS filesystems are mounted, which is used by the backup system.\n    \"\"\"\n    prefix = \"/mnt/smc-storage/{namespace}/\".format(namespace=POD_NAMESPACE)\n    try:\n        v = run_on_minion(\"zpool status -PL|grep {prefix}\".format(prefix=prefix),\n                          get_output=True).splitlines()\n    except:\n        # Nothing to do -- get error if no pools are mounted\n        return\n    for x in v:\n        w = x.split()\n        if w:\n            path = w[0].strip()           # '/mnt/smc-storage/test/storage0/foo/bar/abc.zfs/00.img'\n            path = path[len(prefix):]     # 'storage0/foo/bar/abc.zfs/00.img'\n            path = os.path.split(path)[0] # 'storage0/foo/bar/abc.zfs'\n            i = path.find('/')\n            server = path[:i]\n            image = path[i+1:]\n            log = \"{timestamp} {image}\".format(timestamp=time_to_timestamp(), image=image)\n            run_on_minion(\"echo '{log}' >> {prefix}/{server}/log/active.log\".format(\n                    log=log, prefix=prefix, server=server))\ndef update_all_snapshots():\n    v = json.loads(smc_storage(\"zpool-update-snapshots\", get_output=True))\n    db_set_last_snapshot(v['new_snapshots'])\nRETHINKDB_SECRET = '/secrets/rethinkdb/rethinkdb'\nimport rethinkdb\ndef rethinkdb_connection():\n    auth_key = open(RETHINKDB_SECRET).read().strip()\n    if not auth_key:\n        auth_key = None\n    return rethinkdb.connect(host='rethinkdb-driver', timeout=4, auth_key=auth_key)\ndef db_set_last_snapshot(new_snapshots):\n    \"\"\"\n    new_snapshots should be a dictionary with keys the project_id's and values timestamps.\n    This function will connect to the database if possible, and set the last_snapshot field of\n    each project (in the projects table) to the given timestamp.\n    \"\"\"\n    print(\"db_set_last_snapshot\", new_snapshots)\n    if len(new_snapshots) == 0:\n        return\n    # Open connection to the database\n    conn = rethinkdb_connection()\n    # Do the queries\n    for project_id, timestamp in new_snapshots.items():\n", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "length": 896, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "d6e15d0ebb2aa304bba431f5e996732e5585011c1cec782a"}
{"input": "", "context": "//--- Aura Script -----------------------------------------------------------\n// Deian\n//--- Description -----------------------------------------------------------\n// Shepard - manages the sheep at Tir Chonaill Grassland\n//---------------------------------------------------------------------------\npublic class DeianScript : NpcScript\n{\n\tpublic override void Load()\n\t{\n\t\tSetRace(10002);\n\t\tSetName(\"_deian\");\n\t\tSetBody(height: 0.85f);\n\t\tSetFace(skinColor: 23, eyeType: 19, eyeColor: 0, mouthType: 0);\n\t\tSetStand(\"human/male/anim/male_natural_stand_npc_deian\");\n\t\tSetLocation(1, 27953, 42287, 158);\n\t\tEquipItem(Pocket.Face, 4900, 0x00FFDC53, 0x00FFB682, 0x00A8DDD3);\n\t\tEquipItem(Pocket.Hair, 4156, 0x00E7CB60, 0x00E7CB60, 0x00E7CB60);\n\t\tEquipItem(Pocket.Armor, 15656, 0x00E2EDC7, 0x004F5E44, 0x00000000);\n\t\tEquipItem(Pocket.Glove, 16099, 0x00343F2D, 0x00000000, 0x00000000);\n\t\tEquipItem(Pocket.Shoe, 17287, 0x004C392A, 0x00000000, 0x00000000);\n\t\tEquipItem(Pocket.Head, 18407, 0x00343F2D, 0x00000000, 0x00000000);\n\t\tEquipItem(Pocket.RightHand1, 40001, 0x00755748, 0x005E9A49, 0x005E9A49);\n\t\tAddGreeting(0, \"Nice to meet you, I am Deian.<br/>You don't look that old, maybe a couple of years older than I am?<br/>Let's just say we're the same age. You don't mind do ya?\");\n\t\tAddGreeting(1, \"Nice to meet you again.\");\n\t\t//AddGreeting(2, \"Welcome, <username />\"); // Not sure\n\t\tAddPhrase(\"Another day... another boring day in the countryside.\");\n\t\tAddPhrase(\"Baa! Baa!\");\n\t\tAddPhrase(\"Geez, these sheep are a pain in the neck.\");\n\t\tAddPhrase(\"Hey, this way!\");\n\t\tAddPhrase(\"I don't understand. I have one extra...\");\n\t\tAddPhrase(\"I'm so bored. There's just nothing exciting around here.\");\n\t\tAddPhrase(\"It's amazing how fast they grow feeding on grass.\");\n\t\tAddPhrase(\"I wonder if I could buy a house with my savings yet...\");\n\t\tAddPhrase(\"What the... Now there's one missing!\");\n\t}\n\tprotected override async Task Talk()\n\t{\n\t\tSetBgm(\"NPC_Deian.mp3\");\n\t\tawait Intro(\n\t\t\t\"An adolescent boy carrying a shepherd's staff watches over a flock of sheep.\",\n\t\t\t\"Now and then, he hollers at some sheep that've wandered too far, and his voice cracks every time.\",\n\t\t\t\"His skin is tanned and his muscles are strong from his daily work.\",\n\t\t\t\"Though he's young, he peers at you with so much confidence it almost seems like arrogance.\"\n\t\t);\n\t\tMsg(\"What can I do for you?\", Button(\"Start a Conversation\", \"@talk\"), Button(\"Shop\", \"@shop\"), Button(\"Modify Item\", \"@upgrade\"));\n\t\tswitch (await Select())\n\t\t{\n\t\t\tcase \"@talk\":\n\t\t\t\tGreet();\n\t\t\t\tMsg(Hide.Name, GetMoodString(), FavorExpression());\n\t\t\t\tif (Player.Titles.SelectedTitle == 11002)\n\t\t\t\t{\n\t\t\t\t\tMsg(\"Eh? <username/>...<br/>You've become the Guardian of Erinn?<br/>So fast!<br/>I'm still trying to become a Warrior!\");\n\t\t\t\t\tMsg(\"Good for you.<br/>Just make sure you leave me some work to do for when I become a Warrior.<br/>Wow, must've been tough.\");\n\t\t\t\t}\n\t\t\t\tawait Conversation();\n\t\t\t\tbreak;\n\t\t\tcase \"@shop\":\n\t\t\t\tMsg(\"I got nothing much, except for some quest scrolls. Are you interested?\");\n\t\t\t\tOpenShop(\"DeianShop\");\n\t\t\t\treturn;\n\t\t\tcase \"@upgrade\":\n\t\t\t\tMsg(\"Upgrades! Who else would know more about that than the great Deian? Hehe...<br/>Now, what do you want to upgrade?<br/>Don't forget to check how many times you can upgrade that tiem and what type of upgrade it is before you give it to me... <upgrade />\");\n\t\t\t\twhile (true)\n\t\t\t\t{\n\t\t\t\t\tvar reply = await Select();\n\t\t\t\t\tif (!reply.StartsWith(\"@upgrade:\"))\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tvar result = Upgrade(reply);\n\t\t\t\t\tif (result.Success)\n\t\t\t\t\t\tMsg(\"Yes! Success!<br/>Honestly, I am a little surprised myself.<br/>Would you like some more upgrades? I'm starting to enjoy this.\");\n\t\t\t\t\telse\n\t\t\t\t\t\tMsg(\"(Error)\");\n\t\t\t\t}\n\t\t\t\tMsg(\"Come and see me again.<br/>I just discovered I have a new talent. Thanks to you!\");\n\t\t\t\tbreak;\n\t\t}\n\t\tEnd();\n\t}\n\tprotected override async Task Keywords(string keyword)\n\t{\n\t\tswitch (keyword)\n\t\t{\n\t\t\tcase \"personal_info\":\n\t\t\t\tMsg(\"Yeah, yeah. I'm a mere shepherd...for now.<br/>But I will soon be a mighty warrior!<br/>\");\n\t\t\t\tModifyRelation(Random(2), 0, Random(2));\n\t\t\t\tbreak;\n\t\t\tcase \"rumor\":\n\t\t\t\tGiveKeyword(\"pool\");\n\t\t\t\tMsg(\"Some people should have been born as fish.<br/>They can't pass water without diving right in.<br/>I wish they'd stop.\");\n\t\t\t\tMsg(\"Not long ago, someone jumped into the reservoir<br/>and made a huge mess.<br/>Guess who got stuck cleaning it up?<br/>Sooo not my job.\");\n\t\t\t\tModifyRelation(Random(2), 0, Random(2));\n\t\t\t\t/* Message from Field Boss Spawns\n\t\t\t\tMsg(\"<face name='normal'/>A monster will show up in Eastern Prairie of the Meadow at 3Days later Dawn!<br/>Gigantic White Wolf will show up!<br/>Hey, I said I'm not lying!\");\n\t\t\t\tMsg(\"<title name='NONE'/>(That was a great conversation!)\"); */\n\t\t\t\tbreak;\n\t\t\tcase \"about_skill\":\n\t\t\t\tif (HasSkill(SkillId.PlayingInstrument))\n\t\t\t\t{\n\t\t\t\t\tMsg(\"Alright, so you know about the Instrument Playing skill.<br/>It's always good to know how to appreciate art, haha!\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tGiveKeyword(\"skill_instrument\");\n\t\t\t\t\tMsg(\"Know anything about the Instrument Playing skill?<br/>Only introspective guys like me<br/>can handle instruments.<br/>I wonder how well you would do...\");\n\t\t\t\t\tMsg(\"Priestess Endelyon knows all about this skill.<br/>You should talk to her.<br/>\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"about_arbeit\":\n\t\t\t\tMsg(\"Unimplemented\");\n\t\t\t\t//Msg(\"It's not time to start work yet.<br/>Can you come back and ask for a job later?\");\n\t\t\t\t//Msg(\"Do you want a part-time job? I'm always in need of help.<br/>Have you ever sheared a sheep before?<br/>If you keep doing a good job, I'll raise your pay.<br/>Want to give it a try?\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_misc\":\n\t\t\t\tMsg(\"You know the guy at the General Shop? His name is Malcolm.<br/>Everyone knows he's a hermit.<br/>He does nothing but work, all day long.<br/>What a dull life!\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_grocery\":\n\t\t\t\tMsg(\"Every time I go there, I smell fresh baked bread. Yum.<br/>Boy, I miss that fatty, Caitin.\");\n\t\t\t\tMsg(\"You know what? Caitin has a pretty face,<br/>but her legs are so chunky! Like tree trunks! Hahahaha!<br/>There's a reason she wears long skirts.<br/>Hehe...\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_healing\":\n\t\t\t\tMsg(\"Oh, you are talking about Dilys' place.<br/>Sometimes, even when I bring a sick lamb, she still treats it with extra care.<br/>I guess lambs and humans aren't that much different when they're sick...\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_inn\":\n\t\t\t\tGiveKeyword(\"skill_campfire\");\n\t\t\t\tMsg(\"Staying up all night, sleeping under trees during the day...<br/>When you have my lifestyle, you don't need to sleep at an Inn!<br/>All I need is the Campfire skill to survive!\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_bank\":\n\t\t\t\tMsg(\"Darn, I wish I had enough items to deposit at the Bank.<br/>Did you talk to Bebhinn?<br/>Bebhinn loves to talk about other people.<br/>You'd better be careful when you talk to her.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_smith\":\n\t\t\t\tMsg(\"The Blacksmith's Shop is too hot. I just hate the heat.<br/>I'd rather be under the shade of a nice tree...\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_range\":\n\t\t\t\tGiveKeyword(\"school\");\n\t\t\t\tMsg(\"Don't you think it's best to go to the School<br/>and ask Ranald about it?<br/>I don't mind telling you about it myself,<br/>but Ranald doesn't like it when I teach people...\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_instrument\":\n\t\t\t\tGiveKeyword(\"temple\");\n\t\t\t\tMsg(\"You really are something.<br/>I just told you,<br/>talk to Priestess Endelyon at the Church<br/>about that.\");\n\t\t\t\tMsg(\"I know your type...<br/>You like to use everything single<br/>keyword you get... Bug off!\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_tailoring\":\n\t\t\t\tMsg(\"Hey, if I had a skill like that, why on Erinn would I be here tending sheep?<br/>It seems interesting,<br/>but my parents would go crazy if they caught me with a needle and thread.\");\n\t\t\t\tMsg(\"I hear chubby Caitin knows a lot.<br/>Problem is, she gets upset when she sees me...<br/>If you learn that skill, can you teach me?\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_magnum_shot\":\n\t\t\t\tMsg(\"I've been losing one or two sheep everyday since I told you about that.<br/>You're not trying to steal my sheep, are you?\");\n\t\t\t\tMsg(\"I'm joking... Don't get so defensive.\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_counter_attack\":\n\t\t\t\tMsg(\"I heard somewhere, you can learn that<br/>by getting beat up...<br/> It's not worth it for me.<br/>A method like that just seems stupid...\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_smash\":\n\t\t\t\tMsg(\"Well, I learned that before.\");\n\t\t\t\tMsg(\"But I forgot.\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_gathering\":\n\t\t\t\tMsg(\"Here's the rundown.<br/>Think about what you want to gather first, then, find out where you can get it.<br/>You'll need the right tool.<br/>More importantly, you need time, hard work, and money.\");\n\t\t\t\tMsg(\"But you won't get paid much.<br/>You want to make an easy living by picking up stuff from the ground, right?<br/>But trust me, it's not that easy. I've tried.\");\n\t\t\t\tbreak;\n\t\t\tcase \"square\":\n\t\t\t\tMsg(\"The Square? Are you serious?<br/>You haven't been there yet?<br/>You are such a bad liar!<br/>I saw you walking out from the Square<br/>just a moment ago!\");\n\t\t\t\tbreak;\n\t\t\tcase \"pool\":\n\t\t\t\tMsg(\"It's right behind chubby ol' Caitin's place.<br/>You know where her Grocery Store is, right?\");\n\t\t\t\tMsg(\"By the way, what are you going to do there?<br/>You're not going to jump in, are you?<br/>I'm just teasing. Calm down.\");\n\t\t\t\tbreak;\n\t\t\tcase \"farmland\":\n\t\t\t\tMsg(\"Are you really interested in that?<br/>Don't ask unless you are really interested!<br/>What? How am I suppose to know if you are interested or not?<br/>If you are interested in the farmland, what are you doing here?\");\n\t\t\t\tbreak;\n\t\t\tcase \"windmill\":\n\t\t\t\tMsg(\"You must be talking about the Windmill down there.<br/>Well, you won't find anything interesting there.<br/>You'll see a little kid.<br/>Even if she acts rude, just let her be...\");\n\t\t\t\tbreak;\n\t\t\tcase \"brook\":\n\t\t\t\tMsg(\"It's the stream right over there!<br/>Didn't you cross the bridge on your way here?<br/>Ha... Your memory is a bit...poor.\");\n\t\t\t\tMsg(\"Sometimes, if you stay here long enough,<br/>you see people peeing in it.  Gross.\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_headman\":\n\t\t\t\tMsg(\"If you're going to the Chief's House,<br/>go to the Square first.<br/>You'll find a hill with a drawing on it.\");\n\t\t\t\tMsg(\"Yeah, where the big tree is.<br/>There's a house over that hill.<br/>That's where our Chief lives.\");\n\t\t\t\tbreak;\n\t\t\tcase \"temple\":\n\t\t\t\tMsg(\"The Church... Hm, the Church....<br/>That... Er... Hmm...\");\n\t\t\t\tMsg(\"Well, I don't know! Go into town and ask someone there!<br/>Or just look at your Minimap, geez!\");\n\t\t\t\tbreak;\n\t\t\tcase \"school\":\n\t\t\t\tMsg(\"Where's the School?<br/>Wow, you are way lost.\");\n\t\t\t\tMsg(\"Okay, cross the stream first, alright?<br/>Then run along, with the stream on your left<br/>and you will see the farmland.<br/>Once you see it, you know you're almost there.\");\n\t\t\t\tMsg(\"It's really close to the farmland, so you'll see it right away.\");\n\t\t\t\tMsg(\"Hey, wait a minute. Why am I telling you all this?<br/>I'm a busy guy!\");\n\t\t\t\tbreak;\n\t\t\tcase \"skill_campfire\":\n\t\t\t\tif (!HasSkill(SkillId.Campfire))\n\t\t\t\t{\n\t\t\t\t\tif (!HasKeyword(\"deian_01\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tGiveItem(1012); // Campfire Manual\n\t\t\t\t\t\tGiveItem(63002, 5); // Firewood\n\t\t\t\t\t\tGiveKeyword(\"deian_01\");\n\t\t\t\t\t\tMsg(\"(Missing dialog: Campfire explanation)\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tMsg(\"(Missing dialog: Another Campfire explanation)\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRemoveKeyword(\"skill_campfire\");\n\t\t\t\t\tRemoveKeyword(\"deian_01\");\n\t\t\t\t\tMsg(\"Hey, you! What are you doing!<br/>Are you trying to use the Campfire skill here?<br/>Are you crazy!? You want to burn all my wool?<br/>Go away! Go away!<br/>You want to play with fire? Go do it far away from here!\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"shop_restaurant\":\n\t\t\t\tGiveKeyword(\"shop_grocery\");\n\t\t\t\tMsg(\"Restaurant? You must be talking about the Grocery Store.<br/>Speaking of food,<br/>my stomach is growling...\");\n\t\t\t\tMsg(\"It's been a while since I've had a decent meal.<br/>I always eat out here.<br/>A hard loaf of bread and plain water.<br/>Let's see, was there a restaurant in our town?\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_armory\":\n\t\t\t\tGiveKeyword(\"shop_smith\");\n\t\t\t\tMsg(\"A Weapons Shop? What for?<br/>What are you going to do with a weapon?<br/>Think you'll put good use to it if you buy it now?<br/>I don't think so!\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_cloth\":\n\t\t\t\tMsg(\"You...are interested in fashion?<br/>Haha.<br/>Puhaha.<br/>Haha...\");\n\t\t\t\tMsg(\"Haha...so...sorry, haha, it's just funny...<br/>Talking about fashion in a place like this?<br/>Did it ever cross your mind that this might be the wrong place for that?\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_bookstore\":\n\t\t\t\tMsg(\"Oh, you like reading?<br/>I'm not sure that will really help you with your life.<br/>I'll bet most people in town would say the same thing.<br/>Why else aren't there any bookstores in town?\");\n\t\t\t\tMsg(\"I don't really understand what people get out of reading.<br/>Books are full of rubbish or fairy tales, you know.<br/>Why do you like reading books?\");\n\t\t\t\tbreak;\n\t\t\tcase \"shop_goverment_office\":\n\t\t\t\tMsg(\"Haha! You're joking, right?<br/>Why would this small town ever need a town office?<br/>Don't worry...if you've lost something, it's usually kept at the Chief's House.\");\n\t\t\t\tbreak;\n\t\t\tcase \"graveyard\":\n\t\t\t\tMsg(\"The graveyard? That place is creepy.\");\n\t\t\t\tMsg(\"You know it's on your Minimap...<br/>Asking all these foolish questions...<br/>What's your problem?\");\n\t\t\t\tbreak;\n\t\t\tcase \"lute\":\n\t\t\t\tMsg(\"Oh... I want a red lute.<br/>Why don't you buy me one when you get rich, yea?\");\n\t\t\t\tbreak;\n\t\t\tcase \"complicity\":\n", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "length": 1740, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "2c8143e18e8a59b4e401fca8446e57b31d54c7fc033009c7"}
{"input": "", "context": "#!/usr/bin/env python\n#\n# This file is part of aDBa.\n#\n# aDBa is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# aDBa is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with aDBa.  If not, see <http://www.gnu.org/licenses/>.\nfrom .aniDBmaper import AniDBMaper\nclass ResponseResolver:\n    def __init__(self, data):\n        restag, rescode, resstr, datalines = self.parse(data)\n        self.restag = restag\n        self.rescode = rescode\n        self.resstr = resstr\n        self.datalines = datalines\n    def parse(self, data):\n        resline = data.split('\\n', 1)[0]\n        lines = data.split('\\n')[1:-1]\n        rescode, resstr = resline.split(' ', 1)\n        if rescode[0] == 'T':\n            restag = rescode\n            rescode, resstr = resstr.split(' ', 1)\n        else:\n            restag = None\n        datalines = []\n        for line in lines:\n            datalines.append(line.split('|'))\n        return restag, rescode, resstr, datalines\n    def resolve(self, cmd):\n        return responses[self.rescode](cmd, self.restag, self.rescode, self.resstr, self.datalines)\nclass Response:\n    def __init__(self, cmd, restag, rescode, resstr, rawlines):\n        self.req = cmd\n        self.restag = restag\n        self.rescode = rescode\n        self.resstr = resstr\n        self.rawlines = rawlines\n        self.maper = AniDBMaper()\n    def __repr__(self):\n        tmp = \"%s(%s,%s,%s) %s\\n\" % (\n        self.__class__.__name__, repr(self.restag), repr(self.rescode), repr(self.resstr),\n        repr(self.attrs))\n        m = 0\n        for line in self.datalines:\n            for k, v in line.items():\n                if len(k) > m:\n                    m = len(k)\n        for line in self.datalines:\n            tmp += \"  Line:\\n\"\n            for k, v in line.items():\n                tmp += \"    %s:%s %s\\n\" % (k, (m - len(k)) * ' ', v)\n        return tmp\n    def parse(self):\n        tmp = self.resstr.split(' ', len(self.codehead))\n        self.attrs = dict(list(zip(self.codehead, tmp[:-1])))\n        self.resstr = tmp[-1]\n        self.datalines = []\n        for rawline in self.rawlines:\n            normal = dict(list(zip(self.codetail, rawline)))\n            rawline = rawline[len(self.codetail):]\n            rep = []\n            if len(self.coderep):\n                while rawline:\n                    tmp = dict(list(zip(self.coderep, rawline)))\n                    rawline = rawline[len(self.coderep):]\n                    rep.append(tmp)\n            # normal['rep']=rep\n            self.datalines.append(normal)\n    def handle(self):\n        if self.req:\n            self.req.handle(self)\nclass LoginAcceptedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tsesskey\t- session key\n\t\taddress\t- your address (ip:port) as seen by the server\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'LOGIN_ACCEPTED'\n        self.codetail = ()\n        self.coderep = ()\n        nat = cmd.parameters['nat']\n        nat = int(nat == None and nat or '0')\n        if nat:\n            self.codehead = ('sesskey', 'address')\n        else:\n            self.codehead = ('sesskey',)\nclass LoginAcceptedNewVerResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tsesskey\t- session key\n\t\taddress\t- your address (ip:port) as seen by the server\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'LOGIN_ACCEPTED_NEW_VER'\n        self.codetail = ()\n        self.coderep = ()\n        nat = cmd.parameters['nat']\n        nat = int(nat == None and nat or '0')\n        if nat:\n            self.codehead = ('sesskey', 'address')\n        else:\n            self.codehead = ('sesskey',)\nclass LoggedOutResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'LOGGED_OUT'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass ResourceResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'RESOURCE'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass StatsResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'STATS'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass TopResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'TOP'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass UptimeResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\tuptime\t- udpserver uptime in milliseconds\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'UPTIME'\n        self.codehead = ()\n        self.codetail = ('uptime',)\n        self.coderep = ()\nclass EncryptionEnabledResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tsalt\t- salt\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'ENCRYPTION_ENABLED'\n        self.codehead = ('salt',)\n        self.codetail = ()\n        self.coderep = ()\nclass MylistEntryAddedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\tentrycnt - number of entries added\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'MYLIST_ENTRY_ADDED'\n        self.codehead = ()\n        self.codetail = ('entrycnt',)\n        self.coderep = ()\nclass MylistEntryDeletedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\tentrycnt - number of entries\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'MYLIST_ENTRY_DELETED'\n        self.codehead = ()\n        self.codetail = ('entrycnt',)\n        self.coderep = ()\nclass AddedFileResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'ADDED_FILE'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass AddedStreamResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'ADDED_STREAM'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass EncodingChangedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'ENCODING_CHANGED'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass FileResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\teid\t\tepisode id\n\t\tgid\t\tgroup id\n\t\tlid\t\tmylist id\n\t\tstate\t\tstate\n\t\tsize\t\tsize\n\t\ted2k\t\ted2k\n\t\tmd5\t\tmd5\n\t\tsha1\t\tsha1\n\t\tcrc32\t\tcrc32\n\t\tdublang\t\tdub language\n\t\tsublang\t\tsub language\n\t\tquality\t\tquality\n\t\tsource\t\tsource\n\t\taudiocodec\taudio codec\n\t\taudiobitrate\taudio bitrate\n\t\tvideocodec\tvideo codec\n\t\tvideobitrate\tvideo bitrate\n\t\tresolution\tvideo resolution\n\t\tfiletype\tfile type (extension)\n\t\tlength\t\tlength in seconds\n\t\tdescription\tdescription\n\t\tfilename\tanidb file name\n\t\tgname\t\tgroup name\n\t\tgshortname\tgroup short name\n\t\tepno\t\tnumber of episode\n\t\tepname\t\tep english name\n\t\tepromaji\tep romaji name\n\t\tepkanji\t\tep kanji name\n\t\ttotaleps\tanime total episodes\n\t\tlastep\t\tlast episode nr (highest, not special)\n\t\tyear\t\tyear\n\t\ttype\t\ttype\n\t\tromaji\t\tromaji name\n\t\tkanji\t\tkanji name\n\t\tname\t\tenglish name\n\t\tothername\tother name\n\t\tshortnames\tshort name list\n\t\tsynonyms\tsynonym list\n\t\tcategories\tcategory list\n\t\trelatedaids\trelated aid list\n\t\tproducernames\tproducer name list\n\t\tproducerids\tproducer id list\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'FILE'\n        self.codehead = ()\n        self.coderep = ()\n        fmask = cmd.parameters['fmask']\n        amask = cmd.parameters['amask']\n        codeListF = self.maper.getFileCodesF(fmask)\n        codeListA = self.maper.getFileCodesA(amask)\n        # print \"File - codelistF: \"+str(codeListF)\n        # print \"File - codelistA: \"+str(codeListA)\n        self.codetail = tuple(['fid'] + codeListF + codeListA)\nclass MylistResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\tlid\t - mylist id\n\t\tfid\t - file id\n\t\teid\t - episode id\n\t\taid\t - anime id\n\t\tgid\t - group id\n\t\tdate\t - date when you added this to mylist\n\t\tstate\t - the location of the file\n\t\tviewdate - date when you marked this watched\n\t\tstorage\t - for example the title of the cd you have this on\n\t\tsource\t - where you got the file (bittorrent,dc++,ed2k,...)\n\t\tother\t - other data regarding this file\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'MYLIST'\n        self.codehead = ()\n        self.codetail = (\n        'lid', 'fid', 'eid', 'aid', 'gid', 'date', 'state', 'viewdate', 'storage', 'source',\n        'other')\n        self.coderep = ()\nclass MylistStatsResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\tanimes\t\t- animes\n\t\teps\t\t- eps\n\t\tfiles\t\t- files\n\t\tfilesizes\t- size of files\n\t\tanimesadded\t- added animes\n\t\tepsadded\t- added eps\n\t\tfilesadded\t- added files\n\t\tgroupsadded\t- added groups\n\t\tleechperc\t- leech %\n\t\tlameperc\t- lame %\n\t\tviewedofdb\t- viewed % of db\n\t\tmylistofdb\t- mylist % of db\n\t\tviewedofmylist\t- viewed % of mylist\n\t\tviewedeps\t- number of viewed eps\n\t\tvotes\t\t- votes\n\t\treviews\t\t- reviews\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'MYLIST_STATS'\n        self.codehead = ()\n        self.codetail = (\n        'animes', 'eps', 'files', 'filesizes', 'animesadded', 'epsadded', 'filesadded',\n        'groupsadded', 'leechperc', 'lameperc', 'viewedofdb', 'mylistofdb', 'viewedofmylist',\n        'viewedeps', 'votes', 'reviews')\n        self.coderep = ()\nclass AnimeResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'ANIME'\n        self.codehead = ()\n        self.coderep = ()\n        # TODO: impl random anime\n        amask = cmd.parameters['amask']\n        codeList = self.maper.getAnimeCodesA(amask)\n        self.codetail = tuple(codeList)\nclass AnimeBestMatchResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'ANIME_BEST_MATCH'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass RandomanimeResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'RANDOMANIME'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass EpisodeResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\teid\t- episode id\n\t\taid\t- anime id\n\t\tlength\t- length\n\t\trating\t- rating\n\t\tvotes\t- votes\n\t\tepno\t- number of episode\n\t\tname\t- english name of episode\n\t\tromaji\t- romaji name of episode\n\t\tkanji\t- kanji name of episode\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'EPISODE'\n        self.codehead = ()\n        self.codetail = (\n        'eid', 'aid', 'length', 'rating', 'votes', 'epno', 'name', 'romaji', 'kanji')\n        self.coderep = ()\nclass ProducerResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\tpid\t  - producer id\n\t\tname\t  - name of producer\n\t\tshortname - short name\n\t\tothername - other name\n\t\ttype\t  - type\n\t\tpic\t  - picture name\n\t\turl\t  - home page url\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'PRODUCER'\n        self.codehead = ()\n        self.codetail = ('pid', 'name', 'shortname', 'othername', 'type', 'pic', 'url')\n        self.coderep = ()\nclass GroupResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\tgid\t   - group id\n\t\trating\t   - rating\n\t\tvotes\t   - votes\n\t\tanimes\t   - anime count\n\t\tfiles\t   - file count\n\t\tname\t   - name\n\t\tshortname  - short\n\t\tircchannel - irc channel\n\t\tircserver  - irc server\n\t\turl\t   - url\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'GROUP'\n        self.codehead = ()\n        self.codetail = (\n        'gid', 'rating', 'votes', 'animes', 'files', 'name', 'shortname', 'ircchannel', 'ircserver',\n        'url')\n        self.coderep = ()\nclass GroupstatusResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\tgid\t   - group id\n\t\trating\t   - rating\n\t\tvotes\t   - votes\n\t\tanimes\t   - anime count\n\t\tfiles\t   - file count\n\t\tname\t   - name\n\t\tshortname  - short\n\t\tircchannel - irc channel\n\t\tircserver  - irc server\n\t\turl\t   - url\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'GROUPSTATUS'\n        self.codehead = ()\n        self.codetail = (\n        'gid', 'name', 'state', ' last_episode_number', 'rating', 'votes', 'episode_range')\n        self.coderep = ()\nclass BuddyListResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tstart\t- mylist entry number of first buddy on this packet\n\t\tend\t- mylist entry number of last buddy on this packet\n\t\ttotal\t- total number of buddies on mylist\n\t\tdata:\n\t\tuid\t- uid\n\t\tname\t- username\n\t\tstate\t- state\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'BUDDY_LIST'\n        self.codehead = ('start', 'end', 'total')\n        self.codetail = ('uid', 'username', 'state')\n        self.coderep = ()\nclass BuddyStateResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tstart\t- mylist entry number of first buddy on this packet\n\t\tend\t- mylist entry number of last buddy on this packet\n\t\ttotal\t- total number of buddies on mylist\n\t\tdata:\n\t\tuid\t- uid\n\t\tstate\t- online state\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'BUDDY_STATE'\n        self.codehead = ('start', 'end', 'total')\n        self.codetail = ('uid', 'state')\n        self.coderep = ()\nclass BuddyAddedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'BUDDY_ADDED'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass BuddyDeletedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'BUDDY_DELETED'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass BuddyAcceptedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'BUDDY_ACCEPTED'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass BuddyDeniedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'BUDDY_DENIED'\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\nclass VotedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTED'\n        self.codehead = ()\n        self.codetail = ('name',)\n        self.coderep = ()\nclass VoteFoundResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\tname\t- aname/ename/gname\n\t\tvalue\t- vote value\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_FOUND'\n        self.codehead = ()\n        self.codetail = ('name', 'value')\n        self.coderep = ()\nclass VoteUpdatedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\tname\t- aname/ename/gname\n\t\tvalue\t- vote value\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_UPDATED'\n        self.codehead = ()\n        self.codetail = ('name', 'value')\n        self.coderep = ()\nclass VoteRevokedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n", "answers": ["\t\tname\t- aname/ename/gname"], "length": 2041, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "997526c4ebbb7938e65ea14362c83fde9d979401f5f5f445"}
{"input": "", "context": "# (c) 2016 Matt Clay <matt@mystile.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\nimport os\nimport time\nimport re\nfrom ansible.module_utils._text import to_bytes, to_text\nfrom ansible.plugins.callback import CallbackBase\ntry:\n    from junit_xml import TestSuite, TestCase\n    HAS_JUNIT_XML = True\nexcept ImportError:\n    HAS_JUNIT_XML = False\ntry:\n    from collections import OrderedDict\n    HAS_ORDERED_DICT = True\nexcept ImportError:\n    try:\n        from ordereddict import OrderedDict\n        HAS_ORDERED_DICT = True\n    except ImportError:\n        HAS_ORDERED_DICT = False\nclass CallbackModule(CallbackBase):\n    \"\"\"\n    This callback writes playbook output to a JUnit formatted XML file.\n    Tasks show up in the report as follows:\n        'ok': pass\n        'failed' with 'EXPECTED FAILURE' in the task name: pass\n        'failed' due to an exception: error\n        'failed' for other reasons: failure\n        'skipped': skipped\n    This plugin makes use of the following environment variables:\n        JUNIT_OUTPUT_DIR (optional): Directory to write XML files to.\n                                     Default: ~/.ansible.log\n        JUNIT_TASK_CLASS (optional): Configure the output to be one class per yaml file\n                                     Default: False\n        JUNIT_FAIL_ON_CHANGE (optional): Consider any tasks reporting \"changed\" as a junit test failure\n                                     Default: False\n    Requires:\n        junit_xml\n    \"\"\"\n    CALLBACK_VERSION = 2.0\n    CALLBACK_TYPE = 'aggregate'\n    CALLBACK_NAME = 'junit'\n    CALLBACK_NEEDS_WHITELIST = True\n    def __init__(self):\n        super(CallbackModule, self).__init__()\n        self._output_dir = os.getenv('JUNIT_OUTPUT_DIR', os.path.expanduser('~/.ansible.log'))\n        self._task_class = os.getenv('JUNIT_TASK_CLASS', 'False').lower()\n        self._fail_on_change = os.getenv('JUNIT_FAIL_ON_CHANGE', 'False').lower()\n        self._playbook_path = None\n        self._playbook_name = None\n        self._play_name = None\n        self._task_data = None\n        self.disabled = False\n        if not HAS_JUNIT_XML:\n            self.disabled = True\n            self._display.warning('The `junit_xml` python module is not installed. '\n                                  'Disabling the `junit` callback plugin.')\n        if HAS_ORDERED_DICT:\n            self._task_data = OrderedDict()\n        else:\n            self.disabled = True\n            self._display.warning('The `ordereddict` python module is not installed. '\n                                  'Disabling the `junit` callback plugin.')\n        if not os.path.exists(self._output_dir):\n            os.mkdir(self._output_dir)\n    def _start_task(self, task):\n        \"\"\" record the start of a task for one or more hosts \"\"\"\n        uuid = task._uuid\n        if uuid in self._task_data:\n            return\n        play = self._play_name\n        name = task.get_name().strip()\n        path = task.get_path()\n        if not task.no_log:\n            args = ', '.join(('%s=%s' % a for a in task.args.items()))\n            if args:\n                name += ' ' + args\n        self._task_data[uuid] = TaskData(uuid, name, path, play)\n    def _finish_task(self, status, result):\n        \"\"\" record the results of a task for a single host \"\"\"\n        task_uuid = result._task._uuid\n        if hasattr(result, '_host'):\n            host_uuid = result._host._uuid\n            host_name = result._host.name\n        else:\n            host_uuid = 'include'\n            host_name = 'include'\n        task_data = self._task_data[task_uuid]\n        if self._fail_on_change == 'true' and status == 'ok' and result._result.get('changed', False):\n            status = 'failed'\n        if status == 'failed' and 'EXPECTED FAILURE' in task_data.name:\n            status = 'ok'\n        task_data.add_host(HostData(host_uuid, host_name, status, result))\n    def _build_test_case(self, task_data, host_data):\n        \"\"\" build a TestCase from the given TaskData and HostData \"\"\"\n        name = '[%s] %s: %s' % (host_data.name, task_data.play, task_data.name)\n        duration = host_data.finish - task_data.start\n        if self._task_class == 'true':\n            junit_classname = re.sub('\\.yml:[0-9]+$', '', task_data.path)\n        else:\n            junit_classname = task_data.path\n        if host_data.status == 'included':\n            return TestCase(name, junit_classname, duration, host_data.result)\n        res = host_data.result._result\n        rc = res.get('rc', 0)\n        dump = self._dump_results(res, indent=0)\n        dump = self._cleanse_string(dump)\n        if host_data.status == 'ok':\n            return TestCase(name, junit_classname, duration, dump)\n        test_case = TestCase(name, junit_classname, duration)\n        if host_data.status == 'failed':\n            if 'exception' in res:\n                message = res['exception'].strip().split('\\n')[-1]\n                output = res['exception']\n                test_case.add_error_info(message, output)\n            elif 'msg' in res:\n                message = res['msg']\n                test_case.add_failure_info(message, dump)\n            else:\n                test_case.add_failure_info('rc=%s' % rc, dump)\n        elif host_data.status == 'skipped':\n            if 'skip_reason' in res:\n                message = res['skip_reason']\n            else:\n                message = 'skipped'\n            test_case.add_skipped_info(message)\n        return test_case\n    def _cleanse_string(self, value):\n        \"\"\" convert surrogate escapes to the unicode replacement character to avoid XML encoding errors \"\"\"\n        return to_text(to_bytes(value, errors='surrogateescape'), errors='replace')\n    def _generate_report(self):\n        \"\"\" generate a TestSuite report from the collected TaskData and HostData \"\"\"\n        test_cases = []\n        for task_uuid, task_data in self._task_data.items():\n            for host_uuid, host_data in task_data.host_data.items():\n                test_cases.append(self._build_test_case(task_data, host_data))\n        test_suite = TestSuite(self._playbook_name, test_cases)\n        report = TestSuite.to_xml_string([test_suite])\n        output_file = os.path.join(self._output_dir, '%s-%s.xml' % (self._playbook_name, time.time()))\n        with open(output_file, 'wb') as xml:\n            xml.write(to_bytes(report, errors='surrogate_or_strict'))\n    def v2_playbook_on_start(self, playbook):\n        self._playbook_path = playbook._file_name\n        self._playbook_name = os.path.splitext(os.path.basename(self._playbook_path))[0]\n    def v2_playbook_on_play_start(self, play):\n        self._play_name = play.get_name()\n    def v2_runner_on_no_hosts(self, task):\n        self._start_task(task)\n    def v2_playbook_on_task_start(self, task, is_conditional):\n        self._start_task(task)\n    def v2_playbook_on_cleanup_task_start(self, task):\n        self._start_task(task)\n    def v2_playbook_on_handler_task_start(self, task):\n        self._start_task(task)\n    def v2_runner_on_failed(self, result, ignore_errors=False):\n        if ignore_errors:\n            self._finish_task('ok', result)\n        else:\n            self._finish_task('failed', result)\n    def v2_runner_on_ok(self, result):\n        self._finish_task('ok', result)\n    def v2_runner_on_skipped(self, result):\n        self._finish_task('skipped', result)\n    def v2_playbook_on_include(self, included_file):\n        self._finish_task('included', included_file)\n    def v2_playbook_on_stats(self, stats):\n        self._generate_report()\nclass TaskData:\n    \"\"\"\n    Data about an individual task.\n    \"\"\"\n    def __init__(self, uuid, name, path, play):\n        self.uuid = uuid\n        self.name = name\n        self.path = path\n        self.play = play\n        self.start = None\n        self.host_data = OrderedDict()\n", "answers": ["        self.start = time.time()"], "length": 793, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "1be8fdfd322b9ece97d70593dac71eecdd59539ab7ef69d7"}
{"input": "", "context": "package com.germainz.crappalinks;\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.net.Uri;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.widget.Toast;\nimport org.json.JSONObject;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.ConnectException;\nimport java.net.CookieHandler;\nimport java.net.CookieManager;\nimport java.net.UnknownHostException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\npublic class Resolver extends Activity {\n    private String toastType;\n    private boolean confirmOpen;\n    private String resolveAllWhen;\n    private boolean useUnshortenIt;\n    private static final String TOAST_NONE = \"0\";\n    private static final String TOAST_DETAILED = \"2\";\n    private static final String UNSHORTEN_IT_API_KEY = \"UcWGkhtMFdM4019XeI8lgfNOk875RL7K\";\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        SharedPreferences sharedPreferences = getSharedPreferences(\"com.germainz.crappalinks_preferences\",\n                Context.MODE_WORLD_READABLE);\n        toastType = sharedPreferences.getString(\"pref_toast_type\", TOAST_NONE);\n        confirmOpen = sharedPreferences.getBoolean(\"pref_confirm_open\", false);\n        resolveAllWhen = sharedPreferences.getString(\"pref_resolve_all_when\", \"ALWAYS\");\n        // Still called pref_use_long_url for backwards compatibility, as we used to use longurl.org instead.\n        useUnshortenIt = sharedPreferences.getBoolean(\"pref_use_long_url\", false);\n        new ResolveUrl().execute(getIntent().getDataString());\n        /* Ideally, this would be a service, but we're redirecting intents via Xposed.\n         * We finish the activity immediately so that the user can still interact with the\n         * foreground app while we unshorten the URL in the background.\n         */\n        finish();\n    }\n    private class ResolveUrl extends AsyncTask<String, Void, String> {\n        private Context context = null;\n        // unknown error while connecting\n        private boolean connectionError = false;\n        // connection missing/not working\n        private boolean noConnectionError = false;\n        private ResolveUrl() {\n            context = Resolver.this;\n        }\n        @Override\n        protected void onPreExecute() {\n            if (!toastType.equals(TOAST_NONE))\n                Toast.makeText(context, getString(R.string.toast_message_started),\n                        Toast.LENGTH_SHORT).show();\n        }\n        private String getRedirect(String url) {\n            HttpURLConnection c = null;\n            try {\n                c = (HttpURLConnection) new URL(url).openConnection();\n                c.setConnectTimeout(10000);\n                c.setReadTimeout(15000);\n                c.connect();\n                final int responseCode = c.getResponseCode();\n                // If the response code is 3xx, it's a redirection. Return the real location.\n                if (responseCode >= 300 && responseCode < 400) {\n                    String location = c.getHeaderField(\"Location\");\n                    return RedirectHelper.getAbsoluteUrl(location, url);\n                }\n                // It might also be a redirection using meta tags.\n                else if (responseCode >= 200 && responseCode < 300 ) {\n                    Document d = Jsoup.parse(c.getInputStream(), \"UTF-8\", url);\n                    Elements refresh = d.select(\"*:not(noscript) > meta[http-equiv=Refresh]\");\n                    if (!refresh.isEmpty()) {\n                        Element refreshElement = refresh.first();\n                        if (refreshElement.hasAttr(\"url\"))\n                            return RedirectHelper.getAbsoluteUrl(refreshElement.attr(\"url\"), url);\n                        else if (refreshElement.hasAttr(\"content\") && refreshElement.attr(\"content\").contains(\"url=\"))\n                            return RedirectHelper.getAbsoluteUrl(refreshElement.attr(\"content\").split(\"url=\")[1].replaceAll(\"^'|'$\", \"\"), url);\n                    }\n                }\n            } catch (ConnectException | UnknownHostException e) {\n                noConnectionError = true;\n                e.printStackTrace();\n            } catch (Exception e) {\n                connectionError = true;\n                e.printStackTrace();\n            } finally {\n                if (c != null)\n                    c.disconnect();\n            }\n            return null;\n        }\n        private String getRedirectUsingLongURL(String url) {\n            HttpURLConnection c = null;\n            try {\n                // http://unshorten.it/api/documentation\n                Uri.Builder builder = new Uri.Builder();\n                builder.scheme(\"http\").authority(\"api.unshorten.it\").appendQueryParameter(\"shortURL\", url)\n                        .appendQueryParameter(\"responseFormat\", \"json\").appendQueryParameter(\"apiKey\", UNSHORTEN_IT_API_KEY);\n                String requestUrl = builder.build().toString();\n                c = (HttpURLConnection) new URL(requestUrl).openConnection();\n                c.setRequestProperty(\"User-Agent\", \"CrappaLinks\");\n                c.setConnectTimeout(10000);\n                c.setReadTimeout(15000);\n                c.connect();\n                final int responseCode = c.getResponseCode();\n                if (responseCode == 200) {\n                    // Response format: {\"fullurl\": \"URL\"}\n                    JSONObject jsonObject = new JSONObject(new BufferedReader(\n                            new InputStreamReader(c.getInputStream())).readLine());\n                    if (jsonObject.has(\"error\")) {\n                        connectionError = true;\n                        Log.e(\"CrappaLinks\", requestUrl);\n                        Log.e(\"CrappaLinks\", jsonObject.toString());\n                        return url;\n                    } else {\n                        return jsonObject.getString(\"fullurl\");\n                    }\n                }\n            } catch (ConnectException | UnknownHostException e) {\n                noConnectionError = true;\n            } catch (Exception e) {\n                connectionError = true;\n                e.printStackTrace();\n            } finally {\n                if (c != null)\n                    c.disconnect();\n            }\n            return url;\n        }\n        protected String doInBackground(String... urls) {\n            String redirectUrl = urls[0];\n            // if there's no connection, fail and return the original URL.\n            ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(\n                    Context.CONNECTIVITY_SERVICE);\n            if (connectivityManager.getActiveNetworkInfo() == null) {\n                noConnectionError = true;\n                return redirectUrl;\n            }\n            if (useUnshortenIt) {\n                return getRedirectUsingLongURL(redirectUrl);\n            } else {\n                HttpURLConnection.setFollowRedirects(false);\n                // Use the cookie manager so that cookies are stored. Useful for some hosts that keep\n                // redirecting us indefinitely unless the set cookie is detected.\n                CookieManager cookieManager = new CookieManager();\n                CookieHandler.setDefault(cookieManager);\n                // Should we resolve all URLs?\n                boolean resolveAll = true;\n                NetworkInfo wifiInfo = connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);\n                if (resolveAllWhen.equals(\"NEVER\") || (resolveAllWhen.equals(\"WIFI_ONLY\") && !wifiInfo.isConnected()))\n                    resolveAll = false;\n                // Keep trying to resolve the URL until we get a URL that isn't a redirect.\n                String finalUrl = redirectUrl;\n                while (redirectUrl != null && ((resolveAll) || (RedirectHelper.isRedirect(Uri.parse(redirectUrl).getHost())))) {\n                    redirectUrl = getRedirect(redirectUrl);\n                    if (redirectUrl != null) {\n                        // This should avoid infinite loops, just in case.\n                        if (redirectUrl.equals(finalUrl))\n                            return finalUrl;\n                        finalUrl = redirectUrl;\n                    }\n                }\n                return finalUrl;\n            }\n        }\n        protected void onPostExecute(final String uri) {\n            if (noConnectionError)\n                Toast.makeText(context, getString(R.string.toast_message_network) + uri, Toast.LENGTH_LONG).show();\n            else if (connectionError)\n                Toast.makeText(context, getString(R.string.toast_message_error) + uri, Toast.LENGTH_LONG).show();\n            if (confirmOpen) {\n                Intent confirmDialogIntent = new Intent(context, ConfirmDialog.class);\n                confirmDialogIntent.putExtra(\"uri\", uri);\n                startActivity(confirmDialogIntent);\n            } else {\n                if (!noConnectionError && !connectionError && toastType.equals(TOAST_DETAILED))\n                    Toast.makeText(context, getString(R.string.toast_message_done) + uri, Toast.LENGTH_LONG).show();\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "length": 690, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "6a8feeca0aea2095a4c5fc0c58f18f3456556c6af9b7374a"}
{"input": "", "context": "# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nimport behave\nimport re\nimport os\nimport tempfile\nimport glob\nfrom lib.file import decompress_file_by_extension_to_dir\nfrom common.lib.behave_ext import check_context_table\nfrom common.lib.diff import print_lines_diff\nfrom common.lib.file import get_compression_suffix\nfrom lib.sqlite_repodata import load_sqlite\nfrom lib.xml_repodata import xml_parse_repodata\nfrom lib.repodata import regex_find_file_from_list\nfrom lib.repodata import verify_repomd_item_with_file\nfrom lib.repodata import build_nevra\nfrom lib.file import get_checksum_regex\nfrom lib.file import decompression_iter\nfrom lib.file import checksum_of_file\nfrom string import Template\n# namespaces\nns = {\"pri_ns\": \"http://linux.duke.edu/metadata/common\",\n      \"fil_ns\": \"http://linux.duke.edu/metadata/filelists\",\n      \"oth_ns\": \"http://linux.duke.edu/metadata/other\",\n      \"md_ns\": \"http://linux.duke.edu/metadata/repo\"}\ndef keys_do_not_differ(prim, flist, oth):\n    if prim.keys() != flist.keys():\n        print_lines_diff(prim.keys(), flist.keys())\n        raise AssertionError(\"Primary and Filelists have different package sets.\")\n    if prim.keys() != oth.keys():\n        print_lines_diff(prim.keys(), oth.keys())\n        raise AssertionError(\"Primary and Other have different package sets.\")\ndef repodata_do_not_differ(prim1, prim2, flist1, flist2, oth1, oth2):\n        # Compare packages by checksums\n        if prim1.keys() != prim2.keys():\n            print_lines_diff(prim1.keys(), prim2.keys())\n            raise AssertionError(\"Primary repodata have different package sets.\")\n        # Compare packages by name\n        if prim1.packages() != prim2.packages():\n            print_lines_diff(prim1.packages(), prim2.packages())\n            raise AssertionError(\"Primary repodata have different sets of package names.\")\n        diff = prim1.diff(prim2)\n        if diff:\n            raise AssertionError(\"Primary repodata are different.\\n\"\n                                 \"Difference: %s\" % (diff))\n        diff = flist1.diff(flist2)\n        if diff:\n            raise AssertionError(\"Filelists repodata are different.\\n\"\n                                 \"Difference: %s\" % (diff))\n        diff = oth1.diff(oth2)\n        if diff:\n            raise AssertionError(\"Other repodata are different.\\n\"\n                                 \"Difference: %s\" % (diff))\n@behave.step(\"repodata \\\"{path}\\\" are consistent\")\ndef repodata_are_consistent(context, path):\n    repopath = os.path.join(context.tempdir_manager.tempdir, path.lstrip('/'))\n    tmpdir = tempfile.mkdtemp()\n    prim_path_sqlite = None\n    prim_zck_path = None\n    # REPOMD\n    md_path = os.path.join(repopath, \"repomd.xml\")\n    if not os.path.exists(md_path):\n        raise AssertionError(\"Error: repomd.xml is missing (%s)\" % md_path)\n    repomd = xml_parse_repodata(md_path, \"{%s}data\" % ns[\"md_ns\"], \"repomd\")\n    for key in repomd.keys():\n        item = repomd.items[key]\n        if not item.location_href:\n            continue\n        # Remove /repodata/ from path\n        basename = os.path.basename(item.location_href)\n        p = os.path.join(repopath, basename.lstrip('/'))\n        if not os.path.isfile(p):\n            raise AssertionError(\"Error: repomd.xml contains: \\\"%s\\\"\"\n                                 \"but it is not present in %s\" % (p, repopath))\n        decompressed_p = decompress_file_by_extension_to_dir(p, tmpdir)\n        if item.name == \"primary_db\":\n            prim_path_sqlite = decompressed_p\n        elif item.name == \"filelists_db\":\n            filelists_path_sqlite = decompressed_p\n        elif item.name == \"other_db\":\n            other_path_sqlite = decompressed_p\n        elif item.name == \"primary\":\n            prim_path = decompressed_p\n        elif item.name == \"filelists\":\n            filelists_path = decompressed_p\n        elif item.name == \"other\":\n            other_path = decompressed_p\n        elif item.name == \"primary_zck\":\n            prim_zck_path = decompressed_p\n        elif item.name == \"filelists_zck\":\n            filelists_zck_path = decompressed_p\n        elif item.name == \"other_zck\":\n            other_zck_path = decompressed_p\n        else:\n            # Skip unsupported updateinfo, comps, etc..\n            # TODO(amatej): we could technically check for updateinfo,\n            # comps, modules and even verify some stuff\n            continue\n        verify_repomd_item_with_file(item, p, decompressed_p)\n    # XML\n    primary = xml_parse_repodata(prim_path, \"{%s}package\" % ns[\"pri_ns\"], \"primary\")\n    filelists = xml_parse_repodata(filelists_path, \"{%s}package\" % ns[\"fil_ns\"], \"filelists\")\n    other = xml_parse_repodata(other_path, \"{%s}package\" % ns[\"oth_ns\"], \"other\")\n    keys_do_not_differ(primary, filelists, other)\n    # SQLITE\n    if prim_path_sqlite: # All three sqlite files have to be present at the same time\n        primary_sql = load_sqlite(prim_path_sqlite, \"primary\")\n        filelists_sql = load_sqlite(filelists_path_sqlite, \"filelists\")\n        other_sql = load_sqlite(other_path_sqlite, \"other\")\n        keys_do_not_differ(primary_sql, filelists_sql, other_sql)\n        repodata_do_not_differ(primary, primary_sql, filelists, filelists_sql, other, other_sql)\n    # ZCK\n    if prim_zck_path: # All three zck files have to be present at the same time\n        primary_zck = xml_parse_repodata(prim_zck_path, \"{%s}package\" % ns[\"pri_ns\"], \"primary\")\n        filelists_zck = xml_parse_repodata(filelists_zck_path, \"{%s}package\" % ns[\"fil_ns\"], \"filelists\")\n        other_zck = xml_parse_repodata(other_zck_path, \"{%s}package\" % ns[\"oth_ns\"], \"other\")\n        keys_do_not_differ(primary_zck, filelists_zck, other_zck)\n        repodata_do_not_differ(primary, primary_zck, filelists, filelists_zck, other, other_zck)\n    return\n@behave.step(\"repodata in \\\"{path}\\\" is\")\ndef repodata_in_path_is(context, path):\n    check_context_table(context, [\"Type\", \"File\", \"Checksum Type\", \"Compression Type\"])\n    # repomd.xml is mandatory in this form\n    repomd_filepath = os.path.join(context.tempdir_manager.tempdir, path.lstrip(\"/\"), \"repomd.xml\")\n    if not os.path.exists(repomd_filepath):\n        raise AssertionError(\"Error: repomd.xml is missing (%s)\" % repomd_filepath)\n    files = os.listdir(os.path.dirname(repomd_filepath))\n    files.remove(\"repomd.xml\")\n    for repodata_type, repodata_file, checksum_type, compression_type in context.table:\n        checksum_regex = get_checksum_regex(checksum_type)\n        filename_parts = repodata_file.split(\"-\")\n        if (len(filename_parts) == 1):\n            pass # Simple-md-filenames\n        elif (filename_parts[0] == \"${checksum}\"):\n            filename_parts[0] = Template(filename_parts[0]).substitute(checksum=checksum_regex)\n        else:\n            if checksum_regex:\n                if not (re.compile(checksum_regex + \"$\")).match(filename_parts[0]):\n                    raise ValueError(\"Checksum type: \" + checksum_type + \" does not\"\n                                     \" match to File: \" + repodata_file)\n        filepath = os.path.join(context.tempdir_manager.tempdir, path.lstrip(\"/\"), '-'.join(filename_parts))\n        # Final path to file, even when specified as regex\n        # At the same time verifies that file exists\n        filepath = regex_find_file_from_list(filepath, files)\n        files.remove(os.path.basename(filepath))\n        # Verify checksum\n        checksum = checksum_of_file(filepath, checksum_type)\n        if (checksum_regex):\n            filename_parts_final = os.path.basename(filepath).split(\"-\")\n            if (len(filename_parts_final) == 1):\n                pass # Simple-md-filenames\n            elif not checksum == filename_parts_final[0]:\n                raise ValueError(\"Checksum of File: \" + repodata_file + \" doesn't match checksum\"\n                                 \" in the name of the File: \" + os.path.basename(filepath))\n        # Verify compression\n        compression_suffix = get_compression_suffix(compression_type)\n        if compression_suffix:\n            if not filepath.endswith(compression_suffix):\n                raise ValueError(\"Compression type: \" + compression_type + \" does\"\n                                 \" not match suffix of File: \" + repodata_file)\n        try:\n            tmp = next(decompression_iter(filepath, compression_type, blocksize=100))\n            if compression_suffix and filepath.endswith(compression_suffix):\n                filepath = filepath[:-(len(compression_suffix))]\n            if tmp:\n                if filepath.endswith(\".sqlite\"):\n                    assert(\"SQLite\" in str(tmp))\n                elif filepath.endswith(\".xml\"):\n                    assert(\"xml\" in str(tmp))\n                elif filepath.endswith(\".yaml\"):\n                    # Assume all yaml files are modulemd documents\n                    assert(\"modulemd\" in str(tmp))\n                elif filepath.endswith(\".txt\"):\n                    pass\n                else:\n                    raise\n        except (AssertionError, IOError):\n            raise AssertionError(\"Cannot decompress File: \" + repodata_file + \" using\"\n                                 \" compression type: \" + compression_type)\n    if len(files) > 0:\n        raise AssertionError(\"repodata directory contains additional metadata files:\\n{0}\".format('\\n'.join(files)))\n@behave.step(\"primary in \\\"{path}\\\" has only packages\")\ndef primary_in_path_contains_only_packages(context, path):\n    check_context_table(context, [\"Name\", \"Epoch\", \"Version\", \"Release\", \"Architecture\"])\n    filepath = os.path.join(context.tempdir_manager.tempdir, path.lstrip('/'), \"*-primary.xml.*\")\n    primary_filepath = glob.glob(filepath)[0]\n    primary = xml_parse_repodata(primary_filepath, \"{%s}package\" % ns[\"pri_ns\"], \"primary\")\n    for name, epoch, version, release, architecture in context.table:\n        nevra = build_nevra(name, epoch, version, release, architecture)\n        found = False\n        for key in primary.keys():\n            pkg = primary.items[key]\n            if (nevra == pkg.nevra()):\n                del primary.items[key]\n                found = True\n                break\n        if not found:\n            print(\"primary.xml yet unmatched packages:\")\n            for key in primary.keys():\n                pkg = primary.items[key]\n                print(\"\\t\" + build_nevra(pkg.name, pkg.epoch, pkg.version, pkg.release, pkg.arch))\n            raise AssertionError(\"Package \" + nevra + \" not found\")\n    if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg.epoch, pkg.version, pkg.release, pkg.arch))\n        raise AssertionError(\"Additional packages in primary.xml\")\n@behave.step(\"primary in \\\"{path}\\\" doesn't have any packages\")\ndef primary_in_path_doesnt_contain_any_packages(context, path):\n    filepath = os.path.join(context.tempdir_manager.tempdir, path.lstrip('/'), \"*-primary.xml.*\")\n    primary_filepath = glob.glob(filepath)[0]\n    primary = xml_parse_repodata(primary_filepath, \"{%s}package\" % ns[\"pri_ns\"], \"primary\")\n", "answers": ["    if (len(primary.keys()) > 0):"], "length": 918, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "fd3a1a817ea75abb6d8f7040fcfb3ee43dbfe07e4e6d9408"}
{"input": "", "context": "# This module should be kept compatible with Python 2.1.\n__revision__ = \"$Id: install_lib.py 4802 2007-01-23 21:26:03Z vapier $\"\nimport sys, os, string\nfrom types import IntType\nfrom distutils.core import Command\nfrom distutils.errors import DistutilsOptionError\n# Extension for Python source files.\nPYTHON_SOURCE_EXTENSION = os.extsep + \"py\"\nclass install_lib (Command):\n    description = \"install all Python modules (extensions and pure Python)\"\n    # The byte-compilation options are a tad confusing.  Here are the\n    # possible scenarios:\n    #   1) no compilation at all (--no-compile --no-optimize)\n    #   2) compile .pyc only (--compile --no-optimize; default)\n    #   3) compile .pyc and \"level 1\" .pyo (--compile --optimize)\n    #   4) compile \"level 1\" .pyo only (--no-compile --optimize)\n    #   5) compile .pyc and \"level 2\" .pyo (--compile --optimize-more)\n    #   6) compile \"level 2\" .pyo only (--no-compile --optimize-more)\n    #\n    # The UI for this is two option, 'compile' and 'optimize'.\n    # 'compile' is strictly boolean, and only decides whether to\n    # generate .pyc files.  'optimize' is three-way (0, 1, or 2), and\n    # decides both whether to generate .pyo files and what level of\n    # optimization to use.\n    user_options = [\n        ('install-dir=', 'd', \"directory to install to\"),\n        ('build-dir=','b', \"build directory (where to install from)\"),\n        ('force', 'f', \"force installation (overwrite existing files)\"),\n        ('compile', 'c', \"compile .py to .pyc [default]\"),\n        ('no-compile', None, \"don't compile .py files\"),\n        ('optimize=', 'O',\n         \"also compile with optimization: -O1 for \\\"python -O\\\", \"\n         \"-O2 for \\\"python -OO\\\", and -O0 to disable [default: -O0]\"),\n        ('skip-build', None, \"skip the build steps\"),\n        ]\n    boolean_options = ['force', 'compile', 'skip-build']\n    negative_opt = {'no-compile' : 'compile'}\n    def initialize_options (self):\n        # let the 'install' command dictate our installation directory\n        self.install_dir = None\n        self.build_dir = None\n        self.force = 0\n        self.compile = None\n        self.optimize = None\n        self.skip_build = None\n    def finalize_options (self):\n        # Get all the information we need to install pure Python modules\n        # from the umbrella 'install' command -- build (source) directory,\n        # install (target) directory, and whether to compile .py files.\n        self.set_undefined_options('install',\n                                   ('build_lib', 'build_dir'),\n                                   ('install_lib', 'install_dir'),\n                                   ('force', 'force'),\n                                   ('compile', 'compile'),\n                                   ('optimize', 'optimize'),\n                                   ('skip_build', 'skip_build'),\n                                  )\n        if self.compile is None:\n            self.compile = 1\n        if self.optimize is None:\n            self.optimize = 0\n        if type(self.optimize) is not IntType:\n            try:\n                self.optimize = int(self.optimize)\n                assert 0 <= self.optimize <= 2\n            except (ValueError, AssertionError):\n                raise DistutilsOptionError, \"optimize must be 0, 1, or 2\"\n    def run (self):\n        # Make sure we have built everything we need first\n        self.build()\n        # Install everything: simply dump the entire contents of the build\n        # directory to the installation directory (that's the beauty of\n        # having a build directory!)\n        outfiles = self.install()\n        # (Optionally) compile .py to .pyc\n        if outfiles is not None and self.distribution.has_pure_modules():\n            self.byte_compile(outfiles)\n    # run ()\n    # -- Top-level worker functions ------------------------------------\n    # (called from 'run()')\n    def build (self):\n        if not self.skip_build:\n            if self.distribution.has_pure_modules():\n                self.run_command('build_py')\n            if self.distribution.has_ext_modules():\n                self.run_command('build_ext')\n    def install (self):\n        if os.path.isdir(self.build_dir):\n            outfiles = self.copy_tree(self.build_dir, self.install_dir)\n        else:\n            self.warn(\"'%s' does not exist -- no Python modules to install\" %\n                      self.build_dir)\n            return\n        return outfiles\n    def byte_compile (self, files):\n        from distutils.util import byte_compile\n        # Get the \"--root\" directory supplied to the \"install\" command,\n        # and use it as a prefix to strip off the purported filename\n        # encoded in bytecode files.  This is far from complete, but it\n        # should at least generate usable bytecode in RPM distributions.\n        install_root = self.get_finalized_command('install').root\n        if self.compile:\n            byte_compile(files, optimize=0,\n                         force=self.force, prefix=install_root,\n                         dry_run=self.dry_run)\n        if self.optimize > 0:\n            byte_compile(files, optimize=self.optimize,\n                         force=self.force, prefix=install_root,\n                         verbose=self.verbose, dry_run=self.dry_run)\n    # -- Utility methods -----------------------------------------------\n    def _mutate_outputs (self, has_any, build_cmd, cmd_option, output_dir):\n        if not has_any:\n            return []\n        build_cmd = self.get_finalized_command(build_cmd)\n        build_files = build_cmd.get_outputs()\n        build_dir = getattr(build_cmd, cmd_option)\n        prefix_len = len(build_dir) + len(os.sep)\n        outputs = []\n        for file in build_files:\n            outputs.append(os.path.join(output_dir, file[prefix_len:]))\n        return outputs\n    # _mutate_outputs ()\n    def _bytecode_filenames (self, py_filenames):\n        bytecode_files = []\n        for py_file in py_filenames:\n            # Since build_py handles package data installation, the\n            # list of outputs can contain more than just .py files.\n            # Make sure we only report bytecode for the .py files.\n            ext = os.path.splitext(os.path.normcase(py_file))[1]\n            if ext != PYTHON_SOURCE_EXTENSION:\n                continue\n            if self.compile:\n                bytecode_files.append(py_file + \"c\")\n            if self.optimize > 0:\n                bytecode_files.append(py_file + \"o\")\n        return bytecode_files\n    # -- External interface --------------------------------------------\n    # (called by outsiders)\n    def get_outputs (self):\n        \"\"\"Return the list of files that would be installed if this command\n        were actually run.  Not affected by the \"dry-run\" flag or whether\n        modules have actually been built yet.\n        \"\"\"\n        pure_outputs = \\\n            self._mutate_outputs(self.distribution.has_pure_modules(),\n                                 'build_py', 'build_lib',\n                                 self.install_dir)\n        if self.compile:\n            bytecode_outputs = self._bytecode_filenames(pure_outputs)\n        else:\n            bytecode_outputs = []\n        ext_outputs = \\\n            self._mutate_outputs(self.distribution.has_ext_modules(),\n                                 'build_ext', 'build_lib',\n                                 self.install_dir)\n        return pure_outputs + bytecode_outputs + ext_outputs\n    # get_outputs ()\n    def get_inputs (self):\n        \"\"\"Get the list of files that are input to this command, ie. the\n        files that get installed as they are named in the build tree.\n        The files in this list correspond one-to-one to the output\n        filenames returned by 'get_outputs()'.\n        \"\"\"\n        inputs = []\n        if self.distribution.has_pure_modules():\n            build_py = self.get_finalized_command('build_py')\n            inputs.extend(build_py.get_outputs())\n        if self.distribution.has_ext_modules():\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "length": 791, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "b6029cffa6f017e686e2303165fc1ebc437fad4e837e5e05"}
{"input": "", "context": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.Common;\nusing System.Text;\nusing NHibernate.AdoNet;\nusing NHibernate.Cache;\nusing NHibernate.Cache.Entry;\nusing NHibernate.Dialect.Lock;\nusing NHibernate.Engine;\nusing NHibernate.Exceptions;\nusing NHibernate.Id;\nusing NHibernate.Id.Insert;\nusing NHibernate.Impl;\nusing NHibernate.Intercept;\nusing NHibernate.Loader.Entity;\nusing NHibernate.Mapping;\nusing NHibernate.Metadata;\nusing NHibernate.Properties;\nusing NHibernate.SqlCommand;\nusing NHibernate.Tuple;\nusing NHibernate.Tuple.Entity;\nusing NHibernate.Type;\nusing NHibernate.Util;\nusing Array=System.Array;\nusing Property=NHibernate.Mapping.Property;\nusing NHibernate.SqlTypes;\nusing System.Linq;\nnamespace NHibernate.Persister.Entity\n{\n\t/// <summary>\n\t/// Superclass for built-in mapping strategies. Implements functionalty common to both mapping\n\t/// strategies\n\t/// </summary>\n\t/// <remarks>\n\t/// May be considered an immutable view of the mapping object\n\t/// </remarks>\n\tpublic abstract class AbstractEntityPersister : IOuterJoinLoadable, IQueryable, IClassMetadata, IUniqueKeyLoadable, ISqlLoadable, ILazyPropertyInitializer, IPostInsertIdentityPersister, ILockable\n\t{\n\t\t#region InclusionChecker\n\t\tprotected internal interface IInclusionChecker\n\t\t{\n\t\t\tbool IncludeProperty(int propertyNumber);\n\t\t}\n\t\tprivate class NoneInclusionChecker : IInclusionChecker\n\t\t{\n\t\t\tprivate readonly ValueInclusion[] inclusions;\n\t\t\tpublic NoneInclusionChecker(ValueInclusion[] inclusions)\n\t\t\t{\n\t\t\t\tthis.inclusions = inclusions;\n\t\t\t}\n\t\t\t// TODO : currently we really do not handle ValueInclusion.PARTIAL...\n\t\t\t// ValueInclusion.PARTIAL would indicate parts of a component need to\n\t\t\t// be included in the select; currently we then just render the entire\n\t\t\t// component into the select clause in that case.\n\t\t\tpublic bool IncludeProperty(int propertyNumber)\n\t\t\t{\n\t\t\t\treturn inclusions[propertyNumber] != ValueInclusion.None;\n\t\t\t}\n\t\t}\n\t\tprivate class FullInclusionChecker : IInclusionChecker\n\t\t{\n\t\t\tprivate readonly bool[] includeProperty;\n\t\t\tpublic FullInclusionChecker(bool[] includeProperty)\n\t\t\t{\n\t\t\t\tthis.includeProperty = includeProperty;\n\t\t\t}\n\t\t\tpublic bool IncludeProperty(int propertyNumber)\n\t\t\t{\n\t\t\t\treturn includeProperty[propertyNumber];\n\t\t\t}\n\t\t}\n\t\t#endregion\n\t\tprivate class GeneratedIdentifierBinder : IBinder\n\t\t{\n\t\t\tprivate readonly object[] fields;\n\t\t\tprivate readonly bool[] notNull;\n\t\t\tprivate readonly ISessionImplementor session;\n\t\t\tprivate readonly object entity;\n\t\t\tprivate readonly AbstractEntityPersister entityPersister;\n\t\t\tpublic GeneratedIdentifierBinder(object[] fields, bool[] notNull, ISessionImplementor session, object entity, AbstractEntityPersister entityPersister)\n\t\t\t{\n\t\t\t\tthis.fields = fields;\n\t\t\t\tthis.notNull = notNull;\n\t\t\t\tthis.session = session;\n\t\t\t\tthis.entity = entity;\n\t\t\t\tthis.entityPersister = entityPersister;\n\t\t\t}\n\t\t\tpublic object Entity\n\t\t\t{\n\t\t\t\tget { return entity; }\n\t\t\t}\n\t\t\tpublic virtual void BindValues(DbCommand ps)\n\t\t\t{\n\t\t\t\tentityPersister.Dehydrate(null, fields, notNull, entityPersister.propertyColumnInsertable, 0, ps, session);\n\t\t\t}\n\t\t}\n\t\tprivate static readonly IInternalLogger log = LoggerProvider.LoggerFor(typeof(AbstractEntityPersister));\n\t\tpublic const string EntityClass = \"class\";\n\t\tprotected const string Discriminator_Alias = \"clazz_\";\n\t\tprivate readonly ISessionFactoryImplementor factory;\n\t\tprivate readonly ICacheConcurrencyStrategy cache;\n\t\tprivate readonly bool isLazyPropertiesCacheable;\n\t\tprivate readonly ICacheEntryStructure cacheEntryStructure;\n\t\tprivate readonly EntityMetamodel entityMetamodel;\n\t\tprivate readonly Dictionary<System.Type, string> entityNameBySubclass = new Dictionary<System.Type, string>();\n\t\tprivate readonly string[] rootTableKeyColumnNames;\n\t\tprivate readonly string[] identifierAliases;\n\t\tprivate readonly int identifierColumnSpan;\n\t\tprivate readonly string versionColumnName;\n\t\tprivate readonly bool hasFormulaProperties;\n\t\tprivate readonly int batchSize;\n\t\tprivate readonly bool hasSubselectLoadableCollections;\n\t\tprotected internal string rowIdName;\n\t\tprivate readonly ISet<string> lazyProperties;\n\t\tprivate readonly string sqlWhereString;\n\t\tprivate readonly string sqlWhereStringTemplate;\n\t\t#region Information about properties of this class\n\t\t//including inherited properties\n\t\t//(only really needed for updatable/insertable properties)\n\t\tprivate readonly int[] propertyColumnSpans;\n\t\t// the names of the columns for the property\n\t\t// the array is indexed as propertyColumnNames[propertyIndex][columnIndex] = \"columnName\"\n\t\tprivate readonly string[] propertySubclassNames;\n\t\tprivate readonly string[][] propertyColumnAliases;\n\t\tprivate readonly string[][] propertyColumnNames;\n\t\t// the alias names for the columns of the property.  This is used in the AS portion for \n\t\t// selecting a column.  It is indexed the same as propertyColumnNames\n\t\t// private readonly string[ ] propertyFormulaTemplates;\n\t\tprivate readonly string[][] propertyColumnFormulaTemplates;\n\t\tprivate readonly bool[][] propertyColumnUpdateable;\n\t\tprivate readonly bool[][] propertyColumnInsertable;\n\t\tprivate readonly bool[] propertyUniqueness;\n\t\tprivate readonly bool[] propertySelectable;\n\t\t#endregion\n\t\t#region Information about lazy properties of this class\n\t\tprivate readonly string[] lazyPropertyNames;\n\t\tprivate readonly int[] lazyPropertyNumbers;\n\t\tprivate readonly IType[] lazyPropertyTypes;\n\t\tprivate readonly string[][] lazyPropertyColumnAliases;\n\t\t#endregion\n\t\t#region Information about all properties in class hierarchy\n\t\tprivate readonly string[] subclassPropertyNameClosure;\n\t\tprivate readonly string[] subclassPropertySubclassNameClosure;\n\t\tprivate readonly IType[] subclassPropertyTypeClosure;\n\t\tprivate readonly string[][] subclassPropertyFormulaTemplateClosure;\n\t\tprivate readonly string[][] subclassPropertyColumnNameClosure;\n\t\tprivate readonly FetchMode[] subclassPropertyFetchModeClosure;\n\t\tprivate readonly bool[] subclassPropertyNullabilityClosure;\n\t\tprotected bool[] propertyDefinedOnSubclass;\n\t\tprivate readonly int[][] subclassPropertyColumnNumberClosure;\n\t\tprivate readonly int[][] subclassPropertyFormulaNumberClosure;\n\t\tprivate readonly CascadeStyle[] subclassPropertyCascadeStyleClosure;\n\t\t#endregion\n\t\t#region Information about all columns/formulas in class hierarchy\n\t\tprivate readonly string[] subclassColumnClosure;\n\t\tprivate readonly bool[] subclassColumnLazyClosure;\n\t\tprivate readonly string[] subclassColumnAliasClosure;\n\t\tprivate readonly bool[] subclassColumnSelectableClosure;\n\t\tprivate readonly string[] subclassFormulaClosure;\n\t\tprivate readonly string[] subclassFormulaTemplateClosure;\n\t\tprivate readonly string[] subclassFormulaAliasClosure;\n\t\tprivate readonly bool[] subclassFormulaLazyClosure;\n\t\t#endregion\n\t\t#region Dynamic filters attached to the class-level\n\t\tprivate readonly FilterHelper filterHelper;\n\t\t#endregion\n\t\tprivate readonly Dictionary<string, EntityLoader> uniqueKeyLoaders = new Dictionary<string, EntityLoader>();\n\t\tprivate readonly Dictionary<LockMode, ILockingStrategy> lockers = new Dictionary<LockMode, ILockingStrategy>();\n\t\tprivate readonly Dictionary<string, IUniqueEntityLoader> loaders = new Dictionary<string, IUniqueEntityLoader>();\n\t\t#region SQL strings\n\t\tprivate SqlString sqlVersionSelectString;\n\t\tprivate SqlString sqlSnapshotSelectString;\n\t\tprivate SqlString sqlLazySelectString;\n\t\tprivate SqlCommandInfo sqlIdentityInsertString;\n\t\tprivate SqlCommandInfo sqlUpdateByRowIdString;\n\t\tprivate SqlCommandInfo sqlLazyUpdateByRowIdString;\n\t\tprivate SqlCommandInfo[] sqlDeleteStrings;\n\t\tprivate SqlCommandInfo[] sqlInsertStrings;\n\t\tprivate SqlCommandInfo[] sqlUpdateStrings;\n\t\tprivate SqlCommandInfo[] sqlLazyUpdateStrings;\n\t\tprivate SqlString sqlInsertGeneratedValuesSelectString;\n\t\tprivate SqlString sqlUpdateGeneratedValuesSelectString;\n\t\tprivate string identitySelectString;\n\t\t#endregion\n\t\t#region Custom SQL\n\t\tprotected internal bool[] insertCallable;\n\t\tprotected internal bool[] updateCallable;\n\t\tprotected internal bool[] deleteCallable;\n\t\tprotected internal SqlString[] customSQLInsert;\n\t\tprotected internal SqlString[] customSQLUpdate;\n\t\tprotected internal SqlString[] customSQLDelete;\n\t\tprotected internal ExecuteUpdateResultCheckStyle[] insertResultCheckStyles;\n\t\tprotected internal ExecuteUpdateResultCheckStyle[] updateResultCheckStyles;\n\t\tprotected internal ExecuteUpdateResultCheckStyle[] deleteResultCheckStyles;\n\t\t#endregion\n\t\tprivate IInsertGeneratedIdentifierDelegate identityDelegate;\n\t\tprivate bool[] tableHasColumns;\n\t\tprivate readonly string loaderName;\n\t\tprivate IUniqueEntityLoader queryLoader;\n\t\tprivate readonly string temporaryIdTableName;\n\t\tprivate readonly string temporaryIdTableDDL;\n\t\tprivate readonly Dictionary<string, string[]> subclassPropertyAliases = new Dictionary<string, string[]>();\n\t\tprivate readonly Dictionary<string, string[]> subclassPropertyColumnNames = new Dictionary<string, string[]>();\n\t\tprotected readonly BasicEntityPropertyMapping propertyMapping;\n\t\tprotected AbstractEntityPersister(PersistentClass persistentClass, ICacheConcurrencyStrategy cache,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tISessionFactoryImplementor factory)\n\t\t{\n\t\t\tthis.factory = factory;\n\t\t\tthis.cache = cache;\n\t\t\tisLazyPropertiesCacheable = persistentClass.IsLazyPropertiesCacheable;\n\t\t\tcacheEntryStructure = factory.Settings.IsStructuredCacheEntriesEnabled\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? (ICacheEntryStructure)new StructuredCacheEntry(this)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: (ICacheEntryStructure)new UnstructuredCacheEntry();\n\t\t\tentityMetamodel = new EntityMetamodel(persistentClass, factory);\n\t\t\tif (persistentClass.HasPocoRepresentation)\n\t\t\t{\n\t\t\t\t//TODO: this is currently specific to pojos, but need to be available for all entity-modes\n\t\t\t\tforeach (Subclass subclass in persistentClass.SubclassIterator)\n\t\t\t\t{\n\t\t\t\t\tentityNameBySubclass[subclass.MappedClass] = subclass.EntityName;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbatchSize = persistentClass.BatchSize ?? factory.Settings.DefaultBatchFetchSize;\n\t\t\thasSubselectLoadableCollections = persistentClass.HasSubselectLoadableCollections;\n\t\t\tpropertyMapping = new BasicEntityPropertyMapping(this);\n\t\t\t#region IDENTIFIER\n\t\t\tidentifierColumnSpan = persistentClass.Identifier.ColumnSpan;\n\t\t\trootTableKeyColumnNames = new string[identifierColumnSpan];\n\t\t\tidentifierAliases = new string[identifierColumnSpan];\n\t\t\trowIdName = persistentClass.RootTable.RowId;\n\t\t\tloaderName = persistentClass.LoaderName;\n\t\t\t// TODO NH: Not safe cast to Column\n\t\t\tint i = 0;\n\t\t\tforeach (Column col in persistentClass.Identifier.ColumnIterator)\n\t\t\t{\n\t\t\t\trootTableKeyColumnNames[i] = col.GetQuotedName(factory.Dialect);\n\t\t\t\tidentifierAliases[i] = col.GetAlias(factory.Dialect, persistentClass.RootTable);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\t#endregion\n\t\t\t#region VERSION\n\t\t\tif (persistentClass.IsVersioned)\n\t\t\t{\n\t\t\t\tforeach (Column col in persistentClass.Version.ColumnIterator)\n\t\t\t\t{\n\t\t\t\t\tversionColumnName = col.GetQuotedName(factory.Dialect);\n\t\t\t\t\tbreak; //only happens once\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tversionColumnName = null;\n\t\t\t}\n\t\t\t#endregion\n\t\t\t#region WHERE STRING\n\t\t\tsqlWhereString = !string.IsNullOrEmpty(persistentClass.Where) ? \"( \" + persistentClass.Where + \") \" : null;\n\t\t\tsqlWhereStringTemplate = sqlWhereString == null\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: Template.RenderWhereStringTemplate(sqlWhereString, factory.Dialect,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t factory.SQLFunctionRegistry);\n\t\t\t#endregion\n\t\t\t#region PROPERTIES\n\t\t\t// NH: see consistence with the implementation on EntityMetamodel where we are disabling lazy-properties for no lazy entities\n\t\t\tbool lazyAvailable = IsInstrumented && entityMetamodel.IsLazy;\n\t\t\tint hydrateSpan = entityMetamodel.PropertySpan;\n\t\t\tpropertyColumnSpans = new int[hydrateSpan];\n\t\t\tpropertySubclassNames = new string[hydrateSpan];\n\t\t\tpropertyColumnAliases = new string[hydrateSpan][];\n\t\t\tpropertyColumnNames = new string[hydrateSpan][];\n\t\t\tpropertyColumnFormulaTemplates = new string[hydrateSpan][];\n\t\t\tpropertyUniqueness = new bool[hydrateSpan];\n\t\t\tpropertySelectable = new bool[hydrateSpan];\n\t\t\tpropertyColumnUpdateable = new bool[hydrateSpan][];\n\t\t\tpropertyColumnInsertable = new bool[hydrateSpan][];\n\t\t\tvar thisClassProperties = new HashSet<Property>();\n\t\t\tlazyProperties = new HashSet<string>();\n\t\t\tList<string> lazyNames = new List<string>();\n\t\t\tList<int> lazyNumbers = new List<int>();\n\t\t\tList<IType> lazyTypes = new List<IType>();\n\t\t\tList<string[]> lazyColAliases = new List<string[]>();\n\t\t\ti = 0;\n\t\t\tbool foundFormula = false;\n\t\t\tforeach (Property prop in persistentClass.PropertyClosureIterator)\n\t\t\t{\n\t\t\t\tthisClassProperties.Add(prop);\n\t\t\t\tint span = prop.ColumnSpan;\n\t\t\t\tpropertyColumnSpans[i] = span;\n\t\t\t\tpropertySubclassNames[i] = prop.PersistentClass.EntityName;\n\t\t\t\tstring[] colNames = new string[span];\n\t\t\t\tstring[] colAliases = new string[span];\n\t\t\t\tstring[] templates = new string[span];\n\t\t\t\tint k = 0;\n\t\t\t\tforeach (ISelectable thing in prop.ColumnIterator)\n\t\t\t\t{\n\t\t\t\t\tcolAliases[k] = thing.GetAlias(factory.Dialect, prop.Value.Table);\n\t\t\t\t\tif (thing.IsFormula)\n\t\t\t\t\t{\n\t\t\t\t\t\tfoundFormula = true;\n\t\t\t\t\t\ttemplates[k] = thing.GetTemplate(factory.Dialect, factory.SQLFunctionRegistry);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcolNames[k] = thing.GetTemplate(factory.Dialect, factory.SQLFunctionRegistry);\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\tpropertyColumnNames[i] = colNames;\n\t\t\t\tpropertyColumnFormulaTemplates[i] = templates;\n\t\t\t\tpropertyColumnAliases[i] = colAliases;\n\t\t\t\tif (lazyAvailable && prop.IsLazy)\n\t\t\t\t{\n\t\t\t\t\tlazyProperties.Add(prop.Name);\n\t\t\t\t\tlazyNames.Add(prop.Name);\n\t\t\t\t\tlazyNumbers.Add(i);\n\t\t\t\t\tlazyTypes.Add(prop.Value.Type);\n\t\t\t\t\tlazyColAliases.Add(colAliases);\n\t\t\t\t}\n\t\t\t\tpropertyColumnUpdateable[i] = prop.Value.ColumnUpdateability;\n\t\t\t\tpropertyColumnInsertable[i] = prop.Value.ColumnInsertability;\n\t\t\t\tpropertySelectable[i] = prop.IsSelectable;\n\t\t\t\tpropertyUniqueness[i] = prop.Value.IsAlternateUniqueKey;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\thasFormulaProperties = foundFormula;\n\t\t\tlazyPropertyColumnAliases = lazyColAliases.ToArray();\n\t\t\tlazyPropertyNames = lazyNames.ToArray();\n\t\t\tlazyPropertyNumbers = lazyNumbers.ToArray();\n\t\t\tlazyPropertyTypes = lazyTypes.ToArray();\n\t\t\t#endregion\n\t\t\t#region SUBCLASS PROPERTY CLOSURE\n\t\t\tList<string> columns = new List<string>();\n\t\t\tList<bool> columnsLazy = new List<bool>();\n\t\t\tList<string> aliases = new List<string>();\n\t\t\tList<string> formulas = new List<string>();\n\t\t\tList<string> formulaAliases = new List<string>();\n\t\t\tList<string> formulaTemplates = new List<string>();\n\t\t\tList<bool> formulasLazy = new List<bool>();\n\t\t\tList<IType> types = new List<IType>();\n\t\t\tList<string> names = new List<string>();\n\t\t\tList<string> classes = new List<string>();\n\t\t\tList<string[]> templates2 = new List<string[]>();\n\t\t\tList<string[]> propColumns = new List<string[]>();\n\t\t\tList<FetchMode> joinedFetchesList = new List<FetchMode>();\n\t\t\tList<CascadeStyle> cascades = new List<CascadeStyle>();\n\t\t\tList<bool> definedBySubclass = new List<bool>();\n\t\t\tList<int[]> propColumnNumbers = new List<int[]>();\n\t\t\tList<int[]> propFormulaNumbers = new List<int[]>();\n\t\t\tList<bool> columnSelectables = new List<bool>();\n\t\t\tList<bool> propNullables = new List<bool>();\n\t\t\tforeach (Property prop in persistentClass.SubclassPropertyClosureIterator)\n\t\t\t{\n\t\t\t\tnames.Add(prop.Name);\n\t\t\t\tclasses.Add(prop.PersistentClass.EntityName);\n\t\t\t\tbool isDefinedBySubclass = !thisClassProperties.Contains(prop);\n\t\t\t\tdefinedBySubclass.Add(isDefinedBySubclass);\n\t\t\t\tpropNullables.Add(prop.IsOptional || isDefinedBySubclass); //TODO: is this completely correct?\n\t\t\t\ttypes.Add(prop.Type);\n\t\t\t\tstring[] cols = new string[prop.ColumnSpan];\n\t\t\t\tstring[] forms = new string[prop.ColumnSpan];\n\t\t\t\tint[] colnos = new int[prop.ColumnSpan];\n\t\t\t\tint[] formnos = new int[prop.ColumnSpan];\n\t\t\t\tint l = 0;\n\t\t\t\tbool lazy = prop.IsLazy && lazyAvailable;\n\t\t\t\tforeach (ISelectable thing in prop.ColumnIterator)\n\t\t\t\t{\n\t\t\t\t\tif (thing.IsFormula)\n\t\t\t\t\t{\n\t\t\t\t\t\tstring template = thing.GetTemplate(factory.Dialect, factory.SQLFunctionRegistry);\n\t\t\t\t\t\tformnos[l] = formulaTemplates.Count;\n\t\t\t\t\t\tcolnos[l] = -1;\n\t\t\t\t\t\tformulaTemplates.Add(template);\n\t\t\t\t\t\tforms[l] = template;\n\t\t\t\t\t\tformulas.Add(thing.GetText(factory.Dialect));\n\t\t\t\t\t\tformulaAliases.Add(thing.GetAlias(factory.Dialect));\n\t\t\t\t\t\tformulasLazy.Add(lazy);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstring colName = thing.GetTemplate(factory.Dialect, factory.SQLFunctionRegistry);\n\t\t\t\t\t\tcolnos[l] = columns.Count; //before add :-)\n\t\t\t\t\t\tformnos[l] = -1;\n\t\t\t\t\t\tcolumns.Add(colName);\n\t\t\t\t\t\tcols[l] = colName;\n\t\t\t\t\t\taliases.Add(thing.GetAlias(factory.Dialect, prop.Value.Table));\n\t\t\t\t\t\tcolumnsLazy.Add(lazy);\n\t\t\t\t\t\tcolumnSelectables.Add(prop.IsSelectable);\n\t\t\t\t\t}\n\t\t\t\t\tl++;\n\t\t\t\t}\n\t\t\t\tpropColumns.Add(cols);\n\t\t\t\ttemplates2.Add(forms);\n\t\t\t\tpropColumnNumbers.Add(colnos);\n\t\t\t\tpropFormulaNumbers.Add(formnos);\n\t\t\t\tjoinedFetchesList.Add(prop.Value.FetchMode);\n\t\t\t\tcascades.Add(prop.CascadeStyle);\n\t\t\t}\n\t\t\tsubclassColumnClosure = columns.ToArray();\n\t\t\tsubclassColumnAliasClosure = aliases.ToArray();\n\t\t\tsubclassColumnLazyClosure = columnsLazy.ToArray();\n\t\t\tsubclassColumnSelectableClosure = columnSelectables.ToArray();\n\t\t\tsubclassFormulaClosure = formulas.ToArray();\n\t\t\tsubclassFormulaTemplateClosure = formulaTemplates.ToArray();\n\t\t\tsubclassFormulaAliasClosure = formulaAliases.ToArray();\n\t\t\tsubclassFormulaLazyClosure = formulasLazy.ToArray();\n\t\t\tsubclassPropertyNameClosure = names.ToArray();\n\t\t\tsubclassPropertySubclassNameClosure = classes.ToArray();\n\t\t\tsubclassPropertyTypeClosure = types.ToArray();\n\t\t\tsubclassPropertyNullabilityClosure = propNullables.ToArray();\n\t\t\tsubclassPropertyFormulaTemplateClosure = templates2.ToArray();\n\t\t\tsubclassPropertyColumnNameClosure = propColumns.ToArray();\n\t\t\tsubclassPropertyColumnNumberClosure = propColumnNumbers.ToArray();\n\t\t\tsubclassPropertyFormulaNumberClosure = propFormulaNumbers.ToArray();\n\t\t\tsubclassPropertyCascadeStyleClosure = cascades.ToArray();\n\t\t\tsubclassPropertyFetchModeClosure = joinedFetchesList.ToArray();\n\t\t\tpropertyDefinedOnSubclass = definedBySubclass.ToArray();\n\t\t\t#endregion\n\t\t\t// Handle any filters applied to the class level\n\t\t\tfilterHelper = new FilterHelper(persistentClass.FilterMap, factory.Dialect, factory.SQLFunctionRegistry);\n\t\t\ttemporaryIdTableName = persistentClass.TemporaryIdTableName;\n\t\t\ttemporaryIdTableDDL = persistentClass.TemporaryIdTableDDL;\n\t\t}\n\t\tprotected abstract int[] SubclassColumnTableNumberClosure { get; }\n\t\tprotected abstract int[] SubclassFormulaTableNumberClosure { get; }\n\t\tprotected internal abstract int[] PropertyTableNumbersInSelect { get;}\n\t\tprotected internal abstract int[] PropertyTableNumbers { get;}\n\t\tpublic virtual string DiscriminatorColumnName\n\t\t{\n\t\t\tget { return Discriminator_Alias; }\n\t\t}\n\t\tprotected virtual string DiscriminatorFormulaTemplate\n\t\t{\n\t\t\tget { return null; }\n\t\t}\n\t\tpublic string[] RootTableKeyColumnNames\n\t\t{\n\t\t\tget { return rootTableKeyColumnNames; }\n\t\t}\n\t\tprotected internal SqlCommandInfo[] SQLUpdateByRowIdStrings\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (sqlUpdateByRowIdString == null)\n\t\t\t\t\tthrow new AssertionFailure(\"no update by row id\");\n\t\t\t\tSqlCommandInfo[] result = new SqlCommandInfo[TableSpan + 1];\n\t\t\t\tresult[0] = sqlUpdateByRowIdString;\n\t\t\t\tArray.Copy(sqlUpdateStrings, 0, result, 1, TableSpan);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\tprotected internal SqlCommandInfo[] SQLLazyUpdateByRowIdStrings\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (sqlLazyUpdateByRowIdString == null)\n\t\t\t\t\tthrow new AssertionFailure(\"no update by row id\");\n\t\t\t\tSqlCommandInfo[] result = new SqlCommandInfo[TableSpan];\n\t\t\t\tresult[0] = sqlLazyUpdateByRowIdString;\n\t\t\t\tfor (int i = 1; i < TableSpan; i++)\n\t\t\t\t\tresult[i] = sqlLazyUpdateStrings[i];\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\tprotected SqlString SQLSnapshotSelectString\n\t\t{\n\t\t\tget { return sqlSnapshotSelectString; }\n\t\t}\n\t\tprotected SqlString SQLLazySelectString\n\t\t{\n\t\t\tget { return sqlLazySelectString; }\n\t\t}\n\t\t/// <summary>\n\t\t/// The queries that delete rows by id (and version)\n\t\t/// </summary>\n\t\tprotected SqlCommandInfo[] SqlDeleteStrings\n\t\t{\n\t\t\tget { return sqlDeleteStrings; }\n\t\t}\n\t\t/// <summary>\n\t\t/// The queries that insert rows with a given id\n\t\t/// </summary>\n\t\tprotected SqlCommandInfo[] SqlInsertStrings\n\t\t{\n\t\t\tget { return sqlInsertStrings; }\n\t\t}\n\t\t/// <summary>\n\t\t/// The queries that update rows by id (and version)\n\t\t/// </summary>\n\t\tprotected SqlCommandInfo[] SqlUpdateStrings\n\t\t{\n\t\t\tget { return sqlUpdateStrings; }\n\t\t}\n\t\tprotected internal SqlCommandInfo[] SQLLazyUpdateStrings\n\t\t{\n\t\t\tget { return sqlLazyUpdateStrings; }\n\t\t}\n\t\t/// <summary> \n\t\t/// The query that inserts a row, letting the database generate an id \n\t\t/// </summary>\n\t\t/// <returns> The IDENTITY-based insertion query. </returns>\n\t\tprotected internal SqlCommandInfo SQLIdentityInsertString\n\t\t{\n\t\t\tget { return sqlIdentityInsertString; }\n\t\t}\n\t\tprotected SqlString VersionSelectString\n\t\t{\n\t\t\tget { return sqlVersionSelectString; }\n\t\t}\n\t\tpublic bool IsBatchable => OptimisticLockMode == Versioning.OptimisticLock.None ||\n\t\t                           (!IsVersioned && OptimisticLockMode == Versioning.OptimisticLock.Version) ||\n\t\t                           Factory.Settings.IsBatchVersionedDataEnabled;\n\t\tpublic virtual string[] QuerySpaces\n\t\t{\n\t\t\tget { return PropertySpaces; }\n\t\t}\n\t\tprotected internal ISet<string> LazyProperties\n\t\t{\n\t\t\tget { return lazyProperties; }\n\t\t}\n\t\tpublic bool IsBatchLoadable\n\t\t{\n\t\t\tget { return batchSize > 1; }\n\t\t}\n\t\tpublic virtual string[] IdentifierColumnNames\n\t\t{\n\t\t\tget { return rootTableKeyColumnNames; }\n\t\t}\n\t\tprotected int IdentifierColumnSpan\n\t\t{\n\t\t\tget { return identifierColumnSpan; }\n\t\t}\n\t\tpublic virtual string VersionColumnName\n\t\t{\n\t\t\tget { return versionColumnName; }\n\t\t}\n\t\tprotected internal string VersionedTableName\n\t\t{\n\t\t\tget { return GetTableName(0); }\n\t\t}\n\t\tprotected internal bool[] SubclassColumnLaziness\n\t\t{\n\t\t\tget { return subclassColumnLazyClosure; }\n\t\t}\n\t\tprotected internal bool[] SubclassFormulaLaziness\n\t\t{\n\t\t\tget { return subclassFormulaLazyClosure; }\n\t\t}\n\t\t/// <summary> \n\t\t/// We can't immediately add to the cache if we have formulas\n\t\t/// which must be evaluated, or if we have the possibility of\n\t\t/// two concurrent updates to the same item being merged on\n\t\t/// the database. This can happen if (a) the item is not\n\t\t/// versioned and either (b) we have dynamic update enabled\n\t\t/// or (c) we have multiple tables holding the state of the\n\t\t/// item.\n\t\t/// </summary>\n\t\tpublic bool IsCacheInvalidationRequired\n\t\t{\n\t\t\tget { return HasFormulaProperties || (!IsVersioned && (entityMetamodel.IsDynamicUpdate || TableSpan > 1)); }\n\t\t}\n\t\tpublic bool IsLazyPropertiesCacheable\n\t\t{\n\t\t\tget { return isLazyPropertiesCacheable; }\n\t\t}\n\t\tpublic virtual string RootTableName\n\t\t{\n\t\t\tget { return GetSubclassTableName(0); }\n\t\t}\n\t\tpublic virtual string[] RootTableIdentifierColumnNames\n\t\t{\n\t\t\tget { return RootTableKeyColumnNames; }\n\t\t}\n\t\tprotected internal string[] PropertySubclassNames\n\t\t{\n\t\t\tget { return propertySubclassNames; }\n\t\t}\n\t\tprotected string[][] SubclassPropertyFormulaTemplateClosure\n\t\t{\n\t\t\tget { return subclassPropertyFormulaTemplateClosure; }\n\t\t}\n\t\tprotected IType[] SubclassPropertyTypeClosure\n\t\t{\n\t\t\tget { return subclassPropertyTypeClosure; }\n\t\t}\n\t\tprotected string[][] SubclassPropertyColumnNameClosure\n\t\t{\n\t\t\tget { return subclassPropertyColumnNameClosure; }\n\t\t}\n\t\tprotected string[] SubclassPropertyNameClosure\n\t\t{\n\t\t\tget { return subclassPropertyNameClosure; }\n\t\t}\n\t\tprotected string[] SubclassPropertySubclassNameClosure\n\t\t{\n\t\t\tget { return subclassPropertySubclassNameClosure; }\n\t\t}\n\t\tprotected string[] SubclassColumnClosure\n\t\t{\n\t\t\tget { return subclassColumnClosure; }\n\t\t}\n\t\tprotected string[] SubclassColumnAliasClosure\n\t\t{\n\t\t\tget { return subclassColumnAliasClosure; }\n\t\t}\n\t\tprotected string[] SubclassFormulaClosure\n\t\t{\n\t\t\tget { return subclassFormulaClosure; }\n\t\t}\n\t\tprotected string[] SubclassFormulaTemplateClosure\n\t\t{\n\t\t\tget { return subclassFormulaTemplateClosure; }\n\t\t}\n\t\tprotected string[] SubclassFormulaAliasClosure\n\t\t{\n\t\t\tget { return subclassFormulaAliasClosure; }\n\t\t}\n\t\tpublic string IdentitySelectString\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (identitySelectString == null)\n\t\t\t\t\tidentitySelectString =\n\t\t\t\t\t\tFactory.Dialect.GetIdentitySelectString(GetTableName(0), GetKeyColumns(0)[0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIdentifierType.SqlTypes(Factory)[0].DbType);\n\t\t\t\treturn identitySelectString;\n\t\t\t}\n\t\t}\n\t\tprivate string RootAlias\n\t\t{\n\t\t\tget { return StringHelper.GenerateAlias(EntityName); }\n\t\t}\n\t\tpublic ISessionFactoryImplementor Factory\n\t\t{\n\t\t\tget { return factory; }\n\t\t}\n\t\tpublic EntityMetamodel EntityMetamodel\n\t\t{\n\t\t\tget { return entityMetamodel; }\n\t\t}\n\t\tpublic ICacheConcurrencyStrategy Cache\n\t\t{\n\t\t\tget { return cache; }\n\t\t}\n\t\tpublic ICacheEntryStructure CacheEntryStructure\n\t\t{\n\t\t\tget { return cacheEntryStructure; }\n\t\t}\n\t\tpublic IComparer VersionComparator\n\t\t{\n\t\t\tget { return IsVersioned ? VersionType.Comparator : null; }\n\t\t}\n\t\tpublic string EntityName\n\t\t{\n\t\t\tget { return entityMetamodel.Name; }\n\t\t}\n\t\tpublic EntityType EntityType\n\t\t{\n\t\t\tget { return entityMetamodel.EntityType; }\n\t\t}\n\t\tpublic virtual bool IsPolymorphic\n\t\t{\n\t\t\tget { return entityMetamodel.IsPolymorphic; }\n\t\t}\n\t\tpublic virtual bool IsInherited\n\t\t{\n\t\t\tget { return entityMetamodel.IsInherited; }\n\t\t}\n\t\tpublic virtual IVersionType VersionType\n\t\t{\n\t\t\tget { return LocateVersionType(); }\n\t\t}\n\t\tpublic virtual int VersionProperty\n\t\t{\n\t\t\tget { return entityMetamodel.VersionPropertyIndex; }\n\t\t}\n\t\tpublic virtual bool IsVersioned\n\t\t{\n\t\t\tget { return entityMetamodel.IsVersioned; }\n\t\t}\n\t\tpublic virtual bool IsIdentifierAssignedByInsert\n\t\t{\n\t\t\tget { return entityMetamodel.IdentifierProperty.IsIdentifierAssignedByInsert; }\n\t\t}\n\t\tpublic virtual bool IsMutable\n\t\t{\n\t\t\tget { return entityMetamodel.IsMutable; }\n\t\t}\n\t\tpublic virtual bool IsAbstract\n\t\t{\n\t\t\tget { return entityMetamodel.IsAbstract; }\n\t\t}\n\t\tpublic virtual IIdentifierGenerator IdentifierGenerator\n\t\t{\n\t\t\tget { return entityMetamodel.IdentifierProperty.IdentifierGenerator; }\n\t\t}\n\t\tpublic virtual string RootEntityName\n\t\t{\n\t\t\tget { return entityMetamodel.RootName; }\n\t\t}\n\t\tpublic virtual IClassMetadata ClassMetadata\n\t\t{\n\t\t\tget { return this; }\n\t\t}\n\t\tpublic virtual string MappedSuperclass\n\t\t{\n\t\t\tget { return entityMetamodel.Superclass; }\n\t\t}\n\t\tpublic virtual bool IsExplicitPolymorphism\n\t\t{\n\t\t\tget { return entityMetamodel.IsExplicitPolymorphism; }\n\t\t}\n\t\tpublic string[] KeyColumnNames\n\t\t{\n\t\t\tget { return IdentifierColumnNames; }\n\t\t}\n\t\tpublic string[] JoinColumnNames\n\t\t{\n\t\t\tget { return KeyColumnNames; }\n\t\t}\n\t\tpublic string Name\n\t\t{\n\t\t\tget { return EntityName; }\n\t\t}\n\t\tpublic bool IsCollection\n\t\t{\n\t\t\tget { return false; }\n\t\t}\n\t\tpublic IType Type\n\t\t{\n\t\t\tget { return entityMetamodel.EntityType; }\n\t\t}\n\t\tpublic bool IsSelectBeforeUpdateRequired\n\t\t{\n\t\t\tget { return entityMetamodel.IsSelectBeforeUpdate; }\n\t\t}\n\t\tpublic bool IsVersionPropertyGenerated\n\t\t{\n\t\t\tget { return IsVersioned && PropertyUpdateGenerationInclusions[VersionProperty] != ValueInclusion.None; }\n\t\t}\n\t\tpublic bool VersionPropertyInsertable\n\t\t{\n\t\t\tget { return IsVersioned && PropertyInsertability[VersionProperty]; }\n\t\t}\n\t\tpublic virtual string[] PropertyNames\n\t\t{\n\t\t\tget { return entityMetamodel.PropertyNames; }\n\t\t}\n\t\tpublic virtual IType[] PropertyTypes\n\t\t{\n\t\t\tget { return entityMetamodel.PropertyTypes; }\n\t\t}\n\t\tpublic bool[] PropertyLaziness\n\t\t{\n\t\t\tget { return entityMetamodel.PropertyLaziness; }\n\t\t}\n\t\tpublic virtual bool[] PropertyCheckability\n\t\t{\n\t\t\tget { return entityMetamodel.PropertyCheckability; }\n\t\t}\n\t\tpublic bool[] NonLazyPropertyUpdateability\n\t\t{\n\t\t\tget { return entityMetamodel.NonlazyPropertyUpdateability; }\n\t\t}\n\t\tpublic virtual bool[] PropertyInsertability\n\t\t{\n\t\t\tget { return entityMetamodel.PropertyInsertability; }\n\t\t}\n\t\tpublic ValueInclusion[] PropertyInsertGenerationInclusions\n\t\t{\n\t\t\tget { return entityMetamodel.PropertyInsertGenerationInclusions; }\n\t\t}\n\t\tpublic ValueInclusion[] PropertyUpdateGenerationInclusions\n\t\t{\n\t\t\tget { return entityMetamodel.PropertyUpdateGenerationInclusions; }\n\t\t}\n\t\tpublic virtual bool[] PropertyNullability\n\t\t{\n\t\t\tget { return entityMetamodel.PropertyNullability; }\n\t\t}\n\t\tpublic virtual bool[] PropertyVersionability\n\t\t{\n\t\t\tget { return entityMetamodel.PropertyVersionability; }\n\t\t}\n\t\tpublic virtual CascadeStyle[] PropertyCascadeStyles\n\t\t{\n\t\t\tget { return entityMetamodel.CascadeStyles; }\n\t\t}\n\t\tpublic virtual bool IsMultiTable\n\t\t{\n\t\t\tget { return false; }\n\t\t}\n\t\tpublic string TemporaryIdTableName\n\t\t{\n\t\t\tget { return temporaryIdTableName; }\n\t\t}\n\t\tpublic string TemporaryIdTableDDL\n\t\t{\n\t\t\tget { return temporaryIdTableDDL; }\n\t\t}\n\t\tprotected int PropertySpan\n\t\t{\n\t\t\tget { return entityMetamodel.PropertySpan; }\n\t\t}\n\t\tpublic virtual string IdentifierPropertyName\n\t\t{\n\t\t\tget { return entityMetamodel.IdentifierProperty.Name; }\n\t\t}\n\t\tpublic virtual IType GetIdentifierType(int j)\n\t\t{\n\t\t\treturn IdentifierType;\n\t\t}\n\t\tpublic virtual IType IdentifierType\n\t\t{\n\t\t\tget { return entityMetamodel.IdentifierProperty.Type; }\n\t\t}\n\t\tpublic int[] NaturalIdentifierProperties\n\t\t{\n\t\t\tget { return entityMetamodel.NaturalIdentifierProperties; }\n\t\t}\n\t\tpublic abstract string[][] ConstraintOrderedTableKeyColumnClosure { get;}\n\t\tpublic abstract IType DiscriminatorType { get;}\n\t\tpublic abstract string[] ConstraintOrderedTableNameClosure { get;}\n\t\tpublic abstract string DiscriminatorSQLValue { get;}\n\t\tpublic abstract object DiscriminatorValue { get;}\n\t\tpublic abstract string[] SubclassClosure { get; }\n\t\tpublic abstract string[] PropertySpaces { get;}\n\t\tprotected virtual void AddDiscriminatorToInsert(SqlInsertBuilder insert) { }\n\t\tprotected virtual void AddDiscriminatorToSelect(SelectFragment select, string name, string suffix) { }\n\t\tpublic abstract string GetSubclassTableName(int j);\n\t\t//gets the identifier for a join table if other than pk\n\t\tprotected virtual object GetJoinTableId(int j, object[] fields)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\tprotected virtual object GetJoinTableId(int table, object obj)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\t//for joining to other keys than pk\n\t\tprotected virtual string[] GetJoinIdKeyColumns(int j)\n\t\t{\n\t\t\treturn IdentifierColumnNames;\n\t\t}\n\t\tprotected abstract string[] GetSubclassTableKeyColumns(int j);\n\t\tprotected abstract bool IsClassOrSuperclassTable(int j);\n\t\tprotected abstract int SubclassTableSpan { get; }\n\t\tprotected abstract int TableSpan { get; }\n\t\tprotected abstract bool IsTableCascadeDeleteEnabled(int j);\n\t\tprotected abstract string GetTableName(int table);\n\t\tprotected abstract string[] GetKeyColumns(int table);\n\t\tprotected abstract bool IsPropertyOfTable(int property, int table);\n\t\tprotected virtual int? GetRefIdColumnOfTable(int table)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\tprotected virtual Tuple.Property GetIdentiferProperty(int table)\n\t\t{\n\t\t\tvar refId = GetRefIdColumnOfTable(table);\n\t\t\tif (refId == null)\n\t\t\t\treturn entityMetamodel.IdentifierProperty;\n\t\t\treturn entityMetamodel.Properties[refId.Value];\n\t\t}\n\t\tprotected virtual bool IsIdOfTable(int property, int table)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tprotected abstract int GetSubclassPropertyTableNumber(int i);\n\t\tpublic abstract string FilterFragment(string alias);\n\t\tprotected internal virtual string DiscriminatorAlias\n\t\t{\n\t\t\tget { return Discriminator_Alias; }\n\t\t}\n\t\tprotected virtual bool IsInverseTable(int j)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tprotected virtual bool IsNullableTable(int j)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tprotected virtual bool IsNullableSubclassTable(int j)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tprotected virtual bool IsInverseSubclassTable(int j)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tpublic virtual bool IsSubclassEntityName(string entityName)\n\t\t{\n\t\t\treturn entityMetamodel.SubclassEntityNames.Contains(entityName);\n\t\t}\n\t\tprotected bool[] TableHasColumns\n\t\t{\n\t\t\tget { return tableHasColumns; }\n\t\t}\n\t\tprotected bool IsInsertCallable(int j)\n\t\t{\n\t\t\treturn insertCallable[j];\n\t\t}\n\t\tprotected bool IsUpdateCallable(int j)\n\t\t{\n\t\t\treturn updateCallable[j];\n\t\t}\n\t\tprotected bool IsDeleteCallable(int j)\n\t\t{\n\t\t\treturn deleteCallable[j];\n\t\t}\n\t\tprotected virtual bool IsSubclassPropertyDeferred(string propertyName, string entityName)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tprotected virtual bool IsSubclassTableSequentialSelect(int table)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tpublic virtual bool HasSequentialSelect\n\t\t{\n\t\t\tget { return false; }\n\t\t}\n\t\t/// <summary>\n\t\t/// Decide which tables need to be updated\n\t\t/// </summary>\n\t\t/// <param name=\"dirtyProperties\">The indices of all the entity properties considered dirty.</param>\n\t\t/// <param name=\"hasDirtyCollection\">Whether any collections owned by the entity which were considered dirty. </param>\n\t\t/// <returns> Array of booleans indicating which table require updating. </returns>\n\t\t/// <remarks>\n\t\t/// The return here is an array of boolean values with each index corresponding\n\t\t/// to a given table in the scope of this persister.\n\t\t/// </remarks>\n\t\tprotected virtual bool[] GetTableUpdateNeeded(int[] dirtyProperties, bool hasDirtyCollection)\n\t\t{\n\t\t\tif (dirtyProperties == null)\n\t\t\t{\n\t\t\t\treturn TableHasColumns; //for object that came in via update()\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbool[] updateability = PropertyUpdateability;\n\t\t\t\tint[] propertyTableNumbers = PropertyTableNumbers;\n\t\t\t\tbool[] tableUpdateNeeded = new bool[TableSpan];\n\t\t\t\tfor (int i = 0; i < dirtyProperties.Length; i++)\n\t\t\t\t{\n\t\t\t\t\tint property = dirtyProperties[i];\n\t\t\t\t\tint table = propertyTableNumbers[property];\n\t\t\t\t\ttableUpdateNeeded[table] = tableUpdateNeeded[table] ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t (GetPropertyColumnSpan(property) > 0 && updateability[property]);\n\t\t\t\t}\n\t\t\t\tif (IsVersioned)\n\t\t\t\t{\n\t\t\t\t\t// NH-2386 when there isn't dirty-properties and the version is generated even in UPDATE\n\t\t\t\t\t// we can't execute an UPDATE because there isn't something to UPDATE\n\t\t\t\t\tif(!entityMetamodel.VersionProperty.IsUpdateGenerated)\n\t\t\t\t\t{\n\t\t\t\t\t\ttableUpdateNeeded[0] = tableUpdateNeeded[0] ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Versioning.IsVersionIncrementRequired(dirtyProperties, hasDirtyCollection,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t PropertyVersionability);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn tableUpdateNeeded;\n\t\t\t}\n\t\t}\n\t\tpublic virtual bool HasRowId\n\t\t{\n\t\t\tget { return rowIdName != null; }\n\t\t}\n\t\tprotected internal virtual SqlString GenerateLazySelectString()\n\t\t{\n\t\t\tif (!entityMetamodel.HasLazyProperties)\n\t\t\t\treturn null;\n\t\t\tHashSet<int> tableNumbers = new HashSet<int>();\n\t\t\tList<int> columnNumbers = new List<int>();\n\t\t\tList<int> formulaNumbers = new List<int>();\n\t\t\tfor (int i = 0; i < lazyPropertyNames.Length; i++)\n\t\t\t{\n\t\t\t\t// all this only really needs to consider properties\n\t\t\t\t// of this class, not its subclasses, but since we\n\t\t\t\t// are reusing code used for sequential selects, we\n\t\t\t\t// use the subclass closure\n\t\t\t\tint propertyNumber = GetSubclassPropertyIndex(lazyPropertyNames[i]);\n\t\t\t\tint tableNumber = GetSubclassPropertyTableNumber(propertyNumber);\n\t\t\t\ttableNumbers.Add(tableNumber);\n\t\t\t\tint[] colNumbers = subclassPropertyColumnNumberClosure[propertyNumber];\n\t\t\t\tfor (int j = 0; j < colNumbers.Length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (colNumbers[j] != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tcolumnNumbers.Add(colNumbers[j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint[] formNumbers = subclassPropertyFormulaNumberClosure[propertyNumber];\n\t\t\t\tfor (int j = 0; j < formNumbers.Length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (formNumbers[j] != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tformulaNumbers.Add(formNumbers[j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (columnNumbers.Count == 0 && formulaNumbers.Count == 0)\n\t\t\t{\n\t\t\t\t// only one-to-one is lazy fetched\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn RenderSelect(tableNumbers.ToArray(), columnNumbers.ToArray(), formulaNumbers.ToArray());\n\t\t}\n\t\tpublic virtual object InitializeLazyProperty(string fieldName, object entity, ISessionImplementor session)\n\t\t{\n\t\t\tobject id = session.GetContextEntityIdentifier(entity);\n\t\t\tEntityEntry entry = session.PersistenceContext.GetEntry(entity);\n\t\t\tif (entry == null)\n\t\t\t\tthrow new HibernateException(\"entity is not associated with the session: \" + id);\n\t\t\tif (log.IsDebugEnabled)\n\t\t\t{\n\t\t\t\tlog.Debug(\n\t\t\t\t\tstring.Format(\"initializing lazy properties of: {0}, field access: {1}\",\n\t\t\t\t\t\t\t\t\t\t\t\tMessageHelper.InfoString(this, id, Factory), fieldName));\n\t\t\t}\n\t\t\tif (HasCache && session.CacheMode.HasFlag(CacheMode.Get))\n\t\t\t{\n\t\t\t\tCacheKey cacheKey = session.GenerateCacheKey(id, IdentifierType, EntityName);\n\t\t\t\tobject ce = Cache.Get(cacheKey, session.Timestamp);\n\t\t\t\tif (ce != null)\n\t\t\t\t{\n\t\t\t\t\tCacheEntry cacheEntry = (CacheEntry)CacheEntryStructure.Destructure(ce, factory);\n\t\t\t\t\tif (!cacheEntry.AreLazyPropertiesUnfetched)\n\t\t\t\t\t{\n\t\t\t\t\t\t//note early exit here:\n\t\t\t\t\t\treturn InitializeLazyPropertiesFromCache(fieldName, entity, session, entry, cacheEntry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn InitializeLazyPropertiesFromDatastore(fieldName, entity, session, id, entry);\n\t\t}\n\t\tprivate object InitializeLazyPropertiesFromDatastore(string fieldName, object entity, ISessionImplementor session, object id, EntityEntry entry)\n\t\t{\n\t\t\tif (!HasLazyProperties)\n\t\t\t\tthrow new AssertionFailure(\"no lazy properties\");\n\t\t\tlog.Debug(\"initializing lazy properties from datastore\");\n\t\t\tusing (new SessionIdLoggingContext(session.SessionId)) \n\t\t\ttry\n\t\t\t{\n\t\t\t\tobject result = null;\n\t\t\t\tDbCommand ps = null;\n\t\t\t\tDbDataReader rs = null;\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tSqlString lazySelect = SQLLazySelectString;\n\t\t\t\t\tif (lazySelect != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// null sql means that the only lazy properties\n\t\t\t\t\t\t// are shared PK one-to-one associations which are\n\t\t\t\t\t\t// handled differently in the Type#nullSafeGet code...\n\t\t\t\t\t\tps = session.Batcher.PrepareCommand(CommandType.Text, lazySelect, IdentifierType.SqlTypes(Factory));\n\t\t\t\t\t\tIdentifierType.NullSafeSet(ps, id, 0, session);\n\t\t\t\t\t\trs = session.Batcher.ExecuteReader(ps);\n\t\t\t\t\t\trs.Read();\n\t\t\t\t\t}\n\t\t\t\t\tobject[] snapshot = entry.LoadedState;\n\t\t\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(rs, lazyPropertyColumnAliases[j], session, entity);\n\t\t\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session, snapshot, j, propValue))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = propValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tsession.Batcher.CloseCommand(ps, rs);\n\t\t\t\t}\n\t\t\t\tlog.Debug(\"done initializing lazy properties\");\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcatch (DbException sqle)\n\t\t\t{\n\t\t\t\tvar exceptionContext = new AdoExceptionContextInfo\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tSqlException = sqle,\n\t\t\t\t\t\t\t\t\t\t\tMessage =\n\t\t\t\t\t\t\t\t\t\t\t\t\"could not initialize lazy properties: \" + MessageHelper.InfoString(this, id, Factory),\n\t\t\t\t\t\t\t\t\t\t\tSql = SQLLazySelectString.ToString(),\n\t\t\t\t\t\t\t\t\t\t\tEntityName = EntityName,\n\t\t\t\t\t\t\t\t\t\t\tEntityId = id\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\tthrow ADOExceptionHelper.Convert(Factory.SQLExceptionConverter, exceptionContext);\n\t\t\t}\n\t\t}\n\t\tprivate object InitializeLazyPropertiesFromCache(string fieldName, object entity, ISessionImplementor session, EntityEntry entry, CacheEntry cacheEntry)\n\t\t{\n\t\t\tlog.Debug(\"initializing lazy properties from second-level cache\");\n\t\t\tobject result = null;\n\t\t\tobject[] disassembledValues = cacheEntry.DisassembledState;\n\t\t\tobject[] snapshot = entry.LoadedState;\n", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "length": 3626, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "afaa47c3e50b88c722f2e7e2f9bb3b1204f8b80e185f355f"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n#\n# @file sge_jobs.py\n#\n# @remark Copyright 2014 Philippe Elie\n# @remark Read the file COPYING\n#\n# @author Philippe Elie\nimport sys\nimport os\nsys.path.append(os.path.expanduser('~/phe/common'))\nimport utils\nimport json\nimport hashlib\nimport time\nimport MySQLdb\nimport subprocess\nimport qstat\nimport re\nimport db\nimport collections\njsub = '/usr/bin/jsub'\nclass DbJob(db.UserDb):\n    def __init__(self):\n        super(DbJob, self).__init__('sge_jobs')\n        self.Accounting = collections.namedtuple('Accounting',\n            [\n             'qname',           'hostname',             'group',\n             'owner',           'jobname',              'jobnumber',\n             'account',         'priority',             'qsub_time',\n             'start_time',      'end_time',             'failed',\n             'exit_status',     'ru_wallclock',         'ru_utime',\n             'ru_stime',        'ru_maxrss',            'ru_ixrss',\n             'ru_ismrss',       'ru_idrss',             'ru_isrsst',\n             'ru_minflt',       'ru_majflt',            'ru_nswap',\n             'ru_inblock',      'ru_oublock',           'ru_msdsnd',\n             'ru_msgrcv',       'ru_nsignals',          'ru_nvcsw',\n             'ru_nivcsw',       'project',              'departement',\n             'granted',         'slots',                'task',\n             'cpu',             'mem',                  'io',\n             'category',        'iow',                  'pe_taskid',\n             'used_maxvmem',    'arid',                 'ar_submission_time'\n             ])\n        self.all_state = set(['pending', 'running', 'success', 'accounting',\n                              'sge_fail', 'fail'])\n    def get_job_table(self, state_filter, limit = 50, offset = 0):\n        limit += 1\n        data = []\n        state_filter = state_filter.split('|')\n        if state_filter:\n            for s in state_filter[:]:\n                if s != 'all' and s not in self.all_state:\n                    state_filter.remove(s)\n            state_filter = tuple(state_filter)\n        if not state_filter:\n            state_filter = tuple([ 'fail', 'pending', 'running' ])\n        if 'all' in state_filter:\n            state_filter = tuple([ x for x in self.all_state ])\n        with db.connection(self):\n            fmt_strs = ', '.join(['%s'] * len(state_filter))\n            q = 'SELECT * FROM job WHERE job_state IN (' + fmt_strs + ') ORDER BY job_id DESC LIMIT %s OFFSET %s'\n            #print >> sys.stderr, q % (state_filter + (limit, ) + (offset,))\n            self.cursor.execute(q, state_filter + (limit, ) + (offset,))\n            data = self.cursor.fetchall()\n        has_next = True if len(data) == limit else False\n        return data[:limit-1], has_next\n    def get_accounting_table(self, limit = 50, offset = 0, job_ids = None):\n        limit += 1\n        data = []\n        if not job_ids:\n            job_ids = []\n        if type(job_ids) != type([]):\n            jobs_ids = [ job_ids ]\n        with db.connection(self):\n            q = 'SELECT * from accounting '\n            if job_ids:\n                fmt_strs = ', '.join(['%s'] * len(job_ids))\n                q += 'WHERE job_id in (' + fmt_strs + ') '\n            q += 'ORDER BY job_id DESC, sge_jobnumber DESC, sge_hostname LIMIT %s OFFSET %s'\n            self.cursor.execute(q, tuple(job_ids) + (limit, ) + (offset,))\n            data = self.cursor.fetchall()\n        has_next = True if len(data) == limit else False\n        return data[:limit-1], has_next\n    def pending_request(self, limit = 16, offset = 0):\n        data = []\n        with db.connection(self):\n            self.cursor.execute(\"SELECT * FROM job WHERE job_state='pending' LIMIT %s OFFSET %s\",\n                                [ limit, offset ])\n            data = self.cursor.fetchall()\n        return data\n    def _add_request(self, jobname, run_cmd, args, max_vmem, cpu_bound, force):\n        job_id = 0\n        args = json.dumps(args)\n        h = hashlib.sha1()\n        h.update(run_cmd + args)\n        sha1 = h.hexdigest()\n        q = 'SELECT * FROM job WHERE job_sha1 = %s'\n        self.cursor.execute(q, [sha1])\n        num = self.cursor.fetchone()\n        if num:\n            job_id = num['job_id']\n        if num and not num['job_state'] in [ 'pending', 'running', 'accounting' ]:\n            q = 'SELECT COUNT(*) FROM accounting WHERE job_id=%s'\n            self.cursor.execute(q, [ job_id ])\n            count = self.cursor.fetchone()['COUNT(*)']\n            if count < 3 or force:\n                q = 'UPDATE job SET job_state=\"pending\" WHERE job_id=%s'\n                self.cursor.execute(q, [ job_id ] )\n            else:\n                print >> sys.stderr, \"Job %d reached its max try count, rejected\" % job_id, args\n        elif not num:\n            job_data = {\n                'job_sha1' : sha1,\n                'job_jobname' : jobname,\n                'job_cpu_bound' : cpu_bound,\n                'job_submit_time' : int(time.time()),\n                'job_run_cmd' : run_cmd,\n                'job_log_dir' : os.path.expanduser('~/log/sge/'),\n                'job_args' : args,\n                'job_state' : 'pending',\n                'job_max_vmem' : max_vmem,\n                }\n            add_job_field = '(' + ', '.join(job_data.keys()) + ') '\n            # Quoting is done by execute so it's secure.\n            add_job_value_list = [ '%%(%s)s' % k for k in job_data.keys() ]\n            add_job_value = 'VALUE (' + ', '.join(add_job_value_list) + ')'\n            add_job = ('INSERT INTO job ' + add_job_field + add_job_value)\n            self.cursor.execute(add_job, job_data)\n            self.cursor.execute('SELECT LAST_INSERT_ID()')\n            job_id = self.cursor.fetchone()['LAST_INSERT_ID()']\n        return job_id\n    def add_request(self, jobname, run_cmd, args,  max_vmem,\n                    cpu_bound = True, force = False):\n        job_id = 0\n        with db.connection(self):\n            job_id = self._add_request(jobname, run_cmd, args,\n                                       max_vmem, cpu_bound, force)\n        return job_id\n    def exec_request(self, r):\n        sge_job_nr = 0\n        # This is a bit convoluted but we need it to avoid a race condition:\n        # we set the job as running before starting it so on if this script\n        # run twice in parallel we don't try to start the same job twice. Then\n        # when the job really started or fail to start we update its state\n        # again. As we don't know yet the sge job number, we setup it as zero.\n        # Note this could be done in pending_request() but I prefer to protect\n        # it locally.\n        really_pending = False\n        with db.connection(self):\n            q = 'UPDATE job SET job_state=%s, sge_jobnumber=%s WHERE job_id=%s AND job_state=\"pending\"'\n            if self.cursor.execute(q, [ 'running', 0, r['job_id'] ]):\n                really_pending = True\n        if not really_pending:\n            print >> sys.stderr, \"run request for job_id %s cancelled, as it's no longer pending\" % r['job_id']\n            return\n        cmdline_arg = job_cmdline_arg(r, 'job_run_cmd')\n        sge_cmdline = sge_cmdline_arg(r)\n        ls = subprocess.Popen(sge_cmdline + cmdline_arg,\n                              stdin=None, stdout=subprocess.PIPE,\n                              close_fds = True)\n        text = ls.stdout.read()\n        ls.wait()\n        try:\n            sge_job_nr = int(re.search('Your job (\\d+) ', text).group(1))\n            new_state = 'running'\n        except:\n            utils.print_traceback(\"sge failure to exec job: %d\" % r['job_id'], text)\n            new_state = 'sge_fail'\n        # Now we can really update the job state, see comment above.\n        with db.connection(self):\n            q = 'UPDATE job SET job_state=%s, sge_jobnumber=%s WHERE job_id=%s'\n            self.cursor.execute(q, [ new_state, sge_job_nr, r['job_id'] ])\n    def run_batch(self, nr_running, limit = 16):\n        max_to_run = max(min(limit - nr_running, limit), 0)\n        if max_to_run:\n            for r in self.pending_request(max_to_run):\n                print \"starting:\", r\n                self.exec_request(r)\n    def _exec_check(self, request):\n        q = 'UPDATE job SET job_state=\"accounting\" WHERE job_id=%s'\n        self.cursor.execute(q, [ request['job_id'] ])\n        q = 'INSERT into accounting (job_id, sge_jobnumber) VALUE (%s, %s)'\n        self.cursor.execute(q, [ request['job_id'], request['sge_jobnumber'] ])\n        self.conn.commit()\n    def check_running(self):\n        sge_running = qstat.running_jobs('')\n        if sge_running:\n            with db.connection(self):\n                q = 'SELECT job_id, sge_jobnumber, job_args FROM job WHERE job_state=\"running\"'\n                self.cursor.execute(q)\n                for r in self.cursor.fetchall():\n                    if not r['sge_jobnumber'] in sge_running:\n                        self._exec_check(r)\n            return len(sge_running)\n        return None\n    # Limiting is necessary because a job can be finished but not yet in the\n    # accouting file (cache effect) so we can easily scan the whole file. To\n    # avoid that we limit the backward search to two days by default.\n    # float is allowed so last_time_day = 1.0/24 is an hour.\n    def search_accounting(self, jobs, last_time_day = 2):\n        last_time_day = max(1.0/24, last_time_day)\n        now = int(time.time())\n        count = 0\n        nr_job = len(jobs)\n        for line in utils.readline_backward('/data/project/.system/accounting'):\n            accounting = self.Accounting(*line.split(':'))\n            jobnumber = int(accounting.jobnumber)\n            count += 1\n            if jobnumber in jobs:\n                jobs[jobnumber].append(accounting)\n                nr_job -= 1\n                if nr_job == 0:\n                    print \"breaking after %d line\" % count\n                    break\n            # end_time == 0 occur when sge failed to start a task, don't\n            # use it to get the elapsed time between end_time and now.\n            if int(accounting.end_time) and now - int(accounting.end_time) >= last_time_day * 86400:\n                print \"breaking after %d line, TIMEOUT\" % count\n                break\n    def update_accounting(self):\n        jobs = {}  \n        with db.connection(self):\n            q = 'SELECT job_id, sge_jobnumber, sge_hostname FROM accounting WHERE sge_hostname=\"\"'\n            self.cursor.execute(q)\n            for data in self.cursor.fetchall():\n                jobs[data['sge_jobnumber']] = [ data ]\n        if not len(jobs):\n            return\n        self.search_accounting(jobs)\n        with db.connection(self):\n            fields = [ 'hostname', 'qsub_time', 'start_time', 'end_time',\n                       'failed', 'exit_status', 'ru_utime', 'ru_stime',\n                       'ru_wallclock', 'used_maxvmem' ]\n            set_str = []\n            for f in fields:\n                set_str.append('sge_%s=%%(%s)s' % (f, f))\n            set_str = ', '.join(set_str)\n            for sge_jobnumber in jobs:\n                sge_jobnumber = int(sge_jobnumber)\n                # Accounting not found, it'll found in the next run.\n                if len(jobs[sge_jobnumber]) <= 1:\n                    continue\n                q  = \"UPDATE accounting SET \" + set_str\n                # We can't let execute() do the quoting for jobnumber, but \n                # sge_jobnumber is forced to int so this code is sql injection\n                # safe.\n                q += ' WHERE sge_jobnumber=%d' % sge_jobnumber\n                # Kludge, execute() don't accept a namedtuple nor an\n                # OrderedDict so convert it explicitly to a dict.\n                d = jobs[sge_jobnumber][1]._asdict()\n                d = dict(zip(d.keys(), d.values()))\n                self.cursor.execute(q, d)\n                job = jobs[sge_jobnumber][0]\n                new_state = 'success'\n                if int(d['failed']) or int(d['exit_status']):\n                    new_state = 'fail'\n                q = 'UPDATE job SET job_state=%s WHERE job_id=%s'\n                self.cursor.execute(q, [ new_state, job['job_id'] ])\ndef quote_arg(arg):\n    return \"'\" + arg.replace(\"'\", r\"'\\''\") + \"'\"\ndef job_cmdline_arg(request, cmd):\n    cmd_arg  = [ request[cmd] ]\n    cmd_arg += [ quote_arg(x) for x in json.loads(request['job_args']) ]\n    return cmd_arg\ndef sge_cmdline_arg(request):\n    job_name = request['job_jobname']\n    log_name = request['job_log_dir'] + job_name + '_' + str(request['job_id'])\n    sge_cmd_arg = [\n        jsub,\n        '-b', 'y',\n", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "length": 1274, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "9ac83f0cb7aff9cd52581d7e6d5bce356b4f5531fcc7b4f2"}
{"input": "", "context": "namespace App.Mvc.Controllers\n{\n    using Contracts;\n    using Mvc;\n    using Contracts.Services;\n    using Models;\n    using Filters;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Web.Mvc;\n    using System.Web;\n\t[Filters.ExceptionHandler]\n    public class DelegateController : Controller\n    {\n\t\tprivate readonly ILogProvider log ; \n\t\tprivate const string LogName = \"Delegate\";\n        private readonly IDelegateService service ;   \n        public DelegateController(ILogProvider log, IDelegateService service )\n        {\n            this.service = service;\n\t\t\tthis.log = log;\n            \n        }\n        protected override void OnActionExecuting(ActionExecutingContext filterContext)\n        {\n            base.OnActionExecuting(filterContext);\n\t\t\tlog.LogActionExecuting(LogName,filterContext);\n\t\t\tViewBag.Title = \"App\";\n            ViewBag.SectionTitle = \"Delegate\";\n        }\n        // GET: Delegate\n\t\t[RolesRequired(\"Admin\",\"ListDelegate\")]\n        public ActionResult Index()\n        {\n            var errors = new List<IModelError>();\n            var models = service.GetAll(x => x != null, errors);\n            ViewBag.Errors = errors;\n            ViewBag.ToolButtons = \"VED\"; // View Edit Delete \n\t\t\tViewBag.Title = \"List Delegate\" ; \n            return View(models);            \n        }\n        // Display a form for viewing Delegate\n\t\t[RolesRequired(\"Admin\",\"ViewDelegate\")]\n        public ActionResult View(int id = -1)\n        {\t\t\t \n            var errors = new List<IModelError>();\n            ViewBag.Readonly = true;\n            ViewBag.ButtonFlag = \"\";\n\t\t\tViewBag.Title = \"View Delegate\" ; \n            var model = GetViewModel(id,errors);\n            return View(\"Form\",model);\n        }\n        // Display a form for editing Delegate\n\t\t[RolesRequired(\"Admin\",\"SaveDelegate\")]        \n        public ActionResult Edit(int id = -1)\n        {\n            var errors = new List<IModelError>();\n            ViewBag.Readonly = false;\n\t\t\tViewBag.ButtonFlag = \"RS\"; // Relationship Submit\n\t\t\tViewBag.Title = \"Edit Delegate\" ; \n            var model = GetViewModel(id,errors);\n            return View(\"Form\",model);\n        }\n\t\t[RolesRequired(\"Admin\",\"SaveDelegate\")]   \n        [HttpPost]\n        public ActionResult Edit(DelegateViewModel model)\n        {\n            var errors = new List<IModelError>();\n            service.TrySave(model, errors);          \n\t\t\tif (errors.Any())\n            {\n                this.AddModelErrors(errors);\n                ViewBag.Readonly = false;\n\t\t\t\tViewBag.ButtonFlag = \"RS\"; // Relationship Submit\n\t\t\t\tViewBag.Title = \"Edit Delegate\" ; \n                return View(\"Form\", model);\n            }\n            else\n            {\n                return RedirectToAction(\"index\", new { updated = model.Id });\n            } \n        }\n        // Display a form for creating Delegate\n\t\t[RolesRequired(\"Admin\",\"SaveDelegate\")]   \n        public ActionResult Create(int id = -1)\n        {\n            var errors = new List<IModelError>();\n            ViewBag.Readonly = false;\n\t\t\tViewBag.ButtonFlag = \"S\"; // Submit\n\t\t\tViewBag.Title = \"New Delegate\" ; \n            var model = GetViewModel(id,errors);\n            return View(\"Form\",model);\n        }\n\t\t[RolesRequired(\"Admin\",\"SaveDelegate\")]   \n        [HttpPost]\n        public ActionResult Create(DelegateViewModel model)\n        {\n            var errors = new List<IModelError>();\n\t\t\tservice.TrySave(model, errors);  \n\t\t\tif (errors.Any())\n            {\n                this.AddModelErrors(errors);\n                ViewBag.Readonly = false;\n                ViewBag.ButtonFlag = \"S\"; // Submit\n\t\t\t\tViewBag.Title = \"New Delegate\" ; \n                return View(\"Form\", model);\n            }\n            else\n            {\n                return RedirectToAction(\"index\", new { creaated = model.Id });\n            } \n        }\n        // Display a form for deleting Delegate\n\t\t[RolesRequired(\"Admin\",\"DeleteDelegate\")]   \n        public ActionResult Delete(int id = -1)\n        {\n            var errors = new List<IModelError>();\n            ViewBag.Readonly = true;\n            ViewBag.ShowRelationships = false;\n\t\t\tViewBag.Title = \"Delete Delegate\" ; \n            var model = GetViewModel(id,errors);\n            return View(\"Form\",model);\n        }\n\t\t[RolesRequired(\"Admin\", \"DeleteDelegate\")]\n        [HttpPost]\n        public ActionResult Delete(DelegateViewModel model, int _post)\n        {\n            var errors = new List<IModelError>();\n            var result = service.TryDelete(model.Id, errors);\n            ViewBag.Title = \"Delete Delegate\";\n            if (errors.Any())\n            {\n                model = GetViewModel(model.Id, errors);\n                this.AddModelErrors(errors);\n                ViewBag.Readonly = false;\n                ViewBag.ButtonFlag = \"S\"; // Submit\n                ViewBag.Title = \"Delete Delegate\";\n                return View(\"Form\", model);\n            }\n            else\n            {\n                return RedirectToAction(\"index\", new { deleted = model.Id });\n            }\n        }\n\t\t\n        // list all Delegate entities\n\t\t[RolesRequired(\"Admin\",\"ListDelegate\")]  \n        public ActionResult List() \n        {\n            var errors = new List<IModelError>();\n            var models = service.GetAll(x =>x != null, errors);\n            ViewBag.Errors = errors;\n            ViewBag.ToolButtons = \"VP\"; // View Pick \n            ViewBag.PickState = false;\n            return View(\"DelegateList\", models);\n        }\n                \n        \n        // Supports the many to many relationship (DelegateEvent) between Delegate (parent) Event (child)\n        //[Authorize(Roles = \"Admin,ListDelegateEvent\")]\n\t\t[RolesRequired(\"Admin\",\"ListDelegateEvent\")]  \n        public ActionResult GetDelegateEvent(int id, bool selected = false) \n        {\n            var models = service.GetAllForDelegateEvent(id);\n            ViewBag.ToolButtons = \"VP\"; // View Pick \n            ViewBag.PickState = selected;\n            return View(\"DelegateList\", models);\n        }\n        // Add a relationship (DelegateEvent) between Delegate (parent) Event (child)\n        //[Authorize(Roles = \"Admin,SaveDelegateEvent\")]\n\t\t[RolesRequired(\"Admin\",\"SaveDelegateEvent\")]  \n        public ActionResult AddDelegateEvent(int id)\n        {\n            ViewBag.Readonly = false;\n            ViewBag.ShowRelationships = false;\n            ViewBag.ModelId = new int?(id);\n            return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (DelegateEvent) between Delegate (parent) Event (child)\n        [HttpPost]\n        //[Authorize(Roles = \"Admin,SaveDelegateEvent\")]\n\t\t[RolesRequired(\"Admin\",\"SaveDelegateEvent\")]\n        public ActionResult SaveDelegateEvent(DelegateViewModel model, int modelId)\n        {\n            var errors = new List<IModelError>();\n            model.Id = 0 ; // force a new object regardless\n            var result = service.TrySave(model, errors);\n            if (result)\n            {\n                service.AddEventToDelegateForDelegateEvent(model.Id, modelId);\n            }\n            return Json(new\n            {\n                Model = model,\n                Success = result,\n                Errors = errors\n            });\n        }\n        // remove a relationship (DelegateEvent) between Delegate (parent) Event (child) \n        [HttpPost]\n\t\t[RolesRequired(\"Admin\",\"SaveDelegateEvent\")]       \n        public ActionResult UnLinkDelegateEvent(int modelId , int[] items)\n        {\n            var result = true;\n            try\n            {\n                items.DefaultIfNull().AsParallel().ToList().ForEach(i => {\n\t\t\t\t\tservice.RemoveEventFromDelegateForDelegateEvent(modelId, i);\t\t\t\t\t                  \n                });\n            }\n            catch \n            {\n\t\t\t\titems.DefaultIfNull().AsParallel().ToList().ForEach(i => {                    \n\t\t\t\t\tservice.AddEventToDelegateForDelegateEvent(modelId, i);  \n                });\n                result = false;  \n            }\n                                   \n            return Json(new\n            {\n                Success = result\n            });\n        }\n        // add a relationship (DelegateEvent) between existing Delegate (parent) Event (child) \n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveDelegateEvent\")]  \n        public ActionResult LinkDelegateEvent(int modelId , int[] items)\n        {\n            var result = true;\n            try\n            {\n                items.DefaultIfNull().AsParallel().ToList().ForEach(i => {\n\t\t\t\t\tservice.AddEventToDelegateForDelegateEvent(modelId, i);                    \n                });\n            }\n            catch \n            {\n\t\t\t\titems.DefaultIfNull().AsParallel().ToList().ForEach(i => {                    \n\t\t\t\t\tservice.RemoveEventFromDelegateForDelegateEvent(modelId, i);\n                });\n                result = false;  \n            }\n                                   \n            return Json(new\n            {\n                Success = result\n            });\n        }\n                \n        // Supports the many to many relationship (DelegateExamResult) between Delegate (parent) ExamResult (child)\n        //[Authorize(Roles = \"Admin,ListDelegateExamResult\")]\n\t\t[RolesRequired(\"Admin\",\"ListDelegateExamResult\")]  \n        public ActionResult GetDelegateExamResult(int id, bool selected = false) \n        {\n            var models = service.GetAllForDelegateExamResult(id);\n            ViewBag.ToolButtons = \"VP\"; // View Pick \n            ViewBag.PickState = selected;\n            return View(\"DelegateList\", models);\n        }\n        // Add a relationship (DelegateExamResult) between Delegate (parent) ExamResult (child)\n        //[Authorize(Roles = \"Admin,SaveDelegateExamResult\")]\n\t\t[RolesRequired(\"Admin\",\"SaveDelegateExamResult\")]  \n        public ActionResult AddDelegateExamResult(int id)\n        {\n            ViewBag.Readonly = false;\n            ViewBag.ShowRelationships = false;\n            ViewBag.ModelId = new int?(id);\n            return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (DelegateExamResult) between Delegate (parent) ExamResult (child)\n        [HttpPost]\n        //[Authorize(Roles = \"Admin,SaveDelegateExamResult\")]\n\t\t[RolesRequired(\"Admin\",\"SaveDelegateExamResult\")]\n        public ActionResult SaveDelegateExamResult(DelegateViewModel model, int modelId)\n        {\n            var errors = new List<IModelError>();\n            model.Id = 0 ; // force a new object regardless\n            var result = service.TrySave(model, errors);\n            if (result)\n            {\n                service.AddExamResultToDelegateForDelegateExamResult(model.Id, modelId);\n            }\n            return Json(new\n            {\n                Model = model,\n                Success = result,\n                Errors = errors\n            });\n        }\n        // remove a relationship (DelegateExamResult) between Delegate (parent) ExamResult (child) \n        [HttpPost]\n\t\t[RolesRequired(\"Admin\",\"SaveDelegateExamResult\")]       \n        public ActionResult UnLinkDelegateExamResult(int modelId , int[] items)\n        {\n            var result = true;\n            try\n            {\n                items.DefaultIfNull().AsParallel().ToList().ForEach(i => {\n\t\t\t\t\tservice.RemoveExamResultFromDelegateForDelegateExamResult(modelId, i);\t\t\t\t\t                  \n                });\n            }\n            catch \n            {\n\t\t\t\titems.DefaultIfNull().AsParallel().ToList().ForEach(i => {                    \n\t\t\t\t\tservice.AddExamResultToDelegateForDelegateExamResult(modelId, i);  \n                });\n                result = false;  \n            }\n                                   \n            return Json(new\n            {\n                Success = result\n            });\n        }\n        // add a relationship (DelegateExamResult) between existing Delegate (parent) ExamResult (child) \n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveDelegateExamResult\")]  \n        public ActionResult LinkDelegateExamResult(int modelId , int[] items)\n        {\n            var result = true;\n            try\n            {\n                items.DefaultIfNull().AsParallel().ToList().ForEach(i => {\n\t\t\t\t\tservice.AddExamResultToDelegateForDelegateExamResult(modelId, i);                    \n                });\n            }\n            catch \n            {\n\t\t\t\titems.DefaultIfNull().AsParallel().ToList().ForEach(i => {                    \n\t\t\t\t\tservice.RemoveExamResultFromDelegateForDelegateExamResult(modelId, i);\n                });\n                result = false;  \n            }\n                                   \n            return Json(new\n            {\n                Success = result\n            });\n        }\n                \n        // Supports the many to many relationship (EventDelegate) between Delegate (child) Event (parent)\n        [RolesRequired(\"Admin\",\"ListEventDelegate\")]  \n        public ActionResult GetEventDelegate(int id) \n        {\n            var models = service.GetAllForEventDelegate(id);\n            ViewBag.ToolButtons = \"VP\"; // View Pick \n            ViewBag.PickState = true;\n            return View(\"DelegateList\", models);\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")] \n        public ActionResult AddEventDelegate()\n        {\n            ViewBag.Readonly = false;\n            ViewBag.ShowRelationships = false;\n", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "length": 1017, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "abeb767e6c37cee48470e6764ac480ad487fef3e3fc93bba"}
{"input": "", "context": "#region License\n/*\n Copyright 2014 - 2015 Nikita Bernthaler\n Report.cs is part of SFXUtility.\n SFXUtility is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n SFXUtility is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with SFXUtility. If not, see <http://www.gnu.org/licenses/>.\n*/\n#endregion License\n#region\nusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing LeagueSharp;\nusing LeagueSharp.Common;\nusing SFXUtility.Interfaces;\n#endregion\nnamespace SFXUtility.Classes\n{\n    public class GenerateReport\n    {\n        private static readonly List<string> AssemblyBlacklist = new List<string>\n        {\n            \"mscorlib\",\n            \"System\",\n            \"Microsoft\",\n            \"SMDiagnostics\"\n        };\n        private static readonly StringBuilder Builder = new StringBuilder();\n        public static string Generate()\n        {\n            Builder.Clear();\n            GenerateHeader();\n            GenerateGame();\n            GenerateOverview();\n            GenerateHeroes();\n            GenerateAssemblies();\n            GenerateFeatures();\n            GenerateMenu();\n            Builder.AppendLine(\"--------------- THE END ---------------\");\n            return Builder.ToString();\n        }\n        private static void GenerateOverview()\n        {\n            Builder.AppendLine(\"Overview\");\n            Builder.AppendLine(\"--------------------------------------\");\n            Builder.Append(\"Assemblies: \");\n            var assemblies =\n                AppDomain.CurrentDomain.GetAssemblies()\n                    .Where(a => !AssemblyBlacklist.Any(b => a.FullName.StartsWith(b)))\n                    .ToList();\n            var lastAssembly = assemblies.Last();\n            foreach (var assembly in assemblies)\n            {\n                try\n                {\n                    var info = assembly.FullName.Split(',');\n                    if (info.Length > 0)\n                    {\n                        Builder.Append(info[0]);\n                        Builder.Append(assembly.Equals(lastAssembly) ? Environment.NewLine : \", \");\n                    }\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex);\n                }\n            }\n            Builder.Append(\"Features: \");\n            var features = Global.Features.Where(f => f.Enabled && f.Initialized && f.Handled && !f.Unloaded).ToList();\n            var lastFeature = features.Last();\n            foreach (var feature in Global.Features.Where(f => f.Enabled && f.Initialized && f.Handled && !f.Unloaded))\n            {\n                try\n                {\n                    Builder.Append(GetFeatureName(feature));\n                    Builder.Append(feature.Equals(lastFeature) ? Environment.NewLine : \", \");\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex);\n                }\n            }\n            Builder.Append(\"Heroes: \");\n            BuildHeroesString(ObjectManager.Get<Obj_AI_Hero>().ToList());\n            Builder.Append(Environment.NewLine);\n            Builder.AppendLine();\n            Builder.AppendLine();\n            Builder.AppendLine();\n        }\n        private static void BuildHeroesString(List<Obj_AI_Hero> heroes)\n        {\n            var lastHero = heroes.Last();\n            foreach (var hero in heroes)\n            {\n                try\n                {\n                    Builder.Append(hero.ChampionName);\n                    Builder.Append(hero.NetworkId.Equals(lastHero.NetworkId) ? string.Empty : \", \");\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex);\n                }\n            }\n        }\n        private static void GenerateHeroes()\n        {\n            Builder.AppendLine(\"Heroes\");\n            Builder.AppendLine(\"--------------------------------------\");\n            Builder.AppendLine(string.Format(\"[Self]    : {0}\", ObjectManager.Player.ChampionName));\n            Builder.Append(\"[Ally]    : \");\n            BuildHeroesString(ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsAlly).ToList());\n            Builder.Append(Environment.NewLine);\n            Builder.Append(\"[Enemy]   : \");\n            BuildHeroesString(ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsEnemy).ToList());\n            Builder.Append(Environment.NewLine);\n            Builder.AppendLine();\n            Builder.AppendLine();\n            Builder.AppendLine();\n        }\n        private static void GenerateHeader()\n        {\n            Builder.AppendLine(\"Generated Report\");\n            Builder.AppendLine(\"--------------------------------------\");\n            Builder.AppendLine(string.Format(\"[Name]    : {0}\", Global.Name));\n            Builder.AppendLine(string.Format(\"[Version] : {0}\", Global.SFX.Version));\n            Builder.AppendLine(string.Format(\"[Date]    : {0}\", DateTime.Now.ToString(\"dd/MM/yyyy\")));\n            Builder.AppendLine();\n            Builder.AppendLine();\n            Builder.AppendLine();\n        }\n        private static string GetFeatureName(IChild feature)\n        {\n            var split = feature.ToString().Split('.');\n            if (split.Length > 0)\n            {\n                return split.Last();\n            }\n            return feature.ToString();\n        }\n        private static void GenerateFeatures()\n        {\n            Builder.AppendLine(\"Activated Features\");\n            Builder.AppendLine(\"--------------------------------------\");\n            foreach (var feature in Global.Features.OrderBy(f => !f.Enabled))\n            {\n                try\n                {\n                    Builder.AppendLine();\n                    Builder.AppendLine(GetFeatureName(feature));\n                    Builder.AppendLine(\"--------------------------------------\");\n                    Builder.AppendLine(string.Format(\"[Name]        : {0}\", GetFeatureName(feature)));\n                    Builder.AppendLine(string.Format(\"[Full Name]   : {0}\", feature));\n                    Builder.AppendLine(string.Format(\"[Enabled]     : {0}\", feature.Enabled));\n                    Builder.AppendLine(string.Format(\"[Handled]     : {0}\", feature.Handled));\n                    Builder.AppendLine(string.Format(\"[Initialized] : {0}\", feature.Initialized));\n                    Builder.AppendLine(string.Format(\"[Unloaded]    : {0}\", feature.Unloaded));\n                    Builder.AppendLine(\"--------------------------------------\");\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex);\n                }\n            }\n            Builder.AppendLine();\n            Builder.AppendLine();\n            Builder.AppendLine();\n        }\n        private static void GenerateGame()\n        {\n            Builder.AppendLine(\"Game Information\");\n            Builder.AppendLine(\"--------------------------------------\");\n            Builder.AppendLine(string.Format(\"[Version] : {0}\", Game.Version));\n            Builder.AppendLine(string.Format(\"[Region]  : {0}\", Game.Region));\n            Builder.AppendLine(string.Format(\"[MapId]   : {0}\", Game.MapId));\n            Builder.AppendLine(string.Format(\"[Type]    : {0}\", Game.Type));\n            Builder.AppendLine();\n            Builder.AppendLine();\n            Builder.AppendLine();\n        }\n        private static void GenerateAssemblies()\n        {\n            Builder.AppendLine(\"Loaded Assemblies\");\n            Builder.AppendLine(\"--------------------------------------\");\n            var assemblies = AppDomain.CurrentDomain.GetAssemblies();\n            foreach (var assembly in assemblies.Where(a => !AssemblyBlacklist.Any(b => a.FullName.StartsWith(b))))\n            {\n                try\n                {\n                    Builder.AppendLine();\n                    Builder.AppendLine(\"--------------------------------------\");\n                    var info = assembly.FullName.Split(',');\n                    if (info.Length > 0)\n                    {\n                        Builder.AppendLine(info[0]);\n                    }\n                    if (info.Length > 1)\n                    {\n                        Builder.AppendLine(info[1].Replace(\" Version=\", string.Empty));\n                    }\n                    Builder.AppendLine(\"--------------------------------------\");\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex);\n                }\n            }\n            Builder.AppendLine();\n            Builder.AppendLine();\n            Builder.AppendLine();\n        }\n        private static void GenerateMenu()\n        {\n            Builder.AppendLine(\"Menu\");\n            Builder.AppendLine(\"--------------------------------------\");\n            HandleMenu(Global.SFX.Menu);\n            Builder.AppendLine();\n            Builder.AppendLine();\n            Builder.AppendLine();\n        }\n        private static void HandleMenu(Menu menu, int indent = 0)\n        {\n            var prefix = string.Empty;\n            if (indent > 0)\n            {\n                prefix = new string('-', indent * 3);\n            }\n            Builder.AppendLine(string.Format(\"{0}{1}\", prefix, menu.DisplayName));\n            foreach (var item in menu.Items)\n            {\n                Builder.AppendLine(string.Format(\"{0}{1}: {2}\", prefix, item.DisplayName, GetItemValueText(item)));\n            }\n            foreach (var child in menu.Children)\n            {\n                HandleMenu(child, indent + 1);\n            }\n        }\n        private static string GetItemValueText(MenuItem item)\n        {\n            object obj;\n            try\n            {\n                if (item != null)\n                {\n                    obj = item.GetValue<object>();\n                    if (obj is bool)\n                    {\n                        return string.Format(\"{0}\", (bool) obj);\n                    }\n                    if (obj is Color)\n                    {\n                        var color = (Color) obj;\n                        return string.Format(\"({0},{1},{2},{3})\", color.R, color.G, color.B, color.A);\n                    }\n                    if (obj is Circle)\n                    {\n", "answers": ["                        var circle = (Circle) obj;"], "length": 668, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "9db6b4d2545835b0eb906eb67dce37abd8a18390ff3dd44b"}
{"input": "", "context": "# -*- coding: utf-8 -*-\nimport re\nfrom module.common.json_layer import json_loads\nfrom module.network.RequestFactory import getURL\nfrom module.plugins.Hoster import Hoster\nfrom module.plugins.Plugin import chunks\nfrom module.plugins.internal.CaptchaService import ReCaptcha\nfrom module.plugins.internal.SimpleHoster import secondsToMidnight\nfrom module.utils import parseFileSize\ndef checkFile(plugin, urls):\n    html = getURL(plugin.URLS[1], post={\"urls\": \"\\n\".join(urls)}, decode=True)\n    file_info = []\n    for li in re.finditer(plugin.LINKCHECK_TR, html, re.S):\n        try:\n            cols = re.findall(plugin.LINKCHECK_TD, li.group(1))\n            if cols:\n                file_info.append((\n                    cols[1] if cols[1] != '--' else cols[0],\n                    parseFileSize(cols[2]) if cols[2] != '--' else 0,\n                    2 if cols[3].startswith('Available') else 1,\n                    cols[0]))\n        except Exception, e:\n            continue\n    return file_info\nclass FileserveCom(Hoster):\n    __name__    = \"FileserveCom\"\n    __type__    = \"hoster\"\n    __version__ = \"0.53\"\n    __pattern__ = r'http://(?:www\\.)?fileserve\\.com/file/(?P<ID>[^/]+)'\n    __description__ = \"\"\"Fileserve.com hoster plugin\"\"\"\n    __license__     = \"GPLv3\"\n    __authors__     = [(\"jeix\", \"jeix@hasnomail.de\"),\n                       (\"mkaay\", \"mkaay@mkaay.de\"),\n                       (\"Paul King\", None),\n                       (\"zoidberg\", \"zoidberg@mujmail.cz\")]\n    URLS = [\"http://www.fileserve.com/file/\", \"http://www.fileserve.com/link-checker.php\",\n            \"http://www.fileserve.com/checkReCaptcha.php\"]\n    LINKCHECK_TR = r'<tr>\\s*(<td>http://www\\.fileserve\\.com/file/.*?)</tr>'\n    LINKCHECK_TD = r'<td>(?:<[^>]*>|&nbsp;)*([^<]*)'\n    CAPTCHA_KEY_PATTERN = r'var reCAPTCHA_publickey=\\'(.+?)\\''\n    LONG_WAIT_PATTERN = r'<li class=\"title\">You need to wait (\\d+) (\\w+) to start another download\\.</li>'\n    LINK_EXPIRED_PATTERN = r'Your download link has expired'\n    DAILY_LIMIT_PATTERN = r'Your daily download limit has been reached'\n    NOT_LOGGED_IN_PATTERN = r'<form (name=\"loginDialogBoxForm\"|id=\"login_form\")|<li><a href=\"/login\\.php\">Login</a></li>'\n    def setup(self):\n        self.resumeDownload = self.multiDL = self.premium\n        self.file_id = re.match(self.__pattern__, self.pyfile.url).group('ID')\n        self.url     = \"%s%s\" % (self.URLS[0], self.file_id)\n        self.logDebug(\"File ID: %s URL: %s\" % (self.file_id, self.url))\n    def process(self, pyfile):\n        pyfile.name, pyfile.size, status, self.url = checkFile(self, [self.url])[0]\n        if status != 2:\n            self.offline()\n        self.logDebug(\"File Name: %s Size: %d\" % (pyfile.name, pyfile.size))\n        if self.premium:\n            self.handlePremium()\n        else:\n            self.handleFree()\n    def handleFree(self):\n        self.html = self.load(self.url)\n        action = self.load(self.url, post={\"checkDownload\": \"check\"}, decode=True)\n        action = json_loads(action)\n        self.logDebug(action)\n        if \"fail\" in action:\n            if action['fail'] == \"timeLimit\":\n                self.html = self.load(self.url, post={\"checkDownload\": \"showError\", \"errorType\": \"timeLimit\"},\n                                      decode=True)\n                self.doLongWait(re.search(self.LONG_WAIT_PATTERN, self.html))\n            elif action['fail'] == \"parallelDownload\":\n                self.logWarning(_(\"Parallel download error, now waiting 60s\"))\n                self.retry(wait_time=60, reason=_(\"parallelDownload\"))\n            else:\n                self.fail(_(\"Download check returned: %s\") % action['fail'])\n        elif \"success\" in action:\n            if action['success'] == \"showCaptcha\":\n                self.doCaptcha()\n                self.doTimmer()\n            elif action['success'] == \"showTimmer\":\n                self.doTimmer()\n        else:\n            self.error(_(\"Unknown server response\"))\n        # show download link\n        res = self.load(self.url, post={\"downloadLink\": \"show\"}, decode=True)\n        self.logDebug(\"Show downloadLink response: %s\" % res)\n        if \"fail\" in res:\n            self.error(_(\"Couldn't retrieve download url\"))\n        # this may either download our file or forward us to an error page\n        self.download(self.url, post={\"download\": \"normal\"})\n        self.logDebug(self.req.http.lastEffectiveURL)\n        check = self.checkDownload({\"expired\": self.LINK_EXPIRED_PATTERN,\n                                    \"wait\"   : re.compile(self.LONG_WAIT_PATTERN),\n                                    \"limit\"  : self.DAILY_LIMIT_PATTERN})\n        if check == \"expired\":\n            self.logDebug(\"Download link was expired\")\n            self.retry()\n        elif check == \"wait\":\n            self.doLongWait(self.lastCheck)\n        elif check == \"limit\":\n            self.logWarning(_(\"Download limited reached for today\"))\n            self.setWait(secondsToMidnight(gmt=2), True)\n            self.wait()\n            self.retry()\n        self.thread.m.reconnecting.wait(3)  # Ease issue with later downloads appearing to be in parallel\n    def doTimmer(self):\n        res = self.load(self.url, post={\"downloadLink\": \"wait\"}, decode=True)\n        self.logDebug(\"Wait response: %s\" % res[:80])\n        if \"fail\" in res:\n            self.fail(_(\"Failed getting wait time\"))\n        if self.__name__ == \"FilejungleCom\":\n            m = re.search(r'\"waitTime\":(\\d+)', res)\n            if m is None:\n                self.fail(_(\"Cannot get wait time\"))\n            wait_time = int(m.group(1))\n        else:\n            wait_time = int(res) + 3\n        self.setWait(wait_time)\n        self.wait()\n    def doCaptcha(self):\n        captcha_key = re.search(self.CAPTCHA_KEY_PATTERN, self.html).group(1)\n        recaptcha = ReCaptcha(self)\n        for _i in xrange(5):\n            challenge, response = recaptcha.challenge(captcha_key)\n            res = json_loads(self.load(self.URLS[2],\n                                       post={'recaptcha_challenge_field'  : challenge,\n                                             'recaptcha_response_field'   : response,\n                                             'recaptcha_shortencode_field': self.file_id}))\n            if not res['success']:\n                self.invalidCaptcha()\n            else:\n                self.correctCaptcha()\n                break\n        else:\n            self.fail(_(\"Invalid captcha\"))\n    def doLongWait(self, m):\n        wait_time = (int(m.group(1)) * {'seconds': 1, 'minutes': 60, 'hours': 3600}[m.group(2)]) if m else 12 * 60\n        self.setWait(wait_time, True)\n        self.wait()\n        self.retry()\n    def handlePremium(self):\n        premium_url = None\n        if self.__name__ == \"FileserveCom\":\n            #try api download\n            res = self.load(\"http://app.fileserve.com/api/download/premium/\",\n                            post={\"username\": self.user,\n                                  \"password\": self.account.getAccountData(self.user)['password'],\n                                  \"shorten\": self.file_id},\n                            decode=True)\n            if res:\n                res = json_loads(res)\n                if res['error_code'] == \"302\":\n                    premium_url = res['next']\n                elif res['error_code'] in [\"305\", \"500\"]:\n                    self.tempOffline()\n                elif res['error_code'] in [\"403\", \"605\"]:\n                    self.resetAccount()\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "length": 545, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "58414c770f11b4a32f9d1c67426fd6d8e2028e408a27f131"}
{"input": "", "context": "#region Copyright & License Information\n/*\n * Copyright 2007-2019 The OpenRA Developers (see AUTHORS)\n * This file is part of OpenRA, which is free software. It is made\n * available to you under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version. For more\n * information, see COPYING.\n */\n#endregion\nusing System.Collections.Generic;\nusing OpenRA.Activities;\nusing OpenRA.Mods.Common.Pathfinder;\nusing OpenRA.Mods.Common.Traits;\nusing OpenRA.Primitives;\nusing OpenRA.Traits;\nnamespace OpenRA.Mods.Common.Activities\n{\n\tpublic class FindAndDeliverResources : Activity\n\t{\n\t\treadonly Harvester harv;\n\t\treadonly HarvesterInfo harvInfo;\n\t\treadonly Mobile mobile;\n\t\treadonly LocomotorInfo locomotorInfo;\n\t\treadonly ResourceClaimLayer claimLayer;\n\t\treadonly IPathFinder pathFinder;\n\t\treadonly DomainIndex domainIndex;\n\t\treadonly Actor deliverActor;\n\t\tCPos? orderLocation;\n\t\tbool hasDeliveredLoad;\n\t\tbool hasHarvestedCell;\n\t\tbool hasWaited;\n\t\tpublic FindAndDeliverResources(Actor self, Actor deliverActor = null)\n\t\t{\n\t\t\tharv = self.Trait<Harvester>();\n\t\t\tharvInfo = self.Info.TraitInfo<HarvesterInfo>();\n\t\t\tmobile = self.Trait<Mobile>();\n\t\t\tlocomotorInfo = mobile.Info.LocomotorInfo;\n\t\t\tclaimLayer = self.World.WorldActor.Trait<ResourceClaimLayer>();\n\t\t\tpathFinder = self.World.WorldActor.Trait<IPathFinder>();\n\t\t\tdomainIndex = self.World.WorldActor.Trait<DomainIndex>();\n\t\t\tthis.deliverActor = deliverActor;\n\t\t}\n\t\tpublic FindAndDeliverResources(Actor self, CPos orderLocation)\n\t\t\t: this(self, null)\n\t\t{\n\t\t\tthis.orderLocation = orderLocation;\n\t\t}\n\t\tprotected override void OnFirstRun(Actor self)\n\t\t{\n\t\t\t// If an explicit \"harvest\" order is given, direct the harvester to the ordered location instead of\n\t\t\t// the previous harvested cell for the initial search.\n\t\t\tif (orderLocation != null)\n\t\t\t{\n\t\t\t\tharv.LastHarvestedCell = orderLocation;\n\t\t\t\t// If two \"harvest\" orders are issued consecutively, we deliver the load first if needed.\n\t\t\t\t// We have to make sure the actual \"harvest\" order is not skipped if a third order is queued,\n\t\t\t\t// so we keep deliveredLoad false.\n\t\t\t\tif (harv.IsFull)\n\t\t\t\t\tQueueChild(self, new DeliverResources(self), true);\n\t\t\t}\n\t\t\t// If an explicit \"deliver\" order is given, the harvester goes immediately to the refinery.\n\t\t\tif (deliverActor != null)\n\t\t\t{\n\t\t\t\tQueueChild(self, new DeliverResources(self, deliverActor), true);\n\t\t\t\thasDeliveredLoad = true;\n\t\t\t}\n\t\t}\n\t\tpublic override Activity Tick(Actor self)\n\t\t{\n\t\t\tif (ChildActivity != null)\n\t\t\t{\n\t\t\t\tChildActivity = ActivityUtils.RunActivity(self, ChildActivity);\n\t\t\t\tif (ChildActivity != null)\n\t\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (IsCanceling)\n\t\t\t\treturn NextActivity;\n\t\t\tif (NextActivity != null)\n\t\t\t{\n\t\t\t\t// Interrupt automated harvesting after clearing the first cell.\n\t\t\t\tif (!harvInfo.QueueFullLoad && (hasHarvestedCell || harv.LastSearchFailed))\n\t\t\t\t\treturn NextActivity;\n\t\t\t\t// Interrupt automated harvesting after first complete harvest cycle.\n\t\t\t\tif (hasDeliveredLoad || harv.IsFull)\n\t\t\t\t\treturn NextActivity;\n\t\t\t}\n\t\t\t// Are we full or have nothing more to gather? Deliver resources.\n\t\t\tif (harv.IsFull || (!harv.IsEmpty && harv.LastSearchFailed))\n\t\t\t{\n\t\t\t\tQueueChild(self, new DeliverResources(self), true);\n\t\t\t\thasDeliveredLoad = true;\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\t// After a failed search, wait and sit still for a bit before searching again.\n\t\t\tif (harv.LastSearchFailed && !hasWaited)\n\t\t\t{\n\t\t\t\tQueueChild(self, new Wait(harv.Info.WaitDuration), true);\n\t\t\t\thasWaited = true;\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tvar closestHarvestableCell = ClosestHarvestablePos(self);\n\t\t\t// If no resources are found near the current field, search near the refinery instead.\n\t\t\t// If that doesn't help, give up for now.\n\t\t\tif (!closestHarvestableCell.HasValue)\n\t\t\t{\n\t\t\t\tif (harv.LastHarvestedCell != null)\n\t\t\t\t{\n\t\t\t\t\tharv.LastHarvestedCell = null; // Forces search from backup position.\n\t\t\t\t\tclosestHarvestableCell = ClosestHarvestablePos(self);\n\t\t\t\t\tharv.LastSearchFailed = !closestHarvestableCell.HasValue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tharv.LastSearchFailed = true;\n\t\t\t}\n\t\t\tif (harv.LastSearchFailed)\n\t\t\t{\n\t\t\t\t// If no harvestable position could be found and we are at the refinery, get out of the way\n\t\t\t\t// of the refinery entrance.\n\t\t\t\tvar lastproc = harv.LastLinkedProc ?? harv.LinkedProc;\n\t\t\t\tif (lastproc != null && !lastproc.Disposed)\n\t\t\t\t{\n\t\t\t\t\tvar deliveryLoc = lastproc.Location + lastproc.Trait<IAcceptResources>().DeliveryOffset;\n\t\t\t\t\tif (self.Location == deliveryLoc && harv.IsEmpty)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Get out of the way:\n\t\t\t\t\t\tvar unblockCell = deliveryLoc + harv.Info.UnblockCell;\n\t\t\t\t\t\tvar moveTo = mobile.NearestMoveableCell(unblockCell, 1, 5);\n\t\t\t\t\t\tself.SetTargetLine(Target.FromCell(self.World, moveTo), Color.Green, false);\n\t\t\t\t\t\tQueueChild(self, mobile.MoveTo(moveTo, 1), true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\t// Attempt to claim the target cell\n\t\t\tif (!claimLayer.TryClaimCell(self, closestHarvestableCell.Value))\n\t\t\t{\n\t\t\t\tQueueChild(self, new Wait(25), true);\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tharv.LastSearchFailed = false;\n\t\t\tforeach (var n in self.TraitsImplementing<INotifyHarvesterAction>())\n\t\t\t\tn.MovingToResources(self, closestHarvestableCell.Value, new FindAndDeliverResources(self));\n\t\t\tself.SetTargetLine(Target.FromCell(self.World, closestHarvestableCell.Value), Color.Red, false);\n\t\t\tQueueChild(self, mobile.MoveTo(closestHarvestableCell.Value, 1), true);\n\t\t\tQueueChild(self, new HarvestResource(self));\n\t\t\thasHarvestedCell = true;\n\t\t\treturn this;\n\t\t}\n\t\t/// <summary>\n\t\t/// Finds the closest harvestable pos between the current position of the harvester\n\t\t/// and the last order location\n\t\t/// </summary>\n\t\tCPos? ClosestHarvestablePos(Actor self)\n\t\t{\n\t\t\t// Harvesters should respect an explicit harvest order instead of harvesting the current cell.\n\t\t\tif (orderLocation == null)\n\t\t\t{\n\t\t\t\tif (harv.CanHarvestCell(self, self.Location) && claimLayer.CanClaimCell(self, self.Location))\n\t\t\t\t\treturn self.Location;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (harv.CanHarvestCell(self, orderLocation.Value) && claimLayer.CanClaimCell(self, orderLocation.Value))\n\t\t\t\t\treturn orderLocation;\n\t\t\t\torderLocation = null;\n\t\t\t}\n\t\t\t// Determine where to search from and how far to search:\n\t\t\tvar searchFromLoc = harv.LastHarvestedCell ?? GetSearchFromLocation(self);\n\t\t\tvar searchRadius = harv.LastHarvestedCell.HasValue ? harvInfo.SearchFromOrderRadius : harvInfo.SearchFromProcRadius;\n\t\t\tvar searchRadiusSquared = searchRadius * searchRadius;\n\t\t\t// Find any harvestable resources:\n\t\t\tList<CPos> path;\n\t\t\tusing (var search = PathSearch.Search(self.World, locomotorInfo, self, true, loc =>\n\t\t\t\t\tdomainIndex.IsPassable(self.Location, loc, locomotorInfo) && harv.CanHarvestCell(self, loc) && claimLayer.CanClaimCell(self, loc))\n\t\t\t\t.WithCustomCost(loc =>\n\t\t\t\t{\n\t\t\t\t\tif ((loc - searchFromLoc).LengthSquared > searchRadiusSquared)\n\t\t\t\t\t\treturn int.MaxValue;\n\t\t\t\t\treturn 0;\n\t\t\t\t})\n\t\t\t\t.FromPoint(searchFromLoc)\n\t\t\t\t.FromPoint(self.Location))\n\t\t\t\tpath = pathFinder.FindPath(search);\n", "answers": ["\t\t\tif (path.Count > 0)"], "length": 747, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "f964e1772f2adb4100531633f6287a54c98f80ddd622f9d8"}
{"input": "", "context": "\"\"\"\nBuilds out filesystem trees/data based on the object tree.\nThis is the code behind 'cobbler sync'.\nCopyright 2006-2009, Red Hat, Inc and Others\nMichael DeHaan <michael.dehaan AT gmail>\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n02110-1301  USA\n\"\"\"\nimport os\nimport os.path\nimport glob\nimport shutil\nimport time\nimport yaml # Howell-Clark version\nimport sys\nimport glob\nimport traceback\nimport errno\nimport utils\nfrom cexceptions import *\nimport templar \nimport pxegen\nimport item_distro\nimport item_profile\nimport item_repo\nimport item_system\nfrom Cheetah.Template import Template\nimport clogger\nfrom utils import _\nimport cobbler.module_loader as module_loader\nclass BootSync:\n    \"\"\"\n    Handles conversion of internal state to the tftpboot tree layout\n    \"\"\"\n    def __init__(self,config,verbose=True,dhcp=None,dns=None,logger=None,tftpd=None):\n        \"\"\"\n        Constructor\n        \"\"\"\n        self.logger         = logger\n        if logger is None:\n            self.logger     = clogger.Logger()\n        self.verbose      = verbose\n        self.config       = config\n        self.api          = config.api\n        self.distros      = config.distros()\n        self.profiles     = config.profiles()\n        self.systems      = config.systems()\n        self.settings     = config.settings()\n        self.repos        = config.repos()\n        self.templar      = templar.Templar(config, self.logger)\n        self.pxegen       = pxegen.PXEGen(config, self.logger)\n        self.dns          = dns\n        self.dhcp         = dhcp\n        self.tftpd        = tftpd\n        self.bootloc      = utils.tftpboot_location()\n        self.pxegen.verbose = verbose\n        self.dns.verbose    = verbose\n        self.dhcp.verbose   = verbose\n        self.pxelinux_dir = os.path.join(self.bootloc, \"pxelinux.cfg\")\n        self.grub_dir = os.path.join(self.bootloc, \"grub\")\n        self.images_dir = os.path.join(self.bootloc, \"images\")\n        self.yaboot_bin_dir = os.path.join(self.bootloc, \"ppc\")\n        self.yaboot_cfg_dir = os.path.join(self.bootloc, \"etc\")\n        self.s390_dir = os.path.join(self.bootloc, \"s390x\")\n        self.rendered_dir = os.path.join(self.settings.webdir, \"rendered\")\n    def run(self):\n        \"\"\"\n        Syncs the current configuration file with the config tree.\n        Using the Check().run_ functions previously is recommended\n        \"\"\"\n        if not os.path.exists(self.bootloc):\n            utils.die(self.logger,\"cannot find directory: %s\" % self.bootloc)\n        self.logger.info(\"running pre-sync triggers\")\n        # run pre-triggers...\n        utils.run_triggers(self.api, None, \"/var/lib/cobbler/triggers/sync/pre/*\")\n        self.distros  = self.config.distros()\n        self.profiles = self.config.profiles()\n        self.systems  = self.config.systems()\n        self.settings = self.config.settings()\n        self.repos    = self.config.repos()\n        # execute the core of the sync operation\n        self.logger.info(\"cleaning trees\")\n        self.clean_trees()\n        # Have the tftpd module handle copying bootloaders,\n        # distros, images, and all_system_files\n        self.tftpd.sync(self.verbose)\n        # Copy distros to the webdir\n        # Adding in the exception handling to not blow up if files have\n        # been moved (or the path references an NFS directory that's no longer\n        # mounted)\n\tfor d in self.distros:\n            try:\n                self.logger.info(\"copying files for distro: %s\" % d.name)\n                self.pxegen.copy_single_distro_files(d,\n                                                     self.settings.webdir,True)\n                self.pxegen.write_templates(d,write_file=True)\n            except CX, e:\n                self.logger.error(e.value)\n        # make the default pxe menu anyway...\n        self.pxegen.make_pxe_menu()\n        if self.settings.manage_dhcp:\n            self.write_dhcp()\n        if self.settings.manage_dns:\n            self.logger.info(\"rendering DNS files\")\n            self.dns.regen_hosts()\n            self.dns.write_dns_files()\n        if self.settings.manage_tftpd:\n           # xinetd.d/tftpd, basically\n           self.logger.info(\"rendering TFTPD files\")\n           self.tftpd.write_tftpd_files()\n           # copy in boot_files\n           self.tftpd.write_boot_files()\n        self.logger.info(\"cleaning link caches\")\n        self.clean_link_cache()\n        if self.settings.manage_rsync:\n           self.logger.info(\"rendering Rsync files\")\n           self.rsync_gen()\n        # run post-triggers\n        self.logger.info(\"running post-sync triggers\")\n        utils.run_triggers(self.api, None, \"/var/lib/cobbler/triggers/sync/post/*\", logger=self.logger)\n        utils.run_triggers(self.api, None, \"/var/lib/cobbler/triggers/change/*\", logger=self.logger)\n        return True\n    def make_tftpboot(self):\n        \"\"\"\n        Make directories for tftpboot images\n        \"\"\"\n        if not os.path.exists(self.pxelinux_dir):\n            utils.mkdir(self.pxelinux_dir,logger=self.logger)\n        if not os.path.exists(self.grub_dir):\n            utils.mkdir(self.grub_dir,logger=self.logger)\n        grub_images_link = os.path.join(self.grub_dir, \"images\")\n        if not os.path.exists(grub_images_link):\n            os.symlink(\"../images\", grub_images_link)\n        if not os.path.exists(self.images_dir):\n            utils.mkdir(self.images_dir,logger=self.logger)\n        if not os.path.exists(self.s390_dir):\n            utils.mkdir(self.s390_dir,logger=self.logger)\n        if not os.path.exists(self.rendered_dir):\n            utils.mkdir(self.rendered_dir,logger=self.logger)\n        if not os.path.exists(self.yaboot_bin_dir):\n            utils.mkdir(self.yaboot_bin_dir,logger=self.logger)\n        if not os.path.exists(self.yaboot_cfg_dir):\n            utils.mkdir(self.yaboot_cfg_dir,logger=self.logger)\n    def clean_trees(self):\n        \"\"\"\n        Delete any previously built pxelinux.cfg tree and virt tree info and then create\n        directories.\n        Note: for SELinux reasons, some information goes in /tftpboot, some in /var/www/cobbler\n        and some must be duplicated in both.  This is because PXE needs tftp, and auto-kickstart\n        and Virt operations need http.   Only the kernel and initrd images are duplicated, which is\n        unfortunate, though SELinux won't let me give them two contexts, so symlinks are not\n        a solution.  *Otherwise* duplication is minimal.\n        \"\"\"\n        # clean out parts of webdir and all of /tftpboot/images and /tftpboot/pxelinux.cfg\n        for x in os.listdir(self.settings.webdir):\n            path = os.path.join(self.settings.webdir,x)\n            if os.path.isfile(path):\n                if not x.endswith(\".py\"):\n                    utils.rmfile(path,logger=self.logger)\n            if os.path.isdir(path):\n                if not x in [\"aux\", \"web\", \"webui\", \"localmirror\",\"repo_mirror\",\"ks_mirror\",\"images\",\"links\",\"pub\",\"repo_profile\",\"repo_system\",\"svc\",\"rendered\",\".link_cache\"] :\n                    # delete directories that shouldn't exist\n                    utils.rmtree(path,logger=self.logger)\n                if x in [\"kickstarts\",\"kickstarts_sys\",\"images\",\"systems\",\"distros\",\"profiles\",\"repo_profile\",\"repo_system\",\"rendered\"]:\n                    # clean out directory contents\n                    utils.rmtree_contents(path,logger=self.logger)\n        #\n        self.make_tftpboot()\n        utils.rmtree_contents(self.pxelinux_dir,logger=self.logger)\n        utils.rmtree_contents(self.grub_dir,logger=self.logger)\n        utils.rmtree_contents(self.images_dir,logger=self.logger)\n        utils.rmtree_contents(self.s390_dir,logger=self.logger)\n        utils.rmtree_contents(self.yaboot_bin_dir,logger=self.logger)\n        utils.rmtree_contents(self.yaboot_cfg_dir,logger=self.logger)\n        utils.rmtree_contents(self.rendered_dir,logger=self.logger)\n    def write_dhcp(self):\n        self.logger.info(\"rendering DHCP files\")\n        self.dhcp.write_dhcp_file()\n        self.dhcp.regen_ethers()\n    def sync_dhcp(self):\n        restart_dhcp = str(self.settings.restart_dhcp).lower()\n        which_dhcp_module = module_loader.get_module_from_file(\"dhcp\",\"module\",just_name=True).strip()\n        if self.settings.manage_dhcp:\n            self.write_dhcp()\n            if which_dhcp_module == \"manage_isc\":\n                service_name = utils.dhcp_service_name(self.api)\n                if restart_dhcp != \"0\":\n                    rc = utils.subprocess_call(self.logger, \"dhcpd -t -q\", shell=True)\n                    if rc != 0:\n                       self.logger.error(\"dhcpd -t failed\")\n                       return False\n                    service_restart = \"service %s restart\" % service_name\n                    rc = utils.subprocess_call(self.logger, service_restart, shell=True)\n                    if rc != 0:\n", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "length": 750, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "3cc6d50befc6ded615d39d3b18b791d8f06b80ca3b2642b3"}
{"input": "", "context": "package org.yamcs.events;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.yamcs.yarch.protobuf.Db.Event;\nimport org.yamcs.protobuf.Yamcs.Event.EventSeverity;\n/**\n * Default implementation of an EventProducer that provides shortcut methods for sending message of different severity\n * types.\n */\npublic abstract class AbstractEventProducer implements EventProducer {\n    private static final Logger log = LoggerFactory.getLogger(EventProducer.class);\n    protected boolean logAllMessages = true;\n    String source;\n    AtomicInteger seqNo = new AtomicInteger();\n    private boolean repeatedEventReduction; // Whether to check for message repetitions\n    private Event originalEvent; // Original evt of a series of repeated events\n    private Event lastRepeat; // Last evt of a series of repeated events\n    private int repeatCounter = 0;\n    private long repeatedEventTimeout = 60000; // how long in milliseconds to buffer repeated events\n    // Flushes the Event Buffer about every minute\n    private Timer flusher;\n    @Override\n    public void setSource(String source) {\n        this.source = source;\n    }\n    @Override\n    public void setSeqNo(int sn) {\n        this.seqNo.set(sn);\n    }\n    @Override\n    public synchronized void sendError(String type, String msg) {\n        sendMessage(EventSeverity.ERROR, type, msg);\n    }\n    @Override\n    public synchronized void sendWarning(String type, String msg) {\n        sendMessage(EventSeverity.WARNING, type, msg);\n    }\n    @Override\n    public synchronized void sendInfo(String type, String msg) {\n        sendMessage(EventSeverity.INFO, type, msg);\n    }\n    @Override\n    public synchronized void sendWatch(String type, String msg) {\n        sendMessage(EventSeverity.WATCH, type, msg);\n    }\n    @Override\n    public synchronized void sendDistress(String type, String msg) {\n        sendMessage(EventSeverity.DISTRESS, type, msg);\n    }\n    @Override\n    public synchronized void sendCritical(String type, String msg) {\n        sendMessage(EventSeverity.CRITICAL, type, msg);\n    }\n    @Override\n    public synchronized void sendSevere(String type, String msg) {\n        sendMessage(EventSeverity.SEVERE, type, msg);\n    }\n    @Override\n    public void sendInfo(String msg) {\n        sendInfo(getInvokingClass(), msg);\n    }\n    @Override\n    public void sendWatch(String msg) {\n        sendWatch(getInvokingClass(), msg);\n    }\n    @Override\n    public void sendWarning(String msg) {\n        sendWarning(getInvokingClass(), msg);\n    }\n    @Override\n    public void sendCritical(String msg) {\n        sendCritical(getInvokingClass(), msg);\n    }\n    @Override\n    public void sendDistress(String msg) {\n        sendDistress(getInvokingClass(), msg);\n    }\n    @Override\n    public void sendSevere(String msg) {\n        sendSevere(getInvokingClass(), msg);\n    }\n    private String getInvokingClass() {\n        Throwable throwable = new Throwable();\n        String classname = throwable.getStackTrace()[2].getClassName();\n        int idx = classname.lastIndexOf('.');\n        return classname.substring(idx + 1);\n    }\n    private void sendMessage(EventSeverity severity, String type, String msg) {\n        if (logAllMessages) {\n            log.debug(\"event: {}; {}; {}\", severity, type, msg);\n        }\n        Event.Builder eventb = newEvent().setSeverity(severity).setMessage(msg);\n        if (type != null) {\n            eventb.setType(type);\n        }\n        Event e = eventb.build();\n        if (!repeatedEventReduction) {\n            sendEvent(e);\n        } else {\n            if (originalEvent == null) {\n                sendEvent(e);\n                originalEvent = e;\n            } else if (isRepeat(e)) {\n                if (flusher == null) { // Prevent buffering repeated events forever\n                    flusher = new Timer(true);\n                    flusher.scheduleAtFixedRate(new TimerTask() {\n                        @Override\n                        public void run() {\n                            flushEventBuffer(false);\n                        }\n                    }, repeatedEventTimeout, repeatedEventTimeout);\n                }\n                lastRepeat = e;\n                repeatCounter++;\n            } else { // No more repeats\n                if (flusher != null) {\n                    flusher.cancel();\n                    flusher = null;\n                }\n                flushEventBuffer(true);\n                sendEvent(e);\n                originalEvent = e;\n                lastRepeat = null;\n            }\n        }\n    }\n    /**\n     * By default event repetitions are checked for possible reduction. Disable if 'realtime' events are required.\n     */\n    @Override\n    public synchronized void setRepeatedEventReduction(boolean repeatedEventReduction,\n            long repeatedEventTimeoutMillisec) {\n        this.repeatedEventReduction = repeatedEventReduction;\n        this.repeatedEventTimeout = repeatedEventTimeoutMillisec;\n        if (!repeatedEventReduction) {\n            if (flusher != null) {\n                flusher.cancel();\n                flusher = null;\n            }\n            flushEventBuffer(true);\n        }\n    }\n    protected synchronized void flushEventBuffer(boolean startNewSequence) {\n        if (repeatCounter > 1) {\n            sendEvent(Event.newBuilder(lastRepeat)\n                    .setMessage(\"Repeated \" + repeatCounter + \" times: \" + lastRepeat.getMessage())\n                    .build());\n        } else if (repeatCounter == 1) {\n            sendEvent(lastRepeat);\n            lastRepeat = null;\n        }\n        if (startNewSequence) {\n            originalEvent = null;\n        }\n        repeatCounter = 0;\n    }\n    /**\n     * Checks whether the specified Event is a repeat of the previous Event.\n     */\n    private boolean isRepeat(Event e) {\n        if (originalEvent == e) {\n            return true;\n        }\n        return originalEvent.getMessage().equals(e.getMessage())\n                && originalEvent.getSeverity().equals(e.getSeverity())\n                && originalEvent.getSource().equals(e.getSource())\n                && originalEvent.hasType() == e.hasType()\n                && (!originalEvent.hasType() || originalEvent.getType().equals(e.getType()));\n    }\n    @Override\n    public Event.Builder newEvent() {\n", "answers": ["        long t = getMissionTime();"], "length": 575, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "7630f3d4fd6c44654c13b705304c20adea2cf0798b4dc72c"}
{"input": "", "context": "#region Using\nusing System;\nusing System.IO;\n#endregion\n// This is a port of Dmitry Shkarin's PPMd Variant I Revision 1.\n// Ported by Michael Bone (mjbone03@yahoo.com.au).\nnamespace SharpCompress.Compressors.PPMd.I1\n{\n    /// <summary>\n    /// The model.\n    /// </summary>\n    internal partial class Model\n    {\n        public const uint SIGNATURE = 0x84acaf8fU;\n        public const char VARIANT = 'I';\n        public const int MAXIMUM_ORDER = 16; // maximum allowed model order\n        private const byte UPPER_FREQUENCY = 5;\n        private const byte INTERVAL_BIT_COUNT = 7;\n        private const byte PERIOD_BIT_COUNT = 7;\n        private const byte TOTAL_BIT_COUNT = INTERVAL_BIT_COUNT + PERIOD_BIT_COUNT;\n        private const uint INTERVAL = 1 << INTERVAL_BIT_COUNT;\n        private const uint BINARY_SCALE = 1 << TOTAL_BIT_COUNT;\n        private const uint MAXIMUM_FREQUENCY = 124;\n        private const uint ORDER_BOUND = 9;\n        private readonly See2Context[,] _see2Contexts;\n        private readonly See2Context _emptySee2Context;\n        private PpmContext _maximumContext;\n        private readonly ushort[,] _binarySummary = new ushort[25, 64]; // binary SEE-contexts\n        private readonly byte[] _numberStatisticsToBinarySummaryIndex = new byte[256];\n        private readonly byte[] _probabilities = new byte[260];\n        private readonly byte[] _characterMask = new byte[256];\n        private byte _escapeCount;\n        private int _modelOrder;\n        private int _orderFall;\n        private int _initialEscape;\n        private int _initialRunLength;\n        private int _runLength;\n        private byte _previousSuccess;\n        private byte _numberMasked;\n        private ModelRestorationMethod _method;\n        private PpmState _foundState; // found next state transition\n        private Allocator _allocator;\n        private Coder _coder;\n        private PpmContext _minimumContext;\n        private byte _numberStatistics;\n        private readonly PpmState[] _decodeStates = new PpmState[256];\n        private static readonly ushort[] INITIAL_BINARY_ESCAPES =\n        {\n            0x3CDD, 0x1F3F, 0x59BF, 0x48F3, 0x64A1, 0x5ABC, 0x6632,\n            0x6051\n        };\n        private static readonly byte[] EXPONENTIAL_ESCAPES = {25, 14, 9, 7, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2};\n        #region Public Methods\n        public Model()\n        {\n            // Construct the conversion table for number statistics.  Initially it will contain the following values.\n            //\n            // 0 2 4 4 4 4 4 4 4 4 4 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n            // 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n            // 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n            // 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n            // 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n            // 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n            // 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n            // 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n            _numberStatisticsToBinarySummaryIndex[0] = 2 * 0;\n            _numberStatisticsToBinarySummaryIndex[1] = 2 * 1;\n            for (int index = 2; index < 11; index++)\n            {\n                _numberStatisticsToBinarySummaryIndex[index] = 2 * 2;\n            }\n            for (int index = 11; index < 256; index++)\n            {\n                _numberStatisticsToBinarySummaryIndex[index] = 2 * 3;\n            }\n            // Construct the probability table.  Initially it will contain the following values (depending on the value of\n            // the upper frequency).\n            //\n            // 00 01 02 03 04 05 06 06 07 07 07 08 08 08 08 09 09 09 09 09 10 10 10 10 10 10 11 11 11 11 11 11\n            // 11 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 15 15 15 15\n            // 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17\n            // 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 20 20 20\n            // 20 20 20 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 22 22\n            // 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23\n            // 23 23 23 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 25 25 25 25 25 25 25 25 25\n            // 25 25 25 25 25 25 25 25 25 25 25 25 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26\n            // 26 26 27 27\n            uint count = 1;\n            uint step = 1;\n            uint probability = UPPER_FREQUENCY;\n            for (int index = 0; index < UPPER_FREQUENCY; index++)\n            {\n                _probabilities[index] = (byte)index;\n            }\n            for (int index = UPPER_FREQUENCY; index < 260; index++)\n            {\n                _probabilities[index] = (byte)probability;\n                count--;\n                if (count == 0)\n                {\n                    step++;\n                    count = step;\n                    probability++;\n                }\n            }\n            // Create the context array.\n            _see2Contexts = new See2Context[24, 32];\n            for (int index1 = 0; index1 < 24; index1++)\n            {\n                for (int index2 = 0; index2 < 32; index2++)\n                {\n                    _see2Contexts[index1, index2] = new See2Context();\n                }\n            }\n            // Set the signature (identifying the algorithm).\n            _emptySee2Context = new See2Context();\n            _emptySee2Context._summary = (ushort)(SIGNATURE & 0x0000ffff);\n            _emptySee2Context._shift = (byte)((SIGNATURE >> 16) & 0x000000ff);\n            _emptySee2Context._count = (byte)(SIGNATURE >> 24);\n        }\n        /// <summary>\n        /// Encode (ie. compress) a given source stream, writing the encoded result to the target stream.\n        /// </summary>\n        public void Encode(Stream target, Stream source, PpmdProperties properties)\n        {\n            if (target == null)\n            {\n                throw new ArgumentNullException(nameof(target));\n            }\n            if (source == null)\n            {\n                throw new ArgumentNullException(nameof(source));\n            }\n            EncodeStart(properties);\n            EncodeBlock(target, source, true);\n        }\n        internal Coder EncodeStart(PpmdProperties properties)\n        {\n            _allocator = properties._allocator;\n            _coder = new Coder();\n            _coder.RangeEncoderInitialize();\n            StartModel(properties.ModelOrder, properties.RestorationMethod);\n            return _coder;\n        }\n        internal void EncodeBlock(Stream target, Stream source, bool final)\n        {\n            while (true)\n            {\n                _minimumContext = _maximumContext;\n                _numberStatistics = _minimumContext.NumberStatistics;\n                int c = source.ReadByte();\n                if (c < 0 && !final)\n                {\n                    return;\n                }\n                if (_numberStatistics != 0)\n                {\n                    EncodeSymbol1(c, _minimumContext);\n                    _coder.RangeEncodeSymbol();\n                }\n                else\n                {\n                    EncodeBinarySymbol(c, _minimumContext);\n                    _coder.RangeShiftEncodeSymbol(TOTAL_BIT_COUNT);\n                }\n                while (_foundState == PpmState.ZERO)\n                {\n                    _coder.RangeEncoderNormalize(target);\n                    do\n                    {\n                        _orderFall++;\n                        _minimumContext = _minimumContext.Suffix;\n                        if (_minimumContext == PpmContext.ZERO)\n                        {\n                            goto StopEncoding;\n                        }\n                    }\n                    while (_minimumContext.NumberStatistics == _numberMasked);\n                    EncodeSymbol2(c, _minimumContext);\n                    _coder.RangeEncodeSymbol();\n                }\n                if (_orderFall == 0 && (Pointer)_foundState.Successor >= _allocator._baseUnit)\n                {\n                    _maximumContext = _foundState.Successor;\n                }\n                else\n                {\n                    UpdateModel(_minimumContext);\n                    if (_escapeCount == 0)\n                    {\n                        ClearMask();\n                    }\n                }\n                _coder.RangeEncoderNormalize(target);\n            }\n            StopEncoding:\n            _coder.RangeEncoderFlush(target);\n        }\n        /// <summary>\n        /// Dencode (ie. decompress) a given source stream, writing the decoded result to the target stream.\n        /// </summary>\n        public void Decode(Stream target, Stream source, PpmdProperties properties)\n        {\n            if (target == null)\n            {\n                throw new ArgumentNullException(nameof(target));\n            }\n            if (source == null)\n            {\n                throw new ArgumentNullException(nameof(source));\n            }\n            DecodeStart(source, properties);\n            byte[] buffer = new byte[65536];\n            int read;\n            while ((read = DecodeBlock(source, buffer, 0, buffer.Length)) != 0)\n            {\n                target.Write(buffer, 0, read);\n            }\n        }\n        internal Coder DecodeStart(Stream source, PpmdProperties properties)\n        {\n            _allocator = properties._allocator;\n            _coder = new Coder();\n            _coder.RangeDecoderInitialize(source);\n            StartModel(properties.ModelOrder, properties.RestorationMethod);\n            _minimumContext = _maximumContext;\n            _numberStatistics = _minimumContext.NumberStatistics;\n            return _coder;\n        }\n        internal int DecodeBlock(Stream source, byte[] buffer, int offset, int count)\n        {\n            if (_minimumContext == PpmContext.ZERO)\n            {\n                return 0;\n            }\n            int total = 0;\n            while (total < count)\n            {\n                if (_numberStatistics != 0)\n                {\n                    DecodeSymbol1(_minimumContext);\n                }\n                else\n                {\n                    DecodeBinarySymbol(_minimumContext);\n                }\n                _coder.RangeRemoveSubrange();\n                while (_foundState == PpmState.ZERO)\n                {\n                    _coder.RangeDecoderNormalize(source);\n                    do\n                    {\n                        _orderFall++;\n                        _minimumContext = _minimumContext.Suffix;\n                        if (_minimumContext == PpmContext.ZERO)\n                        {\n                            goto StopDecoding;\n                        }\n                    }\n                    while (_minimumContext.NumberStatistics == _numberMasked);\n                    DecodeSymbol2(_minimumContext);\n                    _coder.RangeRemoveSubrange();\n                }\n                buffer[offset] = _foundState.Symbol;\n                offset++;\n                total++;\n                if (_orderFall == 0 && (Pointer)_foundState.Successor >= _allocator._baseUnit)\n                {\n                    _maximumContext = _foundState.Successor;\n                }\n                else\n                {\n                    UpdateModel(_minimumContext);\n                    if (_escapeCount == 0)\n                    {\n                        ClearMask();\n                    }\n                }\n                _minimumContext = _maximumContext;\n                _numberStatistics = _minimumContext.NumberStatistics;\n                _coder.RangeDecoderNormalize(source);\n            }\n            StopDecoding:\n            return total;\n        }\n        #endregion\n        #region Private Methods\n        /// <summary>\n        /// Initialise the model (unless the model order is set to 1 in which case the model should be cleared so that\n        /// the statistics are carried over, allowing \"solid\" mode compression).\n        /// </summary>\n        private void StartModel(int modelOrder, ModelRestorationMethod modelRestorationMethod)\n        {\n            Array.Clear(_characterMask, 0, _characterMask.Length);\n            _escapeCount = 1;\n            // Compress in \"solid\" mode if the model order value is set to 1 (this will examine the current PPM context\n            // structures to determine the value of orderFall).\n            if (modelOrder < 2)\n            {\n                _orderFall = _modelOrder;\n                for (PpmContext context = _maximumContext; context.Suffix != PpmContext.ZERO; context = context.Suffix)\n                {\n                    _orderFall--;\n                }\n                return;\n            }\n            _modelOrder = modelOrder;\n            _orderFall = modelOrder;\n            _method = modelRestorationMethod;\n            _allocator.Initialize();\n            _initialRunLength = -((modelOrder < 12) ? modelOrder : 12) - 1;\n            _runLength = _initialRunLength;\n            // Allocate the context structure.\n            _maximumContext = _allocator.AllocateContext();\n            _maximumContext.Suffix = PpmContext.ZERO;\n            _maximumContext.NumberStatistics = 255;\n            _maximumContext.SummaryFrequency = (ushort)(_maximumContext.NumberStatistics + 2);\n            _maximumContext.Statistics = _allocator.AllocateUnits(256 / 2);\n            // allocates enough space for 256 PPM states (each is 6 bytes)\n            _previousSuccess = 0;\n            for (int index = 0; index < 256; index++)\n            {\n                PpmState state = _maximumContext.Statistics[index];\n                state.Symbol = (byte)index;\n                state.Frequency = 1;\n                state.Successor = PpmContext.ZERO;\n            }\n            uint probability = 0;\n            for (int index1 = 0; probability < 25; probability++)\n            {\n                while (_probabilities[index1] == probability)\n                {\n                    index1++;\n                }\n                for (int index2 = 0; index2 < 8; index2++)\n                {\n                    _binarySummary[probability, index2] =\n                        (ushort)(BINARY_SCALE - INITIAL_BINARY_ESCAPES[index2] / (index1 + 1));\n                }\n                for (int index2 = 8; index2 < 64; index2 += 8)\n                {\n                    for (int index3 = 0; index3 < 8; index3++)\n                    {\n                        _binarySummary[probability, index2 + index3] = _binarySummary[probability, index3];\n                    }\n                }\n            }\n            probability = 0;\n            for (uint index1 = 0; probability < 24; probability++)\n            {\n                while (_probabilities[index1 + 3] == probability + 3)\n                {\n                    index1++;\n                }\n                for (int index2 = 0; index2 < 32; index2++)\n                {\n                    _see2Contexts[probability, index2].Initialize(2 * index1 + 5);\n                }\n            }\n        }\n        private void UpdateModel(PpmContext minimumContext)\n        {\n            PpmState state = PpmState.ZERO;\n            PpmContext successor;\n            PpmContext currentContext = _maximumContext;\n            uint numberStatistics;\n            uint ns1;\n            uint cf;\n            uint sf;\n            uint s0;\n            uint foundStateFrequency = _foundState.Frequency;\n            byte foundStateSymbol = _foundState.Symbol;\n            byte symbol;\n            byte flag;\n            PpmContext foundStateSuccessor = _foundState.Successor;\n            PpmContext context = minimumContext.Suffix;\n            if ((foundStateFrequency < MAXIMUM_FREQUENCY / 4) && (context != PpmContext.ZERO))\n            {\n                if (context.NumberStatistics != 0)\n                {\n                    state = context.Statistics;\n                    if (state.Symbol != foundStateSymbol)\n                    {\n                        do\n                        {\n                            symbol = state[1].Symbol;\n                            state++;\n                        }\n                        while (symbol != foundStateSymbol);\n                        if (state[0].Frequency >= state[-1].Frequency)\n                        {\n                            Swap(state[0], state[-1]);\n                            state--;\n                        }\n                    }\n                    cf = (uint)((state.Frequency < MAXIMUM_FREQUENCY - 9) ? 2 : 0);\n                    state.Frequency += (byte)cf;\n                    context.SummaryFrequency += (byte)cf;\n                }\n                else\n                {\n                    state = context.FirstState;\n                    state.Frequency += (byte)((state.Frequency < 32) ? 1 : 0);\n                }\n            }\n            if (_orderFall == 0 && foundStateSuccessor != PpmContext.ZERO)\n            {\n                _foundState.Successor = CreateSuccessors(true, state, minimumContext);\n                if (_foundState.Successor == PpmContext.ZERO)\n                {\n                    goto RestartModel;\n                }\n                _maximumContext = _foundState.Successor;\n                return;\n            }\n            _allocator._text[0] = foundStateSymbol;\n            _allocator._text++;\n            successor = _allocator._text;\n            if (_allocator._text >= _allocator._baseUnit)\n            {\n                goto RestartModel;\n            }\n            if (foundStateSuccessor != PpmContext.ZERO)\n            {\n                if (foundStateSuccessor < _allocator._baseUnit)\n                {\n                    foundStateSuccessor = CreateSuccessors(false, state, minimumContext);\n                }\n            }\n            else\n            {\n                foundStateSuccessor = ReduceOrder(state, minimumContext);\n            }\n            if (foundStateSuccessor == PpmContext.ZERO)\n            {\n                goto RestartModel;\n            }\n            if (--_orderFall == 0)\n            {\n                successor = foundStateSuccessor;\n                _allocator._text -= (_maximumContext != minimumContext) ? 1 : 0;\n            }\n            else if (_method > ModelRestorationMethod.Freeze)\n            {\n                successor = foundStateSuccessor;\n                _allocator._text = _allocator._heap;\n                _orderFall = 0;\n            }\n            numberStatistics = minimumContext.NumberStatistics;\n            s0 = minimumContext.SummaryFrequency - numberStatistics - foundStateFrequency;\n            flag = (byte)((foundStateSymbol >= 0x40) ? 0x08 : 0x00);\n            for (; currentContext != minimumContext; currentContext = currentContext.Suffix)\n            {\n                ns1 = currentContext.NumberStatistics;\n                if (ns1 != 0)\n                {\n                    if ((ns1 & 1) != 0)\n                    {\n                        state = _allocator.ExpandUnits(currentContext.Statistics, (ns1 + 1) >> 1);\n                        if (state == PpmState.ZERO)\n                        {\n                            goto RestartModel;\n                        }\n                        currentContext.Statistics = state;\n                    }\n                    currentContext.SummaryFrequency += (ushort)((3 * ns1 + 1 < numberStatistics) ? 1 : 0);\n                }\n                else\n                {\n                    state = _allocator.AllocateUnits(1);\n                    if (state == PpmState.ZERO)\n                    {\n                        goto RestartModel;\n                    }\n                    Copy(state, currentContext.FirstState);\n                    currentContext.Statistics = state;\n                    if (state.Frequency < MAXIMUM_FREQUENCY / 4 - 1)\n                    {\n                        state.Frequency += state.Frequency;\n                    }\n                    else\n                    {\n                        state.Frequency = (byte)(MAXIMUM_FREQUENCY - 4);\n                    }\n                    currentContext.SummaryFrequency =\n                        (ushort)(state.Frequency + _initialEscape + ((numberStatistics > 2) ? 1 : 0));\n                }\n                cf = (uint)(2 * foundStateFrequency * (currentContext.SummaryFrequency + 6));\n                sf = s0 + currentContext.SummaryFrequency;\n                if (cf < 6 * sf)\n                {\n                    cf = (uint)(1 + ((cf > sf) ? 1 : 0) + ((cf >= 4 * sf) ? 1 : 0));\n                    currentContext.SummaryFrequency += 4;\n                }\n                else\n                {\n                    cf = (uint)(4 + ((cf > 9 * sf) ? 1 : 0) + ((cf > 12 * sf) ? 1 : 0) + ((cf > 15 * sf) ? 1 : 0));\n                    currentContext.SummaryFrequency += (ushort)cf;\n                }\n                state = currentContext.Statistics + (++currentContext.NumberStatistics);\n                state.Successor = successor;\n                state.Symbol = foundStateSymbol;\n                state.Frequency = (byte)cf;\n                currentContext.Flags |= flag;\n            }\n            _maximumContext = foundStateSuccessor;\n            return;\n            RestartModel:\n            RestoreModel(currentContext, minimumContext, foundStateSuccessor);\n        }\n        private PpmContext CreateSuccessors(bool skip, PpmState state, PpmContext context)\n        {\n            PpmContext upBranch = _foundState.Successor;\n            PpmState[] states = new PpmState[MAXIMUM_ORDER];\n            uint stateIndex = 0;\n            byte symbol = _foundState.Symbol;\n            if (!skip)\n            {\n                states[stateIndex++] = _foundState;\n                if (context.Suffix == PpmContext.ZERO)\n                {\n                    goto NoLoop;\n                }\n            }\n            bool gotoLoopEntry = false;\n", "answers": ["            if (state != PpmState.ZERO)"], "length": 2203, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "6cc90781be873e3f526e24b432fa2997332f4aef86d6a696"}
{"input": "", "context": "#region License\n// Copyright (c) 2013, ClearCanvas Inc.\n// All rights reserved.\n// http://www.clearcanvas.ca\n//\n// This file is part of the ClearCanvas RIS/PACS open source project.\n//\n// The ClearCanvas RIS/PACS open source project is free software: you can\n// redistribute it and/or modify it under the terms of the GNU General Public\n// License as published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// The ClearCanvas RIS/PACS open source project is distributed in the hope that it\n// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along with\n// the ClearCanvas RIS/PACS open source project.  If not, see\n// <http://www.gnu.org/licenses/>.\n#endregion\nusing System;\nusing System.Collections.Generic;\nusing ClearCanvas.Dicom.IO;\nnamespace ClearCanvas.Dicom\n{\n    /// <summary>\n    /// Class encapsulating a DICOM Value Representation.\n    /// </summary>\n    public class DicomVr\n    {\n        private delegate DicomAttribute CreateAttribute(DicomTag tag, ByteBuffer bb);\n        #region Private Members\n        private readonly String _name;\n        private readonly bool _isText = false;\n        private readonly bool _specificCharSet = false;\n        private readonly bool _isMultiValue = false;\n        private readonly uint _maxLength = 0;\n        private readonly bool _is16BitLength = false;\n        private readonly char _padChar = ' ';\n        private readonly int _unitSize = 1;\n        private readonly CreateAttribute _createDelegate;\n        private static readonly IDictionary<String,DicomVr> _vrs = new Dictionary<String,DicomVr>();\n        #endregion\n        #region Public Static Members\n        /// <summary>\n        /// Static constructor.\n        /// </summary>\n        static DicomVr()\n        {\n            _vrs.Add(AEvr.Name, AEvr);\n            _vrs.Add(ASvr.Name, ASvr);\n            _vrs.Add(ATvr.Name, ATvr);\n            _vrs.Add(CSvr.Name, CSvr);\n            _vrs.Add(DAvr.Name, DAvr);\n            _vrs.Add(DSvr.Name, DSvr);\n            _vrs.Add(DTvr.Name, DTvr);\n            _vrs.Add(FLvr.Name, FLvr);\n            _vrs.Add(FDvr.Name, FDvr);\n            _vrs.Add(ISvr.Name, ISvr);\n            _vrs.Add(LOvr.Name, LOvr);\n            _vrs.Add(LTvr.Name, LTvr);\n            _vrs.Add(OBvr.Name, OBvr);\n            _vrs.Add(ODvr.Name, ODvr);\n            _vrs.Add(OFvr.Name, OFvr);\n            _vrs.Add(OWvr.Name, OWvr);\n            _vrs.Add(PNvr.Name, PNvr);\n            _vrs.Add(SHvr.Name, SHvr);\n            _vrs.Add(SLvr.Name, SLvr);\n            _vrs.Add(SQvr.Name, SQvr);\n            _vrs.Add(SSvr.Name, SSvr);\n            _vrs.Add(STvr.Name, STvr);\n            _vrs.Add(TMvr.Name, TMvr);\n            _vrs.Add(UIvr.Name, UIvr);\n            _vrs.Add(ULvr.Name, ULvr);\n            _vrs.Add(USvr.Name, USvr);\n            _vrs.Add(UTvr.Name, UTvr);\n        }\n        /// <summary>\n        /// The Application Entity VR.\n        /// </summary>\n        public static readonly DicomVr AEvr = new DicomVr(\"AE\", true, false, true, 16, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeAE(tag);\n                return new DicomAttributeAE(tag, bb);\n            } );\n        /// <summary>\n        /// The Age String VR.\n        /// </summary>\n        public static readonly DicomVr ASvr = new DicomVr(\"AS\", true, false, true, 4, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeAS(tag);\n                return new DicomAttributeAS(tag, bb);\n            });\n        /// <summary>\n        /// The Attribute Tag VR.\n        /// </summary>\n        public static readonly DicomVr ATvr = new DicomVr(\"AT\", false, false, true, 4, true, '\\0', 4,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeAT(tag);\n                return new DicomAttributeAT(tag, bb);\n            });\n        /// <summary>\n        /// The Code String VR.\n        /// </summary>\n        public static readonly DicomVr CSvr = new DicomVr(\"CS\", true, false, true, 16, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeCS(tag);\n                return new DicomAttributeCS(tag, bb);\n            });\n        /// <summary>\n        /// The Date VR.\n        /// </summary>\n        public static readonly DicomVr DAvr = new DicomVr(\"DA\", true, false, true, 8, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeDA(tag);\n                return new DicomAttributeDA(tag, bb);\n            });\n        /// <summary>\n        /// The Decimal String VR.\n        /// </summary>\n        public static readonly DicomVr DSvr = new DicomVr(\"DS\", true, false, true, 16, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeDS(tag);\n                return new DicomAttributeDS(tag, bb);\n            });\n        /// <summary>\n        /// The Date Time VR.\n        /// </summary>\n        public static readonly DicomVr DTvr = new DicomVr(\"DT\", true, false, true, 26, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeDT(tag);\n                return new DicomAttributeDT(tag, bb);\n            });\n        /// <summary>\n        /// The Floating Point Single VR.\n        /// </summary>\n        public static readonly DicomVr FLvr = new DicomVr(\"FL\", false, false, true, 4, true, '\\0', 4,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeFL(tag);\n                return new DicomAttributeFL(tag, bb);\n            });\n        /// <summary>\n        /// The Floating Point Double VR.\n        /// </summary>\n        public static readonly DicomVr FDvr = new DicomVr(\"FD\", false, false, true, 8, true, '\\0', 8,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeFD(tag);\n                return new DicomAttributeFD(tag, bb);\n            });\n        /// <summary>\n        /// The Integer String VR.\n        /// </summary>\n        public static readonly DicomVr ISvr = new DicomVr(\"IS\", true, false, true, 12, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeIS(tag);\n                return new DicomAttributeIS(tag, bb);\n            });\n        /// <summary>\n        /// The Long String VR.\n        /// </summary>\n        public static readonly DicomVr LOvr = new DicomVr(\"LO\", true, true, true, 64, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeLO(tag);\n                return new DicomAttributeLO(tag, bb);\n            });\n        /// <summary>\n        /// The Long Text VR.\n        /// </summary>\n        public static readonly DicomVr LTvr = new DicomVr(\"LT\", true, true, false, 10240, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeLT(tag);\n                return new DicomAttributeLT(tag, bb);\n            });\n        /// <summary>\n        /// The Other Byte String VR.\n        /// </summary>\n        public static readonly DicomVr OBvr = new DicomVr(\"OB\", false, false, false, 1, false, '\\0', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeOB(tag);\n                return new DicomAttributeOB(tag, bb);\n            });\n        /// <summary>\n        /// The Other Double String VR.\n        /// </summary>\n        public static readonly DicomVr ODvr = new DicomVr(\"OD\", false, false, false, 8, false, '\\0', 8,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeOD(tag);\n                return new DicomAttributeOD(tag, bb);\n            });\n        /// <summary>\n        /// The Other Float String VR.\n        /// </summary>\n        public static readonly DicomVr OFvr = new DicomVr(\"OF\", false, false, false, 4, false, '\\0', 4,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeOF(tag);\n                return new DicomAttributeOF(tag, bb);\n            });\n        /// <summary>\n        /// The Other Word String VR.\n        /// </summary>\n        public static readonly DicomVr OWvr = new DicomVr(\"OW\", false, false, false, 2, false, '\\0', 2,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeOW(tag);\n                return new DicomAttributeOW(tag, bb);\n            });\n        /// <summary>\n        /// The Person Name VR.\n        /// </summary>\n        public static readonly DicomVr PNvr = new DicomVr(\"PN\", true, true, true, 64 * 5, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributePN(tag);\n                return new DicomAttributePN(tag, bb);\n            });\n        /// <summary>\n        /// The Short String VR.\n        /// </summary>\n        public static readonly DicomVr SHvr = new DicomVr(\"SH\", true, true, true, 16, true, ' ', 1,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeSH(tag);\n                return new DicomAttributeSH(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Long VR.\n        /// </summary>\n        public static readonly DicomVr SLvr = new DicomVr(\"SL\", false, false, true, 4, true, '\\0', 4,\n            delegate(DicomTag tag, ByteBuffer bb)\n            {\n                if (bb == null) return new DicomAttributeSL(tag);\n", "answers": ["                return new DicomAttributeSL(tag, bb);"], "length": 1113, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "b6d055c89ca6a6c261a27807c672673ece45777ad9806d2e"}
{"input": "", "context": "/*\n * This file is part of ChronoJump\n *\n * ChronoJump is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or   \n *    (at your option) any later version.\n *    \n * ChronoJump is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the \n *    GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n *  along with this program; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Copyright (C) 2004-2021   Xavier de Blas <xaviblas@gmail.com>\n */\nusing System;\nusing Gdk;\nusing Gtk;\nusing Glade;\nusing System.Text; //StringBuilder\nusing System.Collections; //ArrayList\nusing System.Collections.Generic; //List<>\nusing System.IO;\nusing System.Threading;\nusing Mono.Unix;\n//--------------------------------------------------------\n//---------------- EDIT EVENT WIDGET ---------------------\n//--------------------------------------------------------\npublic class EditEventWindow \n{\n\t[Widget] protected Gtk.Window edit_event;\n\tprotected bool weightPercentPreferred;\n\t[Widget] protected Gtk.Button button_accept;\n\t[Widget] protected Gtk.Label label_header;\n\t[Widget] protected Gtk.Label label_type_title;\n\t[Widget] protected Gtk.Label label_type_value;\n\t[Widget] protected Gtk.Label label_run_start_title;\n\t[Widget] protected Gtk.Label label_run_start_value;\n\t[Widget] protected Gtk.Label label_event_id_value;\n\t[Widget] protected Gtk.Label label_tv_title;\n\t[Widget] protected Gtk.Entry entry_tv_value;\n\t[Widget] protected Gtk.Label label_tv_units;\n\t[Widget] protected Gtk.Label label_tc_title;\n\t[Widget] protected Gtk.Entry entry_tc_value;\n\t[Widget] protected Gtk.Label label_tc_units;\n\t[Widget] protected Gtk.Label label_fall_title;\n\t[Widget] protected Gtk.Entry entry_fall_value;\n\t[Widget] protected Gtk.Label label_fall_units;\n\t[Widget] protected Gtk.Label label_distance_title;\n\t[Widget] protected Gtk.Entry entry_distance_value;\n\t[Widget] protected Gtk.Label label_distance_units;\n\t[Widget] protected Gtk.Label label_time_title;\n\t[Widget] protected Gtk.Entry entry_time_value;\n\t[Widget] protected Gtk.Label label_time_units;\n\t[Widget] protected Gtk.Label label_speed_title;\n\t[Widget] protected Gtk.Label label_speed_value;\n\t[Widget] protected Gtk.Label label_speed_units;\n\t[Widget] protected Gtk.Label label_weight_title;\n\t[Widget] protected Gtk.Entry entry_weight_value;\n\t[Widget] protected Gtk.Label label_weight_units;\n\t[Widget] protected Gtk.Label label_limited_title;\n\t[Widget] protected Gtk.Label label_limited_value;\n\t//[Widget] protected Gtk.Label label_angle_title; //kneeAngle\n\t//[Widget] protected Gtk.Entry entry_angle_value; //kneeAngle\n\t//[Widget] protected Gtk.Label label_angle_units; //kneeAngle\n\t[Widget] protected Gtk.Label label_simulated;\n\t\n\t[Widget] protected Gtk.Box hbox_combo_eventType;\n\t[Widget] protected Gtk.ComboBox combo_eventType;\n\t[Widget] protected Gtk.Box hbox_combo_person;\n\t[Widget] protected Gtk.ComboBox combo_persons;\n\t\n\t[Widget] protected Gtk.Label label_mistakes;\n\t[Widget] protected Gtk.SpinButton spin_mistakes;\n\t[Widget] protected Gtk.Label label_video_yes_no;\n\t[Widget] protected Gtk.Button button_video_watch;\n\t[Widget] protected Gtk.Image image_video_watch;\n\t[Widget] protected Gtk.Button button_video_url;\n\tprotected string videoFileName = \"\";\n\t\n\t[Widget] protected Gtk.Entry entry_description;\n\t//[Widget] protected Gtk.TextView textview_description;\n\tstatic EditEventWindow EditEventWindowBox;\n\tprotected Gtk.Window parent;\n\tprotected int pDN;\n\tprotected bool metersSecondsPreferred;\n\tprotected string type;\n\tprotected string entryTv; //contains a entry that is a Number. If changed the entry as is not a number, recuperate this\n\tprotected string entryTc = \"0\";\n\tprotected string entryFall = \"0\"; \n\tprotected string entryDistance = \"0\";\n\tprotected string entryTime = \"0\";\n\tprotected string entrySpeed = \"0\";\n\tprotected string entryWeight = \"0\"; //used to record the % for old person if we change it\n\t//protected string entryAngle = \"0\"; //kneeAngle\n\tprotected Constants.TestTypes typeOfTest;\n\tprotected bool showType;\n\tprotected bool showRunStart;\n\tprotected bool showTv;\n\tprotected bool showTc;\n\tprotected bool showFall;\n\tprotected bool showDistance;\n\tprotected bool distanceCanBeDecimal;\n\tprotected bool showTime;\n\tprotected bool showSpeed;\n\tprotected bool showWeight;\n\tprotected bool showLimited;\n\t//protected bool showAngle; //kneeAngle\n\tprotected bool showMistakes;\n\tprotected string eventBigTypeString = \"a test\";\n\tprotected bool headerShowDecimal = true;\n\tprotected int oldPersonID; //used to record the % for old person if we change it\n\t//for inheritance\n\tprotected EditEventWindow () {\n\t}\n\tEditEventWindow (Gtk.Window parent) {\n\t\t//Glade.XML gladeXML;\n\t\t//gladeXML = Glade.XML.FromAssembly (Util.GetGladePath() + \"edit_event.glade\", \"edit_event\", null);\n\t\t//gladeXML.Autoconnect(this);\n\t\tthis.parent = parent;\n\t}\n\tstatic public EditEventWindow Show (Gtk.Window parent, Event myEvent, int pDN)\n\t\t//run win have also metersSecondsPreferred\n\t{\n\t\tif (EditEventWindowBox == null) {\n\t\t\tEditEventWindowBox = new EditEventWindow (parent);\n\t\t}\n\t\n\t\tEditEventWindowBox.pDN = pDN;\n\t\t\n\t\tEditEventWindowBox.initializeValues();\n\t\tEditEventWindowBox.fillDialog (myEvent);\n\t\tEditEventWindowBox.edit_event.Show ();\n\t\treturn EditEventWindowBox;\n\t}\n\tprotected virtual void initializeValues () {\n\t\ttypeOfTest = Constants.TestTypes.JUMP;\n\t\tshowType = true;\n\t\tshowRunStart = false;\n\t\tshowTv = true;\n\t\tshowTc = true;\n\t\tshowFall = true;\n\t\tshowDistance = true;\n\t\tdistanceCanBeDecimal = true;\n\t\tshowTime = true;\n\t\tshowSpeed = true;\n\t\tshowWeight = true;\n\t\tshowLimited = true;\n\t\t//showAngle = true; //kneeAngle\n\t\tshowMistakes = false;\n\t\tlabel_simulated.Hide();\n\t}\n\tprotected void fillDialog (Event myEvent)\n\t{\n\t\tfillWindowTitleAndLabelHeader();\n\t\timage_video_watch.Pixbuf = new Pixbuf (null, Util.GetImagePath(false) + \"video_play.png\");\n\t\tstring id = myEvent.UniqueID.ToString();\n\t\tif(myEvent.Simulated == Constants.Simulated) \n\t\t\tlabel_simulated.Show();\n\t\t\n\t\tlabel_event_id_value.Text = id;\n\t\tlabel_event_id_value.UseMarkup = true;\n\t\tif(showTv)\n\t\t\tfillTv(myEvent);\n\t\telse { \n\t\t\tlabel_tv_title.Hide();\n\t\t\tentry_tv_value.Hide();\n\t\t\tlabel_tv_units.Hide();\n\t\t}\n\t\tif(showTc)\n\t\t\tfillTc(myEvent);\n\t\telse { \n\t\t\tlabel_tc_title.Hide();\n\t\t\tentry_tc_value.Hide();\n\t\t\tlabel_tc_units.Hide();\n\t\t}\n\t\tif(showFall)\n\t\t\tfillFall(myEvent);\n\t\telse { \n\t\t\tlabel_fall_title.Hide();\n\t\t\tentry_fall_value.Hide();\n\t\t\tlabel_fall_units.Hide();\n\t\t}\n\t\tif(showDistance)\n\t\t\tfillDistance(myEvent);\n\t\telse { \n\t\t\tlabel_distance_title.Hide();\n\t\t\tentry_distance_value.Hide();\n\t\t\tlabel_distance_units.Hide();\n\t\t}\n\t\tif(showTime)\n\t\t\tfillTime(myEvent);\n\t\telse { \n\t\t\tlabel_time_title.Hide();\n\t\t\tentry_time_value.Hide();\n\t\t\tlabel_time_units.Hide();\n\t\t}\n\t\tif(showSpeed)\n\t\t\tfillSpeed(myEvent);\n\t\telse { \n\t\t\tlabel_speed_title.Hide();\n\t\t\tlabel_speed_value.Hide();\n\t\t\tlabel_speed_units.Hide();\n\t\t}\n\t\tif(showWeight)\n\t\t\tfillWeight(myEvent);\n\t\telse { \n\t\t\tlabel_weight_title.Hide();\n\t\t\tentry_weight_value.Hide();\n\t\t\tlabel_weight_units.Hide();\n\t\t}\n\t\tif(showLimited)\n\t\t\tfillLimited(myEvent);\n\t\telse { \n\t\t\tlabel_limited_title.Hide();\n\t\t\tlabel_limited_value.Hide();\n\t\t}\n\t\t/*\n\t\tif(showAngle)\n\t\t\tfillAngle(myEvent);\n\t\telse { \n\t\t\tlabel_angle_title.Hide();\n\t\t\tentry_angle_value.Hide();\n\t\t\tlabel_angle_units.Hide();\n\t\t}\n\t\t*/\n\t\tif(! showMistakes) {\n\t\t\tlabel_mistakes.Hide();\n\t\t\tspin_mistakes.Hide();\n\t\t}\n\t\t//also remove new line for old descriptions that used a textview\n\t\tstring temp = Util.RemoveTildeAndColonAndDot(myEvent.Description);\n\t\tentry_description.Text = Util.RemoveNewLine(temp, true);\n\t\tcreateComboEventType(myEvent);\n\t\t\n\t\tif(! showType) {\n\t\t\tlabel_type_title.Hide();\n\t\t\tcombo_eventType.Hide();\n\t\t}\n\t\t\n\t\tif(showRunStart) \n\t\t\tfillRunStart(myEvent);\n\t\telse {\n\t\t\tlabel_run_start_title.Hide();\n\t\t\tlabel_run_start_value.Hide();\n\t\t}\n\t\tArrayList persons = SqlitePersonSession.SelectCurrentSessionPersons(\n\t\t\t\tmyEvent.SessionID,\n\t\t\t\tfalse); //means: do not returnPersonAndPSlist\n\t\tstring [] personsStrings = new String[persons.Count];\n\t\tint i=0;\n\t\tforeach (Person person in persons) \n\t\t\tpersonsStrings[i++] = person.IDAndName(\":\");\n\t\tcombo_persons = ComboBox.NewText();\n\t\tUtilGtk.ComboUpdate(combo_persons, personsStrings, \"\");\n\t\tcombo_persons.Active = UtilGtk.ComboMakeActive(personsStrings, myEvent.PersonID + \":\" + myEvent.PersonName);\n\t\t\n\t\toldPersonID = myEvent.PersonID;\n\t\t\t\n\t\thbox_combo_person.PackStart(combo_persons, true, true, 0);\n\t\thbox_combo_person.ShowAll();\n\t\t//show video if available\t\n\t\tvideoFileName = Util.GetVideoFileName(myEvent.SessionID, typeOfTest, myEvent.UniqueID);\n\t\tif(File.Exists(videoFileName)) {\n\t\t\tlabel_video_yes_no.Text = Catalog.GetString(\"Yes\");\n\t\t\tbutton_video_watch.Sensitive = true;\n\t\t\tbutton_video_url.Sensitive = true;\n\t\t} else {\n\t\t\tlabel_video_yes_no.Text = Catalog.GetString(\"No\");\n\t\t\tbutton_video_watch.Sensitive = false;\n\t\t\tbutton_video_url.Sensitive = false;\n\t\t}\n\t}\n\tprivate void on_button_video_watch_clicked (object o, EventArgs args)\n\t{\n\t\tif(File.Exists(videoFileName))\n\t\t{\n\t\t\tLogB.Information(\"Exists and clicked \" + videoFileName);\n\t\t\t/*\n\t\t\t * using mplayer\n\t\t\t *\n\t\t\t * Webcam webcam = new WebcamMplayer ();\n\t\t\t * Webcam.Result result = webcam.PlayFile(videoFileName);\n\t\t\t */\n\t\t\t//using ffmpeg\n\t\t\tWebcam webcam = new WebcamFfmpeg (Webcam.Action.PLAYFILE, UtilAll.GetOSEnum(), \"\", \"\", \"\", \"\");\n\t\t\t//Webcam.Result result = webcam.PlayFile (videoFileName);\n\t\t\twebcam.PlayFile (videoFileName);\n\t\t}\n\t}\n\tprivate void on_button_video_url_clicked (object o, EventArgs args) {\n\t\tnew DialogMessage(Constants.MessageTypes.INFO, \n\t\t\t\tCatalog.GetString(\"Video available here:\") + \"\\n\\n\" +\n\t\t\t\tvideoFileName);\n\t}\n\t\n\tprotected void fillWindowTitleAndLabelHeader() {\n\t\tedit_event.Title = string.Format(Catalog.GetString(\"Edit {0}\"), eventBigTypeString);\n\t\tSystem.Globalization.NumberFormatInfo localeInfo = new System.Globalization.NumberFormatInfo();\n\t\tlocaleInfo = System.Globalization.NumberFormatInfo.CurrentInfo;\n\t\tlabel_header.Text = string.Format(Catalog.GetString(\"Use this window to edit a {0}.\"), eventBigTypeString);\n\t\tif(headerShowDecimal)\n\t\t\tlabel_header.Text += string.Format(Catalog.GetString(\"\\n(decimal separator: '{0}')\"), localeInfo.NumberDecimalSeparator);\n\t}\n\t\t\n\tprotected void createComboEventType(Event myEvent) \n\t{\n\t\tcombo_eventType = ComboBox.NewText ();\n\t\tstring [] myTypes = findTypes(myEvent);\n\t\tUtilGtk.ComboUpdate(combo_eventType, myTypes, \"\");\n\t\tcombo_eventType.Active = UtilGtk.ComboMakeActive(myTypes, myEvent.Type);\n\t\thbox_combo_eventType.PackStart(combo_eventType, true, true, 0);\n\t\thbox_combo_eventType.ShowAll();\n\t\tcreateSignal();\n\t}\n\tprotected virtual string [] findTypes(Event myEvent) {\n\t\tstring [] myTypes = new String[0];\n\t\treturn myTypes;\n\t}\n\tprotected virtual void createSignal() {\n\t\t/*\n\t\t * for jumps to show or hide the kg\n\t\t * for runs to put distance depending on it it's fixed or not\n\t\t */\n\t}\n\tprotected virtual void fillTv(Event myEvent) {\n\t\tJump myJump = (Jump) myEvent;\n\t\tentryTv = myJump.Tv.ToString();\n\t\t//show all the decimals for not triming there in edit window using\n\t\t//(and having different values in formulae like GetHeightInCm ...)\n\t\t//entry_tv_value.Text = Util.TrimDecimals(entryTv, pDN);\n\t\tentry_tv_value.Text = entryTv;\n\t}\n\tprotected virtual void fillTc (Event myEvent) {\n\t}\n\tprotected virtual void fillFall(Event myEvent) {\n\t}\n\tprotected virtual void fillRunStart(Event myEvent) {\n\t}\n\tprotected virtual void fillDistance(Event myEvent) {\n\t\t/*\n\t\tRun myRun = (Run) myEvent;\n\t\tentryDistance = myRun.Distance.ToString();\n\t\tentry_distance_value.Text = Util.TrimDecimals(entryDistance, pDN);\n\t\t*/\n\t}\n\tprotected virtual void fillTime(Event myEvent) {\n\t\t/*\n\t\tRun myRun = (Run) myEvent;\n\t\tentryTime = myRun.Time.ToString();\n\t\tentry_time_value.Text = Util.TrimDecimals(entryTime, pDN);\n\t\t*/\n\t}\n\t\n\tprotected virtual void fillSpeed(Event myEvent) {\n\t\t/*\n\t\tRun myRun = (Run) myEvent;\n\t\tlabel_speed_value.Text = Util.TrimDecimals(myRun.Speed.ToString(), pDN);\n\t\t*/\n\t}\n\tprotected virtual void fillWeight(Event myEvent) {\n\t\t/*\n\t\tJump myJump = (Jump) myEvent;\n\t\tif(myJump.TypeHasWeight) {\n\t\t\tentryWeight = myJump.Weight.ToString();\n\t\t\tentry_weight_value.Text = entryWeight;\n\t\t\tentry_weight_value.Sensitive = true;\n\t\t} else {\n\t\t\tentry_weight_value.Sensitive = false;\n\t\t}\n\t\t*/\n\t}\n\tprotected virtual void fillLimited(Event myEvent) {\n\t\t/*\n\t\tJumpRj myJumpRj = (JumpRj) myEvent;\n\t\tlabel_limited_value.Text = Util.GetLimitedRounded(myJumpRj.Limited, pDN);\n\t\t*/\n\t}\n\t//protected virtual void fillAngle(Event myEvent) {\n\t//}\n\t\t\n\tprotected virtual void on_radio_single_leg_1_toggled(object o, EventArgs args) {\n\t}\n\tprotected virtual void on_radio_single_leg_2_toggled(object o, EventArgs args) {\n\t}\n\tprotected virtual void on_radio_single_leg_3_toggled(object o, EventArgs args) {\n\t}\n\tprotected virtual void on_radio_single_leg_4_toggled(object o, EventArgs args) {\n\t}\n\tprotected virtual void on_spin_single_leg_changed(object o, EventArgs args) {\n\t}\n\tprivate void on_entry_tv_value_changed (object o, EventArgs args) {\n\t\tif(Util.IsNumber(entry_tv_value.Text.ToString(), true)){\n\t\t\tentryTv = entry_tv_value.Text.ToString();\n\t\t\tbutton_accept.Sensitive = true;\n\t\t} else {\n\t\t\tbutton_accept.Sensitive = false;\n\t\t}\n\t}\n\t\t\n\tprivate void on_entry_tc_value_changed (object o, EventArgs args) {\n\t\tif(Util.IsNumber(entry_tc_value.Text.ToString(), true)){\n\t\t\tentryTc = entry_tc_value.Text.ToString();\n\t\t\tbutton_accept.Sensitive = true;\n\t\t} else {\n\t\t\tbutton_accept.Sensitive = false;\n\t\t\t//entry_tc_value.Text = \"\";\n\t\t\t//entry_tc_value.Text = entryTc;\n\t\t}\n\t}\n\t\t\n\tprivate void on_entry_fall_value_changed (object o, EventArgs args) {\n\t\tif(Util.IsNumber(entry_fall_value.Text.ToString(), true)){\n\t\t\tentryFall = entry_fall_value.Text.ToString();\n\t\t\tbutton_accept.Sensitive = true;\n\t\t} else {\n\t\t\tbutton_accept.Sensitive = false;\n\t\t\t//entry_fall_value.Text = \"\";\n\t\t\t//entry_fall_value.Text = entryFall;\n\t\t}\n\t}\n\t\t\n\tprivate void on_entry_time_changed (object o, EventArgs args) {\n\t\tif(Util.IsNumber(entry_time_value.Text.ToString(), true)){\n\t\t\tentryTime = entry_time_value.Text.ToString();\n\t\t\tlabel_speed_value.Text = Util.TrimDecimals(\n\t\t\t\t\tUtil.GetSpeed (entryDistance, entryTime, metersSecondsPreferred) , pDN);\n\t\t\tbutton_accept.Sensitive = true;\n\t\t} else {\n\t\t\tbutton_accept.Sensitive = false;\n\t\t\t//entry_time_value.Text = \"\";\n\t\t\t//entry_time_value.Text = entryTime;\n\t\t}\n\t}\n\t\n\tprivate void on_entry_distance_changed (object o, EventArgs args) {\n\t\tif(Util.IsNumber(entry_distance_value.Text.ToString(), distanceCanBeDecimal)){\n\t\t\tentryDistance = entry_distance_value.Text.ToString();\n\t\t\tlabel_speed_value.Text = Util.TrimDecimals(\n\t\t\t\t\tUtil.GetSpeed (entryDistance, entryTime, metersSecondsPreferred) , pDN);\n\t\t\tbutton_accept.Sensitive = true;\n\t\t} else {\n\t\t\tbutton_accept.Sensitive = false;\n\t\t\t//entry_distance_value.Text = \"\";\n\t\t\t//entry_distance_value.Text = entryDistance;\n\t\t}\n\t}\n\t\t\n\tprivate void on_entry_weight_value_changed (object o, EventArgs args) {\n\t\tif(Util.IsNumber(entry_weight_value.Text.ToString(), true)){\n\t\t\tentryWeight = entry_weight_value.Text.ToString();\n\t\t\tbutton_accept.Sensitive = true;\n\t\t} else {\n\t\t\tbutton_accept.Sensitive = false;\n\t\t\t//entry_weight_value.Text = \"\";\n\t\t\t//entry_weight_value.Text = entryWeight;\n\t\t}\n\t}\n\t/*\n\tprivate void on_entry_angle_changed (object o, EventArgs args) {\n\t\tstring angleString = entry_angle_value.Text.ToString();\n\t\tif(Util.IsNumber(angleString, true)) {\n\t\t\tentryAngle = angleString;\n\t\t\tbutton_accept.Sensitive = true;\n\t\t} else if(angleString == \"-\") {\n\t\t\tentryAngle = \"-1,0\";\n\t\t\tbutton_accept.Sensitive = true;\n\t\t} else \n\t\t\tbutton_accept.Sensitive = false;\n\t}\n\t*/\n\tprotected virtual void on_spin_mistakes_changed (object o, EventArgs args) {\n\t}\n\t\t\n\t\t\n\tprivate void on_entry_description_changed (object o, EventArgs args) {\n\t\tentry_description.Text = Util.RemoveTildeAndColonAndDot(entry_description.Text.ToString());\n\t}\n\t\n\tprotected virtual void on_radio_mtgug_1_toggled(object o, EventArgs args) { }\n\tprotected virtual void on_radio_mtgug_2_toggled(object o, EventArgs args) { }\n\tprotected virtual void on_radio_mtgug_3_toggled(object o, EventArgs args) { }\n\tprotected virtual void on_radio_mtgug_4_toggled(object o, EventArgs args) { }\n\tprotected virtual void on_radio_mtgug_5_toggled(object o, EventArgs args) { }\n\tprotected virtual void on_radio_mtgug_6_toggled(object o, EventArgs args) { }\n\t\n\tprotected virtual void on_button_cancel_clicked (object o, EventArgs args)\n\t{\n\t\tEditEventWindowBox.edit_event.Hide();\n\t\tEditEventWindowBox = null;\n\t}\n\t\n\tprotected virtual void on_delete_event (object o, DeleteEventArgs args)\n\t{\n\t\tEditEventWindowBox.edit_event.Hide();\n\t\tEditEventWindowBox = null;\n\t}\n\tprotected virtual void hideWindow() {\n\t\tEditEventWindowBox.edit_event.Hide();\n\t\tEditEventWindowBox = null;\n\t}\n\tvoid on_button_accept_clicked (object o, EventArgs args)\n\t{\n\t\tint eventID = Convert.ToInt32 ( label_event_id_value.Text );\n\t\tstring myPerson = UtilGtk.ComboGetActive(combo_persons);\n\t\tstring [] myPersonFull = myPerson.Split(new char[] {':'});\n\t\t\n\t\tstring myDesc = entry_description.Text;\n\t\t\n\t\tupdateEvent(eventID, Convert.ToInt32(myPersonFull[0]), myDesc);\n\t\thideWindow();\n\t}\n\tprotected virtual void updateEvent(int eventID, int personID, string description) {\n\t}\n\tpublic Button Button_accept \n\t{\n\t\tset { button_accept = value;\t}\n\t\tget { return button_accept;\t}\n\t}\n\t~EditEventWindow() {}\n}\n//--------------------------------------------------------\n//---------------- event_more widget ---------------------\n//--------------------------------------------------------\npublic class EventMoreWindow \n{\n\t[Widget] protected Gtk.Notebook notebook;\n\t[Widget] protected Gtk.TreeView treeview_more;\n\t[Widget] protected Gtk.Button button_accept;\n\t[Widget] protected Gtk.Button button_delete_type;\n\t[Widget] protected Gtk.Button button_cancel;\n\t[Widget] protected Gtk.Button button_close;\n\t[Widget] protected Gtk.Button button_close1;\n\t[Widget] protected Gtk.Label label_delete_confirm;\n\t[Widget] protected Gtk.Label label_delete_confirm_name;\n\t[Widget] protected Gtk.Label label_delete_cannot;\n\t[Widget] protected Gtk.Image image_delete;\n\t[Widget] protected Gtk.Image image_delete1;\n\tprotected Gtk.Window parent;\n\tprotected enum notebookPages { TESTS, DELETECONFIRM, DELETECANNOT };\n\tprotected TreeStore store;\n\tprotected string selectedEventType;\n\tprotected string selectedEventName;\n\tprotected string selectedDescription;\n\tpublic Gtk.Button button_selected;\n\tpublic Gtk.Button button_deleted_test; //just to send a signal\n\t\n\tprotected bool testOrDelete; //are we going to do a test or to delete a test type (test is true)\n\tprotected string [] typesTranslated;\n\tpublic EventMoreWindow () {\n\t}\n\tpublic EventMoreWindow (Gtk.Window parent, bool testOrDelete)\n\t{\n\t\t//name, startIn, weight, description\n\t\tstore = new TreeStore(typeof (string), typeof (string), typeof (string), typeof (string));\n\t\tinitializeThings();\n\t}\n\tprotected void initializeThings() \n\t{\n\t\tbutton_selected = new Gtk.Button();\n\t\tbutton_deleted_test = new Gtk.Button();\n\t\t\n\t\tcreateTreeView(treeview_more);\n\t\ttreeview_more.Model = store;\n\t\tfillTreeView(treeview_more,store);\n\t\t//when executing test: show accept and cancel\n\t\tbutton_accept.Visible = testOrDelete;\n\t\tbutton_cancel.Visible = testOrDelete;\n\t\t//when deleting test type: show delete type and close\n\t\tbutton_delete_type.Visible = ! testOrDelete;\n\t\tbutton_close.Visible = ! testOrDelete;\n\t\tPixbuf pixbuf = new Pixbuf (null, Util.GetImagePath(false) + \"stock_delete.png\");\n\t\timage_delete.Pixbuf = pixbuf;\n\t\timage_delete1.Pixbuf = pixbuf;\n\t\tbutton_accept.Sensitive = false;\n\t\tbutton_delete_type.Sensitive = false;\n\t\t \n\t\ttreeview_more.Selection.Changed += onSelectionEntry;\n\t}\n\t//if eventType is predefined, it will have a translation on src/evenType or derivated class\n\t//this is useful if user changed language\n\tprotected string getDescriptionLocalised(EventType myType, string descriptionFromDb) {\n\tif(myType.IsPredefined)\n\t\treturn myType.Description;\n\telse\n\t\treturn descriptionFromDb;\n\t}\n\tprotected virtual void createTreeView (Gtk.TreeView tv) {\n\t}\n\t\n\tprotected virtual void fillTreeView (Gtk.TreeView tv, TreeStore store) \n\t{\n\t}\n\t/*\n\t * when a row is selected...\n\t * -put selected value in selected* variables\n\t * -update graph image test on main window\n\t */\n\tprotected virtual void onSelectionEntry (object o, EventArgs args)\n\t{\n\t}\n\t\n\tprotected virtual void on_row_double_clicked (object o, Gtk.RowActivatedArgs args)\n\t{\n\t}\n\t\n\tvoid on_button_delete_type_clicked (object o, EventArgs args)\n\t{\n\t\tList<Session> session_l = SqliteSession.SelectAll(false, Sqlite.Orders_by.DEFAULT);\n\t\tstring [] tests = findTestTypesInSessions();\n\t\t//this will be much better doing a select distinct(session) instead of using SelectJumps or Runs\n\t\tArrayList sessionValuesArray = new ArrayList();\n\t\tforeach(string t in tests)\n\t\t{\n\t\t\tstring [] tFull = t.Split(new char[] {':'});\n\t\t\tif(! Util.IsNumber(tFull[3], false))\n\t\t\t\tcontinue;\n", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "length": 2057, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "5d7f05b8f84258ef580014f750f774d8eb4af59aa074f04a"}
{"input": "", "context": "from mutagen._util import DictMixin, cdata, insert_bytes, delete_bytes\nfrom mutagen._util import decode_terminated, split_escape, dict_match, enum\nfrom mutagen._util import BitReader, BitReaderError, set_win32_unicode_argv\nfrom mutagen._compat import text_type, itervalues, iterkeys, iteritems, PY2, \\\n    cBytesIO, xrange\nfrom tests import TestCase\nimport random\nimport sys\nimport os\nimport mmap\ntry:\n    import fcntl\nexcept ImportError:\n    fcntl = None\nclass FDict(DictMixin):\n    def __init__(self):\n        self.__d = {}\n        self.keys = self.__d.keys\n    def __getitem__(self, *args):\n        return self.__d.__getitem__(*args)\n    def __setitem__(self, *args):\n        return self.__d.__setitem__(*args)\n    def __delitem__(self, *args):\n        return self.__d.__delitem__(*args)\nclass TDictMixin(TestCase):\n    def setUp(self):\n        self.fdict = FDict()\n        self.rdict = {}\n        self.fdict[\"foo\"] = self.rdict[\"foo\"] = \"bar\"\n    def test_getsetitem(self):\n        self.failUnlessEqual(self.fdict[\"foo\"], \"bar\")\n        self.failUnlessRaises(KeyError, self.fdict.__getitem__, \"bar\")\n    def test_has_key_contains(self):\n        self.failUnless(\"foo\" in self.fdict)\n        self.failIf(\"bar\" in self.fdict)\n        if PY2:\n            self.failUnless(self.fdict.has_key(\"foo\"))\n            self.failIf(self.fdict.has_key(\"bar\"))\n    def test_iter(self):\n        self.failUnlessEqual(list(iter(self.fdict)), [\"foo\"])\n    def test_clear(self):\n        self.fdict.clear()\n        self.rdict.clear()\n        self.failIf(self.fdict)\n    def test_keys(self):\n        self.failUnlessEqual(list(self.fdict.keys()), list(self.rdict.keys()))\n        self.failUnlessEqual(\n            list(iterkeys(self.fdict)), list(iterkeys(self.rdict)))\n    def test_values(self):\n        self.failUnlessEqual(\n            list(self.fdict.values()), list(self.rdict.values()))\n        self.failUnlessEqual(\n            list(itervalues(self.fdict)), list(itervalues(self.rdict)))\n    def test_items(self):\n        self.failUnlessEqual(\n            list(self.fdict.items()), list(self.rdict.items()))\n        self.failUnlessEqual(\n            list(iteritems(self.fdict)), list(iteritems(self.rdict)))\n    def test_pop(self):\n        self.failUnlessEqual(self.fdict.pop(\"foo\"), self.rdict.pop(\"foo\"))\n        self.failUnlessRaises(KeyError, self.fdict.pop, \"woo\")\n    def test_pop_bad(self):\n        self.failUnlessRaises(TypeError, self.fdict.pop, \"foo\", 1, 2)\n    def test_popitem(self):\n        self.failUnlessEqual(self.fdict.popitem(), self.rdict.popitem())\n        self.failUnlessRaises(KeyError, self.fdict.popitem)\n    def test_update_other(self):\n        other = {\"a\": 1, \"b\": 2}\n        self.fdict.update(other)\n        self.rdict.update(other)\n    def test_update_other_is_list(self):\n        other = [(\"a\", 1), (\"b\", 2)]\n        self.fdict.update(other)\n        self.rdict.update(dict(other))\n    def test_update_kwargs(self):\n        self.fdict.update(a=1, b=2)\n        # Ironically, the *real* dict doesn't support this on Python 2.3\n        other = {\"a\": 1, \"b\": 2}\n        self.rdict.update(other)\n    def test_setdefault(self):\n        self.fdict.setdefault(\"foo\", \"baz\")\n        self.rdict.setdefault(\"foo\", \"baz\")\n        self.fdict.setdefault(\"bar\", \"baz\")\n        self.rdict.setdefault(\"bar\", \"baz\")\n    def test_get(self):\n        self.failUnlessEqual(self.rdict.get(\"a\"), self.fdict.get(\"a\"))\n        self.failUnlessEqual(\n            self.rdict.get(\"a\", \"b\"), self.fdict.get(\"a\", \"b\"))\n        self.failUnlessEqual(self.rdict.get(\"foo\"), self.fdict.get(\"foo\"))\n    def test_repr(self):\n        self.failUnlessEqual(repr(self.rdict), repr(self.fdict))\n    def test_len(self):\n        self.failUnlessEqual(len(self.rdict), len(self.fdict))\n    def tearDown(self):\n        self.failUnlessEqual(self.fdict, self.rdict)\n        self.failUnlessEqual(self.rdict, self.fdict)\nclass Tcdata(TestCase):\n    ZERO = staticmethod(lambda s: b\"\\x00\" * s)\n    LEONE = staticmethod(lambda s: b\"\\x01\" + b\"\\x00\" * (s - 1))\n    BEONE = staticmethod(lambda s: b\"\\x00\" * (s - 1) + b\"\\x01\")\n    NEGONE = staticmethod(lambda s: b\"\\xff\" * s)\n    def test_char(self):\n        self.failUnlessEqual(cdata.char(self.ZERO(1)), 0)\n        self.failUnlessEqual(cdata.char(self.LEONE(1)), 1)\n        self.failUnlessEqual(cdata.char(self.BEONE(1)), 1)\n        self.failUnlessEqual(cdata.char(self.NEGONE(1)), -1)\n        self.assertTrue(cdata.char is cdata.int8)\n        self.assertTrue(cdata.to_char is cdata.to_int8)\n        self.assertTrue(cdata.char_from is cdata.int8_from)\n    def test_char_from_to(self):\n        self.assertEqual(cdata.to_char(-2), b\"\\xfe\")\n        self.assertEqual(cdata.char_from(b\"\\xfe\"), (-2, 1))\n        self.assertEqual(cdata.char_from(b\"\\x00\\xfe\", 1), (-2, 2))\n        self.assertRaises(cdata.error, cdata.char_from, b\"\\x00\\xfe\", 3)\n    def test_uchar(self):\n        self.failUnlessEqual(cdata.uchar(self.ZERO(1)), 0)\n        self.failUnlessEqual(cdata.uchar(self.LEONE(1)), 1)\n        self.failUnlessEqual(cdata.uchar(self.BEONE(1)), 1)\n        self.failUnlessEqual(cdata.uchar(self.NEGONE(1)), 255)\n        self.assertTrue(cdata.uchar is cdata.uint8)\n        self.assertTrue(cdata.to_uchar is cdata.to_uint8)\n        self.assertTrue(cdata.uchar_from is cdata.uint8_from)\n    def test_short(self):\n        self.failUnlessEqual(cdata.short_le(self.ZERO(2)), 0)\n        self.failUnlessEqual(cdata.short_le(self.LEONE(2)), 1)\n        self.failUnlessEqual(cdata.short_le(self.BEONE(2)), 256)\n        self.failUnlessEqual(cdata.short_le(self.NEGONE(2)), -1)\n        self.assertTrue(cdata.short_le is cdata.int16_le)\n        self.failUnlessEqual(cdata.short_be(self.ZERO(2)), 0)\n        self.failUnlessEqual(cdata.short_be(self.LEONE(2)), 256)\n        self.failUnlessEqual(cdata.short_be(self.BEONE(2)), 1)\n        self.failUnlessEqual(cdata.short_be(self.NEGONE(2)), -1)\n        self.assertTrue(cdata.short_be is cdata.int16_be)\n    def test_ushort(self):\n        self.failUnlessEqual(cdata.ushort_le(self.ZERO(2)), 0)\n        self.failUnlessEqual(cdata.ushort_le(self.LEONE(2)), 1)\n        self.failUnlessEqual(cdata.ushort_le(self.BEONE(2)), 2 ** 16 >> 8)\n        self.failUnlessEqual(cdata.ushort_le(self.NEGONE(2)), 65535)\n        self.assertTrue(cdata.ushort_le is cdata.uint16_le)\n        self.failUnlessEqual(cdata.ushort_be(self.ZERO(2)), 0)\n        self.failUnlessEqual(cdata.ushort_be(self.LEONE(2)), 2 ** 16 >> 8)\n        self.failUnlessEqual(cdata.ushort_be(self.BEONE(2)), 1)\n        self.failUnlessEqual(cdata.ushort_be(self.NEGONE(2)), 65535)\n        self.assertTrue(cdata.ushort_be is cdata.uint16_be)\n    def test_int(self):\n        self.failUnlessEqual(cdata.int_le(self.ZERO(4)), 0)\n        self.failUnlessEqual(cdata.int_le(self.LEONE(4)), 1)\n        self.failUnlessEqual(cdata.int_le(self.BEONE(4)), 2 ** 32 >> 8)\n        self.failUnlessEqual(cdata.int_le(self.NEGONE(4)), -1)\n        self.assertTrue(cdata.int_le is cdata.int32_le)\n        self.failUnlessEqual(cdata.int_be(self.ZERO(4)), 0)\n        self.failUnlessEqual(cdata.int_be(self.LEONE(4)), 2 ** 32 >> 8)\n        self.failUnlessEqual(cdata.int_be(self.BEONE(4)), 1)\n        self.failUnlessEqual(cdata.int_be(self.NEGONE(4)), -1)\n        self.assertTrue(cdata.int_be is cdata.int32_be)\n    def test_uint(self):\n        self.failUnlessEqual(cdata.uint_le(self.ZERO(4)), 0)\n        self.failUnlessEqual(cdata.uint_le(self.LEONE(4)), 1)\n        self.failUnlessEqual(cdata.uint_le(self.BEONE(4)), 2 ** 32 >> 8)\n        self.failUnlessEqual(cdata.uint_le(self.NEGONE(4)), 2 ** 32 - 1)\n        self.assertTrue(cdata.uint_le is cdata.uint32_le)\n        self.failUnlessEqual(cdata.uint_be(self.ZERO(4)), 0)\n        self.failUnlessEqual(cdata.uint_be(self.LEONE(4)), 2 ** 32 >> 8)\n        self.failUnlessEqual(cdata.uint_be(self.BEONE(4)), 1)\n        self.failUnlessEqual(cdata.uint_be(self.NEGONE(4)), 2 ** 32 - 1)\n        self.assertTrue(cdata.uint_be is cdata.uint32_be)\n    def test_longlong(self):\n        self.failUnlessEqual(cdata.longlong_le(self.ZERO(8)), 0)\n        self.failUnlessEqual(cdata.longlong_le(self.LEONE(8)), 1)\n        self.failUnlessEqual(cdata.longlong_le(self.BEONE(8)), 2 ** 64 >> 8)\n        self.failUnlessEqual(cdata.longlong_le(self.NEGONE(8)), -1)\n        self.assertTrue(cdata.longlong_le is cdata.int64_le)\n        self.failUnlessEqual(cdata.longlong_be(self.ZERO(8)), 0)\n        self.failUnlessEqual(cdata.longlong_be(self.LEONE(8)), 2 ** 64 >> 8)\n        self.failUnlessEqual(cdata.longlong_be(self.BEONE(8)), 1)\n        self.failUnlessEqual(cdata.longlong_be(self.NEGONE(8)), -1)\n        self.assertTrue(cdata.longlong_be is cdata.int64_be)\n    def test_ulonglong(self):\n        self.failUnlessEqual(cdata.ulonglong_le(self.ZERO(8)), 0)\n        self.failUnlessEqual(cdata.ulonglong_le(self.LEONE(8)), 1)\n        self.failUnlessEqual(cdata.longlong_le(self.BEONE(8)), 2 ** 64 >> 8)\n        self.failUnlessEqual(cdata.ulonglong_le(self.NEGONE(8)), 2 ** 64 - 1)\n        self.assertTrue(cdata.ulonglong_le is cdata.uint64_le)\n        self.failUnlessEqual(cdata.ulonglong_be(self.ZERO(8)), 0)\n        self.failUnlessEqual(cdata.ulonglong_be(self.LEONE(8)), 2 ** 64 >> 8)\n        self.failUnlessEqual(cdata.longlong_be(self.BEONE(8)), 1)\n        self.failUnlessEqual(cdata.ulonglong_be(self.NEGONE(8)), 2 ** 64 - 1)\n        self.assertTrue(cdata.ulonglong_be is cdata.uint64_be)\n    def test_invalid_lengths(self):\n        self.failUnlessRaises(cdata.error, cdata.char, b\"\")\n        self.failUnlessRaises(cdata.error, cdata.uchar, b\"\")\n        self.failUnlessRaises(cdata.error, cdata.int_le, b\"\")\n        self.failUnlessRaises(cdata.error, cdata.longlong_le, b\"\")\n        self.failUnlessRaises(cdata.error, cdata.uint_le, b\"\")\n        self.failUnlessRaises(cdata.error, cdata.ulonglong_le, b\"\")\n        self.failUnlessRaises(cdata.error, cdata.int_be, b\"\")\n        self.failUnlessRaises(cdata.error, cdata.longlong_be, b\"\")\n        self.failUnlessRaises(cdata.error, cdata.uint_be, b\"\")\n        self.failUnlessRaises(cdata.error, cdata.ulonglong_be, b\"\")\n    def test_test(self):\n        self.failUnless(cdata.test_bit((1), 0))\n        self.failIf(cdata.test_bit(1, 1))\n        self.failUnless(cdata.test_bit(2, 1))\n        self.failIf(cdata.test_bit(2, 0))\n        v = (1 << 12) + (1 << 5) + 1\n        self.failUnless(cdata.test_bit(v, 0))\n        self.failUnless(cdata.test_bit(v, 5))\n        self.failUnless(cdata.test_bit(v, 12))\n        self.failIf(cdata.test_bit(v, 3))\n        self.failIf(cdata.test_bit(v, 8))\n        self.failIf(cdata.test_bit(v, 13))\nclass FileHandling(TestCase):\n    def file(self, contents):\n        import tempfile\n        temp = tempfile.TemporaryFile()\n        temp.write(contents)\n        temp.flush()\n        temp.seek(0)\n        return temp\n    def read(self, fobj):\n        fobj.seek(0, 0)\n        return fobj.read()\n    def test_insert_into_empty(self):\n        o = self.file(b'')\n        insert_bytes(o, 8, 0)\n        self.assertEquals(b'\\x00' * 8, self.read(o))\n    def test_insert_before_one(self):\n        o = self.file(b'a')\n        insert_bytes(o, 8, 0)\n        self.assertEquals(b'a' + b'\\x00' * 7 + b'a', self.read(o))\n    def test_insert_after_one(self):\n        o = self.file(b'a')\n        insert_bytes(o, 8, 1)\n        self.assertEquals(b'a' + b'\\x00' * 8, self.read(o))\n    def test_smaller_than_file_middle(self):\n        o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 4)\n        self.assertEquals(b'abcdefghefghij', self.read(o))\n    def test_smaller_than_file_to_end(self):\n        o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 6)\n        self.assertEquals(b'abcdefghijghij', self.read(o))\n    def test_smaller_than_file_across_end(self):\n        o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 8)\n        self.assertEquals(b'abcdefghij\\x00\\x00ij', self.read(o))\n    def test_smaller_than_file_at_end(self):\n", "answers": ["        o = self.file(b'abcdefghij')"], "length": 694, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "8ed6880ab3b5c6188940a9999bc369708c565891b8d871f2"}
{"input": "", "context": "<?cs include:\"doctype.cs\" ?>\n<?cs include:\"macros.cs\" ?>\n<html devsite>\n<?cs if:sdk.redirect ?>\n  <head>\n    <title>Redirecting...</title>\n    <meta http-equiv=\"refresh\" content=\"0;url=<?cs var:toroot ?>sdk/<?cs\n      if:sdk.redirect.path ?><?cs var:sdk.redirect.path ?><?cs\n      else ?>index.html<?cs /if ?>\">\n    <link href=\"<?cs var:toroot ?>assets/android-developer-docs.css\" rel=\"stylesheet\" type=\"text/css\" />\n  </head>\n<?cs else ?>\n  <?cs include:\"head_tag.cs\" ?>\n<?cs /if ?>\n<body class=\"gc-documentation \n  <?cs if:(guide||develop||training||reference||tools||sdk) ?>develop<?cs\n  elif:design ?>design<?cs\n  elif:distribute ?>distribute<?cs\n  /if ?>\" itemscope itemtype=\"http://schema.org/CreativeWork\">\n  <a name=\"top\"></a>\n<?cs include:\"header.cs\" ?>\n<div <?cs if:fullpage\n?><?cs else\n?>class=\"col-13\" id=\"doc-col\"<?cs /if ?> >\n<?cs if:sdk.redirect ?>\n<div class=\"g-unit\">\n  <div id=\"jd-content\">\n    <p>Redirecting to\n    <a href=\"<?cs var:toroot ?>sdk/<?cs\n      if:sdk.redirect.path ?><?cs var:sdk.redirect.path ?><?cs\n      else ?>index.html<?cs /if ?>\"><?cs\n      if:sdk.redirect.path ?><?cs var:sdk.redirect.path ?><?cs\n      else ?>Download the SDK<?cs /if ?>\n    </a> ...</p>\n<?cs else ?>\n<?cs # else, if NOT redirect ...\n#\n#\n# The following is for SDK/NDK pages\n#\n#\n?>\n<?cs if:header.hide ?><?cs else ?>\n<h1 itemprop=\"name\"><?cs var:page.title ?></h1>\n<?cs /if ?>\n  <div id=\"jd-content\" itemprop=\"description\">\n<?cs if:sdk.not_latest_version ?>\n  <div class=\"special\">\n    <p><strong>This is NOT the current Android SDK release.</strong></p>\n    <p><a href=\"/sdk/index.html\">Download the current Android SDK</a></p>\n  </div>\n<?cs /if ?>\n<?cs if:ndk ?>\n<?cs #\n#\n#\n#\n#\n#\n#\n# the following is for the NDK\n#\n# (nested in if/else redirect)\n#\n#\n#\n#\n?>\n  <table class=\"download\" id=\"download-table\">\n    <tr>\n      <th>Platform</th>\n      <th>Package</th>\n      <th>Size</th>\n      <th>MD5 Checksum</th>\n  </tr>\n  <tr>\n    <td>Windows</td>\n    <td>\n  <a onClick=\"return onDownload(this)\"\n     href=\"http://dl.google.com/android/ndk/<?cs var:ndk.win_download ?>\"><?cs var:ndk.win_download ?></a>\n    </td>\n    <td><?cs var:ndk.win_bytes ?> bytes</td>\n    <td><?cs var:ndk.win_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (intel)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\"\n     href=\"http://dl.google.com/android/ndk/<?cs var:ndk.mac_download ?>\"><?cs var:ndk.mac_download ?></a>\n    </td>\n    <td><?cs var:ndk.mac_bytes ?> bytes</td>\n    <td><?cs var:ndk.mac_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32/64-bit (x86)</td>\n    <td>\n  <a onClick=\"return onDownload(this)\"\n     href=\"http://dl.google.com/android/ndk/<?cs var:ndk.linux_download ?>\"><?cs var:ndk.linux_download ?></a>\n    </td>\n    <td><?cs var:ndk.linux_bytes ?> bytes</td>\n    <td><?cs var:ndk.linux_checksum ?></td>\n  </tr>\n  </table>\n  \n  <?cs ########  HERE IS THE JD DOC CONTENT ######### ?>\n  <?cs call:tag_list(root.descr) ?>\n  \n<script>\n  function onDownload(link) {\n    $(\"#downloadForRealz\").html(\"Download \" + $(link).text());\n    $(\"#downloadForRealz\").attr('href',$(link).attr('href'));\n    $(\"#tos\").fadeIn('slow');\n    location.hash = \"download\";\n    return false;\n  }\n  function onAgreeChecked() {\n    if ($(\"input#agree\").is(\":checked\")) {\n      $(\"a#downloadForRealz\").removeClass('disabled');\n    } else {\n      $(\"a#downloadForRealz\").addClass('disabled');\n    }\n  }\n  function onDownloadNdkForRealz(link) {\n    if ($(\"input#agree\").is(':checked')) {\n      $(\"#tos\").fadeOut('slow');\n      \n      $('html, body').animate({\n          scrollTop: $(\"#Installing\").offset().top\n        }, 800, function() {\n          $(\"#Installing\").click();\n      });\n     \n      return true;\n    } else {\n      $(\"label#agreeLabel\").parent().stop().animate({color: \"#258AAF\"}, 200,\n        function() {$(\"label#agreeLabel\").parent().stop().animate({color: \"#222\"}, 200)}\n      );\n      return false;\n    }\n  }\n  $(window).hashchange( function(){\n    if (location.hash == \"\") {\n      location.reload();\n    }\n  });\n</script>\n  <?cs else ?>\n<?cs # end if NDK ... \n#\n#\n#\n#\n#\n#\n# the following is for the SDK\n#\n# (nested in if/else redirect and if/else NDK)\n#\n#\n#\n#\n?>\n  <?cs if:android.whichdoc == \"online\" ?>\n<?cs ########  HERE IS THE JD DOC CONTENT FOR ONLINE ######### ?>\n<?cs call:tag_list(root.descr) ?>\n<h4><a href='' class=\"expandable\"\n  onclick=\"toggleExpandable(this,'.pax');hideExpandable('.myide,.reqs');return false;\"\n  >DOWNLOAD FOR OTHER PLATFORMS</a></h4>\n  \n  \n<div class=\"pax col-13 online\" style=\"display:none;margin:0;\">\n  \n<p class=\"table-caption\"><strong>ADT Bundle</strong></p>\n  <table class=\"download\">\n    <tr>\n      <th>Platform</th>\n      <th>Package</th>\n      <th>Size</th>\n      <th>MD5 Checksum</th>\n  </tr>\n  <tr>\n    <td>Windows 32-bit</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"win-bundle32\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.win32_bundle_download ?>\"><?cs var:sdk.win32_bundle_download ?></a>\n    </td>\n    <td><?cs var:sdk.win32_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win32_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Windows 64-bit</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"win-bundle64\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.win64_bundle_download ?>\"><?cs var:sdk.win64_bundle_download ?></a>\n    </td>\n", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "length": 478, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "7a221b8009c1d73293e9a45c3c9dc18eb109dc4e8c6cef92"}
{"input": "", "context": "#!/usr/bin/env python\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\nimport argparse\nimport glob\nimport json\nfrom math import sqrt\nimport re\nimport sys\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as plticker\nimport numpy as np\nfrom scipy.stats import norm, t\nVC = 'startup > moz-app-visually-complete'\ndef add_application_to_results(results, app_result_set,\n                               app_pattern=None, test_pattern=None,\n                               first_repetition=None, last_repetition=None):\n    app_name = app_result_set['stats']['application'].strip()\n    if app_pattern and not re.search(app_pattern, app_name):\n        return\n    if not app_result_set.get('passes'):\n        return\n    app_results = results.get(app_name, {})\n    tests_added = 0\n    for test_result_set in app_result_set['passes']:\n        if add_test_to_results(app_results, test_result_set, test_pattern,\n                               first_repetition, last_repetition):\n            tests_added += 1\n    if tests_added > 0:\n        results[app_name] = app_results\ndef add_test_to_results(app_results, test_result_set,\n                        test_pattern=None,\n                        first_repetition=None, last_repetition=None):\n    test_name = test_result_set['title'].strip()\n    if test_pattern and not re.search(test_pattern, test_name):\n        return False\n    if not test_result_set.get('mozPerfDurations'):\n        return False\n    test_results = app_results.get(test_name, {'durations': []})\n    # TODO: use slices\n    durations_added = 0\n    for index, duration in enumerate(test_result_set['mozPerfDurations'],\n                                     start=1):\n        if first_repetition and index < first_repetition:\n            continue\n        if last_repetition and index > last_repetition:\n            break\n        test_results['durations'].append(duration)\n        durations_added += 1\n    if durations_added:\n        app_results[test_name] = test_results\n        return True\n    else:\n        return False\ndef add_result_set(result_set, results,\n                   app_pattern=None, test_pattern=None,\n                   first_repetition=None, last_repetition=None):\n    for app_result_set in result_set:\n        add_application_to_results(results, app_result_set,\n                                   app_pattern, test_pattern,\n                                   first_repetition, last_repetition)\ndef get_stats(values, intervals=True):\n    stats = {}\n    values_array = np.array(values, dtype=np.float64)\n    stats['min'] = np.asscalar(np.amin(values_array))\n    stats['max'] = np.asscalar(np.amax(values_array))\n    stats['mean'] = np.asscalar(np.mean(values_array))\n    stats['median'] = np.asscalar(np.median(values_array))\n    if values_array.size > 1:\n        stats['std_dev'] = np.asscalar(np.std(values_array, ddof=1))\n    else:\n        stats['std_dev'] = 0\n    if intervals:\n        stats['intervals'] = []\n        loc = stats['mean']\n        scale = stats['std_dev'] / sqrt(values_array.size)\n        for alpha in (.95, .99, .90, .85, .80, .50):\n            if values_array.size > 30:\n                interval = norm.interval(alpha, loc=loc, scale=scale)\n            else:\n                interval = t.interval(alpha, values_array.size - 1, loc, scale)\n            stats['intervals'].append(\n                {'confidence': alpha, 'interval': interval})\n    return stats\ndef add_stats_to_results(results):\n    for app in results:\n        for test in results[app]:\n            stats = get_stats(results[app][test]['durations'])\n            results[app][test]['stats'] = stats\ndef add_stats_to_pivot(pivot):\n    for app in pivot:\n        for test in pivot[app]:\n            for stat in pivot[app][test]:\n                stats = get_stats(pivot[app][test][stat]['values'],\n                                  intervals=True)\n                pivot[app][test][stat]['stats'] = stats\ndef add_stats_pivot_to_crunched_results(crunched_results):\n    # pivot -> app -> test -> stat[]\n    pivot = {}\n    for run_num, run_results in enumerate(crunched_results['runs']):\n        # print 'Run %d:' % (run_num)\n        for app in run_results:\n            if app not in pivot:\n                pivot[app] = {}\n            for test in run_results[app]:\n                if test not in pivot[app]:\n                    pivot[app][test] = {}\n                for stat in run_results[app][test]['stats']:\n                    if stat == 'intervals':\n                        continue\n                    if stat not in pivot[app][test]:\n                        pivot[app][test][stat] = {'values': []}\n                    pivot[app][test][stat]['values'].append(\n                        run_results[app][test]['stats'][stat])\n                    # print '  Added %s.%s.%s' % (app, test, stat)\n    add_stats_to_pivot(pivot)\n    crunched_results['pivot'] = pivot\ndef crunch_result_sets(result_sets, app_pattern=None, test_pattern=None,\n                       first_repetition=None, last_repetition=None):\n    crunched_results = {'args': {'app_pattern': app_pattern,\n                                 'test_pattern': test_pattern,\n                                 'first_repetition': first_repetition,\n                                 'last_repetition': last_repetition},\n                        'combined': {},\n                        'runs': []}\n    if app_pattern:\n        app_pattern = re.compile(app_pattern, re.IGNORECASE)\n    if test_pattern:\n        test_pattern = re.compile(test_pattern, re.IGNORECASE)\n    for result_set in result_sets:\n        results = {}\n        add_result_set(result_set, results, app_pattern, test_pattern,\n                       first_repetition, last_repetition)\n        add_stats_to_results(results)\n        crunched_results['runs'].append(results)\n        # TODO: make it so it aggregates the last call instead\n        add_result_set(result_set, crunched_results['combined'], app_pattern,\n                       test_pattern, first_repetition, last_repetition)\n    add_stats_to_results(crunched_results['combined'])\n    add_stats_pivot_to_crunched_results(crunched_results)\n    return crunched_results\ndef load_result_sets(filenames):\n    if isinstance(filenames, basestring):\n        filenames = glob.glob(filenames)\n    result_sets = []\n    for filename in filenames:\n        with open(filename) as f:\n            results = f.read()\n            try:\n                result_sets.append(json.loads(results))\n            except Exception as e:\n                sys.stderr.write('Discarding %s: %s\\n' % (filename, str(e)))\n    return result_sets\ndef load_and_crunch_result_sets(filenames, app_pattern=None, test_pattern=None,\n                                first_repetition=None, last_repetition=None):\n    rs = load_result_sets(filenames)\n    return crunch_result_sets(rs, app_pattern, test_pattern, first_repetition, last_repetition)\ndef plot_app_vc(cr, app, test=VC, stat='mean'):\n    loc = plticker.MultipleLocator(base=1.0)\n    fig, ax = plt.subplots()\n    ax.xaxis.set_major_locator(loc)\n    plt.xlabel('Runs')\n    plt.ylabel('Time in ms')\n    plt.title('%s, %s, individual %ss vs. %d-count 95%% CI' %\n              (app, test, stat, len(cr['combined'][app][VC]['durations'])))\n    csi_95 = cr['combined'][app][VC]['stats']['intervals'][0]['interval']\n    print csi_95\n", "answers": ["    ymin = csi_95[0]"], "length": 565, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "728682005fc144f5d03a92ebb7f121b7ceb08648eff87ba8"}
{"input": "", "context": "# -*- test-case-name: twisted.python.test.test_util\n# Copyright (c) Twisted Matrix Laboratories.\n# See LICENSE for details.\n\"\"\"\nTests for L{twisted.python.util}.\n\"\"\"\nfrom __future__ import division, absolute_import\nimport errno\nimport os.path\nimport shutil\nimport sys\nimport warnings\ntry:\n    import pwd, grp\nexcept ImportError:\n    pwd = grp = None\nfrom twisted.trial import unittest\nfrom twisted.trial.util import suppress as SUPPRESS\nfrom twisted.python import util\nfrom twisted.python.filepath import FilePath\nfrom twisted.internet import reactor\nfrom twisted.internet.interfaces import IReactorProcess\nfrom twisted.internet.protocol import ProcessProtocol\nfrom twisted.internet.defer import Deferred\nfrom twisted.internet.error import ProcessDone\nfrom twisted.test.test_process import MockOS\npyExe = FilePath(sys.executable)._asBytesPath()\nclass UtilTests(unittest.TestCase):\n    def testUniq(self):\n        l = [\"a\", 1, \"ab\", \"a\", 3, 4, 1, 2, 2, 4, 6]\n        self.assertEqual(util.uniquify(l), [\"a\", 1, \"ab\", 3, 4, 2, 6])\n    def testRaises(self):\n        self.assertTrue(util.raises(ZeroDivisionError, divmod, 1, 0))\n        self.assertFalse(util.raises(ZeroDivisionError, divmod, 0, 1))\n        try:\n            util.raises(TypeError, divmod, 1, 0)\n        except ZeroDivisionError:\n            pass\n        else:\n            raise unittest.FailTest(\"util.raises didn't raise when it should have\")\n    def test_uidFromNumericString(self):\n        \"\"\"\n        When L{uidFromString} is called with a base-ten string representation\n        of an integer, it returns the integer.\n        \"\"\"\n        self.assertEqual(util.uidFromString(\"100\"), 100)\n    def test_uidFromUsernameString(self):\n        \"\"\"\n        When L{uidFromString} is called with a base-ten string representation\n        of an integer, it returns the integer.\n        \"\"\"\n        pwent = pwd.getpwuid(os.getuid())\n        self.assertEqual(util.uidFromString(pwent.pw_name), pwent.pw_uid)\n    if pwd is None:\n        test_uidFromUsernameString.skip = (\n            \"Username/UID conversion requires the pwd module.\")\n    def test_gidFromNumericString(self):\n        \"\"\"\n        When L{gidFromString} is called with a base-ten string representation\n        of an integer, it returns the integer.\n        \"\"\"\n        self.assertEqual(util.gidFromString(\"100\"), 100)\n    def test_gidFromGroupnameString(self):\n        \"\"\"\n        When L{gidFromString} is called with a base-ten string representation\n        of an integer, it returns the integer.\n        \"\"\"\n        grent = grp.getgrgid(os.getgid())\n        self.assertEqual(util.gidFromString(grent.gr_name), grent.gr_gid)\n    if grp is None:\n        test_gidFromGroupnameString.skip = (\n            \"Group Name/GID conversion requires the grp module.\")\nclass NameToLabelTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{nameToLabel}.\n    \"\"\"\n    def test_nameToLabel(self):\n        \"\"\"\n        Test the various kinds of inputs L{nameToLabel} supports.\n        \"\"\"\n        nameData = [\n            ('f', 'F'),\n            ('fo', 'Fo'),\n            ('foo', 'Foo'),\n            ('fooBar', 'Foo Bar'),\n            ('fooBarBaz', 'Foo Bar Baz'),\n            ]\n        for inp, out in nameData:\n            got = util.nameToLabel(inp)\n            self.assertEqual(\n                got, out,\n                \"nameToLabel(%r) == %r != %r\" % (inp, got, out))\nclass UntilConcludesTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{untilConcludes}, an C{EINTR} helper.\n    \"\"\"\n    def test_uninterruptably(self):\n        \"\"\"\n        L{untilConcludes} calls the function passed to it until the function\n        does not raise either L{OSError} or L{IOError} with C{errno} of\n        C{EINTR}.  It otherwise completes with the same result as the function\n        passed to it.\n        \"\"\"\n        def f(a, b):\n            self.calls += 1\n            exc = self.exceptions.pop()\n            if exc is not None:\n                raise exc(errno.EINTR, \"Interrupted system call!\")\n            return a + b\n        self.exceptions = [None]\n        self.calls = 0\n        self.assertEqual(util.untilConcludes(f, 1, 2), 3)\n        self.assertEqual(self.calls, 1)\n        self.exceptions = [None, OSError, IOError]\n        self.calls = 0\n        self.assertEqual(util.untilConcludes(f, 2, 3), 5)\n        self.assertEqual(self.calls, 3)\nclass SwitchUIDTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{util.switchUID}.\n    \"\"\"\n    if getattr(os, \"getuid\", None) is None:\n        skip = \"getuid/setuid not available\"\n    def setUp(self):\n        self.mockos = MockOS()\n        self.patch(util, \"os\", self.mockos)\n        self.patch(util, \"initgroups\", self.initgroups)\n        self.initgroupsCalls = []\n    def initgroups(self, uid, gid):\n        \"\"\"\n        Save L{util.initgroups} calls in C{self.initgroupsCalls}.\n        \"\"\"\n        self.initgroupsCalls.append((uid, gid))\n    def test_uid(self):\n        \"\"\"\n        L{util.switchUID} calls L{util.initgroups} and then C{os.setuid} with\n        the given uid.\n        \"\"\"\n        util.switchUID(12000, None)\n        self.assertEqual(self.initgroupsCalls, [(12000, None)])\n        self.assertEqual(self.mockos.actions, [(\"setuid\", 12000)])\n    def test_euid(self):\n        \"\"\"\n        L{util.switchUID} calls L{util.initgroups} and then C{os.seteuid} with\n        the given uid if the C{euid} parameter is set to C{True}.\n        \"\"\"\n        util.switchUID(12000, None, True)\n        self.assertEqual(self.initgroupsCalls, [(12000, None)])\n        self.assertEqual(self.mockos.seteuidCalls, [12000])\n    def test_currentUID(self):\n        \"\"\"\n        If the current uid is the same as the uid passed to L{util.switchUID},\n        then initgroups does not get called, but a warning is issued.\n        \"\"\"\n        uid = self.mockos.getuid()\n        util.switchUID(uid, None)\n        self.assertEqual(self.initgroupsCalls, [])\n        self.assertEqual(self.mockos.actions, [])\n        currentWarnings = self.flushWarnings([util.switchUID])\n        self.assertEqual(len(currentWarnings), 1)\n        self.assertIn('tried to drop privileges and setuid %i' % uid,\n                      currentWarnings[0]['message'])\n        self.assertIn(\n            'but uid is already %i' % uid, currentWarnings[0]['message'])\n    def test_currentEUID(self):\n        \"\"\"\n        If the current euid is the same as the euid passed to L{util.switchUID},\n        then initgroups does not get called, but a warning is issued.\n        \"\"\"\n        euid = self.mockos.geteuid()\n        util.switchUID(euid, None, True)\n        self.assertEqual(self.initgroupsCalls, [])\n        self.assertEqual(self.mockos.seteuidCalls, [])\n        currentWarnings = self.flushWarnings([util.switchUID])\n        self.assertEqual(len(currentWarnings), 1)\n        self.assertIn('tried to drop privileges and seteuid %i' % euid,\n                      currentWarnings[0]['message'])\n        self.assertIn(\n            'but euid is already %i' % euid, currentWarnings[0]['message'])\nclass MergeFunctionMetadataTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{mergeFunctionMetadata}.\n    \"\"\"\n    def test_mergedFunctionBehavesLikeMergeTarget(self):\n        \"\"\"\n        After merging C{foo}'s data into C{bar}, the returned function behaves\n        as if it is C{bar}.\n        \"\"\"\n        foo_object = object()\n        bar_object = object()\n        def foo():\n            return foo_object\n        def bar(x, y, ab, c=10, *d, **e):\n            (a, b) = ab\n            return bar_object\n        baz = util.mergeFunctionMetadata(foo, bar)\n        self.assertIdentical(baz(1, 2, (3, 4), quux=10), bar_object)\n    def test_moduleIsMerged(self):\n        \"\"\"\n        Merging C{foo} into C{bar} returns a function with C{foo}'s\n        C{__module__}.\n        \"\"\"\n        def foo():\n            pass\n        def bar():\n            pass\n        bar.__module__ = 'somewhere.else'\n        baz = util.mergeFunctionMetadata(foo, bar)\n        self.assertEqual(baz.__module__, foo.__module__)\n    def test_docstringIsMerged(self):\n        \"\"\"\n        Merging C{foo} into C{bar} returns a function with C{foo}'s docstring.\n        \"\"\"\n        def foo():\n            \"\"\"\n            This is foo.\n            \"\"\"\n        def bar():\n            \"\"\"\n            This is bar.\n            \"\"\"\n        baz = util.mergeFunctionMetadata(foo, bar)\n        self.assertEqual(baz.__doc__, foo.__doc__)\n    def test_nameIsMerged(self):\n        \"\"\"\n        Merging C{foo} into C{bar} returns a function with C{foo}'s name.\n        \"\"\"\n        def foo():\n            pass\n        def bar():\n            pass\n        baz = util.mergeFunctionMetadata(foo, bar)\n        self.assertEqual(baz.__name__, foo.__name__)\n    def test_instanceDictionaryIsMerged(self):\n        \"\"\"\n        Merging C{foo} into C{bar} returns a function with C{bar}'s\n        dictionary, updated by C{foo}'s.\n        \"\"\"\n        def foo():\n            pass\n        foo.a = 1\n        foo.b = 2\n        def bar():\n            pass\n        bar.b = 3\n        bar.c = 4\n        baz = util.mergeFunctionMetadata(foo, bar)\n        self.assertEqual(foo.a, baz.a)\n        self.assertEqual(foo.b, baz.b)\n        self.assertEqual(bar.c, baz.c)\nclass OrderedDictTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{util.OrderedDict}.\n    \"\"\"\n    def test_deprecated(self):\n        \"\"\"\n        L{util.OrderedDict} is deprecated.\n        \"\"\"\n        from twisted.python.util import OrderedDict\n        OrderedDict # Shh pyflakes\n        currentWarnings = self.flushWarnings(offendingFunctions=[\n            self.test_deprecated])\n        self.assertEqual(\n            currentWarnings[0]['message'],\n            \"twisted.python.util.OrderedDict was deprecated in Twisted \"\n            \"15.5.0: Use collections.OrderedDict instead.\")\n        self.assertEqual(currentWarnings[0]['category'], DeprecationWarning)\n        self.assertEqual(len(currentWarnings), 1)\nclass InsensitiveDictTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{util.InsensitiveDict}.\n    \"\"\"\n    def test_preserve(self):\n        \"\"\"\n        L{util.InsensitiveDict} preserves the case of keys if constructed with\n        C{preserve=True}.\n        \"\"\"\n        dct = util.InsensitiveDict({'Foo':'bar', 1:2, 'fnz':{1:2}}, preserve=1)\n        self.assertEqual(dct['fnz'], {1:2})\n        self.assertEqual(dct['foo'], 'bar')\n        self.assertEqual(dct.copy(), dct)\n        self.assertEqual(dct['foo'], dct.get('Foo'))\n        self.assertIn(1, dct)\n        self.assertIn('foo', dct)\n        result = eval(repr(dct), {\n            'dct': dct,\n            'InsensitiveDict': util.InsensitiveDict,\n            })\n        self.assertEqual(result, dct)\n        keys=['Foo', 'fnz', 1]\n        for x in keys:\n            self.assertIn(x, dct.keys())\n            self.assertIn((x, dct[x]), dct.items())\n        self.assertEqual(len(keys), len(dct))\n        del dct[1]\n        del dct['foo']\n        self.assertEqual(dct.keys(), ['fnz'])\n    def test_noPreserve(self):\n        \"\"\"\n        L{util.InsensitiveDict} does not preserves the case of keys if\n        constructed with C{preserve=False}.\n        \"\"\"\n        dct = util.InsensitiveDict({'Foo':'bar', 1:2, 'fnz':{1:2}}, preserve=0)\n        keys=['foo', 'fnz', 1]\n        for x in keys:\n            self.assertIn(x, dct.keys())\n            self.assertIn((x, dct[x]), dct.items())\n        self.assertEqual(len(keys), len(dct))\n        del dct[1]\n        del dct['foo']\n        self.assertEqual(dct.keys(), ['fnz'])\n    def test_unicode(self):\n        \"\"\"\n        Unicode keys are case insensitive.\n        \"\"\"\n        d = util.InsensitiveDict(preserve=False)\n        d[u\"Foo\"] = 1\n        self.assertEqual(d[u\"FOO\"], 1)\n        self.assertEqual(d.keys(), [u\"foo\"])\n    def test_bytes(self):\n        \"\"\"\n        Bytes keys are case insensitive.\n        \"\"\"\n        d = util.InsensitiveDict(preserve=False)\n        d[b\"Foo\"] = 1\n        self.assertEqual(d[b\"FOO\"], 1)\n        self.assertEqual(d.keys(), [b\"foo\"])\nclass PasswordTestingProcessProtocol(ProcessProtocol):\n    \"\"\"\n    Write the string C{\"secret\\n\"} to a subprocess and then collect all of\n    its output and fire a Deferred with it when the process ends.\n    \"\"\"\n    def connectionMade(self):\n        self.output = []\n        self.transport.write(b'secret\\n')\n    def childDataReceived(self, fd, output):\n        self.output.append((fd, output))\n    def processEnded(self, reason):\n        self.finished.callback((reason, self.output))\nclass GetPasswordTests(unittest.TestCase):\n    if not IReactorProcess.providedBy(reactor):\n        skip = \"Process support required to test getPassword\"\n    def test_stdin(self):\n        \"\"\"\n        Making sure getPassword accepts a password from standard input by\n        running a child process which uses getPassword to read in a string\n        which it then writes it out again.  Write a string to the child\n        process and then read one and make sure it is the right string.\n        \"\"\"\n        p = PasswordTestingProcessProtocol()\n        p.finished = Deferred()\n        reactor.spawnProcess(\n            p, pyExe,\n            [pyExe,\n             b'-c',\n             (b'import sys\\n'\n              b'from twisted.python.util import getPassword\\n'\n              b'sys.stdout.write(getPassword())\\n'\n              b'sys.stdout.flush()\\n')],\n            env={b'PYTHONPATH': os.pathsep.join(sys.path).encode(\"utf8\")})\n        def processFinished(result):\n            (reason, output) = result\n            reason.trap(ProcessDone)\n            self.assertIn((1, b'secret'), output)\n        return p.finished.addCallback(processFinished)\nclass SearchUpwardsTests(unittest.TestCase):\n    def testSearchupwards(self):\n        os.makedirs('searchupwards/a/b/c')\n        open('searchupwards/foo.txt', 'w').close()\n        open('searchupwards/a/foo.txt', 'w').close()\n        open('searchupwards/a/b/c/foo.txt', 'w').close()\n        os.mkdir('searchupwards/bar')\n        os.mkdir('searchupwards/bam')\n        os.mkdir('searchupwards/a/bar')\n        os.mkdir('searchupwards/a/b/bam')\n        actual=util.searchupwards('searchupwards/a/b/c',\n                                  files=['foo.txt'],\n                                  dirs=['bar', 'bam'])\n        expected=os.path.abspath('searchupwards') + os.sep\n        self.assertEqual(actual, expected)\n        shutil.rmtree('searchupwards')\n        actual=util.searchupwards('searchupwards/a/b/c',\n                                  files=['foo.txt'],\n                                  dirs=['bar', 'bam'])\n        expected=None\n        self.assertEqual(actual, expected)\nclass IntervalDifferentialTests(unittest.TestCase):\n    def testDefault(self):\n        d = iter(util.IntervalDifferential([], 10))\n        for i in range(100):\n            self.assertEqual(next(d), (10, None))\n    def testSingle(self):\n        d = iter(util.IntervalDifferential([5], 10))\n        for i in range(100):\n            self.assertEqual(next(d), (5, 0))\n    def testPair(self):\n        d = iter(util.IntervalDifferential([5, 7], 10))\n        for i in range(100):\n            self.assertEqual(next(d), (5, 0))\n            self.assertEqual(next(d), (2, 1))\n            self.assertEqual(next(d), (3, 0))\n            self.assertEqual(next(d), (4, 1))\n            self.assertEqual(next(d), (1, 0))\n            self.assertEqual(next(d), (5, 0))\n            self.assertEqual(next(d), (1, 1))\n            self.assertEqual(next(d), (4, 0))\n            self.assertEqual(next(d), (3, 1))\n            self.assertEqual(next(d), (2, 0))\n            self.assertEqual(next(d), (5, 0))\n            self.assertEqual(next(d), (0, 1))\n    def testTriple(self):\n        d = iter(util.IntervalDifferential([2, 4, 5], 10))\n        for i in range(100):\n            self.assertEqual(next(d), (2, 0))\n            self.assertEqual(next(d), (2, 0))\n            self.assertEqual(next(d), (0, 1))\n            self.assertEqual(next(d), (1, 2))\n            self.assertEqual(next(d), (1, 0))\n            self.assertEqual(next(d), (2, 0))\n            self.assertEqual(next(d), (0, 1))\n            self.assertEqual(next(d), (2, 0))\n            self.assertEqual(next(d), (0, 2))\n            self.assertEqual(next(d), (2, 0))\n            self.assertEqual(next(d), (0, 1))\n            self.assertEqual(next(d), (2, 0))\n            self.assertEqual(next(d), (1, 2))\n            self.assertEqual(next(d), (1, 0))\n            self.assertEqual(next(d), (0, 1))\n            self.assertEqual(next(d), (2, 0))\n            self.assertEqual(next(d), (2, 0))\n            self.assertEqual(next(d), (0, 1))\n            self.assertEqual(next(d), (0, 2))\n    def testInsert(self):\n        d = iter(util.IntervalDifferential([], 10))\n        self.assertEqual(next(d), (10, None))\n        d.addInterval(3)\n        self.assertEqual(next(d), (3, 0))\n        self.assertEqual(next(d), (3, 0))\n        d.addInterval(6)\n        self.assertEqual(next(d), (3, 0))\n        self.assertEqual(next(d), (3, 0))\n        self.assertEqual(next(d), (0, 1))\n        self.assertEqual(next(d), (3, 0))\n        self.assertEqual(next(d), (3, 0))\n        self.assertEqual(next(d), (0, 1))\n    def testRemove(self):\n        d = iter(util.IntervalDifferential([3, 5], 10))\n        self.assertEqual(next(d), (3, 0))\n        self.assertEqual(next(d), (2, 1))\n        self.assertEqual(next(d), (1, 0))\n        d.removeInterval(3)\n        self.assertEqual(next(d), (4, 0))\n        self.assertEqual(next(d), (5, 0))\n        d.removeInterval(5)\n        self.assertEqual(next(d), (10, None))\n        self.assertRaises(ValueError, d.removeInterval, 10)\nclass Record(util.FancyEqMixin):\n    \"\"\"\n    Trivial user of L{FancyEqMixin} used by tests.\n    \"\"\"\n    compareAttributes = ('a', 'b')\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\nclass DifferentRecord(util.FancyEqMixin):\n    \"\"\"\n    Trivial user of L{FancyEqMixin} which is not related to L{Record}.\n    \"\"\"\n    compareAttributes = ('a', 'b')\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\nclass DerivedRecord(Record):\n    \"\"\"\n    A class with an inheritance relationship to L{Record}.\n    \"\"\"\nclass EqualToEverything(object):\n    \"\"\"\n    A class the instances of which consider themselves equal to everything.\n    \"\"\"\n    def __eq__(self, other):\n        return True\n    def __ne__(self, other):\n        return False\nclass EqualToNothing(object):\n    \"\"\"\n    A class the instances of which consider themselves equal to nothing.\n    \"\"\"\n    def __eq__(self, other):\n        return False\n    def __ne__(self, other):\n        return True\nclass EqualityTests(unittest.TestCase):\n    \"\"\"\n    Tests for L{FancyEqMixin}.\n    \"\"\"\n    def test_identity(self):\n        \"\"\"\n        Instances of a class which mixes in L{FancyEqMixin} but which\n        defines no comparison attributes compare by identity.\n        \"\"\"\n        class Empty(util.FancyEqMixin):\n            pass\n        self.assertFalse(Empty() == Empty())\n        self.assertTrue(Empty() != Empty())\n        empty = Empty()\n        self.assertTrue(empty == empty)\n        self.assertFalse(empty != empty)\n    def test_equality(self):\n        \"\"\"\n        Instances of a class which mixes in L{FancyEqMixin} should compare\n        equal if all of their attributes compare equal.  They should not\n        compare equal if any of their attributes do not compare equal.\n        \"\"\"\n        self.assertTrue(Record(1, 2) == Record(1, 2))\n        self.assertFalse(Record(1, 2) == Record(1, 3))\n        self.assertFalse(Record(1, 2) == Record(2, 2))\n        self.assertFalse(Record(1, 2) == Record(3, 4))\n    def test_unequality(self):\n        \"\"\"\n        Inequality between instances of a particular L{record} should be\n        defined as the negation of equality.\n        \"\"\"\n        self.assertFalse(Record(1, 2) != Record(1, 2))\n        self.assertTrue(Record(1, 2) != Record(1, 3))\n        self.assertTrue(Record(1, 2) != Record(2, 2))\n        self.assertTrue(Record(1, 2) != Record(3, 4))\n    def test_differentClassesEquality(self):\n        \"\"\"\n        Instances of different classes which mix in L{FancyEqMixin} should not\n        compare equal.\n        \"\"\"\n        self.assertFalse(Record(1, 2) == DifferentRecord(1, 2))\n    def test_differentClassesInequality(self):\n        \"\"\"\n        Instances of different classes which mix in L{FancyEqMixin} should\n        compare unequal.\n        \"\"\"\n        self.assertTrue(Record(1, 2) != DifferentRecord(1, 2))\n    def test_inheritedClassesEquality(self):\n        \"\"\"\n        An instance of a class which derives from a class which mixes in\n        L{FancyEqMixin} should compare equal to an instance of the base class\n        if and only if all of their attributes compare equal.\n        \"\"\"\n        self.assertTrue(Record(1, 2) == DerivedRecord(1, 2))\n        self.assertFalse(Record(1, 2) == DerivedRecord(1, 3))\n        self.assertFalse(Record(1, 2) == DerivedRecord(2, 2))\n        self.assertFalse(Record(1, 2) == DerivedRecord(3, 4))\n    def test_inheritedClassesInequality(self):\n        \"\"\"\n        An instance of a class which derives from a class which mixes in\n        L{FancyEqMixin} should compare unequal to an instance of the base\n        class if any of their attributes compare unequal.\n        \"\"\"\n        self.assertFalse(Record(1, 2) != DerivedRecord(1, 2))\n        self.assertTrue(Record(1, 2) != DerivedRecord(1, 3))\n        self.assertTrue(Record(1, 2) != DerivedRecord(2, 2))\n        self.assertTrue(Record(1, 2) != DerivedRecord(3, 4))\n    def test_rightHandArgumentImplementsEquality(self):\n        \"\"\"\n        The right-hand argument to the equality operator is given a chance\n        to determine the result of the operation if it is of a type\n        unrelated to the L{FancyEqMixin}-based instance on the left-hand\n        side.\n        \"\"\"\n        self.assertTrue(Record(1, 2) == EqualToEverything())\n        self.assertFalse(Record(1, 2) == EqualToNothing())\n    def test_rightHandArgumentImplementsUnequality(self):\n        \"\"\"\n        The right-hand argument to the non-equality operator is given a\n        chance to determine the result of the operation if it is of a type\n        unrelated to the L{FancyEqMixin}-based instance on the left-hand\n        side.\n        \"\"\"\n        self.assertFalse(Record(1, 2) != EqualToEverything())\n        self.assertTrue(Record(1, 2) != EqualToNothing())\nclass RunAsEffectiveUserTests(unittest.TestCase):\n    \"\"\"\n    Test for the L{util.runAsEffectiveUser} function.\n    \"\"\"\n    if getattr(os, \"geteuid\", None) is None:\n        skip = \"geteuid/seteuid not available\"\n    def setUp(self):\n        self.mockos = MockOS()\n        self.patch(os, \"geteuid\", self.mockos.geteuid)\n        self.patch(os, \"getegid\", self.mockos.getegid)\n        self.patch(os, \"seteuid\", self.mockos.seteuid)\n        self.patch(os, \"setegid\", self.mockos.setegid)\n    def _securedFunction(self, startUID, startGID, wantUID, wantGID):\n        \"\"\"\n        Check if wanted UID/GID matched start or saved ones.\n        \"\"\"\n        self.assertTrue(wantUID == startUID or\n                        wantUID == self.mockos.seteuidCalls[-1])\n        self.assertTrue(wantGID == startGID or\n                        wantGID == self.mockos.setegidCalls[-1])\n    def test_forwardResult(self):\n        \"\"\"\n        L{util.runAsEffectiveUser} forwards the result obtained by calling the\n        given function\n        \"\"\"\n        result = util.runAsEffectiveUser(0, 0, lambda: 1)\n        self.assertEqual(result, 1)\n    def test_takeParameters(self):\n        \"\"\"\n        L{util.runAsEffectiveUser} pass the given parameters to the given\n        function.\n        \"\"\"\n        result = util.runAsEffectiveUser(0, 0, lambda x: 2*x, 3)\n        self.assertEqual(result, 6)\n    def test_takesKeyworkArguments(self):\n        \"\"\"\n        L{util.runAsEffectiveUser} pass the keyword parameters to the given\n        function.\n        \"\"\"\n        result = util.runAsEffectiveUser(0, 0, lambda x, y=1, z=1: x*y*z, 2, z=3)\n        self.assertEqual(result, 6)\n    def _testUIDGIDSwitch(self, startUID, startGID, wantUID, wantGID,\n                          expectedUIDSwitches, expectedGIDSwitches):\n        \"\"\"\n        Helper method checking the calls to C{os.seteuid} and C{os.setegid}\n        made by L{util.runAsEffectiveUser}, when switching from startUID to\n        wantUID and from startGID to wantGID.\n        \"\"\"\n        self.mockos.euid = startUID\n        self.mockos.egid = startGID\n        util.runAsEffectiveUser(\n            wantUID, wantGID,\n            self._securedFunction, startUID, startGID, wantUID, wantGID)\n        self.assertEqual(self.mockos.seteuidCalls, expectedUIDSwitches)\n        self.assertEqual(self.mockos.setegidCalls, expectedGIDSwitches)\n        self.mockos.seteuidCalls = []\n        self.mockos.setegidCalls = []\n    def test_root(self):\n        \"\"\"\n        Check UID/GID switches when current effective UID is root.\n        \"\"\"\n        self._testUIDGIDSwitch(0, 0, 0, 0, [], [])\n        self._testUIDGIDSwitch(0, 0, 1, 0, [1, 0], [])\n        self._testUIDGIDSwitch(0, 0, 0, 1, [], [1, 0])\n        self._testUIDGIDSwitch(0, 0, 1, 1, [1, 0], [1, 0])\n    def test_UID(self):\n        \"\"\"\n        Check UID/GID switches when current effective UID is non-root.\n        \"\"\"\n        self._testUIDGIDSwitch(1, 0, 0, 0, [0, 1], [])\n        self._testUIDGIDSwitch(1, 0, 1, 0, [], [])\n        self._testUIDGIDSwitch(1, 0, 1, 1, [0, 1, 0, 1], [1, 0])\n", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "length": 2189, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "7e20f7645ae46306c1c075059d48f64e2003534e7b1502c4"}
{"input": "", "context": "package com.entrepidea.swing.components.checkbox;\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.io.Serializable;\nimport javax.swing.ButtonGroup;\nimport javax.swing.ButtonModel;\nimport javax.swing.Icon;\nimport javax.swing.JCheckBox;\nimport javax.swing.JFrame;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.plaf.UIResource;\nimport javax.swing.plaf.metal.MetalLookAndFeel;\npublic class TristateCheckbox extends JCheckBox {\n\tprivate static class State {\n\t\tString desc = \"\";\n\t\t//\"NOT_SELECTED\",\"CHECKED\", \"CROSSED\"\n\t\tprivate State(){}\n\t\t\n\t\tprivate State(String s){\n\t\t\tdesc = s;\n\t\t}\n\t\t@Override\n\t\tpublic String toString(){\n\t\t\treturn desc;\n\t\t}\n\t}\n\t\n\tpublic static final State NOT_SELECTED = new State(\"NOT_SELECTED\");\n\tpublic static final State CHECKED = new State(\"CHECKED\");\n\tpublic static final State CROSSED = new State(\"CROSSED\");\n\t\n\tprivate TristateCheckModel model = null;\n\t\n\tpublic TristateCheckbox(){\n\t\tthis(null);\n\t}\n\t\n\tpublic TristateCheckbox(String text){\n\t\tsuper(text);\n\t\t//set properties and model\n\t\tsuper.setIcon(new TristateIcon());\n\t\tsetModel((model = new TristateCheckModel(getModel())));\n\t\tsetState(NOT_SELECTED);\n\t\t\n\t\t//add listeners\n\t\tsuper.addMouseListener(new MouseAdapter(){\n\t\t\t@Override\n\t\t\tpublic void mousePressed(MouseEvent e){\n\t\t\t\tTristateCheckbox.this.mousePressed();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void mouseReleased(MouseEvent e){\n\t\t\t\tTristateCheckbox.this.mouseReleased();\n\t\t\t}\n\t\t});\n\t}\n\t\n\tprivate void mousePressed(){\n\t\tSystem.out.println(\"mouse pressed\");\n\t\tgrabFocus();\n\t\tmodel.setArmed(true);\n\t\tmodel.setPressed(true);\n\t}\n\t\n\tprivate void mouseReleased(){\n\t\tSystem.out.println(\"mouse released\");\n\t\tmodel.nextState();\n\t\tmodel.setArmed(false);\n\t\tmodel.setPressed(false);\n\t}\n\t\n\tpublic void doClick(){\n\t\tmousePressed();\n\t\tmouseReleased();\n\t}\n\tpublic void setState(State s){\n\t\tmodel.setState(s);\n\t}\n\t\n\tpublic State getState(){\n\t\treturn model.getState();\n\t}\n\t\n\t\n\tpublic void setSelected(boolean selected) {\n\t\tif (selected) {\n\t\t\tsetState(CHECKED);\n\t\t} else {\n\t\t\tsetState(NOT_SELECTED);\n\t\t}\n\t}\n\t\n\tprivate class TristateCheckModel implements ButtonModel{\n\t\tButtonModel model = null;\n\t\tState currentState = NOT_SELECTED;\n\t\t\n\t\tpublic TristateCheckModel(ButtonModel model){\n\t\t\tthis.model = model;\n\t\t}\n\t\t\n\t\tpublic void setState(State s){\n\t\t\tcurrentState = s;\n\t\t};\n\t\t\n\t\tpublic State getState(){\n\t\t\treturn currentState;\n\t\t}\n\t\t\n\t\tpublic void nextState(){\n\t\t\tState s = getState();\n\t\t\tSystem.out.println(\"current state: \"+s);\n\t\t\tif(s==NOT_SELECTED){\n\t\t\t\tsetState(CHECKED);\n\t\t\t}\n\t\t\telse if(s == CHECKED){\n\t\t\t\tsetState(CROSSED);\n\t\t\t}\n\t\t\telse if(s== CROSSED){\n\t\t\t\tsetState(NOT_SELECTED);\n\t\t\t}\n\t\t\tSystem.out.println(getState());\n\t\t\tmodel.setSelected(!model.isSelected()); //trigger the fireEvent\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t@Override\n\t\tpublic Object[] getSelectedObjects() {\n\t\t\treturn model.getSelectedObjects();\n\t\t}\n\t\t@Override\n\t\tpublic boolean isArmed() {\n\t\t\treturn model.isArmed();\n\t\t}\n\t\t@Override\n\t\tpublic boolean isSelected() {\n\t\t\treturn (currentState == CHECKED || currentState == CROSSED);\n\t\t}\n\t\t@Override\n\t\tpublic boolean isEnabled() {\n\t\t\treturn model.isEnabled();\n\t\t}\n\t\t@Override\n\t\tpublic boolean isPressed() {\n\t\t\treturn model.isPressed();\n\t\t}\n\t\t@Override\n\t\tpublic boolean isRollover() {\n\t\t\treturn model.isRollover();\n\t\t}\n\t\t@Override\n\t\tpublic void setArmed(boolean b) {\n\t\t\tmodel.setArmed(b);\n\t\t}\n\t\t@Override\n\t\tpublic void setSelected(boolean b) {\n\t\t\tmodel.setSelected(b);\n\t\t}\n\t\t@Override\n\t\tpublic void setEnabled(boolean b) {\n\t\t\ttry {\n\t\t\t\tsetFocusable(b);\t\n\t\t\t} catch (Exception ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}//catch\n\t\t\t\n\t\t\tmodel.setEnabled(b);\n\t\t}\n\t\t@Override\n\t\tpublic void setPressed(boolean b) {\n\t\t\tmodel.setPressed(b);\n\t\t}\n\t\t@Override\n\t\tpublic void setRollover(boolean b) {\n\t\t\tmodel.setRollover(b);\n\t\t}\n\t\t@Override\n\t\tpublic void setMnemonic(int key) {\n\t\t\tmodel.setMnemonic(key);\n\t\t}\n\t\t@Override\n\t\tpublic int getMnemonic() {\n\t\t\treturn model.getMnemonic();\n\t\t}\n\t\t@Override\n\t\tpublic void setActionCommand(String s) {\n\t\t\tmodel.setActionCommand(s);\n\t\t}\n\t\t@Override\n\t\tpublic String getActionCommand() {\n\t\t\treturn model.getActionCommand();\n\t\t}\n\t\t@Override\n\t\tpublic void setGroup(ButtonGroup group) {\n\t\t\tmodel.setGroup(group);\n\t\t}\n\t\t@Override\n\t\tpublic void addActionListener(ActionListener l) {\n\t\t\tmodel.addActionListener(l);\n\t\t}\n\t\t@Override\n\t\tpublic void removeActionListener(ActionListener l) {\n\t\t\tmodel.removeActionListener(l);\n\t\t}\n\t\t@Override\n\t\tpublic void addItemListener(ItemListener l) {\n\t\t\tmodel.addItemListener(l);\n\t\t}\n\t\t@Override\n\t\tpublic void removeItemListener(ItemListener l) {\n\t\t\tmodel.removeItemListener(l);\n\t\t}\n\t\t@Override\n\t\tpublic void addChangeListener(ChangeListener l) {\n\t\t\tmodel.addChangeListener(l);\n\t\t}\n\t\t@Override\n\t\tpublic void removeChangeListener(ChangeListener l) {\n\t\t\tmodel.removeChangeListener(l);\n\t\t}\n\t\t\n\t}\n\t\n\tprivate class TristateIcon implements Icon, UIResource, Serializable{\n \n\t\tprivate static final long serialVersionUID = 1L;\n\t\tprotected int getControlSize() {\n\t\t\treturn 13;\n\t\t}\n \n\t\tpublic void paintIcon(Component c, Graphics g, int x, int y) {\n\t\t\tJCheckBox cb = (JCheckBox)c;\n\t\t\tTristateCheckModel model = (TristateCheckModel)cb.getModel();\n\t\t\t\n\t\t\tboolean bDrawCross = model.getState() == CROSSED;\n\t\t\tboolean bDrawCheck = model.getState() == CHECKED;\n\t\t\t\n\t\t\tint controlSize = getControlSize();\n\t\t\t\n\t\t\tif(model.isEnabled()){\n\t\t\t\tif(model.isPressed() && model.isArmed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "length": 518, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "971fbab8c3ab0ce2be833fead765ea9d6620fe3529e6e4f2"}
{"input": "", "context": "#!/usr/bin/env python\n# ----------------------------------------------------------------------\n# Numenta Platform for Intelligent Computing (NuPIC)\n# Copyright (C) 2014, Numenta, Inc.  Unless you have purchased from\n# Numenta, Inc. a separate commercial license for this software code, the\n# following terms and conditions apply:\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License version 3 as\n# published by the Free Software Foundation.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see http://www.gnu.org/licenses.\n#\n# http://numenta.org/licenses/\n# ----------------------------------------------------------------------\nimport logging\nimport time\nimport unittest2 as unittest\nimport cPickle\nimport numpy\nfrom nupic.regions.PyRegion import RealNumpyDType\nfrom nupic.algorithms.KNNClassifier import KNNClassifier\nimport pca_knn_data\nLOGGER = logging.getLogger(__name__)\nclass KNNClassifierTest(unittest.TestCase):\n  \"\"\"Tests for k Nearest Neighbor classifier\"\"\"\n  \n  def runTestKNNClassifier(self, short = 0):\n    \"\"\" Test the KNN classifier in this module. short can be:\n        0 (short), 1 (medium), or 2 (long)\n    \"\"\"\n    failures = \"\"\n    if short != 2:\n      numpy.random.seed(42)\n    else:\n      seed_value = int(time.time())\n      # seed_value = 1276437656\n      #seed_value = 1277136651\n      numpy.random.seed(seed_value)\n      LOGGER.info('Seed used: %d', seed_value)\n      f = open('seedval', 'a')\n      f.write(str(seed_value))\n      f.write('\\n')\n      f.close()\n    failures += simulateKMoreThanOne()\n    LOGGER.info(\"\\nTesting KNN Classifier on dense patterns\")\n    numPatterns, numClasses = getNumTestPatterns(short)\n    patterns = numpy.random.rand(numPatterns, 100)\n    patternDict = dict()\n    # Assume there are no repeated patterns -- if there are, then\n    # numpy.random would be completely broken.\n    for i in xrange(numPatterns):\n      randCategory = numpy.random.randint(0, numClasses-1)\n      patternDict[i] = dict()\n      patternDict[i]['pattern'] = patterns[i]\n      patternDict[i]['category'] = randCategory\n    LOGGER.info(\"\\nTesting KNN Classifier with L2 norm\")\n    knn = KNNClassifier(k=1)\n    failures += simulateClassifier(knn, patternDict, \\\n      \"KNN Classifier with L2 norm test\")\n    LOGGER.info(\"\\nTesting KNN Classifier with L1 norm\")\n    knnL1 = KNNClassifier(k=1, distanceNorm=1.0)\n    failures += simulateClassifier(knnL1, patternDict, \\\n      \"KNN Classifier with L1 norm test\")\n    numPatterns, numClasses = getNumTestPatterns(short)\n    patterns = (numpy.random.rand(numPatterns, 25) > 0.7).astype(RealNumpyDType)\n    patternDict = dict()\n    for i in patterns:\n      iString = str(i.tolist())\n      if not patternDict.has_key(iString):\n        randCategory = numpy.random.randint(0, numClasses-1)\n        patternDict[iString] = dict()\n        patternDict[iString]['pattern'] = i\n        patternDict[iString]['category'] = randCategory\n    LOGGER.info(\"\\nTesting KNN on sparse patterns\")\n    knnDense = KNNClassifier(k=1)\n    failures += simulateClassifier(knnDense, patternDict, \\\n      \"KNN Classifier on sparse pattern test\")\n    self.assertEqual(len(failures), 0,\n      \"Tests failed: \\n\" + failures)\n    if short == 2:\n      f = open('seedval', 'a')\n      f.write('Pass\\n')\n      f.close()\n  def runTestPCAKNN(self, short = 0):\n    LOGGER.info('\\nTesting PCA/k-NN classifier')\n    LOGGER.info('Mode=%s', short)\n    numDims = 10\n    numClasses = 10\n    k = 10\n    numPatternsPerClass = 100\n    numPatterns = int(.9 * numClasses * numPatternsPerClass)\n    numTests = numClasses * numPatternsPerClass - numPatterns\n    numSVDSamples = int(.1 * numPatterns)\n    keep = 1\n    train_data, train_class, test_data, test_class = \\\n        pca_knn_data.generate(numDims, numClasses, k, numPatternsPerClass,\n                              numPatterns, numTests, numSVDSamples, keep)\n    pca_knn = KNNClassifier(k=k,numSVDSamples=numSVDSamples,\n                            numSVDDims=keep)\n    knn = KNNClassifier(k=k)\n    LOGGER.info('Training PCA k-NN')\n    for i in range(numPatterns):\n      knn.learn(train_data[i], train_class[i])\n      pca_knn.learn(train_data[i], train_class[i])\n    LOGGER.info('Testing PCA k-NN')\n    numWinnerFailures = 0\n    numInferenceFailures = 0\n    numDistFailures = 0\n    numAbsErrors = 0\n    for i in range(numTests):\n      winner, inference, dist, categoryDist = knn.infer(test_data[i])\n      pca_winner, pca_inference, pca_dist, pca_categoryDist \\\n        = pca_knn.infer(test_data[i])\n      if winner != test_class[i]:\n        numAbsErrors += 1\n      if pca_winner != winner:\n        numWinnerFailures += 1\n      if (numpy.abs(pca_inference - inference) > 1e-4).any():\n        numInferenceFailures += 1\n      if (numpy.abs(pca_dist - dist) > 1e-4).any():\n        numDistFailures += 1\n    s0 = 100*float(numTests - numAbsErrors) / float(numTests)\n    s1 = 100*float(numTests - numWinnerFailures) / float(numTests)\n    s2 = 100*float(numTests - numInferenceFailures) / float(numTests)\n    s3 = 100*float(numTests - numDistFailures) / float(numTests)\n    LOGGER.info('PCA/k-NN success rate=%s%s', s0, '%')\n    LOGGER.info('Winner success=%s%s', s1, '%')\n    LOGGER.info('Inference success=%s%s', s2, '%')\n    LOGGER.info('Distance success=%s%s', s3, '%')\n    self.assertEqual(s1, 100.0,\n      \"PCA/k-NN test failed\")\n  def testKNNClassifierShort(self):\n    self.runTestKNNClassifier(0)\n  def testPCAKNNShort(self):\n    self.runTestPCAKNN(0)\n  def testKNNClassifierMedium(self):\n    self.runTestKNNClassifier(1)\n  def testPCAKNNMedium(self):\n    self.runTestPCAKNN(1)\ndef simulateKMoreThanOne():\n  \"\"\"A small test with k=3\"\"\"\n  failures = \"\"\n  LOGGER.info(\"Testing the sparse KNN Classifier with k=3\")\n  knn = KNNClassifier(k=3)\n  v = numpy.zeros((6, 2))\n  v[0] = [1.0, 0.0]\n  v[1] = [1.0, 0.2]\n  v[2] = [1.0, 0.2]\n  v[3] = [1.0, 2.0]\n  v[4] = [1.0, 4.0]\n  v[5] = [1.0, 4.5]\n  knn.learn(v[0], 0)\n  knn.learn(v[1], 0)\n  knn.learn(v[2], 0)\n  knn.learn(v[3], 1)\n  knn.learn(v[4], 1)\n  knn.learn(v[5], 1)\n  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[0])\n  if winner != 0:\n    failures += \"Inference failed with k=3\\n\"\n", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "length": 685, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "397181750c46cc7bb5cfa79f1f6812770ddf55fc6dac89cd"}
{"input": "", "context": "/*\n * Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.sun.max.vm.layout.ohm;\nimport java.lang.reflect.*;\nimport com.sun.max.annotate.*;\nimport com.sun.max.unsafe.*;\nimport com.sun.max.vm.actor.holder.*;\nimport com.sun.max.vm.layout.*;\nimport com.sun.max.vm.layout.Layout.HeaderField;\nimport com.sun.max.vm.maxsim.MaxSimInterfaceHelpers;\nimport com.sun.max.vm.maxsim.MaxSimPlatform;\nimport com.sun.max.vm.object.*;\nimport com.sun.max.vm.reference.*;\nimport com.sun.max.vm.type.*;\nimport com.sun.max.vm.value.*;\nimport com.sun.max.vm.maxsim.MaxSimTaggingScheme;\n/**\n */\npublic class OhmArrayLayout extends OhmGeneralLayout implements ArrayLayout {\n    /**\n     * The cell offset of the word in the header containing the array length.\n     */\n    public final int lengthOffset;\n    public final int headerSize;\n    public final Kind elementKind;\n    @INLINE\n    public final int headerSize() {\n        return headerSize;\n    }\n    public HeaderField[] headerFields() {\n        return new HeaderField[] {HeaderField.HUB, HeaderField.MISC, HeaderField.LENGTH};\n    }\n    OhmArrayLayout(Kind elementKind) {\n        lengthOffset = miscOffset + MaxSimInterfaceHelpers.getLayoutScaleFactor() * Word.size();\n        headerSize = lengthOffset + MaxSimInterfaceHelpers.getLayoutScaleFactor() * Word.size();\n        this.elementKind = elementKind;\n    }\n    public boolean isArrayLayout() {\n        return true;\n    }\n    @INLINE\n    public final Size getArraySize(Kind kind, int length) {\n        int scaleFactor = MaxSimTaggingScheme.compareUntaggedObjects(kind, Kind.REFERENCE) ?\n            MaxSimInterfaceHelpers.getLayoutScaleRefFactor() : MaxSimInterfaceHelpers.getLayoutScaleFactor();\n        return Size.fromInt(scaleFactor * kind.width.numberOfBytes).times(length).plus(headerSize).alignUp(Word.size() * MaxSimInterfaceHelpers.getLayoutScaleFactor());\n    }\n    @Override\n    public Offset getOffsetFromOrigin(HeaderField headerField) {\n        if (headerField == HeaderField.LENGTH) {\n            return Offset.fromInt(lengthOffset);\n        }\n        return super.getOffsetFromOrigin(headerField);\n    }\n    public int arrayLengthOffset() {\n        return lengthOffset;\n    }\n    @INLINE\n    public final int readLength(Accessor accessor) {\n        return accessor.readInt(lengthOffset);\n    }\n    @INLINE\n    public final void writeLength(Accessor accessor, int length) {\n        accessor.writeInt(lengthOffset, length);\n    }\n    @INLINE\n    public final Kind elementKind() {\n        return elementKind;\n    }\n    public Layout.Category category() {\n        return Layout.Category.ARRAY;\n    }\n    @Override\n    public final boolean isReferenceArrayLayout() {\n        final Kind rawKind = elementKind;\n        return rawKind.isReference;\n    }\n    @INLINE\n    public final int elementSize() {\n        return elementKind().width.numberOfBytes;\n    }\n    @INLINE\n    protected final int originDisplacement() {\n        return headerSize();\n    }\n    @INLINE\n    public final Offset getElementOffsetFromOrigin(int index) {\n        return getElementOffsetInCell(index);\n    }\n    @INLINE\n    public final Offset getElementOffsetInCell(int index) {\n        // Converting to 'Offset' before multiplication to avoid overflow:\n        return Offset.fromInt(index).times(elementSize()).plus(headerSize());\n    }\n    @INLINE\n    public final Size getArraySize(int length) {\n        int scaleFactor = MaxSimTaggingScheme.compareUntaggedObjects(elementKind, Kind.REFERENCE) ?\n            MaxSimInterfaceHelpers.getLayoutScaleRefFactor() : MaxSimInterfaceHelpers.getLayoutScaleFactor();\n        return getElementOffsetInCell(scaleFactor * length).aligned(MaxSimInterfaceHelpers.getLayoutScaleFactor()).asSize();\n    }\n    @INLINE\n    public final Size getArraySizeUnscaled(int length) {\n        return getElementOffsetInCell(length).aligned().asSize();\n    }\n    @INLINE\n    public final Size specificSize(Accessor accessor) {\n        return getArraySize(readLength(accessor));\n    }\n    @HOSTED_ONLY\n    @Override\n    public void visitHeader(ObjectCellVisitor visitor, Object array) {\n        super.visitHeader(visitor, array);\n        visitor.visitHeaderField(lengthOffset, \"length\", JavaTypeDescriptor.INT, IntValue.from(ArrayAccess.readArrayLength(array)));\n    }\n    @HOSTED_ONLY\n    private void visitElements(ObjectCellVisitor visitor, Object array) {\n        final int length = Array.getLength(array);\n        final Hub hub = ObjectAccess.readHub(array);\n        final Kind elementKind = hub.classActor.componentClassActor().kind;\n        if (elementKind.isReference) {\n            for (int i = 0; i < length; i++) {\n                final Object object = Array.get(array, i);\n                visitor.visitElement(getElementOffsetInCell(i).toInt(), i, ReferenceValue.from(object));\n            }\n        } else {\n            for (int i = 0; i < length; i++) {\n                final Object boxedJavaValue = Array.get(array, i);\n                final Value value = elementKind.asValue(boxedJavaValue);\n                visitor.visitElement(getElementOffsetInCell(i).toInt(), i, value);\n            }\n        }\n    }\n    @HOSTED_ONLY\n    public void visitObjectCell(Object array, ObjectCellVisitor visitor) {\n        visitHeader(visitor, array);\n        visitElements(visitor, array);\n    }\n    @HOSTED_ONLY\n    public Value readValue(Kind kind, ObjectMirror mirror, int offset) {\n        if (offset == lengthOffset) {\n            return IntValue.from(mirror.readArrayLength());\n        }\n        final Value value = readHeaderValue(mirror, offset);\n        if (value != null) {\n            return value;\n        }\n        assert kind.isPrimitiveOfSameSizeAs(elementKind);\n        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        return mirror.readElement(kind, index);\n    }\n    @HOSTED_ONLY\n    public void writeValue(Kind kind, ObjectMirror mirror, int offset, Value value) {\n        assert kind.isPrimitiveOfSameSizeAs(value.kind());\n        if (offset == lengthOffset) {\n            mirror.writeArrayLength(value);\n            return;\n        }\n        if (writeHeaderValue(mirror, offset, value)) {\n            return;\n        }\n        assert kind.isPrimitiveOfSameSizeAs(elementKind);\n", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "length": 681, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "0eae7d0813189dfb61921a6690103cb83cdea076b845d152"}
{"input": "", "context": "// pNAnt - A parallel .NET build tool\n// Copyright (C) 2016 Nathan Daniels\n// Original NAnt Copyright (C) 2001-2004 Gerry Shaw\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Matthew Mastracci (matt@aclaro.com)\n// Scott Ford (sford@RJKTECH.com)\n// Gert Driesen (drieseng@users.sourceforge.net)\nusing System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Globalization;\nusing System.IO;\nusing System.Xml;\nusing NAnt.Core;\nusing NAnt.Core.Util;\nnamespace NAnt.VSNet {\n    public abstract class AssemblyReferenceBase : FileReferenceBase {\n        protected AssemblyReferenceBase(XmlElement xmlDefinition, ReferencesResolver referencesResolver, ProjectBase parent, GacCache gacCache) : base(xmlDefinition, referencesResolver, parent, gacCache) {\n        }\n        protected abstract bool IsPrivate {\n            get;\n        }\n        protected abstract bool IsPrivateSpecified {\n            get;\n        }\n        /// <summary>\n        /// Gets a value indicating whether the output file(s) of this reference \n        /// should be copied locally.\n        /// </summary>\n        /// <value>\n        /// <see langword=\"true\" /> if the output file(s) of this reference \n        /// should be copied locally; otherwise, <see langword=\"false\" />.\n        /// </value>\n        public override bool CopyLocal {\n            get {\n                if (IsPrivateSpecified) {\n                    return IsPrivate;\n                } else {\n                    // only copy local if assembly reference could be resolved,\n                    // if not a system assembly and is not in the GAC\n                    string assemblyFile = ResolveAssemblyReference();\n                    return assemblyFile != null && !IsSystem && \n                        !GacCache.IsAssemblyInGac(assemblyFile);\n                }\n            }\n        }\n        /// <summary>\n        /// Gets a value indicating whether this reference represents a system \n        /// assembly.\n        /// </summary>\n        /// <value>\n        /// <see langword=\"true\" /> if this reference represents a system \n        /// assembly; otherwise, <see langword=\"false\" />.\n        /// </value>\n        protected override bool IsSystem {\n            get { \n                // if the assembly cannot be resolved, we consider it not to\n                // be a system assembly\n                string assemblyFile = ResolveAssemblyReference();\n                if (assemblyFile == null) {\n                    return false;\n                }\n                // check if assembly is stored in the framework assembly \n                // directory\n                return string.Compare(Path.GetDirectoryName(assemblyFile), \n                    SolutionTask.Project.TargetFramework.FrameworkAssemblyDirectory.FullName, \n                    true, CultureInfo.InvariantCulture) == 0;\n            }\n        }\n        /// <summary>\n        /// Gets the path of the reference, without taking the \"copy local\"\n        /// setting into consideration.\n        /// </summary>\n        /// <param name=\"solutionConfiguration\">The solution configuration that is built.</param>\n        /// <returns>\n        /// The output path of the reference.\n        /// </returns>\n        public override string GetPrimaryOutputFile(Configuration solutionConfiguration) {\n            return ResolveAssemblyReference();\n        }\n        /// <summary>\n        /// Gets the complete set of output files for the referenced project.\n        /// </summary>\n        /// <param name=\"solutionConfiguration\">The solution configuration that is built.</param>\n        /// <param name=\"outputFiles\">The set of output files to be updated.</param>\n        /// <remarks>\n        /// The key of the case-insensitive <see cref=\"Hashtable\" /> is the \n        /// full path of the output file and the value is the path relative to\n        /// the output directory.\n        /// </remarks>\n        public override void GetOutputFiles(Configuration solutionConfiguration, Hashtable outputFiles) {\n            string assemblyFile = ResolveAssemblyReference();\n            if (assemblyFile != null) {\n                base.GetAssemblyOutputFiles(assemblyFile, outputFiles);\n            }\n        }\n        /// <summary>\n        /// Gets the complete set of assemblies that need to be referenced when\n        /// a project references this component.\n        /// </summary>\n        /// <param name=\"solutionConfiguration\">The solution configuration that is built.</param>\n        /// <returns>\n        /// The complete set of assemblies that need to be referenced when a \n        /// project references this component.\n        /// </returns>\n        public override StringCollection GetAssemblyReferences(Configuration solutionConfiguration) {\n            // if we're dealing with an assembly reference, then we only \n            // need to reference that assembly itself as VS.NET forces users\n            // to add all dependent assemblies to the project itself\n            StringCollection assemblyReferences = new StringCollection();\n            // attempt to resolve assembly reference\n            string assemblyFile = ResolveAssemblyReference();\n            if (assemblyFile == null) {\n                Log(Level.Warning, \"Assembly \\\"{0}\\\", referenced\"\n                    + \" by project \\\"{1}\\\", could not be resolved.\", Name, \n                    Parent.Name);\n                return assemblyReferences;\n            }\n            // ensure assembly actually exists\n            if (!File.Exists(assemblyFile)) {\n                Log(Level.Warning, \"Assembly \\\"{0}\\\", referenced\"\n                    + \" by project \\\"{1}\\\", does not exist.\", assemblyFile, \n                    Parent.Name);\n                return assemblyReferences;\n            }\n            // add referenced assembly to list of reference assemblies\n            assemblyReferences.Add(assemblyFile);\n            return assemblyReferences;\n        }\n        /// <summary>\n        /// Gets the timestamp of the reference.\n        /// </summary>\n        /// <param name=\"solutionConfiguration\">The solution configuration that is built.</param>\n        /// <returns>\n        /// The timestamp of the reference.\n        /// </returns>\n        public override DateTime GetTimestamp(Configuration solutionConfiguration) {\n            string assemblyFile = ResolveAssemblyReference();\n            if (assemblyFile == null) {\n                return DateTime.MaxValue;\n            }\n            return GetFileTimestamp(assemblyFile);\n        }\n        public ProjectReferenceBase CreateProjectReference(ProjectBase project) {\n            return project.CreateProjectReference(project, IsPrivateSpecified, \n                IsPrivate);\n        }\n        /// <summary>\n        /// Resolves an assembly reference.\n        /// </summary>\n        /// <returns>\n        /// The full path to the resolved assembly, or <see langword=\"null\" />\n        /// if the assembly reference could not be resolved.\n        /// </returns>\n        protected abstract string ResolveAssemblyReference();\n        /// <summary>\n        /// Searches for the given file in all paths in <paramref name=\"folderList\" />.\n        /// </summary>\n        /// <param name=\"folderList\">The folders to search.</param>\n        /// <param name=\"fileName\">The file to search for.</param>\n        /// <returns>\n        /// The path of the assembly if <paramref name=\"fileName\" /> was found\n        /// in <paramref name=\"folderList\" />; otherwise, <see langword=\"null\" />.\n        /// </returns>\n        protected string ResolveFromFolderList(StringCollection folderList, string fileName) {\n            Log(Level.Debug, \"Attempting to resolve \\\"{0}\\\" in AssemblyFolders...\",\n                fileName);\n            foreach (string path in folderList) {\n                Log(Level.Debug, \"Checking \\\"{0}\\\"...\", path);\n                try {\n                    string assemblyFile = FileUtils.CombinePaths(path, fileName);\n                    if (File.Exists(assemblyFile)) {\n                        Log(Level.Debug, \"Assembly found in \\\"{0}\\\".\", path);\n                        return assemblyFile;\n                    } else {\n                        Log(Level.Debug, \"Assembly not found in \\\"{0}\\\".\", path);\n                    }\n                } catch (Exception ex) {\n                    Log(Level.Verbose, \"Error resolving reference to \\\"{0}\\\"\"\n                        + \" in directory \\\"{1}\\\".\", fileName, path);\n                    Log(Level.Debug, ex.ToString());\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Resolves an assembly reference in the framework assembly directory\n        /// of the target framework.\n        /// </summary>\n        /// <param name=\"fileName\">The file to search for.</param>\n        /// <returns>\n        /// The full path of the assembly file if the assembly could be located \n        /// in the framework assembly directory; otherwise, <see langword=\"null\" />.\n        /// </returns>\n        protected string ResolveFromFramework(string fileName) {\n            //string systemAssembly = FileUtils.CombinePaths(SolutionTask.Project.TargetFramework.\n            //    FrameworkAssemblyDirectory.FullName, fileName);\n            string systemAssembly = SolutionTask.Project.TargetFramework.ResolveAssembly(fileName);\n            if (File.Exists(systemAssembly)) {\n                return systemAssembly;\n            }\n            return null;\n        }\n        /// <summary>\n        /// Resolves an assembly reference using a path relative to the project \n        /// directory.\n        /// </summary>\n        /// <returns>\n        /// The full path of the assembly, or <see langword=\"null\" /> if \n        /// <paramref name=\"relativePath\" /> is <see langword=\"null\" /> or an\n        /// empty <see cref=\"string\" />.\n        /// </returns>\n        protected string ResolveFromRelativePath(string relativePath) {\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "length": 1081, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "27f6b503096cf445095535f5a908b7e00038cf4f23a5d499"}
{"input": "", "context": "\"\"\"\nUtilities\n\"\"\"\n# Consistency\nfrom __future__ import print_function\nimport copy\nimport getpass\nimport re\nimport readline\nimport sys\npy_version = sys.version_info.major\nif py_version == 2:\n    import urllib\nelse:\n    import urllib.parse as urllib\ntry:\n    import termcolor\n    if sys.platform == 'win32':\n        # Only enable termcolor on Windows if colorama is available\n        try:\n            import colorama\n            colorama.init()\n        except ImportError:\n            colorama = termcolor = None\nexcept ImportError:\n    termcolor = None\nif not sys.stdout.isatty() or '--no-color' in sys.argv:\n    # Prevent coloring of output with  --no-color or if stdout is not a tty\n    termcolor = None\nclass UnsupportedPythonVersion(Exception):\n    def __init__(self, *args, **kwargs):\n        super(UnsupportedPythonVersion, self).__init__(*args)\n        log('Unsupported Python version (%s)' %\n            (kwargs['version'] if 'version' in kwargs else py_version),\n            type='fatal')\nclass DynamicList(list):\n    def __setitem__(self, i, v):\n        # Fill with None\n        self[len(self):i+1] = [None for x in range(i+1-len(self))]\n        super(DynamicList, self).__setitem__(i, v)\n_log_color_split = re.compile('\\s*[,/]?\\s*')\n_log_opts = re.compile('<[^>]*>')\n_log_types = {\n    'error': 'red, bold',\n    'fatal': 'white, on_red, bold',\n    'warn': 'yellow, bold',\n    'ok': 'green',\n    'success': 'green, bold',\n    'info': 'blue',\n    'progress': 'cyan',\n    'bold': 'bold',\n    'underline': 'underline',\n}\ndef _log_parse(*args, **kwargs):\n    s = ' '.join([str(x) for x in args]) + '<>'\n    if 'type' in kwargs and kwargs['type'] in _log_types:\n        s = '<' + _log_types[kwargs['type']] + '>' + s\n    if 'color' not in kwargs:\n        kwargs['color'] = True\n    if termcolor is not None and kwargs['color']:\n        parts = s.replace('\\01', '').replace('<', '\\01<').split('\\01')\n        s = ''\n        for p in parts:\n            if '>' in p:\n                opts, text = p.split('>', 1)\n                if opts[1:2] == '+':\n                    opts = opts[2:]\n                else:\n                    opts = opts[1:]\n                    s += termcolor.RESET\n                opts = _log_color_split.split(opts)\n                args, attrs = [None, None], []\n                for opt in opts:\n                    opt = opt.lower()\n                    if opt in termcolor.COLORS:\n                        args[0] = opt\n                    elif opt in termcolor.HIGHLIGHTS:\n                        args[1] = opt\n                    elif opt in termcolor.ATTRIBUTES:\n                        attrs.append(opt)\n                s += termcolor.colored(text, *args, **{'attrs': attrs}).replace(termcolor.RESET, '')\n            else:\n                s += p\n    else:\n        # Remove <...> tags if termcolor isn't available\n        s = _log_opts.sub('', s)\n    return s\ndef log(*args, **kwargs):\n    print(_log_parse(*args, **kwargs))\ndef logf(*args, **kwargs):\n    sys.stdout.write(_log_parse(*args, **kwargs))\n    sys.stdout.flush()\n_debug = ('--debug' in sys.argv)\ndef debug(*args, **kwargs):\n    if _debug:\n        return log(*args, **kwargs)\n_input = input if py_version == 3 else raw_input\ndef input(prompt='', visible=True, input=''):\n    \"\"\"\n    Enhanced implementation of input (independent of Python version)\n    Similar to Python 2's \"raw_input\" and Python 3's \"input\"\n    prompt (string): The prompt to display (on the same line as the text)\n    visible (bool): Enables/disables echoing of input. Note that \"False\"\n        enforces a tty (i.e. it will read from the command line, not a file).\n    input (string): Formatting to apply to the input string (only when visible)\n        e.g. \"red, bold\" (angle brackets are not required)\n    \"\"\"\n    prompt = _log_parse(prompt)\n    if input and termcolor is not None:\n        input = input.replace('<', '').replace('>', '')\n        input = _log_parse('<%s>' % input).replace(termcolor.RESET, '')\n    try:\n        if not visible:\n            text = getpass.getpass(prompt)\n        else:\n            text = _input(prompt + input)\n    except:\n        logf('<>')  # Reset terminal\n        raise  # Allow exception to propagate\n    logf('<>')\n    return text\ndef get_file(prompt='File: ', exists=True, path=''):\n    \"\"\"\n    Prompt for a file\n    \n    prompt: Text to display (defaults to \"File: \")\n    exists: True if file should exist (defaults to True)\n    path: An initial path to use, returned if acceptable (optional)\n    \"\"\"\n    path = str(path)\n    while 1:\n        if not path:\n            path = input(prompt)\n        if exists:\n            try:\n                f = open(path)\n            except IOError:\n                pass\n            else:\n                break\n        else:\n            break\n        path = ''\n    return path\ndef die(*args, **kwargs):\n    log(*args, **kwargs)\n    sys.exit()\ndef dict_auto_filter(obj):\n    while True:\n        try:\n            if len(obj.keys()) > 1:\n                break\n            # list() is necessary for python 3, where keys() doesn't return\n            # a list that supports indexes\n            if isinstance(obj[list(obj.keys())[0]], dict):\n                obj = obj[list(obj.keys())[0]]\n            else:\n                break\n        except AttributeError:\n            # Single remaining object is not a dict\n            break\n    \n    return obj\ndef dict_extend(d1, d2):\n    \"\"\"\n    Merges dictionaries 'd1' and 'd2'\n    For keys that exist in both, the value from d2 is used\n    \"\"\"\n    return dict(d1, **d2)\ndef dict_recursive_fetch_list(d, key):\n    \"\"\"\n    Returns a list of _all_ values in dict 'd' with key 'key'\n    Also fetches items in lists\n    \"\"\"\n    l = []\n    \n    if isinstance(d, list):\n        for i in d:\n            l.extend(dict_recursive_fetch_list(i, key))\n        return l\n    for i in d:\n        if i == key:\n            l.append(d[i])\n        elif isinstance(d[i], (dict, list)):\n            l.extend(dict_recursive_fetch_list(d[i], key))\n            \n    return l\ndef recursive_merge(d1, d2):\n    \"\"\"\n    Merges two dictionaries and their sub-dictionaries and/or lists\n    \"\"\"\n    d1, d2 = copy.copy(d1), copy.copy(d2)\n    result = {} if isinstance(d1, dict) or isinstance(d2, dict) else []\n    keys = (list(d1.keys()) if isinstance(d1, dict) else range(len(d1))) + \\\n           (list(d2.keys()) if isinstance(d2, dict) else range(len(d2)))\n    # Remove duplicates\n    keys = list(set(keys))\n    if isinstance(result, dict):\n        # Current object is a dict\n        for k in keys:\n            if k in d1 and k in d2:\n                v1, v2 = d1[k], d2[k]\n                if v1 != v2:\n                    if isinstance(v1, (dict, list)) and isinstance(v2, (dict, list)):\n                        # Values can be merged\n                        result[k] = recursive_merge(v1, v2)\n                    else:\n                        # Values cannot be merged, so return the value from d1\n                        result[k] = v1\n                else:\n                    # Values are equal, so merging is unnecessary\n                    result[k] = v1\n            else:\n                # Key is either in d1 or d2\n                result[k] = d1[k] if k in d1 else d2[k]\n    else:\n        # Current object is a list\n        result = d1 + d2\n    return result\n    \ndef str_format(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    \n    >>> str_format('{a}', a=2)\n    {a}\n    >>> str_format('{%a%}', a=2)\n    2\n    >>> str_format('{% a %}', a=2)\n    2\n    \"\"\"\n    # Accept whitespace directly inside {% ... %} tags\n    string = re.compile(r'\\{%\\s+').sub('{%', string)\n    string = re.compile(r'\\s+%\\}').sub('%}', string)\n    string = string.replace('{','{{').replace('}','}}') \\\n        .replace('{{%', '{').replace('%}}','}')\n", "answers": ["    return string.format(*args, **kwargs)"], "length": 884, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "6b8b92b2b253189141dc998a845e117ddb34a9ced10cda39"}
{"input": "", "context": "package org.netlib.lapack;\nimport org.netlib.blas.Dcopy;\nimport org.netlib.err.Xerbla;\nimport org.netlib.util.doubleW;\nimport org.netlib.util.intW;\npublic final class Dlasda\n{\n  public static void dlasda(int paramInt1, int paramInt2, int paramInt3, int paramInt4, double[] paramArrayOfDouble1, int paramInt5, double[] paramArrayOfDouble2, int paramInt6, double[] paramArrayOfDouble3, int paramInt7, int paramInt8, double[] paramArrayOfDouble4, int paramInt9, int[] paramArrayOfInt1, int paramInt10, double[] paramArrayOfDouble5, int paramInt11, double[] paramArrayOfDouble6, int paramInt12, double[] paramArrayOfDouble7, int paramInt13, double[] paramArrayOfDouble8, int paramInt14, int[] paramArrayOfInt2, int paramInt15, int[] paramArrayOfInt3, int paramInt16, int paramInt17, int[] paramArrayOfInt4, int paramInt18, double[] paramArrayOfDouble9, int paramInt19, double[] paramArrayOfDouble10, int paramInt20, double[] paramArrayOfDouble11, int paramInt21, double[] paramArrayOfDouble12, int paramInt22, int[] paramArrayOfInt5, int paramInt23, intW paramintW)\n  {\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int m = 0;\n    int n = 0;\n    int i1 = 0;\n    int i2 = 0;\n    int i3 = 0;\n    int i4 = 0;\n    int i5 = 0;\n    int i6 = 0;\n    int i7 = 0;\n    int i8 = 0;\n    int i9 = 0;\n    int i10 = 0;\n    int i11 = 0;\n    intW localintW1 = new intW(0);\n    int i12 = 0;\n    int i13 = 0;\n    int i14 = 0;\n    int i15 = 0;\n    int i16 = 0;\n    int i17 = 0;\n    intW localintW2 = new intW(0);\n    int i18 = 0;\n    int i19 = 0;\n    int i20 = 0;\n    int i21 = 0;\n    int i22 = 0;\n    int i23 = 0;\n    int i24 = 0;\n    int i25 = 0;\n    int i26 = 0;\n    int i27 = 0;\n    int i28 = 0;\n    int i29 = 0;\n    doubleW localdoubleW1 = new doubleW(0.0D);\n    doubleW localdoubleW2 = new doubleW(0.0D);\n    paramintW.val = 0;\n    if ((paramInt1 >= 0 ? 0 : 1) == 0) {}\n    if (((paramInt1 <= 1 ? 0 : 1) == 0 ? 0 : 1) != 0)\n    {\n      paramintW.val = -1;\n    }\n    else if ((paramInt2 >= 3 ? 0 : 1) != 0)\n    {\n      paramintW.val = -2;\n    }\n    else if ((paramInt3 >= 0 ? 0 : 1) != 0)\n    {\n      paramintW.val = -3;\n    }\n    else\n    {\n      if ((paramInt4 >= 0 ? 0 : 1) == 0) {}\n      if (((paramInt4 <= 1 ? 0 : 1) == 0 ? 0 : 1) != 0) {\n        paramintW.val = -4;\n      } else if ((paramInt8 >= paramInt3 + paramInt4 ? 0 : 1) != 0) {\n        paramintW.val = -8;\n      } else if ((paramInt17 >= paramInt3 ? 0 : 1) != 0) {\n        paramintW.val = -17;\n      }\n    }\n    if ((paramintW.val == 0 ? 0 : 1) != 0)\n    {\n      Xerbla.xerbla(\"DLASDA\", -paramintW.val);\n      return;\n    }\n    i10 = paramInt3 + paramInt4;\n    if ((paramInt3 > paramInt2 ? 0 : 1) != 0)\n    {\n      if ((paramInt1 != 0 ? 0 : 1) != 0) {\n        Dlasdq.dlasdq(\"U\", paramInt4, paramInt3, 0, 0, 0, paramArrayOfDouble1, paramInt5, paramArrayOfDouble2, paramInt6, paramArrayOfDouble4, paramInt9, paramInt8, paramArrayOfDouble3, paramInt7, paramInt8, paramArrayOfDouble3, paramInt7, paramInt8, paramArrayOfDouble12, paramInt22, paramintW);\n      } else {\n        Dlasdq.dlasdq(\"U\", paramInt4, paramInt3, i10, paramInt3, 0, paramArrayOfDouble1, paramInt5, paramArrayOfDouble2, paramInt6, paramArrayOfDouble4, paramInt9, paramInt8, paramArrayOfDouble3, paramInt7, paramInt8, paramArrayOfDouble3, paramInt7, paramInt8, paramArrayOfDouble12, paramInt22, paramintW);\n      }\n      return;\n    }\n    i2 = 1;\n    i13 = i2 + paramInt3;\n    i14 = i13 + paramInt3;\n    m = i14 + paramInt3;\n    i4 = m + paramInt3;\n    i11 = 0;\n    i21 = 0;\n    i24 = paramInt2 + 1;\n    i26 = 1;\n    i28 = i26 + i10;\n    i22 = i28 + i10;\n    i23 = i22 + i24 * i24;\n    Dlasdt.dlasdt(paramInt3, localintW2, localintW1, paramArrayOfInt5, i2 - 1 + paramInt23, paramArrayOfInt5, i13 - 1 + paramInt23, paramArrayOfInt5, i14 - 1 + paramInt23, paramInt2);\n    i12 = (localintW1.val + 1) / 2;\n    i = i12;\n    int i31;\n    for (int i30 = localintW1.val - i12 + 1; i30 > 0; i30--)\n    {\n      j = i - 1;\n      k = paramArrayOfInt5[(i2 + j - 1 + paramInt23)];\n      i15 = paramArrayOfInt5[(i13 + j - 1 + paramInt23)];\n      i17 = i15 + 1;\n      i18 = paramArrayOfInt5[(i14 + j - 1 + paramInt23)];\n      i16 = k - i15;\n      i19 = k + 1;\n      n = m + i16 - 2;\n      i27 = i26 + i16 - 1;\n      i29 = i28 + i16 - 1;\n      i25 = 1;\n      if ((paramInt1 != 0 ? 0 : 1) != 0)\n      {\n        Dlaset.dlaset(\"A\", i17, i17, 0.0D, 1.0D, paramArrayOfDouble12, i22 - 1 + paramInt22, i24);\n        Dlasdq.dlasdq(\"U\", i25, i15, i17, i21, i11, paramArrayOfDouble1, i16 - 1 + paramInt5, paramArrayOfDouble2, i16 - 1 + paramInt6, paramArrayOfDouble12, i22 - 1 + paramInt22, i24, paramArrayOfDouble12, i23 - 1 + paramInt22, i15, paramArrayOfDouble12, i23 - 1 + paramInt22, i15, paramArrayOfDouble12, i23 - 1 + paramInt22, paramintW);\n        i3 = i22 + i15 * i24;\n        Dcopy.dcopy(i17, paramArrayOfDouble12, i22 - 1 + paramInt22, 1, paramArrayOfDouble12, i27 - 1 + paramInt22, 1);\n        Dcopy.dcopy(i17, paramArrayOfDouble12, i3 - 1 + paramInt22, 1, paramArrayOfDouble12, i29 - 1 + paramInt22, 1);\n      }\n      else\n      {\n        Dlaset.dlaset(\"A\", i15, i15, 0.0D, 1.0D, paramArrayOfDouble3, i16 - 1 + (1 - 1) * paramInt8 + paramInt7, paramInt8);\n        Dlaset.dlaset(\"A\", i17, i17, 0.0D, 1.0D, paramArrayOfDouble4, i16 - 1 + (1 - 1) * paramInt8 + paramInt9, paramInt8);\n        Dlasdq.dlasdq(\"U\", i25, i15, i17, i15, i11, paramArrayOfDouble1, i16 - 1 + paramInt5, paramArrayOfDouble2, i16 - 1 + paramInt6, paramArrayOfDouble4, i16 - 1 + (1 - 1) * paramInt8 + paramInt9, paramInt8, paramArrayOfDouble3, i16 - 1 + (1 - 1) * paramInt8 + paramInt7, paramInt8, paramArrayOfDouble3, i16 - 1 + (1 - 1) * paramInt8 + paramInt7, paramInt8, paramArrayOfDouble12, i22 - 1 + paramInt22, paramintW);\n        Dcopy.dcopy(i17, paramArrayOfDouble4, i16 - 1 + (1 - 1) * paramInt8 + paramInt9, 1, paramArrayOfDouble12, i27 - 1 + paramInt22, 1);\n        Dcopy.dcopy(i17, paramArrayOfDouble4, i16 - 1 + (i17 - 1) * paramInt8 + paramInt9, 1, paramArrayOfDouble12, i29 - 1 + paramInt22, 1);\n      }\n      if ((paramintW.val == 0 ? 0 : 1) != 0) {\n        return;\n      }\n      i5 = 1;\n      for (i31 = i15 - 1 + 1; i31 > 0; i31--)\n      {\n        paramArrayOfInt5[(n + i5 - 1 + paramInt23)] = i5;\n        i5 += 1;\n      }\n      if ((i != localintW1.val ? 0 : 1) != 0) {}\n      if (((paramInt4 != 0 ? 0 : 1) != 0 ? 1 : 0) != 0) {\n        i25 = 0;\n      } else {\n        i25 = 1;\n      }\n      n += i17;\n      i27 += i17;\n      i29 += i17;\n      i20 = i18 + i25;\n      if ((paramInt1 != 0 ? 0 : 1) != 0)\n      {\n        Dlaset.dlaset(\"A\", i20, i20, 0.0D, 1.0D, paramArrayOfDouble12, i22 - 1 + paramInt22, i24);\n        Dlasdq.dlasdq(\"U\", i25, i18, i20, i21, i11, paramArrayOfDouble1, i19 - 1 + paramInt5, paramArrayOfDouble2, i19 - 1 + paramInt6, paramArrayOfDouble12, i22 - 1 + paramInt22, i24, paramArrayOfDouble12, i23 - 1 + paramInt22, i18, paramArrayOfDouble12, i23 - 1 + paramInt22, i18, paramArrayOfDouble12, i23 - 1 + paramInt22, paramintW);\n        i3 = i22 + (i20 - 1) * i24;\n        Dcopy.dcopy(i20, paramArrayOfDouble12, i22 - 1 + paramInt22, 1, paramArrayOfDouble12, i27 - 1 + paramInt22, 1);\n        Dcopy.dcopy(i20, paramArrayOfDouble12, i3 - 1 + paramInt22, 1, paramArrayOfDouble12, i29 - 1 + paramInt22, 1);\n      }\n      else\n      {\n        Dlaset.dlaset(\"A\", i18, i18, 0.0D, 1.0D, paramArrayOfDouble3, i19 - 1 + (1 - 1) * paramInt8 + paramInt7, paramInt8);\n        Dlaset.dlaset(\"A\", i20, i20, 0.0D, 1.0D, paramArrayOfDouble4, i19 - 1 + (1 - 1) * paramInt8 + paramInt9, paramInt8);\n        Dlasdq.dlasdq(\"U\", i25, i18, i20, i18, i11, paramArrayOfDouble1, i19 - 1 + paramInt5, paramArrayOfDouble2, i19 - 1 + paramInt6, paramArrayOfDouble4, i19 - 1 + (1 - 1) * paramInt8 + paramInt9, paramInt8, paramArrayOfDouble3, i19 - 1 + (1 - 1) * paramInt8 + paramInt7, paramInt8, paramArrayOfDouble3, i19 - 1 + (1 - 1) * paramInt8 + paramInt7, paramInt8, paramArrayOfDouble12, i22 - 1 + paramInt22, paramintW);\n        Dcopy.dcopy(i20, paramArrayOfDouble4, i19 - 1 + (1 - 1) * paramInt8 + paramInt9, 1, paramArrayOfDouble12, i27 - 1 + paramInt22, 1);\n        Dcopy.dcopy(i20, paramArrayOfDouble4, i19 - 1 + (i20 - 1) * paramInt8 + paramInt9, 1, paramArrayOfDouble12, i29 - 1 + paramInt22, 1);\n      }\n      if ((paramintW.val == 0 ? 0 : 1) != 0) {\n        return;\n      }\n      i5 = 1;\n      for (i31 = i18 - 1 + 1; i31 > 0; i31--)\n      {\n        paramArrayOfInt5[(n + i5 - 1 + paramInt23)] = i5;\n        i5 += 1;\n      }\n      i += 1;\n    }\n    i5 = (int)Math.pow(2, localintW2.val);\n    i8 = localintW2.val;\n    for (int i30 = (1 - localintW2.val + -1) / -1; i30 > 0; i30--)\n    {\n      i9 = i8 * 2 - 1;\n      if ((i8 != 1 ? 0 : 1) != 0)\n      {\n        i6 = 1;\n        i7 = 1;\n      }\n      else\n      {\n        i6 = (int)Math.pow(2, i8 - 1);\n        i7 = 2 * i6 - 1;\n      }\n      i = i6;\n      for (i31 = i7 - i6 + 1; i31 > 0; i31--)\n      {\n        i1 = i - 1;\n        k = paramArrayOfInt5[(i2 + i1 - 1 + paramInt23)];\n        i15 = paramArrayOfInt5[(i13 + i1 - 1 + paramInt23)];\n        i18 = paramArrayOfInt5[(i14 + i1 - 1 + paramInt23)];\n        i16 = k - i15;\n        i19 = k + 1;\n", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "length": 1437, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "2249fb5b605f86689474ffb501216d8475418e32ce63adab"}
{"input": "", "context": "using UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nnamespace Mixamo {\n\t\n\tpublic interface TransitionHandler {\n\t\tstring[] KeyControls();\n\t\tbool CanTransitionTo( string guard , string source , string destination );\n\t}\n\t\n\t/// <summary>\n\t/// A class for holding all the control parameters (weights that control blend trees) in the graph.\n\t/// This also contains a paramter \"state_speed\" to control the playback speed of a state.\n\t/// </summary>\n\tpublic class ControlParameters {\n\t\t\n\t\tDictionary< string , float> dict = new Dictionary<string, float>();\n\t\t\n\t\tpublic ControlParameters(string[] opts,float[] vals) {\n\t\t\tif( opts != null && vals != null ) {\n\t\t\t\tfor( int i=0 ;i < opts.Length;i++ ) {\n\t\t\t\t\tdict.Add( opts[i] , vals[i] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic float this[string s]\n\t\t{\n\t\t    get { return dict[s]; }\n\t\t    set { \n\t\t\t\tdict[s] = value;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Returns a list of all control paramters\n\t\t/// </summary>\n\t\tpublic string[] Names {\n\t\t\tget {\n\t\t\t\tstring[] arr = new string[dict.Keys.Count];\n\t\t\t\tdict.Keys.CopyTo( arr , 0 );\n\t\t\t\treturn arr;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/// <summary>\n\t/// Base class that describes a Transition. All other transitions must override this class.\n\t/// </summary>\n\tpublic abstract class Transition  {\n\t\t\n\t\tpublic bool WaitTillEnd = false;\n\t\tprotected State destination;\n\t\tprivate State _start_destination = null;\n\t\tprotected string[] guards;\n\t\tprotected State start_destination {\n\t\t\tget {\n\t\t\t\treturn _start_destination;\n\t\t\t}\n\t\t\tset {\n\t\t\t\t_start_destination = value;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// The state where the transition want's to go to.\n\t\t/// </summary>\n\t\tpublic State Destination {\n\t\t\tget {\n\t\t\t\treturn this.destination;\n\t\t\t}\n\t\t}\n\t\tprotected State source;\n\t\tprotected bool finished = true;\n\t\t\n\t\t/// <summary>\n\t\t/// Initiate the transition. Called when a transition is started from ChangeState().\n\t\t/// </summary>\n\t\t/// <param name=\"dest\">\n\t\t/// A <see cref=\"State\"/>\n\t\t/// </param>\n\t\tpublic virtual void Start(State dest) {\n\t\t\tfinished = false;\n\t\t\tthis.destination = dest;\n\t\t\tif( !this.destination.IsLooping ) {\n\t\t\t\tthis.destination.ResetTime( 0f );\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Called when the state is changed and the transition is finished.\n\t\t/// </summary>\n\t\tpublic virtual void Finish(){\n\t\t\t\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Returns whether or the transition can be taken to the destination state.\n\t\t/// </summary>\n\t\t/// <param name=\"dest\">\n\t\t/// A <see cref=\"State\"/>\n\t\t/// </param>\n\t\t/// <returns>\n\t\t/// A <see cref=\"System.Boolean\"/>\n\t\t/// </returns>\n\t\tpublic virtual bool CanBeMade( State dest) {\n\t\t\tif( guards != null ) {\n\t\t\t\tforeach( string g in guards ) {\n\t\t\t\t\tif( source.layer.graph.TransitionHandler != null && !source.layer.graph.TransitionHandler.CanTransitionTo( g , source.name , dest.name ) ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif( start_destination == null ) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn( dest == start_destination );\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Compute the weight of the Source state and the Destination state based on the remaining weight.\n\t\t/// </summary>\n\t\t/// <param name=\"remaining_weight\">\n\t\t/// A <see cref=\"System.Single\"/>\n\t\t/// </param>\n\t\tpublic abstract void UpdateGraph( float remaining_weight );\n\t\t\n\t\t\n\t\t/// <summary>\n\t\t/// Returns whether or not the transition has completed. Tells the state machine to set the Current State = Destination.\n\t\t/// </summary>\n\t\t/// <returns>\n\t\t/// A <see cref=\"System.Boolean\"/>\n\t\t/// </returns>\n\t\tpublic bool IsDone() {\n\t\t\treturn finished;\n\t\t}\n\t\t\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn string.Format (\"[Transition: Source={0} Destination={1} Type={2}]\", source.name , (start_destination == null ? \"*\" : start_destination.name) , this.GetType().ToString());\n\t\t}\n\t}\n\t\n\t/// <summary>\n\t/// Transitions between two states by crossfading between them over a duration. This means immeditately playing the next state with weight 0 and fading it in to weight 1, while\n\t/// fading the current state to weight 0.\n\t/// </summary>\n\tpublic class CrossfadeTransition : Transition {\n\t\t\n\t\tprivate float t_weight = 0f;\n\t\t\n\t\tpublic CrossfadeTransition( State source , State destination , float duration , string[] guards ) {\n\t\t\tthis.source = source;\n\t\t\tthis.start_destination = destination;\n\t\t\tthis.duration = duration;\n\t\t\tthis.guards = guards;\n\t\t}\n\t\t\n\t\t\n\t\tpublic override void Start(State dest) {\n\t\t\tbase.Start(dest);\n\t\t\tt_weight = 0f;\n\t\t\tdestination.ResetTime(0f);\n\t\t}\n\t\t\n\t\tprivate float duration = 0f;\n\t\tpublic override void UpdateGraph (float remaining_weight)\n\t\t{\n\t\t\tif( WaitTillEnd && (source.MaxTime < (source.MaxTimeLength - duration) ) ) {\n\t\t\t\tsource.UpdateGraph( remaining_weight );\n\t\t\t\tdestination.UpdateGraph( 0f );\n\t\t\t\tdestination.ResetTime(0f);\n\t\t\t} else {\n\t\t\t\tt_weight = Mixamo.Util.CrossFadeUp( t_weight , this.duration );\n\t\t\t\tdestination.UpdateGraph( t_weight * remaining_weight );\n\t\t\t\tsource.UpdateGraph( (1-t_weight) * remaining_weight );\n\t\t\t\t\n\t\t\t\tif( t_weight >= 1f ) {\n\t\t\t\t\tfinished = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Finish ()\n\t\t{\n\t\t}\n\t\t\n\t}\n\t\n\t/// <summary>\n\t/// Transitions between two states by playing an inbetween clip.\n\t/// This transitions crossfades the current state with the inbetween clip in duration_in seconds and then crossfades the inbetween clip with the destination state in duration_out seconds.\n\t/// If duration_in == 0f then we wait till the source state actually finishes playing before transitioning.\n\t/// </summary>\n\tpublic class ClipTransition : Transition {\n\t\tpublic Clip clip;\n\t\tpublic float duration_in = 0f;\n\t\tpublic float duration_out = 0f;\n\t\tprivate float t_weight_start = 0f;\n\t\tprivate float t_weight_end = 0f;\n\t\t\n\t\tpublic ClipTransition(  Clip c , State source , State dest , float dur_in , float dur_out , string[] guards ) {\n\t\t\tclip = c;\n\t\t\tclip.anim_state.wrapMode = WrapMode.ClampForever;\n\t\t\tclip.anim_state.enabled = true;\n\t\t\tthis.source = source;\n\t\t\tthis.start_destination = dest;\n\t\t\tduration_in = dur_in;\n\t\t\tif( duration_in == 0f ) {\n\t\t\t\tWaitTillEnd = true;\n\t\t\t}\n\t\t\tduration_out = dur_out;\n\t\t\tthis.guards = guards;\n\t\t}\n\t\tpublic override void Start ( State dest)\n\t\t{\n\t\t\tbase.Start(dest);\n\t\t\tt_weight_start = 0f;\n\t\t\tt_weight_end = 0f;\n\t\t\tclip.ResetTime(0f);\n\t\t\tdest.ResetTime(0f);\n\t\t\tif( duration_in == 0f ) {\n\t\t\t\tsource.SetCurrentWrapMode( MixamoWrapMode.ClampForever );\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void UpdateGraph (float remaining_weight)\n\t\t{\n\t\t\t\n\t\t\tif( WaitTillEnd && (source.NormalizedTime < 1f ) ) {\n\t\t\t\tsource.UpdateGraph( remaining_weight );\n\t\t\t\tclip.UpdateGraph(0);\n\t\t\t\tdestination.UpdateGraph( 0f );\n\t\t\t\tdestination.ResetTime(0f);\n\t\t\t\tclip.ResetTime(0f);\n\t\t\t} else if( clip.anim_state.time < this.duration_in ) {\n\t\t\t\t// fade in\n\t\t\t\tt_weight_start = Mixamo.Util.CrossFadeUp( t_weight_start , this.duration_in );\n\t\t\t\tsource.UpdateGraph( (1-t_weight_start) * remaining_weight );\n\t\t\t\tclip.UpdateGraph( (t_weight_start) * remaining_weight );\n\t\t\t\tdestination.UpdateGraph( 0f );\n\t\t\t\tdestination.ResetTime(0f);\n\t\t\t} else if( clip.anim_state.time > (clip.anim_state.length - this.duration_out ) && clip.anim_state.time < clip.anim_state.length ) {\n\t\t\t\t// fade out\n\t\t\t\tt_weight_end = Mixamo.Util.CrossFadeUp( t_weight_end , this.duration_out );\n\t\t\t\tsource.UpdateGraph( 0f );\n\t\t\t\tclip.UpdateGraph( ( 1-t_weight_end) * remaining_weight );\n\t\t\t\tdestination.UpdateGraph( t_weight_end * remaining_weight );\n\t\t\t} else if( clip.anim_state.time < clip.anim_state.length ) {\n\t\t\t\t// play normally\n\t\t\t\tclip.UpdateGraph( remaining_weight );\n\t\t\t\tsource.UpdateGraph( 0f );\n\t\t\t\tdestination.UpdateGraph( 0f );\n\t\t\t\tdestination.ResetTime(0f);\n\t\t\t} else {\n\t\t\t\t// end\n\t\t\t\tdestination.UpdateGraph( remaining_weight );\n\t\t\t\tsource.UpdateGraph( 0f );\n\t\t\t\tclip.UpdateGraph( 0f );\n\t\t\t\tsource.ResetWrapMode();\n\t\t\t\tfinished = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/// <summary>\n\t/// A layer of the animation graph. Each layer can be in one state at a time. Weighting is computed by calculating a normalized weight (weights summing to 1) for each layer and then using\n\t/// Unity's weight calculation to average each layer depending on it's layer priority and any MixingTransforms on the individual bone.\n\t/// </summary>\n\tpublic class Layer {\n\t\tpublic string name;\n\t\tpublic State[] states;\n\t\tpublic AnimationGraph graph;\n\t\tpublic int priority;\n\t\tpublic Transition CreateDefaultTransition(  State source  ) {\n\t\t\t// default transition is to crossfade to every state\n\t\t\tTransition t = new CrossfadeTransition( source , null , 0.1f , new string[0] {} );\n\t\t\treturn t;\n\t\t}\n\t\t\n\t\tState _current_state;\n\t\tTransition _current_transition = null;\n\t\t\n\t\tpublic Layer() {\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic void Init() {\n\t\t\t_current_state = states[0];\n\t\t\t_desired_state = _current_state;\n\t\t}\n\t\t\n\t\tpublic State GetCurrentState() {\n\t\t\treturn _current_state;\n\t\t}\n\t\t\n\t\tpublic State GetCurrentDestinationState() {\n\t\t\tif( _current_transition != null ) {\n\t\t\t\treturn _current_transition.Destination;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate State _desired_state;\n\t\tpublic bool ChangeState( string name ) {\n\t\t\tState next = this.GetStateByName( name );\n\t\t\tif( next != null ) {\n\t\t\t\t// save this state, in case you need to transition to it immediately after a non looping state\n\t\t\t\t_desired_state = next;\n\t\t\t}\n\t\t\tif( _current_transition != null ) {\n\t\t\t\t// you can't change state if you're in a transition\n\t\t\t\treturn false;\n\t\t\t} else if( next == null ) {\n\t\t\t\tDebug.LogError( \"Could not find the state: \" + name.ToString() );\n\t\t\t\treturn false;\n\t\t\t} else if( next != _current_state ) {\n\t\t\t\t// find a transition to the next state and make it if possible\n\t\t\t\tTransition t = _current_state.GetTransitionTo( next );\n\t\t\t\tif( t != null ) {\n\t\t\t\t\t_current_transition = t;\n\t\t\t\t\t_current_transition.Start( next );\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\tstring str = ( \"Layer: \" + name + \"\\n\" );\n\t\t\tstr += \"States: \\n\";\n\t\t\tforeach( State s in states ) {\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "length": 1300, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "a1c2bff96d6d3cb3e23f9ea2a0029d635c3ebc32eb87a05c"}
{"input": "", "context": "// Copyright 2014 - 2014 Esk0r\n// SpellDatabase.cs is part of Evade.\n// \n// Evade is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// Evade is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with Evade. If not, see <http://www.gnu.org/licenses/>.\n#region\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing LeagueSharp;\n#endregion\nnamespace Evade\n{\n    public static class SpellDatabase\n    {\n        public static List<SpellData> Spells = new List<SpellData>();\n        static SpellDatabase()\n        {\n            //Add spells to the database \n            #region Test\n            if (Config.TestOnAllies)\n            {\n                Spells.Add(\n                    new SpellData\n                    {\n                        ChampionName = ObjectManager.Player.ChampionName,\n                        SpellName = \"TestSkillShot\",\n                        Slot = SpellSlot.R,\n                        Type = SkillShotType.SkillshotCircle,\n                        Delay = 600,\n                        Range = 650,\n                        Radius = 350,\n                        MissileSpeed = int.MaxValue,\n                        FixedRange = false,\n                        AddHitbox = true,\n                        DangerValue = 5,\n                        IsDangerous = true,\n                        MissileSpellName = \"TestSkillShot\",\n                    });\n            }\n            #endregion Test\n            #region Aatrox\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Aatrox\",\n                    SpellName = \"AatroxQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 600,\n                    Range = 650,\n                    Radius = 250,\n                    MissileSpeed = 2000,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"\",\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Aatrox\",\n                    SpellName = \"AatroxE\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1075,\n                    Radius = 35,\n                    MissileSpeed = 1250,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = false,\n                    MissileSpellName = \"AatroxEConeMissile\",\n                });\n            #endregion Aatrox\n            #region Ahri\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Ahri\",\n                    SpellName = \"AhriOrbofDeception\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1000,\n                    Radius = 100,\n                    MissileSpeed = 2500,\n                    MissileAccel = -3200,\n                    MissileMaxSpeed = 2500,\n                    MissileMinSpeed = 400,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"AhriOrbMissile\",\n                    CanBeRemoved = true,\n                    ForceRemove = true,\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Ahri\",\n                    SpellName = \"AhriOrbReturn\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1000,\n                    Radius = 100,\n                    MissileSpeed = 60,\n                    MissileAccel = 1900,\n                    MissileMinSpeed = 60,\n                    MissileMaxSpeed = 2600,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileFollowsUnit = true,\n                    CanBeRemoved = true,\n                    ForceRemove = true,\n                    MissileSpellName = \"AhriOrbReturn\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Ahri\",\n                    SpellName = \"AhriSeduce\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1000,\n                    Radius = 60,\n                    MissileSpeed = 1550,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"AhriSeduceMissile\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall }\n                });\n            #endregion Ahri\n            #region Amumu\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Amumu\",\n                    SpellName = \"BandageToss\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1100,\n                    Radius = 90,\n                    MissileSpeed = 2000,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"SadMummyBandageToss\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Amumu\",\n                    SpellName = \"CurseoftheSadMummy\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 0,\n                    Radius = 550,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = true,\n                    AddHitbox = false,\n                    DangerValue = 5,\n                    IsDangerous = true,\n                    MissileSpellName = \"\",\n                });\n            #endregion Amumu\n            #region Anivia\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Anivia\",\n                    SpellName = \"FlashFrost\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1100,\n                    Radius = 110,\n                    MissileSpeed = 850,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"FlashFrostSpell\",\n                    CanBeRemoved = true,\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }\n                });\n            #endregion Anivia\n            #region Annie\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Annie\",\n                    SpellName = \"Incinerate\",\n                    Slot = SpellSlot.W,\n                    Type = SkillShotType.SkillshotCone,\n                    Delay = 250,\n                    Range = 825,\n                    Radius = 80,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = false,\n                    AddHitbox = false,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"\",\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Annie\",\n                    SpellName = \"InfernalGuardian\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 600,\n                    Radius = 251,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 5,\n                    IsDangerous = true,\n                    MissileSpellName = \"\",\n                });\n            #endregion Annie\n            #region Ashe\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Ashe\",\n                    SpellName = \"Volley\",\n                    Slot = SpellSlot.W,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1250,\n                    Radius = 60,\n                    MissileSpeed = 1500,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"VolleyAttack\",\n                    MultipleNumber = 9,\n                    MultipleAngle = 4.62f * (float)Math.PI / 180,\n                    CanBeRemoved = true,\n                    CollisionObjects = new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.YasuoWall, CollisionObjectTypes.Minion }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Ashe\",\n                    SpellName = \"EnchantedCrystalArrow\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 20000,\n                    Radius = 130,\n                    MissileSpeed = 1600,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 5,\n                    IsDangerous = true,\n                    MissileSpellName = \"EnchantedCrystalArrow\",\n                    CanBeRemoved = true,\n                    CollisionObjects = new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.YasuoWall }\n                });\n            #endregion Ashe\n            #region Bard\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Bard\",\n                    SpellName = \"BardQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 950,\n                    Radius = 60,\n                    MissileSpeed = 1600,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"BardQMissile\",\n                    CanBeRemoved = true,\n                    CollisionObjects = new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.YasuoWall }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Bard\",\n                    SpellName = \"BardR\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 500,\n                    Range = 3400,\n                    Radius = 350,\n                    MissileSpeed = 2100,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"BardR\",\n                });\n            #endregion\n            #region Blatzcrink\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Blitzcrank\",\n                    SpellName = \"RocketGrab\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1050,\n                    Radius = 70,\n                    MissileSpeed = 1800,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 4,\n                    IsDangerous = true,\n                    MissileSpellName = \"RocketGrabMissile\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Blitzcrank\",\n                    SpellName = \"StaticField\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 0,\n                    Radius = 600,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = true,\n                    AddHitbox = false,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"\",\n                });\n            #endregion Blatzcrink\n            #region Brand\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Brand\",\n                    SpellName = \"BrandBlaze\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1100,\n                    Radius = 60,\n                    MissileSpeed = 1600,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"BrandBlazeMissile\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Brand\",\n                    SpellName = \"BrandFissure\",\n                    Slot = SpellSlot.W,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 850,\n                    Range = 900,\n                    Radius = 240,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"\",\n                });\n            #endregion Brand\n            #region Braum\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Braum\",\n                    SpellName = \"BraumQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1050,\n                    Radius = 60,\n                    MissileSpeed = 1700,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"BraumQMissile\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Braum\",\n                    SpellName = \"BraumRWrapper\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 500,\n                    Range = 1200,\n                    Radius = 115,\n                    MissileSpeed = 1400,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 4,\n                    IsDangerous = true,\n                    MissileSpellName = \"braumrmissile\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }\n                });\n            #endregion Braum\n            #region Caitlyn\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Caitlyn\",\n                    SpellName = \"CaitlynPiltoverPeacemaker\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 625,\n                    Range = 1300,\n                    Radius = 90,\n                    MissileSpeed = 2200,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"CaitlynPiltoverPeacemaker\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Caitlyn\",\n                    SpellName = \"CaitlynEntrapment\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 125,\n                    Range = 1000,\n                    Radius = 80,\n                    MissileSpeed = 2000,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 1,\n                    IsDangerous = false,\n                    MissileSpellName = \"CaitlynEntrapmentMissile\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall }\n                });\n            #endregion Caitlyn\n            #region Cassiopeia\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Cassiopeia\",\n                    SpellName = \"CassiopeiaNoxiousBlast\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 750,\n                    Range = 850,\n                    Radius = 150,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"CassiopeiaNoxiousBlast\",\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Cassiopeia\",\n                    SpellName = \"CassiopeiaPetrifyingGaze\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCone,\n                    Delay = 600,\n                    Range = 825,\n                    Radius = 80,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = false,\n                    AddHitbox = false,\n                    DangerValue = 5,\n                    IsDangerous = true,\n                    MissileSpellName = \"CassiopeiaPetrifyingGaze\",\n                });\n            #endregion Cassiopeia\n            #region Chogath\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Chogath\",\n                    SpellName = \"Rupture\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 1200,\n                    Range = 950,\n                    Radius = 250,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = false,\n                    MissileSpellName = \"Rupture\",\n                });\n            #endregion Chogath\n            #region Corki\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Corki\",\n                    SpellName = \"PhosphorusBomb\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 300,\n                    Range = 825,\n                    Radius = 250,\n                    MissileSpeed = 1000,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"PhosphorusBombMissile\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Corki\",\n                    SpellName = \"MissileBarrage\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 200,\n                    Range = 1300,\n                    Radius = 40,\n                    MissileSpeed = 2000,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"MissileBarrageMissile\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Corki\",\n                    SpellName = \"MissileBarrage2\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 200,\n                    Range = 1500,\n                    Radius = 40,\n                    MissileSpeed = 2000,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"MissileBarrageMissile2\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall }\n                });\n            #endregion Corki\n            #region Darius\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Darius\",\n                    SpellName = \"DariusCleave\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 750,\n                    Range = 0,\n                    Radius = 425,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = false,\n                    MissileSpellName = \"DariusCleave\",\n                    FollowCaster = true,\n                    DisabledByDefault = true,\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Darius\",\n                    SpellName = \"DariusAxeGrabCone\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotCone,\n                    Delay = 250,\n                    Range = 550,\n                    Radius = 80,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = true,\n                    AddHitbox = false,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"DariusAxeGrabCone\",\n                });\n            #endregion Darius\n            #region Diana\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Diana\",\n                    SpellName = \"DianaArc\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 895,\n                    Radius = 195,\n                    MissileSpeed = 1400,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"DianaArcArc\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Diana\",\n                    SpellName = \"DianaArcArc\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotArc,\n                    Delay = 250,\n                    Range = 895,\n                    Radius = 195,\n                    DontCross = true,\n                    MissileSpeed = 1400,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"DianaArcArc\",\n                    TakeClosestPath = true,\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }\n                });\n            #endregion Diana\n            #region DrMundo\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"DrMundo\",\n                    SpellName = \"InfectedCleaverMissileCast\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1050,\n                    Radius = 60,\n                    MissileSpeed = 2000,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = false,\n                    MissileSpellName = \"InfectedCleaverMissile\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall }\n                });\n            #endregion DrMundo\n            #region Draven\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Draven\",\n                    SpellName = \"DravenDoubleShot\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1100,\n                    Radius = 130,\n                    MissileSpeed = 1400,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"DravenDoubleShotMissile\",\n                    CanBeRemoved = true,\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Draven\",\n                    SpellName = \"DravenRCast\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 400,\n                    Range = 20000,\n                    Radius = 160,\n                    MissileSpeed = 2000,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 5,\n                    IsDangerous = true,\n                    MissileSpellName = \"DravenR\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }\n                });\n            #endregion Draven\n            #region Ekko\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Ekko\",\n                    SpellName = \"EkkoQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 950,\n                    Radius = 60,\n                    MissileSpeed = 1650,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 4,\n                    IsDangerous = true,\n                    MissileSpellName = \"ekkoqmis\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.YasuoWall }\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Ekko\",\n                    SpellName = \"EkkoW\",\n                    Slot = SpellSlot.W,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 3750,\n                    Range = 1600,\n                    Radius = 375,\n                    MissileSpeed = 1650,\n                    FixedRange = false,\n                    DisabledByDefault = true,\n                    AddHitbox = false,\n                    DangerValue = 3,\n                    IsDangerous = false,\n                    MissileSpellName = \"EkkoW\",\n                    CanBeRemoved = true\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Ekko\",\n                    SpellName = \"EkkoR\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 1600,\n                    Radius = 375,\n                    MissileSpeed = 1650,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = false,\n                    MissileSpellName = \"EkkoR\",\n                    CanBeRemoved = true,\n                    FromObjects = new[] { \"Ekko_Base_R_TrailEnd.troy\" }\n                });\n            #endregion Ekko\n            #region Elise\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Elise\",\n                    SpellName = \"EliseHumanE\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1100,\n                    Radius = 55,\n                    MissileSpeed = 1600,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 4,\n                    IsDangerous = true,\n                    MissileSpellName = \"EliseHumanE\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall }\n                });\n            #endregion Elise\n            #region Evelynn\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Evelynn\",\n                    SpellName = \"EvelynnR\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 650,\n                    Radius = 350,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 5,\n                    IsDangerous = true,\n                    MissileSpellName = \"EvelynnR\",\n                });\n            #endregion Evelynn\n            #region Ezreal\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Ezreal\",\n                    SpellName = \"EzrealMysticShot\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1200,\n                    Radius = 60,\n                    MissileSpeed = 2000,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"EzrealMysticShotMissile\",\n                    ExtraMissileNames = new[] { \"EzrealMysticShotPulseMissile\" },\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                    Id = 229,\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Ezreal\",\n                    SpellName = \"EzrealEssenceFlux\",\n                    Slot = SpellSlot.W,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1050,\n                    Radius = 80,\n                    MissileSpeed = 1600,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"EzrealEssenceFluxMissile\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Ezreal\",\n                    SpellName = \"EzrealTrueshotBarrage\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 1000,\n                    Range = 20000,\n                    Radius = 160,\n                    MissileSpeed = 2000,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"EzrealTrueshotBarrage\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                    Id = 245,\n                });\n            #endregion Ezreal\n            #region Fiora\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Fiora\",\n                    SpellName = \"FioraW\",\n                    Slot = SpellSlot.W,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 700,\n                    Range = 800,\n                    Radius = 70,\n                    MissileSpeed = 3200,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"FioraWMissile\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Fiora\n            #region Fizz\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Fizz\",\n                    SpellName = \"FizzMarinerDoom\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1300,\n                    Radius = 120,\n                    MissileSpeed = 1350,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 5,\n                    IsDangerous = true,\n                    MissileSpellName = \"FizzMarinerDoomMissile\",\n                    CollisionObjects = new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.YasuoWall },\n                    CanBeRemoved = true,\n                });\n            #endregion Fizz\n            #region Galio\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Galio\",\n                    SpellName = \"GalioResoluteSmite\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 900,\n                    Radius = 200,\n                    MissileSpeed = 1300,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"GalioResoluteSmite\",\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Galio\",\n                    SpellName = \"GalioRighteousGust\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1200,\n                    Radius = 120,\n                    MissileSpeed = 1200,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"GalioRighteousGust\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Galio\",\n                    SpellName = \"GalioIdolOfDurand\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 0,\n                    Radius = 550,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = true,\n                    AddHitbox = false,\n                    DangerValue = 5,\n                    IsDangerous = true,\n                    MissileSpellName = \"\",\n                });\n            #endregion Galio\n            #region Gnar\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Gnar\",\n                    SpellName = \"GnarQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1125,\n                    Radius = 60,\n                    MissileSpeed = 2500,\n                    MissileAccel = -3000,\n                    MissileMaxSpeed = 2500,\n                    MissileMinSpeed = 1400,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    CanBeRemoved = true,\n                    ForceRemove = true,\n                    MissileSpellName = \"gnarqmissile\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Gnar\",\n                    SpellName = \"GnarQReturn\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 0,\n                    Range = 2500,\n                    Radius = 75,\n                    MissileSpeed = 60,\n                    MissileAccel = 800,\n                    MissileMaxSpeed = 2600,\n                    MissileMinSpeed = 60,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    CanBeRemoved = true,\n                    ForceRemove = true,\n                    MissileSpellName = \"GnarQMissileReturn\",\n                    DisableFowDetection = false,\n                    DisabledByDefault = true,\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Gnar\",\n                    SpellName = \"GnarBigQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 500,\n                    Range = 1150,\n                    Radius = 90,\n                    MissileSpeed = 2100,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"GnarBigQMissile\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Gnar\",\n                    SpellName = \"GnarBigW\",\n                    Slot = SpellSlot.W,\n                    Type = SkillShotType.SkillshotLine,\n                    Delay = 600,\n                    Range = 600,\n                    Radius = 80,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"GnarBigW\",\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Gnar\",\n                    SpellName = \"GnarE\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 0,\n                    Range = 473,\n                    Radius = 150,\n                    MissileSpeed = 903,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"GnarE\",\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Gnar\",\n                    SpellName = \"GnarBigE\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 475,\n                    Radius = 200,\n                    MissileSpeed = 1000,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"GnarBigE\",\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Gnar\",\n                    SpellName = \"GnarR\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 0,\n                    Radius = 500,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = true,\n                    AddHitbox = false,\n                    DangerValue = 5,\n                    IsDangerous = true,\n                    MissileSpellName = \"\",\n                });\n            #endregion\n            #region Gragas\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Gragas\",\n                    SpellName = \"GragasQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 1100,\n                    Radius = 275,\n                    MissileSpeed = 1300,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"GragasQMissile\",\n                    ExtraDuration = 4500,\n                    ToggleParticleName = \"Gragas_.+_Q_(Enemy|Ally)\",\n                    DontCross = true,\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Gragas\",\n                    SpellName = \"GragasE\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 0,\n                    Range = 950,\n                    Radius = 200,\n                    MissileSpeed = 1200,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"GragasE\",\n                    CanBeRemoved = true,\n                    ExtraRange = 300,\n                    CollisionObjects = new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Gragas\",\n                    SpellName = \"GragasR\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 1050,\n                    Radius = 375,\n                    MissileSpeed = 1800,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 5,\n                    IsDangerous = true,\n                    MissileSpellName = \"GragasRBoom\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Gragas\n            #region Graves\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Graves\",\n                    SpellName = \"GravesClusterShot\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1000,\n                    Radius = 50,\n                    MissileSpeed = 2000,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"GravesClusterShotAttack\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                    MultipleNumber = 3,\n                    MultipleAngle = 15 * (float) Math.PI / 180,\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Graves\",\n                    SpellName = \"GravesChargeShot\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1100,\n                    Radius = 100,\n                    MissileSpeed = 2100,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 5,\n                    IsDangerous = true,\n                    MissileSpellName = \"GravesChargeShotShot\",\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Graves\n            #region Heimerdinger\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Heimerdinger\",\n                    SpellName = \"Heimerdingerwm\",\n                    Slot = SpellSlot.W,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1500,\n                    Radius = 70,\n                    MissileSpeed = 1800,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"HeimerdingerWAttack2\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Heimerdinger\",\n                    SpellName = \"HeimerdingerE\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 925,\n                    Radius = 100,\n                    MissileSpeed = 1200,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"heimerdingerespell\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Heimerdinger\n            #region Irelia\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Irelia\",\n                    SpellName = \"IreliaTranscendentBlades\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 0,\n                    Range = 1200,\n                    Radius = 65,\n                    MissileSpeed = 1600,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"IreliaTranscendentBlades\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Irelia\n            #region Janna\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Janna\",\n                    SpellName = \"JannaQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1700,\n                    Radius = 120,\n                    MissileSpeed = 900,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"HowlingGaleSpell\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Janna\n            #region JarvanIV\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"JarvanIV\",\n                    SpellName = \"JarvanIVDragonStrike\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotLine,\n                    Delay = 600,\n                    Range = 770,\n                    Radius = 70,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = false,\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"JarvanIV\",\n                    SpellName = \"JarvanIVEQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 880,\n                    Radius = 70,\n                    MissileSpeed = 1450,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"JarvanIV\",\n                    SpellName = \"JarvanIVDemacianStandard\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 500,\n                    Range = 860,\n                    Radius = 175,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"JarvanIVDemacianStandard\",\n                });\n            #endregion JarvanIV\n            #region Jayce\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jayce\",\n                    SpellName = \"jayceshockblast\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1300,\n                    Radius = 70,\n                    MissileSpeed = 1450,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"JayceShockBlastMis\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jayce\",\n                    SpellName = \"JayceQAccel\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1300,\n                    Radius = 70,\n                    MissileSpeed = 2350,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"JayceShockBlastWallMis\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Jayce\n            #region Jinx\n            //TODO: Detect the animation from fow instead of the missile.\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jinx\",\n                    SpellName = \"JinxW\",\n                    Slot = SpellSlot.W,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 600,\n                    Range = 1500,\n                    Radius = 60,\n                    MissileSpeed = 3300,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"JinxWMissile\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jinx\",\n                    SpellName = \"JinxR\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 600,\n                    Range = 20000,\n                    Radius = 140,\n                    MissileSpeed = 1700,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 5,\n                    IsDangerous = true,\n                    MissileSpellName = \"JinxR\",\n                    CanBeRemoved = true,\n                    CollisionObjects = new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Jinx\n            #region Kalista\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Kalista\",\n                    SpellName = \"KalistaMysticShot\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1200,\n                    Radius = 40,\n                    MissileSpeed = 1700,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"kalistamysticshotmis\",\n                    ExtraMissileNames = new[] { \"kalistamysticshotmistrue\" },\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Kalista\n            #region Karma\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Karma\",\n                    SpellName = \"KarmaQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1050,\n                    Radius = 60,\n                    MissileSpeed = 1700,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"KarmaQMissile\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            //TODO: add the circle at the end.\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Karma\",\n                    SpellName = \"KarmaQMantra\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 950,\n                    Radius = 80,\n                    MissileSpeed = 1700,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"KarmaQMissileMantra\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Karma\n            #region Karthus\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Karthus\",\n                    SpellName = \"KarthusLayWasteA2\",\n                    ExtraSpellNames =\n                        new[]\n                        {\n                            \"karthuslaywastea3\", \"karthuslaywastea1\", \"karthuslaywastedeada1\", \"karthuslaywastedeada2\",\n                            \"karthuslaywastedeada3\"\n                        },\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 625,\n                    Range = 875,\n                    Radius = 160,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"\",\n                });\n            #endregion Karthus\n            #region Kassadin\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Kassadin\",\n                    SpellName = \"RiftWalk\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 450,\n                    Radius = 270,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"RiftWalk\",\n                });\n            #endregion Kassadin\n            #region Kennen\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Kennen\",\n                    SpellName = \"KennenShurikenHurlMissile1\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 125,\n                    Range = 1050,\n                    Radius = 50,\n                    MissileSpeed = 1700,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"KennenShurikenHurlMissile1\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Kennen\n            #region Khazix\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Khazix\",\n                    SpellName = \"KhazixW\",\n                    ExtraSpellNames = new[] { \"khazixwlong\" },\n                    Slot = SpellSlot.W,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1025,\n                    Radius = 73,\n                    MissileSpeed = 1700,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"KhazixWMissile\",\n                    CanBeRemoved = true,\n                    MultipleNumber = 3,\n                    MultipleAngle = 22f * (float) Math.PI / 180,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Khazix\",\n                    SpellName = \"KhazixE\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 250,\n                    Range = 600,\n                    Radius = 300,\n                    MissileSpeed = 1500,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"KhazixE\",\n                });\n            #endregion Khazix\n            #region Kogmaw\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Kogmaw\",\n                    SpellName = \"KogMawQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1200,\n                    Radius = 70,\n                    MissileSpeed = 1650,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"KogMawQMis\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Kogmaw\",\n                    SpellName = \"KogMawVoidOoze\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1360,\n                    Radius = 120,\n                    MissileSpeed = 1400,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"KogMawVoidOozeMissile\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Kogmaw\",\n                    SpellName = \"KogMawLivingArtillery\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 1200,\n                    Range = 1800,\n                    Radius = 150,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"KogMawLivingArtillery\",\n                });\n            #endregion Kogmaw\n            #region Leblanc\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Leblanc\",\n                    SpellName = \"LeblancSlide\",\n                    Slot = SpellSlot.W,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 0,\n                    Range = 600,\n                    Radius = 220,\n                    MissileSpeed = 1450,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"LeblancSlide\",\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Leblanc\",\n                    SpellName = \"LeblancSlideM\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 0,\n                    Range = 600,\n                    Radius = 220,\n                    MissileSpeed = 1450,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"LeblancSlideM\",\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Leblanc\",\n                    SpellName = \"LeblancSoulShackle\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 950,\n                    Radius = 70,\n                    MissileSpeed = 1600,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"LeblancSoulShackle\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Leblanc\",\n                    SpellName = \"LeblancSoulShackleM\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 950,\n                    Radius = 70,\n                    MissileSpeed = 1600,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"LeblancSoulShackleM\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Leblanc\n            #region LeeSin\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"LeeSin\",\n                    SpellName = \"BlindMonkQOne\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1100,\n                    Radius = 65,\n                    MissileSpeed = 1800,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    MissileSpellName = \"BlindMonkQOne\",\n                    CanBeRemoved = true,\n                    CollisionObjects =\n                        new[]\n                        { CollisionObjectTypes.Champions, CollisionObjectTypes.Minion, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion LeeSin\n            #region Leona\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Leona\",\n                    SpellName = \"LeonaZenithBlade\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 905,\n                    Radius = 70,\n                    MissileSpeed = 2000,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 3,\n                    IsDangerous = true,\n                    TakeClosestPath = true,\n                    MissileSpellName = \"LeonaZenithBladeMissile\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Leona\",\n                    SpellName = \"LeonaSolarFlare\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotCircle,\n                    Delay = 1000,\n                    Range = 1200,\n                    Radius = 300,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = false,\n                    AddHitbox = true,\n                    DangerValue = 5,\n                    IsDangerous = true,\n                    MissileSpellName = \"LeonaSolarFlare\",\n                });\n            #endregion Leona\n            #region Lissandra\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lissandra\",\n                    SpellName = \"LissandraQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 700,\n                    Radius = 75,\n                    MissileSpeed = 2200,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"LissandraQMissile\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lissandra\",\n                    SpellName = \"LissandraQShards\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 700,\n                    Radius = 90,\n                    MissileSpeed = 2200,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"lissandraqshards\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lissandra\",\n                    SpellName = \"LissandraE\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1025,\n                    Radius = 125,\n                    MissileSpeed = 850,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"LissandraEMissile\",\n                    CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lulu\n            #region Lucian\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotLine,\n                    Delay = 500,\n                    Range = 1300,\n                    Radius = 65,\n                    MissileSpeed = int.MaxValue,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"LucianQ\",\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianW\",\n                    Slot = SpellSlot.W,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 1000,\n                    Radius = 55,\n                    MissileSpeed = 1600,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"lucianwmissile\",\n                });\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianRMis\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 500,\n                    Range = 1400,\n                    Radius = 110,\n                    MissileSpeed = 2800,\n                    FixedRange = true,\n                    AddHitbox = true,\n                    DangerValue = 2,\n                    IsDangerous = false,\n                    MissileSpellName = \"lucianrmissileoffhand\",\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "length": 5265, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "57cd1d16d832804a0b41e45c65ffbdf55dee0d169df79a8e"}
{"input": "", "context": "package com.sirma.sep.model.management;\nimport static com.sirma.sep.model.management.ModelsFakeCreator.createStringMap;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyString;\nimport static org.mockito.Mockito.when;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.UUID;\nimport javax.enterprise.inject.Produces;\nimport javax.inject.Inject;\nimport javax.jms.Message;\nimport org.eclipse.rdf4j.model.IRI;\nimport org.eclipse.rdf4j.model.ValueFactory;\nimport org.eclipse.rdf4j.model.impl.SimpleValueFactory;\nimport org.eclipse.rdf4j.repository.RepositoryConnection;\nimport org.jglue.cdiunit.ActivatedAlternatives;\nimport org.jglue.cdiunit.AdditionalClasses;\nimport org.jglue.cdiunit.AdditionalClasspaths;\nimport org.jglue.cdiunit.AdditionalPackages;\nimport org.jglue.cdiunit.CdiRunner;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport com.sirma.itt.emf.cls.persister.CodeListPersister;\nimport com.sirma.itt.emf.cls.validator.CodeValidator;\nimport com.sirma.itt.seip.configuration.annotation.Configuration;\nimport com.sirma.itt.seip.db.DbDao;\nimport com.sirma.itt.seip.definition.SemanticDefinitionService;\nimport com.sirma.itt.seip.definition.dozer.DefinitionsDozerProvider;\nimport com.sirma.itt.seip.definition.label.LabelDefinition;\nimport com.sirma.itt.seip.definition.label.LabelService;\nimport com.sirma.itt.seip.domain.codelist.CodelistService;\nimport com.sirma.itt.seip.domain.definition.label.LabelProvider;\nimport com.sirma.itt.seip.event.EventService;\nimport com.sirma.itt.seip.instance.DomainInstanceService;\nimport com.sirma.itt.seip.instance.validation.InstanceValidationResult;\nimport com.sirma.itt.seip.instance.validation.InstanceValidationService;\nimport com.sirma.itt.seip.instance.validation.ValidationContext;\nimport com.sirma.itt.seip.mapping.ObjectMapper;\nimport com.sirma.itt.seip.plugin.Extension;\nimport com.sirma.itt.seip.resources.EmfUser;\nimport com.sirma.itt.seip.security.context.SecurityContext;\nimport com.sirma.itt.seip.testutil.fakes.TransactionSupportFake;\nimport com.sirma.itt.seip.testutil.mocks.ConfigurationPropertyMock;\nimport com.sirma.itt.seip.tx.TransactionSupport;\nimport com.sirma.itt.semantic.NamespaceRegistryService;\nimport com.sirma.itt.semantic.model.vocabulary.EMF;\nimport com.sirma.sep.cls.CodeListService;\nimport com.sirma.sep.definition.DefinitionImportService;\nimport com.sirma.sep.model.ModelImportService;\nimport com.sirma.sep.model.management.codelists.CodeListsProvider;\nimport com.sirma.sep.model.management.definition.DefinitionModelConverter;\nimport com.sirma.sep.model.management.definition.export.GenericDefinitionConverter;\nimport com.sirma.sep.model.management.deploy.definition.steps.DefinitionChangeSetStep;\nimport com.sirma.sep.model.management.operation.ModifyAttributeChangeSetOperation;\nimport com.sirma.sep.model.management.stubs.LabelServiceStub;\nimport com.sirmaenterprise.sep.jms.api.SenderService;\n/**\n * Base component test for the model management functionality.\n * <p>\n * Includes the mandatory stubbed services and mocks to be able to run tests.\n *\n * @author Mihail Radkov\n */\n@RunWith(CdiRunner.class)\n@AdditionalClasses({ ModelManagementServiceImpl.class, DefinitionsDozerProvider.class, ModelUpdater.class, ModelPersistence.class,\n\t\tModelUpdateHandler.class, ModelsResetObserver.class, ContextualFakeProducer.class })\n@AdditionalPackages(\n\t\t{ DefinitionModelConverter.class, CodeListsProvider.class, ModifyAttributeChangeSetOperation.class, SenderService.class,\n\t\t\t\tDefinitionChangeSetStep.class, GenericDefinitionConverter.class })\n@AdditionalClasspaths({ ObjectMapper.class, Extension.class, EventService.class, Message.class })\n@ActivatedAlternatives({ ModelManagementDeploymentConfigurationsFake.class })\npublic abstract class BaseModelManagementComponentTest {\n\t@Produces\n\t@Mock\n\tprotected SemanticDefinitionService semanticDefinitionService;\n\tprotected SemanticDefinitionServiceStub semanticDefinitionServiceStub;\n\t@Produces\n\t@Mock\n\tprotected DefinitionImportService definitionImportService;\n\tprotected DefinitionImportServiceStub definitionImportServiceStub;\n\t@Produces\n\t@Mock\n\tprotected ModelImportService modelImportService;\n\tprotected ModelImportServiceStub modelImportServiceStub;\n\t@Produces\n\t@Mock\n\tprotected CodelistService codelistService;\n\t@Produces\n\t@Mock\n\tprotected CodeListPersister codeListPersister;\n\t@Produces\n\t@Mock\n\tprotected CodeListService codeListService;\n\tprotected CodelistServiceStub codelistServiceStub;\n\t@Produces\n\t@Mock\n\tprotected CodeValidator codeValidator;\n\t@Produces\n\t@Mock\n\tprotected LabelService labelService;\n\tprotected LabelServiceStub labelServiceStub;\n\t@Produces\n\tprotected NamespaceRegistryService namespaceRegistryService = new NamespaceRegistryFake();\n\t@Produces\n\t@Mock\n\tprotected SecurityContext securityContext;\n\t@Produces\n\tprotected DbDao dbDao = new DbDaoFake();\n\t@Produces\n\t@Mock\n\tprotected SenderService senderService;\n\tprotected SenderServiceStub senderServiceStub;\n\t@Inject\n\tprotected EventService eventService;\n\t@Produces\n\tprotected RepositoryConnection semanticDatabase = new RepositoryConnectionFake();\n\t@Produces\n\tprotected ValueFactory valueFactory = SimpleValueFactory.getInstance();\n\t@Produces\n\tprivate TransactionSupport transactionSupport = new TransactionSupportFake();\n\t@Produces\n\t@Mock\n\tprotected DomainInstanceService domainInstanceService;\n\tprotected DomainInstanceServiceStub domainInstanceServiceStub;\n\t@Produces\n\t@Mock\n\tprotected InstanceValidationService instanceValidationService;\n\t@Produces\n\t@Configuration\n\tprotected ConfigurationPropertyMock<IRI> deploymentContext = new ConfigurationPropertyMock<>();\n\t@Produces\n\t@Mock\n\tprotected LabelProvider labelProvider;\n\t@Before\n\tpublic void baseBefore() {\n\t\tsemanticDefinitionServiceStub = new SemanticDefinitionServiceStub(semanticDefinitionService);\n\t\tlabelServiceStub = new LabelServiceStub(labelService);\n\t\tdefinitionImportServiceStub = new DefinitionImportServiceStub(definitionImportService, labelServiceStub);\n\t\tcodelistServiceStub = new CodelistServiceStub(codeListService);\n\t\tsenderServiceStub = new SenderServiceStub(senderService);\n\t\tmockSecurityContext();\n\t}\n\t@Before\n\tpublic void stubModelImportService() {\n\t\tmodelImportServiceStub = new ModelImportServiceStub(modelImportService);\n\t\t// All validation will be valid unless re-stubbed\n\t\tmodelImportServiceStub.validModels();\n\t}\n\t@Before\n\tpublic void stubInstanceValidation() {\n\t\t// All validation will be valid unless re-stubbed\n\t\tInstanceValidationResult valid = new InstanceValidationResult(Collections.emptyList());\n\t\twhen(instanceValidationService.validate(any(ValidationContext.class))).thenReturn(valid);\n\t}\n\t@Before\n\tpublic void stubDomainInstanceService() {\n\t\tdomainInstanceServiceStub = new DomainInstanceServiceStub(domainInstanceService);\n\t}\n\t@Before\n\tpublic void stubConfigurations() {\n\t\tdeploymentContext.setValue(EMF.DATA_CONTEXT);\n\t}\n\t@Before\n\tpublic void stubLabelProvider() {\n\t\twhen(labelProvider.getLabel(anyString())).then(invocation -> invocation.getArgumentAt(0, String.class) + \"_translated\");\n\t\twhen(labelProvider.getLabel(anyString(), anyString())).then(\n\t\t\t\tinvocation -> invocation.getArgumentAt(0, String.class) + \"_translated_in_\" + invocation.getArgumentAt(1, String.class));\n\t}\n\t@After\n\tpublic void cleanUp() {\n\t\t// Remove temporary files/dirs\n\t\tdefinitionImportServiceStub.clear();\n\t}\n\t/**\n\t * Stubs the import/export service with the provided definition file names.\n\t *\n\t * @param definitions file names of definition XMLs\n\t */\n\tprotected void withDefinitions(String... definitions) {\n\t\tArrays.stream(definitions).forEach(definitionImportServiceStub::withDefinition);\n\t}\n\tprotected void withLabelDefinitionFor(String labelId, String... labels) {\n\t\tLabelDefinition labelDefinition = LabelServiceStub.build(labelId, createStringMap(labels));\n\t\tlabelServiceStub.withLabelDefinition(labelDefinition);\n\t}\n\tprotected void withLabelDefinitionDefinedIn(String labelId, String definedIn, String... labels) {\n\t\tLabelDefinition labelDefinition = LabelServiceStub.build(labelId, definedIn, createStringMap(labels));\n\t\tlabelServiceStub.withLabelDefinition(labelDefinition);\n\t}\n\tprotected void mockSecurityContext() {\n\t\twhen(securityContext.getCurrentTenantId()).thenReturn(\"test.tenant\");\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "length": 505, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "46847858f2d1579242f46d971b4229d6cb8d79b8a5dea86e"}
{"input": "", "context": "import unittest\nimport os\nimport mock\nimport errno\nimport testlib\nclass TestTestContext(unittest.TestCase):\n    def test_generate_inventory_file(self):\n        context = testlib.TestContext()\n        context.inventory = dict(key='value')\n        self.assertEquals(\"key='value'\", context.generate_inventory_contents())\n    @testlib.with_context\n    def test_adapter_adds_scsi_host_entry(self, context):\n        context.add_adapter(testlib.SCSIAdapter())\n        self.assertEquals(['host0'], os.listdir('/sys/class/scsi_host'))\n    @testlib.with_context\n    def test_add_disk_adds_scsi_disk_entry(self, context):\n        import glob\n        adapter = context.add_adapter(testlib.SCSIAdapter())\n        adapter.add_disk()\n        self.assertEquals(\n            ['/sys/class/scsi_disk/0:0:0:0'],\n            glob.glob('/sys/class/scsi_disk/0*'))\n    @testlib.with_context\n    def test_add_disk_adds_scsibus_entry(self, context):\n        import glob\n        adapter = context.add_adapter(testlib.SCSIAdapter())\n        adapter.long_id = 'HELLO'\n        adapter.add_disk()\n        self.assertEquals(\n            ['/dev/disk/by-scsibus/HELLO-0:0:0:0'],\n            glob.glob('/dev/disk/by-scsibus/*'))\n    @testlib.with_context\n    def test_add_disk_adds_device(self, context):\n        adapter = context.add_adapter(testlib.SCSIAdapter())\n        adapter.add_disk()\n        self.assertEquals(\n            ['sda'],\n            os.listdir('/sys/class/scsi_disk/0:0:0:0/device/block'))\n    @testlib.with_context\n    def test_add_disk_adds_disk_by_id_entry(self, context):\n        adapter = context.add_adapter(testlib.SCSIAdapter())\n        disk = adapter.add_disk()\n        disk.long_id = 'SOMEID'\n        self.assertEquals(['SOMEID'], os.listdir('/dev/disk/by-id'))\n    @testlib.with_context\n    def test_add_disk_adds_glob(self, context):\n        import glob\n        adapter = context.add_adapter(testlib.SCSIAdapter())\n        disk = adapter.add_disk()\n        self.assertEquals(['/dev/disk/by-id'], glob.glob('/dev/disk/by-id'))\n    @testlib.with_context\n    def test_add_disk_path_exists(self, context):\n        adapter = context.add_adapter(testlib.SCSIAdapter())\n        disk = adapter.add_disk()\n        self.assertTrue(os.path.exists('/dev/disk/by-id'))\n    @testlib.with_context\n    def test_add_parameter_parameter_file_exists(self, context):\n        adapter = context.add_adapter(testlib.SCSIAdapter())\n        disk = adapter.add_disk()\n        adapter.add_parameter('fc_host', {'node_name': 'ignored'})\n        self.assertTrue(os.path.exists('/sys/class/fc_host/host0/node_name'))\n    @testlib.with_context\n    def test_add_parameter_parameter_file_contents(self, context):\n        adapter = context.add_adapter(testlib.SCSIAdapter())\n        disk = adapter.add_disk()\n        adapter.add_parameter('fc_host', {'node_name': 'value'})\n        param_file = open('/sys/class/fc_host/host0/node_name')\n        param_value = param_file.read()\n        param_file.close()\n        self.assertEquals('value', param_value)\n    @testlib.with_context\n    def test_uname_explicitly_defined(self, context):\n        context.kernel_version = 'HELLO'\n        import os\n        result = os.uname()\n        self.assertEquals('HELLO', result[2])\n    @testlib.with_context\n    def test_uname_default_kernel_version(self, context):\n        import os\n        result = os.uname()\n        self.assertEquals('3.1', result[2])\n    @testlib.with_context\n    def test_inventory(self, context):\n        context.inventory = {}\n        inventory_file = open('/etc/xensource-inventory', 'rb')\n        inventory = inventory_file.read()\n        inventory_file.close()\n        self.assertEquals('', inventory)\n    @testlib.with_context\n    def test_default_inventory(self, context):\n        inventory_file = open('/etc/xensource-inventory', 'rb')\n        inventory = inventory_file.read()\n        inventory_file.close()\n        self.assertEquals(\"PRIMARY_DISK='/dev/disk/by-id/primary'\", inventory)\n    @testlib.with_context\n    def test_exists_returns_false_for_non_existing(self, context):\n        self.assertFalse(os.path.exists('somefile'))\n    @testlib.with_context\n    def test_exists_returns_true_for_root(self, context):\n        self.assertTrue(os.path.exists('/'))\n    @testlib.with_context\n    def test_stat_nonexistent_file_throws_oserror(self, context):\n        self.assertRaises(\n            OSError,\n            lambda: os.stat('/nonexistingstuff'))\n    @testlib.with_context\n    def test_stat_does_not_fail_with_existing_file(self, context):\n        os.makedirs('/existingstuff')\n        os.stat('/existingstuff')\n    @testlib.with_context\n    def test_error_codes_read(self, context):\n        context.setup_error_codes()\n        errorcodes_file = open('/opt/xensource/sm/XE_SR_ERRORCODES.xml', 'rb')\n        errorcodes = errorcodes_file.read()\n        errorcodes_file.close()\n        self.assertTrue(\"<SM-errorcodes>\" in errorcodes)\n    @testlib.with_context\n    def test_executable_shows_up_on_filesystem(self, context):\n        context.add_executable('/something', None)\n        self.assertTrue(os.path.exists('/something'))\n    @testlib.with_context\n    def test_subprocess_execution(self, context):\n        context.add_executable(\n            'something',\n            lambda args, inp: (1, inp + ' out', ','.join(args)))\n        import subprocess\n        proc = subprocess.Popen(\n            ['something', 'a', 'b'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_fds=True)\n        out, err = proc.communicate('in')\n        rc = proc.returncode\n        self.assertEquals(1, rc)\n        self.assertEquals('in out', out)\n        self.assertEquals('something,a,b', err)\n    @testlib.with_context\n    def test_modinfo(self, context):\n        import subprocess\n        proc = subprocess.Popen(\n            ['/sbin/modinfo', '-d', 'somemodule'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_fds=True)\n        out, err = proc.communicate('in')\n        rc = proc.returncode\n        self.assertEquals(0, rc)\n        self.assertEquals('somemodule-description', out)\n        self.assertEquals('', err)\n    @testlib.with_context\n    def test_makedirs_mocked_out(self, context):\n        import os\n        os.makedirs('/blah/subdir')\n        self.assertTrue(os.path.exists('/blah/subdir'))\n    @testlib.with_context\n    def test_makedirs_raises_if_exists(self, context):\n        import os\n        os.makedirs('/blah/subdir')\n        self.assertRaises(OSError, os.makedirs, '/blah/subdir')\n    @testlib.with_context\n    def test_setup_error_codes(self, context):\n        context.setup_error_codes()\n        self.assertTrue(\n            os.path.exists('/opt/xensource/sm/XE_SR_ERRORCODES.xml'))\n    @testlib.with_context\n    def test_write_a_file(self, context):\n        import os\n        os.makedirs('/blah/subdir')\n        f = open('/blah/subdir/somefile', 'w+')\n        f.write('hello')\n        f.close()\n        self.assertTrue(\n            ('/blah/subdir/somefile', 'hello')\n            in list(context.generate_path_content()))\n    @testlib.with_context\n    def test_write_a_file_in_non_existing_dir(self, context):\n        with self.assertRaises(IOError) as cm:\n            open('/blah/subdir/somefile', 'w')\n        self.assertEquals(errno.ENOENT, cm.exception.errno)\n    @testlib.with_context\n    def test_file_returns_an_object_with_fileno_callable(self, context):\n        f = file('/file', 'w+')\n        self.assertTrue(hasattr(f, 'fileno'))\n        self.assertTrue(callable(f.fileno))\n    @testlib.with_context\n    def test_filenos_are_unique(self, context):\n        import os\n        os.makedirs('/blah/subdir')\n        file_1 = file('/blah/subdir/somefile', 'w+')\n        fileno_1 = file_1.fileno()\n        file_2 = file('/blah/subdir/somefile2', 'w+')\n        fileno_2 = file_2.fileno()\n        self.assertTrue(fileno_1 != fileno_2)\n    def test_get_created_directories(self):\n        context = testlib.TestContext()\n        context.fake_makedirs('/some/path')\n        self.assertEquals([\n            '/',\n            '/some',\n            '/some/path'],\n            context.get_created_directories())\n    def test_popen_raises_error(self):\n        import subprocess\n", "answers": ["        context = testlib.TestContext()"], "length": 426, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "36ab3dcfde1587fd327a15d56d7d38fb65b8104458bbcd00"}
{"input": "", "context": "// <file>\n//     <copyright see=\"prj:///doc/copyright.txt\"/>\n//     <license see=\"prj:///doc/license.txt\"/>\n//     <owner name=\"Daniel Grunwald\" email=\"daniel@danielgrunwald.de\"/>\n//     <version>$Revision$</version>\n// </file>\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nnamespace ICSharpCode.Core\n{\n\t/// <summary>\n\t/// Class that helps starting up ICSharpCode.Core.\n\t/// </summary>\n\t/// <remarks>\n\t/// Initializing ICSharpCode.Core requires initializing several static classes\n\t/// and the <see cref=\"AddInTree\"/>. <see cref=\"CoreStartup\"/> does this work\n\t/// for you, provided you use it like this:\n\t/// 1. Create a new CoreStartup instance\n\t/// 2. (Optional) Set the values of the properties.\n\t/// 3. Call <see cref=\"StartCoreServices()\"/>.\n\t/// 4. Add \"preinstalled\" AddIns using <see cref=\"AddAddInsFromDirectory\"/>\n\t///    and <see cref=\"AddAddInFile\"/>.\n\t/// 5. (Optional) Call <see cref=\"ConfigureExternalAddIns\"/> to support\n\t///    disabling AddIns and installing external AddIns\n\t/// 6. (Optional) Call <see cref=\"ConfigureUserAddIns\"/> to support installing\n\t///    user AddIns.\n\t/// 7. Call <see cref=\"RunInitialization\"/>.\n\t/// </remarks>\n\tpublic sealed class CoreStartup\n\t{\n\t\tList<string> addInFiles = new List<string>();\n\t\tList<string> disabledAddIns = new List<string>();\n\t\tbool externalAddInsConfigured;\n\t\tstring propertiesName;\n\t\tstring configDirectory;\n\t\tstring dataDirectory;\n\t\tstring applicationName;\n\t\t\n\t\t/// <summary>\n\t\t/// Sets the name used for the properties (only name, without path or extension).\n\t\t/// Must be set before StartCoreServices() is called.\n\t\t/// </summary>\n\t\tpublic string PropertiesName {\n\t\t\tget {\n\t\t\t\treturn propertiesName;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tif (value == null || value.Length == 0)\n\t\t\t\t\tthrow new ArgumentNullException(\"value\");\n\t\t\t\tpropertiesName = value;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Sets the directory name used for the property service.\n\t\t/// Must be set before StartCoreServices() is called.\n\t\t/// Use null to use the default path \"%ApplicationData%\\%ApplicationName%\",\n\t\t/// where %ApplicationData% is the system setting for\n\t\t/// \"c:\\documents and settings\\username\\application data\"\n\t\t/// and %ApplicationName% is the application name you used in the\n\t\t/// CoreStartup constructor call.\n\t\t/// </summary>\n\t\tpublic string ConfigDirectory {\n\t\t\tget {\n\t\t\t\treturn configDirectory;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tconfigDirectory = value;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Sets the data directory used to load resources.\n\t\t/// Must be set before StartCoreServices() is called.\n\t\t/// Use null to use the default path \"ApplicationRootPath\\data\".\n\t\t/// </summary>\n\t\tpublic string DataDirectory {\n\t\t\tget {\n\t\t\t\treturn dataDirectory;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tdataDirectory = value;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Creates a new CoreStartup instance.\n\t\t/// </summary>\n\t\t/// <param name=\"applicationName\">\n\t\t/// The name of your application.\n\t\t/// This is used as default title for message boxes,\n\t\t/// default name for the configuration directory etc.\n\t\t/// </param>\n\t\tpublic CoreStartup(string applicationName)\n\t\t{\n\t\t\tif (applicationName == null)\n\t\t\t\tthrow new ArgumentNullException(\"applicationName\");\n\t\t\tthis.applicationName = applicationName;\n\t\t\tpropertiesName = applicationName + \"Properties\";\n\t\t\tMessageService.DefaultMessageBoxTitle = applicationName;\n\t\t\tMessageService.ProductName = applicationName;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Find AddIns by searching all .addin files recursively in <paramref name=\"addInDir\"/>.\n\t\t/// The found AddIns are added to the list of AddIn files to load.\n\t\t/// </summary>\n\t\tpublic void AddAddInsFromDirectory(string addInDir)\n\t\t{\n\t\t\tif (addInDir == null)\n\t\t\t\tthrow new ArgumentNullException(\"addInDir\");\n\t\t\taddInFiles.AddRange(FileUtility.SearchDirectory(addInDir, \"*.addin\"));\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Add the specified .addin file to the list of AddIn files to load.\n\t\t/// </summary>\n\t\tpublic void AddAddInFile(string addInFile)\n\t\t{\n\t\t\tif (addInFile == null)\n\t\t\t\tthrow new ArgumentNullException(\"addInFile\");\n\t\t\taddInFiles.Add(addInFile);\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Use the specified configuration file to store information about\n\t\t/// disabled AddIns and external AddIns.\n\t\t/// You have to call this method to support the <see cref=\"AddInManager\"/>.\n\t\t/// </summary>\n\t\t/// <param name=\"addInConfigurationFile\">\n\t\t/// The name of the file used to store the list of disabled AddIns\n\t\t/// and the list of installed external AddIns.\n\t\t/// A good value for this parameter would be\n\t\t/// <c>Path.Combine(<see cref=\"PropertyService.ConfigDirectory\"/>, \"AddIns.xml\")</c>.\n\t\t/// </param>\n\t\tpublic void ConfigureExternalAddIns(string addInConfigurationFile)\n\t\t{\n\t\t\texternalAddInsConfigured = true;\n\t\t\tAddInManager.ConfigurationFileName = addInConfigurationFile;\n\t\t\tAddInManager.LoadAddInConfiguration(addInFiles, disabledAddIns);\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Configures user AddIn support.\n\t\t/// </summary>\n\t\t/// <param name=\"addInInstallTemp\">\n\t\t/// The AddIn installation temporary directory.\n\t\t/// ConfigureUserAddIns will install the AddIns from this directory and\n\t\t/// store the parameter value in <see cref=\"AddInManager.AddInInstallTemp\"/>.\n\t\t/// </param>\n\t\t/// <param name=\"userAddInPath\">\n\t\t/// The path where user AddIns are installed to.\n\t\t/// AddIns from this directory will be loaded.\n\t\t/// </param>\n\t\tpublic void ConfigureUserAddIns(string addInInstallTemp, string userAddInPath)\n\t\t{\n\t\t\tif (!externalAddInsConfigured) {\n\t\t\t\tthrow new InvalidOperationException(\"ConfigureExternalAddIns must be called before ConfigureUserAddIns\");\n\t\t\t}\n\t\t\tAddInManager.AddInInstallTemp = addInInstallTemp;\n\t\t\tAddInManager.UserAddInPath = userAddInPath;\n\t\t\tif (Directory.Exists(addInInstallTemp)) {\n\t\t\t\tAddInManager.InstallAddIns(disabledAddIns);\n\t\t\t}\n\t\t\tif (Directory.Exists(userAddInPath)) {\n\t\t\t\tAddAddInsFromDirectory(userAddInPath);\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Initializes the AddIn system.\n\t\t/// This loads the AddIns that were added to the list,\n\t\t/// then it executes the <see cref=\"ICommand\">commands</see>\n\t\t/// in <c>/Workspace/Autostart</c>.\n\t\t/// </summary>\n\t\tpublic void RunInitialization()\n\t\t{\n\t\t\tAddInTree.Load(addInFiles, disabledAddIns);\n\t\t\t\n\t\t\t// run workspace autostart commands\n\t\t\tLoggingService.Info(\"Running autostart commands...\");\n\t\t\tforeach (ICommand command in AddInTree.BuildItems<ICommand>(\"/Workspace/Autostart\", null, false)) {\n\t\t\t\ttry {\n\t\t\t\t\tcommand.Run();\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\t\t// allow startup to continue if some commands fail\n\t\t\t\t\tMessageService.ShowError(ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Starts the core services.\n\t\t/// This initializes the PropertyService and ResourceService.\n\t\t/// </summary>\n\t\tpublic void StartCoreServices()\n\t\t{\n", "answers": ["\t\t\tif (configDirectory == null)"], "length": 753, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "dc7f3a684d9468c9631828995c836b9722e18b4999cdd713"}
{"input": "", "context": "//\n// System.Data.Constraint.cs\n//\n// Author:\n//\tFranklin Wise <gracenote@earthlink.net>\n//\tDaniel Morgan\n//      Tim Coleman (tim@timcoleman.com)\n//\n//\n// (C) Ximian, Inc. 2002\n// Copyright (C) Tim Coleman, 2002\n//\n//\n// Copyright (C) 2004 Novell, Inc (http://www.novell.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nusing System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Runtime.InteropServices;\nusing System.Runtime.Serialization;\nusing System.Data.Common;\nnamespace System.Data {\n\t[Serializable]\n\tinternal delegate void DelegateConstraintNameChange (object sender, string newName);\n\t[DefaultProperty (\"ConstraintName\")]\n#if !NET_2_0\n\t[Serializable]\n#endif\n\t[TypeConverterAttribute (typeof (ConstraintConverter))]\n\tpublic abstract class Constraint {\n\t\tstatic readonly object beforeConstraintNameChange = new object ();\n\t\tEventHandlerList events = new EventHandlerList ();\n\t\tinternal event DelegateConstraintNameChange BeforeConstraintNameChange {\n\t\t\tadd { events.AddHandler (beforeConstraintNameChange, value); }\n\t\t\tremove { events.RemoveHandler (beforeConstraintNameChange, value); }\n\t\t}\n\t\t//if constraintName is not set then a name is\n\t\t//created when it is added to\n\t\t//the ConstraintCollection\n\t\t//it can not be set to null, empty or duplicate\n\t\t//once it has been added to the collection\n\t\tprivate string _constraintName;\n\t\tprivate PropertyCollection _properties;\n\t\tprivate Index _index;\n\t\t//Used for membership checking\n\t\tprivate ConstraintCollection _constraintCollection;\n\t\tDataSet dataSet;\n\t\tprotected Constraint ()\n\t\t{\n\t\t\tdataSet = null;\n\t\t\t_properties = new PropertyCollection ();\n\t\t}\n\t\t[CLSCompliant (false)]\n\t\tprotected internal virtual DataSet _DataSet {\n\t\t\tget { return dataSet; }\n\t\t}\n\t\t[DataCategory (\"Data\")]\n#if !NET_2_0\n\t\t[DataSysDescription (\"Indicates the name of this constraint.\")]\n#endif\n\t\t[DefaultValue (\"\")]\n\t\tpublic virtual string ConstraintName {\n\t\t\tget { return _constraintName == null ? \"\" : _constraintName; }\n\t\t\tset {\n\t\t\t\t//This should only throw an exception when it\n\t\t\t\t//is a member of a ConstraintCollection which\n\t\t\t\t//means we should let the ConstraintCollection\n\t\t\t\t//handle exceptions when this value changes\n\t\t\t\t_onConstraintNameChange (value);\n\t\t\t\t_constraintName = value;\n\t\t\t}\n\t\t}\n\t\t[Browsable (false)]\n\t\t[DataCategory (\"Data\")]\n#if !NET_2_0\n\t\t[DataSysDescription (\"The collection that holds custom user information.\")]\n#endif\n\t\tpublic PropertyCollection ExtendedProperties {\n\t\t\tget { return _properties; }\n\t\t}\n#if !NET_2_0\n\t\t[DataSysDescription (\"Indicates the table of this constraint.\")]\n#endif\n\t\tpublic abstract DataTable Table {\n\t\t\tget;\n\t\t}\n\t\tinternal ConstraintCollection ConstraintCollection {\n\t\t\tget { return _constraintCollection; }\n\t\t\tset { _constraintCollection = value; }\n\t\t}\n\t\tprivate void _onConstraintNameChange (string newName)\n\t\t{\n\t\t\tDelegateConstraintNameChange eh = events [beforeConstraintNameChange] as DelegateConstraintNameChange;\n\t\t\tif (eh != null)\n\t\t\t\teh (this, newName);\n\t\t}\n\t\t//call once before adding a constraint to a collection\n\t\t//will throw an exception to prevent the add if a rule is broken\n\t\tinternal abstract void AddToConstraintCollectionSetup (ConstraintCollection collection);\n\t\tinternal abstract bool IsConstraintViolated ();\n\t\tinternal static void ThrowConstraintException ()\n\t\t{\n\t\t\tthrow new ConstraintException(\"Failed to enable constraints. One or more rows contain values violating non-null, unique, or foreign-key constraints.\");\n\t\t}\n\t\tbool initInProgress = false;\n\t\tinternal virtual bool InitInProgress {\n\t\t\tget { return initInProgress; }\n\t\t\tset { initInProgress = value; }\n\t\t}\n\t\tinternal virtual void FinishInit (DataTable table)\n\t\t{\n\t\t}\n\t\tinternal void AssertConstraint ()\n\t\t{\n\t\t\t// The order is important.. IsConstraintViolated fills the RowErrors if it detects\n\t\t\t// a violation\n\t\t\tif (!IsConstraintViolated ())\n\t\t\t\treturn;\n\t\t\tif (Table._duringDataLoad || (Table.DataSet != null && !Table.DataSet.EnforceConstraints))\n\t\t\t\treturn;\n\t\t\tThrowConstraintException ();\n\t\t}\n\t\tinternal abstract void AssertConstraint (DataRow row);\n\t\tinternal virtual void RollbackAssert (DataRow row)\n\t\t{\n\t\t}\n\t\t//call once before removing a constraint to a collection\n\t\t//can throw an exception to prevent the removal\n\t\tinternal abstract void RemoveFromConstraintCollectionCleanup (ConstraintCollection collection);\n\t\t[MonoTODO]\n\t\tprotected void CheckStateForProperty ()\n\t\t{\n\t\t\tthrow new NotImplementedException ();\n\t\t}\n\t\tprotected internal void SetDataSet (DataSet dataSet)\n\t\t{\n\t\t\tthis.dataSet = dataSet;\n\t\t}\n\t\tinternal void SetExtendedProperties (PropertyCollection properties)\n\t\t{\n\t\t\t_properties = properties;\n\t\t}\n\t\tinternal Index Index {\n\t\t\tget { return _index; }\n\t\t\tset {\n\t\t\t\tif (_index != null) {\n\t\t\t\t\t_index.RemoveRef();\n\t\t\t\t\tTable.DropIndex(_index);\n\t\t\t\t}\n\t\t\t\t_index = value;\n\t\t\t\tif (_index != null)\n\t\t\t\t\t_index.AddRef();\n\t\t\t}\n\t\t}\n", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "length": 743, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "1fbe52a6ae333eb46f1ea6000375cec54d0c1377ea171db3"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n# Form implementation generated from reading ui file 'pyslvs_ui/io/preference.ui'\n#\n# Created by: PyQt5 UI code generator 5.15.2\n#\n# WARNING: Any manual changes made to this file will be lost when pyuic5 is\n# run again.  Do not edit this file unless you know what you are doing.\nfrom qtpy import QtCore, QtGui, QtWidgets\nclass Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(\"Dialog\")\n        Dialog.resize(865, 427)\n        icon = QtGui.QIcon()\n        icon.addPixmap(QtGui.QPixmap(\"icons:settings.png\"), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n        Dialog.setWindowIcon(icon)\n        Dialog.setSizeGripEnabled(True)\n        Dialog.setModal(True)\n        self.verticalLayout_2 = QtWidgets.QVBoxLayout(Dialog)\n        self.verticalLayout_2.setObjectName(\"verticalLayout_2\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout()\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.settings_ui_groupbox = QtWidgets.QGroupBox(Dialog)\n        self.settings_ui_groupbox.setObjectName(\"settings_ui_groupbox\")\n        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.settings_ui_groupbox)\n        self.verticalLayout_3.setObjectName(\"verticalLayout_3\")\n        self.gridLayout = QtWidgets.QGridLayout()\n        self.gridLayout.setObjectName(\"gridLayout\")\n        self.zoomby_label = QtWidgets.QLabel(self.settings_ui_groupbox)\n        self.zoomby_label.setObjectName(\"zoomby_label\")\n        self.gridLayout.addWidget(self.zoomby_label, 3, 2, 1, 1)\n        self.font_size_option = QtWidgets.QSpinBox(self.settings_ui_groupbox)\n        self.font_size_option.setMinimum(1)\n        self.font_size_option.setMaximum(30)\n        self.font_size_option.setSingleStep(2)\n        self.font_size_option.setObjectName(\"font_size_option\")\n        self.gridLayout.addWidget(self.font_size_option, 0, 3, 1, 1)\n        self.tick_mark_label = QtWidgets.QLabel(self.settings_ui_groupbox)\n        self.tick_mark_label.setObjectName(\"tick_mark_label\")\n        self.gridLayout.addWidget(self.tick_mark_label, 4, 2, 1, 1)\n        self.zoom_by_option = QtWidgets.QComboBox(self.settings_ui_groupbox)\n        self.zoom_by_option.setObjectName(\"zoom_by_option\")\n        self.zoom_by_option.addItem(\"\")\n        self.zoom_by_option.addItem(\"\")\n        self.gridLayout.addWidget(self.zoom_by_option, 3, 3, 1, 1)\n        self.line_width_option = QtWidgets.QSpinBox(self.settings_ui_groupbox)\n        self.line_width_option.setMinimum(1)\n        self.line_width_option.setMaximum(10)\n        self.line_width_option.setDisplayIntegerBase(10)\n        self.line_width_option.setObjectName(\"line_width_option\")\n        self.gridLayout.addWidget(self.line_width_option, 0, 1, 1, 1)\n        self.scale_factor_option = QtWidgets.QSpinBox(self.settings_ui_groupbox)\n        self.scale_factor_option.setMinimum(5)\n        self.scale_factor_option.setMaximum(100)\n        self.scale_factor_option.setSingleStep(5)\n        self.scale_factor_option.setObjectName(\"scale_factor_option\")\n        self.gridLayout.addWidget(self.scale_factor_option, 1, 3, 1, 1)\n        self.linewidth_label = QtWidgets.QLabel(self.settings_ui_groupbox)\n        self.linewidth_label.setObjectName(\"linewidth_label\")\n        self.gridLayout.addWidget(self.linewidth_label, 0, 0, 1, 1)\n        self.fontsize_label = QtWidgets.QLabel(self.settings_ui_groupbox)\n        self.fontsize_label.setObjectName(\"fontsize_label\")\n        self.gridLayout.addWidget(self.fontsize_label, 0, 2, 1, 1)\n        self.snap_label = QtWidgets.QLabel(self.settings_ui_groupbox)\n        self.snap_label.setObjectName(\"snap_label\")\n        self.gridLayout.addWidget(self.snap_label, 5, 0, 1, 1)\n        self.jointsize_label = QtWidgets.QLabel(self.settings_ui_groupbox)\n        self.jointsize_label.setObjectName(\"jointsize_label\")\n        self.gridLayout.addWidget(self.jointsize_label, 4, 0, 1, 1)\n        self.pathwidth_label = QtWidgets.QLabel(self.settings_ui_groupbox)\n        self.pathwidth_label.setObjectName(\"pathwidth_label\")\n        self.gridLayout.addWidget(self.pathwidth_label, 1, 0, 1, 1)\n        self.linktransparency_label = QtWidgets.QLabel(self.settings_ui_groupbox)\n        self.linktransparency_label.setObjectName(\"linktransparency_label\")\n        self.gridLayout.addWidget(self.linktransparency_label, 2, 2, 1, 1)\n        self.margin_factor_option = QtWidgets.QSpinBox(self.settings_ui_groupbox)\n        self.margin_factor_option.setMaximum(30)\n        self.margin_factor_option.setSingleStep(5)\n        self.margin_factor_option.setObjectName(\"margin_factor_option\")\n        self.gridLayout.addWidget(self.margin_factor_option, 3, 1, 1, 1)\n        self.toolbar_pos_label = QtWidgets.QLabel(self.settings_ui_groupbox)\n        self.toolbar_pos_label.setObjectName(\"toolbar_pos_label\")\n        self.gridLayout.addWidget(self.toolbar_pos_label, 5, 2, 1, 1)\n        self.selectionradius_label = QtWidgets.QLabel(self.settings_ui_groupbox)\n        self.selectionradius_label.setObjectName(\"selectionradius_label\")\n        self.gridLayout.addWidget(self.selectionradius_label, 2, 0, 1, 1)\n        self.scalefactor_label = QtWidgets.QLabel(self.settings_ui_groupbox)\n        self.scalefactor_label.setObjectName(\"scalefactor_label\")\n        self.gridLayout.addWidget(self.scalefactor_label, 1, 2, 1, 1)\n        self.nav_toolbar_pos_option = QtWidgets.QComboBox(self.settings_ui_groupbox)\n        self.nav_toolbar_pos_option.setObjectName(\"nav_toolbar_pos_option\")\n        self.nav_toolbar_pos_option.addItem(\"\")\n        self.nav_toolbar_pos_option.addItem(\"\")\n        self.gridLayout.addWidget(self.nav_toolbar_pos_option, 5, 3, 1, 1)\n        self.marginfactor_label = QtWidgets.QLabel(self.settings_ui_groupbox)\n        self.marginfactor_label.setObjectName(\"marginfactor_label\")\n        self.gridLayout.addWidget(self.marginfactor_label, 3, 0, 1, 1)\n        self.joint_size_option = QtWidgets.QSpinBox(self.settings_ui_groupbox)\n        self.joint_size_option.setMinimum(1)\n        self.joint_size_option.setMaximum(100)\n        self.joint_size_option.setObjectName(\"joint_size_option\")\n        self.gridLayout.addWidget(self.joint_size_option, 4, 1, 1, 1)\n        self.path_width_option = QtWidgets.QSpinBox(self.settings_ui_groupbox)\n        self.path_width_option.setMinimum(1)\n        self.path_width_option.setMaximum(5)\n        self.path_width_option.setObjectName(\"path_width_option\")\n        self.gridLayout.addWidget(self.path_width_option, 1, 1, 1, 1)\n        self.link_trans_option = QtWidgets.QSpinBox(self.settings_ui_groupbox)\n        self.link_trans_option.setMaximum(80)\n        self.link_trans_option.setSingleStep(10)\n        self.link_trans_option.setObjectName(\"link_trans_option\")\n        self.gridLayout.addWidget(self.link_trans_option, 2, 3, 1, 1)\n        self.snap_option = QtWidgets.QDoubleSpinBox(self.settings_ui_groupbox)\n        self.snap_option.setMaximum(50.0)\n        self.snap_option.setObjectName(\"snap_option\")\n        self.gridLayout.addWidget(self.snap_option, 5, 1, 1, 1)\n        self.tick_mark_option = QtWidgets.QComboBox(self.settings_ui_groupbox)\n        self.tick_mark_option.setObjectName(\"tick_mark_option\")\n        self.tick_mark_option.addItem(\"\")\n        self.tick_mark_option.addItem(\"\")\n        self.tick_mark_option.addItem(\"\")\n        self.gridLayout.addWidget(self.tick_mark_option, 4, 3, 1, 1)\n        self.selection_radius_option = QtWidgets.QSpinBox(self.settings_ui_groupbox)\n        self.selection_radius_option.setMinimum(3)\n        self.selection_radius_option.setMaximum(10)\n        self.selection_radius_option.setObjectName(\"selection_radius_option\")\n        self.gridLayout.addWidget(self.selection_radius_option, 2, 1, 1, 1)\n        self.default_zoom_label = QtWidgets.QLabel(self.settings_ui_groupbox)\n        self.default_zoom_label.setObjectName(\"default_zoom_label\")\n        self.gridLayout.addWidget(self.default_zoom_label, 6, 0, 1, 1)\n        self.default_zoom_option = QtWidgets.QSpinBox(self.settings_ui_groupbox)\n        self.default_zoom_option.setObjectName(\"default_zoom_option\")\n        self.gridLayout.addWidget(self.default_zoom_option, 6, 1, 1, 1)\n        self.verticalLayout_3.addLayout(self.gridLayout)\n        self.grab_no_background_option = QtWidgets.QCheckBox(self.settings_ui_groupbox)\n        self.grab_no_background_option.setObjectName(\"grab_no_background_option\")\n        self.verticalLayout_3.addWidget(self.grab_no_background_option)\n        self.monochrome_option = QtWidgets.QCheckBox(self.settings_ui_groupbox)\n        self.monochrome_option.setObjectName(\"monochrome_option\")\n        self.verticalLayout_3.addWidget(self.monochrome_option)\n        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)\n        self.verticalLayout_3.addItem(spacerItem)\n        self.horizontalLayout.addWidget(self.settings_ui_groupbox)\n        self.verticalLayout = QtWidgets.QVBoxLayout()\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.settings_kernels_groupBox = QtWidgets.QGroupBox(Dialog)\n        self.settings_kernels_groupBox.setObjectName(\"settings_kernels_groupBox\")\n        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.settings_kernels_groupBox)\n        self.verticalLayout_4.setObjectName(\"verticalLayout_4\")\n        self.formLayout_3 = QtWidgets.QFormLayout()\n        self.formLayout_3.setObjectName(\"formLayout_3\")\n        self.planarsolver_label = QtWidgets.QLabel(self.settings_kernels_groupBox)\n        self.planarsolver_label.setObjectName(\"planarsolver_label\")\n        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.planarsolver_label)\n        self.planar_solver_option = QtWidgets.QComboBox(self.settings_kernels_groupBox)\n        self.planar_solver_option.setObjectName(\"planar_solver_option\")\n        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.planar_solver_option)\n        self.pathpreview_label = QtWidgets.QLabel(self.settings_kernels_groupBox)\n        self.pathpreview_label.setObjectName(\"pathpreview_label\")\n        self.formLayout_3.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.pathpreview_label)\n        self.path_preview_option = QtWidgets.QComboBox(self.settings_kernels_groupBox)\n        self.path_preview_option.setObjectName(\"path_preview_option\")\n        self.formLayout_3.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.path_preview_option)\n        self.verticalLayout_4.addLayout(self.formLayout_3)\n        self.console_error_option = QtWidgets.QCheckBox(self.settings_kernels_groupBox)\n        self.console_error_option.setObjectName(\"console_error_option\")\n        self.verticalLayout_4.addWidget(self.console_error_option)\n        self.verticalLayout.addWidget(self.settings_kernels_groupBox)\n        self.settings_project_groupbox = QtWidgets.QGroupBox(Dialog)\n        self.settings_project_groupbox.setObjectName(\"settings_project_groupbox\")\n        self.formLayout_2 = QtWidgets.QFormLayout(self.settings_project_groupbox)\n        self.formLayout_2.setObjectName(\"formLayout_2\")\n        self.undo_limit_label = QtWidgets.QLabel(self.settings_project_groupbox)\n        self.undo_limit_label.setObjectName(\"undo_limit_label\")\n        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.undo_limit_label)\n        self.undo_limit_option = QtWidgets.QSpinBox(self.settings_project_groupbox)\n        self.undo_limit_option.setMinimum(5)\n        self.undo_limit_option.setObjectName(\"undo_limit_option\")\n        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.undo_limit_option)\n        self.open_project_actions_label = QtWidgets.QLabel(self.settings_project_groupbox)\n        self.open_project_actions_label.setObjectName(\"open_project_actions_label\")\n        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.open_project_actions_label)\n        self.open_project_actions_option = QtWidgets.QComboBox(self.settings_project_groupbox)\n        self.open_project_actions_option.setObjectName(\"open_project_actions_option\")\n        self.open_project_actions_option.addItem(\"\")\n        self.open_project_actions_option.addItem(\"\")\n        self.open_project_actions_option.addItem(\"\")\n        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.open_project_actions_option)\n        self.file_type_label = QtWidgets.QLabel(self.settings_project_groupbox)\n        self.file_type_label.setObjectName(\"file_type_label\")\n        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.file_type_label)\n        self.file_type_option = QtWidgets.QComboBox(self.settings_project_groupbox)\n        self.file_type_option.setObjectName(\"file_type_option\")\n        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.file_type_option)\n        self.verticalLayout.addWidget(self.settings_project_groupbox)\n        self.settings_misc_groupBox = QtWidgets.QGroupBox(Dialog)\n        self.settings_misc_groupBox.setObjectName(\"settings_misc_groupBox\")\n        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.settings_misc_groupBox)\n        self.verticalLayout_7.setObjectName(\"verticalLayout_7\")\n        self.auto_remove_link_option = QtWidgets.QCheckBox(self.settings_misc_groupBox)\n        self.auto_remove_link_option.setObjectName(\"auto_remove_link_option\")\n        self.verticalLayout_7.addWidget(self.auto_remove_link_option)\n        self.title_full_path_option = QtWidgets.QCheckBox(self.settings_misc_groupBox)\n        self.title_full_path_option.setObjectName(\"title_full_path_option\")\n        self.verticalLayout_7.addWidget(self.title_full_path_option)\n        self.not_save_option = QtWidgets.QCheckBox(self.settings_misc_groupBox)\n        self.not_save_option.setObjectName(\"not_save_option\")\n        self.verticalLayout_7.addWidget(self.not_save_option)\n        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)\n        self.verticalLayout_7.addItem(spacerItem1)\n        self.verticalLayout.addWidget(self.settings_misc_groupBox)\n        self.horizontalLayout.addLayout(self.verticalLayout)\n        self.verticalLayout_2.addLayout(self.horizontalLayout)\n", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "length": 519, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "ffafcf6803367046bcd6535efabfd55b6913ed04cf9c0e14"}
{"input": "", "context": "/*\n * FlightIntel for Pilots\n *\n * Copyright 2012 Nadeem Hasan <nhasan@nadmm.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.nadmm.airports.wx;\nimport java.util.Locale;\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.location.Location;\nimport android.os.Bundle;\nimport android.support.v4.content.LocalBroadcastManager;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.ViewGroup;\nimport android.view.ViewGroup.LayoutParams;\nimport android.widget.Button;\nimport android.widget.LinearLayout;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport com.nadmm.airports.DatabaseManager;\nimport com.nadmm.airports.DatabaseManager.Airports;\nimport com.nadmm.airports.DatabaseManager.Awos1;\nimport com.nadmm.airports.DatabaseManager.Wxs;\nimport com.nadmm.airports.DrawerActivityBase;\nimport com.nadmm.airports.FragmentBase;\nimport com.nadmm.airports.R;\nimport com.nadmm.airports.utils.CursorAsyncTask;\nimport com.nadmm.airports.utils.FormatUtils;\nimport com.nadmm.airports.utils.GeoUtils;\nimport com.nadmm.airports.utils.TimeUtils;\nimport com.nadmm.airports.wx.Taf.Forecast;\nimport com.nadmm.airports.wx.Taf.IcingCondition;\nimport com.nadmm.airports.wx.Taf.TurbulenceCondition;\npublic class TafFragment extends FragmentBase {\n    private final String mAction = NoaaService.ACTION_GET_TAF;\n    private final int TAF_RADIUS = 25;\n    private final int TAF_HOURS_BEFORE = 3;\n    private Location mLocation;\n    private IntentFilter mFilter;\n    private BroadcastReceiver mReceiver;\n    private String mStationId;\n    private Forecast mLastForecast;\n    @Override\n    public void onCreate( Bundle savedInstanceState ) {\n        super.onCreate( savedInstanceState );\n        setHasOptionsMenu( true );\n        mFilter = new IntentFilter();\n        mFilter.addAction( mAction );\n        mReceiver = new BroadcastReceiver() {\n            @Override\n            public void onReceive( Context context, Intent intent ) {\n                String action = intent.getAction();\n                if ( action.equals( mAction ) ) {\n                    String type = intent.getStringExtra( NoaaService.TYPE );\n                    if ( type.equals( NoaaService.TYPE_TEXT ) ) {\n                        showTaf( intent );\n                    }\n                }\n            }\n        };\n    }\n    @Override\n    public void onResume() {\n        LocalBroadcastManager bm = LocalBroadcastManager.getInstance( getActivity() );\n        bm.registerReceiver( mReceiver, mFilter );\n        Bundle args = getArguments();\n        String stationId = args.getString( NoaaService.STATION_ID );\n        setBackgroundTask( new TafTask() ).execute( stationId );\n        super.onResume();\n    }\n    @Override\n    public void onPause() {\n        LocalBroadcastManager bm = LocalBroadcastManager.getInstance( getActivity() );\n        bm.unregisterReceiver( mReceiver );\n        super.onPause();\n    }\n    @Override\n    public View onCreateView( LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState ) {\n        View view = inflater.inflate( R.layout.taf_detail_view, container, false );\n        Button btnGraphic = (Button) view.findViewById( R.id.btnViewGraphic );\n        btnGraphic.setOnClickListener( new OnClickListener() {\n            @Override\n            public void onClick( View v ) {\n                Intent intent = new Intent( getActivity(), TafMapActivity.class );\n                startActivity( intent );\n            }\n        } );\n        return createContentView( view );\n    }\n    @Override\n    public void onPrepareOptionsMenu( Menu menu ) {\n        DrawerActivityBase activity = (DrawerActivityBase) getActivity();\n        setRefreshItemVisible( !activity.isNavDrawerOpen() );\n    }\n    @Override\n    public boolean onOptionsItemSelected( MenuItem item ) {\n        // Handle item selection\n        switch ( item.getItemId() ) {\n            case R.id.menu_refresh:\n                startRefreshAnimation();\n                requestTaf( mStationId, true );\n                return true;\n            default:\n                return super.onOptionsItemSelected( item );\n        }\n    }\n    private final class TafTask extends CursorAsyncTask {\n        @Override\n        protected Cursor[] doInBackground( String... params ) {\n            String stationId = params[ 0 ];\n            Cursor[] cursors = new Cursor[ 2 ];\n            SQLiteDatabase db = getDbManager().getDatabase( DatabaseManager.DB_FADDS );\n            SQLiteQueryBuilder builder = new SQLiteQueryBuilder();\n            builder.setTables( Wxs.TABLE_NAME );\n            String selection = Wxs.STATION_ID+\"=?\";\n            Cursor c = builder.query( db, new String[] { \"*\" }, selection,\n                    new String[] { stationId }, null, null, null, null );\n            c.moveToFirst();\n            String siteTypes = c.getString( c.getColumnIndex( Wxs.STATION_SITE_TYPES ) );\n            if ( !siteTypes.contains( \"TAF\" ) ) {\n                // There is no TAF available at this station, search for the nearest\n                double lat = c.getDouble( c.getColumnIndex( Wxs.STATION_LATITUDE_DEGREES ) );\n                double lon = c.getDouble( c.getColumnIndex( Wxs.STATION_LONGITUDE_DEGREES ) );\n                Location location = new Location( \"\" );\n                location.setLatitude( lat );\n                location.setLongitude( lon );\n                c.close();\n                // Get the bounding box first to do a quick query as a first cut\n                double[] box = GeoUtils.getBoundingBoxRadians( location, TAF_RADIUS );\n                double radLatMin = box[ 0 ];\n                double radLatMax = box[ 1 ];\n                double radLonMin = box[ 2 ];\n                double radLonMax = box[ 3 ];\n                // Check if 180th Meridian lies within the bounding Box\n                boolean isCrossingMeridian180 = ( radLonMin > radLonMax );\n                selection = \"(\"\n                    +Wxs.STATION_LATITUDE_DEGREES+\">=? AND \"+Wxs.STATION_LATITUDE_DEGREES+\"<=?\"\n                    +\") AND (\"+Wxs.STATION_LONGITUDE_DEGREES+\">=? \"\n                    +(isCrossingMeridian180? \"OR \" : \"AND \")+Wxs.STATION_LONGITUDE_DEGREES+\"<=?)\";\n                String[] selectionArgs = {\n                        String.valueOf( Math.toDegrees( radLatMin ) ),\n                        String.valueOf( Math.toDegrees( radLatMax ) ),\n                        String.valueOf( Math.toDegrees( radLonMin ) ),\n                        String.valueOf( Math.toDegrees( radLonMax ) )\n                        };\n                c = builder.query( db, new String[] { \"*\" }, selection, selectionArgs,\n                        null, null, null, null );\n                stationId = \"\";\n                if ( c.moveToFirst() ) {\n                    float distance = Float.MAX_VALUE;\n                    do {\n                        siteTypes = c.getString( c.getColumnIndex( Wxs.STATION_SITE_TYPES ) );\n                        if ( !siteTypes.contains( \"TAF\" ) ) {\n                            continue;\n                        }\n                        // Get the location of this station\n                        float[] results = new float[ 2 ];\n                        Location.distanceBetween(\n                                location.getLatitude(),\n                                location.getLongitude(),\n                                c.getDouble( c.getColumnIndex( Wxs.STATION_LATITUDE_DEGREES ) ),\n                                c.getDouble( c.getColumnIndex( Wxs.STATION_LONGITUDE_DEGREES ) ),\n                                results );\n                        results[ 0 ] /= GeoUtils.METERS_PER_NAUTICAL_MILE;\n                        if ( results[ 0 ] <= TAF_RADIUS && results[ 0 ] < distance ) {\n                            stationId = c.getString( c.getColumnIndex( Wxs.STATION_ID ) );\n                            distance = results[ 0 ];\n                        }\n                    } while ( c.moveToNext() );\n                }\n            }\n            c.close();\n            if ( stationId.length() > 0 ) {\n                // We have the station with TAF\n                builder = new SQLiteQueryBuilder();\n                builder.setTables( Wxs.TABLE_NAME );\n                selection = Wxs.STATION_ID+\"=?\";\n                c = builder.query( db, new String[] { \"*\" }, selection,\n                        new String[] { stationId }, null, null, null, null );\n                cursors[ 0 ] = c;\n                String[] wxColumns = new String[] {\n                        Awos1.WX_SENSOR_IDENT,\n                        Awos1.WX_SENSOR_TYPE,\n                        Awos1.STATION_FREQUENCY,\n                        Awos1.SECOND_STATION_FREQUENCY,\n                        Awos1.STATION_PHONE_NUMBER,\n                        Airports.ASSOC_CITY,\n                        Airports.ASSOC_STATE\n                };\n                builder = new SQLiteQueryBuilder();\n                builder.setTables( Airports.TABLE_NAME+\" a\"\n                        +\" LEFT JOIN \"+Awos1.TABLE_NAME+\" w\"\n                        +\" ON a.\"+Airports.FAA_CODE+\" = w.\"+Awos1.WX_SENSOR_IDENT );\n                selection = \"a.\"+Airports.ICAO_CODE+\"=?\";\n                c = builder.query( db, wxColumns, selection, new String[] { stationId },\n                        null, null, null, null );\n                cursors[ 1 ] = c;\n            }\n            return cursors;\n        }\n        @Override\n        protected boolean onResult( Cursor[] result ) {\n            Cursor wxs = result[ 0 ];\n            if ( wxs == null || !wxs.moveToFirst() ) {\n                // No station with TAF was found nearby\n                Bundle args = getArguments();\n                String stationId = args.getString( NoaaService.STATION_ID );\n                View detail = findViewById( R.id.wx_detail_layout );\n                detail.setVisibility( View.GONE );\n                LinearLayout layout = (LinearLayout) findViewById( R.id.wx_status_layout );\n                layout.removeAllViews();\n                layout.setVisibility( View.GONE );\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "length": 986, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "cff5cce659d8bde6af869ff91a57f4b6445b88159e169708"}
{"input": "", "context": "using System.Collections;\nusing System.Collections.Generic;\nusing NHibernate.Criterion;\nusing NHibernate.Multi;\nusing NHibernate.Stat;\nusing NUnit.Framework;\nnamespace NHibernate.Test.Stats\n{\n\t[TestFixture]\n\tpublic class StatsFixture : TestCase\n\t{\n\t\tprotected override string MappingsAssembly\n\t\t{\n\t\t\tget { return \"NHibernate.Test\"; }\n\t\t}\n\t\tprotected override string[] Mappings\n\t\t{\n\t\t\tget { return new string[] { \"Stats.Continent.hbm.xml\" }; }\n\t\t}\n\t\tprotected override void Configure(Cfg.Configuration configuration)\n\t\t{\n\t\t\tconfiguration.SetProperty(Cfg.Environment.GenerateStatistics, \"true\");\n\t\t}\n\t\tprivate static Continent FillDb(ISession s)\n\t\t{\n\t\t\tContinent europe = new Continent();\n\t\t\teurope.Name=\"Europe\";\n\t\t\tCountry france = new Country();\n\t\t\tfrance.Name=\"France\";\n\t\t\teurope.Countries=new HashSet<Country>();\n\t\t\teurope.Countries.Add(france);\n\t\t\ts.Save(france);\n\t\t\ts.Save(europe);\n\t\t\treturn europe;\n\t\t}\n\t\tprivate static void CleanDb(ISession s)\n\t\t{\n\t\t\ts.Delete(\"from Locality\");\n\t\t\ts.Delete(\"from Country\");\n\t\t\ts.Delete(\"from Continent\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CollectionFetchVsLoad()\n\t\t{\n\t\t\tIStatistics stats = Sfi.Statistics;\n\t\t\tstats.Clear();\n\t\t\tISession s = OpenSession();\n\t\t\tITransaction tx = s.BeginTransaction();\n\t\t\tContinent europe = FillDb(s);\n\t\t\ttx.Commit();\n\t\t\ts.Clear();\n\t\t\ttx = s.BeginTransaction();\n\t\t\tAssert.AreEqual(0, stats.CollectionLoadCount);\n\t\t\tAssert.AreEqual(0, stats.CollectionFetchCount);\n\t\t\tContinent europe2 = s.Get<Continent>(europe.Id);\n\t\t\tAssert.AreEqual(0, stats.CollectionLoadCount, \"Lazy true: no collection should be loaded\");\n\t\t\tAssert.AreEqual(0, stats.CollectionFetchCount);\n\t\t\tint cc = europe2.Countries.Count;\n\t\t\tAssert.AreEqual(1, stats.CollectionLoadCount);\n\t\t\tAssert.AreEqual(1, stats.CollectionFetchCount, \"Explicit fetch of the collection state\");\n\t\t\ttx.Commit();\n\t\t\ts.Close();\n\t\t\ts = OpenSession();\n\t\t\ttx = s.BeginTransaction();\n\t\t\tstats.Clear();\n\t\t\teurope = FillDb(s);\n\t\t\ttx.Commit();\n\t\t\ts.Clear();\n\t\t\ttx = s.BeginTransaction();\n\t\t\tAssert.AreEqual(0, stats.CollectionLoadCount);\n\t\t\tAssert.AreEqual(0, stats.CollectionFetchCount);\n\t\t\teurope2 = s.CreateQuery(\"from Continent a join fetch a.Countries where a.id = \" + europe.Id).UniqueResult<Continent>();\n\t\t\tAssert.AreEqual(1, stats.CollectionLoadCount);\n\t\t\tAssert.AreEqual(0, stats.CollectionFetchCount, \"collection should be loaded in the same query as its parent\");\n\t\t\ttx.Commit();\n\t\t\ts.Close();\n\t\t\tMapping.Collection coll = cfg.GetCollectionMapping(\"NHibernate.Test.Stats.Continent.Countries\");\n\t\t\tcoll.FetchMode = FetchMode.Join;\n\t\t\tcoll.IsLazy = false;\n\t\t\tISessionFactory sf = cfg.BuildSessionFactory();\n\t\t\tstats = sf.Statistics;\n\t\t\tstats.Clear();\n\t\t\tstats.IsStatisticsEnabled = true;\n\t\t\ts = sf.OpenSession();\n\t\t\ttx = s.BeginTransaction();\n\t\t\teurope = FillDb(s);\n\t\t\ttx.Commit();\n\t\t\ts.Clear();\n\t\t\ttx = s.BeginTransaction();\n\t\t\tAssert.AreEqual(0, stats.CollectionLoadCount);\n\t\t\tAssert.AreEqual(0, stats.CollectionFetchCount);\n\t\t\teurope2 = s.Get<Continent>(europe.Id);\n\t\t\tAssert.AreEqual(1, stats.CollectionLoadCount);\n\t\t\tAssert.AreEqual(0, stats.CollectionFetchCount,\n\t\t\t\t\t\t\t\"Should do direct load, not indirect second load when lazy false and JOIN\");\n\t\t\ttx.Commit();\n\t\t\ts.Close();\n\t\t\tsf.Close();\n\t\t\tcoll = cfg.GetCollectionMapping(\"NHibernate.Test.Stats.Continent.Countries\");\n\t\t\tcoll.FetchMode = FetchMode.Select;\n\t\t\tcoll.IsLazy = false;\n\t\t\tsf = cfg.BuildSessionFactory();\n\t\t\tstats = sf.Statistics;\n\t\t\tstats.Clear();\n\t\t\tstats.IsStatisticsEnabled = true;\n\t\t\ts = sf.OpenSession();\n\t\t\ttx = s.BeginTransaction();\n\t\t\teurope = FillDb(s);\n\t\t\ttx.Commit();\n\t\t\ts.Clear();\n\t\t\ttx = s.BeginTransaction();\n\t\t\tAssert.AreEqual(0, stats.CollectionLoadCount);\n\t\t\tAssert.AreEqual(0, stats.CollectionFetchCount);\n\t\t\teurope2 = s.Get<Continent>(europe.Id);\n\t\t\tAssert.AreEqual(1, stats.CollectionLoadCount);\n\t\t\tAssert.AreEqual(1, stats.CollectionFetchCount, \"Should do explicit collection load, not part of the first one\");\n\t\t\tforeach (Country country in europe2.Countries)\n\t\t\t{\n\t\t\t\ts.Delete(country);\n\t\t\t}\n\t\t\tCleanDb(s);\n\t\t\ttx.Commit();\n\t\t\ts.Close();\n\t\t}\n\t\t[Test]\n\t\tpublic void QueryStatGathering()\n\t\t{\n\t\t\tIStatistics stats = Sfi.Statistics;\n\t\t\tstats.Clear();\n\t\t\tISession s = OpenSession();\n\t\t\tITransaction tx = s.BeginTransaction();\n\t\t\tFillDb(s);\n\t\t\ttx.Commit();\n\t\t\ts.Close();\n\t\t\ts = OpenSession();\n\t\t\ttx = s.BeginTransaction();\n\t\t\tstring continents = \"from Continent\";\n\t\t\tint results = s.CreateQuery(continents).List().Count;\n\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(continents);\n\t\t\tAssert.IsNotNull(continentStats, \"stats were null\");\n\t\t\tAssert.AreEqual(1, continentStats.ExecutionCount, \"unexpected execution count\");\n\t\t\tAssert.AreEqual(results, continentStats.ExecutionRowCount, \"unexpected row count\");\n\t\t\tvar maxTime = continentStats.ExecutionMaxTime;\n\t\t\tAssert.AreEqual(maxTime, stats.QueryExecutionMaxTime);\n\t\t\tAssert.AreEqual( continents, stats.QueryExecutionMaxTimeQueryString );\n\t\t\tIEnumerable itr = s.CreateQuery(continents).Enumerable();\n\t\t\t// Enumerable() should increment the execution count\n\t\t\tAssert.AreEqual(2, continentStats.ExecutionCount, \"unexpected execution count\");\n\t\t\t// but should not effect the cumulative row count\n\t\t\tAssert.AreEqual(results, continentStats.ExecutionRowCount, \"unexpected row count\");\n\t\t\tNHibernateUtil.Close(itr);\n\t\t\ttx.Commit();\n\t\t\ts.Close();\n\t\t\t// explicitly check that statistics for \"split queries\" get collected\n\t\t\t// under the original query\n\t\t\tstats.Clear();\n\t\t\ts = OpenSession();\n\t\t\ttx = s.BeginTransaction();\n\t\t\tstring localities = \"from Locality\";\n\t\t\tresults = s.CreateQuery(localities).List().Count;\n\t\t\tQueryStatistics localityStats = stats.GetQueryStatistics(localities);\n\t\t\tAssert.IsNotNull(localityStats, \"stats were null\");\n\t\t\t// ...one for each split query\n\t\t\tAssert.AreEqual(2, localityStats.ExecutionCount, \"unexpected execution count\");\n\t\t\tAssert.AreEqual(results, localityStats.ExecutionRowCount, \"unexpected row count\");\n\t\t\tmaxTime = localityStats.ExecutionMaxTime;\n\t\t\tAssert.AreEqual(maxTime, stats.QueryExecutionMaxTime);\n\t\t\tAssert.AreEqual( localities, stats.QueryExecutionMaxTimeQueryString );\n\t\t\ttx.Commit();\n\t\t\ts.Close();\n\t\t\tAssert.IsFalse(s.IsOpen);\n\t\t\t// native sql queries\n\t\t\tstats.Clear();\n\t\t\ts = OpenSession();\n\t\t\ttx = s.BeginTransaction();\n\t\t\tstring sql = \"select Id, Name from Country\";\n\t\t\tresults = s.CreateSQLQuery(sql).AddEntity(typeof (Country)).List().Count;\n\t\t\tQueryStatistics sqlStats = stats.GetQueryStatistics(sql);\n\t\t\tAssert.IsNotNull(sqlStats, \"sql stats were null\");\n\t\t\tAssert.AreEqual(1, sqlStats.ExecutionCount, \"unexpected execution count\");\n\t\t\tAssert.AreEqual(results, sqlStats.ExecutionRowCount, \"unexpected row count\");\n\t\t\tmaxTime = sqlStats.ExecutionMaxTime;\n\t\t\tAssert.AreEqual(maxTime, stats.QueryExecutionMaxTime);\n\t\t\tAssert.AreEqual( sql, stats.QueryExecutionMaxTimeQueryString);\n\t\t\ttx.Commit();\n\t\t\ts.Close();\n\t\t\ts = OpenSession();\n\t\t\ttx = s.BeginTransaction();\n\t\t\tCleanDb(s);\n\t\t\ttx.Commit();\n\t\t\ts.Close();\n\t\t}\n\t\t[Test]\n\t\tpublic void IncrementQueryExecutionCount_WhenExplicitQueryIsExecuted()\n\t\t{\n\t\t\tusing (ISession s = OpenSession())\n\t\t\tusing (ITransaction tx = s.BeginTransaction())\n\t\t\t{\n\t\t\t\tFillDb(s);\n\t\t\t\ttx.Commit();\n\t\t\t}\n\t\t\tIStatistics stats = Sfi.Statistics;\n\t\t\tstats.Clear();\n\t\t\tusing (ISession s = OpenSession())\n\t\t\t{\n", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "length": 596, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "ae9e378a2b48e8a532bf970e581bc7ccc318cd5047ec916c"}
{"input": "", "context": "using System;\nnamespace WebArbor.LiveUpdate.Engine\n{\n    /// <summary>\n    /// Tool to calculate and add CRC codes to a string\n    /// \n    /// ***************************************************************************\n    /// Copyright (c) 2003 Thoraxcentrum, Erasmus MC, The Netherlands.\n    /// \n    /// Written by Marcel de Wijs with help from a lot of others, \n    /// especially Stefan Nelwan\n    /// \n    /// This code is for free. I ported it from several different sources to C#.\n    /// \n    /// For comments: Marcel_de_Wijs@hotmail.com\n    /// ***************************************************************************\n    /// </summary>\n    public class CRCTool\n    {\n        // 'order' [1..32] is the CRC polynom order, counted without the leading '1' bit\n        // 'polynom' is the CRC polynom without leading '1' bit\n        // 'direct' [0,1] specifies the kind of algorithm: 1=direct, no augmented zero bits\n        // 'crcinit' is the initial CRC value belonging to that algorithm\n        // 'crcxor' is the final XOR value\n        // 'refin' [0,1] specifies if a data byte is reflected before processing (UART) or not\n        // 'refout' [0,1] specifies if the CRC will be reflected before XOR\n        // Data character string\n        // For CRC-CCITT : order = 16, direct=1, poly=0x1021, CRCinit = 0xFFFF, crcxor=0; refin =0, refout=0  \n        // For CRC16:      order = 16, direct=1, poly=0x8005, CRCinit = 0x0, crcxor=0x0; refin =1, refout=1  \n        // For CRC32:      order = 32, direct=1, poly=0x4c11db7, CRCinit = 0xFFFFFFFF, crcxor=0xFFFFFFFF; refin =1, refout=1  \n        // Default : CRC-CCITT\n        private int order = 16;\n        private ulong polynom = 0x1021;\n        private int direct = 1;\n        private ulong crcinit = 0xFFFF;\n        private ulong crcxor = 0x0;\n        private int refin = 0;\n        private int refout = 0;\n        private ulong crcmask;\n        private ulong crchighbit;\n        private ulong crcinit_direct;\n        private ulong crcinit_nondirect;\n        private ulong[] crctab = new ulong[256];\n        // Enumeration used in the init function to specify which CRC algorithm to use\n        public enum CRCCode { CRC_CCITT, CRC16, CRC32 };\n        public CRCTool()\n        {\n            // \n            // TODO: Add constructor logic here\n            //\n        }\n        public void Init(CRCCode CodingType)\n        {\n            switch (CodingType)\n            {\n                case CRCCode.CRC_CCITT:\n                    order = 16; direct = 1; polynom = 0x1021; crcinit = 0xFFFF; crcxor = 0; refin = 0; refout = 0;\n                    break;\n                case CRCCode.CRC16:\n                    order = 16; direct = 1; polynom = 0x8005; crcinit = 0x0; crcxor = 0x0; refin = 1; refout = 1;\n                    break;\n                case CRCCode.CRC32:\n                    order = 32; direct = 1; polynom = 0x4c11db7; crcinit = 0xFFFFFFFF; crcxor = 0xFFFFFFFF; refin = 1; refout = 1;\n                    break;\n            }\n            // Initialize all variables for seeding and builing based upon the given coding type\n            // at first, compute constant bit masks for whole CRC and CRC high bit\n            crcmask = ((((ulong)1 << (order - 1)) - 1) << 1) | 1;\n            crchighbit = (ulong)1 << (order - 1);\n            // generate lookup table\n            generate_crc_table();\n            ulong bit, crc;\n            int i;\n            if (direct == 0)\n            {\n                crcinit_nondirect = crcinit;\n                crc = crcinit;\n                for (i = 0; i < order; i++)\n                {\n                    bit = crc & crchighbit;\n                    crc <<= 1;\n                    if (bit != 0)\n                    {\n                        crc ^= polynom;\n                    }\n                }\n                crc &= crcmask;\n                crcinit_direct = crc;\n            }\n            else\n            {\n                crcinit_direct = crcinit;\n                crc = crcinit;\n                for (i = 0; i < order; i++)\n                {\n                    bit = crc & 1;\n                    if (bit != 0)\n                    {\n                        crc ^= polynom;\n                    }\n                    crc >>= 1;\n                    if (bit != 0)\n                    {\n                        crc |= crchighbit;\n                    }\n                }\n                crcinit_nondirect = crc;\n            }\n        }\n        /// <summary>\n        /// 4 ways to calculate the crc checksum. If you have to do a lot of encoding\n        /// you should use the table functions. Since they use precalculated values, which \n        /// saves some calculating.\n        /// </summary>.\n        public ulong crctablefast(byte[] p)\n        {\n            // fast lookup table algorithm without augmented zero bytes, e.g. used in pkzip.\n            // only usable with polynom orders of 8, 16, 24 or 32.\n            ulong crc = crcinit_direct;\n            if (refin != 0)\n            {\n                crc = reflect(crc, order);\n            }\n            if (refin == 0)\n            {\n                for (int i = 0; i < p.Length; i++)\n                {\n                    crc = (crc << 8) ^ crctab[((crc >> (order - 8)) & 0xff) ^ p[i]];\n                }\n            }\n            else\n            {\n                for (int i = 0; i < p.Length; i++)\n                {\n                    crc = (crc >> 8) ^ crctab[(crc & 0xff) ^ p[i]];\n                }\n            }\n            if ((refout ^ refin) != 0)\n            {\n                crc = reflect(crc, order);\n            }\n            crc ^= crcxor;\n            crc &= crcmask;\n            return (crc);\n        }\n        public ulong crctable(byte[] p)\n        {\n            // normal lookup table algorithm with augmented zero bytes.\n            // only usable with polynom orders of 8, 16, 24 or 32.\n            ulong crc = crcinit_nondirect;\n            if (refin != 0)\n            {\n                crc = reflect(crc, order);\n            }\n            if (refin == 0)\n            {\n                for (int i = 0; i < p.Length; i++)\n                {\n                    crc = ((crc << 8) | p[i]) ^ crctab[(crc >> (order - 8)) & 0xff];\n                }\n            }\n            else\n            {\n                for (int i = 0; i < p.Length; i++)\n                {\n                    crc = (ulong)(((int)(crc >> 8) | (p[i] << (order - 8))) ^ (int)crctab[crc & 0xff]);\n                }\n            }\n            if (refin == 0)\n            {\n                for (int i = 0; i < order / 8; i++)\n                {\n                    crc = (crc << 8) ^ crctab[(crc >> (order - 8)) & 0xff];\n                }\n            }\n            else\n            {\n                for (int i = 0; i < order / 8; i++)\n                {\n                    crc = (crc >> 8) ^ crctab[crc & 0xff];\n                }\n            }\n            if ((refout ^ refin) != 0)\n            {\n                crc = reflect(crc, order);\n            }\n            crc ^= crcxor;\n            crc &= crcmask;\n            return (crc);\n        }\n        public ulong crcbitbybit(byte[] p)\n        {\n            // bit by bit algorithm with augmented zero bytes.\n            // does not use lookup table, suited for polynom orders between 1...32.\n            int i;\n            ulong j, c, bit;\n            ulong crc = crcinit_nondirect;\n            for (i = 0; i < p.Length; i++)\n            {\n                c = (ulong)p[i];\n                if (refin != 0)\n                {\n                    c = reflect(c, 8);\n                }\n                for (j = 0x80; j != 0; j >>= 1)\n                {\n                    bit = crc & crchighbit;\n                    crc <<= 1;\n                    if ((c & j) != 0)\n                    {\n                        crc |= 1;\n                    }\n                    if (bit != 0)\n                    {\n                        crc ^= polynom;\n                    }\n                }\n            }\n            for (i = 0; (int)i < order; i++)\n            {\n                bit = crc & crchighbit;\n                crc <<= 1;\n                if (bit != 0) crc ^= polynom;\n            }\n            if (refout != 0)\n            {\n                crc = reflect(crc, order);\n            }\n            crc ^= crcxor;\n            crc &= crcmask;\n            return (crc);\n        }\n        public ulong crcbitbybitfast(byte[] p)\n        {\n            // fast bit by bit algorithm without augmented zero bytes.\n            // does not use lookup table, suited for polynom orders between 1...32.\n            int i;\n            ulong j, c, bit;\n            ulong crc = crcinit_direct;\n            for (i = 0; i < p.Length; i++)\n            {\n                c = (ulong)p[i];\n                if (refin != 0)\n                {\n                    c = reflect(c, 8);\n                }\n                for (j = 0x80; j > 0; j >>= 1)\n                {\n                    bit = crc & crchighbit;\n                    crc <<= 1;\n                    if ((c & j) > 0) bit ^= crchighbit;\n                    if (bit > 0) crc ^= polynom;\n                }\n            }\n            if (refout > 0)\n            {\n                crc = reflect(crc, order);\n            }\n            crc ^= crcxor;\n            crc &= crcmask;\n            return (crc);\n        }\n        /// <summary>\n        /// CalcCRCITT is an algorithm found on the web for calculating the CRCITT checksum\n        /// It is included to demonstrate that although it looks different it is the same \n        /// routine as the crcbitbybit* functions. But it is optimized and preconfigured for CRCITT.\n        /// </summary>\n        public ushort CalcCRCITT(byte[] p)\n        {\n            uint uiCRCITTSum = 0xFFFF;\n            uint uiByteValue;\n            for (int iBufferIndex = 0; iBufferIndex < p.Length; iBufferIndex++)\n            {\n                uiByteValue = ((uint)p[iBufferIndex] << 8);\n", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "length": 1212, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "cb8b4b2b743ae5c5feb0a78bada007e175140164e40f5a42"}
{"input": "", "context": "package net.geforcemods.securitycraft.entity;\nimport java.util.List;\nimport java.util.Random;\nimport net.geforcemods.securitycraft.SCContent;\nimport net.geforcemods.securitycraft.SecurityCraft;\nimport net.geforcemods.securitycraft.api.Owner;\nimport net.geforcemods.securitycraft.blockentities.KeypadChestBlockEntity;\nimport net.geforcemods.securitycraft.entity.ai.AttackRangedIfEnabledGoal;\nimport net.geforcemods.securitycraft.entity.ai.TargetNearestPlayerOrMobGoal;\nimport net.geforcemods.securitycraft.items.ModuleItem;\nimport net.geforcemods.securitycraft.network.client.InitSentryAnimation;\nimport net.geforcemods.securitycraft.util.ModuleUtils;\nimport net.geforcemods.securitycraft.util.PlayerUtils;\nimport net.geforcemods.securitycraft.util.Utils;\nimport net.minecraft.ChatFormatting;\nimport net.minecraft.core.BlockPos;\nimport net.minecraft.core.BlockSourceImpl;\nimport net.minecraft.core.Direction;\nimport net.minecraft.core.dispenser.AbstractProjectileDispenseBehavior;\nimport net.minecraft.core.dispenser.DispenseItemBehavior;\nimport net.minecraft.nbt.CompoundTag;\nimport net.minecraft.network.protocol.Packet;\nimport net.minecraft.network.protocol.game.ClientboundAddEntityPacket;\nimport net.minecraft.network.syncher.EntityDataAccessor;\nimport net.minecraft.network.syncher.EntityDataSerializers;\nimport net.minecraft.network.syncher.SynchedEntityData;\nimport net.minecraft.server.level.ServerLevel;\nimport net.minecraft.sounds.SoundEvent;\nimport net.minecraft.sounds.SoundEvents;\nimport net.minecraft.util.Mth;\nimport net.minecraft.world.InteractionHand;\nimport net.minecraft.world.InteractionResult;\nimport net.minecraft.world.damagesource.DamageSource;\nimport net.minecraft.world.entity.Entity;\nimport net.minecraft.world.entity.EntityType;\nimport net.minecraft.world.entity.EquipmentSlot;\nimport net.minecraft.world.entity.LivingEntity;\nimport net.minecraft.world.entity.MobSpawnType;\nimport net.minecraft.world.entity.MoverType;\nimport net.minecraft.world.entity.PathfinderMob;\nimport net.minecraft.world.entity.Pose;\nimport net.minecraft.world.entity.monster.RangedAttackMob;\nimport net.minecraft.world.entity.player.Player;\nimport net.minecraft.world.entity.projectile.Projectile;\nimport net.minecraft.world.item.Item;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.item.Items;\nimport net.minecraft.world.item.context.UseOnContext;\nimport net.minecraft.world.level.Level;\nimport net.minecraft.world.level.LevelAccessor;\nimport net.minecraft.world.level.block.Block;\nimport net.minecraft.world.level.block.Blocks;\nimport net.minecraft.world.level.block.DispenserBlock;\nimport net.minecraft.world.level.block.entity.BlockEntity;\nimport net.minecraft.world.level.block.state.BlockState;\nimport net.minecraft.world.level.material.PushReaction;\nimport net.minecraft.world.phys.AABB;\nimport net.minecraft.world.phys.BlockHitResult;\nimport net.minecraft.world.phys.HitResult;\nimport net.minecraft.world.phys.Vec3;\nimport net.minecraft.world.phys.shapes.Shapes;\nimport net.minecraftforge.common.util.LazyOptional;\nimport net.minecraftforge.fmllegacy.network.PacketDistributor;\nimport net.minecraftforge.items.CapabilityItemHandler;\nimport net.minecraftforge.items.IItemHandler;\npublic class Sentry extends PathfinderMob implements RangedAttackMob //needs to be a creature so it can target a player, ai is also only given to living entities\n{\n\tprivate static final EntityDataAccessor<Owner> OWNER = SynchedEntityData.<Owner> defineId(Sentry.class, Owner.getSerializer());\n\tprivate static final EntityDataAccessor<CompoundTag> DISGUISE_MODULE = SynchedEntityData.<CompoundTag> defineId(Sentry.class, EntityDataSerializers.COMPOUND_TAG);\n\tprivate static final EntityDataAccessor<CompoundTag> ALLOWLIST = SynchedEntityData.<CompoundTag> defineId(Sentry.class, EntityDataSerializers.COMPOUND_TAG);\n\tprivate static final EntityDataAccessor<Boolean> HAS_SPEED_MODULE = SynchedEntityData.<Boolean> defineId(Sentry.class, EntityDataSerializers.BOOLEAN);\n\tprivate static final EntityDataAccessor<Integer> MODE = SynchedEntityData.<Integer> defineId(Sentry.class, EntityDataSerializers.INT);\n\tpublic static final EntityDataAccessor<Float> HEAD_ROTATION = SynchedEntityData.<Float> defineId(Sentry.class, EntityDataSerializers.FLOAT);\n\tpublic static final float MAX_TARGET_DISTANCE = 20.0F;\n\tprivate static final float ANIMATION_STEP_SIZE = 0.025F;\n\tprivate static final float UPWARDS_ANIMATION_LIMIT = 0.025F;\n\tprivate static final float DOWNWARDS_ANIMATION_LIMIT = 0.9F;\n\tprivate float headYTranslation = 0.9F;\n\tpublic boolean animateUpwards = false;\n\tpublic boolean animate = false;\n\tprivate long previousTargetId = Long.MIN_VALUE;\n\tpublic Sentry(EntityType<Sentry> type, Level level) {\n\t\tsuper(SCContent.eTypeSentry, level);\n\t}\n\tpublic void setupSentry(Player owner) {\n\t\tentityData.set(OWNER, new Owner(owner.getName().getString(), Player.createPlayerUUID(owner.getGameProfile()).toString()));\n\t\tentityData.set(DISGUISE_MODULE, new CompoundTag());\n\t\tentityData.set(ALLOWLIST, new CompoundTag());\n\t\tentityData.set(HAS_SPEED_MODULE, false);\n\t\tentityData.set(MODE, SentryMode.CAMOUFLAGE_HP.ordinal());\n\t\tentityData.set(HEAD_ROTATION, 0.0F);\n\t}\n\t@Override\n\tprotected void defineSynchedData() {\n\t\tsuper.defineSynchedData();\n\t\tentityData.define(OWNER, new Owner());\n\t\tentityData.define(DISGUISE_MODULE, new CompoundTag());\n\t\tentityData.define(ALLOWLIST, new CompoundTag());\n\t\tentityData.define(HAS_SPEED_MODULE, false);\n\t\tentityData.define(MODE, SentryMode.CAMOUFLAGE_HP.ordinal());\n\t\tentityData.define(HEAD_ROTATION, 0.0F);\n\t}\n\t@Override\n\tprotected void registerGoals() {\n\t\tgoalSelector.addGoal(1, new AttackRangedIfEnabledGoal(this, this::getShootingSpeed, 10.0F));\n\t\ttargetSelector.addGoal(1, new TargetNearestPlayerOrMobGoal(this));\n\t}\n\t@Override\n\tpublic void tick() {\n\t\tsuper.tick();\n\t\tif (!level.isClientSide) {\n\t\t\tBlockPos downPos = getBlockPosBelowThatAffectsMyMovement();\n\t\t\tif (level.getBlockState(downPos).isAir() || level.noCollision(new AABB(downPos)))\n\t\t\t\tdiscard();\n\t\t}\n\t\telse {\n\t\t\tif (!animate && headYTranslation > 0.0F && getMode().isAggressive()) {\n\t\t\t\tanimateUpwards = true;\n\t\t\t\tanimate = true;\n\t\t\t}\n\t\t\tif (animate) //no else if because animate can be changed in the above if statement\n\t\t\t{\n\t\t\t\tif (animateUpwards && headYTranslation > UPWARDS_ANIMATION_LIMIT) {\n\t\t\t\t\theadYTranslation -= ANIMATION_STEP_SIZE;\n\t\t\t\t\tif (headYTranslation <= UPWARDS_ANIMATION_LIMIT) {\n\t\t\t\t\t\tanimateUpwards = false;\n\t\t\t\t\t\tanimate = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (!animateUpwards && headYTranslation < DOWNWARDS_ANIMATION_LIMIT) {\n\t\t\t\t\theadYTranslation += ANIMATION_STEP_SIZE;\n\t\t\t\t\tif (headYTranslation >= DOWNWARDS_ANIMATION_LIMIT) {\n\t\t\t\t\t\tanimateUpwards = true;\n\t\t\t\t\t\tanimate = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t@Override\n\tpublic ItemStack getPickedResult(HitResult target) {\n\t\treturn new ItemStack(SCContent.SENTRY.get());\n\t}\n\t@Override\n\tpublic InteractionResult mobInteract(Player player, InteractionHand hand) {\n\t\tBlockPos pos = blockPosition();\n\t\tif (getOwner().isOwner(player) && hand == InteractionHand.MAIN_HAND) {\n\t\t\tItem item = player.getMainHandItem().getItem();\n\t\t\tplayer.closeContainer();\n\t\t\tif (player.isCrouching())\n\t\t\t\tdiscard();\n\t\t\telse if (item == SCContent.UNIVERSAL_BLOCK_REMOVER.get()) {\n\t\t\t\tkill();\n\t\t\t\tif (!player.isCreative())\n\t\t\t\t\tplayer.getMainHandItem().hurtAndBreak(1, player, p -> p.broadcastBreakEvent(hand));\n\t\t\t}\n\t\t\telse if (item == SCContent.DISGUISE_MODULE.get()) {\n\t\t\t\tItemStack module = getDisguiseModule();\n\t\t\t\t//drop the old module as to not override it with the new one\n\t\t\t\tif (!module.isEmpty()) {\n\t\t\t\t\tBlock.popResource(level, pos, module);\n\t\t\t\t\tBlock block = ((ModuleItem) module.getItem()).getBlockAddon(module.getTag());\n\t\t\t\t\tif (block == level.getBlockState(pos).getBlock())\n\t\t\t\t\t\tlevel.removeBlock(pos, false);\n\t\t\t\t}\n\t\t\t\tsetDisguiseModule(player.getMainHandItem());\n\t\t\t\tif (!player.isCreative())\n\t\t\t\t\tplayer.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);\n\t\t\t}\n\t\t\telse if (item == SCContent.ALLOWLIST_MODULE.get()) {\n\t\t\t\tItemStack module = getAllowlistModule();\n\t\t\t\tif (!module.isEmpty())\n\t\t\t\t\tBlock.popResource(level, pos, module);\n\t\t\t\tsetAllowlistModule(player.getMainHandItem());\n\t\t\t\tif (!player.isCreative())\n\t\t\t\t\tplayer.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);\n\t\t\t}\n\t\t\telse if (item == SCContent.SPEED_MODULE.get()) {\n\t\t\t\tif (!hasSpeedModule()) {\n\t\t\t\t\tsetHasSpeedModule(true);\n\t\t\t\t\tif (!player.isCreative())\n\t\t\t\t\t\tplayer.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (item == SCContent.UNIVERSAL_BLOCK_MODIFIER.get()) {\n\t\t\t\tif (!getDisguiseModule().isEmpty()) {\n\t\t\t\t\tBlock block = ((ModuleItem) getDisguiseModule().getItem()).getBlockAddon(getDisguiseModule().getTag());\n\t\t\t\t\tif (block == level.getBlockState(pos).getBlock())\n\t\t\t\t\t\tlevel.setBlockAndUpdate(pos, Blocks.AIR.defaultBlockState());\n\t\t\t\t}\n\t\t\t\tBlock.popResource(level, pos, getDisguiseModule());\n\t\t\t\tBlock.popResource(level, pos, getAllowlistModule());\n\t\t\t\tif (hasSpeedModule())\n\t\t\t\t\tBlock.popResource(level, pos, new ItemStack(SCContent.SPEED_MODULE.get()));\n\t\t\t\tentityData.set(DISGUISE_MODULE, new CompoundTag());\n\t\t\t\tentityData.set(ALLOWLIST, new CompoundTag());\n\t\t\t\tentityData.set(HAS_SPEED_MODULE, false);\n\t\t\t}\n\t\t\telse if (item == SCContent.REMOTE_ACCESS_SENTRY.get())\n\t\t\t\titem.useOn(new UseOnContext(player, hand, new BlockHitResult(new Vec3(0.0D, 0.0D, 0.0D), Direction.NORTH, pos, false)));\n\t\t\telse if (item == Items.NAME_TAG) {\n\t\t\t\tsetCustomName(player.getMainHandItem().getHoverName());\n\t\t\t\tplayer.getMainHandItem().shrink(1);\n\t\t\t}\n\t\t\telse if (item == SCContent.UNIVERSAL_OWNER_CHANGER.get()) {\n\t\t\t\tString newOwner = player.getMainHandItem().getHoverName().getString();\n\t\t\t\tentityData.set(OWNER, new Owner(newOwner, PlayerUtils.isPlayerOnline(newOwner) ? PlayerUtils.getPlayerFromName(newOwner).getUUID().toString() : \"ownerUUID\"));\n\t\t\t\tPlayerUtils.sendMessageToPlayer(player, Utils.localize(SCContent.UNIVERSAL_OWNER_CHANGER.get().getDescriptionId()), Utils.localize(\"messages.securitycraft:universalOwnerChanger.changed\", newOwner), ChatFormatting.GREEN);\n\t\t\t}\n\t\t\telse\n\t\t\t\ttoggleMode(player);\n\t\t\tplayer.swing(InteractionHand.MAIN_HAND);\n\t\t\treturn InteractionResult.SUCCESS;\n\t\t}\n\t\telse if (!getOwner().isOwner(player) && hand == InteractionHand.MAIN_HAND && player.isCreative()) {\n\t\t\tif (player.isCrouching() || player.getMainHandItem().getItem() == SCContent.UNIVERSAL_BLOCK_REMOVER.get())\n\t\t\t\tkill();\n\t\t}\n\t\treturn super.mobInteract(player, hand);\n\t}\n\t/**\n\t * Cleanly removes this sentry from the world, dropping the module and removing the block the sentry is disguised with\n\t */\n\t@Override\n\tpublic void remove(RemovalReason reason) {\n\t\tBlockPos pos = blockPosition();\n\t\tif (!getDisguiseModule().isEmpty()) {\n\t\t\tBlock block = ((ModuleItem) getDisguiseModule().getItem()).getBlockAddon(getDisguiseModule().getTag());\n\t\t\tif (block == level.getBlockState(pos).getBlock())\n\t\t\t\tlevel.removeBlock(pos, false);\n\t\t}\n\t\tsuper.remove(reason);\n\t\tBlock.popResource(level, pos, new ItemStack(SCContent.SENTRY.get()));\n\t\tBlock.popResource(level, pos, getDisguiseModule()); //if there is none, nothing will drop\n\t\tBlock.popResource(level, pos, getAllowlistModule()); //if there is none, nothing will drop\n\t\tif (hasSpeedModule())\n\t\t\tBlock.popResource(level, pos, new ItemStack(SCContent.SPEED_MODULE.get()));\n\t}\n\t@Override\n\tpublic void kill() {\n\t\tremove(RemovalReason.KILLED);\n\t}\n\t/**\n\t * Sets this sentry's mode to the next one and sends the player a message about the switch\n\t *\n\t * @param player The player to send the message to\n\t */\n\tpublic void toggleMode(Player player) {\n\t\ttoggleMode(player, entityData.get(MODE) + 1, true);\n\t}\n\t/**\n\t * Sets this sentry's mode to the given mode (or 0 if the mode is not one of 0, 1, 2) and sends the player a message\n\t * about the switch if wanted\n\t *\n\t * @param player The player to send the message to\n\t * @param mode The mode (int) to switch to (instead of sequentially toggling)\n\t */\n\tpublic void toggleMode(Player player, int mode, boolean sendMessage) {\n\t\tif (mode < 0 || mode >= SentryMode.values().length)\n\t\t\tmode = 0;\n\t\tentityData.set(MODE, mode);\n\t\tif (sendMessage)\n\t\t\tplayer.displayClientMessage(Utils.localize(SentryMode.values()[mode].getModeKey()).append(Utils.localize(SentryMode.values()[mode].getDescriptionKey())), true);\n\t\tif (!player.level.isClientSide)\n\t\t\tSecurityCraft.channel.send(PacketDistributor.ALL.noArg(), new InitSentryAnimation(blockPosition(), true, SentryMode.values()[mode].isAggressive()));\n\t}\n\t@Override\n\tpublic void setTarget(LivingEntity target) {\n\t\tif (!getMode().isAggressive() && (target == null && previousTargetId != Long.MIN_VALUE || (target != null && previousTargetId != target.getId()))) {\n\t\t\tanimateUpwards = getMode().isCamouflage() && target != null;\n\t\t\tanimate = true;\n\t\t\tSecurityCraft.channel.send(PacketDistributor.ALL.noArg(), new InitSentryAnimation(blockPosition(), animate, animateUpwards));\n\t\t}\n\t\tpreviousTargetId = target == null ? Long.MIN_VALUE : target.getId();\n\t\tsuper.setTarget(target);\n\t}\n\t@Override\n\tpublic float getEyeHeight(Pose pose) //the sentry's eyes are higher so that it can see players even if it's inside a block when disguised - this also makes bullets spawn higher\n\t{\n\t\treturn 1.5F;\n\t}\n\t@Override\n\tpublic void performRangedAttack(LivingEntity target, float distanceFactor) {\n\t\t//don't shoot if somehow a non player is a target, or if the player is in spectator or creative mode\n\t\tif (target instanceof Player player && (player.isSpectator() || player.isCreative()))\n\t\t\treturn;\n\t\t//also don't shoot if the target is too far away\n\t\tif (distanceToSqr(target) > MAX_TARGET_DISTANCE * MAX_TARGET_DISTANCE)\n\t\t\treturn;\n\t\tBlockEntity blockEntity = level.getBlockEntity(blockPosition().below());\n\t\tProjectile throwableEntity = null;\n\t\tSoundEvent shootSound = SoundEvents.ARROW_SHOOT;\n\t\tAbstractProjectileDispenseBehavior pdb = null;\n\t\tLazyOptional<IItemHandler> optional = LazyOptional.empty();\n\t\tif (blockEntity instanceof KeypadChestBlockEntity be)\n\t\t\toptional = be.getHandlerForSentry(this);\n\t\telse if (blockEntity != null)\n\t\t\toptional = blockEntity.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, Direction.UP);\n\t\tif (optional.isPresent()) {\n\t\t\tIItemHandler handler = optional.orElse(null); //this is safe, because the presence was checked beforehand\n\t\t\tfor (int i = 0; i < handler.getSlots(); i++) {\n\t\t\t\tItemStack stack = handler.getStackInSlot(i);\n\t\t\t\tif (!stack.isEmpty()) {\n\t\t\t\t\tDispenseItemBehavior dispenseBehavior = ((DispenserBlock) Blocks.DISPENSER).getDispenseMethod(stack);\n\t\t\t\t\tif (dispenseBehavior instanceof AbstractProjectileDispenseBehavior projectileDispenseBehavior) {\n\t\t\t\t\t\tItemStack extracted = handler.extractItem(i, 1, false);\n\t\t\t\t\t\tpdb = projectileDispenseBehavior;\n\t\t\t\t\t\tthrowableEntity = pdb.getProjectile(level, position().add(0.0D, 1.6D, 0.0D), extracted);\n\t\t\t\t\t\tthrowableEntity.setOwner(this);\n\t\t\t\t\t\tshootSound = null;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (throwableEntity == null)\n\t\t\tthrowableEntity = new Bullet(level, this);\n\t\tdouble baseY = target.getY() + target.getEyeHeight() - 1.100000023841858D;\n\t\tdouble x = target.getX() - getX();\n\t\tdouble y = baseY - throwableEntity.getY();\n\t\tdouble z = target.getZ() - getZ();\n\t\tfloat yOffset = Mth.sqrt((float) (x * x + z * z)) * 0.2F;\n\t\tentityData.set(HEAD_ROTATION, (float) (Mth.atan2(x, -z) * (180D / Math.PI)));\n\t\tthrowableEntity.shoot(x, y + yOffset, z, 1.6F, 0.0F); //no inaccuracy for sentries!\n\t\tif (shootSound == null) {\n\t\t\tif (!level.isClientSide)\n\t\t\t\tpdb.playSound(new BlockSourceImpl((ServerLevel) level, blockPosition()));\n\t\t}\n\t\telse\n\t\t\tplaySound(shootSound, 1.0F, 1.0F / (getRandom().nextFloat() * 0.4F + 0.8F));\n\t\tlevel.addFreshEntity(throwableEntity);\n\t}\n\t@Override\n\tpublic void addAdditionalSaveData(CompoundTag tag) {\n\t\ttag.put(\"TileEntityData\", getOwnerTag());\n\t\ttag.put(\"InstalledModule\", getDisguiseModule().save(new CompoundTag()));\n\t\ttag.put(\"InstalledWhitelist\", getAllowlistModule().save(new CompoundTag()));\n\t\ttag.putBoolean(\"HasSpeedModule\", hasSpeedModule());\n\t\ttag.putInt(\"SentryMode\", entityData.get(MODE));\n\t\ttag.putFloat(\"HeadRotation\", entityData.get(HEAD_ROTATION));\n\t\tsuper.addAdditionalSaveData(tag);\n\t}\n\tprivate CompoundTag getOwnerTag() {\n\t\tCompoundTag tag = new CompoundTag();\n\t\tOwner owner = entityData.get(OWNER);\n\t\towner.save(tag, false);\n\t\treturn tag;\n\t}\n\t@Override\n\tpublic void readAdditionalSaveData(CompoundTag tag) {\n\t\tCompoundTag teTag = tag.getCompound(\"TileEntityData\");\n\t\tOwner owner = Owner.fromCompound(teTag);\n\t\tentityData.set(OWNER, owner);\n\t\tentityData.set(DISGUISE_MODULE, tag.getCompound(\"InstalledModule\"));\n\t\tentityData.set(ALLOWLIST, tag.getCompound(\"InstalledWhitelist\"));\n\t\tentityData.set(HAS_SPEED_MODULE, tag.getBoolean(\"HasSpeedModule\"));\n\t\tentityData.set(MODE, tag.getInt(\"SentryMode\"));\n\t\tentityData.set(HEAD_ROTATION, tag.getFloat(\"HeadRotation\"));\n\t\tsuper.readAdditionalSaveData(tag);\n\t}\n\t/**\n\t * @return The owner of this sentry\n\t */\n\tpublic Owner getOwner() {\n\t\treturn entityData.get(OWNER);\n\t}\n\t/**\n\t * Sets the sentry's disguise module and places a block if possible\n\t *\n\t * @param module The module to set\n\t */\n\tpublic void setDisguiseModule(ItemStack module) {\n\t\tBlock block = ((ModuleItem) module.getItem()).getBlockAddon(module.getTag());\n\t\tif (block != null) {\n\t\t\tBlockState state = block.defaultBlockState();\n\t\t\tif (level.getBlockState(blockPosition()).isAir())\n\t\t\t\tlevel.setBlockAndUpdate(blockPosition(), state.getShape(level, blockPosition()) == Shapes.block() ? state : Blocks.AIR.defaultBlockState());\n\t\t}\n\t\tentityData.set(DISGUISE_MODULE, module.save(new CompoundTag()));\n\t}\n\t/**\n\t * Sets the sentry's allowlist module\n\t *\n\t * @param module The module to set\n\t */\n\tpublic void setAllowlistModule(ItemStack module) {\n\t\tentityData.set(ALLOWLIST, module.save(new CompoundTag()));\n\t}\n\t/**\n\t * Sets whether this sentry has a speed module installed\n\t *\n\t * @param hasSpeedModule true to set that this sentry has a speed module, false otherwise\n\t */\n\tpublic void setHasSpeedModule(boolean hasSpeedModule) {\n\t\tentityData.set(HAS_SPEED_MODULE, hasSpeedModule);\n\t}\n\t/**\n\t * @return The disguise module that is added to this sentry. ItemStack.EMPTY if none available\n\t */\n\tpublic ItemStack getDisguiseModule() {\n\t\tCompoundTag tag = entityData.get(DISGUISE_MODULE);\n\t\tif (tag == null || tag.isEmpty())\n\t\t\treturn ItemStack.EMPTY;\n\t\telse\n\t\t\treturn ItemStack.of(tag);\n\t}\n\t/**\n\t * @return The allowlist module that is added to this sentry. ItemStack.EMPTY if none available\n\t */\n\tpublic ItemStack getAllowlistModule() {\n\t\tCompoundTag tag = entityData.get(ALLOWLIST);\n\t\tif (tag == null || tag.isEmpty())\n\t\t\treturn ItemStack.EMPTY;\n\t\telse\n\t\t\treturn ItemStack.of(tag);\n\t}\n\tpublic boolean hasSpeedModule() {\n\t\treturn entityData.get(HAS_SPEED_MODULE);\n\t}\n\t/**\n\t * @return The mode in which the sentry is currently in, CAMOUFLAGE_HP as a fallback if the saved mode is not a valid\n\t *         mode\n\t */\n\tpublic SentryMode getMode() {\n\t\tint mode = entityData.get(MODE);\n\t\treturn mode < 0 || mode >= SentryMode.values().length ? SentryMode.CAMOUFLAGE_HP : SentryMode.values()[mode];\n\t}\n\t/**\n\t * @return The amount of y translation from the head's default position, used for animation\n\t */\n\tpublic float getHeadYTranslation() {\n\t\treturn headYTranslation;\n\t}\n\tpublic boolean isTargetingAllowedPlayer(LivingEntity potentialTarget) {\n\t\tif (potentialTarget != null) {\n\t\t\tList<String> players = ModuleUtils.getPlayersFromModule(getAllowlistModule());\n\t\t\tfor (String s : players) {\n\t\t\t\tif (potentialTarget.getName().getContents().equalsIgnoreCase(s))\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic int getShootingSpeed() {\n", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "length": 1639, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "97d6976069558160fcb06c6802085ee52a6ef637d5832a1a"}
{"input": "", "context": "/********************************************************************************\n * Copyright (c) 2011-2017 Red Hat Inc. and/or its affiliates and others\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 1.0 which is available at\n * http://www.eclipse.org/legal/epl-v10.html.\n *\n * SPDX-License-Identifier: EPL-1.0\n ********************************************************************************/\npackage org.eclipse.ceylon.ide.eclipse.code.editor;\nimport static org.eclipse.ceylon.ide.eclipse.code.preferences.CeylonPreferenceInitializer.AUTO_ACTIVATION;\nimport static org.eclipse.ceylon.ide.eclipse.code.preferences.CeylonPreferenceInitializer.AUTO_ACTIVATION_DELAY;\nimport static org.eclipse.ceylon.ide.eclipse.code.preferences.CeylonPreferenceInitializer.AUTO_INSERT;\nimport static org.eclipse.ceylon.ide.eclipse.code.preferences.CeylonPreferenceInitializer.AUTO_INSERT_PREFIX;\nimport static org.eclipse.ceylon.ide.eclipse.java2ceylon.Java2CeylonProxies.completionJ2C;\nimport static org.eclipse.ceylon.ide.eclipse.util.EditorUtil.createColor;\nimport static org.eclipse.ceylon.ide.eclipse.util.EditorUtil.getPopupStyle;\nimport static org.eclipse.ceylon.ide.eclipse.util.Highlights.DOC_BACKGROUND;\nimport static org.eclipse.ceylon.ide.eclipse.util.Highlights.getCurrentThemeColor;\nimport static org.eclipse.jdt.ui.PreferenceConstants.APPEARANCE_JAVADOC_FONT;\nimport static org.eclipse.jface.dialogs.DialogSettings.getOrCreateSection;\nimport static org.eclipse.jface.text.AbstractInformationControlManager.ANCHOR_GLOBAL;\nimport static org.eclipse.jface.text.IDocument.DEFAULT_CONTENT_TYPE;\nimport static org.eclipse.ui.texteditor.AbstractTextEditor.PREFERENCE_COLOR_BACKGROUND_SYSTEM_DEFAULT;\nimport static org.eclipse.ui.texteditor.AbstractTextEditor.PREFERENCE_COLOR_FOREGROUND;\nimport static org.eclipse.ui.texteditor.AbstractTextEditor.PREFERENCE_COLOR_FOREGROUND_SYSTEM_DEFAULT;\nimport org.eclipse.jface.bindings.keys.KeySequence;\nimport org.eclipse.jface.bindings.keys.KeyStroke;\nimport org.eclipse.jface.dialogs.IDialogSettings;\nimport org.eclipse.jface.preference.IPreferenceStore;\nimport org.eclipse.jface.text.IAutoEditStrategy;\nimport org.eclipse.jface.text.IInformationControl;\nimport org.eclipse.jface.text.IInformationControlCreator;\nimport org.eclipse.jface.text.IRegion;\nimport org.eclipse.jface.text.ITextDoubleClickStrategy;\nimport org.eclipse.jface.text.ITextHover;\nimport org.eclipse.jface.text.ITextViewer;\nimport org.eclipse.jface.text.ITextViewerExtension2;\nimport org.eclipse.jface.text.Region;\nimport org.eclipse.jface.text.contentassist.ContentAssistEvent;\nimport org.eclipse.jface.text.contentassist.ContentAssistant;\nimport org.eclipse.jface.text.contentassist.ICompletionListener;\nimport org.eclipse.jface.text.contentassist.ICompletionProposal;\nimport org.eclipse.jface.text.contentassist.IContentAssistant;\nimport org.eclipse.jface.text.contentassist.IContentAssistantExtension2;\nimport org.eclipse.jface.text.hyperlink.IHyperlinkDetector;\nimport org.eclipse.jface.text.information.IInformationPresenter;\nimport org.eclipse.jface.text.information.IInformationProvider;\nimport org.eclipse.jface.text.information.IInformationProviderExtension;\nimport org.eclipse.jface.text.information.InformationPresenter;\nimport org.eclipse.jface.text.presentation.PresentationReconciler;\nimport org.eclipse.jface.text.quickassist.IQuickAssistAssistant;\nimport org.eclipse.jface.text.reconciler.IReconciler;\nimport org.eclipse.jface.text.source.ISourceViewer;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.widgets.Shell;\nimport org.eclipse.ui.editors.text.EditorsUI;\nimport org.eclipse.ui.editors.text.TextSourceViewerConfiguration;\nimport org.eclipse.ui.internal.editors.text.EditorsPlugin;\nimport org.eclipse.ceylon.ide.eclipse.code.browser.BrowserInformationControl;\nimport org.eclipse.ceylon.ide.eclipse.code.complete.EclipseCompletionProcessor;\nimport org.eclipse.ceylon.ide.eclipse.code.correct.CeylonCorrectionProcessor;\nimport org.eclipse.ceylon.ide.eclipse.code.hover.AnnotationHover;\nimport org.eclipse.ceylon.ide.eclipse.code.hover.BestMatchHover;\nimport org.eclipse.ceylon.ide.eclipse.code.hover.CeylonInformationControlCreator;\nimport org.eclipse.ceylon.ide.eclipse.code.hover.CeylonInformationProvider;\nimport org.eclipse.ceylon.ide.eclipse.code.hover.CeylonSourceHover;\nimport org.eclipse.ceylon.ide.eclipse.code.outline.HierarchyPopup;\nimport org.eclipse.ceylon.ide.eclipse.code.outline.OutlinePopup;\nimport org.eclipse.ceylon.ide.eclipse.code.parse.CeylonParseController;\nimport org.eclipse.ceylon.ide.eclipse.code.resolve.CeylonHyperlinkDetector;\nimport org.eclipse.ceylon.ide.eclipse.code.resolve.CeylonJavaBackendHyperlinkDetector;\nimport org.eclipse.ceylon.ide.eclipse.code.resolve.CeylonJavascriptBackendHyperlinkDetector;\nimport org.eclipse.ceylon.ide.eclipse.code.resolve.CeylonNativeHeaderHyperlinkDetector;\nimport org.eclipse.ceylon.ide.eclipse.code.resolve.JavaHyperlinkDetector;\nimport org.eclipse.ceylon.ide.eclipse.code.resolve.ReferencesHyperlinkDetector;\nimport org.eclipse.ceylon.ide.eclipse.code.search.ReferencesPopup;\nimport org.eclipse.ceylon.ide.eclipse.ui.CeylonPlugin;\npublic class CeylonSourceViewerConfiguration \n        extends TextSourceViewerConfiguration {\n    \n    protected final CeylonEditor editor;\n    \n    public CeylonSourceViewerConfiguration(CeylonEditor editor) {\n        super(EditorsUI.getPreferenceStore());\n        this.editor = editor;\n    }\n    \n    public PresentationReconciler getPresentationReconciler(\n            ISourceViewer sourceViewer) {\n        PresentationReconciler reconciler = \n                new PresentationReconciler();\n        //make sure we pass the sourceViewer we get as an argument here\n        //otherwise it breaks syntax highlighting in Code popup\n        PresentationDamageRepairer damageRepairer = \n                new PresentationDamageRepairer(sourceViewer, \n                        editor);\n        reconciler.setRepairer(damageRepairer, \n                DEFAULT_CONTENT_TYPE);\n        reconciler.setDamager(damageRepairer, \n                DEFAULT_CONTENT_TYPE);\n        return reconciler;\n    }\n    \n    private static final class CompletionListener \n            implements ICompletionListener {\n        \n        private CeylonEditor editor;\n        private EclipseCompletionProcessor processor;\n//        private CeylonCompletionProcessor processor;\n        \n        private CompletionListener(CeylonEditor editor,\n//                CeylonCompletionProcessor processor) {\n                EclipseCompletionProcessor processor) {\n            this.editor = editor;\n            this.processor = processor;\n            \n        }\n        @Override\n        public void selectionChanged(\n                ICompletionProposal proposal,\n                boolean smartToggle) {}\n        \n        @Override\n        public void assistSessionStarted(\n                ContentAssistEvent event) {\n            if (editor!=null) {\n                editor.pauseBackgroundParsing();\n            }\n            \n            if (event.assistant instanceof IContentAssistantExtension2) {\n                ((IContentAssistantExtension2)event.assistant).setStatusMessage(CeylonContentAssistant.secondLevelStatusMessage);\n            }\n            \n            processor.sessionStarted(event.isAutoActivated);\n            /*try {\n                editor.getSite().getWorkbenchWindow().run(true, true, new Warmup());\n            } \n            catch (Exception e) {}*/\n        }\n        \n        @Override\n        public void assistSessionEnded(\n                ContentAssistEvent event) {\n            if (editor!=null) {\n                editor.unpauseBackgroundParsing();\n                editor.scheduleParsing(false);\n            }\n        }\n    }\n    public ContentAssistant getContentAssistant(\n            ISourceViewer sourceViewer) {\n        if (editor==null) return null;\n        ContentAssistant contentAssistant = \n                new CeylonContentAssistant();\n        contentAssistant.setRestoreCompletionProposalSize(\n                getOrCreateSection(getSettings(),\n                \"completion_proposal_popup\"));\n        EclipseCompletionProcessor completionProcessor = \n                completionJ2C().newCompletionProcessor(editor);\n//        CeylonCompletionProcessor completionProcessor =\n//            new CeylonCompletionProcessor(editor);\n        CompletionListener listener = \n                new CompletionListener(editor, \n                        completionProcessor);\n        contentAssistant.addCompletionListener(listener);\n        contentAssistant.setContentAssistProcessor(\n                completionProcessor, \n                DEFAULT_CONTENT_TYPE);\n        configCompletionPopup(contentAssistant);\n        contentAssistant.enableColoredLabels(true);\n        contentAssistant.setRepeatedInvocationMode(true);\n        KeyStroke key = \n                KeyStroke.getInstance(SWT.CTRL, SWT.SPACE);\n        contentAssistant.setRepeatedInvocationTrigger(\n                KeySequence.getInstance(key));\n        CeylonContentAssistant.secondLevelStatusMessage = key.format() + \n                \" to toggle second-level completions\";\n        contentAssistant.setStatusMessage(CeylonContentAssistant.secondLevelStatusMessage);\n        CeylonContentAssistant.retrieveCompleteResultsStatusMessage = key.format() + \n                \" to retrieve all results\";                \n        contentAssistant.setStatusLineVisible(true);\n        contentAssistant.setInformationControlCreator(\n                new CeylonInformationControlCreator(editor, \n                        \"Tab or click for focus\"));\n        contentAssistant.setContextInformationPopupOrientation(\n                IContentAssistant.CONTEXT_INFO_ABOVE);\n        contentAssistant.setShowEmptyList(true);\n        return contentAssistant;\n    }\n    static void configCompletionPopup(\n            ContentAssistant contentAssistant) {\n        IPreferenceStore preferenceStore = \n        \t\tCeylonPlugin.getPreferences();\n        if (preferenceStore!=null) {\n            contentAssistant.enableAutoInsert(\n                    preferenceStore.getBoolean(AUTO_INSERT));\n            contentAssistant.enableAutoActivation(\n                    preferenceStore.getBoolean(AUTO_ACTIVATION));\n            contentAssistant.setAutoActivationDelay(\n                    preferenceStore.getInt(AUTO_ACTIVATION_DELAY));\n            contentAssistant.enablePrefixCompletion(\n                    preferenceStore.getBoolean(AUTO_INSERT_PREFIX));\n        }\n    }\n    \n    @Override\n    public IQuickAssistAssistant getQuickAssistAssistant(\n            ISourceViewer sourceViewer) {\n        if (editor==null) return null;\n        CeylonCorrectionProcessor quickAssist = \n                new CeylonCorrectionProcessor(editor);\n        quickAssist.setRestoreCompletionProposalSize(\n                getOrCreateSection(getSettings(), \n                \"quickassist_proposal_popup\"));\n        quickAssist.enableColoredLabels(true);\n        return quickAssist;\n    }\n    public AnnotationHover getAnnotationHover(\n            ISourceViewer sourceViewer) {\n        return new AnnotationHover(editor, true);\n    }\n    public AnnotationHover getOverviewRulerAnnotationHover(\n            ISourceViewer sourceViewer) {\n        return new AnnotationHover(editor, true);\n    }\n    public IAutoEditStrategy[] getAutoEditStrategies(\n            ISourceViewer sourceViewer, String contentType) {\n        return new IAutoEditStrategy[] { \n                new CeylonAutoEditStrategy() };\n    }\n        \n    public ITextDoubleClickStrategy getDoubleClickStrategy(\n            ISourceViewer sourceViewer, String contentType) {\n        return new DoubleClickStrategy(); \n    }\n    public IHyperlinkDetector[] getHyperlinkDetectors(\n            ISourceViewer sourceViewer) {\n        CeylonParseController controller = \n                getParseController();\n        if (controller==null) {\n", "answers": ["            return new IHyperlinkDetector[0];"], "length": 548, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "bf36c52efb42e2c0506f3cb765385becf6bf8e07977c4ec2"}
{"input": "", "context": "import Object3DQt   as qt\nimport PyQt4.Qwt5 as Qwt5\nfrom VerticalSpacer import VerticalSpacer\nDEBUG = 0\nDRAW_MODES = ['NONE',\n              'POINT',\n              'WIRE',\n              'SURFACE']\nclass Object3DDrawingModeWidget(qt.QGroupBox):\n    def __init__(self, parent = None):\n        qt.QGroupBox.__init__(self, parent)\n        self.setTitle('Drawing Mode')\n        self.build()\n        self.setDrawingMode(1)\n    def build(self):\n        self.l = qt.QVBoxLayout(self)\n        self.l.setMargin(0)\n        self.l.setSpacing(4)\n        self.buttonGroup = qt.QButtonGroup(self)\n        j = 0\n        for mode in DRAW_MODES:\n            rButton = qt.QRadioButton(self)\n            rButton.setText(mode)\n            self.l.addWidget(rButton)\n            self.l.setAlignment(rButton, qt.Qt.AlignLeft)\n            self.buttonGroup.addButton(rButton)\n            self.buttonGroup.setId(rButton, j)\n            j += 1\n            self.connect(self.buttonGroup,\n                         qt.SIGNAL('buttonPressed(QAbstractButton *)'),\n                         self._slot)\n    def _slot(self, button):\n        button.setChecked(True)\n        self._signal()\n    def _signal(self, event = None):\n        if DEBUG:\n            print(\"emit Object3DDrawingModeSignal\")\n        if event is None:\n            event = 'DrawModeUpdated'\n        ddict = self.getParameters()\n        ddict['event']  = event\n        self.emit(qt.SIGNAL('Object3DDrawingModeSignal'), ddict)\n    def getParameters(self):\n        mode = self.getDrawingMode()\n        ddict = {}\n        ddict['mode']   = mode\n        ddict['label']  = str(self.buttonGroup.button(mode).text())\n        return ddict\n    def setParameters(self, ddict = None):\n        if DEBUG:\n            print(\"setParameters\")\n        if ddict is None:\n            ddict = {}\n        mode = ddict.get('mode', 1)\n        self.setDrawingMode(mode)\n    def setDrawingMode(self, mode):\n        if type(mode) == type(\" \"):\n            if mode.upper() in DRAW_MODES:\n                i = DRAW_MODES.index(mode)\n            else:\n                raise ValueError(\"Unknown drawing mode: %s \"  % mode)\n        else:\n            i = mode\n        self.buttonGroup.button(i).setChecked(True)\n    \n    def getDrawingMode(self):\n        mode = 0\n        n = self.buttonGroup.checkedId()\n        if n >= 0:\n            mode = n\n        else:\n            print(\"WARNING: getAnchor -> Unselected button\")\n        return mode\n    def setSupportedModes(self, modes):\n        current = self.getDrawingMode()\n        for i in modes:\n            if i < len(DRAW_MODES):\n                self.buttonGroup.button(i).setEnabled(True)\n        # always possible to draw nothing\n        self.buttonGroup.button(i).setEnabled(True)\n        if not self.buttonGroup.button(current).isEnabled():\n            self.buttonGroup.button(0).setChecked(True)\n            self._signal()\nclass Object3DAspect(qt.QGroupBox):\n    def __init__(self, parent = None):\n        qt.QGroupBox.__init__(self, parent)\n        self.setTitle('Aspect')\n        self.build()\n    def build(self):\n        self.l = qt.QGridLayout(self)\n        i = 0\n        # point size\n        label = qt.QLabel('Point size')\n        self.pointSize = Qwt5.QwtSlider(self, qt.Qt.Horizontal)\n        self.pointSize.setRange(1.0, 1.0, 1.0)\n        self.pointSize.setValue(1.0)\n        self.l.addWidget(label, i, 0)\n        self.l.addWidget(self.pointSize, i, 1)\n        self.connect(self.pointSize,\n                     qt.SIGNAL(\"valueChanged(double)\"),\n                     self._slot)\n        # line width\n        i += 1\n        label = qt.QLabel('Line width')\n        self.lineWidth = Qwt5.QwtSlider(self, qt.Qt.Horizontal)\n        self.lineWidth.setRange(1.0, 1.0, 1.0)\n        self.lineWidth.setValue(1.0)\n        self.l.addWidget(label, i, 0)\n        self.l.addWidget(self.lineWidth, i, 1)\n        self.connect(self.lineWidth,\n                     qt.SIGNAL(\"valueChanged(double)\"),\n                     self._slot)\n        # transparency\n        i += 1\n        label = qt.QLabel('Transparency')\n        self.transparency = Qwt5.QwtSlider(self, qt.Qt.Horizontal)\n        self.transparency.setRange(0.0, 1.0, 0.01)\n        self.transparency.setValue(0.0)\n        self.l.addWidget(label, i, 0)\n        self.l.addWidget(self.transparency, i, 1)\n        self.connect(self.transparency,\n                     qt.SIGNAL(\"valueChanged(double)\"),\n                     self._slot)\n        # bounding box\n        self.boundingBoxCheckBox = qt.QCheckBox(self)\n        self.boundingBoxCheckBox.setText(\"Show bounding box\")\n        self.connect(self.boundingBoxCheckBox,\n                                         qt.SIGNAL(\"stateChanged(int)\"),\n                                         self._signal)\n        i = 0\n        j = 2\n        self.l.addWidget(self.boundingBoxCheckBox, i, j)\n        self.showLimitsCheckBoxes = []\n        for t in ['X', 'Y', 'Z']:\n            i += 1\n            checkBox = qt.QCheckBox(self)\n            checkBox.setText('Show bbox %s limit' % t)\n            self.l.addWidget(checkBox, i, j)\n            self.connect(checkBox, qt.SIGNAL(\"stateChanged(int)\"), self._slot)\n            self.showLimitsCheckBoxes.append(checkBox)\n    def _slot(self, *var):\n        self._signal()\n    def getParameters(self):\n        pointSize = self.pointSize.value()\n        lineWidth = self.lineWidth.value()\n        transparency = self.transparency.value()\n        if self.boundingBoxCheckBox.isChecked():\n            showBBox = 1\n        else:\n            showBBox = 0\n        showLimits   = [0, 0, 0]\n        for i in range(3):\n            if self.showLimitsCheckBoxes[i].isChecked():\n                showLimits[i] = 1\n        ddict = {}\n        ddict['pointsize'] = pointSize\n        ddict['pointsizecapabilities'] = [self.pointSize.minValue(),\n                                          self.pointSize.maxValue(),\n                                          self.pointSize.step()]\n        ddict['linewidth'] = lineWidth\n        ddict['linewidthcapabilities'] = [self.lineWidth.minValue(),\n                                          self.lineWidth.maxValue(),\n                                          self.lineWidth.step()]\n        ddict['transparency'] = transparency\n        ddict['bboxflag' ]  = showBBox\n        ddict['showlimits'] = showLimits\n        return ddict\n    def setParameters(self, ddict = None):\n        if DEBUG:\n            print(\"setParameters\")\n        if ddict is None:\n            ddict = {}\n        pointSize = ddict.get('pointsize', 1.0)\n        pointSizeCapabilities = ddict.get('pointsizecapabilities',\n                                          [1.0, 1.0, 1.0])\n        lineWidth = ddict.get('linewidth', 1.0)\n        lineWidthCapabilities = ddict.get('linewidthcapabilities',\n                                          [1.0, 1.0, 1.0])\n        transparency = ddict.get('transparency', 0.0)\n        showBBox =  ddict.get('bboxflag', 1)\n        showLimits = ddict.get('showlimits', [1, 1, 1])\n        self.pointSize.setRange(pointSizeCapabilities[0],\n                                pointSizeCapabilities[1],\n                                pointSizeCapabilities[2])\n        self.pointSize.setValue(pointSize)\n        self.lineWidth.setRange(lineWidthCapabilities[0],\n                                lineWidthCapabilities[1],\n                                lineWidthCapabilities[2])\n        self.lineWidth.setValue(lineWidth)\n        if lineWidth > lineWidthCapabilities[1]:\n            lineWidth = lineWidthCapabilities[1]\n        self.transparency.setValue(transparency)\n        self.boundingBoxCheckBox.setChecked(showBBox)\n        \n        for i in [0, 1, 2]:\n            self.showLimitsCheckBoxes[i].setChecked(showLimits[i])\n    def _signal(self, event = None):\n        if DEBUG:\n            print(\"emitting Object3DAspectSignal\")\n        if event is None:\n            event = \"AspectUpdated\"\n        ddict = self.getParameters()\n        ddict['event'] = event\n        self.emit(qt.SIGNAL('Object3DAspectSignal'), ddict)\nclass Object3DScale(qt.QGroupBox):\n    def __init__(self, parent = None):\n        qt.QGroupBox.__init__(self, parent)\n        self.setTitle('Object Scaling')\n        self.l = qt.QGridLayout(self)\n        self.__disconnect = False\n        self.__oldScale = [1.0, 1.0, 1.0]\n        self.lineEditList = []\n        self.validatorList = []\n        i = 0\n        self._lineSlotList =[self._xLineSlot,\n                             self._yLineSlot,\n                             self._zLineSlot]\n        for axis in ['x', 'y', 'z']:\n            label = qt.QLabel(\"%s Scale\" % axis)\n            lineEdit = qt.QLineEdit(self)\n            v = qt.QDoubleValidator(lineEdit)\n            lineEdit.setValidator(v)\n            \n            self.validatorList.append(v)\n            self.l.addWidget(label, i, 0)\n            self.l.addWidget(lineEdit, i, 1)\n            self.lineEditList.append(lineEdit)\n            lineEdit.setText('1.0')\n            lineEdit.setFixedWidth(lineEdit.fontMetrics().width('######.#####'))\n            self.connect(lineEdit,\n                         qt.SIGNAL('editingFinished()'),\n                         self._lineSlotList[i])\n            i+= 1\n        # xScaling\n        i = 0\n        self.xScaleSlider = Qwt5.QwtSlider(self, qt.Qt.Horizontal)\n        self.xScaleSlider.setScale(-10.0, 10.0, 0.001)\n        self.xScaleSlider.setValue(1.0)\n        self.l.addWidget(self.xScaleSlider, i, 2)\n        self.connect(self.xScaleSlider,\n                     qt.SIGNAL(\"valueChanged(double)\"),\n                     self._xSliderSlot)\n        # yScaling\n        i += 1\n        self.yScaleSlider = Qwt5.QwtSlider(self, qt.Qt.Horizontal)\n        self.yScaleSlider.setRange(-100.0, 100.0, 0.01)\n        self.yScaleSlider.setValue(1.0)\n        self.l.addWidget(self.yScaleSlider, i, 2)\n        self.connect(self.yScaleSlider,\n                     qt.SIGNAL(\"valueChanged(double)\"),\n                     self._ySliderSlot)\n        # zScaling\n        i += 1\n        self.zScaleSlider = Qwt5.QwtSlider(self, qt.Qt.Horizontal)\n        self.zScaleSlider.setRange(-100.0, 100.0, 0.01)\n        self.zScaleSlider.setValue(1.0)\n        self.l.addWidget(self.zScaleSlider, i, 2)\n        self.connect(self.zScaleSlider,\n                     qt.SIGNAL(\"valueChanged(double)\"),\n                     self._zSliderSlot)\n    def _xSliderSlot(self, *var):\n        if not self.__disconnect:\n            scale = [self.xScaleSlider.value(),\n                     self.yScaleSlider.value(),\n                     self.zScaleSlider.value()]\n            self.__disconnect = True\n            for i in [0, 1, 2]:\n                if scale[i] != float(str(self.lineEditList[i].text())):\n                    self.lineEditList[i].setText(\"%.7g\" % scale[i])\n            self.__disconnect = False\n            if (self.__oldScale[0] != scale[0]) or \\\n               (self.__oldScale[1] != scale[1]) or \\\n               (self.__oldScale[2] != scale[2]) :\n                self.__oldScale = scale\n                self._signal(\"xScaleUpdated\")\n    def _ySliderSlot(self, *var):\n        if not self.__disconnect:\n            scale = [self.xScaleSlider.value(),\n                     self.yScaleSlider.value(),\n                     self.zScaleSlider.value()]\n            self.__disconnect = True\n            for i in [0, 1, 2]:\n                if scale[i] != float(str(self.lineEditList[i].text())):\n                    self.lineEditList[i].setText(\"%.7g\" % scale[i])\n            self.__disconnect = False\n            if (self.__oldScale[0] != scale[0]) or \\\n               (self.__oldScale[1] != scale[1]) or \\\n               (self.__oldScale[2] != scale[2]) :\n                self.__oldScale = scale\n                self._signal(\"yScaleUpdated\")\n    def _zSliderSlot(self, *var):\n        if not self.__disconnect:\n            scale = [self.xScaleSlider.value(),\n                     self.yScaleSlider.value(),\n                     self.zScaleSlider.value()]\n            self.__disconnect = True\n            for i in [0, 1, 2]:\n                if scale[i] != float(str(self.lineEditList[i].text())):\n                    self.lineEditList[i].setText(\"%.7g\" % scale[i])\n            self.__disconnect = False\n            if (self.__oldScale[0] != scale[0]) or \\\n               (self.__oldScale[1] != scale[1]) or \\\n               (self.__oldScale[2] != scale[2]) :\n                self.__oldScale = scale\n                self._signal(\"zScaleUpdated\")\n    def _xLineSlot(self):\n        if not self.__disconnect:\n            self.__disconnect = True\n            scale = [1, 1, 1]\n            for i in [0, 1 , 2]:\n                scale[i] = float(str(self.lineEditList[i].text()))\n            self.xScaleSlider.setValue(scale[0])\n            self.yScaleSlider.setValue(scale[1])\n            self.zScaleSlider.setValue(scale[2])\n            self.__disconnect = False\n            self._signal(\"xScaleUpdated\")\n    def _yLineSlot(self):\n        if not self.__disconnect:\n            self.__disconnect = True\n            scale = [1, 1, 1]\n            for i in [0, 1 , 2]:\n                scale[i] = float(str(self.lineEditList[i].text()))\n            self.xScaleSlider.setValue(scale[0])\n            self.yScaleSlider.setValue(scale[1])\n            self.zScaleSlider.setValue(scale[2])\n            self.__disconnect = False\n            self._signal(\"yScaleUpdated\")\n    def _zLineSlot(self):\n        if not self.__disconnect:\n            self.__disconnect = True\n            scale = [1, 1, 1]\n            for i in [0, 1 , 2]:\n                scale[i] = float(str(self.lineEditList[i].text()))\n            self.xScaleSlider.setValue(scale[0])\n            self.yScaleSlider.setValue(scale[1])\n            self.zScaleSlider.setValue(scale[2])\n            self.__disconnect = False\n            self._signal(\"zScaleUpdated\")\n    def _signal(self, event = None):\n        if DEBUG:\n            print(\"emitting Object3DScaleSignal\")\n        if self.__disconnect: return\n        if event is None:\n            event = \"ScaleUpdated\"\n        oldScale = self._lastParameters * 1\n        ddict = self.getParameters()\n        scale = ddict['scale']\n        emit = False\n        for i in range(3):\n            if abs((scale[i]-oldScale[i])) > 1.0e-10:\n                emit = True\n                ddict['magnification'] = scale[i]/oldScale[i] \n                break\n        if not emit:\n            return\n        ddict['event'] = event\n        self.emit(qt.SIGNAL('Object3DScaleSignal'), ddict)\n    def getParameters(self):\n        scale = [1.0, 1.0, 1.0]\n        for i in [0, 1 , 2]:\n            scale[i] = float(str(self.lineEditList[i].text()))\n        ddict = {}\n        ddict['scale'] = scale\n        self._lastParameters = scale\n        return ddict\n    def setParameters(self, ddict = None):\n        if DEBUG:\n            print(\"setParameters\", ddict)\n        if ddict is None:ddict = {}\n        scale = ddict.get('scale', [1.0, 1.0, 1.0])\n        \n        self.xScaleSlider.setValue(scale[0])\n        self.yScaleSlider.setValue(scale[1])\n        self.zScaleSlider.setValue(scale[2])\n        for i in [0, 1, 2]:\n            self.lineEditList[i].setText(\"%.7g\" % scale[i])\n        self._lastParameters = scale\nclass Object3DPrivateInterface(qt.QGroupBox):\n    def __init__(self, parent = None):\n        qt.QGroupBox.__init__(self, parent)\n        self.setTitle('Private Configuration')\n        self.mainLayout = qt.QVBoxLayout(self)\n        self.button = qt.QPushButton(self)\n        self.button.setText(\"More\")\n        self.mainLayout.addWidget(self.button)\n        self.mainLayout.addWidget(VerticalSpacer(self))\nclass Object3DProperties(qt.QWidget):\n    def __init__(self, parent = None):\n        qt.QWidget.__init__(self, parent)\n        self.l = qt.QHBoxLayout(self)\n        self.drawingModeWidget = Object3DDrawingModeWidget(self)\n", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "length": 1044, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "f2938d3f351d2aebd34b5c529253c96aa77b793e3442e486"}
{"input": "", "context": "using System;\nusing System.Reflection;\nusing System.Collections;\nusing Server;\nusing Server.Targeting;\nusing Server.Network;\nusing Server.Misc;\nnamespace Server.Gumps\n{\n\tpublic class SetPoint2DGump : Gump\n\t{\n\t\tprivate PropertyInfo m_Property;\n\t\tprivate Mobile m_Mobile;\n\t\tprivate object m_Object;\n\t\tprivate Stack m_Stack;\n\t\tprivate int m_Page;\n\t\tprivate ArrayList m_List;\n\t\tpublic static readonly bool OldStyle = PropsConfig.OldStyle;\n\t\tpublic static readonly int GumpOffsetX = PropsConfig.GumpOffsetX;\n\t\tpublic static readonly int GumpOffsetY = PropsConfig.GumpOffsetY;\n\t\tpublic static readonly int TextHue = PropsConfig.TextHue;\n\t\tpublic static readonly int TextOffsetX = PropsConfig.TextOffsetX;\n\t\tpublic static readonly int OffsetGumpID = PropsConfig.OffsetGumpID;\n\t\tpublic static readonly int HeaderGumpID = PropsConfig.HeaderGumpID;\n\t\tpublic static readonly int EntryGumpID = PropsConfig.EntryGumpID;\n\t\tpublic static readonly int BackGumpID = PropsConfig.BackGumpID;\n\t\tpublic static readonly int SetGumpID = PropsConfig.SetGumpID;\n\t\tpublic static readonly int SetWidth = PropsConfig.SetWidth;\n\t\tpublic static readonly int SetOffsetX = PropsConfig.SetOffsetX, SetOffsetY = PropsConfig.SetOffsetY;\n\t\tpublic static readonly int SetButtonID1 = PropsConfig.SetButtonID1;\n\t\tpublic static readonly int SetButtonID2 = PropsConfig.SetButtonID2;\n\t\tpublic static readonly int PrevWidth = PropsConfig.PrevWidth;\n\t\tpublic static readonly int PrevOffsetX = PropsConfig.PrevOffsetX, PrevOffsetY = PropsConfig.PrevOffsetY;\n\t\tpublic static readonly int PrevButtonID1 = PropsConfig.PrevButtonID1;\n\t\tpublic static readonly int PrevButtonID2 = PropsConfig.PrevButtonID2;\n\t\tpublic static readonly int NextWidth = PropsConfig.NextWidth;\n\t\tpublic static readonly int NextOffsetX = PropsConfig.NextOffsetX, NextOffsetY = PropsConfig.NextOffsetY;\n\t\tpublic static readonly int NextButtonID1 = PropsConfig.NextButtonID1;\n\t\tpublic static readonly int NextButtonID2 = PropsConfig.NextButtonID2;\n\t\tpublic static readonly int OffsetSize = PropsConfig.OffsetSize;\n\t\tpublic static readonly int EntryHeight = PropsConfig.EntryHeight;\n\t\tpublic static readonly int BorderSize = PropsConfig.BorderSize;\n\t\tprivate static readonly int CoordWidth = 105;\n\t\tprivate static readonly int EntryWidth = CoordWidth + OffsetSize + CoordWidth;\n\t\tprivate static readonly int TotalWidth = OffsetSize + EntryWidth + OffsetSize + SetWidth + OffsetSize;\n\t\tprivate static readonly int TotalHeight = OffsetSize + ( 4 * ( EntryHeight + OffsetSize ) );\n\t\tprivate static readonly int BackWidth = BorderSize + TotalWidth + BorderSize;\n\t\tprivate static readonly int BackHeight = BorderSize + TotalHeight + BorderSize;\n\t\tpublic SetPoint2DGump( PropertyInfo prop, Mobile mobile, object o, Stack stack, int page, ArrayList list )\n\t\t\t: base( GumpOffsetX, GumpOffsetY )\n\t\t{\n\t\t\tm_Property = prop;\n\t\t\tm_Mobile = mobile;\n\t\t\tm_Object = o;\n\t\t\tm_Stack = stack;\n\t\t\tm_Page = page;\n\t\t\tm_List = list;\n\t\t\tPoint2D p = (Point2D) prop.GetValue( o, null );\n\t\t\tAddPage( 0 );\n\t\t\tAddBackground( 0, 0, BackWidth, BackHeight, BackGumpID );\n\t\t\tAddImageTiled( BorderSize, BorderSize, TotalWidth - ( OldStyle ? SetWidth + OffsetSize : 0 ), TotalHeight, OffsetGumpID );\n\t\t\tint x = BorderSize + OffsetSize;\n\t\t\tint y = BorderSize + OffsetSize;\n\t\t\tAddImageTiled( x, y, EntryWidth, EntryHeight, EntryGumpID );\n\t\t\tAddLabelCropped( x + TextOffsetX, y, EntryWidth - TextOffsetX, EntryHeight, TextHue, prop.Name );\n\t\t\tx += EntryWidth + OffsetSize;\n\t\t\tif ( SetGumpID != 0 )\n\t\t\t{\n\t\t\t\tAddImageTiled( x, y, SetWidth, EntryHeight, SetGumpID );\n\t\t\t}\n\t\t\tx = BorderSize + OffsetSize;\n\t\t\ty += EntryHeight + OffsetSize;\n\t\t\tAddImageTiled( x, y, EntryWidth, EntryHeight, EntryGumpID );\n\t\t\tAddLabelCropped( x + TextOffsetX, y, EntryWidth - TextOffsetX, EntryHeight, TextHue, \"Use your location\" );\n\t\t\tx += EntryWidth + OffsetSize;\n\t\t\tif ( SetGumpID != 0 )\n\t\t\t{\n\t\t\t\tAddImageTiled( x, y, SetWidth, EntryHeight, SetGumpID );\n\t\t\t}\n\t\t\tAddButton( x + SetOffsetX, y + SetOffsetY, SetButtonID1, SetButtonID2, 1, GumpButtonType.Reply, 0 );\n\t\t\tx = BorderSize + OffsetSize;\n\t\t\ty += EntryHeight + OffsetSize;\n\t\t\tAddImageTiled( x, y, EntryWidth, EntryHeight, EntryGumpID );\n\t\t\tAddLabelCropped( x + TextOffsetX, y, EntryWidth - TextOffsetX, EntryHeight, TextHue, \"Target a location\" );\n\t\t\tx += EntryWidth + OffsetSize;\n\t\t\tif ( SetGumpID != 0 )\n\t\t\t{\n\t\t\t\tAddImageTiled( x, y, SetWidth, EntryHeight, SetGumpID );\n\t\t\t}\n\t\t\tAddButton( x + SetOffsetX, y + SetOffsetY, SetButtonID1, SetButtonID2, 2, GumpButtonType.Reply, 0 );\n\t\t\tx = BorderSize + OffsetSize;\n\t\t\ty += EntryHeight + OffsetSize;\n\t\t\tAddImageTiled( x, y, CoordWidth, EntryHeight, EntryGumpID );\n\t\t\tAddLabelCropped( x + TextOffsetX, y, CoordWidth - TextOffsetX, EntryHeight, TextHue, \"X:\" );\n\t\t\tAddTextEntry( x + 16, y, CoordWidth - 16, EntryHeight, TextHue, 0, p.X.ToString() );\n\t\t\tx += CoordWidth + OffsetSize;\n\t\t\tAddImageTiled( x, y, CoordWidth, EntryHeight, EntryGumpID );\n\t\t\tAddLabelCropped( x + TextOffsetX, y, CoordWidth - TextOffsetX, EntryHeight, TextHue, \"Y:\" );\n\t\t\tAddTextEntry( x + 16, y, CoordWidth - 16, EntryHeight, TextHue, 1, p.Y.ToString() );\n\t\t\tx += CoordWidth + OffsetSize;\n\t\t\tif ( SetGumpID != 0 )\n\t\t\t{\n\t\t\t\tAddImageTiled( x, y, SetWidth, EntryHeight, SetGumpID );\n\t\t\t}\n\t\t\tAddButton( x + SetOffsetX, y + SetOffsetY, SetButtonID1, SetButtonID2, 3, GumpButtonType.Reply, 0 );\n\t\t}\n\t\tprivate class InternalTarget : Target\n\t\t{\n\t\t\tprivate PropertyInfo m_Property;\n\t\t\tprivate Mobile m_Mobile;\n\t\t\tprivate object m_Object;\n\t\t\tprivate Stack m_Stack;\n\t\t\tprivate int m_Page;\n\t\t\tprivate ArrayList m_List;\n\t\t\tpublic InternalTarget( PropertyInfo prop, Mobile mobile, object o, Stack stack, int page, ArrayList list )\n\t\t\t\t: base( -1, true, TargetFlags.None )\n\t\t\t{\n\t\t\t\tm_Property = prop;\n\t\t\t\tm_Mobile = mobile;\n\t\t\t\tm_Object = o;\n\t\t\t\tm_Stack = stack;\n\t\t\t\tm_Page = page;\n\t\t\t\tm_List = list;\n\t\t\t}\n\t\t\tprotected override void OnTarget( Mobile from, object targeted )\n\t\t\t{\n\t\t\t\tIPoint3D p = targeted as IPoint3D;\n\t\t\t\tif ( p != null )\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tServer.Scripts.Commands.CommandLogging.LogChangeProperty( m_Mobile, m_Object, m_Property.Name, new Point2D( p ).ToString() );\n\t\t\t\t\t\tm_Property.SetValue( m_Object, new Point2D( p ), null );\n\t\t\t\t\t\tPropertiesGump.OnValueChanged( m_Object, m_Property, m_Stack );\n\t\t\t\t\t}\n\t\t\t\t\tcatch\n\t\t\t\t\t{\n\t\t\t\t\t\tm_Mobile.SendMessage( \"An exception was caught. The property may not have changed.\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tprotected override void OnTargetFinish( Mobile from )\n\t\t\t{\n\t\t\t\tm_Mobile.SendGump( new PropertiesGump( m_Mobile, m_Object, m_Stack, m_List, m_Page ) );\n\t\t\t}\n\t\t}\n\t\tpublic override void OnResponse( NetState sender, RelayInfo info )\n\t\t{\n\t\t\tPoint2D toSet;\n\t\t\tbool shouldSet, shouldSend;\n\t\t\tswitch ( info.ButtonID )\n\t\t\t{\n\t\t\t\tcase 1: // Current location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 2: // Pick location\n\t\t\t\t\t{\n\t\t\t\t\t\tm_Mobile.Target = new InternalTarget( m_Property, m_Mobile, m_Object, m_Stack, m_Page, m_List );\n\t\t\t\t\t\ttoSet = Point2D.Zero;\n\t\t\t\t\t\tshouldSet = false;\n\t\t\t\t\t\tshouldSend = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n", "answers": ["\t\t\t\tcase 3: // Use values"], "length": 886, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "782603f333c5ed114de335a7728c0c7c288c0ea45f48a9ee"}
{"input": "", "context": "/*\n * Copyright 2013 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Eclipse Public License version 1.0, available at\n * http://www.eclipse.org/legal/epl-v10.html\n */\npackage org.jboss.forge.addon.ui.util;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport org.jboss.forge.addon.convert.CompositeConverter;\nimport org.jboss.forge.addon.convert.Converter;\nimport org.jboss.forge.addon.convert.ConverterFactory;\nimport org.jboss.forge.addon.facets.Facet;\nimport org.jboss.forge.addon.ui.facets.HintsFacet;\nimport org.jboss.forge.addon.ui.hints.InputType;\nimport org.jboss.forge.addon.ui.input.HasCompleter;\nimport org.jboss.forge.addon.ui.input.InputComponent;\nimport org.jboss.forge.addon.ui.input.ManyValued;\nimport org.jboss.forge.addon.ui.input.SelectComponent;\nimport org.jboss.forge.addon.ui.input.SingleValued;\nimport org.jboss.forge.addon.ui.input.UICompleter;\nimport org.jboss.forge.furnace.util.Sets;\nimport org.jboss.forge.furnace.util.Strings;\n/**\n * Utilities for {@link InputComponent} objects\n * \n * @author <a href=\"mailto:ggastald@redhat.com\">George Gastaldi</a>\n * \n */\n@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\npublic final class InputComponents\n{\n   public static final char DEFAULT_SHORT_NAME = ' ';\n   private static final String COLON = \":\";\n   /**\n    * @return the {@link InputType} object associated to this {@link InputComponent}\n    */\n   public static String getInputType(InputComponent<?, ?> input)\n   {\n      String result = InputType.DEFAULT;\n      for (Facet f : input.getFacets())\n      {\n         if (HintsFacet.class.isInstance(f))\n         {\n            result = ((HintsFacet) f).getInputType();\n            break;\n         }\n      }\n      // FIXME: The following code does NOT work when called from Eclipse. Could it be a bug in CLAC ?\n      // if (input.hasFacet(HintsFacet.class))\n      // {\n      // HintsFacet facet = input.getFacet(HintsFacet.class);\n      // result = facet.getInputType();\n      // }\n      return result;\n   }\n   /**\n    * Returns the value stored in this {@link InputComponent}. <code>null</code> if the component is null\n    */\n   public static Object getValueFor(InputComponent<?, ?> component)\n   {\n      return (component == null) ? null : component.getValue();\n   }\n   /**\n    * Sets the value in the provided {@link InputComponent}, making any necessary conversions\n    * \n    * @param component\n    * @param value\n    */\n   public static void setValueFor(final ConverterFactory converterFactory, final InputComponent<?, ?> component,\n            final Object value)\n   {\n      if (component instanceof SingleValued)\n      {\n         setSingleInputValue(converterFactory, component, value, false);\n      }\n      else if (component instanceof ManyValued)\n      {\n         setManyInputValue(converterFactory, component, value, false);\n      }\n   }\n   /**\n    * Sets the default value in the provided {@link InputComponent}, making any necessary conversions\n    * \n    * @param component\n    * @param value\n    */\n   public static void setDefaultValueFor(final ConverterFactory converterFactory,\n            final InputComponent<?, Object> component,\n            final Object value)\n   {\n      if (component instanceof SingleValued)\n      {\n         setSingleInputValue(converterFactory, component, value, true);\n      }\n      else if (component instanceof ManyValued)\n      {\n         setManyInputValue(converterFactory, component, value, true);\n      }\n   }\n   private static void setSingleInputValue(final ConverterFactory converterFactory,\n            final InputComponent<?, ?> input, final Object value, boolean defaultValue)\n   {\n      final Object convertedType;\n      if (value != null)\n      {\n         convertedType = convertToUIInputValue(converterFactory, input, value);\n      }\n      else\n      {\n         convertedType = null;\n      }\n      if (defaultValue)\n      {\n         ((SingleValued) input).setDefaultValue(convertedType);\n      }\n      else\n      {\n         ((SingleValued) input).setValue(convertedType);\n      }\n   }\n   private static void setManyInputValue(final ConverterFactory converterFactory,\n            final InputComponent<?, ?> input, Object value, boolean defaultValue)\n   {\n      final Iterable<Object> convertedValues;\n      if (value != null)\n      {\n         List<Object> convertedValuesList = new ArrayList<>();\n         if (value instanceof Iterable && !input.getValueType().isInstance(value))\n         {\n            for (Object itValue : (Iterable) value)\n            {\n               Object singleValue = convertToUIInputValue(converterFactory, input, itValue);\n               if (singleValue != null)\n               {\n                  convertedValuesList.add(singleValue);\n               }\n            }\n         }\n         else\n         {\n            Object singleValue = convertToUIInputValue(converterFactory, input, value);\n            if (singleValue != null)\n            {\n               convertedValuesList.add(singleValue);\n            }\n         }\n         convertedValues = convertedValuesList;\n      }\n      else\n      {\n         convertedValues = null;\n      }\n      if (defaultValue)\n      {\n         ((ManyValued) input).setDefaultValue(convertedValues);\n      }\n      else\n      {\n         ((ManyValued) input).setValue(convertedValues);\n      }\n   }\n   /**\n    * Returns the converted value that matches the input.\n    */\n   public static Object convertToUIInputValue(final ConverterFactory converterFactory,\n            final InputComponent<?, ?> input, final Object value)\n   {\n      final Object result;\n      Class<Object> sourceType = (Class<Object>) value.getClass();\n      Class<Object> targetType = (Class<Object>) input.getValueType();\n      if (!targetType.isAssignableFrom(sourceType))\n      {\n         if (input instanceof SelectComponent)\n         {\n            SelectComponent<?, Object> selectComponent = (SelectComponent<?, Object>) input;\n            Iterable<Object> valueChoices = selectComponent.getValueChoices();\n            final Converter<Object, ?> selectConverter;\n            if (String.class.isAssignableFrom(sourceType))\n            {\n               selectConverter = getItemLabelConverter(converterFactory, selectComponent);\n            }\n            else\n            {\n               selectConverter = converterFactory.getConverter(targetType, sourceType);\n            }\n            Object chosenObj = null;\n            if (valueChoices != null)\n            {\n               for (Object valueChoice : valueChoices)\n               {\n                  Object convertedObj = selectConverter.convert(valueChoice);\n                  if (convertedObj.equals(value))\n                  {\n                     chosenObj = valueChoice;\n                     break;\n                  }\n               }\n            }\n            result = chosenObj;\n         }\n         else\n         {\n            Converter<String, Object> valueConverter = (Converter<String, Object>) input.getValueConverter();\n            if (valueConverter != null)\n            {\n               if (value instanceof String)\n               {\n                  result = valueConverter.convert((String) value);\n               }\n               else\n               {\n                  Converter<Object, String> stringConverter = converterFactory.getConverter(sourceType, String.class);\n                  CompositeConverter compositeConverter = new CompositeConverter(stringConverter, valueConverter);\n                  result = compositeConverter.convert(value);\n               }\n            }\n            else\n            {\n               Converter<Object, Object> converter = converterFactory.getConverter(sourceType, targetType);\n               result = converter.convert(value);\n            }\n         }\n      }\n      else\n      {\n         Converter<String, Object> valueConverter = (Converter<String, Object>) input.getValueConverter();\n         if (valueConverter != null && value instanceof String)\n         {\n            result = valueConverter.convert((String) value);\n         }\n         else\n         {\n            // FORGE-2493: By setting the system property 'org.jboss.forge.ui.select_one_lenient_value' to true will\n            // allow UISelectOne to set values outside of its value choices. (pre-2.20.0.Final behavior)\n            if (input instanceof SelectComponent && !Boolean.getBoolean(\"org.jboss.forge.ui.select_one_lenient_value\"))\n            {\n               SelectComponent<?, Object> selectComponent = (SelectComponent<?, Object>) input;\n               Set<Object> valueChoices = Sets.toSet(selectComponent.getValueChoices());\n               // Check if the value is contained in the valueChoices set\n               if (valueChoices != null && valueChoices.contains(value))\n               {\n                  result = value;\n               }\n               else\n               {\n                  // equals()/hashCode may not have been implemented. Trying to compare from the String representation\n                  Object chosenObj = null;\n                  if (valueChoices != null)\n                  {\n                     Converter<Object, String> selectConverter = getItemLabelConverter(converterFactory,\n                              selectComponent);\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "length": 764, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "cffa07171638f2df3007fc0e85a42300f465b867bac1df90"}
{"input": "", "context": "/* Mesquite source code.  Copyright 1997-2009 W. Maddison and D. Maddison. \nVersion 2.71, September 2009.\nDisclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. \nThe commenting leaves much to be desired. Please approach this source code with the spirit of helping out.\nPerhaps with your help we can be more than a few, and make Mesquite better.\nMesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.\nMesquite's web site is http://mesquiteproject.org\nThis source code and its compiled class files are free and modifiable under the terms of \nGNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)\n */\npackage mesquite.categ.lib;\nimport mesquite.lib.*;\nimport mesquite.lib.duties.CharHistorySource;\npublic class CategStateChanges {\n\tint maxChangesRecorded = 10;\n\tint[][] min;\n\tint[][] max;\n\tdouble[][] avg;\n\tdouble[][] total;\n\tdouble[][][] fractionWithAmount;\n\tdouble[][][] totalWithAmount;\n\tdouble[][] totalChanges;\n\tboolean [][] acceptableChange;\n\tint numStates = 0;\n\tlong numMappings = 0;\n\tlong numHistories = 0;\n\tpublic CategStateChanges(int numStates, int maxChanges) {\n\t\tmaxChangesRecorded = maxChanges;\n\t\tthis.numStates = numStates;\n\t\tmin = new int[numStates][numStates];\n\t\tmax = new int[numStates][numStates];\n\t\tavg = new double[numStates][numStates];\n\t\ttotal = new double[numStates][numStates];\n\t\ttotalChanges = new double[numStates][numStates];\n\t\tfractionWithAmount = new double[numStates][numStates][maxChangesRecorded];\n\t\ttotalWithAmount = new double[numStates][numStates][maxChangesRecorded];\n\t\tacceptableChange = new boolean[numStates][numStates];\n\t\tinitializeArrays();\n\t}\n\t/*.................................................................................................................*/\n\tpublic int getNumStates(){\n\t\treturn numStates;\n\t}\n\t/*.................................................................................................................*/\n\tpublic void adjustNumStates(int numStatesNew){\n\t\tmin =Integer2DArray.cloneIncreaseSize(min,numStatesNew, numStatesNew);\n\t\tmax =Integer2DArray.cloneIncreaseSize(max,numStatesNew, numStatesNew);\n\t\tavg =Double2DArray.cloneIncreaseSize(avg,numStatesNew, numStatesNew);\n\t\ttotal =Double2DArray.cloneIncreaseSize(total,numStatesNew, numStatesNew);\n\t\ttotalChanges =Double2DArray.cloneIncreaseSize(totalChanges,numStatesNew, numStatesNew);\n\t\tfractionWithAmount =Double2DArray.cloneIncreaseSize(fractionWithAmount,numStatesNew, numStatesNew, maxChangesRecorded);\n\t\ttotalWithAmount =Double2DArray.cloneIncreaseSize(totalWithAmount,numStatesNew, numStatesNew, maxChangesRecorded);\n\t\tnumStates = numStatesNew;\n\t}\n\t/*.................................................................................................................*/\n\tpublic void initializeArrays() {\n\t\tfor (int i=0; i<numStates; i++) \n\t\t\tfor (int j=0; j<numStates; j++) {\n\t\t\t\tmin[i][j]= Integer.MAX_VALUE;\n\t\t\t\tmax[i][j]= 0;\n\t\t\t\tavg[i][j]=0.0;\n\t\t\t\ttotal[i][j]=0.0;\n\t\t\t\ttotalChanges[i][j]=0.0;\n\t\t\t\tacceptableChange[i][j]=true;\n\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\tfractionWithAmount[i][j][k] = 0.0;\n\t\t\t\t\ttotalWithAmount[i][j][k] = 0.0;\n\t\t\t\t}\n\t\t\t}\n\t}\n\t\n\t/*.................................................................................................................*/\n\tpublic void setAcceptableChange(int i, int j, boolean b) {\n\t\tacceptableChange[i][j]=b;\n\t}\n\t/*.................................................................................................................*/\n\tpublic void zeroTotals() {\n\t\tfor (int i=0; i<numStates; i++) \n\t\t\tfor (int j=0; j<numStates; j++) {\n\t\t\t\ttotal[i][j]=0.0;\n\t\t\t\ttotalChanges[i][j]=0.0;\n\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\ttotalWithAmount[i][j][k] = 0.0;\n\t\t\t\t}\n\t\t\t}\n\t}\n\t/*.................................................................................................................*/\n\tpublic boolean addOneMapping(Tree tree, CategoricalHistory history, int node, int whichMapping) {\n\t\tif (!tree.nodeExists(node))\n\t\t\tnode = tree.getRoot();\n\t\tint[][] array =  history.harvestStateChanges(tree, node,null);\n\t\tif (array==null ||  array.length != numStates)\n\t\t\treturn false;\n\t\treturn addOneMapping(array,false);\n\t}\n\t/*.................................................................................................................*/\n\tpublic boolean acceptableMapping(int[][] array) {\n\t\tfor (int i=0; i<numStates && i<array.length; i++)\n\t\t\tfor (int j=0; j<numStates &&j<array[i].length; j++)\n\t\t\t\tif (!acceptableChange[i][j] && array[i][j]>0)\n\t\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\t/*.................................................................................................................*/\n\tpublic boolean addOneMapping(int[][] array, boolean useTotal) {\n\t\tif (array==null)\n\t\t\treturn false;\n\t\tif (!acceptableMapping(array))\n\t\t\treturn false;\n\t\tnumMappings++;\n\t\tfor (int i=0; i<numStates && i<array.length; i++)\n\t\t\tfor (int j=0; j<numStates &&j<array[i].length; j++)\n\t\t\t{\n\t\t\t\tmin[i][j] = MesquiteInteger.minimum(min[i][j],array[i][j]);\n\t\t\t\tmax[i][j] = MesquiteInteger.maximum(max[i][j],array[i][j]);\n\t\t\t\tif (useTotal)\n\t\t\t\t\ttotal[i][j] = total[i][j]+array[i][j];\n\t\t\t\telse\n\t\t\t\t\tavg[i][j] = ((avg[i][j]*numMappings-1)+array[i][j])/numMappings;\n\t\t\t\tif (array[i][j]>=maxChangesRecorded)\n\t\t\t\t\ttotalWithAmount[i][j][maxChangesRecorded-1]++;\n\t\t\t\telse\n\t\t\t\t\ttotalWithAmount[i][j][array[i][j]]++;\n\t\t\t\ttotalChanges[i][j]++;\n\t\t\t}\n\t\treturn true;\n\t}\n\t/*.................................................................................................................*/\n\tpublic void oneMappingToString (int[][] array, StringBuffer sb, String lineStart) {\n\t\tif (array==null || sb==null)\n\t\t\treturn;\n\t\tif (!acceptableMapping(array))\n\t\t\treturn;\n\t\tif (StringUtil.notEmpty(lineStart))\n\t\t\tsb.append(lineStart+\"\\t\");\n\t\t\n\t\tfor (int i=0; i<numStates && i<array.length; i++)\n\t\t\tfor (int j=0; j<numStates &&j<array[i].length; j++)\n\t\t\t\tif (i!=j)\n\t\t\t\t\tsb.append(\"\"+array[i][j]+\"\\t\");\n\t\tsb.append(\"\\n\");\n\t}\n\t/*.................................................................................................................*/\n\tpublic boolean mappingsAvailable(){\n\t\treturn true;\n\t}\n\t/*.................................................................................................................*/\n\tpublic void addOneHistory(Tree tree, CharHistorySource historySource,int ic, int node, MesquiteInteger numMappingsSampled, int samplingLimit, MesquiteInteger newSamplingLimit, boolean queryChangeSamplingLimit, StringBuffer fullDetails, String lineStart) {\n\t\tCategoricalHistory resultStates=null;\n\t\tCategoricalHistory history = null;\n\t\tzeroTotals();\n\t\tint[][] array;\n\t\tint mappingsAdded=0;\n\t\tif (!mappingsAvailable()) {\n\t\t\thistory = (CategoricalHistory)historySource.getMapping(0, history, null);\n\t\t\t if (history.getMaxState()+1>getNumStates())\n\t\t\t\t\tadjustNumStates(history.getMaxState()+1);\n\t\t\thistory.clone(resultStates);\n\t\t\tif (resultStates instanceof mesquite.categ.lib.CategoricalHistory){\n\t\t\t\tarray= ((mesquite.categ.lib.CategoricalHistory)resultStates).harvestStateChanges(tree, node, null);\n\t\t\t\tif (addOneMapping(array, true)) mappingsAdded++;\n\t\t\t\toneMappingToString(array, fullDetails, lineStart);\n\t\t\t\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlong numMappings = historySource.getNumberOfMappings(tree, ic);\n\t\t\tif (queryChangeSamplingLimit && !MesquiteThread.isScripting() && newSamplingLimit!=null) {\n\t\t\t\tint newLimit = MesquiteInteger.queryInteger(historySource.getModuleWindow(), \"Maximum number of mappings to sample\", \"Maximum number of mappings to sample for the character on each tree\",samplingLimit, 1, Integer.MAX_VALUE);\n\t\t\t\tif (MesquiteInteger.isCombinable(newLimit))\n\t\t\t\t\tnewSamplingLimit.setValue(newLimit);\n\t\t\t}\n\t\t\tif (numMappings == MesquiteLong.infinite || !MesquiteLong.isCombinable(numMappings)) {\n\t\t\t\tfor (int i=0; i<samplingLimit; i++) {\n\t\t\t\t\tresultStates = (CategoricalHistory)historySource.getMapping(i, resultStates, null);\n\t\t\t\t\tif (resultStates instanceof mesquite.categ.lib.CategoricalHistory) {\n\t\t\t\t\t\tarray= ((mesquite.categ.lib.CategoricalHistory)resultStates).harvestStateChanges(tree, node,null);\n\t\t\t\t\t\tif (addOneMapping(array, true)) mappingsAdded++;\n\t\t\t\t\t\toneMappingToString(array, fullDetails,lineStart);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t\tif (numMappings<=samplingLimit) {\n\t\t\t\t\tfor (int i=0; i<numMappings; i++) {\n\t\t\t\t\t\tresultStates = (CategoricalHistory)historySource.getMapping(i, resultStates, null);\n\t\t\t\t\t\tif (resultStates instanceof mesquite.categ.lib.CategoricalHistory) {\n\t\t\t\t\t\t\tarray= ((mesquite.categ.lib.CategoricalHistory)resultStates).harvestStateChanges(tree, node,null);\n\t\t\t\t\t\t\tif (addOneMapping(array, true)) mappingsAdded++;\n\t\t\t\t\t\t\toneMappingToString(array, fullDetails,lineStart);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor (int i=0; i<samplingLimit; i++) {\n\t\t\t\t\t\tresultStates = (CategoricalHistory)historySource.getMapping(RandomBetween.getLongStatic(0,numMappings-1),resultStates,null);\n\t\t\t\t\t\tif (resultStates instanceof mesquite.categ.lib.CategoricalHistory) {\n\t\t\t\t\t\t\tarray= ((mesquite.categ.lib.CategoricalHistory)resultStates).harvestStateChanges(tree, node, null);\n\t\t\t\t\t\t\tif (addOneMapping(array, true)) mappingsAdded++;\n\t\t\t\t\t\t\toneMappingToString(array, fullDetails,lineStart);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tif (mappingsAdded>0)\n\t\t\tnumHistories++;\n\t\tif (numMappingsSampled!=null) numMappingsSampled.setValue(mappingsAdded);\n\t\tif (mappingsAdded>0)\n\t\t\tfor (int i=0; i<numStates; i++)\n\t\t\t\tfor (int j=0; j<numStates; j++)\n\t\t\t\t{\n\t\t\t\t\tavg[i][j] = avg[i][j]+total[i][j]/mappingsAdded;\n\t\t\t\t\tif (totalChanges[i][j]>0 && i!=j)\n\t\t\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\t\tfractionWithAmount[i][j][k] = fractionWithAmount[i][j][k]+totalWithAmount[i][j][k]/totalChanges[i][j];\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t}\n\t\n\t/*.................................................................................................................*/\n\tpublic void addOneHistory(Tree tree, CategoricalHistory history,int node, int samplingLimit) {\n\t\tCategoricalHistory resultStates=null;\n\t\tzeroTotals();\n\t\tint[][] array;\n\t\tint mappingsAdded=0;\n\t\tif (!mappingsAvailable()) {\n\t\t\thistory.clone(resultStates);\n\t\t\tif (resultStates instanceof mesquite.categ.lib.CategoricalHistory){\n\t\t\t\tarray= ((mesquite.categ.lib.CategoricalHistory)resultStates).harvestStateChanges(tree, node, null);\n\t\t\t\tif (addOneMapping(array, true)) mappingsAdded++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlong numMappings = history.getNumResolutions(tree);\n\t\t\tif (numMappings == MesquiteLong.infinite) {\n\t\t\t\tfor (int i=0; i<samplingLimit; i++) {\n\t\t\t\t\tresultStates = (CategoricalHistory)history.getResolution(tree, resultStates, i);\n\t\t\t\t\tif (resultStates instanceof mesquite.categ.lib.CategoricalHistory) {\n\t\t\t\t\t\tarray= ((mesquite.categ.lib.CategoricalHistory)resultStates).harvestStateChanges(tree, node,null);\n\t\t\t\t\t\tif (addOneMapping(array, true)) mappingsAdded++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (MesquiteLong.isCombinable(numMappings))\n\t\t\t\tif (numMappings<=samplingLimit) {\n\t\t\t\t\tfor (int i=0; i<numMappings; i++) {\n\t\t\t\t\t\tresultStates = (CategoricalHistory)history.getResolution(tree, resultStates, i);\n\t\t\t\t\t\tif (resultStates instanceof mesquite.categ.lib.CategoricalHistory) {\n\t\t\t\t\t\t\tarray= ((mesquite.categ.lib.CategoricalHistory)resultStates).harvestStateChanges(tree, node,null);\n\t\t\t\t\t\t\tif (addOneMapping(array, true)) mappingsAdded++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor (int i=0; i<samplingLimit; i++) {\n\t\t\t\t\t\tresultStates = (CategoricalHistory)history.getResolution(tree, resultStates, RandomBetween.getLongStatic(0,numMappings-1));\n\t\t\t\t\t\tif (resultStates instanceof mesquite.categ.lib.CategoricalHistory) {\n\t\t\t\t\t\t\tarray= ((mesquite.categ.lib.CategoricalHistory)resultStates).harvestStateChanges(tree, node, null);\n\t\t\t\t\t\t\tif (addOneMapping(array, true)) mappingsAdded++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tif (mappingsAdded>0)\n\t\t\tnumHistories++;\n\t\tif (mappingsAdded>0)\n\t\t\tfor (int i=0; i<numStates; i++)\n\t\t\t\tfor (int j=0; j<numStates; j++)\n\t\t\t\t{\n\t\t\t\t\tavg[i][j] = avg[i][j]+total[i][j]/mappingsAdded;\n\t\t\t\t\tif (totalChanges[i][j]>0 && i!=j)\n\t\t\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\t\tfractionWithAmount[i][j][k] = fractionWithAmount[i][j][k]+totalWithAmount[i][j][k]/totalChanges[i][j];\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t}\n\t/*.................................................................................................................*/\n\tpublic void cleanUp() {\n\t\tfor (int i=0; i<numStates; i++)\n\t\t\tfor (int j=0; j<numStates; j++) {\n\t\t\t\tif (min[i][j]== Integer.MAX_VALUE)\n\t\t\t\t\tmin[i][j] = 0;\n\t\t\t\tif (numHistories>0) {\n\t\t\t\t\tavg[i][j] = avg[i][j]/numHistories;\n\t\t\t\t\tif (i!=j) for (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\tfractionWithAmount[i][j][k] = fractionWithAmount[i][j][k]/numHistories;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t}\n\t/*.................................................................................................................*/\n\tpublic int[][] getMin() {\n\t\treturn min;\n\t}\n\t/*.................................................................................................................*/\n\tpublic int[][] getMax() {\n\t\treturn max;\n\t}\n\t/*.................................................................................................................*/\n\tpublic double[][] getAvg() {\n\t\treturn avg;\n\t}\n\t/*.................................................................................................................*/\n\tpublic String toVerboseString(){\n\t\tStringBuffer sb = new StringBuffer();\n\t\tsb.append(\"Minimum, maximum, and average number of each kind across all trees\\n\");\n\t\tsb.append(\"------------------------------------\\n\");\n\t\tsb.append(\"change\\tmin\\tmax\\tavg\\n\");\n\t\tfor (int i=0; i<numStates; i++)\n\t\t\tfor (int j=0; j<numStates; j++){\n\t\t\t\tif (i!=j)\n\t\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+min[i][j] +\"\\t\"+max[i][j] +\"\\t\"+avg[i][j]+\"\\n\"); \n\t\t\t}\n\t\tsb.append(\"\\n\\n\\nFraction of trees with specific number of changes of each kind\\n\");\n\t\tsb.append(\"------------------------------------\\n\");\n\t\tsb.append(\"change\\t#changes\\tfraction\\n\");\n\t\tfor (int i=0; i<numStates; i++)\n\t\t\tfor (int j=0; j<numStates; j++)\n", "answers": ["\t\t\t\tif (i!=j) {"], "length": 1027, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "c72913a89874d6308bd8a87c745a41178548b9df3cd7e0c0"}
{"input": "", "context": "/**\n* Copyright (C) Squizz PTY LTD\n* This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n* You should have received a copy of the GNU General Public License along with this program.  If not, see http://www.gnu.org/licenses/.\n*/\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Squizz.Platform.API.v1;\nusing Squizz.Platform.API.v1.endpoint;\nusing EcommerceStandardsDocuments;\nnamespace Squizz.Platform.API.Examples.APIv1\n{\n    /**\n     * Shows an example of creating a organisation session with the SQUIZZ.com platform's API, then sends a organisation's purchase order data to supplier\n     */\n    public class APIv1ExampleRunnerProcurePurchaseOrderFromSupplier\n    {\n        public static void runAPIv1ExampleRunnerProcurePurchaseOrderFromSupplier()\n        {\n            Console.WriteLine(\"Example - Procure Purchase Order From Supplier API Session\");\n            Console.WriteLine(\"\");\n            //obtain or load in an organisation's API credentials, in this example from the user in the console\n            Console.WriteLine(\"Enter Organisation ID:\");\n            string orgID = Console.ReadLine();\n            Console.WriteLine(\"Enter Organisation API Key:\");\n            string orgAPIKey = Console.ReadLine();\n            Console.WriteLine(\"Enter Organisation API Password:\");\n            string orgAPIPass = Console.ReadLine();\n            Console.WriteLine(\"Enter Supplier Organisation ID:\");\n            string supplierOrgID = Console.ReadLine();\n            Console.WriteLine(\"(optional) Enter Supplier's Customer Account Code:\");\n            string customerAccountCode = Console.ReadLine();\n            //create an API session instance\n            int sessionTimeoutMilliseconds = 20000;\n            APIv1OrgSession apiOrgSession = new APIv1OrgSession(orgID, orgAPIKey, orgAPIPass, sessionTimeoutMilliseconds, APIv1Constants.SUPPORTED_LOCALES_EN_AU);\n            //call the platform's API to request that a session is created\n            APIv1EndpointResponse endpointResponse = apiOrgSession.createOrgSession();\n            //check if the organisation's credentials were correct and that a session was created in the platform's API\n            if (endpointResponse.result.ToUpper() == APIv1EndpointResponse.ENDPOINT_RESULT_SUCCESS)\n            {\n                //session has been created so now can call other API endpoints\n                Console.WriteLine(\"SUCCESS - API session has successfully been created.\");\n            }\n            else\n            {\n                //session failed to be created\n                Console.WriteLine(\"FAIL - API session failed to be created. Reason: \" + endpointResponse.result_message + \" Error Code: \" + endpointResponse.result_code);\n            }\n            //sand and procure purchsae order if the API was successfully created\n            if (apiOrgSession.doesSessionExist())\n            {\n                //create purchase order record to import\n                ESDRecordOrderPurchase purchaseOrderRecord = new ESDRecordOrderPurchase();\n                //set data within the purchase order\n                purchaseOrderRecord.keyPurchaseOrderID = \"111\";\n                purchaseOrderRecord.purchaseOrderCode = \"POEXAMPLE-345\";\n                purchaseOrderRecord.purchaseOrderNumber = \"345\";\n                purchaseOrderRecord.instructions = \"Leave goods at the back entrance\";\n                purchaseOrderRecord.keySupplierAccountID = \"2\";\n                purchaseOrderRecord.supplierAccountCode = \"ACM-002\";\n                //set delivery address that ordered goods will be delivered to\n                purchaseOrderRecord.deliveryAddress1 = \"32\";\n                purchaseOrderRecord.deliveryAddress2 = \"Main Street\";\n                purchaseOrderRecord.deliveryAddress3 = \"Melbourne\";\n                purchaseOrderRecord.deliveryRegionName = \"Victoria\";\n                purchaseOrderRecord.deliveryCountryName = \"Australia\";\n                purchaseOrderRecord.deliveryPostcode = \"3000\";\n                purchaseOrderRecord.deliveryOrgName = \"Acme Industries\";\n                purchaseOrderRecord.deliveryContact = \"Jane Doe\";\n                //set billing address that the order will be billed to for payment\n                purchaseOrderRecord.billingAddress1 = \"43\";\n                purchaseOrderRecord.billingAddress2 = \" High Street\";\n                purchaseOrderRecord.billingAddress3 = \"Melbourne\";\n                purchaseOrderRecord.billingRegionName = \"Victoria\";\n                purchaseOrderRecord.billingCountryName = \"Australia\";\n                purchaseOrderRecord.billingPostcode = \"3000\";\n                purchaseOrderRecord.billingOrgName = \"Acme Industries International\";\n                purchaseOrderRecord.billingContact = \"John Citizen\";\n                //create an array of purchase order lines\n                List<ESDRecordOrderPurchaseLine> orderLines = new List<ESDRecordOrderPurchaseLine>();\n                //create purchase order line record 1\n                ESDRecordOrderPurchaseLine orderProduct = new ESDRecordOrderPurchaseLine();\n                orderProduct.lineType = ESDocumentConstants.ORDER_LINE_TYPE_PRODUCT;\n                orderProduct.productCode = \"TEA-TOWEL-GREEN\";\n                orderProduct.productName = \"Green tea towel - 30 x 6 centimetres\";\n                orderProduct.keySellUnitID = \"2\";\n                orderProduct.unitName = \"EACH\";\n                orderProduct.quantity = 4;\n                orderProduct.sellUnitBaseQuantity = 4;\n                orderProduct.priceExTax = (decimal)5.00;\n                orderProduct.priceIncTax = (decimal)5.50;\n                orderProduct.priceTax = (decimal)0.50;\n                orderProduct.priceTotalIncTax = (decimal)22.00;\n                orderProduct.priceTotalExTax = (decimal)20.00;\n                orderProduct.priceTotalTax = (decimal)2.00;\n                //specify supplier's product code in salesOrderProductCode if it is different to the line's productCode field\n                orderProduct.salesOrderProductCode = \"ACME-SUPPLIER-TTGREEN\";\n                //add 1st order line to lines list\n                orderLines.Add(orderProduct);\n                //add a 2nd purchase order line record that is a text line\n                orderProduct = new ESDRecordOrderPurchaseLine();\n                orderProduct.lineType = ESDocumentConstants.ORDER_LINE_TYPE_TEXT;\n                orderProduct.textDescription = \"Please bundle tea towels into a box\";\n                orderLines.Add(orderProduct);\n                //add a 3rd purchase order line product record to the order\n                orderProduct = new ESDRecordOrderPurchaseLine();\n                orderProduct.lineType = ESDocumentConstants.ORDER_LINE_TYPE_PRODUCT;\n                orderProduct.productCode = \"TEA-TOWEL-BLUE\";\n                orderProduct.quantity = 10;\n                orderProduct.salesOrderProductCode = \"ACME-TTBLUE\";\n                orderLines.Add(orderProduct);\n                //add order lines to the order\n                purchaseOrderRecord.lines = orderLines;\n                //create purchase order records list and add purchase order to it\n                List<ESDRecordOrderPurchase> purchaseOrderRecords = new List<ESDRecordOrderPurchase>();\n                purchaseOrderRecords.Add(purchaseOrderRecord);\n                //after 120 seconds give up on waiting for a response from the API when procuring the order\n                int timeoutMilliseconds = 120000;\n                //create purchase order Ecommerce Standards document and add purchse order records to the document\n                ESDocumentOrderPurchase orderPurchaseESD = new ESDocumentOrderPurchase(ESDocumentConstants.RESULT_SUCCESS, \"successfully obtained data\", purchaseOrderRecords.ToArray(), new Dictionary<string, string>());\n                //send purchase order document to the API for procurement by the supplier organisation\n                APIv1EndpointResponseESD<ESDocumentOrderSale> endpointResponseESD = APIv1EndpointOrgProcurePurchaseOrderFromSupplier.call(apiOrgSession, timeoutMilliseconds, supplierOrgID, customerAccountCode, orderPurchaseESD);\n                ESDocumentOrderSale esDocumentOrderSale = endpointResponseESD.esDocument;\n                //check the result of procuring the purchase orders\n                if (endpointResponseESD.result.ToUpper() == APIv1EndpointResponse.ENDPOINT_RESULT_SUCCESS) {\n                    Console.WriteLine(\"SUCCESS - organisation purchase orders have successfully been sent to supplier organisation.\");\n                    //iterate through each of the returned sales orders and output the details of the sales orders\n                    if (esDocumentOrderSale.dataRecords != null) {\n                        foreach(ESDRecordOrderSale salesOrderRecord in esDocumentOrderSale.dataRecords) {\n                            Console.WriteLine(\"\\nSales Order Returned, Order Details: \");\n                            Console.WriteLine(\"Sales Order Code: \" + salesOrderRecord.salesOrderCode);\n                            Console.WriteLine(\"Sales Order Total Cost: \" + salesOrderRecord.totalPriceIncTax + \" (\" + salesOrderRecord.currencyISOCode + \")\");\n                            Console.WriteLine(\"Sales Order Total Taxes: \" + salesOrderRecord.totalTax + \" (\" + salesOrderRecord.currencyISOCode + \")\");\n                            Console.WriteLine(\"Sales Order Customer Account: \" + salesOrderRecord.customerAccountCode);\n                            Console.WriteLine(\"Sales Order Total Lines: \" + salesOrderRecord.totalLines);\n                        }\n                    }\n                } else {\n                    Console.WriteLine(\"FAIL - organisation purchase orders failed to be processed. Reason: \" + endpointResponseESD.result_message + \" Error Code: \" + endpointResponseESD.result_code);\n                    //check that a Ecommerce standards document was returned\n                    if (esDocumentOrderSale != null && esDocumentOrderSale.configs != null)\n                    {\n                        //if one or more products in the purchase order could not match a product for the supplier organisation then find out the order lines caused the problem\n                        if (esDocumentOrderSale.configs.ContainsKey(APIv1EndpointResponseESD<ESDocumentOrderSale>.ESD_CONFIG_ORDERS_WITH_UNMAPPED_LINES))\n                        {\n                            //get a list of order lines that could not be mapped\n                            List<KeyValuePair<int, int>> unmappedLines = APIv1EndpointOrgProcurePurchaseOrderFromSupplier.getUnmappedOrderLines(esDocumentOrderSale);\n                            //iterate through each unmapped order line\n                            foreach (KeyValuePair<int, int> unmappedLine in unmappedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unmapped product\n                                int orderIndex = unmappedLine.Key;\n                                int lineIndex = unmappedLine.Value;\n                                //check that the order can be found that contains the problematic line\n                                if (orderIndex < orderPurchaseESD.dataRecords.Length && lineIndex < orderPurchaseESD.dataRecords[orderIndex].lines.Count)\n                                {\n                                    Console.WriteLine(\"For purchase order: \" + orderPurchaseESD.dataRecords[orderIndex].purchaseOrderCode + \" a matching supplier product for line number: \" + (lineIndex + 1) + \" could not be found.\");\n                                }\n                            }\n                        }\n                        //if one or more supplier organisation's products in the purchase order are not stock then find the order lines that caused the problem\n                        if (esDocumentOrderSale.configs.ContainsKey(APIv1EndpointResponseESD<ESDocumentOrderSale>.ESD_CONFIG_ORDERS_WITH_UNSTOCKED_LINES))\n                        {\n                            //get a list of order lines that are not stocked by the supplier\n                            List<KeyValuePair<int, int>> unstockedLines = APIv1EndpointOrgProcurePurchaseOrderFromSupplier.getOutOfStockOrderLines(esDocumentOrderSale);\n                            //iterate through each unstocked order line\n                            foreach (KeyValuePair<int, int> unstockedLine in unstockedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unstocked product\n                                int orderIndex = unstockedLine.Key;\n                                int lineIndex = unstockedLine.Value;\n                                //check that the order can be found that contains the problematic line\n                                if (orderIndex < orderPurchaseESD.dataRecords.Length && lineIndex < orderPurchaseESD.dataRecords[orderIndex].lines.Count)\n                                {\n                                    Console.WriteLine(\"For purchase order: \" + orderPurchaseESD.dataRecords[orderIndex].purchaseOrderCode + \" the supplier has no products in stock for line number: \" + (lineIndex + 1));\n                                }\n                            }\n                        }\n                        //if one or more products in the purchase order could not be priced by the supplier organisation then find the order line that caused the problem\n                        if (esDocumentOrderSale.configs.ContainsKey(APIv1EndpointResponseESD<ESDocumentOrderSale>.ESD_CONFIG_ORDERS_WITH_UNPRICED_LINES))\n                        {\n                            //get a list of order lines that could not be priced\n                            List<KeyValuePair<int, int>> unpricedLines = APIv1EndpointOrgProcurePurchaseOrderFromSupplier.getUnpricedOrderLines(esDocumentOrderSale);\n                            //iterate through each unpriced order line\n", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "length": 1177, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "7850286a4534f85c6c1e090310eb4027cb5b38c4f626ff33"}
{"input": "", "context": "//\n// ClientOperation.cs\n//\n// Author:\n//\tAtsushi Enomoto <atsushi@ximian.com>\n//\n// Copyright (C) 2005 Novell, Inc.  http://www.novell.com\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nusing System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Reflection;\nusing System.ServiceModel;\nusing System.ServiceModel.Channels;\nusing System.ServiceModel.Description;\nusing System.Text;\nnamespace System.ServiceModel.Dispatcher\n{\n\tpublic sealed class ClientOperation\n\t{\n\t\tinternal class ClientOperationCollection :\n#if NET_2_1\n\t\t\tKeyedCollection<string, ClientOperation>\n#else\n\t\t\tSynchronizedKeyedCollection<string, ClientOperation>\n#endif\n\t\t{\n\t\t\tprotected override string GetKeyForItem (ClientOperation o)\n\t\t\t{\n\t\t\t\treturn o.Name;\n\t\t\t}\n\t\t}\n\t\tClientRuntime parent;\n\t\tstring name, action, reply_action;\n\t\tMethodInfo sync_method, begin_method, end_method;\n\t\tbool deserialize_reply = true, serialize_request = true;\n\t\tbool is_initiating, is_terminating, is_oneway;\n\t\tIClientMessageFormatter formatter;\n\t\tSynchronizedCollection<IParameterInspector> inspectors\n\t\t\t= new SynchronizedCollection<IParameterInspector> ();\n\t\tSynchronizedCollection<FaultContractInfo> fault_contract_infos = new SynchronizedCollection<FaultContractInfo> ();\n\t\tpublic ClientOperation (ClientRuntime parent,\n\t\t\tstring name, string action)\n\t\t{\n\t\t\tthis.parent = parent;\n\t\t\tthis.name = name;\n\t\t\tthis.action = action;\n\t\t}\n\t\tpublic ClientOperation (ClientRuntime parent,\n\t\t\tstring name, string action, string replyAction)\n\t\t{\n\t\t\tthis.parent = parent;\n\t\t\tthis.name = name;\n\t\t\tthis.action = action;\n\t\t\tthis.reply_action = replyAction;\n\t\t}\n\t\tpublic string Action {\n\t\t\tget { return action; }\n\t\t}\n\t\tpublic string ReplyAction {\n\t\t\tget { return reply_action; }\n\t\t}\n\t\tpublic MethodInfo BeginMethod {\n\t\t\tget { return begin_method; }\n\t\t\tset {\n\t\t\t\tThrowIfOpened ();\n\t\t\t\tbegin_method = value;\n\t\t\t}\n\t\t}\n\t\tpublic bool DeserializeReply {\n\t\t\tget { return deserialize_reply; }\n\t\t\tset {\n\t\t\t\tThrowIfOpened ();\n\t\t\t\tdeserialize_reply = value;\n\t\t\t}\n\t\t}\n\t\tpublic MethodInfo EndMethod {\n\t\t\tget { return end_method; }\n\t\t\tset {\n\t\t\t\tThrowIfOpened ();\n\t\t\t\tend_method = value;\n\t\t\t}\n\t\t}\n\t\tpublic SynchronizedCollection<FaultContractInfo> FaultContractInfos {\n\t\t\tget { return fault_contract_infos; }\n\t\t}\n\t\tpublic IClientMessageFormatter Formatter {\n\t\t\tget { return formatter; }\n\t\t\tset {\n\t\t\t\tThrowIfOpened ();\n\t\t\t\tformatter = value;\n\t\t\t}\n\t\t}\n\t\tpublic bool IsInitiating {\n\t\t\tget { return is_initiating; }\n\t\t\tset {\n\t\t\t\tThrowIfOpened ();\n\t\t\t\tis_initiating = value;\n\t\t\t}\n\t\t}\n\t\tpublic bool IsOneWay {\n\t\t\tget { return is_oneway; }\n\t\t\tset {\n\t\t\t\tThrowIfOpened ();\n\t\t\t\tis_oneway = value;\n\t\t\t}\n\t\t}\n\t\tpublic bool IsTerminating {\n\t\t\tget { return is_terminating; }\n\t\t\tset {\n\t\t\t\tThrowIfOpened ();\n\t\t\t\tis_terminating = value;\n\t\t\t}\n\t\t}\n\t\tpublic string Name {\n\t\t\tget { return name; }\n\t\t}\n\t\tpublic SynchronizedCollection<IParameterInspector> ParameterInspectors {\n\t\t\tget { return inspectors; }\n\t\t}\n\t\tpublic ClientRuntime Parent {\n\t\t\tget { return parent; }\n\t\t}\n\t\tpublic bool SerializeRequest {\n\t\t\tget { return serialize_request; }\n\t\t\tset {\n\t\t\t\tThrowIfOpened ();\n\t\t\t\tserialize_request = value;\n\t\t\t}\n\t\t}\n\t\tpublic MethodInfo SyncMethod {\n\t\t\tget { return sync_method; }\n\t\t\tset {\n\t\t\t\tThrowIfOpened ();\n\t\t\t\tsync_method = value;\n\t\t\t}\n\t\t}\n\t\tvoid ThrowIfOpened ()\n\t\t{\n\t\t\t// FIXME: get correct state\n\t\t\tvar state = CommunicationState.Created;\n\t\t\tswitch (state) {\n\t\t\tcase CommunicationState.Created:\n\t\t\tcase CommunicationState.Opening:\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow new InvalidOperationException (\"Cannot change this property after the service host is opened\");\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic ICollection<IParameterInspector> ClientParameterInspectors {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic MethodInfo TaskMethod {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResult {\n", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "length": 629, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "a93d814dbddd20576003b7d27ccabef85f5258c0f1c189bf"}
{"input": "", "context": "package org.exist.security;\nimport org.exist.storage.io.VariableByteInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport org.exist.storage.io.VariableByteOutputStream;\nimport org.exist.Database;\nimport org.exist.security.ACLPermission.ACE_TARGET;\nimport org.exist.security.ACLPermission.ACE_ACCESS_TYPE;\nimport org.exist.security.internal.SecurityManagerImpl;\nimport java.util.Random;\nimport org.easymock.EasyMock;\nimport org.exist.util.ByteArray;\nimport org.junit.Test;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertEquals;\nimport static org.easymock.EasyMock.replay;\nimport static org.easymock.EasyMock.verify;\nimport static org.easymock.EasyMock.expect;\n/**\n *\n * @author Adam Retter <adam@exist-db.org>\n */\npublic class SimpleACLPermissionTest {\n    private final static int ALL = Permission.READ | Permission.WRITE | Permission.EXECUTE;\n    @Test\n    public void add() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        \n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject);\n        //expect(mockCurrentSubject.hasDbaRole()).andReturn(true);\n        replay(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        \n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        assertEquals(0, permission.getACECount());\n        final int userId = 1;\n        final int mode = ALL;\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, userId, mode);\n        \n        verify(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        \n        assertEquals(1, permission.getACECount());\n        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(0));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));\n        assertEquals(userId, permission.getACEId(0));\n        assertEquals(mode, permission.getACEMode(0));\n    }\n    @Test\n    public void addACE_ForUserWithModeString() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        final Account mockAccount = EasyMock.createMock(Account.class);\n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        assertEquals(0, permission.getACECount());\n        final int userId = 1112;\n        final String userName = \"aretter\";\n        final String mode = \"rwx\";\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject);\n        //expect(mockCurrentSubject.hasDbaRole()).andReturn(true);\n        expect(mockSecurityManager.getAccount(userName)).andReturn(mockAccount);\n        expect(mockAccount.getId()).andReturn(userId);\n        replay(mockSecurityManager, mockDatabase, mockCurrentSubject, mockAccount);\n        permission.addACE(ACE_ACCESS_TYPE.ALLOWED, ACE_TARGET.USER, userName, mode);\n        verify(mockSecurityManager, mockDatabase, mockCurrentSubject, mockAccount);\n        assertEquals(1, permission.getACECount());\n        assertEquals(userId, permission.getACEId(0));\n        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(0));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));\n        assertEquals(ALL, permission.getACEMode(0));\n    }\n    @Test\n    public void addACE_ForGroupWithModeString() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        final Group mockGroup = EasyMock.createMock(Group.class);\n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        assertEquals(0, permission.getACECount());\n        final int groupId = 1112;\n        final String groupName = \"aretter\";\n        final String mode = \"rwx\";\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject);\n        //expect(mockCurrentSubject.hasDbaRole()).andReturn(true);\n        \n        expect(mockSecurityManager.getGroup(groupName)).andReturn(mockGroup);\n        expect(mockGroup.getId()).andReturn(groupId);\n        replay(mockSecurityManager, mockDatabase, mockCurrentSubject, mockGroup);\n        permission.addACE(ACE_ACCESS_TYPE.ALLOWED, ACE_TARGET.GROUP, groupName, mode);\n        verify(mockSecurityManager, mockDatabase, mockCurrentSubject, mockGroup);\n        assertEquals(1, permission.getACECount());\n        assertEquals(groupId, permission.getACEId(0));\n        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(0));\n        assertEquals(ACE_TARGET.GROUP, permission.getACETarget(0));\n        assertEquals(ALL, permission.getACEMode(0));\n        assertEquals(mode, permission.getACEModeString(0));\n    }\n    @Test\n    public void insert_atFront_whenEmpty() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject);\n        //expect(mockCurrentSubject.hasDbaRole()).andReturn(true);\n        \n        replay(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        \n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        assertEquals(0, permission.getACECount());\n        final int userId = 1112;\n        final int mode = ALL;\n        permission.insertUserACE(0, ACE_ACCESS_TYPE.ALLOWED, userId, mode);\n        \n        verify(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        assertEquals(1, permission.getACECount());\n        assertEquals(userId, permission.getACEId(0));\n        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(0));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));\n        assertEquals(ALL, permission.getACEMode(0));\n    }\n    @Test\n    public void insert_atFront() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(2);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(2);\n        //expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(2);\n        \n        replay(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        \n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        assertEquals(0, permission.getACECount());\n        final int userId = 1112;\n        final int mode = ALL;\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, userId, mode);\n        \n        assertEquals(1, permission.getACECount());\n        assertEquals(userId, permission.getACEId(0));\n        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(0));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));\n        assertEquals(ALL, permission.getACEMode(0));\n        final int secondUserId = 1113;\n        final int secondMode = 04;\n        permission.insertUserACE(0, ACE_ACCESS_TYPE.ALLOWED, secondUserId, secondMode);\n        \n        assertEquals(2, permission.getACECount());\n        assertEquals(secondUserId, permission.getACEId(0));\n        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(0));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));\n        assertEquals(secondMode, permission.getACEMode(0));\n        \n        verify(mockSecurityManager, mockDatabase, mockCurrentSubject);\n    }\n    @Test\n    public void insert_inMiddle() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(3);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(3);\n        //expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(3);\n        \n        replay(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        \n        assertEquals(0, permission.getACECount());\n        final int userId = 1112;\n        final int mode = ALL;\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, userId, mode);\n        \n        assertEquals(1, permission.getACECount());\n        \n        assertEquals(userId, permission.getACEId(0));\n        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(0));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));\n        assertEquals(ALL, permission.getACEMode(0));\n        final int secondUserId = 1113;\n        final int secondMode = 04;\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, secondUserId, secondMode);\n        \n        assertEquals(2, permission.getACECount());\n        \n        assertEquals(secondUserId, permission.getACEId(1));\n        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(1));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(1));\n        assertEquals(secondMode, permission.getACEMode(1));\n        final int thirdUserId = 1114;\n        final int thirdMode = 02;\n        permission.insertUserACE(1, ACE_ACCESS_TYPE.ALLOWED, thirdUserId, thirdMode);\n        \n        assertEquals(3, permission.getACECount());\n        \n        assertEquals(userId, permission.getACEId(0));\n        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(0));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));\n        assertEquals(ALL, permission.getACEMode(0));\n        assertEquals(thirdUserId, permission.getACEId(1));\n        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(1));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(1));\n        assertEquals(thirdMode, permission.getACEMode(1));\n        assertEquals(secondUserId, permission.getACEId(2));\n        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(2));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(2));\n        assertEquals(secondMode, permission.getACEMode(2));\n        \n        verify(mockSecurityManager, mockDatabase, mockCurrentSubject);\n    }\n    @Test(expected=PermissionDeniedException.class)\n    public void insert_atEnd() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(2);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(2);\n        //expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(2);\n        \n        replay(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        \n        assertEquals(0, permission.getACECount());\n        final int userId = 1112;\n        final int mode = ALL;\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, userId, mode);\n        \n        assertEquals(1, permission.getACECount());\n        assertEquals(userId, permission.getACEId(0));\n        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(0));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));\n        assertEquals(ALL, permission.getACEMode(0));\n        final int secondUserId = 1113;\n        final int secondMode = 04;\n        permission.insertUserACE(1, ACE_ACCESS_TYPE.ALLOWED, secondUserId, secondMode);\n        \n        verify(mockSecurityManager, mockDatabase, mockCurrentSubject);\n    }\n    @Test\n    public void remove_firstACE() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(3);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(3);\n        //expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(3);\n        \n        replay(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        \n        assertEquals(0, permission.getACECount());\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, 1, ALL);\n        final int secondUserId = 2;\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, secondUserId, ALL);\n        assertEquals(2, permission.getACECount());\n        permission.removeACE(0);\n        assertEquals(1, permission.getACECount());\n        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(0));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));\n        assertEquals(secondUserId, permission.getACEId(0));\n        \n        verify(mockSecurityManager, mockDatabase, mockCurrentSubject);\n    }\n    @Test\n    public void remove_middleACE() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(4);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(4);\n        //expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(4);\n        replay(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        \n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        \n        assertEquals(0, permission.getACECount());\n        final int firstUserId = 1;\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, firstUserId, ALL);\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, 2, ALL);\n        final int thirdUserId = 3;\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, thirdUserId, ALL);\n        assertEquals(3, permission.getACECount());\n        permission.removeACE(1);\n        assertEquals(2, permission.getACECount());\n        assertEquals(firstUserId, permission.getACEId(0));\n        assertEquals(thirdUserId, permission.getACEId(1));\n        \n        verify(mockSecurityManager, mockDatabase, mockCurrentSubject);\n    }\n    @Test\n    public void remove_lastACE() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(3);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(3);\n        //expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(3);\n        replay(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        \n        assertEquals(0, permission.getACECount());\n        final int firstUserId = 1;\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, firstUserId, ALL);\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, 2, ALL);\n        assertEquals(2, permission.getACECount());\n        permission.removeACE(1);\n        assertEquals(1, permission.getACECount());\n        assertEquals(firstUserId, permission.getACEId(0));\n        \n        verify(mockSecurityManager, mockDatabase, mockCurrentSubject);\n    }\n    @Test\n    public void modify() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(3);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(3);\n        //expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(3);\n        replay(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        \n        assertEquals(0, permission.getACECount());\n        final int userId = 1;\n        final int mode = Permission.READ;\n        final ACE_ACCESS_TYPE access_type = ACE_ACCESS_TYPE.ALLOWED;\n        permission.addUserACE(access_type, userId, mode);\n        assertEquals(1, permission.getACECount());\n        assertEquals(userId, permission.getACEId(0));\n        assertEquals(access_type, permission.getACEAccessType(0));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));\n        assertEquals(mode, permission.getACEMode(0));\n        permission.modifyACE(0, access_type, Permission.WRITE);\n        assertEquals(1, permission.getACECount());\n        assertEquals(userId, permission.getACEId(0));\n        assertEquals(access_type, permission.getACEAccessType(0));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));\n        assertEquals(Permission.WRITE, permission.getACEMode(0));\n        permission.modifyACE(0, ACE_ACCESS_TYPE.DENIED, Permission.READ | Permission.WRITE);\n        assertEquals(1, permission.getACECount());\n        assertEquals(userId, permission.getACEId(0));\n        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));\n        assertEquals(ACE_ACCESS_TYPE.DENIED, permission.getACEAccessType(0));\n        assertEquals(Permission.READ | Permission.WRITE, permission.getACEMode(0));\n        \n        verify(mockSecurityManager, mockDatabase, mockCurrentSubject);\n    }\n    @Test\n    public void clear() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(3);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(3);\n        //expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(3);\n        replay(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);\n        assertEquals(0, permission.getACECount());\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, 1, ALL);\n        final int secondUserId = 2;\n        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, secondUserId, ALL);\n        assertEquals(2, permission.getACECount());\n        permission.clear();\n        assertEquals(0, permission.getACECount());\n        \n        verify(mockSecurityManager, mockDatabase, mockCurrentSubject);\n    }\n    @Test\n    public void validate_cant_read_when_readNotInACL() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final int ownerId = new Random().nextInt(SecurityManagerImpl.MAX_USER_ID);\n        final int mode = 0700;\n        final int ownerGroupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "length": 1006, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "b8d674585c2854a71ff59d091611a1181f7327620a70524e"}
{"input": "", "context": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Audio;\nusing Microsoft.Xna.Framework.Content;\nusing Microsoft.Xna.Framework.GamerServices;\nusing Microsoft.Xna.Framework.Graphics;\nusing Microsoft.Xna.Framework.Input;\nusing Microsoft.Xna.Framework.Media;\nusing Microsoft.Xna.Framework.Net;\nusing Microsoft.Xna.Framework.Storage;\nusing Knot3.KnotData;\nnamespace Knot3.Utilities\n{\n\tpublic static class VectorHelper\n\t{\n\t\tpublic static Vector3 ArcBallMove (this Vector3 vectorToMove, Vector2 mouse, Vector3 up, Vector3 forward)\n\t\t{\n\t\t\tVector3 side = Vector3.Cross (up, forward);\n\t\t\tVector3 movedVector = vectorToMove.RotateY (\n\t\t\t                          MathHelper.Pi / 300f * mouse.X\n\t\t\t                      );\n\t\t\tmovedVector = movedVector.RotateAroundVector (\n\t\t\t                  -side,\n\t\t\t                  MathHelper.Pi / 200f * mouse.Y\n\t\t\t              );\n\t\t\treturn movedVector;\n\t\t}\n\t\tpublic static Vector3 MoveLinear (this Vector3 vectorToMove, Vector3 mouse, Vector3 up, Vector3 forward)\n\t\t{\n\t\t\tVector3 side = Vector3.Cross (up, forward);\n\t\t\tVector3 movedVector = vectorToMove - side * mouse.X - up * mouse.Y - forward * mouse.Z;\n\t\t\treturn movedVector;\n\t\t}\n\t\tpublic static Vector3 MoveLinear (this Vector3 vectorToMove, Vector2 mouse, Vector3 up, Vector3 forward)\n\t\t{\n\t\t\treturn vectorToMove.MoveLinear (new Vector3 (mouse.X, mouse.Y, 0), up, forward);\n\t\t}\n\t\tpublic static Vector3 RotateX (this Vector3 vectorToRotate, float angleRadians)\n\t\t{\n\t\t\treturn Vector3.Transform (vectorToRotate, Matrix.CreateRotationX (angleRadians));\n\t\t}\n\t\tpublic static Vector3 RotateY (this Vector3 vectorToRotate, float angleRadians)\n\t\t{\n\t\t\treturn Vector3.Transform (vectorToRotate, Matrix.CreateRotationY (angleRadians));\n\t\t}\n\t\tpublic static Vector3 RotateZ (this Vector3 vectorToRotate, float angleRadians)\n\t\t{\n\t\t\treturn Vector3.Transform (vectorToRotate, Matrix.CreateRotationZ (angleRadians));\n\t\t}\n\t\tpublic static Vector3 RotateAroundVector (this Vector3 vectorToRotate, Vector3 axis, float angleRadians)\n\t\t{\n\t\t\treturn Vector3.Transform (vectorToRotate, Matrix.CreateFromAxisAngle (axis, angleRadians));\n\t\t}\n\t\tpublic static Vector3 Clamp (this Vector3 v, Vector3 lower, Vector3 higher)\n\t\t{\n\t\t\treturn new Vector3 (\n\t\t\t           MathHelper.Clamp (v.X, lower.X, higher.X),\n\t\t\t           MathHelper.Clamp (v.Y, lower.Y, higher.Y),\n\t\t\t           MathHelper.Clamp (v.Z, lower.Z, higher.Z)\n\t\t\t       );\n\t\t}\n\t\tpublic static Vector3 Clamp (this Vector3 v, int minLength, int maxLength)\n\t\t{\n\t\t\tif (v.Length () < minLength) {\n\t\t\t\treturn v * minLength / v.Length ();\n\t\t\t}\n\t\t\telse if (v.Length () > maxLength) {\n\t\t\t\treturn v * maxLength / v.Length ();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn v;\n\t\t\t}\n\t\t}\n\t\tpublic static Vector2 PrimaryVector (this Vector2 v)\n\t\t{\n\t\t\tif (v.X.Abs () > v.Y.Abs ()) {\n\t\t\t\treturn new Vector2 (v.X, 0);\n\t\t\t}\n\t\t\telse if (v.Y.Abs () > v.X.Abs ()) {\n\t\t\t\treturn new Vector2 (0, v.Y);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Vector2 (v.X, 0);\n\t\t\t}\n\t\t}\n\t\tpublic static Vector3 PrimaryVector (this Vector3 v)\n\t\t{\n\t\t\tif (v.X.Abs () > v.Y.Abs () && v.X.Abs () > v.Z.Abs ()) {\n\t\t\t\treturn new Vector3 (v.X, 0, 0);\n\t\t\t}\n\t\t\telse if (v.Y.Abs () > v.X.Abs () && v.Y.Abs () > v.Z.Abs ()) {\n\t\t\t\treturn new Vector3 (0, v.Y, 0);\n\t\t\t}\n\t\t\telse if (v.Z.Abs () > v.Y.Abs () && v.Z.Abs () > v.X.Abs ()) {\n\t\t\t\treturn new Vector3 (0, 0, v.Z);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new Vector3 (v.X, 0, 0);\n\t\t\t}\n\t\t}\n\t\tpublic static Vector2 PrimaryDirection (this Vector2 v)\n\t\t{\n\t\t\tVector2 vector = v.PrimaryVector ();\n\t\t\treturn new Vector2 (Math.Sign (vector.X), Math.Sign (vector.Y));\n\t\t}\n\t\tpublic static Vector3 PrimaryDirection (this Vector3 v)\n\t\t{\n\t\t\tVector3 vector = v.PrimaryVector ();\n\t\t\treturn new Vector3 (Math.Sign (vector.X), Math.Sign (vector.Y), Math.Sign (vector.Z));\n\t\t}\n\t\tpublic static Vector3 PrimaryDirectionExcept (this Vector3 v, Vector3 wrongDirection)\n\t\t{\n\t\t\tVector3 copy = v;\n\t\t\tif (wrongDirection.X != 0) {\n\t\t\t\tcopy.X = 0;\n\t\t\t}\n\t\t\telse if (wrongDirection.Y != 0) {\n\t\t\t\tcopy.Y = 0;\n\t\t\t}\n\t\t\telse if (wrongDirection.Z != 0) {\n\t\t\t\tcopy.Z = 0;\n\t\t\t}\n\t\t\treturn copy.PrimaryDirection ();\n\t\t}\n\t\tpublic static float Abs (this float v)\n\t\t{\n\t\t\treturn Math.Abs (v);\n\t\t}\n\t\tpublic static float Clamp (this float v, int min, int max)\n\t\t{\n\t\t\treturn MathHelper.Clamp (v, min, max);\n\t\t}\n\t\tpublic static BoundingSphere[] Bounds (this Model model)\n\t\t{\n\t\t\tBoundingSphere[] bounds = new BoundingSphere[model.Meshes.Count];\n\t\t\tint i = 0;\n\t\t\tforeach (ModelMesh mesh in model.Meshes) {\n\t\t\t\tbounds [i++] = mesh.BoundingSphere;\n\t\t\t}\n\t\t\treturn bounds;\n\t\t}\n\t\tpublic static BoundingBox Bounds (this Vector3 a, Vector3 diff)\n\t\t{\n\t\t\treturn new BoundingBox (a, a + diff);\n\t\t}\n\t\tpublic static BoundingSphere Scale (this BoundingSphere sphere, float scale)\n\t\t{\n\t\t\treturn new BoundingSphere (sphere.Center, sphere.Radius * scale);\n\t\t}\n\t\tpublic static BoundingSphere Scale (this BoundingSphere sphere, Vector3 scale)\n\t\t{\n\t\t\treturn new BoundingSphere (sphere.Center, sphere.Radius * scale.PrimaryVector ().Length ());\n\t\t}\n\t\tpublic static BoundingSphere Translate (this BoundingSphere sphere, Vector3 position)\n\t\t{\n\t\t\treturn new BoundingSphere (Vector3.Transform (sphere.Center, Matrix.CreateTranslation (position)), sphere.Radius);\n\t\t}\n\t\tpublic static BoundingSphere Rotate (this BoundingSphere sphere, Angles3 rotation)\n\t\t{\n\t\t\treturn new BoundingSphere (Vector3.Transform (sphere.Center, Matrix.CreateFromYawPitchRoll (rotation.Y, rotation.X, rotation.Z)), sphere.Radius);\n\t\t}\n\t\tpublic static BoundingBox Scale (this BoundingBox box, float scale)\n\t\t{\n\t\t\treturn new BoundingBox (box.Min * scale, box.Max * scale);\n\t\t}\n\t\tpublic static BoundingBox Translate (this BoundingBox box, Vector3 position)\n\t\t{\n\t\t\tMatrix translation = Matrix.CreateTranslation (position);\n\t\t\treturn new BoundingBox (Vector3.Transform (box.Min, translation), Vector3.Transform (box.Max, translation));\n\t\t}\n\t\tpublic static Vector2 ToVector2 (this MouseState screen)\n\t\t{\n\t\t\treturn new Vector2 (screen.X, screen.Y);\n\t\t}\n\t\tpublic static Point ToPoint (this MouseState screen)\n\t\t{\n\t\t\treturn new Point (screen.X, screen.Y);\n\t\t}\n\t\tpublic static Vector2 ToVector2 (this Viewport viewport)\n\t\t{\n\t\t\treturn new Vector2 (viewport.Width, viewport.Height);\n\t\t}\n\t\tpublic static Vector2 Center (this Viewport viewport)\n\t\t{\n\t\t\treturn new Vector2 (viewport.Width, viewport.Height) / 2;\n\t\t}\n\t\tpublic static Vector2 ToVector2 (this Point v)\n\t\t{\n\t\t\treturn new Vector2 (v.X, v.Y);\n\t\t}\n\t\tpublic static Point ToPoint (this Vector2 v)\n\t\t{\n\t\t\treturn new Point ((int)v.X, (int)v.Y);\n\t\t}\n\t\tpublic static Point Plus (this Point a, Point b)\n\t\t{\n\t\t\treturn new Point (a.X + b.X, a.Y + b.Y);\n\t\t}\n\t\tpublic static string Join (this string delimiter, List<int> list)\n\t\t{\n\t\t\tStringBuilder builder = new StringBuilder ();\n\t\t\tforeach (int elem in list) {\n\t\t\t\t// Append each int to the StringBuilder overload.\n\t\t\t\tbuilder.Append (elem).Append (delimiter);\n\t\t\t}\n\t\t\treturn builder.ToString ();\n\t\t}\n\t\tpublic static Vector2 ScaleFactor (this Viewport viewport)\n\t\t{\n\t\t\tVector2 max = viewport.ToVector2 ();\n\t\t\treturn max / 1000f;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport)\n\t\t{\n", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "length": 882, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "145cc36abdaa2c8860959982f54fca44c7cae309bc44bcf9"}
{"input": "", "context": "import xdrlib\nclass XDREnum(object):\n    __slots__ = ['name', 'value']\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n    def __int__(self):\n        return self.value\n    def __str__(self):\n        return self.name\n    def __repr__(self):\n        return self.name\n    def __cmp__(x, y):\n        return cmp(int(x), int(y))\n    def __hash__(self):\n        return hash(int(self))\n    @classmethod\n    def unpack_from(cls, reader):\n        value = reader.unpack_int()\n        return cls.members[value]\n    @classmethod\n    def pack_into(cls, packer, value):\n        packer.pack_int(value)\nclass XDRStruct(object):\n    __slots__ = []\n    def pack(self):\n        packer = xdrlib.Packer()\n        self.pack_into(packer, self)\n        return packer.get_buffer()\n    @classmethod\n    def unpack(cls, data):\n        return cls.unpack_from(xdrlib.Unpacker(data))\n    def __str__(self):\n        return repr(self)\n    def __ne__(self, other):\n        return not self == other\nclass XDRUnion(object):\n    @classmethod\n    def unpack(cls, data):\n        return cls.unpack_from(xdrlib.Unpacker(data))\n    @classmethod\n    def pack_into(cls, packer, obj):\n        type(obj).pack_into(packer, obj)\nclass XDRUnionMember(object):\n    __slots__ = [\"value\"]\n    def __init__(self, value=None):\n        self.value = value\n    def pack(self):\n        packer = xdrlib.Packer()\n        self.pack_into(packer, self)\n        return packer.get_buffer()\n    def __repr__(self):\n        return type(self).__name__ + '(' + repr(self.value) + ')'\n    def __str__(self):\n        return repr(self)\n    def __eq__(self, other):\n        return type(self) == type(other) and self.value == other.value\n    def __ne__(self, other):\n        return not self == other\nclass XDRTypedef(object):\n    __slots__ = []\n    @classmethod\n    def unpack(cls, data):\n        return cls.unpack_from(xdrlib.Unpacker(data))\nclass endpoint_key(XDRStruct):\n    __slots__ = ['vlan', 'mac_hi', 'mac_lo']\n    def __init__(self, vlan=None, mac_hi=None, mac_lo=None):\n        self.vlan = vlan\n        self.mac_hi = mac_hi\n        self.mac_lo = mac_lo\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack_uint(obj.vlan)\n        packer.pack_uint(obj.mac_hi)\n        packer.pack_uint(obj.mac_lo)\n    @classmethod\n    def unpack_from(cls, unpacker):\n        obj = endpoint_key()\n        obj.vlan = unpacker.unpack_uint()\n        obj.mac_hi = unpacker.unpack_uint()\n        obj.mac_lo = unpacker.unpack_uint()\n        return obj\n    def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.vlan != other.vlan:\n            return False\n        if self.mac_hi != other.mac_hi:\n            return False\n        if self.mac_lo != other.mac_lo:\n            return False\n        return True\n    def __repr__(self):\n        parts = []\n        parts.append('endpoint_key(')\n        parts.append('vlan=')\n        parts.append(repr(self.vlan))\n        parts.append(\", \")\n        parts.append('mac_hi=')\n        parts.append(repr(self.mac_hi))\n        parts.append(\", \")\n        parts.append('mac_lo=')\n        parts.append(repr(self.mac_lo))\n        parts.append(')')\n        return ''.join(parts)\nclass endpoint_value(XDRStruct):\n    __slots__ = ['port']\n    def __init__(self, port=None):\n        self.port = port\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack_uint(obj.port)\n    @classmethod\n    def unpack_from(cls, unpacker):\n        obj = endpoint_value()\n        obj.port = unpacker.unpack_uint()\n        return obj\n    def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.port != other.port:\n            return False\n        return True\n    def __repr__(self):\n        parts = []\n        parts.append('endpoint_value(')\n        parts.append('port=')\n        parts.append(repr(self.port))\n        parts.append(')')\n        return ''.join(parts)\nclass endpoint_stats(XDRStruct):\n    __slots__ = ['packets', 'bytes']\n    def __init__(self, packets=None, bytes=None):\n        self.packets = packets\n        self.bytes = bytes\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack_uint(obj.packets)\n        packer.pack_uint(obj.bytes)\n    @classmethod\n    def unpack_from(cls, unpacker):\n        obj = endpoint_stats()\n        obj.packets = unpacker.unpack_uint()\n        obj.bytes = unpacker.unpack_uint()\n        return obj\n    def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.packets != other.packets:\n            return False\n        if self.bytes != other.bytes:\n            return False\n        return True\n    def __repr__(self):\n        parts = []\n        parts.append('endpoint_stats(')\n        parts.append('packets=')\n        parts.append(repr(self.packets))\n        parts.append(\", \")\n        parts.append('bytes=')\n        parts.append(repr(self.bytes))\n        parts.append(')')\n        return ''.join(parts)\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "length": 399, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "c69d4ae0425c1d742d8cad38e1238ffbf39d8f97b105df79"}
{"input": "", "context": "/*\n    SLAM server\n    Copyright (C) 2009 Bob Mottram\n    fuzzgun@gmail.com\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\nusing System;\nusing System.Xml;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading;\nusing dpslam.core.tests;\nnamespace dpslam.core\n{\n    public class dpslamServer\n    {\n        public bool kill;\n\t\tpublic bool Running;\n\t\t\n        // list of client numbers from which data is currently being received\n        protected List<int> receiving_data = new List<int>();\t\t\n\t\t\n\t\tprotected const int DATA_BUFFER_SIZE = 4096 * 2;\n\t\t\n\t\t// the type of xml encoding used\n        public const string XML_ENCODING = \"ISO-8859-1\";\t\t\n\t\t\n\t\t// recognised xml node types\n        public const string STATUS_REQUEST = \"HardwareDeviceStatusRequest\";\n        public const string STATUS_REPLY = \"HardwareDeviceStatus\";\n        public const string STATUS_UPDATE = \"HardwareDeviceUpdate\";\n        public const string STATUS_BROADCAST = \"HardwareDeviceBroadcast\";\n        public const string STATUS_DISCONNECT = \"HardwareDeviceDisconnect\";\n\t\t\n\t\tpublic int PortNumber;\n        public ProtocolType protocol = ProtocolType.Tcp;                \n        protected bool NoDelay = false;\t\t// used to disable Nagle's algorithm\n\t\t\n        // timeouts\n\t\tpublic int ReceiveTimeoutMilliseconds = 5000;\n\t\tpublic int SendTimeoutMilliseconds = 5000;\n        // list of clients pending disconnection\t\t\t\t\n\t\tprivate List<int> disconnect_client;\n\t\t\n\t\trobot rob;\n\t\t\t\t    \n        #region \"constructors\"\n        public dpslamServer(int no_of_stereo_cameras)\n        {\n\t\t\trob = new robot(no_of_stereo_cameras);\n\t\t\t\n\t\t\tdpslam_tests.CreateSim();\n        }\n        #endregion\n        \n        #region \"buffer storing data recently received\"\n        \n\t\t// a buffer used to store the data recently received for\n\t\t// debugging purposes\n\t\tconst int MAX_RECENT_DATA = 10;\n\t\tprivate List<int> data_recently_received_client_number;\n\t\tprivate List<string> data_recently_received;\n\t\t\n\t\t/// <summary>\n\t\t/// updates the buffer storing recently received data\n\t\t/// This is typically used for debugging purposes\n\t\t/// </summary>\n\t\t/// <param name=\"client_number\">client number which teh data was received from</param>\n\t\t/// <param name=\"data_received\">data content</param>\n\t\tprivate static void UpdateDataRecentlyReceived(\n\t\t    int client_number, \n\t\t    string data_received,\n\t\t    ref List<string> data_recently_received, \n\t\t    ref List<int> data_recently_received_client_number)\n\t\t{\n\t\t    // create lists\n\t\t    if (data_recently_received_client_number == null)\n\t\t    {\n\t\t        data_recently_received_client_number = new List<int>();\n\t\t        data_recently_received = new List<string>();\n\t\t    }\n\t\t    \n\t\t    // store the receipt\n\t\t    data_recently_received_client_number.Add(client_number);\n\t\t    data_recently_received.Add(data_received);\n\t\t    \n\t\t    //Console.WriteLine(\"Data received: \" + data_recently_received.Count.ToString());\n\t\t    //Console.WriteLine(\"Data received: \" + data_received);\n\t\t    \n\t\t    // only store a limited number of recent receipts\n\t\t    if (data_recently_received.Count >= MAX_RECENT_DATA)\n\t\t    {\n\t\t        data_recently_received.RemoveAt(0);\n\t\t        data_recently_received_client_number.RemoveAt(0);\n\t\t    }\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// clears the recently received data buffer\n\t\t/// </summary>\n\t\tpublic void ClearDataRecentlyReceived()\n\t\t{\n\t\t    if (data_recently_received != null)\n\t\t    {\n\t\t        data_recently_received.Clear();\n\t\t        data_recently_received_client_number.Clear();\n\t\t    }\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Returns data recently received from teh given client number\n\t\t/// This is typically used for debugging purposes\n\t\t/// </summary>\n\t\t/// <param name=\"client_number\">client number from which the data was received</param>\n\t\t/// <returns>data received, or empty string</returns>\n\t\tpublic string GetDataRecentlyReceived(int client_number)\n\t\t{\n\t\t    string data = \"\";\n\t\t    \n\t\t    if (data_recently_received != null)\n\t\t    {\n\t\t        int i = data_recently_received.Count-1;\n\t\t        while ((i >= 0) && (data == \"\"))\n\t\t        {\n\t\t            if (data_recently_received_client_number[i] == client_number)\n\t\t                data = data_recently_received[i];\n\t\t            i--;\n\t\t        }\n\t\t    }\n\t\t    \n\t\t    return(data);\n\t\t}\n\t\t\n\t\t\n                \n        #endregion\n        #region \"sockets stuff\"\n        public delegate void UpdateRichEditCallback(string text);\n\t\tpublic delegate void UpdateClientListCallback();\n\t\t\t\t\n\t\tpublic AsyncCallback pfnWorkerCallBack;\n\t\tprivate  Socket m_mainSocket;\n\t\t// An ArrayList is used to keep track of worker sockets that are designed\n\t\t// to communicate with each connected client. Make it a synchronized ArrayList\n\t\t// For thread safety\n\t\tprivate ArrayList m_workerSocketList = \n\t\t\t\tArrayList.Synchronized(new System.Collections.ArrayList());\n\t\t// The following variable will keep track of the cumulative \n\t\t// total number of clients connected at any time. Since multiple threads\n\t\t// can access this variable, modifying this variable should be done\n\t\t// in a thread safe manner\n\t\tprivate int m_clientCount = 0;\n\t\t/// <summary>\n\t\t/// start the server listening on the given port number\n\t\t/// </summary>\n\t\t/// <param name=\"PortNumber\">port number</param>\t\t\n\t\tpublic void Start(int PortNumber)\n\t\t{\n\t\t\tRunning = false;\n\t\t\tthis.PortNumber = PortNumber;\n\t\t\t\n\t\t\ttry\n\t\t\t{\t\t\t\t\n                // Create the listening socket...\n\t\t\t\tm_mainSocket = new Socket(AddressFamily.InterNetwork, \n\t\t\t\t\tSocketType.Stream, \n\t\t\t\t\tprotocol);\n\t\t\t    \n\t\t\t    m_mainSocket.NoDelay = NoDelay;\n\t\t\t\t\t\n                IPEndPoint ipLocal = new IPEndPoint(IPAddress.Parse(GetIP()), PortNumber);\n                Console.WriteLine(\"Server running on \" + ipLocal.ToString());\n                // Bind to local IP Address...\n\t\t\t\tm_mainSocket.Bind( ipLocal );\n\t\t\t\t\n                // Start listening...\n\t\t\t\tm_mainSocket.Listen(4);\n\t\t\t\t\n                // Create the call back for any client connections...\n\t\t\t\tm_mainSocket.BeginAccept(new AsyncCallback (OnClientConnect), null);\n\t\t\t\t//m_mainSocket.BeginDisconnect(new AsyncCallback (OnClientDisconnect), null);\n\t\t\t\t\n\t\t\t\tRunning = true;\n\t\t\t}\n\t\t\tcatch(SocketException se)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"dpslamServer/Start(\" + PortNumber.ToString() + \")/\" + se.Message);\n\t\t\t}\n\t\t}\n        /// <summary>\n        /// This is the call back function, which will be invoked when a client is disconnected \n        /// </summary>\n        /// <param name=\"asyn\"></param>\n        private static void OnClientDisconnect(IAsyncResult asyn)\n\t\t{\n\t\t\tConsole.WriteLine(\"Client disconnected\");\n        }\n        /// <summary>\n        /// This is the call back function, which will be invoked when a client is connected \n        /// </summary>\n        /// <param name=\"asyn\"></param>\n        private void OnClientConnect(IAsyncResult asyn)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Here we complete/end the BeginAccept() asynchronous call\n\t\t\t\t// by calling EndAccept() - which returns the reference to\n\t\t\t\t// a new Socket object\n\t\t\t\tSocket workerSocket = m_mainSocket.EndAccept (asyn);\n\t\t\t\t\n\t\t\t\tworkerSocket.NoDelay = NoDelay;\n\t\t\t\t// Now increment the client count for this client \n\t\t\t\t// in a thread safe manner\n\t\t\t\tInterlocked.Increment(ref m_clientCount);\n\t\t\t\n\t\t\t    // set timeouts\n\t\t\t    workerSocket.ReceiveTimeout = ReceiveTimeoutMilliseconds;\n\t\t\t\tworkerSocket.SendTimeout = SendTimeoutMilliseconds;\t\t\t\t\n\t\t\t\t\n\t\t\t\t// Add the workerSocket reference to our ArrayList\n\t\t\t\tm_workerSocketList.Add(workerSocket);\n\t\t\t\t// Send a welcome message to client\n\t\t\t\tConsole.WriteLine(\"Welcome client \" + m_clientCount);\n                //msg += getDeviceStatusAll();\n\t\t\t\t//SendToClient(msg, m_clientCount);\n\t\t\t\t// Let the worker Socket do the further processing for the \n\t\t\t\t// just connected client\n\t\t\t\tWaitForData(workerSocket, m_clientCount);\n\t\t\t\t\t\t\t\n\t\t\t\t// Since the main Socket is now free, it can go back and wait for\n\t\t\t\t// other clients who are attempting to connect\n\t\t\t\tm_mainSocket.BeginAccept(new AsyncCallback ( OnClientConnect ),null);\t\t\t\t\n\t\t\t}\n\t\t\tcatch(ObjectDisposedException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"dpslamServer/OnClientConnect/Socket has been closed\");\n\t\t\t\tSystem.Diagnostics.Debugger.Log(0,\"1\",\"\\n OnClientConnection: Socket (\" + PortNumber.ToString() + \") has been closed\\n\");\n\t\t\t}\n\t\t\tcatch(SocketException se)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"dpslamServer/OnClientConnect(\" + PortNumber.ToString() + \")/\" + se.Message);\n\t\t\t}\n\t\t\t\n\t\t}\n        internal class SocketPacket\n\t\t{\n\t\t\t// Constructor which takes a Socket and a client number\n\t\t\tpublic SocketPacket(System.Net.Sockets.Socket socket, int clientNumber)\n\t\t\t{\n\t\t\t\tm_currentSocket = socket;\n\t\t\t\tm_clientNumber = clientNumber;\n\t\t\t}\n\t\t\t\n            public System.Net.Sockets.Socket m_currentSocket;\n\t\t\t\n            public int m_clientNumber;\n\t\t\t\n            // Buffer to store the data sent by the client\n            public byte[] dataBuffer = new byte[DATA_BUFFER_SIZE];\n\t\t}\n\t\t// Start waiting for data from the client\n\t\tprivate void WaitForData(System.Net.Sockets.Socket soc, int clientNumber)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif  ( pfnWorkerCallBack == null )\n\t\t\t\t{\t\t\n\t\t\t\t\t// Specify the call back function which is to be \n\t\t\t\t\t// invoked when there is any write activity by the \n\t\t\t\t\t// connected client\n\t\t\t\t\tpfnWorkerCallBack = new AsyncCallback (OnDataReceived);\n\t\t\t\t}\n\t\t\t\tSocketPacket theSocPkt = new SocketPacket (soc, clientNumber);\n\t\t\t\t\n\t\t\t\tsoc.BeginReceive (theSocPkt.dataBuffer, 0, \n\t\t\t\t\ttheSocPkt.dataBuffer.Length,\n\t\t\t\t\tSocketFlags.None,\n\t\t\t\t\tpfnWorkerCallBack,\n\t\t\t\t\ttheSocPkt);\n\t\t\t}\n\t\t\tcatch(SocketException se)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"dpslamServer/WaitForData(\" + PortNumber.ToString() + \")/\" + se.Message);\n\t\t\t}\n\t\t}\n        private ArrayList receive_buffer;\n        \n        public static bool EndOfReceive(string received_text)\n        {\n            bool end_of_data = false;\n            received_text = received_text.Trim();\n            if ((received_text.Contains(\"</\" + STATUS_REQUEST + \">\")) ||\n                (received_text.Contains(\"</\" + STATUS_UPDATE + \">\")) ||\n                (received_text.Contains(\"</\" + STATUS_DISCONNECT + \">\")))\n            {\n                end_of_data = true;\n            }\n            return(end_of_data);\n        }        \n        \n        List<int> disconnect_now = new List<int>();\n        public bool processing_receive_buffer;\n        public void ProcessReceiveBuffer(\n            int client_number,\n            ArrayList receive_buffer)\n        {\n            processing_receive_buffer = true;\n            \n            dpslamServer.ProcessReceiveBuffer(\n                client_number,\n                receive_buffer,\n                ref data_recently_received, \n                ref data_recently_received_client_number,\n                ref m_workerSocketList,\n                ref kill,\n                ref disconnect_client,\n                ref disconnect_now);\n            processing_receive_buffer = false;\n        }\n        /// <summary>\n        /// if the received text contains multiple xml documents\n        /// this splits it up ready for subsequent parsing\n        /// </summary>\n        /// <param name=\"received_text\">text received</param>\n        /// <returns>list containing xml documents</returns>        \n        public static List<string> SplitReceive(string received_text)\n        {\n            List<string> receipts = new List<string>();\n            \n            int prev_pos = 0;\n            int start_pos, pos = 1;\n            while (pos > -1)\n            {\n                pos = received_text.IndexOf(\"<?xml\", prev_pos);\n                if (pos > -1)\n                {\n                    start_pos = prev_pos;\n                    if (start_pos > 0) start_pos--;\n                    string xml_str = received_text.Substring(start_pos, pos - start_pos);\n                    if (xml_str.Trim() != \"\") receipts.Add(xml_str);\n                    prev_pos = pos+1;\n                }\n            }\n            start_pos = prev_pos;\n            if (start_pos > 0) start_pos--;\n            receipts.Add(received_text.Substring(start_pos, received_text.Length - start_pos));\n            \n            return(receipts);\n        }\t\t\n\t\t\n        public static void ProcessReceiveBuffer(\n            int client_number,\n            ArrayList receive_buffer,\n            ref List<string> data_recently_received, \n            ref List<int> data_recently_received_client_number,\n            ref ArrayList m_workerSocketList,\n            ref bool kill,\n            ref List<int> disconnect_client,\n            ref List<int> disconnect_now)\n        {\n            if (receive_buffer != null)\n            {\n                string data = \"\";\n                List<int> removals = new List<int>();\n                for (int i = 0; i < receive_buffer.Count; i += 2)\n                {\n                    int client_no = (int)receive_buffer[i + 1];\n                    if (client_no == client_number)\n                    {\n                        data += (string)receive_buffer[i];\n                        removals.Add(i);\n                    }\n                }\n                \n                if (data != \"\")\n                {\n                    //Console.WriteLine(\"data = \" + data);\n                    \n                    List<string> data_str = dpslamServer.SplitReceive(data);\n                \n                    for (int i = 0; i < data_str.Count; i++)\n                    {\n\t                    ReceiveXmlMessageFromClient(\n\t                        data_str[i], \n\t                        client_number,\n\t                        ref data_recently_received, \n\t                        ref data_recently_received_client_number,\n\t                        ref m_workerSocketList,\n\t                        ref kill,\n\t                        ref disconnect_client,\n\t                        ref disconnect_now);\n                    }\n                    \n                    for (int i = removals.Count-1; i >= 0; i--)\n                    {\n                        receive_buffer.RemoveAt(removals[i] + 1);\n                        receive_buffer.RemoveAt(removals[i]);\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\"ProcessReceiveBuffer/No data received\");\n                }                \n            }\n            else\n            {\n                Console.WriteLine(\"Receive buffer is null\");\n            }\n        }\n        \n        /// <summary>\n        /// a thread has been created to process incoming requests\n        /// </summary>\n        /// <param name=\"state\"></param>\n        private void OnDataReceivedCallback(object state)\n        {\n        }\n        \n        /// <summary>\n        /// This the call back function which will be invoked when the socket\n        /// detects any client writing of data on the stream\n        /// </summary>\n        /// <param name=\"asyn\"></param>\n        public void OnDataReceived(IAsyncResult asyn)\n\t\t{\n\t\t    SocketPacket socketData = (SocketPacket)asyn.AsyncState ;\n\t\t    \n\t\t    if (!receiving_data.Contains(socketData.m_clientNumber))\n\t\t    {\t\t    \n\t\t\t    receiving_data.Add(socketData.m_clientNumber);\t\t\n\t\t\t\t\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// Complete the BeginReceive() asynchronous call by EndReceive() method\n\t\t\t\t\t// which will return the number of characters written to the stream \n\t\t\t\t\t// by the client\n\t\t\t\t\tint iRx  = socketData.m_currentSocket.EndReceive (asyn);\n\t\t\t\t\tchar[] chars = new char[iRx +  1];\n\t\t\t\t\t\n\t\t\t\t\t// Extract the characters as a buffer\n\t\t\t\t\tSystem.Text.Decoder d = System.Text.Encoding.UTF8.GetDecoder();\n\t\t\t\t\td.GetChars(socketData.dataBuffer, 0, iRx, chars, 0);\n\t\n\t                if (chars.Length > 1)\n\t                {\t                \t                \n\t                    string szData = \"\";\n\t                    for (int ch = 0; ch < chars.Length; ch++)\n\t                    {\n\t                        if (chars[ch] != 0) szData += chars[ch];\n\t                    }\n\t\n\t                    // add the data to the receive buffer\n\t                    if (receive_buffer == null)\n\t                    {\n\t                        receive_buffer = new ArrayList();\n                            // create a thread which will process incoming receipts\n                            // in an organised fashion\t                        \t                        \n                            ThreadServerReceive receive = new ThreadServerReceive(new WaitCallback(OnDataReceivedCallback), this, receive_buffer);\n                            Thread receive_thread = new Thread(new ThreadStart(receive.Execute));\n                            receive_thread.Priority = ThreadPriority.Normal;\n                            receive_thread.Start();\n                        }\n\t                    \n\t                    // push data into the receive buffer\t                    \t                    \t                    \t                    }\n\t                    receive_buffer.Add(szData);\n\t                    receive_buffer.Add(socketData.m_clientNumber);\n\t                    \t\n\t                }\n\t\n\t\t\t\t\t// Continue the waiting for data on the Socket\n\t\t\t\t\tif (!disconnect_now.Contains(socketData.m_clientNumber))\n\t\t\t\t\t{\n\t\t\t\t\t    WaitForData(socketData.m_currentSocket, socketData.m_clientNumber );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t    disconnect_now.Remove(socketData.m_clientNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (ObjectDisposedException )\n\t\t\t\t{\n\t\t\t\t\tSystem.Diagnostics.Debugger.Log(0,\"1\",\"\\nOnDataReceived: Socket has been closed\\n\");\n\t\t\t\t}\n\t\t\t\tcatch(SocketException se)\n\t\t\t\t{\n\t\t\t\t\tif(se.ErrorCode == 10054) // Error code for Connection reset by peer\n\t\t\t\t\t{\t\n\t\t\t\t\t\tstring msg = \"Goodbye client \" + socketData.m_clientNumber.ToString();\n\t\t\t\t\t\tConsole.WriteLine(msg);\n\t\n\t\t\t\t\t\t// Remove the reference to the worker socket of the closed client\n\t\t\t\t\t\t// so that this object will get garbage collected\n                        int index = socketData.m_clientNumber - 1;\n                        if ((index > -1) && (index < m_workerSocketList.Count)) m_workerSocketList[index] = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(\"dpslamServer/OnDataReceived(\" + PortNumber.ToString() + \")/\" + se.Message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treceiving_data.Remove(socketData.m_clientNumber);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    Console.WriteLine(\"Receive conflict: Data already being received from client \" + socketData.m_clientNumber.ToString());\n\t\t\t\tdisconnect_client.Add(socketData.m_clientNumber);\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// broadcast a set of devices and their properties\n\t\t/// </summary>\n\t\t/// <param name=\"broadcast_devices\">list containing device Ids and property names</param>\n\t\t/// <param name=\"quiet\">report the boradcast xml to the console or not</param>\n        public void Broadcast(\n            ArrayList broadcast_devices,\n            bool quiet)\n        {\n            if (broadcast_devices.Count > 0)\n            {\n                // get the changed state information as xml\n                XmlDocument doc = GetDeviceStatus(broadcast_devices, STATUS_BROADCAST);\n                string statusStr = doc.InnerXml;\n                // send the xml to connected clients\n                Send(statusStr);\n                if (!quiet)\n                {\n                    Console.WriteLine(\"Broadcasting:\");\n                    Console.WriteLine(statusStr);\n                }\n            }\n        }\n        /// <summary>\n        /// safely remove a connected client\n        /// </summary>\n        /// <param name=\"clientnumber\">index number of the client to be removed</param>\n        /// <param name=\"m_workerSocketList\">list of open sockets</param>\n        /// <param name=\"disconnect_client\">list if client numbers to be disconnected</param>\n        /// <param name=\"usage\">usage model</param>\n        protected static void RemoveClient(\n            int clientnumber, \n            ArrayList m_workerSocketList,\n            List<int> disconnect_client)\n        {\n            if ((clientnumber - 1 > -1) && (clientnumber - 1 < m_workerSocketList.Count))\n            {\n                Socket workerSocket = (Socket)m_workerSocketList[clientnumber - 1];\n                if (workerSocket != null)\n                {                \n                    workerSocket.BeginDisconnect(true, new AsyncCallback(OnClientDisconnect), null);\n                    m_workerSocketList.RemoveAt(clientnumber - 1);\n                }\n            }\n            \n            if (disconnect_client != null)\n                if (disconnect_client.Contains(clientnumber)) \n                    disconnect_client.Remove(clientnumber);\n        }\n        \n        /// <summary>\n        /// returns the number of connected clients\n        /// </summary>\n        /// <returns>number of connected clients</returns>\n        public int GetNoOfConnectedClients()\n        {\n            if (m_workerSocketList != null)\n                return(m_workerSocketList.Count);\n            else\n                return(0);\n        }\n        // list of client numbers currently sending data\n        protected List<int> sending_data = new List<int>();\n        /// <summary>\n        /// sends a message to all connected clients\n        /// </summary>\n        /// <param name=\"msg\"></param>\n\t\tpublic void Send(string msg)\n\t\t{\t\t    \n\t\t    Socket workerSocket = null;\n\t\t    \t\t    \n\t\t\t//msg = \"dpslamServer: \" + msg + \"\\n\";\n\t\t\tbyte[] byData = System.Text.Encoding.ASCII.GetBytes(msg);\t\t\t\t\n\t\t\tfor(int i = m_workerSocketList.Count - 1; i >= 0; i--)\n\t\t\t{\n\t\t\t    workerSocket = (Socket)m_workerSocketList[i];\n\t\t\t    bool disconnect = false;\n\t\t\t    if (disconnect_client != null) disconnect = disconnect_client.Contains(i);\n\t\t\t    if (!disconnect)\n\t\t\t    {\n\t\t\t\t\tif(workerSocket!= null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(workerSocket.Connected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t    // if not already sending data to this client\n\t\t\t\t\t\t    if (!sending_data.Contains(i))\n\t\t\t\t\t\t    {\n\t\t\t\t\t\t        sending_data.Add(i);\n\t\t\t\t\t\t        \n\t\t\t\t\t\t\t    try\n\t\t\t\t\t\t\t    {\n\t\t\t\t\t\t\t\t    workerSocket.Send(byData);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcatch(SocketException se)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t                Console.WriteLine(\"dpslamServer/Send(\" + PortNumber.ToString() + \")/\" + se.Message);\n\t\t\t\t\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tsending_data.Remove(i);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "length": 2031, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "cf8e0d5f2adf8762eb153e24cdc6edacca8bb1e84f6b7c14"}
{"input": "", "context": "package eu.applabs.crowdsensingfitnesslibrary.portal.google;\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.content.IntentSender;\nimport android.os.Bundle;\nimport android.util.Log;\nimport com.google.android.gms.common.ConnectionResult;\nimport com.google.android.gms.common.GooglePlayServicesUtil;\nimport com.google.android.gms.common.Scopes;\nimport com.google.android.gms.common.api.GoogleApiClient;\nimport com.google.android.gms.common.api.Scope;\nimport com.google.android.gms.fitness.Fitness;\nimport com.google.android.gms.fitness.data.Bucket;\nimport com.google.android.gms.fitness.data.DataPoint;\nimport com.google.android.gms.fitness.data.DataSet;\nimport com.google.android.gms.fitness.data.DataType;\nimport com.google.android.gms.fitness.data.Field;\nimport com.google.android.gms.fitness.request.DataReadRequest;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\nimport eu.applabs.crowdsensingfitnesslibrary.FitnessLibrary;\nimport eu.applabs.crowdsensingfitnesslibrary.data.ActivityBucket;\nimport eu.applabs.crowdsensingfitnesslibrary.data.Person;\nimport eu.applabs.crowdsensingfitnesslibrary.data.StepBucket;\nimport eu.applabs.crowdsensingfitnesslibrary.portal.Portal;\nimport eu.applabs.crowdsensingfitnesslibrary.settings.SettingsManager;\npublic class GooglePortal extends Portal implements GoogleApiClient.ConnectionCallbacks,\n        GoogleApiClient.OnConnectionFailedListener, ReadFitnessThread.IReadFitnessThreadListener {\n    private static final String sClassName = GooglePortal.class.getSimpleName();\n    private static final int sRequestOAuth = 1;\n    //private int mRequestId = 0;\n    private Activity mActivity = null;\n    private boolean mAuthInProgress = false;\n    private GoogleApiClient mGoogleApiClient = null;\n    private SettingsManager mSettingsManager = null;\n    private boolean mConnected = false;\n    private Map<Integer, RequestType> mRequestMap = null;\n    public void logDataSet(List<DataSet> list) {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd-MM-yyyy\");\n        if(list != null) {\n            for(DataSet dataSet : list) {\n                Log.i(sClassName, \"Data returned for Data type: \" + dataSet.getDataType().getName());\n                for (DataPoint dp : dataSet.getDataPoints()) {\n                    Log.i(sClassName, \"Data point:\");\n                    Log.i(sClassName, \"\\tType: \" + dp.getDataType().getName());\n                    Log.i(sClassName, \"\\tStart: \" + dateFormat.format(dp.getStartTime(TimeUnit.MILLISECONDS)));\n                    Log.i(sClassName, \"\\tEnd: \" + dateFormat.format(dp.getEndTime(TimeUnit.MILLISECONDS)));\n                    for(Field field : dp.getDataType().getFields()) {\n                        Log.i(sClassName, \"\\tField: \" + field.getName() + \" Value: \" + dp.getValue(field));\n                    }\n                }\n            }\n        }\n    }\n    public List<StepBucket> convertToStepBucketList(List<Bucket> list) {\n        List<StepBucket> returnList = new ArrayList<>();\n        try {\n            if(list != null) {\n                for(Bucket bucket : list) {\n                    List<DataSet> dataSets = bucket.getDataSets();\n                    if(dataSets != null) {\n                        for(DataSet dataSet : dataSets) {\n                            for(DataPoint dp : dataSet.getDataPoints()) {\n                                StepBucket stepBucket = new StepBucket();\n                                Field field = getField(dp.getDataType().getFields(), \"steps\");\n                                if(field != null) {\n                                    stepBucket.setStepCount(dp.getValue(field).asInt());\n                                }\n                                Calendar c = Calendar.getInstance();\n                                c.setTimeInMillis(dp.getStartTime(TimeUnit.MILLISECONDS));\n                                stepBucket.setStepStartDate(c.getTime());\n                                c.setTimeInMillis(dp.getEndTime(TimeUnit.MILLISECONDS));\n                                stepBucket.setStepEndDate(c.getTime());\n                                returnList.add(stepBucket);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            // Something went wrong\n        }\n        return returnList;\n    }\n    public List<ActivityBucket> convertToActivityBucketList(List<Bucket> list) {\n        List<ActivityBucket> returnList = new ArrayList<>();\n        try {\n            if (list != null) {\n                for (Bucket bucket : list) {\n                    List<DataSet> dataSets = bucket.getDataSets();\n                    if (dataSets != null) {\n                        for (DataSet dataSet : dataSets) {\n                            for (DataPoint dp : dataSet.getDataPoints()) {\n                                ActivityBucket activityBucket = new ActivityBucket();\n                                Field field = getField(dp.getDataType().getFields(), \"num_segments\");\n                                if (field != null) {\n                                    activityBucket.setActivityCount(dp.getValue(field).asInt());\n                                }\n                                field = getField(dp.getDataType().getFields(), \"activity\");\n                                if (field != null) {\n                                    activityBucket.setActivityType(\n                                            eu.applabs.crowdsensingfitnesslibrary.data.Activity.Type.values()[dp.getValue(field).asInt()]);\n                                }\n                                field = getField(dp.getDataType().getFields(), \"duration\");\n                                if (field != null) {\n                                    activityBucket.setActivityDuration(dp.getValue(field).asInt());\n                                }\n                                Calendar c = Calendar.getInstance();\n                                c.setTimeInMillis(dp.getStartTime(TimeUnit.MILLISECONDS));\n                                activityBucket.setActivityStartDate(c.getTime());\n                                c.setTimeInMillis(dp.getEndTime(TimeUnit.MILLISECONDS));\n                                activityBucket.setActivityEndDate(c.getTime());\n                                returnList.add(activityBucket);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            // Something went wrong\n        }\n        return returnList;\n    }\n    public Field getField(List<Field> list, String name) {\n        for(Field field : list) {\n            if(field.getName().compareTo(name) == 0) {\n                return field;\n            }\n        }\n        return null;\n    }\n    @Override\n    public PortalType getPortalType() {\n        return PortalType.Google;\n    }\n    @Override\n    public void login(Activity activity) {\n        mActivity = activity;\n        mRequestMap = new HashMap<>();\n        mSettingsManager = new SettingsManager(activity);\n        mGoogleApiClient = new GoogleApiClient.Builder(mActivity)\n                .addApi(Fitness.HISTORY_API)\n                .addScope(new Scope(Scopes.FITNESS_LOCATION_READ))\n                .addScope(new Scope(Scopes.FITNESS_NUTRITION_READ))\n                .addScope(new Scope(Scopes.FITNESS_ACTIVITY_READ))\n                .addScope(new Scope(Scopes.FITNESS_BODY_READ))\n                .addConnectionCallbacks(this)\n                .addOnConnectionFailedListener(this)\n                .build();\n        if(mGoogleApiClient != null) {\n            mGoogleApiClient.connect();\n        }\n    }\n    @Override\n    public void logout() {\n        if(mGoogleApiClient != null) {\n            mGoogleApiClient.disconnect();\n            mGoogleApiClient = null;\n            mConnected = false;\n        }\n        if(mSettingsManager != null) {\n            List<PortalType> list = mSettingsManager.getConnectedServices();\n            if(list.contains(PortalType.Google)) {\n                list.remove(PortalType.Google);\n                mSettingsManager.setConnectedServices(list);\n            }\n        }\n        notifyPortalConnectionStateChanged();\n    }\n    @Override\n    public boolean isConnected() {\n        return mConnected;\n    }\n    @Override\n    public boolean checkActivityResult(int requestCode, int resultCode, Intent data) {\n        if(requestCode == sRequestOAuth) {\n            mAuthInProgress = false;\n            if(resultCode == Activity.RESULT_OK) {\n                if (mGoogleApiClient != null\n                        && !mGoogleApiClient.isConnecting()\n                        && !mGoogleApiClient.isConnected()) {\n                    mGoogleApiClient.connect();\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    @Override\n    public void getPerson(int requestId) {\n        if(mGoogleApiClient != null && mGoogleApiClient.isConnected()) {\n        }\n        notifyPersonReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Error, requestId, new Person());\n    }\n    @Override\n    public void getSteps(long startTime,\n                         long endTime,\n                         TimeUnit rangeUnit,\n                         int duration,\n                         TimeUnit durationUnit,\n                         int requestId) {\n        if(mGoogleApiClient != null && mGoogleApiClient.isConnected()) {\n            DataReadRequest request = new DataReadRequest.Builder()\n                    .aggregate(DataType.TYPE_STEP_COUNT_DELTA, DataType.AGGREGATE_STEP_COUNT_DELTA)\n                    .bucketByTime(duration, durationUnit)\n                    .setTimeRange(startTime, endTime, rangeUnit)\n                    .build();\n            //int requestId = mRequestId++;\n            mRequestMap.put(requestId, RequestType.Step);\n            new ReadFitnessThread(mGoogleApiClient, requestId, request, this).start();\n            return;\n        }\n        notifyStepsReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Error, requestId, new ArrayList<StepBucket>());\n    }\n    @Override\n    public void getActivities(long startTime,\n                                 long endTime,\n                                 TimeUnit rangeUnit,\n                                 int duration,\n                                 TimeUnit durationUnit,\n                                 int requestId) {\n        if(mGoogleApiClient != null && mGoogleApiClient.isConnected()) {\n            DataReadRequest request = new DataReadRequest.Builder()\n                    .aggregate(DataType.TYPE_ACTIVITY_SEGMENT, DataType.AGGREGATE_ACTIVITY_SUMMARY)\n                    .bucketByTime(duration, durationUnit)\n                    .setTimeRange(startTime, endTime, rangeUnit)\n                    .build();\n            //int requestId = mRequestId++;\n            mRequestMap.put(requestId, RequestType.Activity);\n            new ReadFitnessThread(mGoogleApiClient, requestId, request, this).start();\n            return;\n        }\n        notifyActivitiesReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Error, requestId, new ArrayList<ActivityBucket>());\n    }\n    // GoogleApiClient.ConnectionCallbacks\n    @Override\n    public void onConnected(Bundle bundle) {\n        mConnected = true;\n        if(mSettingsManager != null) {\n            List<PortalType> list = mSettingsManager.getConnectedServices();\n            if(!list.contains(PortalType.Google)) {\n                list.add(PortalType.Google);\n                mSettingsManager.setConnectedServices(list);\n            }\n        }\n        notifyPortalConnectionStateChanged();\n    }\n    @Override\n    public void onConnectionSuspended(int i) {\n        int x = 0;\n        x++;\n    }\n    // GoogleApiClient.OnConnectionFailedListener\n    @Override\n    public void onConnectionFailed(ConnectionResult result) {\n        if (!result.hasResolution()) {\n            GooglePlayServicesUtil.getErrorDialog(result.getErrorCode(), mActivity, 0).show();\n            return;\n        }\n        if (!mAuthInProgress) {\n            try {\n                mAuthInProgress = true;\n                result.startResolutionForResult(mActivity, sRequestOAuth);\n            } catch (IntentSender.SendIntentException e) {\n                Log.e(sClassName, \"Exception while starting resolution activity\", e);\n            }\n        }\n    }\n    // ReadFitnessThread.IReadFitnessThreadListener\n    @Override\n    public void onSuccess(int requestId, List<Bucket> list) {\n        if(mRequestMap != null && mRequestMap.containsKey(requestId)) {\n            Portal.RequestType type = mRequestMap.get(requestId);\n", "answers": ["            for(Bucket bucket : list) {"], "length": 768, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "a0064864baa8bd09ff6fc63712208d825b29b2d8f56ab567"}
{"input": "", "context": "#!/usr/bin/python\n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 2 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Library General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software\n#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n#\n# gen_callbacks.py\n# Copyright (C) 2010 Simon Newton\nimport textwrap\ndef PrintLongLine(line):\n  optional_nolint = ''\n  if len(line) > 80:\n    optional_nolint = '  // NOLINT(whitespace/line_length)'\n  print ('%s%s' % (line, optional_nolint))\ndef Header():\n  print textwrap.dedent(\"\"\"\\\n  /*\n   * This library is free software; you can redistribute it and/or\n   * modify it under the terms of the GNU Lesser General Public\n   * License as published by the Free Software Foundation; either\n   * version 2.1 of the License, or (at your option) any later version.\n   *\n   * This library is distributed in the hope that it will be useful,\n   * but WITHOUT ANY WARRANTY; without even the implied warranty of\n   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   * Lesser General Public License for more details.\n   *\n   * You should have received a copy of the GNU Lesser General Public\n   * License along with this library; if not, write to the Free Software\n   * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n   *\n   * Callback.h\n   * @brief Function objects.\n   * Copyright (C) 2005-2010 Simon Newton\n   *\n   * THIS FILE IS AUTOGENERATED!\n   * Please run edit & run gen_callbacks.py if you need to add more types.\n   */\n  /**\n   * @defgroup callbacks Callbacks\n   * @brief Function objects.\n   *\n   * Callbacks are powerful objects that behave like function pointers. They\n   * can be constructed with a pointer to a either plain function or member\n   * function. Argments can be provided at either creation time or execution\n   * time.\n   *\n   * The SingleUse varient of a Callback automatically delete itself after it\n   * has been executed.\n   *\n   * Callbacks are used throughout OLA to reduce the coupling between classes\n   * and make for more modular code.\n   *\n   * Avoid creating Callbacks by directly calling the constructor. Instead use\n   * the NewSingleCallback() and NewCallback() helper methods.\n   *\n   * @examplepara Simple function pointer replacement.\n   *   @code\n   *   // wrap a function that takes no args and returns a bool\n   *   SingleUseCallback<bool> *callback1 = NewSingleCallback(&Function0);\n   *\n   *   // some time later\n   *   bool result = callback1->Run();\n   *   // callback1 has deleted itself at this point\n   *   @endcode\n   *\n   * @examplepara Method pointer with a single bound argument\n   *   @code\n   *   // Create a Callback for Method1 of the Object class and bind TEST_VALUE\n   *   // as the first argument.\n   *   Callback<void> *callback2 = NewCallback(object, &Object::Method1,\n   *                                           TEST_VALUE);\n   *\n   *   // This will call object->Method1(TEST_VALUE)\n   *   callback2->Run();\n   *   // this wasn't a SingleUse Callback, so callback is still around and\n   *   // needs to be deleted manually.\n   *   delete callback2;\n   *   @endcode\n   *\n   * @examplepara Method pointer that takes a single argument at execution time.\n   *   @code\n   *   // Create a Callback for a method that takes 1 argument and returns void.\n   *   BaseCallback1<void, unsigned int> *callback3 = NewCallback(\n   *       object, &Object::Method1);\n   *\n   *   // Call object->Method1(TEST_VALUE)\n   *   callback3->Run(TEST_VALUE);\n   *   // callback3 is still around at this stage\n   *   delete callback3;\n   *   @endcode\n   *\n   * @examplepara Method pointer with one bound argument and one execution time\n   * argument.\n   *   @code\n   *   // Create a callback for a method that takes 2 args and returns void\n   *   BaseCallback2<void, int, int> *callback4 = NewSingleCallback(\n   *       object,\n   *       &Object::Method2,\n   *       TEST_VALUE);\n   *\n   *   // This calls object->Method2(TEST_VALUE, TEST_VALUE2);\n   *   callback4->Run(TEST_VALUE2);\n   *   // callback4 is still around\n   *   delete callback4;\n   *   @endcode\n   *\n   * @note The code in Callback.h is autogenerated by gen_callbacks.py. Please\n   * run edit & run gen_callbacks.py if you need to add more types.\n   *\n   */\n  /**\n   * @addtogroup callbacks\n   * @{\n   * @file Callback.h\n   * @}\n   */\n  #ifndef INCLUDE_OLA_CALLBACK_H_\n  #define INCLUDE_OLA_CALLBACK_H_\n  namespace ola {\n  /**\n   * @addtogroup callbacks\n   * @{\n   */\n  \"\"\")\ndef Footer():\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @}\n   */\n  }  // namespace ola\n  #endif  // INCLUDE_OLA_CALLBACK_H_\"\"\")\ndef GenerateBase(number_of_args):\n  \"\"\"Generate the base Callback classes.\"\"\"\n  optional_comma = ''\n  if number_of_args > 0:\n    optional_comma = ', '\n  typenames = ', '.join('typename Arg%d' % i for i in xrange(number_of_args))\n  arg_list = ', '.join('Arg%d arg%d' % (i, i) for i in xrange(number_of_args))\n  args = ', '.join('arg%d' % i for i in xrange(number_of_args))\n  arg_types = ', '.join('Arg%d' % i for i in xrange(number_of_args))\n  # generate the base callback class\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @brief The base class for all %d argument callbacks.\n   */\"\"\" % number_of_args)\n  PrintLongLine('template <typename ReturnType%s%s>' %\n                (optional_comma, typenames))\n  print 'class BaseCallback%d {' % number_of_args\n  print '  public:'\n  print '    virtual ~BaseCallback%d() {}' % number_of_args\n  PrintLongLine('    virtual ReturnType Run(%s) = 0;' % arg_list)\n  print '};'\n  print ''\n  # generate the multi-use version of the callback\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @brief A %d argument callback which can be called multiple times.\n   */\"\"\" % number_of_args)\n  PrintLongLine('template <typename ReturnType%s%s>' %\n                (optional_comma, typenames))\n  print ('class Callback%d: public BaseCallback%d<ReturnType%s%s> {' %\n         (number_of_args, number_of_args, optional_comma, arg_types))\n  print '  public:'\n  print '    virtual ~Callback%d() {}' % number_of_args\n  PrintLongLine('    ReturnType Run(%s) { return this->DoRun(%s); }' %\n         (arg_list, args))\n  print '  private:'\n  print '    virtual ReturnType DoRun(%s) = 0;' % arg_list\n  print '};'\n  print ''\n  # generate the single-use version of the callback\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @brief A %d argument callback which deletes itself after it's run.\n   */\"\"\" % number_of_args)\n  PrintLongLine('template <typename ReturnType%s%s>' %\n                (optional_comma, typenames))\n  PrintLongLine('class SingleUseCallback%d: public BaseCallback%d<ReturnType%s%s> {' %\n                (number_of_args, number_of_args, optional_comma, arg_types))\n  print '  public:'\n  print '    virtual ~SingleUseCallback%d() {}' % number_of_args\n  print '    ReturnType Run(%s) {' % arg_list\n  print '      ReturnType ret = this->DoRun(%s);' % args\n  print '      delete this;'\n  print '      return ret;'\n  print '    }'\n  print '  private:'\n  print '    virtual ReturnType DoRun(%s) = 0;' % arg_list\n  print '};'\n  print ''\n  # the void specialization\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @brief A %d arg, single use callback that returns void.\n   */\"\"\" % number_of_args)\n  print 'template <%s>' % typenames\n  PrintLongLine('class SingleUseCallback%d<void%s%s>: public BaseCallback%d<void%s%s> {' %\n                (number_of_args, optional_comma, arg_types, number_of_args,\n                optional_comma, arg_types))\n  print '  public:'\n  print '    virtual ~SingleUseCallback%d() {}' % number_of_args\n  print '    void Run(%s) {' % arg_list\n  print '      this->DoRun(%s);' % args\n  print '      delete this;'\n  print '    }'\n  print '  private:'\n  print '    virtual void DoRun(%s) = 0;' % arg_list\n  print '};'\n  print ''\ndef GenerateHelperFunction(bind_count,\n                           exec_count,\n                           function_name,\n                           parent_class,\n                           is_method=True):\n  \"\"\"Generate the helper functions which create callbacks.\n  Args:\n    bind_count the number of args supplied at create time.\n    exec_count the number of args supplied at exec time.\n    function_name what to call the helper function\n    parent_class the parent class to use\n    is_method True if this is a method callback, False if this is a function\n      callback.\n    \"\"\"\n  optional_comma = ''\n  if bind_count > 0 or exec_count > 0:\n    optional_comma = ', '\n  typenames = (['typename A%d' % i for i in xrange(bind_count)] +\n               ['typename Arg%d' % i for i in xrange(exec_count)])\n  bind_types = ['A%d' % i for i in xrange(bind_count)]\n  exec_types = ['Arg%d' % i for i in xrange(exec_count)]\n  method_types = ', '.join(bind_types + exec_types)\n  if exec_count > 0:\n    exec_types = [''] + exec_types\n  exec_type_str = ', '.join(exec_types)\n  optional_class, ptr_name, signature = '', 'callback', '*callback'\n  if is_method:\n    optional_class, ptr_name, signature = (\n        'typename Class, ', 'method', 'Class::*method')\n  # The single use helper function\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @brief A helper function to create a new %s with %d\n   * create-time arguments and %d execution time arguments.\"\"\" %\n   (parent_class, bind_count, exec_count))\n  if is_method:\n    print \" * @tparam Class the class with the member function.\"\n  print \" * @tparam ReturnType the return type of the callback.\"\n  for i in xrange(bind_count):\n    print \" * @tparam A%d a create-time argument type.\" % i\n  for i in xrange(exec_count):\n    print \" * @tparam Arg%d an exec-time argument type.\" % i\n  if is_method:\n    print \" * @param object the object to call the member function on.\"\n    print (\" * @param method the member function pointer to use when executing \"\n           \"the callback.\");\n  else:\n    print (\" * @param callback the function pointer to use when executing the \"\n           \"callback.\")\n  for i in xrange(bind_count):\n    print \" * @param a%d a create-time argument.\" % i\n  if is_method:\n    print \" * @returns The same return value as the member function.\"\n  else:\n    print \" * @returns The same return value as the function.\"\n  print \" */\"\n  PrintLongLine('template <%stypename ReturnType%s%s>' %\n                (optional_class, optional_comma, ', '.join(typenames)))\n  PrintLongLine('inline %s%d<ReturnType%s>* %s(' %\n                (parent_class, exec_count, exec_type_str, function_name))\n  if is_method:\n    print '    Class* object,'\n  if bind_count:\n    print '    ReturnType (%s)(%s),' % (signature, method_types)\n    for i in xrange(bind_count):\n      suffix = ','\n      if i == bind_count - 1:\n        suffix = ') {'\n      print '    A%d a%d%s' % (i, i, suffix)\n  else:\n    print '    ReturnType (%s)(%s)) {' % (signature, method_types)\n  if is_method:\n    print '  return new MethodCallback%d_%d<Class,' % (bind_count, exec_count)\n  else:\n    print '  return new FunctionCallback%d_%d<' % (bind_count, exec_count)\n  PrintLongLine('                               %s%d<ReturnType%s>,' %\n                (parent_class, exec_count, exec_type_str))\n", "answers": ["  if bind_count > 0 or exec_count > 0:"], "length": 1549, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "b8ddcb433aa1bfe07017e01e1c838c3c2d78b8b973eabc54"}
{"input": "", "context": "from django.db.models.loading import get_model\nfrom metadata.utils.date_range import in_range\nfrom django.shortcuts import render\nfrom django.utils import simplejson\nfrom django.http import Http404, HttpResponse\nfrom django.conf import settings\nfrom schedule.utils import range as s_range\nimport csv\nimport json\n# This is used to limit range_XYZ requests to prevent them from\n# DoSing URY accidentally.\nMAX_RANGE_LENGTH = 10 * 24 * 60 * 60  # Ten days\ndef laconia_error(request, message, status=403):\n    \"\"\"\n    Throws an error from the laconia interface.\n    The default status code emitted is 403 Forbidden.\n    \"\"\"\n    return render(\n        request,\n        'laconia/error.txt',\n        {'message': message},\n        content_type='text/plain',\n        status=status\n    )\ndef current_show_location_and_time(request):\n    \"\"\"Sends the current show location, time and show ID as text.\"\"\"\n    # This just expects the current show to be given by context processors now.\n    return render(\n        request,\n        'laconia/current-show-location-and-time.txt',\n        content_type=\"text/plain\"\n    )\ndef current_show_and_next(request):\n    \"\"\"Sends info about the current show as JSON.\"\"\"\n    # In case the worst happens and the schedule doesn't come back with\n    # two items, we're very cautious about the size of day.\n    day = list(s_range.day(limit=2))\n    json_data = {}\n    if len(day) >= 1:\n        on_air = day[0]\n        if on_air.player_image:\n            image = on_air.player_image.url\n        else:\n            image = settings.STATIC_URL + \"img/default_show_player.png\"\n        json_data.update(\n            {\n                \"onAir\": on_air.title,\n                \"onAirDesc\": on_air.description,\n                \"onAirPres\": on_air.by_line(),\n                \"onAirTime\": '{:%H:%M} - {:%H:%M}'.format(\n                    on_air.start_time, on_air.end_time\n                ),\n                \"onAirImg\": image,\n            }\n        )\n    if len(day) >= 2:\n        up_next = day[1]\n        json_data.update(\n            {\n                \"upNext\": up_next.title,\n                \"upNextDesc\": up_next.description,\n                \"upNextPres\": up_next.by_line(),\n                \"upNextTime\": '{:%H:%M} - {:%H:%M}'.format(\n                    up_next.start_time, up_next.end_time\n                )\n            }\n        )\n    return HttpResponse(\n        simplejson.dumps(json_data), content_type=\"application/json\"\n    )\ndef range_querystring(request, appname, modelname, format='json'):\n    \"\"\"\n    Wrapper to `range` that expects its date range in the query\n    string.\n    Since this view mainly exists to accommodate FullCalendar, which\n    expects its output in JSON, the default format is JSON as opposed\n    to CSV.\n    \"\"\"\n    if 'start' not in request.GET or 'end' not in request.GET:\n        raise Http404\n    return range(\n        request,\n        appname,\n        modelname,\n        request.GET['start'],\n        request.GET['end'],\n        format\n    )\ndef range(request, appname, modelname, start, end, format='csv'):\n    \"\"\"\n    Retrieves a summary about any items in the given model that fall\n    within the given range.\n    Items are returned if any time within their own time range falls\n    within the given range.\n    If format is 'csv', the result is delivered as a CSV if the given\n    model exists and supports range queries, or a HTTP 404 if not.\n    The CSV may be empty.\n    If format is 'fullcal', the result is instead a JSON list\n    corresponding to the schema at http://arshaw.com/fullcalendar -\n    again if the given model cannot be queried for range a HTTP 404\n    will be emitted.\n    If the model supports metadata queries, the 'title' and\n    'description' metadata will be pulled if it exists.\n    If the model supports credit queries, the by-line will also be\n    added.\n    \"\"\"\n    model = get_model(appname, modelname)\n    if model is None:\n        raise Http404\n    start = int(start)\n    end = int(end)\n    # Request sanity checking\n    if (end - start) < 0:\n        response = laconia_error(\n            request,\n            'Requested range is negative.'\n        )\n    elif (end - start) > MAX_RANGE_LENGTH:\n        response = laconia_error(\n            request,\n            'Requested range is too long (max: {0} seconds)'.format(\n                MAX_RANGE_LENGTH\n            )\n        )\n    else:\n        try:\n            items = in_range(model, start, end)\n        except AttributeError:\n            # Assuming this means the model can't do range-based ops\n            raise Http404\n        filename = u'{0}-{1}-{2}-{3}'.format(\n            appname,\n            modelname,\n            start,\n            end\n        )\n        if format == 'csv':\n            f = range_csv\n        elif format == 'json':\n            f = range_json\n        else:\n            raise ValueError('Invalid format specifier.')\n        response = f(filename, items)\n    return response\ndef range_csv(filename, items):\n    \"\"\"\n    Returns a range query result in CSV format.\n    The order of items in the CSV rows are:\n    1) Primary key\n    2) Start time as UNIX timestamp\n    3) End time as UNIX timestamp\n    4) 'title' from default metadata strand, if metadata exists;\n       else blank\n    5) 'description' from default metadata strand, if metadata exists;\n       else blank\n    6) By-line, if credits exist; else blank\n    \"\"\"\n    response = HttpResponse(mimetype='text/csv')\n    response['Content-Disposition'] = (\n        u'attachment; filename=\"{0}.csv\"'.format(filename)\n    )\n    writer = csv.writer(response)\n    for item in items:\n        writer.writerow([\n            item.pk,\n            item.range_start_unix(),\n            item.range_end_unix(),\n            getattr(item, 'title', ''),\n            getattr(item, 'description', ''),\n            getattr(item, 'by_line', lambda x: '')()\n        ])\n    return response\ndef range_item_title(item):\n    \"\"\"\n    Returns the most sensible human-readable title for the item.\n    This is either the 'text'/'title' metadatum if the item supports\n    metadata, or the empty string (for loggerng compatibility\n    purposes, primarily).\n    \"\"\"\n    return getattr(item, 'title', '')\ndef range_item_dict(item):\n    \"\"\"\n    Returns a dictionary representing th