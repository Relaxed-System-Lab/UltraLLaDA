{"input": "", "context": "/**\n * \n */\npackage com.gint.app.bisis4.client.editor.inventar;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.FocusAdapter;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSpinner;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport net.miginfocom.swing.MigLayout;\nimport com.gint.app.bisis4.client.BisisApp;\nimport com.gint.app.bisis4.client.editor.Messages;\nimport com.gint.app.bisis4.format.HoldingsDataCoders;\nimport com.gint.app.bisis4.format.UValidatorException;\nimport com.gint.app.bisis4.records.Primerak;\n/**\n * @author Bojana\n *\n */\npublic class RaspodelaFrame extends JInternalFrame {\n\t\n\tprivate JTable raspodelaTable;\t\n\tprivate JScrollPane raspodelaScrollPane;\n\t\n\tprivate JPanel raspodelaButtonsPanel;\t\n\tprivate JButton sacuvajButton;\n\tprivate JButton odustaniButton;\n\t\n\tprivate JTextField brojPrimTxtFld;\n\tprivate JTextField preostaloTxtFld;\n\tprivate CodedValuePanel odeljenjePanel;\n\tprivate CodedValuePanel invKnjPanel;\n\tprivate CodedValuePanel podlokacijaPanel;\n\t\n\tprivate JSpinner raspodelaSpinner;\n\tprivate JButton dodajButton;\n\t\n\tprivate InventarPanel inventarPanel;\t\n\tprivate RaspodelaTableModel raspodelaTableModel;\n\t\n  private boolean monograph = false;\n\t\n\t\n\tpublic RaspodelaFrame(InventarPanel mp) {\n    super(\"Raspodela primeraka\", true, true, false, false);\n    this.monograph = mp instanceof MonographInventarPanel;\n    if(!monograph) setTitle(\"Raspodela godina\");\n\t\t\n\t\tthis.inventarPanel = mp;\n\t\tthis.setSize(new Dimension(800,400));\n\t\tcreate();\t\t\n\t}\n\t\n\tprivate void create(){\t\t\n\t\traspodelaTable = new JTable();\n\t\tbrojPrimTxtFld = new JTextField();\n\t\tpreostaloTxtFld = new JTextField();\n\t\tdodajButton = new JButton(new ImageIcon(RaspodelaFrame.class\n\t\t\t\t.getResource(\"/com/gint/app/bisis4/client/images/Check16.png\")));\n\t\tpreostaloTxtFld.setEditable(false);\n\t\tpreostaloTxtFld.setFocusable(false);    \n\t\todeljenjePanel = new CodedValuePanel(HoldingsDataCoders.ODELJENJE_CODER,null);\n\t\todeljenjePanel.setDefaultOdeljenje();\n\t\tinvKnjPanel = new CodedValuePanel(HoldingsDataCoders.INVENTARNAKNJIGA_CODER,null);\n\t\tpodlokacijaPanel = new CodedValuePanel(HoldingsDataCoders.PODLOKACIJA_CODER, null);\n\t\traspodelaSpinner = new JSpinner();\t\t\n\t\traspodelaSpinner.setValue(new Integer(1));\n\t\tSpinnerNumberModel spinnerModel = new SpinnerNumberModel(0,0,1000,1);\n\t\traspodelaSpinner.setModel(spinnerModel);\n\t\traspodelaSpinner.setPreferredSize(new Dimension(40,20));\n\t\t\n\t\t//raspodelaSpinner.set\n\t\t\n\t\t\n\t\traspodelaTableModel = new RaspodelaTableModel(this);\n\t\traspodelaTable.setModel(raspodelaTableModel);\t\t\n\t\traspodelaTable.doLayout();\n\t\traspodelaScrollPane = new JScrollPane(raspodelaTable);\n\t\t\n\t\traspodelaButtonsPanel = new JPanel();\n\t\tsacuvajButton = new JButton(\"Raspodeli\");\n\t\tsacuvajButton.setIcon(new ImageIcon(getClass().getResource(\n        \"/com/gint/app/bisis4/client/images/ok.gif\")));\n\t\tsacuvajButton.setEnabled(false);\n\t\todustaniButton = new JButton(\"Odustani\");\n\t\todustaniButton.setIcon(new ImageIcon(getClass().getResource(\n        \"/com/gint/app/bisis4/client/images/remove.gif\")));\n\t\traspodelaButtonsPanel.setLayout(new GridBagLayout());\n\t\tGridBagConstraints cB = new GridBagConstraints();\n\t\tcB.gridx = 0;\n\t\tcB.gridy = 0;\n\t\tcB.weightx = 0.1;\n\t\traspodelaButtonsPanel.add(sacuvajButton,cB);\n\t\tinitialize();\n\t\t\n\t\tMigLayout layout = new MigLayout(\"\",\"[][]20[]\",\"[][]30[]0[]10[]0[]10[][]\");\n\t\tsetLayout(layout);\n\t\t\n\t\tadd(new JLabel(\"Broj knjiga za raspodelu:\"),\"align right\");\t\t\n\t\tadd(brojPrimTxtFld,\"wrap, width :30: \");\t\t\n\t\tadd(new JLabel(\"Preostalo:\"),\"align right\");\t\t\n\t\tadd(preostaloTxtFld,\"wrap, width :30:\");\n\t\n\t\tadd(new JLabel(\"Odeljenje:\"),\"cell 0 2 2 1\");\n\t\tadd(odeljenjePanel,\"cell 0 3 2 1\");\n\t\tadd(new JLabel(\"Inventarna knjiga:\"),\"cell 0 4 2 1\");\n\t\tadd(invKnjPanel,   \"cell 0 5 2 1\");\n\t\tadd(new JLabel(\"Podlokacija:\"),\"cell 0 6 2 1\");\n\t\tadd(podlokacijaPanel,   \"cell 0 7 2 1\");\n\t\t\n\t\tJPanel brPrim = new JPanel();\n\t\tbrPrim.setLayout(new MigLayout());\n\t\tbrPrim.add(new JLabel(\"Broj primeraka:\"));\n\t\tbrPrim.add(raspodelaSpinner,\"growy\");\n\t\tbrPrim.add(dodajButton);\t\t\n\t\tadd(brPrim,\"cell 0 8 2 1\");\t\t\n\t\tadd(raspodelaScrollPane,\"cell 2 0 1 7, grow\");\t\t\n\t\tJPanel buttonsPanel = new JPanel();\t\t\n\t\tbuttonsPanel.add(sacuvajButton);\n\t\tbuttonsPanel.add(odustaniButton);\n\t\tadd(buttonsPanel,\"cell 2 9 1 1, align right\");\n    \n    RaspodelaFocusTraversalPolicy policy = new RaspodelaFocusTraversalPolicy();\n    setFocusTraversalPolicy(policy);\n\t\t\n\t\t\n\t\t\n\t\t//actions\n\t\tbrojPrimTxtFld.addFocusListener(new FocusAdapter(){\n\t\t\tpublic void focusLost(FocusEvent e) {\n\t\t\t\thandleSetPreostalo();\n\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t\t\n\t\tdodajButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleAddPrimerak();\t\t\t\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tListSelectionModel lSelModel = raspodelaTable.getSelectionModel();\n\t\tlSelModel.addListSelectionListener(new ListSelectionListener(){\n\t\t\tpublic void valueChanged(ListSelectionEvent e) {\t\t\t\t\n\t\t\t\t\thandleLoadPrimerak();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t\t\n\t\t\n\t\traspodelaTable.addKeyListener(new KeyAdapter(){\n\t\t\tpublic void keyPressed(KeyEvent e) {\n\t\t\t\thandleKeys(e);\n\t\t\t}\t\t\t\n\t\t});\t\t\n\t\t\n\t\tsacuvajButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleRaspodeli();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\t\n\t\t\n\t\todustaniButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleClose();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t}\n\t\n\tprivate void initialize(){\n\t\tbrojPrimTxtFld.setText(\"0\");\n\t}\n\t\n\tprivate void handleAddPrimerak() {\t\n\t\tPrimerak primerak = ((MonographInventarPanel)inventarPanel).getPrimerakFromForm();\n\t\ttry {\n\t\t\tif (odeljenjePanel.getCode().equals(\"\") || odeljenjePanel.getCode().equals(\"\")) \n\t\t\t\tthrow new RaspodelaException(\"Nisu uneti svi podaci za raspodelu!\");\n\t\t\tprimerak.setOdeljenje(odeljenjePanel.getCode());\n", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "length": 451, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "5a3807e791e54f080c852b4a4ffaa104dc61429725efd608"}
{"input": "", "context": "#region License\n// Copyright (c) 2013, ClearCanvas Inc.\n// All rights reserved.\n// http://www.clearcanvas.ca\n//\n// This file is part of the ClearCanvas RIS/PACS open source project.\n//\n// The ClearCanvas RIS/PACS open source project is free software: you can\n// redistribute it and/or modify it under the terms of the GNU General Public\n// License as published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// The ClearCanvas RIS/PACS open source project is distributed in the hope that it\n// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along with\n// the ClearCanvas RIS/PACS open source project.  If not, see\n// <http://www.gnu.org/licenses/>.\n#endregion\n// This file is auto-generated by the ClearCanvas.Model.SqlServer.CodeGenerator project.\nnamespace ClearCanvas.ImageServer.Model.EntityBrokers\n{\n    using System;\n    using System.Xml;\n    using ClearCanvas.Enterprise.Core;\n    using ClearCanvas.ImageServer.Enterprise;\n    public partial class WorkQueueSelectCriteria : EntitySelectCriteria\n    {\n        public WorkQueueSelectCriteria()\n        : base(\"WorkQueue\")\n        {}\n        public WorkQueueSelectCriteria(WorkQueueSelectCriteria other)\n        : base(other)\n        {}\n        public override object Clone()\n        {\n            return new WorkQueueSelectCriteria(this);\n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ServerPartitionGUID\")]\n        public ISearchCondition<ServerEntityKey> ServerPartitionKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ServerPartitionKey\"))\n              {\n                 SubCriteria[\"ServerPartitionKey\"] = new SearchCondition<ServerEntityKey>(\"ServerPartitionKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"ServerPartitionKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"StudyStorageGUID\")]\n        public ISearchCondition<ServerEntityKey> StudyStorageKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"StudyStorageKey\"))\n              {\n                 SubCriteria[\"StudyStorageKey\"] = new SearchCondition<ServerEntityKey>(\"StudyStorageKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"StudyStorageKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueTypeEnum\")]\n        public ISearchCondition<WorkQueueTypeEnum> WorkQueueTypeEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueueTypeEnum\"))\n              {\n                 SubCriteria[\"WorkQueueTypeEnum\"] = new SearchCondition<WorkQueueTypeEnum>(\"WorkQueueTypeEnum\");\n              }\n              return (ISearchCondition<WorkQueueTypeEnum>)SubCriteria[\"WorkQueueTypeEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueStatusEnum\")]\n        public ISearchCondition<WorkQueueStatusEnum> WorkQueueStatusEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueueStatusEnum\"))\n              {\n                 SubCriteria[\"WorkQueueStatusEnum\"] = new SearchCondition<WorkQueueStatusEnum>(\"WorkQueueStatusEnum\");\n              }\n              return (ISearchCondition<WorkQueueStatusEnum>)SubCriteria[\"WorkQueueStatusEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueuePriorityEnum\")]\n        public ISearchCondition<WorkQueuePriorityEnum> WorkQueuePriorityEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueuePriorityEnum\"))\n              {\n                 SubCriteria[\"WorkQueuePriorityEnum\"] = new SearchCondition<WorkQueuePriorityEnum>(\"WorkQueuePriorityEnum\");\n              }\n              return (ISearchCondition<WorkQueuePriorityEnum>)SubCriteria[\"WorkQueuePriorityEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"FailureCount\")]\n        public ISearchCondition<Int32> FailureCount\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"FailureCount\"))\n              {\n                 SubCriteria[\"FailureCount\"] = new SearchCondition<Int32>(\"FailureCount\");\n              }\n              return (ISearchCondition<Int32>)SubCriteria[\"FailureCount\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ScheduledTime\")]\n        public ISearchCondition<DateTime> ScheduledTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ScheduledTime\"))\n              {\n                 SubCriteria[\"ScheduledTime\"] = new SearchCondition<DateTime>(\"ScheduledTime\");\n              }\n              return (ISearchCondition<DateTime>)SubCriteria[\"ScheduledTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"InsertTime\")]\n        public ISearchCondition<DateTime> InsertTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"InsertTime\"))\n              {\n                 SubCriteria[\"InsertTime\"] = new SearchCondition<DateTime>(\"InsertTime\");\n              }\n              return (ISearchCondition<DateTime>)SubCriteria[\"InsertTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"LastUpdatedTime\")]\n        public ISearchCondition<DateTime?> LastUpdatedTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"LastUpdatedTime\"))\n              {\n                 SubCriteria[\"LastUpdatedTime\"] = new SearchCondition<DateTime?>(\"LastUpdatedTime\");\n              }\n              return (ISearchCondition<DateTime?>)SubCriteria[\"LastUpdatedTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"FailureDescription\")]\n        public ISearchCondition<String> FailureDescription\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"FailureDescription\"))\n              {\n                 SubCriteria[\"FailureDescription\"] = new SearchCondition<String>(\"FailureDescription\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"FailureDescription\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"Data\")]\n        public ISearchCondition<XmlDocument> Data\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"Data\"))\n              {\n                 SubCriteria[\"Data\"] = new SearchCondition<XmlDocument>(\"Data\");\n              }\n              return (ISearchCondition<XmlDocument>)SubCriteria[\"Data\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ExternalRequestQueueGUID\")]\n        public ISearchCondition<ServerEntityKey> ExternalRequestQueueKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ExternalRequestQueueKey\"))\n              {\n                 SubCriteria[\"ExternalRequestQueueKey\"] = new SearchCondition<ServerEntityKey>(\"ExternalRequestQueueKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"ExternalRequestQueueKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ProcessorID\")]\n        public ISearchCondition<String> ProcessorID\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ProcessorID\"))\n              {\n                 SubCriteria[\"ProcessorID\"] = new SearchCondition<String>(\"ProcessorID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"ProcessorID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"GroupID\")]\n        public ISearchCondition<String> GroupID\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"GroupID\"))\n              {\n", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "length": 475, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "d1cdb285b1f1b73f8d637fde4adf331aa839bb2e31eb8599"}
{"input": "", "context": "/*\n * Handlers.cs - Implementation of the \"I18N.Common.Handlers\" class.\n *\n * Copyright (c) 2002  Southern Storm Software, Pty Ltd\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\nnamespace I18N.Common\n{\nusing System;\nusing System.Collections.Generic;\n// This class provides an internal list of handlers, for runtime\n// engines that do not implement the altered \"GetFile\" semantics.\n// The list must be kept up to date manually.\npublic sealed class Handlers\n{\n    public static readonly String[] List = {\n        \"I18N.CJK.CP932\",\n        \"I18N.CJK.CP936\",\n        \"I18N.CJK.CP949\",\n        \"I18N.CJK.CP950\",\n        \"I18N.CJK.CP50220\",\n        \"I18N.CJK.CP50221\",\n        \"I18N.CJK.CP50222\",\n        \"I18N.CJK.CP51932\",\n        \"I18N.CJK.CP51949\",\n        \"I18N.CJK.CP54936\",\n        \"I18N.CJK.ENCbig5\",\n        \"I18N.CJK.ENCgb2312\",\n        \"I18N.CJK.ENCshift_jis\",\n        \"I18N.CJK.ENCiso_2022_jp\",\n        \"I18N.CJK.ENCeuc_jp\",\n        \"I18N.CJK.ENCeuc_kr\",\n        \"I18N.CJK.ENCuhc\",\n        \"I18N.CJK.ENCgb18030\",\n        \"I18N.MidEast.CP1254\",\n        \"I18N.MidEast.ENCwindows_1254\",\n        \"I18N.MidEast.CP1255\",\n        \"I18N.MidEast.ENCwindows_1255\",\n        \"I18N.MidEast.CP1256\",\n        \"I18N.MidEast.ENCwindows_1256\",\n        \"I18N.MidEast.CP28596\",\n        \"I18N.MidEast.ENCiso_8859_6\",\n        \"I18N.MidEast.CP28598\",\n        \"I18N.MidEast.ENCiso_8859_8\",\n        \"I18N.MidEast.CP28599\",\n        \"I18N.MidEast.ENCiso_8859_9\",\n        \"I18N.MidEast.CP38598\",\n        \"I18N.MidEast.ENCwindows_38598\",\n        \"I18N.Other.CP1251\",\n        \"I18N.Other.ENCwindows_1251\",\n        \"I18N.Other.CP1257\",\n        \"I18N.Other.ENCwindows_1257\",\n        \"I18N.Other.CP1258\",\n        \"I18N.Other.ENCwindows_1258\",\n        \"I18N.Other.CP20866\",\n        \"I18N.Other.ENCkoi8_r\",\n        \"I18N.Other.CP21866\",\n        \"I18N.Other.ENCkoi8_u\",\n        \"I18N.Other.CP28594\",\n        \"I18N.Other.ENCiso_8859_4\",\n        \"I18N.Other.CP28595\",\n        \"I18N.Other.ENCiso_8859_5\",\n        \"I18N.Other.ISCIIEncoding\",\n        \"I18N.Other.CP57002\",\n        \"I18N.Other.CP57003\",\n        \"I18N.Other.CP57004\",\n        \"I18N.Other.CP57005\",\n        \"I18N.Other.CP57006\",\n        \"I18N.Other.CP57007\",\n        \"I18N.Other.CP57008\",\n        \"I18N.Other.CP57009\",\n        \"I18N.Other.CP57010\",\n        \"I18N.Other.CP57011\",\n        \"I18N.Other.ENCx_iscii_de\",\n        \"I18N.Other.ENCx_iscii_be\",\n        \"I18N.Other.ENCx_iscii_ta\",\n        \"I18N.Other.ENCx_iscii_te\",\n        \"I18N.Other.ENCx_iscii_as\",\n        \"I18N.Other.ENCx_iscii_or\",\n        \"I18N.Other.ENCx_iscii_ka\",\n        \"I18N.Other.ENCx_iscii_ma\",\n        \"I18N.Other.ENCx_iscii_gu\",\n        \"I18N.Other.ENCx_iscii_pa\",\n        \"I18N.Other.CP874\",\n        \"I18N.Other.ENCwindows_874\",\n        \"I18N.Rare.CP1026\",\n        \"I18N.Rare.ENCibm1026\",\n        \"I18N.Rare.CP1047\",\n        \"I18N.Rare.ENCibm1047\",\n        \"I18N.Rare.CP1140\",\n        \"I18N.Rare.ENCibm01140\",\n        \"I18N.Rare.CP1141\",\n        \"I18N.Rare.ENCibm01141\",\n        \"I18N.Rare.CP1142\",\n        \"I18N.Rare.ENCibm01142\",\n        \"I18N.Rare.CP1143\",\n        \"I18N.Rare.ENCibm01143\",\n        \"I18N.Rare.CP1144\",\n        \"I18N.Rare.ENCibm1144\",\n        \"I18N.Rare.CP1145\",\n        \"I18N.Rare.ENCibm1145\",\n        \"I18N.Rare.CP1146\",\n        \"I18N.Rare.ENCibm1146\",\n        \"I18N.Rare.CP1147\",\n        \"I18N.Rare.ENCibm1147\",\n        \"I18N.Rare.CP1148\",\n        \"I18N.Rare.ENCibm1148\",\n        \"I18N.Rare.CP1149\",\n        \"I18N.Rare.ENCibm1149\",\n        \"I18N.Rare.CP20273\",\n        \"I18N.Rare.ENCibm273\",\n        \"I18N.Rare.CP20277\",\n        \"I18N.Rare.ENCibm277\",\n        \"I18N.Rare.CP20278\",\n        \"I18N.Rare.ENCibm278\",\n        \"I18N.Rare.CP20280\",\n        \"I18N.Rare.ENCibm280\",\n        \"I18N.Rare.CP20284\",\n        \"I18N.Rare.ENCibm284\",\n        \"I18N.Rare.CP20285\",\n        \"I18N.Rare.ENCibm285\",\n        \"I18N.Rare.CP20290\",\n        \"I18N.Rare.ENCibm290\",\n        \"I18N.Rare.CP20297\",\n        \"I18N.Rare.ENCibm297\",\n        \"I18N.Rare.CP20420\",\n        \"I18N.Rare.ENCibm420\",\n        \"I18N.Rare.CP20424\",\n        \"I18N.Rare.ENCibm424\",\n        \"I18N.Rare.CP20871\",\n        \"I18N.Rare.ENCibm871\",\n        \"I18N.Rare.CP21025\",\n        \"I18N.Rare.ENCibm1025\",\n        \"I18N.Rare.CP37\",\n        \"I18N.Rare.ENCibm037\",\n        \"I18N.Rare.CP500\",\n        \"I18N.Rare.ENCibm500\",\n        \"I18N.Rare.CP708\",\n        \"I18N.Rare.ENCasmo_708\",\n        \"I18N.Rare.CP852\",\n        \"I18N.Rare.ENCibm852\",\n        \"I18N.Rare.CP855\",\n        \"I18N.Rare.ENCibm855\",\n        \"I18N.Rare.CP857\",\n        \"I18N.Rare.ENCibm857\",\n        \"I18N.Rare.CP858\",\n        \"I18N.Rare.ENCibm00858\",\n        \"I18N.Rare.CP862\",\n        \"I18N.Rare.ENCibm862\",\n        \"I18N.Rare.CP864\",\n        \"I18N.Rare.ENCibm864\",\n        \"I18N.Rare.CP866\",\n        \"I18N.Rare.ENCibm866\",\n        \"I18N.Rare.CP869\",\n        \"I18N.Rare.ENCibm869\",\n        \"I18N.Rare.CP870\",\n        \"I18N.Rare.ENCibm870\",\n        \"I18N.Rare.CP875\",\n        \"I18N.Rare.ENCibm875\",\n        \"I18N.West.CP10000\",\n        \"I18N.West.ENCmacintosh\",\n        \"I18N.West.CP10079\",\n        \"I18N.West.ENCx_mac_icelandic\",\n        \"I18N.West.CP1250\",\n        \"I18N.West.ENCwindows_1250\",\n        \"I18N.West.CP1252\",\n        \"I18N.West.ENCwindows_1252\",\n        \"I18N.West.CP1253\",\n        \"I18N.West.ENCwindows_1253\",\n        \"I18N.West.CP28592\",\n        \"I18N.West.ENCiso_8859_2\",\n        \"I18N.West.CP28593\",\n        \"I18N.West.ENCiso_8859_3\",\n        \"I18N.West.CP28597\",\n        \"I18N.West.ENCiso_8859_7\",\n        \"I18N.West.CP28605\",\n        \"I18N.West.ENCiso_8859_15\",\n        \"I18N.West.CP437\",\n        \"I18N.West.ENCibm437\",\n        \"I18N.West.CP850\",\n        \"I18N.West.ENCibm850\",\n        \"I18N.West.CP860\",\n        \"I18N.West.ENCibm860\",\n        \"I18N.West.CP861\",\n        \"I18N.West.ENCibm861\",\n        \"I18N.West.CP863\",\n        \"I18N.West.ENCibm863\",\n        \"I18N.West.CP865\",\n        \"I18N.West.ENCibm865\"\n    };\n\t\n\tstatic Dictionary<string, string> aliases;\n\tpublic static string GetAlias (string name)\n\t{\n\t\tif (aliases == null)\n\t\t\tBuildHash ();\n\t\tstring v;\n\t\taliases.TryGetValue (name, out v);\n\t\treturn v;\n\t}\n\tstatic void BuildHash ()\n\t{\n\t\taliases = new Dictionary<string, string> (StringComparer.OrdinalIgnoreCase);\n\t\taliases.Add (\"arabic\", \"iso_8859_6\");\n\t\taliases.Add (\"csISOLatinArabic\", \"iso_8859_6\");\n\t\taliases.Add (\"ECMA_114\", \"iso_8859_6\");\n\t\taliases.Add (\"ISO_8859_6:1987\", \"iso_8859_6\");\n\t\taliases.Add (\"iso_ir_127\", \"iso_8859_6\");\n\t\taliases.Add (\"cp1256\" ,\"windows_1256\");\n\t\taliases.Add (\"csISOLatin4\", \"iso_8859_4\");\n\t\taliases.Add (\"ISO_8859_4:1988\", \"iso_8859_4\");\n\t\taliases.Add (\"iso_ir_110\", \"iso_8859_4\");\n\t\taliases.Add (\"l4\", \"iso_8859_4\");\n\t\taliases.Add (\"latin4\", \"iso_8859_4\");\n\t\taliases.Add (\"cp852\" ,\"ibm852\");\n\t\taliases.Add (\"csISOLatin2\", \"iso_8859_2\");\n\t\taliases.Add (\"iso_8859_2:1987\", \"iso_8859_2\");\n\t\taliases.Add (\"iso8859_2\", \"iso_8859_2\");\n\t\taliases.Add (\"iso_ir_101\", \"iso_8859_2\");\n\t\taliases.Add (\"l2\", \"iso_8859_2\");\n\t\taliases.Add (\"latin2\", \"iso_8859_2\");\n\t\taliases.Add (\"x-cp1250\", \"windows_1250\");\n\t\taliases.Add (\"chinese\", \"gb2312\");\n\t\taliases.Add (\"CN-GB\", \"gb2312\");\n\t\taliases.Add (\"csGB2312\", \"gb2312\");\n\t\taliases.Add (\"csGB231280\", \"gb2312\");\n\t\taliases.Add (\"csISO58GB231280\", \"gb2312\");\n\t\taliases.Add (\"GB_2312_80\", \"gb2312\");\n\t\taliases.Add (\"GB231280\", \"gb2312\");\n\t\taliases.Add (\"GB2312_80\", \"gb2312\");\n", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "length": 545, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "2332b1a0569df7051e4f8442139c2dbbdf7b27bf1ef7cd16"}
{"input": "", "context": "\"\"\"Tools for parsing a regular expression into a Pattern.\"\"\"\nimport collections\nimport string\nimport charsource\nimport pattern as p\n# Characters that represent themselves in a regular expression.\n# TODO(jasonpr): Handle $ and ^ specially at edges of regex.\n_CHAR_LITERALS = string.ascii_letters + string.digits + '!\"#$%&\\',-/:;<=>@^_`~]} \\t\\n\\r'\n# Characters that represent themselves inside a square-bracket expression.\n_GROUP_CHARS = string.ascii_letters + string.digits + '!\"#$%&\\'()*+,-./:;<=>?@[^_`{|}~'\n# Characters that represent themselves when escaped with a backslash.\n_IDENTIY_ESCAPES = r'.[\\()*+?{|'\n# Characters that represent a character class when escaped with a backslash.\n_CHARACTER_CLASSES = {\n    'd': string.digits,\n    'w': string.ascii_letters + string.digits + '_',\n    'h': string.hexdigits,\n    # TODO(jasonpr): Make an informed decision, rather than blindly\n    # inheritting this definition from Python.\n    's': string.whitespace,\n    }\n_BRACKET_CHARACTER_CLASSES = {\n    'alnum': set(string.ascii_letters + string.digits),\n    'alpha': set(string.ascii_letters),\n    'digit': set(string.digits),\n    'lower': set(string.ascii_lowercase),\n    'print': set(string.printable),\n    'punct': set(string.punctuation),\n    # TODO(jasonpr): Make an informed decision, rather than blindly\n    # inheritting this definition from Python.\n    'space': set(string.whitespace),\n    'upper': set(string.ascii_uppercase),\n    'xdigit': set(string.hexdigits),\n    }\ndef parse_regex(regex_string):\n    \"\"\"Convert a regular expression string into a Pattern.\"\"\"\n    return _parse_regex(charsource.GetPutSource(regex_string))\n# The following _parse_* methods form a recursive descent parser\n# that respect the order of operations in a regular expression.\ndef _parse_regex(source):\n    \"\"\"Parse any regex into a Pattern.\"\"\"\n    return _parse_alternation(source)\ndef _parse_alternation(source):\n    \"\"\"Parse an alternation expression, like 'ab|cd|ef'.\"\"\"\n    parts = []\n    # Act as though the last character was a '|', so we get the\n    # initial element of the alternation.\n    last_char = '|'\n    while last_char == '|':\n        parts.append(_parse_concatenation(source))\n        last_char = source.get()\n    # Put back the non-alternation character.\n    source.put(last_char)\n    return p.Or(*parts)\ndef _parse_concatenation(source):\n    \"\"\"Parse a concatenation expression, like 'abc' or 'a(b|c)d*'.\"\"\"\n    parts = []\n    duplication = _parse_duplication(source)\n    # If we're expecting a concatenation, there MUST be at least\n    # one (first) element!\n    assert duplication\n    while duplication:\n        parts.append(duplication)\n        duplication = _parse_duplication(source)\n    return p.Sequence(*parts)\ndef _parse_duplication(source):\n    \"\"\"Parse a duplication expression, like 'a*' or '(a|b){3,5}'.\"\"\"\n    duplicated = _parse_parenthesization(source)\n    if not duplicated:\n        return None\n    duplicator = source.get()\n    if duplicator == '?':\n        return p.Maybe(duplicated)\n    elif duplicator == '*':\n        return p.Star(duplicated)\n    elif duplicator == '+':\n        return p.Plus(duplicated)\n    elif duplicator == '{':\n        min_repeats = _parse_positive_int(source)\n        range_continuation = source.get()\n        # We will ultimately expect a closing curly brace, but\n        # we might see a comma and a max repeats value, first.\n        if range_continuation == ',':\n            max_repeats = _parse_positive_int(source)\n            range_continuation = source.get()\n        else:\n            max_repeats = min_repeats\n        if range_continuation != '}':\n            raise ValueError('Expected \"}\", but got \"%s\".' %\n                             range_continuation)\n        return p.Repeat(duplicated, min_repeats, max_repeats)\n    else:\n        source.put(duplicator)\n        return duplicated\ndef _parse_parenthesization(source):\n    \"\"\"Parse a parenthesization pattern, like '(a|b)' or '[ab]' or 'a'.\n    Note that '[ab]' is a parenthesization, since it is equivalent\n    to '([ab])'.  Similarly, 'a' is equivalent to '(a)'.\n    \"\"\"\n    first_char = source.get()\n    if first_char == '(':\n        enclosed_regex = _parse_regex(source)\n        close_paren = source.get()\n        assert close_paren == ')'\n        return enclosed_regex\n    # Otherwise, this must just be a group.  (Groups have just as\n    # tight of binding as a parenthesization.)\n    source.put(first_char)\n    return _parse_group(source)\ndef _parse_group(source):\n    \"\"\"Parse a group pattern, like '[abc]' or 'a'.\n    Note that 'a' is a group, since 'a' is equivalent to '[a]'.\n    \"\"\"\n    first_char = source.get()\n    if first_char == '[':\n        second_char = source.get()\n        if second_char == '^':\n            negating = True\n        else:\n            source.put(second_char)\n            negating = False\n        group_chars = _parse_group_chars(source)\n        result = p.Selection(group_chars, negating)\n        close_brace = source.get()\n        assert close_brace == ']'\n        return result\n    # Otherwise, it's a single normal character.\n    source.put(first_char)\n    return _parse_atom(source)\ndef _parse_group_chars(source):\n    \"\"\"Parse the characters from a group specification.\n    This is just a string of characters allowable in a group specification.\n    For example, a valid parse is 'aA1.?', since '[aA1.?]' is a valid group.\n    \"\"\"\n    chars = set()\n    while True:\n        range_chars = _parse_group_range(source)\n        if range_chars:\n            for char in range_chars:\n                chars.add(char)\n            continue\n        char_class = _parse_char_class(source)\n        if char_class:\n            chars |= char_class\n            continue\n        char = source.get()\n        if not char:\n            raise ValueError('Unexpected end of stream.')\n        if char not in _GROUP_CHARS:\n            source.put(char)\n            break\n        chars.add(char)\n    return ''.join(chars)\ndef _parse_atom(source):\n    \"\"\"Parse a single regex atom.\n    An atom is a period ('.'), a character literal, or an escape sequence.\n    \"\"\"\n    char = source.get()\n    if not char:\n        # For good measure, put the EOF back on!\n        # This doesn't really do anything, since the source will\n        # generate EOFs forever.\n        source.put(char)\n        return None\n    elif char == '.':\n        return p.Anything()\n    elif char in _CHAR_LITERALS:\n        return p.String(char)\n    elif char == '\\\\':\n        escaped = source.get()\n        if escaped in _IDENTIY_ESCAPES:\n            return p.String(escaped)\n        elif escaped in _CHARACTER_CLASSES:\n            return p.Selection(_CHARACTER_CLASSES[escaped])\n        else:\n            raise ValueError('Unexpected escape sequence, \\\\%s.', escaped)\n    else:\n        source.put(char)\n        return None\ndef _parse_positive_int(source):\n    \"\"\"Parse a positive integer.\n    That is, parse a sequence of one or more digits.\n    \"\"\"\n    digits = []\n    next_char = source.get()\n    assert next_char and next_char in string.digits\n    while next_char and next_char in string.digits:\n        digits.append(next_char)\n        next_char = source.get()\n    source.put(next_char)\n    return int(''.join(digits))\ndef _parse_group_range(source):\n    \"\"\"Parse a three-character group range expression.\n    Return the set of characters represented by the range.\n    For example, parsing the expression 'c-e' from the source returns\n    set(['c', 'd', 'e']).\n    \"\"\"\n    start = source.get()\n    if start not in _GROUP_CHARS:\n        source.put(start)\n        return None\n    middle = source.get()\n    if middle != '-':\n        source.put(middle)\n        source.put(start)\n        return None\n    end = source.get()\n    if end not in _GROUP_CHARS:\n        source.put(end)\n        source.put(middle)\n        source.put(start)\n        return None\n    range_chars = set()\n    for ascii_value in range(ord(start), ord(end) + 1):\n        range_chars.add(chr(ascii_value))\n    return range_chars\ndef _parse_char_class(source):\n    for class_name, class_contents in _BRACKET_CHARACTER_CLASSES.iteritems():\n", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "length": 850, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "da4a2050450c0e6dbb46728a24c2681051dcf60db99aed6b"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Nov  8 14:27:22 2016\n@author: Viktor\n\"\"\"\nimport numpy as np\nfrom sklearn.datasets import fetch_mldata\nfrom matplotlib import pyplot as plt\nfrom skimage.io import imread\nfrom skimage.io import imshow\nfrom skimage.morphology import opening, closing\nfrom scipy import ndimage\nfrom sklearn.neighbors import KNeighborsClassifier\n#ucitavanje MNIST dataseta\nmnist = fetch_mldata('MNIST original')\nprint(mnist.data.shape)\nprint(mnist.target.shape)\nprint(np.unique(mnist.target))\nimg = 255-mnist.data[12345]\nimg = img.reshape(28,28)\nplt.imshow(-img, cmap='Greys')\n#iscitavanje dataseta i smestanje u matricu radi lakseg pristupa\nnumbers = [0]*10\nnumbers[0] = mnist['data'][np.where(mnist['target'] == 0.)[0]]\nnumbers[1] = mnist['data'][np.where(mnist['target'] == 1.)[0]]\nnumbers[2] = mnist['data'][np.where(mnist['target'] == 2.)[0]]\nnumbers[3] = mnist['data'][np.where(mnist['target'] == 3.)[0]]\nnumbers[4] = mnist['data'][np.where(mnist['target'] == 4.)[0]]\nnumbers[5] = mnist['data'][np.where(mnist['target'] == 5.)[0]]\nnumbers[6] = mnist['data'][np.where(mnist['target'] == 6.)[0]]\nnumbers[7] = mnist['data'][np.where(mnist['target'] == 7.)[0]]\nnumbers[8] = mnist['data'][np.where(mnist['target'] == 8.)[0]]\nnumbers[9] = mnist['data'][np.where(mnist['target'] == 9.)[0]]\ntest = numbers[0][123]\nres = numbers[0][123] == numbers[0][124]\npercent_hit = np.count_nonzero(res) / 784.0\nrepresentative_number = [0]*10\nfor j in range(0,10):\n    representative_number[j] = np.zeros(np.shape(numbers[j][0]), dtype='float')\n    for i in range(0,len(numbers[j])):\n        representative_number[j] = representative_number[j] + numbers[j][i]\n    representative_number[j] = (representative_number[j])/len(numbers[j])\ndef processing(path):\n    img = imread(path)\n    gray = rgb2gray(img)\n    binary = 1 - (gray > 0.5)\n    binary = closing(binary)\n    binary = opening(binary)\n    labeled, nr_objects = ndimage.label(binary)\n    return nr_objects\ndef poklapanje(niz1, niz2):\n    mera_poklapanja = 0.0\n    for i in range(0,len(niz1)):\n        if(niz1[i]==niz2[i]):\n            mera_poklapanja = mera_poklapanja + 1\n            \n    return mera_poklapanja/len(niz1)\n    \ndef ucitavanje(path):\n    image_path = []\n    with open(path) as f:\n        data = f.read()\n        lines = data.split('\\n')\n        for i, line in enumerate(lines):\n            if(i>1):\n                cols = line.split('\\t')\n                if(cols[0]!=''):\n                    image_path.append(cols[0])\n                \n        f.close()\n        \n    return image_path\ndef upis(path,image_path,result):\n    with open(path,'w') as f:\n        f.write('RA 1/2013 Viktor Sanca\\n')\n        f.write('file\\tsum\\n')\n        for i in range(0,len(image_path)):\n            f.write(image_path[i]+'\\t'+str(result[i])+'\\n')\n        \n        f.close()\n    \ndef get_img(image_path):\n    img = imread(image_path)\n    gray = rgb2gray(img)\n    #gray = closing(gray)\n    #gray = opening(gray)\n    #binary = (gray < 0.5)\n    return gray\ndef binarize(img):\n    return img>1\n    \ndef rgb2gray(img_rgb):\n    img_gray = np.ndarray((img_rgb.shape[0], img_rgb.shape[1]))\n    img_gray = 0.8*img_rgb[:, :, 0] + 0.2*img_rgb[:, :, 1] + 1*img_rgb[:, :, 2]\n    img_gray = img_gray.astype('uint8')\n    return img_gray\ndef mark_indices(image):\n    starting_indices = []\n    img = image.reshape(640*480)\n    for i in range(0,(640)*(480-28)):\n        if(img[i]<10 and img[i+27]<10 and img[i+27*(640)]<10 and img[i+27*(640)+27]<10):\n            starting_indices.append(i)\n            \n    return starting_indices\ndef get_image_from_indice(image,start_indice):\n    image28_28 = np.empty((28*28),dtype='uint8')\n    img = image.reshape(640*480)\n    \n    for i in range(0,28):\n        for j in range(0,28):\n            image28_28[28*i+j]=img[start_indice+i*(640)+j]\n    return image28_28\n    \ndef find_number(image28_28):\n    mmx = [0]*10\n    for i in range(0,10):\n        for j in range(0,len(numbers[i])):\n            res = binarize(image28_28) == binarize(numbers[i][j])\n            if(np.count_nonzero(res)>mmx[i]):\n                mmx[i]=np.count_nonzero(res)\n    \n    return max_idx(mmx)\n    \ndef max_idx(lista):\n    mx = max(lista)\n    for i in range(0,len(lista)):\n        if(lista[i]==mx):\n            return i\n            \n    return -1\n    \nimage_path = []\nresult = []\n    \nin_path = 'level-1-mnist-train/level-1-mnist/out.txt'\nout_path = 'level-1-mnist-test/level-1-mnist-test/out.txt'\ntrain_path = 'level-1-mnist-train/level-1-mnist/'\ntest_path = 'level-1-mnist-test/level-1-mnist-test/'\nimage_paths = ucitavanje(out_path)\n#knn = KNeighborsClassifier()\nknn = KNeighborsClassifier(n_neighbors=2000,weights='distance',algorithm='auto',n_jobs=-1)\nknn.fit(mnist.data,mnist.target)\nsuma = [0]*len(image_paths)\nfor i in range(0,len(image_paths)):\n    print('Image'+str(i+1)+'/'+str(len(image_paths)))\n    img = get_img(test_path+image_paths[i])\n    start_indices = mark_indices(img.reshape(640*480))\n    \n    for start_indice in start_indices:\n        img_d = get_image_from_indice(img,start_indice)\n        #nr = find_number(img_d)\n        nr = knn.predict(img_d)\n        suma[i] = suma[i] + nr[0]\n        suma[i] = int(suma[i])\nfor i in range(0,len(suma)):\n    suma[i] = float(suma[i])\n        \nupis(out_path, image_paths, suma)\nimage28_28 = img_d\nmmx = [0]*10\nfor i in range(0,10):\n    for j in range(0,len(numbers[i])):\n        res = image28_28 == numbers[i][j]\n        if(np.count_nonzero(res)>mmx[i]):\n            mmx[i]=np.count_nonzero(res)\n    \ntotal = np.zeros(784, dtype='float')\nfor i in range(0,10):\n    total = total + representative_number[i]\n        \nimg = representative_number[4]\nimg = img.reshape(28,28)\nplt.imshow(img, cmap='Greys')\n", "answers": ["check = numbers[5][123]"], "length": 502, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "3a9e8b1453db3c2f6454e9ee3926124b1bbca244e7f8e637"}
{"input": "", "context": "/*\n * *************************************************************************************\n *  Copyright (C) 2008 EsperTech, Inc. All rights reserved.                            *\n *  http://esper.codehaus.org                                                          *\n *  http://www.espertech.com                                                           *\n *  ---------------------------------------------------------------------------------- *\n *  The software in this package is published under the terms of the GPL license       *\n *  a copy of which has been included with this distribution in the license.txt file.  *\n * *************************************************************************************\n */\npackage com.espertech.esper.regression.epl;\nimport com.espertech.esper.client.*;\nimport com.espertech.esper.client.soda.*;\nimport com.espertech.esper.support.bean.*;\nimport com.espertech.esper.support.client.SupportConfigFactory;\nimport com.espertech.esper.support.util.SupportUpdateListener;\nimport com.espertech.esper.util.SerializableObjectCopier;\nimport junit.framework.TestCase;\npublic class TestSubselectIn extends TestCase\n{\n    private EPServiceProvider epService;\n    private SupportUpdateListener listener;\n    public void setUp()\n    {\n        Configuration config = SupportConfigFactory.getConfiguration();\n        config.addEventType(\"S0\", SupportBean_S0.class);\n        config.addEventType(\"S1\", SupportBean_S1.class);\n        config.addEventType(\"S2\", SupportBean_S2.class);\n        epService = EPServiceProviderManager.getDefaultProvider(config);\n        epService.initialize();\n        listener = new SupportUpdateListener();\n    }\n    public void testInSelect()\n    {\n        String stmtText = \"select id in (select id from S1.win:length(1000)) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        runTestInSelect();\n    }\n    public void testInSelectOM() throws Exception\n    {\n        EPStatementObjectModel subquery = new EPStatementObjectModel();\n        subquery.setSelectClause(SelectClause.create(\"id\"));\n        subquery.setFromClause(FromClause.create(FilterStream.create(\"S1\").addView(View.create(\"win\", \"length\", Expressions.constant(1000)))));\n        EPStatementObjectModel model = new EPStatementObjectModel();\n        model.setFromClause(FromClause.create(FilterStream.create(\"S0\")));\n        model.setSelectClause(SelectClause.create().add(Expressions.subqueryIn(\"id\", subquery), \"value\"));\n        model = (EPStatementObjectModel) SerializableObjectCopier.copy(model);\n        String stmtText = \"select id in (select id from S1.win:length(1000)) as value from S0\";\n        assertEquals(stmtText, model.toEPL());\n        EPStatement stmt = epService.getEPAdministrator().create(model);\n        stmt.addListener(listener);\n        runTestInSelect();\n    }\n    public void testInSelectCompile() throws Exception\n    {\n        String stmtText = \"select id in (select id from S1.win:length(1000)) as value from S0\";\n        EPStatementObjectModel model = epService.getEPAdministrator().compileEPL(stmtText);\n        model = (EPStatementObjectModel) SerializableObjectCopier.copy(model);\n        assertEquals(stmtText, model.toEPL());\n        EPStatement stmt = epService.getEPAdministrator().create(model);\n        stmt.addListener(listener);\n        runTestInSelect();\n    }\n    private void runTestInSelect()\n    {\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(5));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInSelectWhere()\n    {\n        String stmtText = \"select id in (select id from S1.win:length(1000) where id > 0) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(5));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInSelectWhereExpressions()\n    {\n        String stmtText = \"select 3*id in (select 2*id from S1.win:length(1000)) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(6));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInWildcard()\n    {\n        epService.getEPAdministrator().getConfiguration().addEventType(\"ArrayBean\", SupportBeanArrayCollMap.class);\n        String stmtText = \"select s0.anyObject in (select * from S1.win:length(1000)) as value from ArrayBean s0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        SupportBean_S1 s1 = new SupportBean_S1(100);\n        SupportBeanArrayCollMap arrayBean = new SupportBeanArrayCollMap(s1);\n        epService.getEPRuntime().sendEvent(s1);\n        epService.getEPRuntime().sendEvent(arrayBean);\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        SupportBean_S2 s2 = new SupportBean_S2(100);\n        arrayBean.setAnyObject(s2);\n        epService.getEPRuntime().sendEvent(s2);\n        epService.getEPRuntime().sendEvent(arrayBean);\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInNullable()\n    {\n        String stmtText = \"select id from S0 as s0 where p00 in (select p10 from S1.win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(1, \"a\"));\n        assertFalse(listener.isInvoked());\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2, null));\n        assertFalse(listener.isInvoked());\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1, \"A\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(3, null));\n        assertFalse(listener.isInvoked());\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4, \"A\"));\n        assertEquals(4, listener.assertOneGetNewAndReset().get(\"id\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-2, null));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5, null));\n        assertFalse(listener.isInvoked());\n    }\n    public void testInNullableCoercion()\n    {\n        String stmtText = \"select longBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where longBoxed in \" +\n                          \"(select intBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"A\", 0, 0L);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", 0, 0L);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", 99, null);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", null, 99l);\n        assertEquals(99L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"B\", 98, null);\n        sendBean(\"A\", null, 98l);\n        assertEquals(98L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n    }\n    public void testInNullRow()\n    {\n        String stmtText = \"select intBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where intBoxed in \" +\n                          \"(select longBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"B\", 1, 1l);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertEquals(1, listener.assertOneGetNewAndReset().get(\"intBoxed\"));\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertEquals(1, listener.assertOneGetNewAndReset().get(\"intBoxed\"));\n    }\n    public void testNotInNullRow()\n    {\n        String stmtText = \"select intBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where intBoxed not in \" +\n                          \"(select longBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"B\", 1, 1l);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertFalse(listener.isInvoked());\n    }\n    public void testNotInSelect()\n    {\n        String stmtText = \"select not id in (select id from S1.win:length(1000)) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(5));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testNotInNullableCoercion()\n    {\n        String stmtText = \"select longBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where longBoxed not in \" +\n                          \"(select intBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"A\", 0, 0L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"A\", null, null);\n        assertEquals(null, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", 1, 1L);\n        assertFalse(listener.isInvoked());\n", "answers": ["        sendBean(\"A\", null, null);"], "length": 756, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "aa15f3d4eeb6f0c28379f41721521940dfe5d3eb6bc898b9"}
{"input": "", "context": "package net.brokentrain.ftf.ui.gui.dialog;\nimport net.brokentrain.ftf.ui.gui.GUI;\nimport net.brokentrain.ftf.ui.gui.properties.BrowserTabProperties;\nimport net.brokentrain.ftf.ui.gui.properties.ConnectionProperties;\nimport net.brokentrain.ftf.ui.gui.properties.PropertyPage;\nimport net.brokentrain.ftf.ui.gui.properties.QueryTabProperties;\nimport net.brokentrain.ftf.ui.gui.properties.SystemTrayProperties;\nimport net.brokentrain.ftf.ui.gui.properties.TransferTabProperties;\nimport net.brokentrain.ftf.ui.gui.properties.ViewProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.ArXivProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.DOIProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.GoogleDesktopSearchProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.GoogleScholarProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.GoogleWebSearchProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.PlosJournalsProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.PubMedCentralProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.PubMedProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.ScirusProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.ServicesProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.TerrierProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.WebOfKnowledgeProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.YahooWebSearchProperties;\nimport net.brokentrain.ftf.ui.gui.settings.SettingsRegistry;\nimport net.brokentrain.ftf.ui.gui.settings.SettingsSaver;\nimport net.brokentrain.ftf.ui.gui.util.FontUtil;\nimport net.brokentrain.ftf.ui.gui.util.LayoutDataUtil;\nimport net.brokentrain.ftf.ui.gui.util.LayoutUtil;\nimport net.brokentrain.ftf.ui.gui.util.PaintUtil;\nimport net.brokentrain.ftf.ui.gui.util.StringUtil;\nimport net.brokentrain.ftf.ui.gui.util.WidgetUtil;\nimport org.eclipse.jface.dialogs.Dialog;\nimport org.eclipse.jface.dialogs.IDialogConstants;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.events.KeyAdapter;\nimport org.eclipse.swt.events.KeyEvent;\nimport org.eclipse.swt.events.PaintEvent;\nimport org.eclipse.swt.events.PaintListener;\nimport org.eclipse.swt.events.SelectionAdapter;\nimport org.eclipse.swt.events.SelectionEvent;\nimport org.eclipse.swt.graphics.Point;\nimport org.eclipse.swt.graphics.Rectangle;\nimport org.eclipse.swt.layout.GridData;\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Button;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Control;\nimport org.eclipse.swt.widgets.Event;\nimport org.eclipse.swt.widgets.Label;\nimport org.eclipse.swt.widgets.Listener;\nimport org.eclipse.swt.widgets.Shell;\nimport org.eclipse.swt.widgets.Tree;\nimport org.eclipse.swt.widgets.TreeItem;\n/* \n * TODO: This entire class could REALLY do with a re-think - since there were\n * few preference pages to think about they were just hard  coded, then it\n * started to grow and grow leading to this mess.  This should probably be made\n * dynamic and just build the *service* preference pages by seeing what is in\n * SettingsRegistry.services rather than hard coding them explicitly :(! This\n * kind of applies to the entire services package that is a sub-package of the\n * properties package, too.\n * NOTE: This is heavily based on RSSOwls code!\n * */\npublic class PreferencesDialog extends Dialog {\n    public static int lastOpenedPropertyPage = 0;\n    private static final int dialogMinWidth = 460;\n    private GUI fetcherGui;\n    private Composite buttonHolder;\n    private Composite contentHolder;\n    private Composite prefTitleHolder;\n    private Label labelImgHolder;\n    private Label labelPrefTitle;\n    private PropertyPage activePropertyPage;\n    private String lastSelectedItemText;\n    private String title;\n    private TreeItem arxiv;\n    private TreeItem browserTab;\n    private TreeItem connection;\n    private TreeItem crawler;\n    private TreeItem doi;\n    private TreeItem google;\n    private TreeItem googleDesktop;\n    private TreeItem googleScholar;\n    private TreeItem plosjournals;\n    private TreeItem pubmed;\n    private TreeItem pubmedCentral;\n    private TreeItem queryTab;\n    private TreeItem scirus;\n    private TreeItem services;\n    private TreeItem systemTray;\n    private TreeItem terrier;\n    private TreeItem transferTab;\n    private TreeItem view;\n    private TreeItem webofknowledge;\n    private TreeItem yahoo;\n    private Tree tree;\n    public PreferencesDialog(Shell parentShell, String dialogTitle,\n            GUI fetcherGui) {\n        super(parentShell);\n        this.title = dialogTitle;\n        this.fetcherGui = fetcherGui;\n        /* Init the PropertyChangeManager */\n        PropertyPage.initPropertyChangeManager(fetcherGui);\n    }\n    // private void createGeneralProps() {\n    // renewPropertyPage(\"General\");\n    // activePropertyPage = new GeneralProperties(contentHolder, fetcherGui);\n    // }\n    // private void createCrawlerProps() {\n    // renewPropertyPage(\"Crawler\");\n    // activePropertyPage = new CrawlerProperties(contentHolder, fetcherGui);\n    // }\n    // private void createBrowserProps() {\n    // renewPropertyPage(\"Browser\");\n    // }\n    @Override\n    protected void buttonPressed(int buttonId) {\n        if (buttonId == IDialogConstants.OK_ID) {\n            saveSettings();\n        }\n        if (activePropertyPage != null) {\n            activePropertyPage.dispose();\n        }\n        super.buttonPressed(buttonId);\n    }\n    @Override\n    protected void configureShell(Shell shell) {\n        shell.setLayout(LayoutUtil.createGridLayout(1, 0, 5));\n        shell.setText(title);\n        shell.setSize(0, 0);\n    }\n    private void createArxivProperties() {\n        renewPropertyPage(\"ArXiv\");\n        activePropertyPage = new ArXivProperties(contentHolder);\n    }\n    private void createBrowserTabProps() {\n        renewPropertyPage(\"Internal Browser\");\n        activePropertyPage = new BrowserTabProperties(contentHolder);\n    }\n    // private void createLogTabProps() {\n    // renewPropertyPage(\"Debug Log\");\n    // activePropertyPage = new LogTabProperties(contentHolder);\n    // }\n    @Override\n    protected Control createButtonBar(Composite parent) {\n        buttonHolder = new Composite(parent, SWT.NONE);\n        buttonHolder.setLayout(LayoutUtil\n                .createGridLayout(2, 0, 0, 5, 5, false));\n        buttonHolder.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_HORIZONTAL, 2));\n        Composite okCancelHolder = new Composite(buttonHolder, SWT.NONE);\n        okCancelHolder.setLayout(LayoutUtil.createGridLayout(2, 0, 5, 5));\n        okCancelHolder.setLayoutData(new GridData(SWT.END, SWT.TOP, false,\n                false));\n        if (GUI.display.getDismissalAlignment() == SWT.RIGHT) {\n            createButton(okCancelHolder, IDialogConstants.CANCEL_ID, \"Cancel\",\n                    false).setFont(FontUtil.dialogFont);\n            createButton(okCancelHolder, IDialogConstants.OK_ID, \"OK\", true)\n                    .setFont(FontUtil.dialogFont);\n        } else {\n            createButton(okCancelHolder, IDialogConstants.OK_ID, \"OK\", true)\n                    .setFont(FontUtil.dialogFont);\n            createButton(okCancelHolder, IDialogConstants.CANCEL_ID, \"Cancel\",\n                    false).setFont(FontUtil.dialogFont);\n        }\n        return buttonHolder;\n    }\n    // private void createStatusTabProps() {\n    // renewPropertyPage(\"Status\");\n    // activePropertyPage = new StatusTabProperties(contentHolder, fetcherGui);\n    // }\n    private void createConnectionProps() {\n        renewPropertyPage(\"Connection\");\n        activePropertyPage = new ConnectionProperties(contentHolder, fetcherGui);\n    }\n    @Override\n    protected Control createDialogArea(Composite parent) {\n        Composite baseComposite = (Composite) super.createDialogArea(parent);\n        baseComposite.setLayout(LayoutUtil.createGridLayout(2, 0, 5, 15, 0,\n                false));\n        baseComposite.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_BOTH, 1));\n        Composite treeHolder = new Composite(baseComposite, SWT.NONE);\n        treeHolder.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_VERTICAL, 1, convertHorizontalDLUsToPixels(140)));\n        treeHolder.setLayout(LayoutUtil.createGridLayout(1, 5, 0));\n        tree = new Tree(treeHolder, SWT.BORDER);\n        tree.setFont(FontUtil.dialogFont);\n        tree.setFocus();\n        tree.setLayoutData(new GridData(GridData.FILL_BOTH));\n        tree.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                handleTreeItemSelect();\n            }\n        });\n        tree.addKeyListener(new KeyAdapter() {\n            @Override\n            public void keyPressed(KeyEvent e) {\n                TreeItem selectedItem = tree.getSelection()[0];\n                if ((e.keyCode == SWT.CR) && (selectedItem.getItemCount() > 0)) {\n                    selectedItem.setExpanded(!selectedItem.getExpanded());\n                }\n            }\n        });\n        tree.addListener(SWT.MouseDoubleClick, new Listener() {\n            public void handleEvent(Event event) {\n                if (tree.getSelectionCount() > 0) {\n                    Rectangle clickedRect = event.getBounds();\n                    Rectangle selectedRect = tree.getSelection()[0].getBounds();\n                    /* Only handle event, if Mouse is over treeitem */\n                    if (selectedRect.contains(clickedRect.x, clickedRect.y)) {\n                        tree.getSelection()[0]\n                                .setExpanded(!tree.getSelection()[0]\n                                        .getExpanded());\n                    }\n                }\n            }\n        });\n        populateTree();\n        contentHolder = new Composite(baseComposite, SWT.NONE);\n        contentHolder.setLayoutData(new GridData(GridData.FILL_BOTH\n                | GridData.VERTICAL_ALIGN_BEGINNING));\n        contentHolder.setLayout(LayoutUtil.createGridLayout(1, 5, 0));\n        prefTitleHolder = new Composite(contentHolder, SWT.NONE);\n        GridLayout prefTitleHolderLayout = new GridLayout(2, false);\n        prefTitleHolderLayout.marginWidth = 1;\n        prefTitleHolderLayout.marginHeight = 2;\n        prefTitleHolderLayout.marginLeft = 4;\n        prefTitleHolder.setLayout(prefTitleHolderLayout);\n        prefTitleHolder.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_HORIZONTAL, 2));\n        prefTitleHolder.setBackground(GUI.display\n                .getSystemColor(SWT.COLOR_WHITE));\n        prefTitleHolder.addPaintListener(new PaintListener() {\n            public void paintControl(PaintEvent e) {\n                e.gc.setForeground(GUI.display\n                        .getSystemColor(SWT.COLOR_DARK_GRAY));\n                Rectangle bounds = prefTitleHolder.getClientArea();\n                bounds.height -= 2;\n                bounds.width -= 1;\n                e.gc.drawRectangle(bounds);\n            }\n        });\n        setTreeSelection(lastOpenedPropertyPage);\n        handleTreeItemSelect();\n        Label seperator = new Label(baseComposite, SWT.HORIZONTAL\n                | SWT.SEPARATOR);\n        seperator.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL,\n                2));\n        if (WidgetUtil.isset(tree.getHorizontalBar())) {\n            tree.getHorizontalBar().setSelection(0);\n        }\n        return contentHolder;\n    }\n    private void createDOIProperties() {\n        renewPropertyPage(\"DOI\");\n        activePropertyPage = new DOIProperties(contentHolder);\n    }\n    private void createGoogleDesktopSearchProperties() {\n        renewPropertyPage(\"Google Desktop Search\");\n        activePropertyPage = new GoogleDesktopSearchProperties(contentHolder);\n    }\n    // private void createCiteSeerProperties() {\n    // renewPropertyPage(\"Cite Seer\");\n    // activePropertyPage = new CiteSeerProperties(contentHolder);\n    // }\n    private void createGoogleScholarProperties() {\n        renewPropertyPage(\"Google Scholar\");\n        activePropertyPage = new GoogleScholarProperties(contentHolder);\n    }\n    private void createGoogleWebSearchProperties() {\n        renewPropertyPage(\"Google Web Search\");\n        activePropertyPage = new GoogleWebSearchProperties(contentHolder);\n    }\n    private void createPlosJournalsProperties() {\n        renewPropertyPage(\"Plos Journals\");\n        activePropertyPage = new PlosJournalsProperties(contentHolder);\n    }\n    private void createPubMedCentralProperties() {\n        renewPropertyPage(\"PubMed Central\");\n        activePropertyPage = new PubMedCentralProperties(contentHolder);\n    }\n    private void createPubMedProperties() {\n        renewPropertyPage(\"PubMed\");\n        activePropertyPage = new PubMedProperties(contentHolder);\n    }\n    private void createQueryTabProps() {\n        renewPropertyPage(\"Queries\");\n        activePropertyPage = new QueryTabProperties(contentHolder);\n    }\n    private void createScirusProperties() {\n        renewPropertyPage(\"Scirus\");\n        activePropertyPage = new ScirusProperties(contentHolder);\n    }\n    private void createServicesProperties() {\n        renewPropertyPage(\"Default Services\");\n        activePropertyPage = new ServicesProperties(contentHolder);\n    }\n    private void createSystemTrayProps() {\n        renewPropertyPage(\"System Tray\");\n        activePropertyPage = new SystemTrayProperties(contentHolder, fetcherGui);\n    }\n    private void createTerrierProperties() {\n        renewPropertyPage(\"Terrier\");\n        activePropertyPage = new TerrierProperties(contentHolder);\n    }\n    private void createTransferTabProps() {\n        renewPropertyPage(\"Transfer\");\n        activePropertyPage = new TransferTabProperties(contentHolder);\n    }\n    private void createViewProps() {\n        renewPropertyPage(\"View\");\n        activePropertyPage = new ViewProperties(contentHolder, fetcherGui);\n    }\n    private void createWebOfKnowledgeProperties() {\n        renewPropertyPage(\"WebOfKnowledge\");\n        activePropertyPage = new WebOfKnowledgeProperties(contentHolder);\n    }\n    private void createYahooProperties() {\n        renewPropertyPage(\"Yahoo Web Search\");\n        activePropertyPage = new YahooWebSearchProperties(contentHolder);\n    }\n    @Override\n    protected int getShellStyle() {\n        int style = SWT.TITLE | SWT.BORDER | SWT.RESIZE | SWT.APPLICATION_MODAL\n                | getDefaultOrientation();\n        return style;\n    }\n    void handleTreeItemSelect() {\n        if (tree.getSelection().length == 0) {\n            return;\n        }\n        if (tree.getSelection()[0].getText().equals(lastSelectedItemText)) {\n            return;\n        }\n        lastSelectedItemText = tree.getSelection()[0].getText();\n        // if (tree.getSelection()[0].getText().equals(\"General\")) {\n        // createGeneralProps();\n        // lastOpenedPropertyPage = 0;\n        // }\n        // if (tree.getSelection()[0].getText().equals(\"Crawler\")) {\n        // createCrawlerProps();\n        // lastOpenedPropertyPage = 23;\n        // }\n        /* Browser */\n        // if (tree.getSelection()[0].getText().equals(\"Browser\")) {\n        // createBrowserProps();\n        // lastOpenedPropertyPage = 1;\n        // }\n        /* Connection */\n        if (tree.getSelection()[0].getText().equals(\"Connection\")) {\n            createConnectionProps();\n            lastOpenedPropertyPage = 2;\n        }\n        /* System Tray */\n        else if (tree.getSelection()[0].getText().equals(\"System Tray\")) {\n            createSystemTrayProps();\n            lastOpenedPropertyPage = 3;\n        }\n        /* View */\n        else if (tree.getSelection()[0].getText().equals(\"View\")) {\n            createViewProps();\n            lastOpenedPropertyPage = 4;\n        }\n        /* Browser Tab */\n        else if (tree.getSelection()[0].getText().equals(\"Internal Browser\")) {\n            createBrowserTabProps();\n            lastOpenedPropertyPage = 5;\n        }\n        /* Log Tab */\n        // else if (tree.getSelection()[0].getText().equals(\"Debug Log\")) {\n        // createLogTabProps();\n        // lastOpenedPropertyPage = 6;\n        // }\n        /* Query Tab */\n        else if (tree.getSelection()[0].getText().equals(\"Queries\")) {\n            createQueryTabProps();\n            lastOpenedPropertyPage = 7;\n        }\n        /* Status Tab */\n        // else if (tree.getSelection()[0].getText().equals(\"Status\")) {\n        // createStatusTabProps();\n        // lastOpenedPropertyPage = 8;\n        // }\n        /* Transfer Tab */\n        else if (tree.getSelection()[0].getText().equals(\"Transfer\")) {\n            createTransferTabProps();\n            lastOpenedPropertyPage = 9;\n        }\n        /* Services */\n        else if (tree.getSelection()[0].getText().equals(\"Services\")) {\n            createServicesProperties();\n            lastOpenedPropertyPage = 10;\n        }\n        /* ArXiv */\n        else if (tree.getSelection()[0].getText().equals(\"ArXiv\")) {\n            createArxivProperties();\n            lastOpenedPropertyPage = 11;\n        }\n        /* CiteSeer */\n        // else if (tree.getSelection()[0].getText().equals(\"Cite Seer\")) {\n        // createCiteSeerProperties();\n        // lastOpenedPropertyPage = 12;\n        // }\n        /* DOI */\n        else if (tree.getSelection()[0].getText().equals(\"DOI\")) {\n            createDOIProperties();\n            lastOpenedPropertyPage = 13;\n        }\n        /* GoogleDesktopSearch */\n        else if (tree.getSelection()[0].getText().equals(\n                \"Google Desktop Search\")) {\n            createGoogleDesktopSearchProperties();\n            lastOpenedPropertyPage = 24;\n        }\n        /* Google */\n        else if (tree.getSelection()[0].getText().equals(\"Google Web Search\")) {\n            createGoogleWebSearchProperties();\n            lastOpenedPropertyPage = 14;\n        }\n        /* GoogleScholar */\n        else if (tree.getSelection()[0].getText().equals(\"Google Scholar\")) {\n            createGoogleScholarProperties();\n            lastOpenedPropertyPage = 15;\n        }\n        /* PlosJournals */\n        else if (tree.getSelection()[0].getText().equals(\"Plos Journals\")) {\n            createPlosJournalsProperties();\n            lastOpenedPropertyPage = 16;\n        }\n        /* PubMed */\n        else if (tree.getSelection()[0].getText().equals(\"PubMed\")) {\n            createPubMedProperties();\n            lastOpenedPropertyPage = 17;\n        }\n        /* PubMedCentral */\n        else if (tree.getSelection()[0].getText().equals(\"PubMed Central\")) {\n            createPubMedCentralProperties();\n            lastOpenedPropertyPage = 18;\n        }\n        /* Scirus */\n        else if (tree.getSelection()[0].getText().equals(\"Scirus\")) {\n            createScirusProperties();\n            lastOpenedPropertyPage = 19;\n        }\n        /* Terrier */\n        else if (tree.getSelection()[0].getText().equals(\"Terrier\")) {\n            createTerrierProperties();\n            lastOpenedPropertyPage = 20;\n        }\n        /* WebOfKnowledge */\n        else if (tree.getSelection()[0].getText().equals(\"Web Of Knowledge\")) {\n            createWebOfKnowledgeProperties();\n            lastOpenedPropertyPage = 21;\n        }\n        /* Yahoo */\n        else if (tree.getSelection()[0].getText().equals(\"Yahoo Web Search\")) {\n            createYahooProperties();\n            lastOpenedPropertyPage = 22;\n        }\n        contentHolder.layout();\n        initializeBounds(false);\n    }\n    @Override\n    protected void initializeBounds() {\n        initializeBounds(true);\n    }\n    protected void initializeBounds(boolean updateLocation) {\n        Point currentSize = getShell().getSize();\n        Point bestSize = getShell().computeSize(\n                convertHorizontalDLUsToPixels(dialogMinWidth), SWT.DEFAULT);\n        Point location = (updateLocation == true) ? getInitialLocation(bestSize)\n                : getShell().getLocation();\n        if (updateLocation && (bestSize.y > currentSize.y)) {\n            getShell()\n                    .setBounds(location.x, location.y, bestSize.x, bestSize.y);\n        } else if (bestSize.y > currentSize.y) {\n            getShell().setSize(bestSize.x, bestSize.y);\n        }\n        getShell().setMinimumSize(bestSize.x, bestSize.y);\n    }\n    void populateTree() {\n        String selectionText = null;\n        if (tree.getSelectionCount() > 0) {\n            selectionText = tree.getSelection()[0].getText();\n        }\n        if (tree.getItemCount() > 0) {\n            tree.removeAll();\n        }\n        /* General properties */\n        // general = new TreeItem(tree, SWT.NONE);\n        // general.setText(\"General\");\n        /* Crawler sub-property */\n        // crawler = new TreeItem(tree, SWT.NONE);\n        // crawler.setText(\"Crawler\");\n        /* Browser sub-property */\n        // browser = new TreeItem(tree, SWT.NONE);\n        // browser.setText(\"Browser\");\n        /* Connection sub-property */\n        connection = new TreeItem(tree, SWT.NONE);\n        connection.setText(\"Connection\");\n        /* System Tray sub-property */\n        if (SettingsRegistry.useSystemTray()) {\n            // if (!WidgetShop.isset(general)) {\n            // general = new TreeItem(tree, SWT.NONE);\n            // general.setText(\"General\");\n            // }\n            systemTray = new TreeItem(tree, SWT.NONE);\n            systemTray.setText(\"System Tray\");\n        }\n        /* View properties */\n        view = new TreeItem(tree, SWT.NONE);\n        view.setText(\"View\");\n        /* Browser tab sub-property */\n        browserTab = new TreeItem(view, SWT.NONE);\n        browserTab.setText(\"Internal Browser\");\n        /* Log tab sub-property */\n        // logTab = new TreeItem(view, SWT.NONE);\n        // logTab.setText(\"Debug Log\");\n        // logTab.setForeground(ColourUtil.gray);\n        /* Status tab sub-property */\n        // statusTab = new TreeItem(view, SWT.NONE);\n        // statusTab.setText(\"Status\");\n        // statusTab.setForeground(ColourUtil.gray);\n        /* Transfer tab sub-property */\n        transferTab = new TreeItem(view, SWT.NONE);\n        transferTab.setText(\"Transfer\");\n        /* Query tab sub-property */\n        queryTab = new TreeItem(view, SWT.NONE);\n        queryTab.setText(\"Queries\");\n        /* Services sub-property */\n        services = new TreeItem(tree, SWT.NONE);\n        services.setText(\"Services\");\n        /* Arxiv sub-property */\n        arxiv = new TreeItem(services, SWT.NONE);\n        arxiv.setText(\"ArXiv\");\n        /* DOI sub-property */\n        doi = new TreeItem(services, SWT.NONE);\n        doi.setText(\"DOI\");\n        /* Cite Seer sub-property */\n        // citeSeer = new TreeItem(services, SWT.NONE);\n        // citeSeer.setText(\"Cite Seer\");\n        /* Google Scholar sub-property */\n        googleDesktop = new TreeItem(services, SWT.NONE);\n        googleDesktop.setText(\"Google Desktop Search\");\n        /* Google Scholar sub-property */\n        google = new TreeItem(services, SWT.NONE);\n        google.setText(\"Google Web Search\");\n        /* Google Scholar sub-property */\n        googleScholar = new TreeItem(services, SWT.NONE);\n        googleScholar.setText(\"Google Scholar\");\n        /* Plos Journals sub-property */\n        plosjournals = new TreeItem(services, SWT.NONE);\n        plosjournals.setText(\"Plos Journals\");\n        /* PubMed sub-property */\n        pubmed = new TreeItem(services, SWT.NONE);\n        pubmed.setText(\"PubMed\");\n        /* PubMed Central sub-property */\n        pubmedCentral = new TreeItem(services, SWT.NONE);\n        pubmedCentral.setText(\"PubMed Central\");\n        /* Scirus sub-property */\n        scirus = new TreeItem(services, SWT.NONE);\n        scirus.setText(\"Scirus\");\n        /* Terrier sub-property */\n        terrier = new TreeItem(services, SWT.NONE);\n        terrier.setText(\"Terrier\");\n        /* WOK sub-property */\n        webofknowledge = new TreeItem(services, SWT.NONE);\n        webofknowledge.setText(\"Web Of Knowledge\");\n        /* Yahoo sub-property */\n        yahoo = new TreeItem(services, SWT.NONE);\n        yahoo.setText(\"Yahoo Web Search\");\n        // if (WidgetShop.isset(general))\n        // general.setExpanded(true);\n        if (WidgetUtil.isset(view)) {\n            view.setExpanded(true);\n        }\n        if (WidgetUtil.isset(services)) {\n            services.setExpanded(true);\n        }\n        if (StringUtil.isset(selectionText)) {\n            restoreSelection(selectionText, tree.getItems());\n        }\n    }\n    private void renewPropertyPage(String title) {\n        if (activePropertyPage != null) {\n            activePropertyPage.updatePropertiesChangeManager();\n            activePropertyPage.dispose();\n        }\n        if (labelPrefTitle == null) {\n            labelPrefTitle = new Label(prefTitleHolder, SWT.LEFT);\n            labelPrefTitle.setBackground(GUI.display\n                    .getSystemColor(SWT.COLOR_WHITE));\n            labelPrefTitle.setLayoutData(new GridData(SWT.FILL, SWT.CENTER,\n                    true, false));\n            labelPrefTitle.setFont(FontUtil.dialogBoldFont);\n        }\n        if (labelImgHolder == null) {\n            labelImgHolder = new Label(prefTitleHolder, SWT.NONE);\n            labelImgHolder.setBackground(GUI.display\n                    .getSystemColor(SWT.COLOR_WHITE));\n            labelImgHolder.setImage(PaintUtil.iconBlueStripes);\n            labelImgHolder.setLayoutData(new GridData(SWT.END, SWT.END, false,\n                    false));\n        }\n        labelPrefTitle.setText(title);\n        labelPrefTitle.update();\n        labelImgHolder.update();\n        prefTitleHolder.layout();\n        contentHolder.layout();\n    }\n    private void restoreSelection(String selectionText, TreeItem items[]) {\n        for (TreeItem item : items) {\n            if (selectionText.equals(item.getText())) {\n", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "length": 1800, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "683bf49a8cf91c2074fdb7f2c850ab08b6ffa7c6c32f736a"}
{"input": "", "context": "/*\n * ATLauncher - https://github.com/ATLauncher/ATLauncher\n * Copyright (C) 2013 ATLauncher\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.atlauncher.gui.tabs;\nimport com.atlauncher.App;\nimport com.atlauncher.data.Instance;\nimport com.atlauncher.data.Language;\nimport com.atlauncher.evnt.listener.RelocalizationListener;\nimport com.atlauncher.evnt.manager.RelocalizationManager;\nimport com.atlauncher.gui.card.InstanceCard;\nimport com.atlauncher.gui.card.NilCard;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextField;\nimport javax.swing.SwingUtilities;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.util.regex.Pattern;\n/**\n * TODO: Rewrite this for better loading\n */\npublic class InstancesTab extends JPanel implements Tab, RelocalizationListener {\n    private static final long serialVersionUID = -969812552965390610L;\n    private JPanel topPanel;\n    private JButton clearButton;\n    private JTextField searchBox;\n    private JButton searchButton;\n    private JCheckBox hasUpdate;\n    private JLabel hasUpdateLabel;\n    private String searchText = null;\n    private boolean isUpdate = false;\n    private JPanel panel;\n    private JScrollPane scrollPane;\n    private int currentPosition = 0;\n    \n    private NilCard nilCard;\n    public InstancesTab() {\n        setLayout(new BorderLayout());\n        loadContent(false);\n        RelocalizationManager.addListener(this);\n    }\n    public void loadContent(boolean keepFilters) {\n        topPanel = new JPanel();\n        topPanel.setLayout(new FlowLayout(FlowLayout.LEFT));\n        clearButton = new JButton(Language.INSTANCE.localize(\"common.clear\"));\n        clearButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                searchBox.setText(\"\");\n                hasUpdate.setSelected(false);\n                reload();\n            }\n        });\n        topPanel.add(clearButton);\n        searchBox = new JTextField(16);\n        if (keepFilters) {\n            searchBox.setText(this.searchText);\n        }\n        searchBox.addKeyListener(new KeyAdapter() {\n            public void keyReleased(KeyEvent e) {\n                if (e.getKeyChar() == KeyEvent.VK_ENTER) {\n                    reload();\n                }\n            }\n        });\n        topPanel.add(searchBox);\n        searchButton = new JButton(Language.INSTANCE.localize(\"common.search\"));\n        searchButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                reload();\n            }\n        });\n        topPanel.add(searchButton);\n        hasUpdate = new JCheckBox();\n        hasUpdate.setSelected(isUpdate);\n        hasUpdate.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                reload();\n            }\n        });\n        topPanel.add(hasUpdate);\n        hasUpdateLabel = new JLabel(Language.INSTANCE.localize(\"instance.hasupdate\"));\n        topPanel.add(hasUpdateLabel);\n        add(topPanel, BorderLayout.NORTH);\n        panel = new JPanel();\n        scrollPane = new JScrollPane(panel, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane\n                .HORIZONTAL_SCROLLBAR_NEVER);\n        scrollPane.getVerticalScrollBar().setUnitIncrement(16);\n        add(scrollPane, BorderLayout.CENTER);\n        panel.setLayout(new GridBagLayout());\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.gridx = gbc.gridy = 0;\n        gbc.weightx = 1.0;\n        gbc.fill = GridBagConstraints.BOTH;\n        int count = 0;\n        for (Instance instance : App.settings.getInstancesSorted()) {\n            if (instance.canPlay()) {\n                if (keepFilters) {\n                    boolean showInstance = true;\n                    if (searchText != null) {\n                        if (!Pattern.compile(Pattern.quote(searchText), Pattern.CASE_INSENSITIVE).matcher(instance\n                                .getName()).find()) {\n                            showInstance = false;\n                        }\n                    }\n                    if (isUpdate) {\n                        if (!instance.hasUpdate()) {\n                            showInstance = false;\n                        }\n                    }\n                    if (showInstance) {\n                        panel.add(new InstanceCard(instance), gbc);\n                        gbc.gridy++;\n                        count++;\n                    }\n                } else {\n                    panel.add(new InstanceCard(instance), gbc);\n                    gbc.gridy++;\n                    count++;\n                }\n            }\n        }\n        if (count == 0) {\n            nilCard = new NilCard(Language.INSTANCE.localizeWithReplace(\"instance.nodisplay\", \"\\n\\n\"));\n            panel.add(nilCard, gbc);\n        }\n        SwingUtilities.invokeLater(new Runnable() {\n            public void run() {\n                scrollPane.getVerticalScrollBar().setValue(currentPosition);\n            }\n        });\n    }\n    public void reload() {\n        this.currentPosition = scrollPane.getVerticalScrollBar().getValue();\n        this.searchText = searchBox.getText();\n        this.isUpdate = hasUpdate.isSelected();\n        if (this.searchText.isEmpty()) {\n            this.searchText = null;\n        }\n        removeAll();\n        loadContent(true);\n        validate();\n        repaint();\n        searchBox.requestFocus();\n    }\n    @Override\n    public String getTitle() {\n        return Language.INSTANCE.localize(\"tabs.instances\");\n    }\n    @Override\n    public void onRelocalization() {\n        clearButton.setText(Language.INSTANCE.localize(\"common.clear\"));\n        searchButton.setText(Language.INSTANCE.localize(\"common.search\"));\n        hasUpdateLabel.setText(Language.INSTANCE.localize(\"instance.hasupdate\"));\n        \n", "answers": ["        if (nilCard != null) {"], "length": 511, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "01ae6097833c3bcf2b2bd049d9fd87c92875de1e0f90be36"}
{"input": "", "context": "package name.vbraun.view.write;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.util.LinkedList;\nimport java.util.UUID;\nimport com.write.Quill.artist.Artist;\nimport junit.framework.Assert;\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.Paint.Style;\nimport android.graphics.Rect;\nimport android.graphics.RectF;\nimport android.net.Uri;\nimport android.util.FloatMath;\nimport android.util.Log;\nimport android.widget.ImageButton;\nimport android.widget.Toast;\npublic class GraphicsImage extends GraphicsControlpoint {\n\tprivate static final String TAG = \"GraphicsImage\";\n\tprivate Controlpoint bottom_left, bottom_right, top_left, top_right,\n\t\t\tcenter;\n\tprivate final Paint paint = new Paint();\n\tprivate final Paint outline = new Paint();\n\tprivate final Rect rect = new Rect();\n\tprivate final RectF rectF = new RectF();\n\tprivate Bitmap bitmap = null;\n\tprivate File file = null;\n\tprivate int height, width;\n\tprivate float sqrtAspect;\n\tpublic enum FileType {\n\t\tFILETYPE_NONE, FILETYPE_PNG, FILETYPE_JPG\n\t}\n\t\n\tpublic static String getImageFileExt(FileType fileType) {\n\t\tif (fileType == FileType.FILETYPE_JPG) {\n\t\t\treturn \".jpg\";\n\t\t} else if (fileType == FileType.FILETYPE_PNG) {\n\t\t\treturn \".png\";\n\t\t} else {\n\t\t\tAssert.fail();\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tpublic static FileType getImageFileType(String fileName) {\n\t\tfor (FileType t : FileType.values()) {\n\t\t\tif (t == FileType.FILETYPE_NONE)\n\t\t\t\tcontinue;\n\t\t\tString ext = getImageFileExt(t);\n\t\t\tif (fileName.endsWith(ext))\n\t\t\t\treturn t;\n\t\t}\n\t\treturn FileType.FILETYPE_NONE;\n\t}\n\t/**\n\t * Helper to construct a file name out of uuid and file type\n\t * @param uuid\n\t * @param fileType\n\t * @return\n\t */\n\tpublic static String getImageFileName(UUID uuid, FileType fileType) {\n\t\treturn uuid.toString() + getImageFileExt(fileType);\n\t}\n\tpublic String getFileName() {\n\t\treturn file.getAbsolutePath();\n\t}\n\t\n\t// persistent data\n\tprotected UUID uuid = null;\n\tprotected boolean constrainAspect = true;\n\tprotected Rect cropRect = new Rect();\n\tpublic UUID getUuid() {\n\t\tif (uuid == null)\n\t\t\tuuid = UUID.randomUUID();\n\t\treturn uuid;\n\t}\n\tpublic Uri getFileUri() {\n\t\tif (file == null)\n\t\t\treturn null;   // no picture selected yet\n\t\telse\n\t\t\treturn Uri.fromFile(file);\n\t}\n\t\n\tpublic File getFile() {\n\t\treturn file;\n\t}\n\tpublic boolean getConstrainAspect() {\n\t\treturn constrainAspect;\n\t}\n\t\n\tpublic FileType getFileType() {\n\t\treturn getImageFileType(file.getName());\n\t}\n\t/**\n\t * Construct a new image\n\t * \n\t * @param transform\n\t *            The current transformation\n\t * @param x\n\t *            Screen x coordinate\n\t * @param y\n\t *            Screen y coordinate\n\t * @param penThickness\n\t * @param penColor\n\t */\n\tprotected GraphicsImage(Transformation transform, float x, float y) {\n\t\tsuper(Tool.IMAGE);\n\t\tsetTransform(transform);\n\t\tbottom_left = new Controlpoint(transform, x, y);\n\t\tbottom_right = new Controlpoint(transform, x, y);\n\t\ttop_left = new Controlpoint(transform, x, y);\n\t\ttop_right = new Controlpoint(transform, x, y);\n\t\tcenter = new Controlpoint(transform, x, y);\n\t\tcontrolpoints.add(bottom_left);\n\t\tcontrolpoints.add(bottom_right);\n\t\tcontrolpoints.add(top_left);\n\t\tcontrolpoints.add(top_right);\n\t\tcontrolpoints.add(center);\n\t\tinit();\n\t}\n\t\n\t/**\n\t * The copy constructor\n\t * @param image\n\t * @param dir the directory to copy the image file to\n\t */\n\tprotected GraphicsImage(final GraphicsImage image, File dir) {\n\t\tsuper(image);\n\t\tbottom_left = new Controlpoint(image.bottom_left);\n\t\tbottom_right = new Controlpoint(image.bottom_right);\n\t\ttop_left = new Controlpoint(image.top_left);\n\t\ttop_right = new Controlpoint(image.top_right);\n\t\tcenter = new Controlpoint(image.center);\n\t\tcontrolpoints.add(bottom_left);\n\t\tcontrolpoints.add(bottom_right);\n\t\tcontrolpoints.add(top_left);\n\t\tcontrolpoints.add(top_right);\n\t\tcontrolpoints.add(center);\n\t\tconstrainAspect = image.constrainAspect;\n\t\tinit();\n\t\tif (image.getFile() == null) \n\t\t\treturn;\n\t\tfinal String fileName = getImageFileName(getUuid(), image.getFileType());\n\t\tfile = new File(dir, fileName);\n\t\tcom.write.Quill.image.Util.copyfile(image.getFile(), file);\n\t}\n\tprivate void init() {\n\t\tpaint.setARGB(0xff, 0x5f, 0xff, 0x5f);\n\t\tpaint.setStyle(Style.FILL);\n\t\tpaint.setStrokeWidth(0);\n\t\tpaint.setAntiAlias(true);\n\t\tpaint.setStrokeCap(Paint.Cap.ROUND);\n\t\toutline.setARGB(0xff, 0x0, 0xaa, 0x0);\n\t\toutline.setStyle(Style.STROKE);\n\t\toutline.setStrokeWidth(4);\n\t\toutline.setAntiAlias(true);\n\t\toutline.setStrokeCap(Paint.Cap.ROUND);\n\t}\n\t@Override\n\tprotected Controlpoint initialControlpoint() {\n\t\treturn bottom_right;\n\t}\n\t@Override\n\tpublic boolean intersects(RectF screenRect) {\n\t\treturn false;\n\t}\n\t@Override\n\tpublic void draw(Canvas c, RectF bounding_box) {\n\t\tif (file != null && bitmap == null)\n\t\t\ttry {\n\t\t\t\tloadBitmap();\n\t\t\t} catch (IOException e) {\n\t\t\t\tLog.e(TAG, \"loading bitmap: \"+e.getMessage());\n\t\t\t}\n\t\t\n\t\tcomputeScreenRect();\n\t\tc.clipRect(0, 0, c.getWidth(), c.getHeight(), android.graphics.Region.Op.REPLACE);\n\t\tif (bitmap == null) {\n\t\t\tc.drawRect(rect, paint);\n\t\t\tc.drawRect(rect, outline);\n\t\t} else {\n\t\t\tc.drawBitmap(bitmap, null, rect, null);\n\t\t}\n\t}\n\tprivate Controlpoint oppositeControlpoint(Controlpoint point) {\n\t\tif (point == bottom_right)\n\t\t\treturn top_left;\n\t\tif (point == bottom_left)\n\t\t\treturn top_right;\n\t\tif (point == top_right)\n\t\t\treturn bottom_left;\n\t\tif (point == top_left)\n\t\t\treturn bottom_right;\n\t\tif (point == center)\n\t\t\treturn center;\n\t\tAssert.fail(\"Unreachable\");\n\t\treturn null;\n\t}\n\tprivate final static float minDistancePixel = 30;\n\t@Override\n\tvoid controlpointMoved(Controlpoint point) {\n\t\tsuper.controlpointMoved(point);\n\t\tif (point == center) {\n\t\t\tfloat width2 = (bottom_right.x - bottom_left.x) / 2;\n\t\t\tfloat height2 = (top_right.y - bottom_right.y) / 2;\n\t\t\tbottom_right.y = bottom_left.y = center.y - height2;\n\t\t\ttop_right.y = top_left.y = center.y + height2;\n\t\t\tbottom_right.x = top_right.x = center.x + width2;\n\t\t\tbottom_left.x = top_left.x = center.x - width2;\n\t\t} else {\n\t\t\tControlpoint opposite = oppositeControlpoint(point);\n\t\t\tfloat dx = opposite.x - point.x;\n\t\t\tfloat dy = opposite.y - point.y;\n\t\t\tfloat minDistance = minDistancePixel / scale;\n\t\t\tif (-minDistance <= dx && dx <= minDistance) {\n\t\t\t\tfloat sgn = Math.signum(dx);\n\t\t\t\topposite.x = point.x + sgn * minDistance;\n\t\t\t\tdx = sgn * minDistance;\n\t\t\t}\n\t\t\tif (-minDistance <= dy && dy <= minDistance) {\n\t\t\t\tfloat sgn = Math.signum(dy);\n\t\t\t\topposite.y = point.y + sgn * minDistance;\n\t\t\t\tdy = sgn *minDistance;\n\t\t\t}\n\t\t\tif (constrainAspect && bitmap != null) {\n\t\t\t\tfloat r = (Math.abs(dx)+Math.abs(dy))/2;\n\t\t\t\tdx = r * sqrtAspect * Math.signum(dx);\n\t\t\t\tdy = r / sqrtAspect * Math.signum(dy);\n\t\t\t\t// Log.d(TAG, \"move \"+dx + \" \"+dy + \" \" + r + \" \"+(sqrtAspect*sqrtAspect));\n\t\t\t}\n\t\t\trectF.bottom = opposite.y;\n\t\t\trectF.top = opposite.y - dy;\n\t\t\trectF.left = opposite.x;\n\t\t\trectF.right = opposite.x - dx;\n\t\t\trectF.sort();\n\t\t\tbottom_right.y = bottom_left.y = rectF.bottom;\n\t\t\ttop_right.y = top_left.y = rectF.top;\n\t\t\tbottom_right.x = top_right.x = rectF.right;\n\t\t\tbottom_left.x = top_left.x = rectF.left;\n\t\t\tcenter.x = rectF.left + (rectF.right - rectF.left) / 2;\n\t\t\tcenter.y = rectF.bottom + (rectF.top - rectF.bottom) / 2;\n\t\t}\n\t}\n\tprivate void computeScreenRect() {\n\t\trectF.bottom = bottom_left.screenY();\n\t\trectF.top = top_left.screenY();\n\t\trectF.left = bottom_left.screenX();\n\t\trectF.right = bottom_right.screenX();\n\t\trectF.sort();\n\t\trectF.round(rect);\n\t}\n\tpublic void writeToStream(DataOutputStream out) throws IOException {\n\t\tout.writeInt(1);  // protocol #1\n\t\tout.writeUTF(uuid.toString());\n\t\tout.writeFloat(top_left.x);\n\t\tout.writeFloat(top_right.x);\n\t\tout.writeFloat(top_left.y);\n\t\tout.writeFloat(bottom_left.y);\n\t\tout.writeBoolean(constrainAspect);\n\t}\n\tpublic GraphicsImage(DataInputStream in, File dir) throws IOException {\n\t\tsuper(Tool.IMAGE);\n\t\tint version = in.readInt();\n\t\tif (version > 1)\n\t\t\tthrow new IOException(\"Unknown image version!\");\n\t\tuuid = UUID.fromString(in.readUTF());\n\t\tfloat left   = in.readFloat(); \n\t\tfloat right  = in.readFloat();\n\t\tfloat top    = in.readFloat();\n\t\tfloat bottom = in.readFloat();  \t\t\n\t\tconstrainAspect = in.readBoolean();\n\t\t\n\t\tbottom_left = new Controlpoint(transform, left, bottom);\n\t\tbottom_right = new Controlpoint(transform, right, bottom);\n\t\ttop_left = new Controlpoint(transform, left, top);\n\t\ttop_right = new Controlpoint(transform, right, top);\n\t\tcenter = new Controlpoint(transform, (left+right)/2, (top+bottom)/2);\n\t\tcontrolpoints.add(bottom_left);\n\t\tcontrolpoints.add(bottom_right);\n\t\tcontrolpoints.add(top_left);\n\t\tcontrolpoints.add(top_right);\n\t\tcontrolpoints.add(center);\n\t\tinit();\n\t\tfile = new File(dir, getImageFileName(uuid, FileType.FILETYPE_JPG));\n\t}\n\t@Override\n\tpublic void render(Artist artist) {\n\t\tartist.imageJpeg(file, top_left.x, top_right.x, top_left.y, bottom_left.y);\n\t}\n\tpublic boolean checkFileName(String fileName) {\n\t\tFileType fileType = getImageFileType(fileName);\n\t\treturn fileName.endsWith(getImageFileName(uuid, fileType));\n\t}\n\t\n\tpublic void setFile(String fileName, boolean constrainAspect) {\n\t\t// file = new File(\"/mnt/sdcard/d5efe912-4b03-4ed7-a124-bff4984691d6.jpg\");\n\t\tif (!checkFileName(fileName)) {\n\t\t\tLog.e(TAG, \"filename must be uuid.ext\");\n\t\t}\n\t\tfile = new File(fileName);\n\t\ttry {\n\t\t\tloadBitmap();\n\t\t} catch (IOException e) {\n\t\t\tLog.e(TAG, \"Unable to load file \" + file.toString() + \" (missing?\");\n\t\t}\n\t\tthis.constrainAspect = constrainAspect;\n\t\tif (constrainAspect) {\n\t\t\tfloat w = top_right.x - top_left.x;\n\t\t\tfloat h = bottom_right.y - top_right.y;\n", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "length": 1042, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "aa71378f81d8fee260faf0e1cf25590c02b8a2f4ff5ded68"}
{"input": "", "context": "import gtk\nimport gobject\nimport pygame\nimport pygame.event \nclass _MockEvent(object):\n    def __init__(self, keyval):\n        self.keyval = keyval\nclass Translator(object):\n    key_trans = {\n        'Alt_L': pygame.K_LALT,\n        'Alt_R': pygame.K_RALT,\n        'Control_L': pygame.K_LCTRL,\n        'Control_R': pygame.K_RCTRL,\n        'Shift_L': pygame.K_LSHIFT,\n        'Shift_R': pygame.K_RSHIFT,\n        'Super_L': pygame.K_LSUPER,\n        'Super_R': pygame.K_RSUPER,\n        'KP_Page_Up' : pygame.K_KP9, \n        'KP_Page_Down' : pygame.K_KP3,\n        'KP_End' : pygame.K_KP1, \n        'KP_Home' : pygame.K_KP7,\n        'KP_Up' : pygame.K_KP8,\n        'KP_Down' : pygame.K_KP2,\n        'KP_Left' : pygame.K_KP4,\n        'KP_Right' : pygame.K_KP6,\n        'numbersign' : pygame.K_HASH,\n        'percent' : ord('%'),\n        'exclam' : pygame.K_EXCLAIM,\n\t'asciicircum' : pygame.K_CARET,\n        'parenleft' : pygame.K_LEFTPAREN,\n        'parenright' : pygame.K_RIGHTPAREN,\n        'braceleft' : ord('{'),\n        'braceright' : ord('}'),\n        'bracketleft' : pygame.K_LEFTBRACKET,\n        'bracketright' : pygame.K_RIGHTBRACKET,\n        'apostrophe' : ord('\\''),\n        'equal' : pygame.K_EQUALS,\n        'grave' : pygame.K_BACKQUOTE,\n        'Caps_Lock' : pygame.K_CAPSLOCK,\n        'Page_Up' : pygame.K_PAGEUP,\n        'Page_Down' : pygame.K_PAGEDOWN,\n        'Num_Lock' : pygame.K_NUMLOCK,\n        'Bar' : ord('|')\n    }\n    \n    mod_map = {\n        pygame.K_LALT: pygame.KMOD_LALT,\n        pygame.K_RALT: pygame.KMOD_RALT,\n        pygame.K_LCTRL: pygame.KMOD_LCTRL,\n        pygame.K_RCTRL: pygame.KMOD_RCTRL,\n        pygame.K_LSHIFT: pygame.KMOD_LSHIFT,\n        pygame.K_RSHIFT: pygame.KMOD_RSHIFT,\n    }\n    \n    def __init__(self, mainwindow, inner_evb):\n        \"\"\"Initialise the Translator with the windows to which to listen\"\"\"\n        self._mainwindow = mainwindow\n        self._inner_evb = inner_evb\n        # Enable events\n        # (add instead of set here because the main window is already realized)\n        self._mainwindow.add_events(\n            gtk.gdk.KEY_PRESS_MASK | \\\n            gtk.gdk.KEY_RELEASE_MASK | \\\n            gtk.gdk.VISIBILITY_NOTIFY_MASK\n        )\n        \n        self._inner_evb.set_events(\n            gtk.gdk.POINTER_MOTION_MASK | \\\n            gtk.gdk.POINTER_MOTION_HINT_MASK | \\\n            gtk.gdk.BUTTON_MOTION_MASK | \\\n            gtk.gdk.BUTTON_PRESS_MASK | \\\n            gtk.gdk.BUTTON_RELEASE_MASK\n        )\n        self._mainwindow.set_flags(gtk.CAN_FOCUS)\n        self._inner_evb.set_flags(gtk.CAN_FOCUS)\n        \n        # Callback functions to link the event systems\n        self._mainwindow.connect('unrealize', self._quit_cb)\n        self._mainwindow.connect('visibility_notify_event', self._visibility)\n        self._inner_evb.connect('key_press_event', self._keydown_cb)\n        self._inner_evb.connect('key_release_event', self._keyup_cb)\n        self._inner_evb.connect('button_press_event', self._mousedown_cb)\n        self._inner_evb.connect('button_release_event', self._mouseup_cb)\n        self._inner_evb.connect('motion-notify-event', self._mousemove_cb)\n        self._inner_evb.connect('expose-event', self._expose_cb)\n        self._inner_evb.connect('configure-event', self._resize_cb)\n        self._inner_evb.connect('screen-changed', self._screen_changed_cb)\n        \n        # Internal data\n        self.__stopped = False\n        self.__keystate = [0] * 323\n        self.__button_state = [0,0,0]\n        self.__mouse_pos = (0,0)\n        self.__repeat = (None, None)\n        self.__held = set()\n        self.__held_time_left = {}\n        self.__held_last_time = {}\n        self.__held_last_value = {}\n        self.__tick_id = None\n    def hook_pygame(self):\n        pygame.key.get_pressed = self._get_pressed\n        pygame.key.set_repeat = self._set_repeat\n        pygame.mouse.get_pressed = self._get_mouse_pressed\n        pygame.mouse.get_pos = self._get_mouse_pos\n        \n    def _visibility(self, widget, event):\n        if pygame.display.get_init():\n            pygame.event.post(pygame.event.Event(pygame.VIDEOEXPOSE))\n        return False\n        \n    def _expose_cb(self, widget, event):\n        if pygame.display.get_init():\n            pygame.event.post(pygame.event.Event(pygame.VIDEOEXPOSE))\n        return True\n    def _resize_cb(self, widget, event):\n        evt = pygame.event.Event(pygame.VIDEORESIZE, \n                                 size=(event.width,event.height), width=event.width, height=event.height)\n        pygame.event.post(evt)\n        return False # continue processing\n        \n    def _screen_changed_cb(self, widget, event):\n        if pygame.display.get_init():\n            pygame.event.post(pygame.event.Event(pygame.VIDEOEXPOSE))\n    def _quit_cb(self, data=None):\n        self.__stopped = True\n        pygame.event.post(pygame.event.Event(pygame.QUIT))\n    def _keydown_cb(self, widget, event):\n        key = event.hardware_keycode\n        keyval = event.keyval\n        if key in self.__held:\n            return True\n        else:\n            if self.__repeat[0] is not None:\n                self.__held_last_time[key] = pygame.time.get_ticks()\n                self.__held_time_left[key] = self.__repeat[0]\n                self.__held_last_value[key] = keyval\n            self.__held.add(key)\n        return self._keyevent(widget, event, pygame.KEYDOWN)\n        \n    def _keyup_cb(self, widget, event):\n        key = event.hardware_keycode\n        if self.__repeat[0] is not None:\n            if key in self.__held:\n                # This is possibly false if set_repeat() is called with a key held\n                del self.__held_time_left[key]\n                del self.__held_last_time[key]\n                del self.__held_last_value[key]\n        self.__held.discard(key)\n        return self._keyevent(widget, event, pygame.KEYUP)\n        \n    def _keymods(self):\n        mod = 0\n        for key_val, mod_val in self.mod_map.iteritems():\n            mod |= self.__keystate[key_val] and mod_val\n        return mod\n        \n    def _keyevent(self, widget, event, type):\n        key = gtk.gdk.keyval_name(event.keyval)\n        if key is None:\n            # No idea what this key is.\n            return False \n        \n        keycode = None\n        if key in self.key_trans:\n            keycode = self.key_trans[key]\n        elif hasattr(pygame, 'K_'+key.upper()):\n            keycode = getattr(pygame, 'K_'+key.upper())\n        elif hasattr(pygame, 'K_'+key.lower()):\n            keycode = getattr(pygame, 'K_'+key.lower())\n        elif key == 'XF86Start':\n            # view source request, specially handled...\n            self._mainwindow.view_source()\n        else:\n            print 'Key %s unrecognized' % key\n            \n        if keycode is not None:\n            if type == pygame.KEYDOWN:\n                mod = self._keymods()\n            self.__keystate[keycode] = type == pygame.KEYDOWN\n            if type == pygame.KEYUP:\n                mod = self._keymods()\n            ukey = unichr(gtk.gdk.keyval_to_unicode(event.keyval))\n            if ukey == '\\000':\n                ukey = ''\n            evt = pygame.event.Event(type, key=keycode, unicode=ukey, mod=mod)\n            self._post(evt)\n            \n        return True\n    def _get_pressed(self):\n        return self.__keystate\n    def _get_mouse_pressed(self):\n        return self.__button_state\n    def _mousedown_cb(self, widget, event):\n        self.__button_state[event.button-1] = 1\n        widget.grab_focus()\n        return self._mouseevent(widget, event, pygame.MOUSEBUTTONDOWN)\n    def _mouseup_cb(self, widget, event):\n        self.__button_state[event.button-1] = 0\n        return self._mouseevent(widget, event, pygame.MOUSEBUTTONUP)\n        \n    def _mouseevent(self, widget, event, type):\n        evt = pygame.event.Event(type, button=event.button, pos=(event.x, event.y))\n        self._post(evt)\n        return True\n        \n    def _mousemove_cb(self, widget, event):\n        # From http://www.learningpython.com/2006/07/25/writing-a-custom-widget-using-pygtk/\n        # if this is a hint, then let's get all the necessary \n        # information, if not it's all we need.\n        if event.is_hint:\n            x, y, state = event.window.get_pointer()\n        else:\n            x = event.x\n            y = event.y\n            state = event.state\n        rel = (x - self.__mouse_pos[0], y - self.__mouse_pos[1])\n        self.__mouse_pos = (x, y)\n        \n        self.__button_state = [\n            state & gtk.gdk.BUTTON1_MASK and 1 or 0,\n            state & gtk.gdk.BUTTON2_MASK and 1 or 0,\n            state & gtk.gdk.BUTTON3_MASK and 1 or 0,\n        ]\n        \n        evt = pygame.event.Event(pygame.MOUSEMOTION,\n                                 pos=self.__mouse_pos, rel=rel, buttons=self.__button_state)\n        self._post(evt)\n        return True\n        \n    def _tick_cb(self):\n        cur_time = pygame.time.get_ticks()\n        for key in self.__held:\n            delta = cur_time - self.__held_last_time[key] \n            self.__held_last_time[key] = cur_time\n            \n            self.__held_time_left[key] -= delta\n            if self.__held_time_left[key] <= 0:\n                self.__held_time_left[key] = self.__repeat[1]\n                self._keyevent(None, _MockEvent(self.__held_last_value[key]), pygame.KEYDOWN)\n                \n        return True\n        \n    def _set_repeat(self, delay=None, interval=None):\n        if delay is not None and self.__repeat[0] is None:\n", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "length": 703, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "8470084fed939b4e4fcf2f79678790b3986d9ec82bc29985"}
{"input": "", "context": "import json\nimport os\nimport sys\nfrom datetime import datetime, timedelta\nimport wptserve\nfrom wptserve import sslutils\nfrom . import environment as env\nfrom . import instruments\nfrom . import mpcontext\nfrom . import products\nfrom . import testloader\nfrom . import wptcommandline\nfrom . import wptlogging\nfrom . import wpttest\nfrom mozlog import capture, handlers\nfrom .font import FontInstaller\nfrom .testrunner import ManagerGroup\nhere = os.path.dirname(__file__)\nlogger = None\n\"\"\"Runner for web-platform-tests\nThe runner has several design goals:\n* Tests should run with no modification from upstream.\n* Tests should be regarded as \"untrusted\" so that errors, timeouts and even\n  crashes in the tests can be handled without failing the entire test run.\n* For performance tests can be run in multiple browsers in parallel.\nThe upstream repository has the facility for creating a test manifest in JSON\nformat. This manifest is used directly to determine which tests exist. Local\nmetadata files are used to store the expected test results.\n\"\"\"\ndef setup_logging(*args, **kwargs):\n    global logger\n    logger = wptlogging.setup(*args, **kwargs)\n    return logger\ndef get_loader(test_paths, product, debug=None, run_info_extras=None, chunker_kwargs=None,\n               test_groups=None, **kwargs):\n    if run_info_extras is None:\n        run_info_extras = {}\n    run_info = wpttest.get_run_info(kwargs[\"run_info\"], product,\n                                    browser_version=kwargs.get(\"browser_version\"),\n                                    browser_channel=kwargs.get(\"browser_channel\"),\n                                    verify=kwargs.get(\"verify\"),\n                                    debug=debug,\n                                    extras=run_info_extras,\n                                    enable_webrender=kwargs.get(\"enable_webrender\"))\n    test_manifests = testloader.ManifestLoader(test_paths, force_manifest_update=kwargs[\"manifest_update\"],\n                                               manifest_download=kwargs[\"manifest_download\"]).load()\n    manifest_filters = []\n    include = kwargs[\"include\"]\n    if kwargs[\"include_file\"]:\n        include = include or []\n        include.extend(testloader.read_include_from_file(kwargs[\"include_file\"]))\n    if test_groups:\n        include = testloader.update_include_for_groups(test_groups, include)\n    if include or kwargs[\"exclude\"] or kwargs[\"include_manifest\"] or kwargs[\"default_exclude\"]:\n        manifest_filters.append(testloader.TestFilter(include=include,\n                                                      exclude=kwargs[\"exclude\"],\n                                                      manifest_path=kwargs[\"include_manifest\"],\n                                                      test_manifests=test_manifests,\n                                                      explicit=kwargs[\"default_exclude\"]))\n    ssl_enabled = sslutils.get_cls(kwargs[\"ssl_type\"]).ssl_enabled\n    h2_enabled = wptserve.utils.http2_compatible()\n    test_loader = testloader.TestLoader(test_manifests,\n                                        kwargs[\"test_types\"],\n                                        run_info,\n                                        manifest_filters=manifest_filters,\n                                        chunk_type=kwargs[\"chunk_type\"],\n                                        total_chunks=kwargs[\"total_chunks\"],\n                                        chunk_number=kwargs[\"this_chunk\"],\n                                        include_https=ssl_enabled,\n                                        include_h2=h2_enabled,\n                                        include_webtransport_h3=kwargs[\"enable_webtransport_h3\"],\n                                        skip_timeout=kwargs[\"skip_timeout\"],\n                                        skip_implementation_status=kwargs[\"skip_implementation_status\"],\n                                        chunker_kwargs=chunker_kwargs)\n    return run_info, test_loader\ndef list_test_groups(test_paths, product, **kwargs):\n    env.do_delayed_imports(logger, test_paths)\n    run_info_extras = products.Product(kwargs[\"config\"], product).run_info_extras(**kwargs)\n    run_info, test_loader = get_loader(test_paths, product,\n                                       run_info_extras=run_info_extras, **kwargs)\n    for item in sorted(test_loader.groups(kwargs[\"test_types\"])):\n        print(item)\ndef list_disabled(test_paths, product, **kwargs):\n    env.do_delayed_imports(logger, test_paths)\n    rv = []\n    run_info_extras = products.Product(kwargs[\"config\"], product).run_info_extras(**kwargs)\n    run_info, test_loader = get_loader(test_paths, product,\n                                       run_info_extras=run_info_extras, **kwargs)\n    for test_type, tests in test_loader.disabled_tests.items():\n        for test in tests:\n            rv.append({\"test\": test.id, \"reason\": test.disabled()})\n    print(json.dumps(rv, indent=2))\ndef list_tests(test_paths, product, **kwargs):\n    env.do_delayed_imports(logger, test_paths)\n    run_info_extras = products.Product(kwargs[\"config\"], product).run_info_extras(**kwargs)\n    run_info, test_loader = get_loader(test_paths, product,\n                                       run_info_extras=run_info_extras, **kwargs)\n    for test in test_loader.test_ids:\n        print(test)\ndef get_pause_after_test(test_loader, **kwargs):\n    if kwargs[\"pause_after_test\"] is None:\n        if kwargs[\"repeat_until_unexpected\"]:\n            return False\n        if kwargs[\"headless\"]:\n            return False\n        if kwargs[\"debug_test\"]:\n            return True\n        tests = test_loader.tests\n        is_single_testharness = (sum(len(item) for item in tests.values()) == 1 and\n                                 len(tests.get(\"testharness\", [])) == 1)\n        if kwargs[\"repeat\"] == 1 and kwargs[\"rerun\"] == 1 and is_single_testharness:\n            return True\n        return False\n    return kwargs[\"pause_after_test\"]\ndef run_test_iteration(test_status, test_loader, test_source_kwargs, test_source_cls, run_info,\n                       recording, test_environment, product, run_test_kwargs):\n    \"\"\"Runs the entire test suite.\n    This is called for each repeat run requested.\"\"\"\n    tests = []\n    for test_type in test_loader.test_types:\n        tests.extend(test_loader.tests[test_type])\n    try:\n        test_groups = test_source_cls.tests_by_group(\n            tests, **test_source_kwargs)\n    except Exception:\n        logger.critical(\"Loading tests failed\")\n        return False\n    logger.suite_start(test_groups,\n                       name='web-platform-test',\n                       run_info=run_info,\n                       extra={\"run_by_dir\": run_test_kwargs[\"run_by_dir\"]})\n    for test_type in run_test_kwargs[\"test_types\"]:\n        logger.info(f\"Running {test_type} tests\")\n        browser_cls = product.get_browser_cls(test_type)\n        browser_kwargs = product.get_browser_kwargs(logger,\n                                                    test_type,\n                                                    run_info,\n                                                    config=test_environment.config,\n                                                    num_test_groups=len(test_groups),\n                                                    **run_test_kwargs)\n        executor_cls = product.executor_classes.get(test_type)\n        executor_kwargs = product.get_executor_kwargs(logger,\n                                                      test_type,\n                                                      test_environment,\n                                                      run_info,\n                                                      **run_test_kwargs)\n        if executor_cls is None:\n            logger.error(f\"Unsupported test type {test_type} for product {product.name}\")\n            continue\n        for test in test_loader.disabled_tests[test_type]:\n            logger.test_start(test.id)\n            logger.test_end(test.id, status=\"SKIP\")\n            test_status.skipped += 1\n        if test_type == \"testharness\":\n            run_tests = {\"testharness\": []}\n            for test in test_loader.tests[\"testharness\"]:\n                if ((test.testdriver and not executor_cls.supports_testdriver) or\n                        (test.jsshell and not executor_cls.supports_jsshell)):\n                    logger.test_start(test.id)\n                    logger.test_end(test.id, status=\"SKIP\")\n                    test_status.skipped += 1\n                else:\n                    run_tests[\"testharness\"].append(test)\n        else:\n            run_tests = test_loader.tests\n        recording.pause()\n        with ManagerGroup(\"web-platform-tests\",\n                          run_test_kwargs[\"processes\"],\n                          test_source_cls,\n                          test_source_kwargs,\n                          browser_cls,\n                          browser_kwargs,\n                          executor_cls,\n                          executor_kwargs,\n                          run_test_kwargs[\"rerun\"],\n                          run_test_kwargs[\"pause_after_test\"],\n                          run_test_kwargs[\"pause_on_unexpected\"],\n                          run_test_kwargs[\"restart_on_unexpected\"],\n                          run_test_kwargs[\"debug_info\"],\n                          not run_test_kwargs[\"no_capture_stdio\"],\n                          recording=recording) as manager_group:\n            try:\n                manager_group.run(test_type, run_tests)\n            except KeyboardInterrupt:\n                logger.critical(\"Main thread got signal\")\n                manager_group.stop()\n                raise\n            test_status.total_tests += manager_group.test_count()\n            test_status.unexpected += manager_group.unexpected_count()\n            test_status.unexpected_pass += manager_group.unexpected_pass_count()\n    return True\ndef evaluate_runs(test_status, run_test_kwargs):\n    \"\"\"Evaluates the test counts after the given number of repeat runs has finished\"\"\"\n    if test_status.total_tests == 0:\n        if test_status.skipped > 0:\n            logger.warning(\"All requested tests were skipped\")\n        else:\n            if run_test_kwargs[\"default_exclude\"]:\n                logger.info(\"No tests ran\")\n                return True\n            else:\n                logger.critical(\"No tests ran\")\n                return False\n    if test_status.unexpected and not run_test_kwargs[\"fail_on_unexpected\"]:\n        logger.info(f\"Tolerating {test_status.unexpected} unexpected results\")\n        return True\n    all_unexpected_passed = (test_status.unexpected and\n                             test_status.unexpected == test_status.unexpected_pass)\n    if all_unexpected_passed and not run_test_kwargs[\"fail_on_unexpected_pass\"]:\n        logger.info(f\"Tolerating {test_status.unexpected_pass} unexpected results \"\n                    \"because they all PASS\")\n        return True\n    return test_status.unexpected == 0\nclass TestStatus:\n    \"\"\"Class that stores information on the results of test runs for later reference\"\"\"\n    def __init__(self):\n        self.total_tests = 0\n        self.skipped = 0\n        self.unexpected = 0\n        self.unexpected_pass = 0\n        self.repeated_runs = 0\n        self.expected_repeated_runs = 0\n        self.all_skipped = False\ndef run_tests(config, test_paths, product, **kwargs):\n    \"\"\"Set up the test environment, load the list of tests to be executed, and\n    invoke the remainder of the code to execute tests\"\"\"\n    mp = mpcontext.get_context()\n    if kwargs[\"instrument_to_file\"] is None:\n        recorder = instruments.NullInstrument()\n    else:\n        recorder = instruments.Instrument(kwargs[\"instrument_to_file\"])\n    with recorder as recording, capture.CaptureIO(logger,\n                                                  not kwargs[\"no_capture_stdio\"],\n                                                  mp_context=mp):\n        recording.set([\"startup\"])\n        env.do_delayed_imports(logger, test_paths)\n        product = products.Product(config, product)\n        env_extras = product.get_env_extras(**kwargs)\n        product.check_args(**kwargs)\n        if kwargs[\"install_fonts\"]:\n            env_extras.append(FontInstaller(\n                logger,\n                font_dir=kwargs[\"font_dir\"],\n                ahem=os.path.join(test_paths[\"/\"][\"tests_path\"], \"fonts/Ahem.ttf\")\n            ))\n        recording.set([\"startup\", \"load_tests\"])\n        test_groups = (testloader.TestGroupsFile(logger, kwargs[\"test_groups_file\"])\n                       if kwargs[\"test_groups_file\"] else None)\n        (test_source_cls,\n         test_source_kwargs,\n         chunker_kwargs) = testloader.get_test_src(logger=logger,\n                                                   test_groups=test_groups,\n                                                   **kwargs)\n        run_info, test_loader = get_loader(test_paths,\n                                           product.name,\n                                           run_info_extras=product.run_info_extras(**kwargs),\n                                           chunker_kwargs=chunker_kwargs,\n                                           test_groups=test_groups,\n                                           **kwargs)\n        logger.info(\"Using %i client processes\" % kwargs[\"processes\"])\n        test_status = TestStatus()\n        repeat = kwargs[\"repeat\"]\n        test_status.expected_repeat = repeat\n        if len(test_loader.test_ids) == 0 and kwargs[\"test_list\"]:\n            logger.critical(\"Unable to find any tests at the path(s):\")\n            for path in kwargs[\"test_list\"]:\n                logger.critical(\"  %s\" % path)\n            logger.critical(\"Please check spelling and make sure there are tests in the specified path(s).\")\n            return False, test_status\n        kwargs[\"pause_after_test\"] = get_pause_after_test(test_loader, **kwargs)\n        ssl_config = {\"type\": kwargs[\"ssl_type\"],\n                      \"openssl\": {\"openssl_binary\": kwargs[\"openssl_binary\"]},\n                      \"pregenerated\": {\"host_key_path\": kwargs[\"host_key_path\"],\n                                       \"host_cert_path\": kwargs[\"host_cert_path\"],\n                                       \"ca_cert_path\": kwargs[\"ca_cert_path\"]}}\n        testharness_timeout_multipler = product.get_timeout_multiplier(\"testharness\",\n                                                                       run_info,\n                                                                       **kwargs)\n        mojojs_path = kwargs[\"mojojs_path\"] if kwargs[\"enable_mojojs\"] else None\n        recording.set([\"startup\", \"start_environment\"])\n        with env.TestEnvironment(test_paths,\n                                 testharness_timeout_multipler,\n                                 kwargs[\"pause_after_test\"],\n                                 kwargs[\"debug_test\"],\n                                 kwargs[\"debug_info\"],\n                                 product.env_options,\n                                 ssl_config,\n                                 env_extras,\n                                 kwargs[\"enable_webtransport_h3\"],\n                                 mojojs_path) as test_environment:\n            recording.set([\"startup\", \"ensure_environment\"])\n            try:\n                test_environment.ensure_started()\n                start_time = datetime.now()\n            except env.TestEnvironmentError as e:\n                logger.critical(\"Error starting test environment: %s\" % e)\n                raise\n            recording.set([\"startup\"])\n            max_time = None\n            if \"repeat_max_time\" in kwargs:\n                max_time = timedelta(minutes=kwargs[\"repeat_max_time\"])\n            repeat_until_unexpected = kwargs[\"repeat_until_unexpected\"]\n            # keep track of longest time taken to complete a test suite iteration\n            # so that the runs can be stopped to avoid a possible TC timeout.\n            longest_iteration_time = timedelta()\n            while test_status.repeated_runs < repeat or repeat_until_unexpected:\n                # if the next repeat run could cause the TC timeout to be reached,\n                # stop now and use the test results we have.\n                # Pad the total time by 10% to ensure ample time for the next iteration(s).\n                estimate = (datetime.now() +\n                            timedelta(seconds=(longest_iteration_time.total_seconds() * 1.1)))\n                if not repeat_until_unexpected and max_time and estimate >= start_time + max_time:\n                    logger.info(f\"Ran {test_status.repeated_runs} of {repeat} iterations.\")\n                    break\n                # begin tracking runtime of the test suite\n                iteration_start = datetime.now()\n                test_status.repeated_runs += 1\n                if repeat_until_unexpected:\n                    logger.info(f\"Repetition {test_status.repeated_runs}\")\n                elif repeat > 1:\n                    logger.info(f\"Repetition {test_status.repeated_runs} / {repeat}\")\n                iter_success = run_test_iteration(test_status, test_loader, test_source_kwargs,\n                                                  test_source_cls, run_info, recording,\n                                                  test_environment, product, kwargs)\n                # if there were issues with the suite run(tests not loaded, etc.) return\n                if not iter_success:\n                    return False, test_status\n                recording.set([\"after-end\"])\n                logger.info(f\"Got {test_status.unexpected} unexpected results, \"\n                    f\"with {test_status.unexpected_pass} unexpected passes\")\n                logger.suite_end()\n                # Note this iteration's runtime\n                iteration_runtime = datetime.now() - iteration_start\n                # determine the longest test suite runtime seen.\n                longest_iteration_time = max(longest_iteration_time,\n                                             iteration_runtime)\n                if repeat_until_unexpected and test_status.unexpected > 0:\n                    break\n                if test_status.repeated_runs == 1 and len(test_loader.test_ids) == test_status.skipped:\n                    test_status.all_skipped = True\n                    break\n    # Return the evaluation of the runs and the number of repeated iterations that were run.\n    return evaluate_runs(test_status, kwargs), test_status\ndef check_stability(**kwargs):\n    from . import stability\n    if kwargs[\"stability\"]:\n        logger.warning(\"--stability is deprecated; please use --verify instead!\")\n        kwargs['verify_max_time'] = None\n        kwargs['verify_chaos_mode'] = False\n        kwargs['verify_repeat_loop'] = 0\n        kwargs['verify_repeat_restart'] = 10 if kwargs['repeat'] == 1 else kwargs['repeat']\n        kwargs['verify_output_results'] = True\n    return stability.check_stability(logger,\n                                     max_time=kwargs['verify_max_time'],\n                                     chaos_mode=kwargs['verify_chaos_mode'],\n                                     repeat_loop=kwargs['verify_repeat_loop'],\n                                     repeat_restart=kwargs['verify_repeat_restart'],\n                                     output_results=kwargs['verify_output_results'],\n                                     **kwargs)\ndef start(**kwargs):\n    assert logger is not None\n    logged_critical = wptlogging.LoggedAboveLevelHandler(\"CRITICAL\")\n", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "length": 1196, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "2477e626c89426f565807bbc5e35a472279f3e388787ac17"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n\"\"\"\nThis module contains a POI Manager core class which gives capability to mark\npoints of interest, re-optimise their position, and keep track of sample drift\nover time.\nQudi is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nQudi is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with Qudi. If not, see <http://www.gnu.org/licenses/>.\nCopyright (c) the Qudi Developers. See the COPYRIGHT.txt file at the\ntop-level directory of this distribution and at <https://github.com/Ulm-IQO/qudi/>\n\"\"\"\nfrom qtpy import QtCore\nimport ctypes   # is a foreign function library for Python. It provides C\n                # compatible data types, and allows calling functions in DLLs\n                # or shared libraries. It can be used to wrap these libraries\n                # in pure Python.\nfrom interface.wavemeter_interface import WavemeterInterface\nfrom core.base import Base\nfrom core.util.mutex import Mutex\nclass HardwarePull(QtCore.QObject):\n    \"\"\" Helper class for running the hardware communication in a separate thread. \"\"\"\n    # signal to deliver the wavelength to the parent class\n    sig_wavelength = QtCore.Signal(float, float)\n    def __init__(self, parentclass):\n        super().__init__()\n        # remember the reference to the parent class to access functions ad settings\n        self._parentclass = parentclass\n    def handle_timer(self, state_change):\n        \"\"\" Threaded method that can be called by a signal from outside to start the timer.\n        @param bool state: (True) starts timer, (False) stops it.\n        \"\"\"\n        if state_change:\n            self.timer = QtCore.QTimer()\n            self.timer.timeout.connect(self._measure_thread)\n            self.timer.start(self._parentclass._measurement_timing)\n        else:\n            if hasattr(self, 'timer'):\n                self.timer.stop()\n    def _measure_thread(self):\n        \"\"\" The threaded method querying the data from the wavemeter.\n        \"\"\"\n        # update as long as the state is busy\n        if self._parentclass.getState() == 'running':\n            # get the current wavelength from the wavemeter\n            temp1=float(self._parentclass._wavemeterdll.GetWavelength(0))\n            temp2=float(self._parentclass._wavemeterdll.GetWavelength(0))\n            # send the data to the parent via a signal\n            self.sig_wavelength.emit(temp1, temp2)\nclass HighFinesseWavemeter(Base,WavemeterInterface):\n    _modclass = 'HighFinesseWavemeter'\n    _modtype = 'hardware'\n    ## declare connectors\n    _out = {'highfinessewavemeter': 'WavemeterInterface'}\n    sig_handle_timer = QtCore.Signal(bool)\n    #############################################\n    # Flags for the external DLL\n    #############################################\n    # define constants as flags for the wavemeter\n    _cCtrlStop                   = ctypes.c_uint16(0x00)\n    # this following flag is modified to override every existing file\n    _cCtrlStartMeasurment        = ctypes.c_uint16(0x1002)\n    _cReturnWavelangthAir        = ctypes.c_long(0x0001)\n    _cReturnWavelangthVac        = ctypes.c_long(0x0000)\n    def __init__(self, config, **kwargs):\n        super().__init__(config=config, **kwargs)\n        #locking for thread safety\n        self.threadlock = Mutex()\n        # the current wavelength read by the wavemeter in nm (vac)\n        self._current_wavelength=0.0\n        self._current_wavelength2=0.0\n        # time between two measurement points of the wavemeter in milliseconds\n        if 'measurement_timing' in config.keys():\n            self._measurement_timing=config['measurement_timing']\n        else:\n            self._measurement_timing = 10.\n            self.log.warning('No measurement_timing configured, '\\\n                        'using {} instead.'.format(self._measurement_timing))\n    def on_activate(self, e):\n        #############################################\n        # Initialisation to access external DLL\n        #############################################\n        try:\n            # imports the spectrometer specific function from dll\n            self._wavemeterdll = ctypes.windll.LoadLibrary('wlmData.dll')\n        except:\n            self.log.critical('There is no Wavemeter installed on this '\n                    'Computer.\\nPlease install a High Finesse Wavemeter and '\n                    'try again.')\n        # define the use of the GetWavelength function of the wavemeter\n#        self._GetWavelength2 = self._wavemeterdll.GetWavelength2\n        # return data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength2.restype = ctypes.c_double\n        # parameter data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength2.argtypes = [ctypes.c_double]\n        # define the use of the GetWavelength function of the wavemeter\n#        self._GetWavelength = self._wavemeterdll.GetWavelength\n        # return data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength.restype = ctypes.c_double\n        # parameter data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength.argtypes = [ctypes.c_double]\n        # define the use of the ConvertUnit function of the wavemeter\n#        self._ConvertUnit = self._wavemeterdll.ConvertUnit\n        # return data type of the ConvertUnit function of the wavemeter\n        self._wavemeterdll.ConvertUnit.restype = ctypes.c_double\n        # parameter data type of the ConvertUnit function of the wavemeter\n        self._wavemeterdll.ConvertUnit.argtypes = [ctypes.c_double, ctypes.c_long, ctypes.c_long]\n        # manipulate perdefined operations with simple flags\n#        self._Operation = self._wavemeterdll.Operation\n        # return data type of the Operation function of the wavemeter\n        self._wavemeterdll.Operation.restype = ctypes.c_long\n        # parameter data type of the Operation function of the wavemeter\n        self._wavemeterdll.Operation.argtypes = [ctypes.c_ushort]\n        # create an indepentent thread for the hardware communication\n        self.hardware_thread = QtCore.QThread()\n        # create an object for the hardware communication and let it live on the new thread\n        self._hardware_pull = HardwarePull(self)\n        self._hardware_pull.moveToThread(self.hardware_thread)\n        # connect the signals in and out of the threaded object\n        self.sig_handle_timer.connect(self._hardware_pull.handle_timer)\n        self._hardware_pull.sig_wavelength.connect(self.handle_wavelength)\n        # start the event loop for the hardware\n        self.hardware_thread.start()\n    def on_deactivate(self, e):\n        if self.getState() != 'idle' and self.getState() != 'deactivated':\n            self.stop_acqusition()\n        self.hardware_thread.quit()\n        self.sig_handle_timer.disconnect()\n        self._hardware_pull.sig_wavelength.disconnect()\n        try:\n            # clean up by removing reference to the ctypes library object\n            del self._wavemeterdll\n            return 0\n        except:\n            self.log.error('Could not unload the wlmData.dll of the '\n                    'wavemeter.')\n    #############################################\n    # Methods of the main class\n    #############################################\n    def handle_wavelength(self, wavelength1, wavelength2):\n        \"\"\" Function to save the wavelength, when it comes in with a signal.\n        \"\"\"\n        self._current_wavelength = wavelength1\n        self._current_wavelength2 = wavelength2\n    def start_acqusition(self):\n        \"\"\" Method to start the wavemeter software.\n        @return int: error code (0:OK, -1:error)\n        Also the actual threaded method for getting the current wavemeter reading is started.\n        \"\"\"\n        # first check its status\n        if self.getState() == 'running':\n            self.log.error('Wavemeter busy')\n            return -1\n        self.run()\n        # actually start the wavemeter\n        self._wavemeterdll.Operation(self._cCtrlStartMeasurment) #starts measurement\n        # start the measuring thread\n        self.sig_handle_timer.emit(True)\n        return 0\n    def stop_acqusition(self):\n        \"\"\" Stops the Wavemeter from measuring and kills the thread that queries the data.\n        @return int: error code (0:OK, -1:error)\n        \"\"\"\n        # check status just for a sanity check\n", "answers": ["        if self.getState() == 'idle':"], "length": 885, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "e59f877d3863977e0c9a383546007617a3bcb1d48ab84132"}
{"input": "", "context": "/*\n * Jitsi, the OpenSource Java VoIP and Instant Messaging client.\n *\n * Distributable under LGPL license.\n * See terms of license at gnu.org.\n */\npackage net.java.sip.communicator.slick.protocol.jabber;\nimport java.beans.*;\nimport java.util.*;\nimport junit.framework.*;\nimport net.java.sip.communicator.service.protocol.*;\nimport net.java.sip.communicator.service.protocol.event.*;\nimport net.java.sip.communicator.service.protocol.jabberconstants.*;\nimport net.java.sip.communicator.util.*;\n/**\n * Tests Jabber implementations of a Presence Operation Set. Tests in this class\n * verify functionality such as: Changing local (our own) status and\n * corresponding event dispatching; Querying status of contacts, Subscribing\n * for presence notifications upong status changes of specific contacts.\n * <p>\n * Using a custom suite() method, we make sure that apart from standard test\n * methods (those with a <tt>test</tt> prefix) we also execute those that\n * we want run in a specific order like for example - postTestSubscribe() and\n * postTestUnsubscribe().\n * <p>\n * @author Damian Minkov\n * @author Lubomir Marinov\n */\npublic class TestOperationSetPresence\n    extends TestCase\n{\n    private static final Logger logger =\n        Logger.getLogger(TestOperationSetPresence.class);\n    private JabberSlickFixture fixture = new JabberSlickFixture();\n    private OperationSetPresence operationSetPresence1 = null;\n    private final Map<String, PresenceStatus> supportedStatusSet1\n        = new HashMap<String, PresenceStatus>();\n    private OperationSetPresence operationSetPresence2 = null;\n    private final Map<String, PresenceStatus> supportedStatusSet2\n        = new HashMap<String, PresenceStatus>();\n    private String statusMessageRoot = new String(\"Our status is now: \");\n    private static AuthEventCollector authEventCollector1\n        = new AuthEventCollector();\n    private static AuthEventCollector authEventCollector2\n        = new AuthEventCollector();\n    public TestOperationSetPresence(String name)\n    {\n        super(name);\n    }\n    @Override\n    protected void setUp() throws Exception\n    {\n        super.setUp();\n        fixture.setUp();\n        Map<String, OperationSet> supportedOperationSets1 =\n            fixture.provider1.getSupportedOperationSets();\n        if ( supportedOperationSets1 == null\n            || supportedOperationSets1.size() < 1)\n            throw new NullPointerException(\n                \"No OperationSet implementations are supported by \"\n                +\"this implementation. \");\n        //get the operation set presence here.\n        operationSetPresence1 =\n            (OperationSetPresence)supportedOperationSets1.get(\n                OperationSetPresence.class.getName());\n        //if the op set is null then the implementation doesn't offer a presence\n        //operation set which is unacceptable for jabber.\n        if (operationSetPresence1 == null)\n        {\n            throw new NullPointerException(\n                \"An implementation of the Jabber service must provide an \"\n                + \"implementation of at least the one of the Presence \"\n                + \"Operation Sets\");\n        }\n        // do it once again for the second provider\n        Map<String, OperationSet> supportedOperationSets2 =\n            fixture.provider2.getSupportedOperationSets();\n        if ( supportedOperationSets2 == null\n            || supportedOperationSets2.size() < 1)\n            throw new NullPointerException(\n                \"No OperationSet implementations are supported by \"\n                +\"this Jabber implementation. \");\n        //get the operation set presence here.\n        operationSetPresence2 =\n            (OperationSetPresence)supportedOperationSets2.get(\n                OperationSetPresence.class.getName());\n        //if the op set is null then the implementation doesn't offer a presence\n        //operation set which is unacceptable for jabber.\n        if (operationSetPresence2 == null)\n        {\n            throw new NullPointerException(\n                \"An implementation of the Jabber service must provide an \"\n                + \"implementation of at least the one of the Presence \"\n                + \"Operation Sets\");\n        }\n        /*\n         * Retrieve the supported PresenceStatus values because the instances\n         * are specific to the ProtocolProviderService implementations.\n         */\n        // operationSetPresence1\n        for (Iterator<PresenceStatus> supportedStatusIt\n                        = operationSetPresence1.getSupportedStatusSet();\n             supportedStatusIt.hasNext();)\n        {\n            PresenceStatus supportedStatus = supportedStatusIt.next();\n            supportedStatusSet1.put(supportedStatus.getStatusName(),\n                supportedStatus);\n        }\n        // operationSetPresence2\n        for (Iterator<PresenceStatus> supportedStatusIt\n                        = operationSetPresence2.getSupportedStatusSet();\n             supportedStatusIt.hasNext();)\n        {\n            PresenceStatus supportedStatus = supportedStatusIt.next();\n            supportedStatusSet2.put(supportedStatus.getStatusName(),\n                supportedStatus);\n        }\n    }\n    @Override\n    protected void tearDown() throws Exception\n    {\n        super.tearDown();\n        fixture.tearDown();\n    }\n    /**\n     * Creates a test suite containing all tests of this class followed by\n     * test methods that we want executed in a specified order.\n     * @return Test\n     */\n    public static Test suite()\n    {\n        //return an (almost) empty suite if we're running in offline mode.\n        if(JabberSlickFixture.onlineTestingDisabled)\n        {\n            TestSuite suite = new TestSuite();\n            //the only test around here that we could run without net\n            //connectivity\n            suite.addTest(\n                new TestOperationSetPresence(\n                        \"testSupportedStatusSetForCompleteness\"));\n            return suite;\n        }\n        TestSuite suite = new TestSuite();\n        // clear the lists before subscribing users\n        suite.addTest(new TestOperationSetPresence(\"clearLists\"));\n        // first postTestSubscribe. to be sure that contacts are in the\n        // list so we can further continue and test presences each other\n        suite.addTest(new TestOperationSetPresence(\"postTestSubscribe\"));\n//        // add other tests\n//        suite.addTestSuite(TestOperationSetPresence.class);\n//\n        // now test unsubscribe\n        suite.addTest(new TestOperationSetPresence(\"postTestUnsubscribe\"));\n        return suite;\n    }\n    /**\n     * Verifies that all necessary Jabber test states are supported by the\n     * implementation.\n     */\n    public void testSupportedStatusSetForCompleteness()\n    {\n        //first create a local list containing the presence status instances\n        //supported by the underlying implementation.\n        Iterator<PresenceStatus> supportedStatusSetIter =\n            operationSetPresence1.getSupportedStatusSet();\n        List<String> supportedStatusNames = new LinkedList<String>();\n        while (supportedStatusSetIter.hasNext())\n        {\n            supportedStatusNames.add(supportedStatusSetIter\n                .next().getStatusName());\n        }\n        //create a copy of the MUST status set and remove any matching status\n        //that is also present in the supported set.\n", "answers": ["        List<String> requiredStatusNames ="], "length": 678, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "ac6445bc3b2ff172ac4c503cce9895134c79147da4766d14"}
{"input": "", "context": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Net;\nusing System.Net.NetworkInformation;\nusing System.Net.Sockets;\nusing System.Reflection;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Timers;\nusing LobbyClient;\nusing PlasmaDownloader;\nusing PlasmaShared;\nusing Ratings;\nusing ZeroKWeb.SpringieInterface;\nusing ZkData;\nusing ZkData.UnitSyncLib;\nusing static System.String;\nusing Timer = System.Timers.Timer;\n \nnamespace ZkLobbyServer\n{\n    public class ServerBattle : Battle\n    {\n        public const int PollTimeout = 60;\n        public const int MapVoteTime = 25;\n        public const int NumberOfMapChoices = 4;\n        public const int MinimumAutostartPlayers = 6;\n        public static int BattleCounter;\n        public int QueueCounter = 0;\n        public static readonly Dictionary<string, BattleCommand> Commands = new Dictionary<string, BattleCommand>();\n        private static object pickPortLock = new object();\n        private static string hostingIp;\n        public int DiscussionSeconds = 25;\n        public readonly List<string> toNotify = new List<string>();\n        public Resource HostedMap;\n        public Resource HostedMod;\n        public Mod HostedModInfo;\n        private int hostingPort;\n        private int? dbAutohostIndex;\n        protected bool isZombie;\n        protected bool IsPollsBlocked => IsAutohost && DateTime.UtcNow < BlockPollsUntil;\n        private List<KickedPlayer> kickedPlayers = new List<KickedPlayer>();\n        public List<BattleDebriefing> Debriefings { get; private set; } = new List<BattleDebriefing>();\n        private Timer pollTimer;\n        private Timer discussionTimer;\n        public ZkLobbyServer server;\n        public DedicatedServer spring;\n        public string battleInstanceGuid;\n        PlayerTeam startGameStatus;\n        public int InviteMMPlayers { get; protected set; } = int.MaxValue; //will invite players to MM after each battle if more than X players\n        public MapSupportLevel MinimalMapSupportLevel => IsAutohost ? MinimalMapSupportLevelAutohost : (IsPassworded ? MapSupportLevel.None : MapSupportLevel.Supported);\n        public CommandPoll ActivePoll { get; private set; }\n        public bool IsAutohost { get; private set; }\n        public bool IsDefaultGame { get; private set; } = true;\n        public bool IsCbalEnabled { get; private set; } = true;\n        public override bool TimeQueueEnabled => DynamicConfig.Instance.TimeQueueEnabled && (Mode == AutohostMode.Teams || Mode == AutohostMode.Game1v1 || Mode == AutohostMode.GameFFA);\n        public MapSupportLevel MinimalMapSupportLevelAutohost { get; protected set; } = MapSupportLevel.Featured;\n        static ServerBattle()\n        {\n            Commands =\n                Assembly.GetAssembly(typeof(BattleCommand))\n                    .GetTypes()\n                    .Where(x => !x.IsAbstract && x.IsClass && typeof(BattleCommand).IsAssignableFrom(x))\n                    .Select(x => x.GetConstructor(new Type[] { }).Invoke(new object[] { }))\n                    .Cast<BattleCommand>()\n                    .ToDictionary(x => x.Shortcut, x => x);\n            hostingIp =\n                Dns.GetHostEntry(Dns.GetHostName()).AddressList.FirstOrDefault(ip => ip.AddressFamily == AddressFamily.InterNetwork)?.ToString() ??\n                \"127.0.0.1\";\n        }\n        public ServerBattle(ZkLobbyServer server, string founder)\n        {\n            BattleID = Interlocked.Increment(ref BattleCounter);\n            FounderName = founder;\n            battleInstanceGuid = Guid.NewGuid().ToString();\n            this.server = server;\n            pollTimer = new Timer(PollTimeout * 1000);\n            pollTimer.Enabled = false;\n            pollTimer.AutoReset = false;\n            pollTimer.Elapsed += pollTimer_Elapsed;\n            discussionTimer = new Timer(DiscussionSeconds * 1000);\n            discussionTimer.Enabled = false;\n            discussionTimer.AutoReset = false;\n            discussionTimer.Elapsed += discussionTimer_Elapsed;\n            SetupSpring();\n            PickHostingPort();\n        }\n        public void SaveToDb()\n        {\n            if (!IsAutohost) return;\n            using (var db = new ZkDataContext())\n            {\n                Autohost autohost = null;\n                bool insert = false;\n                if (dbAutohostIndex.HasValue)\n                {\n                    autohost = db.Autohosts.Where(x => x.AutohostID == dbAutohostIndex).FirstOrDefault();\n                }\n                if (autohost == null)\n                {\n                    insert = true;\n                    autohost = new Autohost();\n                }\n                autohost.MinimumMapSupportLevel = MinimalMapSupportLevelAutohost;\n                autohost.AutohostMode = Mode;\n                autohost.InviteMMPlayers = InviteMMPlayers;\n                autohost.MaxElo = MaxElo;\n                autohost.MinElo = MinElo;\n                autohost.MaxLevel = MaxLevel;\n                autohost.MinLevel = MinLevel;\n                autohost.MaxRank = MaxRank;\n                autohost.MinRank = MinRank;\n                autohost.Title = Title;\n                autohost.MaxPlayers = MaxPlayers;\n                autohost.CbalEnabled = IsCbalEnabled;\n                autohost.MaxEvenPlayers = MaxEvenPlayers;\n                autohost.ApplicableRating = ApplicableRating;\n                autohost.ModName = HostedMod?.InternalName ?? ModName;\n                autohost.MapName = HostedMap?.InternalName ?? MapName;\n                if (insert)\n                {\n                    db.Autohosts.Add(autohost);\n                }\n                db.SaveChanges();\n                dbAutohostIndex = autohost.AutohostID;\n            }\n        }\n        public string GenerateClientScriptPassword(string name)\n        {\n            return Hash.HashString(battleInstanceGuid + name).ToString();\n        }\n        public void Dispose()\n        {\n            spring.UnsubscribeEvents(this);\n            if (pollTimer != null) pollTimer.Enabled = false;\n            pollTimer?.Dispose();\n            pollTimer = null;\n            if (discussionTimer != null) discussionTimer.Enabled = false;\n            discussionTimer?.Dispose();\n            discussionTimer = null;\n            spring = null;\n            ActivePoll = null;\n        }\n        public List<string> GetAllUserNames()\n        {\n            var ret = Users.Select(x => x.Key).ToList();\n            if (spring.IsRunning) ret.AddRange(spring.Context.ActualPlayers.Select(x => x.Name));\n            return ret.Distinct().ToList();\n        }\n        public BattleCommand GetCommandByName(string name)\n        {\n            BattleCommand command;\n            if (Commands.TryGetValue(name, out command)) return command.Create();\n            return null;\n        }\n        public ConnectSpring GetConnectSpringStructure(string scriptPassword, bool isSpectator)\n        {\n            return new ConnectSpring()\n            {\n                Engine = EngineVersion,\n                Ip = hostingIp,\n                Port = hostingPort,\n                Map = MapName,\n                Game = ModName,\n                ScriptPassword = scriptPassword,\n                Mode = Mode,\n                Title = Title,\n                IsSpectator = isSpectator,\n            };\n        }\n        public bool IsKicked(string name)\n        {\n            var kicked = false;\n            kickedPlayers.RemoveAll(x => x.TimeOfKicked <= DateTime.UtcNow.AddMinutes(-5));\n            if (kickedPlayers.Any(y => y.Name == name)) kicked = true;\n            return kicked;\n        }\n        public async Task KickFromBattle(string name, string reason)\n        {\n            UserBattleStatus user;\n            kickedPlayers.Add(new KickedPlayer() { Name = name });\n            if (Users.TryGetValue(name, out user))\n            {\n                var client = server.ConnectedUsers[name];\n                await client.Respond($\"You were kicked from battle: {reason}\");\n                await client.Process(new LeaveBattle() { BattleID = BattleID });\n            }\n        }\n        public virtual async Task CheckCloseBattle()\n        {\n            if (Users.IsEmpty && !spring.IsRunning)\n            {\n                if (!IsAutohost)\n                    await server.RemoveBattle(this);\n                else if (Mode != AutohostMode.None) // custom autohosts would typically be themed around a single map\n                    await RunCommandDirectly<CmdMap>(null);\n            }\n        }\n        public void SwitchDefaultGame(bool useDefaultGame)\n        {\n            IsDefaultGame = useDefaultGame;\n        }\n        public void SwitchAutohost(bool autohost, string founder)\n        {\n            if (autohost)\n            {\n                IsAutohost = true;\n                IsDefaultGame = true;\n                FounderName = \"Autohost #\" + BattleID;\n                SaveToDb();\n            }\n            else\n            {\n                IsAutohost = false;\n                FounderName = founder;\n                if (dbAutohostIndex.HasValue)\n                {\n                    using (var db = new ZkDataContext())\n                    {\n                        db.Autohosts.Remove(db.Autohosts.Where(x => x.AutohostID == dbAutohostIndex).FirstOrDefault());\n                        db.SaveChanges();\n                    }\n                }\n            }\n        }\n        public async Task ProcessBattleSay(Say say)\n        {\n            if (say.User == GlobalConst.NightwatchName) return; // ignore self\n            ConnectedUser user;\n            server.ConnectedUsers.TryGetValue(say.User, out user);\n            if ((say.Place == SayPlace.Battle) && !say.IsEmote && (user?.User.BanMute != true) && (user?.User.BanSpecChat != true) && say.AllowRelay) spring.SayGame($\"<{say.User}>{say.Text}\"); // relay to spring\n            await CheckSayForCommand(say);\n        }\n        private async Task<bool> CheckSayForCommand(Say say)\n        {\n            // check if it's command\n            if (!say.IsEmote && (say.Text?.Length > 1) && say.Text.StartsWith(\"!\"))\n            {\n                var parts = say.Text.Substring(1).Split(new[] { ' ' }, 2, StringSplitOptions.RemoveEmptyEntries);\n                return await RunCommandWithPermissionCheck(say, parts[0], parts.Skip(1).FirstOrDefault());\n            }\n            return false;\n        }\n        public virtual async Task ProcessPlayerJoin(ConnectedUser user, string joinPassword)\n        {\n            if (IsPassworded && (Password != joinPassword))\n            {\n                await user.Respond(\"Invalid password\");\n                return;\n            }\n            if (IsKicked(user.Name))\n            {\n                await KickFromBattle(user.Name, \"Banned for five minutes\");\n                return;\n            }\n            if ((user.MyBattle != null) && (user.MyBattle != this)) await user.Process(new LeaveBattle());\n            UserBattleStatus ubs;\n            if (!Users.TryGetValue(user.Name, out ubs))\n            {\n                ubs = new UserBattleStatus(user.Name, user.User, GenerateClientScriptPassword(user.Name));\n                Users[user.Name] = ubs;\n            }\n            ValidateBattleStatus(ubs);\n            user.MyBattle = this;\n            await server.TwoWaySyncUsers(user.Name, Users.Keys); // mutually sync user statuses\n            await server.SyncUserToAll(user);\n            await RecalcSpectators();\n            await\n                user.SendCommand(new JoinBattleSuccess()\n                {\n                    BattleID = BattleID,\n                    Players = Users.Values.Select(x => x.ToUpdateBattleStatus()).ToList(),\n                    Bots = Bots.Values.Select(x => x.ToUpdateBotStatus()).ToList(),\n                    Options = ModOptions\n                });\n            if (ActivePoll != null) await user.SendCommand(ActivePoll.GetBattlePoll());\n            await server.Broadcast(Users.Keys.Where(x => x != user.Name), ubs.ToUpdateBattleStatus()); // send my UBS to others in battle\n            if (spring.IsRunning)\n            {\n                spring.AddUser(ubs.Name, ubs.ScriptPassword, ubs.LobbyUser);\n                var started = DateTime.UtcNow.Subtract(spring.IngameStartTime ?? RunningSince ?? DateTime.UtcNow);\n                started = new TimeSpan((int)started.TotalHours, started.Minutes, started.Seconds);\n                await SayBattle($\"THIS GAME IS CURRENTLY IN PROGRESS, PLEASE WAIT UNTIL IT ENDS! Running for {started}\", ubs.Name);\n                await SayBattle(\"If you say !notify, I will message you when the current game ends.\", ubs.Name);\n            }\n            try\n            {\n                var ret = PlayerJoinHandler.AutohostPlayerJoined(GetContext(), ubs.LobbyUser.AccountID);\n                if (ret != null)\n                {\n                    if (!IsNullOrEmpty(ret.PrivateMessage)) await SayBattle(ret.PrivateMessage, ubs.Name);\n                    if (!IsNullOrEmpty(ret.PublicMessage)) await SayBattle(ret.PublicMessage);\n                }\n            }\n            catch (Exception ex)\n            {\n                Trace.TraceError(ex.ToString());\n                await SayBattle(\"ServerManage error: \" + ex);\n            }\n        }\n        public async Task RecalcSpectators()\n        {\n            var specCount = Users.Values.Count(x => x.IsSpectator);\n            var playerCount = Users.Values.Count(x => !x.IsSpectator);\n            if (specCount != SpectatorCount || playerCount != NonSpectatorCount)\n            {\n                SpectatorCount = specCount;\n                NonSpectatorCount = playerCount;\n                if (GlobalConst.LobbyServerUpdateSpectatorsInstantly)\n                {\n                    await server.Broadcast(Users.Keys, new BattleUpdate() { Header = new BattleHeader() { SpectatorCount = specCount, BattleID = BattleID, PlayerCount = NonSpectatorCount } });\n                }\n            }\n        }\n        public async Task RegisterVote(Say e, int vote)\n        {\n            if (ActivePoll != null)\n            {\n                if (await ActivePoll.Vote(e, vote))\n                {\n                    StopVote();\n                }\n            }\n            else await Respond(e, \"There is no poll going on, start some first\");\n        }\n        public async Task RequestConnectSpring(ConnectedUser conus, string joinPassword)\n        {\n            UserBattleStatus ubs;\n            startGameStatus = spring.LobbyStartContext.Players.FirstOrDefault(x => x.Name == conus.Name);\n            \n            if (!Users.TryGetValue(conus.Name, out ubs) && !(IsInGame && startGameStatus != null))\n                if (IsPassworded && (Password != joinPassword))\n                {\n                    await conus.Respond(\"Invalid password\");\n                    return;\n                }\n            var pwd = GenerateClientScriptPassword(conus.Name);\n            spring.AddUser(conus.Name, pwd, conus.User);\n            if (spring.Context.LobbyStartContext.Players.Any(x => x.Name == conus.Name) && conus.MyBattle != this)\n            {\n                await ProcessPlayerJoin(conus, joinPassword);\n            }\n            await conus.SendCommand(GetConnectSpringStructure(pwd, startGameStatus?.IsSpectator != false));\n        }\n        public Task Respond(Say e, string text)\n        {\n            return SayBattle(text, e?.User);\n        }\n        public async Task RunCommandDirectly<T>(Say e, string args = null) where T : BattleCommand, new()\n        {\n            var t = new T();\n            await t.Run(this, e, args);\n        }\n        public async Task<bool> RunCommandWithPermissionCheck(Say e, string com, string arg)\n        {\n            var cmd = GetCommandByName(com);\n            if (cmd == null) return false;\n            if (isZombie)\n            {\n                await Respond(e, \"This room is now disabled, please join a new one\");\n                return false;\n            }\n            string reason;\n            var perm = cmd.GetRunPermissions(this, e.User, out reason);\n            if (perm == BattleCommand.RunPermission.Run) await cmd.Run(this, e, arg);\n            else if (perm == BattleCommand.RunPermission.Vote)\n            {\n                if (IsPollsBlocked)\n                {\n                    await Respond(e, \"Please wait for a few seconds before starting a poll.\");\n                    return false;\n                }\n                await StartVote(cmd, e, arg);\n            }\n            else\n            {\n                await Respond(e, reason);\n                return false;\n            }\n            return true;\n        }\n        public async Task<bool> RunServerBalance(bool isGameStart, int? allyTeams, bool? clanWise)\n        {\n            try\n            {\n                var context = GetContext();\n                context.Mode = Mode;\n                if (!IsCbalEnabled) clanWise = false;\n                var balance = Balancer.BalanceTeams(context, isGameStart, allyTeams, clanWise);\n                await ApplyBalanceResults(balance);\n                return balance.CanStart;\n            }\n            catch (Exception ex)\n            {\n                Trace.TraceError(ex.ToString());\n                return false;\n            }\n        }\n        public void SayGame(string text)\n        {\n            if (spring?.IsRunning != true) return;\n            foreach (var line in text.Split(new[] { '\\n' }, StringSplitOptions.RemoveEmptyEntries))\n            {\n                spring.SayGame(line);\n            }\n        }\n        public async Task SayBattle(string text, string privateUser = null)\n        {\n            if (!IsNullOrEmpty(text))\n            {\n                if ((privateUser == null)) spring.SayGame(text);\n                foreach (var line in text.Split(new[] { '\\n' }, StringSplitOptions.RemoveEmptyEntries))\n                {\n                    await\n                        server.GhostSay(\n                            new Say()\n                            {\n                                User = GlobalConst.NightwatchName,\n                                Text = line,\n                                Place = privateUser != null ? SayPlace.BattlePrivate : SayPlace.Battle,\n                                Target = privateUser,\n                                IsEmote = true,\n                                AllowRelay = false,\n                            },\n                            BattleID);\n                }\n            }\n        }\n        public async Task SetModOptions(Dictionary<string, string> options)\n        {\n            ModOptions = options;\n            await server.Broadcast(Users.Keys, new SetModOptions() { Options = options });\n        }\n        public void SetApplicableRating(RatingCategory rating)\n        {\n            ApplicableRating = rating;\n            SaveToDb();\n        }\n        public async Task Spectate(string name)\n        {\n            ConnectedUser usr;\n            if (server.ConnectedUsers.TryGetValue(name, out usr)) await usr.Process(new UpdateUserBattleStatus() { Name = usr.Name, IsSpectator = true });\n        }\n        public async Task<bool> StartGame()\n        {\n            var context = GetContext();\n            if (TimeQueueEnabled) // spectate beyond max players\n            {\n                int allowedPlayers = MaxPlayers;\n                if (context.Players.Where(x => !x.IsSpectator).Count() <= MaxEvenPlayers)\n                {\n                    allowedPlayers = context.Players.Where(x => !x.IsSpectator).Count() & ~0x1;\n                }\n                foreach (var plr in context.Players.Where(x=>!x.IsSpectator).OrderBy(x => x.QueueOrder).Skip(allowedPlayers))\n                {\n                    plr.IsSpectator = true;\n                }\n            }\n            \n            \n            if (Mode != AutohostMode.None)\n            {\n                var balance = IsCbalEnabled ? Balancer.BalanceTeams(context, true, null, null) : Balancer.BalanceTeams(context, true, null, false);\n                if (!IsNullOrEmpty(balance.Message)) await SayBattle(balance.Message);\n                if (!balance.CanStart) return false;\n                context.ApplyBalance(balance);\n            }\n            var startSetup = StartSetup.GetDedicatedServerStartSetup(context);\n            if (!await EnsureEngineIsPresent()) return false;\n            if (IsInGame || spring.IsRunning)\n            {\n                await SayBattle(\"Game already running\");\n                return false;\n            }\n            spring.HostGame(startSetup, hostingIp, hostingPort);\n            IsInGame = true;\n            RunningSince = DateTime.UtcNow;\n            foreach (var us in Users.Values)\n                if (us != null)\n                {\n                    ConnectedUser user;\n                    if (server.ConnectedUsers.TryGetValue(us.Name, out user)) await user.SendCommand(GetConnectSpringStructure(us.ScriptPassword, startSetup?.Players.FirstOrDefault(x=>x.Name == us.Name)?.IsSpectator != false));\n                }\n            await server.Broadcast(server.ConnectedUsers.Values, new BattleUpdate() { Header = GetHeader() });\n            // remove all from MM\n            foreach (var player in startSetup.Players.Where(x => !x.IsSpectator)) {\n                if (await server.MatchMaker.RemoveUser(player.Name, false))\n                {\n                    await server.UserLogSay($\"Removing {player.Name} from MM since their custom battle just started.\");\n                }\n            }\n            await server.MatchMaker.UpdateAllPlayerStatuses();\n            return true;\n        }\n        public async Task<bool> StartVote(BattleCommand cmd, Say e, string args, int timeout = PollTimeout, CommandPoll poll = null)\n        {\n            cmd = cmd.Create();\n            string topic = cmd.Arm(this, e, args);\n            if (topic == null) return false;\n            var unwrappedCmd = cmd;\n            if (cmd is CmdPoll)\n            {\n                var split = args.Split(new[] { ' ' }, 2);\n                args = split.Length > 1 ? split[1] : \"\";\n                unwrappedCmd = (cmd as CmdPoll).InternalCommand;\n            }\n            if (unwrappedCmd is CmdMap && string.IsNullOrEmpty(args)) return await CreateMultiMapPoll();\n            Func<string, string> selector = cmd.GetIneligibilityReasonFunc(this);\n            if (e != null && selector(e.User) != null) return false;\n            var options = new List<PollOption>();\n            string url = null;\n            string map = null;\n            if (unwrappedCmd is CmdMap)\n            {\n                url = $\"{GlobalConst.BaseSiteUrl}/Maps/Detail/{(unwrappedCmd as CmdMap).Map.ResourceID}\";\n                map = (unwrappedCmd as CmdMap).Map.InternalName;\n            }\n            var numVoters = Users.Values.Count(x => selector(x.Name) == null);\n            var voteMargin = unwrappedCmd.GetPollWinMargin(this, numVoters);\n            poll = poll ?? new CommandPoll(this, true, true, unwrappedCmd is CmdMap, map, unwrappedCmd is CmdStart, voteMargin);\n            options.Add(new PollOption()\n            {\n                Name = \"Yes\",\n                URL = url,\n                Action = async () =>\n                {\n                    if (cmd.Access == BattleCommand.AccessType.NotIngame && spring.IsRunning) return;\n                    if (cmd.Access == BattleCommand.AccessType.Ingame && !spring.IsRunning) return;\n                    await cmd.ExecuteArmed(this, e);\n                }\n            });\n            options.Add(new PollOption()\n            {\n                Name = \"No\",\n                Action = async () => { }\n            });\n            if (await StartVote(selector, options, e, topic, poll))\n            {\n                await RegisterVote(e, 1);\n                return true;\n            }\n            return false;\n        }\n        public async Task<bool> StartVote(Func<string, string> eligibilitySelector, List<PollOption> options, Say creator, string topic, CommandPoll poll, int timeout = PollTimeout)\n        {\n            if (ActivePoll != null)\n            {\n                await Respond(creator, $\"Please wait, another poll already in progress: {ActivePoll.Topic}\");\n                return false;\n            }\n            await poll.Setup(eligibilitySelector, options, creator, topic);\n            ActivePoll = poll;\n            pollTimer.Interval = timeout * 1000;\n            pollTimer.Enabled = true;\n            return true;\n        }\n        public async void StopVote()\n        {\n            try\n            {\n                if (ActivePoll == null) return;\n                var oldPoll = ActivePoll;\n                if (ActivePoll != null) await ActivePoll.End(false);\n                if (pollTimer != null) pollTimer.Enabled = false;\n                ActivePoll = null;\n                await oldPoll?.PublishResult();\n            }\n            catch (Exception ex)\n            {\n                Trace.TraceError(\"Error stopping vote \" + ex);\n            }\n        }\n        public async Task SwitchEngine(string engine)\n        {\n            EngineVersion = engine;\n            ValidateAndFillDetails();\n            await\n                server.Broadcast(server.ConnectedUsers.Values,\n                    new BattleUpdate() { Header = new BattleHeader() { BattleID = BattleID, Engine = EngineVersion } });\n        }\n        public async Task SwitchGame(string internalName)\n        {\n            ModName = internalName;\n            ValidateAndFillDetails();\n            if (ModName != server.Game)\n            {\n                ModOptions[\"noelo\"] = \"1\";\n                await SayBattle(\"Ratings are disabled, since this game is not vanilla ZK\");\n                await server.Broadcast(Users.Keys, new SetModOptions() { Options = ModOptions });\n            }\n            await\n                server.Broadcast(server.ConnectedUsers.Values,\n                    new BattleUpdate() { Header = new BattleHeader() { BattleID = BattleID, Game = ModName } });\n        }\n        public async Task SwitchGameType(AutohostMode type)\n        {\n            Mode = type;\n            MapName = null;\n            ValidateAndFillDetails();\n            await server.Broadcast(server.ConnectedUsers.Values, new BattleUpdate() { Header = GetHeader() });\n            SaveToDb();\n            // do a full update - mode can also change map/players\n        }\n        public async Task SwitchMap(string internalName)\n        {\n            MapName = internalName;\n            ValidateAndFillDetails();\n            await\n                server.Broadcast(server.ConnectedUsers.Values,\n                    new BattleUpdate() { Header = new BattleHeader() { BattleID = BattleID, Map = MapName } });\n        }\n        public async Task SwitchMaxPlayers(int cnt)\n        {\n            MaxPlayers = cnt;\n            ValidateAndFillDetails();\n            await\n                server.Broadcast(server.ConnectedUsers.Values,\n                    new BattleUpdate() { Header = new BattleHeader() { BattleID = BattleID, MaxPlayers = MaxPlayers } });\n            SaveToDb();\n        }\n        public async Task SwitchMaxEvenPlayers(int cnt)\n        {\n            MaxEvenPlayers = cnt;\n            ValidateAndFillDetails();\n            await\n                server.Broadcast(server.ConnectedUsers.Values,\n                    new BattleUpdate() { Header = new BattleHeader() { BattleID = BattleID, MaxEvenPlayers = MaxEvenPlayers } });\n            SaveToDb();\n        }\n        public async Task SwitchInviteMmPlayers(int players)\n        {\n            InviteMMPlayers = players;\n            SaveToDb();\n        }\n        public async Task ValidateAllBattleStatuses()\n        {\n            foreach (var ubs in Users.Values)\n            {\n                ValidateBattleStatus(ubs);\n                await server.Broadcast(Users.Keys, ubs.ToUpdateBattleStatus());\n            }\n            await RecalcSpectators();\n        }\n        public async Task SwitchMaxElo(int elo)\n        {\n            MaxElo = elo;\n            SaveToDb();\n            await ValidateAllBattleStatuses();\n        }\n        public async Task SwitchMinElo(int elo)\n        {\n            MinElo = elo;\n            SaveToDb();\n            await ValidateAllBattleStatuses();\n        }\n        public async Task SwitchMaxLevel(int lvl)\n        {\n            MaxLevel = lvl;\n            SaveToDb();\n            await ValidateAllBattleStatuses();\n        }\n        public async Task SwitchMinLevel(int lvl)\n        {\n            MinLevel = lvl;\n            SaveToDb();\n            await ValidateAllBattleStatuses();\n        }\n        public async Task SwitchMaxRank(int rank)\n        {\n            MaxRank = rank;\n            SaveToDb();\n            await ValidateAllBattleStatuses();\n        }\n        public async Task SwitchMinRank(int rank)\n        {\n            MinRank = rank;\n            SaveToDb();\n            await ValidateAllBattleStatuses();\n        }\n        public async Task SwitchMinMapSupportLevel(MapSupportLevel lvl)\n        {\n            MinimalMapSupportLevelAutohost = lvl;\n            SaveToDb();\n        }\n        public void SwitchCbal(bool cbalEnabled)\n        {\n            IsCbalEnabled = cbalEnabled;\n            SaveToDb();\n        }\n        public async Task SwitchPassword(string pwd)\n        {\n            Password = pwd ?? \"\";\n            await server.Broadcast(server.ConnectedUsers.Values, new BattleUpdate() { Header = GetHeader() });\n            // do a full update to hide pwd properly\n        }\n        public async Task SwitchTitle(string title)\n        {\n            Title = title;\n            ValidateAndFillDetails();\n            await\n                server.Broadcast(server.ConnectedUsers.Values,\n                    new BattleUpdate() { Header = new BattleHeader() { BattleID = BattleID, Title = Title } });\n            SaveToDb();\n        }\n        public void BlockPolls(int seconds)\n        {\n            var target = DateTime.UtcNow.AddSeconds(seconds);\n            if (BlockPollsUntil < target) BlockPollsUntil = target;\n        }\n        public void UpdateWith(Autohost autohost)\n        {\n            IsAutohost = true;\n            MinimalMapSupportLevelAutohost = autohost.MinimumMapSupportLevel;\n            Mode = autohost.AutohostMode;\n            InviteMMPlayers = autohost.InviteMMPlayers;\n            MaxElo = autohost.MaxElo;\n            MinElo = autohost.MinElo;\n            MaxLevel = autohost.MaxLevel;\n            MinLevel = autohost.MinLevel;\n            MaxRank = autohost.MaxRank;\n            MinRank = autohost.MinRank;\n            Title = autohost.Title;\n            MaxPlayers = autohost.MaxPlayers;\n            IsCbalEnabled = autohost.CbalEnabled;\n            dbAutohostIndex = autohost.AutohostID;\n            MaxEvenPlayers = autohost.MaxEvenPlayers;\n            ApplicableRating = autohost.ApplicableRating;\n            FounderName = \"Autohost #\" + BattleID;\n            ValidateAndFillDetails();\n            SwitchGame(autohost.ModName);\n            SwitchMap(autohost.MapName);\n            RunCommandDirectly<CmdMap>(null);\n        }\n        public override void UpdateWith(BattleHeader h)\n        {\n            // following variables cannot be overriden in serverbattle\n            h.BattleID = BattleID;\n            h.Founder = FounderName;\n            h.IsRunning = IsInGame;\n            h.RunningSince = RunningSince;\n            h.SpectatorCount = SpectatorCount;\n            h.PlayerCount = NonSpectatorCount;\n            h.IsMatchMaker = IsMatchMakerBattle;\n            base.UpdateWith(h);\n            SwitchGame(h.Game);\n            ValidateAndFillDetails();\n        }\n        public void ValidateAndFillDetails()\n        {\n            if (IsNullOrEmpty(Title)) Title = $\"{FounderName}'s game\";\n            if (IsNullOrEmpty(EngineVersion) || (Mode != AutohostMode.None)) EngineVersion = server.Engine;\n            server.Downloader.GetResource(DownloadType.ENGINE, server.Engine);\n            switch (Mode)\n            {\n                case AutohostMode.Game1v1:\n                    MaxPlayers = 2;\n                    break;\n                case AutohostMode.Planetwars:\n                    if (MaxPlayers < 2) MaxPlayers = 16;\n                    break;\n                case AutohostMode.GameChickens:\n                    if (MaxPlayers < 2) MaxPlayers = 10;\n                    break;\n                case AutohostMode.GameFFA:\n                    if (MaxPlayers < 3) MaxPlayers = 16;\n                    break;\n                case AutohostMode.Teams:\n                    if (MaxPlayers < 4) MaxPlayers = 16;\n                    break;\n                case AutohostMode.None:\n                    if (MaxPlayers == 0) MaxPlayers = 16;\n                    break;\n            }\n            if (MaxPlayers > DynamicConfig.Instance.MaximumBattlePlayers && !IsAutohost) MaxPlayers = DynamicConfig.Instance.MaximumBattlePlayers;\n            if (MaxEvenPlayers > MaxPlayers) MaxEvenPlayers = MaxPlayers;\n            HostedMod = MapPicker.FindResources(ResourceType.Mod, ModName ?? server.Game ?? GlobalConst.DefaultZkTag).FirstOrDefault();\n            HostedMap = MapName != null\n                ? MapPicker.FindResources(ResourceType.Map, MapName).FirstOrDefault()\n                : MapPicker.GetRecommendedMap(GetContext());\n            ModName = HostedMod?.InternalName ?? ModName ?? server.Game ?? GlobalConst.DefaultZkTag;\n            MapName = HostedMap?.InternalName ?? MapName ?? \"Small_Divide-Remake-v04\";\n            if (HostedMod != null)\n                try\n                {\n                    HostedModInfo = MetaDataCache.ServerGetMod(HostedMod.InternalName);\n                }\n                catch (Exception ex)\n                {\n                    Trace.TraceWarning(\"Error loading mod metadata for {0} : {1}\", HostedMod.InternalName, ex);\n                }\n        }\n        public virtual void ValidateBattleStatus(UserBattleStatus ubs)\n        {\n            if (Mode != AutohostMode.None) ubs.AllyNumber = 0;\n            if (!ubs.IsSpectator)\n            {\n                if (!TimeQueueEnabled && Users.Values.Count(x => !x.IsSpectator) > MaxPlayers)\n                {\n                    ubs.IsSpectator = true;\n                    SayBattle(\"This battle is full.\", ubs.Name);\n                }\n                if (Users.Values.Count(x => !x.IsSpectator) <= DynamicConfig.Instance.MaximumStatLimitedBattlePlayers || IsAutohost)\n                {\n                    if (ubs.LobbyUser.EffectiveElo > MaxElo && ubs.LobbyUser.EffectiveMmElo > MaxElo)\n                    {\n                        ubs.IsSpectator = true;\n                        SayBattle(\"Your rating (\" + Math.Min(ubs.LobbyUser.EffectiveElo, ubs.LobbyUser.EffectiveMmElo) + \") is too high. The maximum rating to play in this battle is \" + MaxElo + \".\", ubs.Name);\n                    }\n                    if (ubs.LobbyUser.EffectiveElo < MinElo && ubs.LobbyUser.EffectiveMmElo < MinElo)\n                    {\n                        ubs.IsSpectator = true;\n                        SayBattle(\"Your rating (\" + Math.Max(ubs.LobbyUser.EffectiveElo, ubs.LobbyUser.EffectiveMmElo) + \") is too low. The minimum rating to play in this battle is \" + MinElo + \".\", ubs.Name);\n                    }\n                    if (ubs.LobbyUser.Level > MaxLevel)\n                    {\n                        ubs.IsSpectator = true;\n                        SayBattle(\"Your level (\" + ubs.LobbyUser.Level + \") is too high. The maximum level to play in this battle is \" + MaxLevel + \".\", ubs.Name);\n                    }\n                    if (ubs.LobbyUser.Level < MinLevel)\n                    {\n                        ubs.IsSpectator = true;\n                        SayBattle(\"Your level (\" + ubs.LobbyUser.Level + \") is too low. The minimum level to play in this battle is \" + MinLevel + \".\", ubs.Name);\n                    }\n                    if (ubs.LobbyUser.Rank > MaxRank)\n                    {\n                        ubs.IsSpectator = true;\n                        SayBattle(\"Your Rank (\" + Ranks.RankNames[ubs.LobbyUser.Rank] + \") is too high. The maximum Rank to play in this battle is \" + Ranks.RankNames[MaxRank] + \".\", ubs.Name);\n                    }\n                    if (ubs.LobbyUser.Rank < MinRank)\n                    {\n                        ubs.IsSpectator = true;\n                        SayBattle(\"Your Rank (\" + Ranks.RankNames[ubs.LobbyUser.Rank] + \") is too low. The minimum Rank to play in this battle is \" + Ranks.RankNames[MinRank] + \".\", ubs.Name);\n                    }\n                }\n                if (ubs.QueueOrder <= 0) ubs.QueueOrder = ++QueueCounter;\n            }\n            else\n            {\n                ubs.QueueOrder = -1;\n            }\n        }\n        protected virtual async Task OnDedicatedExited(SpringBattleContext springBattleContext)\n        {\n            StopVote();\n            IsInGame = false;\n            RunningSince = null;\n            BlockPollsUntil = DateTime.UtcNow.AddSeconds(DiscussionSeconds);\n            bool result = BattleResultHandler.SubmitSpringBattleResult(springBattleContext, server, (debriefing) =>\n            {\n                Debriefings.Add(debriefing);\n                server.Broadcast(springBattleContext.ActualPlayers.Select(x => x.Name), debriefing);\n                Trace.TraceInformation(\"Battle ended: Sent out debriefings for B\" + debriefing.ServerBattleID);\n            });\n            await server.Broadcast(server.ConnectedUsers.Keys, new BattleUpdate() { Header = GetHeader() });\n            foreach (var s in toNotify)\n                await\n                    server.GhostSay(new Say()\n                    {\n                        User = GlobalConst.NightwatchName,\n                        Text = $\"** {FounderName} 's {Title} just ended, join me! **\",\n                        Target = s,\n                        IsEmote = true,\n                        Place = SayPlace.User,\n                        Ring = true,\n                        AllowRelay = false\n                    });\n            toNotify.Clear();\n            var playingEligibleUsers = server.MatchMaker.GetEligibleQuickJoinPlayers(Users.Values.Where(x => !x.LobbyUser.IsAway && !x.IsSpectator && x.Name != null).Select(x => server.ConnectedUsers[x.Name]).ToList());\n            if (playingEligibleUsers.Count() >= InviteMMPlayers)\n            { //Make sure there are enough eligible users for a battle to be likely to happen\n                //put all users into MM queue to suggest battles\n                var teamsQueues = server.MatchMaker.PossibleQueues.Where(x => x.Mode == AutohostMode.Teams).ToList();\n                var availableUsers = Users.Values.Where(x => !x.LobbyUser.IsAway && x.Name != null).Select(x => server.ConnectedUsers[x.Name]).ToList();\n                await server.MatchMaker.MassJoin(availableUsers, teamsQueues);\n                DiscussionSeconds = MatchMaker.TimerSeconds + 2;\n            }\n            else\n            {\n                DiscussionSeconds = 5;\n            }\n            BlockPollsUntil = DateTime.UtcNow.AddSeconds(DiscussionSeconds);\n            if (Mode != AutohostMode.None && (IsAutohost || (!Users.ContainsKey(FounderName) || Users[FounderName].LobbyUser?.IsAway == true) && Mode != AutohostMode.Planetwars && !IsPassworded))\n            {\n                if (!result)\n                {\n                    //Game was aborted/exited/invalid, allow manual commands\n                    BlockPollsUntil = DateTime.UtcNow;\n                }\n                else\n                {\n                    //Initiate discussion time, then map vote, then start vote\n                    discussionTimer.Interval = (DiscussionSeconds - 1) * 1000;\n                    discussionTimer.Start();\n                }\n            }\n            await CheckCloseBattle();\n        }\n        private async Task<bool> CreateMultiMapPoll()\n        {\n            var poll = new CommandPoll(this, false, false, true);\n            poll.PollEnded += MapVoteEnded;\n            var options = new List<PollOption>();\n            List<int> pickedMaps = new List<int>();\n            pickedMaps.Add(HostedMap?.ResourceID ?? 0);\n            using (var db = new ZkDataContext())\n            {\n                for (int i = 0; i < NumberOfMapChoices; i++)\n                {\n                    Resource map = null;\n                    if (i < NumberOfMapChoices / 2)\n                    {\n                        map = MapPicker.GetRecommendedMap(GetContext(), (MinimalMapSupportLevel < MapSupportLevel.Supported) ? MapSupportLevel.Supported : MinimalMapSupportLevel, MapRatings.GetMapRanking(Mode).TakeWhile(x => x.Percentile < 0.2).Select(x => x.Map).Where(x => !pickedMaps.Contains(x.ResourceID)).AsQueryable()); //choose at least 50% popular maps\n                    }\n                    if (map == null)\n                    {\n                        map = MapPicker.GetRecommendedMap(GetContext(), (MinimalMapSupportLevel < MapSupportLevel.Featured) ? MapSupportLevel.Supported : MinimalMapSupportLevel, db.Resources.Where(x => !pickedMaps.Contains(x.ResourceID)));\n                    }\n                    pickedMaps.Add(map.ResourceID);\n                    options.Add(new PollOption()\n                    {\n                        Name = map.InternalName,\n                        DisplayName = map.MapNameWithDimensions(),\n                        URL = $\"{GlobalConst.BaseSiteUrl}/Maps/Detail/{map.ResourceID}\",\n                        ResourceID = map.ResourceID,\n                        Action = async () =>\n                        {\n                            var cmd = new CmdMap().Create();\n                            cmd.Arm(this, null, map.ResourceID.ToString());\n                            if (cmd.Access == BattleCommand.AccessType.NotIngame && spring.IsRunning) return;\n                            if (cmd.Access == BattleCommand.AccessType.Ingame && !spring.IsRunning) return;\n", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "length": 3344, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "19ce7eea60fb00ea9e13296e05d1b64301152439fb8a88f2"}
{"input": "", "context": "namespace OpenDental{\n\tpartial class FormHL7DefEdit {\n\t\t/// <summary>\n\t\t/// Required designer variable.\n\t\t/// </summary>\n\t\tprivate System.ComponentModel.IContainer components = null;\n\t\t/// <summary>\n\t\t/// Clean up any resources being used.\n\t\t/// </summary>\n\t\t/// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>\n\t\tprotected override void Dispose(bool disposing) {\n\t\t\tif(disposing && (components != null)) {\n\t\t\t\tcomponents.Dispose();\n\t\t\t}\n\t\t\tbase.Dispose(disposing);\n\t\t}\n\t\t#region Windows Form Designer generated code\n\t\t/// <summary>\n\t\t/// Required method for Designer support - do not modify\n\t\t/// the contents of this method with the code editor.\n\t\t/// </summary>\n\t\tprivate void InitializeComponent() {\n\t\t\tSystem.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FormHL7DefEdit));\n\t\t\tthis.label15 = new System.Windows.Forms.Label();\n\t\t\tthis.label6 = new System.Windows.Forms.Label();\n\t\t\tthis.label5 = new System.Windows.Forms.Label();\n\t\t\tthis.label4 = new System.Windows.Forms.Label();\n\t\t\tthis.label3 = new System.Windows.Forms.Label();\n\t\t\tthis.textNote = new System.Windows.Forms.TextBox();\n\t\t\tthis.labelOutAddrPortEx = new System.Windows.Forms.Label();\n\t\t\tthis.labelInAddrPortEx = new System.Windows.Forms.Label();\n\t\t\tthis.textInternalTypeVersion = new System.Windows.Forms.TextBox();\n\t\t\tthis.label13 = new System.Windows.Forms.Label();\n\t\t\tthis.textInternalType = new System.Windows.Forms.TextBox();\n\t\t\tthis.label14 = new System.Windows.Forms.Label();\n\t\t\tthis.checkEnabled = new System.Windows.Forms.CheckBox();\n\t\t\tthis.textEscChar = new System.Windows.Forms.TextBox();\n\t\t\tthis.label12 = new System.Windows.Forms.Label();\n\t\t\tthis.checkInternal = new System.Windows.Forms.CheckBox();\n\t\t\tthis.label11 = new System.Windows.Forms.Label();\n\t\t\tthis.textSubcompSep = new System.Windows.Forms.TextBox();\n\t\t\tthis.label9 = new System.Windows.Forms.Label();\n\t\t\tthis.textRepSep = new System.Windows.Forms.TextBox();\n\t\t\tthis.label10 = new System.Windows.Forms.Label();\n\t\t\tthis.textCompSep = new System.Windows.Forms.TextBox();\n\t\t\tthis.label8 = new System.Windows.Forms.Label();\n\t\t\tthis.textFieldSep = new System.Windows.Forms.TextBox();\n\t\t\tthis.label7 = new System.Windows.Forms.Label();\n\t\t\tthis.comboModeTx = new System.Windows.Forms.ComboBox();\n\t\t\tthis.textSftpPassword = new System.Windows.Forms.TextBox();\n\t\t\tthis.labelSftpPassword = new System.Windows.Forms.Label();\n\t\t\tthis.textSftpUsername = new System.Windows.Forms.TextBox();\n\t\t\tthis.labelSftpUsername = new System.Windows.Forms.Label();\n\t\t\tthis.textOutPathOrAddrPort = new System.Windows.Forms.TextBox();\n\t\t\tthis.labelOutPathOrAddrPort = new System.Windows.Forms.Label();\n\t\t\tthis.textInPathOrAddrPort = new System.Windows.Forms.TextBox();\n\t\t\tthis.labelInPathOrAddrPort = new System.Windows.Forms.Label();\n\t\t\tthis.label2 = new System.Windows.Forms.Label();\n\t\t\tthis.label1 = new System.Windows.Forms.Label();\n\t\t\tthis.textDescription = new System.Windows.Forms.TextBox();\n\t\t\tthis.labelDelete = new System.Windows.Forms.Label();\n\t\t\tthis.label16 = new System.Windows.Forms.Label();\n\t\t\tthis.label17 = new System.Windows.Forms.Label();\n\t\t\tthis.textHL7ServiceName = new System.Windows.Forms.TextBox();\n\t\t\tthis.label18 = new System.Windows.Forms.Label();\n\t\t\tthis.textHL7Server = new System.Windows.Forms.TextBox();\n\t\t\tthis.label19 = new System.Windows.Forms.Label();\n\t\t\tthis.groupShowDemographics = new System.Windows.Forms.GroupBox();\n\t\t\tthis.label20 = new System.Windows.Forms.Label();\n\t\t\tthis.radioChangeAndAdd = new System.Windows.Forms.RadioButton();\n\t\t\tthis.radioChange = new System.Windows.Forms.RadioButton();\n\t\t\tthis.radioShow = new System.Windows.Forms.RadioButton();\n\t\t\tthis.radioHide = new System.Windows.Forms.RadioButton();\n\t\t\tthis.checkShowAccount = new System.Windows.Forms.CheckBox();\n\t\t\tthis.checkShowAppts = new System.Windows.Forms.CheckBox();\n\t\t\tthis.checkQuadAsToothNum = new System.Windows.Forms.CheckBox();\n\t\t\tthis.labelLabImageCat = new System.Windows.Forms.Label();\n\t\t\tthis.comboLabImageCat = new System.Windows.Forms.ComboBox();\n\t\t\tthis.groupDelimeters = new System.Windows.Forms.GroupBox();\n\t\t\tthis.groupHL7Comm = new System.Windows.Forms.GroupBox();\n\t\t\tthis.butBrowseOut = new OpenDental.UI.Button();\n\t\t\tthis.butBrowseIn = new OpenDental.UI.Button();\n\t\t\tthis.butAdd = new OpenDental.UI.Button();\n\t\t\tthis.butOK = new OpenDental.UI.Button();\n\t\t\tthis.butCancel = new OpenDental.UI.Button();\n\t\t\tthis.butDelete = new OpenDental.UI.Button();\n\t\t\tthis.gridMain = new OpenDental.UI.ODGrid();\n\t\t\tthis.groupShowDemographics.SuspendLayout();\n\t\t\tthis.groupDelimeters.SuspendLayout();\n\t\t\tthis.groupHL7Comm.SuspendLayout();\n\t\t\tthis.SuspendLayout();\n\t\t\t// \n\t\t\t// label15\n\t\t\t// \n\t\t\tthis.label15.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label15.Location = new System.Drawing.Point(166, 93);\n\t\t\tthis.label15.Name = \"label15\";\n\t\t\tthis.label15.Size = new System.Drawing.Size(91, 18);\n\t\t\tthis.label15.TabIndex = 0;\n\t\t\tthis.label15.Text = \"Default: \\\\\";\n\t\t\tthis.label15.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\t// \n\t\t\t// label6\n\t\t\t// \n\t\t\tthis.label6.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label6.Location = new System.Drawing.Point(166, 73);\n\t\t\tthis.label6.Name = \"label6\";\n\t\t\tthis.label6.Size = new System.Drawing.Size(91, 18);\n\t\t\tthis.label6.TabIndex = 0;\n\t\t\tthis.label6.Text = \"Default: &\";\n\t\t\tthis.label6.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\tthis.label6.UseMnemonic = false;\n\t\t\t// \n\t\t\t// label5\n\t\t\t// \n\t\t\tthis.label5.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label5.Location = new System.Drawing.Point(166, 53);\n\t\t\tthis.label5.Name = \"label5\";\n\t\t\tthis.label5.Size = new System.Drawing.Size(91, 18);\n\t\t\tthis.label5.TabIndex = 0;\n\t\t\tthis.label5.Text = \"Default: ^\";\n\t\t\tthis.label5.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\t// \n\t\t\t// label4\n\t\t\t// \n\t\t\tthis.label4.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label4.Location = new System.Drawing.Point(166, 33);\n\t\t\tthis.label4.Name = \"label4\";\n\t\t\tthis.label4.Size = new System.Drawing.Size(91, 18);\n\t\t\tthis.label4.TabIndex = 0;\n\t\t\tthis.label4.Text = \"Default: ~\";\n\t\t\tthis.label4.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\t// \n\t\t\t// label3\n\t\t\t// \n\t\t\tthis.label3.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label3.Location = new System.Drawing.Point(166, 13);\n\t\t\tthis.label3.Name = \"label3\";\n\t\t\tthis.label3.Size = new System.Drawing.Size(91, 18);\n\t\t\tthis.label3.TabIndex = 0;\n\t\t\tthis.label3.Text = \"Default: |\";\n\t\t\tthis.label3.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\t// \n\t\t\t// textNote\n\t\t\t// \n\t\t\tthis.textNote.Location = new System.Drawing.Point(443, 184);\n\t\t\tthis.textNote.Multiline = true;\n\t\t\tthis.textNote.Name = \"textNote\";\n\t\t\tthis.textNote.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;\n\t\t\tthis.textNote.Size = new System.Drawing.Size(368, 40);\n\t\t\tthis.textNote.TabIndex = 62;\n\t\t\t// \n\t\t\t// labelOutAddrPortEx\n\t\t\t// \n\t\t\tthis.labelOutAddrPortEx.Location = new System.Drawing.Point(336, 39);\n\t\t\tthis.labelOutAddrPortEx.Name = \"labelOutAddrPortEx\";\n\t\t\tthis.labelOutAddrPortEx.Size = new System.Drawing.Size(182, 18);\n\t\t\tthis.labelOutAddrPortEx.TabIndex = 0;\n\t\t\tthis.labelOutAddrPortEx.Text = \"Ex: 192.168.0.23:5846\";\n\t\t\tthis.labelOutAddrPortEx.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\tthis.labelOutAddrPortEx.Visible = false;\n\t\t\t// \n\t\t\t// labelInAddrPortEx\n\t\t\t// \n\t\t\tthis.labelInAddrPortEx.Location = new System.Drawing.Point(336, 17);\n\t\t\tthis.labelInAddrPortEx.Name = \"labelInAddrPortEx\";\n\t\t\tthis.labelInAddrPortEx.Size = new System.Drawing.Size(182, 18);\n\t\t\tthis.labelInAddrPortEx.TabIndex = 0;\n\t\t\tthis.labelInAddrPortEx.Text = \"Ex: server.address.com:12345\";\n\t\t\tthis.labelInAddrPortEx.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\tthis.labelInAddrPortEx.Visible = false;\n\t\t\t// \n\t\t\t// textInternalTypeVersion\n\t\t\t// \n\t\t\tthis.textInternalTypeVersion.Location = new System.Drawing.Point(155, 112);\n\t\t\tthis.textInternalTypeVersion.Name = \"textInternalTypeVersion\";\n\t\t\tthis.textInternalTypeVersion.ReadOnly = true;\n\t\t\tthis.textInternalTypeVersion.Size = new System.Drawing.Size(125, 20);\n\t\t\tthis.textInternalTypeVersion.TabIndex = 44;\n\t\t\t// \n\t\t\t// label13\n\t\t\t// \n\t\t\tthis.label13.Location = new System.Drawing.Point(6, 113);\n\t\t\tthis.label13.Name = \"label13\";\n\t\t\tthis.label13.Size = new System.Drawing.Size(148, 18);\n\t\t\tthis.label13.TabIndex = 0;\n\t\t\tthis.label13.Text = \"Internal Type Version\";\n\t\t\tthis.label13.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textInternalType\n\t\t\t// \n\t\t\tthis.textInternalType.Location = new System.Drawing.Point(155, 92);\n\t\t\tthis.textInternalType.Name = \"textInternalType\";\n\t\t\tthis.textInternalType.ReadOnly = true;\n\t\t\tthis.textInternalType.Size = new System.Drawing.Size(125, 20);\n\t\t\tthis.textInternalType.TabIndex = 43;\n\t\t\t// \n\t\t\t// label14\n\t\t\t// \n\t\t\tthis.label14.Location = new System.Drawing.Point(6, 93);\n\t\t\tthis.label14.Name = \"label14\";\n\t\t\tthis.label14.Size = new System.Drawing.Size(148, 18);\n\t\t\tthis.label14.TabIndex = 0;\n\t\t\tthis.label14.Text = \"Internal Type\";\n\t\t\tthis.label14.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// checkEnabled\n\t\t\t// \n\t\t\tthis.checkEnabled.Checked = true;\n\t\t\tthis.checkEnabled.CheckState = System.Windows.Forms.CheckState.Checked;\n\t\t\tthis.checkEnabled.FlatStyle = System.Windows.Forms.FlatStyle.System;\n\t\t\tthis.checkEnabled.Location = new System.Drawing.Point(6, 30);\n\t\t\tthis.checkEnabled.Name = \"checkEnabled\";\n\t\t\tthis.checkEnabled.RightToLeft = System.Windows.Forms.RightToLeft.Yes;\n\t\t\tthis.checkEnabled.Size = new System.Drawing.Size(162, 18);\n\t\t\tthis.checkEnabled.TabIndex = 40;\n\t\t\tthis.checkEnabled.Text = \"Enabled\";\n\t\t\tthis.checkEnabled.CheckedChanged += new System.EventHandler(this.checkEnabled_CheckedChanged);\n\t\t\tthis.checkEnabled.Click += new System.EventHandler(this.checkEnabled_Click);\n\t\t\t// \n\t\t\t// textEscChar\n\t\t\t// \n\t\t\tthis.textEscChar.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.textEscChar.Location = new System.Drawing.Point(138, 92);\n\t\t\tthis.textEscChar.Name = \"textEscChar\";\n\t\t\tthis.textEscChar.Size = new System.Drawing.Size(27, 20);\n\t\t\tthis.textEscChar.TabIndex = 49;\n\t\t\t// \n\t\t\t// label12\n\t\t\t// \n\t\t\tthis.label12.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label12.Location = new System.Drawing.Point(6, 93);\n\t\t\tthis.label12.Name = \"label12\";\n\t\t\tthis.label12.Size = new System.Drawing.Size(131, 18);\n\t\t\tthis.label12.TabIndex = 0;\n\t\t\tthis.label12.Text = \"Escape\";\n\t\t\tthis.label12.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// checkInternal\n\t\t\t// \n\t\t\tthis.checkInternal.Enabled = false;\n\t\t\tthis.checkInternal.FlatStyle = System.Windows.Forms.FlatStyle.System;\n\t\t\tthis.checkInternal.Location = new System.Drawing.Point(6, 12);\n\t\t\tthis.checkInternal.Name = \"checkInternal\";\n\t\t\tthis.checkInternal.RightToLeft = System.Windows.Forms.RightToLeft.Yes;\n\t\t\tthis.checkInternal.Size = new System.Drawing.Size(162, 18);\n\t\t\tthis.checkInternal.TabIndex = 31;\n\t\t\tthis.checkInternal.TabStop = false;\n\t\t\tthis.checkInternal.Text = \"Internal\";\n\t\t\t// \n\t\t\t// label11\n\t\t\t// \n\t\t\tthis.label11.Location = new System.Drawing.Point(292, 185);\n\t\t\tthis.label11.Name = \"label11\";\n\t\t\tthis.label11.Size = new System.Drawing.Size(150, 18);\n\t\t\tthis.label11.TabIndex = 0;\n\t\t\tthis.label11.Text = \"Note\";\n\t\t\tthis.label11.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textSubcompSep\n\t\t\t// \n\t\t\tthis.textSubcompSep.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.textSubcompSep.Location = new System.Drawing.Point(138, 72);\n\t\t\tthis.textSubcompSep.Name = \"textSubcompSep\";\n\t\t\tthis.textSubcompSep.Size = new System.Drawing.Size(27, 20);\n\t\t\tthis.textSubcompSep.TabIndex = 48;\n\t\t\t// \n\t\t\t// label9\n\t\t\t// \n\t\t\tthis.label9.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label9.Location = new System.Drawing.Point(6, 73);\n\t\t\tthis.label9.Name = \"label9\";\n\t\t\tthis.label9.Size = new System.Drawing.Size(131, 18);\n\t\t\tthis.label9.TabIndex = 0;\n\t\t\tthis.label9.Text = \"Subcomponent\";\n\t\t\tthis.label9.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textRepSep\n\t\t\t// \n\t\t\tthis.textRepSep.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.textRepSep.Location = new System.Drawing.Point(138, 32);\n\t\t\tthis.textRepSep.Name = \"textRepSep\";\n\t\t\tthis.textRepSep.Size = new System.Drawing.Size(27, 20);\n\t\t\tthis.textRepSep.TabIndex = 46;\n\t\t\t// \n\t\t\t// label10\n\t\t\t// \n\t\t\tthis.label10.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label10.Location = new System.Drawing.Point(6, 33);\n\t\t\tthis.label10.Name = \"label10\";\n\t\t\tthis.label10.Size = new System.Drawing.Size(131, 18);\n\t\t\tthis.label10.TabIndex = 0;\n\t\t\tthis.label10.Text = \"Repetition\";\n\t\t\tthis.label10.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textCompSep\n\t\t\t// \n\t\t\tthis.textCompSep.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.textCompSep.Location = new System.Drawing.Point(138, 52);\n\t\t\tthis.textCompSep.Name = \"textCompSep\";\n\t\t\tthis.textCompSep.Size = new System.Drawing.Size(27, 20);\n\t\t\tthis.textCompSep.TabIndex = 47;\n\t\t\t// \n\t\t\t// label8\n\t\t\t// \n\t\t\tthis.label8.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label8.Location = new System.Drawing.Point(6, 53);\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.Size = new System.Drawing.Size(131, 18);\n\t\t\tthis.label8.TabIndex = 0;\n\t\t\tthis.label8.Text = \"Component\";\n\t\t\tthis.label8.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textFieldSep\n\t\t\t// \n\t\t\tthis.textFieldSep.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.textFieldSep.Location = new System.Drawing.Point(138, 12);\n\t\t\tthis.textFieldSep.Name = \"textFieldSep\";\n\t\t\tthis.textFieldSep.Size = new System.Drawing.Size(27, 20);\n\t\t\tthis.textFieldSep.TabIndex = 45;\n\t\t\t// \n\t\t\t// label7\n\t\t\t// \n\t\t\tthis.label7.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label7.Location = new System.Drawing.Point(6, 13);\n\t\t\tthis.label7.Name = \"label7\";\n\t\t\tthis.label7.Size = new System.Drawing.Size(131, 18);\n\t\t\tthis.label7.TabIndex = 0;\n\t\t\tthis.label7.Text = \"Field\";\n\t\t\tthis.label7.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// comboModeTx\n\t\t\t// \n\t\t\tthis.comboModeTx.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;\n\t\t\tthis.comboModeTx.Location = new System.Drawing.Point(155, 71);\n\t\t\tthis.comboModeTx.MaxDropDownItems = 100;\n\t\t\tthis.comboModeTx.Name = \"comboModeTx\";\n\t\t\tthis.comboModeTx.Size = new System.Drawing.Size(125, 21);\n\t\t\tthis.comboModeTx.TabIndex = 42;\n\t\t\tthis.comboModeTx.SelectedIndexChanged += new System.EventHandler(this.comboModeTx_SelectedIndexChanged);\n\t\t\t// \n\t\t\t// textSftpPassword\n\t\t\t// \n\t\t\tthis.textSftpPassword.Location = new System.Drawing.Point(157, 78);\n\t\t\tthis.textSftpPassword.Name = \"textSftpPassword\";\n\t\t\tthis.textSftpPassword.PasswordChar = '*';\n\t\t\tthis.textSftpPassword.Size = new System.Drawing.Size(125, 20);\n\t\t\tthis.textSftpPassword.TabIndex = 58;\n\t\t\t// \n\t\t\t// labelSftpPassword\n\t\t\t// \n\t\t\tthis.labelSftpPassword.Location = new System.Drawing.Point(6, 79);\n\t\t\tthis.labelSftpPassword.Name = \"labelSftpPassword\";\n\t\t\tthis.labelSftpPassword.Size = new System.Drawing.Size(150, 18);\n\t\t\tthis.labelSftpPassword.TabIndex = 0;\n\t\t\tthis.labelSftpPassword.Text = \"Sftp Password\";\n\t\t\tthis.labelSftpPassword.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textSftpUsername\n\t\t\t// \n\t\t\tthis.textSftpUsername.Location = new System.Drawing.Point(157, 58);\n\t\t\tthis.textSftpUsername.Name = \"textSftpUsername\";\n\t\t\tthis.textSftpUsername.Size = new System.Drawing.Size(125, 20);\n\t\t\tthis.textSftpUsername.TabIndex = 57;\n\t\t\t// \n\t\t\t// labelSftpUsername\n\t\t\t// \n\t\t\tthis.labelSftpUsername.Location = new System.Drawing.Point(6, 59);\n\t\t\tthis.labelSftpUsername.Name = \"labelSftpUsername\";\n\t\t\tthis.labelSftpUsername.Size = new System.Drawing.Size(150, 18);\n\t\t\tthis.labelSftpUsername.TabIndex = 0;\n\t\t\tthis.labelSftpUsername.Text = \"Sftp Username\";\n\t\t\tthis.labelSftpUsername.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textOutPathOrAddrPort\n\t\t\t// \n\t\t\tthis.textOutPathOrAddrPort.Location = new System.Drawing.Point(157, 38);\n\t\t\tthis.textOutPathOrAddrPort.Name = \"textOutPathOrAddrPort\";\n\t\t\tthis.textOutPathOrAddrPort.Size = new System.Drawing.Size(177, 20);\n\t\t\tthis.textOutPathOrAddrPort.TabIndex = 55;\n\t\t\t// \n\t\t\t// labelOutPathOrAddrPort\n\t\t\t// \n\t\t\tthis.labelOutPathOrAddrPort.Location = new System.Drawing.Point(6, 39);\n\t\t\tthis.labelOutPathOrAddrPort.Name = \"labelOutPathOrAddrPort\";\n\t\t\tthis.labelOutPathOrAddrPort.Size = new System.Drawing.Size(150, 18);\n\t\t\tthis.labelOutPathOrAddrPort.TabIndex = 0;\n\t\t\tthis.labelOutPathOrAddrPort.Text = \"Outgoing Folder\";\n\t\t\tthis.labelOutPathOrAddrPort.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textInPathOrAddrPort\n\t\t\t// \n\t\t\tthis.textInPathOrAddrPort.Location = new System.Drawing.Point(157, 16);\n\t\t\tthis.textInPathOrAddrPort.Name = \"textInPathOrAddrPort\";\n\t\t\tthis.textInPathOrAddrPort.Size = new System.Drawing.Size(177, 20);\n\t\t\tthis.textInPathOrAddrPort.TabIndex = 53;\n\t\t\t// \n\t\t\t// labelInPathOrAddrPort\n\t\t\t// \n\t\t\tthis.labelInPathOrAddrPort.Location = new System.Drawing.Point(6, 17);\n\t\t\tthis.labelInPathOrAddrPort.Name = \"labelInPathOrAddrPort\";\n\t\t\tthis.labelInPathOrAddrPort.Size = new System.Drawing.Size(150, 18);\n\t\t\tthis.labelInPathOrAddrPort.TabIndex = 0;\n\t\t\tthis.labelInPathOrAddrPort.Text = \"Incoming Folder\";\n\t\t\tthis.labelInPathOrAddrPort.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// label2\n\t\t\t// \n\t\t\tthis.label2.Location = new System.Drawing.Point(6, 72);\n\t\t\tthis.label2.Name = \"label2\";\n\t\t\tthis.label2.Size = new System.Drawing.Size(148, 18);\n\t\t\tthis.label2.TabIndex = 0;\n\t\t\tthis.label2.Text = \"ModeTx\";\n\t\t\tthis.label2.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// label1\n\t\t\t// \n", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "length": 1316, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "bcd0194211a51191ba420ba81d1fbd3578d39821783bd335"}
{"input": "", "context": "//\n// System.Web.Compilation.AspComponentFoundry\n//\n// Authors:\n//\tGonzalo Paniagua Javier (gonzalo@ximian.com)\n//\n// (C) 2002,2003 Ximian, Inc (http://www.ximian.com)\n//\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.IO;\nusing System.Reflection;\nusing System.Web;\nusing System.Web.Configuration;\nusing System.Web.UI;\nusing System.Web.Util;\nnamespace System.Web.Compilation\n{\n\tclass AspComponentFoundry\n\t{\n\t\tHashtable foundries;\n\t\tDictionary <string, AspComponent> components;\n\t\tDictionary <string, AspComponent> Components {\n\t\t\tget {\n\t\t\t\tif (components == null)\n\t\t\t\t\tcomponents = new Dictionary <string, AspComponent> (StringComparer.OrdinalIgnoreCase);\n\t\t\t\treturn components;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic AspComponentFoundry ()\n\t\t{\n\t\t\tfoundries = new Hashtable (StringComparer.InvariantCultureIgnoreCase);\n\t\t\tAssembly sw = typeof (AspComponentFoundry).Assembly;\n\t\t\tRegisterFoundry (\"asp\", sw, \"System.Web.UI.WebControls\");\n\t\t\tRegisterFoundry (\"\", \"object\", typeof (System.Web.UI.ObjectTag));\n\t\t\tRegisterConfigControls ();\n\t\t}\n\t\tpublic AspComponent GetComponent (string tagName)\n\t\t{\n\t\t\tif (tagName == null || tagName.Length == 0)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tif (components != null) {\n\t\t\t\tAspComponent ret;\n\t\t\t\tif (components.TryGetValue (tagName, out ret))\n\t\t\t\t\treturn ret;\n\t\t\t}\n\t\t\tstring foundryName, tag;\n\t\t\tint colon = tagName.IndexOf (':');\n\t\t\tif (colon > -1) {\n\t\t\t\tif (colon == 0)\n\t\t\t\t\tthrow new Exception (\"Empty TagPrefix is not valid.\");\n\t\t\t\tif (colon + 1 == tagName.Length)\n\t\t\t\t\treturn null;\n\t\t\t\tfoundryName = tagName.Substring (0, colon);\n\t\t\t\ttag = tagName.Substring (colon + 1);\n\t\t\t} else {\n\t\t\t\tfoundryName = String.Empty;\n\t\t\t\ttag = tagName;\n\t\t\t}\n\t\t\t\n\t\t\tobject o = foundries [foundryName];\t\t\t\n\t\t\tif (o == null)\n\t\t\t\treturn null;\n\t\t\tFoundry foundry = o as Foundry;\n\t\t\tif (foundry != null)\n\t\t\t\treturn CreateComponent (foundry, tagName, foundryName, tag);\n\t\t\t\n\t\t\tArrayList af = o as ArrayList;\n\t\t\tif (af == null)\n\t\t\t\treturn null;\n\t\t\tAspComponent component = null;\n\t\t\tException e = null;\n\t\t\tforeach (Foundry f in af) {\n\t\t\t\ttry {\n\t\t\t\t\tcomponent = CreateComponent (f, tagName, foundryName, tag);\n\t\t\t\t\tif (component != null)\n\t\t\t\t\t\treturn component;\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\t\te = ex;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (e != null)\n\t\t\t\tthrow e;\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t\tAspComponent CreateComponent (Foundry foundry, string tagName, string prefix, string tag)\n\t\t{\n\t\t\tstring source, ns;\n\t\t\tType type;\n\t\t\ttype = foundry.GetType (tag, out source, out ns);\n\t\t\tif (type == null)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tAspComponent ret = new AspComponent (type, ns, prefix, source, foundry.FromConfig);\n\t\t\tDictionary <string, AspComponent> components = Components;\n\t\t\tcomponents.Add (tagName, ret);\n\t\t\treturn ret;\n\t\t}\n\t\t\n\t\tpublic void RegisterFoundry (string foundryName, Assembly assembly, string nameSpace)\n\t\t{\n\t\t\tRegisterFoundry (foundryName, assembly, nameSpace, false);\n\t\t}\n\t\t\n\t\tpublic void RegisterFoundry (string foundryName,\n\t\t\t\t\t     Assembly assembly,\n\t\t\t\t\t     string nameSpace,\n\t\t\t\t\t     bool fromConfig)\n\t\t{\n\t\t\tAssemblyFoundry foundry = new AssemblyFoundry (assembly, nameSpace);\n\t\t\tfoundry.FromConfig = fromConfig;\n\t\t\tInternalRegister (foundryName, foundry, fromConfig);\n\t\t}\n\t\tpublic void RegisterFoundry (string foundryName, string tagName, Type type)\n\t\t{\n\t\t\tRegisterFoundry (foundryName, tagName, type, false);\n\t\t}\n\t\t\n\t\tpublic void RegisterFoundry (string foundryName,\n\t\t\t\t\t     string tagName,\n\t\t\t\t\t     Type type,\n\t\t\t\t\t     bool fromConfig)\n\t\t{\n\t\t\tTagNameFoundry foundry = new TagNameFoundry (tagName, type);\n\t\t\tfoundry.FromConfig = fromConfig;\n\t\t\tInternalRegister (foundryName, foundry, fromConfig);\n\t\t}\n\t\tpublic void RegisterFoundry (string foundryName, string tagName, string source)\n\t\t{\n\t\t\tRegisterFoundry (foundryName, tagName, source, false);\n\t\t}\n\t\t\n\t\tpublic void RegisterFoundry (string foundryName,\n\t\t\t\t\t     string tagName,\n\t\t\t\t\t     string source,\n\t\t\t\t\t     bool fromConfig)\n\t\t{\n\t\t\tTagNameFoundry foundry = new TagNameFoundry (tagName, source);\n\t\t\tfoundry.FromConfig = fromConfig;\n\t\t\tInternalRegister (foundryName, foundry, fromConfig);\n\t\t}\n\t\tpublic void RegisterAssemblyFoundry (string foundryName,\n\t\t\t\t\t\t     string assemblyName,\n\t\t\t\t\t\t     string nameSpace,\n\t\t\t\t\t\t     bool fromConfig)\n\t\t{\n\t\t\tAssemblyFoundry foundry = new AssemblyFoundry (assemblyName, nameSpace);\n\t\t\tfoundry.FromConfig = fromConfig;\n\t\t\tInternalRegister (foundryName, foundry, fromConfig);\n\t\t}\t\t\n\t\tvoid RegisterConfigControls ()\n\t\t{\n\t\t\tPagesSection pages = WebConfigurationManager.GetSection (\"system.web/pages\") as PagesSection;\n\t\t\tif (pages == null)\n\t\t\t\treturn;\n\t\t\tTagPrefixCollection controls = pages.Controls;\n\t\t\tif (controls == null || controls.Count == 0)\n\t\t\t\treturn;\n\t\t\t\n\t\t\tIList appCode = BuildManager.CodeAssemblies;\n\t\t\tbool haveCodeAssemblies = appCode != null && appCode.Count > 0;\n\t\t\tAssembly asm;\n\t\t\tforeach (TagPrefixInfo tpi in controls) {\n\t\t\t\tif (!String.IsNullOrEmpty (tpi.TagName))\n\t\t\t\t\tRegisterFoundry (tpi.TagPrefix, tpi.TagName, tpi.Source, true);\n\t\t\t\telse if (String.IsNullOrEmpty (tpi.Assembly)) {\n\t\t\t\t\tif (haveCodeAssemblies) {\n\t\t\t\t\t\tforeach (object o in appCode) {\n\t\t\t\t\t\t\tasm = o as Assembly;\n\t\t\t\t\t\t\tif (asm == null)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tRegisterFoundry (tpi.TagPrefix, asm, tpi.Namespace, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (!String.IsNullOrEmpty (tpi.Namespace))\n\t\t\t\t\tRegisterAssemblyFoundry (tpi.TagPrefix,\n\t\t\t\t\t\t\t\t tpi.Assembly,\n\t\t\t\t\t\t\t\t tpi.Namespace,\n\t\t\t\t\t\t\t\t true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvoid InternalRegister (string foundryName, Foundry foundry, bool fromConfig)\n\t\t{\n\t\t\tobject f = foundries [foundryName];\n\t\t\tFoundry newFoundry = null;\n\t\t\t\n\t\t\tif (f is CompoundFoundry) {\n\t\t\t\t((CompoundFoundry) f).Add (foundry);\n\t\t\t\treturn;\n\t\t\t} else if (f == null || f is ArrayList || (f is AssemblyFoundry && foundry is AssemblyFoundry)) {\n\t\t\t\tnewFoundry = foundry;\n\t\t\t} else if (f != null) {\n\t\t\t\tCompoundFoundry compound = new CompoundFoundry (foundryName);\n\t\t\t\tcompound.Add ((Foundry) f);\n\t\t\t\tcompound.Add (foundry);\n\t\t\t\tnewFoundry = foundry;\n\t\t\t\tnewFoundry.FromConfig = fromConfig;\n\t\t\t}\n\t\t\tif (newFoundry == null)\n\t\t\t\treturn;\n\t\t\tif (f == null) {\n\t\t\t\tfoundries [foundryName] = newFoundry;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tArrayList af = f as ArrayList;\n\t\t\tif (af == null) {\n\t\t\t\taf = new ArrayList (2);\n\t\t\t\taf.Add (f);\n\t\t\t\tfoundries [foundryName] = af;\n\t\t\t}\n\t\t\tif (newFoundry is AssemblyFoundry) {\n\t\t\t\tobject o;\n\t\t\t\tfor (int i = 0; i < af.Count; i++) {\n\t\t\t\t\to = af [i];\n\t\t\t\t\tif (o is AssemblyFoundry) {\n\t\t\t\t\t\taf.Insert (i, newFoundry);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\taf.Add (newFoundry);\n\t\t\t} else\n\t\t\t\taf.Insert (0, newFoundry);\n\t\t}\n\t\tpublic bool LookupFoundry (string foundryName)\n\t\t{\n\t\t\treturn foundries.Contains (foundryName);\n\t\t}\n\t\tabstract class Foundry\n\t\t{\n\t\t\tbool _fromConfig;\n\t\t\tpublic bool FromConfig {\n\t\t\t\tget { return _fromConfig; }\n\t\t\t\tset { _fromConfig = value; }\n\t\t\t}\n\t\t\t\n\t\t\tpublic abstract Type GetType (string componentName, out string source, out string ns);\n\t\t}\n\t\t\n\t\tclass TagNameFoundry : Foundry\n\t\t{\n\t\t\tstring tagName;\n\t\t\tType type;\n\t\t\tstring source;\n\t\t\tpublic bool FromWebConfig {\n\t\t\t\tget { return source != null; }\n\t\t\t}\n\t\t\t\n\t\t\tpublic TagNameFoundry (string tagName, string source)\n\t\t\t{\n\t\t\t\tthis.tagName = tagName;\n\t\t\t\tthis.source = source;\n\t\t\t}\n\t\t\t\n\t\t\tpublic TagNameFoundry (string tagName, Type type)\n\t\t\t{\n\t\t\t\tthis.tagName = tagName;\n\t\t\t\tthis.type = type;\n\t\t\t}\n\t\t\tpublic override Type GetType (string componentName, out string source, out string ns)\n\t\t\t{\n\t\t\t\tsource = null;\n\t\t\t\tns = null;\n\t\t\t\tif (0 != String.Compare (componentName, tagName, true, Helpers.InvariantCulture))\n\t\t\t\t\treturn null;\n\t\t\t\tsource = this.source;\n\t\t\t\treturn LoadType ();\n\t\t\t}\n\t\t\tType LoadType ()\n\t\t\t{\n\t\t\t\tif (type != null)\n\t\t\t\t\treturn type;\n\t\t\t\tHttpContext context = HttpContext.Current;\n\t\t\t\tstring vpath;\n\t\t\t\tstring realpath;\n\t\t\t\t\n\t\t\t\tif (VirtualPathUtility.IsAppRelative (source)) {\n\t\t\t\t\tvpath = source;\n\t\t\t\t\trealpath = context.Request.MapPath (source);\n\t\t\t\t} else {\n\t\t\t\t\tvpath = VirtualPathUtility.ToAppRelative (source);\n\t\t\t\t\trealpath = source;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((type = CachingCompiler.GetTypeFromCache (realpath)) != null)\n\t\t\t\t\treturn type;\t\t\t\t\n\t\t\t\ttype = BuildManager.GetCompiledType (vpath);\n\t\t\t\tif (type != null) {\n\t\t\t\t\tAspGenerator.AddTypeToCache (null, realpath, type);\n\t\t\t\t\tBuildManager.AddToReferencedAssemblies (type.Assembly);\n\t\t\t\t}\n\t\t\t\treturn type;\n\t\t\t}\n\t\t\t\n\t\t\tpublic string TagName {\n\t\t\t\tget { return tagName; }\n\t\t\t}\n\t\t}\n\t\tclass AssemblyFoundry : Foundry\n\t\t{\n\t\t\tstring nameSpace;\n\t\t\tAssembly assembly;\n\t\t\tstring assemblyName;\n\t\t\tDictionary <string, Assembly> assemblyCache;\n\t\t\t\n\t\t\tpublic AssemblyFoundry (Assembly assembly, string nameSpace)\n\t\t\t{\n\t\t\t\tthis.assembly = assembly;\n\t\t\t\tthis.nameSpace = nameSpace;\n\t\t\t\tif (assembly != null)\n\t\t\t\t\tthis.assemblyName = assembly.FullName;\n\t\t\t\telse\n\t\t\t\t\tthis.assemblyName = null;\n\t\t\t}\n\t\t\tpublic AssemblyFoundry (string assemblyName, string nameSpace)\n\t\t\t{\n\t\t\t\tthis.assembly = null;\n\t\t\t\tthis.nameSpace = nameSpace;\n\t\t\t\tthis.assemblyName = assemblyName;\n\t\t\t}\n\t\t\t\n\t\t\tpublic override Type GetType (string componentName, out string source, out string ns)\n\t\t\t{\n\t\t\t\tsource = null;\n\t\t\t\tns = nameSpace;\n\t\t\t\tif (assembly == null && assemblyName != null)\n\t\t\t\t\tassembly = GetAssemblyByName (assemblyName, true);\n\t\t\t\tstring typeName = String.Concat (nameSpace, \".\", componentName);\n\t\t\t\tif (assembly != null)\n\t\t\t\t\treturn assembly.GetType (typeName, false, true);\n\t\t\t\tIList tla = BuildManager.TopLevelAssemblies;\n\t\t\t\tif (tla != null && tla.Count > 0) {\n\t\t\t\t\tType ret = null;\n\t\t\t\t\tforeach (Assembly asm in tla) {\n\t\t\t\t\t\tif (asm == null)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tret = asm.GetType (typeName, false, true);\n\t\t\t\t\t\tif (ret != null)\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tAssembly GetAssemblyByName (string name, bool throwOnMissing)\n\t\t\t{\n\t\t\t\tif (assemblyCache == null)\n\t\t\t\t\tassemblyCache = new Dictionary <string, Assembly> ();\n\t\t\t\t\n\t\t\t\tif (assemblyCache.ContainsKey (name))\n\t\t\t\t\treturn assemblyCache [name];\n\t\t\t\t\n\t\t\t\tAssembly assembly = null;\n\t\t\t\tException error = null;\n\t\t\t\tif (name.IndexOf (',') != -1) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tassembly = Assembly.Load (name);\n\t\t\t\t\t} catch (Exception e) { error = e; }\n\t\t\t\t}\n", "answers": ["\t\t\t\tif (assembly == null) {"], "length": 1336, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "c6886216f6449ef370d3a3478bd5092fbf6fd825bf157d43"}
{"input": "", "context": "#!/usr/bin/python\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\nDOCUMENTATION = '''\n---\nmodule: ce_link_status\nversion_added: \"2.4\"\nshort_description: Get interface link status on HUAWEI CloudEngine switches.\ndescription:\n    - Get interface link status on HUAWEI CloudEngine switches.\nauthor:\n    - Zhijin Zhou (@QijunPan)\nnotes:\n    - Current physical state shows an interface's physical status.\n    - Current link state shows an interface's link layer protocol status.\n    - Current IPv4 state shows an interface's IPv4 protocol status.\n    - Current IPv6 state shows an interface's  IPv6 protocol status.\n    - Inbound octets(bytes) shows the number of bytes that an interface received.\n    - Inbound unicast(pkts) shows the number of unicast packets that an interface received.\n    - Inbound multicast(pkts) shows the number of multicast packets that an interface received.\n    - Inbound broadcast(pkts) shows  the number of broadcast packets that an interface received.\n    - Inbound error(pkts) shows the number of error packets that an interface received.\n    - Inbound drop(pkts) shows the total number of packets that were sent to the interface but dropped by an interface.\n    - Inbound rate(byte/sec) shows the rate at which an interface receives bytes within an interval.\n    - Inbound rate(pkts/sec) shows the rate at which an interface receives packets within an interval.\n    - Outbound octets(bytes) shows the number of the bytes that an interface sent.\n    - Outbound unicast(pkts) shows  the number of unicast packets that an interface sent.\n    - Outbound multicast(pkts) shows the number of multicast packets that an interface sent.\n    - Outbound broadcast(pkts) shows the number of broadcast packets that an interface sent.\n    - Outbound error(pkts) shows the total number of packets that an interface sent but dropped by the remote interface.\n    - Outbound drop(pkts) shows the number of dropped packets that an interface sent.\n    - Outbound rate(byte/sec) shows the rate at which an interface sends bytes within an interval.\n    - Outbound rate(pkts/sec) shows the rate at which an interface sends packets within an interval.\n    - Speed shows the rate for an Ethernet interface.\noptions:\n    interface:\n        description:\n            - For the interface parameter, you can enter C(all) to display information about all interface,\n              an interface type such as C(40GE) to display information about interfaces of the specified type,\n              or full name of an interface such as C(40GE1/0/22) or C(vlanif10)\n              to display information about the specific interface.\n        required: true\n'''\nEXAMPLES = '''\n- name: Link status test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n  tasks:\n  - name: Get specified interface link status information\n    ce_link_status:\n      interface: 40GE1/0/1\n      provider: \"{{ cli }}\"\n  - name: Get specified interface type link status information\n    ce_link_status:\n      interface: 40GE\n      provider: \"{{ cli }}\"\n  - name: Get all interface link status information\n    ce_link_status:\n      interface: all\n      provider: \"{{ cli }}\"\n'''\nRETURN = '''\nresult:\n    description: Interface link status information\n    returned: always\n    type: dict\n    sample: {\n                \"40ge2/0/8\": {\n                    \"Current IPv4 state\": \"down\",\n                    \"Current IPv6 state\": \"down\",\n                    \"Current link state\": \"up\",\n                    \"Current physical state\": \"up\",\n                    \"Inbound broadcast(pkts)\": \"0\",\n                    \"Inbound drop(pkts)\": \"0\",\n                    \"Inbound error(pkts)\": \"0\",\n                    \"Inbound multicast(pkts)\": \"20151\",\n                    \"Inbound octets(bytes)\": \"7314813\",\n                    \"Inbound rate(byte/sec)\": \"11\",\n                    \"Inbound rate(pkts/sec)\": \"0\",\n                    \"Inbound unicast(pkts)\": \"0\",\n                    \"Outbound broadcast(pkts)\": \"1\",\n                    \"Outbound drop(pkts)\": \"0\",\n                    \"Outbound error(pkts)\": \"0\",\n                    \"Outbound multicast(pkts)\": \"20152\",\n                    \"Outbound octets(bytes)\": \"7235021\",\n                    \"Outbound rate(byte/sec)\": \"11\",\n                    \"Outbound rate(pkts/sec)\": \"0\",\n                    \"Outbound unicast(pkts)\": \"0\",\n                    \"Speed\": \"40GE\"\n                }\n            }\n'''\nfrom xml.etree import ElementTree\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.cloudengine.ce import ce_argument_spec, get_nc_config\nCE_NC_GET_PORT_SPEED = \"\"\"\n<filter type=\"subtree\">\n  <devm xmlns=\"http://www.huawei.com/netconf/vrp\" content-version=\"1.0\" format-version=\"1.0\">\n    <ports>\n      <port>\n        <position>%s</position>\n        <ethernetPort>\n          <speed></speed>\n        </ethernetPort>\n      </port>\n    </ports>\n  </devm>\n</filter>\n\"\"\"\nCE_NC_GET_INT_STATISTICS = \"\"\"\n<filter type=\"subtree\">\n  <ifm xmlns=\"http://www.huawei.com/netconf/vrp\" content-version=\"1.0\" format-version=\"1.0\">\n    <interfaces>\n      <interface>\n        <ifName>%s</ifName>\n        <ifDynamicInfo>\n          <ifPhyStatus></ifPhyStatus>\n          <ifLinkStatus></ifLinkStatus>\n          <ifV4State></ifV4State>\n          <ifV6State></ifV6State>\n        </ifDynamicInfo>\n        <ifStatistics>\n          <receiveByte></receiveByte>\n          <sendByte></sendByte>\n          <rcvUniPacket></rcvUniPacket>\n          <rcvMutiPacket></rcvMutiPacket>\n          <rcvBroadPacket></rcvBroadPacket>\n          <sendUniPacket></sendUniPacket>\n          <sendMutiPacket></sendMutiPacket>\n          <sendBroadPacket></sendBroadPacket>\n          <rcvErrorPacket></rcvErrorPacket>\n          <rcvDropPacket></rcvDropPacket>\n          <sendErrorPacket></sendErrorPacket>\n          <sendDropPacket></sendDropPacket>\n        </ifStatistics>\n        <ifClearedStat>\n          <inByteRate></inByteRate>\n          <inPacketRate></inPacketRate>\n          <outByteRate></outByteRate>\n          <outPacketRate></outPacketRate>\n        </ifClearedStat>\n      </interface>\n    </interfaces>\n  </ifm>\n</filter>\n\"\"\"\nINTERFACE_ALL = 1\nINTERFACE_TYPE = 2\nINTERFACE_FULL_NAME = 3\ndef get_interface_type(interface):\n    \"\"\"Gets the type of interface, such as 10GE, ETH-TRUNK, VLANIF...\"\"\"\n    if interface is None:\n        return None\n    iftype = None\n    if interface.upper().startswith('GE'):\n        iftype = 'ge'\n    elif interface.upper().startswith('10GE'):\n        iftype = '10ge'\n    elif interface.upper().startswith('25GE'):\n        iftype = '25ge'\n    elif interface.upper().startswith('4X10GE'):\n        iftype = '4x10ge'\n    elif interface.upper().startswith('40GE'):\n        iftype = '40ge'\n    elif interface.upper().startswith('100GE'):\n        iftype = '100ge'\n    elif interface.upper().startswith('VLANIF'):\n        iftype = 'vlanif'\n    elif interface.upper().startswith('LOOPBACK'):\n        iftype = 'loopback'\n    elif interface.upper().startswith('METH'):\n        iftype = 'meth'\n    elif interface.upper().startswith('ETH-TRUNK'):\n        iftype = 'eth-trunk'\n    elif interface.upper().startswith('VBDIF'):\n        iftype = 'vbdif'\n    elif interface.upper().startswith('NVE'):\n        iftype = 'nve'\n    elif interface.upper().startswith('TUNNEL'):\n        iftype = 'tunnel'\n    elif interface.upper().startswith('ETHERNET'):\n        iftype = 'ethernet'\n    elif interface.upper().startswith('FCOE-PORT'):\n        iftype = 'fcoe-port'\n    elif interface.upper().startswith('FABRIC-PORT'):\n        iftype = 'fabric-port'\n    elif interface.upper().startswith('STACK-PORT'):\n        iftype = 'stack-Port'\n    elif interface.upper().startswith('NULL'):\n        iftype = 'null'\n    else:\n        return None\n    return iftype.lower()\ndef is_ethernet_port(interface):\n    \"\"\"Judge whether it is ethernet port\"\"\"\n    ethernet_port = ['ge', '10ge', '25ge', '4x10ge', '40ge', '100ge', 'meth']\n    if_type = get_interface_type(interface)\n    if if_type in ethernet_port:\n        return True\n    return False\nclass LinkStatus(object):\n    \"\"\"Get interface link status information\"\"\"\n    def __init__(self, argument_spec):\n        self.spec = argument_spec\n        self.module = None\n        self.init_module()\n        # interface name\n        self.interface = self.module.params['interface']\n        self.interface = self.interface.replace(' ', '').lower()\n        self.param_type = None\n        self.if_type = None\n        # state\n        self.results = dict()\n        self.result = dict()\n    def check_params(self):\n        \"\"\"Check all input params\"\"\"\n        if not self.interface:\n            self.module.fail_json(msg='Error: Interface name cannot be empty.')\n        if self.interface and self.interface != 'all':\n            if not self.if_type:\n                self.module.fail_json(\n                    msg='Error: Interface name of %s is error.' % self.interface)\n    def init_module(self):\n        \"\"\"Init module object\"\"\"\n        self.module = AnsibleModule(\n            argument_spec=self.spec, supports_check_mode=True)\n    def show_result(self):\n        \"\"\"Show result\"\"\"\n        self.results['result'] = self.result\n        self.module.exit_json(**self.results)\n    def get_intf_dynamic_info(self, dyn_info, intf_name):\n        \"\"\"Get interface dynamic information\"\"\"\n        if not intf_name:\n            return\n        if dyn_info:\n            for eles in dyn_info:\n                if eles.tag in [\"ifPhyStatus\", \"ifV4State\", \"ifV6State\", \"ifLinkStatus\"]:\n                    if eles.tag == \"ifPhyStatus\":\n                        self.result[intf_name][\n                            'Current physical state'] = eles.text\n                    elif eles.tag == \"ifLinkStatus\":\n                        self.result[intf_name][\n                            'Current link state'] = eles.text\n                    elif eles.tag == \"ifV4State\":\n                        self.result[intf_name][\n                            'Current IPv4 state'] = eles.text\n                    elif eles.tag == \"ifV6State\":\n                        self.result[intf_name][\n                            'Current IPv6 state'] = eles.text\n    def get_intf_statistics_info(self, stat_info, intf_name):\n        \"\"\"Get interface statistics information\"\"\"\n        if not intf_name:\n            return\n        if_type = get_interface_type(intf_name)\n        if if_type == 'fcoe-port' or if_type == 'nve' or if_type == 'tunnel' or \\\n                if_type == 'vbdif' or if_type == 'vlanif':\n            return\n        if stat_info:\n            for eles in stat_info:\n                if eles.tag in [\"receiveByte\", \"sendByte\", \"rcvUniPacket\", \"rcvMutiPacket\", \"rcvBroadPacket\",\n                                \"sendUniPacket\", \"sendMutiPacket\", \"sendBroadPacket\", \"rcvErrorPacket\",\n                                \"rcvDropPacket\", \"sendErrorPacket\", \"sendDropPacket\"]:\n                    if eles.tag == \"receiveByte\":\n                        self.result[intf_name][\n                            'Inbound octets(bytes)'] = eles.text\n                    elif eles.tag == \"rcvUniPacket\":\n                        self.result[intf_name][\n                            'Inbound unicast(pkts)'] = eles.text\n                    elif eles.tag == \"rcvMutiPacket\":\n                        self.result[intf_name][\n                            'Inbound multicast(pkts)'] = eles.text\n                    elif eles.tag == \"rcvBroadPacket\":\n                        self.result[intf_name][\n                            'Inbound broadcast(pkts)'] = eles.text\n                    elif eles.tag == \"rcvErrorPacket\":\n                        self.result[intf_name][\n                            'Inbound error(pkts)'] = eles.text\n                    elif eles.tag == \"rcvDropPacket\":\n                        self.result[intf_name][\n                            'Inbound drop(pkts)'] = eles.text\n                    elif eles.tag == \"sendByte\":\n                        self.result[intf_name][\n                            'Outbound octets(bytes)'] = eles.text\n                    elif eles.tag == \"sendUniPacket\":\n                        self.result[intf_name][\n                            'Outbound unicast(pkts)'] = eles.text\n                    elif eles.tag == \"sendMutiPacket\":\n                        self.result[intf_name][\n                            'Outbound multicast(pkts)'] = eles.text\n                    elif eles.tag == \"sendBroadPacket\":\n                        self.result[intf_name][\n                            'Outbound broadcast(pkts)'] = eles.text\n                    elif eles.tag == \"sendErrorPacket\":\n                        self.result[intf_name][\n                            'Outbound error(pkts)'] = eles.text\n                    elif eles.tag == \"sendDropPacket\":\n                        self.result[intf_name][\n                            'Outbound drop(pkts)'] = eles.text\n    def get_intf_cleared_stat(self, clr_stat, intf_name):\n        \"\"\"Get interface cleared state information\"\"\"\n        if not intf_name:\n            return\n        if_type = get_interface_type(intf_name)\n        if if_type == 'fcoe-port' or if_type == 'nve' or if_type == 'tunnel' or \\\n                if_type == 'vbdif' or if_type == 'vlanif':\n            return\n        if clr_stat:\n            for eles in clr_stat:\n                if eles.tag in [\"inByteRate\", \"inPacketRate\", \"outByteRate\", \"outPacketRate\"]:\n                    if eles.tag == \"inByteRate\":\n                        self.result[intf_name][\n                            'Inbound rate(byte/sec)'] = eles.text\n                    elif eles.tag == \"inPacketRate\":\n                        self.result[intf_name][\n                            'Inbound rate(pkts/sec)'] = eles.text\n                    elif eles.tag == \"outByteRate\":\n                        self.result[intf_name][\n                            'Outbound rate(byte/sec)'] = eles.text\n                    elif eles.tag == \"outPacketRate\":\n                        self.result[intf_name][\n                            'Outbound rate(pkts/sec)'] = eles.text\n    def get_all_interface_info(self, intf_type=None):\n        \"\"\"Get interface information all or by interface type\"\"\"\n        xml_str = CE_NC_GET_INT_STATISTICS % ''\n        con_obj = get_nc_config(self.module, xml_str)\n        if \"<data/>\" in con_obj:\n            return\n        xml_str = con_obj.replace('\\r', '').replace('\\n', '').\\\n            replace('xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"', \"\").\\\n            replace('xmlns=\"http://www.huawei.com/netconf/vrp\"', \"\")\n        # get link status information\n        root = ElementTree.fromstring(xml_str)\n        intfs_info = root.find(\"data/ifm/interfaces\")\n        if not intfs_info:\n            return\n        intf_name = ''\n        flag = False\n        for eles in intfs_info:\n            if eles.tag == \"interface\":\n                for ele in eles:\n                    if ele.tag in [\"ifName\", \"ifDynamicInfo\", \"ifStatistics\", \"ifClearedStat\"]:\n                        if ele.tag == \"ifName\":\n                            intf_name = ele.text.lower()\n                            if intf_type:\n                                if get_interface_type(intf_name) != intf_type.lower():\n                                    break\n                                else:\n                                    flag = True\n                            self.init_interface_data(intf_name)\n                            if is_ethernet_port(intf_name):\n                                self.get_port_info(intf_name)\n                        if ele.tag == \"ifDynamicInfo\":\n                            self.get_intf_dynamic_info(ele, intf_name)\n                        elif ele.tag == \"ifStatistics\":\n                            self.get_intf_statistics_info(ele, intf_name)\n                        elif ele.tag == \"ifClearedStat\":\n                            self.get_intf_cleared_stat(ele, intf_name)\n        if intf_type and not flag:\n            self.module.fail_json(\n                msg='Error: %s interface type does not exist.' % intf_type.upper())\n    def get_interface_info(self):\n        \"\"\"Get interface information\"\"\"\n        xml_str = CE_NC_GET_INT_STATISTICS % self.interface.upper()\n        con_obj = get_nc_config(self.module, xml_str)\n        if \"<data/>\" in con_obj:\n            self.module.fail_json(\n                msg='Error: %s interface does not exist.' % self.interface.upper())\n            return\n        xml_str = con_obj.replace('\\r', '').replace('\\n', '').\\\n            replace('xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"', \"\").\\\n            replace('xmlns=\"http://www.huawei.com/netconf/vrp\"', \"\")\n        # get link status information\n        root = ElementTree.fromstring(xml_str)\n        intf_info = root.find(\"data/ifm/interfaces/interface\")\n        if intf_info:\n            for eles in intf_info:\n                if eles.tag in [\"ifDynamicInfo\", \"ifStatistics\", \"ifClearedStat\"]:\n                    if eles.tag == \"ifDynamicInfo\":\n                        self.get_intf_dynamic_info(eles, self.interface)\n                    elif eles.tag == \"ifStatistics\":\n                        self.get_intf_statistics_info(eles, self.interface)\n                    elif eles.tag == \"ifClearedStat\":\n                        self.get_intf_cleared_stat(eles, self.interface)\n    def init_interface_data(self, intf_name):\n        \"\"\"Init interface data\"\"\"\n        # init link status data\n        self.result[intf_name] = dict()\n        self.result[intf_name]['Current physical state'] = 'down'\n        self.result[intf_name]['Current link state'] = 'down'\n        self.result[intf_name]['Current IPv4 state'] = 'down'\n        self.result[intf_name]['Current IPv6 state'] = 'down'\n        self.result[intf_name]['Inbound octets(bytes)'] = '--'\n        self.result[intf_name]['Inbound unicast(pkts)'] = '--'\n        self.result[intf_name]['Inbound multicast(pkts)'] = '--'\n        self.result[intf_name]['Inbound broadcast(pkts)'] = '--'\n        self.result[intf_name]['Inbound error(pkts)'] = '--'\n        self.result[intf_name]['Inbound drop(pkts)'] = '--'\n        self.result[intf_name]['Inbound rate(byte/sec)'] = '--'\n        self.result[intf_name]['Inbound rate(pkts/sec)'] = '--'\n        self.result[intf_name]['Outbound octets(bytes)'] = '--'\n        self.result[intf_name]['Outbound unicast(pkts)'] = '--'\n        self.result[intf_name]['Outbound multicast(pkts)'] = '--'\n        self.result[intf_name]['Outbound broadcast(pkts)'] = '--'\n        self.result[intf_name]['Outbound error(pkts)'] = '--'\n        self.result[intf_name]['Outbound drop(pkts)'] = '--'\n        self.result[intf_name]['Outbound rate(byte/sec)'] = '--'\n        self.result[intf_name]['Outbound rate(pkts/sec)'] = '--'\n        self.result[intf_name]['Speed'] = '--'\n    def get_port_info(self, interface):\n        \"\"\"Get port information\"\"\"\n        if_type = get_interface_type(interface)\n        if if_type == 'meth':\n            xml_str = CE_NC_GET_PORT_SPEED % interface.lower().replace('meth', 'MEth')\n        else:\n            xml_str = CE_NC_GET_PORT_SPEED % interface.upper()\n        con_obj = get_nc_config(self.module, xml_str)\n        if \"<data/>\" in con_obj:\n            return\n        xml_str = con_obj.replace('\\r', '').replace('\\n', '').\\\n            replace('xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"', \"\").\\\n            replace('xmlns=\"http://www.huawei.com/netconf/vrp\"', \"\")\n        # get link status information\n        root = ElementTree.fromstring(xml_str)\n        port_info = root.find(\"data/devm/ports/port\")\n        if port_info:\n            for eles in port_info:\n                if eles.tag == \"ethernetPort\":\n                    for ele in eles:\n                        if ele.tag == 'speed':\n                            self.result[interface]['Speed'] = ele.text\n    def get_link_status(self):\n        \"\"\"Get link status information\"\"\"\n        if self.param_type == INTERFACE_FULL_NAME:\n            self.init_interface_data(self.interface)\n            self.get_interface_info()\n            if is_ethernet_port(self.interface):\n                self.get_port_info(self.interface)\n        elif self.param_type == INTERFACE_TYPE:\n            self.get_all_interface_info(self.interface)\n        else:\n            self.get_all_interface_info()\n    def get_intf_param_type(self):\n        \"\"\"Get the type of input interface parameter\"\"\"\n", "answers": ["        if self.interface == 'all':"], "length": 1718, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "ac75f42af7295a6d31f508d44bcc5ac42fd665147ac86554"}
{"input": "", "context": "/**\n * ***************************************************************************** Copyright (c) 2004,\n * 2006 Subclipse project and others. All rights reserved. This program and the accompanying\n * materials are made available under the terms of the Eclipse Public License v1.0 which accompanies\n * this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html\n *\n * <p>Contributors: Subclipse project committers - initial API and implementation\n * ****************************************************************************\n */\npackage org.tigris.subversion.subclipse.ui.settings;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.eclipse.core.resources.IResource;\nimport org.tigris.subversion.subclipse.core.ISVNLocalResource;\nimport org.tigris.subversion.subclipse.core.ISVNRemoteResource;\nimport org.tigris.subversion.subclipse.core.SVNException;\nimport org.tigris.subversion.subclipse.core.resources.SVNWorkspaceRoot;\nimport org.tigris.subversion.subclipse.ui.Policy;\nimport org.tigris.subversion.subclipse.ui.util.LinkList;\nimport org.tigris.subversion.svnclientadapter.ISVNProperty;\nimport org.tigris.subversion.svnclientadapter.SVNUrl;\npublic class ProjectProperties {\n  protected String label = \"Issue Number:\"; // $NON-NLS-1$\n  protected String message;\n  protected boolean number = false;\n  protected String url;\n  protected boolean warnIfNoIssue = false;\n  protected boolean append = true;\n  protected String logregex;\n  private static final String URL = \"://\"; // $NON-NLS-1$\n  private static final List<String> propertyFilterList = new ArrayList<String>();\n  static {\n    propertyFilterList.add(\"bugtraq:message\");\n    propertyFilterList.add(\"bugtraq:label\");\n    propertyFilterList.add(\"bugtraq:url\");\n    propertyFilterList.add(\"bugtraq:number\");\n    propertyFilterList.add(\"bugtraq:warnifnoissue\");\n    propertyFilterList.add(\"bugtraq:append\");\n    propertyFilterList.add(\"bugtraq:logregex\");\n  }\n  public ProjectProperties() {\n    super();\n  }\n  public boolean isAppend() {\n    return append;\n  }\n  public void setAppend(boolean append) {\n    this.append = append;\n  }\n  public String getLabel() {\n    return label;\n  }\n  public void setLabel(String label) {\n    this.label = label;\n  }\n  public String getMessage() {\n    return message;\n  }\n  public void setMessage(String message) {\n    this.message = message;\n  }\n  public boolean isNumber() {\n    return number;\n  }\n  public void setNumber(boolean number) {\n    this.number = number;\n  }\n  public String getUrl() {\n    return url;\n  }\n  public void setUrl(String url) {\n    this.url = url;\n  }\n  public boolean isWarnIfNoIssue() {\n    return warnIfNoIssue;\n  }\n  public void setWarnIfNoIssue(boolean warnIfNoIssue) {\n    this.warnIfNoIssue = warnIfNoIssue;\n  }\n  public String getLogregex() {\n    return logregex;\n  }\n  public void setLogregex(String logregex) {\n    this.logregex = logregex;\n  }\n  public String getResolvedMessage(String issue) {\n    if (message == null || issue == null) return null;\n    return message.replace(\"%BUGID%\", issue); // $NON-NLS-1$\n  }\n  public String getResolvedUrl(String issue) {\n    if (url == null || issue == null) return null;\n    return url.replace(\"%BUGID%\", issue); // $NON-NLS-1$\n  }\n  // Retrieve hyperlink ranges and url's from commit message.\n  public LinkList getLinkList(String commitMessage) {\n    ArrayList links = new ArrayList();\n    ArrayList urls = new ArrayList();\n    ArrayList texts = new ArrayList();\n    String bugID = \"%BUGID%\"; // $NON-NLS-1$\n    if (logregex != null) {\n      String[] resplit = logregex.split(\"\\n\");\n      String re1 = resplit[0].trim();\n      String re2 = resplit.length > 1 ? resplit[1].trim() : null;\n      Pattern pre1 = Pattern.compile(re1);\n      Matcher matcher1 = pre1.matcher(commitMessage);\n      if (re2 == null) {\n        while (matcher1.find()) {\n          for (int i = 0; i < matcher1.groupCount(); i++) {\n            int range[] = {matcher1.start(i + 1), matcher1.end(i + 1) - matcher1.start(i + 1)};\n            String url = getResolvedUrl(matcher1.group(i + 1));\n            if ((url != null) && (url.trim().length() > 0)) {\n              links.add(range);\n              urls.add(url);\n              texts.add(matcher1.group(i + 1));\n            }\n          }\n        }\n      } else {\n        Pattern pre2 = Pattern.compile(re2);\n        while (matcher1.find()) {\n          Matcher matcher2 = pre2.matcher(matcher1.group());\n          while (matcher2.find()) {\n            for (int i = 0; i < matcher2.groupCount(); i++) {\n              int range[] = {\n                matcher2.start(i + 1) + matcher1.start(),\n                matcher2.end(i + 1) - matcher2.start(i + 1)\n              };\n              String url = getResolvedUrl(matcher2.group(i + 1));\n              if ((url != null) && (url.trim().length() > 0)) {\n                links.add(range);\n                urls.add(url);\n                texts.add(matcher2.group(i + 1));\n              }\n            }\n          }\n        }\n      }\n    } else if (message != null) {\n      int index = message.indexOf(bugID);\n      if (index != -1) {\n        String remainder = null;\n        if (message.length() > index + bugID.length())\n          remainder = message.substring(index + bugID.length());\n        else remainder = \"\";\n        String tag = message.substring(0, index);\n        index = commitMessage.indexOf(tag);\n        if (index != -1) {\n          index = index + tag.length();\n          int start = index;\n          StringBuffer issue = new StringBuffer();\n          while (index < commitMessage.length()) {\n            if (commitMessage.substring(index, index + 1).equals(\",\")) { // $NON-NLS-1$\n              int range[] = {start, issue.length()};\n              String url = getResolvedUrl(issue.toString());\n              if ((url != null) && (url.trim().length() > 0)) {\n                links.add(range);\n                urls.add(url);\n              }\n              start = index + 1;\n              issue = new StringBuffer();\n            } else {\n              if (commitMessage.substring(index, index + 1).equals(\"\\n\")\n                  || commitMessage.substring(index, index + 1).equals(\"\\r\"))\n                break; //$NON-NLS-1$ //$NON-NLS-2$\n              if (commitMessage.substring(index).trim().equals(remainder.trim())) break;\n              if (commitMessage.substring(index).startsWith(remainder + \"\\n\")) break;\n              if (commitMessage.substring(index, index + 1).equals(\" \")) {\n                int lineIndex = commitMessage.indexOf(\"\\n\", index);\n                if (lineIndex == -1) lineIndex = commitMessage.indexOf(\"\\r\", index);\n                if (lineIndex != -1) {\n                  if (commitMessage.substring(index, lineIndex - 1).trim().length() == 0) break;\n                }\n              }\n              issue.append(commitMessage.substring(index, index + 1));\n            }\n            index++;\n          }\n          int range[] = {start, issue.length()};\n          String url = getResolvedUrl(issue.toString());\n          if ((url != null) && (url.trim().length() > 0)) {\n            links.add(range);\n            urls.add(url);\n            texts.add(issue.toString());\n          }\n        }\n      }\n    }\n    LinkList urlLinks = getUrls(commitMessage);\n    int[][] urlRanges = urlLinks.getLinkRanges();\n    String[] urlUrls = urlLinks.getUrls();\n    for (int i = 0; i < urlRanges.length; i++) {\n      links.add(urlRanges[i]);\n      urls.add(urlUrls[i]);\n    }\n    int[][] linkRanges = new int[links.size()][2];\n    links.toArray(linkRanges);\n    String[] urlArray = new String[urls.size()];\n    urls.toArray(urlArray);\n    String[] textArray = new String[texts.size()];\n    texts.toArray(textArray);\n    LinkList linkList = new LinkList(linkRanges, urlArray, textArray);\n    return linkList;\n  }\n  public static LinkList getUrls(String s) {\n    int max = 0;\n    int i = -1;\n    if (s != null) {\n      max = s.length();\n      i = s.indexOf(URL);\n    }\n    ArrayList linkRanges = new ArrayList();\n    ArrayList links = new ArrayList();\n    while (i != -1) {\n      while (i != -1) {\n        if (Character.isWhitespace(s.charAt(i))\n            || s.substring(i, i + 1).equals(\"\\n\")) { // $NON-NLS-1$\n          i++;\n          break;\n        }\n        i--;\n      }\n      int start = (i < 0) ? 0 : i;\n      // look for the first whitespace character\n      boolean found = false;\n      i += URL.length();\n      while (!found && i < max) {\n        found =\n            (Character.isWhitespace(s.charAt(i))\n                || s.substring(i, i + 1).equals(\"\\n\")); // $NON-NLS-1$\n        i++;\n      }\n      if (i != max) i--;\n      linkRanges.add(new int[] {start, i - start});\n      links.add(s.substring(start, i));\n      i = s.indexOf(URL, i);\n    }\n    return new LinkList(\n        (int[][]) linkRanges.toArray(new int[linkRanges.size()][2]),\n        (String[]) links.toArray(new String[links.size()]),\n        null);\n  }\n  // Return error message if there are any problems with the issue that was entered.\n  public String validateIssue(String issue) {\n    if (number) {\n      if (!hasOnlyDigits(issue)) return Policy.bind(\"CommitDialog.number\", label); // $NON-NLS-1$\n    }\n    return null;\n  }\n  // Helper method to test for all numerics and commas.\n  private boolean hasOnlyDigits(String s) {\n", "answers": ["    for (int i = 0; i < s.length(); i++)"], "length": 939, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "e7f7901dba75ce27695abf8291df5b472f155e4b7cf57569"}
{"input": "", "context": "#region AuthorHeader\n//\n//\tAuction version 2.1, by Xanthos and Arya\n//\n//  Based on original ideas and code by Arya\n//\n#endregion AuthorHeader\nusing System;\nusing System.IO;\nusing Server;\nnamespace Arya.Auction\n{\n\t/// <summary>\n\t/// Summary description for AuctionLog.\n\t/// </summary>\n\tpublic class AuctionLog\n\t{\n\t\tprivate static StreamWriter m_Writer;\n\t\tprivate static bool m_Enabled = false;\n\t\tpublic static void Initialize()\n\t\t{\n\t\t\tif ( AuctionSystem.Running && AuctionConfig.EnableLogging )\n\t\t\t{\n\t\t\t\t// Create the log writer\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tstring folder = Path.Combine( Core.BaseDirectory, @\"Logs\\Auction\" );\n\t\t\t\t\tif ( ! Directory.Exists( folder ) )\n\t\t\t\t\t\tDirectory.CreateDirectory( folder );\n\t\t\t\t\tstring name = string.Format( \"{0}.txt\", DateTime.UtcNow.ToLongDateString() );\n\t\t\t\t\tstring file = Path.Combine( folder, name );\n\t\t\t\t\tm_Writer = new StreamWriter( file, true );\n\t\t\t\t\tm_Writer.AutoFlush = true;\n\t\t\t\t\tm_Writer.WriteLine( \"###############################\" );\n\t\t\t\t\tm_Writer.WriteLine( \"# {0} - {1}\", DateTime.UtcNow.ToShortDateString(), DateTime.UtcNow.ToShortTimeString() );\n\t\t\t\t\tm_Writer.WriteLine();\n\t\t\t\t\t\n\t\t\t\t\tm_Enabled = true;\n\t\t\t\t}\n\t\t\t\tcatch ( Exception err )\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine( \"Couldn't initialize auction system log. Reason:\" );\n\t\t\t\t\tConsole.WriteLine( err.ToString() );\n\t\t\t\t\tm_Enabled = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records the creation of a new auction item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The new auction</param>\n\t\tpublic static void WriteNewAuction( AuctionItem auction )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer.WriteLine( \"## New Auction : {0}\", auction.ID );\n\t\t\t\tm_Writer.WriteLine( \"# {0}\", auction.ItemName );\n\t\t\t\tm_Writer.WriteLine( \"# Created on {0} at {1}\", DateTime.UtcNow.ToShortDateString(), DateTime.UtcNow.ToShortTimeString() );\n\t\t\t\tm_Writer.WriteLine( \"# Owner : {0} [{1}] Account: {2}\", auction.Owner.Name, auction.Owner.Serial.ToString(), auction.Account.Username );\n\t\t\t\tm_Writer.WriteLine( \"# Expires on {0} at {1}\", auction.EndTime.ToShortDateString(), auction.EndTime.ToShortTimeString() );\n\t\t\t\tm_Writer.WriteLine( \"# Starting Bid: {0}. Reserve: {1}. Buy Now: {2}\",\n\t\t\t\t\tauction.MinBid, auction.Reserve, auction.AllowBuyNow ? auction.BuyNow.ToString() : \"Disabled\" );\n\t\t\t\tm_Writer.WriteLine( \"# Owner Description : {0}\", auction.Description );\n\t\t\t\tm_Writer.WriteLine( \"# Web Link : {0}\", auction.WebLink != null ? auction.WebLink : \"N/A\" );\n\t\t\t\n\t\t\t\tif ( auction.Creature )\n\t\t\t\t{\n\t\t\t\t\t// Selling a pet\n\t\t\t\t\tm_Writer.WriteLine( \"#### Selling 1 Creature\" );\n\t\t\t\t\tm_Writer.WriteLine( \"# Type : {0}. Serial : {1}. Name : {2} Hue : {3}\", auction.Pet.GetType().Name, auction.Pet.Serial.ToString(), auction.Pet.Name != null ? auction.Pet.Name : \"Unnamed\", auction.Pet.Hue );\n\t\t\t\t\tm_Writer.WriteLine( \"# Statuette Serial : {0}\", auction.Item.Serial.ToString() );\n\t\t\t\t\tm_Writer.WriteLine( \"# Properties: {0}\", auction.Items[ 0 ].Properties );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Selling items\n\t\t\t\t\tm_Writer.WriteLine( \"#### Selling {0} Items\", auction.ItemCount );\n\t\t\t\t\tfor ( int i = 0; i < auction.ItemCount; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tAuctionItem.ItemInfo info = auction.Items[ i ];\n\t\t\t\t\t\tm_Writer.WriteLine( \"# {0}. {1} [{2}] Type {3} Hue {4}\", i, info.Name, info.Item.Serial, info.Item.GetType().Name, info.Item.Hue );\n\t\t\t\t\t\tm_Writer.WriteLine( \"Properties: {0}\", info.Properties );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tm_Writer.WriteLine();\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Writes the current highest bid in an auction\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction corresponding to the bid</param>\n\t\tpublic static void WriteBid( AuctionItem auction )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer.WriteLine( \"> [{0}] Bid Amount : {1}, Mobile : {2} [{3}] Account : {4}\",\n\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tauction.HighestBidValue.ToString(\"#,0\" ),\n\t\t\t\t\tauction.HighestBidder.Name,\n\t\t\t\t\tauction.HighestBidder.Serial.ToString(),\n\t\t\t\t\t( auction.HighestBidder.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Changes the\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction switching to pending</param>\n\t\t/// <param name=\"reason\">The reason why the auction is set to pending</param>\n\t\tpublic static void WritePending( AuctionItem auction, string reason )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer.WriteLine( \"] [{0}] Becoming Pending on {1} at {2}. Reason : {3}\",\n\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tDateTime.UtcNow.ToShortDateString(),\n\t\t\t\t\tDateTime.UtcNow.ToShortTimeString(),\n\t\t\t\t\treason );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Writes the end of the auction to the log\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction ending</param>\n\t\t/// <param name=\"reason\">The AuctionResult stating why the auction is ending</param>\n\t\t/// <param name=\"m\">The Mobile forcing the end of the auction (can be null)</param>\n\t\t/// <param name=\"comments\">Additional comments on the ending (can be null)</param>\n\t\tpublic static void WriteEnd( AuctionItem auction, AuctionResult reason, Mobile m, string comments )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer\t.WriteLine( \"## Ending Auction {0}\", auction.ID.ToString() );\n\t\t\t\tm_Writer\t.WriteLine( \"# Status : {0}\", reason.ToString() );\n\t\t\t\tif ( m != null )\n\t\t\t\t\tm_Writer\t.WriteLine( \"# Ended by {0} [{1}], {2}, Account : {3}\",\n\t\t\t\t\t\tm.Name, m.Serial.ToString(), m.AccessLevel.ToString(), ( m.Account as Server.Accounting.Account ).Username );\n\t\t\t\tif ( comments != null )\n\t\t\t\t\tm_Writer\t.WriteLine( \"# Comments : {0}\", comments );\n\t\t\t\tm_Writer\t.WriteLine();\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member viewing an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction item</param>\n\t\t/// <param name=\"m\">The mobile viewing the item</param>\n\t\tpublic static void WriteViewItem( AuctionItem auction, Mobile m )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer\t.WriteLine( \"} Vieweing item [{0}] Mobile: {1} [2], {3}, Account : {4}\",\n\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tm.Name,\n\t\t\t\t\tm.Serial.ToString(),\n\t\t\t\t\tm.AccessLevel.ToString(),\n\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member returning an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param name=\"m\">The mobile returning the item</param>\n\t\tpublic static void WriteReturnItem( AuctionItem auction, Mobile m )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer\t.WriteLine( \"} Returning item [{0}] Mobile: {1} [2], {3}, Account : {4}\",\n\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tm.Name,\n\t\t\t\t\tm.Serial.ToString(),\n\t\t\t\t\tm.AccessLevel.ToString(),\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "length": 805, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "641865af25c8de94ab830220ebc7d004999bbdc21b3bcb43"}
{"input": "", "context": "package no.ntnu.medisn.egenvar;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport javax.swing.JOptionPane;\n/**\n ************************************************************************\n * Copyright (C) 2008 Ian Donaldson This file is part of iRefIndex: iRefIndex: A\n * consolidated protein interaction database with provenance iRefIndex is free\n * software: you can redistribute it and/or modify it under the terms of the GNU\n * General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or any later version. This program is distributed\n * in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even\n * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details. You should have received\n * a copy of the GNU General Public License along with this program. If not, see\n * <http://www.gnu.org/licenses/>. PROGRAM: iRefIndex. AUTHORS: Sabry Razick and\n * Ian Donaldson DESCRIPTION: This software collects, consolidates, analayzes\n * and distributes biomolecular interaction data. See http://irefindex.uio.no\n * for more details. REVISION/CONTRIBUTION NOTES: July 10, 2008 Release 1.1.\n * CONTACT: Ian Donaldson Biotechnology Centre of Oslo, P.O. Box 1125, Blindern,\n * 0317, Oslo, Norway. ian.donaldson@biotek.uio.no http://iRefIndex.uio.no\n * PUBLICATION TO CITE:PMID=18823568 iRefIndex: A consolidated protein\n * interaction database with provenance Sabry Razick, George Magklaras and Ian M\n * Donaldson, BMC Bioinformatics. 2008 Sep 30;9:405\n *\n */\npublic class PathFinder10 {\n    private ArrayList<ArrayList<Integer>> selected_patth_ll;\n    private ArrayList<ArrayList<Integer>> optimal_pathe_ll;\n    private ArrayList<Integer> targets_nehgbours_l;\n    private ArrayList<Integer> garbage_sead_l;\n    int c_min = 999999999;\n    private HashMap<Integer, ArrayList<Integer>> nodemap_bkup;\n    public static boolean negetived = false;\n    private boolean colpseHubs;\n    private boolean expand;\n    private int maximum_distance = 99;\n    private final int MAX_SIGNIFICANT_HUB_CUT_OFF = 999;\n    private int numberOfLargehubs = 0;\n    private double avgOfHubs = 0;\n    private final int WARNING_HUB_MARGIN = 2294;\n    private final int WARNING_HUB_size = 200;\n    private int ignor_bigHub_lastDecision = 0;\n    public static boolean force_kill_path = false;\n    private boolean revers_recomended = false;\n    private static boolean firstResult_returned = false;\n    public PathFinder10() {\n        selected_patth_ll = new ArrayList<ArrayList<Integer>>(100);\n        optimal_pathe_ll = new ArrayList<ArrayList<Integer>>(100);\n        targets_nehgbours_l = new ArrayList<Integer>(100);\n        garbage_sead_l = new ArrayList<Integer>();\n        ignor_bigHub_lastDecision = 0;\n        numberOfLargehubs = 0;\n        avgOfHubs = 0;\n        force_kill_path = false;\n    }\n    public void reSet() {\n        selected_patth_ll = new ArrayList<ArrayList<Integer>>(100);\n        optimal_pathe_ll = new ArrayList<ArrayList<Integer>>(100);\n        targets_nehgbours_l = new ArrayList<Integer>(100);\n        garbage_sead_l = new ArrayList<Integer>();\n        ignor_bigHub_lastDecision = 0;\n        numberOfLargehubs = 0;\n        avgOfHubs = 0;\n        force_kill_path = false;\n    }\n    public static void main(String[] args) {\n    }\n    public ArrayList<ArrayList<String>> getPaths(HashMap<String, ArrayList<String>> connection_map, String start, String stop, int hubColLimit) {\n        ArrayList<String> key_l = new ArrayList<String>(connection_map.keySet());\n        HashMap<Integer, ArrayList<Integer>> transformed_map = new HashMap<Integer, ArrayList<Integer>>();\n        int start_int = -1;\n        int stop_int = -1;\n        for (int i = 0; i < key_l.size(); i++) {\n            ArrayList<String> c_nodes_l = connection_map.get(key_l.get(i));\n            if (c_nodes_l != null) {\n                ArrayList<Integer> trans_nodes_l = new ArrayList<Integer>(c_nodes_l.size());\n                for (int j = 0; j < c_nodes_l.size(); j++) {\n                    int tr_val = key_l.indexOf(c_nodes_l.get(j));\n                    if (tr_val >= 0) {\n                        if (!trans_nodes_l.contains(tr_val)) {\n                            trans_nodes_l.add(tr_val);\n                        }\n                    } else {\n                        key_l.add(c_nodes_l.get(j));\n                        tr_val = key_l.indexOf(c_nodes_l.get(j));\n                        if (!trans_nodes_l.contains(tr_val)) {\n                            trans_nodes_l.add(tr_val);\n                        }\n                    }\n                }\n                transformed_map.put(i, trans_nodes_l);\n            }\n        }\n        for (int i = 0; i < key_l.size(); i++) {\n            if (start.equals(key_l.get(i))) {\n                start_int = i;\n            } else if (stop.equals(key_l.get(i))) {\n                stop_int = i;\n            }\n        }\n        ArrayList<Integer> transformed_map_key_list = new ArrayList<Integer>(transformed_map.keySet());\n        for (int i = 0; i < transformed_map_key_list.size(); i++) {\n            ArrayList<Integer> neigb_list = transformed_map.get(transformed_map_key_list.get(i));\n            for (int j = 0; j < neigb_list.size(); j++) {\n                if (transformed_map.get(neigb_list.get(j)) == null) {\n                    ArrayList<Integer> tmp = new ArrayList<Integer>(1);\n                    tmp.add(transformed_map_key_list.get(i));\n                    transformed_map.put(neigb_list.get(j), tmp);\n//                    neigb_list.add(neigb_list.get(j));\n                } else {\n                    if (!transformed_map.get(neigb_list.get(j)).contains(transformed_map_key_list.get(i))) {\n                        transformed_map.get(neigb_list.get(j)).add(transformed_map_key_list.get(i));\n                    }\n                }\n            }\n        }\n        if (start.equals(stop)) {\n            ArrayList<ArrayList<String>> dummy_ll = new ArrayList<ArrayList<String>>(1);\n            ArrayList<String> dummy_l = new ArrayList<String>(1);\n            dummy_l.add(start);\n            dummy_ll.add(dummy_l);\n            return dummy_ll;\n        } else {\n            ArrayList<Integer> avoid_l = new ArrayList<Integer>(1);\n            int hub_cutoff = 999;\n            boolean blok_superErode_neighbors = true;\n            find_REDUNT_(transformed_map, start_int, stop_int, hubColLimit, colpseHubs, expand, avoid_l, hub_cutoff, blok_superErode_neighbors);\n            ArrayList<ArrayList<String>> selected_patth_string_ll = new ArrayList<ArrayList<String>>(selected_patth_ll.size());\n            for (int i = 0; i < selected_patth_ll.size(); i++) {\n                ArrayList<Integer> c_list = selected_patth_ll.get(i);\n                ArrayList<String> c_trans_list = new ArrayList<String>(c_list.size());\n                for (int j = 0; j < c_list.size(); j++) {\n                    c_trans_list.add(key_l.get(c_list.get(j)));\n                }\n                selected_patth_string_ll.add(c_trans_list);\n            }\n            return selected_patth_string_ll;\n        }\n    }\n    public ArrayList<ArrayList<Integer>> getPaths(int[][] edges, int start, int stop, int hubColLimit, boolean negetived, boolean colpseHubs, boolean expand, ArrayList<Integer> avoid_l, int maximum_distance, int hub_cutoff, boolean blok_superErode_neighbors) {\n        reSet();\n        this.maximum_distance = maximum_distance;\n//        this.minimum_distance = minimum_distance;\n        this.colpseHubs = colpseHubs;\n        this.expand = expand;\n        PathFinder10.negetived = negetived;\n        if (negetived) {\n            start = start * (-1);\n            stop = stop * (-1);\n        }\n        if (start == stop) {\n            ArrayList<ArrayList<Integer>> dummy_ll = new ArrayList<ArrayList<Integer>>(1);\n            ArrayList<Integer> dummy_l = new ArrayList<Integer>(1);\n            dummy_l.add(start);\n            dummy_ll.add(dummy_l);\n            return dummy_ll;\n        } else {\n            find_REDUNT(edges, start, stop, hubColLimit, colpseHubs, expand, avoid_l, hub_cutoff, blok_superErode_neighbors);\n            if (negetived) {\n                ArrayList<ArrayList<Integer>> selected_patth_negated_ll = new ArrayList<ArrayList<Integer>>(selected_patth_ll.size());\n                for (int i = 0; i < selected_patth_ll.size(); i++) {\n                    ArrayList<Integer> tmp = selected_patth_ll.remove(i);\n                    ArrayList<Integer> negatedt_l = new ArrayList<Integer>(tmp.size());\n                    for (int j = 0; j < tmp.size(); j++) {\n                        negatedt_l.add(tmp.get(j) * (-1));\n                    }\n                    selected_patth_negated_ll.add(negatedt_l);\n                }\n                return selected_patth_negated_ll;\n            } else {\n                return selected_patth_ll;\n            }\n        }\n    }\n    public HashMap<Integer, ArrayList<Integer>> find_REDUNT(int[][] edges, int start, int stop, int hub_threshld, boolean colpseHubs, boolean expand, ArrayList<Integer> avoid_l, int hub_cutoff, boolean blok_superErode_neighbors) {\n        HashMap<Integer, ArrayList<Integer>> nodemap = GetNodemap(edges, true);\n        return find_REDUNT_(nodemap, start, stop, hub_threshld, colpseHubs, expand, avoid_l, hub_cutoff, blok_superErode_neighbors);\n    }\n    public HashMap<Integer, ArrayList<Integer>> find_REDUNT_(HashMap<Integer, ArrayList<Integer>> nodemap, int start, int stop, int hub_threshld, boolean colpseHubs, boolean expand, ArrayList<Integer> avoid_l, int hub_cutoff, boolean blok_superErode_neighbors) {\n        if (nodemap.containsKey(start) && nodemap.containsKey(stop)) {\n            for (int i = 0; i < avoid_l.size(); i++) {\n                nodemap.remove(avoid_l.get(i));\n            }\n            if (hub_cutoff < MAX_SIGNIFICANT_HUB_CUT_OFF) {\n                ArrayList<Integer> map_keys = new ArrayList<Integer>(nodemap.keySet());\n                for (int i = 0; i < map_keys.size(); i++) {\n                    if (nodemap.get(map_keys.get(i)).size() >= hub_cutoff) { //&& !nodemap.get(map_keys.get(i)).contains(start) && !nodemap.get(map_keys.get(i)).contains(stop)\n                        if (map_keys.get(i) != start && map_keys.get(i) != stop && !(nodemap.get(map_keys.get(i)).contains(start)) && !(nodemap.get(map_keys.get(i)).contains(stop))) {\n                            nodemap.remove(map_keys.get(i));\n                        }\n                    }\n                }\n            }\n            resolve(nodemap, start, stop, hub_threshld, true, colpseHubs, blok_superErode_neighbors);\n            if (expand && !force_kill_path) {\n                expand_collapsed(hub_threshld);\n            }\n            return null;\n        }\n        return null;\n    }\n    private void resolve(HashMap<Integer, ArrayList<Integer>> nodemap, Integer start, Integer stop, int hub_threshld, boolean initial, boolean colpseHubs, boolean blok_superErode_neighbors) {\n        //System.out.println(\"Path filling initializing. size of network=\" + nodemap.size() + \" start=\" + start + \" stop=\" + stop);\n        revers_recomended = false;\n        if (!force_kill_path) {\n            //System.out.println(\"Path filling erosion step 1. size of network=\" + nodemap.size() + \" start=\" + start + \" stop=\" + stop);\n            nodemap = eroder(nodemap, start, stop);\n        }\n        //System.out.println(\"Size of sub-network after erosion step 1=\" + nodemap.size() );\n        if (!force_kill_path) {\n            //System.out.println(\"Analysing for alternative starting points=\" + nodemap.size() + \" start=\" + start + \" stop=\" + stop);\n            nodemap = stratStopReversalCheck(nodemap, start, stop);\n        }\n        int original_start = start;\n        int original_stop = stop;\n        if (revers_recomended) {\n            start = stop;\n            stop = original_start;\n        }\n        //System.out.println(\"Size of sub-network after step 2=\" + nodemap.size() );\n        //System.out.println(\"number of hubs larger than 200 connections=\" + numberOfLargehubs );\n        if (ignor_bigHub_lastDecision == 0 && (numberOfLargehubs > WARNING_HUB_MARGIN)) {\n            Object[] possibleValues = {\"1) Avoid this hubs and locate a path\", \"2) Proceed with current operation using existing settings\", \"3) Quit, change parameters and search again\"};\n//            if (selectedValue.contains(\"1)\")) {\n//                ignor_bigHub_lastDecision = 1;\n//            } else if (selectedValue.contains(\"2)\")) {\n            ignor_bigHub_lastDecision = 2;\n//            } else {\n//                ignor_bigHub_lastDecision = 3;\n//            }\n        }\n        if (ignor_bigHub_lastDecision == 1) {\n            ignor_bigHub_lastDecision = 2;\n            ArrayList<Integer> map_keys = new ArrayList<Integer>(nodemap.keySet());\n            for (int i = 0; i < map_keys.size(); i++) {\n                if (nodemap.get(map_keys.get(i)).size() >= WARNING_HUB_size) {\n                    if (map_keys.get(i) != start && map_keys.get(i) != stop && !(nodemap.get(map_keys.get(i)).contains(start)) && !(nodemap.get(map_keys.get(i)).contains(stop))) {\n                        nodemap.remove(map_keys.get(i));\n                    }\n                }\n            }\n            nodemap = stratStopReversalCheck(nodemap, start, stop);\n        }\n        if (ignor_bigHub_lastDecision == 0 || ignor_bigHub_lastDecision == 1 || ignor_bigHub_lastDecision == 2) {\n            if (!force_kill_path) {\n                //System.out.println(\"Path filling supper erosion step 4. size of network=\" + nodemap.size() + \" start=\" + start + \" stop=\" + stop);\n                nodemap = superErode_values(nodemap);\n            }\n            if (!force_kill_path) {\n                //System.out.println(\"Path filling neighbour trimming step 5. size of network=\" + nodemap.size() + \" start=\" + start + \" stop=\" + stop);\n                nodemap = superErode_neighbors(nodemap, start, stop);\n            }\n            if (initial && !force_kill_path) {\n                nodemap_bkup = safecopyMap(nodemap);\n            }\n            if (!force_kill_path) {\n                start = original_start;\n                stop = original_stop;\n                ArrayList<Integer> maxs = findHub(nodemap, start, stop, hub_threshld);\n                boolean removed = maxs.remove(start);\n                removed = maxs.remove(stop);\n                ArrayList<Integer> sead_l = new ArrayList<Integer>();\n                ArrayList<Integer> utilized_sead_l = new ArrayList<Integer>();\n                sead_l.add(start);\n                ArrayList<ArrayList<Integer>> patth_ll = new ArrayList<ArrayList<Integer>>(500);\n                patth_ll.add(new ArrayList(sead_l));\n                boolean complete = false;\n                int rounds = 0;\n                while (!complete || force_kill_path) {\n                    rounds++;\n                    complete = true;\n                    int init_size = sead_l.size();\n                    ArrayList<Integer> tmpsead_l = new ArrayList<Integer>(50);\n                    if (colpseHubs && !force_kill_path) {\n                        ArrayList<Integer> maxs_cl = new ArrayList<Integer>(maxs);\n                        if (sead_l != null) {\n                            maxs_cl.retainAll(sead_l);\n                            if (maxs_cl.size() > 0) {\n                                //System.out.println(\"Collapsing hubs . size of network=\" + nodemap.size() + \" Hubs =\" + maxs_cl.size());\n                                collapHubs(nodemap, maxs_cl, start, stop, hub_threshld);\n                                maxs.removeAll(maxs_cl);\n                            }\n                        }\n                    }\n                    for (int j = 0; (j < sead_l.size() && !force_kill_path); j++) {\n                        Integer c_sead = sead_l.get(j);\n                        ArrayList<Integer> sead_partnn_l = null;\n                        if (!force_kill_path) {\n", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "length": 1426, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "e6b1d5e9d123fc27b813342bb2b6767d2f8e9b9671110766"}
{"input": "", "context": "#region License\n// Copyright (c) 2006-2007, ClearCanvas Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without modification, \n// are permitted provided that the following conditions are met:\n//\n//    * Redistributions of source code must retain the above copyright notice, \n//      this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above copyright notice, \n//      this list of conditions and the following disclaimer in the documentation \n//      and/or other materials provided with the distribution.\n//    * Neither the name of ClearCanvas Inc. nor the names of its contributors \n//      may be used to endorse or promote products derived from this software without \n//      specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, \n// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR \n// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, \n// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE \n// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) \n// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, \n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY \n// OF SUCH DAMAGE.\n#endregion\nnamespace Macro.ImageViewer.Tools.Volume.VTK.View.WinForms\n{\n\tpartial class TissueControl\n\t{\n\t\t/// <summary> \n\t\t/// Required designer variable.\n\t\t/// </summary>\n\t\tprivate System.ComponentModel.IContainer components = null;\n\t\t/// <summary> \n\t\t/// Clean up any resources being used.\n\t\t/// </summary>\n\t\t/// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>\n\t\tprotected override void Dispose(bool disposing)\n\t\t{\n\t\t\tif (disposing && (components != null))\n\t\t\t{\n\t\t\t\tcomponents.Dispose();\n\t\t\t}\n\t\t\tbase.Dispose(disposing);\n\t\t}\n\t\t#region Component Designer generated code\n\t\t/// <summary> \n\t\t/// Required method for Designer support - do not modify \n\t\t/// the contents of this method with the code editor.\n\t\t/// </summary>\n\t\tprivate void InitializeComponent()\n\t\t{\n\t\t\tthis._visibleCheckBox = new System.Windows.Forms.CheckBox();\n\t\t\tthis._presetComboBox = new System.Windows.Forms.ComboBox();\n\t\t\tthis._presetLabel = new System.Windows.Forms.Label();\n\t\t\tthis._windowLabel = new System.Windows.Forms.Label();\n\t\t\tthis._levelLabel = new System.Windows.Forms.Label();\n\t\t\tthis._opacityLabel = new System.Windows.Forms.Label();\n\t\t\tthis._opacityControl = new Macro.Desktop.View.WinForms.TrackBarUpDown();\n\t\t\tthis._windowControl = new Macro.Desktop.View.WinForms.TrackBarUpDown();\n\t\t\tthis._levelControl = new Macro.Desktop.View.WinForms.TrackBarUpDown();\n\t\t\tthis._surfaceRenderingRadio = new System.Windows.Forms.RadioButton();\n\t\t\tthis._volumeRenderingRadio = new System.Windows.Forms.RadioButton();\n\t\t\tthis.SuspendLayout();\n\t\t\t// \n\t\t\t// _visibleCheckBox\n\t\t\t// \n\t\t\tthis._visibleCheckBox.AutoSize = true;\n\t\t\tthis._visibleCheckBox.Location = new System.Drawing.Point(17, 13);\n\t\t\tthis._visibleCheckBox.Name = \"_visibleCheckBox\";\n\t\t\tthis._visibleCheckBox.Size = new System.Drawing.Size(56, 17);\n\t\t\tthis._visibleCheckBox.TabIndex = 0;\n\t\t\tthis._visibleCheckBox.Text = \"Visible\";\n\t\t\tthis._visibleCheckBox.UseVisualStyleBackColor = true;\n\t\t\t// \n\t\t\t// _presetComboBox\n\t\t\t// \n\t\t\tthis._presetComboBox.FormattingEnabled = true;\n\t\t\tthis._presetComboBox.Location = new System.Drawing.Point(99, 104);\n\t\t\tthis._presetComboBox.Name = \"_presetComboBox\";\n\t\t\tthis._presetComboBox.Size = new System.Drawing.Size(156, 21);\n\t\t\tthis._presetComboBox.TabIndex = 1;\n\t\t\t// \n\t\t\t// _presetLabel\n\t\t\t// \n\t\t\tthis._presetLabel.AutoSize = true;\n\t\t\tthis._presetLabel.Location = new System.Drawing.Point(12, 107);\n\t\t\tthis._presetLabel.Name = \"_presetLabel\";\n\t\t\tthis._presetLabel.Size = new System.Drawing.Size(37, 13);\n\t\t\tthis._presetLabel.TabIndex = 6;\n\t\t\tthis._presetLabel.Text = \"Preset\";\n\t\t\t// \n\t\t\t// _windowLabel\n\t\t\t// \n\t\t\tthis._windowLabel.AutoSize = true;\n\t\t\tthis._windowLabel.Location = new System.Drawing.Point(12, 199);\n\t\t\tthis._windowLabel.Name = \"_windowLabel\";\n\t\t\tthis._windowLabel.Size = new System.Drawing.Size(46, 13);\n\t\t\tthis._windowLabel.TabIndex = 7;\n\t\t\tthis._windowLabel.Text = \"Window\";\n\t\t\t// \n\t\t\t// _levelLabel\n\t\t\t// \n\t\t\tthis._levelLabel.AutoSize = true;\n\t\t\tthis._levelLabel.Location = new System.Drawing.Point(12, 248);\n\t\t\tthis._levelLabel.Name = \"_levelLabel\";\n\t\t\tthis._levelLabel.Size = new System.Drawing.Size(33, 13);\n\t\t\tthis._levelLabel.TabIndex = 8;\n\t\t\tthis._levelLabel.Text = \"Level\";\n\t\t\t// \n\t\t\t// _opacityLabel\n\t\t\t// \n\t\t\tthis._opacityLabel.AutoSize = true;\n\t\t\tthis._opacityLabel.Location = new System.Drawing.Point(12, 152);\n\t\t\tthis._opacityLabel.Name = \"_opacityLabel\";\n\t\t\tthis._opacityLabel.Size = new System.Drawing.Size(43, 13);\n\t\t\tthis._opacityLabel.TabIndex = 9;\n\t\t\tthis._opacityLabel.Text = \"Opacity\";\n\t\t\t// \n\t\t\t// _opacityControl\n\t\t\t// \n\t\t\tthis._opacityControl.AutoSize = true;\n\t\t\tthis._opacityControl.DecimalPlaces = 2;\n\t\t\tthis._opacityControl.Location = new System.Drawing.Point(89, 143);\n\t\t\tthis._opacityControl.Maximum = new decimal(new int[] {\n            100,\n            0,\n            0,\n            0});\n\t\t\tthis._opacityControl.Minimum = new decimal(new int[] {\n            0,\n            0,\n            0,\n            0});\n\t\t\tthis._opacityControl.Name = \"_opacityControl\";\n\t\t\tthis._opacityControl.Size = new System.Drawing.Size(256, 42);\n\t\t\tthis._opacityControl.TabIndex = 10;\n\t\t\tthis._opacityControl.TrackBarIncrements = 100;\n\t\t\tthis._opacityControl.Value = new decimal(new int[] {\n            0,\n            0,\n            0,\n            0});\n\t\t\t// \n\t\t\t// _windowControl\n\t\t\t// \n\t\t\tthis._windowControl.AutoSize = true;\n\t\t\tthis._windowControl.DecimalPlaces = 0;\n\t\t\tthis._windowControl.Location = new System.Drawing.Point(89, 191);\n\t\t\tthis._windowControl.Maximum = new decimal(new int[] {\n            100,\n            0,\n            0,\n            0});\n\t\t\tthis._windowControl.Minimum = new decimal(new int[] {\n            0,\n            0,\n            0,\n            0});\n\t\t\tthis._windowControl.Name = \"_windowControl\";\n\t\t\tthis._windowControl.Size = new System.Drawing.Size(256, 42);\n\t\t\tthis._windowControl.TabIndex = 11;\n\t\t\tthis._windowControl.TrackBarIncrements = 100;\n\t\t\tthis._windowControl.Value = new decimal(new int[] {\n            0,\n            0,\n            0,\n            0});\n\t\t\t// \n\t\t\t// _levelControl\n\t\t\t// \n\t\t\tthis._levelControl.AutoSize = true;\n\t\t\tthis._levelControl.DecimalPlaces = 0;\n\t\t\tthis._levelControl.Location = new System.Drawing.Point(89, 239);\n\t\t\tthis._levelControl.Maximum = new decimal(new int[] {\n            100,\n            0,\n            0,\n            0});\n\t\t\tthis._levelControl.Minimum = new decimal(new int[] {\n            0,\n            0,\n            0,\n            0});\n\t\t\tthis._levelControl.Name = \"_levelControl\";\n\t\t\tthis._levelControl.Size = new System.Drawing.Size(256, 42);\n\t\t\tthis._levelControl.TabIndex = 12;\n\t\t\tthis._levelControl.TrackBarIncrements = 100;\n\t\t\tthis._levelControl.Value = new decimal(new int[] {\n            0,\n            0,\n            0,\n            0});\n\t\t\t// \n\t\t\t// _surfaceRenderingRadio\n\t\t\t// \n\t\t\tthis._surfaceRenderingRadio.AutoCheck = false;\n\t\t\tthis._surfaceRenderingRadio.AutoSize = true;\n\t\t\tthis._surfaceRenderingRadio.Location = new System.Drawing.Point(17, 43);\n\t\t\tthis._surfaceRenderingRadio.Name = \"_surfaceRenderingRadio\";\n\t\t\tthis._surfaceRenderingRadio.Size = new System.Drawing.Size(114, 17);\n\t\t\tthis._surfaceRenderingRadio.TabIndex = 13;\n\t\t\tthis._surfaceRenderingRadio.TabStop = true;\n\t\t\tthis._surfaceRenderingRadio.Text = \"Surface Rendering\";\n\t\t\tthis._surfaceRenderingRadio.UseVisualStyleBackColor = true;\n\t\t\t// \n\t\t\t// _volumeRenderingRadio\n\t\t\t// \n\t\t\tthis._volumeRenderingRadio.AutoCheck = false;\n\t\t\tthis._volumeRenderingRadio.AutoSize = true;\n\t\t\tthis._volumeRenderingRadio.Location = new System.Drawing.Point(17, 66);\n\t\t\tthis._volumeRenderingRadio.Name = \"_volumeRenderingRadio\";\n\t\t\tthis._volumeRenderingRadio.Size = new System.Drawing.Size(112, 17);\n\t\t\tthis._volumeRenderingRadio.TabIndex = 14;\n\t\t\tthis._volumeRenderingRadio.TabStop = true;\n\t\t\tthis._volumeRenderingRadio.Text = \"Volume Rendering\";\n\t\t\tthis._volumeRenderingRadio.UseVisualStyleBackColor = true;\n\t\t\t// \n\t\t\t// TissueControl\n\t\t\t// \n\t\t\tthis.AutoScaleDimensions = new System.Drawing.SizeF(96F, 96F);\n\t\t\tthis.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;\n\t\t\tthis.Controls.Add(this._volumeRenderingRadio);\n\t\t\tthis.Controls.Add(this._surfaceRenderingRadio);\n\t\t\tthis.Controls.Add(this._visibleCheckBox);\n\t\t\tthis.Controls.Add(this._presetLabel);\n\t\t\tthis.Controls.Add(this._presetComboBox);\n\t\t\tthis.Controls.Add(this._opacityLabel);\n\t\t\tthis.Controls.Add(this._opacityControl);\n\t\t\tthis.Controls.Add(this._windowLabel);\n\t\t\tthis.Controls.Add(this._windowControl);\n\t\t\tthis.Controls.Add(this._levelLabel);\n\t\t\tthis.Controls.Add(this._levelControl);\n\t\t\tthis.Name = \"TissueControl\";\n", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "length": 825, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "163ba9ab3a8720b6b3e391e3fd85f582977e28ed27e2a9c2"}
{"input": "", "context": "\"\"\"\nConvert human-editable CSV files into JSON files, used by the web application.\n\"\"\"\nimport json\nimport csv\nfrom io import StringIO\nfrom datetime import datetime\n################################################################################\n# CONFIG \n# behavior categories to include in the JSON file\ncategories = set(('G', 'M', 'W', 'C', 'F', 'H', 'I', 'P', 'V',)) #'A', 'L', 'O', 'E', 'S'\n# time of first GPS point\nfirstGPStime = datetime(2014,1,24,5,36,14)\n# seconds between each GPS point\nintervalseconds = 60\nclass InFileNames:\n    observations = 'behavior observation codes.csv'\n    translations = 'behavior code translations.csv'\n    mediafeatures = 'media features.json'\n    gpstrack = 'GPS track.csv'\n    pictures = 'pictures.csv'\n    textbubbles = 'text bubbles.csv'\n    videos = 'videos.csv'\nclass OutFileNames:\n    behavior = 'behavior.json' # observations + translations\n    behaviorcsv = 'behavior observation data.csv'\n    media = 'media.js' # pictures, videos, text, media features\ntourIntro = {\n    'loc': [10.5142232962, -85.3693762701],\n    'note': 'intro',\n    'data': [],\n    'time': '05:30:00',\n    }\ntourStart = {\n    'loc': [10.5142232962, -85.3693762701],\n    'note': 'start',\n    'data': [],\n    'time': '05:30:00',\n    }\n    \ntourEnd = {\n    'loc': [10.5143646989, -85.3639992792], #[10.5148555432, -85.3643822484], \n    'note': 'end',\n    'data': [],\n    'time': '18:10:43',\n    }\n# monkey patch json encoder to format floats\nfrom json import encoder\nencoder.FLOAT_REPR = lambda o: format(o, '.5f')\n    \n################################################################################\n# GPS track\nwith open(InFileNames.gpstrack) as f:\n    reader = csv.reader(f, skipinitialspace=True)\n    GPStrack = [(float(lat[:9]), float(lon[:10])) for (lat,lon) in list(reader)[1:]]\ndef parsetime(timestr):\n    \"\"\"\n    Get the time from a string, ignore the date.\n    (Return a datetime with the date of the first GPS point.)\n    \"\"\"\n    \n    # take out the date (get only the last space-separated part)\n    timestr = timestr.split()[-1]\n    time = datetime.strptime(timestr, '%H:%M:%S').time()\n    \n    return datetime.combine(firstGPStime.date(), time)\ndef getTimeInterval(time):\n    \"\"\"\n    Get start and end points on the GPS track, of the time interval containing \"time\".\n    \"\"\"\n    \n    index = int((time - firstGPStime).total_seconds() / intervalseconds)\n    interval = GPStrack[index:index+2]\n    \n    if len(interval) == 2:\n        return interval\n    \n    # if the time is past the last GPS point, return an interval with just the last GPS point    \n    else:\n        return (GPStrack[-1], GPStrack[-1])\ndef getGPSCoords(time):\n    \"\"\"\n    Get a geographical point along Winslow Homer's GPS track, by linear interpolation\n    \"\"\"\n    \n    # get start and stop\n    start, stop = getTimeInterval(time)\n    \n    timediff = (time - firstGPStime).total_seconds()\n    proportion = (timediff % intervalseconds) / float(intervalseconds)\n    \n    latdelta = (stop[0] - start[0])\n    lat = (proportion * latdelta) + start[0]\n    \n    londelta = (stop[1] - start[1])\n    lon = (proportion * londelta) + start[1]\n    \n    return (lat, lon)\ndef loadTranslationsFile():\n    \"\"\"\n    Load the translations file, return a list of dicts with the fields in the file\n    \"\"\"\n    \n    with open(InFileNames.translations) as f:\n        reader = csv.DictReader(f, skipinitialspace=True)\n        return list(reader)\ndef loadObservationFile(translations=None):\n    \"\"\" \n    Load the observations file, return a list with a dict for each observation\n    record, and a set with all of the unique behavior codes.\n    \n    \n    \"\"\"\n    \n    # ordered list of observations in file\n    observations = [] \n    \n    # set of codes we've seen\n    codes = set() \n    \n    \n    with open(InFileNames.observations) as f:\n        reader = csv.DictReader(f, skipinitialspace=True)\n        \n        for line in reader:  \n            # look up GPS coordinates from timestamp\n            line['loc'] = getGPSCoords(parsetime(line['timestamp']))\n        \n            # add a 'time' field without the date, to display to user\n            line['time'] = line['timestamp'].split()[1]\n        \n            observations.append(line)\n            codes.add(line['code'])\n    \n    \n    return observations, codes\n    \n    \n    \ndef filterObservationsTranslations():\n    \"\"\" \n    Return (observations, translations) list containing the intersection \n    (inner join) of the observations and translations, and only in the \n    configured categories.\n    \"\"\"\n    \n    translations = loadTranslationsFile()\n    observations, obs_code_set = loadObservationFile()\n    \n       \n    # Find codes that occur in the observations, and are in the right categories.\n    # Make a {code : translation-fields} 2-dimensional dict.\n    translations_dict = {\n        t['code'] : t\n        for t in translations\n        if  (t['code'] in obs_code_set)  and  (t['category'].upper() in categories)   }\n    \n    \n    # Find observations that have a translation.\n    observations = list(filter(lambda o: o['code'] in translations_dict, observations))\n    \n    \n    return observations, translations_dict\n    \n    \n    \n    \n    \ndef writeBehaviorJSON(observations, translations_dict, tourlist):\n    \"\"\"\n    Write behavior JSON file, with observations and translations joined.\n    \"\"\"\n    #observations, translations_dict = filterObservationsTranslations()\n    \n    # join together observations with translations\n", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "length": 609, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "a9b4285cd9b366f640dd9663e9dd44dfdc153065ee32a6d8"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n#!/usr/bin/env python\n#\n# Gramps - a GTK+/GNOME based genealogy program\n#\n# Copyright (C) 2000-2007  Donald N. Allingham\n# Copyright (C) 2007       Johan Gonqvist <johan.gronqvist@gmail.com>\n# Copyright (C) 2007-2009  Gary Burton <gary.burton@zen.co.uk>\n# Copyright (C) 2007-2009  Stephane Charette <stephanecharette@gmail.com>\n# Copyright (C) 2008-2009  Brian G. Matherly\n# Copyright (C) 2008       Jason M. Simanek <jason@bohemianalps.com>\n# Copyright (C) 2008-2011  Rob G. Healey <robhealey1@gmail.com>\n# Copyright (C) 2010       Doug Blank <doug.blank@gmail.com>\n# Copyright (C) 2010       Jakim Friant\n# Copyright (C) 2010-2017  Serge Noiraud\n# Copyright (C) 2011       Tim G L Lyons\n# Copyright (C) 2013       Benny Malengier\n# Copyright (C) 2016       Allen Crider\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n\"\"\"\nNarrative Web Page generator.\nClasse:\n    StatisticsPage\n\"\"\"\n#------------------------------------------------\n# python modules\n#------------------------------------------------\nfrom decimal import getcontext\nimport logging\n#------------------------------------------------\n# Gramps module\n#------------------------------------------------\nfrom gramps.gen.const import GRAMPS_LOCALE as glocale\nfrom gramps.gen.lib import (Person, Family, Event, Place, Source,\n                            Citation, Repository)\nfrom gramps.gen.plug.report import Bibliography\nfrom gramps.gen.utils.file import media_path_full\nfrom gramps.plugins.lib.libhtml import Html\n#------------------------------------------------\n# specific narrative web import\n#------------------------------------------------\nfrom gramps.plugins.webreport.basepage import BasePage\nfrom gramps.plugins.webreport.common import FULLCLEAR\nLOG = logging.getLogger(\".NarrativeWeb\")\ngetcontext().prec = 8\n_ = glocale.translation.sgettext\nclass StatisticsPage(BasePage):\n    \"\"\"\n    Create one page for statistics\n    \"\"\"\n    def __init__(self, report, title, step):\n        \"\"\"\n        @param: report        -- The instance of the main report class\n                                 for this report\n        @param: title         -- Is the title of the web page\n        \"\"\"\n        import posixpath\n        BasePage.__init__(self, report, title)\n        self.bibli = Bibliography()\n        self.uplink = False\n        self.report = report\n        # set the file name and open file\n        output_file, sio = self.report.create_file(\"statistics\")\n        addressbookpage, head, body = self.write_header(_(\"Statistics\"))\n        (males,\n         females,\n         unknown) = self.get_gender(report.database.iter_person_handles())\n        step()\n        mobjects = report.database.get_number_of_media()\n        npersons = report.database.get_number_of_people()\n        nfamilies = report.database.get_number_of_families()\n        nsurnames = len(set(report.database.surname_list))\n        notfound = []\n        total_media = 0\n        mbytes = \"0\"\n        chars = 0\n        for media in report.database.iter_media():\n            total_media += 1\n            fullname = media_path_full(report.database, media.get_path())\n            try:\n                chars += posixpath.getsize(fullname)\n                length = len(str(chars))\n                if chars <= 999999:\n                    mbytes = _(\"less than 1\")\n                else:\n                    mbytes = str(chars)[:(length-6)]\n            except OSError:\n                notfound.append(media.get_path())\n        with Html(\"div\", class_=\"content\", id='EventDetail') as section:\n            section += Html(\"h3\", self._(\"Database overview\"), inline=True)\n        body += section\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec11:\n            sec11 += Html(\"h4\", self._(\"Individuals\"), inline=True)\n        body += sec11\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec1:\n            sec1 += Html(\"br\", self._(\"Number of individuals\") + self.colon +\n                         \"%d\" % npersons, inline=True)\n            sec1 += Html(\"br\", self._(\"Males\") + self.colon +\n                         \"%d\" % males, inline=True)\n            sec1 += Html(\"br\", self._(\"Females\") + self.colon +\n                         \"%d\" % females, inline=True)\n            sec1 += Html(\"br\", self._(\"Individuals with unknown gender\") +\n                         self.colon + \"%d\" % unknown, inline=True)\n        body += sec1\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec2:\n            sec2 += Html(\"h4\", self._(\"Family Information\"), inline=True)\n            sec2 += Html(\"br\", self._(\"Number of families\") + self.colon +\n                         \"%d\" % nfamilies, inline=True)\n            sec2 += Html(\"br\", self._(\"Unique surnames\") + self.colon +\n                         \"%d\" % nsurnames, inline=True)\n        body += sec2\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec3:\n            sec3 += Html(\"h4\", self._(\"Media Objects\"), inline=True)\n            sec3 += Html(\"br\",\n                         self._(\"Total number of media object references\") +\n                         self.colon + \"%d\" % total_media, inline=True)\n            sec3 += Html(\"br\", self._(\"Number of unique media objects\") +\n                         self.colon + \"%d\" % mobjects, inline=True)\n            sec3 += Html(\"br\", self._(\"Total size of media objects\") +\n                         self.colon +\n                         \"%8s %s\" % (mbytes, self._(\"Megabyte|MB\")),\n                         inline=True)\n            sec3 += Html(\"br\", self._(\"Missing Media Objects\") +\n                         self.colon + \"%d\" % len(notfound), inline=True)\n        body += sec3\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec4:\n            sec4 += Html(\"h4\", self._(\"Miscellaneous\"), inline=True)\n            sec4 += Html(\"br\", self._(\"Number of events\") + self.colon +\n                         \"%d\" % report.database.get_number_of_events(),\n                         inline=True)\n            sec4 += Html(\"br\", self._(\"Number of places\") + self.colon +\n                         \"%d\" % report.database.get_number_of_places(),\n                         inline=True)\n            nsources = report.database.get_number_of_sources()\n            sec4 += Html(\"br\", self._(\"Number of sources\") +\n                         self.colon + \"%d\" % nsources,\n                         inline=True)\n            ncitations = report.database.get_number_of_citations()\n            sec4 += Html(\"br\", self._(\"Number of citations\") +\n                         self.colon + \"%d\" % ncitations,\n                         inline=True)\n            nrepo = report.database.get_number_of_repositories()\n            sec4 += Html(\"br\", self._(\"Number of repositories\") +\n                         self.colon + \"%d\" % nrepo,\n                         inline=True)\n        body += sec4\n        (males,\n         females,\n         unknown) = self.get_gender(self.report.bkref_dict[Person].keys())\n        origin = \" :<br/>\" + report.filter.get_name(self.rlocale)\n        with Html(\"div\", class_=\"content\", id='EventDetail') as section:\n            section += Html(\"h3\",\n                            self._(\"Narrative web content report for\") + origin,\n                            inline=True)\n        body += section\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec5:\n            sec5 += Html(\"h4\", self._(\"Individuals\"), inline=True)\n            sec5 += Html(\"br\", self._(\"Number of individuals\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Person]),\n                         inline=True)\n            sec5 += Html(\"br\", self._(\"Males\") + self.colon +\n                         \"%d\" % males, inline=True)\n            sec5 += Html(\"br\", self._(\"Females\") + self.colon +\n                         \"%d\" % females, inline=True)\n            sec5 += Html(\"br\", self._(\"Individuals with unknown gender\") +\n                         self.colon + \"%d\" % unknown, inline=True)\n        body += sec5\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec6:\n            sec6 += Html(\"h4\", self._(\"Family Information\"), inline=True)\n            sec6 += Html(\"br\", self._(\"Number of families\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Family]),\n                         inline=True)\n        body += sec6\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec7:\n            sec7 += Html(\"h4\", self._(\"Miscellaneous\"), inline=True)\n            sec7 += Html(\"br\", self._(\"Number of events\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Event]),\n                         inline=True)\n            sec7 += Html(\"br\", self._(\"Number of places\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Place]),\n                         inline=True)\n            sec7 += Html(\"br\", self._(\"Number of sources\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Source]),\n                         inline=True)\n            sec7 += Html(\"br\", self._(\"Number of citations\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Citation]),\n                         inline=True)\n            sec7 += Html(\"br\", self._(\"Number of repositories\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Repository]),\n                         inline=True)\n        body += sec7\n        # add fullclear for proper styling\n        # and footer section to page\n", "answers": ["        footer = self.write_footer(None)"], "length": 960, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "eed31a60b2b619d0d6e7f0a366fbd64a29d110c6a51d5a73"}
{"input": "", "context": "#!/usr/bin/env python\n'''\nFly Helicopter in SITL\nAP_FLAKE8_CLEAN\n'''\nfrom __future__ import print_function\nfrom arducopter import AutoTestCopter\nfrom common import AutoTest\nfrom common import NotAchievedException, AutoTestTimeoutException\nfrom pymavlink import mavutil\nfrom pysim import vehicleinfo\nclass AutoTestHelicopter(AutoTestCopter):\n    sitl_start_loc = mavutil.location(40.072842, -105.230575, 1586, 0)     # Sparkfun AVC Location\n    def vehicleinfo_key(self):\n        return 'Helicopter'\n    def log_name(self):\n        return \"HeliCopter\"\n    def default_frame(self):\n        return \"heli\"\n    def sitl_start_location(self):\n        return self.sitl_start_loc\n    def default_speedup(self):\n        '''Heli seems to be race-free'''\n        return 100\n    def is_heli(self):\n        return True\n    def rc_defaults(self):\n        ret = super(AutoTestHelicopter, self).rc_defaults()\n        ret[8] = 1000\n        ret[3] = 1000 # collective\n        return ret\n    @staticmethod\n    def get_position_armable_modes_list():\n        '''filter THROW mode out of armable modes list; Heli is special-cased'''\n        ret = AutoTestCopter.get_position_armable_modes_list()\n        ret = filter(lambda x : x != \"THROW\", ret)\n        return ret\n    def loiter_requires_position(self):\n        self.progress(\"Skipping loiter-requires-position for heli; rotor runup issues\")\n    def get_collective_out(self):\n        servo = self.mav.recv_match(type='SERVO_OUTPUT_RAW', blocking=True)\n        chan_pwm = (servo.servo1_raw + servo.servo2_raw + servo.servo3_raw)/3.0\n        return chan_pwm\n    def rotor_runup_complete_checks(self):\n        # Takeoff and landing in Loiter\n        TARGET_RUNUP_TIME = 10\n        self.zero_throttle()\n        self.change_mode('LOITER')\n        self.wait_ready_to_arm()\n        self.arm_vehicle()\n        servo = self.mav.recv_match(type='SERVO_OUTPUT_RAW', blocking=True)\n        coll = servo.servo1_raw\n        coll = coll + 50\n        self.set_parameter(\"H_RSC_RUNUP_TIME\", TARGET_RUNUP_TIME)\n        self.progress(\"Initiate Runup by putting some throttle\")\n        self.set_rc(8, 2000)\n        self.set_rc(3, 1700)\n        self.progress(\"Collective threshold PWM %u\" % coll)\n        tstart = self.get_sim_time()\n        self.progress(\"Wait that collective PWM pass threshold value\")\n        servo = self.mav.recv_match(condition='SERVO_OUTPUT_RAW.servo1_raw>%u' % coll, blocking=True)\n        runup_time = self.get_sim_time() - tstart\n        self.progress(\"Collective is now at PWM %u\" % servo.servo1_raw)\n        self.mav.wait_heartbeat()\n        if runup_time < TARGET_RUNUP_TIME:\n            self.zero_throttle()\n            self.set_rc(8, 1000)\n            self.disarm_vehicle()\n            self.mav.wait_heartbeat()\n            raise NotAchievedException(\"Takeoff initiated before runup time complete %u\" % runup_time)\n        self.progress(\"Runup time %u\" % runup_time)\n        self.zero_throttle()\n        self.set_rc(8, 1000)\n        self.land_and_disarm()\n        self.mav.wait_heartbeat()\n    # fly_avc_test - fly AVC mission\n    def fly_avc_test(self):\n        # Arm\n        self.change_mode('STABILIZE')\n        self.wait_ready_to_arm()\n        self.arm_vehicle()\n        self.progress(\"Raising rotor speed\")\n        self.set_rc(8, 2000)\n        # upload mission from file\n        self.progress(\"# Load copter_AVC2013_mission\")\n        # load the waypoint count\n        num_wp = self.load_mission(\"copter_AVC2013_mission.txt\", strict=False)\n        if not num_wp:\n            raise NotAchievedException(\"load copter_AVC2013_mission failed\")\n        self.progress(\"Fly AVC mission from 1 to %u\" % num_wp)\n        self.set_current_waypoint(1)\n        # wait for motor runup\n        self.delay_sim_time(20)\n        # switch into AUTO mode and raise throttle\n        self.change_mode('AUTO')\n        self.set_rc(3, 1500)\n        # fly the mission\n        self.wait_waypoint(0, num_wp-1, timeout=500)\n        # set throttle to minimum\n        self.zero_throttle()\n        # wait for disarm\n        self.wait_disarmed()\n        self.progress(\"MOTORS DISARMED OK\")\n        self.progress(\"Lowering rotor speed\")\n        self.set_rc(8, 1000)\n        self.progress(\"AVC mission completed: passed!\")\n    def takeoff(self,\n                alt_min=30,\n                takeoff_throttle=1700,\n                require_absolute=True,\n                mode=\"STABILIZE\",\n                timeout=120):\n        \"\"\"Takeoff get to 30m altitude.\"\"\"\n        self.progress(\"TAKEOFF\")\n        self.change_mode(mode)\n        if not self.armed():\n            self.wait_ready_to_arm(require_absolute=require_absolute, timeout=timeout)\n            self.zero_throttle()\n            self.arm_vehicle()\n        self.progress(\"Raising rotor speed\")\n        self.set_rc(8, 2000)\n        self.progress(\"wait for rotor runup to complete\")\n        self.wait_servo_channel_value(8, 1660, timeout=10)\n        if mode == 'GUIDED':\n            self.user_takeoff(alt_min=alt_min)\n        else:\n            self.set_rc(3, takeoff_throttle)\n        self.wait_for_alt(alt_min=alt_min, timeout=timeout)\n        self.hover()\n        self.progress(\"TAKEOFF COMPLETE\")\n    def fly_each_frame(self):\n        vinfo = vehicleinfo.VehicleInfo()\n        vinfo_options = vinfo.options[self.vehicleinfo_key()]\n        known_broken_frames = {\n        }\n        for frame in sorted(vinfo_options[\"frames\"].keys()):\n            self.start_subtest(\"Testing frame (%s)\" % str(frame))\n            if frame in known_broken_frames:\n                self.progress(\"Actually, no I'm not - it is known-broken (%s)\" %\n                              (known_broken_frames[frame]))\n                continue\n            frame_bits = vinfo_options[\"frames\"][frame]\n            print(\"frame_bits: %s\" % str(frame_bits))\n            if frame_bits.get(\"external\", False):\n                self.progress(\"Actually, no I'm not - it is an external simulation\")\n                continue\n            model = frame_bits.get(\"model\", frame)\n            # the model string for Callisto has crap in it.... we\n            # should really have another entry in the vehicleinfo data\n            # to carry the path to the JSON.\n            actual_model = model.split(\":\")[0]\n            defaults = self.model_defaults_filepath(actual_model)\n            if type(defaults) != list:\n                defaults = [defaults]\n            self.customise_SITL_commandline(\n                [\"--defaults\", ','.join(defaults), ],\n                model=model,\n                wipe=True,\n            )\n            self.takeoff(10)\n            self.do_RTL()\n            self.set_rc(8, 1000)\n    def hover(self):\n        self.progress(\"Setting hover collective\")\n        self.set_rc(3, 1500)\n    def fly_heli_poshold_takeoff(self):\n        \"\"\"ensure vehicle stays put until it is ready to fly\"\"\"\n        self.context_push()\n        ex = None\n        try:\n            self.set_parameter(\"PILOT_TKOFF_ALT\", 700)\n            self.change_mode('POSHOLD')\n            self.zero_throttle()\n            self.set_rc(8, 1000)\n            self.wait_ready_to_arm()\n            # Arm\n            self.arm_vehicle()\n            self.progress(\"Raising rotor speed\")\n            self.set_rc(8, 2000)\n            self.progress(\"wait for rotor runup to complete\")\n            self.wait_servo_channel_value(8, 1660, timeout=10)\n            self.delay_sim_time(20)\n            # check we are still on the ground...\n            m = self.mav.recv_match(type='GLOBAL_POSITION_INT', blocking=True)\n            max_relalt_mm = 1000\n", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "length": 577, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "afc69ae78edec70b690890e285882cf26620106e9a4ecc3d"}
{"input": "", "context": "#region Copyright & License Information\n/*\n * Copyright 2007-2014 The OpenRA Developers (see AUTHORS)\n * This file is part of OpenRA, which is free software. It is made\n * available to you under the terms of the GNU General Public License\n * as published by the Free Software Foundation. For more information,\n * see COPYING.\n */\n#endregion\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Linq;\nusing OpenRA.Traits;\nnamespace OpenRA.Network\n{\n\tstatic class UnitOrders\n\t{\n\t\tstatic Player FindPlayerByClient(this World world, Session.Client c)\n\t\t{\n\t\t\t/* TODO: this is still a hack.\n\t\t\t * the cases we're trying to avoid are the extra players on the host's client -- Neutral, other MapPlayers,..*/\n\t\t\treturn world.Players.FirstOrDefault(\n\t\t\t\tp => (p.ClientIndex == c.Index && p.PlayerReference.Playable));\n\t\t}\n\t\tpublic static void ProcessOrder(OrderManager orderManager, World world, int clientId, Order order)\n\t\t{\n\t\t\tif (world != null)\n\t\t\t{\n\t\t\t\tif (!world.WorldActor.TraitsImplementing<IValidateOrder>().All(vo =>\n\t\t\t\t\tvo.OrderValidation(orderManager, world, clientId, order)))\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tswitch (order.OrderString)\n\t\t\t{\n\t\t\t\tcase \"Chat\":\n\t\t\t\t\t{\n\t\t\t\t\t\tvar client = orderManager.LobbyInfo.ClientWithIndex(clientId);\n\t\t\t\t\t\tif (client != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar player = world != null ? world.FindPlayerByClient(client) : null;\n\t\t\t\t\t\t\tvar suffix = (player != null && player.WinState == WinState.Lost) ? \" (Dead)\" : \"\";\n\t\t\t\t\t\t\tsuffix = client.IsObserver ? \" (Spectator)\" : suffix;\n\t\t\t\t\t\t\tGame.AddChatLine(client.Color.RGB, client.Name + suffix, order.TargetString);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tGame.AddChatLine(Color.White, \"(player {0})\".F(clientId), order.TargetString);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"Message\": // Server message\n\t\t\t\t\t\tGame.AddChatLine(Color.White, \"Server\", order.TargetString);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Disconnected\": /* reports that the target player disconnected */\n\t\t\t\t\t{\n\t\t\t\t\t\tvar client = orderManager.LobbyInfo.ClientWithIndex(clientId);\n\t\t\t\t\t\tif (client != null)\n\t\t\t\t\t\t\tclient.State = Session.ClientState.Disconnected;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"TeamChat\":\n\t\t\t\t\t{\n\t\t\t\t\t\tvar client = orderManager.LobbyInfo.ClientWithIndex(clientId);\n\t\t\t\t\t\tif (client != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (world == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (orderManager.LocalClient != null && client.Team == orderManager.LocalClient.Team)\n\t\t\t\t\t\t\t\t\tGame.AddChatLine(client.Color.RGB, client.Name + \" (Team)\",\n\t\t\t\t\t\t\t\t\t\torder.TargetString);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar player = world.FindPlayerByClient(client);\n\t\t\t\t\t\t\t\tif (player == null) return;\n\t\t\t\t\t\t\t\tif ((world.LocalPlayer != null && player.Stances[world.LocalPlayer] == Stance.Ally) || player.WinState == WinState.Lost)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar suffix = player.WinState == WinState.Lost ? \" (Dead)\" : \" (Team)\";\n\t\t\t\t\t\t\t\t\tGame.AddChatLine(client.Color.RGB, client.Name + suffix, order.TargetString);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"StartGame\":\n\t\t\t\t\t{\n\t\t\t\t\t\tGame.AddChatLine(Color.White, \"Server\", \"The game has started.\");\n\t\t\t\t\t\tGame.StartGame(orderManager.LobbyInfo.GlobalSettings.Map, false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"PauseGame\":\n\t\t\t\t\t{\n\t\t\t\t\t\tvar client = orderManager.LobbyInfo.ClientWithIndex(clientId);\n\t\t\t\t\t\tif (client != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar pause = order.TargetString == \"Pause\";\n\t\t\t\t\t\t\tif (orderManager.World.Paused != pause && !world.LobbyInfo.IsSinglePlayer)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pausetext = \"The game is {0} by {1}\".F(pause ? \"paused\" : \"un-paused\", client.Name);\n\t\t\t\t\t\t\t\tGame.AddChatLine(Color.White, \"\", pausetext);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\torderManager.World.Paused = pause;\n\t\t\t\t\t\t\torderManager.World.PredictedPaused = pause;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"HandshakeRequest\":\n\t\t\t\t\t{\n\t\t\t\t\t\t// TODO: Switch to the server's mod if we have it\n\t\t\t\t\t\t// Otherwise send the handshake with our current settings and let the server reject us\n\t\t\t\t\t\tvar mod = Game.modData.Manifest.Mod;\n\t\t\t\t\t\tvar info = new Session.Client()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName = Game.Settings.Player.Name,\n\t\t\t\t\t\t\tPreferredColor = Game.Settings.Player.Color,\n\t\t\t\t\t\t\tColor = Game.Settings.Player.Color,\n\t\t\t\t\t\t\tCountry = \"random\",\n\t\t\t\t\t\t\tSpawnPoint = 0,\n\t\t\t\t\t\t\tTeam = 0,\n\t\t\t\t\t\t\tState = Session.ClientState.Invalid\n\t\t\t\t\t\t};\n\t\t\t\t\t\tvar response = new HandshakeResponse()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tClient = info,\n\t\t\t\t\t\t\tMod = mod.Id,\n\t\t\t\t\t\t\tVersion = mod.Version,\n\t\t\t\t\t\t\tPassword = orderManager.Password\n\t\t\t\t\t\t};\n\t\t\t\t\t\torderManager.IssueOrder(Order.HandshakeResponse(response.Serialize()));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"ServerError\":\n\t\t\t\t\t{\n\t\t\t\t\t\torderManager.ServerError = order.TargetString;\n\t\t\t\t\t\torderManager.AuthenticationFailed = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"AuthenticationError\":\n\t\t\t\t\t{\n\t\t\t\t\t\torderManager.ServerError = order.TargetString;\n\t\t\t\t\t\torderManager.AuthenticationFailed = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"SyncInfo\":\n\t\t\t\t\t{\n\t\t\t\t\t\torderManager.LobbyInfo = Session.Deserialize(order.TargetString);\n\t\t\t\t\t\tSetOrderLag(orderManager);\n\t\t\t\t\t\tGame.SyncLobbyInfo();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"SyncLobbyClients\":\n\t\t\t\t\t{\n\t\t\t\t\t\tvar clients = new List<Session.Client>();\n\t\t\t\t\t\tvar nodes = MiniYaml.FromString(order.TargetString);\n\t\t\t\t\t\tforeach (var node in nodes)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar strings = node.Key.Split('@');\n\t\t\t\t\t\t\tif (strings[0] == \"Client\")\n\t\t\t\t\t\t\t\tclients.Add(Session.Client.Deserialize(node.Value));\n\t\t\t\t\t\t}\n\t\t\t\t\t\torderManager.LobbyInfo.Clients = clients;\n\t\t\t\t\t\tGame.SyncLobbyInfo();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"SyncLobbySlots\":\n\t\t\t\t\t{\n\t\t\t\t\t\tvar slots = new Dictionary<string, Session.Slot>();\n\t\t\t\t\t\tvar nodes = MiniYaml.FromString(order.TargetString);\n\t\t\t\t\t\tforeach (var node in nodes)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar strings = node.Key.Split('@');\n\t\t\t\t\t\t\tif (strings[0] == \"Slot\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar slot = Session.Slot.Deserialize(node.Value);\n\t\t\t\t\t\t\t\tslots.Add(slot.PlayerReference, slot);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\torderManager.LobbyInfo.Slots = slots;\n\t\t\t\t\t\tGame.SyncLobbyInfo();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"SyncLobbyGlobalSettings\":\n\t\t\t\t\t{\n\t\t\t\t\t\tvar nodes = MiniYaml.FromString(order.TargetString);\n\t\t\t\t\t\tforeach (var node in nodes)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar strings = node.Key.Split('@');\n", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "length": 591, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "a236838dfe66d927229ed6bf16cacdca43cf1adcd2053b02"}
{"input": "", "context": "package de.uvwxy.packsock;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\n/**\n * A class to simplify the transmission of binary data or strings with a tiny packet header. Its payload size is limited\n * by BUFFER_SIZE.\n * \n * @author Paul Smith code@uvwxy.de\n * \n */\npublic class PackSock {\n\t// 64 Kb packet size should be enough?\n\tprivate static final int BUFFER_SIZE = 1024 * 64;\n\tprivate static final int BYTES_TO_READ_FOR_SIZE = 4;\n\tprivate static final int BYTES_TO_READ_FOR_TYPE = 1;\n\tprivate byte[] buffer = new byte[BUFFER_SIZE];\n\tprivate int buffer_pointer = 0;\n\tprivate int bytes_to_read_for_payload = -1;\n\tprivate int bytes_read_size = 0;\n\tprivate int bytes_read_type = 0;\n\tprivate int bytes_read_payload = 0;\n\tprivate String serverIpAddress;\n\tprivate int connectionPort;\n\tprivate InetAddress serverAddress;\n\tprivate SocketReadState state = SocketReadState.READ_NOTHING;\n\tprivate static ServerSocket serverListener;\n\tprivate boolean isServer = false;\n\tprivate Socket clientSocket;\n\tprivate Socket serverSocket;\n\tprivate BufferedInputStream sock_in;\n\tprivate BufferedOutputStream sock_out;\n\tprivate Packet bufferedPacket = null;\n\tprivate IServerConnectedHook hook = null;\n\tprivate long socketID = System.currentTimeMillis();\n\tprivate class ListenThread implements Runnable {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\ttry {\n\t\t\t\t\tserverSocket = serverListener.accept();\n\t\t\t\t} catch (SocketException se) {\n\t\t\t\t\t// TODO: has been killed by serverListener.close() or other reason\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsock_in = new BufferedInputStream(serverSocket.getInputStream());\n\t\t\t\tsock_out = new BufferedOutputStream(serverSocket.getOutputStream());\n\t\t\t\tif (hook != null)\n\t\t\t\t\thook.onServerAcceptedConnection();\n\t\t\t} catch (IOException e) {\n\t\t\t\tSystem.out.println(\"Socket input/output stream broken..\");\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Initialize this <code>PackSock</code> as a client socket.\n\t * \n\t * @param port\n\t * @throws IOException\n\t */\n\tpublic PackSock(int port, IServerConnectedHook hook) throws IOException {\n\t\tisServer = true;\n\t\tthis.hook = hook;\n\t\tif (serverListener == null) {\n\t\t\tserverListener = new ServerSocket(port);\n\t\t\tthis.connectionPort = port;\n\t\t}\n\t\tif (port != this.connectionPort) {\n\t\t\tthis.connectionPort = port;\n\t\t\t// This does _not_ close previously connected sockets:\n\t\t\tserverListener.close();\n\t\t\tserverListener = new ServerSocket(port);\n\t\t}\n\t}\n\t/**\n\t * Initialize this <code>PackSock</code> as a server socket.\n\t * \n\t * @param serverIpAddress\n\t * @param port\n\t */\n\tpublic PackSock(String serverIpAddress, int port) {\n\t\tthis.serverIpAddress = serverIpAddress;\n\t\tthis.connectionPort = port;\n\t}\n\t/**\n\t * Sets this socket into listen mode with a background Thread accepting the connection.\n\t * \n\t * @throws IOException\n\t */\n\tpublic void listen() throws IOException {\n\t\tif (!isServer)\n\t\t\treturn;\n\t\tThread listener = new Thread(new ListenThread());\n\t\tlistener.start();\n\t}\n\t/**\n\t * Tries to connect this socket to the given host as client.\n\t * \n\t * @throws Exception\n\t */\n\tpublic void connect() throws Exception {\n\t\tif (isServer)\n\t\t\treturn;\n\t\tserverAddress = InetAddress.getByName(serverIpAddress);\n\t\tif (clientSocket != null)\n\t\t\tif (clientSocket.isConnected())\n\t\t\t\tclientSocket.close();\n\t\tclientSocket = new Socket(serverAddress, connectionPort);\n\t\tclientSocket.setSoTimeout(0);\n\t\tclientSocket.setKeepAlive(true);\n\t\tclientSocket.setTcpNoDelay(true);\n\t\tsock_in = new BufferedInputStream(clientSocket.getInputStream());\n\t\tsock_out = new BufferedOutputStream(clientSocket.getOutputStream());\n\t\treturn;\n\t}\n\t/**\n\t * This method takes the given <code>Packet</code> and sends it through the existing connection.\n\t * \n\t * @param p\n\t *            the <code>Packet</code> to send. <code>null</code> is not sent.\n\t * @throws IOException\n\t */\n\tpublic void sendPacket(Packet p) throws IOException, SocketException {\n\t\tif (p == null || sock_out == null) {\n\t\t\t// should throw exception here!\n\t\t\treturn;\n\t\t}\n\t\tsock_out.write(p.getPayloadLengthBytes());\n\t\tsock_out.write(p.getTypeByte());\n\t\tsock_out.write(p.getPayloadAsBytes());\n\t\t// make sure stream is written out to the target stream\n\t\tsock_out.flush();\n\t}\n\t/**\n\t * This function will block until a <code>Packet</code> is received. This function will not return <code>null</code>\n\t * .\n\t * \n\t * @return\n\t * @throws IOException\n\t */\n\tpublic Packet blockingReadSocketForPacket() throws IOException {\n\t\tPacket buf = null;\n\t\twhile (buf == null)\n\t\t\tbuf = tryReadSocketForPacket();\n\t\treturn buf;\n\t}\n\t/**\n\t * This function will try to read packet data from the socket. If not enough data has been received so far\n\t * <code>null</code> is returned. Once an entire packet is read from the buffer the <code>Packet</code> is returned.\n\t * returned.\n\t * \n\t * @throws IOException\n\t */\n\tpublic Packet tryReadSocketForPacket() throws IOException, SocketException {\n\t\tif (sock_in == null) {\n\t\t\treturn null;\n\t\t}\n\t\tswitch (state) {\n\t\tcase READ_PACKET:\n\t\t\t// reset everything\n\t\t\tbytes_read_size = 0;\n\t\t\tbytes_read_type = 0;\n\t\t\tbytes_read_payload = 0;\n\t\t\tbuffer_pointer = 0;\n\t\tcase READ_NOTHING:\n\t\t\tbufferedPacket = new Packet();\n\t\tcase READING_SIZE:\n\t\t\t// read maximal 4 bytes of size field\n\t\t\tbytes_read_size += sock_in.read(buffer, buffer_pointer, BYTES_TO_READ_FOR_SIZE - bytes_read_size);\n\t\t\tbuffer_pointer += bytes_read_size;\n\t\t\tif (bytes_read_size == BYTES_TO_READ_FOR_SIZE) {\n\t\t\t\t// now we have everything!\n\t\t\t\tbyte[] src = buffer;\n\t\t\t\tint srcOffset = buffer_pointer - 4;\n\t\t\t\tint byteCount = 4;\n\t\t\t\t// reassemble integer\n\t\t\t\tByteBuffer b = ByteBuffer.allocate(4).put(src, srcOffset, byteCount);\n\t\t\t\tb.position(0);\n\t\t\t\tint size = b.getInt();\n\t\t\t\t// set bytes_to_read_payload\n\t\t\t\tbytes_to_read_for_payload = size;\n\t\t\t\tstate = SocketReadState.READING_TYPE;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase READING_TYPE:\n\t\t\tbytes_read_type += sock_in.read(buffer, buffer_pointer, BYTES_TO_READ_FOR_TYPE - bytes_read_type);\n\t\t\tbuffer_pointer += bytes_read_type;\n\t\t\tif (bytes_read_type == BYTES_TO_READ_FOR_TYPE) {\n\t\t\t\t// now we have everything!\n\t\t\t\tbyte type = buffer[buffer_pointer - 1];\n\t\t\t\tbufferedPacket.setT(type);\n\t\t\t\tstate = SocketReadState.READING_PAYLOAD;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase READING_PAYLOAD:\n\t\t\tint bytesCurrentlyRead = sock_in.read(buffer, buffer_pointer, bytes_to_read_for_payload\n\t\t\t\t\t- bytes_read_payload);\n\t\t\tbytes_read_payload += bytesCurrentlyRead;\n\t\t\tbuffer_pointer += bytesCurrentlyRead;\n\t\t\tif (bytes_read_payload == bytes_to_read_for_payload) {\n\t\t\t\t// now we have everything!\n\t\t\t\tbyte[] src = buffer;\n\t\t\t\tint srcOffset = buffer_pointer - bytes_to_read_for_payload;\n\t\t\t\tint byteCount = bytes_to_read_for_payload;\n\t\t\t\tbyte[] buf = new byte[byteCount];\n", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "length": 783, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "da7e49792f3a2d27863309727df4e926e397b98ea5c7a30e"}
{"input": "", "context": "/*******************************************************************************\n * Copyright (c) 2010 Oak Ridge National Laboratory.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n ******************************************************************************/\npackage org.csstudio.opibuilder.runmode;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.logging.Level;\nimport org.csstudio.opibuilder.OPIBuilderPlugin;\nimport org.csstudio.opibuilder.model.DisplayModel;\nimport org.csstudio.opibuilder.util.SingleSourceHelper;\nimport org.eclipse.core.runtime.IAdaptable;\nimport org.eclipse.core.runtime.Platform;\nimport org.eclipse.draw2d.geometry.Rectangle;\nimport org.eclipse.e4.core.contexts.IEclipseContext;\nimport org.eclipse.e4.ui.model.application.MApplication;\nimport org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder;\nimport org.eclipse.e4.ui.model.application.ui.basic.MPart;\nimport org.eclipse.e4.ui.workbench.modeling.EModelService;\nimport org.eclipse.osgi.util.NLS;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.ui.IActionBars;\nimport org.eclipse.ui.IEditorInput;\nimport org.eclipse.ui.IElementFactory;\nimport org.eclipse.ui.IMemento;\nimport org.eclipse.ui.IPersistableElement;\nimport org.eclipse.ui.IViewSite;\nimport org.eclipse.ui.PartInitException;\nimport org.eclipse.ui.PlatformUI;\nimport org.eclipse.ui.WorkbenchException;\nimport org.eclipse.ui.XMLMemento;\nimport org.eclipse.ui.part.ViewPart;\n/** RCP 'View' for display runtime\n *\n *  <p>Similar to an RCP editor it is associated to an 'input',\n *  but provides only a view to that *.opi, executing its content.\n *\n *  <p>Being a 'View' allows save/restore within a 'Perspective'.\n *\n *  <p>RCP distinguishes instances via their secondary view ID.\n *  Each instances has a memento for storing arbitrary data,\n *  which we use for the 'input' (*.opi path and macros).\n *\n *  <p>Secondary view IDs must be unique, they can't simply increment\n *  from \"1\" each time CSS is started because then a view with a previously\n *  used secondary ID will show the old content.\n *\n *  <p>RCP only triggers <code>saveState</code> for views that are currently\n *  visible, typically on exit.\n *  This view will write the memento info directly to the underlying E4 model\n *  whenever the input changes.\n *\n *  @author Xihui Chen - Original author\n *  @author Kay Kasemir\n */\n@SuppressWarnings(\"nls\")\npublic class OPIView extends ViewPart implements IOPIRuntime\n{\n    /** View ID registered in plugin.xml for use as a 'default' view.\n     *\n     *  <p>For views to be displayed in designated\n     *  OPIRunnerPerspective.Position,\n     *  that Position.name() is added to the basic ID\n     */\n    public static final String ID = \"org.csstudio.opibuilder.opiView\";\n    /** Debug option, see .options file at plugin root */\n    public static final boolean debug = \"true\".equalsIgnoreCase(Platform.getDebugOption(OPIBuilderPlugin.PLUGIN_ID + \"/views\"));\n    /** Memento tags */\n    private static final String TAG_INPUT = \"input\",\n                                TAG_FACTORY_ID = \"factory_id\",\n                                TAG_MEMENTO = \"memento\";\n    protected OPIRuntimeDelegate opiRuntimeDelegate;\n    private IViewSite site;\n    private IEditorInput input;\n    private OPIRuntimeToolBarDelegate opiRuntimeToolBarDelegate;\n    private static boolean openFromPerspective = false;\n    public OPIView()\n    {\n        opiRuntimeDelegate = new OPIRuntimeDelegate(this);\n    }\n    /** @return Unique secondary view ID for this instance of CSS */\n    public static String createSecondaryID()\n    {\n        return UUID.randomUUID().toString();\n    }\n    @Override\n    public void dispose()\n    {\n        if (opiRuntimeDelegate != null)\n        {\n            opiRuntimeDelegate.dispose();\n            opiRuntimeDelegate = null;\n        }\n        if (opiRuntimeToolBarDelegate != null)\n        {\n            opiRuntimeToolBarDelegate.dispose();\n            opiRuntimeToolBarDelegate = null;\n        }\n        super.dispose();\n    }\n    @Override\n    public void init(final IViewSite site, IMemento memento) throws PartInitException\n    {\n        super.init(site, memento);\n        this.site = site;\n        if (debug)\n            System.out.println(site.getId() + \":\" + site.getSecondaryId() + \" opened \" +\n                               (memento == null ? \", no memento\" : \"with memento\"));\n        if (memento == null) {\n            memento = findMementoFromPlaceholder();\n        }\n        if (memento == null) {\n            return;\n        }\n        // Load previously displayed input from memento\n        final String  factoryID = memento.getString(TAG_FACTORY_ID);\n        if (factoryID == null)\n        {\n            OPIBuilderPlugin.getLogger().log(Level.WARNING, toString() + \" has memento with empty factory ID\");\n            return;\n        }\n        final IMemento inputMem = memento.getChild(TAG_INPUT);\n        final IElementFactory factory = PlatformUI.getWorkbench().getElementFactory(factoryID);\n        if (factory == null)\n            throw new PartInitException(NLS.bind(\n                    \"Cannot instantiate input element factory {0} for OPIView\",\n                    factoryID));\n        final IAdaptable element = factory.createElement(inputMem);\n        if (!(element instanceof IEditorInput))\n            throw new PartInitException(\"Instead of IEditorInput, \" + factoryID + \" returned \" + element);\n        // Set input, but don't persist to memento because we just read it from memento\n        setOPIInput((IEditorInput)element, false);\n    }\n    /**\n     * Retrieve memento persisted in MPlaceholder if present.\n     * @return memento persisted in the placeholder.\n     */\n    private IMemento findMementoFromPlaceholder()\n    {\n        IMemento memento = null;\n        MPlaceholder placeholder = findPlaceholder();\n        if (placeholder != null) {\n            if (placeholder.getPersistedState().containsKey(TAG_MEMENTO))\n            {\n                String mementoString = placeholder.getPersistedState().get(TAG_MEMENTO);\n                memento = loadMemento(mementoString);\n            }\n        }\n        return memento;\n    }\n    /**\n     * Create memento from string.\n     * @param mementoString\n     * @return\n     */\n    private IMemento loadMemento(String mementoString)\n    {\n        StringReader reader = new StringReader(mementoString);\n        try\n        {\n            return XMLMemento.createReadRoot(reader);\n        }\n        catch (WorkbenchException e)\n        {\n            OPIBuilderPlugin.getLogger().log(Level.WARNING, \"Failed to load memento\", e);\n            return null;\n        }\n    }\n    /**\n     * Find the MPlaceholder corresponding to this MPart in the MPerspective.  This\n     * may have persisted information relevant to loading this OPIView.\n     * @return corresponding placeholder\n     */\n    private MPlaceholder findPlaceholder()\n    {\n        //do not remove casting - RAP 3.0 still needs it\n        final IEclipseContext localContext = (IEclipseContext)getViewSite().getService(IEclipseContext.class);\n        final MPart part = localContext.get(MPart.class);\n        final EModelService service = (EModelService)PlatformUI.getWorkbench().getService(EModelService.class);\n        final IEclipseContext globalContext = (IEclipseContext)PlatformUI.getWorkbench().getService(IEclipseContext.class);\n        final MApplication app = globalContext.get(MApplication.class);\n        final List<MPlaceholder> phs = service.findElements(app, null, MPlaceholder.class, null);\n        for (MPlaceholder ph : phs)\n        {\n            if (ph.getRef() == part)\n            {\n                return ph;\n            }\n        }\n        return null;\n    }\n    /** @param input Display file that this view should execute\n     *  @param persist Persist the input to memento?\n     */\n    public void setOPIInput(final IEditorInput input, final boolean persist) throws PartInitException\n    {\n        if (debug)\n        {\n            final IViewSite view = getViewSite();\n            System.out.println(view.getId() + \":\" + view.getSecondaryId() + \" displays \" + input.getName());\n        }\n        this.input = input;\n        setTitleToolTip(input.getToolTipText());\n        opiRuntimeDelegate.init(site, input);\n", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "length": 813, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "e83d8e6549baa04775753f6402e0715161e3d39fda558112"}
{"input": "", "context": "// License: GPL. For details, see LICENSE file.\npackage org.openstreetmap.josm.gui.widgets;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Toolkit;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.accessibility.Accessible;\nimport javax.swing.ComboBoxEditor;\nimport javax.swing.ComboBoxModel;\nimport javax.swing.DefaultComboBoxModel;\nimport javax.swing.JComboBox;\nimport javax.swing.JList;\nimport javax.swing.plaf.basic.ComboPopup;\nimport javax.swing.text.JTextComponent;\n/**\n * Class overriding each {@link JComboBox} in JOSM to control consistently the number of displayed items at once.<br>\n * This is needed because of the default Java behaviour that may display the top-down list off the screen (see #7917).\n *\n * @since 5429\n */\npublic class JosmComboBox extends JComboBox {\n    /**\n     * The default prototype value used to compute the maximum number of elements to be displayed at once before\n     * displaying a scroll bar\n     */\n    public static final String DEFAULT_PROTOTYPE_DISPLAY_VALUE = \"Prototype display value\";\n    /**\n     * Creates a <code>JosmComboBox</code> with a default data model.\n     * The default data model is an empty list of objects.\n     * Use <code>addItem</code> to add items. By default the first item\n     * in the data model becomes selected.\n     *\n     * @see DefaultComboBoxModel\n     */\n    public JosmComboBox() {\n        this(DEFAULT_PROTOTYPE_DISPLAY_VALUE);\n    }\n    /**\n     * Creates a <code>JosmComboBox</code> with a default data model and\n     * the specified prototype display value.\n     * The default data model is an empty list of objects.\n     * Use <code>addItem</code> to add items. By default the first item\n     * in the data model becomes selected.\n     *\n     * @param prototypeDisplayValue the <code>Object</code> used to compute\n     *      the maximum number of elements to be displayed at once before\n     *      displaying a scroll bar\n     *\n     * @see DefaultComboBoxModel\n     * @since 5450\n     */\n    public JosmComboBox(Object prototypeDisplayValue) {\n        super();\n        init(prototypeDisplayValue);\n    }\n    /**\n     * Creates a <code>JosmComboBox</code> that takes its items from an\n     * existing <code>ComboBoxModel</code>. Since the\n     * <code>ComboBoxModel</code> is provided, a combo box created using\n     * this constructor does not create a default combo box model and\n     * may impact how the insert, remove and add methods behave.\n     *\n     * @param aModel the <code>ComboBoxModel</code> that provides the\n     *      displayed list of items\n     * @see DefaultComboBoxModel\n     */\n    public JosmComboBox(ComboBoxModel aModel) {\n        super(aModel);\n        List<Object> list = new ArrayList<Object>(aModel.getSize());\n        for (int i = 0; i<aModel.getSize(); i++) {\n            list.add(aModel.getElementAt(i));\n        }\n        init(findPrototypeDisplayValue(list));\n    }\n    /**\n     * Creates a <code>JosmComboBox</code> that contains the elements\n     * in the specified array. By default the first item in the array\n     * (and therefore the data model) becomes selected.\n     *\n     * @param items  an array of objects to insert into the combo box\n     * @see DefaultComboBoxModel\n     */\n    public JosmComboBox(Object[] items) {\n        super(items);\n        init(findPrototypeDisplayValue(Arrays.asList(items)));\n    }\n    /**\n     * Finds the prototype display value to use among the given possible candidates.\n     * @param possibleValues The possible candidates that will be iterated.\n     * @return The value that needs the largest display height on screen.\n     * @since 5558\n     */\n    protected Object findPrototypeDisplayValue(Collection<?> possibleValues) {\n        Object result = null;\n        int maxHeight = -1;\n        if (possibleValues != null) {\n            // Remind old prototype to restore it later\n            Object oldPrototype = getPrototypeDisplayValue();\n            // Get internal JList to directly call the renderer\n            JList list = getList();\n            try {\n                // Index to give to renderer\n                int i = 0;\n                for (Object value : possibleValues) {\n                    if (value != null) {\n                        // With a \"classic\" renderer, we could call setPrototypeDisplayValue(value) + getPreferredSize()\n                        // but not with TaggingPreset custom renderer that return a dummy height if index is equal to -1\n                        // So we explicitely call the renderer by simulating a correct index for the current value\n                        Component c = getRenderer().getListCellRendererComponent(list, value, i, true, true);\n                        if (c != null) {\n                            // Get the real preferred size for the current value\n                            Dimension dim = c.getPreferredSize();\n                            if (dim.height > maxHeight) {\n                                // Larger ? This is our new prototype\n                                maxHeight = dim.height;\n                                result = value;\n                            }\n                        }\n                    }\n                    i++;\n                }\n            } finally {\n                // Restore original prototype\n                setPrototypeDisplayValue(oldPrototype);\n            }\n        }\n        return result;\n    }\n    protected final JList getList() {\n        for (int i = 0; i < getUI().getAccessibleChildrenCount(this); i++) {\n            Accessible child = getUI().getAccessibleChild(this, i);\n            if (child instanceof ComboPopup) {\n                return ((ComboPopup)child).getList();\n            }\n        }\n        return null;\n    }\n    protected void init(Object prototype) {\n        if (prototype != null) {\n            setPrototypeDisplayValue(prototype);\n            int screenHeight = Toolkit.getDefaultToolkit().getScreenSize().height;\n            // Compute maximum number of visible items based on the preferred size of the combo box.\n            // This assumes that items have the same height as the combo box, which is not granted by the look and feel\n            int maxsize = (screenHeight/getPreferredSize().height) / 2;\n            // If possible, adjust the maximum number of items with the real height of items\n            // It is not granted this works on every platform (tested OK on Windows)\n            JList list = getList();\n            if (list != null) {\n                if (list.getPrototypeCellValue() != prototype) {\n                    list.setPrototypeCellValue(prototype);\n                }\n                int height = list.getFixedCellHeight();\n                if (height > 0) {\n                    maxsize = (screenHeight/height) / 2;\n                }\n            }\n            setMaximumRowCount(Math.max(getMaximumRowCount(), maxsize));\n        }\n        // Handle text contextual menus for editable comboboxes\n        ContextMenuHandler handler = new ContextMenuHandler();\n        addPropertyChangeListener(\"editable\", handler);\n        addPropertyChangeListener(\"editor\", handler);\n    }\n    protected class ContextMenuHandler extends MouseAdapter implements PropertyChangeListener {\n        private JTextComponent component;\n        private PopupMenuLauncher launcher;\n        @Override public void propertyChange(PropertyChangeEvent evt) {\n            if (evt.getPropertyName().equals(\"editable\")) {\n                if (evt.getNewValue().equals(true)) {\n                    enableMenu();\n                } else {\n                    disableMenu();\n                }\n            } else if (evt.getPropertyName().equals(\"editor\")) {\n                disableMenu();\n                if (isEditable()) {\n                    enableMenu();\n                }\n            }\n        }\n        private void enableMenu() {\n            if (launcher == null) {\n                ComboBoxEditor editor = getEditor();\n                if (editor != null) {\n                    Component editorComponent = editor.getEditorComponent();\n                    if (editorComponent instanceof JTextComponent) {\n                        component = (JTextComponent) editorComponent;\n                        component.addMouseListener(this);\n                        launcher = TextContextualPopupMenu.enableMenuFor(component);\n                    }\n                }\n            }\n        }\n        private void disableMenu() {\n            if (launcher != null) {\n                TextContextualPopupMenu.disableMenuFor(component, launcher);\n                launcher = null;\n                component.removeMouseListener(this);\n                component = null;\n            }\n        }\n        @Override public void mousePressed(MouseEvent e) { processEvent(e); }\n        @Override public void mouseReleased(MouseEvent e) { processEvent(e); }\n        private void processEvent(MouseEvent e) {\n", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "length": 933, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "114d27bc1c5c375830eed8e2d634b216f42f616f439cecb8"}
{"input": "", "context": "import json\nfrom django.core.management import call_command\nfrom django.test import TestCase\nfrom bulk_adding.models import RawPeople\nfrom candidates.tests.uk_examples import UK2015ExamplesMixin\nfrom official_documents.models import OfficialDocument\nfrom parties.tests.factories import PartyFactory\nfrom parties.tests.fixtures import DefaultPartyFixtures\nfrom sopn_parsing.models import ParsedSOPN\nfrom sopn_parsing.helpers import parse_tables\nfrom ynr.apps.sopn_parsing.management.commands.sopn_parsing_parse_tables import (\n    Command as ParseTablesCommand,\n)\nfrom unittest import skipIf\nfrom pandas import Index, Series\nfrom sopn_parsing.tests import should_skip_pdf_tests\nclass TestSOPNHelpers(DefaultPartyFixtures, UK2015ExamplesMixin, TestCase):\n    def setUp(self):\n        PartyFactory(ec_id=\"PP85\", name=\"UK Independence Party (UKIP)\")\n    @skipIf(should_skip_pdf_tests(), \"Required PDF libs not installed\")\n    def test_basic_parsing(self):\n        self.assertFalse(RawPeople.objects.exists())\n        doc = OfficialDocument.objects.create(\n            ballot=self.dulwich_post_ballot,\n            document_type=OfficialDocument.NOMINATION_PAPER,\n            source_url=\"example.com\",\n            relevant_pages=\"all\",\n        )\n        dataframe = json.dumps(\n            {\n                \"0\": {\n                    \"0\": \"Name of \\nCandidate\",\n                    \"1\": \"BRADBURY \\nAndrew John\",\n                    \"2\": \"COLLINS \\nDave\",\n                    \"3\": \"HARVEY \\nPeter John\",\n                    \"4\": \"JENNER \\nMelanie\",\n                },\n                \"1\": {\n                    \"0\": \"Home Address\",\n                    \"1\": \"10 Fowey Close, \\nShoreham by Sea, \\nWest Sussex, \\nBN43 5HE\",\n                    \"2\": \"51 Old Fort Road, \\nShoreham by Sea, \\nBN43 5RL\",\n                    \"3\": \"76 Harbour Way, \\nShoreham by Sea, \\nSussex, \\nBN43 5HH\",\n                    \"4\": \"9 Flag Square, \\nShoreham by Sea, \\nWest Sussex, \\nBN43 5RZ\",\n                },\n                \"2\": {\n                    \"0\": \"Description (if \\nany)\",\n                    \"1\": \"Green Party\",\n                    \"2\": \"Independent\",\n                    \"3\": \"UK Independence \\nParty (UKIP)\",\n                    \"4\": \"Labour Party\",\n                },\n                \"3\": {\n                    \"0\": \"Name of \\nProposer\",\n                    \"1\": \"Tiffin Susan J\",\n                    \"2\": \"Loader Jocelyn C\",\n                    \"3\": \"Hearne James H\",\n                    \"4\": \"O`Connor Lavinia\",\n                },\n                \"4\": {\n                    \"0\": \"Reason \\nwhy no \\nlonger \\nnominated\\n*\",\n                    \"1\": \"\",\n                    \"2\": \"\",\n                    \"3\": \"\",\n                    \"4\": \"\",\n                },\n            }\n        )\n        ParsedSOPN.objects.create(\n            sopn=doc, raw_data=dataframe, status=\"unparsed\"\n        )\n        call_command(\"sopn_parsing_parse_tables\")\n        self.assertEqual(RawPeople.objects.count(), 1)\n        raw_people = RawPeople.objects.get()\n        self.assertEqual(\n            raw_people.data,\n            [\n                {\"name\": \"Andrew John Bradbury\", \"party_id\": \"PP63\"},\n                {\"name\": \"Dave Collins\", \"party_id\": \"ynmp-party:2\"},\n                {\"name\": \"Peter John Harvey\", \"party_id\": \"PP85\"},\n                {\"name\": \"Melanie Jenner\", \"party_id\": \"PP53\"},\n            ],\n        )\nclass TestParseTablesUnitTests(TestCase):\n    def get_two_name_field_cases(self):\n        # this could be updated with more combinations as we come across them\n        return [\n            {\n                \"name_fields\": [\"candidate surname\", \"candidate forename\"],\n                \"row\": {\n                    \"candidate surname\": \"BAGSHAW\",\n                    \"candidate forename\": \"Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\n London \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n                \"ordered_name_fields\": [\n                    \"candidate forename\",\n                    \"candidate surname\",\n                ],\n                \"expected_name\": \"Elaine Sheila Bagshaw\",\n            },\n            {\n                \"name_fields\": [\"surname\", \"other names\"],\n                \"row\": {\n                    \"surname\": \"BAGSHAW\",\n                    \"other names\": \"Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n                \"ordered_name_fields\": [\"other names\", \"surname\"],\n                \"expected_name\": \"Elaine Sheila Bagshaw\",\n            },\n            {\n                \"name_fields\": [\"last name\", \"other names\"],\n                \"row\": {\n                    \"last name\": \"BAGSHAW\",\n                    \"other names\": \"Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n                \"ordered_name_fields\": [\"other names\", \"last name\"],\n                \"expected_name\": \"Elaine Sheila Bagshaw\",\n            },\n            {\n                \"name_fields\": [\"candidate forename\", \"candidate surname\"],\n                \"row\": {\n                    \"candidate forename\": \"Elaine Sheila\",\n                    \"candidate surname\": \"BAGSHAW\",\n                    \"home address\": \"1 Foo Street \\n London \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n                \"ordered_name_fields\": [\n                    \"candidate forename\",\n                    \"candidate surname\",\n                ],\n                \"expected_name\": \"Elaine Sheila Bagshaw\",\n            },\n        ]\n    def get_single_name_field_cases(self):\n        return [\n            {\n                \"name_fields\": [\"name of candidate\"],\n                \"row\": {\n                    \"name of candidate\": \"BAGSHAW Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\n London \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n            },\n            {\n                \"name_fields\": [\"names of candidate\"],\n                \"row\": {\n                    \"names of candidate\": \"BAGSHAW Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n            },\n            {\n                \"name_fields\": [\"candidate name\"],\n                \"row\": {\n                    \"candidate name\": \"BAGSHAW Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n            },\n            {\n                \"name_fields\": [\"surname\"],\n                \"row\": {\n                    \"surname\": \"BAGSHAW Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n            },\n            {\n                \"name_fields\": [\"candidates surname\"],\n                \"row\": {\n                    \"candidates surname\": \"BAGSHAW Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n            },\n            {\n                \"name_fields\": [\"other name\"],\n                \"row\": {\n                    \"other name\": \"BAGSHAW Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n            },\n        ]\n    def test_get_name_single_field(self):\n        for case in self.get_single_name_field_cases():\n            row = Series(case[\"row\"])\n            name_fields = case[\"name_fields\"]\n            with self.subTest(name_fields=name_fields):\n                assert len(case[\"name_fields\"]) == 1\n                name = parse_tables.get_name(row=row, name_fields=name_fields)\n                assert name == \"Elaine Sheila Bagshaw\"\n    def test_get_name_two_fields(self):\n        for case in self.get_two_name_field_cases():\n            row = Series(case[\"row\"])\n            name_fields = case[\"name_fields\"]\n            with self.subTest(name_fields=name_fields):\n                assert len(case[\"name_fields\"]) == 2\n                name = parse_tables.get_name(row=row, name_fields=name_fields)\n                assert name == case[\"expected_name\"]\n    def test_get_name_fields_single(self):\n        for case in self.get_single_name_field_cases():\n            row = Index(case[\"row\"])\n            with self.subTest(row=row):\n                name_fields = parse_tables.get_name_fields(row=row)\n                assert len(name_fields) == 1\n                assert name_fields == case[\"name_fields\"]\n    def test_get_name_fields_two(self):\n        for case in self.get_two_name_field_cases():\n            row = Index(case[\"row\"])\n            with self.subTest(row=row):\n                name_fields = parse_tables.get_name_fields(row=row)\n                assert len(name_fields) == 2\n                assert name_fields == case[\"name_fields\"]\n    def test_get_name_fields_raises_error(self):\n        row = Index({\"foo\": \"Bar\"})\n        with self.assertRaises(ValueError):\n            parse_tables.get_name_fields(row=row)\n    def test_order_name_fields(self):\n        for case in self.get_two_name_field_cases():\n            name_fields = case[\"name_fields\"]\n            with self.subTest(name_fields=name_fields):\n                result = parse_tables.order_name_fields(name_fields)\n                assert result == case[\"ordered_name_fields\"]\n    def test_clean_name_replaces_backticks(self):\n        name = parse_tables.clean_name(\"D`SOUZA\")\n        assert \"`\" not in name\n        assert \"'\" in name\n    def test_clean_name_replaces_newlines(self):\n        name = parse_tables.clean_name(\n            \"A Very Long Name That Splits \\nOver Lines\"\n        )\n        assert \"\\n\" not in name\n    def test_clean_name_capitalized_last_and_titalized(self):\n        name = parse_tables.clean_name(\"SMITH John\")\n        assert name == \"John Smith\"\n    def test_clean_last_names(self):\n        name = parse_tables.clean_last_names([\"MACDONALD\", \"John\"])\n        assert name == \"MacDonald\"\n    def test_clean_name_two_word_surnames(self):\n        names = [\n            (\"EDE COOPER \\nPalmer\", \"Palmer Ede Cooper\"),\n            (\"VAN DULKEN \\nRichard Michael\", \"Richard Michael Van Dulken\"),\n            (\"ARMSTRONG LILLEY \\nLynne\", \"Lynne Armstrong Lilley\"),\n            (\n                \" D`SOUZA  Aaron Anthony Jose \\nHasan\",\n                \"Aaron Anthony Jose Hasan D'Souza\",\n            ),\n            (\"Michael James Collins\", \"Michael James Collins\"),\n            (\"   Michael    James    Collins   \", \"Michael James Collins\"),\n            (\"DAVE Nitesh Pravin\", \"Nitesh Pravin Dave\"),\n            (\"DAVE\\nNitesh Pravin\", \"Nitesh Pravin Dave\"),\n            (\"COOKE Anne-Marie\", \"Anne-Marie Cooke\"),\n            (\"COOKE\\nAnne-Marie\", \"Anne-Marie Cooke\"),\n            (\"BROOKES-\\nDUNCAN\\nKaty\", \"Katy Brookes-Duncan\"),\n            (\"HOUNSOME\\nJohn\", \"John Hounsome\"),\n            (\"O`CONNELL \\nStephen John\", \"Stephen John O'Connell\"),\n", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "length": 919, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "471d9cb59a1c21652129c86006d9d0c5592f5e0867def0cb"}
{"input": "", "context": "\"\"\"\nThis module provides an abstraction for working with XModuleDescriptors\nthat are stored in a database an accessible using their Location as an identifier\n\"\"\"\nimport logging\nimport re\nimport json\nimport datetime\nfrom uuid import uuid4\nfrom pytz import UTC\nfrom collections import namedtuple, defaultdict\nimport collections\nfrom contextlib import contextmanager\nimport functools\nimport threading\nfrom operator import itemgetter\nfrom sortedcontainers import SortedListWithKey\nfrom abc import ABCMeta, abstractmethod\nfrom contracts import contract, new_contract\nfrom xblock.plugin import default_select\nfrom .exceptions import InvalidLocationError, InsufficientSpecificationError\nfrom xmodule.errortracker import make_error_tracker\nfrom xmodule.assetstore import AssetMetadata\nfrom opaque_keys.edx.keys import CourseKey, UsageKey, AssetKey\nfrom opaque_keys.edx.locations import Location  # For import backwards compatibility\nfrom opaque_keys import InvalidKeyError\nfrom opaque_keys.edx.locations import SlashSeparatedCourseKey\nfrom xblock.runtime import Mixologist\nfrom xblock.core import XBlock\nlog = logging.getLogger('edx.modulestore')\nnew_contract('CourseKey', CourseKey)\nnew_contract('AssetKey', AssetKey)\nnew_contract('AssetMetadata', AssetMetadata)\nnew_contract('XBlock', XBlock)\nLIBRARY_ROOT = 'library.xml'\nCOURSE_ROOT = 'course.xml'\nclass ModuleStoreEnum(object):\n    \"\"\"\n    A class to encapsulate common constants that are used with the various modulestores.\n    \"\"\"\n    class Type(object):\n        \"\"\"\n        The various types of modulestores provided\n        \"\"\"\n        split = 'split'\n        mongo = 'mongo'\n        xml = 'xml'\n    class RevisionOption(object):\n        \"\"\"\n        Revision constants to use for Module Store operations\n        Note: These values are passed into store APIs and only used at run time\n        \"\"\"\n        # both DRAFT and PUBLISHED versions are queried, with preference to DRAFT versions\n        draft_preferred = 'rev-opt-draft-preferred'\n        # only DRAFT versions are queried and no PUBLISHED versions\n        draft_only = 'rev-opt-draft-only'\n        # # only PUBLISHED versions are queried and no DRAFT versions\n        published_only = 'rev-opt-published-only'\n        # all revisions are queried\n        all = 'rev-opt-all'\n    class Branch(object):\n        \"\"\"\n        Branch constants to use for stores, such as Mongo, that have only 2 branches: DRAFT and PUBLISHED\n        Note: These values are taken from server configuration settings, so should not be changed without alerting DevOps\n        \"\"\"\n        draft_preferred = 'draft-preferred'\n        published_only = 'published-only'\n    class BranchName(object):\n        \"\"\"\n        Branch constants to use for stores, such as Split, that have named branches\n        \"\"\"\n        draft = 'draft-branch'\n        published = 'published-branch'\n        library = 'library'\n    class UserID(object):\n        \"\"\"\n        Values for user ID defaults\n        \"\"\"\n        # Note: we use negative values here to (try to) not collide\n        # with user identifiers provided by actual user services.\n        # user ID to use for all management commands\n        mgmt_command = -1\n        # user ID to use for primitive commands\n        primitive_command = -2\n        # user ID to use for tests that do not have a django user available\n        test = -3\n    class SortOrder(object):\n        \"\"\"\n        Values for sorting asset metadata.\n        \"\"\"\n        ascending = 1\n        descending = 2\nclass BulkOpsRecord(object):\n    \"\"\"\n    For handling nesting of bulk operations\n    \"\"\"\n    def __init__(self):\n        self._active_count = 0\n    @property\n    def active(self):\n        \"\"\"\n        Return whether this bulk write is active.\n        \"\"\"\n        return self._active_count > 0\n    def nest(self):\n        \"\"\"\n        Record another level of nesting of this bulk write operation\n        \"\"\"\n        self._active_count += 1\n    def unnest(self):\n        \"\"\"\n        Record the completion of a level of nesting of the bulk write operation\n        \"\"\"\n        self._active_count -= 1\n    @property\n    def is_root(self):\n        \"\"\"\n        Return whether the bulk write is at the root (first) level of nesting\n        \"\"\"\n        return self._active_count == 1\nclass ActiveBulkThread(threading.local):\n    \"\"\"\n    Add the expected vars to the thread.\n    \"\"\"\n    def __init__(self, bulk_ops_record_type, **kwargs):\n        super(ActiveBulkThread, self).__init__(**kwargs)\n        self.records = defaultdict(bulk_ops_record_type)\nclass BulkOperationsMixin(object):\n    \"\"\"\n    This implements the :meth:`bulk_operations` modulestore semantics which handles nested invocations\n    In particular, it implements :meth:`_begin_bulk_operation` and\n    :meth:`_end_bulk_operation` to provide the external interface\n    Internally, this mixin records the set of all active bulk operations (keyed on the active course),\n    and only writes those values when :meth:`_end_bulk_operation` is called.\n    If a bulk write operation isn't active, then the changes are immediately written to the underlying\n    mongo_connection.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super(BulkOperationsMixin, self).__init__(*args, **kwargs)\n        self._active_bulk_ops = ActiveBulkThread(self._bulk_ops_record_type)\n    @contextmanager\n    def bulk_operations(self, course_id, emit_signals=True):\n        \"\"\"\n        A context manager for notifying the store of bulk operations. This affects only the current thread.\n        In the case of Mongo, it temporarily disables refreshing the metadata inheritance tree\n        until the bulk operation is completed.\n        \"\"\"\n        try:\n            self._begin_bulk_operation(course_id)\n            yield\n        finally:\n            self._end_bulk_operation(course_id, emit_signals)\n    # the relevant type of bulk_ops_record for the mixin (overriding classes should override\n    # this variable)\n    _bulk_ops_record_type = BulkOpsRecord\n    def _get_bulk_ops_record(self, course_key, ignore_case=False):\n        \"\"\"\n        Return the :class:`.BulkOpsRecord` for this course.\n        \"\"\"\n        if course_key is None:\n            return self._bulk_ops_record_type()\n        # Retrieve the bulk record based on matching org/course/run (possibly ignoring case)\n        if ignore_case:\n            for key, record in self._active_bulk_ops.records.iteritems():\n                # Shortcut: check basic equivalence for cases where org/course/run might be None.\n                if key == course_key or (\n                    key.org.lower() == course_key.org.lower() and\n                    key.course.lower() == course_key.course.lower() and\n                    key.run.lower() == course_key.run.lower()\n                ):\n                    return record\n        return self._active_bulk_ops.records[course_key.for_branch(None)]\n    @property\n    def _active_records(self):\n        \"\"\"\n        Yield all active (CourseLocator, BulkOpsRecord) tuples.\n        \"\"\"\n        for course_key, record in self._active_bulk_ops.records.iteritems():\n            if record.active:\n                yield (course_key, record)\n    def _clear_bulk_ops_record(self, course_key):\n        \"\"\"\n        Clear the record for this course\n        \"\"\"\n        del self._active_bulk_ops.records[course_key.for_branch(None)]\n    def _start_outermost_bulk_operation(self, bulk_ops_record, course_key):\n        \"\"\"\n        The outermost nested bulk_operation call: do the actual begin of the bulk operation.\n        Implementing classes must override this method; otherwise, the bulk operations are a noop\n        \"\"\"\n        pass\n    def _begin_bulk_operation(self, course_key):\n        \"\"\"\n        Begin a bulk operation on course_key.\n        \"\"\"\n        bulk_ops_record = self._get_bulk_ops_record(course_key)\n        # Increment the number of active bulk operations (bulk operations\n        # on the same course can be nested)\n        bulk_ops_record.nest()\n        # If this is the highest level bulk operation, then initialize it\n        if bulk_ops_record.is_root:\n            self._start_outermost_bulk_operation(bulk_ops_record, course_key)\n    def _end_outermost_bulk_operation(self, bulk_ops_record, course_key, emit_signals=True):\n        \"\"\"\n        The outermost nested bulk_operation call: do the actual end of the bulk operation.\n        Implementing classes must override this method; otherwise, the bulk operations are a noop\n        \"\"\"\n        pass\n    def _end_bulk_operation(self, course_key, emit_signals=True):\n        \"\"\"\n        End the active bulk operation on course_key.\n        \"\"\"\n        # If no bulk op is active, return\n        bulk_ops_record = self._get_bulk_ops_record(course_key)\n        if not bulk_ops_record.active:\n            return\n        bulk_ops_record.unnest()\n        # If this wasn't the outermost context, then don't close out the\n        # bulk operation.\n        if bulk_ops_record.active:\n            return\n        self._end_outermost_bulk_operation(bulk_ops_record, course_key, emit_signals)\n        self._clear_bulk_ops_record(course_key)\n    def _is_in_bulk_operation(self, course_key, ignore_case=False):\n        \"\"\"\n        Return whether a bulk operation is active on `course_key`.\n        \"\"\"\n        return self._get_bulk_ops_record(course_key, ignore_case).active\nclass EditInfo(object):\n    \"\"\"\n    Encapsulates the editing info of a block.\n    \"\"\"\n    def __init__(self, **kwargs):\n        self.from_storable(kwargs)\n        # For details, see caching_descriptor_system.py get_subtree_edited_by/on.\n        self._subtree_edited_on = kwargs.get('_subtree_edited_on', None)\n        self._subtree_edited_by = kwargs.get('_subtree_edited_by', None)\n    def to_storable(self):\n        \"\"\"\n        Serialize to a Mongo-storable format.\n        \"\"\"\n        return {\n            'previous_version': self.previous_version,\n            'update_version': self.update_version,\n            'source_version': self.source_version,\n            'edited_on': self.edited_on,\n            'edited_by': self.edited_by,\n            'original_usage': self.original_usage,\n            'original_usage_version': self.original_usage_version,\n        }\n    def from_storable(self, edit_info):\n        \"\"\"\n        De-serialize from Mongo-storable format to an object.\n        \"\"\"\n        # Guid for the structure which previously changed this XBlock.\n        # (Will be the previous value of 'update_version'.)\n        self.previous_version = edit_info.get('previous_version', None)\n        # Guid for the structure where this XBlock got its current field values.\n        # May point to a structure not in this structure's history (e.g., to a draft\n        # branch from which this version was published).\n        self.update_version = edit_info.get('update_version', None)\n        self.source_version = edit_info.get('source_version', None)\n        # Datetime when this XBlock's fields last changed.\n        self.edited_on = edit_info.get('edited_on', None)\n        # User ID which changed this XBlock last.\n        self.edited_by = edit_info.get('edited_by', None)\n        self.original_usage = edit_info.get('original_usage', None)\n        self.original_usage_version = edit_info.get('original_usage_version', None)\n    def __str__(self):\n        return (\"EditInfo(previous_version={0.previous_version}, \"\n                \"update_version={0.update_version}, \"\n                \"source_version={0.source_version}, \"\n                \"edited_on={0.edited_on}, \"\n                \"edited_by={0.edited_by}, \"\n                \"original_usage={0.original_usage}, \"\n                \"original_usage_version={0.original_usage_version}, \"\n                \"_subtree_edited_on={0._subtree_edited_on}, \"\n                \"_subtree_edited_by={0._subtree_edited_by})\").format(self)\nclass BlockData(object):\n    \"\"\"\n    Wrap the block data in an object instead of using a straight Python dictionary.\n    Allows the storing of meta-information about a structure that doesn't persist along with\n    the structure itself.\n    \"\"\"\n    def __init__(self, **kwargs):\n        # Has the definition been loaded?\n        self.definition_loaded = False\n        self.from_storable(kwargs)\n    def to_storable(self):\n        \"\"\"\n        Serialize to a Mongo-storable format.\n        \"\"\"\n        return {\n            'fields': self.fields,\n            'block_type': self.block_type,\n            'definition': self.definition,\n            'defaults': self.defaults,\n            'edit_info': self.edit_info.to_storable()\n        }\n    def from_storable(self, block_data):\n        \"\"\"\n        De-serialize from Mongo-storable format to an object.\n        \"\"\"\n        # Contains the Scope.settings and 'children' field values.\n        # 'children' are stored as a list of (block_type, block_id) pairs.\n        self.fields = block_data.get('fields', {})\n        # XBlock type ID.\n        self.block_type = block_data.get('block_type', None)\n        # DB id of the record containing the content of this XBlock.\n        self.definition = block_data.get('definition', None)\n        # Scope.settings default values copied from a template block (used e.g. when\n        # blocks are copied from a library to a course)\n        self.defaults = block_data.get('defaults', {})\n        # EditInfo object containing all versioning/editing data.\n        self.edit_info = EditInfo(**block_data.get('edit_info', {}))\n    def __str__(self):\n        return (\"BlockData(fields={0.fields}, \"\n                \"block_type={0.block_type}, \"\n                \"definition={0.definition}, \"\n                \"definition_loaded={0.definition_loaded}, \"\n                \"defaults={0.defaults}, \"\n                \"edit_info={0.edit_info})\").format(self)\nnew_contract('BlockData', BlockData)\nclass IncorrectlySortedList(Exception):\n    \"\"\"\n    Thrown when calling find() on a SortedAssetList not sorted by filename.\n    \"\"\"\n    pass\nclass SortedAssetList(SortedListWithKey):\n    \"\"\"\n    List of assets that is sorted based on an asset attribute.\n    \"\"\"\n    def __init__(self, **kwargs):\n        self.filename_sort = False\n        key_func = kwargs.get('key', None)\n        if key_func is None:\n            kwargs['key'] = itemgetter('filename')\n            self.filename_sort = True\n        super(SortedAssetList, self).__init__(**kwargs)\n    @contract(asset_id=AssetKey)\n    def find(self, asset_id):\n        \"\"\"\n        Find the index of a particular asset in the list. This method is only functional for lists\n        sorted by filename. If the list is sorted on any other key, find() raises a\n        Returns: Index of asset, if found. None if not found.\n        \"\"\"\n        # Don't attempt to find an asset by filename in a list that's not sorted by filename.\n        if not self.filename_sort:\n            raise IncorrectlySortedList()\n        # See if this asset already exists by checking the external_filename.\n        # Studio doesn't currently support using multiple course assets with the same filename.\n        # So use the filename as the unique identifier.\n        idx = None\n        idx_left = self.bisect_left({'filename': asset_id.path})\n        idx_right = self.bisect_right({'filename': asset_id.path})\n        if idx_left != idx_right:\n            # Asset was found in the list.\n            idx = idx_left\n        return idx\n    @contract(asset_md=AssetMetadata)\n    def insert_or_update(self, asset_md):\n        \"\"\"\n        Insert asset metadata if asset is not present. Update asset metadata if asset is already present.\n        \"\"\"\n        metadata_to_insert = asset_md.to_storable()\n        asset_idx = self.find(asset_md.asset_id)\n        if asset_idx is None:\n            # Add new metadata sorted into the list.\n            self.add(metadata_to_insert)\n        else:\n            # Replace existing metadata.\n            self[asset_idx] = metadata_to_insert\nclass ModuleStoreAssetBase(object):\n    \"\"\"\n    The methods for accessing assets and their metadata\n    \"\"\"\n    def _find_course_asset(self, asset_key):\n        \"\"\"\n        Returns same as _find_course_assets plus the index to the given asset or None. Does not convert\n        to AssetMetadata; thus, is internal.\n        Arguments:\n            asset_key (AssetKey): what to look for\n        Returns:\n            Tuple of:\n            - AssetMetadata[] for all assets of the given asset_key's type\n            - the index of asset in list (None if asset does not exist)\n        \"\"\"\n        course_assets = self._find_course_assets(asset_key.course_key)\n        all_assets = SortedAssetList(iterable=[])\n        # Assets should be pre-sorted, so add them efficiently without sorting.\n        # extend() will raise a ValueError if the passed-in list is not sorted.\n        all_assets.extend(course_assets.setdefault(asset_key.block_type, []))\n        idx = all_assets.find(asset_key)\n        return course_assets, idx\n    @contract(asset_key='AssetKey')\n    def find_asset_metadata(self, asset_key, **kwargs):\n        \"\"\"\n        Find the metadata for a particular course asset.\n        Arguments:\n            asset_key (AssetKey): key containing original asset filename\n        Returns:\n            asset metadata (AssetMetadata) -or- None if not found\n        \"\"\"\n        course_assets, asset_idx = self._find_course_asset(asset_key)\n        if asset_idx is None:\n            return None\n        mdata = AssetMetadata(asset_key, asset_key.path, **kwargs)\n        all_assets = course_assets[asset_key.asset_type]\n        mdata.from_storable(all_assets[asset_idx])\n        return mdata\n    @contract(\n        course_key='CourseKey', asset_type='None | basestring',\n        start='int | None', maxresults='int | None', sort='tuple(str,(int,>=1,<=2))|None'\n    )\n    def get_all_asset_metadata(self, course_key, asset_type, start=0, maxresults=-1, sort=None, **kwargs):\n        \"\"\"\n        Returns a list of asset metadata for all assets of the given asset_type in the course.\n        Args:\n            course_key (CourseKey): course identifier\n            asset_type (str): the block_type of the assets to return. If None, return assets of all types.\n            start (int): optional - start at this asset number. Zero-based!\n            maxresults (int): optional - return at most this many, -1 means no limit\n            sort (array): optional - None means no sort\n                (sort_by (str), sort_order (str))\n                sort_by - one of 'uploadDate' or 'displayname'\n                sort_order - one of SortOrder.ascending or SortOrder.descending\n        Returns:\n            List of AssetMetadata objects.\n        \"\"\"\n        course_assets = self._find_course_assets(course_key)\n        # Determine the proper sort - with defaults of ('displayname', SortOrder.ascending).\n        key_func = None\n        sort_order = ModuleStoreEnum.SortOrder.ascending\n        if sort:\n", "answers": ["            if sort[0] == 'uploadDate':"], "length": 1853, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "f3072fdefd4e8da2e7e9faf48cffb40392217553f43722a7"}
{"input": "", "context": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nnamespace Mirror\n{\n    public class SyncListString : SyncList<string>\n    {\n        protected override void SerializeItem(NetworkWriter writer, string item) => writer.WriteString(item);\n        protected override string DeserializeItem(NetworkReader reader) => reader.ReadString();\n    }\n    public class SyncListFloat : SyncList<float>\n    {\n        protected override void SerializeItem(NetworkWriter writer, float item) => writer.WriteSingle(item);\n        protected override float DeserializeItem(NetworkReader reader) => reader.ReadSingle();\n    }\n    public class SyncListInt : SyncList<int>\n    {\n        protected override void SerializeItem(NetworkWriter writer, int item) => writer.WritePackedInt32(item);\n        protected override int DeserializeItem(NetworkReader reader) => reader.ReadPackedInt32();\n    }\n    public class SyncListUInt : SyncList<uint>\n    {\n        protected override void SerializeItem(NetworkWriter writer, uint item) => writer.WritePackedUInt32(item);\n        protected override uint DeserializeItem(NetworkReader reader) => reader.ReadPackedUInt32();\n    }\n    public class SyncListBool : SyncList<bool>\n    {\n        protected override void SerializeItem(NetworkWriter writer, bool item) => writer.WriteBoolean(item);\n        protected override bool DeserializeItem(NetworkReader reader) => reader.ReadBoolean();\n    }\n    // Original UNET name is SyncListStruct and original Weaver weavers anything\n    // that contains the name 'SyncListStruct', without considering the name-\n    // space.\n    [EditorBrowsable(EditorBrowsableState.Never), Obsolete(\"Use SyncList<MyStruct> instead\")]\n    public class SyncListSTRUCT<T> : SyncList<T> where T : struct\n    {\n        public T GetItem(int i) => base[i];\n    }\n    [EditorBrowsable(EditorBrowsableState.Never)]\n    public abstract class SyncList<T> : IList<T>, IReadOnlyList<T>, SyncObject\n    {\n        public delegate void SyncListChanged(Operation op, int itemIndex, T oldItem, T newItem);\n        readonly IList<T> objects;\n        readonly IEqualityComparer<T> comparer;\n        public int Count => objects.Count;\n        public bool IsReadOnly { get; private set; }\n        public event SyncListChanged Callback;\n        public enum Operation : byte\n        {\n            OP_ADD,\n            OP_CLEAR,\n            OP_INSERT,\n            [Obsolete(\"Lists now pass OP_REMOVEAT\")]\n            OP_REMOVE,\n            OP_REMOVEAT,\n            OP_SET,\n            [Obsolete(\"Lists now use OP_SET instead of OP_DIRTY\")]\n            OP_DIRTY\n        }\n        struct Change\n        {\n            internal Operation operation;\n            internal int index;\n            internal T item;\n        }\n        readonly List<Change> changes = new List<Change>();\n        // how many changes we need to ignore\n        // this is needed because when we initialize the list,\n        // we might later receive changes that have already been applied\n        // so we need to skip them\n        int changesAhead;\n        protected virtual void SerializeItem(NetworkWriter writer, T item) { }\n        protected virtual T DeserializeItem(NetworkReader reader) => default;\n        protected SyncList(IEqualityComparer<T> comparer = null)\n        {\n            this.comparer = comparer ?? EqualityComparer<T>.Default;\n            objects = new List<T>();\n        }\n        protected SyncList(IList<T> objects, IEqualityComparer<T> comparer = null)\n        {\n            this.comparer = comparer ?? EqualityComparer<T>.Default;\n            this.objects = objects;\n        }\n        public bool IsDirty => changes.Count > 0;\n        // throw away all the changes\n        // this should be called after a successfull sync\n        public void Flush() => changes.Clear();\n        void AddOperation(Operation op, int itemIndex, T oldItem, T newItem)\n        {\n            if (IsReadOnly)\n            {\n                throw new InvalidOperationException(\"Synclists can only be modified at the server\");\n            }\n            Change change = new Change\n            {\n                operation = op,\n                index = itemIndex,\n                item = newItem\n            };\n            changes.Add(change);\n            Callback?.Invoke(op, itemIndex, oldItem, newItem);\n        }\n        public void OnSerializeAll(NetworkWriter writer)\n        {\n            // if init,  write the full list content\n            writer.WritePackedUInt32((uint)objects.Count);\n            for (int i = 0; i < objects.Count; i++)\n            {\n                T obj = objects[i];\n                SerializeItem(writer, obj);\n            }\n            // all changes have been applied already\n            // thus the client will need to skip all the pending changes\n            // or they would be applied again.\n            // So we write how many changes are pending\n            writer.WritePackedUInt32((uint)changes.Count);\n        }\n        public void OnSerializeDelta(NetworkWriter writer)\n        {\n            // write all the queued up changes\n            writer.WritePackedUInt32((uint)changes.Count);\n            for (int i = 0; i < changes.Count; i++)\n            {\n                Change change = changes[i];\n                writer.WriteByte((byte)change.operation);\n                switch (change.operation)\n                {\n                    case Operation.OP_ADD:\n                        SerializeItem(writer, change.item);\n                        break;\n                    case Operation.OP_CLEAR:\n                        break;\n                    case Operation.OP_REMOVEAT:\n                        writer.WritePackedUInt32((uint)change.index);\n                        break;\n                    case Operation.OP_INSERT:\n                    case Operation.OP_SET:\n                        writer.WritePackedUInt32((uint)change.index);\n                        SerializeItem(writer, change.item);\n                        break;\n                }\n            }\n        }\n        public void OnDeserializeAll(NetworkReader reader)\n        {\n            // This list can now only be modified by synchronization\n            IsReadOnly = true;\n            // if init,  write the full list content\n            int count = (int)reader.ReadPackedUInt32();\n            objects.Clear();\n            changes.Clear();\n            for (int i = 0; i < count; i++)\n            {\n                T obj = DeserializeItem(reader);\n                objects.Add(obj);\n            }\n            // We will need to skip all these changes\n            // the next time the list is synchronized\n            // because they have already been applied\n            changesAhead = (int)reader.ReadPackedUInt32();\n        }\n        public void OnDeserializeDelta(NetworkReader reader)\n        {\n            // This list can now only be modified by synchronization\n            IsReadOnly = true;\n            int changesCount = (int)reader.ReadPackedUInt32();\n            for (int i = 0; i < changesCount; i++)\n            {\n                Operation operation = (Operation)reader.ReadByte();\n                // apply the operation only if it is a new change\n                // that we have not applied yet\n                bool apply = changesAhead == 0;\n                int index = 0;\n                T oldItem = default;\n                T newItem = default;\n                switch (operation)\n                {\n                    case Operation.OP_ADD:\n                        newItem = DeserializeItem(reader);\n                        if (apply)\n                        {\n                            index = objects.Count;\n                            objects.Add(newItem);\n                        }\n                        break;\n                    case Operation.OP_CLEAR:\n                        if (apply)\n                        {\n                            objects.Clear();\n                        }\n                        break;\n                    case Operation.OP_INSERT:\n                        index = (int)reader.ReadPackedUInt32();\n                        newItem = DeserializeItem(reader);\n                        if (apply)\n                        {\n                            objects.Insert(index, newItem);\n                        }\n                        break;\n                    case Operation.OP_REMOVEAT:\n                        index = (int)reader.ReadPackedUInt32();\n                        if (apply)\n                        {\n                            oldItem = objects[index];\n                            objects.RemoveAt(index);\n                        }\n                        break;\n                    case Operation.OP_SET:\n                        index = (int)reader.ReadPackedUInt32();\n                        newItem = DeserializeItem(reader);\n                        if (apply)\n                        {\n                            oldItem = objects[index];\n                            objects[index] = newItem;\n                        }\n                        break;\n                }\n                if (apply)\n                {\n                    Callback?.Invoke(operation, index, oldItem, newItem);\n                }\n                // we just skipped this change\n                else\n                {\n                    changesAhead--;\n                }\n            }\n        }\n        public void Add(T item)\n        {\n            objects.Add(item);\n            AddOperation(Operation.OP_ADD, objects.Count - 1, default, item);\n        }\n        public void Clear()\n        {\n            objects.Clear();\n            AddOperation(Operation.OP_CLEAR, 0, default, default);\n        }\n        public bool Contains(T item) => IndexOf(item) >= 0;\n        public void CopyTo(T[] array, int index) => objects.CopyTo(array, index);\n        public int IndexOf(T item)\n        {\n            for (int i = 0; i < objects.Count; ++i)\n                if (comparer.Equals(item, objects[i]))\n                    return i;\n            return -1;\n        }\n        public int FindIndex(Predicate<T> match)\n        {\n            for (int i = 0; i < objects.Count; ++i)\n                if (match(objects[i]))\n                    return i;\n            return -1;\n        }\n        public void Insert(int index, T item)\n        {\n            objects.Insert(index, item);\n            AddOperation(Operation.OP_INSERT, index, default, item);\n        }\n        public bool Remove(T item)\n        {\n            int index = IndexOf(item);\n            bool result = index >= 0;\n            if (result)\n            {\n                RemoveAt(index);\n            }\n            return result;\n        }\n        public void RemoveAt(int index)\n        {\n            T oldItem = objects[index];\n            objects.RemoveAt(index);\n            AddOperation(Operation.OP_REMOVEAT, index, oldItem, default);\n        }\n        public T this[int i]\n        {\n            get => objects[i];\n            set\n            {\n                if (!comparer.Equals(objects[i], value))\n                {\n                    T oldItem = objects[i];\n                    objects[i] = value;\n                    AddOperation(Operation.OP_SET, i, oldItem, value);\n                }\n            }\n        }\n        public Enumerator GetEnumerator() => new Enumerator(this);\n        IEnumerator<T> IEnumerable<T>.GetEnumerator() => new Enumerator(this);\n        IEnumerator IEnumerable.GetEnumerator() => new Enumerator(this);\n        // default Enumerator allocates. we need a custom struct Enumerator to\n        // not allocate on the heap.\n        // (System.Collections.Generic.List<T> source code does the same)\n        //\n        // benchmark:\n        //   uMMORPG with 800 monsters, Skills.GetHealthBonus() which runs a\n        //   foreach on skills SyncList:\n        //      before: 81.2KB GC per frame\n        //      after:     0KB GC per frame\n        // => this is extremely important for MMO scale networking\n        public struct Enumerator : IEnumerator<T>\n        {\n            readonly SyncList<T> list;\n            int index;\n            public T Current { get; private set; }\n            public Enumerator(SyncList<T> list)\n            {\n                this.list = list;\n", "answers": ["                index = -1;"], "length": 1053, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "c3473f752e488d5fcb55350bb590bda3a33c09fd69d308d1"}
{"input": "", "context": "# unionrepo.py - repository class for viewing union of repository changesets\n#\n# Derived from bundlerepo.py\n# Copyright 2006, 2007 Benoit Boissinot <bboissin@gmail.com>\n# Copyright 2013 Unity Technologies, Mads Kiilerich <madski@unity3d.com>\n#\n# This software may be used and distributed according to the terms of the\n# GNU General Public License version 2 or any later version.\n\"\"\"Repository class for \"in-memory pull\" of one local repository to another,\nallowing operations like diff and log with revsets.\n\"\"\"\nfrom node import nullid\nfrom i18n import _\nimport os\nimport util, mdiff, cmdutil, scmutil\nimport localrepo, changelog, manifest, filelog, revlog\nclass unionrevlog(revlog.revlog):\n    def __init__(self, opener, indexfile, revlog2, linkmapper):\n        # How it works:\n        # To retrieve a revision, we just need to know the node id so we can\n        # look it up in revlog2.\n        #\n        # To differentiate a rev in the second revlog from a rev in the revlog,\n        # we check revision against repotiprev.\n        opener = scmutil.readonlyvfs(opener)\n        revlog.revlog.__init__(self, opener, indexfile)\n        self.revlog2 = revlog2\n        n = len(self)\n        self.repotiprev = n - 1\n        self.bundlerevs = set() # used by 'bundle()' revset expression\n        for rev2 in self.revlog2:\n            rev = self.revlog2.index[rev2]\n            # rev numbers - in revlog2, very different from self.rev\n            _start, _csize, _rsize, _base, linkrev, p1rev, p2rev, node = rev\n            if linkmapper is None: # link is to same revlog\n                assert linkrev == rev2 # we never link back\n                link = n\n            else: # rev must be mapped from repo2 cl to unified cl by linkmapper\n                link = linkmapper(linkrev)\n            if node in self.nodemap:\n                # this happens for the common revlog revisions\n                self.bundlerevs.add(self.nodemap[node])\n                continue\n            p1node = self.revlog2.node(p1rev)\n            p2node = self.revlog2.node(p2rev)\n            e = (None, None, None, None,\n                 link, self.rev(p1node), self.rev(p2node), node)\n            self.index.insert(-1, e)\n            self.nodemap[node] = n\n            self.bundlerevs.add(n)\n            n += 1\n    def _chunk(self, rev):\n        if rev <= self.repotiprev:\n            return revlog.revlog._chunk(self, rev)\n        return self.revlog2._chunk(self.node(rev))\n    def revdiff(self, rev1, rev2):\n        \"\"\"return or calculate a delta between two revisions\"\"\"\n        if rev1 > self.repotiprev and rev2 > self.repotiprev:\n            return self.revlog2.revdiff(\n                self.revlog2.rev(self.node(rev1)),\n                self.revlog2.rev(self.node(rev2)))\n        elif rev1 <= self.repotiprev and rev2 <= self.repotiprev:\n            return self.baserevdiff(rev1, rev2)\n        return mdiff.textdiff(self.revision(self.node(rev1)),\n                              self.revision(self.node(rev2)))\n    def revision(self, nodeorrev):\n        \"\"\"return an uncompressed revision of a given node or revision\n        number.\n        \"\"\"\n        if isinstance(nodeorrev, int):\n            rev = nodeorrev\n            node = self.node(rev)\n        else:\n            node = nodeorrev\n            rev = self.rev(node)\n        if node == nullid:\n            return \"\"\n        if rev > self.repotiprev:\n            text = self.revlog2.revision(node)\n            self._cache = (node, rev, text)\n        else:\n            text = self.baserevision(rev)\n            # already cached\n        return text\n    def baserevision(self, nodeorrev):\n        # Revlog subclasses may override 'revision' method to modify format of\n        # content retrieved from revlog. To use unionrevlog with such class one\n        # needs to override 'baserevision' and make more specific call here.\n        return revlog.revlog.revision(self, nodeorrev)\n    def baserevdiff(self, rev1, rev2):\n        # Exists for the same purpose as baserevision.\n        return revlog.revlog.revdiff(self, rev1, rev2)\n    def addrevision(self, text, transaction, link, p1=None, p2=None, d=None):\n        raise NotImplementedError\n    def addgroup(self, revs, linkmapper, transaction):\n        raise NotImplementedError\n    def strip(self, rev, minlink):\n        raise NotImplementedError\n    def checksize(self):\n        raise NotImplementedError\nclass unionchangelog(unionrevlog, changelog.changelog):\n    def __init__(self, opener, opener2):\n        changelog.changelog.__init__(self, opener)\n        linkmapper = None\n        changelog2 = changelog.changelog(opener2)\n        unionrevlog.__init__(self, opener, self.indexfile, changelog2,\n                             linkmapper)\n    def baserevision(self, nodeorrev):\n        # Although changelog doesn't override 'revision' method, some extensions\n        # may replace this class with another that does. Same story with\n        # manifest and filelog classes.\n        return changelog.changelog.revision(self, nodeorrev)\n    def baserevdiff(self, rev1, rev2):\n        return changelog.changelog.revdiff(self, rev1, rev2)\nclass unionmanifest(unionrevlog, manifest.manifest):\n    def __init__(self, opener, opener2, linkmapper):\n        manifest.manifest.__init__(self, opener)\n        manifest2 = manifest.manifest(opener2)\n        unionrevlog.__init__(self, opener, self.indexfile, manifest2,\n                             linkmapper)\n    def baserevision(self, nodeorrev):\n        return manifest.manifest.revision(self, nodeorrev)\n    def baserevdiff(self, rev1, rev2):\n        return manifest.manifest.revdiff(self, rev1, rev2)\nclass unionfilelog(unionrevlog, filelog.filelog):\n    def __init__(self, opener, path, opener2, linkmapper, repo):\n        filelog.filelog.__init__(self, opener, path)\n        filelog2 = filelog.filelog(opener2, path)\n        unionrevlog.__init__(self, opener, self.indexfile, filelog2,\n                             linkmapper)\n        self._repo = repo\n    def baserevision(self, nodeorrev):\n        return filelog.filelog.revision(self, nodeorrev)\n    def baserevdiff(self, rev1, rev2):\n        return filelog.filelog.revdiff(self, rev1, rev2)\n    def _file(self, f):\n        self._repo.file(f)\nclass unionpeer(localrepo.localpeer):\n    def canpush(self):\n        return False\nclass unionrepository(localrepo.localrepository):\n    def __init__(self, ui, path, path2):\n        localrepo.localrepository.__init__(self, ui, path)\n        self.ui.setconfig('phases', 'publish', False, 'unionrepo')\n        self._url = 'union:%s+%s' % (util.expandpath(path),\n                                     util.expandpath(path2))\n        self.repo2 = localrepo.localrepository(ui, path2)\n    @localrepo.unfilteredpropertycache\n    def changelog(self):\n        return unionchangelog(self.sopener, self.repo2.sopener)\n    def _clrev(self, rev2):\n        \"\"\"map from repo2 changelog rev to temporary rev in self.changelog\"\"\"\n        node = self.repo2.changelog.node(rev2)\n        return self.changelog.rev(node)\n    @localrepo.unfilteredpropertycache\n    def manifest(self):\n        return unionmanifest(self.sopener, self.repo2.sopener,\n                             self._clrev)\n    def url(self):\n        return self._url\n    def file(self, f):\n        return unionfilelog(self.sopener, f, self.repo2.sopener,\n                            self._clrev, self)\n    def close(self):\n        self.repo2.close()\n    def cancopy(self):\n        return False\n    def peer(self):\n        return unionpeer(self)\n    def getcwd(self):\n        return os.getcwd() # always outside the repo\ndef instance(ui, path, create):\n    if create:\n        raise util.Abort(_('cannot create new union repository'))\n    parentpath = ui.config(\"bundle\", \"mainreporoot\", \"\")\n    if not parentpath:\n        # try to find the correct path to the working directory repo\n        parentpath = cmdutil.findrepo(os.getcwd())\n        if parentpath is None:\n            parentpath = ''\n    if parentpath:\n        # Try to make the full path relative so we get a nice, short URL.\n        # In particular, we don't want temp dir names in test outputs.\n        cwd = os.getcwd()\n        if parentpath == cwd:\n            parentpath = ''\n        else:\n            cwd = os.path.join(cwd,'')\n            if parentpath.startswith(cwd):\n", "answers": ["                parentpath = parentpath[len(cwd):]"], "length": 795, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "ccc7e6259fdffd163ebd0d5779c4ced9624d7b3d215079cf"}
{"input": "", "context": "#\n# Copyright (c) 2015-2018 Canonical, Ltd.\n#\n# This file is part of Talisker\n# (see http://github.com/canonical-ols/talisker).\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\nfrom __future__ import division\nfrom __future__ import absolute_import\nfrom builtins import *  # noqa\nfrom collections import OrderedDict\nfrom contextlib import contextmanager\nimport logging\nimport logging.handlers\nimport numbers\nimport sys\nimport time\nfrom talisker.context import Context, ContextId\nfrom talisker.util import (\n    get_errno_fields,\n    module_cache,\n    module_dict,\n)\n__all__ = [\n    'configure',\n    'configure_test_logging',\n    'logging_context',\n]\nlogging_globals = module_dict()\ndef set_global_extra(extra):\n    if 'extra' not in logging_globals:\n        logging_globals['extra'] = OrderedDict()\n    logging_globals['extra'].update(extra)\ndef reset_logging():\n    \"\"\"Reset logging config\"\"\"\n    # avoid unclosed file resource warning\n    for handler in logging.getLogger().handlers:\n        if getattr(handler, '_debug_handler', False):\n            handler.stream.close()\n    logging.getLogger().handlers = []\nNOISY_LOGS = {\n    'requests': logging.WARNING,\n}\nclass LoggingContextProxy():\n    def __getattr__(self, attr):\n        return getattr(Context.logging, attr)\n    @contextmanager\n    def __call__(self, extra=None, **kwargs):\n        with Context.logging(extra, **kwargs):\n            yield\nlogging_context = LoggingContextProxy()\n# backwards compat aliases\ndef set_logging_context(*args, **kwargs):\n    Context.logging.push(*args, **kwargs)\nextra_logging = logging_context\ndef add_talisker_handler(level, handler, formatter=None):\n    if formatter is None:\n        formatter = StructuredFormatter()\n    handler.setFormatter(formatter)\n    handler.setLevel(level)\n    handler._talisker_handler = True\n    logging.getLogger().addHandler(handler)\ndef set_logger_class():\n    logging.setLoggerClass(StructuredLogger)\n    logging.getLogger().setLevel(logging.NOTSET)\n@module_cache\ndef get_talisker_handler():\n    handler = logging.StreamHandler()\n    handler._root_talisker = True\n    return handler\ndef configure(config):  # pragma: no cover\n    \"\"\"Configure default logging setup for our services.\n    This is basically:\n     - log to stderr\n     - output hybrid logfmt structured format\n     - maybe configure debug logging\n    \"\"\"\n    # avoid duplicate logging\n    if logging_globals.get('configured'):\n        return\n    set_logger_class()\n    formatter = StructuredFormatter()\n    if config.colour:\n        formatter = ColouredFormatter(style=config.colour)\n    # always INFO to stderr\n    add_talisker_handler(logging.INFO, get_talisker_handler(), formatter)\n    configure_warnings(config.devel)\n    supress_noisy_logs()\n    # defer this until logging has been set up\n    logger = logging.getLogger(__name__)\n    config_extra = {k: v.value for k, v in config.metadata().items() if v.raw}\n    if config_extra:\n        logger.info('talisker configured', extra=config_extra)\n    if config.ERRORS:\n        errors = {name: str(err) for name, err in config.ERRORS.items()}\n        logger.error('configuration errors', extra=errors)\n    if config.debuglog is not None:\n        if can_write_to_file(config.debuglog):\n            handler = logging.handlers.TimedRotatingFileHandler(\n                config.debuglog,\n                when='D',\n                interval=1,\n                backupCount=1,\n                delay=True,\n                utc=True,\n            )\n            handler._debug_handler = True\n            add_talisker_handler(logging.DEBUG, handler)\n            logger.info('enabling debug log', extra={'path': config.debuglog})\n        else:\n            logger.info('could not enable debug log, could not write to path',\n                        extra={'path': config.debuglog})\n    # sentry integration\n    import talisker.sentry  # defer to avoid logging setup\n    if talisker.sentry.enabled:\n        sentry_handler = talisker.sentry.get_log_handler()\n        add_talisker_handler(logging.ERROR, sentry_handler)\n    logging_globals['configured'] = True\ndef can_write_to_file(path):\n    try:\n        open(path, 'a').close()\n    except Exception:\n        return False\n    else:\n        return True\ndef supress_noisy_logs():\n    \"\"\"Set some custom log levels on some sub logs\"\"\"\n    for name, level in NOISY_LOGS.items():\n        logger = logging.getLogger(name)\n        logger.setLevel(level)\ndef configure_warnings(enable):\n    # never propogate warnings to root\n    warnings = logging.getLogger('py.warnings')\n    warnings.propagate = False\n    if enable:\n        warnings.addHandler(logging.StreamHandler())\ndef configure_test_logging(handler=None):\n    \"\"\"Add a handler (defaults to NullHandler) to root logger.\n    Prevents unconfigured logging from erroring, and swallows all logging,\n    which is usually what you want for unit tests.  Unit test fixtures can\n    still add their own loggers to assert against log messages if needed.\n    \"\"\"\n    set_logger_class()\n    if handler is None:\n        handler = logging.NullHandler()\n    add_talisker_handler(logging.NOTSET, handler)\n    configure_warnings(True)\ndef enable_debug_log_stderr():\n    \"\"\"Enables debug logging on stderr\n    Checks for devel mode.\"\"\"\n    logger = logging.getLogger(__name__)\n    logger.warning('setting stderr logging to DEBUG')\n    get_talisker_handler().setLevel(logging.DEBUG)\nclass StructuredLogger(logging.Logger):\n    \"\"\"A logger that handles passing 'extra' arguments to all logging calls.\n    Supports 3 sources of extra structured data:\n    1) global extra, designed to be set once at process start/\n    2) context extra, designed to be set per request or job, can cleaned up\n       afterwards.\n    3) per call extra, passed by the log call, as per normal logging\n       e.g. log.info('...', extra={...})\n    \"\"\"\n    # sadly, we must subclass and override, rather that use the new\n    # setLogRecordFactory() in 3.2+, as that does not pass the extra args\n    # through. Also, we need to support python 2.\n    def makeRecord(self, name, level, fn, lno, msg, args, exc_info,\n                   func=None, extra=None, sinfo=None):\n        # at this point we have 3 possible sources of extra kwargs\n        # - log call: extra\n        # - context : local_context.flat\n        # - global  : logging_globals['extra']\n        #\n        # In case of collisions, we append _ to the end of the name, so no data\n        # is lost. The global ones are more important, so take priority - the\n        # user supplied keys are the ones renamed if needed\n        # Also, the ordering is specific - more specific tags first\n        trailer = None\n        structured = OrderedDict()\n        try:\n            if ContextId.get(None) is None:\n                context_extra = {}\n                request_id = None\n            else:\n                context_extra = logging_context.flat\n                request_id = Context.request_id\n            global_extra = logging_globals.get('extra', {})\n            if extra:\n                trailer = extra.pop('trailer', None)\n                for k, v in extra.items():\n                    if k in context_extra or k in global_extra:\n                        k = k + '_'\n                    structured[k] = v\n            for k, v in context_extra.items():\n                if k in global_extra:\n                    k = k + '_'\n                structured[k] = v\n            structured.update(global_extra)\n            if request_id:\n                structured['request_id'] = request_id\n        except Exception:\n            # ensure unexpected error doesn't break logging completely\n            structured = extra\n        kwargs = dict(func=func, extra=structured, sinfo=sinfo)\n        # python 2 doesn't support sinfo parameter\n", "answers": ["        if sys.version_info[0] == 2:"], "length": 897, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "17f8060bda3eea4e6b94e07ca7850afadc2a42895f40a08a"}
{"input": "", "context": "using System;\nusing System.Collections;\nusing Server;\nusing Server.Gumps;\nusing Server.Mobiles;\nusing Server.Targeting;\nusing Server.ContextMenus;\nusing Server.Regions;\nusing Server.Network;\nusing System.Collections.Generic;\nusing Server.Items;\nusing Server.Targets;\nnamespace Server.Items\n{\n\tpublic class SpellweavingTrainer : Item\n\t{\n\t\tpublic override string DefaultName\n\t\t{\n\t\t\tget { return \"Spellweaving Trainer [100GP]\"; }\n\t\t}\n\t\t[Constructable]\n\t\tpublic SpellweavingTrainer() : base( 0x1F1C )\n\t\t{\n\t\t\tWeight = 1.0;\n            Movable = false;\n\t\t}\n\t\tpublic SpellweavingTrainer( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n        public override void OnDoubleClick(Mobile m)\n        {\n            if (m.Skills.Spellweaving.Base <= 19.9)\n            {\n                if (m.Mana >= 4)\n                {\n                    if (m.SkillsTotal >= m.SkillsCap)\n                    {\n                        int toGain = 1;\n                        Skills skills = m.Skills;\n                        for (int i = 0; i < skills.Length; ++i)\n                        {\n                            Skill toLower = skills[i];\n                            if (toLower != m.Skills.Spellweaving && toLower.Lock == SkillLock.Down && toLower.BaseFixedPoint >= toGain)\n                            {\n                                toLower.BaseFixedPoint -= toGain;\n                                break;\n                            }\n                        }\n                    }\n                    if (m.SkillsTotal < m.SkillsCap)\n                    {\n                        if (m.Backpack.ConsumeTotal(typeof(Gold), 100))\n                        {\n                            if (m.Skills.Spellweaving.Base < m.Skills.Spellweaving.Cap)\n                            {\n                                m.Skills.Spellweaving.BaseFixedPoint += 1;\n                                m.Mana -= 4;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You need 100gp in your pack to use this stone.\");\n                    }\n                    else\n                    {\n                        m.SendMessage(\"you have reached your total skills cap. Set a skill to lower to continue using me\");\n                    }\n                }\n            }\n            if (m.Skills.Spellweaving.Base <= 39.9 && m.Skills.Spellweaving.Base >= 20)\n            {\n                if (m.Mana >= 5)\n                {\n                    if (m.SkillsTotal >= m.SkillsCap)\n                    {\n                        int toGain = 1;\n                        Skills skills = m.Skills;\n                        for (int i = 0; i < skills.Length; ++i)\n                        {\n                            Skill toLower = skills[i];\n                            if (toLower != m.Skills.Spellweaving && toLower.Lock == SkillLock.Down && toLower.BaseFixedPoint >= toGain)\n                            {\n                                toLower.BaseFixedPoint -= toGain;\n                                break;\n                            }\n                        }\n                    }\n                    if (m.SkillsTotal < m.SkillsCap)\n                    {\n                        if (m.Backpack.ConsumeTotal(typeof(Gold), 100))\n                        {\n                            if (m.Skills.Spellweaving.Base < m.Skills.Spellweaving.Cap)\n                            {\n                                m.Skills.Spellweaving.BaseFixedPoint += 1;\n                                m.Mana -= 5;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You need 100gp in your pack to use this stone.\");\n                    }\n                    else\n                    {\n                        m.SendMessage(\"you have reached your total skills cap. Set a skill to lower to continue using me\");\n                    }\n                }\n                else\n                {\n                    m.SendMessage(\"You need 5 mana to use this item at your skill level.\");\n                }\n            }\n            if (m.Skills.Spellweaving.Base <= 59.9 && m.Skills.Spellweaving.Base >= 40)\n            {\n                if (m.Mana >= 10)\n                {\n                    if (m.SkillsTotal >= m.SkillsCap)\n                    {\n                        int toGain = 1;\n                        Skills skills = m.Skills;\n                        for (int i = 0; i < skills.Length; ++i)\n                        {\n                            Skill toLower = skills[i];\n                            if (toLower != m.Skills.Spellweaving && toLower.Lock == SkillLock.Down && toLower.BaseFixedPoint >= toGain)\n                            {\n                                toLower.BaseFixedPoint -= toGain;\n                                break;\n                            }\n                        }\n                    }\n                    if (m.SkillsTotal < m.SkillsCap)\n                    {\n                        if (m.Backpack.ConsumeTotal(typeof(Gold), 100))\n                        {\n                            if (m.Skills.Spellweaving.Base < m.Skills.Spellweaving.Cap)\n                            {\n                                m.Skills.Spellweaving.BaseFixedPoint += 1;\n                                m.Mana -= 10;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You need 100gp in your pack to use this stone.\");\n                    }\n                    else\n                    {\n                        m.SendMessage(\"you have reached your total skills cap. Set a skill to lower to continue using me\");\n                    }\n                }\n                else\n                {\n                    m.SendMessage(\"You need 10 mana to use this item at your skill level.\");\n                }\n            }\n            if (m.Skills.Spellweaving.Base <= 79.9 && m.Skills.Spellweaving.Base >= 60)\n            {\n                if (m.Mana >= 20)\n                {\n                    if (m.SkillsTotal >= m.SkillsCap)\n                    {\n                        int toGain = 1;\n                        Skills skills = m.Skills;\n                        for (int i = 0; i < skills.Length; ++i)\n                        {\n                            Skill toLower = skills[i];\n                            if (toLower != m.Skills.Spellweaving && toLower.Lock == SkillLock.Down && toLower.BaseFixedPoint >= toGain)\n                            {\n                                toLower.BaseFixedPoint -= toGain;\n                                break;\n                            }\n                        }\n                    }\n                    if (m.SkillsTotal < m.SkillsCap)\n                    {\n                        if (m.Backpack.ConsumeTotal(typeof(Gold), 100))\n                        {\n                            if (m.Skills.Spellweaving.Base < m.Skills.Spellweaving.Cap)\n                            {\n                                m.Skills.Spellweaving.BaseFixedPoint += 1;\n", "answers": ["                                m.Mana -= 20;"], "length": 569, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "4896ad1befbd50e27e04ff67bc71f68ed6b7d9842a7f38ef"}
{"input": "", "context": "\"\"\"\nStep definitions for working with Django models.\n\"\"\"\nfrom datetime import datetime\nimport re\nfrom django.core.management import call_command\nfrom django.core.management.color import no_style\nfrom django.db import connection\nfrom django.db.models.loading import get_models\nfrom django.utils.functional import curry\nfrom functools import wraps\nfrom lettuce import step\nSTEP_PREFIX = r'(?:Given|And|Then|When) '\ndef _models_generator():\n    \"\"\"\n    Build a hash of model verbose names to models\n    \"\"\"\n    for model in get_models():\n        yield (unicode(model._meta.verbose_name), model)\n        yield (unicode(model._meta.verbose_name_plural), model)\nMODELS = dict(_models_generator())\n_WRITE_MODEL = {}\ndef creates_models(model):\n    \"\"\"\n    Register a model-specific creation function. Wrapper around writes_models\n    that removes the field parameter (always a create operation).\n    \"\"\"\n    def decorated(func):\n        @wraps(func)\n        @writes_models(model)\n        def wrapped(data, field):\n            if field:\n                raise NotImplementedError(\n                    \"Must use the writes_models decorator to update models\")\n            return func(data)\n    return decorated\ndef writes_models(model):\n    \"\"\"\n    Register a model-specific create and update function.\n    \"\"\"\n    def decorated(func):\n        \"\"\"\n        Decorator for the creation function.\n        \"\"\"\n        _WRITE_MODEL[model] = func\n        return func\n    return decorated\n_MODEL_EXISTS = {}\ndef checks_existence(model):\n    \"\"\"\n    Register a model-specific existence check function.\n    \"\"\"\n    def decorated(func):\n        \"\"\"\n        Decorator for the existence function.\n        \"\"\"\n        _MODEL_EXISTS[model] = func\n        return func\n    return decorated\ndef hash_data(hash_):\n    \"\"\"\n    Convert strings from a Lettuce hash to appropriate types\n    \"\"\"\n    res = {}\n    for key, value in hash_.items():\n        if type(value) in (str, unicode):\n            if value == \"true\":\n                value = True\n            elif value == \"false\":\n                value = False\n            elif value == \"null\":\n                value = None\n            elif value.isdigit() and not re.match(\"^0[0-9]+\", value):\n                value = int(value)\n            elif re.match(r'^\\d{4}-\\d{2}-\\d{2}$', value):\n                value = datetime.strptime(value, \"%Y-%m-%d\")\n        res[key] = value\n    return res\ndef hashes_data(step):\n    \"\"\"\n    Convert strings from step hashes to appropriate types\n    \"\"\"\n    return [hash_data(hash_) for hash_ in step.hashes]\ndef get_model(model):\n    \"\"\"\n    Convert a model's verbose name to the model class. This allows us to\n    use the models verbose name in steps.\n    \"\"\"\n    name = model.lower()\n    model = MODELS.get(model, None)\n    assert model, \"Could not locate model by name '%s'\" % name\n    return model\ndef reset_sequence(model):\n    \"\"\"\n    Reset the ID sequence for a model.\n    \"\"\"\n    sql = connection.ops.sequence_reset_sql(no_style(), [model])\n    for cmd in sql:\n        connection.cursor().execute(cmd)\ndef create_models(model, data):\n    \"\"\"\n    Create models for each data hash. Wrapper around write_models.\n    \"\"\"\n    return write_models(model, data, None)\ndef write_models(model, data, field=None):\n    \"\"\"\n    Create or update models for each data hash. If field is present, it is the\n    field that is used to get the existing models out of the database to update\n    them; otherwise, new models are created.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    written = []\n    for hash_ in data:\n        if field:\n            if field not in hash_:\n                raise KeyError((\"The \\\"%s\\\" field is required for all update \"\n                                \"operations\") % field)\n            model_kwargs = {field: hash_[field]}\n            model_obj = model.objects.get(**model_kwargs)\n            for to_set, val in hash_.items():\n                setattr(model_obj, to_set, val)\n            model_obj.save()\n        else:\n            model_obj = model.objects.create(**hash_)\n        written.append(model_obj)\n    reset_sequence(model)\n    return written\ndef _dump_model(model, attrs=None):\n    \"\"\"\n    Dump the model fields for debugging.\n    \"\"\"\n    for field in model._meta.fields:\n        print '%s=%s,' % (field.name, str(getattr(model, field.name))),\n    if attrs is not None:\n        for attr in attrs:\n            print '%s=%s,' % (attr, str(getattr(model, attr))),\n    for field in model._meta.many_to_many:\n        vals = getattr(model, field.name)\n        print '%s=%s (%i),' % (\n            field.name,\n            ', '.join(map(str, vals.all())),\n            vals.count()),\n    print\ndef models_exist(model, data, queryset=None):\n    \"\"\"\n    Check whether the models defined by @data exist in the @queryset.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    if not queryset:\n        queryset = model.objects\n    failed = 0\n    try:\n        for hash_ in data:\n            fields = {}\n            extra_attrs = {}\n", "answers": ["            for k, v in hash_.iteritems():"], "length": 546, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "7ae84ee3dc227ab3ad301914db5aa12c8e0ecb2042da37aa"}
{"input": "", "context": "## This file is part of Invenio.\n## Copyright (C) 2009, 2010, 2011 CERN.\n##\n## Invenio is free software; you can redistribute it and/or\n## modify it under the terms of the GNU General Public License as\n## published by the Free Software Foundation; either version 2 of the\n## License, or (at your option) any later version.\n##\n## Invenio is distributed in the hope that it will be useful, but\n## WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n## General Public License for more details.\n##\n## You should have received a copy of the GNU General Public License\n## along with Invenio; if not, write to the Free Software Foundation, Inc.,\n## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n# pylint: disable=C0103\n\"\"\"Invenio BibEdit Administrator Interface.\"\"\"\n__revision__ = \"$Id\"\n__lastupdated__ = \"\"\"$Date: 2008/08/12 09:26:46 $\"\"\"\nimport cProfile\nimport cStringIO\nimport pstats\nfrom invenio.jsonutils import json, json_unicode_to_utf8\nfrom invenio.access_control_engine import acc_authorize_action\nfrom invenio.bibedit_engine import (perform_request_ajax,\n                                    perform_request_init,\n                                    perform_request_newticket,\n                                    perform_request_compare,\n                                    perform_request_init_template_interface,\n                                    perform_request_ajax_template_interface)\nfrom invenio.bibedit_utils import user_can_edit_record_collection\nfrom invenio.config import CFG_SITE_LANG, CFG_SITE_SECURE_URL, CFG_SITE_RECORD\nfrom invenio.messages import gettext_set_language\nfrom invenio.urlutils import redirect_to_url\nfrom invenio.webinterface_handler import WebInterfaceDirectory, wash_urlargd\nfrom invenio.webpage import page\nfrom invenio.webuser import collect_user_info, getUid, page_not_authorized\nnavtrail = (' <a class=\"navtrail\" href=\\\"%s/help/admin\\\">Admin Area</a> '\n            ) % CFG_SITE_SECURE_URL\nnavtrail_bibedit = (' <a class=\"navtrail\" href=\\\"%s/help/admin\\\">Admin Area</a> ' + \\\n                    ' &gt; <a class=\"navtrail\" href=\\\"%s/%s/edit\\\">Record Editor</a>'\n            ) % (CFG_SITE_SECURE_URL, CFG_SITE_SECURE_URL, CFG_SITE_RECORD)\ndef wrap_json_req_profiler(func):\n    def json_req_profiler(self, req, form):\n        if \"ajaxProfile\" in form:\n            profiler = cProfile.Profile()\n            return_val = profiler.runcall(func, self, req, form)\n            results = cStringIO.StringIO()\n            stats = pstats.Stats(profiler, stream=results)\n            stats.sort_stats('cumulative')\n            stats.print_stats(100)\n            json_in = json.loads(str(form['jsondata']))\n            # Deunicode all strings (Invenio doesn't have unicode\n            # support).\n            json_in = json_unicode_to_utf8(json_in)\n            json_data = json.loads(return_val)\n            json_data.update({\"profilerStats\": \"<pre style='overflow: scroll'>\" + json_in['requestType'] + results.getvalue() + \"</pre>\"})\n            return json.dumps(json_data)\n        else:\n            return func(self, req, form)\n    return json_req_profiler\nclass WebInterfaceEditPages(WebInterfaceDirectory):\n    \"\"\"Defines the set of /edit pages.\"\"\"\n    _exports = ['', 'new_ticket', 'compare_revisions', 'templates']\n    def __init__(self, recid=None):\n        \"\"\"Initialize.\"\"\"\n        self.recid = recid\n    @wrap_json_req_profiler\n    def index(self, req, form):\n        \"\"\"Handle all BibEdit requests.\n        The responsibilities of this functions is:\n        * JSON decoding and encoding.\n        * Redirection, if necessary.\n        * Authorization.\n        * Calling the appropriate function from the engine.\n        \"\"\"\n        uid = getUid(req)\n        argd = wash_urlargd(form, {'ln': (str, CFG_SITE_LANG)})\n        # If it is an Ajax request, extract any JSON data.\n        ajax_request, recid = False, None\n        if form.has_key('jsondata'):\n            json_data = json.loads(str(form['jsondata']))\n            # Deunicode all strings (Invenio doesn't have unicode\n            # support).\n            json_data = json_unicode_to_utf8(json_data)\n            ajax_request = True\n            if json_data.has_key('recID'):\n                recid = json_data['recID']\n            json_response = {'resultCode': 0, 'ID': json_data['ID']}\n        # Authorization.\n        user_info = collect_user_info(req)\n        if user_info['email'] == 'guest':\n            # User is not logged in.\n            if not ajax_request:\n                # Do not display the introductory recID selection box to guest\n                # users (as it used to be with v0.99.0):\n                dummy_auth_code, auth_message = acc_authorize_action(req,\n                                                               'runbibedit')\n                referer = '/edit/'\n                if self.recid:\n                    referer = '/%s/%s/edit/' % (CFG_SITE_RECORD, self.recid)\n                return page_not_authorized(req=req, referer=referer,\n                                           text=auth_message, navtrail=navtrail)\n            else:\n                # Session has most likely timed out.\n                json_response.update({'resultCode': 100})\n                return json.dumps(json_response)\n        elif self.recid:\n            # Handle redirects from /record/<record id>/edit\n            # generic URL.\n            redirect_to_url(req, '%s/%s/edit/#state=edit&recid=%s&recrev=%s' % (\n                    CFG_SITE_SECURE_URL, CFG_SITE_RECORD, self.recid, \"\"))\n        elif recid is not None:\n            json_response.update({'recID': recid})\n            if json_data['requestType'] == \"getRecord\":\n                # Authorize access to record.\n                if not user_can_edit_record_collection(req, recid):\n                    json_response.update({'resultCode': 101})\n                    return json.dumps(json_response)\n        # Handle request.\n        if not ajax_request:\n            # Show BibEdit start page.\n            body, errors, warnings = perform_request_init(uid, argd['ln'], req, __lastupdated__)\n            title = 'Record Editor'\n            return page(title       = title,\n                        body        = body,\n                        errors      = errors,\n                        warnings    = warnings,\n                        uid         = uid,\n                        language    = argd['ln'],\n                        navtrail    = navtrail,\n                        lastupdated = __lastupdated__,\n                        req         = req,\n                        body_css_classes = ['bibedit'])\n        else:\n            # Handle AJAX request.\n            json_response.update(perform_request_ajax(req, recid, uid,\n                                                      json_data))\n            return json.dumps(json_response)\n    def compare_revisions(self, req, form):\n        \"\"\"Handle the compare revisions request\"\"\"\n        argd = wash_urlargd(form, { \\\n                'ln': (str, CFG_SITE_LANG), \\\n                'rev1' : (str, ''), \\\n                'rev2' : (str, ''), \\\n                'recid': (int, 0)})\n        ln = argd['ln']\n        uid = getUid(req)\n        _ = gettext_set_language(ln)\n        # Checking if currently logged user has permission to perform this request\n        auth_code, auth_message = acc_authorize_action(req, 'runbibedit')\n        if auth_code != 0:\n            return page_not_authorized(req=req, referer=\"/edit\",\n                                       text=auth_message, navtrail=navtrail)\n        recid = argd['recid']\n        rev1 = argd['rev1']\n        rev2 = argd['rev2']\n        ln = argd['ln']\n        body, errors, warnings = perform_request_compare(ln, recid, rev1, rev2)\n        return page(title = _(\"Comparing two record revisions\"),\n                    body =  body,\n                    errors = errors,\n                    warnings = warnings,\n                    uid = uid,\n                    language = ln,\n                    navtrail    = navtrail,\n                    lastupdated = __lastupdated__,\n                    req         = req,\n                    body_css_classes = ['bibedit'])\n    def new_ticket(self, req, form):\n        \"\"\"handle a edit/new_ticket request\"\"\"\n        argd = wash_urlargd(form, {'ln': (str, CFG_SITE_LANG), 'recid': (int, 0)})\n        ln = argd['ln']\n        _ = gettext_set_language(ln)\n        auth_code, auth_message = acc_authorize_action(req, 'runbibedit')\n        if auth_code != 0:\n", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "length": 756, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "04e295ceba60a64b82588ffaa2a96d5c35e2e469380e6944"}
{"input": "", "context": "# Copyright (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>\n# Copyright 2015 Abhijit Menon-Sen <ams@2ndQuadrant.com>\n# Copyright 2017 Toshio Kuratomi <tkuratomi@ansible.com>\n# Copyright (c) 2017 Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\nDOCUMENTATION = '''\n    connection: ssh\n    short_description: connect via ssh client binary\n    description:\n        - This connection plugin allows ansible to communicate to the target machines via normal ssh command line.\n        - Ansible does not expose a channel to allow communication between the user and the ssh process to accept\n          a password manually to decrypt an ssh key when using this connection plugin (which is the default). The\n          use of ``ssh-agent`` is highly recommended.\n    author: ansible (@core)\n    version_added: historical\n    options:\n      host:\n          description: Hostname/ip to connect to.\n          default: inventory_hostname\n          vars:\n               - name: ansible_host\n               - name: ansible_ssh_host\n      host_key_checking:\n          description: Determines if ssh should check host keys\n          type: boolean\n          ini:\n              - section: defaults\n                key: 'host_key_checking'\n              - section: ssh_connection\n                key: 'host_key_checking'\n                version_added: '2.5'\n          env:\n              - name: ANSIBLE_HOST_KEY_CHECKING\n              - name: ANSIBLE_SSH_HOST_KEY_CHECKING\n                version_added: '2.5'\n          vars:\n              - name: ansible_host_key_checking\n                version_added: '2.5'\n              - name: ansible_ssh_host_key_checking\n                version_added: '2.5'\n      password:\n          description: Authentication password for the C(remote_user). Can be supplied as CLI option.\n          vars:\n              - name: ansible_password\n              - name: ansible_ssh_pass\n              - name: ansible_ssh_password\n      ssh_args:\n          description: Arguments to pass to all ssh cli tools\n          default: '-C -o ControlMaster=auto -o ControlPersist=60s'\n          ini:\n              - section: 'ssh_connection'\n                key: 'ssh_args'\n          env:\n              - name: ANSIBLE_SSH_ARGS\n          vars:\n              - name: ansible_ssh_args\n                version_added: '2.7'\n      ssh_common_args:\n          description: Common extra args for all ssh CLI tools\n          ini:\n              - section: 'ssh_connection'\n                key: 'ssh_common_args'\n                version_added: '2.7'\n          env:\n              - name: ANSIBLE_SSH_COMMON_ARGS\n                version_added: '2.7'\n          vars:\n              - name: ansible_ssh_common_args\n      ssh_executable:\n          default: ssh\n          description:\n            - This defines the location of the ssh binary. It defaults to ``ssh`` which will use the first ssh binary available in $PATH.\n            - This option is usually not required, it might be useful when access to system ssh is restricted,\n              or when using ssh wrappers to connect to remote hosts.\n          env: [{name: ANSIBLE_SSH_EXECUTABLE}]\n          ini:\n          - {key: ssh_executable, section: ssh_connection}\n          #const: ANSIBLE_SSH_EXECUTABLE\n          version_added: \"2.2\"\n          vars:\n              - name: ansible_ssh_executable\n                version_added: '2.7'\n      sftp_executable:\n          default: sftp\n          description:\n            - This defines the location of the sftp binary. It defaults to ``sftp`` which will use the first binary available in $PATH.\n          env: [{name: ANSIBLE_SFTP_EXECUTABLE}]\n          ini:\n          - {key: sftp_executable, section: ssh_connection}\n          version_added: \"2.6\"\n          vars:\n              - name: ansible_sftp_executable\n                version_added: '2.7'\n      scp_executable:\n          default: scp\n          description:\n            - This defines the location of the scp binary. It defaults to `scp` which will use the first binary available in $PATH.\n          env: [{name: ANSIBLE_SCP_EXECUTABLE}]\n          ini:\n          - {key: scp_executable, section: ssh_connection}\n          version_added: \"2.6\"\n          vars:\n              - name: ansible_scp_executable\n                version_added: '2.7'\n      scp_extra_args:\n          description: Extra exclusive to the ``scp`` CLI\n          vars:\n              - name: ansible_scp_extra_args\n          env:\n            - name: ANSIBLE_SCP_EXTRA_ARGS\n              version_added: '2.7'\n          ini:\n            - key: scp_extra_args\n              section: ssh_connection\n              version_added: '2.7'\n      sftp_extra_args:\n          description: Extra exclusive to the ``sftp`` CLI\n          vars:\n              - name: ansible_sftp_extra_args\n          env:\n            - name: ANSIBLE_SFTP_EXTRA_ARGS\n              version_added: '2.7'\n          ini:\n            - key: sftp_extra_args\n              section: ssh_connection\n              version_added: '2.7'\n      ssh_extra_args:\n          description: Extra exclusive to the 'ssh' CLI\n          vars:\n              - name: ansible_ssh_extra_args\n          env:\n            - name: ANSIBLE_SSH_EXTRA_ARGS\n              version_added: '2.7'\n          ini:\n            - key: ssh_extra_args\n              section: ssh_connection\n              version_added: '2.7'\n      retries:\n          # constant: ANSIBLE_SSH_RETRIES\n          description: Number of attempts to connect.\n          default: 3\n          type: integer\n          env:\n            - name: ANSIBLE_SSH_RETRIES\n          ini:\n            - section: connection\n              key: retries\n            - section: ssh_connection\n              key: retries\n          vars:\n            - name: ansible_ssh_retries\n              version_added: '2.7'\n      port:\n          description: Remote port to connect to.\n          type: int\n          default: 22\n          ini:\n            - section: defaults\n              key: remote_port\n          env:\n            - name: ANSIBLE_REMOTE_PORT\n          vars:\n            - name: ansible_port\n            - name: ansible_ssh_port\n      remote_user:\n          description:\n              - User name with which to login to the remote server, normally set by the remote_user keyword.\n              - If no user is supplied, Ansible will let the ssh client binary choose the user as it normally\n          ini:\n            - section: defaults\n              key: remote_user\n          env:\n            - name: ANSIBLE_REMOTE_USER\n          vars:\n            - name: ansible_user\n            - name: ansible_ssh_user\n      pipelining:\n          default: ANSIBLE_PIPELINING\n          description:\n            - Pipelining reduces the number of SSH operations required to execute a module on the remote server,\n              by executing many Ansible modules without actual file transfer.\n            - This can result in a very significant performance improvement when enabled.\n            - However this conflicts with privilege escalation (become).\n              For example, when using sudo operations you must first disable 'requiretty' in the sudoers file for the target hosts,\n              which is why this feature is disabled by default.\n          env:\n            - name: ANSIBLE_PIPELINING\n            #- name: ANSIBLE_SSH_PIPELINING\n          ini:\n            - section: defaults\n              key: pipelining\n            #- section: ssh_connection\n            #  key: pipelining\n          type: boolean\n          vars:\n            - name: ansible_pipelining\n            - name: ansible_ssh_pipelining\n      private_key_file:\n          description:\n              - Path to private key file to use for authentication\n          ini:\n            - section: defaults\n              key: private_key_file\n          env:\n            - name: ANSIBLE_PRIVATE_KEY_FILE\n          vars:\n            - name: ansible_private_key_file\n            - name: ansible_ssh_private_key_file\n      control_path:\n        description:\n          - This is the location to save ssh's ControlPath sockets, it uses ssh's variable substitution.\n          - Since 2.3, if null, ansible will generate a unique hash. Use `%(directory)s` to indicate where to use the control dir path setting.\n        env:\n          - name: ANSIBLE_SSH_CONTROL_PATH\n        ini:\n          - key: control_path\n            section: ssh_connection\n        vars:\n          - name: ansible_control_path\n            version_added: '2.7'\n      control_path_dir:\n        default: ~/.ansible/cp\n        description:\n          - This sets the directory to use for ssh control path if the control path setting is null.\n          - Also, provides the `%(directory)s` variable for the control path setting.\n        env:\n          - name: ANSIBLE_SSH_CONTROL_PATH_DIR\n        ini:\n          - section: ssh_connection\n            key: control_path_dir\n        vars:\n          - name: ansible_control_path_dir\n            version_added: '2.7'\n      sftp_batch_mode:\n        default: 'yes'\n        description: 'TODO: write it'\n        env: [{name: ANSIBLE_SFTP_BATCH_MODE}]\n        ini:\n        - {key: sftp_batch_mode, section: ssh_connection}\n        type: bool\n        vars:\n          - name: ansible_sftp_batch_mode\n            version_added: '2.7'\n      scp_if_ssh:\n        default: smart\n        description:\n          - \"Prefered method to use when transfering files over ssh\"\n          - When set to smart, Ansible will try them until one succeeds or they all fail\n          - If set to True, it will force 'scp', if False it will use 'sftp'\n        env: [{name: ANSIBLE_SCP_IF_SSH}]\n        ini:\n        - {key: scp_if_ssh, section: ssh_connection}\n        vars:\n          - name: ansible_scp_if_ssh\n            version_added: '2.7'\n      use_tty:\n        version_added: '2.5'\n        default: 'yes'\n        description: add -tt to ssh commands to force tty allocation\n        env: [{name: ANSIBLE_SSH_USETTY}]\n        ini:\n", "answers": ["        - {key: usetty, section: ssh_connection}"], "length": 968, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "372cbea864b598e206205434a3c9016ac96913fb9e29fd56"}
{"input": "", "context": "//#############################################################################\n//#                                                                           #\n//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #\n//#                                                                           #\n//#  This program is free software: you can redistribute it and/or modify     #\n//#  it under the terms of the GNU Affero General Public License as           #\n//#  published by the Free Software Foundation, either version 3 of the       #\n//#  License, or (at your option) any later version.                          # \n//#                                                                           #\n//#  This program is distributed in the hope that it will be useful,          #\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\n//#  GNU Affero General Public License for more details.                      #\n//#                                                                           #\n//#  You should have received a copy of the GNU Affero General Public License #\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\n//#                                                                           #\n//#############################################################################\n//#EOH\n// Template ver. 1.0.2 - Last modified on 08/03/2004 10:42 by Marius Mihalec\npackage ims.dto.client;\npublic final class Wardlist\n{\n\tprivate WardlistFilter lastGetFilter = null;\n\tprivate final String serviceName = \"WARDLIST\";\n\tprivate boolean listInProgress = false;\n\t/**\n\t * Represents the Data Transfer Object Connection used for this client object.\n\t */ \n\tpublic ims.dto.Connection Connection = null;\n\t/**\n\t * Represents the filter used by the current Data Transfer Object.\n\t */ \n\tpublic WardlistFilter Filter = new WardlistFilter();\t\t\t\n\t/**\n\t * Contains the data records for the current Data Transfer Object\n\t */ \n\tpublic WardlistCollection DataCollection = new WardlistCollection();\n\t/**\n\t * Creates a new Wardlist Data Transfer Object.\n\t */ \n\tpublic Wardlist(ims.dto.Connection connection) throws ims.dto.Exception\n\t{\t\n\t\tif(connection == null)\n\t\t\tthrow new ims.dto.Exception(\"Invalid Data Transfer Object Connection\");\n\t\tthis.Connection = connection;\n\t}\n\t/**\n\t * Creates a new copy of the current Data Transfer Object\n\t */\n\tpublic Wardlist cloneObject() throws ims.dto.Exception\n\t{\n\t\tWardlist cloneObject = new Wardlist(Connection);\n\t\t\t\n\t\tif(Filter != null)\n\t\t\tcloneObject.Filter = Filter.cloneObject();\t\t\t\n\t\t\t\t\t\n\t\tif(lastGetFilter != null)\n\t\t\tcloneObject.lastGetFilter = lastGetFilter.cloneObject();\n\t\telse\n\t\t\tcloneObject.lastGetFilter = null;\n\t\t\t\t\n\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tint index = cloneObject.DataCollection.add();\n\t\t\t\n\t\t\tcloneObject.DataCollection.get(index).Rsno = DataCollection.get(x).Rsno;\n\t\t\tcloneObject.DataCollection.get(index).Hpcd = DataCollection.get(x).Hpcd;\n\t\t\tcloneObject.DataCollection.get(index).Site = DataCollection.get(x).Site;\n\t\t\tcloneObject.DataCollection.get(index).Name = DataCollection.get(x).Name;\n\t\t\tcloneObject.DataCollection.get(index).Code = DataCollection.get(x).Code;\n\t\t\tcloneObject.DataCollection.get(index).Stat = DataCollection.get(x).Stat;\n\t\t\tcloneObject.DataCollection.get(index).At01 = DataCollection.get(x).At01;\n\t\t\tcloneObject.DataCollection.get(index).Maxno = DataCollection.get(x).Maxno;\n\t\t\tcloneObject.DataCollection.get(index).Allstat = DataCollection.get(x).Allstat;\n\t\t\tcloneObject.DataCollection.get(index).__orderby = DataCollection.get(x).__orderby;\n\t\t\t\t\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\treturn cloneObject;\n\t}\t\t\n\t/**\n\t * Returns the number of records using the specified filter. This method always returns a non null result. The ID field holds the count result (when greater or equal to zero) or the error number (when less than zero).\n\t */\n\tpublic ims.dto.Result count()\n\t{\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.Count\");\n\t\t\t\n\t\tint result = Connection.count(serviceName, encodeNASFilter());\n\t\tif(result >= 0)\n\t\t\treturn new ims.dto.Result(result, \"No error detected. The count result is held in the ID field\", \"DTO.Client.Wardlist.Count\");\n\t\t\t\t\n\t\treturn Connection.getLastError();\t\t\t\t\n\t}\t\t\n\t/**\n\t * Returns the list of records using the specified filter. Use maxRecords to limit the number of records returned. If the result returned is not null an error occured.\n\t */\n\tpublic ims.dto.Result list(int maxRecords)\n\t{\n\t\tif(maxRecords <= 0)\n\t\t\treturn list();\t\t\n\t\t\t\t\n\t\treturn list(false, maxRecords);\n\t}\t\n\t/**\n\t* Returns the list of records using the specified filter. If the result returned is not null an error occured.\n\t*/\n\tpublic ims.dto.Result list()\n\t{\t\n\t\treturn list(true, 0);\n\t}\t\t\t\t\n\t/**\n\t* Returns one record using the specified filter. If the result returned is not null an error occured.\n\t*/\n\tpublic ims.dto.Result get()\n\t{\t\n\t\tDataCollection.clear();\n\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.Get\");\n\t\t\t\n\t\tims.dto.Result result = Connection.get(serviceName, encodeNASFilter());\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\t\n\t\tlastGetFilter = Filter.cloneObject();\t\t\t\t\t\t\n\t\tdecodeNASMessageWithRepeatingGroups();\t\t\n\t\t\t\n\t\treturn null;\n\t}\t\n\t/**\n\t* Returns one record using the specified filter. If the result returned is not null an error occured.\n\t*/\n\tpublic ims.dto.Result getLast()\n\t{\t\n\t\tDataCollection.clear();\n\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.Get\");\n\t\t\t\n\t\tims.dto.Result result = Connection.getLast(serviceName, encodeNASFilter());\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\t\n\t\tlastGetFilter = Filter.cloneObject();\t\t\t\t\t\t\n\t\tdecodeNASMessageWithRepeatingGroups();\t\n\t\t\t\n\t\treturn null;\n\t}\t\t\t\t\t\n\t/**\n\t* Performs data validation prior to update. If the result returned is not null an error occured.\n\t*/\n\tpublic ims.dto.Result getForUpdate()\n\t{\t\t\t\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.GetForUpdate\");\n\t\t\t\t\t\t\t\n\t\tif(lastGetFilter == null)\t\n\t\t\treturn new ims.dto.Result(\"Last get method failed or not called\", \"DTO.Client.Wardlist.GetForUpdate\");\n\t\t\t\n\t\tims.dto.Result result = Connection.getForUpdate(serviceName, encodeNASFilter(lastGetFilter));\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\t\n\t\tif(Connection.countResponseItems(Connection.getValueAt(6)) == 0)\n\t\t\treturn null;\n\t\t\t\n\t\tDataCollection.clear();\t\n\t\tdecodeNASMessageWithRepeatingGroups();\n\t\t\t\t\n\t\treturn new ims.dto.Result(\"The data was changed by another user\", \"DTO.Client.Wardlist.GetForUpdate\");\n\t}\t\t\n\t/**\n\t* Inserts a new record. This method always returns a non null result. The ID field holds the Unique ID for the inserted record (when greater than zero) or the error number (when less than zero). If the ID is zero, the record was inserted but the server did not returned the Unique ID.\n\t*/\n\tpublic ims.dto.Result insert()\n\t{\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.Insert\");\n\t\t\t\t\t\n\t\tif(DataCollection.count() == 0)\n\t\t\treturn new ims.dto.Result(\"No data to insert\", \"DTO.Client.Wardlist.Insert\");\n\t\t\t\n\t\tif(DataCollection.count() > 1)\n\t\t\treturn new ims.dto.Result(\"Multiple object insert not allowed\", \"DTO.Client.Wardlist.Insert\");\n\t\t\t\n\t\tims.dto.Result result = Connection.insert(serviceName, encodeNASMessage());\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\t\t\t\n\t\tint recordID = 0;\n\t\t\t\t\t\n\t\ttry\n\t\t{\n\t\t\trecordID = new Integer(Connection.getValueAt(2)).intValue();\n\t\t}\n\t\tcatch(NumberFormatException ex)\n\t\t{\n\t\t\treturn new ims.dto.Result(\"Invalid record ID returned\", \"DTO.Client.Wardlist.Insert\");\n\t\t}\n\t\t\n\t\treturn new ims.dto.Result(recordID, \"No error. The ID of the new record is in the ID field\", \"DTO.Client.Wardlist.Insert\");\n\t}\n\t/**\n\t * Executes a specific action. This method always returns a non null result.\n\t */\n\tpublic ims.dto.Result executeAction(String action)\n\t{\n\t\tif(action.length() == 0)\n\t\t\treturn new ims.dto.Result(\"Invalid action name\", \"DTO.Client.Wardlist.ExecuteAction\");\n\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.ExecuteAction\");\n\t\t\n\t\tif(DataCollection.count() == 0)\n\t\t\treturn new ims.dto.Result(\"Data container is empty\", \"DTO.Client.Wardlist.ExecuteAction\");\n\t\t\t\n\t\tif(DataCollection.count() > 1)\n\t\t\treturn new ims.dto.Result(\"Multiple objects are not allowed\", \"DTO.Client.Wardlist.ExecuteAction\");\n\t\t\t\n\t\tims.dto.Result result = Connection.executeAction(serviceName, encodeNASMessage(), action);\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\t\n\t\ttry\n\t\t{\n\t\t\treturn new ims.dto.Result(new Integer(Connection.getValueAt(2)).intValue(), \"No error\", \"DTO.Client.Wardlist.ExecuteAction\");\t\n\t\t}\n\t\tcatch(NumberFormatException ex)\n\t\t{\n\t\t\treturn new ims.dto.Result(\"Invalid server response\", \"DTO.Client.Wardlist.ExecuteAction\");\n\t\t}\n\t}\n\t/**\n\t * Transfers a record. If the result returned is not null an error occured.\n\t */\n\tpublic ims.dto.Result transferData(String action)\n\t{\n\t\tif(action.length() == 0)\n\t\t\treturn new ims.dto.Result(\"Invalid action name\", \"DTO.Client.Wardlist.TransferData\");\n\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.TransferData\");\n\t\t\n\t\tif(DataCollection.count() == 0)\n\t\t\treturn new ims.dto.Result(\"No data to transfer\", \"DTO.Client.Wardlist.TransferData\");\n\t\t\t\n\t\tif(DataCollection.count() > 1)\n\t\t\treturn new ims.dto.Result(\"Multiple objects not allowed\", \"DTO.Client.Wardlist.TransferData\");\n\t\t\t\n\t\tims.dto.Result result = Connection.transferData(serviceName, encodeNASMessage(), action.toUpperCase());\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\n\t\tDataCollection.clear();\n\t\tdecodeNASMessageWithRepeatingGroups();\t\n\t\t\n\t\treturn null;\n\t}\n\t/**\n\t * Updates a record. If the result returned is not null an error occured.\n\t */\n\tpublic ims.dto.Result update()\n\t{\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.Update\");\n\t\t\t\t\n\t\tif(DataCollection.count() == 0)\n\t\t\treturn new ims.dto.Result(\"No data to update\", \"DTO.Client.Wardlist.Update\");\t\n\t\t\t\n\t\tif(DataCollection.count() > 1)\n\t\t\treturn new ims.dto.Result(\"Multiple object update not allowed\", \"DTO.Client.Wardlist.Update\");\n\t\t\t\n\t\treturn Connection.update(serviceName, encodeNASMessage());\n\t}\n\t\t\t\n\tprivate ims.dto.Result stopList()\n\t{\n\t\tif(!listInProgress)\n\t\t\treturn new ims.dto.Result(\"No active list running\", \"DTO.Client.Wardlist.StopList\");\n\t\t\t\t\n\t\tlistInProgress = false;\t\t\t\t\n\t\treturn null;\n\t}\n\t\n\tprivate ims.dto.Result nextList()\n\t{\t\t\t\t\n\t\tims.dto.Result result = Connection.nextList(serviceName);\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\t\t\t\n\t\tdecodeNASMessage();\t\t\n\t\treturn null;\n\t}\n\t\t\n\tprivate boolean canContinueToList(boolean loadAllRecords, int maxRecords)\n\t{\n\t\tif(!listInProgress)\n\t\t\treturn false;\t\t\t\t\n\t\tif(loadAllRecords)\n\t\t\treturn true;\t\t\t\n\t\treturn DataCollection.count() < maxRecords;\n\t}\n\t\n\tprivate ims.dto.Result list(boolean loadAllRecords, int maxRecords)\n\t{\t\n\t\tDataCollection.clear();\n\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.List\");\n\t\t\t\t\t\t\t\n\t\tlistInProgress = true;\t\n\t\tims.dto.Result result = Connection.list(serviceName, encodeNASFilter());\n\t\tif(result != null)\n\t\t{\n\t\t\tlistInProgress = false;\n\t\t\tif(result.getId() == -2) // NAS list empty\n\t\t\t\treturn null;\n\t\t\treturn result;\n\t\t}\n\t\t\t\t\t\n\t\tif(decodeNASMessage() == 0)\n\t\t{\n\t\t\tlistInProgress = false;\n\t\t\treturn null;\n\t\t}\n\t\t\t\t\t\t\n\t\tims.dto.Result execResult = null;\n\t\twhile(execResult == null && canContinueToList(loadAllRecords, maxRecords))\n\t\t\texecResult = nextList();\n\t\t\t\t\t\t\n\t\tif(execResult != null)\n\t\t{\n\t\t\tif(execResult.getId() != -3) \n\t\t\t{\n\t\t\t\tlistInProgress = false;\n\t\t\t\treturn execResult;\n\t\t\t}\n\t\t}\n\t\telse // NAS next list empty\n\t\t{\n\t\t\tlistInProgress = false;\n\t\t\treturn null;\n\t\t}\t\t\t\t\n\t\t\t\t\t\n\t\tif(!loadAllRecords || !listInProgress)\n\t\t{\n\t\t\tlistInProgress = false;\n\t\t\treturn Connection.stopList(serviceName);\n\t\t}\n\t\t\n\t\tlistInProgress = false;\n\t\treturn null;\n\t}\t\n\tprivate String encodeNASFilter()\n\t{\n\t\treturn encodeNASFilter(Filter);\n\t}\n\tprivate String encodeNASFilter(WardlistFilter filter)\n\t{\n\t\tif(filter == null)\n\t\t\treturn \"\";\n\t\t\t\n\t\tString filterString = \"\";\n\t\t\n\t\tif(Filter.Rsno != null && filter.Rsno.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"RSNO\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Rsno;\n\t\t}\n\t\t\n\t\tif(Filter.Hpcd != null && filter.Hpcd.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"HPCD\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Hpcd;\n\t\t}\n\t\t\n\t\tif(Filter.Site != null && filter.Site.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"SITE\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Site;\n\t\t}\n\t\t\n\t\tif(Filter.Name != null && filter.Name.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"NAME\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Name;\n\t\t}\n\t\t\n\t\tif(Filter.Code != null && filter.Code.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"CODE\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Code;\n\t\t}\n\t\t\n\t\tif(Filter.Stat != null && filter.Stat.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"STAT\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Stat;\n\t\t}\n\t\t\n\t\tif(Filter.At01 != null && filter.At01.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"AT01\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.At01;\n\t\t}\n\t\t\n\t\tif(Filter.Maxno != null && filter.Maxno.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"MAXNO\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Maxno;\n\t\t}\n\t\t\n\t\tif(Filter.Allstat != null && filter.Allstat.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"ALLSTAT\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Allstat;\n\t\t}\n\t\t\n\t\tif(Filter.__orderby != null && filter.__orderby.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"__ORDERBY\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.__orderby;\n\t\t}\n\t\t\n\t\treturn filterString;\t\n\t}\n\t\n\tprivate String encodeNASMessage()\n\t{\n\t\tString dataString = \"\";\n\t\tif(DataCollection.count() == 0)\n\t\t\treturn dataString;\n\t\t\t\n", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "length": 1476, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "926cb6e2ce08c9cc6aed3080e1deed10bb9e7c63376255df"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n##\n## This file is part of Harvesting Kit.\n## Copyright (C) 2013, 2014, 2015 CERN.\n##\n## Harvesting Kit is free software; you can redistribute it and/or\n## modify it under the terms of the GNU General Public License as\n## published by the Free Software Foundation; either version 2 of the\n## License, or (at your option) any later version.\n##\n## Harvesting Kit is distributed in the hope that it will be useful, but\n## WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n## General Public License for more details.\n##\n## You should have received a copy of the GNU General Public License\n## along with Harvesting Kit; if not, write to the Free Software Foundation, Inc.,\n## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\nimport re\nimport sys\nimport time\nfrom os import pardir\nfrom os.path import (join,\n                     dirname,\n                     basename)\ntry:\n    from invenio.errorlib import register_exception\nexcept ImportError:\n    register_exception = lambda a=1, b=2: True\nfrom harvestingkit.minidom_utils import (get_value_in_tag,\n                                         xml_to_text)\nfrom harvestingkit.utils import (format_arxiv_id,\n                                 add_nations_field)\nfrom harvestingkit.bibrecord import (\n    record_add_field,\n    create_record,\n    record_xml_output,\n)\nfrom xml.dom.minidom import parse\nclass JATSParser(object):\n    def __init__(self, tag_to_remove=None, extract_nations=False):\n        self.references = None\n        self.tag_to_remove = tag_to_remove\n        self.extract_nations = extract_nations\n    def get_article(self, path):\n        return parse(open(path))\n    def get_title(self, xml):\n        try:\n            return get_value_in_tag(xml, \"article-title\", tag_to_remove=self.tag_to_remove)\n        except Exception:\n            print >> sys.stderr, \"Can't find title\"\n    def get_issn(self, xml):\n        issns = xml.getElementsByTagName('issn')\n        ret = None\n        for issn in issns:\n            if issn.getAttribute('date-type').encode('utf-8') == 'epub' or issn.getAttribute('pub-type').encode('utf-8') == 'epub':\n                if issn.getAttribute(\"pub-type\").encode('utf-8'):\n                    ret = issn.getAttribute(\"pub-type\").encode('utf-8')\n                else:\n                    ret = issn.getAttribute(\"date-type\").encode('utf-8')\n        if not ret and issns:\n            ret = xml_to_text(issns[0])\n        return ret\n    def get_date(self, xml):\n        dates = xml.getElementsByTagName('pub-date')\n        ret = None\n        for date in dates:\n            if date.getAttribute('date-type').encode('utf-8') == 'epub' or date.getAttribute('pub-type').encode('utf-8') == 'epub':\n                ret = get_value_in_tag(date, 'year')\n        if not ret and dates:\n            return dates[0]\n        else:\n            return ret\n    def get_publication_information(self, xml):\n        jid = get_value_in_tag(xml, \"journal-title\")\n        journal = \"\"\n        if \"European Physical Journal\" in jid:\n            journal = \"EPJC\"\n        try:\n            art = xml.getElementsByTagName('article-meta')[0]\n        except IndexError as err:\n            register_exception()\n            print >> sys.stderr, \"ERROR: XML corrupted: %s\" % err\n            pass\n        except Exception as err:\n            register_exception()\n            print >> sys.stderr, \"ERROR: Exception captured: %s\" % err\n            pass\n        issn = self.get_issn(art)\n        volume = get_value_in_tag(art, \"volume\")\n        issue = get_value_in_tag(art, \"issue\")\n        year = self.get_date(art)\n        first_page = get_value_in_tag(art, \"fpage\")\n        last_page = get_value_in_tag(art, \"lpage\")\n        doi = self.get_doi(art)\n        return (journal, issn, volume, issue, first_page, last_page, year, doi)\n    def get_doi(self, xml):\n        ids = xml.getElementsByTagName('article-id')\n        ret = \"\"\n        for i in ids:\n            if i.getAttribute('pub-id-type').encode('utf-8') == 'doi':\n                ret = xml_to_text(i)\n        if not ret:\n            print >> sys.stdout, \"Can't find DOI.\"\n        return ret\n    def _get_orcid(self, xml_author):\n        try:\n            contrib_id = xml_author.getElementsByTagName('contrib-id')[0]\n            if contrib_id.getAttribute('contrib-id-type') == 'orcid':\n                orcid_raw = xml_to_text(contrib_id)\n                pattern = '\\d\\d\\d\\d-\\d\\d\\d\\d-\\d\\d\\d\\d-\\d\\d\\d[\\d|X]'\n                return re.search(pattern, orcid_raw).group()\n        except (IndexError, AttributeError):\n            return None\n    def get_authors(self, xml):\n        authors = []\n        for author in xml.getElementsByTagName(\"contrib\"):\n            # Springer puts colaborations in additional \"contrib\" tag so to\n            # avoid having fake author with all affiliations we skip \"contrib\"\n            # tag with \"contrib\" subtags.\n            if author.getElementsByTagName(\"contrib\"):\n                continue\n            tmp = {}\n            surname = get_value_in_tag(author, \"surname\")\n            if surname:\n                tmp[\"surname\"] = surname\n            given_name = get_value_in_tag(author, \"given-names\")\n            if given_name:\n                tmp[\"given_name\"] = given_name.replace('\\n', ' ')\n            if not surname and not given_name:\n                tmp[\"name\"] = get_value_in_tag(author, \"string-name\")\n            # It's not there yet\n            orcid = self._get_orcid(author)\n            if orcid:\n                tmp[\"orcid\"] = 'ORCID:{0}'.format(orcid)\n            # cross_refs = author.getElementsByTagName(\"ce:cross-ref\")\n            # if cross_refs:\n            #     tmp[\"cross_ref\"] = []\n            #     for cross_ref in cross_refs:\n            #         tmp[\"cross_ref\"].append(cross_ref.getAttribute(\"refid\").encode('utf-8'))\n            tmp[\"affiliations_ids\"] = []\n            tmp[\"contact_ids\"] = []\n            xrefs = author.getElementsByTagName(\"xref\")\n            for x in xrefs:\n                if x.getAttribute('ref-type').encode('utf-8') == 'aff':\n                    tmp[\"affiliations_ids\"].extend([a.encode('utf-8') for a in x.getAttribute('rid').split()])\n                if x.getAttribute('ref-type').encode('utf-8') == 'corresp':\n                    tmp[\"contact_ids\"].extend([a.encode('utf-8') for a in x.getAttribute('rid').split()])\n            authors.append(tmp)\n        affiliations = {}\n        for affiliation in xml.getElementsByTagName(\"aff\"):\n            aff_id = affiliation.getAttribute(\"id\").encode('utf-8')\n            # removes numbering in from affiliations\n            text = re.sub(r'^(\\d+,\\ ?)', \"\", xml_to_text(affiliation, delimiter=\", \"))\n            affiliations[aff_id] = text\n        emails = {}\n        for contact in xml.getElementsByTagName(\"corresp\"):\n            contact_id = contact.getAttribute(\"id\").encode('utf-8')\n            if contact.getElementsByTagName('email'):\n                text = xml_to_text(contact.getElementsByTagName('email')[0])\n                emails[contact_id] = text\n        implicit_affilations = True\n        for author in authors:\n            matching_ref = [ref for ref in author.get(\"affiliations_ids\") if ref in affiliations]\n            if matching_ref:\n                implicit_affilations = False\n                author[\"affiliation\"] = []\n                for i in xrange(0, len(matching_ref)):\n                    author[\"affiliation\"].append(affiliations[matching_ref[i]])\n            matching_contact = [cont for cont in author.get('contact_ids') if cont in emails]\n            if matching_contact:\n                author[\"email\"] = emails[matching_contact[0]]\n        if implicit_affilations and len(affiliations) > 1:\n            print >> sys.stderr, \"Implicit affiliations are used, but there are more than one affiliation: %s\" % affiliations\n        if implicit_affilations and len(affiliations) >= 1:\n            for author in authors:\n                author[\"affiliation\"] = []\n                for aff in affiliations.values():\n                    author[\"affiliation\"].append(aff)\n        return authors\n    def get_abstract(self, xml):\n        try:\n            return get_value_in_tag(xml, \"abstract\", tag_to_remove=self.tag_to_remove).replace(\"Abstract\", \"\", 1)\n        except Exception:\n            print >> sys.stderr, \"Can't find abstract\"\n    def get_copyright(self, xml, logger=None):\n        tags = [\"copyright-holder\", \"copyright-statement\"]\n        for tag in tags:\n            if tag is \"copyright-holder\":\n                ret = get_value_in_tag(xml, tag)\n                if not ret:\n                    if logger:\n                        logger.info(\"Can't find copyright, trying different tag.\")\n                    print >> sys.stderr, \"Can't find copyright, trying different tag.\"\n                else:\n                    return ret\n            else:\n                ret = get_value_in_tag(xml, tag)\n                if not ret:\n                    if logger:\n                        logger.info(\"Can't find copyright\")\n                    print >> sys.stderr, \"Can't find copyright\"\n                else:\n                    ret = ret.split('.')\n                    return ret[0]\n    def get_keywords(self, xml):\n        try:\n            kwd_groups = xml.getElementsByTagName('kwd-group')\n            pacs = []\n            other = []\n            for kwd_group in kwd_groups:\n                if kwd_group.getAttribute('kwd-group-type').encode('utf-8') == \"pacs\":\n                    pacs = [xml_to_text(keyword, tag_to_remove=self.tag_to_remove) for keyword in kwd_group.getElementsByTagName(\"kwd\")]\n                else:\n                    other = [xml_to_text(keyword, tag_to_remove=self.tag_to_remove) for keyword in kwd_group.getElementsByTagName(\"kwd\")]\n            return {\"pacs\": pacs, \"other\": other}\n        except Exception:\n            print >> sys.stderr, \"Can't find keywords\"\n    def get_ref_link(self, xml, name):\n        links = xml.getElementsByTagName('ext-link')\n        ret = None\n        for link in links:\n            if name in link.getAttribute(\"xlink:href\").encode('utf-8'):\n                ret = xml_to_text(link).strip()\n        if not ret:\n            links = xml.getElementsByTagName('elocation-id')\n            for link in links:\n                if name in link.getAttribute(\"content-type\").encode('utf-8'):\n                    ret = xml_to_text(link).strip()\n        return ret\n    def get_page_count(self, xml):\n        counts = xml.getElementsByTagName(\"counts\")\n        if counts:\n            page_count = counts[0].getElementsByTagName(\"page-count\")\n            if page_count:\n                return page_count[0].getAttribute(\"count\").encode('utf-8')\n            else:\n                return None\n        else:\n            return None\n    def get_publication_date(self, xml, logger=None):\n        date_xmls = xml.getElementsByTagName('pub-date')\n        day = None\n        month = None\n        year = None\n        if date_xmls:\n            for date_xml in date_xmls:\n                if date_xml.hasAttribute('pub-type'):\n                    if date_xml.getAttribute('pub-type') == \"epub\":\n                        day = get_value_in_tag(date_xml, \"day\")\n                        month = get_value_in_tag(date_xml, \"month\")\n                        year = get_value_in_tag(date_xml, \"year\")\n                if not year:\n                    day = get_value_in_tag(date_xml, \"day\")\n                    month = get_value_in_tag(date_xml, \"month\")\n                    year = get_value_in_tag(date_xml, \"year\")\n            if logger:\n                logger.info('%s-%s-%s' % (year, month, day))\n            return '%s-%s-%s' % (year, month, day)\n        else:\n            print >> sys.stderr, \"Can't find publication date. Using 'today'.\"\n            if logger:\n                logger.info(\"Can't find publication date. Using 'today'.\")\n            return time.strftime('%Y-%m-%d')\n    def get_references(self, xml):\n        references = []\n        for reference in xml.getElementsByTagName(\"ref\"):\n            plain_text = None\n            try:\n                ref_type = reference.getElementsByTagName('mixed-citation')[0]\n                ref_type = ref_type.getAttribute('publication-type').encode('utf-8')\n            except:\n                ref_type = reference.getElementsByTagName('citation')[0]\n                ref_type = ref_type.getAttribute('publication-type').encode('utf-8')\n            label = get_value_in_tag(reference, \"label\").strip('.')\n            authors = []\n            for author in reference.getElementsByTagName(\"name\"):\n                given_name = get_value_in_tag(author, \"given-names\")\n                surname = get_value_in_tag(author, \"surname\")\n                if given_name:\n                    name = \"%s, %s\" % (surname, given_name)\n                else:\n                    name = surname\n                if name.strip().split() == []:\n                    name = get_value_in_tag(author, \"string-name\")\n                authors.append(name)\n            doi_tag = reference.getElementsByTagName(\"pub-id\")\n            doi = \"\"\n            for tag in doi_tag:\n                if tag.getAttribute(\"pub-id-type\") == \"doi\":\n                    doi = xml_to_text(tag)\n            issue = get_value_in_tag(reference, \"issue\")\n            page = get_value_in_tag(reference, \"fpage\")\n            page_last = get_value_in_tag(reference, \"lpage\")\n            title = get_value_in_tag(reference, \"source\")\n            volume = get_value_in_tag(reference, \"volume\")\n            year = get_value_in_tag(reference, \"year\")\n            ext_link = format_arxiv_id(self.get_ref_link(reference, \"arxiv\"))\n            if ref_type != 'journal':\n                try:\n                    plain_text = get_value_in_tag(reference,\n                                                  \"mixed-citation\",\n                                                  tag_to_remove=self.tag_to_remove)\n                except:\n                    plain_text = get_value_in_tag(reference,\n                                                  \"citation\",\n                                                  tag_to_remove=self.tag_to_remove)\n            references.append((label, authors, doi,\n                               issue, page, page_last,\n                               title, volume, year,\n                               ext_link, plain_text))\n        self.references = references\n    def get_record(self, f_path, publisher=None, collection=None, logger=None):\n        xml = self.get_article(f_path)\n        rec = create_record()\n        title = self.get_title(xml)\n        if title:\n            record_add_field(rec, '245', subfields=[('a', title)])\n        record_add_field(rec, '260', subfields=[('c', self.get_publication_date(xml, logger))])\n        journal, issn, volume, issue, first_page, last_page, year, doi = self.get_publication_information(xml)\n        if logger:\n            logger.info(\"Creating record: %s %s\" % (join(f_path, pardir), doi))\n        if doi:\n            record_add_field(rec, '024', ind1='7', subfields=[('a', doi), ('2', 'DOI')])\n        authors = self.get_authors(xml)\n        first_author = True\n        for author in authors:\n            if author.get('surname'):\n                subfields = [('a', '%s, %s' % (author.get('surname'), author.get('given_name') or author.get('initials', '')))]\n            else:\n                subfields = [('a', '%s' % (author.get('name', '')))]\n            if 'orcid' in author:\n                subfields.append(('j', author['orcid']))\n            if 'affiliation' in author:\n                for aff in author[\"affiliation\"]:\n                    subfields.append(('v', aff))\n                if self.extract_nations:\n                    add_nations_field(subfields)\n            if author.get('email'):\n                    subfields.append(('m', author['email']))\n            if first_author:\n                record_add_field(rec, '100', subfields=subfields)\n                first_author = False\n            else:\n                record_add_field(rec, '700', subfields=subfields)\n        page_count = self.get_page_count(xml)\n        if page_count:\n", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "length": 1283, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "86663145e9262154f0a3a437a533c6207187300f593522f9"}
{"input": "", "context": "package cern.colt.matrix.tint.impl;\nimport cern.colt.list.tint.IntArrayList;\nimport cern.colt.matrix.tint.IntMatrix1D;\nimport cern.colt.matrix.tint.IntMatrix1DProcedure;\nimport cern.colt.matrix.tint.IntMatrix2D;\nimport cern.colt.matrix.tint.IntMatrix2DTest;\nimport cern.jet.math.tint.IntFunctions;\nimport edu.emory.mathcs.utils.ConcurrencyUtils;\npublic class DiagonalIntMatrix2DTest extends IntMatrix2DTest {\n    protected int DLENGTH;\n    protected int DINDEX;\n    public DiagonalIntMatrix2DTest(String arg0) {\n        super(arg0);\n    }\n    protected void createMatrices() throws Exception {\n        DINDEX = 3;\n        A = new DiagonalIntMatrix2D(NROWS, NCOLUMNS, DINDEX);\n        B = new DiagonalIntMatrix2D(NROWS, NCOLUMNS, DINDEX);\n        Bt = new DiagonalIntMatrix2D(NCOLUMNS, NROWS, -DINDEX);\n        DLENGTH = ((DiagonalIntMatrix2D) A).diagonalLength();\n    }\n    protected void populateMatrices() {\n        ConcurrencyUtils.setThreadsBeginN_2D(1);\n        if (DINDEX >= 0) {\n            for (int r = 0; r < DLENGTH; r++) {\n                A.setQuick(r, r + DINDEX, Math.max(1, rand.nextInt() % A.rows()));\n            }\n            for (int r = 0; r < DLENGTH; r++) {\n                B.setQuick(r, r + DINDEX, Math.max(1, rand.nextInt() % A.rows()));\n            }\n            for (int r = 0; r < DLENGTH; r++) {\n                Bt.setQuick(r - DINDEX, r, Math.max(1, rand.nextInt() % A.rows()));\n            }\n        } else {\n            for (int r = 0; r < DLENGTH; r++) {\n                A.setQuick(r - DINDEX, r, Math.max(1, rand.nextInt() % A.rows()));\n            }\n            for (int r = 0; r < DLENGTH; r++) {\n                B.setQuick(r - DINDEX, r, Math.max(1, rand.nextInt() % A.rows()));\n            }\n            for (int r = 0; r < DLENGTH; r++) {\n                Bt.setQuick(r, r + DINDEX, Math.max(1, rand.nextInt() % A.rows()));\n            }\n        }\n    }\n    public void testAssignInt() {\n        int value = Math.max(1, rand.nextInt() % A.rows());\n        A.assign(value);\n        if (DINDEX >= 0) {\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(value, A.getQuick(r, r + DINDEX));\n            }\n        } else {\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(value, A.getQuick(r - DINDEX, r));\n            }\n        }\n    }\n    public void testAssignIntArrayArray() {\n        int[][] expected = new int[NROWS][NCOLUMNS];\n        for (int r = 0; r < NROWS; r++) {\n            for (int c = 0; c < NCOLUMNS; c++) {\n                expected[r][c] = Math.max(1, rand.nextInt() % A.rows());\n            }\n        }\n        A.assign(expected);\n        if (DINDEX >= 0) {\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(expected[r][r + DINDEX], A.getQuick(r, r + DINDEX));\n            }\n        } else {\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(expected[r - DINDEX][r], A.getQuick(r - DINDEX, r));\n            }\n        }\n    }\n    public void testAssignIntFunction() {\n        IntMatrix2D Acopy = A.copy();\n        A.assign(IntFunctions.neg);\n        if (DINDEX >= 0) {\n            for (int r = 0; r < DLENGTH; r++) {\n                int expected = -Acopy.getQuick(r, r + DINDEX);\n                assertEquals(expected, A.getQuick(r, r + DINDEX));\n            }\n        } else {\n            for (int r = 0; r < DLENGTH; r++) {\n                int expected = -Acopy.getQuick(r - DINDEX, r);\n                assertEquals(expected, A.getQuick(r - DINDEX, r));\n            }\n        }\n    }\n    public void testAssignIntMatrix2DIntIntFunction() {\n        IntMatrix2D Acopy = A.copy();\n        A.assign(B, IntFunctions.div);\n        if (DINDEX >= 0) {\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(Acopy.getQuick(r, r + DINDEX) / B.getQuick(r, r + DINDEX), A.getQuick(r, r + DINDEX));\n            }\n        } else {\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(Acopy.getQuick(r - DINDEX, r) / B.getQuick(r - DINDEX, r), A.getQuick(r - DINDEX, r));\n            }\n        }\n    }\n    public void testAssignIntMatrix2DIntIntFunctionIntArrayListIntArrayList() {\n        IntArrayList rowList = new IntArrayList();\n        IntArrayList columnList = new IntArrayList();\n        if (DINDEX >= 0) {\n            for (int r = 0; r < DLENGTH; r++) {\n                rowList.add(r);\n                columnList.add(r + DINDEX);\n            }\n            IntMatrix2D Acopy = A.copy();\n            A.assign(B, IntFunctions.div, rowList, columnList);\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(Acopy.getQuick(r, r + DINDEX) / B.getQuick(r, r + DINDEX), A.getQuick(r, r + DINDEX));\n            }\n        } else {\n            for (int r = 0; r < DLENGTH; r++) {\n                rowList.add(r - DINDEX);\n                columnList.add(r);\n            }\n            IntMatrix2D Acopy = A.copy();\n            A.assign(B, IntFunctions.div, rowList, columnList);\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(Acopy.getQuick(r - DINDEX, r) / B.getQuick(r - DINDEX, r), A.getQuick(r - DINDEX, r));\n            }\n        }\n    }\n    public void testCardinality() {\n        int card = A.cardinality();\n        assertEquals(DLENGTH, card);\n    }\n    public void testMaxLocation() {\n        A.assign(0);\n        if (DINDEX >= 0) {\n            A.setQuick(NROWS / 3, NROWS / 3 + DINDEX, 7);\n            A.setQuick(NROWS / 2, NROWS / 2 + DINDEX, 1);\n            int[] maxAndLoc = A.getMaxLocation();\n            assertEquals(7, maxAndLoc[0]);\n            assertEquals(NROWS / 3, (int) maxAndLoc[1]);\n            assertEquals(NROWS / 3 + DINDEX, (int) maxAndLoc[2]);\n        } else {\n            A.setQuick(NROWS / 3 - DINDEX, NROWS / 3, 7);\n            A.setQuick(NROWS / 2 - DINDEX, NROWS / 2, 1);\n            int[] maxAndLoc = A.getMaxLocation();\n            assertEquals(7, maxAndLoc[0]);\n            assertEquals(NROWS / 3 - DINDEX, (int) maxAndLoc[1]);\n            assertEquals(NROWS / 3, (int) maxAndLoc[2]);\n        }\n    }\n    public void testMinLocation() {\n        A.assign(0);\n        if (DINDEX >= 0) {\n            A.setQuick(NROWS / 3, NROWS / 3 + DINDEX, -7);\n            A.setQuick(NROWS / 2, NROWS / 2 + DINDEX, -1);\n            int[] minAndLoc = A.getMinLocation();\n            assertEquals(-7, minAndLoc[0]);\n            assertEquals(NROWS / 3, (int) minAndLoc[1]);\n            assertEquals(NROWS / 3 + DINDEX, (int) minAndLoc[2]);\n        } else {\n            A.setQuick(NROWS / 3 - DINDEX, NROWS / 3, -7);\n            A.setQuick(NROWS / 2 - DINDEX, NROWS / 2, -1);\n            int[] minAndLoc = A.getMinLocation();\n            assertEquals(-7, minAndLoc[0]);\n            assertEquals(NROWS / 3 - DINDEX, (int) minAndLoc[1]);\n            assertEquals(NROWS / 3, (int) minAndLoc[2]);\n        }\n    }\n    public void testGetNegativeValues() {\n        A.assign(0);\n        if (DINDEX >= 0) {\n            A.setQuick(NROWS / 3, NROWS / 3 + DINDEX, -7);\n            A.setQuick(NROWS / 2, NROWS / 2 + DINDEX, -1);\n            IntArrayList rowList = new IntArrayList();\n            IntArrayList columnList = new IntArrayList();\n            IntArrayList valueList = new IntArrayList();\n            A.getNegativeValues(rowList, columnList, valueList);\n            assertEquals(2, rowList.size());\n            assertEquals(2, columnList.size());\n            assertEquals(2, valueList.size());\n            assertTrue(rowList.contains(NROWS / 3));\n            assertTrue(rowList.contains(NROWS / 2));\n            assertTrue(columnList.contains(NROWS / 3 + DINDEX));\n            assertTrue(columnList.contains(NROWS / 2 + DINDEX));\n            assertTrue(valueList.contains(-7));\n            assertTrue(valueList.contains(-1));\n        } else {\n            A.setQuick(NROWS / 3 - DINDEX, NROWS / 3, -7);\n            A.setQuick(NROWS / 2 - DINDEX, NROWS / 2, -1);\n            IntArrayList rowList = new IntArrayList();\n            IntArrayList columnList = new IntArrayList();\n            IntArrayList valueList = new IntArrayList();\n            A.getNegativeValues(rowList, columnList, valueList);\n            assertEquals(2, rowList.size());\n            assertEquals(2, columnList.size());\n            assertEquals(2, valueList.size());\n            assertTrue(rowList.contains(NROWS / 3 - DINDEX));\n            assertTrue(rowList.contains(NROWS / 2 - DINDEX));\n            assertTrue(columnList.contains(NROWS / 3));\n            assertTrue(columnList.contains(NROWS / 2));\n            assertTrue(valueList.contains(-7));\n            assertTrue(valueList.contains(-1));\n        }\n    }\n    public void testGetNonZeros() {\n        A.assign(0);\n        if (DINDEX >= 0) {\n            A.setQuick(NROWS / 3, NROWS / 3 + DINDEX, 7);\n            A.setQuick(NROWS / 2, NROWS / 2 + DINDEX, 1);\n            IntArrayList rowList = new IntArrayList();\n            IntArrayList columnList = new IntArrayList();\n            IntArrayList valueList = new IntArrayList();\n            A.getNonZeros(rowList, columnList, valueList);\n            assertEquals(2, rowList.size());\n            assertEquals(2, columnList.size());\n            assertEquals(2, valueList.size());\n            assertTrue(rowList.contains(NROWS / 3));\n            assertTrue(rowList.contains(NROWS / 2));\n            assertTrue(columnList.contains(NROWS / 3 + DINDEX));\n            assertTrue(columnList.contains(NROWS / 2 + DINDEX));\n            assertTrue(valueList.contains(7));\n            assertTrue(valueList.contains(1));\n        } else {\n            A.setQuick(NROWS / 3 - DINDEX, NROWS / 3, 7);\n            A.setQuick(NROWS / 2 - DINDEX, NROWS / 2, 1);\n            IntArrayList rowList = new IntArrayList();\n            IntArrayList columnList = new IntArrayList();\n            IntArrayList valueList = new IntArrayList();\n            A.getNonZeros(rowList, columnList, valueList);\n            assertEquals(2, rowList.size());\n            assertEquals(2, columnList.size());\n            assertEquals(2, valueList.size());\n            assertTrue(rowList.contains(NROWS / 3 - DINDEX));\n            assertTrue(rowList.contains(NROWS / 2 - DINDEX));\n            assertTrue(columnList.contains(NROWS / 3));\n            assertTrue(columnList.contains(NROWS / 2));\n            assertTrue(valueList.contains(7));\n            assertTrue(valueList.contains(1));\n        }\n    }\n    public void testGetPositiveValues() {\n        A.assign(0);\n        if (DINDEX >= 0) {\n            A.setQuick(NROWS / 3, NROWS / 3 + DINDEX, 7);\n            A.setQuick(NROWS / 2, NROWS / 2 + DINDEX, 1);\n            IntArrayList rowList = new IntArrayList();\n            IntArrayList columnList = new IntArrayList();\n            IntArrayList valueList = new IntArrayList();\n            A.getPositiveValues(rowList, columnList, valueList);\n            assertEquals(2, rowList.size());\n            assertEquals(2, columnList.size());\n            assertEquals(2, valueList.size());\n            assertTrue(rowList.contains(NROWS / 3));\n            assertTrue(rowList.contains(NROWS / 2));\n            assertTrue(columnList.contains(NROWS / 3 + DINDEX));\n            assertTrue(columnList.contains(NROWS / 2 + DINDEX));\n            assertTrue(valueList.contains(7));\n            assertTrue(valueList.contains(1));\n        } else {\n            A.setQuick(NROWS / 3 - DINDEX, NROWS / 3, 7);\n            A.setQuick(NROWS / 2 - DINDEX, NROWS / 2, 1);\n            IntArrayList rowList = new IntArrayList();\n            IntArrayList columnList = new IntArrayList();\n            IntArrayList valueList = new IntArrayList();\n            A.getPositiveValues(rowList, columnList, valueList);\n            assertEquals(2, rowList.size());\n            assertEquals(2, columnList.size());\n            assertEquals(2, valueList.size());\n            assertTrue(rowList.contains(NROWS / 3 - DINDEX));\n            assertTrue(rowList.contains(NROWS / 2 - DINDEX));\n            assertTrue(columnList.contains(NROWS / 3));\n            assertTrue(columnList.contains(NROWS / 2));\n            assertTrue(valueList.contains(7));\n            assertTrue(valueList.contains(1));\n        }\n    }\n    public void testToArray() {\n        int[][] array = A.toArray();\n        assertTrue(NROWS == array.length);\n        for (int r = 0; r < NROWS; r++) {\n            assertTrue(NCOLUMNS == array[r].length);\n            for (int c = 0; c < NCOLUMNS; c++) {\n                assertEquals(array[r][c], A.getQuick(r, c));\n            }\n        }\n    }\n    public void testVectorize() {\n        IntMatrix1D Avec = A.vectorize();\n        int idx = 0;\n        for (int c = 0; c < NCOLUMNS; c++) {\n            for (int r = 0; r < NROWS; r++) {\n                assertEquals(A.getQuick(r, c), Avec.getQuick(idx++));\n            }\n        }\n    }\n    public void testViewColumn() {\n        IntMatrix1D col = A.viewColumn(NCOLUMNS / 2);\n        assertEquals(NROWS, col.size());\n        for (int r = 0; r < NROWS; r++) {\n            assertEquals(A.getQuick(r, NCOLUMNS / 2), col.getQuick(r));\n        }\n    }\n    public void testViewColumnFlip() {\n        IntMatrix2D B = A.viewColumnFlip();\n        assertEquals(A.size(), B.size());\n        for (int r = 0; r < NROWS; r++) {\n            for (int c = 0; c < NCOLUMNS; c++) {\n", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "length": 1319, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "4534467d40d89c9981629937ab5e1a62b76d61371ebfced8"}
{"input": "", "context": "# coding: utf8\n# This file is part of Scapy\n# Scapy is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# any later version.\n#\n# Scapy is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Scapy. If not, see <http://www.gnu.org/licenses/>.\n# scapy.contrib.description = EtherNet/IP\n# scapy.contrib.status = loads\n# Copyright (C) 2019 Jose Diogo Monteiro <jdlopes@student.dei.uc.pt>\n# Based on https://github.com/scy-phy/scapy-cip-enip\n# Routines for EtherNet/IP (Industrial Protocol) dissection\n# EtherNet/IP Home: www.odva.org\nimport struct\nfrom scapy.packet import Packet, bind_layers\nfrom scapy.layers.inet import TCP\nfrom scapy.fields import LEShortField, LEShortEnumField, LEIntEnumField, \\\n    LEIntField, LELongField, FieldLenField, PacketListField, ByteField, \\\n    PacketField, MultipleTypeField, StrLenField, StrFixedLenField, \\\n    XLEIntField, XLEStrLenField\n_commandIdList = {\n    0x0004: \"ListServices\",  # Request Struct Don't Have Command Spec Data\n    0x0063: \"ListIdentity\",  # Request Struct Don't Have Command Spec Data\n    0x0064: \"ListInterfaces\",  # Request Struct Don't Have Command Spec Data\n    0x0065: \"RegisterSession\",  # Request Structure = Reply Structure\n    0x0066: \"UnregisterSession\",  # Don't Have Command Specific Data\n    0x006f: \"SendRRData\",  # Request Structure = Reply Structure\n    0x0070: \"SendUnitData\",  # There is no reply\n    0x0072: \"IndicateStatus\",\n    0x0073: \"Cancel\"\n}\n_statusList = {\n    0: \"success\",\n    1: \"invalid_cmd\",\n    2: \"no_resources\",\n    3: \"incorrect_data\",\n    100: \"invalid_session\",\n    101: \"invalid_length\",\n    105: \"unsupported_prot_rev\"\n}\n_itemID = {\n    0x0000: \"Null Address Item\",\n    0x00a1: \"Connection-based Address Item\",\n    0x00b1: \"Connected Transport packet Data Item\",\n    0x00b2: \"Unconnected message Data Item\",\n    0x8000: \"Sockaddr Info, originator-to-target Data Item\",\n    0x8001: \"Sockaddr Info, target-to-originator Data Item\"\n}\nclass ItemData(Packet):\n    \"\"\"Common Packet Format\"\"\"\n    name = \"Item Data\"\n    fields_desc = [\n        LEShortEnumField(\"typeId\", 0, _itemID),\n        LEShortField(\"length\", 0),\n        XLEStrLenField(\"data\", \"\", length_from=lambda pkt: pkt.length),\n    ]\n    def extract_padding(self, s):\n        return '', s\nclass EncapsulatedPacket(Packet):\n    \"\"\"Encapsulated Packet\"\"\"\n    name = \"Encapsulated Packet\"\n    fields_desc = [LEShortField(\"itemCount\", 2), PacketListField(\n        \"item\", None, ItemData, count_from=lambda pkt: pkt.itemCount), ]\nclass BaseSendPacket(Packet):\n    \"\"\" Abstract Class\"\"\"\n    fields_desc = [\n        LEIntField(\"interfaceHandle\", 0),\n        LEShortField(\"timeout\", 0),\n        PacketField(\"encapsulatedPacket\", None, EncapsulatedPacket),\n    ]\nclass CommandSpecificData(Packet):\n    \"\"\"Command Specific Data Field Default\"\"\"\n    pass\nclass ENIPSendUnitData(BaseSendPacket):\n    \"\"\"Send Unit Data Command Field\"\"\"\n    name = \"ENIPSendUnitData\"\nclass ENIPSendRRData(BaseSendPacket):\n    \"\"\"Send RR Data Command Field\"\"\"\n    name = \"ENIPSendRRData\"\nclass ENIPListInterfacesReplyItems(Packet):\n    \"\"\"List Interfaces Items Field\"\"\"\n    name = \"ENIPListInterfacesReplyItems\"\n    fields_desc = [\n        LEIntField(\"itemTypeCode\", 0),\n        FieldLenField(\"itemLength\", 0, length_of=\"itemData\"),\n        StrLenField(\"itemData\", \"\", length_from=lambda pkt: pkt.itemLength),\n    ]\nclass ENIPListInterfacesReply(Packet):\n    \"\"\"List Interfaces Command Field\"\"\"\n    name = \"ENIPListInterfacesReply\"\n    fields_desc = [\n        FieldLenField(\"itemCount\", 0, count_of=\"identityItems\"),\n        PacketField(\"identityItems\", 0, ENIPListInterfacesReplyItems),\n    ]\nclass ENIPListIdentityReplyItems(Packet):\n    \"\"\"List Identity Items Field\"\"\"\n    name = \"ENIPListIdentityReplyItems\"\n    fields_desc = [\n        LEIntField(\"itemTypeCode\", 0),\n        FieldLenField(\"itemLength\", 0, length_of=\"itemData\"),\n        StrLenField(\"itemData\", \"\", length_from=lambda pkt: pkt.item_length),\n    ]\nclass ENIPListIdentityReply(Packet):\n    \"\"\"List Identity Command Field\"\"\"\n    name = \"ENIPListIdentityReply\"\n    fields_desc = [\n        FieldLenField(\"itemCount\", 0, count_of=\"identityItems\"),\n        PacketField(\"identityItems\", None, ENIPListIdentityReplyItems),\n    ]\nclass ENIPListServicesReplyItems(Packet):\n    \"\"\"List Services Items Field\"\"\"\n    name = \"ENIPListServicesReplyItems\"\n    fields_desc = [\n        LEIntField(\"itemTypeCode\", 0),\n        LEIntField(\"itemLength\", 0),\n        ByteField(\"version\", 1),\n        ByteField(\"flag\", 0),\n        StrFixedLenField(\"serviceName\", None, 16 * 4),\n    ]\nclass ENIPListServicesReply(Packet):\n    \"\"\"List Services Command Field\"\"\"\n    name = \"ENIPListServicesReply\"\n    fields_desc = [\n        FieldLenField(\"itemCount\", 0, count_of=\"identityItems\"),\n        PacketField(\"targetItems\", None, ENIPListServicesReplyItems),\n    ]\nclass ENIPRegisterSession(CommandSpecificData):\n    \"\"\"Register Session Command Field\"\"\"\n    name = \"ENIPRegisterSession\"\n    fields_desc = [\n        LEShortField(\"protocolVersion\", 1),\n        LEShortField(\"options\", 0)\n    ]\nclass ENIPTCP(Packet):\n    \"\"\"Ethernet/IP packet over TCP\"\"\"\n    name = \"ENIPTCP\"\n    fields_desc = [\n        LEShortEnumField(\"commandId\", None, _commandIdList),\n        LEShortField(\"length\", 0),\n        XLEIntField(\"session\", 0),\n        LEIntEnumField(\"status\", None, _statusList),\n        LELongField(\"senderContext\", 0),\n        LEIntField(\"options\", 0),\n        MultipleTypeField(\n            [\n                # List Services Reply\n                (PacketField(\"commandSpecificData\", ENIPListServicesReply,\n                             ENIPListServicesReply),\n                 lambda pkt: pkt.commandId == 0x4),\n                # List Identity Reply\n                (PacketField(\"commandSpecificData\", ENIPListIdentityReply,\n                             ENIPListIdentityReply),\n                 lambda pkt: pkt.commandId == 0x63),\n                # List Interfaces Reply\n                (PacketField(\"commandSpecificData\", ENIPListInterfacesReply,\n                             ENIPListInterfacesReply),\n                 lambda pkt: pkt.commandId == 0x64),\n                # Register Session\n                (PacketField(\"commandSpecificData\", ENIPRegisterSession,\n                             ENIPRegisterSession),\n                 lambda pkt: pkt.commandId == 0x65),\n                # Send RR Data\n                (PacketField(\"commandSpecificData\", ENIPSendRRData,\n                             ENIPSendRRData),\n", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "length": 625, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "7be7d972146bae6e379a2e75d85d7a8103d8d6cef2e618fd"}
{"input": "", "context": "/*\n *  GeoBatch - Open Source geospatial batch processing system\n *  http://code.google.com/p/geobatch/\n *  Copyright (C) 2007-2008-2009 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n *\n *  GPLv3 + Classpath exception\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage it.geosolutions.geobatch.registry.harvest;\nimport it.geosolutions.filesystemmonitor.monitor.FileSystemMonitorEvent;\nimport it.geosolutions.filesystemmonitor.monitor.FileSystemMonitorNotifications;\nimport it.geosolutions.geobatch.catalog.file.FileBaseCatalog;\nimport it.geosolutions.geobatch.global.CatalogHolder;\nimport it.geosolutions.geobatch.jgsflodess.utils.io.JGSFLoDeSSIOUtils;\nimport it.geosolutions.geobatch.jgsflodess.utils.io.rest.PublishingRestletGlobalConfig;\nimport it.geosolutions.geobatch.metocs.jaxb.model.MetocElementType;\nimport it.geosolutions.geobatch.metocs.jaxb.model.Metocs;\nimport it.geosolutions.geobatch.registry.RegistryActionConfiguration;\nimport it.geosolutions.geobatch.registry.RegistryConfiguratorAction;\nimport it.geosolutions.geobatch.utils.IOUtils;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.net.URLDecoder;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Queue;\nimport java.util.UUID;\nimport java.util.logging.Level;\nimport javax.media.jai.JAI;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Unmarshaller;\nimport org.apache.commons.io.FilenameUtils;\nimport org.geotools.coverage.grid.GridEnvelope2D;\nimport org.geotools.coverage.grid.GridGeometry2D;\nimport org.geotools.coverage.grid.io.AbstractGridCoverage2DReader;\nimport org.geotools.coverage.grid.io.AbstractGridFormat;\nimport org.geotools.coverage.grid.io.GridFormatFinder;\nimport org.geotools.geometry.GeneralEnvelope;\nimport org.geotools.referencing.CRS;\nimport org.geotools.referencing.operation.LinearTransform;\nimport org.opengis.coverage.grid.Format;\nimport org.opengis.coverage.grid.GridEnvelope;\nimport org.opengis.coverage.grid.GridGeometry;\nimport org.opengis.referencing.FactoryException;\nimport org.opengis.referencing.crs.CoordinateReferenceSystem;\nimport org.opengis.referencing.datum.PixelInCell;\nimport org.opengis.referencing.operation.MathTransform;\nimport org.opengis.referencing.operation.Matrix;\n/**\n * \n * TODO: DOCUMENT ME !!\n * \n */\npublic class RegistryHarvestingConfigurator extends RegistryConfiguratorAction<FileSystemMonitorEvent> {\n\t/**\n\t * GeoTIFF Writer Default Params\n\t */\n\tpublic final static String GEOSERVER_VERSION = \"2.x\";\n\tprotected RegistryHarvestingConfigurator(\n\t\t\tRegistryActionConfiguration configuration) throws IOException {\n\t\tsuper(configuration);\n\t}\n\t/**\n\t * EXECUTE METHOD \n\t */\n\tpublic Queue<FileSystemMonitorEvent> execute(\n\t\t\tQueue<FileSystemMonitorEvent> events) throws Exception {\n\t\tif (LOGGER.isLoggable(Level.INFO))\n\t\t\tLOGGER.info(\"Starting with processing...\");\n\t\ttry {\n\t\t\t// looking for file\n\t\t\tif (events.size() == 0)\n\t\t\t\tthrow new IllegalArgumentException(\"Wrong number of elements for this action: \" + events.size());\n\t\t\t\n\t\t\tList<FileSystemMonitorEvent> generatedEvents = new ArrayList<FileSystemMonitorEvent>();\n\t\t\t\n\t\t\twhile (events.size() > 0) {\n\t\t\t\tFileSystemMonitorEvent event = events.remove();\n\t\t\t\t// //\n\t\t\t\t// data flow configuration and dataStore name must not be null.\n\t\t\t\t// //\n\t\t\t\tif (configuration == null) {\n\t\t\t\t\tLOGGER.log(Level.SEVERE, \"DataFlowConfig is null.\");\n\t\t\t\t\tthrow new IllegalStateException(\"DataFlowConfig is null.\");\n\t\t\t\t}\n\t\t\t\t// ////////////////////////////////////////////////////////////////////\n\t\t\t\t//\n\t\t\t\t// Initializing input variables\n\t\t\t\t//\n\t\t\t\t// ////////////////////////////////////////////////////////////////////\n\t\t\t\tfinal File workingDir = IOUtils.findLocation(configuration.getWorkingDirectory(), new File(\n\t\t\t\t\t\t((FileBaseCatalog) CatalogHolder.getCatalog()).getBaseDirectory()));\n\t\t\t\t// ////////////////////////////////////////////////////////////////////\n\t\t\t\t//\n\t\t\t\t// Checking input files.\n\t\t\t\t//\n\t\t\t\t// ////////////////////////////////////////////////////////////////////\n\t\t\t\tif ((workingDir == null) || !workingDir.exists()\n\t\t\t\t\t\t|| !workingDir.isDirectory()) {\n\t\t\t\t\tLOGGER.log(Level.SEVERE, \"WorkingDirectory is null or does not exist.\");\n\t\t\t\t\tthrow new IllegalStateException(\"WorkingDirectory is null or does not exist.\");\n\t\t\t\t}\n\t\t\t\t// ... BUSINESS LOGIC ... //\n\t\t\t\tfinal File inputFile = event.getSource();\n\t\t\t\tString inputFileName = inputFile.getAbsolutePath();\n\t\t\t\tfinal String filePrefix = FilenameUtils.getBaseName(inputFileName);\n\t\t\t\tfinal String fileSuffix = FilenameUtils.getExtension(inputFileName);\n\t\t\t\tfinal String fileNameFilter = getConfiguration().getStoreFilePrefix();\n\t\t\t\tString baseFileName = null;\n\t\t\t\tif (fileNameFilter != null) {\n\t\t\t\t\tif ((filePrefix.equals(fileNameFilter) || filePrefix.matches(fileNameFilter))\n\t\t\t\t\t\t\t&& \"layer\".equalsIgnoreCase(fileSuffix)) {\n\t\t\t\t\t\t// etj: are we missing something here?\n\t\t\t\t\t\tbaseFileName = filePrefix;\n\t\t\t\t\t}\n\t\t\t\t} else if (\"layer\".equalsIgnoreCase(fileSuffix)) {\n\t\t\t\t\tbaseFileName = filePrefix;\n\t\t\t\t}\n\t\t\t\tif (baseFileName == null) {\n\t\t\t\t\tLOGGER.log(Level.SEVERE, \"Unexpected file '\" + inputFileName + \"'\");\n\t\t\t\t\tthrow new IllegalStateException(\"Unexpected file '\" + inputFileName + \"'\");\n\t\t\t\t}\n\t\t\t\tProperties props = new Properties();\n\t\t\t\t//try retrieve data from file\n\t\t\t\ttry {\n\t\t\t\t\tprops.load(new FileInputStream(inputFile));\n\t\t\t\t}\n\t\t\t\t//catch exception in case properties file does not exist\n\t\t\t\tcatch(IOException e) {\n\t\t\t\t\tLOGGER.log(Level.SEVERE, e.getLocalizedMessage(), e);\n\t\t\t\t}\n\t\t\t\tfinal String namespace = props.getProperty(\"namespace\");\n\t\t\t\tfinal String metocFields = props.getProperty(\"metocFields\");\n\t\t\t\tfinal String storeid = props.getProperty(\"storeid\");\n\t\t\t\tfinal String layerid = props.getProperty(\"layerid\");\n\t\t\t\tfinal String driver = props.getProperty(\"driver\");\n\t\t\t\tfinal String path = new File(inputFile.getParentFile(), props.getProperty(\"path\")).getAbsolutePath();\n\t\t\t\t\n\t\t\t\tfinal File metadataTemplate = IOUtils.findLocation(configuration.getMetocHarvesterXMLTemplatePath(), new File(((FileBaseCatalog) CatalogHolder.getCatalog()).getBaseDirectory()));\n\t\t\t\t\n\t\t\t\tboolean res = harvest(\n\t\t\t\t\t\tnew File(PublishingRestletGlobalConfig.getRootDirectory()), \n\t\t\t\t\t\tnew File(path), \n\t\t\t\t\t\tmetadataTemplate, \n\t\t\t\t\t\tdriver, \n\t\t\t\t\t\tconfiguration.getGeoserverURL(), \n\t\t\t\t\t\tconfiguration.getRegistryURL(), \n\t\t\t\t\t\tconfiguration.getProviderURL(), \n\t\t\t\t\t\tnew Date().getTime(), \n\t\t\t\t\t\tnamespace, \n\t\t\t\t\t\tmetocFields, \n\t\t\t\t\t\tlayerid, \n\t\t\t\t\t\t\"DOWN\"\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\tif (res) {\n\t\t\t\t\t// forwarding to the next Action\n\t\t\t\t\tif (LOGGER.isLoggable(Level.FINE))\n\t\t\t\t\t\tLOGGER.fine(\"RegistryHarvestingAction ... forwarding to the next Action: \" + inputFile.getAbsolutePath());\n\t\t\t\t\t/** TODO: remove this --- generatedEvents.add(new FileSystemMonitorEvent(inputFile, FileSystemMonitorNotifications.FILE_ADDED)); **/\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/** TODO: remove this --- if (generatedEvents != null)\n\t\t\t\tevents.addAll(generatedEvents); **/\n\t\t\treturn events;\n\t\t} catch (Throwable t) {\n\t\t\tLOGGER.log(Level.SEVERE, t.getLocalizedMessage(), t);\n\t\t\tJAI.getDefaultInstance().getTileCache().flush();\n\t\t\treturn null;\n\t\t} finally {\n\t\t\tJAI.getDefaultInstance().getTileCache().flush();\n\t\t}\n\t}\n\t/**\n\t * \n\t * @param outDir\n\t * @param sourceFile\n\t * @param metadataTemplate\n\t * @param sourceFileType\n\t * @param geoserverURL\n\t * @param registryURL\n\t * @param providerURL\n\t * @param timestamp\n\t * @param namespace\n\t * @param metocFields\n\t * @param coverageName\n\t * @param zOrder\n\t * @return\n\t * @throws JAXBException\n\t * @throws IOException\n\t * @throws FactoryException\n\t * @throws ParseException\n\t */\n\tpublic boolean harvest(\n\t\t\tfinal File outDir, \n\t\t\tfinal File sourceFile,\n\t\t\tfinal File metadataTemplate,\n\t\t\tfinal String sourceFileType,\n\t\t\tfinal String geoserverURL,\n\t\t\tfinal String registryURL,\n\t\t\tfinal String providerURL,\n\t\t\tfinal long timestamp, \n\t\t\tfinal String namespace, \n\t\t\tfinal String metocFields,\n\t\t\tfinal String coverageName, \n\t\t\tfinal String zOrder\n\t) throws JAXBException, IOException, FactoryException, ParseException {\n\t\t// CoverageName Format:\n\t\t//  CRUISEEXP_MODELNAME-MODELTYPE_VARNAME(-u/v/mag/dir)_ZLEV_BASETIMEYYYYMMDD_BASETIMEHHHMMSS_FCSTTIMEYYYYMMDD_FCSTTIMEHHHMMSS_TAU\n\t\t\n\t\t//Grabbing the Variables Dictionary\n\t\tJAXBContext context = JAXBContext.newInstance(Metocs.class);\n\t\tUnmarshaller um = context.createUnmarshaller();\n\t\t\n\t\tFile metocDictionaryFile = IOUtils.findLocation(configuration.getMetocDictionaryPath(), new File(((FileBaseCatalog) CatalogHolder.getCatalog()).getBaseDirectory())); \n\t\tMetocs metocDictionary = (Metocs) um.unmarshal(new FileReader(metocDictionaryFile));\n\t\t\n\t\t// reading GeoTIFF file\n\t\tfinal AbstractGridCoverage2DReader reader = ((AbstractGridFormat) acquireFormat(sourceFileType)).getReader(sourceFile.toURI().toURL());\n", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "length": 805, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "016acda6d2273fce43a10dc6e2ad33d83b7ffccc9151ac09"}
{"input": "", "context": "package com.garbagemule.MobArena.waves;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.bukkit.DyeColor;\nimport org.bukkit.Location;\nimport org.bukkit.Material;\nimport org.bukkit.World;\nimport org.bukkit.entity.*;\nimport org.bukkit.entity.Skeleton.SkeletonType;\nimport org.bukkit.inventory.ItemStack;\nimport com.garbagemule.MobArena.MobArena;\nimport com.garbagemule.MobArena.framework.Arena;\npublic enum MACreature\n{\n    // Default creatures\n    ZOMBIE(EntityType.ZOMBIE),            ZOMBIES(EntityType.ZOMBIE), \n    SKELETON(EntityType.SKELETON),        SKELETONS(EntityType.SKELETON),\n    SPIDER(EntityType.SPIDER),            SPIDERS(EntityType.SPIDER),\n    CREEPER(EntityType.CREEPER),          CREEPERS(EntityType.CREEPER),\n    WOLF(EntityType.WOLF),                WOLVES(EntityType.WOLF),\n    \n    // Special creatures\n    ZOMBIEPIGMAN(EntityType.PIG_ZOMBIE),  ZOMBIEPIGMEN(EntityType.PIG_ZOMBIE),\n    POWEREDCREEPER(EntityType.CREEPER),   POWEREDCREEPERS(EntityType.CREEPER),\n    ANGRYWOLF(EntityType.WOLF),           ANGRYWOLVES(EntityType.WOLF),\n    GIANT(EntityType.GIANT),              GIANTS(EntityType.GIANT),\n    GHAST(EntityType.GHAST),              GHASTS(EntityType.GHAST),\n    ENDERMAN(EntityType.ENDERMAN),        ENDERMEN(EntityType.ENDERMAN),\n    CAVESPIDER(EntityType.CAVE_SPIDER),   CAVESPIDERS(EntityType.CAVE_SPIDER),\n    SILVERFISH(EntityType.SILVERFISH),\n    \n    // 1.0 creatures\n    BLAZE(EntityType.BLAZE),              BLAZES(EntityType.BLAZE),\n    ENDERDRAGON(EntityType.ENDER_DRAGON), ENDERDRAGONS(EntityType.ENDER_DRAGON),\n    SNOWMAN(EntityType.SNOWMAN),          SNOWMEN(EntityType.SNOWMAN),\n    SNOWGOLEM(EntityType.SNOWMAN),        SNOWGOLEMS(EntityType.SNOWMAN),\n    MUSHROOMCOW(EntityType.MUSHROOM_COW), MUSHROOMCOWS(EntityType.MUSHROOM_COW),\n    VILLAGER(EntityType.VILLAGER),        VILLAGERS(EntityType.VILLAGER),\n    \n    // 1.2 creatures\n    OCELOT(EntityType.OCELOT),            OCELOTS(EntityType.OCELOT),\n    IRONGOLEM(EntityType.IRON_GOLEM),     IRONGOLEMS(EntityType.IRON_GOLEM),\n    \n    // Passive creatures\n    CHICKEN(EntityType.CHICKEN),          CHICKENS(EntityType.CHICKEN),\n    COW(EntityType.COW),                  COWS(EntityType.COW),\n    PIG(EntityType.PIG),                  PIGS(EntityType.PIG),\n    SHEEP(EntityType.SHEEP),\n    SQUID(EntityType.SQUID),              SQUIDS(EntityType.SQUID),\n    \n    // Extended creatures\n    EXPLODINGSHEEP(EntityType.SHEEP),\n    \n    // Slimes\n    SLIME(EntityType.SLIME),              SLIMES(EntityType.SLIME),\n    SLIMETINY(EntityType.SLIME),          SLIMESTINY(EntityType.SLIME),\n    SLIMESMALL(EntityType.SLIME),         SLIMESSMALL(EntityType.SLIME),\n    SLIMEBIG(EntityType.SLIME),           SLIMESBIG(EntityType.SLIME),\n    SLIMEHUGE(EntityType.SLIME),          SLIMESHUGE(EntityType.SLIME),\n    \n    // Magma cubes\n    MAGMACUBE(EntityType.MAGMA_CUBE),     MAGMACUBES(EntityType.MAGMA_CUBE),\n    MAGMACUBETINY(EntityType.MAGMA_CUBE), MAGMACUBESTINY(EntityType.MAGMA_CUBE),\n    MAGMACUBESMALL(EntityType.MAGMA_CUBE),MAGMACUBESSMALL(EntityType.MAGMA_CUBE),\n    MAGMACUBEBIG(EntityType.MAGMA_CUBE),  MAGMACUBESBIG(EntityType.MAGMA_CUBE),\n    MAGMACUBEHUGE(EntityType.MAGMA_CUBE), MAGMACUBESHUGE(EntityType.MAGMA_CUBE),\n        \n    // 1.4 creatures\n    BAT(EntityType.BAT),                  BATS(EntityType.BAT),\n    WITCH(EntityType.WITCH),              WITCHES(EntityType.WITCH),\n    WITHER(EntityType.WITHER),            WITHERS(EntityType.WITHER),\n    WITHERSKELETON(EntityType.SKELETON),  WITHERSKELETONS(EntityType.SKELETON),\n    BABYZOMBIE(EntityType.ZOMBIE),        BABYZOMBIES(EntityType.ZOMBIE),\n    BABYPIGMAN(EntityType.PIG_ZOMBIE),    BABYPIGMEN(EntityType.PIG_ZOMBIE),\n    ZOMBIEVILLAGER(EntityType.ZOMBIE),    ZOMBIEVILLAGERS(EntityType.ZOMBIE),\n    BABYZOMBIEVILLAGER(EntityType.ZOMBIE),BABYZOMBIEVILLAGERS(EntityType.ZOMBIE),\n    // 1.6 creatures\n    HORSE(EntityType.HORSE),              HORSES(EntityType.HORSE),\n    DONKEY(EntityType.HORSE),             DONKEYS(EntityType.HORSE),\n    MULE(EntityType.HORSE),               MULES(EntityType.HORSE),\n    SKELETONHORSE(EntityType.HORSE),      SKELETONHORSES(EntityType.HORSE),\n    UNDEADHORSE(EntityType.HORSE),        UNDEADHORSES(EntityType.HORSE);\n    private List<DyeColor> colors = Arrays.asList(DyeColor.values());\n    private EntityType type;\n    \n    private MACreature(EntityType type) {\n        this.type = type;\n    }\n    \n    public EntityType getType() {\n        return type;\n    }\n    \n    public static MACreature fromString(String string) {\n        return WaveUtils.getEnumFromString(MACreature.class, string.replaceAll(\"[-_\\\\.]\", \"\"));\n    }\n    \n    public LivingEntity spawn(Arena arena, World world, Location loc) {\n        LivingEntity e = (LivingEntity) world.spawnEntity(loc, type);\n        e.getEquipment().clear();\n        \n        switch (this) {\n            case SHEEP:\n                ((Sheep) e).setColor(colors.get(MobArena.random.nextInt(colors.size())));\n                break;\n            case EXPLODINGSHEEP:\n                arena.getMonsterManager().addExplodingSheep(e);\n                ((Sheep) e).setColor(DyeColor.RED);\n                break;\n            case POWEREDCREEPERS:\n                ((Creeper) e).setPowered(true);\n                break;\n            case ANGRYWOLVES:\n                ((Wolf) e).setAngry(true);\n                break;\n            case SLIME:\n            case SLIMES:\n            case MAGMACUBE:\n            case MAGMACUBES:\n                ((Slime) e).setSize( (1 + MobArena.random.nextInt(3)) );\n                break;\n            case SLIMETINY:\n            case SLIMESTINY:\n            case MAGMACUBETINY:\n            case MAGMACUBESTINY:\n                ((Slime) e).setSize(1);\n                break;\n            case SLIMESMALL:\n            case SLIMESSMALL:\n            case MAGMACUBESMALL:\n            case MAGMACUBESSMALL:\n                ((Slime) e).setSize(2);\n                break;\n            case SLIMEBIG:\n            case SLIMESBIG:\n            case MAGMACUBEBIG:\n            case MAGMACUBESBIG:\n                ((Slime) e).setSize(3);\n                break;\n            case SLIMEHUGE:\n            case SLIMESHUGE:\n            case MAGMACUBEHUGE:\n            case MAGMACUBESHUGE:\n                ((Slime) e).setSize(4);\n                break;\n            case SKELETON:\n            case SKELETONS:\n                ((Skeleton) e).getEquipment().setItemInHand(new ItemStack(Material.BOW, 1));\n            \tbreak;\n            case ZOMBIEPIGMAN:\n            case ZOMBIEPIGMEN:\n            \t((PigZombie) e).getEquipment().setItemInHand(new ItemStack(Material.GOLD_SWORD, 1));\n            \tbreak;\n            case ZOMBIEVILLAGER:\n            case ZOMBIEVILLAGERS:\n                ((Zombie) e).setVillager(true);\n                break;\n            case BABYZOMBIEVILLAGER:\n            case BABYZOMBIEVILLAGERS:\n                ((Zombie) e).setVillager(true);\n            case BABYZOMBIE:\n            case BABYZOMBIES:\n            case BABYPIGMAN:\n            case BABYPIGMEN:\n                ((Zombie) e).setBaby(true);\n                break;\n            case WITHERSKELETON:\n            case WITHERSKELETONS:\n                ((Skeleton) e).getEquipment().setItemInHand(new ItemStack(Material.STONE_SWORD, 1));\n                ((Skeleton) e).setSkeletonType(SkeletonType.WITHER);\n                break;\n            case HORSE:\n            case HORSES:\n                ((Horse) e).setVariant(Horse.Variant.HORSE);\n                break;\n            case DONKEY:\n            case DONKEYS:\n                ((Horse) e).setVariant(Horse.Variant.DONKEY);\n                break;\n            case MULE:\n            case MULES:\n                ((Horse) e).setVariant(Horse.Variant.MULE);\n                break;\n            case SKELETONHORSE:\n            case SKELETONHORSES:\n                ((Horse) e).setVariant(Horse.Variant.SKELETON_HORSE);\n                break;\n            case UNDEADHORSE:\n            case UNDEADHORSES:\n                ((Horse) e).setVariant(Horse.Variant.UNDEAD_HORSE);\n                break;\n            default:\n                break;\n        }\n        \n        if (e instanceof Creature) {\n", "answers": ["            Creature c = (Creature) e;"], "length": 386, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "94f103d8d6177a4ab0d0ed90f9dbd86d375978f8e3f81181"}
{"input": "", "context": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.IO;\nusing System.Windows.Forms;\nusing System.Drawing.Drawing2D;\nusing System.Drawing.Imaging;\nnamespace MUOViewer\n{\n\tpublic enum FileID\n\t{\n\t\tMap0_mul = 0x00000000,\n\t\tStaIdx0_mul = 0x00000001,\n\t\tStatics0_mul = 0x00000002,\n\t\tArtIdx_mul = 0x00000003,\n\t\tArt_mul = 0x00000004,\n\t\tAnim_idx = 0x00000005,\n\t\tAnim_mul = 0x00000006,\n\t\tSoundIdx_mul = 0x00000007,\n\t\tSound_mul = 0x00000008,\n\t\tTexIdx_mul = 0x00000009,\n\t\tTexMaps_mul = 0x0000000A,\n\t\tGumpIdx_mul = 0x0000000B,\n\t\tGumpArt_mul = 0x0000000C,\n\t\tMulti_idx = 0x0000000D,\n\t\tMulti_mul = 0x0000000E,\n\t\tSkills_idx = 0x0000000F,\n\t\tSkills_mul = 0x00000010,\n\t\tTileData_mul = 0x00000011,\n\t\tAnimData_mul = 0x00000012,\n\t\tHues_mul = 0x00000013,\n\t}\n\tpublic enum ExtendedFileID : int//Fucking UOG had to go and fuck up the MUO\n\t{\n\t\tMap0_mul = 0x00000040,\n\t\tStaIdx0_mul = 0x00000041,\n\t\tStatics0_mul = 0x00000042,\n\t\tArtIdx_mul = 0x00000043,\n\t\tArt_mul = 0x00000044,\n\t\tAnim_idx = 0x00000045,\n\t\tAnim_mul = 0x00000046,\n\t\tSoundIdx_mul = 0x00000047,\n\t\tSound_mul = 0x00000048,\n\t\tTexIdx_mul = 0x00000049,\n\t\tTexMaps_mul = 0x0000004A,\n\t\tGumpIdx_mul = 0x0000004B,\n\t\tGumpArt_mul = 0x0000004C,\n\t\tMulti_idx = 0x0000004D,\n\t\tMulti_mul = 0x0000004E,\n\t}\n\tpublic partial class MainForm : Form\n\t{\n\t\tprivate PatchFile _patchFile;\n\t\tprivate bool _updateScreen = true;\n\t\tprivate Animation _anim;\n\t\tpublic PatchFile patchFile { get { return _patchFile; } set { _patchFile = value;} }\n\t\tprivate void UpdateForm()\n\t\t{\n\t\t\tupDown.Maximum = _patchFile.patchCount - 1;\n\t\t\tnameLbl.Text = \"Name: \" + _patchFile.name;\n\t\t\tauthLbl.Text = \"Author: \" + _patchFile.author;\n\t\t\tdescLbl.Text = \"Description: \" + _patchFile.desc;\n\t\t\tpatchesLbl.Text = \"Patches: \" + _patchFile.patchCount.ToString(\"0,0\");\n\t\t\tPatch p = _patchFile.patches[(int)upDown.Value];\n\t\t\tUpdateImage(p);\t\t\n\t\t\tif( p.data != null )\n\t\t\t\ttextBox.Lines = FormatString(p.data, p.data.Length);\n\t\t\tfileidLbl.Text = \"FileID: \" + p.fileID.ToString(\"X2\");\n\t\t\tblockidLbl.Text = \"BlockID: \" + p.blockID.ToString(\"X2\");\n\t\t\textraLbl.Text = \"Extra: \" + p.extra.ToString(\"X2\");\n\t\t\tlengthLbl.Text = \"Length: \" + p.length.ToString();\n\t\t\tInvalidate();\t\n\t\t}\n\t\tpublic MainForm()\n\t\t{\n\t\t\tInitializeComponent();\n\t\t}\n\t\tprivate void openToolStripMenuItem_Click(object sender, EventArgs e)\n\t\t{\n\t\t\topenFileDialog.Title = \"Select a file to open\";\n\t\t\topenFileDialog.CheckFileExists = false;\n\t\t\tif( openFileDialog.ShowDialog() == DialogResult.OK )\n\t\t\t{\n\t\t\t\tBinaryReader reader = new BinaryReader(File.OpenRead(openFileDialog.FileName));\n\t\t\t\t_patchFile = new PatchFile();\n\t\t\t\tint read = reader.ReadInt32();\n\t\t\t\tif( read != 0x504f554d )\n\t\t\t\t{\n\t\t\t\t\tMessageBox.Show(\"Invalid MUO file\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treader.ReadInt32();\n\t\t\t\tstring temp = \"\";\n\t\t\t\tbyte b = 0;\n\t\t\t\twhile( ( b = reader.ReadByte() ) != 0 )\n\t\t\t\t\ttemp = temp + ( (char)b );\n\t\t\t\t_patchFile.name = temp;\n\t\t\t\ttemp = \"\";\n\t\t\t\twhile( ( b = reader.ReadByte() ) != 0 )\n\t\t\t\t{\n\t\t\t\t\ttemp = temp + ( (char)b );\n\t\t\t\t}\n\t\t\t\t_patchFile.desc = temp;\n\t\t\t\ttemp = \"\";\n\t\t\t\twhile( ( b = reader.ReadByte() ) != 0 )\n\t\t\t\t{\n\t\t\t\t\ttemp = temp + ( (char)b );\n\t\t\t\t}\n\t\t\t\t_patchFile.author = temp;\n\t\t\t\tint count = reader.ReadInt32();\n\t\t\t\t_patchFile.patchCount = count;\n\t\t\t\t_patchFile.patches = new Patch[count];\n\t\t\t\tfor( int i = 0; i < count; i++ )\n\t\t\t\t{\n\t\t\t\t\tPatch patch = new Patch();\n\t\t\t\t\tpatch.fileID = reader.ReadInt32();\n\t\t\t\t\tpatch.blockID = reader.ReadInt32();\n\t\t\t\t\tpatch.extra = reader.ReadInt32();\n\t\t\t\t\tpatch.length = reader.ReadInt32();\n\t\t\t\t\tif (patch.length > 0)\n\t\t\t\t\t\tpatch.data = reader.ReadBytes(patch.length);\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tpatch.length = 0;\n\t\t\t\t\t\tpatch.data = new byte[0];\n\t\t\t\t\t}\n\t\t\t\t\t_patchFile.patches[i] = patch;\n\t\t\t\t}\n\t\t\t\tif( reader.BaseStream.Length != reader.BaseStream.Position )\n\t\t\t\t\tMessageBox.Show(\"More Data!\");\n\t\t\t\tUpdateForm(); \n\t\t\t}\n\t\t}\n\t\tprivate string[] FormatString(byte[] buffer, int length)\n\t\t{\n\t\t\tList<string> output = new List<string>();\n\t\t\toutput.Add(\"        0  1  2  3  4  5  6  7   8  9  A  B  C  D  E  F\");\n\t\t\toutput.Add(\"       -- -- -- -- -- -- -- --  -- -- -- -- -- -- -- --\");\n\t\t\tint byteIndex = 0;\n\t\t\tint whole = length >> 4;\n\t\t\tint rem = length & 0xF;\n\t\t\tfor( int i = 0; i < whole; ++i, byteIndex += 16 )\n\t\t\t{\n\t\t\t\tStringBuilder bytes = new StringBuilder(49);\n\t\t\t\tStringBuilder chars = new StringBuilder(16);\n\t\t\t\tfor( int j = 0; j < 16; ++j )\n\t\t\t\t{\n\t\t\t\t\tint c = buffer[( i * 16 ) + j];\n\t\t\t\t\tbytes.Append(c.ToString(\"X2\"));\n\t\t\t\t\tif( j != 7 )\n\t\t\t\t\t\tbytes.Append(' ');\n\t\t\t\t\telse\n\t\t\t\t\t\tbytes.Append(\"  \");\n\t\t\t\t\tif( c >= 0x20 && c < 0x80 )\n\t\t\t\t\t\tchars.Append((char)c);\n\t\t\t\t\telse\n\t\t\t\t\t\tchars.Append('.');\n\t\t\t\t}\n\t\t\t\toutput.Add(byteIndex.ToString(\"X4\") + \"   \" + bytes.ToString() + \"  \" + chars.ToString());\n\t\t\t}\n\t\t\tif( rem != 0 )\n\t\t\t{\n\t\t\t\tStringBuilder bytes = new StringBuilder(49);\n\t\t\t\tStringBuilder chars = new StringBuilder(rem);\n\t\t\t\tfor( int j = 0; j < 16; ++j )\n\t\t\t\t{\n\t\t\t\t\tif( j < rem )\n\t\t\t\t\t{\n\t\t\t\t\t\tint c = buffer[j];\n\t\t\t\t\t\tbytes.Append(c.ToString(\"X2\"));\n\t\t\t\t\t\tif( j != 7 )\n\t\t\t\t\t\t\tbytes.Append(' ');\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tbytes.Append(\"  \");\n\t\t\t\t\t\tif( c >= 0x20 && c < 0x80 )\n\t\t\t\t\t\t\tchars.Append((char)c);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tchars.Append('.');\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tbytes.Append(\"   \");\n\t\t\t\t}\n\t\t\t\toutput.Add(byteIndex.ToString(\"X4\") + \"   \" + bytes.ToString() + \"  \" + chars.ToString());\n\t\t\t}\n\t\t\tstring[] realOutput = new string[output.Count];\n\t\t\tfor( int i = 0; i < realOutput.Length; i++ )\n\t\t\t\trealOutput[i] = output[i].ToString();\t\t\n\t\t\treturn realOutput;\n\t\t}\n\t\tprivate void exitToolStripMenuItem_Click(object sender, EventArgs e)\n\t\t{\n\t\t\tClose();\n\t\t}\t\t\n\t\t\n\t\tprivate byte[] GetData(byte[] p, out int length)\n\t\t{\n\t\t\tint sec = (int)secUpDown.Value;\n\t\t\tif( p.Length / 512 < secUpDown.Value && p.Length % 512 == 0 )\n\t\t\t\tsec = p.Length / 512;\n\t\t\tif (sec < 0)\n\t\t\t{\n\t\t\t\tsecUpDown.Maximum = 0;\n\t\t\t\t_updateScreen = false;\n\t\t\t\tsecUpDown.Value = 0;\n\t\t\t\t_updateScreen = true;\n\t\t\t\tsec = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsecUpDown.Maximum = p.Length % 512 == 0 ? p.Length / 512 - 1 : p.Length / 512;\n\t\t\t\t_updateScreen = false;\n\t\t\t\tsecUpDown.Value = sec;\n\t\t\t\t_updateScreen = true;\n\t\t\t}\n\t\t\tlength = Math.Min(512, p.Length - ( sec * 512 ));\n\t\t\tbyte[] data = new byte[512];\n\t\t\tfor( int i = 0; i < length; i++ )\n\t\t\t\tdata[i] = p[i + sec * 512];\n\t\t\treturn data;\n\t\t}\n\t\tprivate void upDown_ValueChanged(object sender, EventArgs e)\n\t\t{\n\t\t\tPatch p = _patchFile.patches[(int)upDown.Value];\n\t\t\tint length;\n\t\t\tUpdateImage(p);\t\t\n\t\t\ttextBox.Lines = FormatString(GetData(p.data, out length), length);\n\t\t\tfileidLbl.Text = \"FileID: \" + p.fileID.ToString(\"X2\");\n\t\t\tblockidLbl.Text = \"BlockID: \" + p.blockID.ToString(\"X2\");\n\t\t\textraLbl.Text = \"Extra: \" + p.extra.ToString(\"X2\");\n\t\t\tlengthLbl.Text = \"Length: \" + p.length.ToString();\n\t\t\tInvalidate();\n\t\t}\n\t\tprivate void UpdateImage(Patch p)\n\t\t{\n\t\t\tif( _anim != null )\n\t\t\t\t_anim.Stop();\n\t\t\tswitch( p.fileID )\n\t\t\t{\n\t\t\t\tcase (int)FileID.GumpArt_mul:\n\t\t\t\t{\n\t\t\t\t\tpictureBox1.BackgroundImage = GetGump(p);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase (int)FileID.Art_mul:\n\t\t\t\t{\n\t\t\t\t\tif (p.blockID > 0x3FFF)\n\t\t\t\t\t\tpictureBox1.BackgroundImage = LoadStatic(new MemoryStream(p.data));\n\t\t\t\t\telse\n\t\t\t\t\t\tpictureBox1.BackgroundImage = LoadLand(new MemoryStream(p.data));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase (int)FileID.Anim_mul:\n\t\t\t\t{\n\t\t\t\t\t_anim = new Animation(pictureBox1, p);\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase (int)ExtendedFileID.GumpArt_mul:\n\t\t\t\t{\n\t\t\t\t\tpictureBox1.BackgroundImage = GetGump(p);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase (int)ExtendedFileID.Art_mul:\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tpictureBox1.BackgroundImage = LoadLand(new MemoryStream(p.data));\n\t\t\t\t\t}\n\t\t\t\t\tcatch\n\t\t\t\t\t{\n\t\t\t\t\t\tpictureBox1.BackgroundImage = LoadStatic(new MemoryStream(p.data));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase (int)ExtendedFileID.Anim_mul:\n\t\t\t\t{\n\t\t\t\t\t_anim = new Animation(pictureBox1, p);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t{\n\t\t\t\t\tpictureBox1.BackgroundImage = null;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprivate void secUpDown_ValueChanged(object sender, EventArgs e)\n\t\t{\n\t\t\tif( !_updateScreen )\n\t\t\t\treturn;\n\t\t\tint length;\n\t\t\tPatch p = _patchFile.patches[(int)upDown.Value];\n\t\t\ttextBox.Lines = FormatString(GetData(p.data, out length), length);\n\t\t}\n\t\tpublic unsafe static Bitmap GetGump(Patch p)\n\t\t{\n\t\t\tint length = p.length;\n\t\t\tint extra = p.extra;\t\t\t\n\t\t\tint width = ( extra >> 16 ) & 0xFFFF;\n\t\t\tint height = extra & 0xFFFF;\n\t\t\tBitmap bmp = new Bitmap(width, height, PixelFormat.Format16bppArgb1555);\n\t\t\tBitmapData bd = bmp.LockBits(new Rectangle(0, 0, width, height), ImageLockMode.WriteOnly, PixelFormat.Format16bppArgb1555);\n\t\t\tMemoryStream ms = new MemoryStream(p.data);\n\t\t\tBinaryReader bin = new BinaryReader(ms);\n\t\t\tint[] lookups = new int[height];\n\t\t\tint start = (int)bin.BaseStream.Position;\n\t\t\tfor( int i = 0; i < height; ++i )\n\t\t\t\tlookups[i] = start + ( bin.ReadInt32() * 4 );\n\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta )\n\t\t\t{\n\t\t\t\tbin.BaseStream.Seek(lookups[y], SeekOrigin.Begin);\n\t\t\t\tushort* cur = line;\n\t\t\t\tushort* end = line + bd.Width;\n\t\t\t\twhile( cur < end )\n\t\t\t\t{\n\t\t\t\t\tushort color = bin.ReadUInt16();\n\t\t\t\t\tushort* next = cur + bin.ReadUInt16();\n\t\t\t\t\tif( color == 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tcur = next;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcolor ^= 0x8000;\n\t\t\t\t\t\twhile( cur < next )\n\t\t\t\t\t\t\t*cur++ = color;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbmp.UnlockBits(bd);\n\t\t\tbin.Close();\n\t\t\treturn bmp;\n\t\t}\n\t\tprivate static unsafe Bitmap LoadStatic(Stream stream)\n\t\t{\n\t\t\tBinaryReader bin = new BinaryReader(stream);\n\t\t\tbin.ReadInt32();\n\t\t\tint width = bin.ReadInt16();\n\t\t\tint height = bin.ReadInt16();\n\t\t\tif( width <= 0 || height <= 0 )\n\t\t\t\treturn null;\n\t\t\tint[] lookups = new int[height];\n\t\t\tint start = (int)bin.BaseStream.Position + ( height * 2 );\n\t\t\tfor( int i = 0; i < height; ++i )\n\t\t\t\tlookups[i] = (int)( start + ( bin.ReadUInt16() * 2 ) );\n\t\t\tBitmap bmp = new Bitmap(width, height, PixelFormat.Format16bppArgb1555);\n\t\t\tBitmapData bd = bmp.LockBits(new Rectangle(0, 0, width, height), ImageLockMode.WriteOnly, PixelFormat.Format16bppArgb1555);\n", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "length": 1243, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "1ef3a11455a548ccc5b3fe424116b8593283921dec3bfc62"}
{"input": "", "context": "using System;\nusing Server.Targeting;\nusing Server.Items;\nusing Server.Network;\nusing Server.Multis;\nusing Server.Hiding.hide;\nusing Scripts.Skills.Utility.Hiding;\nnamespace Server.SkillHandlers\n{\n\tpublic class Hiding\n\t{\n        private static bool m_CombatOverride;\n        private static Timer timer;\n        public static bool CombatOverride\n\t\t{\n\t\t\tget{ return m_CombatOverride; }\n\t\t\tset{ m_CombatOverride = value; }\n\t\t}\n        public long m_StartHiding { get; set; }\n        public static void Initialize()\n\t\t{\n\t\t\tSkillInfo.Table[21].Callback = new SkillUseCallback( OnUse );\n\t\t}\n        private class HideTimer : Timer\n        {\n            private Mobile m;\n            TimeSpan returnTimer;\n            private int counter = 0;\n            public HideTimer(Mobile m, TimeSpan delay) : base(delay, delay, 3)\n            {\n                this.m = m;\n                Priority = TimerPriority.TwoFiftyMS;\n            }\n            \n            protected override void OnTick()\n            {\n                if (m == null || m.Deleted)\n                {\n                    this.Stop();\n                    return;\n                }\n                if (m.Spell != null)\n                {\n                    m.SendLocalizedMessage(501238); // You are busy doing something else and cannot hide.\n                    this.Stop();\n                    return;\n                }\n                if (Core.ML && m.Target != null)\n                {\n                    Targeting.Target.Cancel(m);\n                }\n                double bonus = 0.0;\n                BaseHouse house = BaseHouse.FindHouseAt(m);\n                if (house != null && house.IsFriend(m))\n                {\n                    bonus = 100.0;\n                }\n                else if (!Core.AOS)\n                {\n                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X - 1, m.Y, 127), m.Map, 16);\n                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X + 1, m.Y, 127), m.Map, 16);\n                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y - 1, 127), m.Map, 16);\n                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                    if (house != null)\n                        bonus = 50.0;\n                }\n                //int range = 18 - (int)(m.Skills[SkillName.Hiding].Value / 10);\n                int range = Math.Min((int)((100 - m.Skills[SkillName.Hiding].Value) / 2) + 8, 18);  //Cap of 18 not OSI-exact, intentional difference\n                bool badCombat = (!m_CombatOverride && m.Combatant != null && m.InRange(m.Combatant.Location, range) && m.Combatant.InLOS(m));\n                bool ok = (!badCombat /*&& m.CheckSkill( SkillName.Hiding, 0.0 - bonus, 100.0 - bonus )*/ );\n                /* old hiding system\n                if ( ok )\n                {\n                    if ( !m_CombatOverride )\n                    {\n                        foreach ( Mobile check in m.GetMobilesInRange( range ) )\n                        {\n                            if ( check.InLOS( m ) && check.Combatant == m )\n                            {\n                                badCombat = true;\n                                ok = false;\n                                break;\n                            }\n                        }\n                    }\n                    ok = ( !badCombat && m.CheckSkill( SkillName.Hiding, 0.0 - bonus, 100.0 - bonus ) );\n                }\n                */\n                //check if mobile is in warmode\n                if (ok)\n                {\n                    if (!m_CombatOverride)\n                    {\n                        if (m.Warmode == true)\n                        {\n                            badCombat = true;\n                            ok = false;\n                        }\n                    }\n                    ok = (!badCombat && m.CheckSkill(SkillName.Hiding, 0.0 - bonus, 100.0 - bonus));\n                }\n                if (badCombat)\n                {\n                    m.RevealingAction();\n                    m.LocalOverheadMessage(MessageType.Regular, 0x22, 501237); // You can't seem to hide right now.\n                    Stop();\n                    return;\n                }\n                else\n                {\n                    if (ok)\n                    {\n                        /*\n                        m.Hidden = true;\n                        m.Warmode = false;\n                        m.LocalOverheadMessage(MessageType.Regular, 0x1F4, 501240); // You have hidden yourself well.\n                        */\n                    }\n                    else\n                    {\n                        m.RevealingAction();\n                        m.LocalOverheadMessage(MessageType.Regular, 0x22, 501241); // You can't seem to hide here.\n                    }\n                    Stop();\n                    return;\n                }\n            }\n            public void Tick()\n            {\n                OnTick();\n            }\n        }\n        public static TimeSpan OnUse( Mobile m )\n\t\t{\n            \n            Hide hide = new HidingHide(m);\n            hide.TryToHide();\n            return TimeSpan.FromSeconds(0.25);\n\t\t}\n        private class HidingHide : Hide\n        {\n            private Mobile m;\n            public HidingHide( Mobile m ) : base( m )\n            {\n                this.m = m;\n            }\n            public override void OnHide()\n            {\n                if (m.Spell != null)\n                {\n                    m.SendLocalizedMessage(501238); // You are busy doing something else and cannot hide.\n                }\n                if (Core.ML && m.Target != null)\n                {\n                    Targeting.Target.Cancel(m);\n                }\n                double bonus = 0.0;\n                BaseHouse house = BaseHouse.FindHouseAt(m);\n                if (house != null && house.IsFriend(m))\n                {\n                    bonus = 100.0;\n                }\n                else if (!Core.AOS)\n                {\n                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X - 1, m.Y, 127), m.Map, 16);\n                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X + 1, m.Y, 127), m.Map, 16);\n                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y - 1, 127), m.Map, 16);\n", "answers": ["                    if (house == null)"], "length": 585, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "635e4f1dc48ffce9128bd8cbcd3ebbfe4e90b46737bedd94"}
{"input": "", "context": "#region License\n// Copyright (c) 2013, ClearCanvas Inc.\n// All rights reserved.\n// http://www.ClearCanvas.ca\n//\n// This file is part of the ClearCanvas RIS/PACS open source project.\n//\n// The ClearCanvas RIS/PACS open source project is free software: you can\n// redistribute it and/or modify it under the terms of the GNU General Public\n// License as published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// The ClearCanvas RIS/PACS open source project is distributed in the hope that it\n// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along with\n// the ClearCanvas RIS/PACS open source project.  If not, see\n// <http://www.gnu.org/licenses/>.\n#endregion\n#if\tUNIT_TESTS\n#pragma warning disable 1591,0419,1574,1587\nusing System;\nusing System.Collections.Generic;\nusing Macro.Common.Utilities;\nusing Macro.Dicom;\nusing Macro.Dicom.Iod;\nusing Macro.ImageViewer.StudyManagement;\nusing NUnit.Framework;\nnamespace Macro.ImageViewer.AdvancedImaging.Fusion.Tests\n{\n\t[TestFixture]\n\tpublic class FusionDisplaySetFactoryTests\n\t{\n\t\t[Test]\n\t\tpublic void TestNullCreation()\n\t\t{\n\t\t\tvar factory = new PETFusionDisplaySetFactory(PETFusionType.CT);\n\t\t\tvar displaySets = CreateDisplaySets(factory, Combine<ISopDataSource>());\n\t\t\ttry\n\t\t\t{\n\t\t\t\tAssert.IsEmpty(displaySets, \"Display set factories should not throw an exception if there is nothing to create.\");\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void TestPETAndCTFusion()\n\t\t{\n\t\t\tvar factory = new PETFusionDisplaySetFactory(PETFusionType.CT);\n\t\t\tvar seriesCT = CreateSopSeries(25, \"PatientA\", \"StudyA\", \"SeriesCT\", 1, \"FrameA\", Modality.CT);\n\t\t\tvar seriesPET = CreateSopSeries(25, \"PatientA\", \"StudyA\", \"SeriesPET\", 2, \"FrameA\", Modality.PT);\n\t\t\tvar displaySets = CreateDisplaySets(factory, Combine(seriesCT, seriesPET));\n\t\t\ttry\n\t\t\t{\n\t\t\t\tAssert.IsNotEmpty(displaySets, \"Fusion display sets should be created for trivially simple PET-CT data.\");\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t\tDispose(seriesCT, seriesPET);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void TestNoFusingWrongModality()\n\t\t{\n\t\t\tvar factory = new PETFusionDisplaySetFactory(PETFusionType.CT);\n\t\t\tvar seriesMR = CreateSopSeries(25, \"PatientA\", \"StudyA\", \"SeriesMR\", 1, \"FrameA\", Modality.MR);\n\t\t\tvar seriesPET = CreateSopSeries(25, \"PatientA\", \"StudyA\", \"SeriesPET\", 2, \"FrameA\", Modality.PT);\n\t\t\tvar displaySets = CreateDisplaySets(factory, Combine(seriesMR, seriesPET));\n\t\t\ttry\n\t\t\t{\n\t\t\t\tAssert.IsEmpty(displaySets, \"Fusion display sets should not be created for PET-MR using a PET-CT factory.\");\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t\tDispose(seriesMR, seriesPET);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void TestNoFusingInvalidModalities()\n\t\t{\n\t\t\tvar factory = new PETFusionDisplaySetFactory(PETFusionType.CT);\n\t\t\tvar seriesCT = CreateSopSeries(25, \"PatientA\", \"StudyA\", \"SeriesCT\", 1, \"FrameA\", Modality.CT);\n\t\t\tvar seriesMR = CreateSopSeries(25, \"PatientA\", \"StudyA\", \"SeriesMR\", 1, \"FrameA\", Modality.MR);\n\t\t\tvar displaySets = CreateDisplaySets(factory, Combine(seriesCT, seriesMR));\n\t\t\ttry\n\t\t\t{\n\t\t\t\tAssert.IsEmpty(displaySets, \"Fusion display sets should not be created between invalid modalities (e.g. CT and MR).\");\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t\tDispose(seriesCT, seriesMR);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void TestNoFusingDifferentStudies()\n\t\t{\n\t\t\tvar factory = new PETFusionDisplaySetFactory(PETFusionType.CT);\n\t\t\tvar seriesCT = CreateSopSeries(25, \"PatientA\", \"StudyA\", \"SeriesCT\", 1, \"FrameA\", Modality.CT);\n\t\t\tvar seriesPET = CreateSopSeries(25, \"PatientA\", \"StudyB\", \"SeriesPET\", 2, \"FrameA\", Modality.PT);\n\t\t\tvar displaySets = CreateDisplaySets(factory, Combine(seriesCT, seriesPET));\n\t\t\ttry\n\t\t\t{\n\t\t\t\tAssert.IsEmpty(displaySets, \"Fusion display sets should not be created for series in different studies.\");\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t\tDispose(seriesCT, seriesPET);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void TestNoFusingDifferentPatients()\n\t\t{\n\t\t\tvar factory = new PETFusionDisplaySetFactory(PETFusionType.CT);\n\t\t\tvar seriesCT = CreateSopSeries(25, \"PatientA\", \"StudyA\", \"SeriesCT\", 1, \"FrameA\", Modality.CT);\n\t\t\tvar seriesPET = CreateSopSeries(25, \"PatientB\", \"StudyB\", \"SeriesPET\", 2, \"FrameA\", Modality.PT);\n\t\t\tvar displaySets = CreateDisplaySets(factory, Combine(seriesCT, seriesPET));\n\t\t\ttry\n\t\t\t{\n\t\t\t\tAssert.IsEmpty(displaySets, \"Fusion display sets should not be created for series from different patients.\");\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t\tDispose(seriesCT, seriesPET);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void TestFusingDifferentFramesOfReference()\n\t\t{\n\t\t\tvar factory = new PETFusionDisplaySetFactory(PETFusionType.CT);\n\t\t\tvar seriesCT = CreateSopSeries(25, \"PatientA\", \"StudyA\", \"SeriesCT\", 1, \"FrameA\", Modality.CT);\n\t\t\tvar seriesPET = CreateSopSeries(25, \"PatientA\", \"StudyA\", \"SeriesPET\", 2, \"FrameB\", Modality.PT);\n\t\t\tvar displaySets = CreateDisplaySets(factory, Combine(seriesCT, seriesPET));\n\t\t\ttry\n\t\t\t{\n\t\t\t\tAssert.IsNotEmpty(displaySets, \"Fusion display sets should still be created even with different frames of reference.\");\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t\tDispose(seriesCT, seriesPET);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void TestPETFusionDisplaySetDescriptor()\n\t\t{\n\t\t\tStudyTree studyTree;\n\t\t\tvar factory = new PETFusionDisplaySetFactory(PETFusionType.CT);\n\t\t\tvar seriesCT = CreateSopSeries(25, \"PatientA\", \"StudyA\", \"SeriesCT\", 1, \"FrameA\", Modality.CT);\n\t\t\tvar seriesPET = CreateSopSeries(25, \"PatientA\", \"StudyA\", \"SeriesPET\", 2, \"FrameA\", Modality.PT);\n\t\t\tvar seriesPETCor = CreateSopSeries(25, \"PatientA\", \"StudyA\", \"SeriesPETCor\", 3, \"FrameA\", Modality.PT, true, false);\n\t\t\tvar displaySets = CreateDisplaySets(factory, Combine(seriesCT, seriesPET, seriesPETCor), out studyTree);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tAssert.AreEqual(2, displaySets.Count, \"There is only one valid combination of fuseable series.\");\n\t\t\t\t// Verify identity of fused series\n\t\t\t\tvar displaySet = CollectionUtils.SelectFirst(displaySets, d => ValidateFusionDisplaySetDescriptor(d.Descriptor, HashUid(\"SeriesCT\"), HashUid(\"SeriesPET\")));\n\t\t\t\tAssert.IsNotNull(displaySet, \"Could not find the uncorrected fusion series.\");\n\t\t\t\tAssert.IsFalse(((PETFusionDisplaySetDescriptor) displaySet.Descriptor).AttenuationCorrection, \"Uncorrected fusion series is incorrectly flagged as corrected.\");\n\t\t\t\tvar displaySetCor = CollectionUtils.SelectFirst(displaySets, d => ValidateFusionDisplaySetDescriptor(d.Descriptor, HashUid(\"SeriesCT\"), HashUid(\"SeriesPETCor\")));\n\t\t\t\tAssert.IsNotNull(displaySetCor, \"Could not find the corrected fusion series.\");\n\t\t\t\tAssert.IsTrue(((PETFusionDisplaySetDescriptor) displaySetCor.Descriptor).AttenuationCorrection, \"Corrected fusion series is incorrectly flagged as uncorrected.\");\n\t\t\t\tvar seriesCollection = CollectionUtils.FirstElement(CollectionUtils.FirstElement(studyTree.Patients).Studies).Series;\n\t\t\t\tvar ctSeries = CollectionUtils.SelectFirst(seriesCollection, s => s.SeriesDescription == \"SeriesCT\");\n\t\t\t\tvar petSeries = CollectionUtils.SelectFirst(seriesCollection, s => s.SeriesDescription == \"SeriesPET\");\n\t\t\t\tvar petCorSeries = CollectionUtils.SelectFirst(seriesCollection, s => s.SeriesDescription == \"SeriesPETCor\");\n\t\t\t\tvar expectedDescriptor = GetFusedDisplaySetName(ctSeries, petSeries, false);\n\t\t\t\tvar expectedDescriptorCor = GetFusedDisplaySetName(ctSeries, petCorSeries, true);\n\t\t\t\t// Validate the names of the display sets (this is what is shown on the context menu)\n\t\t\t\tAssert.AreEqual(expectedDescriptor, displaySet.Name, \"Name string differs for uncorrected display set.\");\n\t\t\t\tAssert.AreEqual(expectedDescriptorCor, displaySetCor.Name, \"Name string differs for corrected display set.\");\n\t\t\t}\n\t\t\tcatch (Exception)\n\t\t\t{\n\t\t\t\tif (displaySets.Count > 0)\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"Generated Display Sets ({0})\", displaySets.Count);\n\t\t\t\t\tforeach (var displaySet in displaySets)\n", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "length": 803, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "ecd48baa4a497babfba22d34a8573435473cc05532027f66"}
{"input": "", "context": "import os\nimport warnings\nimport numpy as np\nfrom photon_tools.io import timetag_parse, pt2_parse, metadata\ntime_ch_dtype = np.dtype([('time', 'u8'), ('chan', 'u1')])\ndef verify_monotonic(times, filename):\n    \"\"\" Verify that timestamps are monotonically increasing \"\"\"\n    if len(times) == 0: return\n    negatives = times[1:] <= times[:-1]\n    if np.count_nonzero(negatives) > 0:\n        indices = np.nonzero(negatives)\n        warnings.warn('%s: Found %d non-monotonic timestamps: photon indices %s' %\n                      (filename, np.count_nonzero(negatives), indices))\ndef verify_continuity(times, filename, gap_factor=1000):\n    \"\"\" Search for improbably long gaps in the photon stream \"\"\"\n    if len(times) == 0: return\n    tau = (times[-1] - times[0]) / len(times)\n    gaps = (times[1:] - times[:-1]) > gap_factor*tau\n    if np.count_nonzero(gaps) > 0:\n        msg = '%s: Found %d large gaps:\\n' % (filename, np.count_nonzero(gaps))\n        gap_starts, = np.nonzero(gaps)\n        for s in gap_starts:\n            msg += '    starting at %10d, ending at %10d, lasting %10d' % \\\n                   (times[s], times[s+1], times[s+1] - times[s])\n        warnings.warn(msg)\nclass InvalidChannel(ValueError):\n    def __init__(self, requested_channel, valid_channels=[]):\n        self.requested_channel = requested_channel\n        self.valid_channels = valid_channels\n    def __str__(self):\n        return \"Channel %s was requested but this file type only supports channels %s.\" \\\n            % (self.requested_channel, self.valid_channels)\nclass TimestampFile(object):\n    \"\"\"\n    Represents a timestamp file.\n    A timestamp file is a file containing a sequential set of integer\n    photon arrival timestamps taken in one or more channels.\n    \"\"\"\n    def __init__(self, filename, jiffy, valid_channels=None):\n        if valid_channels is None:\n            valid_channels = self.__class__.valid_channels\n        self._valid_channels = valid_channels\n        self._fname = filename\n        self._jiffy = jiffy\n    @classmethod\n    def extensions(self):\n        \"\"\"\n        A list of supported file extensions\n        \"\"\"\n        return []\n    @property\n    def jiffy(self):\n        \"\"\"\n        The timestamp resolution in seconds or ``None`` is unknown.\n        :returns: float\n        \"\"\"\n        return self._jiffy\n    @property\n    def valid_channels(self):\n        \"\"\"\n        The names of the channels of the file.\n        Note that not all of these will have timestamps.\n        :returns: list\n        \"\"\"\n        return self._valid_channels\n    @property\n    def metadata(self):\n        \"\"\"\n        Metadata describing the data set.\n        :returns: dictionary mapping string metadata names to values\n        \"\"\"\n        return self._metadata\n    @property\n    def name(self):\n        \"\"\" File name of timestamp file \"\"\"\n        return self._fname\n    def timestamps(self):\n        \"\"\"\n        Read the timestamp data for all channels of the file\n        :returns: An array of dtype :var:`time_ch_dtype` containing monotonically\n        increasing timestamps annotated with channel numbers.\n        \"\"\"\n        data = self._read_all()\n        verify_monotonic(data['time'], self._fname)\n        verify_continuity(data['time'], self._fname)\n        return data\n    def channel(self, channel):\n        \"\"\"\n        Read photon data for a channel of the file\n        :type channel: A valid channel name from :func:`valid_channels`.\n        :returns: An array of ``u8`` timestamps.\n        \"\"\"\n        self._validate_channel(channel)\n        data = self._read_channel(channel)\n        verify_monotonic(data, self._fname)\n        verify_continuity(data, self._fname)\n        return data\n    def _read_all(self):\n        \"\"\" Read the timestamps for all channels \"\"\"\n        raise NotImplementedError()\n    def _read_channel(self, channel):\n        \"\"\" Actually read the data of a channel \"\"\"\n        raise NotImplementedError()\n    def _validate_channel(self, channel):\n        \"\"\" A utility for implementations \"\"\"\n        if channel not in self.valid_channels:\n            raise InvalidChannel(channel, self.valid_channels)\nclass PicoquantFile(TimestampFile):\n    \"\"\" A Picoquant PT2 and PT3 timestamp file \"\"\"\n    valid_channels = [0,1,2,3]\n    extensions = ['pt2', 'pt3']\n    def __init__(self, fname):\n        # TODO: Read metadata\n        TimestampFile.__init__(self, fname, jiffy=4e-12)\n    def _read_all(self):\n        raise NotImplementedError()\n    def _read_channel(self, channel):\n        return pt2_parse.read_pt2(self._fname, channel)\nclass TimetagFile(TimestampFile):\n    \"\"\" A timestamp file from the Goldner lab FPGA timetagger \"\"\"\n    extensions = ['timetag']\n    valid_channels = [0,1,2,3]\n    def __init__(self, fname):\n        TimestampFile.__init__(self, fname, jiffy = None)\n        self._metadata = metadata.get_metadata(fname)\n        if self.metadata is not None:\n            self._jiffy = 1. / self.metadata['clockrate']\n        if not os.path.isfile(fname):\n            raise IOError(\"File %s does not exist\" % fname)\n    def _read_all(self):\n        res = timetag_parse.get_strobe_events(self._fname, 0xf)\n        res.dtype.names = time_ch_dtype.names\n        return res\n    def _read_channel(self, channel):\n        return timetag_parse.get_strobe_events(self._fname, 1<<channel)['t']\nclass RawFile(TimestampFile):\n    \"\"\" Raw unsigned 64-bit timestamps \"\"\"\n    extensions = ['times']\n    valid_channels = [0]\n    def __init__(self, fname):\n        TimestampFile.__init__(self, fname, jiffy = None)\n    def _read_all(self):\n        timestamps = np.fromfile(self._fname, dtype='u8')\n        return np.from_records([timestamps, np.zeros_like(timestamps, dtype='u1')],\n                               dtype=time_ch_dtype)\n    def _read_channel(self, channel):\n        return np.fromfile(self._fname, dtype='u8')\nclass RawChFile(TimestampFile):\n    \"\"\" Raw unsigned 64-bit timestamps, followed by 8-bit channel number \"\"\"\n    extensions = ['timech']\n    valid_channels = range(256)\n    def __init__(self, fname):\n        TimestampFile.__init__(self, fname, jiffy = None)\n    def _read_all(self):\n        return np.fromfile(self._fname, dtype=time_ch_dtype)\n    def _read_channel(self, channel):\n        d = self._read_all()\n        return d[d['chan'] == channel]['time']\nreaders = [\n    PicoquantFile,\n    TimetagFile,\n    RawFile,\n    RawChFile,\n]\ndef supported_extensions():\n    \"\"\"\n    A dictionary mapping supported file extensions to their associated\n    :class:`TimestampFile` class.\n    \"\"\"\n    extensions = {}\n    for reader in readers:\n        for ext in reader.extensions:\n            extensions[ext] = reader\n    return extensions\ndef find_reader(fname):\n", "answers": ["    exts = supported_extensions()"], "length": 653, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "61d1532f1b1f27850e6b4a51d10754f0cd32ef74d49068e3"}
{"input": "", "context": "/* -*- tab-width: 4 -*-\n *\n * Electric(tm) VLSI Design System\n *\n * File: CellChangeJobs.java\n *\n * Copyright (c) 2006 Sun Microsystems and Static Free Software\n *\n * Electric(tm) is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * Electric(tm) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Electric(tm); see the file COPYING.  If not, write to\n * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n * Boston, Mass 02111-1307, USA.\n */\npackage com.sun.electric.tool.user;\nimport com.sun.electric.database.IdMapper;\nimport com.sun.electric.database.ImmutableArcInst;\nimport com.sun.electric.database.geometry.EGraphics;\nimport com.sun.electric.database.geometry.EPoint;\nimport com.sun.electric.database.geometry.GenMath;\nimport com.sun.electric.database.geometry.Orientation;\nimport com.sun.electric.database.hierarchy.Cell;\nimport com.sun.electric.database.hierarchy.Export;\nimport com.sun.electric.database.hierarchy.Library;\nimport com.sun.electric.database.hierarchy.View;\nimport com.sun.electric.database.id.CellId;\nimport com.sun.electric.database.prototype.NodeProto;\nimport com.sun.electric.database.text.Name;\nimport com.sun.electric.database.topology.ArcInst;\nimport com.sun.electric.database.topology.Geometric;\nimport com.sun.electric.database.topology.NodeInst;\nimport com.sun.electric.database.topology.PortInst;\nimport com.sun.electric.database.variable.ElectricObject;\nimport com.sun.electric.database.variable.TextDescriptor;\nimport com.sun.electric.database.variable.UserInterface;\nimport com.sun.electric.technology.ArcProto;\nimport com.sun.electric.technology.technologies.Artwork;\nimport com.sun.electric.technology.technologies.Generic;\nimport com.sun.electric.tool.Job;\nimport com.sun.electric.tool.JobException;\nimport com.sun.electric.tool.user.ui.EditWindow;\nimport com.sun.electric.tool.user.ui.WindowContent;\nimport com.sun.electric.tool.user.ui.WindowFrame;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Point2D;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n/**\n * Class for Jobs that make changes to the cells.\n */\npublic class CellChangeJobs\n{\n\t// constructor, never used\n\tprivate CellChangeJobs() {}\n\t/****************************** DELETE A CELL ******************************/\n\t/**\n\t * Class to delete a cell in a new thread.\n\t */\n\tpublic static class DeleteCell extends Job\n\t{\n\t\tCell cell;\n\t\tpublic DeleteCell(Cell cell)\n\t\t{\n\t\t\tsuper(\"Delete \" + cell, User.getUserTool(), Job.Type.CHANGE, null, null, Job.Priority.USER);\n\t\t\tthis.cell = cell;\n\t\t\tstartJob();\n\t\t}\n\t\tpublic boolean doIt() throws JobException\n\t\t{\n\t\t\t// check cell usage once more\n\t\t\tif (cell.isInUse(\"delete\", false, true)) return false;\n\t\t\tcell.kill();\n\t\t\treturn true;\n\t\t}\n\t}\n\t/**\n\t * This class implement the command to delete a list of cells.\n\t */\n\tpublic static class DeleteManyCells extends Job\n\t{\n\t\tprivate List<Cell> cellsToDelete;\n\t\tpublic DeleteManyCells(List<Cell> cellsToDelete)\n\t\t{\n\t\t\tsuper(\"Delete Multiple Cells\", User.getUserTool(), Job.Type.CHANGE, null, null, Job.Priority.USER);\n\t\t\tthis.cellsToDelete = cellsToDelete;\n\t\t\tstartJob();\n\t\t}\n\t\tpublic boolean doIt() throws JobException\n\t\t{\n\t\t\t// iteratively delete, allowing cells in use to be deferred\n\t\t\tboolean didDelete = true;\n\t\t\twhile (didDelete)\n\t\t\t{\n\t\t\t\tdidDelete = false;\n\t\t\t\tfor (int i=0; i<cellsToDelete.size(); i++)\n\t\t\t\t{\n\t\t\t\t\tCell cell = cellsToDelete.get(i);\n\t\t\t\t\t// if the cell is in use, defer\n\t\t\t\t\tif (cell.isInUse(null, true, true)) continue;\n\t\t\t\t\t// cell not in use: remove it from the list and delete it\n\t\t\t\t\tcellsToDelete.remove(i);\n\t\t\t\t\ti--;\n\t\t\t\t\tSystem.out.println(\"Deleting \" + cell);\n\t\t\t\t\tcell.kill();\n\t\t\t\t\tdidDelete = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// warn about remaining cells that were in use\n\t\t\tfor(Cell cell : cellsToDelete)\n\t\t\t\tcell.isInUse(\"delete\", false, true);\n\t\t\treturn true;\n\t\t}\n\t\tpublic void terminateOK()\n\t\t{\n\t\t\tSystem.out.println(\"Deleted \" + cellsToDelete.size() + \" cells\");\n\t\t\tEditWindow.repaintAll();\n\t\t}\n\t}\n\t/****************************** RENAME CELLS ******************************/\n\t/**\n\t * Class to rename a cell in a new thread.\n\t */\n\tpublic static class RenameCell extends Job\n\t{\n\t\tprivate Cell cell;\n\t\tprivate String newName;\n\t\tprivate String newGroupCell;\n\t\tprivate IdMapper idMapper;\n\t\tpublic RenameCell(Cell cell, String newName, String newGroupCell)\n\t\t{\n\t\t\tsuper(\"Rename \" + cell, User.getUserTool(), Job.Type.CHANGE, null, null, Job.Priority.USER);\n\t\t\tthis.cell = cell;\n\t\t\tthis.newName = newName;\n\t\t\tthis.newGroupCell = newGroupCell;\n\t\t\tstartJob();\n\t\t}\n\t\tpublic boolean doIt() throws JobException\n\t\t{\n\t\t\tidMapper = cell.rename(newName, newGroupCell);\n\t\t\tfieldVariableChanged(\"idMapper\");\n\t\t\treturn true;\n\t\t}\n\t\tpublic void terminateOK()\n\t\t{\n\t\t\tUser.fixStaleCellReferences(idMapper);\n\t\t}\n\t}\n\t/**\n\t * Class to rename a cell in a new thread.\n\t */\n\tpublic static class DeleteCellGroup extends Job\n\t{\n\t\tList<Cell> cells;\n\t\tpublic DeleteCellGroup(Cell.CellGroup group)\n\t\t{\n\t\t\tsuper(\"Delete Cell Group\", User.getUserTool(), Job.Type.CHANGE, null, null, Job.Priority.USER);\n\t\t\tcells = new ArrayList<Cell>();\n\t\t\tfor(Iterator<Cell> it = group.getCells(); it.hasNext(); )\n\t\t\t{\n\t\t\t\tcells.add(it.next());\n\t\t\t}\n\t\t\tstartJob();\n\t\t}\n\t\tpublic boolean doIt() throws JobException\n\t\t{\n\t\t\tfor(Cell cell : cells)\n\t\t\t{\n\t\t\t\t// Doesn't check cells in the same group\n\t\t\t\t// check cell usage once more\n\t\t\t\tif (cell.isInUse(\"delete\", false, false))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Now real delete\n\t\t\tfor(Cell cell : cells)\n\t\t\t{\n\t\t\t\tcell.kill();\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\t/**\n\t * Class to rename a cell in a new thread.\n\t */\n\tpublic static class RenameCellGroup extends Job\n\t{\n\t\tCell cellInGroup;\n\t\tString newName;\n\t\tpublic RenameCellGroup(Cell cellInGroup, String newName)\n\t\t{\n\t\t\tsuper(\"Rename Cell Group\", User.getUserTool(), Job.Type.CHANGE, null, null, Job.Priority.USER);\n\t\t\tthis.cellInGroup = cellInGroup;\n\t\t\tthis.newName = newName;\n\t\t\tstartJob();\n\t\t}\n\t\tpublic boolean doIt() throws JobException\n\t\t{\n\t\t\t// see if all cells in the group have the same name\n\t\t\tboolean allSameName = true;\n\t\t\tString lastName = null;\n\t\t\tfor(Iterator<Cell> it = cellInGroup.getCellGroup().getCells(); it.hasNext(); )\n\t\t\t{\n\t\t\t\tString cellName = it.next().getName();\n\t\t\t\tif (lastName != null && !lastName.equals(cellName))\n\t\t\t\t{\n\t\t\t\t\tallSameName = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlastName = cellName;\n\t\t\t}\n\t\t\tList<Cell> cells = new ArrayList<Cell>();\n\t\t\tfor(Iterator<Cell> it = cellInGroup.getCellGroup().getCells(); it.hasNext(); )\n\t\t\t\tcells.add(it.next());\n\t\t\tString newGroupCell = null;\n\t\t\tfor(Cell cell : cells)\n\t\t\t{\n\t\t\t\tif (allSameName)\n\t\t\t\t{\n\t\t\t\t\tcell.rename(newName, newName);\n\t\t\t\t} else\n\t\t\t\t{\n\t\t\t\t\tif (newGroupCell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"Renaming is not possible because cells in group don't have same root name.\");\n\t\t\t\t\t\tSystem.out.println(\"'\" + newName + \"' was added as prefix.\");\n\t\t\t\t\t\tnewGroupCell = newName + cell.getName();\n\t\t\t\t\t}\n\t\t\t\t\tcell.rename(newName+cell.getName(), newGroupCell);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\t/****************************** SHOW CELLS GRAPHICALLY ******************************/\n\t/**\n\t * This class implement the command to make a graph of the cells.\n\t */\n\tpublic static class GraphCells extends Job\n\t{\n\t\tprivate static final double TEXTHEIGHT = 2;\n\t\tprivate Cell top;\n\t\tprivate Cell graphCell;\n\t\tprivate static class GraphNode\n\t\t{\n\t\t\tString    name;\n\t\t\tint       depth;\n\t\t\tint       clock;\n\t\t\tdouble    x, y;\n\t\t\tdouble    yoff;\n\t\t\tNodeInst  pin;\n\t\t\tNodeInst  topPin;\n\t\t\tNodeInst  botPin;\n\t\t\tGraphNode main;\n\t\t}\n\t\tpublic GraphCells(Cell top)\n\t\t{\n\t\t\tsuper(\"Graph Cells\", User.getUserTool(), Job.Type.CHANGE, null, null, Job.Priority.USER);\n\t\t\tthis.top = top;\n\t\t\tstartJob();\n\t\t}\n\t\tpublic boolean doIt() throws JobException\n\t\t{\n\t\t\t// create the graph cell\n\t\t\tgraphCell = Cell.newInstance(Library.getCurrent(), \"CellStructure\");\n\t\t\tfieldVariableChanged(\"graphCell\");\n\t\t\tif (graphCell == null) return false;\n\t\t\tif (graphCell.getNumVersions() > 1)\n\t\t\t\tSystem.out.println(\"Creating new version of cell: \" + graphCell.getName()); else\n\t\t\t\t\tSystem.out.println(\"Creating cell: \" + graphCell.getName());\n\t\t\t// create GraphNodes for every cell and initialize the depth to -1\n\t\t\tMap<Cell,GraphNode> graphNodes = new HashMap<Cell,GraphNode>();\n\t\t\tfor(Iterator<Library> it = Library.getLibraries(); it.hasNext(); )\n\t\t\t{\n\t\t\t\tLibrary lib = it.next();\n\t\t\t\tif (lib.isHidden()) continue;\n\t\t\t\tfor(Iterator<Cell> cIt = lib.getCells(); cIt.hasNext(); )\n\t\t\t\t{\n\t\t\t\t\tCell cell = cIt.next();\n\t\t\t\t\tGraphNode cgn = new GraphNode();\n\t\t\t\t\tcgn.name = cell.describe(false);\n\t\t\t\t\tcgn.depth = -1;\n\t\t\t\t\tgraphNodes.put(cell, cgn);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// find all top-level cells\n\t\t\tint maxDepth = 0;\n\t\t\tif (top != null)\n\t\t\t{\n\t\t\t\tGraphNode cgn = graphNodes.get(top);\n\t\t\t\tcgn.depth = 0;\n\t\t\t} else\n\t\t\t{\n\t\t\t\tfor(Iterator<Cell> cIt = Library.getCurrent().getCells(); cIt.hasNext(); )\n\t\t\t\t{\n\t\t\t\t\tCell cell = cIt.next();\n\t\t\t\t\tif (cell.getNumUsagesIn() == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.depth = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdouble xScale = 2.0 / 3.0;\n\t\t\tdouble yScale = 20;\n\t\t\tdouble yOffset = TEXTHEIGHT * 1.25;\n\t\t\tdouble maxWidth = 0;\n\t\t\t// now place all cells at their proper depth\n\t\t\tboolean more = true;\n\t\t\twhile (more)\n\t\t\t{\n\t\t\t\tmore = false;\n\t\t\t\tfor(Iterator<Library> it = Library.getLibraries(); it.hasNext(); )\n\t\t\t\t{\n\t\t\t\t\tLibrary lib = it.next();\n\t\t\t\t\tif (lib.isHidden()) continue;\n\t\t\t\t\tfor(Iterator<Cell> cIt = lib.getCells(); cIt.hasNext(); )\n\t\t\t\t\t{\n\t\t\t\t\t\tCell cell = cIt.next();\n", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "length": 1113, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "fa98e25097942caf06cc9c4f3a8f47e7fb90868e2997af7b"}
{"input": "", "context": "/* \n    Z80 Virtual Machine\n    Copyright (C) 2008 - 2012 Leonid Gordo\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nusing System;\nusing System.Drawing;\nusing System.Windows.Forms;\nusing System.IO;\nnamespace Z80VM\n{\n    public partial class Form1 : Form\n    {\n       public Bitmap bmp = new Bitmap(256, 192);\n        \n        public Form1()\n        {\n            InitializeComponent();\n            pictureBox1.BackgroundImageLayout = ImageLayout.Zoom;\n            ClientSize = new Size(256 * 2 + 80, 192 * 2 + 80);\n            pictureBox1.Size = new Size(256 * 2, 192 * 2);\n            resize();\n            if (Program.size == 48)\n            {\n                k48ToolStripMenuItem.Checked = true;\n                k128ToolStripMenuItem.Checked = false;\n            }\n            else\n            {\n                k48ToolStripMenuItem.Checked = false;\n                k128ToolStripMenuItem.Checked = true;\n            }\n            pictureBox1.BackgroundImage = bmp;\n        }\n        public void SetImage()\n        {\n           // this.pictureBox1.BackgroundImage = this.bmp;\n            pictureBox1.Refresh();\n        }\n        private void exitToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            Close();\n        }\n        private void OnClose(object sender, FormClosingEventArgs e)\n        {\n            Program.go = false;\n        }\n        private void OnKeyPress(object sender, KeyPressEventArgs e)\n        {\n        }\n        private void OnKeyDown(object sender, KeyEventArgs e)\n        {\n            int keyCode = (int)e.KeyCode;\n            int shift = (int)e.KeyData / 0x10000;\n            if ((shift & 4) != 0) return;\n            doKey(true, keyCode, (short)shift);\n        }\n        public bool doKey(bool down, int ascii, short mods)\n        {\n\t\t\n            bool CAPS, SYMB;\n\t\t\n\t\t    CAPS = (mods & 1) != 0;\n\t\t    SYMB = (mods & 2) != 0;\n    \t\t\n\t\t    // Change control versions of keys to lower case\n\t\t    if ((ascii >= 1) & (ascii <= 0x27) & SYMB)\n\t\t\t    ascii = ascii + 97 - 1;\n    \t\t\n    \t\t\n\t\t    if (CAPS) Program.keyCAPS_V = (Program.keyCAPS_V & (~1)); else Program.keyCAPS_V = (Program.keyCAPS_V | 1);\n\t\t    if (SYMB) Program.keyB_SPC = (Program.keyB_SPC & (~2)); else Program.keyB_SPC = (Program.keyB_SPC | 2);\n    \t\t\n\t\t    switch(ascii) {\n\t\t\t    case 8: // Backspace\n\t\t\t\t    if (down) {\n\t\t\t\t\t    Program.key6_0 = (Program.key6_0 & (~ 1));\n\t\t\t\t\t    Program.keyCAPS_V = (Program.keyCAPS_V & (~ 1));\n\t\t\t\t    }else {\n\t\t\t\t\t    Program.key6_0 = (Program.key6_0 | 1);\n\t\t\t\t\t    if (!CAPS)\n\t\t\t\t\t\t    Program.keyCAPS_V = (Program.keyCAPS_V | 1);\t\t\t\t\t\n\t\t\t\t    }\n                    break;\n\t\t\t    case 65: // A\n\t\t\t\t    if (down) Program.keyA_G = (Program.keyA_G & (~ 1)); else Program.keyA_G = (Program.keyA_G | 1);\n                    break;\n\t\t\t    case 66: // B\n\t\t\t\t    if (down )  Program.keyB_SPC = (Program.keyB_SPC & (~ 16)) ; else Program.keyB_SPC = (Program.keyB_SPC | 16);\n                    break;\n\t\t\t    case 67: // C\n\t\t\t\t    if (down )  Program.keyCAPS_V = (Program.keyCAPS_V & (~ 8)) ; else Program.keyCAPS_V = (Program.keyCAPS_V | 8);\n                    break;\n\t\t\t    case 68: // D\n\t\t\t\t    if (down )  Program.keyA_G = (Program.keyA_G & (~ 4)) ; else Program.keyA_G = (Program.keyA_G | 4);\n                    break;\n\t\t\t    case 69: // E\n\t\t\t\t    if (down )  Program.keyQ_T = (Program.keyQ_T & (~ 4)) ; else Program.keyQ_T = (Program.keyQ_T | 4);\n                    break;\n\t\t\t    case 70: // F\n\t\t\t\t    if (down )  Program.keyA_G = (Program.keyA_G & (~ 8)) ; else Program.keyA_G = (Program.keyA_G | 8);\n                    break;\n\t\t\t    case 71: // G\n\t\t\t\t    if (down )  Program.keyA_G = (Program.keyA_G & (~ 16)) ; else Program.keyA_G = (Program.keyA_G | 16);\n                    break;\n\t\t\t    case 72: // H\n\t\t\t\t    if (down )  Program.keyH_ENT = (Program.keyH_ENT & (~ 16)) ; else Program.keyH_ENT = (Program.keyH_ENT | 16);\n                    break;\n\t\t\t    case 73: // I\n\t\t\t\t    if (down )  Program.keyY_P = (Program.keyY_P & (~ 4)) ; else Program.keyY_P = (Program.keyH_ENT | 4);\n                    break;\n\t\t\t    case 74: // J\n\t\t\t\t    if (down )  Program.keyH_ENT = (Program.keyH_ENT & (~ 8)) ; else Program.keyH_ENT = (Program.keyH_ENT | 8);\n                    break;\n\t\t\t    case 75: // K\n\t\t\t\t    if (down )  Program.keyH_ENT = (Program.keyH_ENT & (~ 4)) ; else Program.keyH_ENT = (Program.keyH_ENT | 4);\n                    break;\n\t\t\t    case 76: // L\n\t\t\t\t    if (down )  Program.keyH_ENT = (Program.keyH_ENT & (~ 2)) ; else Program.keyH_ENT = (Program.keyH_ENT | 2);\n                    break;\n\t\t\t    case 77: // M\n\t\t\t\t    if (down )  Program.keyB_SPC = (Program.keyB_SPC & (~ 4)) ; else Program.keyB_SPC = (Program.keyB_SPC | 4);\n                    break;\n\t\t\t    case 78: // N\n\t\t\t\t    if (down )  Program.keyB_SPC = (Program.keyB_SPC & (~ 8)) ; else Program.keyB_SPC = (Program.keyB_SPC | 8);\n                    break;\n\t\t\t    case 79: // O\n\t\t\t\t    if (down )  Program.keyY_P = (Program.keyY_P & (~ 2)) ; else Program.keyY_P = (Program.keyY_P | 2);\n                    break;\n\t\t\t    case 80: // P\n\t\t\t\t    if (down )  Program.keyY_P = (Program.keyY_P & (~ 1)) ; else Program.keyY_P = (Program.keyY_P | 1);\n                    break;\n\t\t\t    case 81: // Q\n\t\t\t\t    if (down )  Program.keyQ_T = (Program.keyQ_T & (~ 1)) ; else Program.keyQ_T = (Program.keyQ_T | 1);\n                    break;\n\t\t\t    case 82: // R\n\t\t\t\t    if (down )  Program.keyQ_T = (Program.keyQ_T & (~ 8)) ; else Program.keyQ_T = (Program.keyQ_T | 8);\n                    break;\n\t\t\t    case 83: // S\n\t\t\t\t    if (down )  Program.keyA_G = (Program.keyA_G & (~ 2)) ; else Program.keyA_G = (Program.keyA_G | 2);\n                    break;\n\t\t\t    case 84: // T\n\t\t\t\t    if (down )  Program.keyQ_T = (Program.keyQ_T & (~ 16)) ; else Program.keyQ_T = (Program.keyQ_T | 16);\n                    break;\n\t\t\t    case 85: // U\n\t\t\t\t    if (down )  Program.keyY_P = (Program.keyY_P & (~ 8)) ; else Program.keyY_P = (Program.keyY_P | 8);\n                    break;\n\t\t\t    case 86: // V\n\t\t\t\t    if (down )  Program.keyCAPS_V = (Program.keyCAPS_V & (~ 16)) ; else Program.keyCAPS_V = (Program.keyCAPS_V | 16);\n                    break;\n\t\t\t    case 87: // W\n\t\t\t\t    if (down )  Program.keyQ_T = (Program.keyQ_T & (~ 2)) ; else Program.keyQ_T = (Program.keyQ_T | 2);\n                    break;\n\t\t\t    case 88: // X\n\t\t\t\t    if (down )  Program.keyCAPS_V = (Program.keyCAPS_V & (~ 4)) ; else Program.keyCAPS_V = (Program.keyCAPS_V | 4);\n                    break;\n\t\t\t    case 90: // Y\n\t\t\t\t    if (down )  Program.keyCAPS_V = (Program.keyCAPS_V & (~ 2)) ; else Program.keyCAPS_V = (Program.keyCAPS_V | 2);\n                    break;\n\t\t\t    case 89: // Z\n\t\t\t\t    if (down )  Program.keyY_P = (Program.keyY_P & (~ 16)) ; else Program.keyY_P = (Program.keyY_P | 16);\n                    break;\n\t\t\t    case 48: // 0\n\t\t\t\t    if (down )  Program.key6_0 = (Program.key6_0 & (~ 1)) ; else Program.key6_0 = (Program.key6_0 | 1);\n                    break;\n\t\t\t    case 49: // 1\n\t\t\t\t    if (down )  Program.key1_5 = (Program.key1_5 & (~ 1)) ; else Program.key1_5 = (Program.key1_5 | 1);\n                    break;\n\t\t\t    case 50: // 2\n\t\t\t\t    if (down )  Program.key1_5 = (Program.key1_5 & (~ 2)) ; else Program.key1_5 = (Program.key1_5 | 2);\n                    break;\n\t\t\t    case 51: // 3\n\t\t\t\t    if (down )  Program.key1_5 = (Program.key1_5 & (~ 4)) ; else Program.key1_5 = (Program.key1_5 | 4);\n                    break;\n\t\t\t    case 52: // 4\n\t\t\t\t    if (down )  Program.key1_5 = (Program.key1_5 & (~ 8)) ; else Program.key1_5 = (Program.key1_5 | 8);\n                    break;\n\t\t\t    case 53: // 5\n\t\t\t\t    if (down )  Program.key1_5 = (Program.key1_5 & (~ 16)) ; else Program.key1_5 = (Program.key1_5 | 16);\n                    break;\n\t\t\t    case 54: // 6\n\t\t\t\t    if (down )  Program.key6_0 = (Program.key6_0 & (~ 16)) ; else Program.key6_0 = (Program.key6_0 | 16);\n                    break;\n\t\t\t    case 55: // 7\n\t\t\t\t    if (down )  Program.key6_0 = (Program.key6_0 & (~ 8)) ; else Program.key6_0 = (Program.key6_0 | 8);\n                    break;\n\t\t\t    case 56: // 8\n\t\t\t\t    if (down )  Program.key6_0 = (Program.key6_0 & (~ 4)) ; else Program.key6_0 = (Program.key6_0 | 4);\n                    break;\n\t\t\t    case 57: // 9\n\t\t\t\t    if (down )  Program.key6_0 = (Program.key6_0 & (~ 2)) ; else Program.key6_0 = (Program.key6_0 | 2);\n                    break;\n\t\t\t    case 96: // Keypad 0\n\t\t\t\t    if (down )  Program.key6_0 = (Program.key6_0 & (~ 1)) ; else Program.key6_0 = (Program.key6_0 | 1);\n                    break;\n\t\t\t    case 97: // Keypad 1\n\t\t\t\t    if (down )  Program.key1_5 = (Program.key1_5 & (~ 1)) ; else Program.key1_5 = (Program.key1_5 | 1);\n                    break;\n\t\t\t    case 98: // Keypad 2\n\t\t\t\t    if (down )  Program.key1_5 = (Program.key1_5 & (~ 2)) ; else Program.key1_5 = (Program.key1_5 | 2);\n                    break;\n\t\t\t    case 99: // Keypad 3\n\t\t\t\t    if (down )  Program.key1_5 = (Program.key1_5 & (~ 4)) ; else Program.key1_5 = (Program.key1_5 | 4);\n                    break;\n\t\t\t    case 100: // Keypad 4\n\t\t\t\t    if (down )  Program.key1_5 = (Program.key1_5 & (~ 8)) ; else Program.key1_5 = (Program.key1_5 | 8);\n                    break;\n\t\t\t    case 101: // Keypad 5\n\t\t\t\t    if (down )  Program.key1_5 = (Program.key1_5 & (~ 16)) ; else Program.key1_5 = (Program.key1_5 | 16);\n                    break;\n\t\t\t    case 102: // Keypad 6\n\t\t\t\t    if (down )  Program.key6_0 = (Program.key6_0 & (~ 16)) ; else Program.key6_0 = (Program.key6_0 | 16);\n                    break;\n\t\t\t    case 103: // Keypad 7\n\t\t\t\t    if (down )  Program.key6_0 = (Program.key6_0 & (~ 8)) ; else Program.key6_0 = (Program.key6_0 | 8);\n                    break;\n\t\t\t    case 104: // Keypad 8\n\t\t\t\t    if (down )  Program.key6_0 = (Program.key6_0 & (~ 4)) ; else Program.key6_0 = (Program.key6_0 | 4);\n                    break;\n\t\t\t    case 105: // Keypad 9\n\t\t\t\t    if (down )  Program.key6_0 = (Program.key6_0 & (~ 2)) ; else Program.key6_0 = (Program.key6_0 | 2);\n                    break;\n\t\t\t    case 106: // Keypad *\n\t\t\t\t    if (down ) \n\t\t\t\t\t    Program.keyB_SPC = (Program.keyB_SPC & ~(18));\n\t\t\t\t    else\n\t\t\t\t\t    if (SYMB ) \n\t\t\t\t\t\t    Program.keyB_SPC = (Program.keyB_SPC | 16);\n\t\t\t\t\t    else\n\t\t\t\t\t\t    Program.keyB_SPC = (Program.keyB_SPC | 18);\n                    break;\n\t\t\t    case 107: // Keypad +\n                    if (down)\n                    {\n                        Program.keyH_ENT = (Program.keyH_ENT & (~4));\n                        Program.keyB_SPC = (Program.keyB_SPC & (~2));\n                    }\n                    else\n                    {\n                        Program.keyH_ENT = (Program.keyH_ENT | 4);\n                        if (!SYMB)\n                            Program.keyB_SPC = (Program.keyB_SPC | 2);\n                    }\n                        break;\n\t\t\t    case 109: // Keypad -\n                    if (down)\n                    {\n                        Program.keyH_ENT = (Program.keyH_ENT & (~8));\n                        Program.keyB_SPC = (Program.keyB_SPC & (~2));\n                    }\n                    else\n                    {\n                        Program.keyH_ENT = (Program.keyH_ENT | 8);\n                        if (!SYMB)\n                            Program.keyB_SPC = (Program.keyB_SPC | 2);\n                    }\n                        break;\n\t\t\t    case 110: // Keypad .\n\t\t\t\t    if (down ) \n\t\t\t\t\t    Program.keyB_SPC = (Program.keyB_SPC & (~ 6));\n\t\t\t\t    else\n\t\t\t\t\t    if (SYMB ) \n\t\t\t\t\t\t    Program.keyB_SPC = (Program.keyB_SPC | 4);\n\t\t\t\t\t     else\n\t\t\t\t\t\t    Program.keyB_SPC = (Program.keyB_SPC | 6);\n                    break;\n\t\t\t    case 111: // Keypad /\n                    if (down)\n                    {\n                        Program.keyCAPS_V = (Program.keyCAPS_V & (~16));\n                        Program.keyB_SPC = (Program.keyB_SPC & (~2));\n                    }\n                    else\n                    {\n                        Program.keyCAPS_V = (Program.keyCAPS_V | 16);\n                        if (!SYMB)\n                            Program.keyB_SPC = (Program.keyB_SPC | 2);\n                    }\n                    break;\n\t\t\t    case 37: // Left\n                    if (down)\n                    {\n                        Program.key1_5 = (Program.key1_5 & (~16));\n                        Program.keyCAPS_V = (Program.keyCAPS_V & (~1));\n                    }\n                    else\n                    {\n                        Program.key1_5 = (Program.key1_5 | 16);\n                        if (!SYMB)\n                            Program.keyB_SPC = (Program.keyB_SPC | 2);\n                    }\n                    break;\n\t\t\t    case 38: // Up\n                    if (down)\n                    {\n                        Program.key6_0 = (Program.key6_0 & (~8));\n                        Program.keyCAPS_V = (Program.keyCAPS_V & (~1));\n                    }\n                    else\n                    {\n                        Program.key6_0 = (Program.key6_0 | 8);\n                        if (!CAPS)\n                            Program.keyCAPS_V = (Program.keyCAPS_V | 1);\n                    }\n                    break;\n\t\t\t    case 39: // Right\n                    if (down)\n                    {\n                        Program.key6_0 = (Program.key6_0 & (~4));\n                        Program.keyCAPS_V = (Program.keyCAPS_V & (~1));\n                    }\n                    else\n                    {\n                        Program.key6_0 = (Program.key6_0 | 4);\n                        if (!CAPS)\n                            Program.keyCAPS_V = (Program.keyCAPS_V | 1);\n                    }\n                    break;\n\t\t\t    case 40: // Down\n                    if (down)\n                    {\n                        Program.key6_0 = (Program.key6_0 & (~16));\n                        Program.keyCAPS_V = (Program.keyCAPS_V & (~1));\n                    }\n                    else\n                    {\n                        Program.key6_0 = (Program.key6_0 | 16);\n                        if (!CAPS)\n                            Program.keyCAPS_V = (Program.keyCAPS_V | 1);\n                    }\n                    break;\n\t\t\t    case 13: // RETURN\n\t\t\t\t    if (down )  Program.keyH_ENT = (Program.keyH_ENT & (~ 1)) ; else Program.keyH_ENT = (Program.keyH_ENT | 1);\n                    break;\n\t\t\t    case 32: // SPACE BAR\n\t\t\t\t    if (down )  Program.keyB_SPC = (Program.keyB_SPC & (~ 1)) ; else Program.keyB_SPC = (Program.keyB_SPC | 1);\n                    break;\n\t\t\t    case 187: // =/+ key\n\t\t\t\t    if (down ) {\n                        if (CAPS)\n                            Program.keyH_ENT = (Program.keyH_ENT & (~4));\n                        else\n                        {\n                            Program.keyH_ENT = (Program.keyH_ENT & (~2));\n                            Program.keyB_SPC = (Program.keyB_SPC & (~2));\n                            Program.keyCAPS_V = (Program.keyCAPS_V | 1);\n                        }\n                    }\n\t\t\t\t    else {\n\t\t\t\t\t    Program.keyH_ENT = (Program.keyH_ENT | 4);\n\t\t\t\t\t    Program.keyH_ENT = (Program.keyH_ENT | 2);\n\t\t\t\t\t    Program.keyB_SPC = (Program.keyB_SPC | 2);\n\t\t\t\t    }\n                    break;\n", "answers": ["\t\t\t    case 189: // -/_ key"], "length": 1748, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "01df75f64f2de91cabe668cb549a380cbc848055c7a057fd"}
{"input": "", "context": "#!/usr/bin/env python3\n\"\"\"Compute the auto and cross-correlation of delta fields for a list of IGM\nabsorption.\nThis module follow the procedure described in sections 4.3 of du Mas des\nBourboux et al. 2020 (In prep) to compute the distortion matrix\n\"\"\"\nimport time\nimport argparse\nimport multiprocessing\nfrom multiprocessing import Pool, Lock, cpu_count, Value\nfrom functools import partial\nimport numpy as np\nimport fitsio\nfrom picca import constants, cf, utils, io\nfrom picca.utils import userprint\ndef calc_metal_dmat(abs_igm1, abs_igm2, healpixs):\n    \"\"\"Computes the metal distortion matrix.\n    To optimize the computation, first compute a list of neighbours for each of\n    the healpix. This is an auxiliar function to split the computational load\n    using several CPUs.\n    Args:\n        abs_igm1: str\n            Name of the absorption in picca.constants defining the\n            redshift of the forest pixels\n        abs_igm2: str\n            Name of the second absorption in picca.constants defining the\n            redshift of the forest pixels\n        healpixs: array of ints\n            List of healpix numbers\n    Returns:\n        The distortion matrix data\n    \"\"\"\n    cf.fill_neighs(healpixs)\n    np.random.seed(healpixs[0])\n    dmat_data = cf.compute_metal_dmat(healpixs,\n                                      abs_igm1=abs_igm1,\n                                      abs_igm2=abs_igm2)\n    return dmat_data\ndef main():\n    # pylint: disable-msg=too-many-locals,too-many-branches,too-many-statements\n    \"\"\"Compute the auto and cross-correlation of delta fields for a list of IGM\n    absorption.\"\"\"\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n        description=('Compute the auto and cross-correlation of delta fields '\n                     'for a list of IGM absorption.'))\n    parser.add_argument('--out',\n                        type=str,\n                        default=None,\n                        required=True,\n                        help='Output file name')\n    parser.add_argument('--in-dir',\n                        type=str,\n                        default=None,\n                        required=True,\n                        help='Directory to delta files')\n    parser.add_argument('--in-dir2',\n                        type=str,\n                        default=None,\n                        required=False,\n                        help='Directory to 2nd delta files')\n    parser.add_argument('--rp-min',\n                        type=float,\n                        default=0.,\n                        required=False,\n                        help='Min r-parallel [h^-1 Mpc]')\n    parser.add_argument('--rp-max',\n                        type=float,\n                        default=200.,\n                        required=False,\n                        help='Max r-parallel [h^-1 Mpc]')\n    parser.add_argument('--rt-max',\n                        type=float,\n                        default=200.,\n                        required=False,\n                        help='Max r-transverse [h^-1 Mpc]')\n    parser.add_argument('--np',\n                        type=int,\n                        default=50,\n                        required=False,\n                        help='Number of r-parallel bins')\n    parser.add_argument('--nt',\n                        type=int,\n                        default=50,\n                        required=False,\n                        help='Number of r-transverse bins')\n    parser.add_argument(\n        '--coef-binning-model',\n        type=int,\n        default=1,\n        required=False,\n        help=('Coefficient multiplying np and nt to get finner binning for the '\n              'model'))\n    parser.add_argument(\n        '--z-cut-min',\n        type=float,\n        default=0.,\n        required=False,\n        help=('Use only pairs of forest x object with the mean of the last '\n              'absorber redshift and the object redshift larger than '\n              'z-cut-min'))\n    parser.add_argument(\n        '--z-cut-max',\n        type=float,\n        default=10.,\n        required=False,\n        help=('Use only pairs of forest x object with the mean of the last '\n              'absorber redshift and the object redshift smaller than '\n              'z-cut-max'))\n    parser.add_argument(\n        '--lambda-abs',\n        type=str,\n        default='LYA',\n        required=False,\n        help=('Name of the absorption in picca.constants defining the redshift '\n              'of the delta'))\n    parser.add_argument(\n        '--lambda-abs2',\n        type=str,\n        default=None,\n        required=False,\n        help=('Name of the absorption in picca.constants defining the redshift '\n              'of the 2nd delta'))\n    parser.add_argument(\n        '--abs-igm',\n        type=str,\n        default=[],\n        required=False,\n        nargs='*',\n        help=('List of names of metal absorption in picca.constants present in '\n              'forest'))\n    parser.add_argument(\n        '--abs-igm2',\n        type=str,\n        default=[],\n        required=False,\n        nargs='*',\n        help=('List of names of metal absorption in picca.constants present in '\n              '2nd forest'))\n    parser.add_argument('--z-ref',\n                        type=float,\n                        default=2.25,\n                        required=False,\n                        help='Reference redshift')\n    parser.add_argument(\n        '--z-evol',\n        type=float,\n        default=2.9,\n        required=False,\n        help='Exponent of the redshift evolution of the delta field')\n    parser.add_argument(\n        '--z-evol2',\n        type=float,\n        default=2.9,\n        required=False,\n        help='Exponent of the redshift evolution of the 2nd delta field')\n    parser.add_argument(\n        '--metal-alpha',\n        type=float,\n        default=1.,\n        required=False,\n        help='Exponent of the redshift evolution of the metal delta field')\n    parser.add_argument(\n        '--fid-Om',\n        type=float,\n        default=0.315,\n        required=False,\n        help='Omega_matter(z=0) of fiducial LambdaCDM cosmology')\n    parser.add_argument(\n        '--fid-Or',\n        type=float,\n        default=0.,\n        required=False,\n        help='Omega_radiation(z=0) of fiducial LambdaCDM cosmology')\n    parser.add_argument('--fid-Ok',\n                        type=float,\n                        default=0.,\n                        required=False,\n                        help='Omega_k(z=0) of fiducial LambdaCDM cosmology')\n    parser.add_argument(\n        '--fid-wl',\n        type=float,\n        default=-1.,\n        required=False,\n        help='Equation of state of dark energy of fiducial LambdaCDM cosmology')\n    parser.add_argument(\n        '--remove-same-half-plate-close-pairs',\n        action='store_true',\n        required=False,\n        help='Reject pairs in the first bin in r-parallel from same half plate')\n    parser.add_argument(\n        '--rej',\n        type=float,\n        default=1.,\n        required=False,\n        help=('Fraction of rejected forest-forest pairs: -1=no rejection, '\n              '1=all rejection'))\n    parser.add_argument('--nside',\n                        type=int,\n                        default=16,\n                        required=False,\n                        help='Healpix nside')\n    parser.add_argument('--nproc',\n                        type=int,\n                        default=None,\n                        required=False,\n                        help='Number of processors')\n    parser.add_argument('--nspec',\n                        type=int,\n                        default=None,\n                        required=False,\n                        help='Maximum number of spectra to read')\n    parser.add_argument(\n        '--unfold-cf',\n        action='store_true',\n        required=False,\n        help=('rp can be positive or negative depending on the relative '\n              'position between absorber1 and absorber2'))\n    args = parser.parse_args()\n    if args.nproc is None:\n        args.nproc = cpu_count() // 2\n    userprint(\"nproc\", args.nproc)\n    # setup variables in module cf\n    cf.r_par_max = args.rp_max\n    cf.r_trans_max = args.rt_max\n    cf.r_par_min = args.rp_min\n    cf.z_cut_max = args.z_cut_max\n    cf.z_cut_min = args.z_cut_min\n    cf.num_bins_r_par = args.np * args.coef_binning_model\n    cf.num_bins_r_trans = args.nt * args.coef_binning_model\n    cf.num_model_bins_r_par = args.np * args.coef_binning_model\n    cf.num_model_bins_r_trans = args.nt * args.coef_binning_model\n    cf.nside = args.nside\n    cf.z_ref = args.z_ref\n    cf.alpha = args.z_evol\n    cf.reject = args.rej\n    cf.lambda_abs = constants.ABSORBER_IGM[args.lambda_abs]\n    cf.remove_same_half_plate_close_pairs = args.remove_same_half_plate_close_pairs\n    cf.alpha_abs = {}\n    cf.alpha_abs[args.lambda_abs] = cf.alpha\n    for metal in args.abs_igm:\n        cf.alpha_abs[metal] = args.metal_alpha\n    # load fiducial cosmology\n    cf.cosmo = constants.Cosmo(Om=args.fid_Om,\n                               Or=args.fid_Or,\n                               Ok=args.fid_Ok,\n                               wl=args.fid_wl)\n    t0 = time.time()\n    ### Read data 1\n    data, num_data, z_min, z_max = io.read_deltas(args.in_dir,\n                                                  cf.nside,\n                                                  cf.lambda_abs,\n                                                  cf.alpha,\n                                                  cf.z_ref,\n                                                  cf.cosmo,\n                                                  max_num_spec=args.nspec)\n    del z_max\n    cf.data = data\n    cf.num_data = num_data\n    cf.ang_max = utils.compute_ang_max(cf.cosmo, cf.r_trans_max, z_min)\n    userprint(\"\")\n    userprint(\"done, npix = {}\".format(len(data)))\n    ### Read data 2\n    if args.in_dir2 or args.lambda_abs2:\n        if args.lambda_abs2 or args.unfold_cf:\n            cf.x_correlation = True\n        cf.alpha2 = args.z_evol2\n        if args.in_dir2 is None:\n            args.in_dir2 = args.in_dir\n        if args.lambda_abs2:\n            cf.lambda_abs2 = constants.ABSORBER_IGM[args.lambda_abs2]\n        else:\n            cf.lambda_abs2 = cf.lambda_abs\n        cf.alpha_abs[args.lambda_abs2] = cf.alpha2\n        for m in args.abs_igm2:\n            cf.alpha_abs[m] = args.metal_alpha\n        data2, num_data2, z_min2, z_max2 = io.read_deltas(\n            args.in_dir2,\n            cf.nside,\n            cf.lambda_abs2,\n            cf.alpha2,\n            cf.z_ref,\n            cf.cosmo,\n            max_num_spec=args.nspec)\n        del z_max2\n        cf.data2 = data2\n        cf.num_data2 = num_data2\n        cf.ang_max = utils.compute_ang_max(cf.cosmo, cf.r_trans_max, z_min,\n                                           z_min2)\n        userprint(\"\")\n        userprint(\"done, npix = {}\".format(len(data2)))\n    t1 = time.time()\n    userprint(f'picca_metal_dmat.py - Time reading data: {(t1-t0)/60:.3f} minutes')\n    cf.counter = Value('i', 0)\n    cf.lock = Lock()\n    cpu_data = {}\n    for index, healpix in enumerate(sorted(list(data.keys()))):\n        num_processor = index % args.nproc\n        if not num_processor in cpu_data:\n            cpu_data[num_processor] = []\n        cpu_data[num_processor].append(healpix)\n    # intiialize arrays to store the results for the different metal absorption\n    dmat_all = []\n    weights_dmat_all = []\n    r_par_all = []\n    r_trans_all = []\n    z_all = []\n    names = []\n    num_pairs_all = []\n    num_pairs_used_all = []\n    abs_igm = [args.lambda_abs] + args.abs_igm\n    userprint(\"abs_igm = {}\".format(abs_igm))\n    if args.lambda_abs2 is None:\n        args.lambda_abs2 = args.lambda_abs\n        args.abs_igm2 = args.abs_igm\n    abs_igm_2 = [args.lambda_abs2] + args.abs_igm2\n    if cf.x_correlation:\n        userprint(\"abs_igm2 = {}\".format(abs_igm_2))\n    # loop over metals\n    for index1, abs_igm1 in enumerate(abs_igm):\n        index0 = index1\n        if args.lambda_abs != args.lambda_abs2:\n            index0 = 0\n        for index2, abs_igm2 in enumerate(abs_igm_2[index0:]):\n            if index1 == 0 and index2 == 0:\n                continue\n            cf.counter.value = 0\n            calc_metal_dmat_wrapper = partial(calc_metal_dmat, abs_igm1,\n                                              abs_igm2)\n            userprint(\"\")\n            # compute the distortion matrix\n            if args.nproc > 1:\n                context = multiprocessing.get_context('fork')\n                pool = context.Pool(processes=args.nproc)\n                dmat_data = pool.map(calc_metal_dmat_wrapper,\n                                     sorted(cpu_data.values()))\n                pool.close()\n            elif args.nproc == 1:\n                dmat_data = map(calc_metal_dmat_wrapper,\n                                sorted(cpu_data.values()))\n                dmat_data = list(dmat_data)\n            # merge the results from different CPUs\n            dmat_data = np.array(dmat_data)\n            weights_dmat = dmat_data[:, 0].sum(axis=0)\n            dmat = dmat_data[:, 1].sum(axis=0)\n            r_par = dmat_data[:, 2].sum(axis=0)\n            r_trans = dmat_data[:, 3].sum(axis=0)\n            z = dmat_data[:, 4].sum(axis=0)\n            weights = dmat_data[:, 5].sum(axis=0)\n            num_pairs = dmat_data[:, 6].sum(axis=0)\n            num_pairs_used = dmat_data[:, 7].sum(axis=0)\n            # normalize_values\n            w = weights > 0\n            r_par[w] /= weights[w]\n            r_trans[w] /= weights[w]\n            z[w] /= weights[w]\n            w = weights_dmat > 0\n            dmat[w, :] /= weights_dmat[w, None]\n            # add these results to the list ofor the different metal absorption\n            dmat_all.append(dmat)\n            weights_dmat_all.append(weights_dmat)\n            r_par_all.append(r_par)\n            r_trans_all.append(r_trans)\n            z_all.append(z)\n            names.append(abs_igm1 + \"_\" + abs_igm2)\n            num_pairs_all.append(num_pairs)\n            num_pairs_used_all.append(num_pairs_used)\n    t2 = time.time()\n    userprint(f'picca_metal_dmat.py - Time computing all metal matrices : {(t2-t1)/60:.3f} minutes')\n    # save the results\n    results = fitsio.FITS(args.out, 'rw', clobber=True)\n    header = [\n        {\n            'name': 'RPMIN',\n            'value': cf.r_par_min,\n            'comment': 'Minimum r-parallel [h^-1 Mpc]'\n        },\n        {\n            'name': 'RPMAX',\n            'value': cf.r_par_max,\n            'comment': 'Maximum r-parallel [h^-1 Mpc]'\n        },\n        {\n            'name': 'RTMAX',\n            'value': cf.r_trans_max,\n            'comment': 'Maximum r-transverse [h^-1 Mpc]'\n        },\n        {\n            'name': 'NP',\n            'value': cf.num_bins_r_par,\n            'comment': 'Number of bins in r-parallel'\n        },\n        {\n            'name': 'NT',\n            'value': cf.num_bins_r_trans,\n            'comment': ' Number of bins in r-transverse'\n        },\n        {\n            'name': 'COEFMOD',\n            'value': args.coef_binning_model,\n            'comment': 'Coefficient for model binning'\n        },\n        {\n            'name': 'ZCUTMIN',\n            'value': cf.z_cut_min,\n            'comment': 'Minimum redshift of pairs'\n        },\n        {\n            'name': 'ZCUTMAX',\n            'value': cf.z_cut_max,\n            'comment': 'Maximum redshift of pairs'\n        },\n        {\n            'name': 'REJ',\n            'value': cf.reject,\n            'comment': 'Rejection factor'\n        },\n        {\n            'name': 'ALPHAMET',\n            'value': args.metal_alpha,\n            'comment': 'Evolution of metal bias'\n        }, {\n            'name': 'OMEGAM',\n            'value': args.fid_Om,\n            'comment': 'Omega_matter(z=0) of fiducial LambdaCDM cosmology'\n        }, {\n            'name': 'OMEGAR',\n            'value': args.fid_Or,\n            'comment': 'Omega_radiation(z=0) of fiducial LambdaCDM cosmology'\n        }, {\n            'name': 'OMEGAK',\n            'value': args.fid_Ok,\n            'comment': 'Omega_k(z=0) of fiducial LambdaCDM cosmology'\n        }, {\n            'name': 'WL',\n            'value': args.fid_wl,\n            'comment': 'Equation of state of dark energy of fiducial LambdaCDM cosmology'\n        }\n        ]\n    len_names = np.array([len(name) for name in names]).max()\n    names = np.array(names, dtype='S' + str(len_names))\n    results.write(\n        [\n            np.array(num_pairs_all),\n            np.array(num_pairs_used_all),\n            np.array(names)\n        ],\n        names=['NPALL', 'NPUSED', 'ABS_IGM'],\n        header=header,\n        comment=['Number of pairs', 'Number of used pairs', 'Absorption name'],\n        extname='ATTRI')\n    names = names.astype(str)\n    out_list = []\n    out_names = []\n    out_comment = []\n    out_units = []\n    for index, name in enumerate(names):\n        out_names += ['RP_' + name]\n        out_list += [r_par_all[index]]\n        out_comment += ['R-parallel']\n        out_units += ['h^-1 Mpc']\n        out_names += ['RT_' + name]\n        out_list += [r_trans_all[index]]\n        out_comment += ['R-transverse']\n        out_units += ['h^-1 Mpc']\n        out_names += ['Z_' + name]\n        out_list += [z_all[index]]\n        out_comment += ['Redshift']\n        out_units += ['']\n        out_names += ['DM_' + name]\n        out_list += [dmat_all[index]]\n        out_comment += ['Distortion matrix']\n        out_units += ['']\n        out_names += ['WDM_' + name]\n", "answers": ["        out_list += [weights_dmat_all[index]]"], "length": 1374, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "679f7e9fbff5d78f3c5e8e268644626790d4fa5fa3997cae"}
{"input": "", "context": "from enum import Enum\nfrom collections import defaultdict\nfrom pathlib import Path\nfrom typing import Dict, List, Optional, TextIO, Union\nimport re\nfrom .config import LIST_TYPE_TAGS, TAG_KEY_MAPPING, WOK_TAG_KEY_MAPPING, WOK_LIST_TYPE_TAGS\n__all__ = [\"load\", \"loads\"]\nclass RisImplementation(Enum):\n    BASE = \"base\"\n    WOK = \"wok\"\nclass NextLine(Exception):\n    pass\nclass Base:\n    START_TAG: str = None\n    END_TAG: str = \"ER\"\n    IGNORE: List[str] = []\n    PATTERN: str = None\n    def __init__(self, lines, mapping, strict=True):\n        self.lines = lines\n        self.pattern = re.compile(self.PATTERN)\n        self._mapping = mapping\n        self.strict = strict\n    @property\n    def mapping(self):\n        if self._mapping is not None:\n            return self._mapping\n        else:\n            return self.default_mapping\n    def parse(self):\n        self.in_ref = False\n        self.current = {}\n        self.last_tag = None\n        for line_number, line in enumerate(self.lines):\n            if not line.strip():\n                continue\n            if self.is_tag(line):\n                try:\n                    yield self.parse_tag(line, line_number)\n                    self.current = {}\n                    self.in_ref = False\n                    self.last_tag = None\n                except NextLine:\n                    continue\n            else:\n                try:\n                    yield self.parse_other(line, line_number)\n                except NextLine:\n                    continue\n    def parse_tag(self, line, line_number):\n        tag = self.get_tag(line)\n        if tag in self.IGNORE:\n            raise NextLine\n        if tag == self.END_TAG:\n            return self.current\n        if tag == self.START_TAG:\n            # New entry\n            if self.in_ref:\n                raise IOError(f\"Missing end of record tag in line {line_number}:\\n {line}\")\n            self.add_tag(tag, line)\n            self.in_ref = True\n            raise NextLine\n        if not self.in_ref:\n            raise IOError(f\"Invalid start tag in line {line_number}:\\n {line}\")\n        if tag in self.mapping:\n            self.add_tag(tag, line)\n            raise NextLine\n        else:\n            self.add_unknown_tag(tag, line)\n            raise NextLine\n        raise NextLine\n    def parse_other(self, line, line_number):\n        if not self.strict:\n            raise NextLine\n        if self.in_ref:\n            # Active reference\n            if self.last_tag is None:\n                raise IOError(f\"Expected tag in line {line_number}:\\n {line}\")\n            # Active tag\n            self.add_tag(self.last_tag, line, all_line=True)\n            raise NextLine\n        if self.is_counter(line):\n            raise NextLine\n        raise IOError(f\"Expected start tag in line {line_number}:\\n {line}\")\n    def add_single_value(self, name, value, is_multi=False):\n        if not is_multi:\n            ignore_this_if_has_one = value\n            self.current.setdefault(name, ignore_this_if_has_one)\n            return\n        value_must_exist_or_is_bug = self.current[name]\n        self.current[name] = \" \".join((value_must_exist_or_is_bug, value))\n    def add_list_value(self, name, value):\n        try:\n            self.current[name].append(value)\n        except KeyError:\n            self.current[name] = [value]\n    def add_tag(self, tag, line, all_line=False):\n        self.last_tag = tag\n        name = self.mapping[tag]\n        if all_line:\n            new_value = line.strip()\n        else:\n            new_value = self.get_content(line)\n        if tag not in LIST_TYPE_TAGS:\n            self.add_single_value(name, new_value, is_multi=all_line)\n            return\n        self.add_list_value(name, new_value)\n    def add_unknown_tag(self, tag, line):\n        name = self.mapping[\"UK\"]\n        tag = self.get_tag(line)\n        value = self.get_content(line)\n        # check if unknown_tag dict exists\n        if name not in self.current:\n            self.current[name] = defaultdict(list)\n        self.current[name][tag].append(value)\n    def get_tag(self, line):\n        return line[0:2]\n    def is_tag(self, line):\n        return bool(self.pattern.match(line))\n    def get_content(self, line):\n        raise NotImplementedError\nclass Wok(Base):\n    START_TAG = \"PT\"\n    IGNORE = [\"FN\", \"VR\", \"EF\"]\n    PATTERN = r\"^[A-Z][A-Z0-9] |^ER\\s?|^EF\\s?\"\n    LIST_TYPE_TAGS = WOK_LIST_TYPE_TAGS\n    default_mapping = WOK_TAG_KEY_MAPPING\n    def get_content(self, line):\n        return line[2:].strip()\n    def is_counter(self, line):\n        return True\nclass Ris(Base):\n    START_TAG = \"TY\"\n    PATTERN = r\"^[A-Z][A-Z0-9]  - |^ER  -\\s*$\"\n    default_mapping = TAG_KEY_MAPPING\n    counter_re = re.compile(\"^[0-9]+.\")\n    def get_content(self, line):\n        return line[6:].strip()\n    def is_counter(self, line):\n        none_or_match = self.counter_re.match(line)\n        return bool(none_or_match)\ndef load(\n    file: Union[TextIO, Path],\n    mapping: Optional[Dict] = None,\n    implementation: RisImplementation = RisImplementation.BASE,\n    strict: bool = True,\n) -> List[Dict]:\n    \"\"\"Load a RIS file and return a list of entries.\n    Entries are codified as dictionaries whose keys are the\n    different tags. For single line and singly occurring tags,\n    the content is codified as a string. In the case of multiline\n    or multiple key occurrences, the content is returned as a list\n    of strings.\n    Args:\n        file (Union[TextIO, Path]): File handle to read ris formatted data.\n        mapping (Dict, optional): a tag mapping dictionary.\n        implementation (RisImplementation): RIS implementation; base by default.\n        strict (bool): Boolean to allow non-tag data between records to be ignored.\n    Returns:\n        list: Returns list of RIS entries.\n    \"\"\"\n    text = file.read_text() if isinstance(file, Path) else file.read()\n    return list(loads(text, mapping, implementation, strict))\ndef loads(\n    obj: str,\n    mapping: Optional[Dict] = None,\n    implementation: RisImplementation = RisImplementation.BASE,\n    strict: bool = True,\n) -> List[Dict]:\n    \"\"\"Load a RIS file and return a list of entries.\n    Entries are codified as dictionaries whose keys are the\n    different tags. For single line and singly occurring tags,\n    the content is codified as a string. In the case of multiline\n    or multiple key occurrences, the content is returned as a list\n    of strings.\n    Args:\n        obj (str): A string version of an RIS file.\n        mapping (Dict, optional): a tag mapping dictionary.\n        implementation (RisImplementation): RIS implementation; base by default.\n        strict (bool): Boolean to allow non-tag data between records to be ignored.\n    Returns:\n        list: Returns list of RIS entries.\n    \"\"\"\n    # remove BOM if present\n", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "length": 676, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "558f671494850fdb1783371aa9016d6202151b1b538c13a5"}
{"input": "", "context": "/*\n * @copyright 2013 Philip Warner\n * @license GNU General Public License\n * \n * This file is part of Book Catalogue.\n *\n * Book Catalogue is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Book Catalogue is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Book Catalogue.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.eleybourn.bookcatalogue.backup;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport com.eleybourn.bookcatalogue.BookCatalogueApp;\nimport com.eleybourn.bookcatalogue.CatalogueDBAdapter;\nimport com.eleybourn.bookcatalogue.backup.Importer.CoverFinder;\nimport com.eleybourn.bookcatalogue.utils.StorageUtils;\n/**\n * Class to find covers for an importer when the import is reading from a local directory.\n * \n * @author pjw\n */\npublic class LocalCoverFinder implements Importer.CoverFinder {\n\t/** The root path to search for files */\n\tprivate final String mSrc;\n\tprivate final String mDst;\n\tprivate final boolean mIsForeign;\n\tprivate final String mSharedStoragePath;\n\tprivate CatalogueDBAdapter mDbHelper;\n\tpublic LocalCoverFinder(String srcPath, String dstPath) {\n\t\tmSrc = srcPath;\n\t\tmDst = dstPath;\n\t\tmIsForeign = !mSrc.equals(mDst);\n\t\tmSharedStoragePath = StorageUtils.getSharedStorage().getAbsolutePath();\n\t\tmDbHelper = new CatalogueDBAdapter(BookCatalogueApp.context);\n\t\tmDbHelper.open();\n\t}\n\t\n\tpublic void copyOrRenameCoverFile(String srcUuid, long srcId, long dstId) throws IOException {\n\t\tif (srcUuid != null && !srcUuid.equals(\"\")) {\n\t\t\t// Only copy UUID files if they are foreign...since they already exists, otherwise.\n\t\t\tif (mIsForeign)\n\t\t\t\tcopyCoverImageIfMissing(srcUuid);\t\t\t\t\t\t\t\n\t\t} else {\n\t\t\tif (srcId != 0) {\n\t\t\t\t// This will be a rename or a copy\n\t\t\t\tif (mIsForeign)\n\t\t\t\t\tcopyCoverImageIfMissing(srcId, dstId);\n\t\t\t\telse\n\t\t\t\t\trenameCoverImageIfMissing(srcId, dstId);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\tprivate File findExternalCover(String name) {\n\t\t// Find the original, if present.\n\t\tFile orig = new File(mSrc + \"/\" + name + \".jpg\");\n\t\tif (!orig.exists()) {\n\t\t\torig = new File(mSrc + \"/\" + name + \".png\");\n\t\t}\n\t\t// Nothing to copy?\n\t\tif (!orig.exists())\n\t\t\treturn null;\n\t\telse\n\t\t\treturn orig;\n\t\t\n\t}\n\t/**\n\t * Find the current cover file (or new file) based on the passed source and UUID.\n\t * \n\t * @param orig\t\tOriginal file to be copied/renamed if no existing file.\n\t * @param newUuid\tUUID of file\n\t * \n\t * @return\t\t\tExisting file (if length > 0), or new file object\n\t */\n\tprivate File getNewCoverFile(File orig, String newUuid) {\n\t\tFile newFile;\n\t\t// Check for ANY current image; delete empty ones and retry\n\t\tnewFile = CatalogueDBAdapter.fetchThumbnailByUuid(newUuid);\n\t\twhile (newFile.exists()) {\n\t\t\tif (newFile.length() > 0)\n\t\t\t\treturn newFile;\n\t\t\telse\n\t\t\t\tnewFile.delete();\n\t\t\tnewFile = CatalogueDBAdapter.fetchThumbnailByUuid(newUuid);\n\t\t}\n\t\t\n\t\t// Get the new path based on the input file type.\n\t\tif (orig.getAbsolutePath().toLowerCase().endsWith(\".png\")) \n\t\t\tnewFile = new File(mSharedStoragePath + \"/\" + newUuid + \".png\");\n\t\telse\n\t\t\tnewFile = new File(mSharedStoragePath + \"/\" + newUuid + \".jpg\");\n\t\treturn newFile;\n\t}\n\t/**\n\t * Copy a specified source file into the default cover location for a new file.\n\t * DO NO OVERWRITE EXISTING FILES.\n\t * \n\t * @param orig\n\t * @param newUuid\n\t * @throws IOException\n\t */\n\tprivate void copyFileToCoverImageIfMissing(File orig, String newUuid) throws IOException {\n\t\t// Nothing to copy?\n\t\tif (orig == null || !orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\t// Check for ANY current image\n\t\tFile newFile = getNewCoverFile(orig, newUuid);\n\t\tif (newFile.exists())\n\t\t\treturn;\n\t\t// Copy it.\n\t\tInputStream in = null;\n\t\tOutputStream out = null;\n\t\ttry {\n\t\t\t// Open in & out\n\t\t\tin = new FileInputStream(orig);\n\t\t\tout = new FileOutputStream(newFile);\n\t\t\t// Get a buffer\n\t\t\tbyte[] buffer = new byte[8192];\n\t\t\tint nRead = 0;\n\t\t\t// Copy\n\t\t\twhile( (nRead = in.read(buffer)) > 0){\n\t\t\t    out.write(buffer, 0, nRead);\n\t\t\t}\n\t\t\t// Close both. We close them here so exceptions are signalled\n\t\t\tin.close();\n\t\t\tin = null;\n\t\t\tout.close();\n\t\t\tout = null;\n\t\t} finally {\n\t\t\t// If not already closed, close.\n\t\t\ttry {\n\t\t\t\tif (in != null)\n\t\t\t\t\tin.close();\n\t\t\t} catch (Exception e) {};\n\t\t\ttry {\n\t\t\t\tif (out != null)\n\t\t\t\t\tout.close();\n\t\t\t} catch (Exception e) {};\n\t\t}\n\t}\n\t/**\n\t * Rename/move a specified source file into the default cover location for a new file.\n\t * DO NO OVERWRITE EXISTING FILES.\n\t * \n\t * @param orig\n\t * @param newUuid\n\t * @throws IOException\n\t */\n\tprivate void renameFileToCoverImageIfMissing(File orig, String newUuid) throws IOException {\n\t\t// Nothing to copy?\n\t\tif (orig == null || !orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\t// Check for ANY current image\n\t\tFile newFile = getNewCoverFile(orig, newUuid);\n\t\tif (newFile.exists())\n\t\t\treturn;\n\t\torig.renameTo(newFile);\n\t}\n\t/**\n\t * Copy the ID-based cover from its current location to the correct location in shared \n\t * storage, if it exists.\n\t * \n\t * @param externalId\t\tThe file ID in external media\n\t * @param newId\t\t\t\tThe new file ID\n\t * @throws IOException \n\t */\n\tprivate void renameCoverImageIfMissing(long externalId, long newId) throws IOException {\n\t\tFile orig = findExternalCover(Long.toString(externalId));\n\t\t// Nothing to copy?\n\t\tif (orig == null || !orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\trenameFileToCoverImageIfMissing(orig, newUuid);\n\t}\n\t/**\n\t * Copy the ID-based cover from its current location to the correct location in shared \n\t * storage, if it exists.\n\t * \n\t * @param externalId\t\tThe file ID in external media\n\t * @param newId\t\t\t\tThe new file ID\n\t * @throws IOException \n\t */\n\tprivate void copyCoverImageIfMissing(long externalId, long newId) throws IOException {\n\t\tFile orig = findExternalCover(Long.toString(externalId));\n\t\t// Nothing to copy?\n", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "length": 866, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "0f2c56e3d13561090844f206bc74c145b07fe9bf0f0e7121"}
{"input": "", "context": "package usspg31.tourney.model;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.logging.Logger;\nimport javafx.beans.property.ObjectProperty;\nimport javafx.beans.property.SimpleObjectProperty;\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.beans.property.StringProperty;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport usspg31.tourney.model.PossibleScoring.ScoringType;\n/**\n * Represents a tournament that can be carried out in an event\n */\npublic class Tournament implements Cloneable {\n    public enum ExecutionState {\n        NOT_EXECUTED,\n        CURRENTLY_EXECUTED,\n        FINISHED\n    }\n    private static final Logger log = Logger.getLogger(Tournament.class\n            .getName());\n    private final ObservableList<Player> registeredPlayers;\n    private final ObservableList<Player> attendingPlayers;\n    private final ObservableList<Player> remainingPlayers;\n    private final ObservableList<Player> disqualifiedPlayers;\n    // currently not considered when choosing the player who received a bye\n    private final ObservableList<Player> receivedByePlayers;\n    private final ObservableList<TournamentRound> rounds;\n    private final StringProperty name;\n    private final ObservableList<PlayerScore> scoreTable;\n    private final ObservableList<TournamentAdministrator> administrators;\n    private final StringProperty id;\n    private final ObjectProperty<TournamentModule> ruleSet;\n    private final ObjectProperty<ExecutionState> executionState;\n    /**\n     * Create a new tournament and initialize all its properties\n     */\n    public Tournament() {\n        this.registeredPlayers = FXCollections.observableArrayList();\n        this.attendingPlayers = FXCollections.observableArrayList();\n        this.remainingPlayers = FXCollections.observableArrayList();\n        this.disqualifiedPlayers = FXCollections.observableArrayList();\n        this.receivedByePlayers = FXCollections.observableArrayList();\n        this.rounds = FXCollections.observableArrayList();\n        this.name = new SimpleStringProperty(\"\");\n        this.scoreTable = FXCollections.observableArrayList();\n        this.administrators = FXCollections.observableArrayList();\n        this.id = new SimpleStringProperty(\"\");\n        this.ruleSet = new SimpleObjectProperty<TournamentModule>(\n                new TournamentModule());\n        this.executionState = new SimpleObjectProperty<Tournament.ExecutionState>();\n        this.setExecutionState(ExecutionState.NOT_EXECUTED);\n    }\n    /**\n     * Get a list of all registered players in this tournament\n     *\n     * @return List of all registered players in this tournament\n     */\n    public ObservableList<Player> getRegisteredPlayers() {\n        return this.registeredPlayers;\n    }\n    /**\n     * Get a list of all attending players in this tournament\n     *\n     * @return List of all attending players in this tournament\n     */\n    public ObservableList<Player> getAttendingPlayers() {\n        return this.attendingPlayers;\n    }\n    /**\n     * Get a list of all players that have not been knocked out of this\n     * tournament yet\n     *\n     * @return List of all remaining players in this tournament\n     */\n    public ObservableList<Player> getRemainingPlayers() {\n        return this.remainingPlayers;\n    }\n    /**\n     * Get a list of all tournament rounds in this tournament\n     *\n     * @return List of all tournament rounds in this tournament\n     */\n    public ObservableList<TournamentRound> getRounds() {\n        return this.rounds;\n    }\n    /**\n     * Get the list of all player which received a bye in the tournament\n     *\n     * @return List of all player who received a bye\n     */\n    public ObservableList<Player> getReceivedByePlayers() {\n        return this.receivedByePlayers;\n    }\n    /**\n     * Get the list of all player which were disqualified in the tournament\n     *\n     * @return List of all player who where disqualified\n     */\n    public ObservableList<Player> getDisqualifiedPlayers() {\n        return this.disqualifiedPlayers;\n    }\n    /**\n     * Get the name of this tournament\n     *\n     * @return Current name of this tournament\n     */\n    public String getName() {\n        return this.name.get();\n    }\n    /**\n     * Set the name of this tournament\n     *\n     * @param value\n     *            New name of this tournament\n     */\n    public void setName(String value) {\n        this.name.set(value);\n    }\n    /**\n     * Get the name property of this tournament\n     *\n     * @return Name property of this tournament\n     */\n    public StringProperty nameProperty() {\n        return this.name;\n    }\n    /**\n     * Get the execution state of this tournament\n     *\n     * @return Current execution state of this tournament\n     */\n    public ExecutionState getExecutionState() {\n        return this.executionState.get();\n    }\n    /**\n     * Set the execution state of this tournament\n     *\n     * @param executionState\n     *            New execution state of this tournament\n     */\n    public void setExecutionState(ExecutionState executionState) {\n        this.executionState.set(executionState);\n    }\n    /**\n     * Get the execution state property of this tournament\n     *\n     * @return execution state property of this tournament\n     */\n    public ObjectProperty<ExecutionState> executionStateProperty() {\n        return this.executionState;\n    }\n    /**\n     * Get all player scores in this tournament\n     *\n     * @return A list of all player scores in this tournament\n     */\n    public ObservableList<PlayerScore> getScoreTable() {\n        return this.scoreTable;\n    }\n    /**\n     * Get all tournament administrators in this event\n     *\n     * @return A list of all tournament administrators in this event\n     */\n    public ObservableList<TournamentAdministrator> getAdministrators() {\n        return this.administrators;\n    }\n    /**\n     * Get the ID of this event\n     *\n     * @return Current ID of this event\n     */\n    public String getId() {\n        return this.id.get();\n    }\n    /**\n     * Set the ID of this event\n     *\n     * @param id\n     *            New ID of this event\n     */\n    public void setId(String id) {\n        this.id.set(id);\n    }\n    /**\n     * Get the tournament module that describes the rules of this tournament\n     *\n     * @return The current rule set of this tournament\n     */\n    public TournamentModule getRuleSet() {\n        return this.ruleSet.get();\n    }\n    /**\n     * Set the tournament module that describes the rules of this tournament\n     *\n     * @param value\n     *            The new rule set of this tournament\n     */\n    public void setRuleSet(TournamentModule value) {\n        this.ruleSet.set(value);\n    }\n    /**\n     * Get the rule set property of this event\n     *\n     * @return Rule set property of this event\n     */\n    public ObjectProperty<TournamentModule> ruleSetProperty() {\n        return this.ruleSet;\n    }\n    @Override\n    public Object clone() {\n        Tournament clone = new Tournament();\n        clone.setName(this.getName());\n        clone.setId(this.getId());\n        clone.setRuleSet(this.getRuleSet());\n        for (Player player : this.getRegisteredPlayers()) {\n            clone.getRegisteredPlayers().add((Player) player.clone());\n        }\n        for (Player player : this.getAttendingPlayers()) {\n            clone.getAttendingPlayers().add((Player) player.clone());\n        }\n        for (Player player : this.getDisqualifiedPlayers()) {\n            clone.getDisqualifiedPlayers().add((Player) player.clone());\n        }\n        for (TournamentRound round : this.getRounds()) {\n            clone.getRounds().add((TournamentRound) round.clone());\n        }\n        for (PlayerScore score : this.getScoreTable()) {\n            clone.getScoreTable().add((PlayerScore) score.clone());\n        }\n        for (TournamentAdministrator admininstrator : this.getAdministrators()) {\n            clone.getAdministrators().add(\n                    (TournamentAdministrator) admininstrator.clone());\n        }\n        return clone;\n    }\n    /**\n     * adds a score to the tournament score table\n     *\n     * @param score\n     *            consist of the player and the score which gets added to the\n     *            score table for the earlier mentioned player\n     */\n    public void addAScore(PlayerScore score) {\n        if (this.rounds.size() != 1) {\n            for (PlayerScore eachPlayerScore : this.scoreTable) {\n                if (eachPlayerScore.getPlayer().getId()\n                        .equals(score.getPlayer().getId())) {\n                    for (int i = 0; i < eachPlayerScore.getScore().size(); i++) {\n                        log.finer(\"The score \"\n                                + score.getScore().get(i)\n                                + \" was added to the score table in the tournament\");\n                        eachPlayerScore.getScore().set(\n                                i,\n                                eachPlayerScore.getScore().get(i)\n                                        + score.getScore().get(i));\n                    }\n                }\n            }\n        } else {\n            log.info(\"Added score after first round\");\n            this.scoreTable.add((PlayerScore) score.clone());\n        }\n    }\n    /**\n     * removes a score from the tournament score table\n     *\n     * @param score\n     *            consist of the player and the score which gets added to the\n     *            score table for the earlier mentioned player\n     */\n    public void removeAScore(PlayerScore score) {\n        if (this.rounds.size() > 1) {\n            for (PlayerScore eachPlayerScore : this.scoreTable) {\n                if (eachPlayerScore.getPlayer().getId()\n                        .equals(score.getPlayer().getId())) {\n                    for (int i = 0; i < eachPlayerScore.getScore().size(); i++) {\n                        log.finer(\"The score \"\n                                + score.getScore().get(i)\n                                + \" was removed from the score table in the tournament\");\n                        eachPlayerScore.getScore().set(\n                                i,\n                                eachPlayerScore.getScore().get(i)\n                                        - score.getScore().get(i));\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * calculates the table strength for each player\n     *\n     */\n    public void calculateTableStrength() {\n        for (PossibleScoring possibleScore : this.getRuleSet()\n                .getPossibleScores()) {\n            if (possibleScore.getScoreType() == ScoringType.TABLE_STRENGTH) {\n                for (Player player : this.attendingPlayers) {\n                    this.calculateSinglePlayerTableStrength(player);\n                }\n            }\n        }\n    }\n    public int calculateBestTableStrength(Player player) {\n        ArrayList<PlayerScore> clonePlayerScore = new ArrayList<>();\n        clonePlayerScore.addAll(this.scoreTable);\n        Collections.sort(clonePlayerScore);\n        int strength = 0;\n        int count = 0;\n        int i = 0;\n        while (count < this.getRounds().size()) {\n            if (!player.getId().equals(\n                    clonePlayerScore.get(clonePlayerScore.size() - i - 1)\n                            .getPlayer().getId())) {\n                strength += clonePlayerScore\n                        .get(clonePlayerScore.size() - 1 - i).getScore().get(0);\n                count++;\n            }\n            i++;\n            if (i == this.rounds.size() - 1) {\n                break;\n            }\n        }\n        return strength;\n    }\n    private void calculateSinglePlayerTableStrength(Player player) {\n        Map<String, Player> opponentPlayers = new HashMap<String, Player>();\n        ArrayList<Player> tmpPlayerStorage = new ArrayList<>();\n        PlayerScore tableStrengthScore = new PlayerScore();\n        int strength = 0;\n        for (TournamentRound tRound : this.getRounds()) {\n            for (Pairing tPairing : tRound.getPairings()) {\n                for (Player opponent : tPairing.getOpponents()) {\n                    if (opponent.getId().equals(player.getId())) {\n                        tmpPlayerStorage = new ArrayList<>();\n                        tmpPlayerStorage.addAll(tPairing.getOpponents());\n                        for (int i = 0; i < tmpPlayerStorage.size(); i++) {\n                            if (tmpPlayerStorage.get(i).getId()\n                                    .equals(player.getId())) {\n                                tmpPlayerStorage.remove(i);\n                                break;\n                            }\n                        }\n                        log.info(\"opponents size: \" + opponentPlayers.size());\n                        log.info(\"tmp size: \" + tmpPlayerStorage.size());\n                        for (int i = 0; i < tmpPlayerStorage.size(); i++) {\n                            opponentPlayers.put(\n                                    tmpPlayerStorage.get(i).getId(),\n                                    tmpPlayerStorage.get(i));\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        for (Entry<String, Player> opponent : opponentPlayers.entrySet()) {\n", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "length": 1212, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "32695d486ee42a0b353779c1630f31bd4c2d1f8cedfd08a6"}
{"input": "", "context": "import os\nimport random\nimport re\nimport socket\nimport subprocess\nimport time\nimport zipfile\nimport tempfile\nimport base64\nimport shutil\nimport sys\nfrom io import BytesIO\nimport pytest\nfrom contextlib import contextmanager\nfrom multiprocessing import Process\nfrom urllib.request import urlopen, Request\nfrom werkzeug.datastructures import Headers\nfrom werkzeug.exceptions import RequestedRangeNotSatisfiable\nfrom onionshare_cli.common import Common\nfrom onionshare_cli.web import Web\nfrom onionshare_cli.web.share_mode import parse_range_header\nfrom onionshare_cli.settings import Settings\nfrom onionshare_cli.mode_settings import ModeSettings\nimport onionshare_cli.web.receive_mode\n# Stub requests.post, for receive mode webhook tests\nwebhook_url = None\nwebhook_data = None\ndef requests_post_stub(url, data, timeout, proxies):\n    global webhook_url, webhook_data\n    webhook_url = url\n    webhook_data = data\nonionshare_cli.web.receive_mode.requests.post = requests_post_stub\nDEFAULT_ZW_FILENAME_REGEX = re.compile(r\"^onionshare_[a-z2-7]{6}.zip$\")\nRANDOM_STR_REGEX = re.compile(r\"^[a-z2-7]+$\")\ndef web_obj(temp_dir, common_obj, mode, num_files=0):\n    \"\"\"Creates a Web object, in either share mode or receive mode, ready for testing\"\"\"\n    common_obj.settings = Settings(common_obj)\n    mode_settings = ModeSettings(common_obj)\n    web = Web(common_obj, False, mode_settings, mode)\n    web.generate_password()\n    web.running = True\n    web.cleanup_filenames == []\n    web.app.testing = True\n    # Share mode\n    if mode == \"share\":\n        # Add files\n        files = []\n        for _ in range(num_files):\n            with tempfile.NamedTemporaryFile(delete=False, dir=temp_dir) as tmp_file:\n                tmp_file.write(b\"*\" * 1024)\n                files.append(tmp_file.name)\n        web.share_mode.set_file_info(files)\n    # Receive mode\n    else:\n        pass\n    return web\nclass TestWeb:\n    def test_share_mode(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"share\", 3)\n        assert web.mode == \"share\"\n        with web.app.test_client() as c:\n            # Load / without auth\n            res = c.get(\"/\")\n            res.get_data()\n            assert res.status_code == 401\n            # Load / with invalid auth\n            res = c.get(\"/\", headers=self._make_auth_headers(\"invalid\"))\n            res.get_data()\n            assert res.status_code == 401\n            # Load / with valid auth\n            res = c.get(\"/\", headers=self._make_auth_headers(web.password))\n            res.get_data()\n            assert res.status_code == 200\n            # Download\n            res = c.get(\"/download\", headers=self._make_auth_headers(web.password))\n            res.get_data()\n            assert res.status_code == 200\n            assert (\n                res.mimetype == \"application/zip\"\n                or res.mimetype == \"application/x-zip-compressed\"\n            )\n    def test_share_mode_autostop_sharing_on(self, temp_dir, common_obj, temp_file_1024):\n        web = web_obj(temp_dir, common_obj, \"share\", 3)\n        web.settings.set(\"share\", \"autostop_sharing\", True)\n        assert web.running is True\n        with web.app.test_client() as c:\n            # Download the first time\n            res = c.get(\"/download\", headers=self._make_auth_headers(web.password))\n            res.get_data()\n            assert res.status_code == 200\n            assert (\n                res.mimetype == \"application/zip\"\n                or res.mimetype == \"application/x-zip-compressed\"\n            )\n            assert web.running is False\n    def test_share_mode_autostop_sharing_off(\n        self, temp_dir, common_obj, temp_file_1024\n    ):\n        web = web_obj(temp_dir, common_obj, \"share\", 3)\n        web.settings.set(\"share\", \"autostop_sharing\", False)\n        assert web.running is True\n        with web.app.test_client() as c:\n            # Download the first time\n            res = c.get(\"/download\", headers=self._make_auth_headers(web.password))\n            res.get_data()\n            assert res.status_code == 200\n            assert (\n                res.mimetype == \"application/zip\"\n                or res.mimetype == \"application/x-zip-compressed\"\n            )\n            assert web.running is True\n    def test_receive_mode(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        assert web.mode == \"receive\"\n        with web.app.test_client() as c:\n            # Load / without auth\n            res = c.get(\"/\")\n            res.get_data()\n            assert res.status_code == 401\n            # Load / with invalid auth\n            res = c.get(\"/\", headers=self._make_auth_headers(\"invalid\"))\n            res.get_data()\n            assert res.status_code == 401\n            # Load / with valid auth\n            res = c.get(\"/\", headers=self._make_auth_headers(web.password))\n            res.get_data()\n            assert res.status_code == 200\n    def test_receive_mode_webhook(self, temp_dir, common_obj):\n        global webhook_url, webhook_data\n        webhook_url = None\n        webhook_data = None\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        assert web.mode == \"receive\"\n        web.settings.set(\"receive\", \"webhook_url\", \"http://127.0.0.1:1337/example\")\n        web.proxies = None\n        assert (\n            web.settings.get(\"receive\", \"webhook_url\")\n            == \"http://127.0.0.1:1337/example\"\n        )\n        with web.app.test_client() as c:\n            res = c.get(\"/\", headers=self._make_auth_headers(web.password))\n            res.get_data()\n            assert res.status_code == 200\n            res = c.post(\n                \"/upload-ajax\",\n                buffered=True,\n                content_type=\"multipart/form-data\",\n                data={\"file[]\": (BytesIO(b\"THIS IS A TEST FILE\"), \"new_york.jpg\")},\n                headers=self._make_auth_headers(web.password),\n            )\n            res.get_data()\n            assert res.status_code == 200\n            assert webhook_url == \"http://127.0.0.1:1337/example\"\n            assert webhook_data == \"1 file submitted to OnionShare\"\n    def test_receive_mode_message_no_files(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        data_dir = os.path.join(temp_dir, \"OnionShare\")\n        os.makedirs(data_dir, exist_ok=True)\n        web.settings.set(\"receive\", \"data_dir\", data_dir)\n        with web.app.test_client() as c:\n            res = c.post(\n                \"/upload-ajax\",\n                buffered=True,\n                content_type=\"multipart/form-data\",\n                data={\"text\": \"you know just sending an anonymous message\"},\n                headers=self._make_auth_headers(web.password),\n            )\n            content = res.get_data()\n            assert res.status_code == 200\n            assert b\"Message submitted\" in content\n        # ~/OnionShare should have a folder for the date\n        filenames = os.listdir(data_dir)\n        assert len(filenames) == 1\n        data_dir_date = os.path.join(data_dir, filenames[0])\n        # The date folder should have a single message txt file, no folders\n        filenames = os.listdir(data_dir_date)\n        assert len(filenames) == 1\n        assert filenames[0].endswith(\"-message.txt\")\n        shutil.rmtree(data_dir)\n    def test_receive_mode_message_and_files(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        data_dir = os.path.join(temp_dir, \"OnionShare\")\n        os.makedirs(data_dir, exist_ok=True)\n        web.settings.set(\"receive\", \"data_dir\", data_dir)\n        with web.app.test_client() as c:\n            res = c.post(\n                \"/upload-ajax\",\n                buffered=True,\n                content_type=\"multipart/form-data\",\n                data={\n                    \"file[]\": (BytesIO(b\"THIS IS A TEST FILE\"), \"new_york.jpg\"),\n                    \"text\": \"you know just sending an anonymous message\",\n                },\n                headers=self._make_auth_headers(web.password),\n            )\n            content = res.get_data()\n            assert res.status_code == 200\n            assert b\"Message submitted, uploaded new_york.jpg\" in content\n        # Date folder should have a time folder with new_york.jpg, and a text message file\n        data_dir_date = os.path.join(data_dir, os.listdir(data_dir)[0])\n        filenames = os.listdir(data_dir_date)\n        assert len(filenames) == 2\n        time_str = filenames[0][0:6]\n        assert time_str in filenames\n        assert f\"{time_str}-message.txt\" in filenames\n        data_dir_time = os.path.join(data_dir_date, time_str)\n        assert os.path.isdir(data_dir_time)\n        assert os.path.exists(os.path.join(data_dir_time, \"new_york.jpg\"))\n        shutil.rmtree(data_dir)\n    def test_receive_mode_files_no_message(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        data_dir = os.path.join(temp_dir, \"OnionShare\")\n        os.makedirs(data_dir, exist_ok=True)\n        web.settings.set(\"receive\", \"data_dir\", data_dir)\n        with web.app.test_client() as c:\n            res = c.post(\n                \"/upload-ajax\",\n                buffered=True,\n                content_type=\"multipart/form-data\",\n                data={\"file[]\": (BytesIO(b\"THIS IS A TEST FILE\"), \"new_york.jpg\")},\n                headers=self._make_auth_headers(web.password),\n            )\n            content = res.get_data()\n            assert res.status_code == 200\n            assert b\"Uploaded new_york.jpg\" in content\n        # Date folder should have just a time folder with new_york.jpg\n        data_dir_date = os.path.join(data_dir, os.listdir(data_dir)[0])\n        filenames = os.listdir(data_dir_date)\n        assert len(filenames) == 1\n        time_str = filenames[0][0:6]\n        assert time_str in filenames\n        assert f\"{time_str}-message.txt\" not in filenames\n        data_dir_time = os.path.join(data_dir_date, time_str)\n        assert os.path.isdir(data_dir_time)\n        assert os.path.exists(os.path.join(data_dir_time, \"new_york.jpg\"))\n        shutil.rmtree(data_dir)\n    def test_receive_mode_no_message_no_files(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        data_dir = os.path.join(temp_dir, \"OnionShare\")\n        os.makedirs(data_dir, exist_ok=True)\n        web.settings.set(\"receive\", \"data_dir\", data_dir)\n        with web.app.test_client() as c:\n            res = c.post(\n                \"/upload-ajax\",\n                buffered=True,\n                content_type=\"multipart/form-data\",\n                data={},\n                headers=self._make_auth_headers(web.password),\n            )\n            content = res.get_data()\n            assert res.status_code == 200\n            assert b\"Nothing submitted\" in content\n        # Date folder should be empty\n        data_dir_date = os.path.join(data_dir, os.listdir(data_dir)[0])\n        filenames = os.listdir(data_dir_date)\n        assert len(filenames) == 0\n        shutil.rmtree(data_dir)\n    def test_public_mode_on(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        web.settings.set(\"general\", \"public\", True)\n        with web.app.test_client() as c:\n            # Loading / should work without auth\n            res = c.get(\"/\")\n            res.get_data()\n            assert res.status_code == 200\n    def test_public_mode_off(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        web.settings.set(\"general\", \"public\", False)\n        with web.app.test_client() as c:\n            # Load / without auth\n", "answers": ["            res = c.get(\"/\")"], "length": 919, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "868c857f4c55cf95b3e5964786bc9bfb558a134958ed9614"}
{"input": "", "context": "package info.nightscout.androidaps.plugins.general.nsclient;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.ServiceConnection;\nimport android.os.Handler;\nimport android.os.HandlerThread;\nimport android.os.IBinder;\nimport android.text.Spanned;\nimport androidx.preference.PreferenceFragmentCompat;\nimport androidx.preference.SwitchPreference;\nimport org.jetbrains.annotations.NotNull;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.inject.Inject;\nimport javax.inject.Singleton;\nimport dagger.android.HasAndroidInjector;\nimport info.nightscout.androidaps.Config;\nimport info.nightscout.androidaps.Constants;\nimport info.nightscout.androidaps.R;\nimport info.nightscout.androidaps.events.EventAppExit;\nimport info.nightscout.androidaps.events.EventChargingState;\nimport info.nightscout.androidaps.events.EventNetworkChange;\nimport info.nightscout.androidaps.events.EventPreferenceChange;\nimport info.nightscout.androidaps.interfaces.PluginBase;\nimport info.nightscout.androidaps.interfaces.PluginDescription;\nimport info.nightscout.androidaps.interfaces.PluginType;\nimport info.nightscout.androidaps.logging.AAPSLogger;\nimport info.nightscout.androidaps.logging.LTag;\nimport info.nightscout.androidaps.plugins.bus.RxBusWrapper;\nimport info.nightscout.androidaps.plugins.general.nsclient.data.AlarmAck;\nimport info.nightscout.androidaps.plugins.general.nsclient.data.NSAlarm;\nimport info.nightscout.androidaps.plugins.general.nsclient.events.EventNSClientNewLog;\nimport info.nightscout.androidaps.plugins.general.nsclient.events.EventNSClientResend;\nimport info.nightscout.androidaps.plugins.general.nsclient.events.EventNSClientStatus;\nimport info.nightscout.androidaps.plugins.general.nsclient.events.EventNSClientUpdateGUI;\nimport info.nightscout.androidaps.plugins.general.nsclient.services.NSClientService;\nimport info.nightscout.androidaps.utils.FabricPrivacy;\nimport info.nightscout.androidaps.utils.HtmlHelper;\nimport info.nightscout.androidaps.utils.ToastUtils;\nimport info.nightscout.androidaps.utils.buildHelper.BuildHelper;\nimport info.nightscout.androidaps.utils.resources.ResourceHelper;\nimport info.nightscout.androidaps.utils.sharedPreferences.SP;\nimport io.reactivex.disposables.CompositeDisposable;\nimport io.reactivex.schedulers.Schedulers;\n@Singleton\npublic class NSClientPlugin extends PluginBase {\n    private final CompositeDisposable disposable = new CompositeDisposable();\n    private final AAPSLogger aapsLogger;\n    private final RxBusWrapper rxBus;\n    private final ResourceHelper resourceHelper;\n    private final Context context;\n    private final FabricPrivacy fabricPrivacy;\n    private final SP sp;\n    private final Config config;\n    private final BuildHelper buildHelper;\n    public Handler handler;\n    private final List<EventNSClientNewLog> listLog = new ArrayList<>();\n    Spanned textLog = HtmlHelper.INSTANCE.fromHtml(\"\");\n    public boolean paused;\n    boolean autoscroll;\n    public String status = \"\";\n    public NSClientService nsClientService = null;\n    private final NsClientReceiverDelegate nsClientReceiverDelegate;\n    @Inject\n    public NSClientPlugin(\n            HasAndroidInjector injector,\n            AAPSLogger aapsLogger,\n            RxBusWrapper rxBus,\n            ResourceHelper resourceHelper,\n            Context context,\n            FabricPrivacy fabricPrivacy,\n            SP sp,\n            NsClientReceiverDelegate nsClientReceiverDelegate,\n            Config config,\n            BuildHelper buildHelper\n    ) {\n        super(new PluginDescription()\n                        .mainType(PluginType.GENERAL)\n                        .fragmentClass(NSClientFragment.class.getName())\n                        .pluginIcon(R.drawable.ic_nightscout_syncs)\n                        .pluginName(R.string.nsclientinternal)\n                        .shortName(R.string.nsclientinternal_shortname)\n                        .preferencesId(R.xml.pref_nsclientinternal)\n                        .description(R.string.description_ns_client),\n                aapsLogger, resourceHelper, injector\n        );\n        this.aapsLogger = aapsLogger;\n        this.rxBus = rxBus;\n        this.resourceHelper = resourceHelper;\n        this.context = context;\n        this.fabricPrivacy = fabricPrivacy;\n        this.sp = sp;\n        this.nsClientReceiverDelegate = nsClientReceiverDelegate;\n        this.config = config;\n        this.buildHelper = buildHelper;\n        if (config.getNSCLIENT()) {\n            getPluginDescription().alwaysEnabled(true).visibleByDefault(true);\n        }\n        if (handler == null) {\n            HandlerThread handlerThread = new HandlerThread(NSClientPlugin.class.getSimpleName() + \"Handler\");\n            handlerThread.start();\n            handler = new Handler(handlerThread.getLooper());\n        }\n    }\n    public boolean isAllowed() {\n        return nsClientReceiverDelegate.allowed;\n    }\n    @Override\n    protected void onStart() {\n        paused = sp.getBoolean(R.string.key_nsclientinternal_paused, false);\n        autoscroll = sp.getBoolean(R.string.key_nsclientinternal_autoscroll, true);\n        Intent intent = new Intent(context, NSClientService.class);\n        context.bindService(intent, mConnection, Context.BIND_AUTO_CREATE);\n        super.onStart();\n        nsClientReceiverDelegate.grabReceiversState();\n        disposable.add(rxBus\n                .toObservable(EventNSClientStatus.class)\n                .observeOn(Schedulers.io())\n                .subscribe(event -> {\n                    status = event.getStatus(resourceHelper);\n                    rxBus.send(new EventNSClientUpdateGUI());\n                }, fabricPrivacy::logException)\n        );\n        disposable.add(rxBus\n                .toObservable(EventNetworkChange.class)\n                .observeOn(Schedulers.io())\n                .subscribe(event -> nsClientReceiverDelegate.onStatusEvent(event), fabricPrivacy::logException)\n        );\n        disposable.add(rxBus\n                .toObservable(EventPreferenceChange.class)\n                .observeOn(Schedulers.io())\n                .subscribe(event -> nsClientReceiverDelegate.onStatusEvent(event), fabricPrivacy::logException)\n        );\n        disposable.add(rxBus\n                .toObservable(EventAppExit.class)\n                .observeOn(Schedulers.io())\n                .subscribe(event -> {\n                    if (nsClientService != null) {\n                        context.unbindService(mConnection);\n                    }\n                }, fabricPrivacy::logException)\n        );\n        disposable.add(rxBus\n                .toObservable(EventNSClientNewLog.class)\n                .observeOn(Schedulers.io())\n                .subscribe(event -> {\n                    addToLog(event);\n                    aapsLogger.debug(LTag.NSCLIENT, event.getAction() + \" \" + event.getLogText());\n                }, fabricPrivacy::logException)\n        );\n        disposable.add(rxBus\n                .toObservable(EventChargingState.class)\n                .observeOn(Schedulers.io())\n                .subscribe(event -> nsClientReceiverDelegate.onStatusEvent(event), fabricPrivacy::logException)\n        );\n        disposable.add(rxBus\n                .toObservable(EventNSClientResend.class)\n                .observeOn(Schedulers.io())\n                .subscribe(event -> resend(event.getReason()), fabricPrivacy::logException)\n        );\n    }\n    @Override\n    protected void onStop() {\n        context.getApplicationContext().unbindService(mConnection);\n        disposable.clear();\n        super.onStop();\n    }\n    @Override\n    public void preprocessPreferences(@NotNull PreferenceFragmentCompat preferenceFragment) {\n        super.preprocessPreferences(preferenceFragment);\n        if (config.getNSCLIENT()) {\n            SwitchPreference key_ns_uploadlocalprofile = preferenceFragment.findPreference(resourceHelper.gs(R.string.key_ns_uploadlocalprofile));\n            if (key_ns_uploadlocalprofile != null) key_ns_uploadlocalprofile.setVisible(false);\n            SwitchPreference key_ns_autobackfill = preferenceFragment.findPreference(resourceHelper.gs(R.string.key_ns_autobackfill));\n            if (key_ns_autobackfill != null) key_ns_autobackfill.setVisible(false);\n            SwitchPreference key_ns_create_announcements_from_errors = preferenceFragment.findPreference(resourceHelper.gs(R.string.key_ns_create_announcements_from_errors));\n            if (key_ns_create_announcements_from_errors != null)\n                key_ns_create_announcements_from_errors.setVisible(false);\n            SwitchPreference key_ns_create_announcements_from_carbs_req = preferenceFragment.findPreference(resourceHelper.gs(R.string.key_ns_create_announcements_from_carbs_req));\n            if (key_ns_create_announcements_from_carbs_req != null)\n                key_ns_create_announcements_from_carbs_req.setVisible(false);\n            SwitchPreference key_ns_upload_only = preferenceFragment.findPreference(resourceHelper.gs(R.string.key_ns_upload_only));\n            if (key_ns_upload_only != null) {\n                key_ns_upload_only.setVisible(false);\n                key_ns_upload_only.setEnabled(false);\n            }\n            SwitchPreference key_ns_sync_use_absolute = preferenceFragment.findPreference(resourceHelper.gs(R.string.key_ns_sync_use_absolute));\n            if (key_ns_sync_use_absolute != null) key_ns_sync_use_absolute.setVisible(false);\n        } else {\n            // APS or pumpcontrol mode\n            SwitchPreference key_ns_upload_only = preferenceFragment.findPreference(resourceHelper.gs(R.string.key_ns_upload_only));\n            if (key_ns_upload_only != null)\n                key_ns_upload_only.setVisible(buildHelper.isEngineeringMode());\n        }\n    }\n    private final ServiceConnection mConnection = new ServiceConnection() {\n        public void onServiceDisconnected(ComponentName name) {\n            aapsLogger.debug(LTag.NSCLIENT, \"Service is disconnected\");\n            nsClientService = null;\n        }\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            aapsLogger.debug(LTag.NSCLIENT, \"Service is connected\");\n            NSClientService.LocalBinder mLocalBinder = (NSClientService.LocalBinder) service;\n            if (mLocalBinder != null) // is null when running in roboelectric\n", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "length": 516, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "8fe9a6e7bbe15b1499c3e2d3136b10141ef6bcda47070ace"}
{"input": "", "context": "from __future__ import with_statement, print_function\n# Script for building the _ssl and _hashlib modules for Windows.\n# Uses Perl to setup the OpenSSL environment correctly\n# and build OpenSSL, then invokes a simple nmake session\n# for the actual _ssl.pyd and _hashlib.pyd DLLs.\n# THEORETICALLY, you can:\n# * Unpack the latest SSL release one level above your main Python source\n#   directory.  It is likely you will already find the zlib library and\n#   any other external packages there.\n# * Install ActivePerl and ensure it is somewhere on your path.\n# * Run this script from the PCBuild directory.\n#\n# it should configure and build SSL, then build the _ssl and _hashlib\n# Python extensions without intervention.\n# Modified by Christian Heimes\n# Now this script supports pre-generated makefiles and assembly files.\n# Developers don't need an installation of Perl anymore to build Python. A svn\n# checkout from our svn repository is enough.\n#\n# In Order to create the files in the case of an update you still need Perl.\n# Run build_ssl in this order:\n# python.exe build_ssl.py Release x64\n# python.exe build_ssl.py Release Win32\nimport os, sys, re, shutil\n# Find all \"foo.exe\" files on the PATH.\ndef find_all_on_path(filename, extras = None):\n    entries = os.environ[\"PATH\"].split(os.pathsep)\n    ret = []\n    for p in entries:\n        fname = os.path.abspath(os.path.join(p, filename))\n        if os.path.isfile(fname) and fname not in ret:\n            ret.append(fname)\n    if extras:\n        for p in extras:\n            fname = os.path.abspath(os.path.join(p, filename))\n            if os.path.isfile(fname) and fname not in ret:\n                ret.append(fname)\n    return ret\n# Find a suitable Perl installation for OpenSSL.\n# cygwin perl does *not* work.  ActivePerl does.\n# Being a Perl dummy, the simplest way I can check is if the \"Win32\" package\n# is available.\ndef find_working_perl(perls):\n    for perl in perls:\n        fh = os.popen('\"%s\" -e \"use Win32;\"' % perl)\n        fh.read()\n        rc = fh.close()\n        if rc:\n            continue\n        return perl\n    print(\"Can not find a suitable PERL:\")\n    if perls:\n        print(\" the following perl interpreters were found:\")\n        for p in perls:\n            print(\" \", p)\n        print(\" None of these versions appear suitable for building OpenSSL\")\n    else:\n        print(\" NO perl interpreters were found on this machine at all!\")\n    print(\" Please install ActivePerl and ensure it appears on your path\")\n    return None\n# Locate the best SSL directory given a few roots to look into.\ndef find_best_ssl_dir(sources):\n    candidates = []\n    for s in sources:\n        try:\n            # note: do not abspath s; the build will fail if any\n            # higher up directory name has spaces in it.\n            fnames = os.listdir(s)\n        except os.error:\n            fnames = []\n        for fname in fnames:\n            fqn = os.path.join(s, fname)\n            if os.path.isdir(fqn) and fname.startswith(\"openssl-\"):\n                candidates.append(fqn)\n    # Now we have all the candidates, locate the best.\n    best_parts = []\n    best_name = None\n    for c in candidates:\n        parts = re.split(\"[.-]\", os.path.basename(c))[1:]\n        # eg - openssl-0.9.7-beta1 - ignore all \"beta\" or any other qualifiers\n        if len(parts) >= 4:\n            continue\n        if parts > best_parts:\n            best_parts = parts\n            best_name = c\n    if best_name is not None:\n        print(\"Found an SSL directory at '%s'\" % (best_name,))\n    else:\n        print(\"Could not find an SSL directory in '%s'\" % (sources,))\n    sys.stdout.flush()\n    return best_name\ndef create_makefile64(makefile, m32):\n    \"\"\"Create and fix makefile for 64bit\n    Replace 32 with 64bit directories\n    \"\"\"\n    if not os.path.isfile(m32):\n        return\n    with open(m32) as fin:\n        with open(makefile, 'w') as fout:\n            for line in fin:\n                line = line.replace(\"=tmp32\", \"=tmp64\")\n                line = line.replace(\"=out32\", \"=out64\")\n                line = line.replace(\"=inc32\", \"=inc64\")\n                # force 64 bit machine\n                line = line.replace(\"MKLIB=lib\", \"MKLIB=lib /MACHINE:X64\")\n                line = line.replace(\"LFLAGS=\", \"LFLAGS=/MACHINE:X64 \")\n                # don't link against the lib on 64bit systems\n                line = line.replace(\"bufferoverflowu.lib\", \"\")\n                fout.write(line)\n    os.unlink(m32)\ndef fix_makefile(makefile):\n    \"\"\"Fix some stuff in all makefiles\n    \"\"\"\n    if not os.path.isfile(makefile):\n        return\n    # 2.4 compatibility\n    fin = open(makefile)\n    if 1: # with open(makefile) as fin:\n        lines = fin.readlines()\n        fin.close()\n    fout = open(makefile, 'w')\n    if 1: # with open(makefile, 'w') as fout:\n        for line in lines:\n            if line.startswith(\"PERL=\"):\n                continue\n            if line.startswith(\"CP=\"):\n                line = \"CP=copy\\n\"\n            if line.startswith(\"MKDIR=\"):\n                line = \"MKDIR=mkdir\\n\"\n            if line.startswith(\"CFLAG=\"):\n                line = line.strip()\n                for algo in (\"RC5\", \"MDC2\", \"IDEA\"):\n                    noalgo = \" -DOPENSSL_NO_%s\" % algo\n                    if noalgo not in line:\n                        line = line + noalgo\n                line = line + '\\n'\n            fout.write(line)\n    fout.close()\ndef run_configure(configure, do_script):\n    print(\"perl Configure \"+configure)\n    os.system(\"perl Configure \"+configure)\n    print(do_script)\n    os.system(do_script)\ndef main():\n    build_all = \"-a\" in sys.argv\n    if sys.argv[1] == \"Release\":\n        debug = False\n    elif sys.argv[1] == \"Debug\":\n        debug = True\n    else:\n        raise ValueError(str(sys.argv))\n    if sys.argv[2] == \"Win32\":\n        arch = \"x86\"\n        configure = \"VC-WIN32\"\n        do_script = \"ms\\\\do_nasm\"\n        makefile=\"ms\\\\nt.mak\"\n        m32 = makefile\n    elif sys.argv[2] == \"x64\":\n        arch=\"amd64\"\n        configure = \"VC-WIN64A\"\n        do_script = \"ms\\\\do_win64a\"\n        makefile = \"ms\\\\nt64.mak\"\n        m32 = makefile.replace('64', '')\n        #os.environ[\"VSEXTCOMP_USECL\"] = \"MS_OPTERON\"\n    else:\n        raise ValueError(str(sys.argv))\n    make_flags = \"\"\n    if build_all:\n        make_flags = \"-a\"\n    # perl should be on the path, but we also look in \"\\perl\" and \"c:\\\\perl\"\n    # as \"well known\" locations\n    perls = find_all_on_path(\"perl.exe\", [\"\\\\perl\\\\bin\", \"C:\\\\perl\\\\bin\"])\n    perl = find_working_perl(perls)\n    if perl:\n        print(\"Found a working perl at '%s'\" % (perl,))\n    else:\n        print(\"No Perl installation was found. Existing Makefiles are used.\")\n    sys.stdout.flush()\n    # Look for SSL 2 levels up from pcbuild - ie, same place zlib etc all live.\n    ssl_dir = find_best_ssl_dir((\"..\\\\..\",))\n    if ssl_dir is None:\n        sys.exit(1)\n    old_cd = os.getcwd()\n    try:\n        os.chdir(ssl_dir)\n        # rebuild makefile when we do the role over from 32 to 64 build\n        if arch == \"amd64\" and os.path.isfile(m32) and not os.path.isfile(makefile):\n            os.unlink(m32)\n        # If the ssl makefiles do not exist, we invoke Perl to generate them.\n        # Due to a bug in this script, the makefile sometimes ended up empty\n        # Force a regeneration if it is.\n        if not os.path.isfile(makefile) or os.path.getsize(makefile)==0:\n            if perl is None:\n                print(\"Perl is required to build the makefiles!\")\n                sys.exit(1)\n            print(\"Creating the makefiles...\")\n            sys.stdout.flush()\n            # Put our working Perl at the front of our path\n            os.environ[\"PATH\"] = os.path.dirname(perl) + \\\n                                          os.pathsep + \\\n                                          os.environ[\"PATH\"]\n            run_configure(configure, do_script)\n            if debug:\n                print(\"OpenSSL debug builds aren't supported.\")\n            #if arch==\"x86\" and debug:\n            #    # the do_masm script in openssl doesn't generate a debug\n            #    # build makefile so we generate it here:\n            #    os.system(\"perl util\\mk1mf.pl debug \"+configure+\" >\"+makefile)\n", "answers": ["            if arch == \"amd64\":"], "length": 982, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "c737e0826af057af7bdde835b7d29b5b6e193c58c82a25f4"}
{"input": "", "context": "using UnityEngine;\nusing UnityEditor;\nusing System.Collections;\nusing System.Collections.Generic;\npublic class TowerEditor : EditorWindow {\n    \n\tint levelCap=1;\n\t\n\t[SerializeField] static string[] nameList=new string[0];\n\t\n\t[SerializeField] static UnitTower[] towerList=new UnitTower[0];\n\t\n\t\n\tUnitTower newTower;\n\t\n\tUnitTower tower;\n\t\n\tint index=0;\n\tint towerType=0;\n\tint towerTargetMode=0;\n\t//~ int towerTargetPriority=0;\n\t//~ int towerTargetArea=0;\n\t//~ int turretAnimateMode=0;\n\t//~ int turretRotationMode=0;\n\t\n\tstatic string[] towerTypeLabel=new string[3];\n\tstatic string[] towerTargetModeLabel=new string[3];\n\tstatic string[] towerTargetPriorityLabel=new string[4];\n\tstatic string[] towerTargetAreaLabel=new string[3];\n\tstatic string[] turretAnimateModeLabel=new string[3];\n\tstatic string[] turretRotationModeLabel=new string[2];\n    \n\tprivate bool[] indicatorFlags=new bool[1];\n\t\n\tprivate bool showAnimationList=false;\n\tprivate string showAnimationText=\"Show animation configuration\";\n\t\n\tprivate bool showSoundList=false;\n\tprivate string showSoundText=\"Show sfx list\";\n\t\n\tstatic private TowerEditor window;\n\t\n    // Add menu named \"TowerEditor\" to the Window menu\n    //[MenuItem (\"TDTK/TowerEditor\")]\n    public static void Init () {\n        // Get existing open window or if none, make a new one:\n        window = (TowerEditor)EditorWindow.GetWindow(typeof (TowerEditor));\n\t\twindow.minSize=new Vector2(610, 650);\n\t\t\n\t\twindow.indicatorFlags[0]=true;\n\t\t\n\t\tGetTower();\n\t\t\n\t\ttowerTypeLabel[0]=\"Turret Tower\";\n\t\ttowerTypeLabel[1]=\"AOE Tower\";\n\t\ttowerTypeLabel[2]=\"Support Tower\";\n\t\t\n\t\ttowerTargetModeLabel[0]=\"Hybrid\";\n\t\ttowerTargetModeLabel[1]=\"Air\";\n\t\ttowerTargetModeLabel[2]=\"Ground\";\n\t\t\n\t\ttowerTargetPriorityLabel[0]=\"Nearest\";\n\t\ttowerTargetPriorityLabel[1]=\"Weakest\";\n\t\ttowerTargetPriorityLabel[2]=\"Toughest\";\n\t\ttowerTargetPriorityLabel[3]=\"Random\";\n\t\t\n\t\ttowerTargetAreaLabel[0]=\"AllAround\";\n\t\ttowerTargetAreaLabel[1]=\"DirectionalCone\";\n\t\ttowerTargetAreaLabel[2]=\"StraightLine\";\n\t\t\n\t\tturretAnimateModeLabel[0]=\"Full\";\n\t\tturretAnimateModeLabel[1]=\"Y-Axis Only\";\n\t\tturretAnimateModeLabel[2]=\"None\";\n\t\t\n\t\tturretRotationModeLabel[0]=\"FullTurret\";\n\t\tturretRotationModeLabel[1]=\"SeparatedBarrel\";\n\t\t\n    }\n    \n\tstatic BuildManager buildManager;\n\t\n\tstatic void GetTower(){\n\t\ttowerList=new UnitTower[0];\n\t\tnameList=new string[0];\n\t\t\n\t\tbuildManager=(BuildManager)FindObjectOfType(typeof(BuildManager));\n\t\t\n\t\tif(buildManager!=null){\n\t\t\ttowerList=buildManager.towers;\n\t\t\t\n\t\t\tnameList=new string[towerList.Length];\n\t\t\tfor(int i=0; i<towerList.Length; i++){\n\t\t\t\tnameList[i]=towerList[i].name;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\ttowerList=new UnitTower[0];\n\t\t\tnameList=new string[0];\n\t\t}\n\t\t\n\t}\n\t\n\tfloat startX, startY, height, spaceY, lW;\n\tint rscCount=1;\n\t\n\tprivate Vector2 scrollPos;\n\t\n    void OnGUI () {\n\t\tscrollPos = GUI.BeginScrollView(new Rect(0, 0, window.position.width, window.position.height), scrollPos, new Rect(0, 0, Mathf.Max(window.position.width, 610+(levelCap-3)*180), 1270));\n\t\t\n\t\tGUI.changed = false;\n\t\t\n\t\t\n\t\t{\n\t\t\tstartX=3;\n\t\t\tstartY=3;\n\t\t\theight=18;\n\t\t\tspaceY=height+startX;\n\t\t\t\n\t\t\tlW=100;\t//label width, the offset from label to the editable field\n\t\t\t\n\t\t\tif(towerList.Length>0) {\n\t\t\t\tindex = EditorGUI.Popup(new Rect(startX, startY, 300, height), \"Tower:\", index, nameList);\n\t\t\t\t\n\t\t\t\t//new tower, update index\n\t\t\t\tlevelCap=towerList[index].levelCap;\t\t\t\n\t\t\t\tEditorGUI.LabelField(new Rect(320+startX, startY, 200, height), \"LevelCap: \"+towerList[index].levelCap.ToString());\n\t\t\t\tEditorGUI.LabelField(new Rect(395+startX, startY, 200, height), \"Change to: \");\n\t\t\t\tlevelCap = EditorGUI.IntField(new Rect(startX+465, startY, 20, height), levelCap);\n\t\t\t\tlevelCap = Mathf.Max(1, levelCap);\n\t\t\t\tUpdateIndicatorFlags(levelCap);\n\t\t\t\t\n\t\t\t\tif(levelCap!=towerList[index].levelCap){\n\t\t\t\t\ttowerList[index].levelCap=levelCap;\n\t\t\t\t\ttowerList[index].UpdateTowerUpgradeStat(levelCap-1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//assign appropriate towerType index\n\t\t\t\tif(towerList[index].type==_TowerType.TurretTower) towerType=0;\n\t\t\t\telse if(towerList[index].type==_TowerType.AOETower) towerType=1;\n\t\t\t\t//~ else if(towerList[index].type==_TowerType.DirectionalAOETower) towerType=2;\n\t\t\t\telse if(towerList[index].type==_TowerType.SupportTower) towerType=3;\n\t\t\t\t//~ else if(towerList[index].type==_TowerType.ResourceTower) towerType=4;\n\t\t\t\t//~ else if(towerList[index].type==_TowerType.Mine) towerType=5;\n\t\t\t\t//~ else if(towerList[index].type==_TowerType.Block) towerType=6;\n\t\t\t\t\n\t\t\t\t//assign appropriate towerTargetMode index\n\t\t\t\tif(towerList[index].targetMode==_TargetMode.Hybrid) towerTargetMode=0;\n\t\t\t\telse if(towerList[index].targetMode==_TargetMode.Air) towerTargetMode=1;\n\t\t\t\telse if(towerList[index].targetMode==_TargetMode.Ground) towerTargetMode=2;\n\t\t\t\t\n\t\t\t\t//~ if(towerList[index].type==_TowerType.TurretTower || towerList[index].type==_TowerType.DirectionalAOETower){\n\t\t\t\t\t//~ if(towerList[index].animateTurret==_TurretAni.Full) turretAnimateMode=0;\n\t\t\t\t\t//~ if(towerList[index].animateTurret==_TurretAni.YAxis) turretAnimateMode=1;\n\t\t\t\t\t//~ if(towerList[index].animateTurret==_TurretAni.None) turretAnimateMode=2;\n\t\t\t\t//~ }\n\t\t\t\t\n\t\t\t\t//~ if(towerList[index].type==_TowerType.TurretTower || towerList[index].type==_TowerType.DirectionalAOETower){\n\t\t\t\t\t//~ if(towerList[index].turretRotationModel==_RotationMode.FullTurret) turretRotationMode=0;\n\t\t\t\t\t//~ if(towerList[index].turretRotationModel==_RotationMode.SeparatedBarrel) turretRotationMode=1;\n\t\t\t\t//~ }\n\t\t\t\t\n\t\t\t\t//~ if(towerList[index].type==_TowerType.TurretTower || towerList[index].type==_TowerType.DirectionalAOETower){\n\t\t\t\t\t//~ if(towerList[index].targetPriority==_TargetPriority.Nearest) towerTargetPriority=0;\n\t\t\t\t\t//~ if(towerList[index].targetPriority==_TargetPriority.Weakest) towerTargetPriority=1;\n\t\t\t\t\t//~ if(towerList[index].targetPriority==_TargetPriority.Toughest) towerTargetPriority=2;\n\t\t\t\t\t//~ if(towerList[index].targetPriority==_TargetPriority.Random) towerTargetPriority=3;\n\t\t\t\t//~ }\n\t\t\t\t\n\t\t\t\t//~ if(towerList[index].type==_TowerType.TurretTower || towerList[index].type==_TowerType.DirectionalAOETower){\n\t\t\t\t\t//~ if(towerList[index].targetingArea==_TargetingArea.AllAround) towerTargetArea=0;\n\t\t\t\t\t//~ if(towerList[index].targetingArea==_TargetingArea.DirectionalCone) towerTargetArea=1;\n\t\t\t\t\t//~ if(towerList[index].targetingArea==_TargetingArea.StraightLine) towerTargetArea=2;\n\t\t\t\t//~ }\n\t\t\t\t\n\t\t\t\tif(GUI.Button(new Rect(Mathf.Max(startX+500, window.position.width-160), startY, 140, height), \"Update Build Manager\")){\n\t\t\t\t\tGetTower();\n\t\t\t\t\tGUI.EndScrollView();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttowerList[index].unitName = EditorGUI.TextField(new Rect(startX, startY+=30, 300, height-3), \"TowerName:\", towerList[index].unitName);\n\t\t\t\t\n\t\t\t\tEditorGUI.LabelField(new Rect(startX+320, startY, 70, height), \"Icon: \");\n\t\t\t\ttowerList[index].icon=(Texture)EditorGUI.ObjectField(new Rect(startX+360, startY, 70, 70), towerList[index].icon, typeof(Texture), false);\n\t\t\t\t\t\t  \n\t\t\t\ttowerType = EditorGUI.Popup(new Rect(startX, startY+=20, 300, 15), \"TowerType:\", towerType, towerTypeLabel);\n\t\t\t\tif(towerType==0) towerList[index].type=_TowerType.TurretTower;\n\t\t\t\telse if(towerType==1) towerList[index].type=_TowerType.AOETower;\n\t\t\t\t//~ else if(towerType==2) towerList[index].type=_TowerType.DirectionalAOETower;\n\t\t\t\telse if(towerType==3) towerList[index].type=_TowerType.SupportTower;\n\t\t\t\t//~ else if(towerType==4) towerList[index].type=_TowerType.ResourceTower;\n\t\t\t\t//~ else if(towerType==5) towerList[index].type=_TowerType.Mine;\n\t\t\t\t//~ else if(towerType==6) towerList[index].type=_TowerType.Block;\n\t\t\t\t\n\t\t\t\tif(towerList[index].type==_TowerType.TurretTower || towerList[index].type==_TowerType.AOETower){//|| towerList[index].type==_TowerType.DirectionalAOETower\n\t\t\t\t\ttowerTargetMode = EditorGUI.Popup(new Rect(startX, startY+=20, 300, 15), \"TargetingMode:\", towerTargetMode, towerTargetModeLabel);\n\t\t\t\t\tif(towerTargetMode==0) towerList[index].targetMode=_TargetMode.Hybrid;\n\t\t\t\t\telse if(towerTargetMode==1) towerList[index].targetMode=_TargetMode.Air;\n\t\t\t\t\telse if(towerTargetMode==2) towerList[index].targetMode=_TargetMode.Ground;\n\t\t\t\t}\n\t\t\t\telse startY+=20;\n\t\t\t\t//towerList[index].armorType=EditorGUI.IntField(new Rect(startX, startY+=20, 300, height-3), \"ArmorType:\", towerList[index].armorType);\n\t\t\t\t//if(towerList[index].type!=_TowerType.SupportTower && towerList[index].type!=_TowerType.ResourceTower && towerList[index].type!=_TowerType.Block){\n\t\t\t\t//\ttowerList[index].armorType=EditorGUI.IntField(new Rect(startX, startY+=20, 300, height-3), \"DamageType:\", towerList[index].damageType);\n\t\t\t\t//}\n\t\t\t\t//else startY+=20;\n\t\t\t\t\n\t\t\t\t//~ if(towerList[index].type==_TowerType.TurretTower){// || towerList[index].type==_TowerType.DirectionalAOETower){\n\t\t\t\t\t//~ towerTargetArea = EditorGUI.Popup(new Rect(startX, startY+=20, 300, 15), \"TargetingArea:\", towerTargetArea, towerTargetAreaLabel);\n\t\t\t\t\t//~ if(towerTargetArea==0) towerList[index].targetingArea=_TargetingArea.AllAround;\n\t\t\t\t\t//~ else if(towerTargetArea==1) towerList[index].targetingArea=_TargetingArea.DirectionalCone;\n\t\t\t\t\t//~ else if(towerTargetArea==2) towerList[index].targetingArea=_TargetingArea.StraightLine;\n\t\t\t\t\t\n\t\t\t\t\t//~ if(towerList[index].targetingArea!=_TargetingArea.AllAround){\n\t\t\t\t\t\t//~ towerList[index].matchTowerDir2TargetDir=EditorGUI.Toggle(new Rect(startX+205, startY+20-1, 300, height-3), towerList[index].matchTowerDir2TargetDir);\n\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX+220, startY+20-1, 300, height-3), \"FaceDirection\");\n\t\t\t\t\t\t//~ towerList[index].targetingDirection = EditorGUI.FloatField(new Rect(startX, startY+=20, 195, height-3), \"TargetingDirection:\", towerList[index].targetingDirection);\n\t\t\t\t\t//~ }\n\t\t\t\t\t//~ else startY+=20;\n\t\t\t\t//~ }\n\t\t\t\t//~ else startY+=40;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//~ if(towerList[index].targetingArea==_TargetingArea.DirectionalCone){\n\t\t\t\t\t//~ towerList[index].targetingFOV = EditorGUI.FloatField(new Rect(startX, startY+=20, 300, height-3), \"TargetingFOV:\", towerList[index].targetingFOV);\n\t\t\t\t//~ }\n\t\t\t\t//~ else startY+=20;\n\t\t\t\t\n\t\t\t\t//~ if(towerList[index].type==_TowerType.TurretTower || towerList[index].type==_TowerType.DirectionalAOETower){\n\t\t\t\t\t//~ if(towerList[index].targetingArea!=_TargetingArea.StraightLine){\n\t\t\t\t\t\t//~ towerTargetPriority = EditorGUI.Popup(new Rect(startX, startY+=20, 300, 15), \"TargetingPriority:\", towerTargetPriority, towerTargetPriorityLabel);\n\t\t\t\t\t\t//~ if(towerTargetPriority==0) towerList[index].targetPriority=_TargetPriority.Nearest;\n\t\t\t\t\t\t//~ else if(towerTargetPriority==1) towerList[index].targetPriority=_TargetPriority.Weakest;\n\t\t\t\t\t\t//~ else if(towerTargetPriority==2) towerList[index].targetPriority=_TargetPriority.Toughest;\n\t\t\t\t\t\t//~ else if(towerTargetPriority==2) towerList[index].targetPriority=_TargetPriority.Random;\n\t\t\t\t\t//~ }\n\t\t\t\t\t//~ //else startY+=20;\n\t\t\t\t//~ }\n\t\t\t\t//~ else startY+=20;\n\t\t\t\t\n\t\t\t\t//~ if(towerList[index].type==_TowerType.TurretTower || towerList[index].type==_TowerType.DirectionalAOETower){\n\t\t\t\t\t//~ turretAnimateMode = EditorGUI.Popup(new Rect(startX, startY+=20, 300, 15), \"TurretAnimateMode:\", turretAnimateMode, turretAnimateModeLabel);\n\t\t\t\t\t//~ if(turretAnimateMode==0) towerList[index].animateTurret=_TurretAni.Full;\n\t\t\t\t\t//~ else if(turretAnimateMode==1) towerList[index].animateTurret=_TurretAni.YAxis;\n\t\t\t\t\t//~ else if(turretAnimateMode==2) towerList[index].animateTurret=_TurretAni.None;\n\t\t\t\t\t\n\t\t\t\t\t//~ turretRotationMode = EditorGUI.Popup(new Rect(startX, startY+=20, 300, 15), \"TurretRotationMode:\", turretRotationMode, turretRotationModeLabel);\n\t\t\t\t\t//~ if(turretRotationMode==0) towerList[index].turretRotationModel=_RotationMode.FullTurret;\n\t\t\t\t\t//~ else if(turretRotationMode==1) towerList[index].turretRotationModel=_RotationMode.SeparatedBarrel;\n\t\t\t\t//~ }\n\t\t\t\t//~ else startY+=20;\n\t\t\t\t\n\t\t\t\t//~ if(towerList[index].type==_TowerType.DirectionalAOETower){\n\t\t\t\t\t//~ towerList[index].aoeConeAngle = EditorGUI.FloatField(new Rect(startX, startY+=20, 300, height-3), \"AOE Cone Angle:\", towerList[index].aoeConeAngle);\n\t\t\t\t//~ }\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//~ if(towerList[index].type==_TowerType.Mine){\n\t\t\t\t\t//~ towerList[index].mineOneOff=EditorGUI.Toggle(new Rect(startX, startY, 300, 15), \"DestroyUponTriggered:\", towerList[index].mineOneOff);\n\t\t\t\t//~ }\n\t\t\t\t\n\t\t\t\tstartY+=5;\n\t\t\t\ttowerList[index].buildingEffect=(GameObject)EditorGUI.ObjectField(new Rect(startX, startY+=20, 300, 15), \"BuildingEffect: \", towerList[index].buildingEffect, typeof(GameObject), false);\n\t\t\t\ttowerList[index].buildingDoneEffect=(GameObject)EditorGUI.ObjectField(new Rect(startX, startY+=20, 300, 15), \"BuildingDoneEffect: \", towerList[index].buildingDoneEffect, typeof(GameObject), false);\n\t\t\t\tstartY+=5;\n\t\t\t\t\n\t\t\t\tshowAnimationList=EditorGUI.Foldout(new Rect(startX, startY+=spaceY, 300, 15), showAnimationList, showAnimationText);\n\t\t\t\tif(showAnimationList){\n\t\t\t\t\tshowAnimationText=\"Hide build animation list\";\n\t\t\t\t\ttowerList[index].turretBuildAnimationBody=(Animation)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - TurretAnimationComponent: \", towerList[index].turretBuildAnimationBody, typeof(Animation), false);\n\t\t\t\t\ttowerList[index].turretBuildAnimation=(AnimationClip)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - TurretAnimation: \", towerList[index].turretBuildAnimation, typeof(AnimationClip), false);\n\t\t\t\t\ttowerList[index].baseBuildAnimationBody=(Animation)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - BaseAnimationComponent: \", towerList[index].baseBuildAnimationBody, typeof(Animation), false);\n\t\t\t\t\ttowerList[index].baseBuildAnimation=(AnimationClip)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - BaseAnimation: \", towerList[index].baseBuildAnimation, typeof(AnimationClip), false);\n\t\t\t\t\t//~ towerList[index].fireAnimationBody=(Animation)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - FireAnimationBody: \", towerList[index].fireAnimationBody, typeof(Animation), false);\n\t\t\t\t\t//~ towerList[index].fireAnimation=(AnimationClip)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - FireAnimation: \", towerList[index].fireAnimation, typeof(AnimationClip), false);\n\t\t\t\t\t//~ towerList[index].fireAnimationBaseBody=(Animation)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - FireAnimationBaseBody: \", towerList[index].fireAnimationBaseBody, typeof(Animation), false);\n\t\t\t\t\t//~ towerList[index].fireAnimationBase=(AnimationClip)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - FireAnimationBase: \", towerList[index].fireAnimationBase, typeof(AnimationClip), false);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tshowAnimationText=\"Show build animation list\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tshowSoundList=EditorGUI.Foldout(new Rect(startX, startY+=spaceY, 300, 15), showSoundList, showSoundText);\n\t\t\t\tif(showSoundList){\n\t\t\t\t\ttowerList[index].shootSound=(AudioClip)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - ShootSound: \", towerList[index].shootSound, typeof(AudioClip), false);\n\t\t\t\t\ttowerList[index].buildingSound=(AudioClip)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - BuildingSound: \", towerList[index].buildingSound, typeof(AudioClip), false);\n\t\t\t\t\ttowerList[index].builtSound=(AudioClip)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - BuiltSound: \", towerList[index].builtSound, typeof(AudioClip), false);\n\t\t\t\t\ttowerList[index].soldSound=(AudioClip)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - SoldSound: \", towerList[index].soldSound, typeof(AudioClip), false);\n\t\t\t\t\t\n\t\t\t\t\tshowSoundText=\"Hide sfx list\";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tshowSoundText=\"Show sfx list\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=25, 150, height), \"Tower Description: \");\n\t\t\t\ttowerList[index].description=EditorGUI.TextArea(new Rect(startX, startY+=17, 485, 50), towerList[index].description);\n\t\t\t\tstartY+=25;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//position in which the stat editor for tower levels start\n\t\t\t\tstartY+=20;\n\t\t\t\tfloat tabYPos=startY;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\trscCount=1;\n\t\t\t\t\n\t\t\t\t//TowerStat section\n\t\t\t\t//if(index>=0 && index<towerList.Length){\n\t\t\t\t\t\n\t\t\t\t\tindicatorFlags[0] = EditorGUI.Toggle(new Rect(startX, startY+spaceY-10, 20, height), indicatorFlags[0]);\n\t\t\t\t\tstartY+=10;\n\t\t\t\t\t\n\t\t\t\t\tif(indicatorFlags[0]){\n\t\t\t\t\t\tGUI.Box(new Rect(startX, startY+spaceY-1, 175, 465+(rscCount*20)), \"\");\n\t\t\t\t\t\tstartX+=3;\n\t\t\t\t\t\t\n\t\t\t\t\t\tEditorGUI.LabelField(new Rect(50+startX, startY+=spaceY, 200, height), \"Level 1: \");\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(rscCount!=towerList[index].baseStat.costs.Length){\n\t\t\t\t\t\t\tUpdateBaseStatCost(index, rscCount);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(towerList[index].baseStat.costs.Length==1){\n\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Cost: \");\n\t\t\t\t\t\t\ttowerList[index].baseStat.costs[0] = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.costs[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY-5, 200, height), \"Cost: \");\n\t\t\t\t\t\t\tfor(int i=0; i<towerList[index].baseStat.costs.Length; i++){\n\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY-3, 200, height), \" - resource: \");\n\t\t\t\t\t\t\t\ttowerList[index].baseStat.costs[i] = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY-3, 50, height-2), towerList[index].baseStat.costs[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstartY+=8;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"BuildDuration: \");\n\t\t\t\t\t\ttowerList[index].baseStat.buildDuration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.buildDuration);\n\t\t\t\t\t\t\n\t\t\t\t\t\tstartY+=3;\n\t\t\t\t\t\t\n\t\t\t\t\t\tTypeDependentBaseStat(index);\n\t\t\t\t\t\t\n\t\t\t\t\t\tspaceY+=2;\tstartY+=8;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//~ if(!(towerList[index].type==_TowerType.Mine || towerList[index].type==_TowerType.Block)){\n\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"ShootObj: \");\n\t\t\t\t\t\t\ttowerList[index].baseStat.shootObject=(Transform)EditorGUI.ObjectField(new Rect(startX+lW-30, startY+=spaceY, 100, height-2), towerList[index].baseStat.shootObject, typeof(Transform), false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"TurretObj: \");\n\t\t\t\t\t\t\ttowerList[index].baseStat.turretObject=(Transform)EditorGUI.ObjectField(new Rect(startX+lW-30, startY+=spaceY, 100, height-2), towerList[index].baseStat.turretObject, typeof(Transform), false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"BaseObj: \");\n\t\t\t\t\t\t\ttowerList[index].baseStat.baseObject=(Transform)EditorGUI.ObjectField(new Rect(startX+lW-30, startY+=spaceY, 100, height-2), towerList[index].baseStat.baseObject, typeof(Transform), false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t//~ if(towerList[index].type==_TowerType.TurretTower || towerList[index].type==_TowerType.DirectionalAOETower){\n\t\t\t\t\t\t\t\t//~ if(towerList[index].turretRotationModel==_RotationMode.SeparatedBarrel){\n\t\t\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"BarrelObj: \");\n\t\t\t\t\t\t\t\t\t//~ towerList[index].baseStat.barrelObject=(Transform)EditorGUI.ObjectField(new Rect(startX+lW-30, startY+=spaceY, 100, height-2), towerList[index].baseStat.barrelObject, typeof(Transform), false);\n\t\t\t\t\t\t\t\t//~ }\n\t\t\t\t\t\t\t\t//~ else startY+=spaceY;\n\t\t\t\t\t\t\t//~ }\n\t\t\t\t\t\t\t//~ else startY+=spaceY;\n\t\t\t\t\t\t//~ }\n\t\t\t\t\t\t\n\t\t\t\t\t\t//~ startY=870;\n\t\t\t\t\t\tstartY+=10;\n\t\t\t\t\t\tstartX-=3;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//~ showAnimationList=EditorGUI.Foldout(new Rect(startX, startY+=spaceY, 300, 15), showAnimationList, showAnimationText);\n\t\t\t\t\t\t//~ if(showAnimationList){\n\t\t\t\t\t\t\t//~ towerList[index].buildAnimationBody=(Animation)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - BuildAnimationBody: \", towerList[index].buildAnimationBody, typeof(Animation), false);\n\t\t\t\t\t\t\t//~ towerList[index].buildAnimation=(AnimationClip)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - BuildAnimation: \", towerList[index].buildAnimation, typeof(AnimationClip), false);\n\t\t\t\t\t\t\t//~ towerList[index].fireAnimationBody=(Animation)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - FireAnimationBody: \", towerList[index].fireAnimationBody, typeof(Animation), false);\n\t\t\t\t\t\t\t//~ towerList[index].fireAnimation=(AnimationClip)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - FireAnimation: \", towerList[index].fireAnimation, typeof(AnimationClip), false);\n\t\t\t\t\t\t\t//~ towerList[index].fireAnimationBaseBody=(Animation)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - FireAnimationBaseBody: \", towerList[index].fireAnimationBaseBody, typeof(Animation), false);\n\t\t\t\t\t\t\t//~ towerList[index].fireAnimationBase=(AnimationClip)EditorGUI.ObjectField(new Rect(startX, startY+=spaceY, 300, 17), \" - FireAnimationBase: \", towerList[index].fireAnimationBase, typeof(AnimationClip), false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//~ showAnimationText=\"Hide animation list\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t//~ if(!(towerList[index].type==_TowerType.Mine || towerList[index].type==_TowerType.Block)){\n\t\t\t\t\t\t\tspaceY-=3;\n\t\t\t\t\t\t\tGUI.Box(new Rect(startX, startY+spaceY-1, 175, 133), \"\");\n\t\t\t\t\t\t\tstartX+=3;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY, 200, height), \"- Turret Fire Animation: \");\n\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Clip: \");\n\t\t\t\t\t\t\ttowerList[index].baseStat.turretFireAnimation=(AnimationClip)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].baseStat.turretFireAnimation, typeof(AnimationClip), false);\n\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Component: \");\n\t\t\t\t\t\t\ttowerList[index].baseStat.turretFireAnimationBody=(Animation)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].baseStat.turretFireAnimationBody, typeof(Animation), false);\n\t\t\t\t\t\t\tstartY+=10;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY, 200, height), \"- Base Fire Animation: \");\n\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Clip: \");\n\t\t\t\t\t\t\ttowerList[index].baseStat.baseFireAnimation=(AnimationClip)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].baseStat.baseFireAnimation, typeof(AnimationClip), false);\n\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Component: \");\n\t\t\t\t\t\t\ttowerList[index].baseStat.baseFireAnimationBody=(Animation)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].baseStat.baseFireAnimationBody, typeof(Animation), false);\n\t\t\t\t\t\t\tstartY+=10;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX+18, startY+=spaceY, 200, height), \"Turret Build Animation: \");\n\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Clip: \");\n\t\t\t\t\t\t\t//~ towerList[index].baseStat.turretBuildAnimation=(AnimationClip)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].baseStat.turretBuildAnimation, typeof(AnimationClip), false);\n\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Component: \");\n\t\t\t\t\t\t\t//~ towerList[index].baseStat.turretBuildAnimationBody=(Animation)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].baseStat.turretBuildAnimationBody, typeof(Animation), false);\n\t\t\t\t\t\t\t//~ startY+=10;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX+18, startY+=spaceY, 200, height), \"Base Build Animation: \");\n\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Clip: \");\n\t\t\t\t\t\t\t//~ towerList[index].baseStat.baseBuildAnimation=(AnimationClip)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].baseStat.baseBuildAnimation, typeof(AnimationClip), false);\n\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Component: \");\n\t\t\t\t\t\t\t//~ towerList[index].baseStat.baseBuildAnimationBody=(Animation)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].baseStat.baseBuildAnimationBody, typeof(Animation), false);\n\t\t\t\t\t\t//~ }\t\n\t\t\t\t\t\t\t//EditorGUI.LabelField(new Rect(50+startX, startY+=spaceY, 200, height), \"Level 1: \");\n\t\t\t\t\t\t//~ }\n\t\t\t\t\t\t//~ else{\n\t\t\t\t\t\t\t//~ showAnimationText=\"Show animation list\";\n\t\t\t\t\t\t//~ }\n\t\t\t\t\t\t\n\t\t\t\t\t\tstartX+=200;\tstartY=tabYPos;\tspaceY=21;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY, 200, height), \"1\");\n\t\t\t\t\t\tstartX+=35;\tstartY=tabYPos;\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor(int i=0; i<towerList[index].upgradeStat.Length; i++){\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(towerList[index]!=null && towerList[index].upgradeStat[i]!=null){\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tindicatorFlags[i+1] = EditorGUI.Toggle(new Rect(startX, startY+spaceY-10, 20, height), indicatorFlags[i+1]);\n\t\t\t\t\t\t\tstartY+=10;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(indicatorFlags[i+1]){\n\t\t\t\t\t\t\t\tGUI.Box(new Rect(startX, startY+spaceY-1, 175, 465+(rscCount*20)), \"\");\n\t\t\t\t\t\t\t\tstartX+=3;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(50+startX, startY+=spaceY, 200, height), \"Level \"+(i+2).ToString()+\": \");\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//EditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Cost: \");\n\t\t\t\t\t\t\t\t//towerList[index].upgradeStat[i].cost = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[i].cost);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(rscCount!=towerList[index].upgradeStat[i].costs.Length){\n\t\t\t\t\t\t\t\t\tUpdateUpgradeStatCost(index, rscCount);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(towerList[index].upgradeStat[i].costs.Length==1){\n\t\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Cost: \");\n\t\t\t\t\t\t\t\t\ttowerList[index].upgradeStat[i].costs[0] = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[i].costs[0]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY-5, 200, height), \"Cost: \");\n\t\t\t\t\t\t\t\t\tfor(int j=0; j<towerList[index].upgradeStat[i].costs.Length; j++){\n\t\t\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY-3, 200, height), \" - resource: \");\n\t\t\t\t\t\t\t\t\t\ttowerList[index].upgradeStat[i].costs[j] = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY-3, 50, height-2), towerList[index].upgradeStat[i].costs[j]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tstartY+=8;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"BuildDuration: \");\n\t\t\t\t\t\t\t\ttowerList[index].upgradeStat[i].buildDuration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[i].buildDuration);\n\t\t\t\t\t\t\t\tstartY+=3;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tTypeDependentUpgradeStat(index, i);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tspaceY+=2;\tstartY+=8;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//~ if(!(towerList[index].type==_TowerType.Mine || towerList[index].type==_TowerType.Block)){\n\t\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"ShootObj: \");\n\t\t\t\t\t\t\t\t\ttowerList[index].upgradeStat[i].shootObject=(Transform)EditorGUI.ObjectField(new Rect(startX+lW-30, startY+=spaceY, 100, height-2), towerList[index].upgradeStat[i].shootObject, typeof(Transform), false);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"TurretObj: \");\n\t\t\t\t\t\t\t\t\ttowerList[index].upgradeStat[i].turretObject=(Transform)EditorGUI.ObjectField(new Rect(startX+lW-30, startY+=spaceY, 100, height-2), towerList[index].upgradeStat[i].turretObject, typeof(Transform), false);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"BaseObj: \");\n\t\t\t\t\t\t\t\t\ttowerList[index].upgradeStat[i].baseObject=(Transform)EditorGUI.ObjectField(new Rect(startX+lW-30, startY+=spaceY, 100, height-2), towerList[index].upgradeStat[i].baseObject, typeof(Transform), false);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//~ if(towerList[index].type==_TowerType.TurretTower || towerList[index].type==_TowerType.DirectionalAOETower){\n\t\t\t\t\t\t\t\t\t\t//~ if(towerList[index].turretRotationModel==_RotationMode.SeparatedBarrel){\n\t\t\t\t\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"BarrelObj: \");\n\t\t\t\t\t\t\t\t\t\t\t//~ towerList[index].upgradeStat[i].barrelObject=(Transform)EditorGUI.ObjectField(new Rect(startX+lW-30, startY+=spaceY, 100, height-2), towerList[index].upgradeStat[i].barrelObject, typeof(Transform), false);\n\t\t\t\t\t\t\t\t\t\t//~ }\n\t\t\t\t\t\t\t\t\t\t//~ else startY+=spaceY;\n\t\t\t\t\t\t\t\t\t//~ }\n\t\t\t\t\t\t\t\t\t//~ else startY+=spaceY;\n\t\t\t\t\t\t\t\t//~ }\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//~ if(showAnimationList){\n\t\t\t\t\t\t\t\t\t//~ showAnimationText=\"Hide animation list\";\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//~ if(!(towerList[index].type==_TowerType.Mine || towerList[index].type==_TowerType.Block)){\n\t\t\t\t\t\t\t\t\tspaceY-=3;\n\t\t\t\t\t\t\t\t\tstartY+=10;//870+spaceY;\n\t\t\t\t\t\t\t\t\tstartX-=3;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//~ GUI.Box(new Rect(startX, startY+spaceY-1, 175, 275), \"\");\n\t\t\t\t\t\t\t\t\tGUI.Box(new Rect(startX, startY+spaceY-1, 175, 133), \"\");\n\t\t\t\t\t\t\t\t\tstartX+=3;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY, 200, height), \"- Turret Fire Animation: \");\n\t\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Clip: \");\n\t\t\t\t\t\t\t\t\ttowerList[index].upgradeStat[i].turretFireAnimation=(AnimationClip)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].upgradeStat[i].turretFireAnimation, typeof(AnimationClip), false);\n\t\t\t\t\t\t\t\t\t//EditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Component: \");\n\t\t\t\t\t\t\t\t\t//towerList[index].upgradeStat[i].turretFireAnimationBody=(Animation)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].upgradeStat[i].turretFireAnimationBody, typeof(Animation), false);\n\t\t\t\t\t\t\t\t\tstartY+=10;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY, 200, height), \"Base Fire Animation: \");\n\t\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Clip: \");\n\t\t\t\t\t\t\t\t\ttowerList[index].upgradeStat[i].baseFireAnimation=(AnimationClip)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].upgradeStat[i].baseFireAnimation, typeof(AnimationClip), false);\n\t\t\t\t\t\t\t\t\t//EditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Component: \");\n\t\t\t\t\t\t\t\t\t//towerList[index].upgradeStat[i].baseFireAnimationBody=(Animation)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].upgradeStat[i].baseFireAnimationBody, typeof(Animation), false);\n\t\t\t\t\t\t\t\t\tstartY+=10;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX+18, startY+=spaceY, 200, height), \"Turret Build Animation: \");\n\t\t\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Clip: \");\n\t\t\t\t\t\t\t\t\t//~ towerList[index].upgradeStat[i].turretBuildAnimation=(AnimationClip)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].upgradeStat[i].turretBuildAnimation, typeof(AnimationClip), false);\n\t\t\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Component: \");\n\t\t\t\t\t\t\t\t\t//~ towerList[index].upgradeStat[i].turretBuildAnimationBody=(Animation)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].upgradeStat[i].turretBuildAnimationBody, typeof(Animation), false);\n\t\t\t\t\t\t\t\t\t//~ startY+=10;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX+18, startY+=spaceY, 200, height), \"Base Build Animation: \");\n\t\t\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Clip: \");\n\t\t\t\t\t\t\t\t\t//~ towerList[index].upgradeStat[i].baseBuildAnimation=(AnimationClip)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].upgradeStat[i].baseBuildAnimation, typeof(AnimationClip), false);\n\t\t\t\t\t\t\t\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Component: \");\n\t\t\t\t\t\t\t\t\t//~ towerList[index].upgradeStat[i].baseBuildAnimationBody=(Animation)EditorGUI.ObjectField(new Rect(startX+lW-25, startY+=spaceY, 95, height-2), towerList[index].upgradeStat[i].baseBuildAnimationBody, typeof(Animation), false);\n\t\t\t\t\t\t\t\t//~ }\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//EditorGUI.LabelField(new Rect(50+startX, startY+=spaceY, 200, height), \"Level 1: \");\n\t\t\t\t\t\t\t\t//~ }\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tstartX+=190;\n\t\t\t\t\t\t\t\tstartY=tabYPos;\n\t\t\t\t\t\t\t\tspaceY=21;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY, 200, height), (i+2).ToString());\n\t\t\t\t\t\t\t\tstartX+=25;\tstartY=tabYPos;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t//}\n\t\t\t\t\n\t\t\t\tHPAttributeEditor(index);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(GUI.Button(new Rect(startX, startY, 140, height), \"Find Build Manager\")) GetTower();\n\t\t\t\t//return;\n\t\t\t}\n\t\t\t\n\t\t\t//~ if(towerList.Length>0) {\n\t\t\t\t\n\t\t\t\t\n\t\t\t//~ }\n\t\t}\n\t\n\t\t\n\t\t\n\t\tif(GUI.changed) EditorUtility.SetDirty(towerList[index]);\n\t\t\n\t\tGUI.EndScrollView();\n    }\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\tvoid HPAttributeEditor(int index){\n\t\tfloat startY=133;\n\t\tfloat startX=320;\n\t\t\n\t\tfloat space=105;\n\t\t\n\t\tEditorGUI.LabelField(new Rect(startX, startY, 200, height), \"Tower HP: \");\n\t\ttowerList[index].HPAttribute.fullHP = EditorGUI.FloatField(new Rect(startX+space, startY, 50, height-2), towerList[index].HPAttribute.fullHP);\n\t\t\n\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+20, 200, height), \"Tower Shield: \");\n\t\t//~ towerList[index].HPAttribute.fullShield = EditorGUI.FloatField(new Rect(startX+space, startY+=20, 50, height-2), towerList[index].HPAttribute.fullShield);\n\t\t\n\t\t//~ if(towerList[index].HPAttribute.fullShield>0){\n\t\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+20, 200, height), \"Shield Recharge: \");\n\t\t\t//~ towerList[index].HPAttribute.shieldRechargeRate = EditorGUI.FloatField(new Rect(startX+space, startY+=20, 50, height-2), towerList[index].HPAttribute.shieldRechargeRate);\n\t\t\t\n\t\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+20, 200, height), \"Shield Stagger: \");\n\t\t\t//~ towerList[index].HPAttribute.shieldStagger = EditorGUI.FloatField(new Rect(startX+space, startY+=20, 50, height-2), towerList[index].HPAttribute.shieldStagger);\n\t\t//~ }\n\t\t\n\t\tstartY=133;\n\t\tstartX=320+105+50+10;\n\t\tspace=100;\n\t\t\n\t\tEditorGUI.LabelField(new Rect(startX, startY, 200, height), \"HP Overlay: \");\n\t\ttowerList[index].HPAttribute.overlayHP=(Transform)EditorGUI.ObjectField(new Rect(startX+space, startY, 100, height-2), towerList[index].HPAttribute.overlayHP, typeof(Transform), false);\n\t\t\n\t\t//~ EditorGUI.LabelField(new Rect(startX, startY+=spaceY, 200, height), \"Shield Overlay: \");\n\t\t//~ towerList[index].HPAttribute.overlayShield=(Transform)EditorGUI.ObjectField(new Rect(startX+space, startY, 100, height-2), towerList[index].HPAttribute.overlayShield, typeof(Transform), false);\n\t\t\n\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY, 200, height), \"Base Overlay: \");\n\t\ttowerList[index].HPAttribute.overlayBase=(Transform)EditorGUI.ObjectField(new Rect(startX+space, startY, 100, height-2), towerList[index].HPAttribute.overlayBase, typeof(Transform), false);\n\t\t\n\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY, 200, height), \"Always Show Overlay: \");\n\t\ttowerList[index].HPAttribute.alwaysShowOverlay= EditorGUI.Toggle(new Rect(startX+space+40, startY, 100, height-2), towerList[index].HPAttribute.alwaysShowOverlay);\n\t}\n\t\n\t\n\t\n\t\n\t\n\tvoid TypeDependentBaseStat(int index){\n\t\t//turretTower\n\t\tif(towerType==0){\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY+5, 200, height), \"Damage: \");\n\t\t\ttowerList[index].baseStat.damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY+5, 50, height-2), towerList[index].baseStat.damage);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Cooldown: \");\n\t\t\ttowerList[index].baseStat.cooldown = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.cooldown);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"ReloadDuration: \");\n\t\t\ttowerList[index].baseStat.reloadDuration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.reloadDuration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"ClipSize: \");\n\t\t\ttowerList[index].baseStat.clipSize = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.clipSize);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Range: \");\n\t\t\ttowerList[index].baseStat.range = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.range);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"AoeRadius: \");\n\t\t\ttowerList[index].baseStat.aoeRadius = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.aoeRadius);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"StunDuration: \");\n\t\t\ttowerList[index].baseStat.stunDuration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.stunDuration);\n\t\t\t\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"Slow Effect: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].baseStat.slow.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.slow.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- SlowFactor: \");\n\t\t\ttowerList[index].baseStat.slow.slowFactor = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.slow.slowFactor);\n\t\t\t\n\t\t\tspaceY+=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"DamageOverTime: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Damage: \");\n\t\t\ttowerList[index].baseStat.dot.damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.dot.damage);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].baseStat.dot.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.dot.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Interval: \");\n\t\t\ttowerList[index].baseStat.dot.interval = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.dot.interval);\n\t\t\t\n\t\t\tfloat ttDmg=towerList[index].baseStat.dot.damage*towerList[index].baseStat.dot.duration/towerList[index].baseStat.dot.interval;\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+=spaceY+3, 160, height), \"TotalDamage:  \"+ttDmg.ToString(\"f1\"));\n\t\t\t\n\t\t\tspaceY+=3;\n\t\t\t//startY+=5;\n\t\t\t\n\t\t}\n\t\t//DirectionalAOETower\n\t\telse if(towerType==1){\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY+5, 200, height), \"Damage: \");\n\t\t\ttowerList[index].baseStat.damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY+5, 50, height-2), towerList[index].baseStat.damage);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Cooldown: \");\n\t\t\ttowerList[index].baseStat.cooldown = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.cooldown);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Range: \");\n\t\t\ttowerList[index].baseStat.range = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.range);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"StunDuration: \");\n\t\t\ttowerList[index].baseStat.stunDuration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.stunDuration);\n\t\t\t\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"Slow Effect: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].baseStat.slow.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.slow.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- SlowFactor: \");\n\t\t\ttowerList[index].baseStat.slow.slowFactor = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.slow.slowFactor);\n\t\t\t\n\t\t\tspaceY+=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"DamageOverTime: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Damage: \");\n\t\t\ttowerList[index].baseStat.dot.damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.dot.damage);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].baseStat.dot.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.dot.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Interval: \");\n\t\t\ttowerList[index].baseStat.dot.interval = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.dot.interval);\n\t\t\t\n\t\t\tfloat ttDmg=towerList[index].baseStat.dot.damage*towerList[index].baseStat.dot.duration/towerList[index].baseStat.dot.interval;\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+=spaceY+3, 160, height), \"TotalDamage:  \"+ttDmg.ToString(\"f1\"));\n\t\t\t\n\t\t\tspaceY+=3;\n\t\t}\n\t\t//AOETower\n\t\telse if(towerType==2){\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY+5, 200, height), \"Damage: \");\n\t\t\ttowerList[index].baseStat.damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY+5, 50, height-2), towerList[index].baseStat.damage);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Cooldown: \");\n\t\t\ttowerList[index].baseStat.cooldown = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.cooldown);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"ReloadDuration: \");\n\t\t\ttowerList[index].baseStat.reloadDuration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.reloadDuration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"ClipSize: \");\n\t\t\ttowerList[index].baseStat.clipSize = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.clipSize);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Range: \");\n\t\t\ttowerList[index].baseStat.range = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.range);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"StunDuration: \");\n\t\t\ttowerList[index].baseStat.stunDuration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.stunDuration);\n\t\t\t\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"Slow Effect: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].baseStat.slow.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.slow.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- SlowFactor: \");\n\t\t\ttowerList[index].baseStat.slow.slowFactor = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.slow.slowFactor);\n\t\t\t\n\t\t\tspaceY+=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"DamageOverTime: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Damage: \");\n\t\t\ttowerList[index].baseStat.dot.damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.dot.damage);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].baseStat.dot.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.dot.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Interval: \");\n\t\t\ttowerList[index].baseStat.dot.interval = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.dot.interval);\n\t\t\t\n\t\t\tfloat ttDmg=towerList[index].baseStat.dot.damage*towerList[index].baseStat.dot.duration/towerList[index].baseStat.dot.interval;\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+=spaceY+3, 160, height), \"TotalDamage:  \"+ttDmg.ToString(\"f1\"));\n\t\t\t\n\t\t\tspaceY+=3;\n\t\t\t//startY+=5;\n\t\t\t\n\t\t}\n\t\t//SupportTower\n\t\telse if(towerType==3){\n\t\t\t\n\t\t\tspaceY+=5;\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Effective Range: \");\n\t\t\ttowerList[index].baseStat.range = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.range);\n\t\t\t\n\t\t\tspaceY+=5;\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"Buff Effect: \");\n\t\t\tspaceY-=5;\n\t\t\tstartY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Damage: \");\n\t\t\ttowerList[index].baseStat.buff.damageBuff = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.buff.damageBuff);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Cooldown: \");\n\t\t\ttowerList[index].baseStat.buff.cooldownBuff = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.buff.cooldownBuff);\n\t\t\ttowerList[index].baseStat.buff.cooldownBuff = Mathf.Clamp(towerList[index].baseStat.buff.cooldownBuff, -0.8f, 0.8f);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Range: \");\n\t\t\ttowerList[index].baseStat.buff.rangeBuff = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.buff.rangeBuff);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- RegenHP: \");\n\t\t\ttowerList[index].baseStat.buff.regenHP = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY+3, 50, height-2), towerList[index].baseStat.buff.regenHP);\n\t\t\t\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY+10, 200, height), \"Cooldown: \");\n\t\t\ttowerList[index].baseStat.cooldown = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY+10, 50, height-2), towerList[index].baseStat.cooldown);\n\t\t\t\n\t\t\tspaceY-=5;\n\t\t}\n\t\t//ResourceTower\n\t\telse if(towerType==4){\n\t\t\t\n\t\t\t//EditorGUI.LabelField(new Rect(startX, startY+spaceY+10, 200, height), \"IncomeValue: \");\n\t\t\t//towerList[index].baseStat.incomeValue = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY+10, 50, height-2), towerList[index].baseStat.incomeValue);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY+10, 200, height), \"Cooldown: \");\n\t\t\ttowerList[index].baseStat.cooldown = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY+10, 50, height-2), towerList[index].baseStat.cooldown);\n\t\t\t\n\t\t\tstartY+=10;\n\t\t\t\n\t\t\tif(rscCount!=towerList[index].baseStat.incomes.Length){\n\t\t\t\tUpdateBaseStatIncomes(index, rscCount);\n\t\t\t}\n\t\t\t\n\t\t\tif(towerList[index].baseStat.incomes.Length==1){\n\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"resources:\");\n\t\t\t\ttowerList[index].baseStat.incomes[0] = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.incomes[0]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY-5, 200, height), \"Resources Per CD:\");\n\t\t\t\tfor(int i=0; i<towerList[index].baseStat.incomes.Length; i++){\n\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY-3, 200, height), \" - resource: \");\n\t\t\t\t\ttowerList[index].baseStat.incomes[i] = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY-3, 50, height-2), towerList[index].baseStat.incomes[i]);\n\t\t\t\t}\n\t\t\t\tstartY+=8;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\t//mine\n\t\telse if(towerType==5){\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY+5, 200, height), \"Damage: \");\n\t\t\ttowerList[index].baseStat.damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY+5, 50, height-2), towerList[index].baseStat.damage);\n\t\t\t\n\t\t\tif(!towerList[index].mineOneOff){\n\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Cooldown: \");\n\t\t\t\ttowerList[index].baseStat.cooldown = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.cooldown);\n\t\t\t}\n\t\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"EffectiveRange: \");\n\t\t\ttowerList[index].baseStat.range = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.range);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"StunDuration: \");\n\t\t\ttowerList[index].baseStat.stunDuration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.stunDuration);\n\t\t\t\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"Slow Effect: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].baseStat.slow.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.slow.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- SlowFactor: \");\n\t\t\ttowerList[index].baseStat.slow.slowFactor = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.slow.slowFactor);\n\t\t\t\n\t\t\tspaceY+=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"DamageOverTime: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Damage: \");\n\t\t\ttowerList[index].baseStat.dot.damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.dot.damage);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].baseStat.dot.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.dot.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Interval: \");\n\t\t\ttowerList[index].baseStat.dot.interval = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].baseStat.dot.interval);\n\t\t\t\n\t\t\tfloat ttDmg=towerList[index].baseStat.dot.damage*towerList[index].baseStat.dot.duration/towerList[index].baseStat.dot.interval;\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+=spaceY+3, 160, height), \"TotalDamage:  \"+ttDmg.ToString(\"f1\"));\n\t\t\n\t\t\tspaceY+=3;\n\t\t}\n\t\t\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\tvoid TypeDependentUpgradeStat(int index, int lvl){\n\t\tif(towerType==0){\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY+5, 200, height), \"Damage: \");\n\t\t\ttowerList[index].upgradeStat[lvl].damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY+5, 50, height-2), towerList[index].upgradeStat[lvl].damage);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Cooldown: \");\n\t\t\ttowerList[index].upgradeStat[lvl].cooldown = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].cooldown);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"ReloadDuration: \");\n\t\t\ttowerList[index].upgradeStat[lvl].reloadDuration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].reloadDuration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"ClipSize: \");\n\t\t\ttowerList[index].upgradeStat[lvl].clipSize = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].clipSize);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Range: \");\n\t\t\ttowerList[index].upgradeStat[lvl].range = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].range);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"AoeRadius: \");\n\t\t\ttowerList[index].upgradeStat[lvl].aoeRadius = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].aoeRadius);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"StunDuration: \");\n\t\t\ttowerList[index].upgradeStat[lvl].stunDuration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].stunDuration);\n\t\t\t\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"Slow Effect: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].upgradeStat[lvl].slow.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].slow.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- SlowFactor: \");\n\t\t\ttowerList[index].upgradeStat[lvl].slow.slowFactor = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].slow.slowFactor);\n\t\t\t\n\t\t\tspaceY+=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"DamageOverTime: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Damage: \");\n\t\t\ttowerList[index].upgradeStat[lvl].dot.damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].dot.damage);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].upgradeStat[lvl].dot.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].dot.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Interval: \");\n\t\t\ttowerList[index].upgradeStat[lvl].dot.interval = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].dot.interval);\n\t\t\t\n\t\t\tfloat ttDmg=towerList[index].baseStat.dot.damage*towerList[index].baseStat.dot.duration/towerList[index].baseStat.dot.interval;\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+=spaceY+3, 160, height), \"TotalDamage:  \"+ttDmg.ToString(\"f1\"));\n\t\t\t\n\t\t\tspaceY+=3;\n\t\t\t//startY+=5;\n\t\t\t\n\t\t}\n\t\telse if(towerType==1){\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY+5, 200, height), \"Damage: \");\n\t\t\ttowerList[index].upgradeStat[lvl].damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY+5, 50, height-2), towerList[index].upgradeStat[lvl].damage);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Cooldown: \");\n\t\t\ttowerList[index].upgradeStat[lvl].cooldown = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].cooldown);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Range: \");\n\t\t\ttowerList[index].upgradeStat[lvl].range = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].range);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"StunDuration: \");\n\t\t\ttowerList[index].upgradeStat[lvl].stunDuration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].stunDuration);\n\t\t\t\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"Slow Effect: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].upgradeStat[lvl].slow.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].slow.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- SlowFactor: \");\n\t\t\ttowerList[index].upgradeStat[lvl].slow.slowFactor = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].slow.slowFactor);\n\t\t\t\n\t\t\tspaceY+=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"DamageOverTime: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Damage: \");\n\t\t\ttowerList[index].upgradeStat[lvl].dot.damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].dot.damage);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].upgradeStat[lvl].dot.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].dot.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Interval: \");\n\t\t\ttowerList[index].upgradeStat[lvl].dot.interval = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].dot.interval);\n\t\t\t\n\t\t\tfloat ttDmg=towerList[index].baseStat.dot.damage*towerList[index].baseStat.dot.duration/towerList[index].baseStat.dot.interval;\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+=spaceY+3, 160, height), \"TotalDamage:  \"+ttDmg.ToString(\"f1\"));\n\t\t\t\n\t\t\tspaceY+=3;\n\t\t}\n\t\telse if(towerType==2){\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY+5, 200, height), \"Damage: \");\n\t\t\ttowerList[index].upgradeStat[lvl].damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY+5, 50, height-2), towerList[index].upgradeStat[lvl].damage);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Cooldown: \");\n\t\t\ttowerList[index].upgradeStat[lvl].cooldown = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].cooldown);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"ReloadDuration: \");\n\t\t\ttowerList[index].upgradeStat[lvl].reloadDuration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].reloadDuration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"ClipSize: \");\n\t\t\ttowerList[index].upgradeStat[lvl].clipSize = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].clipSize);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Range: \");\n\t\t\ttowerList[index].upgradeStat[lvl].range = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].range);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"StunDuration: \");\n\t\t\ttowerList[index].upgradeStat[lvl].stunDuration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].stunDuration);\n\t\t\t\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"Slow Effect: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].upgradeStat[lvl].slow.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].slow.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- SlowFactor: \");\n\t\t\ttowerList[index].upgradeStat[lvl].slow.slowFactor = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].slow.slowFactor);\n\t\t\t\n\t\t\tspaceY+=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"DamageOverTime: \");\n\t\t\tspaceY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Damage: \");\n\t\t\ttowerList[index].upgradeStat[lvl].dot.damage = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].dot.damage);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Duration: \");\n\t\t\ttowerList[index].upgradeStat[lvl].dot.duration = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].dot.duration);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Interval: \");\n\t\t\ttowerList[index].upgradeStat[lvl].dot.interval = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].dot.interval);\n\t\t\t\n\t\t\tfloat ttDmg=towerList[index].upgradeStat[lvl].dot.damage*towerList[index].upgradeStat[lvl].dot.duration/towerList[index].upgradeStat[lvl].dot.interval;\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+=spaceY+3, 160, height), \"TotalDamage:  \"+ttDmg.ToString(\"f1\"));\n\t\t\t\n\t\t\tspaceY+=3;\n\t\t\t//startY+=5;\n\t\t\t\n\t\t}\n\t\telse if(towerType==3){\n\t\t\t\n\t\t\tspaceY+=5;\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"Effective Range: \");\n\t\t\ttowerList[index].upgradeStat[lvl].range = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].range);\n\t\t\t\n\t\t\tspaceY+=5;\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY+3, 200, height), \"Buff Effect: \");\n\t\t\tspaceY-=5;\n\t\t\tstartY-=3;\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Damage: \");\n\t\t\ttowerList[index].upgradeStat[lvl].buff.damageBuff = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].buff.damageBuff);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Cooldown: \");\n\t\t\ttowerList[index].upgradeStat[lvl].buff.cooldownBuff = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].buff.cooldownBuff);\n\t\t\ttowerList[index].upgradeStat[lvl].buff.cooldownBuff = Mathf.Clamp(towerList[index].upgradeStat[lvl].buff.cooldownBuff, -0.8f, 0.8f);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- Range: \");\n\t\t\ttowerList[index].upgradeStat[lvl].buff.rangeBuff = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].buff.rangeBuff);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX+10, startY+spaceY, 200, height), \"- RegenHP: \");\n\t\t\ttowerList[index].upgradeStat[lvl].buff.regenHP = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY+3, 50, height-2), towerList[index].upgradeStat[lvl].buff.regenHP);\n\t\t\t\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY+10, 200, height), \"Cooldown: \");\n\t\t\ttowerList[index].upgradeStat[lvl].cooldown = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY+10, 50, height-2), towerList[index].upgradeStat[lvl].cooldown);\n\t\t\n\t\t\tspaceY-=5;\n\t\t}\n\t\telse if(towerType==4){\n\t\t\t\n\t\t\t//EditorGUI.LabelField(new Rect(startX, startY+spaceY+10, 200, height), \"Income Value: \");\n\t\t\t//towerList[index].upgradeStat[lvl].incomeValue = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY+10, 50, height-2), towerList[index].upgradeStat[lvl].incomeValue);\n\t\t\t\n\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY+10, 200, height), \"Cooldown: \");\n\t\t\ttowerList[index].upgradeStat[lvl].cooldown = EditorGUI.FloatField(new Rect(startX+lW, startY+=spaceY+10, 50, height-2), towerList[index].upgradeStat[lvl].cooldown);\n\t\t\n\t\t\tstartY+=10;\n\t\t\t\n\t\t\tif(rscCount!=towerList[index].upgradeStat[lvl].incomes.Length){\n\t\t\t\tUpdateUpgradeStatIncomes(index, rscCount);\n\t\t\t}\n\t\t\t\n\t\t\tif(towerList[index].upgradeStat[lvl].incomes.Length==1){\n\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY, 200, height), \"resources:\");\n\t\t\t\ttowerList[index].upgradeStat[lvl].incomes[0] = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY, 50, height-2), towerList[index].upgradeStat[lvl].incomes[0]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+=spaceY-5, 200, height), \"Resources Per CD:\");\n\t\t\t\tfor(int i=0; i<towerList[index].upgradeStat[lvl].incomes.Length; i++){\n\t\t\t\t\tEditorGUI.LabelField(new Rect(startX, startY+spaceY-3, 200, height), \" - resource: \");\n\t\t\t\t\ttowerList[index].upgradeStat[lvl].incomes[i] = EditorGUI.IntField(new Rect(startX+lW, startY+=spaceY-3, 50, height-2), towerList[index].upgradeStat[lvl].incomes[i]);\n\t\t\t\t}\n\t\t\t\tstartY+=8;\n\t\t\t}\n\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tvoid UpdateIndicatorFlags(int size){\n\t\tif(indicatorFlags.Length!=size){\n\t\t\tindicatorFlags=new bool[size];\n\t\t\tfor(int i=0; i<indicatorFlags.Length; i++) indicatorFlags[i]=true;\n\t\t}\n\t}\n\t\n\t\n\tvoid UpdateBaseStatIncomes(int id, int length){\n\t\tint[] tempIncList=towerList[index].baseStat.incomes;\n\t\t\n\t\ttowerList[index].baseStat.incomes=new int[length];\n\t\t\n\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempIncList.Length){\n\t\t\t\ttowerList[index].baseStat.incomes[i]=0;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttowerList[index].baseStat.incomes[i]=tempIncList[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvoid UpdateUpgradeStatIncomes(int id, int length){\n\t\tfor(int j=0; j<towerList[index].upgradeStat.Length; j++){\n\t\t\tint[] tempIncList=towerList[index].upgradeStat[j].incomes;\n\t\t\t\n\t\t\ttowerList[index].upgradeStat[j].incomes=new int[length];\n\t\t\t\n\t\t\tfor(int i=0; i<length; i++){\n\t\t\t\tif(i>=tempIncList.Length){\n\t\t\t\t\ttowerList[index].upgradeStat[j].incomes[i]=0;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ttowerList[index].upgradeStat[j].incomes[i]=tempIncList[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvoid UpdateBaseStatCost(int id, int length){\n\t\tint[] tempCostList=towerList[index].baseStat.costs;\n\t\t\n\t\ttowerList[index].baseStat.costs=new int[length];\n\t\t\n", "answers": ["\t\tfor(int i=0; i<length; i++){"], "length": 3890, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "29b2e321a12be20e63e344757c8cd860b742481bec433349"}
{"input": "", "context": "using System;\nusing Server.Items;\nnamespace Server.Engines.Craft\n{\n\tpublic class DefBlacksmithy : CraftSystem\n\t{\n\t\tpublic override SkillName MainSkill\n\t\t{\n\t\t\tget\t{ return SkillName.Blacksmith;\t}\n\t\t}\n\t\tpublic override int GumpTitleNumber\n\t\t{\n\t\t\tget { return 1044002; } // <CENTER>BLACKSMITHY MENU</CENTER>\n\t\t}\n\t\tprivate static CraftSystem m_CraftSystem;\n\t\tpublic static CraftSystem CraftSystem\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif ( m_CraftSystem == null )\n\t\t\t\t\tm_CraftSystem = new DefBlacksmithy();\n\t\t\t\treturn m_CraftSystem;\n\t\t\t}\n\t\t}\n\t\tpublic override CraftECA ECA{ get{ return CraftECA.ChanceMinusSixtyToFourtyFive; } }\n\t\tpublic override double GetChanceAtMin( CraftItem item )\n\t\t{\n\t\t\treturn 0.0; // 0%\n\t\t}\n\t\tprivate DefBlacksmithy() : base( 1, 1, 1.25 )// base( 1, 2, 1.7 )\n\t\t{\n\t\t\t/*\n\t\t\t\n\t\t\tbase( MinCraftEffect, MaxCraftEffect, Delay )\n\t\t\t\n\t\t\tMinCraftEffect\t: The minimum number of time the mobile will play the craft effect\n\t\t\tMaxCraftEffect\t: The maximum number of time the mobile will play the craft effect\n\t\t\tDelay\t\t\t: The delay between each craft effect\n\t\t\t\n\t\t\tExample: (3, 6, 1.7) would make the mobile do the PlayCraftEffect override\n\t\t\tfunction between 3 and 6 time, with a 1.7 second delay each time.\n\t\t\t\n\t\t\t*/ \n\t\t}\n\t\tprivate static Type typeofAnvil = typeof( AnvilAttribute );\n\t\tprivate static Type typeofForge = typeof( ForgeAttribute );\n\t\tpublic static void CheckAnvilAndForge( Mobile from, int range, out bool anvil, out bool forge )\n\t\t{\n\t\t\tanvil = false;\n\t\t\tforge = false;\n\t\t\tMap map = from.Map;\n\t\t\tif ( map == null )\n\t\t\t\treturn;\n\t\t\tIPooledEnumerable eable = map.GetItemsInRange( from.Location, range );\n\t\t\tforeach ( Item item in eable )\n\t\t\t{\n\t\t\t\tType type = item.GetType();\n\t\t\t\tbool isAnvil = ( type.IsDefined( typeofAnvil, false ) || item.ItemID == 4015 || item.ItemID == 4016 || item.ItemID == 0x2DD5 || item.ItemID == 0x2DD6 );\n\t\t\t\tbool isForge = ( type.IsDefined( typeofForge, false ) || item.ItemID == 4017 || (item.ItemID >= 6522 && item.ItemID <= 6569) || item.ItemID == 0x2DD8 );\n\t\t\t\tif ( isAnvil || isForge )\n\t\t\t\t{\n\t\t\t\t\tif ( (from.Z + 16) < item.Z || (item.Z + 16) < from.Z || !from.InLOS( item ) )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tanvil = anvil || isAnvil;\n\t\t\t\t\tforge = forge || isForge;\n\t\t\t\t\tif ( anvil && forge )\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\teable.Free();\n\t\t\tfor ( int x = -range; (!anvil || !forge) && x <= range; ++x )\n\t\t\t{\n\t\t\t\tfor ( int y = -range; (!anvil || !forge) && y <= range; ++y )\n\t\t\t\t{\n\t\t\t\t\tStaticTile[] tiles = map.Tiles.GetStaticTiles( from.X+x, from.Y+y, true );\n\t\t\t\t\tfor ( int i = 0; (!anvil || !forge) && i < tiles.Length; ++i )\n\t\t\t\t\t{\n\t\t\t\t\t\tint id = tiles[i].ID;\n\t\t\t\t\t\tbool isAnvil = ( id == 4015 || id == 4016 || id == 0x2DD5 || id == 0x2DD6 );\n\t\t\t\t\t\tbool isForge = ( id == 4017 || (id >= 6522 && id <= 6569) || id == 0x2DD8 );\n\t\t\t\t\t\tif ( isAnvil || isForge )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( (from.Z + 16) < tiles[i].Z || (tiles[i].Z + 16) < from.Z || !from.InLOS( new Point3D( from.X+x, from.Y+y, tiles[i].Z + (tiles[i].Height/2) + 1 ) ) )\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tanvil = anvil || isAnvil;\n\t\t\t\t\t\t\tforge = forge || isForge;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic override int CanCraft( Mobile from, BaseTool tool, Type itemType )\n\t\t{\n\t\t\tif ( tool == null || tool.Deleted || tool.UsesRemaining < 0 )\n\t\t\t\treturn 1044038; // You have worn out your tool!\n\t\t\telse if ( !BaseTool.CheckTool( tool, from ) )\n\t\t\t\treturn 1048146; // If you have a tool equipped, you must use that tool.\n\t\t\telse if ( !BaseTool.CheckAccessible( tool, from ) )\n\t\t\t\treturn 1044263; // The tool must be on your person to use.\n\t\t\tbool anvil, forge;\n\t\t\tCheckAnvilAndForge( from, 2, out anvil, out forge );\n\t\t\tif ( anvil && forge )\n\t\t\t\treturn 0;\n\t\t\treturn 1044267; // You must be near an anvil and a forge to smith items.\n\t\t}\n\t\tpublic override void PlayCraftEffect( Mobile from )\n\t\t{\n\t\t\t// no animation, instant sound\n\t\t\t//if ( from.Body.Type == BodyType.Human && !from.Mounted )\n\t\t\t//\tfrom.Animate( 9, 5, 1, true, false, 0 );\n\t\t\t//new InternalTimer( from ).Start();\n\t\t\tfrom.PlaySound( 0x2A );\n\t\t}\n\t\t// Delay to synchronize the sound with the hit on the anvil\n\t\tprivate class InternalTimer : Timer\n\t\t{\n\t\t\tprivate Mobile m_From;\n\t\t\tpublic InternalTimer( Mobile from ) : base( TimeSpan.FromSeconds( 0.7 ) )\n\t\t\t{\n\t\t\t\tm_From = from;\n\t\t\t}\n\t\t\tprotected override void OnTick()\n\t\t\t{\n\t\t\t\tm_From.PlaySound( 0x2A );\n\t\t\t}\n\t\t}\n\t\tpublic override int PlayEndingEffect( Mobile from, bool failed, bool lostMaterial, bool toolBroken, int quality, bool makersMark, CraftItem item )\n\t\t{\n\t\t\tif ( toolBroken )\n\t\t\t\tfrom.SendLocalizedMessage( 1044038 ); // You have worn out your tool\n\t\t\tif ( failed )\n\t\t\t{\n\t\t\t\tif ( lostMaterial )\n\t\t\t\t\treturn 1044043; // You failed to create the item, and some of your materials are lost.\n\t\t\t\telse\n\t\t\t\t\treturn 1044157; // You failed to create the item, but no materials were lost.\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ( quality == 0 )\n\t\t\t\t\treturn 502785; // You were barely able to make this item.  It's quality is below average.\n\t\t\t\telse if ( makersMark && quality == 2 )\n\t\t\t\t\treturn 1044156; // You create an exceptional quality item and affix your maker's mark.\n\t\t\t\telse if ( quality == 2 )\n\t\t\t\t\treturn 1044155; // You create an exceptional quality item.\n\t\t\t\telse\t\t\t\t\n\t\t\t\t\treturn 1044154; // You create the item.\n\t\t\t}\n\t\t}\n\t\tpublic override void InitCraftList()\n\t\t{\n\t\t\t/*\n\t\t\tSynthax for a SIMPLE craft item\n\t\t\tAddCraft( ObjectType, Group, MinSkill, MaxSkill, ResourceType, Amount, Message )\n\t\t\t\n\t\t\tObjectType\t\t: The type of the object you want to add to the build list.\n\t\t\tGroup\t\t\t: The group in wich the object will be showed in the craft menu.\n\t\t\tMinSkill\t\t: The minimum of skill value\n\t\t\tMaxSkill\t\t: The maximum of skill value\n\t\t\tResourceType\t: The type of the resource the mobile need to create the item\n\t\t\tAmount\t\t\t: The amount of the ResourceType it need to create the item\n\t\t\tMessage\t\t\t: String or Int for Localized.  The message that will be sent to the mobile, if the specified resource is missing.\n\t\t\t\n\t\t\tSynthax for a COMPLEXE craft item.  A complexe item is an item that need either more than\n\t\t\tonly one skill, or more than only one resource.\n\t\t\t\n\t\t\tComing soon....\n\t\t\t*/\n\t\t\t#region Ringmail\n\t\t\tAddCraft( typeof( RingmailGloves ), 1011076, 1025099, 12.0, 62.0, typeof( IronIngot ), 1044036, 10, 1044037 );\n\t\t\tAddCraft( typeof( RingmailLegs ), 1011076, 1025104, 19.4, 69.4, typeof( IronIngot ), 1044036, 16, 1044037 );\n\t\t\tAddCraft( typeof( RingmailArms ), 1011076, 1025103, 16.9, 66.9, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\tAddCraft( typeof( RingmailChest ), 1011076, 1025100, 21.9, 71.9, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\t#endregion\n\t\t\t#region Chainmail\n\t\t\tAddCraft( typeof( ChainCoif ), 1011077, 1025051, 14.5, 64.5, typeof( IronIngot ), 1044036, 10, 1044037 );\n\t\t\tAddCraft( typeof( ChainLegs ), 1011077, 1025054, 36.7, 86.7, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\tAddCraft( typeof( ChainChest ), 1011077, 1025055, 39.1, 89.1, typeof( IronIngot ), 1044036, 20, 1044037 );\n\t\t\t#endregion\n\t\t\tint index = -1;\n\t\t\t#region Platemail\n\t\t\tAddCraft( typeof( PlateArms ), 1011078, 1025136, 66.3, 116.3, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\tAddCraft( typeof( PlateGloves ), 1011078, 1025140, 58.9, 108.9, typeof( IronIngot ), 1044036, 12, 1044037 );\n\t\t\tAddCraft( typeof( PlateGorget ), 1011078, 1025139, 56.4, 106.4, typeof( IronIngot ), 1044036, 10, 1044037 );\n\t\t\tAddCraft( typeof( PlateLegs ), 1011078, 1025137, 68.8, 118.8, typeof( IronIngot ), 1044036, 20, 1044037 );\n\t\t\tAddCraft( typeof( PlateChest ), 1011078, 1046431, 75.0, 125.0, typeof( IronIngot ), 1044036, 25, 1044037 );\n\t\t\tAddCraft( typeof( FemalePlateChest ), 1011078, 1046430, 44.1, 94.1, typeof( IronIngot ), 1044036, 20, 1044037 );\n\t\t\tif ( Core.AOS ) // exact pre-aos functionality unknown\n\t\t\t\tAddCraft( typeof( DragonBardingDeed ), 1011078, 1053012, 72.5, 122.5, typeof( IronIngot ), 1044036, 750, 1044037 );\n\t\t\tif( Core.SE )\n\t\t\t{\n\t\t\t\tindex = AddCraft( typeof( PlateMempo ), 1011078, 1030180, 80.0, 130.0, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( PlateDo ), 1011078, 1030184, 80.0, 130.0, typeof( IronIngot ), 1044036, 28, 1044037 ); //Double check skill\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( PlateHiroSode ), 1011078, 1030187, 80.0, 130.0, typeof( IronIngot ), 1044036, 16, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( PlateSuneate ), 1011078, 1030195, 65.0, 115.0, typeof( IronIngot ), 1044036, 20, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( PlateHaidate ), 1011078, 1030200, 65.0, 115.0, typeof( IronIngot ), 1044036, 20, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\t\n\t\t\t}\n\t\t\t#endregion\n\t\t\t#region Helmets\n\t\t\tAddCraft( typeof( Bascinet ), 1011079, 1025132, 8.3, 58.3, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\tAddCraft( typeof( CloseHelm ), 1011079, 1025128, 37.9, 87.9, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\tAddCraft( typeof( Helmet ), 1011079, 1025130, 37.9, 87.9, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\tAddCraft( typeof( NorseHelm ), 1011079, 1025134, 37.9, 87.9, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\tAddCraft( typeof( PlateHelm ), 1011079, 1025138, 62.6, 112.6, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\tif( Core.SE )\n\t\t\t{\n\t\t\t\tindex = AddCraft( typeof( ChainHatsuburi ), 1011079, 1030175, 30.0, 80.0, typeof( IronIngot ), 1044036, 20, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( PlateHatsuburi ), 1011079, 1030176, 45.0, 95.0, typeof( IronIngot ), 1044036, 20, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( HeavyPlateJingasa ), 1011079, 1030178, 45.0, 95.0, typeof( IronIngot ), 1044036, 20, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\t\n\t\t\t\tindex = AddCraft( typeof( LightPlateJingasa ), 1011079, 1030188, 45.0, 95.0, typeof( IronIngot ), 1044036, 20, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\t\n\t\t\t\tindex = AddCraft( typeof( SmallPlateJingasa ), 1011079, 1030191, 45.0, 95.0, typeof( IronIngot ), 1044036, 20, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( DecorativePlateKabuto ), 1011079, 1030179, 90.0, 140.0, typeof( IronIngot ), 1044036, 25, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\t\n\t\t\t\tindex = AddCraft( typeof( PlateBattleKabuto ), 1011079, 1030192, 90.0, 140.0, typeof( IronIngot ), 1044036, 25, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( StandardPlateKabuto ), 1011079, 1030196, 90.0, 140.0, typeof( IronIngot ), 1044036, 25, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\t/*\n\t\t\t\tif( Core.ML )\n\t\t\t\t{\n\t\t\t\t\tindex = AddCraft( typeof( Circlet ), 1011079, 1032645, 62.1, 112.1, typeof( IronIngot ), 1044036, 6, 1044037 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( RoyalCirclet ), 1011079, 1032646, 70.0, 120.0, typeof( IronIngot ), 1044036, 6, 1044037 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( GemmedCirclet ), 1011079, 1032647, 75.0, 125.0, typeof( IronIngot ), 1044036, 6, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( Tourmaline ), 1044237, 1, 1044240 );\n\t\t\t\t\tAddRes( index, typeof( Amethyst ), 1044236, 1, 1044240 );\n\t\t\t\t\tAddRes( index, typeof( BlueDiamond ), 1032696, 1, 1044240 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t}\n\t\t\t\t * */\n\t\t\t}\n\t\t\t#endregion\n\t\t\t#region Shields\n\t\t\tAddCraft( typeof( Buckler ), 1011080, 1027027, -25.0, 25.0, typeof( IronIngot ), 1044036, 10, 1044037 );\n\t\t\tAddCraft( typeof( BronzeShield ), 1011080, 1027026, -15.2, 34.8, typeof( IronIngot ), 1044036, 12, 1044037 );\n\t\t\tAddCraft( typeof( HeaterShield ), 1011080, 1027030, 24.3, 74.3, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\tAddCraft( typeof( MetalShield ), 1011080, 1027035, -10.2, 39.8, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\tAddCraft( typeof( MetalKiteShield ), 1011080, 1027028, 4.6, 54.6, typeof( IronIngot ), 1044036, 16, 1044037 );\n\t\t\tAddCraft( typeof( WoodenKiteShield ), 1011080, 1027032, -15.2, 34.8, typeof( IronIngot ), 1044036, 8, 1044037 );\n\t\t\tif ( Core.AOS )\n\t\t\t{\n\t\t\t\tAddCraft( typeof( ChaosShield ), 1011080, 1027107, 85.0, 135.0, typeof( IronIngot ), 1044036, 25, 1044037 );\n\t\t\t\tAddCraft( typeof( OrderShield ), 1011080, 1027108, 85.0, 135.0, typeof( IronIngot ), 1044036, 25, 1044037 );\n\t\t\t}\n\t\t\t#endregion\n\t\t\t#region Bladed\n\t\t\tif ( Core.AOS )\n\t\t\t\tAddCraft( typeof( BoneHarvester ), 1011081, 1029915, 33.0, 83.0, typeof( IronIngot ), 1044036, 10, 1044037 );\n\t\t\tAddCraft( typeof( Broadsword ), 1011081, 1023934, 35.4, 85.4, typeof( IronIngot ), 1044036, 10, 1044037 );\n\t\t\tif ( Core.AOS )\n\t\t\t\tAddCraft( typeof( CrescentBlade ), 1011081, 1029921, 45.0, 95.0, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\tAddCraft( typeof( Cutlass ), 1011081, 1025185, 24.3, 74.3, typeof( IronIngot ), 1044036, 8, 1044037 );\n\t\t\tAddCraft( typeof( Dagger ), 1011081, 1023921, -0.4, 49.6, typeof( IronIngot ), 1044036, 3, 1044037 );\n\t\t\tAddCraft( typeof( Katana ),1011081, 1025119, 44.1, 94.1, typeof( IronIngot ), 1044036, 8, 1044037 );\n\t\t\tAddCraft( typeof( Kryss ), 1011081, 1025121, 36.7, 86.7, typeof( IronIngot ), 1044036, 8, 1044037 );\n\t\t\tAddCraft( typeof( Longsword ), 1011081, 1023937, 28.0, 78.0, typeof( IronIngot ), 1044036, 12, 1044037 );\n\t\t\tAddCraft( typeof( Scimitar ), 1011081, 1025046, 31.7, 81.7, typeof( IronIngot ), 1044036, 10, 1044037 );\n\t\t\tAddCraft( typeof( VikingSword ), 1011081, 1025049, 24.3, 74.3, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\tif( Core.SE )\n\t\t\t{\n\t\t\t\tindex = AddCraft( typeof( NoDachi ), 1011081, 1030221, 75.0, 125.0, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( Wakizashi ), 1011081, 1030223, 50.0, 100.0, typeof( IronIngot ), 1044036, 8, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( Lajatang ), 1011081, 1030226, 80.0, 130.0, typeof( IronIngot ), 1044036, 25, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( Daisho ), 1011081, 1030228, 60.0, 110.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( Tekagi ), 1011081, 1030230, 55.0, 105.0, typeof( IronIngot ), 1044036, 12, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( Shuriken ), 1011081, 1030231, 45.0, 95.0, typeof( IronIngot ), 1044036, 5, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( Kama ), 1011081, 1030232, 40.0, 90.0, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\tindex = AddCraft( typeof( Sai ), 1011081, 1030234, 50.0, 100.0, typeof( IronIngot ), 1044036, 12, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.SE );\n\t\t\t\t/*\n\t\t\t\tif( Core.ML )\n\t\t\t\t{\n\t\t\t\t\tindex = AddCraft( typeof( RadiantScimitar ), 1011081, 1031571, 75.0, 125.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( WarCleaver ), 1011081, 1031567, 70.0, 120.0, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( ElvenSpellblade ), 1011081, 1031564, 70.0, 120.0, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( AssassinSpike ), 1011081, 1031565, 70.0, 120.0, typeof( IronIngot ), 1044036, 9, 1044037 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( Leafblade ), 1011081, 1031566, 70.0, 120.0, typeof( IronIngot ), 1044036, 12, 1044037 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( RuneBlade ), 1011081, 1031570, 70.0, 120.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( ElvenMachete ), 1011081, 1031573, 70.0, 120.0, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( RuneCarvingKnife ), 1011081, 1072915, 70.0, 120.0, typeof( IronIngot ), 1044036, 9, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( DreadHornMane ), 1032682, 1, 1053098 );\n\t\t\t\t\tAddRes( index, typeof( Putrefication ), 1032678, 10, 1053098 );\n\t\t\t\t\tAddRes( index, typeof( Muculent ), 1032680, 10, 1053098 );\n\t\t\t\t\tAddRecipe( index, 0 );\n\t\t\t\t\tForceNonExceptional( index );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( ColdForgedBlade ), 1011081, 1072916, 70.0, 120.0, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( GrizzledBones ), 1032684, 1, 1053098 );\n\t\t\t\t\tAddRes( index, typeof( Taint ), 1032684, 10, 1053098 );\n\t\t\t\t\tAddRes( index, typeof( Blight ), 1032675, 10, 1053098 );\n\t\t\t\t\tAddRecipe( index, 1 );\n\t\t\t\t\tForceNonExceptional( index );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( OverseerSunderedBlade ), 1011081, 1072920, 70.0, 120.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( GrizzledBones ), 1032684, 1, 1053098 );\n\t\t\t\t\tAddRes( index, typeof( Blight ), 1032675, 10, 1053098 );\n\t\t\t\t\tAddRes( index, typeof( Scourge ), 1032677, 10, 1053098 );\n\t\t\t\t\tAddRecipe( index, 2 );\n\t\t\t\t\tForceNonExceptional( index );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( LuminousRuneBlade ), 1011081, 1072922, 70.0, 120.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( GrizzledBones ), 1032684, 1, 1053098 );\n\t\t\t\t\tAddRes( index, typeof( Corruption ), 1032676, 10, 1053098 );\n\t\t\t\t\tAddRes( index, typeof( Putrefication ), 1032678, 10, 1053098 );\n\t\t\t\t\tAddRecipe( index, 3 );\n\t\t\t\t\tForceNonExceptional( index );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( TrueSpellblade ), 1011081, 1073513, 75.0, 125.0, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( BlueDiamond ), 1032696, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 4 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( IcySpellblade ), 1011081, 1073514, 75.0, 125.0, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( Turquoise ), 1032691, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 5 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( FierySpellblade ), 1011081, 1073515, 75.0, 125.0, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( FireRuby ), 1032695, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 6 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( SpellbladeOfDefense ), 1011081, 1073516, 75.0, 125.0, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( WhitePearl ), 1032694, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 7 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( TrueAssassinSpike ), 1011081, 1073517, 75.0, 125.0, typeof( IronIngot ), 1044036, 9, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( DarkSapphire ), 1032690, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 8 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( ChargedAssassinSpike ), 1011081, 1073518, 75.0, 125.0, typeof( IronIngot ), 1044036, 9, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( EcruCitrine ), 1032693, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 9 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( MagekillerAssassinSpike ), 1011081, 1073519, 75.0, 125.0, typeof( IronIngot ), 1044036, 9, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 10 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( WoundingAssassinSpike ), 1011081, 1073520, 75.0, 125.0, typeof( IronIngot ), 1044036, 9, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( PerfectEmerald ), 1032692, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 11 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( TrueLeafblade ), 1011081, 1073521, 75.0, 125.0, typeof( IronIngot ), 1044036, 12, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( BlueDiamond ), 1032696, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 12 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( Luckblade ), 1011081, 1073522, 75.0, 125.0, typeof( IronIngot ), 1044036, 12, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( WhitePearl ), 1032694, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 13 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( MagekillerLeafblade ), 1011081, 1073523, 75.0, 125.0, typeof( IronIngot ), 1044036, 12, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( FireRuby ), 1032695, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 14 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( LeafbladeOfEase ), 1011081, 1073524, 75.0, 125.0, typeof( IronIngot ), 1044036, 12, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( PerfectEmerald ), 1032692, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 15 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( KnightsWarCleaver ), 1011081, 1073525, 75.0, 125.0, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( PerfectEmerald ), 1032692, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 16 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( ButchersWarCleaver ), 1011081, 1073526, 75.0, 125.0, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( Turquoise ), 1032691, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 17 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( SerratedWarCleaver ), 1011081, 1073527, 75.0, 125.0, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( EcruCitrine ), 1032693, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 18 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( TrueWarCleaver ), 1011081, 1073528, 75.0, 125.0, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 19 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( AdventurersMachete ), 1011081, 1073533, 75.0, 125.0, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( WhitePearl ), 1032694, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 20 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( OrcishMachete ), 1011081, 1073534, 75.0, 125.0, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( Scourge ), 1072136, 1, 1042081 );\n\t\t\t\t\tAddRecipe( index, 21 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( MacheteOfDefense ), 1011081, 1073535, 75.0, 125.0, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 22 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( DiseasedMachete ), 1011081, 1073536, 75.0, 125.0, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( Blight ), 1072134, 1, 1042081 );\n\t\t\t\t\tAddRecipe( index, 23 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( RuneSabre ), 1011081, 1073537, 75.0, 125.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( Turquoise ), 1032691, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 24 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( MagesRuneBlade ), 1011081, 1073538, 75.0, 125.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( BlueDiamond ), 1032696, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 25 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( RuneBladeOfKnowledge ), 1011081, 1073539, 75.0, 125.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( EcruCitrine ), 1032693, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 26 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( CorruptedRuneBlade ), 1011081, 1073540, 75.0, 125.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( Corruption ), 1072135, 1, 1042081 );\n\t\t\t\t\tAddRecipe( index, 27 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( TrueRadiantScimitar ), 1011081, 1073541, 75.0, 125.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 28 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( DarkglowScimitar ), 1011081, 1073542, 75.0, 125.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( DarkSapphire ), 1032690, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 29 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( IcyScimitar ), 1011081, 1073543, 75.0, 125.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( DarkSapphire ), 1032690, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 30 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( TwinklingScimitar ), 1011081, 1073544, 75.0, 125.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( DarkSapphire ), 1032690, 1, 1044240 );\n\t\t\t\t\tAddRecipe( index, 31 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t\tindex = AddCraft( typeof( BoneMachete ), 1011081, 1020526, 75.0, 125.0, typeof( IronIngot ), 1044036, 20, 1044037 );\n\t\t\t\t\tAddRes( index, typeof( Bone ), 1049064, 6, 1049063 );\n\t\t\t\t\tAddRecipe( index, 32 );\n\t\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\t}\n\t\t\t\t*/\n\t\t\t}\n\t\t\t#endregion\n\t\t\t#region Axes\n\t\t\tAddCraft( typeof( Axe ), 1011082, 1023913, 34.2, 84.2, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\tAddCraft( typeof( BattleAxe ), 1011082, 1023911, 30.5, 80.5, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\tAddCraft( typeof( DoubleAxe ), 1011082, 1023915, 29.3, 79.3, typeof( IronIngot ), 1044036, 12, 1044037 );\n\t\t\tAddCraft( typeof( ExecutionersAxe ), 1011082, 1023909, 34.2, 84.2, typeof( IronIngot ), 1044036, 14, 1044037 );\n\t\t\tAddCraft( typeof( LargeBattleAxe ), 1011082, 1025115, 28.0, 78.0, typeof( IronIngot ), 1044036, 12, 1044037 );\n\t\t\tAddCraft( typeof( TwoHandedAxe ), 1011082, 1025187, 33.0, 83.0, typeof( IronIngot ), 1044036, 16, 1044037 );\n\t\t\tAddCraft( typeof( WarAxe ), 1011082, 1025040, 39.1, 89.1, typeof( IronIngot ), 1044036, 16, 1044037 );\n\t\t\t/*\n\t\t\tif( Core.ML )\n\t\t\t{\n\t\t\t\tindex = AddCraft( typeof( OrnateAxe ), 1011082, 1031572, 70.0, 120.0, typeof( IronIngot ), 1044036, 18, 1044037 );\n\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\tindex = AddCraft( typeof( GuardianAxe ), 1011082, 1073545, 75.0, 125.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n\t\t\t\tAddRes( index, typeof( BlueDiamond ), 1032696, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 33 );\n\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\tindex = AddCraft( typeof( SingingAxe ), 1011082, 1073546, 75.0, 125.0, typeof( IronIngot ), 1044036, 15, 1044037 );\n", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "length": 3677, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "041b37993bb94365c75994e98a46916bd4bd610bd9513f76"}
{"input": "", "context": "from io import BytesIO\nfrom translate.convert import prop2po, test_convert\nfrom translate.storage import po, properties\nclass TestProp2PO:\n    @staticmethod\n    def prop2po(propsource, proptemplate=None, personality=\"java\"):\n        \"\"\"helper that converts .properties source to po source without requiring files\"\"\"\n        inputfile = BytesIO(propsource.encode())\n        inputprop = properties.propfile(inputfile, personality=personality)\n        convertor = prop2po.prop2po(personality=personality)\n        if proptemplate:\n            templatefile = BytesIO(proptemplate.encode())\n            templateprop = properties.propfile(templatefile)\n            outputpo = convertor.mergestore(templateprop, inputprop)\n        else:\n            outputpo = convertor.convertstore(inputprop)\n        return outputpo\n    @staticmethod\n    def convertprop(propsource):\n        \"\"\"call the convertprop, return the outputfile\"\"\"\n        inputfile = BytesIO(propsource.encode())\n        outputfile = BytesIO()\n        templatefile = None\n        assert prop2po.convertprop(inputfile, outputfile, templatefile)\n        return outputfile.getvalue()\n    @staticmethod\n    def singleelement(pofile):\n        \"\"\"checks that the pofile contains a single non-header element, and returns it\"\"\"\n        assert len(pofile.units) == 2\n        assert pofile.units[0].isheader()\n        print(pofile)\n        return pofile.units[1]\n    @staticmethod\n    def countelements(pofile):\n        \"\"\"counts the number of non-header entries\"\"\"\n        assert pofile.units[0].isheader()\n        print(pofile)\n        return len(pofile.units) - 1\n    def test_simpleentry(self):\n        \"\"\"checks that a simple properties entry converts properly to a po entry\"\"\"\n        propsource = \"SAVEENTRY=Save file\\n\"\n        pofile = self.prop2po(propsource)\n        pounit = self.singleelement(pofile)\n        assert pounit.source == \"Save file\"\n        assert pounit.target == \"\"\n    def test_convertprop(self):\n        \"\"\"checks that the convertprop function is working\"\"\"\n        propsource = \"SAVEENTRY=Save file\\n\"\n        posource = self.convertprop(propsource)\n        pofile = po.pofile(BytesIO(posource))\n        pounit = self.singleelement(pofile)\n        assert pounit.source == \"Save file\"\n        assert pounit.target == \"\"\n    def test_no_value_entry(self):\n        \"\"\"checks that a properties entry without value is converted\"\"\"\n        propsource = \"KEY = \\n\"\n        pofile = self.prop2po(propsource)\n        pounit = self.singleelement(pofile)\n        assert pounit.getcontext() == \"KEY\"\n        assert pounit.source == \"\"\n        assert pounit.target == \"\"\n    def test_no_separator_entry(self):\n        \"\"\"checks that a properties entry without separator is converted\"\"\"\n        propsource = \"KEY\\n\"\n        pofile = self.prop2po(propsource)\n        pounit = self.singleelement(pofile)\n        assert pounit.getcontext() == \"KEY\"\n        assert pounit.source == \"\"\n        assert pounit.target == \"\"\n    def test_tab_at_end_of_string(self):\n        \"\"\"check that we preserve tabs at the end of a string\"\"\"\n        propsource = r\"TAB_AT_END=This setence has a tab at the end.\\t\"\n        pofile = self.prop2po(propsource)\n        pounit = self.singleelement(pofile)\n        assert pounit.source == \"This setence has a tab at the end.\\t\"\n        propsource = (\n            r\"SPACE_THEN_TAB_AT_END=This setence has a space then tab at the end. \\t\"\n        )\n        pofile = self.prop2po(propsource)\n        pounit = self.singleelement(pofile)\n        assert pounit.source == \"This setence has a space then tab at the end. \\t\"\n        propsource = r\"SPACE_AT_END=This setence will keep its 4 spaces at the end.    \"\n        pofile = self.prop2po(propsource)\n        pounit = self.singleelement(pofile)\n        assert pounit.source == \"This setence will keep its 4 spaces at the end.    \"\n        propsource = (\n            r\"SPACE_AT_END_NO_TRIM=This setence will keep its 4 spaces at the end.\\    \"\n        )\n        pofile = self.prop2po(propsource)\n        pounit = self.singleelement(pofile)\n        assert pounit.source == \"This setence will keep its 4 spaces at the end.    \"\n        propsource = r\"SPACE_AT_END_NO_TRIM2=This setence will keep its 4 spaces at the end.\\\\    \"\n        pofile = self.prop2po(propsource)\n        pounit = self.singleelement(pofile)\n        assert pounit.source == \"This setence will keep its 4 spaces at the end.\\\\    \"\n    def test_tab_at_start_of_value(self):\n        \"\"\"check that tabs in a property are ignored where appropriate\"\"\"\n        propsource = r\"property\t=\tvalue\"\n        pofile = self.prop2po(propsource)\n        pounit = self.singleelement(pofile)\n        assert pounit.getlocations()[0] == \"property\"\n        assert pounit.source == \"value\"\n    def test_unicode(self):\n        \"\"\"checks that unicode entries convert properly\"\"\"\n        unistring = r\"Norsk bokm\\u00E5l\"\n        propsource = \"nb = %s\\n\" % unistring\n        pofile = self.prop2po(propsource)\n        pounit = self.singleelement(pofile)\n        print(repr(pofile.units[0].target))\n        print(repr(pounit.source))\n        assert pounit.source == \"Norsk bokm\\u00E5l\"\n    def test_multiline_escaping(self):\n        \"\"\"checks that multiline enties can be parsed\"\"\"\n        propsource = r\"\"\"5093=Unable to connect to your IMAP server. You may have exceeded the maximum number \\\nof connections to this server. If so, use the Advanced IMAP Server Settings dialog to \\\nreduce the number of cached connections.\"\"\"\n        pofile = self.prop2po(propsource)\n        print(repr(pofile.units[1].target))\n        assert self.countelements(pofile) == 1\n    def test_comments(self):\n        \"\"\"test to ensure that we take comments from .properties and place them in .po\"\"\"\n        propsource = \"\"\"# Comment\nprefPanel-smime=Security\"\"\"\n        pofile = self.prop2po(propsource)\n        pounit = self.singleelement(pofile)\n        assert pounit.getnotes(\"developer\") == \"# Comment\"\n    def test_multiline_comments(self):\n        \"\"\"test to ensure that we handle multiline comments well\"\"\"\n        propsource = \"\"\"# Comment\n# commenty 2\n## @name GENERIC_ERROR\n## @loc none\nprefPanel-smime=\n\"\"\"\n        pofile = self.prop2po(propsource)\n        print(bytes(pofile))\n        # header comments:\n        assert b\"#. # Comment\\n#. # commenty 2\" in bytes(pofile)\n        pounit = self.singleelement(pofile)\n        assert pounit.getnotes(\"developer\") == \"## @name GENERIC_ERROR\\n## @loc none\"\n    def test_folding_accesskeys(self):\n        \"\"\"check that we can fold various accesskeys into their associated label (bug #115)\"\"\"\n        propsource = r\"\"\"cmd_addEngine.label = Add Engines...\ncmd_addEngine.accesskey = A\"\"\"\n        pofile = self.prop2po(propsource, personality=\"mozilla\")\n        pounit = self.singleelement(pofile)\n        assert pounit.source == \"&Add Engines...\"\n    def test_dont_translate(self):\n        \"\"\"check that we know how to ignore don't translate instructions in properties files (bug #116)\"\"\"\n        propsource = \"\"\"# LOCALIZATION NOTE (dont): DONT_TRANSLATE.\ndont=don't translate me\ndo=translate me\n\"\"\"\n        pofile = self.prop2po(propsource)\n        assert self.countelements(pofile) == 1\n    def test_emptyproperty(self):\n        \"\"\"checks that empty property definitions survive into po file, bug 15\"\"\"\n        for delimiter in [\"=\", \"\"]:\n            propsource = \"# comment\\ncredit%s\" % delimiter\n            pofile = self.prop2po(propsource)\n            pounit = self.singleelement(pofile)\n            assert pounit.getlocations() == [\"credit\"]\n            assert pounit.getcontext() == \"credit\"\n            assert 'msgctxt \"credit\"' in str(pounit)\n            assert b\"#. # comment\" in bytes(pofile)\n            assert pounit.source == \"\"\n    def test_emptyproperty_translated(self):\n        \"\"\"checks that if we translate an empty property it makes it into the PO\"\"\"\n        for delimiter in [\"=\", \"\"]:\n            proptemplate = \"credit%s\" % delimiter\n            propsource = \"credit=Translators Names\"\n            pofile = self.prop2po(propsource, proptemplate)\n            pounit = self.singleelement(pofile)\n            assert pounit.getlocations() == [\"credit\"]\n            # FIXME we don't seem to get a _: comment but we should\n            # assert pounit.getcontext() == \"credit\"\n            assert pounit.source == \"\"\n            assert pounit.target == \"Translators Names\"\n    def test_newlines_in_value(self):\n        \"\"\"check that we can carry newlines that appear in the property value into the PO\"\"\"\n        propsource = \"\"\"prop=\\\\nvalue\\\\n\\n\"\"\"\n        pofile = self.prop2po(propsource)\n        unit = self.singleelement(pofile)\n        assert unit.source == \"\\nvalue\\n\"\n    def test_header_comments(self):\n        \"\"\"check that we can handle comments not directly associated with a property\"\"\"\n        propsource = \"\"\"# Header comment\\n\\n# Comment\\n\\nprop=value\\n\"\"\"\n        pofile = self.prop2po(propsource)\n        unit = self.singleelement(pofile)\n        assert unit.source == \"value\"\n        assert unit.getnotes(\"developer\") == \"# Comment\"\n    def test_unassociated_comment_order(self):\n        \"\"\"check that we can handle the order of unassociated comments\"\"\"\n        propsource = \"\"\"# Header comment\\n\\n# 1st Unassociated comment\\n\\n# 2nd Connected comment\\nprop=value\\n\"\"\"\n        pofile = self.prop2po(propsource)\n        unit = self.singleelement(pofile)\n        assert unit.source == \"value\"\n        assert (\n            unit.getnotes(\"developer\")\n            == \"# 1st Unassociated comment\\n\\n# 2nd Connected comment\"\n        )\n    def test_x_header(self):\n        \"\"\"Test that we correctly create the custom header entries\n        (accelerators, merge criterion).\n        \"\"\"\n        propsource = \"\"\"prop=value\\n\"\"\"\n        outputpo = self.prop2po(propsource, personality=\"mozilla\")\n        assert b\"X-Accelerator-Marker\" in bytes(outputpo)\n        assert b\"X-Merge-On\" in bytes(outputpo)\n        # Even though the gaia flavour inherrits from mozilla, it should not\n        # get the header\n        outputpo = self.prop2po(propsource, personality=\"gaia\")\n        assert b\"X-Accelerator-Marker\" not in bytes(outputpo)\n        assert b\"X-Merge-On\" not in bytes(outputpo)\n    def test_gaia_plurals(self):\n        \"\"\"Test conversion of gaia plural units.\"\"\"\n        propsource = \"\"\"\nmessage-multiedit-header={[ plural(n) ]}\nmessage-multiedit-header[zero]=Edit\nmessage-multiedit-header[one]={{ n }} selected\nmessage-multiedit-header[two]={{ n }} selected\nmessage-multiedit-header[few]={{ n }} selected\nmessage-multiedit-header[many]={{ n }} selected\nmessage-multiedit-header[other]={{ n }} selected\n\"\"\"\n        outputpo = self.prop2po(propsource, personality=\"gaia\")\n        pounit = outputpo.units[-1]\n        assert pounit.hasplural()\n        assert pounit.getlocations() == [\"message-multiedit-header\"]\n        print(outputpo)\n        zero_unit = outputpo.units[-2]\n        assert not zero_unit.hasplural()\n        assert zero_unit.source == \"Edit\"\n    def test_successive_gaia_plurals(self):\n        \"\"\"Test conversion of two successive gaia plural units.\"\"\"\n        propsource = \"\"\"\nmessage-multiedit-header={[ plural(n) ]}\nmessage-multiedit-header[zero]=Edit\nmessage-multiedit-header[one]={{ n }} selected\nmessage-multiedit-header[two]={{ n }} selected\nmessage-multiedit-header[few]={{ n }} selected\nmessage-multiedit-header[many]={{ n }} selected\nmessage-multiedit-header[other]={{ n }} selected\nmessage-multiedit-header2={[ plural(n) ]}\nmessage-multiedit-header2[zero]=Edit 2\nmessage-multiedit-header2[one]={{ n }} selected 2\nmessage-multiedit-header2[two]={{ n }} selected 2\nmessage-multiedit-header2[few]={{ n }} selected 2\nmessage-multiedit-header2[many]={{ n }} selected 2\nmessage-multiedit-header2[other]={{ n }} selected 2\n\"\"\"\n        outputpo = self.prop2po(propsource, personality=\"gaia\")\n        pounit = outputpo.units[-1]\n        assert pounit.hasplural()\n        assert pounit.getlocations() == [\"message-multiedit-header2\"]\n        pounit = outputpo.units[-3]\n        assert pounit.hasplural()\n        assert pounit.getlocations() == [\"message-multiedit-header\"]\n        print(outputpo)\n        zero_unit = outputpo.units[-2]\n        assert not zero_unit.hasplural()\n        assert zero_unit.source == \"Edit 2\"\n        zero_unit = outputpo.units[-4]\n        assert not zero_unit.hasplural()\n        assert zero_unit.source == \"Edit\"\n    def test_duplicate_keys(self):\n        \"\"\"Check that we correctly handle duplicate keys.\"\"\"\n        source = \"\"\"\nkey=value\nkey=value\n\"\"\"\n        po_file = self.prop2po(source)\n        assert self.countelements(po_file) == 1\n        po_unit = self.singleelement(po_file)\n        assert po_unit.source == \"value\"\n        source = \"\"\"\nkey=value\nkey=another value\n\"\"\"\n        po_file = self.prop2po(source)\n        assert self.countelements(po_file) == 2\n        po_unit = po_file.units[1]\n        assert po_unit.source == \"value\"\n        assert po_unit.getlocations() == [\"key\"]\n        po_unit = po_file.units[2]\n        assert po_unit.source == \"another value\"\n        assert po_unit.getlocations() == [\"key\"]\n        source = \"\"\"\nkey1=value\nkey2=value\n\"\"\"\n        po_file = self.prop2po(source)\n        assert self.countelements(po_file) == 2\n        po_unit = po_file.units[1]\n        assert po_unit.source == \"value\"\n        assert po_unit.getlocations() == [\"key1\"]\n        po_unit = po_file.units[2]\n        assert po_unit.source == \"value\"\n        assert po_unit.getlocations() == [\"key2\"]\n    def test_gwt_plurals(self):\n        \"\"\"Test conversion of gwt plural units.\"\"\"\n        propsource = \"\"\"\nmessage-multiedit-header={0,number} selected\nmessage-multiedit-header[none]=Edit\nmessage-multiedit-header[one]={0,number} selected\nmessage-multiedit-header[two]={0,number} selected\nmessage-multiedit-header[few]={0,number} selected\nmessage-multiedit-header[many]={0,number} selected\n\"\"\"\n        outputpo = self.prop2po(propsource, personality=\"gwt\")\n        pounit = outputpo.units[-1]\n        assert pounit.getlocations() == [\"message-multiedit-header\"]\nclass TestProp2POCommand(test_convert.TestConvertCommand, TestProp2PO):\n    \"\"\"Tests running actual prop2po commands on files\"\"\"\n    convertmodule = prop2po\n    defaultoptions = {\"progress\": \"none\"}\n    def test_help(self, capsys):\n        \"\"\"tests getting help\"\"\"\n        options = super().test_help(capsys)\n", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "length": 1336, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "b2821f4a0fef62fd70ef5f4e22b1d56b272a3581d330dac8"}
{"input": "", "context": "// GtkSharp.Generation.InterfaceGen.cs - The Interface Generatable.\n//\n// Author: Mike Kestner <mkestner@speakeasy.net>\n//\n// Copyright (c) 2001-2003 Mike Kestner\n// Copyright (c) 2004, 2007 Novell, Inc.\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of version 2 of the GNU General Public\n// License as published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// General Public License for more details.\n//\n// You should have received a copy of the GNU General Public\n// License along with this program; if not, write to the\n// Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n// Boston, MA 02111-1307, USA.\nnamespace GtkSharp.Generation {\n\tusing System;\n\tusing System.Collections;\n\tusing System.IO;\n\tusing System.Xml;\n\tpublic class InterfaceGen : ObjectBase {\n\t\tbool consume_only;\n\t\tArrayList vms = new ArrayList ();\n\t\tArrayList members = new ArrayList ();\n\t\tpublic InterfaceGen (XmlElement ns, XmlElement elem) : base (ns, elem) \n\t\t{\n\t\t\tconsume_only = elem.HasAttribute (\"consume_only\");\n\t\t\tforeach (XmlNode node in elem.ChildNodes) {\n\t\t\t\tswitch (node.Name) {\n\t\t\t\tcase \"virtual_method\":\n\t\t\t\t\tVirtualMethod vm = new VirtualMethod (node as XmlElement, this);\n\t\t\t\t\tvms.Add (vm);\n\t\t\t\t\tmembers.Add (vm);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"signal\":\n\t\t\t\t\tobject sig = sigs [(node as XmlElement).GetAttribute (\"name\")];\n\t\t\t\t\tif (sig == null)\n\t\t\t\t\t\tsig = new Signal (node as XmlElement, this);\n\t\t\t\t\tmembers.Add (sig);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!IsNodeNameHandled (node.Name))\n\t\t\t\t\t\tConsole.WriteLine (\"Unexpected node \" + node.Name + \" in \" + CName);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic bool IsConsumeOnly {\n\t\t\tget {\n\t\t\t\treturn consume_only;\n\t\t\t}\n\t\t}\n\t\tpublic override string FromNative (string var, bool owned)\n\t\t{\n\t\t\tif (IsConsumeOnly)\n\t\t\t\treturn \"GLib.Object.GetObject (\" + var + \", \" + (owned ? \"true\" : \"false\") + \") as \" + QualifiedName;\n\t\t\telse\n\t\t\t\treturn QualifiedName + \"Adapter.GetObject (\" + var + \", \" + (owned ? \"true\" : \"false\") + \")\";\n\t\t}\n\t\tpublic override bool ValidateForSubclass ()\n\t\t{\n\t\t\tArrayList invalids = new ArrayList ();\n\t\t\tforeach (Method method in methods.Values) {\n\t\t\t\tif (!method.Validate ()) {\n\t\t\t\t\tConsole.WriteLine (\"in type \" + QualifiedName);\n\t\t\t\t\tinvalids.Add (method);\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach (Method method in invalids)\n\t\t\t\tmethods.Remove (method.Name);\n\t\t\tinvalids.Clear ();\n\t\t\treturn base.ValidateForSubclass ();\n\t\t}\n\t\tstring IfaceName {\n\t\t\tget {\n\t\t\t\treturn Name + \"Iface\";\n\t\t\t}\n\t\t}\n\t\tvoid GenerateIfaceStruct (StreamWriter sw)\n\t\t{\n\t\t\tsw.WriteLine (\"\\t\\tstatic \" + IfaceName + \" iface;\");\n\t\t\tsw.WriteLine ();\n\t\t\tsw.WriteLine (\"\\t\\tstruct \" + IfaceName + \" {\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tpublic IntPtr gtype;\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tpublic IntPtr itype;\");\n\t\t\tsw.WriteLine ();\n\t\t\tforeach (object member in members) {\n\t\t\t\tif (member is Signal) {\n\t\t\t\t\tSignal sig = member as Signal;\n\t\t\t\t\tsw.WriteLine (\"\\t\\t\\tpublic IntPtr {0};\", sig.CName.Replace (\"\\\"\", \"\").Replace (\"-\", \"_\"));\n\t\t\t\t} else if (member is VirtualMethod) {\n\t\t\t\t\tVirtualMethod vm = member as VirtualMethod;\n\t\t\t\t\tbool has_target = methods [vm.Name] != null;\n\t\t\t\t\tif (!has_target)\n\t\t\t\t\t\tConsole.WriteLine (\"Interface \" + QualifiedName + \" virtual method \" + vm.Name + \" has no matching method to invoke.\");\n\t\t\t\t\tstring type = has_target && vm.IsValid ? vm.Name + \"Delegate\" : \"IntPtr\";\n\t\t\t\t\tsw.WriteLine (\"\\t\\t\\tpublic \" + type + \" \" + vm.CName + \";\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tsw.WriteLine (\"\\t\\t}\");\n\t\t\tsw.WriteLine ();\n\t\t}\n\t\tvoid GenerateStaticCtor (StreamWriter sw)\n\t\t{\n\t\t\tsw.WriteLine (\"\\t\\tstatic \" + Name + \"Adapter ()\");\n\t\t\tsw.WriteLine (\"\\t\\t{\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tGLib.GType.Register (_gtype, typeof({0}Adapter));\", Name);\n\t\t\tforeach (VirtualMethod vm in vms) {\n\t\t\t\tbool has_target = methods [vm.Name] != null;\n\t\t\t\tif (has_target && vm.IsValid)\n\t\t\t\t\tsw.WriteLine (\"\\t\\t\\tiface.{0} = new {1}Delegate ({1}Callback);\", vm.CName, vm.Name);\n\t\t\t}\n\t\t\tsw.WriteLine (\"\\t\\t}\");\n\t\t\tsw.WriteLine ();\n\t\t}\n\t\tvoid GenerateInitialize (StreamWriter sw)\n\t\t{\n\t\t\tsw.WriteLine (\"\\t\\tstatic void Initialize (IntPtr ifaceptr, IntPtr data)\");\n\t\t\tsw.WriteLine (\"\\t\\t{\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\" + IfaceName + \" native_iface = Marshal.PtrToStructure<\" + IfaceName + \"> (ifaceptr);\");\n\t\t\tforeach (VirtualMethod vm in vms)\n\t\t\t\tsw.WriteLine (\"\\t\\t\\tnative_iface.\" + vm.CName + \" = iface.\" + vm.CName + \";\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tMarshal.StructureToPtr<\" + IfaceName + \"> (native_iface, ifaceptr, false);\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tGCHandle gch = (GCHandle) data;\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tgch.Free ();\");\n\t\t\tsw.WriteLine (\"\\t\\t}\");\n\t\t\tsw.WriteLine ();\n\t\t}\n\t\tvoid GenerateCallbacks (StreamWriter sw)\n\t\t{\n\t\t\tforeach (VirtualMethod vm in vms) {\n\t\t\t\tif (methods [vm.Name] != null) {\n\t\t\t\t\tsw.WriteLine ();\n\t\t\t\t\tvm.GenerateCallback (sw);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvoid GenerateCtors (StreamWriter sw)\n\t\t{\n\t\t\tsw.WriteLine (\"\\t\\tpublic \" + Name + \"Adapter ()\");\n\t\t\tsw.WriteLine (\"\\t\\t{\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tInitHandler = new GLib.GInterfaceInitHandler (Initialize);\");\n\t\t\tsw.WriteLine (\"\\t\\t}\");\n\t\t\tsw.WriteLine ();\n\t\t\tsw.WriteLine (\"\\t\\t{0}Implementor implementor;\", Name);\n\t\t\tsw.WriteLine ();\n\t\t\tsw.WriteLine (\"\\t\\tpublic {0}Adapter ({0}Implementor implementor)\", Name);\n\t\t\tsw.WriteLine (\"\\t\\t{\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tif (implementor == null)\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\\tthrow new ArgumentNullException (\\\"implementor\\\");\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tthis.implementor = implementor;\");\n\t\t\tsw.WriteLine (\"\\t\\t}\");\n\t\t\tsw.WriteLine ();\n\t\t\tsw.WriteLine (\"\\t\\tpublic \" + Name + \"Adapter (IntPtr handle)\");\n\t\t\tsw.WriteLine (\"\\t\\t{\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tthis.handle = handle;\");\n\t\t\tsw.WriteLine (\"\\t\\t}\");\n\t\t\tsw.WriteLine ();\n\t\t}\n\t\tvoid GenerateGType (StreamWriter sw)\n\t\t{\n\t\t\tMethod m = GetMethod (\"GetType\");\n\t\t\tm.GenerateImport (sw);\n\t\t\tsw.WriteLine (\"\\t\\tprivate static GLib.GType _gtype = new GLib.GType ({0} ());\", m.CName);\n\t\t\tsw.WriteLine ();\n\t\t\tsw.WriteLine (\"\\t\\tpublic override GLib.GType GType {\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tget {\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\\treturn _gtype;\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t}\");\n\t\t\tsw.WriteLine (\"\\t\\t}\");\n\t\t\tsw.WriteLine ();\n\t\t}\n\t\tvoid GenerateHandleProp (StreamWriter sw)\n\t\t{\n\t\t\tsw.WriteLine (\"\\t\\tIntPtr handle;\");\n\t\t\tsw.WriteLine (\"\\t\\tpublic override IntPtr Handle {\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tget {\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\\tif (handle != IntPtr.Zero)\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\\t\\treturn handle;\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\\treturn implementor == null ? IntPtr.Zero : implementor.Handle;\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t}\");\n\t\t\tsw.WriteLine (\"\\t\\t}\");\n\t\t\tsw.WriteLine ();\n\t\t}\n\t\tvoid GenerateGetObject (StreamWriter sw)\n\t\t{\n\t\t\tsw.WriteLine (\"\\t\\tpublic static \" + Name + \" GetObject (IntPtr handle, bool owned)\");\n\t\t\tsw.WriteLine (\"\\t\\t{\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tGLib.Object obj = GLib.Object.GetObject (handle, owned);\");\n\t\t\tsw.WriteLine (\"\\t\\t\\treturn GetObject (obj);\");\n\t\t\tsw.WriteLine (\"\\t\\t}\");\n\t\t\tsw.WriteLine ();\n\t\t\tsw.WriteLine (\"\\t\\tpublic static \" + Name + \" GetObject (GLib.Object obj)\");\n\t\t\tsw.WriteLine (\"\\t\\t{\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tif (obj == null)\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\\treturn null;\");\n\t\t\tsw.WriteLine (\"\\t\\t\\telse if (obj is \" + Name + \"Implementor)\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\\treturn new {0}Adapter (obj as {0}Implementor);\", Name);\n\t\t\tsw.WriteLine (\"\\t\\t\\telse if (obj as \" + Name + \" == null)\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\\treturn new {0}Adapter (obj.Handle);\", Name);\n\t\t\tsw.WriteLine (\"\\t\\t\\telse\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\\treturn obj as {0};\", Name);\n\t\t\tsw.WriteLine (\"\\t\\t}\");\n\t\t\tsw.WriteLine ();\n\t\t}\n\t\tvoid GenerateImplementorProp (StreamWriter sw)\n\t\t{\n\t\t\tsw.WriteLine (\"\\t\\tpublic \" + Name + \"Implementor Implementor {\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tget {\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\\treturn implementor;\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t}\");\n\t\t\tsw.WriteLine (\"\\t\\t}\");\n\t\t\tsw.WriteLine ();\n\t\t}\n\t\tvoid GenerateAdapter (GenerationInfo gen_info)\n\t\t{\n\t\t\tif (IsConsumeOnly)\n\t\t\t\treturn;\n\t\t\tStreamWriter sw = gen_info.Writer = gen_info.OpenStream (Name + \"Adapter\");\n\t\t\tsw.WriteLine (\"namespace \" + NS + \" {\");\n\t\t\tsw.WriteLine ();\n\t\t\tsw.WriteLine (\"\\tusing System;\");\n\t\t\tsw.WriteLine (\"\\tusing System.Runtime.InteropServices;\");\n\t\t\tsw.WriteLine ();\n\t\t\tsw.WriteLine (\"#region Autogenerated code\");\n\t\t\tsw.WriteLine (\"\\tpublic class \" + Name + \"Adapter : GLib.GInterfaceAdapter, \" + QualifiedName + \" {\");\n\t\t\tsw.WriteLine ();\n\t\t\tGenerateIfaceStruct (sw);\n\t\t\tGenerateStaticCtor (sw);\n\t\t\tGenerateCallbacks (sw);\n\t\t\tGenerateInitialize (sw);\n\t\t\tGenerateCtors (sw);\n\t\t\tGenerateGType (sw);\n\t\t\tGenerateHandleProp (sw);\n\t\t\tGenerateGetObject (sw);\n\t\t\tGenerateImplementorProp (sw);\n\t\t\tGenProperties (gen_info, null);\n\t\t\tforeach (Signal sig in sigs.Values)\n\t\t\t\tsig.GenEvent (sw, null, \"GLib.Object.GetObject (Handle)\");\n\t\t\tMethod temp = methods [\"GetType\"] as Method;\n\t\t\tif (temp != null)\n\t\t\t\tmethods.Remove (\"GetType\");\n\t\t\tGenMethods (gen_info, new Hashtable (), this);\n\t\t\tif (temp != null)\n\t\t\t\tmethods [\"GetType\"] = temp;\n\t\t\tsw.WriteLine (\"#endregion\");\n\t\t\tAppendCustom (sw, gen_info.CustomDir, Name + \"Adapter\");\n\t\t\tsw.WriteLine (\"\\t}\");\n\t\t\tsw.WriteLine (\"}\");\n\t\t\tsw.Close ();\n\t\t\tgen_info.Writer = null;\n\t\t}\n\t\tvoid GenerateImplementorIface (GenerationInfo gen_info)\n\t\t{\n\t\t\tStreamWriter sw = gen_info.Writer;\n\t\t\tif (IsConsumeOnly)\n\t\t\t\treturn;\n\t\t\tsw.WriteLine ();\n\t\t\tsw.WriteLine (\"\\t[GLib.GInterface (typeof (\" + Name + \"Adapter))]\");\n\t\t\tstring access = IsInternal ? \"internal\" : \"public\";\n\t\t\tsw.WriteLine (\"\\t\" + access + \" interface \" + Name + \"Implementor : GLib.IWrapper {\");\n\t\t\tsw.WriteLine ();\n\t\t\tHashtable vm_table = new Hashtable ();\n\t\t\tforeach (VirtualMethod vm in vms)\n\t\t\t\tvm_table [vm.Name] = vm;\n\t\t\tforeach (VirtualMethod vm in vms) {\n\t\t\t\tif (vm_table [vm.Name] == null)\n\t\t\t\t\tcontinue;\n\t\t\t\telse if (!vm.IsValid) {\n\t\t\t\t\tvm_table.Remove (vm.Name);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (vm.IsGetter || vm.IsSetter) {\n\t\t\t\t\tstring cmp_name = (vm.IsGetter ? \"Set\" : \"Get\") + vm.Name.Substring (3);\n\t\t\t\t\tVirtualMethod cmp = vm_table [cmp_name] as VirtualMethod;\n\t\t\t\t\tif (cmp != null && (cmp.IsGetter || cmp.IsSetter)) {\n\t\t\t\t\t\tif (vm.IsSetter)\n\t\t\t\t\t\t\tcmp.GenerateDeclaration (sw, vm);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tvm.GenerateDeclaration (sw, cmp);\n\t\t\t\t\t\tvm_table.Remove (cmp.Name);\n\t\t\t\t\t} else \n\t\t\t\t\t\tvm.GenerateDeclaration (sw, null);\n\t\t\t\t\tvm_table.Remove (vm.Name);\n\t\t\t\t} else {\n\t\t\t\t\tvm.GenerateDeclaration (sw, null);\n\t\t\t\t\tvm_table.Remove (vm.Name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tAppendCustom (sw, gen_info.CustomDir, Name + \"Implementor\");\n\t\t\tsw.WriteLine (\"\\t}\");\n\t\t}\n\t\tpublic override void Generate (GenerationInfo gen_info)\n\t\t{\n\t\t\tGenerateAdapter (gen_info);\n\t\t\tStreamWriter sw = gen_info.Writer = gen_info.OpenStream (Name);\n\t\t\tsw.WriteLine (\"namespace \" + NS + \" {\");\n\t\t\tsw.WriteLine ();\n\t\t\tsw.WriteLine (\"\\tusing System;\");\n\t\t\tsw.WriteLine ();\n\t\t\tsw.WriteLine (\"#region Autogenerated code\");\n\t\t\tstring access = IsInternal ? \"internal\" : \"public\";\n\t\t\tsw.WriteLine (\"\\t\" + access + \" interface \" + Name + \" : GLib.IWrapper {\");\n\t\t\tsw.WriteLine ();\n\t\t\t\n", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "length": 1298, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "1e606083f157674b5fdd85784f3fa96e7f6b84f14c8f1711"}
{"input": "", "context": "#!/usr/bin/python\nfrom __future__ import (absolute_import, division, print_function)\n# Copyright 2019 Fortinet, Inc.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n__metaclass__ = type\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'metadata_version': '1.1'}\nDOCUMENTATION = '''\n---\nmodule: fortios_wireless_controller_inter_controller\nshort_description: Configure inter wireless controller operation in Fortinet's FortiOS and FortiGate.\ndescription:\n    - This module is able to configure a FortiGate or FortiOS (FOS) device by allowing the\n      user to set and modify wireless_controller feature and inter_controller category.\n      Examples include all parameters and values need to be adjusted to datasources before usage.\n      Tested with FOS v6.0.5\nversion_added: \"2.9\"\nauthor:\n    - Miguel Angel Munoz (@mamunozgonzalez)\n    - Nicolas Thomas (@thomnico)\nnotes:\n    - Requires fortiosapi library developed by Fortinet\n    - Run as a local_action in your playbook\nrequirements:\n    - fortiosapi>=0.9.8\noptions:\n    host:\n        description:\n            - FortiOS or FortiGate IP address.\n        type: str\n        required: false\n    username:\n        description:\n            - FortiOS or FortiGate username.\n        type: str\n        required: false\n    password:\n        description:\n            - FortiOS or FortiGate password.\n        type: str\n        default: \"\"\n    vdom:\n        description:\n            - Virtual domain, among those defined previously. A vdom is a\n              virtual instance of the FortiGate that can be configured and\n              used as a different unit.\n        type: str\n        default: root\n    https:\n        description:\n            - Indicates if the requests towards FortiGate must use HTTPS protocol.\n        type: bool\n        default: true\n    ssl_verify:\n        description:\n            - Ensures FortiGate certificate must be verified by a proper CA.\n        type: bool\n        default: true\n    wireless_controller_inter_controller:\n        description:\n            - Configure inter wireless controller operation.\n        default: null\n        type: dict\n        suboptions:\n            fast_failover_max:\n                description:\n                    - Maximum number of retransmissions for fast failover HA messages between peer wireless controllers (3 - 64).\n                type: int\n            fast_failover_wait:\n                description:\n                    - Minimum wait time before an AP transitions from secondary controller to primary controller (10 - 86400 sec).\n                type: int\n            inter_controller_key:\n                description:\n                    - Secret key for inter-controller communications.\n                type: str\n            inter_controller_mode:\n                description:\n                    - Configure inter-controller mode (disable, l2-roaming, 1+1).\n                type: str\n                choices:\n                    - disable\n                    - l2-roaming\n                    - 1+1\n            inter_controller_peer:\n                description:\n                    - Fast failover peer wireless controller list.\n                type: list\n                suboptions:\n                    id:\n                        description:\n                            - ID.\n                        required: true\n                        type: int\n                    peer_ip:\n                        description:\n                            - Peer wireless controller's IP address.\n                        type: str\n                    peer_port:\n                        description:\n                            - Port used by the wireless controller's for inter-controller communications (1024 - 49150).\n                        type: int\n                    peer_priority:\n                        description:\n                            - Peer wireless controller's priority (primary or secondary).\n                        type: str\n                        choices:\n                            - primary\n                            - secondary\n            inter_controller_pri:\n                description:\n                    - Configure inter-controller's priority (primary or secondary).\n                type: str\n                choices:\n                    - primary\n                    - secondary\n'''\nEXAMPLES = '''\n- hosts: localhost\n  vars:\n   host: \"192.168.122.40\"\n   username: \"admin\"\n   password: \"\"\n   vdom: \"root\"\n   ssl_verify: \"False\"\n  tasks:\n  - name: Configure inter wireless controller operation.\n    fortios_wireless_controller_inter_controller:\n      host:  \"{{ host }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      vdom:  \"{{ vdom }}\"\n      https: \"False\"\n      wireless_controller_inter_controller:\n        fast_failover_max: \"3\"\n        fast_failover_wait: \"4\"\n        inter_controller_key: \"<your_own_value>\"\n        inter_controller_mode: \"disable\"\n        inter_controller_peer:\n         -\n            id:  \"8\"\n            peer_ip: \"<your_own_value>\"\n            peer_port: \"10\"\n            peer_priority: \"primary\"\n        inter_controller_pri: \"primary\"\n'''\nRETURN = '''\nbuild:\n  description: Build number of the fortigate image\n  returned: always\n  type: str\n  sample: '1547'\nhttp_method:\n  description: Last method used to provision the content into FortiGate\n  returned: always\n  type: str\n  sample: 'PUT'\nhttp_status:\n  description: Last result given by FortiGate on last operation applied\n  returned: always\n  type: str\n  sample: \"200\"\nmkey:\n  description: Master key (id) used in the last call to FortiGate\n  returned: success\n  type: str\n  sample: \"id\"\nname:\n  description: Name of the table used to fulfill the request\n  returned: always\n  type: str\n  sample: \"urlfilter\"\npath:\n  description: Path of the table used to fulfill the request\n  returned: always\n  type: str\n  sample: \"webfilter\"\nrevision:\n  description: Internal revision number\n  returned: always\n  type: str\n  sample: \"17.0.2.10658\"\nserial:\n  description: Serial number of the unit\n  returned: always\n  type: str\n  sample: \"FGVMEVYYQT3AB5352\"\nstatus:\n  description: Indication of the operation's result\n  returned: always\n  type: str\n  sample: \"success\"\nvdom:\n  description: Virtual domain used\n  returned: always\n  type: str\n  sample: \"root\"\nversion:\n  description: Version of the FortiGate\n  returned: always\n  type: str\n  sample: \"v5.6.3\"\n'''\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.connection import Connection\nfrom ansible.module_utils.network.fortios.fortios import FortiOSHandler\nfrom ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG\ndef login(data, fos):\n    host = data['host']\n    username = data['username']\n    password = data['password']\n    ssl_verify = data['ssl_verify']\n    fos.debug('on')\n    if 'https' in data and not data['https']:\n        fos.https('off')\n    else:\n        fos.https('on')\n    fos.login(host, username, password, verify=ssl_verify)\ndef filter_wireless_controller_inter_controller_data(json):\n    option_list = ['fast_failover_max', 'fast_failover_wait', 'inter_controller_key',\n                   'inter_controller_mode', 'inter_controller_peer', 'inter_controller_pri']\n    dictionary = {}\n    for attribute in option_list:\n        if attribute in json and json[attribute] is not None:\n            dictionary[attribute] = json[attribute]\n    return dictionary\ndef underscore_to_hyphen(data):\n    if isinstance(data, list):\n        for elem in data:\n            elem = underscore_to_hyphen(elem)\n    elif isinstance(data, dict):\n        new_data = {}\n        for k, v in data.items():\n            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)\n        data = new_data\n    return data\ndef wireless_controller_inter_controller(data, fos):\n    vdom = data['vdom']\n    wireless_controller_inter_controller_data = data['wireless_controller_inter_controller']\n    filtered_data = underscore_to_hyphen(filter_wireless_controller_inter_controller_data(wireless_controller_inter_controller_data))\n    return fos.set('wireless-controller',\n                   'inter-controller',\n                   data=filtered_data,\n                   vdom=vdom)\ndef is_successful_status(status):\n    return status['status'] == \"success\" or \\\n        status['http_method'] == \"DELETE\" and status['http_status'] == 404\ndef fortios_wireless_controller(data, fos):\n    if data['wireless_controller_inter_controller']:\n        resp = wireless_controller_inter_controller(data, fos)\n    return not is_successful_status(resp), \\\n        resp['status'] == \"success\", \\\n        resp\ndef main():\n    fields = {\n        \"host\": {\"required\": False, \"type\": \"str\"},\n        \"username\": {\"required\": False, \"type\": \"str\"},\n        \"password\": {\"required\": False, \"type\": \"str\", \"default\": \"\", \"no_log\": True},\n        \"vdom\": {\"required\": False, \"type\": \"str\", \"default\": \"root\"},\n        \"https\": {\"required\": False, \"type\": \"bool\", \"default\": True},\n        \"ssl_verify\": {\"required\": False, \"type\": \"bool\", \"default\": True},\n        \"wireless_controller_inter_controller\": {\n            \"required\": False, \"type\": \"dict\", \"default\": None,\n            \"options\": {\n                \"fast_failover_max\": {\"required\": False, \"type\": \"int\"},\n                \"fast_failover_wait\": {\"required\": False, \"type\": \"int\"},\n                \"inter_controller_key\": {\"required\": False, \"type\": \"str\", \"no_log\": True},\n                \"inter_controller_mode\": {\"required\": False, \"type\": \"str\",\n                                          \"choices\": [\"disable\", \"l2-roaming\", \"1+1\"]},\n                \"inter_controller_peer\": {\"required\": False, \"type\": \"list\",\n                                          \"options\": {\n                                              \"id\": {\"required\": True, \"type\": \"int\"},\n                                              \"peer_ip\": {\"required\": False, \"type\": \"str\"},\n                                              \"peer_port\": {\"required\": False, \"type\": \"int\"},\n                                              \"peer_priority\": {\"required\": False, \"type\": \"str\",\n                                                                \"choices\": [\"primary\", \"secondary\"]}\n                                          }},\n                \"inter_controller_pri\": {\"required\": False, \"type\": \"str\",\n                                         \"choices\": [\"primary\", \"secondary\"]}\n            }\n        }\n    }\n", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "length": 1009, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "e199272f351e3f6118b8425dc96ee820466bf95092f4e4a1"}
{"input": "", "context": "/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.ide.ui.smartTree;\nimport com.google.gwt.dom.client.Element;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.eclipse.che.ide.ui.smartTree.data.MutableNode;\nimport org.eclipse.che.ide.ui.smartTree.data.Node;\n/**\n * Node descriptor. Uses internally in the tree.\n *\n * @author Vlad Zhukovskiy\n */\npublic class NodeDescriptor {\n  private NodeStorage nodeStorage;\n  private Node node;\n  private NodeDescriptor parent;\n  private List<NodeDescriptor> children = new ArrayList<>();\n  private boolean root;\n  private String domId;\n  private boolean childrenRendered;\n  private boolean expand;\n  private boolean expandDeep;\n  private boolean expanded;\n  private boolean loaded;\n  private boolean loading;\n  private Element rootContainerElement;\n  private Element nodeContainerElement;\n  private Element jointContainerElement;\n  private Element iconContainerElement;\n  private Element userElement;\n  private Element presentableTextContainer;\n  private Element infoTextContainer;\n  private Element loadElement;\n  private Element descendantsContainerElement;\n  public NodeDescriptor(NodeStorage nodeStorage, Node node) {\n    this.nodeStorage = nodeStorage;\n    if (node == null) {\n      root = true;\n    }\n    this.node = node;\n  }\n  protected void addChild(int index, NodeDescriptor child) {\n    final int actualIndex;\n    if (nodeStorage.isSorted()) {\n      int insertPos = Collections.binarySearch(children, child, nodeStorage.buildFullComparator());\n      actualIndex = insertPos < 0 ? (-insertPos - 1) : insertPos;\n    } else {\n      actualIndex = index;\n    }\n    children.add(actualIndex, child);\n    child.parent = this;\n  }\n  public void addChildren(int index, List<NodeDescriptor> children) {\n    if (nodeStorage.isSorted()) {\n      getChildren().addAll(children);\n      Collections.sort(getChildren(), nodeStorage.buildFullComparator());\n    } else {\n      int actualIndex = index == 0 ? 0 : (getChildren().indexOf(getChildren().get(index - 1)) + 1);\n      getChildren().addAll(actualIndex, children);\n    }\n    for (NodeDescriptor child : children) {\n      child.parent = this;\n    }\n  }\n  public void clear() {\n    children.clear();\n  }\n  public List<NodeDescriptor> getChildren() {\n    return children;\n  }\n  public Node getNode() {\n    return node;\n  }\n  public NodeDescriptor getParent() {\n    return parent;\n  }\n  public void setNode(Node node) {\n    this.node = node;\n  }\n  public void setParent(NodeDescriptor parent) {\n    this.parent = parent;\n  }\n  public boolean isRoot() {\n    return root;\n  }\n  public void remove(NodeDescriptor descriptor) {\n    children.remove(descriptor);\n  }\n  public void reset() {\n    expand = false;\n    expanded = false;\n    childrenRendered = false;\n  }\n  public void clearElements() {\n    rootContainerElement = null;\n    nodeContainerElement = null;\n    jointContainerElement = null;\n    iconContainerElement = null;\n    userElement = null;\n    presentableTextContainer = null;\n    infoTextContainer = null;\n    loadElement = null;\n    descendantsContainerElement = null;\n    //        domId = null;\n  }\n  public Element getDescendantsContainerElement() {\n    return descendantsContainerElement;\n  }\n  public String getDomId() {\n    return domId;\n  }\n  public Element getRootContainer() {\n    return rootContainerElement;\n  }\n  public Element getNodeContainerElement() {\n    return nodeContainerElement;\n  }\n  public Element getIconContainerElement() {\n    return iconContainerElement;\n  }\n  public Element getJointContainerElement() {\n    return jointContainerElement;\n  }\n  public Element getPresentableTextContainer() {\n    return presentableTextContainer;\n  }\n  public Element getInfoTextContainer() {\n    return infoTextContainer;\n  }\n  public boolean isChildrenRendered() {\n    return childrenRendered;\n  }\n  public boolean isExpand() {\n    return expand;\n  }\n  public boolean isExpandDeep() {\n    return expandDeep;\n  }\n  public boolean isExpanded() {\n    return expanded;\n  }\n  public boolean isLeaf() {\n    return node.isLeaf();\n  }\n  public boolean isLoaded() {\n    return loaded;\n  }\n  public boolean isLoading() {\n    return loading;\n  }\n  public void setChildrenRendered(boolean childrenRendered) {\n    this.childrenRendered = childrenRendered;\n  }\n  public void setDescendantsContainerElement(Element descendantsContainerElement) {\n    this.descendantsContainerElement = descendantsContainerElement;\n  }\n  public void setNodeContainerElement(Element nodeContainerElement) {\n    this.nodeContainerElement = nodeContainerElement;\n  }\n  public void setRootContainerElement(Element rootContainerElement) {\n    this.rootContainerElement = rootContainerElement;\n  }\n  public void setExpand(boolean expand) {\n    this.expand = expand;\n  }\n  public void setExpandDeep(boolean expandDeep) {\n    this.expandDeep = expandDeep;\n  }\n  public void setExpanded(boolean expanded) {\n    this.expanded = expanded;\n  }\n  public void setIconContainerElement(Element iconContainerElement) {\n    this.iconContainerElement = iconContainerElement;\n  }\n  public void setJointContainerElement(Element jointContainerElement) {\n    this.jointContainerElement = jointContainerElement;\n  }\n  public void setLeaf(boolean leaf) {\n", "answers": ["    if (node instanceof MutableNode) {"], "length": 568, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "15f8dc07ac00de89bef4a540779a97a1c2e491a16ec5d225"}
{"input": "", "context": "using N2.Definitions.Static;\nusing N2.Details;\nusing N2.Engine;\nusing N2.Persistence;\nusing N2.Persistence.Sources;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nnamespace N2.Definitions\n{\n    public delegate ContentItem GroupFactoryDelegate(ContentItem parent, string title, string name, Func<IEnumerable<ContentItem>> childFactory);\n    public class GroupChildrenAttribute : Attribute, IInjectable<DefinitionMap>\n    {\n        public GroupChildrenAttribute()\n            : this(GroupChildrenMode.Pages)\n        {\n        }\n        public GroupChildrenAttribute(GroupChildrenMode groupBy)\n        {\n            GroupBy = groupBy;\n            AllowDirectQuery = true;\n            PageSize = 25;\n            StartPagingTreshold = 100;\n            DaysBeforeArchived = 365;\n\t        MinGroupSize = 1;\n        }\n        private DefinitionMap map;\n        protected DefinitionMap Map\n        {\n            get { return map ?? (map = Context.Current.Resolve<DefinitionMap>()); }\n            set { map = value; }\n        }\n        public GroupChildrenMode GroupBy { get; set; }\n        public int StartPagingTreshold { get; set; }\n        public int PageSize { get; set; }\n        public int DaysBeforeArchived { get; set; }\n        public bool AllowDirectQuery { get; set; }\n\t\t/// <summary>\n\t\t/// Minimum size for a single group. If there aren't enough similar items to form a group, then those items won't be grouped and will instead be shown individually (alongside any other groups).\n\t\t/// </summary>\n\t\tpublic int MinGroupSize { get; set; }\n        public IEnumerable<ContentItem> FilterChildren(IEnumerable<ContentItem> previousChildren, Query query, GroupFactoryDelegate groupFactory)\n        {\n            switch (GroupBy)\n            {\n                case GroupChildrenMode.RecentWithArchive:\n                    return ChildrenWithArchive(previousChildren, query, groupFactory);\n                case GroupChildrenMode.Pages:\n                    return ChildrenByPage(previousChildren, query, groupFactory);\n                case GroupChildrenMode.PagesAfterTreshold:\n                    return ChildrenUntilTresholdThenPages(previousChildren, query, groupFactory);\n                case GroupChildrenMode.PublishedYear:\n                    return ChildrenByYear(previousChildren, query, groupFactory);\n                case GroupChildrenMode.PublishedYearMonth:\n                    return ChildrenByYearMonth(previousChildren, query, groupFactory);\n                case GroupChildrenMode.PublishedYearMonthDay:\n                    return ChildrenByYearMonthDay(previousChildren, query, groupFactory);\n                case GroupChildrenMode.AlphabeticalIndex:\n                    return ChildrenByAlphabeticalIndex(previousChildren, query, groupFactory);\n                case GroupChildrenMode.Type:\n                    return ChildrenByType(previousChildren, query, groupFactory);\n                case GroupChildrenMode.ZoneName:\n                    return ChildrenByGroup(previousChildren, query, groupFactory);\n                default:\n                    return previousChildren;\n            }\n        }\n\t    private IEnumerable<IGrouping<TKey, T>> GroupByWithMinSize<T, TKey>(IEnumerable<T> enumerable, Func<T, TKey> groupSelector)\n\t    {\n\t\t    var groups = enumerable.GroupBy(groupSelector).ToList();\n\t\t    return groups;\n\t    }\n        private IEnumerable<ContentItem> ChildrenByGroup(IEnumerable<ContentItem> previousChildren, Query query, GroupFactoryDelegate childFactory)\n        {\n            if (AllowDirectQuery)\n            {\n                var zones = query.Parent.Children.FindZoneNames().ToList();\n                return query.Parent.Children.FindPages()\n                    .Concat(zones.Where(z => !string.IsNullOrEmpty(z))\n                        .Select(z => childFactory(query.Parent, z, \"virtual-grouping/\" + z, () => query.Parent.Children.FindParts(z))));\n            }\n            return GroupByWithMinSize(previousChildren, c => c.ZoneName)\n                .OrderBy(g => g.Key)\n                .SelectMany(g => g.Key == null ? (IEnumerable<ContentItem>)g : new ContentItem[] { childFactory(query.Parent, g.Key, \"virtual-grouping/\" + g.Key, () => g) });\n        }\n        private IEnumerable<ContentItem> ChildrenByType(IEnumerable<ContentItem> previousChildren, Query query, GroupFactoryDelegate childFactory)\n        {\n            if (AllowDirectQuery)\n            {\n\t            var types = query.Parent.Children.Select(query.AsParameters(), \"class\")\n\t\t            .Select(r => (string) r[\"class\"])\n\t\t            .Distinct()\n\t\t            .OrderBy(t => t);\n                return types.Select(t => childFactory(query.Parent, t, \"virtual-grouping/\" + t, () => query.Parent.Children.Find(query.AsParameters() & Parameter.Equal(\"class\", t))));\n            }\n            return GroupByWithMinSize(previousChildren, c => c.GetContentType()) // previousChildren.GroupBy(c => c.GetContentType())\n                .OrderBy(g => g.Key)\n                .Select(g => childFactory(query.Parent, Map.GetOrCreateDefinition(g.Key).Title, \"virtual-grouping/\" + g.Key.FullName, () => g));\n        }\n        private IEnumerable<ContentItem> ChildrenByAlphabeticalIndex(IEnumerable<ContentItem> previousChildren, Query query, GroupFactoryDelegate childFactory)\n        {\n            if (AllowDirectQuery)\n            {\n                var letters = query.Parent.Children.Select(query.AsParameters(), \"Title\")\n                    .Select(r => (string)r[\"Title\"])\n                    .Select(t => t.FirstOrDefault())\n                    .Distinct()\n                    .OrderBy(l => l);\n                return letters.Select(l => childFactory(query.Parent, l.ToString().ToUpper(), \"virtual-grouping/\" + l, () => query.Parent.Children.Find(query.AsParameters() & Parameter.Like(\"Title\", l + \"%\"))));\n            }\n\t\t\treturn GroupByWithMinSize(previousChildren, c => string.IsNullOrEmpty(c.Title) ? '-' : c.Title.ToUpper().FirstOrDefault())\n                .Select(g => childFactory(query.Parent, g.Key.ToString(), \"virtual-grouping/\" + g.Key, () => g));\n        }\n        private IEnumerable<ContentItem> ChildrenByYearMonthDay(IEnumerable<ContentItem> previousChildren, Query query, GroupFactoryDelegate childFactory)\n        {\n            if (AllowDirectQuery)\n            {\n                var dates = query.Parent.Children.Select(query.AsParameters(), \"Published\")\n                    .Select(r => (DateTime?)r[\"Published\"])\n                    .Select(p => p.HasValue ? (DateTime?)p.Value.Date : null)\n                    .Distinct()\n                    .OrderByDescending(d => d);\n                return dates.Select(ym => childFactory(query.Parent, ym.HasValue ? ym.Value.ToShortDateString() : \"-\", \"virtual-grouping/\" + (ym.HasValue ? ym.Value.ToString(\"yyyy-MM-dd\") : \"-\"), () => query.Parent.Children.Find(query.AsParameters() & (ym.HasValue ? (Parameter.GreaterOrEqual(\"Published\", ym.Value) & Parameter.LessThan(\"Published\", ym.Value.AddDays(1))) : Parameter.IsNull(\"Published\")))));\n            }\n\t\t\treturn GroupByWithMinSize(previousChildren, c => c.Published.HasValue ? c.Published.Value.Date.ToShortDateString() : \"-\")\n                .Select(g => childFactory(query.Parent, g.Key, \"virtual-grouping/\" + g.Key, () => g));\n        }\n        private IEnumerable<ContentItem> ChildrenByYearMonth(IEnumerable<ContentItem> previousChildren, Query query, GroupFactoryDelegate childFactory)\n        {\n            if (AllowDirectQuery)\n            {\n                var yearsMonths = query.Parent.Children.Select(query.AsParameters(), \"Published\")\n                    .Select(r => (DateTime?)r[\"Published\"])\n                    .Select(p => p.HasValue ? (DateTime?)new DateTime(p.Value.Year, p.Value.Month, 1) : null)\n                    .Distinct()\n                    .OrderByDescending(d => d);\n                return yearsMonths.Select(ym => childFactory(query.Parent, ToString(ym), \"virtual-grouping/\" + ToString(ym), () => query.Parent.Children.Find(query.AsParameters() & (ym.HasValue ? (Parameter.GreaterOrEqual(\"Published\", ym.Value) & Parameter.LessThan(\"Published\", ym.Value.AddMonths(1))) : Parameter.IsNull(\"Published\")))));\n            }\n\t\t\treturn GroupByWithMinSize(previousChildren, c => c.Published.HasValue ? c.Published.Value.Date.ToString(\"yyyy-MM\") : \"-\")\n                .Select(g => childFactory(query.Parent, g.Key, \"virtual-grouping/\" + g.Key, () => g));\n        }\n        private static string ToString(DateTime? ym)\n        {\n            return ym.HasValue ? ym.Value.ToString(\"yyyy-MM\") : \"-\";\n        }\n        private IEnumerable<ContentItem> ChildrenByYear(IEnumerable<ContentItem> previousChildren, Query query, GroupFactoryDelegate childFactory)\n        {\n            if (AllowDirectQuery)\n            {\n                var years = query.Parent.Children\n                    .Select(query.AsParameters(), \"Published\")\n                    .Select(r => (DateTime?)r[\"Published\"])\n                    .Select(p => p.HasValue ? p.Value.Year.ToString() : \"-\")\n                    .Distinct()\n                    .OrderByDescending(d => d);\n                return years.Select(y => childFactory(query.Parent, y, \"virtual-grouping/\" + y, () => query.Parent.Children.Find(query.AsParameters() & (y != \"-\" ? (Parameter.GreaterOrEqual(\"Published\", new DateTime(int.Parse(y), 1, 1)) & Parameter.LessThan(\"Published\", new DateTime(int.Parse(y) + 1, 1, 1))) : Parameter.IsNull(\"Published\")))));\n            }\n\t\t\treturn GroupByWithMinSize(previousChildren, c => c.Published.HasValue ? c.Published.Value.Date.ToString(\"yyyy\") : \"-\")\n                .Select(g => childFactory(query.Parent, g.Key, \"virtual-grouping/\" + g.Key, () => g));\n        }\n        private IEnumerable<ContentItem> ChildrenUntilTresholdThenPages(IEnumerable<ContentItem> previousChildren, Query query, GroupFactoryDelegate childFactory)\n        {\n            if (AllowDirectQuery)\n            {\n                int dbCount = query.Parent.Children.FindCount(query.AsParameters());\n                if (dbCount < StartPagingTreshold)\n                    return previousChildren;\n            \n                var unpaged = query.Parent.Children.Find(query.AsParameters().Take(StartPagingTreshold));\n                return unpaged.Concat(\n                    Enumerable.Range(0, (dbCount - StartPagingTreshold + PageSize - 1) / PageSize)\n                    .Select(i => childFactory(query.Parent, (StartPagingTreshold + i * PageSize + 1) + \"-\" + (StartPagingTreshold + i * PageSize + PageSize), \"virtual-grouping/\" + i, () => query.Parent.Children.Find(query.AsParameters().Skip(StartPagingTreshold + i * PageSize).Take(PageSize)))));\n            }\n            var prevChildren = previousChildren as ContentItem[] ?? previousChildren.ToArray();\n", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "length": 781, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "bf095bb46d18ac9f79888148e8d0f8bdcbbb0badb419e01b"}
{"input": "", "context": "#!/usr/bin/env python\nimport socket\nimport struct\nimport threading\nimport time\nimport dns\nfrom dnsdisttests import DNSDistTest\ntry:\n  range = xrange\nexcept NameError:\n  pass\nclass TestTCPShort(DNSDistTest):\n    # this test suite uses a different responder port\n    # because, contrary to the other ones, its\n    # responders allow trailing data and multiple responses,\n    # and we don't want to mix things up.\n    _testServerPort = 5361\n    _serverKey = 'server.key'\n    _serverCert = 'server.chain'\n    _serverName = 'tls.tests.dnsdist.org'\n    _caCert = 'ca.pem'\n    _tlsServerPort = 8453\n    _tcpSendTimeout = 60\n    _config_template = \"\"\"\n    newServer{address=\"127.0.0.1:%s\"}\n    addTLSLocal(\"127.0.0.1:%s\", \"%s\", \"%s\")\n    setTCPSendTimeout(%d)\n    \"\"\"\n    _config_params = ['_testServerPort', '_tlsServerPort', '_serverCert', '_serverKey', '_tcpSendTimeout']\n    @classmethod\n    def startResponders(cls):\n        print(\"Launching responders..\")\n        cls._UDPResponder = threading.Thread(name='UDP Responder', target=cls.UDPResponder, args=[cls._testServerPort, cls._toResponderQueue, cls._fromResponderQueue, True])\n        cls._UDPResponder.setDaemon(True)\n        cls._UDPResponder.start()\n        cls._TCPResponder = threading.Thread(name='TCP Responder', target=cls.TCPResponder, args=[cls._testServerPort, cls._toResponderQueue, cls._fromResponderQueue, True, True])\n        cls._TCPResponder.setDaemon(True)\n        cls._TCPResponder.start()\n    def testTCPShortRead(self):\n        \"\"\"\n        TCP: Short read from client\n        \"\"\"\n        name = 'short-read.tcp-short.tests.powerdns.com.'\n        query = dns.message.make_query(name, 'A', 'IN')\n        expectedResponse = dns.message.make_response(query)\n        rrset = dns.rrset.from_text(name,\n                                    3600,\n                                    dns.rdataclass.IN,\n                                    dns.rdatatype.A,\n                                    '192.0.2.1')\n        expectedResponse.answer.append(rrset)\n        conn = self.openTCPConnection()\n        wire = query.to_wire()\n        # announce 7680 bytes (more than 4096, less than 8192 - the 512 bytes dnsdist is going to add)\n        announcedSize = 7680\n        paddingSize = announcedSize - len(wire)\n        wire = wire + (b'A' * (paddingSize - 1))\n        self._toResponderQueue.put(expectedResponse, True, 2.0)\n        sizeBytes = struct.pack(\"!H\", announcedSize)\n        conn.send(sizeBytes[:1])\n        time.sleep(1)\n        conn.send(sizeBytes[1:])\n        # send announcedSize bytes minus 1 so we get a second read\n        conn.send(wire)\n        time.sleep(1)\n        # send the remaining byte\n        conn.send(b'A')\n        (receivedQuery, receivedResponse) = self.recvTCPResponseOverConnection(conn, True)\n        conn.close()\n        self.assertTrue(receivedQuery)\n        self.assertTrue(receivedResponse)\n        receivedQuery.id = query.id\n        self.assertEqual(query, receivedQuery)\n        self.assertEqual(receivedResponse, expectedResponse)\n    def testTCPTLSShortRead(self):\n        \"\"\"\n        TCP/TLS: Short read from client\n        \"\"\"\n        name = 'short-read-tls.tcp-short.tests.powerdns.com.'\n        query = dns.message.make_query(name, 'A', 'IN')\n        expectedResponse = dns.message.make_response(query)\n        rrset = dns.rrset.from_text(name,\n                                    3600,\n                                    dns.rdataclass.IN,\n                                    dns.rdatatype.A,\n                                    '192.0.2.1')\n        expectedResponse.answer.append(rrset)\n        conn = self.openTLSConnection(self._tlsServerPort, self._serverName, self._caCert)\n        wire = query.to_wire()\n        # announce 7680 bytes (more than 4096, less than 8192 - the 512 bytes dnsdist is going to add)\n        announcedSize = 7680\n        paddingSize = announcedSize - len(wire)\n        wire = wire + (b'A' * (paddingSize - 1))\n        self._toResponderQueue.put(expectedResponse, True, 2.0)\n        sizeBytes = struct.pack(\"!H\", announcedSize)\n        conn.send(sizeBytes[:1])\n        time.sleep(1)\n        conn.send(sizeBytes[1:])\n        # send announcedSize bytes minus 1 so we get a second read\n        conn.send(wire)\n        time.sleep(1)\n        # send the remaining byte\n        conn.send(b'A')\n        (receivedQuery, receivedResponse) = self.recvTCPResponseOverConnection(conn, True)\n        conn.close()\n        self.assertTrue(receivedQuery)\n        self.assertTrue(receivedResponse)\n        receivedQuery.id = query.id\n        self.assertEqual(query, receivedQuery)\n        self.assertEqual(receivedResponse, expectedResponse)\n    def testTCPShortWrite(self):\n        \"\"\"\n        TCP: Short write to client\n        \"\"\"\n        name = 'short-write.tcp-short.tests.powerdns.com.'\n        query = dns.message.make_query(name, 'AXFR', 'IN')\n        # we prepare a large AXFR answer\n        # SOA + 200 dns messages of one huge TXT RRset each + SOA\n        responses = []\n        soa = dns.rrset.from_text(name,\n                                  60,\n                                  dns.rdataclass.IN,\n                                  dns.rdatatype.SOA,\n                                  'ns.' + name + ' hostmaster.' + name + ' 1 3600 3600 3600 60')\n        soaResponse = dns.message.make_response(query)\n        soaResponse.use_edns(edns=False)\n        soaResponse.answer.append(soa)\n        responses.append(soaResponse)\n        response = dns.message.make_response(query)\n        response.use_edns(edns=False)\n        content = \"\"\n        for i in range(200):\n            if len(content) > 0:\n                content = content + ', '\n            content = content + (str(i)*50)\n        rrset = dns.rrset.from_text(name,\n                                    3600,\n                                    dns.rdataclass.IN,\n                                    dns.rdatatype.TXT,\n                                    content)\n        response.answer.append(rrset)\n        for _ in range(200):\n            responses.append(response)\n        responses.append(soaResponse)\n        conn = self.openTCPConnection()\n        for response in responses:\n            self._toResponderQueue.put(response, True, 2.0)\n        self.sendTCPQueryOverConnection(conn, query)\n        # we sleep for one second, making sure that dnsdist\n        # will fill its TCP window and buffers, which will result\n        # in some short writes\n        time.sleep(1)\n        # we then read the messages\n        receivedResponses = []\n        while True:\n            datalen = conn.recv(2)\n            if not datalen:\n                break\n            (datalen,) = struct.unpack(\"!H\", datalen)\n            data = b''\n            remaining = datalen\n            got = conn.recv(remaining)\n            while got:\n                data = data + got\n                if len(data) == datalen:\n                    break\n                remaining = remaining - len(got)\n                if remaining <= 0:\n                    break\n                got = conn.recv(remaining)\n            if data and len(data) == datalen:\n                receivedResponse = dns.message.from_wire(data)\n                receivedResponses.append(receivedResponse)\n        receivedQuery = None\n        if not self._fromResponderQueue.empty():\n            receivedQuery = self._fromResponderQueue.get(True, 2.0)\n        conn.close()\n        # and check that everything is good\n        self.assertTrue(receivedQuery)\n        receivedQuery.id = query.id\n        self.assertEqual(query, receivedQuery)\n        self.assertEqual(receivedResponses, responses)\n    def testTCPTLSShortWrite(self):\n        \"\"\"\n        TCP/TLS: Short write to client\n        \"\"\"\n        # same as testTCPShortWrite but over TLS this time\n        name = 'short-write-tls.tcp-short.tests.powerdns.com.'\n        query = dns.message.make_query(name, 'AXFR', 'IN')\n        responses = []\n        soa = dns.rrset.from_text(name,\n                                  60,\n                                  dns.rdataclass.IN,\n                                  dns.rdatatype.SOA,\n                                  'ns.' + name + ' hostmaster.' + name + ' 1 3600 3600 3600 60')\n", "answers": ["        soaResponse = dns.message.make_response(query)"], "length": 648, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "aab6e3b1dcab2261ae6d783a39b356522fa6e32c6b4b0579"}
{"input": "", "context": "/**\n * Copyright (C) 2017 drrb\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any later\n * version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n * details.\n *\n * You should have received a copy of the GNU General Public License along with\n * this program. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.github.drrb.rust.netbeans.parsing;\nimport com.github.drrb.rust.netbeans.parsing.javacc.RustParserConstants;\nimport org.netbeans.api.lexer.Language;\nimport org.netbeans.api.lexer.TokenId;\npublic enum RustTokenId implements TokenId {\n    EOF(RustParserConstants.EOF, TokenCategory.WHITESPACE),\n    WHITESPACE(RustParserConstants.WHITESPACE, TokenCategory.WHITESPACE),\n    DOC_COMMENT(RustParserConstants.DOC_COMMENT, TokenCategory.COMMENT),\n    INNER_DOC_COMMENT(RustParserConstants.INNER_DOC_COMMENT, TokenCategory.COMMENT),\n    LINE_COMMENT(RustParserConstants.LINE_COMMENT, TokenCategory.COMMENT),\n    BLOCK_COMMENT(RustParserConstants.BLOCK_COMMENT, TokenCategory.COMMENT),\n    DOC_BLOCK_COMMENT(RustParserConstants.DOC_BLOCK_COMMENT, TokenCategory.COMMENT),\n    INNER_DOC_BLOCK_COMMENT(RustParserConstants.INNER_DOC_BLOCK_COMMENT, TokenCategory.COMMENT),\n    NON_NULL(RustParserConstants.NON_NULL, TokenCategory.IDENTIFIER),\n    NON_SINGLE_QUOTE(RustParserConstants.NON_SINGLE_QUOTE, TokenCategory.IDENTIFIER),\n    NON_DOUBLE_QUOTE(RustParserConstants.NON_DOUBLE_QUOTE, TokenCategory.IDENTIFIER),\n    NON_EOL(RustParserConstants.NON_EOL, TokenCategory.IDENTIFIER),\n    ASCII(RustParserConstants.ASCII, TokenCategory.IDENTIFIER),\n    ASCII_NON_EOL(RustParserConstants.ASCII_NON_EOL, TokenCategory.IDENTIFIER),\n    ASCII_NON_SINGLE_QUOTE(RustParserConstants.ASCII_NON_SINGLE_QUOTE, TokenCategory.IDENTIFIER),\n    ASCII_NON_DOUBLE_QUOTE(RustParserConstants.ASCII_NON_DOUBLE_QUOTE, TokenCategory.IDENTIFIER),\n    STRING_LITERAL(RustParserConstants.STRING_LITERAL, TokenCategory.STRING),\n    RAW_STRING_LITERAL(RustParserConstants.RAW_STRING_LITERAL, TokenCategory.STRING),\n    CHAR_LITERAL(RustParserConstants.CHAR_LITERAL, TokenCategory.CHARACTER),\n    NUMBER_LITERAL(RustParserConstants.NUMBER_LITERAL, TokenCategory.NUMBER),\n    BYTE_LITERAL(RustParserConstants.BYTE_LITERAL, TokenCategory.CHARACTER),\n    BYTE_STRING_LITERAL(RustParserConstants.BYTE_STRING_LITERAL, TokenCategory.STRING),\n    RAW_BYTE_STRING_LITERAL(RustParserConstants.RAW_BYTE_STRING_LITERAL, TokenCategory.STRING),\n    STRING_BODY(RustParserConstants.STRING_BODY, TokenCategory.STRING),\n    CHAR_BODY(RustParserConstants.CHAR_BODY, TokenCategory.CHARACTER),\n    BYTE_BODY(RustParserConstants.BYTE_BODY, TokenCategory.IDENTIFIER),\n    COMMON_ESCAPE(RustParserConstants.COMMON_ESCAPE, TokenCategory.IDENTIFIER),\n    UNICODE_ESCAPE(RustParserConstants.UNICODE_ESCAPE, TokenCategory.IDENTIFIER),\n    FLOAT_SUFFIX(RustParserConstants.FLOAT_SUFFIX, TokenCategory.NUMBER),\n    EXPONENT(RustParserConstants.EXPONENT, TokenCategory.NUMBER),\n    DEC_LIT(RustParserConstants.DEC_LIT, TokenCategory.NUMBER),\n    HEX_DIGIT(RustParserConstants.HEX_DIGIT, TokenCategory.NUMBER),\n    OCT_DIGIT(RustParserConstants.OCT_DIGIT, TokenCategory.NUMBER),\n    DEC_DIGIT(RustParserConstants.DEC_DIGIT, TokenCategory.NUMBER),\n    NONZERO_DEC(RustParserConstants.NONZERO_DEC, TokenCategory.NUMBER),\n    RAW_STRING_LITERAL_3(RustParserConstants.RAW_STRING_LITERAL_3, TokenCategory.STRING),\n    RAW_STRING_LITERAL_2(RustParserConstants.RAW_STRING_LITERAL_2, TokenCategory.STRING),\n    RAW_STRING_LITERAL_1(RustParserConstants.RAW_STRING_LITERAL_1, TokenCategory.STRING),\n    RAW_STRING_LITERAL_0(RustParserConstants.RAW_STRING_LITERAL_0, TokenCategory.STRING),\n    RAW_BYTE_STRING_LITERAL_3(RustParserConstants.RAW_BYTE_STRING_LITERAL_3, TokenCategory.STRING),\n    RAW_BYTE_STRING_LITERAL_2(RustParserConstants.RAW_BYTE_STRING_LITERAL_2, TokenCategory.STRING),\n    RAW_BYTE_STRING_LITERAL_1(RustParserConstants.RAW_BYTE_STRING_LITERAL_1, TokenCategory.STRING),\n    RAW_BYTE_STRING_LITERAL_0(RustParserConstants.RAW_BYTE_STRING_LITERAL_0, TokenCategory.STRING),\n    DOUBLE_COLON(RustParserConstants.DOUBLE_COLON, TokenCategory.SEPARATOR),\n    ARROW(RustParserConstants.ARROW, TokenCategory.SEPARATOR),\n    DOUBLE_ARROW(RustParserConstants.DOUBLE_ARROW, TokenCategory.OPERATOR),\n    HASH(RustParserConstants.HASH, TokenCategory.SEPARATOR),\n    LEFT_BRACKET(RustParserConstants.LEFT_BRACKET, TokenCategory.SEPARATOR),\n    RIGHT_BRACKET(RustParserConstants.RIGHT_BRACKET, TokenCategory.SEPARATOR),\n    LEFT_PAREN(RustParserConstants.LEFT_PAREN, TokenCategory.SEPARATOR),\n    RIGHT_PAREN(RustParserConstants.RIGHT_PAREN, TokenCategory.SEPARATOR),\n    LEFT_BRACE(RustParserConstants.LEFT_BRACE, TokenCategory.SEPARATOR),\n    RIGHT_BRACE(RustParserConstants.RIGHT_BRACE, TokenCategory.SEPARATOR),\n    COMMA(RustParserConstants.COMMA, TokenCategory.SEPARATOR),\n    COLON(RustParserConstants.COLON, TokenCategory.SEPARATOR),\n    PLUS(RustParserConstants.PLUS, TokenCategory.OPERATOR),\n    DASH(RustParserConstants.DASH, TokenCategory.OPERATOR),\n    STAR(RustParserConstants.STAR, TokenCategory.OPERATOR),\n    FORWARD_SLASH(RustParserConstants.FORWARD_SLASH, TokenCategory.OPERATOR),\n    PERCENT(RustParserConstants.PERCENT, TokenCategory.OPERATOR),\n    AMPERSAND(RustParserConstants.AMPERSAND, TokenCategory.OPERATOR),\n    PIPE(RustParserConstants.PIPE, TokenCategory.OPERATOR),\n    HAT(RustParserConstants.HAT, TokenCategory.OPERATOR),\n    DOUBLE_AMPERSAND(RustParserConstants.DOUBLE_AMPERSAND, TokenCategory.OPERATOR),\n    DOUBLE_PIPE(RustParserConstants.DOUBLE_PIPE, TokenCategory.OPERATOR),\n    LEFT_ANGLE_BRACKET(RustParserConstants.LEFT_ANGLE_BRACKET, TokenCategory.SEPARATOR),\n    RIGHT_ANGLE_BRACKET(RustParserConstants.RIGHT_ANGLE_BRACKET, TokenCategory.SEPARATOR),\n    SHIFT_LEFT(RustParserConstants.SHIFT_LEFT, TokenCategory.OPERATOR),\n    SHIFT_RIGHT(RustParserConstants.SHIFT_RIGHT, TokenCategory.OPERATOR),\n    LESS_THAN_EQUAL(RustParserConstants.LESS_THAN_EQUAL, TokenCategory.OPERATOR),\n    GREATER_THAN_EQUAL(RustParserConstants.GREATER_THAN_EQUAL, TokenCategory.OPERATOR),\n    SEMICOLON(RustParserConstants.SEMICOLON, TokenCategory.SEPARATOR),\n    DOUBLE_EQUALS(RustParserConstants.DOUBLE_EQUALS, TokenCategory.OPERATOR),\n    NOT_EQUAL(RustParserConstants.NOT_EQUAL, TokenCategory.OPERATOR),\n    PLUS_EQUALS(RustParserConstants.PLUS_EQUALS, TokenCategory.OPERATOR),\n    MINUS_EQUALS(RustParserConstants.MINUS_EQUALS, TokenCategory.OPERATOR),\n    TIMES_EQUALS(RustParserConstants.TIMES_EQUALS, TokenCategory.OPERATOR),\n    DIVIDE_EQUALS(RustParserConstants.DIVIDE_EQUALS, TokenCategory.OPERATOR),\n    MOD_EQUALS(RustParserConstants.MOD_EQUALS, TokenCategory.OPERATOR),\n    AND_EQUALS(RustParserConstants.AND_EQUALS, TokenCategory.OPERATOR),\n    OR_EQUALS(RustParserConstants.OR_EQUALS, TokenCategory.OPERATOR),\n    XOR_EQUALS(RustParserConstants.XOR_EQUALS, TokenCategory.OPERATOR),\n    SHIFT_LEFT_EQUALS(RustParserConstants.SHIFT_LEFT_EQUALS, TokenCategory.OPERATOR),\n    SHIFT_RIGHT_EQUALS(RustParserConstants.SHIFT_RIGHT_EQUALS, TokenCategory.OPERATOR),\n    BANG(RustParserConstants.BANG, TokenCategory.OPERATOR),\n    EQUALS(RustParserConstants.EQUALS, TokenCategory.OPERATOR),\n    DOT(RustParserConstants.DOT, TokenCategory.SEPARATOR),\n    DOUBLE_DOT(RustParserConstants.DOUBLE_DOT, TokenCategory.IDENTIFIER),\n    DOLLAR(RustParserConstants.DOLLAR, TokenCategory.SEPARATOR),\n    HASH_ROCKET(RustParserConstants.HASH_ROCKET, TokenCategory.SEPARATOR),\n    ABSTRACT(RustParserConstants.ABSTRACT, TokenCategory.IDENTIFIER),\n    ALIGNOF(RustParserConstants.ALIGNOF, TokenCategory.IDENTIFIER),\n    AS(RustParserConstants.AS, TokenCategory.KEYWORD),\n    BECOME(RustParserConstants.BECOME, TokenCategory.IDENTIFIER),\n    BOX(RustParserConstants.BOX, TokenCategory.IDENTIFIER),\n    BREAK(RustParserConstants.BREAK, TokenCategory.KEYWORD),\n    CONST(RustParserConstants.CONST, TokenCategory.KEYWORD),\n    CONTINUE(RustParserConstants.CONTINUE, TokenCategory.KEYWORD),\n    CRATE(RustParserConstants.CRATE, TokenCategory.KEYWORD),\n    DO(RustParserConstants.DO, TokenCategory.KEYWORD),\n    ELSE(RustParserConstants.ELSE, TokenCategory.KEYWORD),\n    ENUM(RustParserConstants.ENUM, TokenCategory.KEYWORD),\n    EXTERN(RustParserConstants.EXTERN, TokenCategory.KEYWORD),\n    FALSE(RustParserConstants.FALSE, TokenCategory.KEYWORD),\n    FINAL(RustParserConstants.FINAL, TokenCategory.KEYWORD),\n    FN(RustParserConstants.FN, TokenCategory.KEYWORD),\n    FOR(RustParserConstants.FOR, TokenCategory.KEYWORD),\n    IF(RustParserConstants.IF, TokenCategory.KEYWORD),\n    IMPL(RustParserConstants.IMPL, TokenCategory.KEYWORD),\n    IN(RustParserConstants.IN, TokenCategory.KEYWORD),\n    LET(RustParserConstants.LET, TokenCategory.KEYWORD),\n    LOOP(RustParserConstants.LOOP, TokenCategory.KEYWORD),\n    MACRO(RustParserConstants.MACRO, TokenCategory.KEYWORD),\n    MACRO_RULES(RustParserConstants.MACRO_RULES, TokenCategory.IDENTIFIER),\n    MATCH(RustParserConstants.MATCH, TokenCategory.KEYWORD),\n    MOD(RustParserConstants.MOD, TokenCategory.IDENTIFIER),\n    MOVE(RustParserConstants.MOVE, TokenCategory.IDENTIFIER),\n    MUT(RustParserConstants.MUT, TokenCategory.KEYWORD),\n    OFFSETOF(RustParserConstants.OFFSETOF, TokenCategory.IDENTIFIER),\n    OVERRIDE(RustParserConstants.OVERRIDE, TokenCategory.IDENTIFIER),\n    PRIV(RustParserConstants.PRIV, TokenCategory.KEYWORD),\n    PROC(RustParserConstants.PROC, TokenCategory.IDENTIFIER),\n    PUB(RustParserConstants.PUB, TokenCategory.KEYWORD),\n    PURE(RustParserConstants.PURE, TokenCategory.IDENTIFIER),\n    REF(RustParserConstants.REF, TokenCategory.IDENTIFIER),\n    RETURN(RustParserConstants.RETURN, TokenCategory.KEYWORD),\n    BIG_SELF(RustParserConstants.BIG_SELF, TokenCategory.IDENTIFIER),\n    SELF(RustParserConstants.SELF, TokenCategory.KEYWORD),\n    SIZEOF(RustParserConstants.SIZEOF, TokenCategory.KEYWORD),\n    STATIC(RustParserConstants.STATIC, TokenCategory.KEYWORD),\n    STRUCT(RustParserConstants.STRUCT, TokenCategory.KEYWORD),\n    SUPER(RustParserConstants.SUPER, TokenCategory.IDENTIFIER),\n    TRAIT(RustParserConstants.TRAIT, TokenCategory.KEYWORD),\n    TRUE(RustParserConstants.TRUE, TokenCategory.KEYWORD),\n    TYPE(RustParserConstants.TYPE, TokenCategory.KEYWORD),\n    TYPEOF(RustParserConstants.TYPEOF, TokenCategory.KEYWORD),\n    UNSAFE(RustParserConstants.UNSAFE, TokenCategory.KEYWORD),\n    UNSIZED(RustParserConstants.UNSIZED, TokenCategory.KEYWORD),\n    USE(RustParserConstants.USE, TokenCategory.KEYWORD),\n    VIRTUAL(RustParserConstants.VIRTUAL, TokenCategory.KEYWORD),\n    WHERE(RustParserConstants.WHERE, TokenCategory.KEYWORD),\n    WHILE(RustParserConstants.WHILE, TokenCategory.KEYWORD),\n    YIELD(RustParserConstants.YIELD, TokenCategory.KEYWORD),\n    IDENTIFIER(RustParserConstants.IDENTIFIER, TokenCategory.IDENTIFIER),\n    LABEL(RustParserConstants.LABEL, TokenCategory.IDENTIFIER),\n    XID_start(RustParserConstants.XID_start, TokenCategory.IDENTIFIER),\n    XID_continue(RustParserConstants.XID_continue, TokenCategory.IDENTIFIER),\n    GARBAGE(RustParserConstants.GARBAGE, TokenCategory.IDENTIFIER);\n    public static final RustLanguageHierarchy LANGUAGE_HIERARCHY = new RustLanguageHierarchy();\n    private static final RustTokenId[] LOOKUP;\n    static {\n        int highestValue = 0;\n        for (RustTokenId kind : values()) {\n            highestValue = highestValue > kind.javaccKind ? highestValue : kind.javaccKind;\n        }\n        LOOKUP = new RustTokenId[highestValue + 1];\n        for (RustTokenId kind : values()) {\n            LOOKUP[kind.javaccKind] = kind;\n        }\n    }\n    public static Language<RustTokenId> language() {\n        return LANGUAGE_HIERARCHY.language();\n    }\n    private final int javaccKind;\n    private final TokenCategory category;\n    RustTokenId(int javaccKind, TokenCategory category) {\n        this.javaccKind = javaccKind;\n        this.category = category;\n    }\n    public static RustTokenId get(int javaccKind) {\n        RustTokenId kind = LOOKUP[javaccKind];\n", "answers": ["        if (kind == null) {"], "length": 524, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "0d3afb189bb00a990623e240ef8ba5471967cad0f74be49a"}
{"input": "", "context": "using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing SenseNet.ContentRepository.Storage;\nusing SenseNet.ContentRepository.Fields;\nnamespace SenseNet.Portal.UI.Controls\n{\n\t[ToolboxData(\"<{0}:WholeNumber ID=\\\"WholeNumber1\\\" runat=server></{0}:WholeNumber>\")]\n\tpublic class WholeNumber : FieldControl, INamingContainer, ITemplateFieldControl\n\t{\n        protected string PercentageControlID = \"LabelForPercentage\";\n        // Fields ///////////////////////////////////////////////////////////////////////\n\t\tprivate TextBox _inputTextBox;\n        // Constructor //////////////////////////////////////////////////////////////////\n\t\tpublic WholeNumber()\n\t\t{\n            InnerControlID = \"InnerWholeNumber\";\n\t\t\t_inputTextBox = new TextBox { ID = InnerControlID };\n\t\t}\n        // Methods //////////////////////////////////////////////////////////////////////\n        public override void SetData(object data)\n        {\n            if (data == null)\n            {\n                _inputTextBox.Text = string.Empty;\n            }\n            else\n            {\n                _inputTextBox.Text = Convert.ToInt32(data) == int.MinValue ? string.Empty : data.ToString();\n            }\n            #region template\n            if ((!UseBrowseTemplate && !UseEditTemplate) && !UseInlineEditTemplate)\n                return;\n            SetTitleAndDescription();\n            var innerControl = GetInnerControl() as TextBox;\n            var perc = GetLabelForPercentageControl();\n            \n            if (innerControl != null)\n                innerControl.Text = Convert.ToString(_inputTextBox.Text);\n            if (perc != null)\n            {\n                perc.Text = GetPercentageSign();\n                perc.Visible = !string.IsNullOrEmpty(perc.Text);\n            }\n            #endregion\n        }\n        public override object GetData()\n\t\t{\n            var innerControl = GetInnerControl() as TextBox;\n            if ((!UseBrowseTemplate && !UseEditTemplate && !UseInlineEditTemplate) || innerControl == null)\n            {\n                #region original\n                if (_inputTextBox.Text.Length == 0)\n                    return null;\n                return Convert.ToInt32(_inputTextBox.Text);\n                #endregion\n            }\n            if (innerControl.Text.Length == 0) \n                return null;\n            \n            return Convert.ToInt32(innerControl.Text);\n\t\t}\n        // Events ///////////////////////////////////////////////////////////////////////\n\t\tprotected override void OnInit(EventArgs e)\n\t\t{\n            base.OnInit(e);\n\t\t    #region template\n\t\t    if (UseBrowseTemplate || UseEditTemplate || UseInlineEditTemplate)\n\t\t        return;\n\t\t    #endregion\n\t\t    #region original flow\n\t\t    _inputTextBox.CssClass = String.IsNullOrEmpty(this.CssClass) ? \"sn-ctrl sn-ctrl-number\" : this.CssClass;\n\t\t    Controls.Add(_inputTextBox);\n\t\t    //_inputTextBox.ID = String.Concat(this.ID, \"_\", this.ContentHandler.Id.ToString());\n\t\t    #endregion\n\t\t}\n\t\tprotected override void RenderContents(HtmlTextWriter writer)\n\t\t{\n            #region template\n            if (UseBrowseTemplate)\n            {\n                base.RenderContents(writer);\n                return;\n            }\n            if (UseEditTemplate)\n            {\n                ManipulateTemplateControls();\n                base.RenderContents(writer);\n                return;\n            }\n            if (UseInlineEditTemplate)\n            {\n                ManipulateTemplateControls();\n                base.RenderContents(writer);\n                return;\n            }\n            #endregion\n\t\t\tif (this.RenderMode == FieldControlRenderMode.Browse)\n\t\t\t\tRenderSimple(writer);\n\t\t\telse\n\t\t\t\tRenderEditor(writer);\n\t\t}\n\t\tprivate void RenderSimple(HtmlTextWriter writer)\n\t\t{\n\t\t\twriter.Write(_inputTextBox.Text);\n            RenderPercentage(writer);\n\t\t}\n\t\tprivate void RenderEditor(HtmlTextWriter writer)\n\t\t{\n\t\t\tif (this.RenderMode == FieldControlRenderMode.InlineEdit)\n            {\n                var titleText = String.Concat(this.Field.DisplayName, \" \", this.Field.Description);\n                _inputTextBox.Attributes.Add(\"Title\", titleText);\n            }\n\t\t\tif (this.Field.ReadOnly)\n\t\t\t{\n\t\t\t\twriter.Write(_inputTextBox.Text);\n\t\t\t}\n\t\t\telse if (this.ReadOnly)\n\t\t\t{\n\t\t\t\t_inputTextBox.Enabled = !this.ReadOnly;\n\t\t\t\t_inputTextBox.EnableViewState = false;\n\t\t\t\t_inputTextBox.RenderControl(writer);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// render read/write control\n\t\t\t\t_inputTextBox.RenderControl(writer);\n\t\t\t}\n\t\t    RenderPercentage(writer);\n\t\t}\n        private void ManipulateTemplateControls()\n        {\n            //\n            //  This method is needed to ensure the common fieldcontrol logic.\n            //\n            var innerWholeNumber = GetInnerControl() as TextBox;\n            var lt = GetLabelForTitleControl() as Label;\n            var ld = GetLabelForDescription() as Label;\n            if (innerWholeNumber == null) return;\n            if (Field.ReadOnly)\n            {\n                var p = innerWholeNumber.Parent;\n                if (p != null)\n                {\n                    p.Controls.Remove(innerWholeNumber);\n                    if (lt != null) lt.AssociatedControlID = string.Empty;\n                    if (ld != null) ld.AssociatedControlID = string.Empty;\n                    p.Controls.Add(new LiteralControl(innerWholeNumber.Text));\n                }\n            }\n            else if (ReadOnly)\n            {\n                innerWholeNumber.Enabled = !ReadOnly;\n                innerWholeNumber.EnableViewState = false;\n            }\n            if (RenderMode != FieldControlRenderMode.InlineEdit)\n                return;\n            innerWholeNumber.Attributes.Add(\"Title\", String.Concat(Field.DisplayName, \" \", Field.Description));\n   \n        }\n        private void RenderPercentage(HtmlTextWriter writer)\n        {\n            writer.Write(GetPercentageSign());\n        }\n        private string GetPercentageSign()\n        {\n            var fs = this.Field.FieldSetting as IntegerFieldSetting;\n            if (fs == null)\n                return string.Empty;\n            if (fs.ShowAsPercentage.HasValue && fs.ShowAsPercentage.Value)\n                return \"%\";\n            return string.Empty;\n        }\n        #region ITemplateFieldControl Members\n        public Control GetInnerControl()\n        {\n            return this.FindControlRecursive(InnerControlID) as TextBox;\n        }\n        public Control GetLabelForDescription()\n        {\n", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "length": 450, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "d2b99a092efbc978ff9dd59d6420db92fd3f7d95a5769348"}
{"input": "", "context": "# Copyright (c) 2006,2007 Mitch Garnaat http://garnaat.org/\n#\n# Permission is hereby granted, free of charge, to any person obtaining a\n# copy of this software and associated documentation files (the\n# \"Software\"), to deal in the Software without restriction, including\n# without limitation the rights to use, copy, modify, merge, publish, dis-\n# tribute, sublicense, and/or sell copies of the Software, and to permit\n# persons to whom the Software is furnished to do so, subject to the fol-\n# lowing conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-\n# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\n# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, \n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n# IN THE SOFTWARE.\nimport xml.sax\nimport urllib, base64\nimport time\nimport boto.utils\nimport types\nfrom boto.connection import AWSAuthConnection\nfrom boto import handler\nfrom boto.s3.bucket import Bucket\nfrom boto.s3.key import Key\nfrom boto.resultset import ResultSet\nfrom boto.exception import S3ResponseError, S3CreateError, BotoClientError\ndef assert_case_insensitive(f):\n    def wrapper(*args, **kwargs):\n        if len(args) == 3 and not (args[2].islower() or args[2].isalnum()):\n            raise BotoClientError(\"Bucket names cannot contain upper-case \" \\\n            \"characters when using either the sub-domain or virtual \" \\\n        \"hosting calling format.\")\n        return f(*args, **kwargs)\n    return wrapper\nclass _CallingFormat:\n    def build_url_base(self, protocol, server, bucket, key=''):\n        url_base = '%s://' % protocol\n        url_base += self.build_host(server, bucket)\n        url_base += self.build_path_base(bucket, key)\n        return url_base\n    def build_host(self, server, bucket):\n        if bucket == '':\n            return server\n        else:\n            return self.get_bucket_server(server, bucket)\n    def build_auth_path(self, bucket, key=''):\n        path = ''\n        if bucket != '':\n            path = '/' + bucket\n        return path + '/%s' % urllib.quote(key)\n    def build_path_base(self, bucket, key=''):\n        return '/%s' % urllib.quote(key)\nclass SubdomainCallingFormat(_CallingFormat):\n    @assert_case_insensitive\n    def get_bucket_server(self, server, bucket):\n        return '%s.%s' % (bucket, server)\nclass VHostCallingFormat(_CallingFormat):\n    @assert_case_insensitive\n    def get_bucket_server(self, server, bucket):\n        return bucket\nclass OrdinaryCallingFormat(_CallingFormat):\n    def get_bucket_server(self, server, bucket):\n        return server\n    def build_path_base(self, bucket, key=''):\n        path_base = '/'\n        if bucket:\n            path_base += \"%s/\" % bucket\n        return path_base + urllib.quote(key)\nclass Location:\n    DEFAULT = ''\n    EU = 'EU'\nclass S3Connection(AWSAuthConnection):\n    DefaultHost = 's3.amazonaws.com'\n    QueryString = 'Signature=%s&Expires=%d&AWSAccessKeyId=%s'\n    def __init__(self, aws_access_key_id=None, aws_secret_access_key=None,\n                 is_secure=True, port=None, proxy=None, proxy_port=None,\n                 proxy_user=None, proxy_pass=None,\n                 host=DefaultHost, debug=0, https_connection_factory=None,\n                 calling_format=SubdomainCallingFormat(), path='/'):\n        self.calling_format = calling_format\n        AWSAuthConnection.__init__(self, host,\n                aws_access_key_id, aws_secret_access_key,\n                is_secure, port, proxy, proxy_port, proxy_user, proxy_pass,\n                debug=debug, https_connection_factory=https_connection_factory,\n                path=path)\n    def __iter__(self):\n        return self.get_all_buckets()\n    def __contains__(self, bucket_name):\n       return not (self.lookup(bucket_name) is None)\n    def build_post_policy(self, expiration_time, conditions):\n        \"\"\"\n        Taken from the AWS book Python examples and modified for use with boto\n        \"\"\"\n        if type(expiration_time) != time.struct_time:\n            raise 'Policy document must include a valid expiration Time object'\n        # Convert conditions object mappings to condition statements\n        return '{\"expiration\": \"%s\",\\n\"conditions\": [%s]}' % \\\n            (time.strftime(boto.utils.ISO8601, expiration_time), \",\".join(conditions))\n    def build_post_form_args(self, bucket_name, key, expires_in = 6000,\n                        acl = None, success_action_redirect = None, max_content_length = None,\n                        http_method = \"http\"):\n        \"\"\"\n        Taken from the AWS book Python examples and modified for use with boto\n        This only returns the arguments required for the post form, not the actual form\n        This does not return the file input field which also needs to be added\n        @param bucket_name: Bucket to submit to\n        @param key: Key name, optionally add ${filename} to the end to attach the submitted filename\n        @param expires_in: Time (in seconds) before this expires, defaults to 6000\n        @param acl: ACL rule to use, if any\n        @param success_action_redirect: URL to redirect to on success\n        @param max_content_length: Maximum size for this file\n        @param http_method: HTTP Method to use, \"http\" or \"https\"\n        @return: {\"action\": action_url_to_post_to, \"fields\": [ {\"name\": field_name, \"value\":  field_value}, {\"name\": field_name2, \"value\": field_value2} ] }\n        @rtype: dict\n        \"\"\"\n        fields = []\n        conditions = []\n        expiration = time.gmtime(int(time.time() + expires_in))\n        # Generate policy document\n        conditions.append('{\"bucket\": \"%s\"}' % bucket_name)\n        if key.endswith(\"${filename}\"):\n            conditions.append('[\"starts-with\", \"$key\", \"%s\"]' % key[:-len(\"${filename}\")])\n        else:\n            conditions.append('{\"key\": \"%s\"}' % key)\n        if acl:\n            conditions.append('{\"acl\": \"%s\"}' % acl)\n            fields.append({ \"name\": \"acl\", \"value\": acl})\n        if success_action_redirect:\n            conditions.append('{\"success_action_redirect\": \"%s\"}' % success_action_redirect)\n            fields.append({ \"name\": \"success_action_redirect\", \"value\": success_action_redirect})\n        if max_content_length:\n            conditions.append('[\"content-length-range\", 0, %i]' % max_content_length)\n            fields.append({\"name\":'content-length-range', \"value\": \"0,%i\" % max_content_length})\n        policy = self.build_post_policy(expiration, conditions)\n        # Add the base64-encoded policy document as the 'policy' field\n        policy_b64 = base64.b64encode(policy)\n        fields.append({\"name\": \"policy\", \"value\": policy_b64})\n        # Add the AWS access key as the 'AWSAccessKeyId' field\n        fields.append({\"name\": \"AWSAccessKeyId\", \"value\": self.aws_access_key_id})\n        # Add signature for encoded policy document as the 'AWSAccessKeyId' field\n        hmac_copy = self.hmac.copy()\n        hmac_copy.update(policy_b64)\n        signature = base64.encodestring(hmac_copy.digest()).strip()\n        fields.append({\"name\": \"signature\", \"value\": signature})\n        fields.append({\"name\": \"key\", \"value\": key})\n        # HTTPS protocol will be used if the secure HTTP option is enabled.\n        url = '%s://%s.s3.amazonaws.com/' % (http_method, bucket_name)\n        return {\"action\": url, \"fields\": fields}\n    def generate_url(self, expires_in, method, bucket='', key='',\n                     headers=None, query_auth=True, force_http=False):\n        if not headers:\n            headers = {}\n        expires = int(time.time() + expires_in)\n        auth_path = self.calling_format.build_auth_path(bucket, key)\n        canonical_str = boto.utils.canonical_string(method, auth_path,\n                                                    headers, expires)\n        hmac_copy = self.hmac.copy()\n        hmac_copy.update(canonical_str)\n        b64_hmac = base64.encodestring(hmac_copy.digest()).strip()\n        encoded_canonical = urllib.quote_plus(b64_hmac)\n        path = self.calling_format.build_path_base(bucket, key)\n        if query_auth:\n            query_part = '?' + self.QueryString % (encoded_canonical, expires,\n                                             self.aws_access_key_id)\n        else:\n            query_part = ''\n        if force_http:\n            protocol = 'http'\n        else:\n            protocol = self.protocol\n        return self.calling_format.build_url_base(protocol, self.server_name(),\n                                                  bucket, key) + query_part\n    def get_all_buckets(self):\n        response = self.make_request('GET')\n        body = response.read()\n        if response.status > 300:\n            raise S3ResponseError(response.status, response.reason, body)\n        rs = ResultSet([('Bucket', Bucket)])\n        h = handler.XmlHandler(rs, self)\n        xml.sax.parseString(body, h)\n        return rs\n    def get_canonical_user_id(self):\n        \"\"\"\n        Convenience method that returns the \"CanonicalUserID\" of the user who's credentials\n        are associated with the connection.  The only way to get this value is to do a GET\n        request on the service which returns all buckets associated with the account.  As part\n        of that response, the canonical userid is returned.  This method simply does all of\n        that and then returns just the user id.\n        @rtype: string\n        @return: A string containing the canonical user id.\n        \"\"\"\n        rs = self.get_all_buckets()\n        return rs.ID\n    def get_bucket(self, bucket_name, validate=True):\n        bucket = Bucket(self, bucket_name)\n        if validate:\n            rs = bucket.get_all_keys(None, maxkeys=0)\n        return bucket\n    def lookup(self, bucket_name, validate=True):\n        try:\n            bucket = self.get_bucket(bucket_name, validate)\n        except:\n            bucket = None\n        return bucket\n    def create_bucket(self, bucket_name, headers=None, location=Location.DEFAULT, policy=None):\n        \"\"\"\n        Creates a new located bucket. By default it's in the USA. You can pass\n        Location.EU to create an European bucket.\n        @type bucket_name: string\n        @param bucket_name: The name of the new bucket\n        \n        @type headers: dict\n        @param headers: Additional headers to pass along with the request to AWS.\n        @type location: L{Location<boto.s3.connection.Location>}\n        @param location: The location of the new bucket\n        \n        @type policy: L{CannedACLString<boto.s3.acl.CannedACLStrings>}\n        @param policy: A canned ACL policy that will be applied to the new key in S3.\n             \n        \"\"\"\n        if policy:\n            if headers:\n                headers['x-amz-acl'] = policy\n            else:\n                headers = {'x-amz-acl' : policy}\n        if location == Location.DEFAULT:\n            data = ''\n        else:\n            data = '<CreateBucketConstraint><LocationConstraint>' + \\\n                    location + '</LocationConstraint></CreateBucketConstraint>'\n        response = self.make_request('PUT', bucket_name, headers=headers,\n                data=data)\n        body = response.read()\n        if response.status == 409:\n            raise S3CreateError(response.status, response.reason, body)\n        if response.status == 200:\n            return Bucket(self, bucket_name)\n        else:\n            raise S3ResponseError(response.status, response.reason, body)\n    def delete_bucket(self, bucket):\n        response = self.make_request('DELETE', bucket)\n        body = response.read()\n        if response.status != 204:\n            raise S3ResponseError(response.status, response.reason, body)\n    def make_request(self, method, bucket='', key='', headers=None, data='',\n            query_args=None, sender=None):\n        if isinstance(bucket, Bucket):\n            bucket = bucket.name\n        if isinstance(key, Key):\n            key = key.name\n        path = self.calling_format.build_path_base(bucket, key)\n        auth_path = self.calling_format.build_auth_path(bucket, key)\n        host = self.calling_format.build_host(self.server_name(), bucket)\n        if query_args:\n", "answers": ["            path += '?' + query_args"], "length": 1198, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "c48d09a8554b241e4d79956b75662da87b99458aa872b0de"}
{"input": "", "context": "package de.uvwxy.footpath.gui;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.LinkedList;\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Matrix;\nimport android.graphics.Paint;\nimport android.graphics.RectF;\nimport android.os.Environment;\nimport android.util.Log;\nimport de.uvwxy.footpath.R;\nimport de.uvwxy.footpath.ToolBox;\nimport de.uvwxy.footpath.core.Positioner;\nimport de.uvwxy.footpath.graph.GraphEdge;\nimport de.uvwxy.footpath.graph.LatLonPos;\nimport de.uvwxy.paintbox.PaintBox;\n/**\n * \n * @author Paul Smith\n * \n */\nclass PaintBoxMap extends PaintBox {\n\tprivate static final String MAP_SETTINGS = \"PaintBoxMap\";\n\t\n\tprivate Tile[] tiles;\t\t\t\t\t\t\t\t// array to store osm tiles\n\tprivate Bitmap arrow;\t\t\t\t\t\t\t\t// png, this is the user position\n\tprivate Bitmap arrowred;\t\t\t\t\t\t\t// user position in red\n\tprivate Bitmap stairs;\t\t\t\t\t\t\t\t// icon to show stairs on map\n\t\n\tprivate Context context;\t\t\t\t\t\t\t\n\tprivate Navigator navigator;\t\t\t\t\t\t// object to get data from (location, bearing,..)\n\tprivate LinkedList<GraphEdge> edges;\t\t\t\t// all edges on the path, in right order\n\tprivate LatLonPos lbBound;\t\t\t\t\t\t\t// left bottom position of bounding box (lat/lon)\n\tprivate LatLonPos rtBound;\t\t\t\t\t\t\t// rigt top position of bounding box (lat/lon)\n\tprivate float gScale = 1.0f;\t\t\t\t\t\t// global scaling, pressing the zoom buttons will change this\n\tprivate float scaleFactor = 0.6f;\t\t\t\t\t// value added/removed when changing zoom level\n\t\n\tprivate boolean runOnce = true;\t\t\t\t\t\t// needed to create/load resources once\n\t\n\tpublic PaintBoxMap(Context context, Navigator navigator) {\n\t\tsuper(context);\n\t\tthis.context = context;\n\t\tthis.navigator = navigator;\n\t\t// Load saved zoom level\n\t\tthis.gScale = context.getSharedPreferences(MAP_SETTINGS,0).getFloat(\"gScale\",1.0f); \n\t}\n\t// create lbBound and rtBound\n\tprivate void setBoundaries() {\n\t\tdouble latMin = Double.POSITIVE_INFINITY;\n\t\tdouble latMax = Double.NEGATIVE_INFINITY;\n\t\tdouble lonMin = Double.POSITIVE_INFINITY;\n\t\tdouble lonMax = Double.NEGATIVE_INFINITY;\n\t\tfor(GraphEdge edge : edges){\t\t\t// edges contain only edges from path\n\t\t\t\t\t\t\t\t\t\t\t\t// but still, almost every node is searched twice ([a,b][b,c][c,d]...)\n\t\t\tdouble n0lat = edge.getNode0().getLat();\n\t\t\tdouble n1lat = edge.getNode1().getLat();\n\t\t\tdouble n0lon = edge.getNode0().getLon();\n\t\t\tdouble n1lon = edge.getNode1().getLon();\n\t\t\t\n\t\t\tif(n0lat < latMin)\t\t\t// find minimum lat\n\t\t\t\tlatMin = n0lat;\n\t\t\tif(n1lat < latMin)\n\t\t\t\tlatMin = n1lat;\n\t\t\tif(n0lon < lonMin)\t\t\t// find minimum lon\n\t\t\t\tlonMin = n0lon;\n\t\t\tif(n1lon < lonMin)\n\t\t\t\tlonMin = n1lon;\n\t\t\t\n\t\t\tif(n0lat > latMax)\t\t\t// find maximum lat\n\t\t\t\tlatMax = n0lat;\n\t\t\tif(n1lat > latMax)\n\t\t\t\tlatMax = n1lat;\n\t\t\tif(n0lon > lonMax)\t\t\t// find maximum lon\n\t\t\t\tlonMax = n0lon;\n\t\t\tif(n1lon > lonMax)\n\t\t\t\tlonMax = n1lon;\n\t\t}\n\t\t\n\t\tlbBound = new LatLonPos(latMin, lonMin, -1337);\n\t\trtBound = new LatLonPos(latMax, lonMax, -1337);\n\t}\n\t\n\t// load tiles for given zoom level, from sdcard or http\n\tprivate Tile[] loadTiles(int zoomlevel, LatLonPos lbBoundary, LatLonPos rtBoundary){\n\t\t// source: http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames\n\t\t\n\t\t// find out which tiles to get\n\t\tint x0 = getTileX(lbBoundary.getLon(), zoomlevel);\t\t\t// point 0 left top\n\t\tint y0 = getTileY(rtBoundary.getLat(), zoomlevel);\n\t\tint x1 = getTileX(rtBoundary.getLon(), zoomlevel);\t\t\t// point 1 right top\n\t\tint y2 = getTileY(lbBoundary.getLat(), zoomlevel);\t\t\t// point 2 left bottom\n\t\t\n\t\tint diffX = x1 - x0;\n\t\tint diffY = y2 - y0;\n\t\t\n\t\tint arraySize = (diffX+3)*(diffY+3);\n\t\tarraySize = arraySize <= 0 ? 1 : arraySize;\t\t\t// fix size if only one tile needed\n\t\tTile[] res = new Tile[arraySize];\n\t\t\n\t\t// check if dir exists\n\t\tFile dir = new File(Environment.getExternalStorageDirectory(),\"footpath/\");\n\t\tif(!dir.exists()){\n\t\t\tdir.mkdir();\n\t\t}\n\t\tint counter = 0;\n\t\tboolean downloadFailed = false;\n\t\tfor(int x = -1; x <= diffX+1; x++){\t\t\t// x/y =  -1 to have some more tiles around the building \n\t\t\tfor(int y = -1; y <= diffY+1; y++){   \t// because some parts of the building might be overlapping\n\t\t\t\t\t\t\t\t\t\t\t\t\t// and thus not visible (nicer graphics)\n\t\t\t\tFile f = new File(Environment.getExternalStorageDirectory(),\"footpath/tile.\" \n\t\t\t\t\t\t+ zoomlevel + \".\" + (x0+x) + \".\" + (y0+y) + \".png\");\n\t\t\t\tif(f.exists()){\n\t\t\t\t\t// file existed -> read it\n\t\t\t\t\tres[counter] = new Tile(zoomlevel, x0+x, y0+y, BitmapFactory.decodeFile(f.getPath()));\n\t\t\t\t\tLog.i(\"FOOTPATH\", \"Loading from sd footpath/tile.\"  + zoomlevel + \".\" + (x0+x) + \".\" + (y0+y) + \".png)\");\n\t\t\t\t} else {\n\t\t\t\t\t// file did not exist -> download it\n\t\t\t\t\tURL u = null;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tu= new URL(\"http://tile.openstreetmap.org/\" + zoomlevel + \"/\" + (x0+x) + \"/\" + (y0+y) + \".png\");\n\t\t\t\t\t} catch (MalformedURLException e) {\n\t\t\t\t\t\tLog.i(\"FOOTPATH\", \"URL creation failed (http://tile.openstreetmap.org/\"  + zoomlevel + \"/\" + (x0+x) + \"/\" + (y0+y) + \".png)\" + \"\\n\" + e);\n\t\t\t\t\t}    \n\t\t\t\t\ttry {\n\t\t\t\t\t\tHttpURLConnection c = (HttpURLConnection)u.openConnection();\n\t\t\t\t\t\tc.setDoInput(true);\n\t\t\t\t\t\tInputStream is = c.getInputStream();    \n\t\t\t\t\t\tres[counter] =  new Tile(zoomlevel, x0+x, y0+y, BitmapFactory.decodeStream(is));\n\t\t\t\t\t\tLog.i(\"FOOTPATH\", \"Download succeeded (\" + u.toString() + \")\");\n\t\t\t\t\t\t// -> and save it\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t       FileOutputStream out = new FileOutputStream(f);\n\t\t\t\t\t\t       res[counter].getBitmap().compress(Bitmap.CompressFormat.PNG, 90, out);\n\t\t\t\t\t\t       Log.i(\"FOOTPATH\", \"Writing of file suceeded (\" + f.toString() + \")\");\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t      Log.i(\"FOOTPATH\", \"Writing of file failed (\" + f.toString() + \")\" + \"\\n\" + e);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tLog.i(\"FOOTPATH\", \"Download failed (\" + u.toString() + \")\" + \"\\n\" + e);\n\t\t\t\t\t\tdownloadFailed = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t\tif(downloadFailed){\n\t\t\t// TODO: Give feedback on failed download of map tiles\n\t\t}\n\t\treturn res;\n\t}\n\t\n\tprivate int getTileX(double lon, int zoom) {\n\t\treturn (int)Math.floor( (lon + 180) / 360 * (1<<zoom));\n\t}\n\tprivate int getTileY(double lat, int zoom) {\n\t\treturn (int)Math.floor( (1 - Math.log(Math.tan(Math.toRadians(lat)) + 1 / Math.cos(Math.toRadians(lat))) / Math.PI) / 2 * (1<<zoom) ) ;\n\t}\n\t\n\t@Override\n\tprotected void onDraw(Canvas canvas) {\n\t\tif(runOnce){\n\t\t\tedges = this.navigator.getNavPathEdges();\n\t\t\tsetBoundaries();\n\t\t\ttiles = loadTiles(18,lbBound, rtBound);\n\t\t\tarrow = BitmapFactory.decodeResource(getResources(), R.drawable.arrow);\n\t\t\tarrowred = BitmapFactory.decodeResource(getResources(), R.drawable.arrowred);\n\t\t\tstairs = BitmapFactory.decodeResource(getResources(), R.drawable.stairs);\n\t\t\trunOnce = false; \n\t\t}\t\t\n\t\tdouble localScale = gScale;\n\t\tLatLonPos pos = navigator.getPosition();\t\t\t// get position\n\t\t\n\t\tglobalOffsetX = getWidth()/2.0f - getPosX(pos, localScale);\t\t// center position to screen center\n\t\tglobalOffsetY = getHeight()/2.0f - getPosY(pos, localScale);\t// center position to screen center\n\t\t\n\t\tcanvas.drawColor(Color.BLACK); \t\t\t\t\t\t// black background\n\t\tdrawTiles(canvas, localScale);\t\t\t\t\t\t\t\t\t// draw map\n\t\tthis.drawPath(canvas, localScale);\t\t\t\t\t\t\t\t// draw route\n\t\t// draw arrow.png to the screen (user position indicator)\n\t\t\t\t\n\t\tif(Positioner.isInRange(navigator.getCompassValue(), navigator.getNavPathDir(), navigator.getAcceptanceWidth())){\n\t\t\tMatrix m = new Matrix();\n\t\t\tm = new Matrix();\n\t\t\tm.setRotate((float) (navigator.getCompassValue()),arrow.getWidth()/2.0f,arrow.getHeight()/2.0f);\n\t\t\tm.postTranslate(globalOffsetX + getPosX(pos, localScale) - arrow.getWidth()/2.0f , globalOffsetY + getPosY(pos, localScale) - arrow.getHeight()/2.0f);\n\t\t\tcanvas.drawBitmap(arrow,m,null);\t\t\t\t\t// draw arrow.png to the screen (user position indicator)\n\t\t}else {\n\t\t\tMatrix m = new Matrix();\n\t\t\tm.setRotate((float) (navigator.getNavPathDir()),arrow.getWidth()/2.0f,arrow.getHeight()/2.0f);\n\t\t\tm.postTranslate(globalOffsetX + getPosX(pos, localScale) - arrow.getWidth()/2.0f , globalOffsetY + getPosY(pos, localScale) - arrow.getHeight()/2.0f);\n\t\t\tcanvas.drawBitmap(arrow,m,null);\t\n\t\t\tm = new Matrix();\n\t\t\tm.setRotate((float) (navigator.getCompassValue()),arrow.getWidth()/2.0f,arrow.getHeight()/2.0f);\n\t\t\tm.postTranslate(globalOffsetX + getPosX(pos, localScale) - arrow.getWidth()/2.0f , globalOffsetY + getPosY(pos, localScale) - arrow.getHeight()/2.0f);\n\t\t\tcanvas.drawBitmap(arrowred,m,null);\t\t\t\t\t// draw arrowred.png to the screen, meaning wrong direction\n\t\t}\n\t\t\n\t\t\n\t\t// draw additional text + background (readability)\n\t\tcanvas.drawRect(0, 0, getWidth(), 148, ToolBox.myPaint(1, Color.BLACK, 128));\n\t\t// check if route end reached\n\t\tif (navigator.getNavPathEdgeLenLeft() != -1) {\n\t\t\t// draw information\n\t\t\tcanvas.drawText(\n\t\t\t\t\t\"Distance: \" + ToolBox.tdp(navigator.getNavPathLen() - navigator.getNavPathLenLeft()) + \"m of \" +\n\t\t\t\t\tToolBox.tdp(navigator.getNavPathLen()) + \"m\" , 10, 42, ToolBox.greenPaint(32.0f));\n\t\t\t\n\t\t\tString nextPath = \"\";\n\t\t\tswitch(navigator.getNextTurn()){\n\t\t\tcase -1:\n\t\t\t\tnextPath = \"turn left\";\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\tnextPath = \"straight on\";\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tnextPath = \"turn right\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcanvas.drawText(\n\t\t\t\t\t\"Go \" + ToolBox.tdp(navigator.getNavPathEdgeLenLeft())\n\t\t\t\t\t+ \"m then \" + nextPath, 10, 74, ToolBox.greenPaint(32.0f));\n\t\t\tPaint p = ToolBox.greenPaint(32.0f);\n\t\t\tif(!Positioner.isInRange(navigator.getNavPathDir(),\n\t\t\t\t\tnavigator.getCompassValue(),\n\t\t\t\t\tnavigator.getAcceptanceWidth())){\n\t\t\t\tp = ToolBox.redPaint(32.0f);\n\t\t\t}\n\t\t\tcanvas.drawText(\n\t\t\t\t\t\"Bearing: \" + ToolBox.tdp(navigator.getCompassValue()) + \"/\" + (ToolBox.tdp(navigator.getNavPathDir())), 10, 106, p);\n//\t\t\tcanvas.drawText(\n//\t\t\t\t\t\"Variances: \" + ToolBox.tdp(navigator.getVarianceOfX()) + \"/\" + ToolBox.tdp(navigator.getVarianceOfY()) \n//\t\t\t\t\t+ \"/\" + ToolBox.tdp(navigator.getVarianceOfZ()), 10, 138, ToolBox.greenPaint(32.0f));\n\t\t\tcanvas.drawText(\"Est. step length: \" \n\t\t\t\t\t+ ToolBox.tdp(navigator.getEstimatedStepLength()) + \" vs \" + ToolBox.tdp(navigator.getStepLengthInMeters()) ,10, 138, ToolBox.greenPaint(32.0f));\n\t\t} else {\n\t\t\tcanvas.drawText(\"Destination ( \" + navigator.getRouteEnd().getName() + \") reached\", 10, 32, ToolBox.redPaint(32.0f));\n\t\t}\n\t}\n\tprivate void drawTiles(Canvas canvas, double localScale){\n\t\tfor(int i = 0; i < tiles.length; i++){\n\t\t\tif(tiles[i]!=null){\n\t\t\t\tLatLonPos lt = tiles[i].getLatLonPosLeftTop();\n\t\t\t\tLatLonPos rb = tiles[i].getLatLonPosRightBottom();\n\t\t\t\tfloat left = globalOffsetX + getPosX(lt, localScale);\n\t\t\t\tfloat top = globalOffsetY + getPosY(lt, localScale);\n\t\t\t\tfloat right = globalOffsetX + getPosX(rb, localScale);\n\t\t\t\tfloat bottom = globalOffsetY + getPosY(rb, localScale);\n", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "length": 1184, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "415a8b5c18b1c180690a95f67d9abf7573db364515f13fc6"}
{"input": "", "context": "using System;\nusing Server.Engines.Plants;\nusing Server.Multis;\nusing Server.Targeting;\nusing System.Collections.Generic;\nnamespace Server.Items\n{\n    public enum DyeType\n    {\n        None,\n        WindAzul,\n        DullRuby,\n        PoppieWhite,\n        ZentoOrchid,\n        UmbranViolet\n    }\n    public class SpecialNaturalDye : Item\n    {\n        private DyeType m_DyeType;\n        private int m_UsesRemaining;\n        private bool m_BooksOnly;\n        [CommandProperty(AccessLevel.GameMaster)]\n        public DyeType DyeType\n        {\n            get { return m_DyeType; }\n            set\n            {\n                DyeType old = m_DyeType;\n                m_DyeType = value;\n                if (m_DyeType != old)\n                    ValidateHue();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int UsesRemaining\n        {\n            get\n            {\n                return this.m_UsesRemaining;\n            }\n            set\n            {\n                this.m_UsesRemaining = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public bool BooksOnly\n        {\n            get\n            {\n                return this.m_BooksOnly;\n            }\n            set\n            {\n                this.m_BooksOnly = value;\n                this.InvalidateProperties();\n            }\n        }\n        [Constructable]\n        public SpecialNaturalDye(DyeType type)\n            : this(type, false)\n        {\n        }\n        [Constructable]\n        public SpecialNaturalDye(DyeType type, bool booksonly)\n            : base(0x182B)\n        {\n            Weight = 1.0;\n            DyeType = type;\n            UsesRemaining = 5;\n            BooksOnly = booksonly;\n        }\n        public void ValidateHue()\n        {\n            if (HueInfo.ContainsKey(this.DyeType))\n            {\n                Hue = HueInfo[this.DyeType].Item1;\n            }\n        }\n        public SpecialNaturalDye(Serial serial)\n            : base(serial)\n        {\n        }\n        public override int LabelNumber\n        {\n            get\n            {\n                return 1112136;\n            }\n        }\n        public override bool ForceShowProperties\n        {\n            get\n            {\n                return ObjectPropertyList.Enabled;\n            }\n        }\n        public override void GetProperties(ObjectPropertyList list)\n        {\n            base.GetProperties(list);\n            list.Add(1060584, this.m_UsesRemaining.ToString()); // uses remaining: ~1_val~\n            if (m_BooksOnly)\n                list.Add(1157205); // Spellbook Only Dye\n        }\n        public override void AddNameProperty(ObjectPropertyList list)\n        {\n            if (this.DyeType == DyeType.None)\n            {\n                base.AddNameProperty(list);\n            }\n            else if (this.Amount > 1)\n            {\n                list.Add(1113276, \"{0}\\t{1}\", this.Amount, String.Format(\"#{0}\", HueInfo[this.DyeType].Item2));  // ~1_AMOUNT~ ~2_COLOR~ natural dyes\n            }\n            else\n            {\n                list.Add(1112137, String.Format(\"#{0}\", HueInfo[this.DyeType].Item2));  // ~1_COLOR~ natural dye\n            }\n        }\n        public override void Serialize(GenericWriter writer)\n        {\n            base.Serialize(writer);\n            writer.Write((int)0); // version\n            writer.Write((int)this.m_DyeType);\n            writer.Write((int)this.m_UsesRemaining);\n            writer.Write(m_BooksOnly);\n        }\n        public override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n            int version = reader.ReadInt();\n            this.m_DyeType = (DyeType)reader.ReadInt();\n            this.m_UsesRemaining = reader.ReadInt();\n            this.m_BooksOnly = reader.ReadBool();\n        }\n        public override void OnDoubleClick(Mobile from)\n        {\n            from.SendLocalizedMessage(1112139); // Select the item you wish to dye.\n            from.Target = new InternalTarget(this);\n        }\n        private class InternalTarget : Target\n        {\n            private readonly SpecialNaturalDye m_Item;\n            public InternalTarget(SpecialNaturalDye item)\n                : base(1, false, TargetFlags.None)\n            {\n                this.m_Item = item;\n            }\n            protected override void OnTarget(Mobile from, object targeted)\n            {\n                if (this.m_Item.Deleted)\n                    return;\n                Item item = targeted as Item;\n                bool valid = false;\n                if (item != null)\n                {\n                    if (m_Item.BooksOnly && !(item is Spellbook))\n                    {\n                        valid = false;\n                    }\n                    else\n                    {\n                        valid = (item is IDyable ||\n                                      item is BaseBook || item is BaseClothing ||\n                                      item is BaseJewel || item is BaseStatuette ||\n                                      item is BaseWeapon || item is Runebook ||\n                                      item is BaseTalisman || item is Spellbook ||\n\t\t\t\t\t\t\t\t\t  item.IsArtifact || BasePigmentsOfTokuno.IsValidItem(item));\n                        if (!valid && item is BaseArmor)\n                        {\n                            CraftResourceType restype = CraftResources.GetType(((BaseArmor)item).Resource);\n                            if ((CraftResourceType.Leather == restype || CraftResourceType.Metal == restype) &&\n                                ArmorMaterialType.Bone != ((BaseArmor)item).MaterialType)\n                            {\n                                valid = true;\n                            }\n                        }\n                        if (!valid && FurnitureAttribute.Check(item))\n                        {\n                            if (!from.InRange(this.m_Item.GetWorldLocation(), 1) || !from.InRange(item.GetWorldLocation(), 1))\n                            {\n                                from.SendLocalizedMessage(500446); // That is too far away.\n                                return;\n                            }\n                            else\n                            {\n                                BaseHouse house = BaseHouse.FindHouseAt(item);\n                                if (house == null || (!house.IsLockedDown(item) && !house.IsSecure(item)))\n                                {\n                                    from.SendLocalizedMessage(501022); // Furniture must be locked down to paint it.\n                                    return;\n                                }\n                                else if (!house.IsCoOwner(from))\n                                {\n                                    from.SendLocalizedMessage(501023); // You must be the owner to use this item.\n                                    return;\n                                }\n                                else\n                                    valid = true;\n                            }\n                        }\n                    }\n                    if (valid)\n                    {\n                        item.Hue = m_Item.Hue;\n                        from.PlaySound(0x23E);\n                        if (--this.m_Item.UsesRemaining > 0)\n                            this.m_Item.InvalidateProperties();\n                        else\n                            this.m_Item.Delete();\n                        return;\n                    }\n                }\n                from.SendLocalizedMessage(1042083); // You cannot dye that.\n            }\n        }\n        public static Dictionary<DyeType, Tuple<int, int>> HueInfo;\n        public static void Configure()\n        {\n", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "length": 535, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "0dbaaf220a43d380ab98e7c30ef71300ad2847802aa0d67a"}
{"input": "", "context": "/*******************************************************************************\n * Copyright (c) 2020, 2021 Eurotech and/or its affiliates and others\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *  Eurotech\n *******************************************************************************/\npackage org.eclipse.kura.web.client.ui.security;\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport org.eclipse.kura.web.client.messages.Messages;\nimport org.eclipse.kura.web.client.ui.AlertDialog;\nimport org.eclipse.kura.web.client.ui.AlertDialog.ConfirmListener;\nimport org.eclipse.kura.web.client.ui.Tab;\nimport org.eclipse.kura.web.client.util.request.RequestQueue;\nimport org.eclipse.kura.web.shared.DateUtils;\nimport org.eclipse.kura.web.shared.model.GwtKeystoreEntry;\nimport org.eclipse.kura.web.shared.model.GwtKeystoreEntry.Kind;\nimport org.eclipse.kura.web.shared.service.GwtCertificatesService;\nimport org.eclipse.kura.web.shared.service.GwtCertificatesServiceAsync;\nimport org.eclipse.kura.web.shared.service.GwtSecurityTokenService;\nimport org.eclipse.kura.web.shared.service.GwtSecurityTokenServiceAsync;\nimport org.gwtbootstrap3.client.ui.Button;\nimport org.gwtbootstrap3.client.ui.ListBox;\nimport org.gwtbootstrap3.client.ui.Modal;\nimport org.gwtbootstrap3.client.ui.ModalBody;\nimport org.gwtbootstrap3.client.ui.ModalFooter;\nimport org.gwtbootstrap3.client.ui.PanelFooter;\nimport org.gwtbootstrap3.client.ui.html.Span;\nimport com.google.gwt.core.client.GWT;\nimport com.google.gwt.uibinder.client.UiBinder;\nimport com.google.gwt.uibinder.client.UiField;\nimport com.google.gwt.user.cellview.client.CellTable;\nimport com.google.gwt.user.cellview.client.ColumnSortEvent;\nimport com.google.gwt.user.cellview.client.ColumnSortEvent.ListHandler;\nimport com.google.gwt.user.cellview.client.SimplePager;\nimport com.google.gwt.user.cellview.client.SimplePager.TextLocation;\nimport com.google.gwt.user.cellview.client.TextColumn;\nimport com.google.gwt.user.client.ui.Composite;\nimport com.google.gwt.user.client.ui.ScrollPanel;\nimport com.google.gwt.user.client.ui.Widget;\nimport com.google.gwt.view.client.HasRows;\nimport com.google.gwt.view.client.ListDataProvider;\nimport com.google.gwt.view.client.SingleSelectionModel;\npublic class CertificateListTabUi extends Composite implements Tab, CertificateModalListener {\n    private static CertificateListTabUiUiBinder uiBinder = GWT.create(CertificateListTabUiUiBinder.class);\n    interface CertificateListTabUiUiBinder extends UiBinder<Widget, CertificateListTabUi> {\n    }\n    private static final Messages MSGS = GWT.create(Messages.class);\n    private final GwtSecurityTokenServiceAsync gwtXSRFService = GWT.create(GwtSecurityTokenService.class);\n    private final GwtCertificatesServiceAsync gwtCertificatesService = GWT.create(GwtCertificatesService.class);\n    @UiField\n    Button refresh;\n    @UiField\n    Button add;\n    @UiField\n    Button uninstall;\n    @UiField\n    Modal certAddModal;\n    @UiField\n    ScrollPanel certAddModalBody;\n    @UiField\n    Button nextStepButton;\n    @UiField\n    Button applyModalButton;\n    @UiField\n    Button resetModalButton;\n    @UiField\n    Button closeModalButton;\n    @UiField\n    AlertDialog alertDialog;\n    @UiField\n    PanelFooter tablePanelFooter;\n    @UiField\n    CellTable<GwtKeystoreEntry> certificatesGrid;\n    final SingleSelectionModel<GwtKeystoreEntry> selectionModel = new SingleSelectionModel<>();\n    private final ListDataProvider<GwtKeystoreEntry> certificatesDataProvider = new ListDataProvider<>();\n    private final SimplePager pager;\n    private List<String> pids;\n    private KeyPairTabUi keyPairTabUi;\n    public CertificateListTabUi() {\n        initWidget(uiBinder.createAndBindUi(this));\n        this.pager = new SimplePager(TextLocation.CENTER, false, 0, true) {\n            @Override\n            public void nextPage() {\n                setPage(getPage() + 1);\n            }\n            @Override\n            public void setPageStart(int index) {\n                final HasRows display = getDisplay();\n                if (display != null) {\n                    display.setVisibleRange(index, getPageSize());\n                }\n            }\n        };\n        this.pager.setPageSize(15);\n        this.pager.setDisplay(this.certificatesGrid);\n        this.tablePanelFooter.add(this.pager);\n        initTable();\n        initInterfaceButtons();\n    }\n    @Override\n    public void setDirty(boolean flag) {\n        // unused\n    }\n    @Override\n    public boolean isDirty() {\n        return false;\n    }\n    @Override\n    public boolean isValid() {\n        return true;\n    }\n    @Override\n    public void refresh() {\n        RequestQueue.submit(c -> this.gwtCertificatesService.listKeystoreServicePids(c.callback(resultPids -> {\n            this.pids = resultPids;\n            this.gwtCertificatesService.listEntries(c.callback(result -> {\n                CertificateListTabUi.this.certificatesDataProvider.getList().clear();\n                for (GwtKeystoreEntry pair : result) {\n                    if (pair != null) {\n                        this.certificatesDataProvider.getList().add(pair);\n                    }\n                }\n                this.certificatesGrid.setVisible(!this.certificatesDataProvider.getList().isEmpty());\n                this.selectionModel.clear();\n                ColumnSortEvent.fire(this.certificatesGrid, this.certificatesGrid.getColumnSortList());\n            }));\n        })));\n    }\n    private void initTable() {\n        TextColumn<GwtKeystoreEntry> col1 = new TextColumn<GwtKeystoreEntry>() {\n            @Override\n            public String getValue(GwtKeystoreEntry object) {\n                return String.valueOf(object.getAlias());\n            }\n        };\n        this.certificatesGrid.addColumn(col1, MSGS.certificateAlias());\n        col1.setSortable(true);\n        TextColumn<GwtKeystoreEntry> col2 = new TextColumn<GwtKeystoreEntry>() {\n            @Override\n            public String getValue(GwtKeystoreEntry object) {\n                final Kind kind = object.getKind();\n                if (kind == Kind.KEY_PAIR) {\n                    return \"Key Pair\";\n                } else if (kind == Kind.SECRET_KEY) {\n                    return \"Secret Key\";\n                } else if (kind == Kind.TRUSTED_CERT) {\n                    return \"Trusted Certificate\";\n                } else {\n                    return \"Unknown\";\n                }\n            }\n        };\n        col2.setSortable(true);\n        this.certificatesGrid.addColumn(col2, MSGS.certificateKind());\n        TextColumn<GwtKeystoreEntry> col3 = new TextColumn<GwtKeystoreEntry>() {\n            @Override\n            public String getValue(GwtKeystoreEntry object) {\n                return String.valueOf(object.getKeystoreName());\n            }\n        };\n        col3.setSortable(true);\n        this.certificatesGrid.addColumn(col3, MSGS.certificateKeystoreName());\n        TextColumn<GwtKeystoreEntry> col4 = new TextColumn<GwtKeystoreEntry>() {\n            @Override\n            public String getValue(GwtKeystoreEntry object) {\n                Date date = object.getValidityStartDate();\n                return date != null ? DateUtils.formatDateTime(date) : \"\";\n            }\n        };\n        this.certificatesGrid.addColumn(col4, MSGS.certificateValidityStart());\n        col4.setSortable(true);\n        TextColumn<GwtKeystoreEntry> col5 = new TextColumn<GwtKeystoreEntry>() {\n            @Override\n            public String getValue(GwtKeystoreEntry object) {\n                Date date = object.getValidityEndDate();\n                return date != null ? DateUtils.formatDateTime(date) : \"\";\n            }\n        };\n        this.certificatesGrid.addColumn(col5, MSGS.certificateValidityEnd());\n        col5.setSortable(true);\n        this.selectionModel.addSelectionChangeHandler(\n                e -> this.uninstall.setEnabled(this.selectionModel.getSelectedObject() != null));\n        this.certificatesGrid.getColumnSortList().push(col2);\n        this.certificatesGrid.addColumnSortHandler(getAliasSortHandler(col1));\n        this.certificatesGrid.addColumnSortHandler(getTypeSortHandler(col2));\n        this.certificatesGrid.addColumnSortHandler(getNameSortHandler(col3));\n        this.certificatesGrid.addColumnSortHandler(getStartDateSortHandler(col4));\n        this.certificatesGrid.addColumnSortHandler(getEndDateSortHandler(col5));\n        this.certificatesDataProvider.addDataDisplay(this.certificatesGrid);\n        this.certificatesGrid.setSelectionModel(this.selectionModel);\n    }\n    private <U extends Comparable<U>> Comparator<GwtKeystoreEntry> getComparator(\n            Function<GwtKeystoreEntry, U> comparableElementSupplier) {\n        return (o1, o2) -> {\n            if (o1 == o2) {\n                return 0;\n            }\n            if (o1 == null) {\n                return -1;\n            }\n            if (o2 == null) {\n                return 1;\n            }\n            U item1 = comparableElementSupplier.apply(o1);\n            U item2 = comparableElementSupplier.apply(o2);\n            if (item1 == item2) {\n                return 0;\n            }\n            if (item1 == null) {\n                return -1;\n            }\n            if (item2 == null) {\n                return 1;\n            }\n            return item1.compareTo(item2);\n        };\n    }\n    private ListHandler<GwtKeystoreEntry> getNameSortHandler(TextColumn<GwtKeystoreEntry> col3) {\n        ListHandler<GwtKeystoreEntry> nameSortHandler = new ListHandler<>(this.certificatesDataProvider.getList());\n        nameSortHandler.setComparator(col3, getComparator(GwtKeystoreEntry::getKeystoreName));\n        return nameSortHandler;\n    }\n    private ListHandler<GwtKeystoreEntry> getTypeSortHandler(TextColumn<GwtKeystoreEntry> col2) {\n        ListHandler<GwtKeystoreEntry> typeSortHandler = new ListHandler<>(this.certificatesDataProvider.getList());\n        typeSortHandler.setComparator(col2, getComparator(entry -> entry.getKind().name()));\n        return typeSortHandler;\n    }\n    private ListHandler<GwtKeystoreEntry> getAliasSortHandler(TextColumn<GwtKeystoreEntry> col1) {\n        ListHandler<GwtKeystoreEntry> aliasSortHandler = new ListHandler<>(this.certificatesDataProvider.getList());\n        aliasSortHandler.setComparator(col1, getComparator(GwtKeystoreEntry::getAlias));\n        return aliasSortHandler;\n    }\n    private ListHandler<GwtKeystoreEntry> getStartDateSortHandler(TextColumn<GwtKeystoreEntry> col4) {\n        ListHandler<GwtKeystoreEntry> startDateSortHandler = new ListHandler<>(this.certificatesDataProvider.getList());\n        startDateSortHandler.setComparator(col4, getComparator(GwtKeystoreEntry::getValidityStartDate));\n        return startDateSortHandler;\n    }\n    private ListHandler<GwtKeystoreEntry> getEndDateSortHandler(TextColumn<GwtKeystoreEntry> col5) {\n        ListHandler<GwtKeystoreEntry> endDateSortHandler = new ListHandler<>(this.certificatesDataProvider.getList());\n        endDateSortHandler.setComparator(col5, getComparator(GwtKeystoreEntry::getValidityEndDate));\n        return endDateSortHandler;\n    }\n    private void initInterfaceButtons() {\n        this.refresh.setText(MSGS.refresh());\n        this.refresh.addClickHandler(event -> refresh());\n        this.add.setText(MSGS.addButton());\n        this.add.addClickHandler(event -> {\n            initCertificateTypeSelection();\n            this.certAddModal.show();\n        });\n        this.uninstall.setText(MSGS.delete());\n        this.uninstall.addClickHandler(event -> {\n            final GwtKeystoreEntry selected = this.selectionModel.getSelectedObject();\n            if (selected != null) {\n", "answers": ["                final Modal modal = new Modal();"], "length": 698, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "5765b9a091de53b533ad54ae8ddd21d102b5f2a4c6aeff62"}
{"input": "", "context": "//\n// Microsoft.VisualBasic.* Test Cases\n//\n// Authors:\n// Gert Driesen (drieseng@users.sourceforge.net)\n//\n// (c) 2006 Novell\n//\nusing System;\nusing System.CodeDom;\nusing System.CodeDom.Compiler;\nusing System.Globalization;\nusing System.IO;\nusing System.Text;\nusing NUnit.Framework;\nnamespace MonoTests.Microsoft.VisualBasic\n{\n\t/// <summary>\n\t/// Test ICodeGenerator's GenerateCodeFromNamespace, along with a \n\t/// minimal set CodeDom components.\n\t/// </summary>\n\t[TestFixture]\n\tpublic class CodeGeneratorFromNamespaceTest : CodeGeneratorTestBase\n\t{\n\t\tCodeNamespace codeNamespace = null;\n\t\t[SetUp]\n\t\tpublic void Init ()\n\t\t{\n\t\t\tInitBase ();\n\t\t\tcodeNamespace = new CodeNamespace ();\n\t\t}\n\t\t\n\t\tprotected override string Generate (CodeGeneratorOptions options)\n\t\t{\n\t\t\tStringWriter writer = new StringWriter ();\n\t\t\twriter.NewLine = NewLine;\n\t\t\tgenerator.GenerateCodeFromNamespace (codeNamespace, writer, options);\n\t\t\twriter.Close ();\n\t\t\treturn writer.ToString ();\n\t\t}\n\t\t\n\t\t[Test]\n\t\t[ExpectedException (typeof (NullReferenceException))]\n\t\tpublic void NullNamespaceTest ()\n\t\t{\n\t\t\tcodeNamespace = null;\n\t\t\tGenerate ();\n\t\t}\n\t\t[Test]\n\t\tpublic void NullNamespaceNameTest ()\n\t\t{\n\t\t\tcodeNamespace.Name = null;\n\t\t\tAssert.AreEqual (\"\\n\", Generate ());\n\t\t}\n\t\t\n\t\t[Test]\n\t\tpublic void DefaultNamespaceTest ()\n\t\t{\n\t\t\tAssert.AreEqual (\"\\n\", Generate ());\n\t\t}\n\t\t[Test]\n\t\tpublic void SimpleNamespaceTest ()\n\t\t{\n\t\t\tcodeNamespace.Name = \"A\";\n\t\t\tAssert.AreEqual (\"\\nNamespace A\\nEnd Namespace\\n\", Generate ());\n\t\t}\n\t\t[Test]\n\t\tpublic void InvalidNamespaceTest ()\n\t\t{\n\t\t\tcodeNamespace.Name = \"A,B\";\n\t\t\tAssert.AreEqual (\"\\nNamespace A,B\\nEnd Namespace\\n\", Generate ());\n\t\t}\n\t\t[Test]\n\t\tpublic void CommentOnlyNamespaceTest ()\n\t\t{\n\t\t\tCodeCommentStatement comment = new CodeCommentStatement (\"a\");\n\t\t\tcodeNamespace.Comments.Add (comment);\n\t\t\tAssert.AreEqual (\"\\n'a\\n\", Generate ());\n\t\t}\n\t\t[Test]\n\t\tpublic void ImportsTest ()\n\t\t{\n\t\t\tcodeNamespace.Imports.Add (new CodeNamespaceImport (\"System\"));\n\t\t\tcodeNamespace.Imports.Add (new CodeNamespaceImport (\"System.Collections\"));\n\t\t\tAssert.AreEqual (string.Format(CultureInfo.InvariantCulture,\n\t\t\t\t\"Imports System{0}\" +\n\t\t\t\t\"Imports System.Collections{0}\" +\n\t\t\t\t\"{0}\", NewLine), Generate (), \"#1\");\n\t\t\tcodeNamespace.Name = \"A\";\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"Imports System{0}\" +\n\t\t\t\t\"Imports System.Collections{0}\" +\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace A{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#2\");\n\t\t\tcodeNamespace.Name = null;\n\t\t\tcodeNamespace.Comments.Add (new CodeCommentStatement (\"a\"));\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"Imports System{0}\" +\n\t\t\t\t\"Imports System.Collections{0}\" +\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"'a{0}\", NewLine), Generate (), \"#3\");\n\t\t\tcodeNamespace.Name = \"A\";\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"Imports System{0}\" +\n\t\t\t\t\"Imports System.Collections{0}\" +\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"'a{0}\" +\n\t\t\t\t\"Namespace A{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#4\");\n\t\t}\n\t\t[Test]\n\t\tpublic void TypeTest ()\n\t\t{\n\t\t\tcodeNamespace.Types.Add (new CodeTypeDeclaration (\"Person\"));\n\t\t\tAssert.AreEqual (string.Format(CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Public Class Person{0}\" +\n\t\t\t\t\"End Class{0}\", NewLine), Generate (), \"#A1\");\n\t\t\tCodeGeneratorOptions options = new CodeGeneratorOptions ();\n\t\t\toptions.BlankLinesBetweenMembers = false;\n\t\t\tAssert.AreEqual (string.Format(CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Public Class Person{0}\" +\n\t\t\t\t\"End Class{0}\", NewLine), Generate (options), \"#A2\");\n\t\t\tcodeNamespace.Name = \"A\";\n\t\t\tAssert.AreEqual (string.Format(CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace A{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class Person{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#B1\");\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace A{0}\" +\n\t\t\t\t\"    Public Class Person{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (options), \"#B2\");\n\t\t}\n#if NET_2_0\n\t\t[Test]\n\t\tpublic void Type_TypeParameters ()\n\t\t{\n\t\t\tcodeNamespace.Name = \"SomeNS\";\n\t\t\tCodeTypeDeclaration type = new CodeTypeDeclaration (\"SomeClass\");\n\t\t\tcodeNamespace.Types.Add (type);\n\t\t\ttype.TypeParameters.Add (new CodeTypeParameter (\"T\"));\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass(Of T){0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#1\");\n\t\t\ttype.TypeParameters.Add (new CodeTypeParameter (\"As\"));\n\t\t\ttype.TypeParameters.Add (new CodeTypeParameter (\"New\"));\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass(Of T, As, New){0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#2\");\n\t\t\tCodeTypeParameter typeParamR = new CodeTypeParameter (\"R\");\n\t\t\ttypeParamR.Constraints.Add (new CodeTypeReference (typeof (IComparable)));\n\t\t\ttype.TypeParameters.Add (typeParamR);\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass(Of T, As, New, R As System.IComparable){0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#3\");\n\t\t\ttype.TypeParameters.Add (new CodeTypeParameter (\"S\"));\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass(Of T, As, New, R As System.IComparable, S){0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#4\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Type_TypeParameters_Constraints ()\n\t\t{\n\t\t\tcodeNamespace.Name = \"SomeNS\";\n\t\t\tCodeTypeDeclaration type = new CodeTypeDeclaration (\"SomeClass\");\n\t\t\tcodeNamespace.Types.Add (type);\n\t\t\tCodeTypeParameter typeParamT = new CodeTypeParameter (\"T\");\n\t\t\ttypeParamT.Constraints.Add (new CodeTypeReference (typeof (IComparable)));\n\t\t\ttype.TypeParameters.Add (typeParamT);\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass(Of T As System.IComparable){0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#1\");\n\t\t\ttypeParamT.Constraints.Add (new CodeTypeReference (typeof (ICloneable)));\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass(Of T As  {{System.IComparable, System.ICloneable}}){0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#2\");\n\t\t\ttypeParamT.HasConstructorConstraint = true;\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass(Of T As  {{System.IComparable, System.ICloneable, New}}){0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#3\");\n\t\t\tCodeTypeParameter typeParamS = new CodeTypeParameter (\"S\");\n\t\t\ttypeParamS.Constraints.Add (new CodeTypeReference (typeof (IDisposable)));\n\t\t\ttype.TypeParameters.Add (typeParamS);\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass(Of T As  {{System.IComparable, System.ICloneable, New}}, S As System.IDisposable){0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#4\");\n\t\t\tCodeTypeParameter typeParamR = new CodeTypeParameter (\"R\");\n\t\t\ttypeParamR.HasConstructorConstraint = true;\n\t\t\ttype.TypeParameters.Add (typeParamR);\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass(Of T As  {{System.IComparable, System.ICloneable, New}}, S As System.IDisposable, R As New){0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#5\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Type_TypeParameters_ConstructorConstraint ()\n\t\t{\n\t\t\tcodeNamespace.Name = \"SomeNS\";\n\t\t\tCodeTypeDeclaration type = new CodeTypeDeclaration (\"SomeClass\");\n\t\t\tcodeNamespace.Types.Add (type);\n\t\t\tCodeTypeParameter typeParam = new CodeTypeParameter (\"T\");\n\t\t\ttypeParam.HasConstructorConstraint = true;\n\t\t\ttype.TypeParameters.Add (typeParam);\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass(Of T As New){0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate ());\n\t\t}\n\t\t[Test]\n\t\tpublic void Method_TypeParameters ()\n\t\t{\n\t\t\tcodeNamespace.Name = \"SomeNS\";\n\t\t\tCodeTypeDeclaration type = new CodeTypeDeclaration (\"SomeClass\");\n\t\t\tcodeNamespace.Types.Add (type);\n\t\t\tCodeMemberMethod method = new CodeMemberMethod ();\n\t\t\tmethod.Name = \"SomeMethod\";\n\t\t\ttype.Members.Add (method);\n\t\t\tmethod.TypeParameters.Add (new CodeTypeParameter (\"T\"));\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T)(){0}\" +\n\t\t\t\t\"        End Sub{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#1\");\n\t\t\tmethod.TypeParameters.Add (new CodeTypeParameter (\"As\"));\n\t\t\tmethod.TypeParameters.Add (new CodeTypeParameter (\"New\"));\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T, As, New)(){0}\" +\n\t\t\t\t\"        End Sub{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#2\");\n\t\t\tCodeTypeParameter typeParamR = new CodeTypeParameter (\"R\");\n\t\t\ttypeParamR.Constraints.Add (new CodeTypeReference (typeof (IComparable)));\n\t\t\tmethod.TypeParameters.Add (typeParamR);\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T, As, New, R As System.IComparable)(){0}\" +\n\t\t\t\t\"        End Sub{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#3\");\n\t\t\tmethod.TypeParameters.Add (new CodeTypeParameter (\"S\"));\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T, As, New, R As System.IComparable, S)(){0}\" +\n\t\t\t\t\"        End Sub{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#4\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Method_TypeParameters_Constraints ()\n\t\t{\n\t\t\tcodeNamespace.Name = \"SomeNS\";\n\t\t\tCodeTypeDeclaration type = new CodeTypeDeclaration (\"SomeClass\");\n\t\t\tcodeNamespace.Types.Add (type);\n\t\t\tCodeMemberMethod method = new CodeMemberMethod ();\n\t\t\tmethod.Name = \"SomeMethod\";\n\t\t\ttype.Members.Add (method);\n\t\t\tCodeTypeParameter typeParamT = new CodeTypeParameter (\"T\");\n\t\t\ttypeParamT.Constraints.Add (new CodeTypeReference (typeof (IComparable)));\n\t\t\tmethod.TypeParameters.Add (typeParamT);\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As System.IComparable)(){0}\" +\n\t\t\t\t\"        End Sub{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#1\");\n\t\t\ttypeParamT.Constraints.Add (new CodeTypeReference (typeof (ICloneable)));\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable}})(){0}\" +\n\t\t\t\t\"        End Sub{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#2\");\n\t\t\ttypeParamT.HasConstructorConstraint = true;\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable, New}})(){0}\" +\n\t\t\t\t\"        End Sub{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\", NewLine), Generate (), \"#3\");\n\t\t\tCodeTypeParameter typeParamS = new CodeTypeParameter (\"S\");\n\t\t\ttypeParamS.Constraints.Add (new CodeTypeReference (typeof (IDisposable)));\n\t\t\tmethod.TypeParameters.Add (typeParamS);\n\t\t\tAssert.AreEqual (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"{0}\" +\n\t\t\t\t\"Namespace SomeNS{0}\" +\n", "answers": ["\t\t\t\t\"    {0}\" +"], "length": 1270, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "94882776509c3517b2a5b0fb0011ad7ad9274ec93f92e897"}
{"input": "", "context": "\"\"\"Container and Namespace classes\"\"\"\nimport anydbm\nimport cPickle\nimport logging\nimport os\nimport time\nimport beaker.util as util\nfrom beaker.exceptions import CreationAbortedError, MissingCacheParameter\nfrom beaker.synchronization import _threading, file_synchronizer, \\\n     mutex_synchronizer, NameLock, null_synchronizer\n__all__ = ['Value', 'Container', 'ContainerContext',\n           'MemoryContainer', 'DBMContainer', 'NamespaceManager',\n           'MemoryNamespaceManager', 'DBMNamespaceManager', 'FileContainer',\n           'OpenResourceNamespaceManager',\n           'FileNamespaceManager', 'CreationAbortedError']\nlogger = logging.getLogger('beaker.container')\nif logger.isEnabledFor(logging.DEBUG):\n    debug = logger.debug\nelse:\n    def debug(message, *args):\n        pass\nclass NamespaceManager(object):\n    \"\"\"Handles dictionary operations and locking for a namespace of\n    values.\n    \n    The implementation for setting and retrieving the namespace data is\n    handled by subclasses.\n    \n    NamespaceManager may be used alone, or may be privately accessed by\n    one or more Container objects.  Container objects provide per-key\n    services like expiration times and automatic recreation of values.\n    \n    Multiple NamespaceManagers created with a particular name will all\n    share access to the same underlying datasource and will attempt to\n    synchronize against a common mutex object.  The scope of this\n    sharing may be within a single process or across multiple\n    processes, depending on the type of NamespaceManager used.\n    \n    The NamespaceManager itself is generally threadsafe, except in the\n    case of the DBMNamespaceManager in conjunction with the gdbm dbm\n    implementation.\n    \"\"\"\n    \n    @classmethod\n    def _init_dependencies(cls):\n        pass\n        \n    def __init__(self, namespace):\n        self._init_dependencies()\n        self.namespace = namespace\n        \n    def get_creation_lock(self, key):\n        raise NotImplementedError()\n    def do_remove(self):\n        raise NotImplementedError()\n    def acquire_read_lock(self):\n        pass\n    def release_read_lock(self):\n        pass\n    def acquire_write_lock(self, wait=True):\n        return True\n    def release_write_lock(self):\n        pass\n    def has_key(self, key):\n        return self.__contains__(key)\n    def __getitem__(self, key):\n        raise NotImplementedError()\n        \n    def __setitem__(self, key, value):\n        raise NotImplementedError()\n    \n    def set_value(self, key, value, expiretime=None):\n        \"\"\"Optional set_value() method called by Value.\n        \n        Allows an expiretime to be passed, for namespace\n        implementations which can prune their collections\n        using expiretime.\n        \n        \"\"\"\n        self[key] = value\n        \n    def __contains__(self, key):\n        raise NotImplementedError()\n    def __delitem__(self, key):\n        raise NotImplementedError()\n    \n    def keys(self):\n        raise NotImplementedError()\n    \n    def remove(self):\n        self.do_remove()\n        \nclass OpenResourceNamespaceManager(NamespaceManager):\n    \"\"\"A NamespaceManager where read/write operations require opening/\n    closing of a resource which is possibly mutexed.\n    \n    \"\"\"\n    def __init__(self, namespace):\n        NamespaceManager.__init__(self, namespace)\n        self.access_lock = self.get_access_lock()\n        self.openers = 0\n        self.mutex = _threading.Lock()\n    def get_access_lock(self):\n        raise NotImplementedError()\n    def do_open(self, flags): \n        raise NotImplementedError()\n    def do_close(self): \n        raise NotImplementedError()\n    def acquire_read_lock(self): \n        self.access_lock.acquire_read_lock()\n        try:\n            self.open('r', checkcount = True)\n        except:\n            self.access_lock.release_read_lock()\n            raise\n            \n    def release_read_lock(self):\n        try:\n            self.close(checkcount = True)\n        finally:\n            self.access_lock.release_read_lock()\n        \n    def acquire_write_lock(self, wait=True): \n        r = self.access_lock.acquire_write_lock(wait)\n        try:\n            if (wait or r): \n                self.open('c', checkcount = True)\n            return r\n        except:\n            self.access_lock.release_write_lock()\n            raise\n            \n    def release_write_lock(self): \n        try:\n            self.close(checkcount=True)\n        finally:\n            self.access_lock.release_write_lock()\n    def open(self, flags, checkcount=False):\n        self.mutex.acquire()\n        try:\n            if checkcount:\n                if self.openers == 0: \n                    self.do_open(flags)\n                self.openers += 1\n            else:\n                self.do_open(flags)\n                self.openers = 1\n        finally:\n            self.mutex.release()\n    def close(self, checkcount=False):\n        self.mutex.acquire()\n        try:\n            if checkcount:\n                self.openers -= 1\n                if self.openers == 0: \n                    self.do_close()\n            else:\n                if self.openers > 0:\n                    self.do_close()\n                self.openers = 0\n        finally:\n            self.mutex.release()\n    def remove(self):\n        self.access_lock.acquire_write_lock()\n        try:\n            self.close(checkcount=False)\n            self.do_remove()\n        finally:\n            self.access_lock.release_write_lock()\nclass Value(object):\n    __slots__ = 'key', 'createfunc', 'expiretime', 'expire_argument', 'starttime', 'storedtime',\\\n                'namespace'\n    def __init__(self, key, namespace, createfunc=None, expiretime=None, starttime=None):\n        self.key = key\n        self.createfunc = createfunc\n        self.expire_argument = expiretime\n        self.starttime = starttime\n        self.storedtime = -1\n        self.namespace = namespace\n    def has_value(self):\n        \"\"\"return true if the container has a value stored.\n        This is regardless of it being expired or not.\n        \"\"\"\n        self.namespace.acquire_read_lock()\n        try:    \n            return self.namespace.has_key(self.key)\n        finally:\n            self.namespace.release_read_lock()\n    def can_have_value(self):\n        return self.has_current_value() or self.createfunc is not None  \n    def has_current_value(self):\n        self.namespace.acquire_read_lock()\n        try:    \n            has_value = self.namespace.has_key(self.key)\n            if has_value:\n                try:\n                    stored, expired, value = self._get_value()\n                    return not self._is_expired(stored, expired)\n                except KeyError:\n                    pass\n            return False\n        finally:\n            self.namespace.release_read_lock()\n    def _is_expired(self, storedtime, expiretime):\n        \"\"\"Return true if this container's value is expired.\"\"\"\n        return (\n            (\n                self.starttime is not None and\n                storedtime < self.starttime\n            )\n            or\n            (\n                expiretime is not None and\n                time.time() >= expiretime + storedtime\n            )\n        )\n    def get_value(self):\n        self.namespace.acquire_read_lock()\n        try:\n            has_value = self.has_value()\n            if has_value:\n                try:\n                    stored, expired, value = self._get_value()\n                    if not self._is_expired(stored, expired):\n                        return value\n                except KeyError:\n                    # guard against un-mutexed backends raising KeyError\n                    has_value = False\n                    \n            if not self.createfunc:\n                raise KeyError(self.key)\n        finally:\n            self.namespace.release_read_lock()\n        has_createlock = False\n        creation_lock = self.namespace.get_creation_lock(self.key)\n        if has_value:\n            if not creation_lock.acquire(wait=False):\n                debug(\"get_value returning old value while new one is created\")\n                return value\n            else:\n                debug(\"lock_creatfunc (didnt wait)\")\n                has_createlock = True\n        if not has_createlock:\n            debug(\"lock_createfunc (waiting)\")\n            creation_lock.acquire()\n            debug(\"lock_createfunc (waited)\")\n        try:\n            # see if someone created the value already\n            self.namespace.acquire_read_lock()\n            try:\n                if self.has_value():\n                    try:\n                        stored, expired, value = self._get_value()\n                        if not self._is_expired(stored, expired):\n                            return value\n                    except KeyError:\n                        # guard against un-mutexed backends raising KeyError\n                        pass\n            finally:\n                self.namespace.release_read_lock()\n            debug(\"get_value creating new value\")\n            v = self.createfunc()\n            self.set_value(v)\n            return v\n        finally:\n            creation_lock.release()\n            debug(\"released create lock\")\n    def _get_value(self):\n        value = self.namespace[self.key]\n        try:\n            stored, expired, value = value\n        except ValueError:\n            if not len(value) == 2:\n                raise\n            # Old format: upgrade\n            stored, value = value\n            expired = self.expire_argument\n            debug(\"get_value upgrading time %r expire time %r\", stored, self.expire_argument)\n            self.namespace.release_read_lock()\n            self.set_value(value, stored)\n            self.namespace.acquire_read_lock()\n        except TypeError:\n            # occurs when the value is None.  memcached \n            # may yank the rug from under us in which case \n            # that's the result\n            raise KeyError(self.key)            \n        return stored, expired, value\n    def set_value(self, value, storedtime=None):\n        self.namespace.acquire_write_lock()\n        try:\n            if storedtime is None:\n                storedtime = time.time()\n            debug(\"set_value stored time %r expire time %r\", storedtime, self.expire_argument)\n            self.namespace.set_value(self.key, (storedtime, self.expire_argument, value))\n        finally:\n            self.namespace.release_write_lock()\n    def clear_value(self):\n        self.namespace.acquire_write_lock()\n        try:\n            debug(\"clear_value\")\n            if self.namespace.has_key(self.key):\n                try:\n                    del self.namespace[self.key]\n                except KeyError:\n                    # guard against un-mutexed backends raising KeyError\n                    pass\n            self.storedtime = -1\n        finally:\n            self.namespace.release_write_lock()\nclass AbstractDictionaryNSManager(NamespaceManager):\n    \"\"\"A subclassable NamespaceManager that places data in a dictionary.\n    \n    Subclasses should provide a \"dictionary\" attribute or descriptor\n    which returns a dict-like object.   The dictionary will store keys\n    that are local to the \"namespace\" attribute of this manager, so\n    ensure that the dictionary will not be used by any other namespace.\n    e.g.::\n    \n        import collections\n        cached_data = collections.defaultdict(dict)\n        \n        class MyDictionaryManager(AbstractDictionaryNSManager):\n            def __init__(self, namespace):\n                AbstractDictionaryNSManager.__init__(self, namespace)\n                self.dictionary = cached_data[self.namespace]\n                \n    The above stores data in a global dictionary called \"cached_data\",\n    which is structured as a dictionary of dictionaries, keyed\n    first on namespace name to a sub-dictionary, then on actual\n    cache key to value.\n    \n    \"\"\"\n    \n    def get_creation_lock(self, key):\n        return NameLock(\n            identifier=\"memorynamespace/funclock/%s/%s\" % (self.namespace, key),\n            reentrant=True\n        )\n    def __getitem__(self, key): \n        return self.dictionary[key]\n    def __contains__(self, key): \n        return self.dictionary.__contains__(key)\n    def has_key(self, key): \n        return self.dictionary.__contains__(key)\n        \n    def __setitem__(self, key, value):\n        self.dictionary[key] = value\n    \n    def __delitem__(self, key):\n        del self.dictionary[key]\n    def do_remove(self):\n        self.dictionary.clear()\n        \n    def keys(self):\n        return self.dictionary.keys()\n    \nclass MemoryNamespaceManager(AbstractDictionaryNSManager):\n    namespaces = util.SyncDict()\n    def __init__(self, namespace, **kwargs):\n        AbstractDictionaryNSManager.__init__(self, namespace)\n        self.dictionary = MemoryNamespaceManager.namespaces.get(self.namespace,\n                                                                dict)\nclass DBMNamespaceManager(OpenResourceNamespaceManager):\n    def __init__(self, namespace, dbmmodule=None, data_dir=None, \n            dbm_dir=None, lock_dir=None, digest_filenames=True, **kwargs):\n        self.digest_filenames = digest_filenames\n        \n        if not dbm_dir and not data_dir:\n            raise MissingCacheParameter(\"data_dir or dbm_dir is required\")\n        elif dbm_dir:\n            self.dbm_dir = dbm_dir\n        else:\n            self.dbm_dir = data_dir + \"/container_dbm\"\n        util.verify_directory(self.dbm_dir)\n        \n        if not lock_dir and not data_dir:\n            raise MissingCacheParameter(\"data_dir or lock_dir is required\")\n        elif lock_dir:\n            self.lock_dir = lock_dir\n        else:\n            self.lock_dir = data_dir + \"/container_dbm_lock\"\n        util.verify_directory(self.lock_dir)\n        self.dbmmodule = dbmmodule or anydbm\n        self.dbm = None\n        OpenResourceNamespaceManager.__init__(self, namespace)\n        self.file = util.encoded_path(root= self.dbm_dir,\n                                      identifiers=[self.namespace],\n                                      extension='.dbm',\n                                      digest_filenames=self.digest_filenames)\n        \n        debug(\"data file %s\", self.file)\n        self._checkfile()\n    def get_access_lock(self):\n        return file_synchronizer(identifier=self.namespace,\n                                 lock_dir=self.lock_dir)\n                                 \n    def get_creation_lock(self, key):\n        return file_synchronizer(\n                    identifier = \"dbmcontainer/funclock/%s\" % self.namespace, \n                    lock_dir=self.lock_dir\n                )\n    def file_exists(self, file):\n        if os.access(file, os.F_OK): \n            return True\n        else:\n            for ext in ('db', 'dat', 'pag', 'dir'):\n                if os.access(file + os.extsep + ext, os.F_OK):\n                    return True\n                    \n        return False\n    \n    def _checkfile(self):\n        if not self.file_exists(self.file):\n            g = self.dbmmodule.open(self.file, 'c') \n            g.close()\n                \n    def get_filenames(self):\n        list = []\n        if os.access(self.file, os.F_OK):\n            list.append(self.file)\n            \n        for ext in ('pag', 'dir', 'db', 'dat'):\n", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "length": 1142, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "d63d19ecf556ea2e1d2bd315c79a39046985507ff2dd2eb9"}
{"input": "", "context": "/*\n * Copyright 1997-2008 Sun Microsystems, Inc.  All Rights Reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Sun designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Sun in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,\n * CA 95054 USA or visit www.sun.com if you need additional information or\n * have any questions.\n */\npackage javax.swing;\nimport java.awt.*;\nimport java.awt.image.*;\nimport java.beans.ConstructorProperties;\nimport java.beans.Transient;\nimport java.net.URL;\nimport java.io.Serializable;\nimport java.io.ObjectOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.Locale;\nimport javax.accessibility.*;\nimport sun.awt.AppContext;\nimport java.lang.reflect.Field;\nimport java.security.PrivilegedAction;\nimport java.security.AccessController;\n/**\n * An implementation of the Icon interface that paints Icons\n * from Images. Images that are created from a URL, filename or byte array\n * are preloaded using MediaTracker to monitor the loaded state\n * of the image.\n *\n * <p>\n * For further information and examples of using image icons, see\n * <a href=\"http://java.sun.com/docs/books/tutorial/uiswing/misc/icon.html\">How to Use Icons</a>\n * in <em>The Java Tutorial.</em>\n *\n * <p>\n * <strong>Warning:</strong>\n * Serialized objects of this class will not be compatible with\n * future Swing releases. The current serialization support is\n * appropriate for short term storage or RMI between applications running\n * the same version of Swing.  As of 1.4, support for long term storage\n * of all JavaBeans<sup><font size=\"-2\">TM</font></sup>\n * has been added to the <code>java.beans</code> package.\n * Please see {@link java.beans.XMLEncoder}.\n *\n * @author Jeff Dinkins\n * @author Lynn Monsanto\n */\npublic class ImageIcon implements Icon, Serializable, Accessible {\n    /* Keep references to the filename and location so that\n     * alternate persistence schemes have the option to archive\n     * images symbolically rather than including the image data\n     * in the archive.\n     */\n    transient private String filename;\n    transient private URL location;\n    transient Image image;\n    transient int loadStatus = 0;\n    ImageObserver imageObserver;\n    String description = null;\n    protected final static Component component;\n    protected final static MediaTracker tracker;\n    static {\n        component = new Component() {};\n        AccessController.doPrivileged(new PrivilegedAction<Object>() {\n            public Object run() {\n                try {\n                    // 6482575 - clear the appContext field so as not to leak it\n                    Field appContextField =\n                                 Component.class.getDeclaredField(\"appContext\");\n                    appContextField.setAccessible(true);\n                    appContextField.set(component, null);\n                }\n                catch (NoSuchFieldException e) {\n                    e.printStackTrace();\n                }\n                catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                }\n                return null;\n            }\n        });\n        tracker = new MediaTracker(component);\n    }\n    /**\n     * Id used in loading images from MediaTracker.\n     */\n    private static int mediaTrackerID;\n    private final static Object TRACKER_KEY = new StringBuilder(\"TRACKER_KEY\");\n    int width = -1;\n    int height = -1;\n    /**\n     * Creates an ImageIcon from the specified file. The image will\n     * be preloaded by using MediaTracker to monitor the loading state\n     * of the image.\n     * @param filename the name of the file containing the image\n     * @param description a brief textual description of the image\n     * @see #ImageIcon(String)\n     */\n    public ImageIcon(String filename, String description) {\n        image = Toolkit.getDefaultToolkit().getImage(filename);\n        if (image == null) {\n            return;\n        }\n        this.filename = filename;\n        this.description = description;\n        loadImage(image);\n    }\n    /**\n     * Creates an ImageIcon from the specified file. The image will\n     * be preloaded by using MediaTracker to monitor the loading state\n     * of the image. The specified String can be a file name or a\n     * file path. When specifying a path, use the Internet-standard\n     * forward-slash (\"/\") as a separator.\n     * (The string is converted to an URL, so the forward-slash works\n     * on all systems.)\n     * For example, specify:\n     * <pre>\n     *    new ImageIcon(\"images/myImage.gif\") </pre>\n     * The description is initialized to the <code>filename</code> string.\n     *\n     * @param filename a String specifying a filename or path\n     * @see #getDescription\n     */\n    @ConstructorProperties({\"description\"})\n    public ImageIcon (String filename) {\n        this(filename, filename);\n    }\n    /**\n     * Creates an ImageIcon from the specified URL. The image will\n     * be preloaded by using MediaTracker to monitor the loaded state\n     * of the image.\n     * @param location the URL for the image\n     * @param description a brief textual description of the image\n     * @see #ImageIcon(String)\n     */\n    public ImageIcon(URL location, String description) {\n        image = Toolkit.getDefaultToolkit().getImage(location);\n        if (image == null) {\n            return;\n        }\n        this.location = location;\n        this.description = description;\n        loadImage(image);\n    }\n    /**\n     * Creates an ImageIcon from the specified URL. The image will\n     * be preloaded by using MediaTracker to monitor the loaded state\n     * of the image.\n     * The icon's description is initialized to be\n     * a string representation of the URL.\n     * @param location the URL for the image\n     * @see #getDescription\n     */\n    public ImageIcon (URL location) {\n        this(location, location.toExternalForm());\n    }\n    /**\n     * Creates an ImageIcon from the image.\n     * @param image the image\n     * @param description a brief textual description of the image\n     */\n    public ImageIcon(Image image, String description) {\n        this(image);\n        this.description = description;\n    }\n    /**\n     * Creates an ImageIcon from an image object.\n     * If the image has a \"comment\" property that is a string,\n     * then the string is used as the description of this icon.\n     * @param image the image\n     * @see #getDescription\n     * @see java.awt.Image#getProperty\n     */\n    public ImageIcon (Image image) {\n        this.image = image;\n        Object o = image.getProperty(\"comment\", imageObserver);\n        if (o instanceof String) {\n            description = (String) o;\n        }\n        loadImage(image);\n    }\n    /**\n     * Creates an ImageIcon from an array of bytes which were\n     * read from an image file containing a supported image format,\n     * such as GIF, JPEG, or (as of 1.3) PNG.\n     * Normally this array is created\n     * by reading an image using Class.getResourceAsStream(), but\n     * the byte array may also be statically stored in a class.\n     *\n     * @param  imageData an array of pixels in an image format supported\n     *         by the AWT Toolkit, such as GIF, JPEG, or (as of 1.3) PNG\n     * @param  description a brief textual description of the image\n     * @see    java.awt.Toolkit#createImage\n     */\n    public ImageIcon (byte[] imageData, String description) {\n        this.image = Toolkit.getDefaultToolkit().createImage(imageData);\n        if (image == null) {\n            return;\n        }\n        this.description = description;\n        loadImage(image);\n    }\n    /**\n     * Creates an ImageIcon from an array of bytes which were\n     * read from an image file containing a supported image format,\n     * such as GIF, JPEG, or (as of 1.3) PNG.\n     * Normally this array is created\n     * by reading an image using Class.getResourceAsStream(), but\n     * the byte array may also be statically stored in a class.\n     * If the resulting image has a \"comment\" property that is a string,\n     * then the string is used as the description of this icon.\n     *\n     * @param  imageData an array of pixels in an image format supported by\n     *             the AWT Toolkit, such as GIF, JPEG, or (as of 1.3) PNG\n     * @see    java.awt.Toolkit#createImage\n     * @see #getDescription\n     * @see java.awt.Image#getProperty\n     */\n    public ImageIcon (byte[] imageData) {\n        this.image = Toolkit.getDefaultToolkit().createImage(imageData);\n        if (image == null) {\n            return;\n        }\n        Object o = image.getProperty(\"comment\", imageObserver);\n        if (o instanceof String) {\n            description = (String) o;\n        }\n        loadImage(image);\n    }\n    /**\n     * Creates an uninitialized image icon.\n     */\n    public ImageIcon() {\n    }\n    /**\n     * Loads the image, returning only when the image is loaded.\n     * @param image the image\n     */\n    protected void loadImage(Image image) {\n        MediaTracker mTracker = getTracker();\n        synchronized(mTracker) {\n            int id = getNextID();\n            mTracker.addImage(image, id);\n            try {\n                mTracker.waitForID(id, 0);\n            } catch (InterruptedException e) {\n                System.out.println(\"INTERRUPTED while loading Image\");\n            }\n            loadStatus = mTracker.statusID(id, false);\n            mTracker.removeImage(image, id);\n            width = image.getWidth(imageObserver);\n            height = image.getHeight(imageObserver);\n        }\n    }\n    /**\n     * Returns an ID to use with the MediaTracker in loading an image.\n     */\n    private int getNextID() {\n        synchronized(getTracker()) {\n            return ++mediaTrackerID;\n        }\n    }\n    /**\n     * Returns the MediaTracker for the current AppContext, creating a new\n     * MediaTracker if necessary.\n     */\n    private MediaTracker getTracker() {\n        Object trackerObj;\n        AppContext ac = AppContext.getAppContext();\n        // Opt: Only synchronize if trackerObj comes back null?\n        // If null, synchronize, re-check for null, and put new tracker\n        synchronized(ac) {\n            trackerObj = ac.get(TRACKER_KEY);\n            if (trackerObj == null) {\n                Component comp = new Component() {};\n                trackerObj = new MediaTracker(comp);\n                ac.put(TRACKER_KEY, trackerObj);\n            }\n        }\n        return (MediaTracker) trackerObj;\n    }\n    /**\n     * Returns the status of the image loading operation.\n     * @return the loading status as defined by java.awt.MediaTracker\n     * @see java.awt.MediaTracker#ABORTED\n     * @see java.awt.MediaTracker#ERRORED\n     * @see java.awt.MediaTracker#COMPLETE\n     */\n    public int getImageLoadStatus() {\n        return loadStatus;\n    }\n    /**\n     * Returns this icon's <code>Image</code>.\n     * @return the <code>Image</code> object for this <code>ImageIcon</code>\n     */\n    @Transient\n    public Image getImage() {\n        return image;\n    }\n    /**\n     * Sets the image displayed by this icon.\n     * @param image the image\n     */\n    public void setImage(Image image) {\n        this.image = image;\n        loadImage(image);\n    }\n    /**\n     * Gets the description of the image.  This is meant to be a brief\n     * textual description of the object.  For example, it might be\n     * presented to a blind user to give an indication of the purpose\n     * of the image.\n     * The description may be null.\n     *\n     * @return a brief textual description of the image\n     */\n    public String getDescription() {\n        return description;\n    }\n    /**\n     * Sets the description of the image.  This is meant to be a brief\n     * textual description of the object.  For example, it might be\n     * presented to a blind user to give an indication of the purpose\n     * of the image.\n     * @param description a brief textual description of the image\n     */\n    public void setDescription(String description) {\n        this.description = description;\n    }\n    /**\n     * Paints the icon.\n     * The top-left corner of the icon is drawn at\n     * the point (<code>x</code>, <code>y</code>)\n     * in the coordinate space of the graphics context <code>g</code>.\n     * If this icon has no image observer,\n     * this method uses the <code>c</code> component\n     * as the observer.\n     *\n     * @param c the component to be used as the observer\n     *          if this icon has no image observer\n     * @param g the graphics context\n     * @param x the X coordinate of the icon's top-left corner\n     * @param y the Y coordinate of the icon's top-left corner\n     */\n    public synchronized void paintIcon(Component c, Graphics g, int x, int y) {\n        if(imageObserver == null) {\n           g.drawImage(image, x, y, c);\n        } else {\n           g.drawImage(image, x, y, imageObserver);\n        }\n    }\n    /**\n     * Gets the width of the icon.\n     *\n     * @return the width in pixels of this icon\n     */\n    public int getIconWidth() {\n        return width;\n    }\n    /**\n     * Gets the height of the icon.\n     *\n     * @return the height in pixels of this icon\n     */\n    public int getIconHeight() {\n        return height;\n    }\n    /**\n     * Sets the image observer for the image.  Set this\n     * property if the ImageIcon contains an animated GIF, so\n     * the observer is notified to update its display.\n     * For example:\n     * <pre>\n     *     icon = new ImageIcon(...)\n     *     button.setIcon(icon);\n     *     icon.setImageObserver(button);\n     * </pre>\n     *\n     * @param observer the image observer\n     */\n    public void setImageObserver(ImageObserver observer) {\n        imageObserver = observer;\n    }\n    /**\n     * Returns the image observer for the image.\n     *\n     * @return the image observer, which may be null\n     */\n    @Transient\n    public ImageObserver getImageObserver() {\n        return imageObserver;\n    }\n    /**\n     * Returns a string representation of this image.\n     *\n     * @return a string representing this image\n     */\n    public String toString() {\n", "answers": ["        if (description != null) {"], "length": 1934, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "4d31e91889e97c54c4b6c414d91d0006e804cd0858d92cc4"}
{"input": "", "context": "# -*- coding: utf-8 -*-\nfrom ast import literal_eval\nfrom pprint import pformat\nimport os\nimport shutil\nfrom errbot import BotPlugin, botcmd\nfrom errbot.plugin_manager import PluginConfigurationException, PluginActivationException\nfrom errbot.repo_manager import RepoException\nclass Plugins(BotPlugin):\n    @botcmd(admin_only=True)\n    def repos_install(self, _, args):\n        \"\"\" install a plugin repository from the given source or a known public repo (see !repos to find those).\n        for example from a known repo : !install err-codebot\n        for example a git url : git@github.com:gbin/plugin.git\n        or an url towards a tar.gz archive : http://www.gootz.net/plugin-latest.tar.gz\n        \"\"\"\n        args = args.strip()\n        if not args:\n            yield \"Please specify a repository listed in '!repos' or \" \\\n                  \"give me the URL to a git repository that I should clone for you.\"\n            return\n        try:\n            yield \"Installing %s...\" % args\n            local_path = self._bot.repo_manager.install_repo(args)\n            errors = self._bot.plugin_manager.update_dynamic_plugins()\n            if errors:\n                yield 'Some plugins are generating errors:\\n' + '\\n'.join(errors.values())\n                # if the load of the plugin failed, uninstall cleanly teh repo\n                for path in errors.keys():\n                    if path.startswith(local_path):\n                        yield 'Removing %s as it did not load correctly.' % local_path\n                        shutil.rmtree(local_path)\n            else:\n                yield (\"A new plugin repository has been installed correctly from \"\n                       \"%s. Refreshing the plugins commands...\" % args)\n            loading_errors = self._bot.plugin_manager.activate_non_started_plugins()\n            if loading_errors:\n                yield loading_errors\n            yield \"Plugins reloaded.\"\n        except RepoException as re:\n            yield \"Error installing the repo: %s\" % re\n    @botcmd(admin_only=True)\n    def repos_uninstall(self, _, repo_name):\n        \"\"\" uninstall a plugin repository by name.\n        \"\"\"\n        if not repo_name.strip():\n            yield \"You should have a repo name as argument\"\n            return\n        repos = self._bot.repo_manager.get_installed_plugin_repos()\n        if repo_name not in repos:\n            yield \"This repo is not installed check with \" + self._bot.prefix + \"repos the list of installed ones\"\n            return\n        plugin_path = os.path.join(self._bot.repo_manager.plugin_dir, repo_name)\n        self._bot.plugin_manager.remove_plugins_from_path(plugin_path)\n        self._bot.repo_manager.uninstall_repo(repo_name)\n        yield 'Repo %s removed.' % repo_name\n    @botcmd(template='repos')\n    def repos(self, _, args):\n        \"\"\" list the current active plugin repositories\n        \"\"\"\n        installed_repos = self._bot.repo_manager.get_installed_plugin_repos()\n        all_names = [name for name in installed_repos]\n        repos = {'repos': []}\n        for repo_name in all_names:\n            installed = False\n            if repo_name in installed_repos:\n                installed = True\n            from_index = self._bot.repo_manager.get_repo_from_index(repo_name)\n            if from_index is not None:\n                description = '\\n'.join(('%s: %s' % (plug.name, plug.documentation) for plug in from_index))\n            else:\n                description = 'No description.'\n            # installed, public, name, desc\n            repos['repos'].append((installed, from_index is not None, repo_name, description))\n        return repos\n    @botcmd(template='repos2')\n    def repos_search(self, _, args):\n        \"\"\" Searches the repo index.\n        for example: !repos search jenkins\n        \"\"\"\n        if not args:\n            # TODO(gbin): return all the repos.\n            return {'error': \"Please specify a keyword.\"}\n        return {'repos': self._bot.repo_manager.search_repos(args)}\n    @botcmd(split_args_with=' ', admin_only=True)\n    def repos_update(self, _, args):\n        \"\"\" update the bot and/or plugins\n        use : !repos update all\n        to update everything\n        or : !repos update repo_name repo_name ...\n        to update selectively some repos\n        \"\"\"\n        if 'all' in args:\n            results = self._bot.repo_manager.update_all_repos()\n        else:\n            results = self._bot.repo_manager.update_repos(args)\n        yield \"Start updating ... \"\n        for d, success, feedback in results:\n            if success:\n                yield \"Update of %s succeeded...\\n\\n%s\\n\\n\" % (d, feedback)\n            else:\n                yield \"Update of %s failed...\\n\\n%s\" % (d, feedback)\n            for plugin in self._bot.plugin_manager.getAllPlugins():\n                if plugin.path.startswith(d) and hasattr(plugin, 'is_activated') and plugin.is_activated:\n                    name = plugin.name\n                    yield '/me is reloading plugin %s' % name\n                    try:\n                        self._bot.plugin_manager.reload_plugin_by_name(plugin.name)\n                        yield \"Plugin %s reloaded.\" % plugin.name\n                    except PluginActivationException as pae:\n                        yield 'Error reactivating plugin %s: %s' % (plugin.name, pae)\n        yield \"Done.\"\n    @botcmd(split_args_with=' ', admin_only=True)\n    def plugin_config(self, _, args):\n        \"\"\" configure or get the configuration / configuration template for a specific plugin\n        ie.\n        !plugin config ExampleBot\n        could return a template if it is not configured:\n        {'LOGIN': 'example@example.com', 'PASSWORD': 'password', 'DIRECTORY': '/toto'}\n        Copy paste, adapt so can configure the plugin :\n        !plugin config ExampleBot {'LOGIN': 'my@email.com', 'PASSWORD': 'myrealpassword', 'DIRECTORY': '/tmp'}\n        It will then reload the plugin with this config.\n        You can at any moment retrieve the current values:\n        !plugin config ExampleBot\n        should return :\n        {'LOGIN': 'my@email.com', 'PASSWORD': 'myrealpassword', 'DIRECTORY': '/tmp'}\n        \"\"\"\n        plugin_name = args[0]\n        if self._bot.plugin_manager.is_plugin_blacklisted(plugin_name):\n            return 'Load this plugin first with ' + self._bot.prefix + 'load %s' % plugin_name\n        obj = self._bot.plugin_manager.get_plugin_obj_by_name(plugin_name)\n        if obj is None:\n            return 'Unknown plugin or the plugin could not load %s' % plugin_name\n        template_obj = obj.get_configuration_template()\n        if template_obj is None:\n            return 'This plugin is not configurable.'\n        if len(args) == 1:\n            response = (\"Default configuration for this plugin (you can copy and paste \"\n                        \"this directly as a command):\\n\\n\"\n                        \"```\\n{prefix}plugin config {plugin_name} \\n{config}\\n```\").format(\n                prefix=self._bot.prefix, plugin_name=plugin_name, config=pformat(template_obj))\n            current_config = self._bot.plugin_manager.get_plugin_configuration(plugin_name)\n            if current_config:\n                response += (\"\\n\\nCurrent configuration:\\n\\n\"\n                             \"```\\n{prefix}plugin config {plugin_name} \\n{config}\\n```\").format(\n                    prefix=self._bot.prefix, plugin_name=plugin_name, config=pformat(current_config))\n            return response\n        # noinspection PyBroadException\n        try:\n            real_config_obj = literal_eval(' '.join(args[1:]))\n        except Exception:\n            self.log.exception('Invalid expression for the configuration of the plugin')\n            return 'Syntax error in the given configuration'\n        if type(real_config_obj) != type(template_obj):\n            return 'It looks fishy, your config type is not the same as the template !'\n        self._bot.plugin_manager.set_plugin_configuration(plugin_name, real_config_obj)\n        try:\n            self._bot.plugin_manager.deactivate_plugin(plugin_name)\n        except PluginActivationException as pae:\n            return 'Error deactivating %s: %s' % (plugin_name, pae)\n        try:\n            self._bot.plugin_manager.activate_plugin(plugin_name)\n        except PluginConfigurationException as ce:\n            self.log.debug('Invalid configuration for the plugin, reverting the plugin to unconfigured.')\n            self._bot.plugin_manager.set_plugin_configuration(plugin_name, None)\n            return 'Incorrect plugin configuration: %s' % ce\n        except PluginActivationException as pae:\n            return 'Error activating plugin: %s' % pae\n        return 'Plugin configuration done.'\n    def formatted_plugin_list(self, active_only=True):\n        \"\"\"\n        Return a formatted, plain-text list of loaded plugins.\n        When active_only=True, this will only return plugins which\n        are actually active. Otherwise, it will also include inactive\n        (blacklisted) plugins.\n        \"\"\"\n        if active_only:\n            all_plugins = self._bot.plugin_manager.get_all_active_plugin_names()\n        else:\n", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "length": 833, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "50511e2d36d05cdb890a54b72403a62d4a131cdfd6350426"}
{"input": "", "context": "#!/usr/bin/python\nfrom __future__ import (absolute_import, division, print_function)\n# Copyright 2019 Fortinet, Inc.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n__metaclass__ = type\nANSIBLE_METADATA = {'status': ['preview'],\n                    'supported_by': 'community',\n                    'metadata_version': '1.1'}\nDOCUMENTATION = '''\n---\nmodule: fortios_system_switch_interface\nshort_description: Configure software switch interfaces by grouping physical and WiFi interfaces in Fortinet's FortiOS and FortiGate.\ndescription:\n    - This module is able to configure a FortiGate or FortiOS (FOS) device by allowing the\n      user to set and modify system feature and switch_interface category.\n      Examples include all parameters and values need to be adjusted to datasources before usage.\n      Tested with FOS v6.0.5\nversion_added: \"2.9\"\nauthor:\n    - Miguel Angel Munoz (@mamunozgonzalez)\n    - Nicolas Thomas (@thomnico)\nnotes:\n    - Requires fortiosapi library developed by Fortinet\n    - Run as a local_action in your playbook\nrequirements:\n    - fortiosapi>=0.9.8\noptions:\n    host:\n        description:\n            - FortiOS or FortiGate IP address.\n        type: str\n        required: false\n    username:\n        description:\n            - FortiOS or FortiGate username.\n        type: str\n        required: false\n    password:\n        description:\n            - FortiOS or FortiGate password.\n        type: str\n        default: \"\"\n    vdom:\n        description:\n            - Virtual domain, among those defined previously. A vdom is a\n              virtual instance of the FortiGate that can be configured and\n              used as a different unit.\n        type: str\n        default: root\n    https:\n        description:\n            - Indicates if the requests towards FortiGate must use HTTPS protocol.\n        type: bool\n        default: true\n    ssl_verify:\n        description:\n            - Ensures FortiGate certificate must be verified by a proper CA.\n        type: bool\n        default: true\n    state:\n        description:\n            - Indicates whether to create or remove the object.\n        type: str\n        required: true\n        choices:\n            - present\n            - absent\n    system_switch_interface:\n        description:\n            - Configure software switch interfaces by grouping physical and WiFi interfaces.\n        default: null\n        type: dict\n        suboptions:\n            intra_switch_policy:\n                description:\n                    - Allow any traffic between switch interfaces or require firewall policies to allow traffic between switch interfaces.\n                type: str\n                choices:\n                    - implicit\n                    - explicit\n            member:\n                description:\n                    - Names of the interfaces that belong to the virtual switch.\n                type: list\n                suboptions:\n                    interface_name:\n                        description:\n                            - Physical interface name. Source system.interface.name.\n                        type: str\n            name:\n                description:\n                    - Interface name (name cannot be in use by any other interfaces, VLANs, or inter-VDOM links).\n                required: true\n                type: str\n            span:\n                description:\n                    - Enable/disable port spanning. Port spanning echoes traffic received by the software switch to the span destination port.\n                type: str\n                choices:\n                    - disable\n                    - enable\n            span_dest_port:\n                description:\n                    - SPAN destination port name. All traffic on the SPAN source ports is echoed to the SPAN destination port. Source system.interface.name.\n                type: str\n            span_direction:\n                description:\n                    - \"The direction in which the SPAN port operates, either: rx, tx, or both.\"\n                type: str\n                choices:\n                    - rx\n                    - tx\n                    - both\n            span_source_port:\n                description:\n                    - Physical interface name. Port spanning echoes all traffic on the SPAN source ports to the SPAN destination port.\n                type: list\n                suboptions:\n                    interface_name:\n                        description:\n                            - Physical interface name. Source system.interface.name.\n                        type: str\n            type:\n                description:\n                    - \"Type of switch based on functionality: switch for normal functionality, or hub to duplicate packets to all port members.\"\n                type: str\n                choices:\n                    - switch\n                    - hub\n            vdom:\n                description:\n                    - VDOM that the software switch belongs to. Source system.vdom.name.\n                type: str\n'''\nEXAMPLES = '''\n- hosts: localhost\n  vars:\n   host: \"192.168.122.40\"\n   username: \"admin\"\n   password: \"\"\n   vdom: \"root\"\n   ssl_verify: \"False\"\n  tasks:\n  - name: Configure software switch interfaces by grouping physical and WiFi interfaces.\n    fortios_system_switch_interface:\n      host:  \"{{ host }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      vdom:  \"{{ vdom }}\"\n      https: \"False\"\n      state: \"present\"\n      system_switch_interface:\n        intra_switch_policy: \"implicit\"\n        member:\n         -\n            interface_name: \"<your_own_value> (source system.interface.name)\"\n        name: \"default_name_6\"\n        span: \"disable\"\n        span_dest_port: \"<your_own_value> (source system.interface.name)\"\n        span_direction: \"rx\"\n        span_source_port:\n         -\n            interface_name: \"<your_own_value> (source system.interface.name)\"\n        type: \"switch\"\n        vdom: \"<your_own_value> (source system.vdom.name)\"\n'''\nRETURN = '''\nbuild:\n  description: Build number of the fortigate image\n  returned: always\n  type: str\n  sample: '1547'\nhttp_method:\n  description: Last method used to provision the content into FortiGate\n  returned: always\n  type: str\n  sample: 'PUT'\nhttp_status:\n  description: Last result given by FortiGate on last operation applied\n  returned: always\n  type: str\n  sample: \"200\"\nmkey:\n  description: Master key (id) used in the last call to FortiGate\n  returned: success\n  type: str\n  sample: \"id\"\nname:\n  description: Name of the table used to fulfill the request\n  returned: always\n  type: str\n  sample: \"urlfilter\"\npath:\n  description: Path of the table used to fulfill the request\n  returned: always\n  type: str\n  sample: \"webfilter\"\nrevision:\n  description: Internal revision number\n  returned: always\n  type: str\n  sample: \"17.0.2.10658\"\nserial:\n  description: Serial number of the unit\n  returned: always\n  type: str\n  sample: \"FGVMEVYYQT3AB5352\"\nstatus:\n  description: Indication of the operation's result\n  returned: always\n  type: str\n  sample: \"success\"\nvdom:\n  description: Virtual domain used\n  returned: always\n  type: str\n  sample: \"root\"\nversion:\n  description: Version of the FortiGate\n  returned: always\n  type: str\n  sample: \"v5.6.3\"\n'''\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.connection import Connection\nfrom ansible.module_utils.network.fortios.fortios import FortiOSHandler\nfrom ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG\ndef login(data, fos):\n    host = data['host']\n    username = data['username']\n    password = data['password']\n    ssl_verify = data['ssl_verify']\n    fos.debug('on')\n    if 'https' in data and not data['https']:\n        fos.https('off')\n    else:\n        fos.https('on')\n    fos.login(host, username, password, verify=ssl_verify)\ndef filter_system_switch_interface_data(json):\n    option_list = ['intra_switch_policy', 'member', 'name',\n                   'span', 'span_dest_port', 'span_direction',\n                   'span_source_port', 'type', 'vdom']\n    dictionary = {}\n    for attribute in option_list:\n        if attribute in json and json[attribute] is not None:\n            dictionary[attribute] = json[attribute]\n    return dictionary\ndef underscore_to_hyphen(data):\n    if isinstance(data, list):\n        for i, elem in enumerate(data):\n            data[i] = underscore_to_hyphen(elem)\n    elif isinstance(data, dict):\n        new_data = {}\n        for k, v in data.items():\n            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)\n        data = new_data\n    return data\ndef system_switch_interface(data, fos):\n    vdom = data['vdom']\n    state = data['state']\n    system_switch_interface_data = data['system_switch_interface']\n    filtered_data = underscore_to_hyphen(filter_system_switch_interface_data(system_switch_interface_data))\n    if state == \"present\":\n        return fos.set('system',\n                       'switch-interface',\n                       data=filtered_data,\n                       vdom=vdom)\n    elif state == \"absent\":\n        return fos.delete('system',\n                          'switch-interface',\n                          mkey=filtered_data['name'],\n                          vdom=vdom)\ndef is_successful_status(status):\n    return status['status'] == \"success\" or \\\n        status['http_method'] == \"DELETE\" and status['http_status'] == 404\ndef fortios_system(data, fos):\n    if data['system_switch_interface']:\n        resp = system_switch_interface(data, fos)\n    return not is_successful_status(resp), \\\n        resp['status'] == \"success\", \\\n        resp\ndef main():\n    fields = {\n        \"host\": {\"required\": False, \"type\": \"str\"},\n        \"username\": {\"required\": False, \"type\": \"str\"},\n        \"password\": {\"required\": False, \"type\": \"str\", \"default\": \"\", \"no_log\": True},\n        \"vdom\": {\"required\": False, \"type\": \"str\", \"default\": \"root\"},\n        \"https\": {\"required\": False, \"type\": \"bool\", \"default\": True},\n        \"ssl_verify\": {\"required\": False, \"type\": \"bool\", \"default\": True},\n        \"state\": {\"required\": True, \"type\": \"str\",\n                  \"choices\": [\"present\", \"absent\"]},\n        \"system_switch_interface\": {\n            \"required\": False, \"type\": \"dict\", \"default\": None,\n            \"options\": {\n                \"intra_switch_policy\": {\"required\": False, \"type\": \"str\",\n                                        \"choices\": [\"implicit\", \"explicit\"]},\n                \"member\": {\"required\": False, \"type\": \"list\",\n                           \"options\": {\n                               \"interface_name\": {\"required\": False, \"type\": \"str\"}\n                           }},\n                \"name\": {\"required\": True, \"type\": \"str\"},\n                \"span\": {\"required\": False, \"type\": \"str\",\n                         \"choices\": [\"disable\", \"enable\"]},\n                \"span_dest_port\": {\"required\": False, \"type\": \"str\"},\n                \"span_direction\": {\"required\": False, \"type\": \"str\",\n                                   \"choices\": [\"rx\", \"tx\", \"both\"]},\n                \"span_source_port\": {\"required\": False, \"type\": \"list\",\n                                     \"options\": {\n                                         \"interface_name\": {\"required\": False, \"type\": \"str\"}\n                                     }},\n                \"type\": {\"required\": False, \"type\": \"str\",\n                         \"choices\": [\"switch\", \"hub\"]},\n", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "length": 1164, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "4dd6d387cd79be7f92c54f193f47ae6ab681a0ecc6ae3dba"}
{"input": "", "context": "/*\n *   \n *\n * Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER\n * \n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License version\n * 2 only, as published by the Free Software Foundation.\n * \n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * General Public License version 2 for more details (a copy is\n * included at /legal/license.txt).\n * \n * You should have received a copy of the GNU General Public License\n * version 2 along with this work; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA\n * \n * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa\n * Clara, CA 95054 or visit www.sun.com if you need additional\n * information or have any questions.\n */\npackage com.sun.cldc.io;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Vector;\n/**\n * Input stream class for accessing resource files in classpath.\n */\npublic class ResourceInputStream extends InputStream {\n    private Object fileDecoder;\n    private Object savedDecoder; // used for mark/reset functionality\n    /**\n     * Fixes the resource name to be conformant with the CLDC 1.0\n     * specification. We are not allowed to use \"../\" to get outside\n     * of the .jar file.\n     *\n     * @param name the name of the resource in classpath to access.\n     * @return     the fixed string.\n     * @exception  IOException if the resource name points to a\n     *              classfile, as determined by the resource name's\n     *              extension.\n     */\n    private static String fixResourceName(String name) throws IOException {\n        Vector dirVector = new Vector();\n        int    startIdx = 0;\n        int    endIdx = 0;\n        String curDir;\n        while ((endIdx = name.indexOf('/', startIdx)) != -1) {\n            if (endIdx == startIdx) {\n                // We have a leading '/' or two consecutive '/'s\n                startIdx++;\n                continue;\n            }\n            curDir = name.substring(startIdx, endIdx);\n            startIdx = endIdx + 1;\n            if (curDir.equals(\".\")) {\n                // Ignore a single '.' directory\n                continue;\n            }\n            if (curDir.equals(\"..\")) {\n                // Go up a level\n                try {\n                    dirVector.removeElementAt(dirVector.size()-1);\n                } catch (ArrayIndexOutOfBoundsException aioobe) {\n                     // \"/../resource\" Not allowed!\n                     throw new IOException();\n                }\n                continue;\n            }\n            dirVector.addElement(curDir);\n        }\n        // save directory structure\n        StringBuffer dirName = new StringBuffer();\n        int nelements = dirVector.size();\n        for (int i = 0; i < nelements; ++i) {\n          dirName.append((String)dirVector.elementAt(i));\n          dirName.append(\"/\");\n        }\n        // save filename\n        if (startIdx < name.length()) {\n            String filename = name.substring(startIdx);\n            // Throw IOE if the resource ends with \".class\", but, not\n            //  if the entire name is \".class\"\n            if ((filename.endsWith(\".class\")) &&\n                (! \".class\".equals(filename))) {\n                throw new IOException();\n            }\n            dirName.append(name.substring(startIdx));\n        }\n        return dirName.toString();\n    }\n    /**\n     * Construct a resource input stream for accessing objects in the jar file.\n     *\n     * @param name the name of the resource in classpath to access. The\n     *              name must not have a leading '/'.\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public ResourceInputStream(String name) throws IOException {\n        String fixedName = fixResourceName(name);\n        fileDecoder = open(fixedName);\n        if (fileDecoder == null) {\n            throw new IOException();\n        }\n     }\n    /**\n     * Reads the next byte of data from the input stream.\n     *\n     * @return     the next byte of data, or <code>-1</code> if the end\n     *             of the stream is reached.\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public int read() throws IOException {\n        // Fix for CR 6303054\n        if (fileDecoder == null) {\n            throw new IOException();\n        }\n        return readByte(fileDecoder);\n    }\n    /**\n     * Gets the number of bytes remaining to be read.\n     *\n     * @return     the number of bytes remaining in the resource.\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public int available() throws IOException {\n        if (fileDecoder == null) {\n            throw new IOException();\n        }\n        return bytesRemain(fileDecoder);\n    }\n    /**\n     * Reads bytes into a byte array.\n     *\n     * @param b the buffer to read into.\n     * @param off offset to start at in the buffer.\n     * @param len number of bytes to read.\n     * @return     the number of bytes read, or <code>-1</code> if the end\n     *             of the stream is reached.\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public int read(byte b[], int off, int len) throws IOException {\n        // Fix for CR 6303054\n        if (fileDecoder == null) {\n            throw new IOException();\n        }\n        if (b == null) {\n            throw new NullPointerException();\n        } else if ((off < 0) || (off > b.length) || (len < 0) ||\n                   ((off + len) > b.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        }\n        return readBytes(fileDecoder, b, off, len);\n    }\n    public void close() throws IOException {\n        fileDecoder = null;\n    }\n    /**\n     * Remembers current position in ResourceInputStream so that\n     * subsequent call to <code>reset</code> will rewind the stream\n     * to the saved position.\n     *\n     * @param readlimit affects nothing\n     * @see   java.io.InputStream#reset()\n     */\n    public void mark(int readlimit) {\n        if (fileDecoder != null) {\n            savedDecoder = clone(fileDecoder);\n        }\n    }\n    /**\n     * Repositions this stream to the position at the time the\n     * <code>mark</code> method was last called on this input stream.\n     *\n     * @exception IOException if this stream has not been marked\n     * @see   java.io.InputStream#mark(int)\n     */\n    public void reset() throws IOException {\n        if (fileDecoder == null || savedDecoder == null) {\n", "answers": ["            throw new IOException();"], "length": 880, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "9499834a3f9444cd6cdbe4f12cf9812bfb42271bb905f2ca"}
{"input": "", "context": "/**\n */\npackage activitydiagramTrace.States.activitydiagram.impl;\nimport activitydiagramTrace.States.Activity_trace_Value;\nimport activitydiagramTrace.States.StatesPackage;\nimport activitydiagramTrace.States.activitydiagram.ActivitydiagramPackage;\nimport activitydiagramTrace.States.activitydiagram.TracedActivity;\nimport java.util.Collection;\nimport org.eclipse.emf.common.notify.Notification;\nimport org.eclipse.emf.common.notify.NotificationChain;\nimport org.eclipse.emf.common.util.EList;\nimport org.eclipse.emf.ecore.EClass;\nimport org.eclipse.emf.ecore.InternalEObject;\nimport org.eclipse.emf.ecore.impl.ENotificationImpl;\nimport org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;\nimport org.eclipse.emf.ecore.util.InternalEList;\nimport org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.Activity;\n/**\n * <!-- begin-user-doc -->\n * An implementation of the model object '<em><b>Traced Activity</b></em>'.\n * <!-- end-user-doc -->\n * <p>\n * The following features are implemented:\n * </p>\n * <ul>\n *   <li>{@link activitydiagramTrace.States.activitydiagram.impl.TracedActivityImpl#getOriginalObject <em>Original Object</em>}</li>\n *   <li>{@link activitydiagramTrace.States.activitydiagram.impl.TracedActivityImpl#getTraceSequence <em>Trace Sequence</em>}</li>\n * </ul>\n *\n * @generated\n */\npublic class TracedActivityImpl extends TracedNamedElementImpl implements TracedActivity {\n\t/**\n\t * The cached value of the '{@link #getOriginalObject() <em>Original Object</em>}' reference.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @see #getOriginalObject()\n\t * @generated\n\t * @ordered\n\t */\n\tprotected Activity originalObject;\n\t/**\n\t * The cached value of the '{@link #getTraceSequence() <em>Trace Sequence</em>}' containment reference list.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @see #getTraceSequence()\n\t * @generated\n\t * @ordered\n\t */\n\tprotected EList<Activity_trace_Value> traceSequence;\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tprotected TracedActivityImpl() {\n\t\tsuper();\n\t}\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\t@Override\n\tprotected EClass eStaticClass() {\n\t\treturn ActivitydiagramPackage.Literals.TRACED_ACTIVITY;\n\t}\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tpublic Activity getOriginalObject() {\n\t\tif (originalObject != null && originalObject.eIsProxy()) {\n\t\t\tInternalEObject oldOriginalObject = (InternalEObject)originalObject;\n\t\t\toriginalObject = (Activity)eResolveProxy(oldOriginalObject);\n\t\t\tif (originalObject != oldOriginalObject) {\n\t\t\t\tif (eNotificationRequired())\n\t\t\t\t\teNotify(new ENotificationImpl(this, Notification.RESOLVE, ActivitydiagramPackage.TRACED_ACTIVITY__ORIGINAL_OBJECT, oldOriginalObject, originalObject));\n\t\t\t}\n\t\t}\n\t\treturn originalObject;\n\t}\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tpublic Activity basicGetOriginalObject() {\n\t\treturn originalObject;\n\t}\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tpublic void setOriginalObject(Activity newOriginalObject) {\n\t\tActivity oldOriginalObject = originalObject;\n\t\toriginalObject = newOriginalObject;\n\t\tif (eNotificationRequired())\n\t\t\teNotify(new ENotificationImpl(this, Notification.SET, ActivitydiagramPackage.TRACED_ACTIVITY__ORIGINAL_OBJECT, oldOriginalObject, originalObject));\n\t}\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tpublic EList<Activity_trace_Value> getTraceSequence() {\n\t\tif (traceSequence == null) {\n\t\t\ttraceSequence = new EObjectContainmentWithInverseEList<Activity_trace_Value>(Activity_trace_Value.class, this, ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE, StatesPackage.ACTIVITY_TRACE_VALUE__PARENT);\n\t\t}\n\t\treturn traceSequence;\n\t}\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {\n\t\tswitch (featureID) {\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn ((InternalEList<InternalEObject>)(InternalEList<?>)getTraceSequence()).basicAdd(otherEnd, msgs);\n\t\t}\n\t\treturn super.eInverseAdd(otherEnd, featureID, msgs);\n\t}\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\t@Override\n\tpublic NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {\n\t\tswitch (featureID) {\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn ((InternalEList<?>)getTraceSequence()).basicRemove(otherEnd, msgs);\n\t\t}\n\t\treturn super.eInverseRemove(otherEnd, featureID, msgs);\n\t}\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\t@Override\n\tpublic Object eGet(int featureID, boolean resolve, boolean coreType) {\n\t\tswitch (featureID) {\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__ORIGINAL_OBJECT:\n\t\t\t\tif (resolve) return getOriginalObject();\n\t\t\t\treturn basicGetOriginalObject();\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn getTraceSequence();\n\t\t}\n\t\treturn super.eGet(featureID, resolve, coreType);\n\t}\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic void eSet(int featureID, Object newValue) {\n\t\tswitch (featureID) {\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__ORIGINAL_OBJECT:\n\t\t\t\tsetOriginalObject((Activity)newValue);\n\t\t\t\treturn;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\tgetTraceSequence().clear();\n\t\t\t\tgetTraceSequence().addAll((Collection<? extends Activity_trace_Value>)newValue);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eSet(featureID, newValue);\n\t}\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\t@Override\n\tpublic void eUnset(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__ORIGINAL_OBJECT:\n\t\t\t\tsetOriginalObject((Activity)null);\n\t\t\t\treturn;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\tgetTraceSequence().clear();\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eUnset(featureID);\n\t}\n\t/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\t@Override\n\tpublic boolean eIsSet(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__ORIGINAL_OBJECT:\n", "answers": ["\t\t\t\treturn originalObject != null;"], "length": 533, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "3d45583570fe909ea0d2c1bf2c40c8229d6d03bf8d6f4821"}
{"input": "", "context": "/*******************************************************************************\n * This file is part of OpenNMS(R).\n *\n * Copyright (C) 2006-2012 The OpenNMS Group, Inc.\n * OpenNMS(R) is Copyright (C) 1999-2012 The OpenNMS Group, Inc.\n *\n * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n *\n * OpenNMS(R) is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * OpenNMS(R) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with OpenNMS(R).  If not, see:\n *      http://www.gnu.org/licenses/\n *\n * For more information contact:\n *     OpenNMS(R) Licensing <license@opennms.org>\n *     http://www.opennms.org/\n *     http://www.opennms.com/\n *******************************************************************************/\npackage org.opennms.netmgt.importer.operations;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport org.opennms.core.utils.InetAddressUtils;\nimport org.opennms.netmgt.model.OnmsIpInterface;\nimport org.opennms.netmgt.model.OnmsMonitoredService;\nimport org.opennms.netmgt.model.OnmsNode;\nimport org.opennms.netmgt.model.OnmsServiceType;\nimport org.opennms.netmgt.model.OnmsSnmpInterface;\nimport org.opennms.netmgt.xml.event.Event;\n/**\n * <p>UpdateOperation class.</p>\n *\n * @author ranger\n * @version $Id: $\n */\npublic class UpdateOperation extends AbstractSaveOrUpdateOperation {\n    \n    public class ServiceUpdater {\n        \n        private OnmsIpInterface m_iface;\n        Map<OnmsServiceType, OnmsMonitoredService> m_svcTypToSvcMap;\n        public ServiceUpdater(OnmsIpInterface iface, OnmsIpInterface imported) {\n            m_iface = iface;\n            \n            createSvcTypeToSvcMap(imported);\n        }\n        private void createSvcTypeToSvcMap(OnmsIpInterface imported) {\n            m_svcTypToSvcMap = new HashMap<OnmsServiceType, OnmsMonitoredService>();\n            for (OnmsMonitoredService svc : imported.getMonitoredServices()) {\n                m_svcTypToSvcMap.put(svc.getServiceType(), svc);\n            }\n        }\n        public void execute(List<Event> events) {\n            for (Iterator<OnmsMonitoredService> it = getExisting().iterator(); it.hasNext();) {\n                OnmsMonitoredService svc = it.next();\n                OnmsMonitoredService imported = getImportedVersion(svc);\n                if (imported == null) {\n                    it.remove();\n                    svc.visit(new DeleteEventVisitor(events));\n                }\n                else {\n                    update(svc, events);\n                }\n                markAsProcessed(svc);\n            }\n            addNewServices(events);\n        }\n        private void addNewServices(List<Event> events) {\n            Collection<OnmsMonitoredService> newServices = getNewServices();\n            log().debug(getNode().getLabel()+\" has \"+newServices.size()+\" new services.\");\n            for (OnmsMonitoredService svc : newServices) {\n                svc.setIpInterface(m_iface);\n                m_iface.getMonitoredServices().add(svc);\n                svc.visit(new AddEventVisitor(events));\n            }\n        }\n        private Collection<OnmsMonitoredService> getNewServices() {\n            return Collections.unmodifiableCollection(m_svcTypToSvcMap.values());\n        }\n        private void markAsProcessed(OnmsMonitoredService svc) {\n            m_svcTypToSvcMap.remove(svc.getServiceType());\n        }\n        private void update(OnmsMonitoredService svc, List<Event> events) {\n            // nothing to do here\n        }\n        private OnmsMonitoredService getImportedVersion(OnmsMonitoredService svc) {\n            return (OnmsMonitoredService)m_svcTypToSvcMap.get(svc.getServiceType());\n        }\n        Set<OnmsMonitoredService> getExisting() {\n            return m_iface.getMonitoredServices();\n        }\n    }\n    public class InterfaceUpdater {\n        \n        private OnmsNode m_node;\n        private Map<String, OnmsIpInterface> m_ipAddrToImportIfs;\n        public InterfaceUpdater(OnmsNode node, OnmsNode imported) {\n            m_node = node;\n            m_ipAddrToImportIfs = getIpAddrToInterfaceMap(imported);\n        }\n        public void execute(List<Event> events) {\n            for (Iterator<OnmsIpInterface> it = getExistingInterfaces().iterator(); it.hasNext();) {\n                OnmsIpInterface iface = it.next();\n                OnmsIpInterface imported = getImportedVersion(iface);\n                \n                if (imported == null) {\n                    it.remove();\n                    iface.visit(new DeleteEventVisitor(events));\n                    markAsProcessed(iface);\n                } else {\n                    update(imported, iface, events);\n                    markAsProcessed(iface);\n                }\n                \n            }\n            addNewInterfaces(events);\n        }\n        private void addNewInterfaces(List<Event> events) {\n            for (OnmsIpInterface iface : getNewInterfaces()) {\n                m_node.addIpInterface(iface);\n                if (iface.getIfIndex() != null) {\n                    iface.setSnmpInterface(m_node.getSnmpInterfaceWithIfIndex(iface.getIfIndex()));\n                }\n                iface.visit(new AddEventVisitor(events));\n            }\n        }\n        private OnmsIpInterface getImportedVersion(OnmsIpInterface iface) {\n            return m_ipAddrToImportIfs.get(InetAddressUtils.str(iface.getIpAddress()));\n        }\n        private Collection<OnmsIpInterface> getNewInterfaces() {\n            return m_ipAddrToImportIfs.values();\n        }\n        private void markAsProcessed(OnmsIpInterface iface) {\n            m_ipAddrToImportIfs.remove(InetAddressUtils.str(iface.getIpAddress()));\n        }\n        private void update(OnmsIpInterface imported, OnmsIpInterface iface, List<Event> events) {\n            if (!nullSafeEquals(iface.getIsManaged(), imported.getIsManaged()))\n                iface.setIsManaged(imported.getIsManaged());\n            \n            if (!nullSafeEquals(iface.getIsSnmpPrimary(), imported.getIsSnmpPrimary())) {\n                iface.setIsSnmpPrimary(imported.getIsSnmpPrimary());\n                // TODO: send snmpPrimary event\n            }\n            \n            if (isSnmpDataForInterfacesUpToDate()) {\n            \tupdateSnmpInterface(imported, iface);\n            }\n            \n           if (!nullSafeEquals(iface.getIpHostName(), imported.getIpHostName()))\n        \t   iface.setIpHostName(imported.getIpHostName());\n           \n           updateServices(iface, imported, events);\n        }\n\t\tprivate void updateSnmpInterface(OnmsIpInterface imported, OnmsIpInterface iface) {\n\t\t\tif (nullSafeEquals(iface.getIfIndex(), imported.getIfIndex())) {\n                // no need to change anything\n                return;\n            }\n            \n            if (imported.getSnmpInterface() == null) {\n                // there is no longer an snmpInterface associated with the ipInterface\n                iface.setSnmpInterface(null);\n            } else {\n                // locate the snmpInterface on this node that has the new ifIndex and set it\n                // into the interface\n                OnmsSnmpInterface snmpIface = m_node.getSnmpInterfaceWithIfIndex(imported.getIfIndex());\n                iface.setSnmpInterface(snmpIface);\n            }\n            \n            \n            \n\t\t}\n        \n        private void updateServices(OnmsIpInterface iface, OnmsIpInterface imported, List<Event> events) {\n            new ServiceUpdater(iface, imported).execute(events);\n        }\n        private Set<OnmsIpInterface> getExistingInterfaces() {\n            return m_node.getIpInterfaces();\n        }\n    }\n    \n    public class SnmpInterfaceUpdater {\n        \n        OnmsNode m_dbNode;\n        Map<Integer, OnmsSnmpInterface> m_ifIndexToSnmpInterface;\n        public SnmpInterfaceUpdater(OnmsNode db, OnmsNode imported) {\n            m_dbNode = db;\n            m_ifIndexToSnmpInterface = mapIfIndexToSnmpInterface(imported.getSnmpInterfaces());\n        }\n        private Map<Integer, OnmsSnmpInterface> mapIfIndexToSnmpInterface(Set<OnmsSnmpInterface> snmpInterfaces) {\n            Map<Integer, OnmsSnmpInterface> map = new HashMap<Integer, OnmsSnmpInterface>();\n            for (OnmsSnmpInterface snmpIface : snmpInterfaces) {\n                if (snmpIface.getIfIndex() != null) {\n                    map.put(snmpIface.getIfIndex(), snmpIface);\n                }\n            }\n            return map;\n        }\n        public void execute() {\n            for (Iterator<OnmsSnmpInterface> it = getExistingInterfaces().iterator(); it.hasNext();) {\n                OnmsSnmpInterface iface = (OnmsSnmpInterface) it.next();\n                OnmsSnmpInterface imported = getImportedVersion(iface);\n                if (imported == null) {\n                    it.remove();\n                    markAsProcessed(iface);\n                } else {\n                    update(imported, iface);\n                    markAsProcessed(iface);\n                }\n            }\n            addNewInterfaces();\n        }\n        \n        private void update(OnmsSnmpInterface importedSnmpIface, OnmsSnmpInterface snmpIface) {\n            \n            if (!nullSafeEquals(snmpIface.getIfAdminStatus(), importedSnmpIface.getIfAdminStatus())) {\n                snmpIface.setIfAdminStatus(importedSnmpIface.getIfAdminStatus());\n            }\n            \n            if (!nullSafeEquals(snmpIface.getIfAlias(), importedSnmpIface.getIfAlias())) {\n                snmpIface.setIfAlias(importedSnmpIface.getIfAlias());\n            }\n            \n            if (!nullSafeEquals(snmpIface.getIfDescr(), importedSnmpIface.getIfDescr())) {\n                snmpIface.setIfDescr(importedSnmpIface.getIfDescr());\n            }\n                \n            if (!nullSafeEquals(snmpIface.getIfName(), importedSnmpIface.getIfName())) {\n                snmpIface.setIfName(importedSnmpIface.getIfName());\n            }\n            \n            if (!nullSafeEquals(snmpIface.getIfOperStatus(), importedSnmpIface.getIfOperStatus())) {\n                snmpIface.setIfOperStatus(importedSnmpIface.getIfOperStatus());\n            }\n            \n            if (!nullSafeEquals(snmpIface.getIfSpeed(), importedSnmpIface.getIfSpeed())) {\n                snmpIface.setIfSpeed(importedSnmpIface.getIfSpeed());\n            }\n            \n            if (!nullSafeEquals(snmpIface.getIfType(), importedSnmpIface.getIfType())) {\n                snmpIface.setIfType(importedSnmpIface.getIfType());\n            }\n            \n            if (!nullSafeEquals(snmpIface.getNetMask(), importedSnmpIface.getNetMask())) {\n                snmpIface.setNetMask(importedSnmpIface.getNetMask());\n            }\n            \n            if (!nullSafeEquals(snmpIface.getPhysAddr(), importedSnmpIface.getPhysAddr())) {\n                snmpIface.setPhysAddr(importedSnmpIface.getPhysAddr());\n            }\n            \n        }\n        private void markAsProcessed(OnmsSnmpInterface iface) {\n            m_ifIndexToSnmpInterface.remove(iface.getIfIndex());\n        }\n        private OnmsSnmpInterface getImportedVersion(OnmsSnmpInterface iface) {\n            return m_ifIndexToSnmpInterface.get(iface.getIfIndex());\n        }\n        private Set<OnmsSnmpInterface> getExistingInterfaces() {\n            return m_dbNode.getSnmpInterfaces();\n       }\n        \n        private void addNewInterfaces() {\n            for (OnmsSnmpInterface snmpIface : getNewInterfaces()) {\n                m_dbNode.addSnmpInterface(snmpIface);\n            }\n        }\n        private Collection<OnmsSnmpInterface> getNewInterfaces() {\n            return m_ifIndexToSnmpInterface.values();\n        }\n    }\n    /**\n     * <p>Constructor for UpdateOperation.</p>\n     *\n     * @param nodeId a {@link java.lang.Integer} object.\n     * @param foreignSource a {@link java.lang.String} object.\n     * @param foreignId a {@link java.lang.String} object.\n     * @param nodeLabel a {@link java.lang.String} object.\n     * @param building a {@link java.lang.String} object.\n     * @param city a {@link java.lang.String} object.\n     */\n    public UpdateOperation(Integer nodeId, String foreignSource, String foreignId, String nodeLabel, String building, String city) {\n\t\tsuper(nodeId, foreignSource, foreignId, nodeLabel, building, city);\n\t}\n\t/**\n\t * <p>doPersist</p>\n\t *\n\t * @return a {@link java.util.List} object.\n\t */\n\tpublic List<Event> doPersist() {\n\t\tOnmsNode imported = getNode();\n\t\tOnmsNode db = getNodeDao().getHierarchy(imported.getId());\n", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "length": 888, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "9b62a0422f784adaa2234811ed5515339a3798bfeeb5e44b"}
{"input": "", "context": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2019, Loic Blot (@nerzhul) <loic.blot@unix-experience.fr>\n# Copyright: (c) 2019, Andrew Klychkov (@Andersson007) <aaklychkov@mail.ru>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\nDOCUMENTATION = r'''\n---\nmodule: postgresql_publication\nshort_description: Add, update, or remove PostgreSQL publication\ndescription:\n- Add, update, or remove PostgreSQL publication.\nversion_added: \"2.9\"\noptions:\n  name:\n    description:\n    - Name of the publication to add, update, or remove.\n    required: true\n    type: str\n  db:\n    description:\n    - Name of the database to connect to and where\n      the publication state will be changed.\n    aliases: [ login_db ]\n    type: str\n  tables:\n    description:\n    - List of tables to add to the publication.\n    - If no value is set all tables are targeted.\n    - If the publication already exists for specific tables and I(tables) is not passed,\n      nothing will be changed. If you need to add all tables to the publication with the same name,\n      drop existent and create new without passing I(tables).\n    type: list\n  state:\n    description:\n    - The publication state.\n    default: present\n    choices: [ absent, present ]\n    type: str\n  parameters:\n    description:\n    - Dictionary with optional publication parameters.\n    - Available parameters depend on PostgreSQL version.\n    type: dict\n  owner:\n    description:\n    - Publication owner.\n    - If I(owner) is not defined, the owner will be set as I(login_user) or I(session_role).\n    type: str\n  cascade:\n    description:\n    - Drop publication dependencies. Has effect with I(state=absent) only.\n    type: bool\n    default: false\nnotes:\n- PostgreSQL version must be 10 or greater.\nseealso:\n- name: CREATE PUBLICATION reference\n  description: Complete reference of the CREATE PUBLICATION command documentation.\n  link: https://www.postgresql.org/docs/current/sql-createpublication.html\n- name: ALTER PUBLICATION reference\n  description: Complete reference of the ALTER PUBLICATION command documentation.\n  link: https://www.postgresql.org/docs/current/sql-alterpublication.html\n- name: DROP PUBLICATION reference\n  description: Complete reference of the DROP PUBLICATION command documentation.\n  link: https://www.postgresql.org/docs/current/sql-droppublication.html\nauthor:\n- Loic Blot (@nerzhul) <loic.blot@unix-experience.fr>\n- Andrew Klychkov (@Andersson007) <aaklychkov@mail.ru>\nextends_documentation_fragment:\n- postgres\n'''\nEXAMPLES = r'''\n- name: Create a new publication with name \"acme\" targeting all tables in database \"test\".\n  postgresql_publication:\n    db: test\n    name: acme\n- name: Create publication \"acme\" publishing only prices and vehicles tables.\n  postgresql_publication:\n    name: acme\n    tables:\n    - prices\n    - vehicles\n- name: >\n    Create publication \"acme\", set user alice as an owner, targeting all tables.\n    Allowable DML operations are INSERT and UPDATE only\n  postgresql_publication:\n    name: acme\n    owner: alice\n    parameters:\n      publish: 'insert,update'\n- name: >\n    Assuming publication \"acme\" exists and there are targeted\n    tables \"prices\" and \"vehicles\", add table \"stores\" to the publication.\n  postgresql_publication:\n    name: acme\n    tables:\n    - prices\n    - vehicles\n    - stores\n- name: Remove publication \"acme\" if exists in database \"test\".\n  postgresql_publication:\n    db: test\n    name: acme\n    state: absent\n'''\nRETURN = r'''\nexists:\n  description:\n  - Flag indicates the publication exists or not at the end of runtime.\n  returned: always\n  type: bool\n  sample: true\nqueries:\n  description: List of executed queries.\n  returned: always\n  type: str\n  sample: [ 'DROP PUBLICATION \"acme\" CASCADE' ]\nowner:\n  description: Owner of the publication at the end of runtime.\n  returned: if publication exists\n  type: str\n  sample: \"alice\"\ntables:\n  description:\n  - List of tables in the publication at the end of runtime.\n  - If all tables are published, returns empty list.\n  returned: if publication exists\n  type: list\n  sample: [\"\\\"public\\\".\\\"prices\\\"\", \"\\\"public\\\".\\\"vehicles\\\"\"]\nalltables:\n  description:\n  - Flag indicates that all tables are published.\n  returned: if publication exists\n  type: bool\n  sample: false\nparameters:\n  description: Publication parameters at the end of runtime.\n  returned: if publication exists\n  type: dict\n  sample: {'publish': {'insert': false, 'delete': false, 'update': true}}\n'''\ntry:\n    from psycopg2.extras import DictCursor\nexcept ImportError:\n    # psycopg2 is checked by connect_to_db()\n    # from ansible.module_utils.postgres\n    pass\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.database import pg_quote_identifier\nfrom ansible.module_utils.postgres import (\n    connect_to_db,\n    exec_sql,\n    get_conn_params,\n    postgres_common_argument_spec,\n)\nfrom ansible.module_utils.six import iteritems\nSUPPORTED_PG_VERSION = 10000\n################################\n# Module functions and classes #\n################################\ndef transform_tables_representation(tbl_list):\n    \"\"\"Add 'public.' to names of tables where a schema identifier is absent\n    and add quotes to each element.\n    Args:\n        tbl_list (list): List of table names.\n    Returns:\n        tbl_list (list): Changed list.\n    \"\"\"\n    for i, table in enumerate(tbl_list):\n        if '.' not in table:\n            tbl_list[i] = pg_quote_identifier('public.%s' % table.strip(), 'table')\n        else:\n            tbl_list[i] = pg_quote_identifier(table.strip(), 'table')\n    return tbl_list\nclass PgPublication():\n    \"\"\"Class to work with PostgreSQL publication.\n    Args:\n        module (AnsibleModule): Object of AnsibleModule class.\n        cursor (cursor): Cursor object of psycopg2 library to work with PostgreSQL.\n        name (str): The name of the publication.\n    Attributes:\n        module (AnsibleModule): Object of AnsibleModule class.\n        cursor (cursor): Cursor object of psycopg2 library to work with PostgreSQL.\n        name (str): Name of the publication.\n        executed_queries (list): List of executed queries.\n        attrs (dict): Dict with publication attributes.\n        exists (bool): Flag indicates the publication exists or not.\n    \"\"\"\n    def __init__(self, module, cursor, name):\n        self.module = module\n        self.cursor = cursor\n        self.name = name\n        self.executed_queries = []\n        self.attrs = {\n            'alltables': False,\n            'tables': [],\n            'parameters': {},\n            'owner': '',\n        }\n        self.exists = self.check_pub()\n    def get_info(self):\n        \"\"\"Refresh the publication information.\n        Returns:\n            ``self.attrs``.\n        \"\"\"\n        self.exists = self.check_pub()\n        return self.attrs\n    def check_pub(self):\n        \"\"\"Check the publication and refresh ``self.attrs`` publication attribute.\n        Returns:\n            True if the publication with ``self.name`` exists, False otherwise.\n        \"\"\"\n        pub_info = self.__get_general_pub_info()\n        if not pub_info:\n            # Publication does not exist:\n            return False\n        self.attrs['owner'] = pub_info.get('pubowner')\n        # Publication DML operations:\n        self.attrs['parameters']['publish'] = {}\n        self.attrs['parameters']['publish']['insert'] = pub_info.get('pubinsert', False)\n        self.attrs['parameters']['publish']['update'] = pub_info.get('pubupdate', False)\n        self.attrs['parameters']['publish']['delete'] = pub_info.get('pubdelete', False)\n        if pub_info.get('pubtruncate'):\n            self.attrs['parameters']['publish']['truncate'] = pub_info.get('pubtruncate')\n        # If alltables flag is False, get the list of targeted tables:\n        if not pub_info.get('puballtables'):\n            table_info = self.__get_tables_pub_info()\n            # Join sublists [['schema', 'table'], ...] to ['schema.table', ...]\n            # for better representation:\n            for i, schema_and_table in enumerate(table_info):\n                table_info[i] = pg_quote_identifier('.'.join(schema_and_table), 'table')\n            self.attrs['tables'] = table_info\n        else:\n            self.attrs['alltables'] = True\n        # Publication exists:\n        return True\n    def create(self, tables, params, owner, check_mode=True):\n        \"\"\"Create the publication.\n        Args:\n            tables (list): List with names of the tables that need to be added to the publication.\n            params (dict): Dict contains optional publication parameters and their values.\n            owner (str): Name of the publication owner.\n        Kwargs:\n            check_mode (bool): If True, don't actually change anything,\n                just make SQL, add it to ``self.executed_queries`` and return True.\n        Returns:\n            changed (bool): True if publication has been created, otherwise False.\n        \"\"\"\n        changed = True\n        query_fragments = [\"CREATE PUBLICATION %s\" % pg_quote_identifier(self.name, 'publication')]\n        if tables:\n            query_fragments.append(\"FOR TABLE %s\" % ', '.join(tables))\n        else:\n            query_fragments.append(\"FOR ALL TABLES\")\n        if params:\n            params_list = []\n            # Make list [\"param = 'value'\", ...] from params dict:\n            for (key, val) in iteritems(params):\n                params_list.append(\"%s = '%s'\" % (key, val))\n            # Add the list to query_fragments:\n            query_fragments.append(\"WITH (%s)\" % ', '.join(params_list))\n        changed = self.__exec_sql(' '.join(query_fragments), check_mode=check_mode)\n        if owner:\n            # If check_mode, just add possible SQL to\n            # executed_queries and return:\n            self.__pub_set_owner(owner, check_mode=check_mode)\n        return changed\n    def update(self, tables, params, owner, check_mode=True):\n        \"\"\"Update the publication.\n        Args:\n            tables (list): List with names of the tables that need to be presented in the publication.\n            params (dict): Dict contains optional publication parameters and their values.\n            owner (str): Name of the publication owner.\n        Kwargs:\n            check_mode (bool): If True, don't actually change anything,\n                just make SQL, add it to ``self.executed_queries`` and return True.\n        Returns:\n            changed (bool): True if publication has been updated, otherwise False.\n        \"\"\"\n        changed = False\n        # Add or drop tables from published tables suit:\n        if tables and not self.attrs['alltables']:\n            # 1. If needs to add table to the publication:\n            for tbl in tables:\n                if tbl not in self.attrs['tables']:\n                    # If needs to add table to the publication:\n                    changed = self.__pub_add_table(tbl, check_mode=check_mode)\n            # 2. if there is a table in targeted tables\n            # that's not presented in the passed tables:\n            for tbl in self.attrs['tables']:\n                if tbl not in tables:\n                    changed = self.__pub_drop_table(tbl, check_mode=check_mode)\n        elif tables and self.attrs['alltables']:\n            changed = self.__pub_set_tables(tables, check_mode=check_mode)\n        # Update pub parameters:\n        if params:\n            for key, val in iteritems(params):\n                if self.attrs['parameters'].get(key):\n                    # In PostgreSQL 10/11 only 'publish' optional parameter is presented.\n                    if key == 'publish':\n                        # 'publish' value can be only a string with comma-separated items\n                        # of allowed DML operations like 'insert,update' or\n                        # 'insert,update,delete', etc.\n                        # Make dictionary to compare with current attrs later:\n                        val_dict = self.attrs['parameters']['publish'].copy()\n                        val_list = val.split(',')\n                        for v in val_dict:\n                            if v in val_list:\n                                val_dict[v] = True\n                            else:\n                                val_dict[v] = False\n                        # Compare val_dict and the dict with current 'publish' parameters,\n                        # if they're different, set new values:\n                        if val_dict != self.attrs['parameters']['publish']:\n                            changed = self.__pub_set_param(key, val, check_mode=check_mode)\n                    # Default behavior for other cases:\n                    elif self.attrs['parameters'][key] != val:\n                        changed = self.__pub_set_param(key, val, check_mode=check_mode)\n                else:\n                    # If the parameter was not set before:\n                    changed = self.__pub_set_param(key, val, check_mode=check_mode)\n        # Update pub owner:\n        if owner:\n            if owner != self.attrs['owner']:\n                changed = self.__pub_set_owner(owner, check_mode=check_mode)\n        return changed\n    def drop(self, cascade=False, check_mode=True):\n        \"\"\"Drop the publication.\n        Kwargs:\n            cascade (bool): Flag indicates that publication needs to be deleted\n                with its dependencies.\n            check_mode (bool): If True, don't actually change anything,\n                just make SQL, add it to ``self.executed_queries`` and return True.\n        Returns:\n            changed (bool): True if publication has been updated, otherwise False.\n        \"\"\"\n        if self.exists:\n            query_fragments = []\n            query_fragments.append(\"DROP PUBLICATION %s\" % pg_quote_identifier(self.name, 'publication'))\n            if cascade:\n                query_fragments.append(\"CASCADE\")\n            return self.__exec_sql(' '.join(query_fragments), check_mode=check_mode)\n    def __get_general_pub_info(self):\n        \"\"\"Get and return general publication information.\n        Returns:\n            Dict with publication information if successful, False otherwise.\n        \"\"\"\n        # Check pg_publication.pubtruncate exists (supported from PostgreSQL 11):\n        pgtrunc_sup = exec_sql(self, (\"SELECT 1 FROM information_schema.columns \"\n                                      \"WHERE table_name = 'pg_publication' \"\n                                      \"AND column_name = 'pubtruncate'\"), add_to_executed=False)\n        if pgtrunc_sup:\n            query = (\"SELECT r.rolname AS pubowner, p.puballtables, p.pubinsert, \"\n                     \"p.pubupdate , p.pubdelete, p.pubtruncate FROM pg_publication AS p \"\n                     \"JOIN pg_catalog.pg_roles AS r \"\n                     \"ON p.pubowner = r.oid \"\n                     \"WHERE p.pubname = '%s'\" % self.name)\n        else:\n            query = (\"SELECT r.rolname AS pubowner, p.puballtables, p.pubinsert, \"\n                     \"p.pubupdate , p.pubdelete FROM pg_publication AS p \"\n                     \"JOIN pg_catalog.pg_roles AS r \"\n                     \"ON p.pubowner = r.oid \"\n                     \"WHERE p.pubname = '%s'\" % self.name)\n        result = exec_sql(self, query, add_to_executed=False)\n        if result:\n            return result[0]\n        else:\n            return False\n    def __get_tables_pub_info(self):\n        \"\"\"Get and return tables that are published by the publication.\n        Returns:\n            List of dicts with published tables.\n        \"\"\"\n        query = (\"SELECT schemaname, tablename \"\n                 \"FROM pg_publication_tables WHERE pubname = '%s'\" % self.name)\n        return exec_sql(self, query, add_to_executed=False)\n    def __pub_add_table(self, table, check_mode=False):\n        \"\"\"Add a table to the publication.\n        Args:\n            table (str): Table name.\n        Kwargs:\n            check_mode (bool): If True, don't actually change anything,\n                just make SQL, add it to ``self.executed_queries`` and return True.\n        Returns:\n            True if successful, False otherwise.\n        \"\"\"\n        query = (\"ALTER PUBLICATION %s ADD TABLE %s\" % (pg_quote_identifier(self.name, 'publication'),\n                                                        pg_quote_identifier(table, 'table')))\n        return self.__exec_sql(query, check_mode=check_mode)\n    def __pub_drop_table(self, table, check_mode=False):\n        \"\"\"Drop a table from the publication.\n        Args:\n            table (str): Table name.\n        Kwargs:\n            check_mode (bool): If True, don't actually change anything,\n                just make SQL, add it to ``self.executed_queries`` and return True.\n        Returns:\n            True if successful, False otherwise.\n        \"\"\"\n        query = (\"ALTER PUBLICATION %s DROP TABLE %s\" % (pg_quote_identifier(self.name, 'publication'),\n                                                         pg_quote_identifier(table, 'table')))\n        return self.__exec_sql(query, check_mode=check_mode)\n    def __pub_set_tables(self, tables, check_mode=False):\n        \"\"\"Set a table suit that need to be published by the publication.\n        Args:\n            tables (list): List of tables.\n        Kwargs:\n            check_mode (bool): If True, don't actually change anything,\n                just make SQL, add it to ``self.executed_queries`` and return True.\n        Returns:\n            True if successful, False otherwise.\n        \"\"\"\n        quoted_tables = [pg_quote_identifier(t, 'table') for t in tables]\n        query = (\"ALTER PUBLICATION %s SET TABLE %s\" % (pg_quote_identifier(self.name, 'publication'),\n                                                        ', '.join(quoted_tables)))\n        return self.__exec_sql(query, check_mode=check_mode)\n    def __pub_set_param(self, param, value, check_mode=False):\n        \"\"\"Set an optional publication parameter.\n        Args:\n            param (str): Name of the parameter.\n            value (str): Parameter value.\n        Kwargs:\n            check_mode (bool): If True, don't actually change anything,\n                just make SQL, add it to ``self.executed_queries`` and return True.\n        Returns:\n            True if successful, False otherwise.\n        \"\"\"\n        query = (\"ALTER PUBLICATION %s SET (%s = '%s')\" % (pg_quote_identifier(self.name, 'publication'),\n                                                           param, value))\n        return self.__exec_sql(query, check_mode=check_mode)\n    def __pub_set_owner(self, role, check_mode=False):\n        \"\"\"Set a publication owner.\n        Args:\n            role (str): Role (user) name that needs to be set as a publication owner.\n        Kwargs:\n            check_mode (bool): If True, don't actually change anything,\n                just make SQL, add it to ``self.executed_queries`` and return True.\n        Returns:\n            True if successful, False otherwise.\n        \"\"\"\n        query = (\"ALTER PUBLICATION %s OWNER TO %s\" % (pg_quote_identifier(self.name, 'publication'),\n                                                       pg_quote_identifier(role, 'role')))\n        return self.__exec_sql(query, check_mode=check_mode)\n    def __exec_sql(self, query, check_mode=False):\n        \"\"\"Execute SQL query.\n        Note: If we need just to get information from the database,\n            we use ``exec_sql`` function directly.\n        Args:\n            query (str): Query that needs to be executed.\n        Kwargs:\n            check_mode (bool): If True, don't actually change anything,\n                just add ``query`` to ``self.executed_queries`` and return True.\n        Returns:\n            True if successful, False otherwise.\n        \"\"\"\n        if check_mode:\n            self.executed_queries.append(query)\n            return True\n        else:\n            return exec_sql(self, query, ddl=True)\n# ===========================================\n# Module execution.\n#\ndef main():\n    argument_spec = postgres_common_argument_spec()\n    argument_spec.update(\n        name=dict(required=True),\n        db=dict(type='str', aliases=['login_db']),\n        state=dict(type='str', default='present', choices=['absent', 'present']),\n        tables=dict(type='list'),\n        parameters=dict(type='dict'),\n        owner=dict(type='str'),\n        cascade=dict(type='bool', default=False),\n    )\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n    )\n    # Parameters handling:\n    name = module.params['name']\n    state = module.params['state']\n    tables = module.params['tables']\n    params = module.params['parameters']\n    owner = module.params['owner']\n    cascade = module.params['cascade']\n    if state == 'absent':\n        if tables:\n            module.warn('parameter \"tables\" is ignored when \"state=absent\"')\n        if params:\n            module.warn('parameter \"parameters\" is ignored when \"state=absent\"')\n        if owner:\n            module.warn('parameter \"owner\" is ignored when \"state=absent\"')\n    if state == 'present' and cascade:\n        module.warm('parameter \"cascade\" is ignored when \"state=present\"')\n    # Connect to DB and make cursor object:\n    conn_params = get_conn_params(module, module.params)\n    # We check publication state without DML queries execution, so set autocommit:\n    db_connection = connect_to_db(module, conn_params, autocommit=True)\n    cursor = db_connection.cursor(cursor_factory=DictCursor)\n    # Check version:\n    if cursor.connection.server_version < SUPPORTED_PG_VERSION:\n        module.fail_json(msg=\"PostgreSQL server version should be 10.0 or greater\")\n    # Nothing was changed by default:\n    changed = False\n    ###################################\n    # Create object and do rock'n'roll:\n    publication = PgPublication(module, cursor, name)\n    if tables:\n        tables = transform_tables_representation(tables)\n    # If module.check_mode=True, nothing will be changed:\n", "answers": ["    if state == 'present':"], "length": 2176, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "2d9194c77a619cfea6ab57817de1e00fa23d7a47b317043a"}
{"input": "", "context": "/////////////////////////////////////////////////////\n//\n//Created by:  Morrigan and Ashlar, together forever.\n//\n/////////////////////////////////////////////////////\nusing System;\nusing Server;\nusing Server.Items;\nnamespace Server.Items\n{\n\tpublic class NujelmHoneySmallFishtankAddon : BaseAddon\n\t{\n\t\tpublic override BaseAddonDeed Deed\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn new NujelmHoneySmallFishtankAddonDeed();\n\t\t\t}\n\t\t}\n\t\t[ Constructable ]\n\t\tpublic NujelmHoneySmallFishtankAddon()\n\t\t{\n\t\t\tAddonComponent ac = null;\n/////////////////////////////////////////////////////////////////////////////////////////\n/*Example\t\t\n\t\t\tVariable ac= new item \"AddonComponet\" with a item id of (dec number - not hex)\n\t\t\tac \t     = new AddonComponent\t\t\t\t( 5990 );\n\t\t\tthe new item has a hue of 1 (index number)\n\t\t\tac.Hue = 1;\n\t\t\tthe new item is located at the ( targeted location, x(n -s), y(e -w), z(u-d)\n\t\t\tAddComponent\t\t\t ( ac, \t\t    0, \t 0, \t    0 );\n*/\n////////////////////////////////////////////////////////////////////////////////////////\n//Tank\n\t\t\t//Black on bottom of tank\n\t\t\tac = new AddonComponent( 5990 );\n\t\t\tac.Hue = 1;\n\t\t\tac.Name = \"fishtank base\";\n\t\t\tAddComponent( ac, 0, 0, 0 );\n\t\t\tac = new AddonComponent( 5992 );\n\t\t\tac.Hue = 1;\n\t\t\tac.Name = \"fishtank base\";\n\t\t\tAddComponent( ac, 0, 0, 0 );\n\t\t\tac = new AddonComponent( 5990 );\n\t\t\tac.Hue = 1;\n\t\t\tac.Name = \"fishtank base\";\n\t\t\tAddComponent( ac, 0, 0, 1 );\n\t\t\tac = new AddonComponent( 5992 );\n\t\t\tac.Hue = 1;\n\t\t\tac.Name = \"fishtank base\";\n\t\t\tAddComponent( ac, 0, 0, 1 );\n\t\t\t//Shades of blue\n\t\t\tac = new AddonComponent( 5990 );\n\t\t\tac.Hue = 92;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 2 );\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 92;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 2 );\n\t\t\tac = new AddonComponent( 5990 );\n\t\t\tac.Hue = 92;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 3 );\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 92;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 3 );\n\t\t\tac = new AddonComponent( 5990 );\n\t\t\tac.Hue = 93;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 4 );\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 93;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 4 );\n\t\t\tac = new AddonComponent( 5990 );\n\t\t\tac.Hue = 93;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 5 );\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 93;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 5 );\n\t\t\tac = new AddonComponent( 5990 );\n\t\t\tac.Hue = 94;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 6 );\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 94;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 6 );\n\t\t\tac = new AddonComponent( 5990 );\n\t\t\tac.Hue = 94;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 7 );\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 94;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 7 );\n\t\t\tac = new AddonComponent( 5990 );\n\t\t\tac.Hue = 95;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 8 );\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 95;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 8 );\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 95;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 9 );\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 95;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 9 );\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 96;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 10 );\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 96;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 10 );\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 96;\n\t\t\tac.Name = \"water\";\n\t\t\tAddComponent( ac, 0, 0, 11 );\n\t\t\t//Black on top of tank\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 1;\n\t\t\tac.Name = \"fishtank lid\";\n\t\t\tAddComponent( ac, 0, 0, 13 );\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 1;\n\t\t\tac.Name = \"fishtank lid\";\n\t\t\tAddComponent( ac, 0, 0, 14 );\n\t\t\t//Sand\n\t\t\tac = new AddonComponent( 4846 );\n\t\t\tac.Hue = 348;\n\t\t\tac.Name = \"sand\";\n\t\t\tAddComponent( ac, 1, 1, 12 );\n\t\t\t//Plant and fish\n\t\t\tac = new AddonComponent( 15110 );\n\t\t\tac.Name = \"a Nujelm Honey\";\n\t\t\tAddComponent( ac, 1, 1, 16 );\n\t\t}\n\t\tpublic NujelmHoneySmallFishtankAddon( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( 0 ); // Version\n\t\t}\n\t\tpublic override void Deserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n\tpublic class NujelmHoneySmallFishtankAddonDeed : BaseAddonDeed\n\t{\n\t\tpublic override BaseAddon Addon\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn new NujelmHoneySmallFishtankAddon();\n\t\t\t}\n\t\t}\n\t\t[Constructable]\n\t\tpublic NujelmHoneySmallFishtankAddonDeed()\n\t\t{\n\t\t\tName = \"a Nujelm Honey small fishtank\";\n\t\t}\n\t\tpublic NujelmHoneySmallFishtankAddonDeed( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n\t\tpublic override void Serialize( GenericWriter writer )\n\t\t{\n\t\t\tbase.Serialize( writer );\n\t\t\twriter.Write( 0 ); // Version\n\t\t}\n\t\tpublic override void\tDeserialize( GenericReader reader )\n\t\t{\n\t\t\tbase.Deserialize( reader );\n", "answers": ["\t\t\tint version = reader.ReadInt();"], "length": 737, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "06103688eb5c15bdd43b1c517fd37a89a292f4373b449db4"}
{"input": "", "context": "\"\"\"This tutorial introduces restricted boltzmann machines (RBM) using Theano.\nBoltzmann Machines (BMs) are a particular form of energy-based model which\ncontain hidden variables. Restricted Boltzmann Machines further restrict BMs\nto those without visible-visible and hidden-hidden connections.\n\"\"\"\nimport timeit\ntry:\n    import PIL.Image as Image\nexcept ImportError:\n    import Image\nimport numpy\nimport theano\nimport theano.tensor as T\nimport os\nfrom theano.tensor.shared_randomstreams import RandomStreams\nfrom utils import tile_raster_images\nfrom logistic_sgd import load_data\n# start-snippet-1\nclass RBM(object):\n    \"\"\"Restricted Boltzmann Machine (RBM)  \"\"\"\n    def __init__(\n        self,\n        input=None,\n        n_visible=784,\n        n_hidden=500,\n        W=None,\n        hbias=None,\n        vbias=None,\n        numpy_rng=None,\n        theano_rng=None\n    ):\n        \"\"\"\n        RBM constructor. Defines the parameters of the model along with\n        basic operations for inferring hidden from visible (and vice-versa),\n        as well as for performing CD updates.\n        :param input: None for standalone RBMs or symbolic variable if RBM is\n        part of a larger graph.\n        :param n_visible: number of visible units\n        :param n_hidden: number of hidden units\n        :param W: None for standalone RBMs or symbolic variable pointing to a\n        shared weight matrix in case RBM is part of a DBN network; in a DBN,\n        the weights are shared between RBMs and layers of a MLP\n        :param hbias: None for standalone RBMs or symbolic variable pointing\n        to a shared hidden units bias vector in case RBM is part of a\n        different network\n        :param vbias: None for standalone RBMs or a symbolic variable\n        pointing to a shared visible units bias\n        \"\"\"\n        self.n_visible = n_visible\n        self.n_hidden = n_hidden\n        if numpy_rng is None:\n            # create a number generator\n            numpy_rng = numpy.random.RandomState(1234)\n        if theano_rng is None:\n            theano_rng = RandomStreams(numpy_rng.randint(2 ** 30))\n        if W is None:\n            # W is initialized with `initial_W` which is uniformely\n            # sampled from -4*sqrt(6./(n_visible+n_hidden)) and\n            # 4*sqrt(6./(n_hidden+n_visible)) the output of uniform if\n            # converted using asarray to dtype theano.config.floatX so\n            # that the code is runable on GPU\n            initial_W = numpy.asarray(\n                numpy_rng.uniform(\n                    low=-4 * numpy.sqrt(6. / (n_hidden + n_visible)),\n                    high=4 * numpy.sqrt(6. / (n_hidden + n_visible)),\n                    size=(n_visible, n_hidden)\n                ),\n                dtype=theano.config.floatX\n            )\n            # theano shared variables for weights and biases\n            W = theano.shared(value=initial_W, name='W', borrow=True)\n        if hbias is None:\n            # create shared variable for hidden units bias\n            hbias = theano.shared(\n                value=numpy.zeros(\n                    n_hidden,\n                    dtype=theano.config.floatX\n                ),\n                name='hbias',\n                borrow=True\n            )\n        if vbias is None:\n            # create shared variable for visible units bias\n            vbias = theano.shared(\n                value=numpy.zeros(\n                    n_visible,\n                    dtype=theano.config.floatX\n                ),\n                name='vbias',\n                borrow=True\n            )\n        # initialize input layer for standalone RBM or layer0 of DBN\n        self.input = input\n        if not input:\n            self.input = T.matrix('input')\n        self.W = W\n        self.hbias = hbias\n        self.vbias = vbias\n        self.theano_rng = theano_rng\n        # **** WARNING: It is not a good idea to put things in this list\n        # other than shared variables created in this function.\n        self.params = [self.W, self.hbias, self.vbias]\n        # end-snippet-1\n    def free_energy(self, v_sample):\n        ''' Function to compute the free energy '''\n        wx_b = T.dot(v_sample, self.W) + self.hbias\n        vbias_term = T.dot(v_sample, self.vbias)\n        hidden_term = T.sum(T.log(1 + T.exp(wx_b)), axis=1)\n        return -hidden_term - vbias_term\n    def propup(self, vis):\n        '''This function propagates the visible units activation upwards to\n        the hidden units\n        Note that we return also the pre-sigmoid activation of the\n        layer. As it will turn out later, due to how Theano deals with\n        optimizations, this symbolic variable will be needed to write\n        down a more stable computational graph (see details in the\n        reconstruction cost function)\n        '''\n        pre_sigmoid_activation = T.dot(vis, self.W) + self.hbias\n        return [pre_sigmoid_activation, T.nnet.sigmoid(pre_sigmoid_activation)]\n    def sample_h_given_v(self, v0_sample):\n        ''' This function infers state of hidden units given visible units '''\n        # compute the activation of the hidden units given a sample of\n        # the visibles\n        pre_sigmoid_h1, h1_mean = self.propup(v0_sample)\n        # get a sample of the hiddens given their activation\n        # Note that theano_rng.binomial returns a symbolic sample of dtype\n        # int64 by default. If we want to keep our computations in floatX\n        # for the GPU we need to specify to return the dtype floatX\n        h1_sample = self.theano_rng.binomial(size=h1_mean.shape,\n                                             n=1, p=h1_mean,\n                                             dtype=theano.config.floatX)\n        return [pre_sigmoid_h1, h1_mean, h1_sample]\n    def propdown(self, hid):\n        '''This function propagates the hidden units activation downwards to\n        the visible units\n        Note that we return also the pre_sigmoid_activation of the\n        layer. As it will turn out later, due to how Theano deals with\n        optimizations, this symbolic variable will be needed to write\n        down a more stable computational graph (see details in the\n        reconstruction cost function)\n        '''\n        pre_sigmoid_activation = T.dot(hid, self.W.T) + self.vbias\n        return [pre_sigmoid_activation, T.nnet.sigmoid(pre_sigmoid_activation)]\n    def sample_v_given_h(self, h0_sample):\n        ''' This function infers state of visible units given hidden units '''\n        # compute the activation of the visible given the hidden sample\n        pre_sigmoid_v1, v1_mean = self.propdown(h0_sample)\n        # get a sample of the visible given their activation\n        # Note that theano_rng.binomial returns a symbolic sample of dtype\n        # int64 by default. If we want to keep our computations in floatX\n        # for the GPU we need to specify to return the dtype floatX\n        v1_sample = self.theano_rng.binomial(size=v1_mean.shape,\n                                             n=1, p=v1_mean,\n                                             dtype=theano.config.floatX)\n        return [pre_sigmoid_v1, v1_mean, v1_sample]\n    def gibbs_hvh(self, h0_sample):\n        ''' This function implements one step of Gibbs sampling,\n            starting from the hidden state'''\n        pre_sigmoid_v1, v1_mean, v1_sample = self.sample_v_given_h(h0_sample)\n        pre_sigmoid_h1, h1_mean, h1_sample = self.sample_h_given_v(v1_sample)\n        return [pre_sigmoid_v1, v1_mean, v1_sample,\n                pre_sigmoid_h1, h1_mean, h1_sample]\n    def gibbs_vhv(self, v0_sample):\n        ''' This function implements one step of Gibbs sampling,\n            starting from the visible state'''\n        pre_sigmoid_h1, h1_mean, h1_sample = self.sample_h_given_v(v0_sample)\n        pre_sigmoid_v1, v1_mean, v1_sample = self.sample_v_given_h(h1_sample)\n        return [pre_sigmoid_h1, h1_mean, h1_sample,\n                pre_sigmoid_v1, v1_mean, v1_sample]\n    # start-snippet-2\n    def get_cost_updates(self, lr=0.1, persistent=None, k=1):\n        \"\"\"This functions implements one step of CD-k or PCD-k\n        :param lr: learning rate used to train the RBM\n        :param persistent: None for CD. For PCD, shared variable\n            containing old state of Gibbs chain. This must be a shared\n            variable of size (batch size, number of hidden units).\n        :param k: number of Gibbs steps to do in CD-k/PCD-k\n        Returns a proxy for the cost and the updates dictionary. The\n        dictionary contains the update rules for weights and biases but\n        also an update of the shared variable used to store the persistent\n        chain, if one is used.\n        \"\"\"\n        # compute positive phase\n        pre_sigmoid_ph, ph_mean, ph_sample = self.sample_h_given_v(self.input)\n        # decide how to initialize persistent chain:\n        # for CD, we use the newly generate hidden sample\n        # for PCD, we initialize from the old state of the chain\n        if persistent is None:\n            chain_start = ph_sample\n        else:\n            chain_start = persistent\n        # end-snippet-2\n        # perform actual negative phase\n        # in order to implement CD-k/PCD-k we need to scan over the\n        # function that implements one gibbs step k times.\n        # Read Theano tutorial on scan for more information :\n        # http://deeplearning.net/software/theano/library/scan.html\n        # the scan will return the entire Gibbs chain\n        (\n            [\n                pre_sigmoid_nvs,\n                nv_means,\n                nv_samples,\n                pre_sigmoid_nhs,\n                nh_means,\n                nh_samples\n            ],\n            updates\n        ) = theano.scan(\n            self.gibbs_hvh,\n            # the None are place holders, saying that\n            # chain_start is the initial state corresponding to the\n            # 6th output\n            outputs_info=[None, None, None, None, None, chain_start],\n            n_steps=k\n        )\n        # start-snippet-3\n        # determine gradients on RBM parameters\n        # note that we only need the sample at the end of the chain\n        chain_end = nv_samples[-1]\n        cost = T.mean(self.free_energy(self.input)) - T.mean(\n            self.free_energy(chain_end))\n        # We must not compute the gradient through the gibbs sampling\n        gparams = T.grad(cost, self.params, consider_constant=[chain_end])\n        # end-snippet-3 start-snippet-4\n        # constructs the update dictionary\n        for gparam, param in zip(gparams, self.params):\n            # make sure that the learning rate is of the right dtype\n            updates[param] = param - gparam * T.cast(\n                lr,\n                dtype=theano.config.floatX\n            )\n        if persistent:\n            # Note that this works only if persistent is a shared variable\n            updates[persistent] = nh_samples[-1]\n            # pseudo-likelihood is a better proxy for PCD\n            monitoring_cost = self.get_pseudo_likelihood_cost(updates)\n        else:\n            # reconstruction cross-entropy is a better proxy for CD\n            monitoring_cost = self.get_reconstruction_cost(updates,\n                                                           pre_sigmoid_nvs[-1])\n        return monitoring_cost, updates\n        # end-snippet-4\n    def get_pseudo_likelihood_cost(self, updates):\n        \"\"\"Stochastic approximation to the pseudo-likelihood\"\"\"\n        # index of bit i in expression p(x_i | x_{\\i})\n        bit_i_idx = theano.shared(value=0, name='bit_i_idx')\n        # binarize the input image by rounding to nearest integer\n        xi = T.round(self.input)\n        # calculate free energy for the given bit configuration\n        fe_xi = self.free_energy(xi)\n        # flip bit x_i of matrix xi and preserve all other bits x_{\\i}\n        # Equivalent to xi[:,bit_i_idx] = 1-xi[:, bit_i_idx], but assigns\n        # the result to xi_flip, instead of working in place on xi.\n        xi_flip = T.set_subtensor(xi[:, bit_i_idx], 1 - xi[:, bit_i_idx])\n        # calculate free energy with bit flipped\n        fe_xi_flip = self.free_energy(xi_flip)\n        # equivalent to e^(-FE(x_i)) / (e^(-FE(x_i)) + e^(-FE(x_{\\i})))\n        cost = T.mean(self.n_visible * T.log(T.nnet.sigmoid(fe_xi_flip -\n                                                            fe_xi)))\n        # increment bit_i_idx % number as part of updates\n        updates[bit_i_idx] = (bit_i_idx + 1) % self.n_visible\n        return cost\n    def get_reconstruction_cost(self, updates, pre_sigmoid_nv):\n        \"\"\"Approximation to the reconstruction error\n        Note that this function requires the pre-sigmoid activation as\n        input.  To understand why this is so you need to understand a\n        bit about how Theano works. Whenever you compile a Theano\n        function, the computational graph that you pass as input gets\n        optimized for speed and stability.  This is done by changing\n        several parts of the subgraphs with others.  One such\n        optimization expresses terms of the form log(sigmoid(x)) in\n        terms of softplus.  We need this optimization for the\n        cross-entropy since sigmoid of numbers larger than 30. (or\n        even less then that) turn to 1. and numbers smaller than\n        -30. turn to 0 which in terms will force theano to compute\n        log(0) and therefore we will get either -inf or NaN as\n        cost. If the value is expressed in terms of softplus we do not\n        get this undesirable behaviour. This optimization usually\n        works fine, but here we have a special case. The sigmoid is\n        applied inside the scan op, while the log is\n        outside. Therefore Theano will only see log(scan(..)) instead\n", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "length": 1545, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "2f4b3c5fc9ed076b95ed19ce205e786f9d4793438d046e27"}
{"input": "", "context": "/*\n    Copyright 2014 Travel Modelling Group, Department of Civil Engineering, University of Toronto\n    This file is part of XTMF.\n    XTMF is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    XTMF is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n    You should have received a copy of the GNU General Public License\n    along with XTMF.  If not, see <http://www.gnu.org/licenses/>.\n*/\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.IO;\nusing XTMF;\nnamespace Tasha.Common\n{\n    public class TripChain : Attachable, ITripChain\n    {\n        public static ITashaRuntime TashaRuntime;\n        public static int TripChainNumber;\n        public static int TripDestinationPlanningDistrct;\n        public static int TripDestinationZone;\n        public static bool TripHeader;\n        public static int TripHouseholdID;\n        public static int TripJointTourID;\n        public static int TripJointTourRep;\n        public static int TripNumber;\n        public static int TripObservedMode;\n        public static int TripOriginZone;\n        public static int TripPersonID;\n        public static int TripPlanningDistrictOrigin;\n        public static int TripPurposeDestination;\n        public static int TripPurposeOrigin;\n        public static int TripStartTime;\n        private static ConcurrentQueue<TripChain> TripChains = new ConcurrentQueue<TripChain>();\n        /// <summary>\n        /// The person that this trip chain belongs to\n        /// </summary>\n        /// <summary>\n        ///\n        /// </summary>\n        /// <param name=\"person\"></param>\n        public TripChain(ITashaPerson person)\n        {\n            Person = person;\n            Trips = new List<ITrip>(3 );\n        }\n        /// <summary>\n        /// The End Time of this Trip Chain (The time returned home)\n        /// </summary>\n        public Time EndTime\n        {\n            get\n            {\n                return Trips[Trips.Count - 1].ActivityStartTime;\n            }\n        }\n        public ITripChain GetRepTripChain\n        {\n            get;\n            internal set;\n        }\n        /// <summary>\n        /// Is this a joint trip?\n        /// </summary>\n        public bool JointTrip\n        {\n            get\n            {\n                return JointTripID != 0;\n            }\n        }\n        public List<ITripChain> JointTripChains\n        {\n            get\n            {\n                if (!JointTrip) return null;\n                List<ITripChain> linkedTripChains = new List<ITripChain>();\n                foreach (var p in Person.Household.Persons)\n                {\n                    foreach (var tripChain in p.TripChains)\n                    {\n                        if (tripChain.JointTripID == JointTripID)\n                            linkedTripChains.Add(tripChain);\n                    }\n                }\n                return linkedTripChains;\n            }\n        }\n        /// <summary>\n        /// What is the ID of this joint trip?\n        /// </summary>\n        public int JointTripID\n        {\n            get;\n            set;\n        }\n        /// <summary>\n        /// Is the owned the Representative for the joint trip?\n        /// </summary>\n        public bool JointTripRep\n        {\n            get;\n            set;\n        }\n        public ITashaPerson Person\n        {\n            get;\n            set;\n        }\n        /// <summary>\n        /// The Start Time of this TripChain\n        /// </summary>\n        public Time StartTime\n        {\n            get\n            {\n                return Trips[0].TripStartTime;\n            }\n        }\n        public bool TripChainRequiresPV\n        {\n            get\n            {\n                foreach (var t in Trips)\n                {\n                    if (!t.Mode.NonPersonalVehicle)\n                    {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        }\n        /// <summary>\n        /// The trips in this trip chain\n        /// </summary>\n        public List<ITrip> Trips\n        {\n            get;\n            set;\n        }\n        public static IEnumerable<ITrip> GetTrips(ITashaHousehold household)\n        {\n            foreach (var person in household.Persons)\n            {\n                foreach (var chain in person.TripChains)\n                {\n                    foreach (var trip in chain.Trips)\n                    {\n                        yield return trip;\n                    }\n                }\n            }\n        }\n        public static TripChain MakeChain(ITashaPerson iPerson)\n        {\n            if (!TripChains.TryDequeue(out TripChain c))\n            {\n                return new TripChain(iPerson);\n            }\n            c.Person = iPerson;\n            return c;\n        }\n        public static void Save(string fileName, IEnumerable<ITashaHousehold> households)\n        {\n            using (StreamWriter writer = new StreamWriter(fileName))\n            {\n                //write header\n                if (TripHeader)\n                    writer.WriteLine(\"hhld_num,pers_num,trip_num,start_time,mode_prime,purp_orig,pd_orig,gta96_orig,gta01_orig,purp_dest,pd_dest,gta96_dest,gta01_dest,trip_km,jointTourID,jointTourRep\" );\n                foreach (var household in households)\n                {\n                    foreach (var trip in GetTrips(household))\n                    {\n                        int jointTourLeader = 0;\n                        int personNum = 1;\n                        foreach (var p in household.Persons)\n                        {\n                            if ((p.TripChains.FindLast((chain) => (chain.JointTripID == trip.TripChain.JointTripID && chain.JointTripRep)) ) != null )\n                            {\n                                jointTourLeader = personNum;\n                                break;\n                            }\n                            personNum++;\n                        }\n                        ActivityConverter.Converter.GetTripActivities(trip, trip.TripChain, out char purposeOrigin, out char purposeDestination);\n                        string[] attributes = new string[22];\n                        for ( int i = 0; i < attributes.Length; i++)\n                        {\n                            attributes[i] = \"\";\n                        }\n                        attributes[TripHouseholdID] = household.HouseholdId.ToString();\n                        attributes[TripPersonID] = trip.TripChain.Person.Id.ToString();\n                        attributes[TripNumber] = trip.TripNumber.ToString();\n                        attributes[TripStartTime] = trip.ActivityStartTime.ToString();\n                        attributes[TripObservedMode] = ((char)trip[\"ObservedMode\"]).ToString();\n                        attributes[TripPurposeOrigin] = purposeOrigin.ToString();\n                        attributes[TripOriginZone] = trip.OriginalZone.ZoneNumber.ToString();\n                        attributes[TripPurposeDestination] = purposeDestination.ToString();\n                        attributes[TripDestinationZone] = trip.DestinationZone.ZoneNumber.ToString();\n                        attributes[TripJointTourID] = trip.TripChain.JointTripID.ToString();\n                        attributes[TripJointTourRep] = jointTourLeader.ToString();\n                        string line = string.Empty;\n                        for ( int i = 0; i < attributes.Length; i++)\n                        {\n                            line += attributes[i] + \",\";\n                        }\n                        writer.WriteLine(line);\n                    }\n                }\n            }\n        }\n        public void Recycle()\n        {\n            Release();\n            var trips = Trips;\n            for (int i = 0; i < trips.Count; i++)\n            {\n                trips[i].Recycle();\n            }\n            Trips.Clear();\n            if (Passengers != null )\n            {\n                Passengers.Clear();\n            }\n            GetRepTripChain = null;\n            JointTripRep = false;\n            JointTripID = 0;\n            if (JointTripChains != null)\n            {\n                JointTripChains.Clear();\n            }\n            GetRepTripChain = null;\n            TripChains.Enqueue(this);\n        }\n        internal static void ReleaseChainPool()\n        {\n            while (TripChains.TryDequeue(out TripChain c))\n            {\n            }\n        }\n        #region ITripChain Members\n        public List<ITashaPerson> Passengers\n        {\n            get { return null; }\n        }\n        #endregion ITripChain Members\n        #region ITripChain Members\n        public List<IVehicleType> RequiresVehicle\n        {\n            get\n            {\n                List<IVehicleType> v = new List<IVehicleType>();\n                foreach (var trip in Trips)\n                {\n                    if (trip.Mode.RequiresVehicle != null )\n                    {\n                        if (!v.Contains(trip.Mode.RequiresVehicle))\n                        {\n                            v.Add(trip.Mode.RequiresVehicle);\n                        }\n                    }\n                }\n                return v;\n            }\n        }\n        #endregion ITripChain Members\n        #region ITripChain Members\n        /// <summary>\n        /// Shallow clone of this trip chain (does not clone trips)\n        /// </summary>\n        /// <returns></returns>\n        public ITripChain Clone()\n        {\n", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "length": 798, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "56844ac1504cf5c0deead58918e34e5d20b9652dad86277c"}
{"input": "", "context": "// $Id: FigAssociation.java 16903 2009-03-19 20:45:44Z thn $\n// Copyright (c) 1996-2009 The Regents of the University of California. All\n// Rights Reserved. Permission to use, copy, modify, and distribute this\n// software and its documentation without fee, and without a written\n// agreement is hereby granted, provided that the above copyright notice\n// and this paragraph appear in all copies.  This software program and\n// documentation are copyrighted by The Regents of the University of\n// California. The software program and documentation are supplied \"AS\n// IS\", without any accompanying services from The Regents. The Regents\n// does not warrant that the operation of the program will be\n// uninterrupted or error-free. The end-user understands that the program\n// was developed for research purposes and is advised not to rely\n// exclusively on the program for any reason.  IN NO EVENT SHALL THE\n// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\n// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\npackage org.argouml.uml.diagram.ui;\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.event.MouseEvent;\nimport java.beans.PropertyChangeEvent;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.Vector;\nimport org.apache.log4j.Logger;\nimport org.argouml.model.AddAssociationEvent;\nimport org.argouml.model.AttributeChangeEvent;\nimport org.argouml.model.Model;\nimport org.argouml.notation.NotationProviderFactory2;\nimport org.argouml.ui.ArgoJMenu;\nimport org.argouml.ui.targetmanager.TargetManager;\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.tigris.gef.base.Layer;\nimport org.tigris.gef.presentation.ArrowHead;\nimport org.tigris.gef.presentation.ArrowHeadComposite;\nimport org.tigris.gef.presentation.ArrowHeadDiamond;\nimport org.tigris.gef.presentation.ArrowHeadGreater;\nimport org.tigris.gef.presentation.ArrowHeadNone;\nimport org.tigris.gef.presentation.FigNode;\nimport org.tigris.gef.presentation.FigText;\n/**\n * This class represents the Fig of a binary association on a diagram.\n *\n */\npublic class FigAssociation extends FigEdgeModelElement {\n    private static final Logger LOG = Logger.getLogger(FigAssociation.class);\n    /**\n     * Group for the FigTexts concerning the source association end.\n     */\n    private FigAssociationEndAnnotation srcGroup;\n    /**\n     * Group for the FigTexts concerning the dest association end.\n     */\n    private FigAssociationEndAnnotation destGroup;\n    /**\n     * Group for the FigTexts concerning the name and stereotype of the\n     * association itself.\n     */\n    private FigTextGroup middleGroup;\n    private FigMultiplicity srcMult;\n    private FigMultiplicity destMult;\n    /**\n     * Don't call this constructor directly. It is public since this\n     * is necessary for loading. Use the FigAssociation(Object, Layer)\n     * constructor instead!\n     * @deprecated for 0.27.3 by tfmorris.  Use \n     * {@link #FigAssociation(Object, DiagramSettings)}.\n     */\n    @SuppressWarnings(\"deprecation\")\n    @Deprecated\n    public FigAssociation() {\n        super();\n        middleGroup = new FigTextGroup();\n        \n        //////////////////////////////////////////////////////////////////\n        // NOTE: If this needs to be updated during the deprecation period\n        // also update the constructor below\n        //////////////////////////////////////////////////////////////////\n        \n        // let's use groups to construct the different text sections at\n        // the association\n        if (getNameFig() != null) {\n            middleGroup.addFig(getNameFig());\n        }\n        \n        middleGroup.addFig(getStereotypeFig());\n        // Placed perpendicular to midpoint of edge\n        addPathItem(middleGroup,\n                new PathItemPlacement(this, middleGroup, 50, 25));\n        ArgoFigUtil.markPosition(this, 50, 0, 90, 25, Color.yellow);\n        \n        srcMult = new FigMultiplicity();\n        // Placed at a 45 degree angle close to the end\n        addPathItem(srcMult, \n                new PathItemPlacement(this, srcMult, 0, 5, 135, 5));\n        ArgoFigUtil.markPosition(this, 0, 5, 135, 5, Color.green);\n        \n        //////////////////////////////////////////////////////////////////\n        // NOTE: If this needs to be updated during the deprecation period\n        // also update the constructor below\n        //////////////////////////////////////////////////////////////////\n        \n        srcGroup = new FigAssociationEndAnnotation(this);\n        addPathItem(srcGroup, \n                new PathItemPlacement(this, srcGroup, 0, 5, -135, 5));\n        ArgoFigUtil.markPosition(this, 0, 5, -135, 5, Color.blue);\n        destMult = new FigMultiplicity();\n        addPathItem(destMult,\n                new PathItemPlacement(this, destMult, 100, -5, 45, 5));\n        ArgoFigUtil.markPosition(this, 100, -5, 45, 5, Color.red);\n        \n        //////////////////////////////////////////////////////////////////\n        // NOTE: If this needs to be updated during the deprecation period\n        // also update the constructor below\n        //////////////////////////////////////////////////////////////////\n                \n        destGroup = new FigAssociationEndAnnotation(this);\n        addPathItem(destGroup,\n                new PathItemPlacement(this, destGroup, 100, -5, -45, 5));\n        ArgoFigUtil.markPosition(this, 100, -5, -45, 5, Color.orange);\n                \n        setBetweenNearestPoints(true);\n    }\n    /**\n     * Constructor used by PGML parser.\n     * \n     * @param owner owning uml element\n     * @param settings rendering settings\n     */\n    public FigAssociation(Object owner, DiagramSettings settings) {\n        super(owner, settings);\n        \n        createNameLabel(owner, settings);\n        \n        Object[] ends = // UML objects of AssociationEnd type\n            Model.getFacade().getConnections(owner).toArray();\n        \n        srcMult = new FigMultiplicity(ends[0], settings);\n        addPathItem(srcMult, \n                new PathItemPlacement(this, srcMult, 0, 5, 135, 5));\n        ArgoFigUtil.markPosition(this, 0, 5, 135, 5, Color.green);\n        \n        srcGroup = new FigAssociationEndAnnotation(this, ends[0], settings);\n        addPathItem(srcGroup, \n                new PathItemPlacement(this, srcGroup, 0, 5, -135, 5));\n        ArgoFigUtil.markPosition(this, 0, 5, -135, 5, Color.blue);\n        destMult = new FigMultiplicity(ends[1], settings);\n        addPathItem(destMult,\n                new PathItemPlacement(this, destMult, 100, -5, 45, 5));\n        ArgoFigUtil.markPosition(this, 100, -5, 45, 5, Color.red);\n        \n        destGroup = new FigAssociationEndAnnotation(this, ends[1], settings);\n        addPathItem(destGroup,\n                new PathItemPlacement(this, destGroup, 100, -5, -45, 5));\n        ArgoFigUtil.markPosition(this, 100, -5, -45, 5, Color.orange);\n        setBetweenNearestPoints(true);\n        \n        initializeNotationProvidersInternal(owner);\n    }\n    \n    /**\n     * Constructor that hooks the Fig to an existing UML element.\n     *\n     * @param edge the UML element\n     * @param lay the layer\n     * @deprecated for 0.27.3 by tfmorris.  Use \n     * {@link #FigAssociation(Object, DiagramSettings)}.\n     */\n    @Deprecated\n    public FigAssociation(Object edge, Layer lay) {\n        this();\n        setOwner(edge);\n        setLayer(lay);\n    }\n    /**\n     * Create the main draggable label for the association.\n     * This can be overridden in subclasses to change behaviour.\n     * TODO: Consider introducing this to FigEdgeModelElement and\n     * using throughout all edges.\n     * \n     * @param owner owning uml element\n     * @param settings rendering settings\n     */\n    protected void createNameLabel(Object owner, DiagramSettings settings) {\n        middleGroup = new FigTextGroup(owner, settings);\n     \n        // let's use groups to construct the different text sections at\n        // the association\n        if (getNameFig() != null) {\n            middleGroup.addFig(getNameFig());\n        }\n        middleGroup.addFig(getStereotypeFig());\n        addPathItem(middleGroup,\n                new PathItemPlacement(this, middleGroup, 50, 25));\n        ArgoFigUtil.markPosition(this, 50, 0, 90, 25, Color.yellow);\n    }\n    \n    /**\n     * Set the owner.\n     * \n     * @param owner ignored\n     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#setOwner(java.lang.Object)\n     * @deprecated for 0.27.3 by tfmorris.  Set the owner in the constructor.\n     */\n    @SuppressWarnings(\"deprecation\")\n    @Deprecated\n    @Override\n    public void setOwner(Object owner) {\n        super.setOwner(owner);\n        \n        Object[] ends = \n            Model.getFacade().getConnections(owner).toArray();\n        \n        Object source = ends[0];\n        Object dest = ends[1];\n        \n        srcGroup.setOwner(source);\n        srcMult.setOwner(source);\n        \n        destGroup.setOwner(dest);\n        destMult.setOwner(dest);\n    }\n    @Override\n    public void renderingChanged() {\n        super.renderingChanged();\n        /* This fixes issue 4987: */\n        srcMult.renderingChanged();\n        destMult.renderingChanged();\n        srcGroup.renderingChanged();\n        destGroup.renderingChanged();\n        middleGroup.renderingChanged();\n    }\n    @Override\n    protected void initNotationProviders(Object own) {\n        initializeNotationProvidersInternal(own);\n    }\n    private void initializeNotationProvidersInternal(Object own) {\n        super.initNotationProviders(own);\n        srcMult.initNotationProviders();\n        destMult.initNotationProviders();\n    }\n    /*\n     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)\n     */\n    @Override\n    public void updateListeners(Object oldOwner, Object newOwner) {\n        Set<Object[]> listeners = new HashSet<Object[]>();\n        if (newOwner != null) {\n            listeners.add(\n                    new Object[] {newOwner,\n                                  new String[] {\"isAbstract\", \"remove\"}\n                    });\n        }\n        updateElementListeners(listeners);\n        /* No further listeners required in this case - the rest is handled \n         * by the notationProvider and sub-Figs. */\n    }\n    /*\n     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()\n     */\n    @Override\n    protected int getNotationProviderType() {\n        return NotationProviderFactory2.TYPE_ASSOCIATION_NAME;\n    }\n    /*\n     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEdited(org.tigris.gef.presentation.FigText)\n     */\n    @Override\n    protected void textEdited(FigText ft) {\n        if (getOwner() == null) {\n            return;\n        }\n        super.textEdited(ft);\n        \n        Collection conn = Model.getFacade().getConnections(getOwner());\n        if (conn == null || conn.size() == 0) {\n            return;\n        }\n\tif (ft == srcGroup.getRole()) {\n\t    srcGroup.getRole().textEdited();\n\t} else if (ft == destGroup.getRole()) {\n\t    destGroup.getRole().textEdited();\n\t} else if (ft == srcMult) {\n            srcMult.textEdited();\n\t} else if (ft == destMult) {\n            destMult.textEdited();\n\t}\n    }\n    /*\n     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)\n     */\n    @Override\n    protected void textEditStarted(FigText ft) {\n        if (ft == srcGroup.getRole()) {\n            srcGroup.getRole().textEditStarted();\n        } else if (ft == destGroup.getRole()) {\n            destGroup.getRole().textEditStarted();\n        } else if (ft == srcMult) {\n            srcMult.textEditStarted();\n        } else if (ft == destMult) {\n            destMult.textEditStarted();\n        } else {\n            super.textEditStarted(ft);\n        }\n    }\n    /**\n     * Choose the arrowhead style for each end. <p>\n     * \n     * TODO: This is called from paint(). Would it not better \n     * be called from renderingChanged()?\n     */\n    protected void applyArrowHeads() {\n        if (srcGroup == null || destGroup == null) {\n            /* This only happens if model-change events arrive \n             * before we are completely constructed. */\n            return;\n        }\n        int sourceArrowType = srcGroup.getArrowType();\n        int destArrowType = destGroup.getArrowType();\n        if (!getSettings().isShowBidirectionalArrows()\n                && sourceArrowType > 2\n                && destArrowType > 2) {\n            sourceArrowType -= 3;\n            destArrowType -= 3;\n        }\n        \n        setSourceArrowHead(FigAssociationEndAnnotation\n                .ARROW_HEADS[sourceArrowType]);\n        setDestArrowHead(FigAssociationEndAnnotation\n                .ARROW_HEADS[destArrowType]);\n    }\n    \n    /*\n     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)\n     */\n    @Override\n    public Vector getPopUpActions(MouseEvent me) {\n\tVector popUpActions = super.getPopUpActions(me);\n        /* Check if multiple items are selected: */\n        boolean ms = TargetManager.getInstance().getTargets().size() > 1;\n        /* None of the menu-items below apply\n         * when multiple modelelements are selected:*/\n        if (ms) {\n            return popUpActions;\n        }\n\t// x^2 + y^2 = r^2  (equation of a circle)\n\tPoint firstPoint = this.getFirstPoint();\n\tPoint lastPoint = this.getLastPoint();\n\tint length = getPerimeterLength();\n\tint rSquared = (int) (.3 * length);\n\t// max distance is set at 100 pixels, (rSquared = 100^2)\n\tif (rSquared > 100) {\n\t    rSquared = 10000;\n        } else {\n\t    rSquared *= rSquared;\n        }\n\tint srcDeterminingFactor =\n\t    getSquaredDistance(me.getPoint(), firstPoint);\n\tint destDeterminingFactor =\n\t    getSquaredDistance(me.getPoint(), lastPoint);\n\tif (srcDeterminingFactor < rSquared\n\t    && srcDeterminingFactor < destDeterminingFactor) {\n            ArgoJMenu multMenu =\n\t\tnew ArgoJMenu(\"menu.popup.multiplicity\");\n            multMenu.add(ActionMultiplicity.getSrcMultOne());\n            multMenu.add(ActionMultiplicity.getSrcMultZeroToOne());\n            multMenu.add(ActionMultiplicity.getSrcMultOneToMany());\n            multMenu.add(ActionMultiplicity.getSrcMultZeroToMany());\n            popUpActions.add(popUpActions.size() - getPopupAddOffset(),\n                    multMenu);\n            ArgoJMenu aggMenu = new ArgoJMenu(\"menu.popup.aggregation\");\n\t    aggMenu.add(ActionAggregation.getSrcAggNone());\n\t    aggMenu.add(ActionAggregation.getSrcAgg());\n\t    aggMenu.add(ActionAggregation.getSrcAggComposite());\n\t    popUpActions.add(popUpActions.size() - getPopupAddOffset(),\n                    aggMenu);\n\t} else if (destDeterminingFactor < rSquared) {\n            ArgoJMenu multMenu =\n\t\tnew ArgoJMenu(\"menu.popup.multiplicity\");\n\t    multMenu.add(ActionMultiplicity.getDestMultOne());\n\t    multMenu.add(ActionMultiplicity.getDestMultZeroToOne());\n\t    multMenu.add(ActionMultiplicity.getDestMultOneToMany());\n\t    multMenu.add(ActionMultiplicity.getDestMultZeroToMany());\n\t    popUpActions.add(popUpActions.size() - getPopupAddOffset(),\n                    multMenu);\n            ArgoJMenu aggMenu = new ArgoJMenu(\"menu.popup.aggregation\");\n\t    aggMenu.add(ActionAggregation.getDestAggNone());\n\t    aggMenu.add(ActionAggregation.getDestAgg());\n\t    aggMenu.add(ActionAggregation.getDestAggComposite());\n\t    popUpActions\n                    .add(popUpActions.size() - getPopupAddOffset(), aggMenu);\n\t}\n\t// else: No particular options for right click in middle of line\n\t// Options available when right click anywhere on line\n\tObject association = getOwner();\n\tif (association != null) {\n\t    // Navigability menu with suboptions built dynamically to\n\t    // allow navigability from atart to end, from end to start\n\t    // or bidirectional\n\t    Collection ascEnds = Model.getFacade().getConnections(association);\n            Iterator iter = ascEnds.iterator();\n\t    Object ascStart = iter.next();\n\t    Object ascEnd = iter.next();\n\t    if (Model.getFacade().isAClassifier(\n\t            Model.getFacade().getType(ascStart))\n                    && Model.getFacade().isAClassifier(\n                            Model.getFacade().getType(ascEnd))) {\n                ArgoJMenu navMenu =\n\t\t    new ArgoJMenu(\"menu.popup.navigability\");\n\t\tnavMenu.add(ActionNavigability.newActionNavigability(\n                    ascStart,\n\t\t    ascEnd,\n\t\t    ActionNavigability.BIDIRECTIONAL));\n\t\tnavMenu.add(ActionNavigability.newActionNavigability(\n                    ascStart,\n\t\t    ascEnd,\n\t\t    ActionNavigability.STARTTOEND));\n\t\tnavMenu.add(ActionNavigability.newActionNavigability(\n                    ascStart,\n                    ascEnd,\n                    ActionNavigability.ENDTOSTART));\n\t\tpopUpActions.add(popUpActions.size() - getPopupAddOffset(),\n                        navMenu);\n\t    }\n\t}\n\treturn popUpActions;\n    }\n    /**\n     * Updates the multiplicity fields.\n     */\n    protected void updateMultiplicity() {\n        if (getOwner() != null \n                && srcMult.getOwner() != null \n                && destMult.getOwner() != null) {\n            srcMult.setText();\n            destMult.setText();\n        }\n    }\n    /*\n     * @see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)\n     */\n    @Override\n    public void paint(Graphics g) {\n        if (getOwner() == null ) {\n            LOG.error(\"Trying to paint a FigAssociation without an owner. \");\n        } else {\n            applyArrowHeads(); \n        }\n        if (getSourceArrowHead() != null && getDestArrowHead() != null) {\n            getSourceArrowHead().setLineColor(getLineColor());\n            getDestArrowHead().setLineColor(getLineColor());\n        }\n        super.paint(g);\n    }\n    /*\n     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#paintClarifiers(java.awt.Graphics)\n     */\n    @Override\n    public void paintClarifiers(Graphics g) {\n        indicateBounds(getNameFig(), g);\n        indicateBounds(srcMult, g);\n        indicateBounds(srcGroup.getRole(), g);\n        indicateBounds(destMult, g);\n        indicateBounds(destGroup.getRole(), g);\n        super.paintClarifiers(g);\n    }\n    /**\n     * @return Returns the middleGroup.\n     */\n    protected FigTextGroup getMiddleGroup() {\n        return middleGroup;\n    }\n    \n    /**\n     * Lays out the association edges as any other edge except for\n     * special rules for an association that loops back to the same\n     * class. For this it is snapped back to the bottom right corner\n     * if it resized to the point of not being visible.\n     * @see org.tigris.gef.presentation.FigEdgePoly#layoutEdge()\n     */\n    @Override\n    protected void layoutEdge() {\n        FigNode sourceFigNode = getSourceFigNode();\n        Point[] points = getPoints();\n        if (points.length < 3\n                && sourceFigNode != null\n                && getDestFigNode() == sourceFigNode) {\n            Rectangle rect = new Rectangle(\n                    sourceFigNode.getX() + sourceFigNode.getWidth() - 20,\n                    sourceFigNode.getY() + sourceFigNode.getHeight() - 20,\n                    40,\n                    40);\n            points = new Point[5];\n            points[0] = new Point(rect.x, rect.y + rect.height / 2);\n            points[1] = new Point(rect.x, rect.y + rect.height);\n            points[2] = new Point(rect.x + rect.width , rect.y + rect.height);\n            points[3] = new Point(rect.x + rect.width , rect.y);\n            points[4] = new Point(rect.x + rect.width / 2, rect.y);\n            setPoints(points);\n        } else {\n            super.layoutEdge();\n        }\n    }\n    \n    /**\n     * If the name is updated, update the bounds of the middle group.\n     * This makes the selection box appear correctly during prop-panel edit.\n     * This is a temporary solution, until a better architecture is decided \n     * upon, see issue 5477 and \n     * http://argouml.tigris.org/issues/show_bug.cgi?id=5621#desc19.\n     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateNameText()\n     */\n    protected void updateNameText() {\n        super.updateNameText();\n        // TODO: Without the null check the following throws a NPE so many\n        // times when it is called from FigEdgeModelElement.modelChanged(),\n        // we need to think about it.\n        if (middleGroup != null) {\n            middleGroup.calcBounds();\n        }\n    }\n    \n    \n} /* end class FigAssociation */\n/**\n * A Fig representing the multiplicity of some model element.\n * This has potential reuse for other edges showing multiplicity. <p>\n * \n * The owner is an AssociationEnd.\n * \n * @author Bob Tarling\n */\nclass FigMultiplicity extends FigSingleLineTextWithNotation {\n    @SuppressWarnings(\"deprecation\")\n    @Deprecated\n    FigMultiplicity() {\n        super(X0, Y0, 90, 20, false, new String[] {\"multiplicity\"});\n        setTextFilled(false);\n        setJustification(FigText.JUSTIFY_CENTER);\n    }\n    FigMultiplicity(Object owner, DiagramSettings settings) {\n        super(owner, new Rectangle(X0, Y0, 90, 20), settings, false,\n                \"multiplicity\");\n        setTextFilled(false);\n        setJustification(FigText.JUSTIFY_CENTER);\n    }\n    @Override\n    protected int getNotationProviderType() {\n        return NotationProviderFactory2.TYPE_MULTIPLICITY;\n    }\n}\n/**\n * A textual Fig representing the ordering of some model element,\n * i.e. \"{ordered}\" or nothing.\n * This has potential reuse for other edges showing ordering. <p>\n * \n * This Fig is not editable by the user.\n * \n * @author Bob Tarling\n */\nclass FigOrdering extends FigSingleLineText {\n    private static final long serialVersionUID = 5385230942216677015L;\n    @SuppressWarnings(\"deprecation\")\n    @Deprecated\n    FigOrdering() {\n        super(X0, Y0, 90, 20, false, \"ordering\");\n        setTextFilled(false);\n        setJustification(FigText.JUSTIFY_CENTER);\n        setEditable(false);\n    }\n    \n    FigOrdering(Object owner, DiagramSettings settings) {\n        super(owner, new Rectangle(X0, Y0, 90, 20), settings, false, \n                \"ordering\");\n        setTextFilled(false);\n        setJustification(FigText.JUSTIFY_CENTER);\n        setEditable(false);\n    }\n    \n    @Override\n    protected void setText() {\n        assert getOwner() != null;\n        if (getSettings().getNotationSettings().isShowProperties()) {\n            setText(getOrderingName(Model.getFacade().getOrdering(getOwner())));\n        } else {\n            setText(\"\");\n        }\n        damage();\n    }\n    /**\n     * Returns the name of the OrderingKind.\n     *\n     * @param orderingKind the kind of ordering\n     * @return \"{ordered}\" or \"\", the latter if null or unordered\n     */\n    private String getOrderingName(Object orderingKind) {\n        if (orderingKind == null) {\n            return \"\";\n        }\n        if (Model.getFacade().getName(orderingKind) == null) {\n            return \"\";\n        }\n        if (\"\".equals(Model.getFacade().getName(orderingKind))) {\n            return \"\";\n        }\n        if (\"unordered\".equals(Model.getFacade().getName(orderingKind))) {\n            return \"\";\n        }\n        // TODO: I18N\n        return \"{\" + Model.getFacade().getName(orderingKind) + \"}\";\n    }\n}\n/**\n * A Fig representing the association end role of some model element.\n * \n * @author Bob Tarling\n */\nclass FigRole extends FigSingleLineTextWithNotation {\n    /**\n     * @deprecated for 0.27.3 by tfmorris.  Use \n     * {@link FigRole#FigRole(Object, DiagramSettings)}/\n     */\n    @SuppressWarnings(\"deprecation\")\n    @Deprecated\n    FigRole() {\n        super(X0, Y0, 90, 20, false, (String[]) null \n        // no need to listen to these property changes - the \n        // notationProvider takes care of registering these.\n                /*, new String[] {\"name\", \"visibility\", \"stereotype\"}*/\n                );\n        setTextFilled(false);\n        setJustification(FigText.JUSTIFY_CENTER);\n    }\n    \n    FigRole(Object owner, DiagramSettings settings) {\n        super(owner, new Rectangle(X0, Y0, 90, 20), settings, false, \n                (String[]) null \n        // no need to listen to these property changes - the \n        // notationProvider takes care of this.\n                /*, new String[] {\"name\", \"visibility\", \"stereotype\"}*/\n                );\n        setTextFilled(false);\n        setJustification(FigText.JUSTIFY_CENTER);\n        setText();\n    }\n    protected int getNotationProviderType() {\n        return NotationProviderFactory2.TYPE_ASSOCIATION_END_NAME;\n    }\n    \n    /**\n     * Property change listener to recalculate bounds of enclosing\n     * group whenever any properties of the FigRole get changed.\n     * This is only really needed for the name, see issue 5621.\n     * @param pce The property change event to process.\n     * @see org.argouml.uml.diagram.ui.FigSingleLineTextWithNotation#propertyChange(java.beans.PropertyChangeEvent)\n     */\n    @Override\n    public void propertyChange(PropertyChangeEvent pce) {\n        super.propertyChange(pce);\n        this.getGroup().calcBounds();\n    }\n}\n/**\n * The arrowhead and the group of labels shown at the association end: \n * the role name and the ordering property. \n * This does not include the multiplicity. <p>\n * \n * This class does not yet support arrows for a FigAssociationEnd, \n * as is used for N-ary associations.\n */\nclass FigAssociationEndAnnotation extends FigTextGroup {\n    private static final long serialVersionUID = 1871796732318164649L;\n    \n    private static final ArrowHead NAV_AGGR =\n        new ArrowHeadComposite(ArrowHeadDiamond.WhiteDiamond,\n                   new ArrowHeadGreater());\n    private static final ArrowHead NAV_COMP =\n        new ArrowHeadComposite(ArrowHeadDiamond.BlackDiamond,\n                   new ArrowHeadGreater());\n    // These are a list of arrow types. Positioning is important as we subtract\n    // 3 to convert a navigable arrow to a non navigable with the same\n    // aggregation\n    private static final int NONE = 0;\n    private static final int AGGREGATE = 1;\n    private static final int COMPOSITE = 2;\n    private static final int NAV_NONE = 3;\n    private static final int NAV_AGGREGATE = 4;\n    private static final int NAV_COMPOSITE = 5;\n    \n    /**\n     * All the arrow head types.\n     */\n    public static final ArrowHead[] ARROW_HEADS = new ArrowHead[6];\n    static {\n        ARROW_HEADS[NONE] = ArrowHeadNone.TheInstance;\n        ARROW_HEADS[AGGREGATE] = ArrowHeadDiamond.WhiteDiamond;\n        ARROW_HEADS[COMPOSITE] = ArrowHeadDiamond.BlackDiamond;\n        ARROW_HEADS[NAV_NONE] = new ArrowHeadGreater();\n        ARROW_HEADS[NAV_AGGREGATE] = NAV_AGGR;\n        ARROW_HEADS[NAV_COMPOSITE] = NAV_COMP;\n    }\n    \n    private FigRole role;\n    private FigOrdering ordering;\n    private int arrowType = 0;\n    private FigEdgeModelElement figEdge;\n    @SuppressWarnings(\"deprecation\")\n    @Deprecated\n    FigAssociationEndAnnotation(FigEdgeModelElement edge) {\n        figEdge = edge;\n        \n", "answers": ["        role = new FigRole();"], "length": 2539, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "7a627326b6cbfae5c43eed0af5bcb833c7ed1f0b3af986c6"}
{"input": "", "context": "// \n// Copyright (c) 2004-2006 Jaroslaw Kowalski <jaak@jkowalski.net>\n// \n// All rights reserved.\n// \n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n// * Redistributions of source code must retain the above copyright notice, \n//   this list of conditions and the following disclaimer. \n// \n// * Redistributions in binary form must reproduce the above copyright notice,\n//   this list of conditions and the following disclaimer in the documentation\n//   and/or other materials provided with the distribution. \n// \n// * Neither the name of Jaroslaw Kowalski nor the names of its \n//   contributors may be used to endorse or promote products derived from this\n//   software without specific prior written permission. \n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE \n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF \n// THE POSSIBILITY OF SUCH DAMAGE.\n// \n#if !NETCF\nusing System;\nusing System.Reflection;\nusing System.Diagnostics;\nusing System.Collections;\nusing NLog.Internal;\nusing NLog.Config;\nusing System.Collections.Generic;\nnamespace NLog.Win32.Targets\n{\n    /// <summary>\n    /// Increments specified performance counter on each write.\n    /// </summary>\n    /// <example>\n    /// <p>\n    /// To set up the target in the <a href=\"config.html\">configuration file</a>, \n    /// use the following syntax:\n    /// </p>\n    /// <code lang=\"XML\" src=\"examples/targets/Configuration File/PerfCounter/NLog.config\" />\n    /// <p>\n    /// This assumes just one target and a single rule. More configuration\n    /// options are described <a href=\"config.html\">here</a>.\n    /// </p>\n    /// <p>\n    /// To set up the log target programmatically use code like this:\n    /// </p>\n    /// <code lang=\"C#\" src=\"examples/targets/Configuration API/PerfCounter/Simple/Example.cs\" />\n    /// </example>\n    /// <remarks>\n    /// TODO:\n    /// 1. Unable to create a category allowing multiple counter instances (.Net 2.0 API only, probably)\n    /// 2. Is there any way of adding new counters without deleting the whole category?\n    /// 3. There should be some mechanism of resetting the counter (e.g every day starts from 0), or auto-switching to \n    ///    another counter instance (with dynamic creation of new instance). This could be done with layouts. \n    /// </remarks>\n    [Target(\"PerfCounter\")]\n    [SupportedRuntime(OS=RuntimeOS.WindowsNT,Framework=RuntimeFramework.DotNetFramework)]\n    public class PerfCounterTarget : Target\n    {\n        private bool _autoCreate = false;\n        private string _categoryName;\n        private string _counterName;\n        private string _instanceName = \"\";\n        private PerformanceCounterType _counterType = PerformanceCounterType.NumberOfItems32;\n\t\tprivate static List<PerfCounterTarget> _perfCounterTargets = new List<PerfCounterTarget>();\n        private PerformanceCounter _perfCounter = null;\n        private bool _operational = true;\n            \n        /// <summary>\n        /// Creates a new instance of <see cref=\"PerfCounterTarget\"/>.\n        /// </summary>\n        public PerfCounterTarget()\n        {\n            lock(_perfCounterTargets)\n            {\n                if (!_perfCounterTargets.Contains(this)) _perfCounterTargets.Add(this);\n            }\n        }\n        /// <summary>\n        /// Increments the configured performance counter.\n        /// </summary>\n        /// <param name=\"logEvent\">log event</param>\n        public override void Write(LogEventInfo logEvent)\n        {\n            if (!_operational) return;\n            if (_perfCounter == null) InitializePerfCounter();\n            if (_perfCounter == null) return; //not operational\n            \n            bool ok = false;\n            try \n            {\n                _perfCounter.Increment();\n                ok = true;\n            }\n            finally\n            {\n                _operational = ok;\n            }\n        }\n        \n        /// <summary>\n        /// Whether performance counter should be automatically created.\n        /// </summary>\n        public bool AutoCreate\n        {\n            get {return _autoCreate; }\n            set {_autoCreate = value; }\n        }\n        \n        /// <summary>\n        /// Performance counter category.\n        /// </summary>\n        [RequiredParameter]\n        public string CategoryName\n        {\n            get {return _categoryName; }\n            set {_categoryName = value; }\n        }\n        \n        /// <summary>\n        /// Name of the performance counter.\n        /// </summary>\n        [RequiredParameter]\n        public string CounterName\n        {\n            get {return _counterName; }\n            set {_counterName = value; }\n        }\n        \n        /// <summary>\n        /// Instance name.\n        /// </summary>\n        public string InstanceName\n        {\n            get {return _instanceName; }\n            set {_instanceName = value; }\n        }\n        \n        /// <summary>\n        /// Performance counter type.\n        /// </summary>\n        public PerformanceCounterType CounterType\n        {\n            get { return _counterType; }\n            set { _counterType = value; }\n        }\n        \n        private void InitializePerfCounter()\n        {\n            lock(this)\n            {\n                _operational = true;\n                try\n                {\n                    if (_perfCounter != null) { _perfCounter.Close(); _perfCounter = null; }\n                    if (_categoryName == null || _counterName == null) \n                    {\n                        throw new Exception(\"Missing category name or counter name for target: \" + Name);\n                    }\n                    \n                    if (!PerformanceCounterCategory.Exists(CategoryName) || !PerformanceCounterCategory.CounterExists(CounterName, CategoryName))\n                    {\n\t\t\t\t\t\tList<PerfCounterTarget> targets = new List<PerfCounterTarget>();\n                        bool doCreate = false;\n                        foreach(PerfCounterTarget t in _perfCounterTargets)\n                        {\n                            if (t.CategoryName == CategoryName)\n                            {\n                                targets.Add(t);\n                                if (t.AutoCreate) doCreate = true;\n                            }\n                        }\n                        \n                        if (doCreate)\n                        {\n                            if (PerformanceCounterCategory.Exists(CategoryName))\n                            {\n                                //delete the whole category and rebuild from scratch\n                                PerformanceCounterCategory.Delete(CategoryName);\n                            }\n                            \n                            CounterCreationDataCollection ccds = new CounterCreationDataCollection();\n                            foreach(PerfCounterTarget t in targets)\n                            {\n                                CounterCreationData ccd = new CounterCreationData();\n                                ccd.CounterName = t._counterName;\n                                ccd.CounterType = t._counterType;  \n                                ccds.Add(ccd);                                    \n                            }\n#if DOTNET_2_0\n                            PerformanceCounterCategory.Create(CategoryName,\n                                \"Category created by NLog\",\n                                (InstanceName != null) ? PerformanceCounterCategoryType.MultiInstance : PerformanceCounterCategoryType.SingleInstance,\n                                ccds);\n#else\n                            PerformanceCounterCategory.Create(CategoryName,\"Category created by NLog\",ccds);\n#endif\n                        }\n                        else\n                        {\n                            throw new Exception(string.Format(\"Counter does not exist: {0}|{1}\", CounterName, CategoryName));\n                        }\n                    }\n                    \n                    _perfCounter = new PerformanceCounter(CategoryName, CounterName, InstanceName, false);\n                    _operational = true;\n                }\n                catch(Exception ex)\n                {\n                    _operational = false;\n                    _perfCounter = null;\n", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "length": 849, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "799707ed17eb6a0f6361e6c3ae5dd107c5027232204aca8f"}
{"input": "", "context": "import subprocess\nimport cfg\nimport util\nimport shutil\nimport os\nimport time\nimport tempfile\nimport easywebdav\nimport filecmp\nimport threading\nimport Queue\nimport sys\nimport random\nimport hashlib\nfrom nose.tools import with_setup\nfrom nose.tools import assert_raises\n#\n# NOTE: following tests have been implemented using easywebdav instead of davfs2\n#\npjoin = os.path.join\nassert subprocess # pyflakes\nassert cfg # pyflakes\n@with_setup(util.setup_func, util.teardown_func)\ndef test_case_01_get():\n    full_name = pjoin(cfg.webdav_backend_directory, \"foo\")\n    subprocess.call([\"dd\",\"if=/dev/urandom\",'of=%s' % full_name,\"bs=100kB\",\"count=10\"],\n                    stderr=util.FNULL)\n    # could be as well a list\n    # Im using a queue here to make sure it's thread safe\n    test_fails = Queue.Queue()\n    def download_foo(c):\n        try:\n            with tempfile.NamedTemporaryFile() as f:\n                c.download(\"foo\",f) \n                f.flush()\n                assert filecmp.cmp(full_name, f.name)\n        except Exception:\n            test_fails.put( sys.exc_info() )\n    connections = [util.connect_easywebdav() for _ in range(100)]\n    ts = [threading.Thread(target=download_foo,args=(c,) )\n            for c in connections ]\n    for t in ts:\n        t.start()\n    for t in ts:\n        t.join()\n    try:\n        while True:\n            exc = test_fails.get(block=False)\n            raise exc[0], exc[1], exc[2]\n    except Queue.Empty:\n        pass\n@with_setup(util.setup_func, util.teardown_func)\ndef test_case_02_mkcol():\n    # could be as well a list\n    # Im using a queue here to make sure it's thread safe\n    test_fails = Queue.Queue()\n    def mkcol_foo(c):\n        try:\n            try:\n                c.mkdir(\"foo\")\n            except easywebdav.OperationFailed:\n                pass\n        except Exception:\n            test_fails.put( sys.exc_info() )\n    connections = [util.connect_easywebdav() for _ in range(100)]\n    ts = [threading.Thread(target=mkcol_foo,args=(c,) )\n            for c in connections ]\n    for t in ts:\n        t.start()\n    for t in ts:\n        t.join()\n    try:\n        while True:\n            exc = test_fails.get(block=False)\n            raise exc[0], exc[1], exc[2]\n    except Queue.Empty:\n        pass\n    assert os.path.isdir( pjoin( cfg.webdav_backend_directory, \"foo\") )\n@with_setup(util.setup_func, util.teardown_func)\ndef test_case_03_mkcol_different():\n    # could be as well a list\n    # Im using a queue here to make sure it's thread safe\n    test_fails = Queue.Queue()\n    def mkcol(c,name):\n        try:\n            c.mkdir(name)\n        except Exception:\n            test_fails.put( sys.exc_info() )\n    connections = [util.connect_easywebdav() for _ in range(100)]\n    ts = [threading.Thread(target=mkcol, args=(c,\"foo%d\" % i) )\n            for i,c in enumerate(connections) ]\n    for t in ts:\n        t.start()\n    for t in ts:\n        t.join()\n    try:\n        while True:\n            exc = test_fails.get(block=False)\n            raise exc[0], exc[1], exc[2]\n    except Queue.Empty:\n        pass\n    for i in range(100):\n        assert os.path.isdir( pjoin( cfg.webdav_backend_directory, \"foo%d\" %i) )\n@with_setup(util.setup_func, util.teardown_func)\ndef test_case_04_put():\n    # could be as well a list\n    # Im using a queue here to make sure it's thread safe\n    test_fails = Queue.Queue()\n    checksums = Queue.Queue()\n    def put(c):\n        try:\n            with tempfile.TemporaryFile() as f:\n                rand_1mb = ''.join( [ chr( random.randint(0,100) ) for _ in range(1024*1024) ] )\n                f.write(rand_1mb)\n                f.seek(0)\n                c.upload(f, \"foo\")\n                m = hashlib.md5()\n                m.update( rand_1mb )\n                checksums.put( m.digest() )\n        except Exception:\n            test_fails.put( sys.exc_info() )\n    connections = [util.connect_easywebdav() for _ in range(10)]\n    ts = [threading.Thread(target=put, args=(c,) )\n            for c in connections ]\n    for t in ts:\n        t.start()\n    for t in ts:\n        t.join()\n    try:\n        while True:\n            exc = test_fails.get(block=False)\n            raise exc[0], exc[1], exc[2]\n    except Queue.Empty:\n        pass\n    full_name = pjoin( cfg.webdav_backend_directory, \"foo\" )\n    assert os.path.isfile( full_name )\n    with open(full_name, \"rb\") as f:\n        m = hashlib.md5()\n        m.update( f.read() )\n        expected_checksum = m.digest()\n    while True:\n        try:\n            checksum = checksums.get(block=False)\n            if checksum == expected_checksum:\n                break\n        except Queue.Empty:\n            assert False # file uploaded doesn't match any of the orig files!\n@with_setup(util.setup_func, util.teardown_func)\ndef test_case_05_put_diff():\n    # could be as well a list\n    # Im using a queue here to make sure it's thread safe\n    test_fails = Queue.Queue()\n    checksums = Queue.Queue()\n    def put(c,name):\n        try:\n            with tempfile.TemporaryFile() as f:\n                rand_1mb = ''.join( [ chr( random.randint(0,100) ) for _ in range(1024*1024) ] )\n                f.write(rand_1mb)\n                f.seek(0)\n                c.upload(f, name)\n                m = hashlib.md5()\n                m.update( rand_1mb )\n                checksums.put( (name,m.digest()) )\n        except Exception:\n            test_fails.put( sys.exc_info() )\n    connections = [util.connect_easywebdav() for _ in range(10)]\n    ts = [threading.Thread(target=put, args=(c,\"foo-%d\" % i) )\n            for i,c in enumerate(connections) ]\n    for t in ts:\n        t.start()\n    for t in ts:\n        t.join()\n    try:\n        while True:\n            exc = test_fails.get(block=False)\n            raise exc[0], exc[1], exc[2]\n    except Queue.Empty:\n        pass\n    \n    assert checksums.qsize() == 10\n    try:\n        while True:\n", "answers": ["            name, checksum = checksums.get(block=False)"], "length": 599, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "9e99b91db2d990fbd559f63ba39622bf1c97aaa7f105a287"}
{"input": "", "context": "# This library is free software; you can redistribute it and/or modify\n# it under the terms of the GNU Lesser General Public License as\n# published by the Free Software Foundation; either version 3 of the\n# License, or (at your option) any later version.\n#\n# This library is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, see\n# <http://www.gnu.org/licenses/>.\n\"\"\"\nsibilant.pseudops.stack\nStack counting utilities for sibiliant pseudops blocks\nauthor: Christopher O'Brien <obriencj@gmail.com>\nlicense: LGPL v.3\n\"\"\"\nfrom . import Pseudop, Opcode\nfrom ..lib import SibilantException\n__all__ = (\n    \"StackCounter\", \"StackUnderrun\", \"StackMismatch\",\n    \"stacker\", \"stacking\",\n    \"stacking_pop_args_push\", \"stacking_push_args_pop\",\n)\nclass StackUnderrun(SibilantException):\n    def __init__(self, stack_size, pop_size):\n        self.start_size = stack_size\n        self.pop_size = pop_size\n        msg = \"stack size underrun, %i decremented by %i\"\n        super().__init__(msg % (stack_size, pop_size))\nclass StackMismatch(SibilantException):\n    def __init__(self, label, label_size, jump_size):\n        self.label = label\n        self.label_size = label_size\n        self.jump_size = jump_size\n        msg = \"mismatch between label %r stack: %i and origin stack: %i\"\n        super().__init__(msg % (label, label_size, jump_size))\nclass MetaStackCounter(type):\n    def __init__(self, name, bases, members):\n        # the _translations_ member is merged together with those of\n        # the bases, to provide a sort of inheritance.\n        stk = {}\n        for base in bases:\n            stk.update(getattr(base, \"_stackers_\", {}))\n        stk.update(members.get(\"_stackers_\", {}))\n        # we also hunt for decorated callable members to inject into\n        # the _stackers_\n        for memb in members.values():\n            if callable(memb):\n                trop = getattr(memb, \"_stacks_\", None)\n                if trop is not None:\n                    stk[trop] = memb\n        members[\"_stackers_\"] = stk\n        self._stackers_ = stk\n        return super().__init__(name, bases, members)\ndef stacker(pseudop):\n    def decorator(member):\n        member._stacks_ = pseudop\n        return member\n    return decorator\ndef stacking(pushc, popc):\n    def pop_then_push(self, pseudop, args, push, pop):\n        if popc:\n            pop(popc)\n        if pushc:\n            push(pushc)\n    return pop_then_push\ndef stacking_pop_args_push(pushc):\n    def pop_args_then_push(self, pseudop, args, push, pop):\n        pop(args[0])\n        if pushc:\n            push(pushc)\n    return pop_args_then_push\ndef stacking_push_args_pop(popc):\n    def pop_then_push_args(self, pseudops, args, push, pop):\n        if popc:\n            pop(popc)\n        push(args[0])\n    return pop_then_push_args\nclass StackCounter(metaclass=MetaStackCounter):\n    _stackers_ = {\n        Pseudop.POSITION: stacking(0, 0),\n        Pseudop.DEL_VAR: stacking(0, 0),\n        Pseudop.DEL_GLOBAL: stacking(0, 0),\n        Pseudop.ROT_TWO: stacking(0, 0),\n        Pseudop.ROT_THREE: stacking(0, 0),\n        Pseudop.CONST: stacking(1, 0),\n        Pseudop.DUP: stacking(1, 0),\n        Pseudop.GET_VAR: stacking(1, 0),\n        Pseudop.GET_GLOBAL: stacking(1, 0),\n        Pseudop.BREAK_LOOP: stacking(1, 0),\n        Pseudop.FOR_ITER: stacking(1, 0),\n        Pseudop.IMPORT_FROM: stacking(1, 0),\n        Pseudop.CONTINUE_LOOP: stacking(1, 0),\n        Pseudop.LOAD_CELL: stacking(1, 0),\n        Pseudop.GET_ATTR: stacking(1, 1),\n        Pseudop.UNARY_POSITIVE: stacking(1, 1),\n        Pseudop.UNARY_NEGATIVE: stacking(1, 1),\n        Pseudop.UNARY_NOT: stacking(1, 1),\n        Pseudop.UNARY_INVERT: stacking(1, 1),\n        Pseudop.ITER: stacking(1, 1),\n        Pseudop.GET_YIELD_FROM_ITER: stacking(1, 1),\n        Pseudop.GET_AWAITABLE: stacking(1, 1),\n        Pseudop.YIELD_VAL: stacking(1, 1),\n        Pseudop.COMPARE_OP: stacking(1, 2),\n        Pseudop.GET_ITEM: stacking(1, 2),\n        Pseudop.BINARY_ADD: stacking(1, 2),\n        Pseudop.BINARY_SUBTRACT: stacking(1, 2),\n        Pseudop.BINARY_MULTIPLY: stacking(1, 2),\n        Pseudop.BINARY_MATRIX_MULTIPLY: stacking(1, 2),\n        Pseudop.BINARY_TRUE_DIVIDE: stacking(1, 2),\n        Pseudop.BINARY_FLOOR_DIVIDE: stacking(1, 2),\n        Pseudop.BINARY_POWER: stacking(1, 2),\n        Pseudop.BINARY_MODULO: stacking(1, 2),\n        Pseudop.BINARY_LSHIFT: stacking(1, 2),\n        Pseudop.BINARY_RSHIFT: stacking(1, 2),\n        Pseudop.BINARY_AND: stacking(1, 2),\n        Pseudop.BINARY_XOR: stacking(1, 2),\n        Pseudop.BINARY_OR: stacking(1, 2),\n        Pseudop.IMPORT_NAME: stacking(1, 2),\n        Pseudop.SET_ATTR: stacking(0, 2),\n        Pseudop.DEL_ITEM: stacking(0, 2),\n        Pseudop.SET_ITEM: stacking(0, 3),\n        Pseudop.POP: stacking(0, 1),\n        Pseudop.DEL_ATTR: stacking(0, 1),\n        Pseudop.SET_GLOBAL: stacking(0, 1),\n        Pseudop.SET_LOCAL: stacking(0, 1),\n        Pseudop.SET_VAR: stacking(0, 1),\n        Pseudop.RET_VAL: stacking(0, 1),\n        Pseudop.YIELD_FROM: stacking(1, 2),\n        Pseudop.SETUP_EXCEPT: stacking(6, 0),\n        Pseudop.POP_EXCEPT: stacking(0, 3),\n        Pseudop.SETUP_WITH: stacking(6, 0),\n        Pseudop.WITH_CLEANUP_START: stacking(7, 0),\n        Pseudop.WITH_CLEANUP_FINISH: stacking(0, 7),\n        Pseudop.SETUP_FINALLY: stacking(6, 0),\n        Pseudop.END_FINALLY: stacking(0, 6),\n        Pseudop.BUILD_LIST: stacking_pop_args_push(1),\n        Pseudop.BUILD_SET: stacking_pop_args_push(1),\n        Pseudop.BUILD_TUPLE: stacking_pop_args_push(1),\n        Pseudop.BUILD_TUPLE_UNPACK: stacking_pop_args_push(1),\n        Pseudop.BUILD_MAP_UNPACK: stacking_pop_args_push(1),\n        Pseudop.BUILD_SLICE: stacking_pop_args_push(1),\n        Pseudop.RAISE: stacking_pop_args_push(1),\n        Pseudop.FAUX_POP: stacking_pop_args_push(0),\n        Pseudop.UNPACK_SEQUENCE: stacking_push_args_pop(1),\n        Pseudop.FAUX_PUSH: stacking_push_args_pop(0),\n    }\n    # @stacker(Pseudop.LAMBDA)\n    # def stacks_lambda(self, pseudop, args, push, pop):\n    #    pop(args[1])\n    #    a = len(args[0].co_freevars)\n    #    if a:\n    #        push(a)\n    #        pop(a)\n    #    push(2)\n    #    pop(2)\n    #    push()\n    @stacker(Pseudop.BUILD_MAP)\n    def stacker_build_map(self, pseudop, args, push, pop):\n        pop(args[0] * 2)\n        push()\n    @stacker(Pseudop.UNPACK_EX)\n    def stacker_unpack_ex(self, pseudop, args, push, pop):\n        pop()\n        push(args[0] + args[1] + 1)\n    @stacker(Pseudop.SETUP_LOOP)\n    def stacker_setup_loop(self, pseudop, args, push, pop):\n        push(Opcode.SETUP_LOOP.stack_effect(1))\n    @stacker(Pseudop.POP_BLOCK)\n    def stacker_pop_block(self, pseudop, args, push, pop):\n        push(Opcode.POP_BLOCK.stack_effect())\n    @stacker(Pseudop.LABEL)\n    def stacker_label(self, pseudop, args, push, pop):\n        stac = self.stack_count\n        stac = self.labels.setdefault(args[0], stac)\n        self.stack_count = stac\n    @stacker(Pseudop.BLOCK)\n    def stacker_block(self, pseudop, args, push, pop):\n        block = args[0]\n        block_i, block_max = block.max_stack(self.compiler)\n        push(block_max)\n        pop(block_max)\n    @stacker(Pseudop.JUMP)\n    def stacker_jump(self, pseudop, args, push, pop):\n        stac = self.stack_count\n", "answers": ["        dest = args[0]"], "length": 655, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "087a12a2ee41ab7a59bdf67a92f3e49b77514c4b6dc1816e"}
{"input": "", "context": "# Copyright (c) 2011-2015 Rusty Wagner\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\nfrom BinaryData import *\nfrom Structure import *\nfrom HexEditor import *\nfrom View import *\nclass ElfFile(BinaryAccessor):\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.valid = False\n\t\tself.callbacks = []\n\t\tself.symbols_by_name = {}\n\t\tself.symbols_by_addr = {}\n\t\tif not self.is_elf():\n\t\t\treturn\n\t\ttry:\n\t\t\tself.tree = Structure(self.data)\n\t\t\tself.header = self.tree.struct(\"ELF header\", \"header\")\n\t\t\tself.header.struct(\"ELF identification\", \"ident\")\n\t\t\tself.header.ident.uint32(\"magic\")\n\t\t\tself.header.ident.uint8(\"file_class\")\n\t\t\tself.header.ident.uint8(\"encoding\")\n\t\t\tself.header.ident.uint8(\"version\")\n\t\t\tself.header.ident.uint8(\"abi\")\n\t\t\tself.header.ident.uint8(\"abi_version\")\n\t\t\tself.header.ident.bytes(7, \"pad\")\n\t\t\tself.header.uint16(\"type\")\n\t\t\tself.header.uint16(\"arch\")\n\t\t\tself.header.uint32(\"version\")\n\t\t\tself.symbol_table_section = None\n\t\t\tself.dynamic_symbol_table_section = None\n\t\t\tif self.header.ident.file_class == 1: # 32-bit\n\t\t\t\tself.header.uint32(\"entry\")\n\t\t\t\tself.header.uint32(\"program_header_offset\")\n\t\t\t\tself.header.uint32(\"section_header_offset\")\n\t\t\t\tself.header.uint32(\"flags\")\n\t\t\t\tself.header.uint16(\"header_size\")\n\t\t\t\tself.header.uint16(\"program_header_size\")\n\t\t\t\tself.header.uint16(\"program_header_count\")\n\t\t\t\tself.header.uint16(\"section_header_size\")\n\t\t\t\tself.header.uint16(\"section_header_count\")\n\t\t\t\tself.header.uint16(\"string_table\")\n\t\t\t\ttry:\n\t\t\t\t\tself.sections = self.tree.array(self.header.section_header_count, \"sections\")\n\t\t\t\t\tfor i in range(0, self.header.section_header_count):\n\t\t\t\t\t\tsection = self.sections[i]\n\t\t\t\t\t\tsection.seek(self.header.section_header_offset + (i * 40))\n\t\t\t\t\t\tsection.uint32(\"name\")\n\t\t\t\t\t\tsection.uint32(\"type\")\n\t\t\t\t\t\tsection.uint32(\"flags\")\n\t\t\t\t\t\tsection.uint32(\"addr\")\n\t\t\t\t\t\tsection.uint32(\"offset\")\n\t\t\t\t\t\tsection.uint32(\"size\")\n\t\t\t\t\t\tsection.uint32(\"link\")\n\t\t\t\t\t\tsection.uint32(\"info\")\n\t\t\t\t\t\tsection.uint32(\"align\")\n\t\t\t\t\t\tsection.uint32(\"entry_size\")\n\t\t\t\t\t\tif section.type == 2:\n\t\t\t\t\t\t\tself.symbol_table_section = section\n\t\t\t\t\t\telif section.type == 11:\n\t\t\t\t\t\t\tself.dynamic_symbol_table_section = section\n\t\t\t\texcept:\n\t\t\t\t\t# Section headers are not required to load an ELF, skip errors\n\t\t\t\t\tself.sections = self.tree.array(0, \"sections\")\n\t\t\t\t\tpass\n\t\t\t\tself.program_headers = self.tree.array(self.header.program_header_count, \"programHeaders\")\n\t\t\t\tfor i in range(0, self.header.program_header_count):\n\t\t\t\t\theader = self.program_headers[i]\n\t\t\t\t\theader.seek(self.header.program_header_offset + (i * 32))\n\t\t\t\t\theader.uint32(\"type\")\n\t\t\t\t\theader.uint32(\"offset\")\n\t\t\t\t\theader.uint32(\"virtual_addr\")\n\t\t\t\t\theader.uint32(\"physical_addr\")\n\t\t\t\t\theader.uint32(\"file_size\")\n\t\t\t\t\theader.uint32(\"memory_size\")\n\t\t\t\t\theader.uint32(\"flags\")\n\t\t\t\t\theader.uint32(\"align\")\n\t\t\t\t# Parse symbol tables\n\t\t\t\tself.symbols_by_name[\"_start\"] = self.entry()\n\t\t\t\tself.symbols_by_addr[self.entry()] = \"_start\"\n\t\t\t\ttry:\n\t\t\t\t\tif self.symbol_table_section:\n\t\t\t\t\t\tself.symbol_table = self.tree.array(self.symbol_table_section.size / 16, \"Symbols\", \"symbols\")\n\t\t\t\t\t\tself.parse_symbol_table_32(self.symbol_table, self.symbol_table_section, self.sections[self.symbol_table_section.link])\n\t\t\t\t\tif self.dynamic_symbol_table_section:\n\t\t\t\t\t\tself.dynamic_symbol_table = self.tree.array(self.dynamic_symbol_table_section.size / 16, \"Symbols\", \"symbols\")\n\t\t\t\t\t\tself.parse_symbol_table_32(self.dynamic_symbol_table, self.dynamic_symbol_table_section, self.sections[self.dynamic_symbol_table_section.link])\n\t\t\t\texcept:\n\t\t\t\t\t# Skip errors in symbol table\n\t\t\t\t\tpass\n\t\t\t\t# Parse relocation tables\n\t\t\t\tself.plt = {}\n\t\t\t\tfor section in self.sections:\n\t\t\t\t\tif section.type == 9:\n\t\t\t\t\t\tself.parse_reloc_32(section)\n\t\t\t\t\telif section.type == 4:\n\t\t\t\t\t\tself.parse_reloca_32(section)\n\t\t\telif self.header.ident.file_class == 2: # 64-bit\n\t\t\t\tself.header.uint64(\"entry\")\n\t\t\t\tself.header.uint64(\"program_header_offset\")\n\t\t\t\tself.header.uint64(\"section_header_offset\")\n\t\t\t\tself.header.uint32(\"flags\")\n\t\t\t\tself.header.uint16(\"header_size\")\n\t\t\t\tself.header.uint16(\"program_header_size\")\n\t\t\t\tself.header.uint16(\"program_header_count\")\n\t\t\t\tself.header.uint16(\"section_header_size\")\n\t\t\t\tself.header.uint16(\"section_header_count\")\n\t\t\t\tself.header.uint16(\"string_table\")\n\t\t\t\ttry:\n\t\t\t\t\tself.sections = self.tree.array(self.header.section_header_count, \"sections\")\n\t\t\t\t\tfor i in range(0, self.header.section_header_count):\n\t\t\t\t\t\tsection = self.sections[i]\n\t\t\t\t\t\tsection.seek(self.header.section_header_offset + (i * 64))\n\t\t\t\t\t\tsection.uint32(\"name\")\n\t\t\t\t\t\tsection.uint32(\"type\")\n\t\t\t\t\t\tsection.uint64(\"flags\")\n\t\t\t\t\t\tsection.uint64(\"addr\")\n\t\t\t\t\t\tsection.uint64(\"offset\")\n\t\t\t\t\t\tsection.uint64(\"size\")\n\t\t\t\t\t\tsection.uint32(\"link\")\n\t\t\t\t\t\tsection.uint32(\"info\")\n\t\t\t\t\t\tsection.uint64(\"align\")\n\t\t\t\t\t\tsection.uint64(\"entry_size\")\n\t\t\t\t\t\tif section.type == 2:\n\t\t\t\t\t\t\tself.symbol_table_section = section\n\t\t\t\t\t\telif section.type == 11:\n\t\t\t\t\t\t\tself.dynamic_symbol_table_section = section\n\t\t\t\texcept:\n\t\t\t\t\t# Section headers are not required to load an ELF, skip errors\n\t\t\t\t\tself.sections = self.tree.array(0, \"sections\")\n\t\t\t\t\tpass\n\t\t\t\tself.program_headers = self.tree.array(self.header.program_header_count, \"program_headers\")\n\t\t\t\tfor i in range(0, self.header.program_header_count):\n\t\t\t\t\theader = self.program_headers[i]\n\t\t\t\t\theader.seek(self.header.program_header_offset + (i * 56))\n\t\t\t\t\theader.uint32(\"type\")\n\t\t\t\t\theader.uint32(\"flags\")\n\t\t\t\t\theader.uint64(\"offset\")\n\t\t\t\t\theader.uint64(\"virtual_addr\")\n\t\t\t\t\theader.uint64(\"physical_addr\")\n\t\t\t\t\theader.uint64(\"file_size\")\n\t\t\t\t\theader.uint64(\"memory_size\")\n\t\t\t\t\theader.uint64(\"align\")\n\t\t\t\t# Parse symbol tables\n\t\t\t\tself.symbols_by_name[\"_start\"] = self.entry()\n\t\t\t\tself.symbols_by_addr[self.entry()] = \"_start\"\n\t\t\t\ttry:\n\t\t\t\t\tif self.symbol_table_section:\n\t\t\t\t\t\tself.symbol_table = self.tree.array(self.symbol_table_section.size / 24, \"Symbols\", \"symbols\")\n\t\t\t\t\t\tself.parse_symbol_table_64(self.symbol_table, self.symbol_table_section, self.sections[self.symbol_table_section.link])\n\t\t\t\t\tif self.dynamic_symbol_table_section:\n\t\t\t\t\t\tself.dynamic_symbol_table = self.tree.array(self.dynamic_symbol_table_section.size / 24, \"Symbols\", \"symbols\")\n\t\t\t\t\t\tself.parse_symbol_table_64(self.dynamic_symbol_table, self.dynamic_symbol_table_section, self.sections[self.dynamic_symbol_table_section.link])\n\t\t\t\texcept:\n\t\t\t\t\t# Skip errors in symbol table\n\t\t\t\t\tpass\n\t\t\t\t# Parse relocation tables\n\t\t\t\tself.plt = {}\n\t\t\t\tfor section in self.sections:\n\t\t\t\t\tif section.type == 9:\n\t\t\t\t\t\tself.parse_reloc_64(section)\n\t\t\t\t\telif section.type == 4:\n\t\t\t\t\t\tself.parse_reloca_64(section)\n\t\t\tself.tree.complete()\n\t\t\tself.valid = True\n\t\texcept:\n\t\t\tself.valid = False\n\t\tif self.valid:\n\t\t\tself.data.add_callback(self)\n\tdef read_string_table(self, strings, offset):\n\t\tend = strings.find(\"\\x00\", offset)\n\t\treturn strings[offset:end]\n\tdef parse_symbol_table_32(self, table, section, string_table):\n\t\tstrings = self.data.read(string_table.offset, string_table.size)\n\t\tfor i in range(0, section.size / 16):\n\t\t\ttable[i].seek(section.offset + (i * 16))\n\t\t\ttable[i].uint32(\"name_offset\")\n\t\t\ttable[i].uint32(\"value\")\n\t\t\ttable[i].uint32(\"size\")\n\t\t\ttable[i].uint8(\"info\")\n\t\t\ttable[i].uint8(\"other\")\n\t\t\ttable[i].uint16(\"section\")\n\t\t\ttable[i].name = self.read_string_table(strings, table[i].name_offset)\n\t\t\tif len(table[i].name) > 0:\n\t\t\t\tself.symbols_by_name[table[i].name] = table[i].value\n\t\t\t\tself.symbols_by_addr[table[i].value] = table[i].name\n\tdef parse_symbol_table_64(self, table, section, string_table):\n\t\tstrings = self.data.read(string_table.offset, string_table.size)\n\t\tfor i in range(0, section.size / 24):\n\t\t\ttable[i].seek(section.offset + (i * 24))\n\t\t\ttable[i].uint32(\"name_offset\")\n\t\t\ttable[i].uint8(\"info\")\n\t\t\ttable[i].uint8(\"other\")\n\t\t\ttable[i].uint16(\"section\")\n\t\t\ttable[i].uint64(\"value\")\n\t\t\ttable[i].uint64(\"size\")\n\t\t\ttable[i].name = self.read_string_table(strings, table[i].name_offset)\n\t\t\tif len(table[i].name) > 0:\n\t\t\t\tself.symbols_by_name[table[i].name] = table[i].value\n\t\t\t\tself.symbols_by_addr[table[i].value] = table[i].name\n\tdef parse_reloc_32(self, section):\n\t\tfor i in range(0, section.size / 8):\n\t\t\tofs = self.data.read_uint32(section.offset + (i * 8))\n\t\t\tinfo = self.data.read_uint32(section.offset + (i * 8) + 4)\n\t\t\tsym = info >> 8\n\t\t\treloc_type = info & 0xff\n\t\t\tif reloc_type == 7: # R_386_JUMP_SLOT\n\t\t\t\tself.plt[ofs] = self.dynamic_symbol_table[sym].name\n\t\t\t\tself.symbols_by_name[self.decorate_plt_name(self.dynamic_symbol_table[sym].name)] = ofs\n\t\t\t\tself.symbols_by_addr[ofs] = self.decorate_plt_name(self.dynamic_symbol_table[sym].name)\n\tdef parse_reloca_32(self, section):\n\t\tfor i in range(0, section.size / 12):\n\t\t\tofs = self.data.read_uint32(section.offset + (i * 12))\n\t\t\tinfo = self.data.read_uint32(section.offset + (i * 12) + 4)\n\t\t\tsym = info >> 8\n\t\t\treloc_type = info & 0xff\n\t\t\tif reloc_type == 7: # R_386_JUMP_SLOT\n\t\t\t\tself.plt[ofs] = self.dynamic_symbol_table[sym].name\n\t\t\t\tself.symbols_by_name[self.decorate_plt_name(self.dynamic_symbol_table[sym].name)] = ofs\n\t\t\t\tself.symbols_by_addr[ofs] = self.decorate_plt_name(self.dynamic_symbol_table[sym].name)\n\tdef parse_reloc_64(self, section):\n\t\tfor i in range(0, section.size / 16):\n\t\t\tofs = self.data.read_uint64(section.offset + (i * 16))\n\t\t\tinfo = self.data.read_uint64(section.offset + (i * 16) + 8)\n\t\t\tsym = info >> 32\n\t\t\treloc_type = info & 0xff\n\t\t\tif reloc_type == 7: # R_X86_64_JUMP_SLOT\n\t\t\t\tself.plt[ofs] = self.dynamic_symbol_table[sym].name\n\t\t\t\tself.symbols_by_name[self.decorate_plt_name(self.dynamic_symbol_table[sym].name)] = ofs\n\t\t\t\tself.symbols_by_addr[ofs] = self.decorate_plt_name(self.dynamic_symbol_table[sym].name)\n\tdef parse_reloca_64(self, section):\n\t\tfor i in range(0, section.size / 24):\n\t\t\tofs = self.data.read_uint64(section.offset + (i * 24))\n\t\t\tinfo = self.data.read_uint64(section.offset + (i * 24) + 8)\n\t\t\tsym = info >> 32\n\t\t\treloc_type = info & 0xff\n\t\t\tif reloc_type == 7: # R_X86_64_JUMP_SLOT\n\t\t\t\tself.plt[ofs] = self.dynamic_symbol_table[sym].name\n\t\t\t\tself.symbols_by_name[self.decorate_plt_name(self.dynamic_symbol_table[sym].name)] = ofs\n\t\t\t\tself.symbols_by_addr[ofs] = self.decorate_plt_name(self.dynamic_symbol_table[sym].name)\n\tdef read(self, ofs, len):\n\t\tresult = \"\"\n\t\twhile len > 0:\n\t\t\tcur = None\n\t\t\tfor i in self.program_headers:\n\t\t\t\tif ((ofs >= i.virtual_addr) and (ofs < (i.virtual_addr + i.memory_size))) and (i.memory_size != 0):\n\t\t\t\t\tcur = i\n\t\t\tif cur == None:\n\t\t\t\tbreak\n\t\t\tprog_ofs = ofs - cur.virtual_addr\n\t\t\tmem_len = cur.memory_size - prog_ofs\n\t\t\tfile_len = cur.file_size - prog_ofs\n\t\t\tif mem_len > len:\n\t\t\t\tmem_len = len\n\t\t\tif file_len > len:\n\t\t\t\tfile_len = len\n\t\t\tif file_len <= 0:\n\t\t\t\tresult += \"\\x00\" * mem_len\n\t\t\t\tlen -= mem_len\n\t\t\t\tofs += mem_len\n\t\t\t\tcontinue\n\t\t\tresult += self.data.read(cur.offset + prog_ofs, file_len)\n\t\t\tlen -= file_len\n\t\t\tofs += file_len\n\t\treturn result\n\tdef next_valid_addr(self, ofs):\n\t\tresult = -1\n\t\tfor i in self.program_headers:\n\t\t\tif (i.virtual_addr >= ofs) and (i.memory_size != 0) and ((result == -1) or (i.virtual_addr < result)):\n\t\t\t\tresult = i.virtual_addr\n\t\treturn result\n\tdef get_modification(self, ofs, len):\n\t\tresult = []\n\t\twhile len > 0:\n\t\t\tcur = None\n\t\t\tfor i in self.program_headers:\n\t\t\t\tif ((ofs >= i.virtual_addr) and (ofs < (i.virtual_addr + i.memory_size))) and (i.memory_size != 0):\n\t\t\t\t\tcur = i\n\t\t\tif cur == None:\n\t\t\t\tbreak\n\t\t\tprog_ofs = ofs - cur.virtual_addr\n\t\t\tmem_len = cur.memory_size - prog_ofs\n\t\t\tfile_len = cur.file_size - prog_ofs\n\t\t\tif mem_len > len:\n\t\t\t\tmem_len = len\n\t\t\tif file_len > len:\n\t\t\t\tfile_len = len\n\t\t\tif file_len <= 0:\n", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "length": 1032, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "9d1ef6b62bf709d7490cbf236f15ee8ef609e6aff8c231cf"}
{"input": "", "context": "/**\n * Copyright (C) 2001-2015 by RapidMiner and the contributors\n *\n * Complete list of developers available at our web site:\n *\n *      http://rapidminer.com\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see http://www.gnu.org/licenses/.\n */\npackage com.rapidminer.example.set;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport com.rapidminer.MacroHandler;\nimport com.rapidminer.example.Attribute;\nimport com.rapidminer.example.AttributeTypeException;\nimport com.rapidminer.example.Example;\nimport com.rapidminer.example.ExampleSet;\nimport com.rapidminer.operator.nio.model.DataResultSet.ValueType;\nimport com.rapidminer.parameter.ParameterTypeTupel;\nimport com.rapidminer.tools.I18N;\nimport com.rapidminer.tools.Ontology;\nimport com.rapidminer.tools.Tools;\n/**\n * The condition is fulfilled if the individual filters are fulfilled. This filter can be\n * constructed from several conditions of the type {@link CustomFilters} which either must all be\n * fulfilled (AND) or only one must be fulfilled (OR).\n *\n * @author Marco Boeck\n */\npublic class CustomFilter implements Condition {\n\t/**\n\t * Enum for custom filters.\n\t */\n\tpublic static enum CustomFilters {\n\t\tEQUALS_NUMERICAL(\"gui.comparator.numerical.equals\", \"eq\", Ontology.NUMERICAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\t// special case to handle missing values\n\t\t\t\tif (Double.isNaN(filter)) {\n\t\t\t\t\treturn Double.isNaN(input);\n\t\t\t\t}\n\t\t\t\treturn input == filter;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tNOT_EQUALS_NUMERICAL(\"gui.comparator.numerical.not_equals\", \"ne\", Ontology.NUMERICAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\t// special case to handle missing values\n\t\t\t\tif (Double.isNaN(input)) {\n\t\t\t\t\treturn !Double.isNaN(filter);\n\t\t\t\t}\n\t\t\t\treturn input != filter;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tLESS(\"gui.comparator.numerical.less\", \"lt\", Ontology.NUMERICAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn input < filter;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tLESS_EQUALS(\"gui.comparator.numerical.less_equals\", \"le\", Ontology.NUMERICAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn input <= filter;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tGREATER_EQUALS(\"gui.comparator.numerical.greater_equals\", \"ge\", Ontology.NUMERICAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn input >= filter;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tGREATER(\"gui.comparator.numerical.greater\", \"gt\", Ontology.NUMERICAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn input > filter;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tEQUALS_NOMINAL(\"gui.comparator.nominal.equals\", \"equals\", Ontology.NOMINAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn input.equals(filter);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tNOT_EQUALS_NOMINAL(\"gui.comparator.nominal.not_equals\", \"does_not_equal\", Ontology.NOMINAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn !input.equals(filter);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tIS_IN_NOMINAL(\"gui.comparator.nominal.is_in\", \"is_in\", Ontology.NOMINAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\tList<String> filterList = Tools.unescape(filter, ESCAPE_CHAR, new char[] { SEPERATOR_CHAR }, SEPERATOR_CHAR);\n\t\t\t\tfor (String filterString : filterList) {\n\t\t\t\t\tif (input.equals(filterString)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tIS_NOT_IN_NOMINAL(\"gui.comparator.nominal.is_not_in\", \"is_not_in\", Ontology.NOMINAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\tList<String> filterList = Tools.unescape(filter, ESCAPE_CHAR, new char[] { SEPERATOR_CHAR }, SEPERATOR_CHAR);\n\t\t\t\tfor (String filterString : filterList) {\n\t\t\t\t\tif (input.equals(filterString)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tCONTAINS(\"gui.comparator.nominal.contains\", \"contains\", Ontology.NOMINAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn input.contains(filter);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tNOT_CONTAINS(\"gui.comparator.nominal.not_contains\", \"does_not_contain\", Ontology.NOMINAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn !input.contains(filter);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tSTARTS_WITH(\"gui.comparator.nominal.starts_with\", \"starts_with\", Ontology.NOMINAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn input.startsWith(filter);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tENDS_WITH(\"gui.comparator.nominal.ends_with\", \"ends_with\", Ontology.NOMINAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn input.endsWith(filter);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tREGEX(\"gui.comparator.nominal.regex\", \"matches\", Ontology.NOMINAL) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn input.matches(filter);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tMISSING(\"gui.comparator.special.is_missing\", \"is_missing\", -1) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn Double.isNaN(input);\n\t\t\t}\n\t\t},\n\t\tNOT_MISSING(\"gui.comparator.special.is_not_missing\", \"is_not_missing\", -1) {\n\t\t\t@Override\n\t\t\tpublic boolean isNumericalConditionFulfilled(final double input, final double filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isNominalConditionFulfilled(final String input, final String filter) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic boolean isSpecialConditionFulfilled(final double input) {\n\t\t\t\treturn !Double.isNaN(input);\n\t\t\t}\n\t\t};\n\t\t/** the symbol to seperate strings for IS_IN and IS_NOT_IN input */\n\t\tpublic static final char SEPERATOR_CHAR = ';';\n\t\t/** the symbol to escape seperator symbols in IS_IN and IS_NOT_IN input */\n\t\tpublic static final char ESCAPE_CHAR = '\\\\';\n\t\t/** the format string for date_time */\n\t\tpublic static final String DATE_TIME_FORMAT_STRING = \"MM/dd/yyyy h:mm:ss a\";\n\t\t/** the old (bugged) format string for date_time */\n\t\tpublic static final String DATE_TIME_FORMAT_STRING_OLD = \"MM/dd/yy h:mm:ss a\";\n\t\t/** the format string for date */\n\t\tpublic static final String DATE_FORMAT_STRING = \"MM/dd/yyyy\";\n\t\t/** the old (bugged) format string for date */\n\t\tpublic static final String DATE_FORMAT_STRING_OLD = \"MM/dd/yy\";\n\t\t/** the format string for time */\n\t\tpublic static final String TIME_FORMAT_STRING = \"h:mm:ss a\";\n\t\t// ThreadLocal because DateFormat is NOT threadsafe and creating a new DateFormat is\n\t\t// EXTREMELY expensive\n\t\t/** the format for date_time */\n\t\tprivate static final ThreadLocal<DateFormat> FORMAT_DATE_TIME = new ThreadLocal<DateFormat>() {\n\t\t\t@Override\n\t\t\tprotected DateFormat initialValue() {\n\t\t\t\treturn new SimpleDateFormat(DATE_TIME_FORMAT_STRING, Locale.ENGLISH);\n\t\t\t}\n\t\t};\n\t\t/** the old format for date_time */\n\t\tprivate static final ThreadLocal<DateFormat> FORMAT_DATE_TIME_OLD = new ThreadLocal<DateFormat>() {\n\t\t\t@Override\n\t\t\tprotected DateFormat initialValue() {\n\t\t\t\treturn new SimpleDateFormat(DATE_TIME_FORMAT_STRING_OLD, Locale.ENGLISH);\n\t\t\t}\n\t\t};\n\t\t// ThreadLocal because DateFormat is NOT threadsafe and creating a new DateFormat is\n\t\t// EXTREMELY expensive\n\t\t/** the format for date */\n\t\tprivate static final ThreadLocal<DateFormat> FORMAT_DATE = new ThreadLocal<DateFormat>() {\n\t\t\t@Override\n\t\t\tprotected DateFormat initialValue() {\n\t\t\t\treturn new SimpleDateFormat(DATE_FORMAT_STRING, Locale.ENGLISH);\n\t\t\t}\n\t\t};\n\t\t/** the old format for date */\n\t\tprivate static final ThreadLocal<DateFormat> FORMAT_DATE_OLD = new ThreadLocal<DateFormat>() {\n\t\t\t@Override\n\t\t\tprotected DateFormat initialValue() {\n\t\t\t\treturn new SimpleDateFormat(DATE_FORMAT_STRING_OLD, Locale.ENGLISH);\n\t\t\t}\n\t\t};\n\t\t// ThreadLocal because DateFormat is NOT threadsafe and creating a new DateFormat is\n\t\t// EXTREMELY expensive\n\t\t/** the format for time */\n\t\tprivate static final ThreadLocal<DateFormat> FORMAT_TIME = new ThreadLocal<DateFormat>() {\n\t\t\t@Override\n\t\t\tprotected DateFormat initialValue() {\n\t\t\t\treturn new SimpleDateFormat(TIME_FORMAT_STRING, Locale.ENGLISH);\n\t\t\t}\n\t\t};\n\t\t/** the label for this filter */\n\t\tprivate String label;\n\t\t/** the string representation for this filter */\n\t\tprivate String symbol;\n\t\t/** the help text for this filter */\n\t\tprivate String helptext;\n\t\t/** the valueType for this filter */\n\t\tprivate int valueType;\n\t\t/**\n\t\t * Creates a new {@link CustomFilters} instance which is represented by the specified symbol\n\t\t * and accepts the given {@link ValueType}.\n\t\t *\n\t\t * @param key\n\t\t * @param symbol\n\t\t * @param valueType\n\t\t *            the applicable {@link Ontology#ATTRIBUTE_VALUE_TYPE}. If set to -1, denotes a\n\t\t *            special filter which is not restricted to any value type\n\t\t */\n\t\tprivate CustomFilters(final String key, final String symbol, final int valueType) {\n\t\t\tthis.symbol = symbol;\n\t\t\tthis.label = I18N.getMessage(I18N.getGUIBundle(), key + \".label\");\n\t\t\tthis.helptext = I18N.getMessage(I18N.getGUIBundle(), key + \".tip\");\n\t\t\tthis.valueType = valueType;\n\t\t}\n\t\t/**\n\t\t * Returns the {@link String} label for this comparator.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic String getLabel() {\n\t\t\treturn label;\n\t\t}\n\t\t/**\n\t\t * Returns the {@link String} representation for this comparator.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic String getSymbol() {\n\t\t\treturn symbol;\n\t\t}\n\t\t/**\n\t\t * Returns the helptext for this comparator.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic String getHelptext() {\n\t\t\treturn helptext;\n\t\t}\n\t\t/**\n\t\t * Returns <code>true</code> if this filter is applicable for numerical values;\n\t\t * <code>false</code> otherwise.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic boolean isNumericalFilter() {\n\t\t\tif (isSpecialFilter()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType, Ontology.NUMERICAL)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\t/**\n\t\t * Returns <code>true</code> if this filter is applicable for nominal values;\n\t\t * <code>false</code> otherwise.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic boolean isNominalFilter() {\n\t\t\tif (isSpecialFilter()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType, Ontology.NOMINAL)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\t/**\n\t\t * Returns <code>true</code> if this filter is a special filter (e.g. missing value filter);\n\t\t * <code>false</code> otherwise. <br/>\n\t\t * These filters are applicable for all attribute types.\n\t\t *\n\t\t * @return\n\t\t */\n\t\tpublic boolean isSpecialFilter() {\n\t\t\tif (valueType == -1) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\t/**\n\t\t * Returns <code>true</code> if the numerical condition for this filter is fulfilled for the\n\t\t * given value. Returns always <code>false</code> if the condition is for nominal values\n\t\t * only.\n\t\t *\n\t\t * @param input\n\t\t * @param filterValue\n\t\t * @return\n\t\t */\n\t\tpublic abstract boolean isNumericalConditionFulfilled(double input, double filterValue);\n\t\t/**\n\t\t * Returns <code>true</code> if the nominal condition for this filter is fulfilled for the\n\t\t * given value. Returns always <code>false</code> if the condition is for numerical values\n\t\t * only.\n\t\t *\n\t\t * @param input\n\t\t * @param filterValue\n\t\t * @return\n\t\t */\n\t\tpublic abstract boolean isNominalConditionFulfilled(String input, String filterValue);\n\t\t/**\n\t\t * Returns <code>true</code> if the special condition for this filter is fulfilled for the\n\t\t * given value.\n\t\t *\n\t\t * @param input\n\t\t * @return\n\t\t */\n\t\tpublic abstract boolean isSpecialConditionFulfilled(double input);\n\t\t/**\n\t\t * Returns the {@link CustomFilters} matching the given label {@link String}. If none can be\n\t\t * found, returns <code>null</code>.\n\t\t *\n\t\t * @param label\n\t\t * @return\n\t\t */\n\t\tpublic static CustomFilters getByLabel(final String label) {\n\t\t\tfor (CustomFilters filter : values()) {\n\t\t\t\tif (filter.getLabel().equals(label)) {\n\t\t\t\t\treturn filter;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t/**\n\t\t * Returns the {@link CustomFilters} matching the given symbol {@link String}. If none can\n\t\t * be found, returns <code>null</code>.\n\t\t *\n\t\t * @param symbol\n\t\t * @return\n\t\t */\n\t\tpublic static CustomFilters getBySymbol(final String symbol) {\n\t\t\tfor (CustomFilters filter : values()) {\n\t\t\t\tif (filter.getSymbol().equals(symbol)) {\n\t\t\t\t\treturn filter;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t/**\n\t\t * Returns a list of {@link CustomFilters}s for the given {@link ValueType}. Returns an\n\t\t * empty list if no filter was found.\n\t\t *\n\t\t * @param valueType\n\t\t * @return\n\t\t */\n\t\tpublic static List<CustomFilters> getFiltersForValueType(final int valueType) {\n\t\t\tList<CustomFilters> list = new LinkedList<>();\n\t\t\tfor (CustomFilters filter : values()) {\n\t\t\t\tif (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType, Ontology.NOMINAL)) {\n\t\t\t\t\t// only nominal filters\n\t\t\t\t\tif (filter.isSpecialFilter() || filter.isNominalFilter()) {\n\t\t\t\t\t\tlist.add(filter);\n\t\t\t\t\t}\n\t\t\t\t} else if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType, Ontology.NUMERICAL)) {\n\t\t\t\t\t// only numerical filters\n\t\t\t\t\tif (filter.isSpecialFilter() || filter.isNumericalFilter()) {\n\t\t\t\t\t\tlist.add(filter);\n\t\t\t\t\t}\n\t\t\t\t} else if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType, Ontology.DATE_TIME)) {\n\t\t\t\t\t// only numerical filters\n\t\t\t\t\tif (filter.isSpecialFilter() || filter.isNumericalFilter()) {\n\t\t\t\t\t\tlist.add(filter);\n\t\t\t\t\t}\n\t\t\t\t} else if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType, Ontology.ATTRIBUTE_VALUE)) {\n\t\t\t\t\t// unknown value type right now, allow all filters\n\t\t\t\t\tlist.add(filter);\n\t\t\t\t} else {\n\t\t\t\t\t// filter only defined for numerical or nominal or unknown\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn list;\n\t\t}\n\t\t/**\n\t\t * Returns a {@link Date} parsed via the date {@link String} or <code>null</code> if the\n\t\t * given string could not be parsed. Uses {@link Locale#ENGLISH}.\n\t\t * <p>\n\t\t * Not static because {@link DateFormat} is NOT threadsafe.\n\t\t * </p>\n\t\t *\n\t\t * @see #FORMAT_DATE_TIME\n\t\t * @param dateTimeString\n\t\t * @return\n\t\t */\n\t\tpublic Date parseDateTime(final String dateTimeString) {\n\t\t\ttry {\n\t\t\t\treturn FORMAT_DATE_TIME.get().parse(dateTimeString);\n\t\t\t} catch (ParseException e) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Old parser for date_time.\n\t\t *\n\t\t * @param dateTimeString\n\t\t * @return\n\t\t */\n\t\tprivate Date parseDateTimeOld(final String dateTimeString) {\n\t\t\ttry {\n\t\t\t\treturn FORMAT_DATE_TIME_OLD.get().parse(dateTimeString);\n\t\t\t} catch (ParseException e) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Returns a {@link Date} parsed via the date {@link String} or <code>null</code> if the\n\t\t * given string could not be parsed. Uses {@link Locale#ENGLISH}.\n\t\t * <p>\n\t\t * Not static because {@link DateFormat} is NOT threadsafe.\n\t\t * </p>\n\t\t *\n\t\t * @see #FORMAT_DATE\n\t\t * @param dateString\n\t\t * @return\n\t\t */\n\t\tpublic Date parseDate(final String dateString) {\n\t\t\ttry {\n\t\t\t\treturn FORMAT_DATE.get().parse(dateString);\n\t\t\t} catch (ParseException e) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Old parser for date.\n\t\t *\n\t\t * @param dateString\n\t\t * @return\n\t\t */\n\t\tprivate Date parseDateOld(final String dateString) {\n\t\t\ttry {\n\t\t\t\treturn FORMAT_DATE_OLD.get().parse(dateString);\n\t\t\t} catch (ParseException e) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Returns a {@link Date} parsed via the date {@link String} or <code>null</code> if the\n\t\t * given string could not be parsed. Uses {@link Locale#ENGLISH}.\n\t\t * <p>\n\t\t * Not static because {@link DateFormat} is NOT threadsafe.\n\t\t * </p>\n\t\t *\n\t\t * @see #FORMAT_TIME\n\t\t * @param timeString\n\t\t * @return\n\t\t */\n\t\tpublic Date parseTime(final String timeString) {\n\t\t\ttry {\n\t\t\t\treturn FORMAT_TIME.get().parse(timeString);\n\t\t\t} catch (ParseException e) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Returns a {@link String} formatted from the {@link Date}. Uses {@link Locale#ENGLISH}.\n\t\t * <p>\n\t\t * Not static because {@link DateFormat} is NOT threadsafe.\n\t\t * </p>\n\t\t *\n\t\t * @see #FORMAT_TIME\n\t\t * @param dateTime\n\t\t * @return\n\t\t */\n\t\tpublic String formatDateTime(final Date dateTime) {\n\t\t\tif (dateTime == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"dateTime must not be null!\");\n\t\t\t}\n\t\t\treturn FORMAT_DATE_TIME.get().format(dateTime);\n\t\t}\n\t\t/**\n\t\t * Old format for date_time.\n\t\t *\n\t\t * @param dateTime\n\t\t * @return\n\t\t */\n\t\tpublic String formatDateTimeOld(final Date dateTime) {\n\t\t\tif (dateTime == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"dateTime must not be null!\");\n\t\t\t}\n\t\t\treturn FORMAT_DATE_TIME_OLD.get().format(dateTime);\n\t\t}\n\t\t/**\n\t\t * Returns a {@link String} formatted from the {@link Date}. Uses {@link Locale#ENGLISH}.\n\t\t * <p>\n\t\t * Not static because {@link DateFormat} is NOT threadsafe.\n\t\t * </p>\n\t\t *\n\t\t * @see #FORMAT_TIME\n\t\t * @param date\n\t\t * @return\n\t\t */\n\t\tpublic String formatDate(final Date date) {\n\t\t\tif (date == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"date must not be null!\");\n\t\t\t}\n\t\t\treturn FORMAT_DATE.get().format(date);\n\t\t}\n\t\t/**\n\t\t * Returns a {@link String} formatted from the {@link Date}. Uses {@link Locale#ENGLISH}.\n\t\t * <p>\n\t\t * Not static because {@link DateFormat} is NOT threadsafe.\n\t\t * </p>\n\t\t *\n\t\t * @see #FORMAT_TIME\n\t\t * @param time\n\t\t * @return\n\t\t */\n\t\tpublic String formatTime(final Date time) {\n\t\t\tif (time == null) {\n\t\t\t\tthrow new IllegalArgumentException(\"time must not be null!\");\n\t\t\t}\n\t\t\treturn FORMAT_TIME.get().format(time);\n\t\t}\n\t}\n\tprivate static final long serialVersionUID = -1369785656210631292L;\n\tprivate static final String WHITESPACE = \" \";\n\tprivate static final String BACKSLASH = \"/\";\n\tprivate static final int CONDITION_ARRAY_REQUIRED_SIZE = 2;\n\tprivate static final int CONDITION_ARRAY_CONDITION_INDEX = 1;\n\tprivate static final int CONDITION_TUPEL_REQUIRED_SIZE = 3;\n\tprivate static final int CONDITION_TUPEL_ATT_INDEX = 0;\n\tprivate static final int CONDITION_TUPEL_FILTER_INDEX = 1;\n\tprivate static final int CONDITION_TUPEL_VALUE_INDEX = 2;\n\t/** the list of all conditions */\n\tprivate List<String[]> conditions = new LinkedList<>();\n\t/**\n\t * an array which indicates if for the ordered filter index the old (bugged) date parsing should\n\t * be used\n\t */\n\tprivate boolean[] conditionsOldDateFilter;\n\t/** the {@link MacroHandler}, will be used to resolve filter values, can be <code>null</code> */\n\tprivate MacroHandler macroHandler;\n\tprivate boolean fulfillAllConditions;\n\t/**\n\t * Creates a new {@link CustomFilter} instance with the {@link CustomFilters} encoded in the\n\t * {@link List} of {@link String} arrays. The {@link Boolean} parameter defines if either all\n\t * conditions must be fulfilled or only one of them.\n\t *\n\t * @param exampleSet\n\t * @param conditions\n\t * @param fulfillAllConditions\n\t * @param macroHandler\n\t *            the macro handler which will be used to resolve macros for the filter value, can\n\t *            be <code>null</code>\n\t * @param version\n\t *            can be used to force old behaviour. If not needed and current implementation is\n\t *            desired, can be set to <code>null</code>\n\t *\n\t */\n\tpublic CustomFilter(final ExampleSet exampleSet, final List<String[]> conditions, final boolean fulfillAllConditions,\n\t\t\tfinal MacroHandler macroHandler) {\n\t\tif (conditions == null) {\n\t\t\tthrow new IllegalArgumentException(\"typeList must not be null!\");\n\t\t}\n\t\tconditionsOldDateFilter = new boolean[conditions.size()];\n\t\t// check if given conditions list is well formed and valid!\n\t\tint counter = 0;\n\t\tfor (String[] conditionArray : conditions) {\n\t\t\tif (conditionArray.length != CONDITION_ARRAY_REQUIRED_SIZE) {\n\t\t\t\tthrow new IllegalArgumentException(\"conditions must only consist of arrays of length 2!\");\n\t\t\t}\n\t\t\tString condition = conditionArray[CONDITION_ARRAY_CONDITION_INDEX];\n\t\t\tString[] conditionTupel = ParameterTypeTupel.transformString2Tupel(condition);\n\t\t\tif (conditionTupel.length != CONDITION_TUPEL_REQUIRED_SIZE) {\n\t\t\t\tthrow new IllegalArgumentException(\"Malformed condition tupels! Expected size 3 but was \"\n\t\t\t\t\t\t+ conditionTupel.length);\n\t\t\t}\n\t\t\tString attName = conditionTupel[CONDITION_TUPEL_ATT_INDEX];\n\t\t\tAttribute att = exampleSet.getAttributes().get(attName);\n\t\t\tString filterSymbol = conditionTupel[CONDITION_TUPEL_FILTER_INDEX];\n\t\t\tCustomFilters filter = CustomFilters.getBySymbol(filterSymbol);\n\t\t\tString filterValue = conditionTupel[CONDITION_TUPEL_VALUE_INDEX];\n\t\t\tif (macroHandler != null) {\n\t\t\t\tthis.macroHandler = macroHandler;\n\t\t\t\tfilterValue = substituteMacros(filterValue, macroHandler);\n\t\t\t}\n\t\t\tif (filter == null) {\n\t\t\t\tthrow new IllegalArgumentException(I18N.getMessageOrNull(I18N.getErrorBundle(),\n\t\t\t\t\t\t\"custom_filters.filter_not_found\", filterSymbol));\n\t\t\t}\n\t\t\tif (att == null) {\n\t\t\t\tthrow new IllegalArgumentException(I18N.getMessageOrNull(I18N.getErrorBundle(),\n\t\t\t\t\t\t\"custom_filters.attribute_not_found\", attName));\n\t\t\t}\n\t\t\t// special checks for numerical filters\n\t\t\tif (filter.isNumericalFilter()) {\n\t\t\t\t// check if attribute is numerical\n\t\t\t\tif (att.isNominal()) {\n\t\t\t\t\tthrow new AttributeTypeException(I18N.getMessageOrNull(I18N.getErrorBundle(),\n\t\t\t\t\t\t\t\"custom_filters.numerical_comparator_type_invalid\", filter.getLabel(), att.getName()));\n\t\t\t\t}\n\t\t\t\tif (att.isDateTime()) {\n\t\t\t\t\t// check if filter value works for date attribute\n\t\t\t\t\tif (filterValue == null || \"\".equals(filterValue) || !isStringValidDoubleValue(filter, filterValue, att)) {\n\t\t\t\t\t\tthrow new IllegalArgumentException(I18N.getMessageOrNull(I18N.getErrorBundle(),\n\t\t\t\t\t\t\t\t\"custom_filters.illegal_date_value\", filterValue, att.getName()));\n\t\t\t\t\t}\n\t\t\t\t} else if (att.isNumerical()) {\n\t\t\t\t\t// check if filter value works for numerical attribute\n\t\t\t\t\tif (filterValue == null || \"\".equals(filterValue) || !isStringValidDoubleValue(filter, filterValue, att)) {\n\t\t\t\t\t\tthrow new IllegalArgumentException(I18N.getMessageOrNull(I18N.getErrorBundle(),\n\t\t\t\t\t\t\t\t\"custom_filters.illegal_numerical_value\", filterValue, att.getName()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// keep compatibility with processes from versions prior to 6.0.004\n\t\t\t\t// only affects DATE and DATE_TIME filters\n\t\t\t\tint yearIndex = filterValue.lastIndexOf(BACKSLASH) + 1;\n\t\t\t\tint firstWhitespaceIndex = filterValue.indexOf(WHITESPACE);\n\t\t\t\tString yearString = null;\n\t\t\t\tif (yearIndex > 0 && firstWhitespaceIndex > 0 && yearIndex < firstWhitespaceIndex) {\n\t\t\t\t\tyearString = filterValue.substring(yearIndex, firstWhitespaceIndex);\n\t\t\t\t}\n\t\t\t\t// if true, the old (bugged) parsing will be used; otherwise the new yyyy parsing\n\t\t\t\t// will be used\n\t\t\t\tconditionsOldDateFilter[counter] = yearString != null && yearString.length() == 2;\n\t\t\t} else if (filter.isNominalFilter()) {\n\t\t\t\tif (!att.isNominal()) {\n\t\t\t\t\tthrow new AttributeTypeException(I18N.getMessageOrNull(I18N.getErrorBundle(),\n\t\t\t\t\t\t\t\"custom_filters.nominal_comparator_type_invalid\", filter.getLabel(), att.getName()));\n\t\t\t\t}\n\t\t\t}\n\t\t\tcounter++;\n\t\t}\n\t\tthis.conditions = conditions;\n\t\tthis.fulfillAllConditions = fulfillAllConditions;\n\t}\n\t/**\n\t * The sole purpose of this constructor is to provide a constructor that matches the expected\n\t * signature for the {@link ConditionedExampleSet} reflection invocation. However, this class\n\t * cannot be instantiated by an ExampleSet and a String, so we <b>always</b> throw an\n\t * {@link IllegalArgumentException} to signal this filter cannot be instantiated that way.\n\t *\n\t * @throws IllegalArgumentException\n\t *             <b>ALWAYS THROWN!</b>\n\t */\n\t@Deprecated\n\tpublic CustomFilter(final ExampleSet exampleSet, final String parameterString) throws IllegalArgumentException {\n\t\tthrow new IllegalArgumentException(\"This condition cannot be instantiated this way!\");\n\t}\n\t/**\n\t * Since the condition cannot be altered after creation we can just return the condition object\n\t * itself.\n\t *\n\t * @deprecated Conditions should not be able to be changed dynamically and hence there is no\n\t *             need for a copy\n\t */\n\t@Deprecated\n\t@Override\n\tpublic Condition duplicate() {\n\t\treturn this;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tfor (String[] array : conditions) {\n\t\t\tbuilder.append(Arrays.toString(array));\n\t\t\tbuilder.append(' ');\n\t\t}\n\t\treturn builder.toString();\n\t}\n\t@Override\n\tpublic boolean conditionOk(final Example e) {\n\t\tboolean conditionsFulfilled = fulfillAllConditions ? true : false;\n\t\tint counter = 0;\n\t\tfor (String[] conditionArray : conditions) {\n\t\t\t// we checked for malformed conditions in the constructor so no need to do it again\n\t\t\tString condition = conditionArray[CONDITION_ARRAY_CONDITION_INDEX];\n\t\t\tString[] conditionTupel = ParameterTypeTupel.transformString2Tupel(condition);\n\t\t\tString attName = conditionTupel[CONDITION_TUPEL_ATT_INDEX];\n\t\t\tAttribute att = e.getAttributes().get(attName);\n\t\t\tString filterSymbol = conditionTupel[CONDITION_TUPEL_FILTER_INDEX];\n\t\t\tCustomFilters filter = CustomFilters.getBySymbol(filterSymbol);\n\t\t\tString filterValue = conditionTupel[CONDITION_TUPEL_VALUE_INDEX];\n\t\t\tif (macroHandler != null) {\n\t\t\t\tfilterValue = substituteMacros(filterValue, macroHandler);\n\t\t\t}\n\t\t\t// check if condition is fulfilled\n\t\t\tboolean fulfilled;\n\t\t\tif (filter.isSpecialFilter()) {\n\t\t\t\tfulfilled = filter.isSpecialConditionFulfilled(e.getValue(att));\n\t\t\t} else if (filter.isNominalFilter()) {\n\t\t\t\tfulfilled = filter.isNominalConditionFulfilled(e.getNominalValue(att), filterValue);\n\t\t\t} else {\n\t\t\t\tfulfilled = checkNumericalCondition(e, att, filter, filterSymbol, filterValue,\n\t\t\t\t\t\tconditionsOldDateFilter[counter]);\n\t\t\t}\n\t\t\t// store result\n\t\t\tif (fulfillAllConditions) {\n\t\t\t\tconditionsFulfilled &= fulfilled;\n\t\t\t} else {\n\t\t\t\tconditionsFulfilled |= fulfilled;\n\t\t\t}\n\t\t\t// shortcut for OR - one fulfilled condition is enough\n\t\t\tif (!fulfillAllConditions && conditionsFulfilled) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcounter++;\n\t\t}\n\t\treturn conditionsFulfilled;\n\t}\n\t/**\n\t * Returns <code>true</code> if the given filter is fulfilled for the given value.\n\t *\n\t * @param e\n\t * @param att\n\t * @param filter\n\t * @param filterSymbol\n\t * @param filterValue\n\t * @param oldBehavior\n\t *            if <code>true</code>, old, bugged parsing with format dd/MM/yy will be used\n\t * @return\n\t */\n\tprivate boolean checkNumericalCondition(final Example e, final Attribute att, final CustomFilters filter,\n\t\t\tfinal String filterSymbol, final String filterValue, final boolean oldBehavior) {\n\t\t// special handling because we can have DATE_TIME, DATE and TIME strings in human readable\n\t\t// format here\n\t\tdouble doubleOriginalValue = e.getValue(att);\n\t\tdouble doubleFilterValue;\n\t\ttry {\n\t\t\tdoubleFilterValue = Double.parseDouble(filterValue);\n\t\t} catch (NumberFormatException e1) {\n\t\t\t// if we have a date we are losing precision - therefore we need to convert the original\n\t\t\t// value back and forth once so both lose the same amount of precision -\n\t\t\t// otherwise the filters will not work correctly\n\t\t\tif (Ontology.ATTRIBUTE_VALUE_TYPE.isA(att.getValueType(), Ontology.DATE)) {\n\t\t\t\tString formattedOriginal = filter.formatDate(new Date((long) doubleOriginalValue));\n\t\t\t\tdoubleOriginalValue = filter.parseDate(formattedOriginal).getTime();\n\t\t\t\t// keep compatibility with processes from versions prior to 6.0.004\n\t\t\t\tif (oldBehavior) {\n\t\t\t\t\t// if year consists of 2 chars, use old (bugged) version\n\t\t\t\t\tdoubleFilterValue = filter.parseDateOld(filterValue).getTime();\n\t\t\t\t} else {\n\t\t\t\t\t// new behavior\n\t\t\t\t\tdoubleFilterValue = filter.parseDate(filterValue).getTime();\n\t\t\t\t}\n\t\t\t} else if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(att.getValueType(), Ontology.TIME)) {\n\t\t\t\tString formattedOriginal = filter.formatTime(new Date((long) doubleOriginalValue));\n\t\t\t\tdoubleOriginalValue = filter.parseTime(formattedOriginal).getTime();\n\t\t\t\tdoubleFilterValue = filter.parseTime(filterValue).getTime();\n\t\t\t} else if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(att.getValueType(), Ontology.DATE_TIME)) {\n\t\t\t\tString formattedOriginal = filter.formatDateTime(new Date((long) doubleOriginalValue));\n\t\t\t\tdoubleOriginalValue = filter.parseDateTime(formattedOriginal).getTime();\n\t\t\t\t// keep compatibility with processes from versions prior to 6.0.004\n\t\t\t\tif (oldBehavior) {\n\t\t\t\t\t// if year consists of 2 chars, use old (bugged) version\n\t\t\t\t\tdoubleFilterValue = filter.parseDateTimeOld(filterValue).getTime();\n\t\t\t\t} else {\n\t\t\t\t\t// new behavior\n\t\t\t\t\tdoubleFilterValue = filter.parseDateTime(filterValue).getTime();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// because we have checked the filters in the constructor, this is the only option\n\t\t\t\t// left\n\t\t\t\t// special handling for ? as missing value\n\t\t\t\tdoubleFilterValue = Double.NaN;\n\t\t\t}\n\t\t}\n\t\treturn filter.isNumericalConditionFulfilled(doubleOriginalValue, doubleFilterValue);\n\t}\n\t/**\n\t * Tries to parse the given {@link String} to a {@link Double} and returns <code>true</code> if\n\t * successful; <code>false</code> otherwise.\n\t *\n\t * @param value\n\t * @param att\n\t * @return\n\t */\n\tprivate boolean isStringValidDoubleValue(final CustomFilters filter, final String value, final Attribute att) {\n\t\ttry {\n\t\t\tDouble.parseDouble(value);\n\t\t} catch (NumberFormatException e1) {\n\t\t\t// if we have a date we are losing precision - therefore we need to convert the original\n\t\t\t// value back and forth once so both lose the same amount of precision -\n\t\t\t// otherwise the filters will not work correctly\n\t\t\tif (Ontology.ATTRIBUTE_VALUE_TYPE.isA(att.getValueType(), Ontology.DATE)) {\n\t\t\t\tif (filter.parseDate(value) == null) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(att.getValueType(), Ontology.TIME)) {\n\t\t\t\tif (filter.parseTime(value) == null) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(att.getValueType(), Ontology.DATE_TIME)) {\n\t\t\t\tif (filter.parseDateTime(value) == null) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\"?\".equals(value)) {\n\t\t\t\t\t// special handling for ? as missing value\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\t// all parsing tries failed\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t/**\n\t * Tries to substitute macros with their real value.\n\t *\n\t * @param value\n\t * @param macroHandler\n\t * @return\n\t */\n\tprivate static String substituteMacros(String value, final MacroHandler macroHandler) {\n\t\tint startIndex = value.indexOf(\"%{\");\n\t\tif (startIndex == -1) {\n\t\t\treturn value;\n\t\t}\n\t\ttry {\n", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "length": 3860, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "fbe826b34c95bf5c383820196e9cee3bc1f39dfe0642d1d3"}
{"input": "", "context": "/*\n * Copyright 2008-2020 Ping Identity Corporation\n * All Rights Reserved.\n */\n/*\n * Copyright 2008-2020 Ping Identity Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * Copyright (C) 2008-2020 Ping Identity Corporation\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License (GPLv2 only)\n * or the terms of the GNU Lesser General Public License (LGPLv2.1 only)\n * as published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, see <http://www.gnu.org/licenses>.\n */\npackage com.unboundid.ldap.sdk.unboundidds.controls;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport com.unboundid.asn1.ASN1Boolean;\nimport com.unboundid.asn1.ASN1Element;\nimport com.unboundid.asn1.ASN1OctetString;\nimport com.unboundid.asn1.ASN1Sequence;\nimport com.unboundid.ldap.sdk.Control;\nimport com.unboundid.ldap.sdk.LDAPException;\nimport com.unboundid.ldap.sdk.ResultCode;\nimport com.unboundid.util.Debug;\nimport com.unboundid.util.NotMutable;\nimport com.unboundid.util.NotNull;\nimport com.unboundid.util.Nullable;\nimport com.unboundid.util.StaticUtils;\nimport com.unboundid.util.ThreadSafety;\nimport com.unboundid.util.ThreadSafetyLevel;\nimport static com.unboundid.ldap.sdk.unboundidds.controls.ControlMessages.*;\n/**\n * This class provides an implementation of an LDAP control that can be included\n * in a bind request to request that the Directory Server return the\n * authentication and authorization entries for the user that authenticated.\n * <BR>\n * <BLOCKQUOTE>\n *   <B>NOTE:</B>  This class, and other classes within the\n *   {@code com.unboundid.ldap.sdk.unboundidds} package structure, are only\n *   supported for use against Ping Identity, UnboundID, and\n *   Nokia/Alcatel-Lucent 8661 server products.  These classes provide support\n *   for proprietary functionality or for external specifications that are not\n *   considered stable or mature enough to be guaranteed to work in an\n *   interoperable way with other types of LDAP servers.\n * </BLOCKQUOTE>\n * <BR>\n * The value of this control may be absent, but if it is present then will be\n * encoded as follows:\n * <PRE>\n *   GetAuthorizationEntryRequest ::= SEQUENCE {\n *        includeAuthNEntry     [0] BOOLEAN DEFAULT TRUE,\n *        includeAuthZEntry     [1] BOOLEAN DEFAULT TRUE,\n *        attributes            [2] AttributeSelection OPTIONAL }\n * </PRE>\n * <BR><BR>\n * <H2>Example</H2>\n * The following example demonstrates the process for processing a bind\n * operation using the get authorization entry request control to return all\n * user attributes in both the authentication and authorization entries:\n * <PRE>\n * ReadOnlyEntry authNEntry = null;\n * ReadOnlyEntry authZEntry = null;\n *\n * BindRequest bindRequest = new SimpleBindRequest(\n *      \"uid=john.doe,ou=People,dc=example,dc=com\", \"password\",\n *      new GetAuthorizationEntryRequestControl());\n *\n * BindResult bindResult = connection.bind(bindRequest);\n * GetAuthorizationEntryResponseControl c =\n *      GetAuthorizationEntryResponseControl.get(bindResult);\n * if (c != null)\n * {\n *   authNEntry = c.getAuthNEntry();\n *   authZEntry = c.getAuthZEntry();\n * }\n * </PRE>\n */\n@NotMutable()\n@ThreadSafety(level=ThreadSafetyLevel.COMPLETELY_THREADSAFE)\npublic final class GetAuthorizationEntryRequestControl\n       extends Control\n{\n  /**\n   * The OID (1.3.6.1.4.1.30221.2.5.6) for the get authorization entry request\n   * control.\n   */\n  @NotNull public static final String GET_AUTHORIZATION_ENTRY_REQUEST_OID =\n       \"1.3.6.1.4.1.30221.2.5.6\";\n  /**\n   * The BER type for the {@code includeAuthNEntry} element.\n   */\n  private static final byte TYPE_INCLUDE_AUTHN_ENTRY = (byte) 0x80;\n  /**\n   * The BER type for the {@code includeAuthZEntry} element.\n   */\n  private static final byte TYPE_INCLUDE_AUTHZ_ENTRY = (byte) 0x81;\n  /**\n   * The BER type for the {@code attributes} element.\n   */\n  private static final byte TYPE_ATTRIBUTES = (byte) 0xA2;\n  /**\n   * The serial version UID for this serializable class.\n   */\n  private static final long serialVersionUID = -5540345171260624216L;\n  // Indicates whether to include the authentication entry in the response.\n  private final boolean includeAuthNEntry;\n  // Indicates whether to include the authorization entry in the response.\n  private final boolean includeAuthZEntry;\n  // The list of attributes to include in entries that are returned.\n  @NotNull private final List<String> attributes;\n  /**\n   * Creates a new get authorization entry request control that will request all\n   * user attributes in both the authentication and authorization entries.  It\n   * will not be marked critical.\n   */\n  public GetAuthorizationEntryRequestControl()\n  {\n    this(false, true, true, (List<String>) null);\n  }\n  /**\n   * Creates a new get authorization entry request control with the provided\n   * information.\n   *\n   * @param  includeAuthNEntry  Indicates whether to include the authentication\n   *                            entry in the response.\n   * @param  includeAuthZEntry  Indicates whether to include the authorization\n   *                            entry in the response.\n   * @param  attributes         The attributes to include in the entries in the\n   *                            response.  It may be empty or {@code null} to\n   *                            request all user attributes.\n   */\n  public GetAuthorizationEntryRequestControl(final boolean includeAuthNEntry,\n              final boolean includeAuthZEntry,\n              @Nullable final String... attributes)\n  {\n    this(false, includeAuthNEntry, includeAuthZEntry,\n         (attributes == null) ? null : Arrays.asList(attributes));\n  }\n  /**\n   * Creates a new get authorization entry request control with the provided\n   * information.\n   *\n   * @param  includeAuthNEntry  Indicates whether to include the authentication\n   *                            entry in the response.\n   * @param  includeAuthZEntry  Indicates whether to include the authorization\n   *                            entry in the response.\n   * @param  attributes         The attributes to include in the entries in the\n   *                            response.  It may be empty or {@code null} to\n   *                            request all user attributes.\n   */\n  public GetAuthorizationEntryRequestControl(final boolean includeAuthNEntry,\n              final boolean includeAuthZEntry,\n              @Nullable final List<String> attributes)\n  {\n    this(false, includeAuthNEntry, includeAuthZEntry, attributes);\n  }\n  /**\n   * Creates a new get authorization entry request control with the provided\n   * information.\n   *\n   * @param  isCritical         Indicates whether the control should be marked\n   *                            critical.\n   * @param  includeAuthNEntry  Indicates whether to include the authentication\n   *                            entry in the response.\n   * @param  includeAuthZEntry  Indicates whether to include the authorization\n   *                            entry in the response.\n   * @param  attributes         The attributes to include in the entries in the\n   *                            response.  It may be empty or {@code null} to\n   *                            request all user attributes.\n   */\n  public GetAuthorizationEntryRequestControl(final boolean isCritical,\n              final boolean includeAuthNEntry,\n              final boolean includeAuthZEntry,\n              @Nullable final String... attributes)\n  {\n    this(isCritical, includeAuthNEntry, includeAuthZEntry,\n         (attributes == null) ? null : Arrays.asList(attributes));\n  }\n  /**\n   * Creates a new get authorization entry request control with the provided\n   * information.\n   *\n   * @param  isCritical         Indicates whether the control should be marked\n   *                            critical.\n   * @param  includeAuthNEntry  Indicates whether to include the authentication\n   *                            entry in the response.\n   * @param  includeAuthZEntry  Indicates whether to include the authorization\n   *                            entry in the response.\n   * @param  attributes         The attributes to include in the entries in the\n   *                            response.  It may be empty or {@code null} to\n   *                            request all user attributes.\n   */\n  public GetAuthorizationEntryRequestControl(final boolean isCritical,\n              final boolean includeAuthNEntry,\n              final boolean includeAuthZEntry,\n              @Nullable final List<String> attributes)\n  {\n    super(GET_AUTHORIZATION_ENTRY_REQUEST_OID, isCritical,\n          encodeValue(includeAuthNEntry, includeAuthZEntry, attributes));\n    this.includeAuthNEntry = includeAuthNEntry;\n    this.includeAuthZEntry = includeAuthZEntry;\n    if ((attributes == null) || attributes.isEmpty())\n    {\n      this.attributes = Collections.emptyList();\n    }\n    else\n    {\n      this.attributes =\n           Collections.unmodifiableList(new ArrayList<>(attributes));\n    }\n  }\n  /**\n   * Creates a new get authorization entry request control which is decoded from\n   * the provided generic control.\n   *\n   * @param  control  The generic control to decode as a get authorization entry\n   *                  request control.\n   *\n   * @throws  LDAPException  If the provided control cannot be decoded as a get\n   *                         authorization entry request control.\n   */\n  public GetAuthorizationEntryRequestControl(@NotNull final Control control)\n         throws LDAPException\n  {\n    super(control);\n    final ASN1OctetString value = control.getValue();\n    if (value == null)\n    {\n      includeAuthNEntry = true;\n      includeAuthZEntry = true;\n      attributes        = Collections.emptyList();\n      return;\n    }\n    try\n    {\n      final ArrayList<String> attrs = new ArrayList<>(20);\n      boolean includeAuthN = true;\n      boolean includeAuthZ = true;\n      final ASN1Element element = ASN1Element.decode(value.getValue());\n      for (final ASN1Element e :\n           ASN1Sequence.decodeAsSequence(element).elements())\n      {\n        switch (e.getType())\n        {\n          case TYPE_INCLUDE_AUTHN_ENTRY:\n            includeAuthN = ASN1Boolean.decodeAsBoolean(e).booleanValue();\n            break;\n          case TYPE_INCLUDE_AUTHZ_ENTRY:\n            includeAuthZ = ASN1Boolean.decodeAsBoolean(e).booleanValue();\n            break;\n          case TYPE_ATTRIBUTES:\n            for (final ASN1Element ae :\n                 ASN1Sequence.decodeAsSequence(e).elements())\n            {\n              attrs.add(ASN1OctetString.decodeAsOctetString(ae).stringValue());\n            }\n            break;\n          default:\n            throw new LDAPException(ResultCode.DECODING_ERROR,\n                 ERR_GET_AUTHORIZATION_ENTRY_REQUEST_INVALID_SEQUENCE_ELEMENT.\n                      get(StaticUtils.toHex(e.getType())));\n        }\n      }\n      includeAuthNEntry = includeAuthN;\n      includeAuthZEntry = includeAuthZ;\n      attributes        = attrs;\n    }\n    catch (final LDAPException le)\n    {\n      throw le;\n    }\n    catch (final Exception e)\n    {\n      Debug.debugException(e);\n      throw new LDAPException(ResultCode.DECODING_ERROR,\n           ERR_GET_AUTHORIZATION_ENTRY_REQUEST_CANNOT_DECODE_VALUE.get(\n                StaticUtils.getExceptionMessage(e)),\n           e);\n    }\n  }\n  /**\n   * Encodes the provided information as appropriate for use as the value of\n   * this control.\n   *\n   * @param  includeAuthNEntry  Indicates whether to include the authentication\n   *                            entry in the response.\n   * @param  includeAuthZEntry  Indicates whether to include the authorization\n   *                            entry in the response.\n   * @param  attributes         The attributes to include in the entries in the\n   *                            response.  It may be empty or {@code null} to\n   *                            request all user attributes.\n   *\n   * @return  An ASN.1 octet string appropriately encoded for use as the control\n   *          value, or {@code null} if no value is needed.\n   */\n  @Nullable()\n  private static ASN1OctetString encodeValue(final boolean includeAuthNEntry,\n                      final boolean includeAuthZEntry,\n                      @Nullable final List<String> attributes)\n  {\n    if (includeAuthNEntry && includeAuthZEntry &&\n        ((attributes == null) || attributes.isEmpty()))\n    {\n      return null;\n    }\n    final ArrayList<ASN1Element> elements = new ArrayList<>(3);\n    if (! includeAuthNEntry)\n    {\n", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "length": 1468, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "c03431732946ef009a870d3fa6296ec7808001f35d8eda89"}
{"input": "", "context": "//#############################################################################\n//#                                                                           #\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\n//#                                                                           #\n//#  This program is free software: you can redistribute it and/or modify     #\n//#  it under the terms of the GNU Affero General Public License as           #\n//#  published by the Free Software Foundation, either version 3 of the       #\n//#  License, or (at your option) any later version.                          # \n//#                                                                           #\n//#  This program is distributed in the hope that it will be useful,          #\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\n//#  GNU Affero General Public License for more details.                      #\n//#                                                                           #\n//#  You should have received a copy of the GNU Affero General Public License #\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\n//#                                                                           #\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\n//#  this program.  Users of this software do so entirely at their own risk.  #\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\n//#  software that it builds, deploys and maintains.                          #\n//#                                                                           #\n//#############################################################################\n//#EOH\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\n// WARNING: DO NOT MODIFY the content of this file\npackage ims.nursing.vo;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport ims.framework.enumerations.SortOrder;\npublic class InvasiveDeviceSearchCriteriaVoCollection extends ims.vo.ValueObjectCollection implements ims.vo.ImsCloneable, Iterable<InvasiveDeviceSearchCriteriaVo>\n{\n\tprivate static final long serialVersionUID = 1L;\n\tprivate ArrayList<InvasiveDeviceSearchCriteriaVo> col = new ArrayList<InvasiveDeviceSearchCriteriaVo>();\n\tpublic String getBoClassName()\n\t{\n\t\treturn null;\n\t}\n\tpublic boolean add(InvasiveDeviceSearchCriteriaVo value)\n\t{\n\t\tif(value == null)\n\t\t\treturn false;\n\t\tif(this.col.indexOf(value) < 0)\n\t\t{\n\t\t\treturn this.col.add(value);\n\t\t}\n\t\treturn false;\n\t}\n\tpublic boolean add(int index, InvasiveDeviceSearchCriteriaVo value)\n\t{\n\t\tif(value == null)\n\t\t\treturn false;\n\t\tif(this.col.indexOf(value) < 0)\n\t\t{\n\t\t\tthis.col.add(index, value);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic void clear()\n\t{\n\t\tthis.col.clear();\n\t}\n\tpublic void remove(int index)\n\t{\n\t\tthis.col.remove(index);\n\t}\n\tpublic int size()\n\t{\n\t\treturn this.col.size();\n\t}\n\tpublic int indexOf(InvasiveDeviceSearchCriteriaVo instance)\n\t{\n\t\treturn col.indexOf(instance);\n\t}\n\tpublic InvasiveDeviceSearchCriteriaVo get(int index)\n\t{\n\t\treturn this.col.get(index);\n\t}\n\tpublic boolean set(int index, InvasiveDeviceSearchCriteriaVo value)\n\t{\n\t\tif(value == null)\n\t\t\treturn false;\n\t\tthis.col.set(index, value);\n\t\treturn true;\n\t}\n\tpublic void remove(InvasiveDeviceSearchCriteriaVo instance)\n\t{\n\t\tif(instance != null)\n\t\t{\n\t\t\tint index = indexOf(instance);\n\t\t\tif(index >= 0)\n\t\t\t\tremove(index);\n\t\t}\n\t}\n\tpublic boolean contains(InvasiveDeviceSearchCriteriaVo instance)\n\t{\n\t\treturn indexOf(instance) >= 0;\n\t}\n\tpublic Object clone()\n\t{\n\t\tInvasiveDeviceSearchCriteriaVoCollection clone = new InvasiveDeviceSearchCriteriaVoCollection();\n\t\t\n\t\tfor(int x = 0; x < this.col.size(); x++)\n\t\t{\n\t\t\tif(this.col.get(x) != null)\n\t\t\t\tclone.col.add((InvasiveDeviceSearchCriteriaVo)this.col.get(x).clone());\n\t\t\telse\n\t\t\t\tclone.col.add(null);\n\t\t}\n\t\t\n\t\treturn clone;\n\t}\n\tpublic boolean isValidated()\n\t{\n\t\tfor(int x = 0; x < col.size(); x++)\n\t\t\tif(!this.col.get(x).isValidated())\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\tpublic String[] validate()\n\t{\n\t\treturn validate(null);\n\t}\n\tpublic String[] validate(String[] existingErrors)\n\t{\n\t\tif(col.size() == 0)\n\t\t\treturn null;\n\t\tjava.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();\n\t\tif(existingErrors != null)\n\t\t{\n\t\t\tfor(int x = 0; x < existingErrors.length; x++)\n\t\t\t{\n\t\t\t\tlistOfErrors.add(existingErrors[x]);\n\t\t\t}\n\t\t}\n\t\tfor(int x = 0; x < col.size(); x++)\n\t\t{\n\t\t\tString[] listOfOtherErrors = this.col.get(x).validate();\n\t\t\tif(listOfOtherErrors != null)\n\t\t\t{\n\t\t\t\tfor(int y = 0; y < listOfOtherErrors.length; y++)\n\t\t\t\t{\n\t\t\t\t\tlistOfErrors.add(listOfOtherErrors[y]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint errorCount = listOfErrors.size();\n\t\tif(errorCount == 0)\n\t\t\treturn null;\n\t\tString[] result = new String[errorCount];\n\t\tfor(int x = 0; x < errorCount; x++)\n\t\t\tresult[x] = (String)listOfErrors.get(x);\n\t\treturn result;\n\t}\n\tpublic InvasiveDeviceSearchCriteriaVoCollection sort()\n\t{\n\t\treturn sort(SortOrder.ASCENDING);\n\t}\n\tpublic InvasiveDeviceSearchCriteriaVoCollection sort(boolean caseInsensitive)\n\t{\n\t\treturn sort(SortOrder.ASCENDING, caseInsensitive);\n\t}\n\tpublic InvasiveDeviceSearchCriteriaVoCollection sort(SortOrder order)\n\t{\n\t\treturn sort(new InvasiveDeviceSearchCriteriaVoComparator(order));\n\t}\n\tpublic InvasiveDeviceSearchCriteriaVoCollection sort(SortOrder order, boolean caseInsensitive)\n\t{\n\t\treturn sort(new InvasiveDeviceSearchCriteriaVoComparator(order, caseInsensitive));\n\t}\n\t@SuppressWarnings(\"unchecked\")\n\tpublic InvasiveDeviceSearchCriteriaVoCollection sort(Comparator comparator)\n\t{\n\t\tCollections.sort(col, comparator);\n\t\treturn this;\n\t}\n\tpublic InvasiveDeviceSearchCriteriaVo[] toArray()\n\t{\n\t\tInvasiveDeviceSearchCriteriaVo[] arr = new InvasiveDeviceSearchCriteriaVo[col.size()];\n\t\tcol.toArray(arr);\n\t\treturn arr;\n\t}\n\tpublic Iterator<InvasiveDeviceSearchCriteriaVo> iterator()\n\t{\n\t\treturn col.iterator();\n\t}\n\t@Override\n\tprotected ArrayList getTypedCollection()\n\t{\n\t\treturn col;\n\t}\n\tprivate class InvasiveDeviceSearchCriteriaVoComparator implements Comparator\n\t{\n\t\tprivate int direction = 1;\n\t\tprivate boolean caseInsensitive = true;\n\t\tpublic InvasiveDeviceSearchCriteriaVoComparator()\n\t\t{\n\t\t\tthis(SortOrder.ASCENDING);\n\t\t}\n\t\tpublic InvasiveDeviceSearchCriteriaVoComparator(SortOrder order)\n\t\t{\n\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\t\tpublic InvasiveDeviceSearchCriteriaVoComparator(SortOrder order, boolean caseInsensitive)\n\t\t{\n\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object obj1, Object obj2)\n\t\t{\n\t\t\tInvasiveDeviceSearchCriteriaVo voObj1 = (InvasiveDeviceSearchCriteriaVo)obj1;\n\t\t\tInvasiveDeviceSearchCriteriaVo voObj2 = (InvasiveDeviceSearchCriteriaVo)obj2;\n\t\t\treturn direction*(voObj1.compareTo(voObj2, this.caseInsensitive));\n\t\t}\n\t\tpublic boolean equals(Object obj)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\tpublic ims.nursing.vo.beans.InvasiveDeviceSearchCriteriaVoBean[] getBeanCollection()\n\t{\n\t\treturn getBeanCollectionArray();\n\t}\n\tpublic ims.nursing.vo.beans.InvasiveDeviceSearchCriteriaVoBean[] getBeanCollectionArray()\n\t{\n\t\tims.nursing.vo.beans.InvasiveDeviceSearchCriteriaVoBean[] result = new ims.nursing.vo.beans.InvasiveDeviceSearchCriteriaVoBean[col.size()];\n\t\tfor(int i = 0; i < col.size(); i++)\n\t\t{\n\t\t\tInvasiveDeviceSearchCriteriaVo vo = ((InvasiveDeviceSearchCriteriaVo)col.get(i));\n\t\t\tresult[i] = (ims.nursing.vo.beans.InvasiveDeviceSearchCriteriaVoBean)vo.getBean();\n\t\t}\n\t\treturn result;\n\t}\n\tpublic static InvasiveDeviceSearchCriteriaVoCollection buildFromBeanCollection(java.util.Collection beans)\n\t{\n\t\tInvasiveDeviceSearchCriteriaVoCollection coll = new InvasiveDeviceSearchCriteriaVoCollection();\n\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tjava.util.Iterator iter = beans.iterator();\n\t\twhile (iter.hasNext())\n\t\t{\n\t\t\tcoll.add(((ims.nursing.vo.beans.InvasiveDeviceSearchCriteriaVoBean)iter.next()).buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static InvasiveDeviceSearchCriteriaVoCollection buildFromBeanCollection(ims.nursing.vo.beans.InvasiveDeviceSearchCriteriaVoBean[] beans)\n\t{\n\t\tInvasiveDeviceSearchCriteriaVoCollection coll = new InvasiveDeviceSearchCriteriaVoCollection();\n", "answers": ["\t\tif(beans == null)"], "length": 773, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "392bc40495cce43e82745cc6f8d7f02004f5da0ce7f5f85a"}
{"input": "", "context": "package com.idevicesinc.sweetblue;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport com.idevicesinc.sweetblue.utils.EmptyIterator;\nimport com.idevicesinc.sweetblue.utils.State;\nclass P_DiskOptionsManager\n{\n\tprivate static final int ACCESS_MODE = Context.MODE_PRIVATE;\n\t//--- DRK > Just adding some salt to these to mitigate any possible conflict.\n\tprivate static enum E_Namespace\n\t{\n\t\tLAST_DISCONNECT(\"sweetblue_16l@{&a}\"),\n\t\tNEEDS_BONDING(\"sweetblue_p59=F%k\"),\n\t\tDEVICE_NAME(\"sweetblue_qurhzpoc\");\n\t\tprivate final String m_key;\n\t\tprivate E_Namespace(final String key)\n\t\t{\n\t\t\tm_key = key;\n\t\t}\n\t\tpublic String key()\n\t\t{\n\t\t\treturn m_key;\n\t\t}\n\t}\n\t\n\tprivate final Context m_context;\n\t\n\tprivate final HashMap<String, Integer> m_inMemoryDb_lastDisconnect = new HashMap<String, Integer>();\n\tprivate final HashMap<String, Boolean> m_inMemoryDb_needsBonding = new HashMap<String, Boolean>();\n\tprivate final HashMap<String, String> m_inMemoryDb_name = new HashMap<String, String>();\n\tprivate final HashMap[] m_inMemoryDbs = new HashMap[E_Namespace.values().length];\n\t\n\tpublic P_DiskOptionsManager(Context context)\n\t{\n\t\tm_context = context;\n\t\tm_inMemoryDbs[E_Namespace.LAST_DISCONNECT.ordinal()] = m_inMemoryDb_lastDisconnect;\n\t\tm_inMemoryDbs[E_Namespace.NEEDS_BONDING.ordinal()] = m_inMemoryDb_needsBonding;\n\t\tm_inMemoryDbs[E_Namespace.DEVICE_NAME.ordinal()] = m_inMemoryDb_name;\n\t\tfinal E_Namespace[] values = E_Namespace.values();\n\t\tfor( int i = 0; i < values.length; i++ )\n\t\t{\n\t\t\tObject ith = m_inMemoryDbs[i];\n\t\t\tif( ith == null )\n\t\t\t{\n\t\t\t\tthrow new Error(\"Expected in-memory DB to be not null\");\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate SharedPreferences prefs(E_Namespace namespace)\n\t{\n\t\tfinal SharedPreferences prefs = m_context.getSharedPreferences(namespace.key(), ACCESS_MODE);\n\t\t\n\t\treturn prefs;\n\t}\n\t\n\tpublic void saveLastDisconnect(final String mac, final State.ChangeIntent changeIntent, final boolean hitDisk)\n\t{\n\t\tfinal int diskValue = State.ChangeIntent.toDiskValue(changeIntent);\n\t\tm_inMemoryDb_lastDisconnect.put(mac, diskValue);\n\t\t\n\t\tif( !hitDisk )  return;\n\t\tprefs(E_Namespace.LAST_DISCONNECT).edit().putInt(mac, diskValue).commit();\n\t}\n\t\n\tpublic State.ChangeIntent loadLastDisconnect(final String mac, final boolean hitDisk)\n\t{\n\t\tfinal Integer value_memory = m_inMemoryDb_lastDisconnect.get(mac);\n\t\t\n\t\tif( value_memory != null )\n\t\t{\n\t\t\tfinal State.ChangeIntent lastDisconnect_memory = State.ChangeIntent.fromDiskValue(value_memory);\n\t\t\t\n\t\t\treturn lastDisconnect_memory;\n\t\t}\n\t\t\n\t\tif( !hitDisk )  return State.ChangeIntent.NULL;\n\t\t\n\t\tfinal SharedPreferences prefs = prefs(E_Namespace.LAST_DISCONNECT);\n\t\t\n\t\tfinal int value_disk = prefs.getInt(mac, State.ChangeIntent.NULL.toDiskValue());\n\t\t\n\t\tfinal State.ChangeIntent lastDisconnect = State.ChangeIntent.fromDiskValue(value_disk);\n\t\t\n\t\treturn lastDisconnect;\n\t}\n\t\n\tpublic void saveNeedsBonding(final String mac, final boolean hitDisk)\n\t{\n\t\tm_inMemoryDb_needsBonding.put(mac, true);\n\t\t\n\t\tif( !hitDisk )  return;\n\t\t\n\t\tprefs(E_Namespace.NEEDS_BONDING).edit().putBoolean(mac, true).commit();\n\t}\n\t\n\tpublic boolean loadNeedsBonding(final String mac, final boolean hitDisk)\n\t{\n\t\tfinal Boolean value_memory = m_inMemoryDb_needsBonding.get(mac);\n\t\t\n\t\tif( value_memory != null )\n\t\t{\n\t\t\treturn value_memory;\n\t\t}\n\t\t\n\t\tif( !hitDisk )  return false;\n\t\t\n\t\tfinal SharedPreferences prefs = prefs(E_Namespace.NEEDS_BONDING);\n\t\t\n\t\tfinal boolean value_disk = prefs.getBoolean(mac, false);\n\t\t\n\t\treturn value_disk;\n\t}\n\tpublic void saveName(final String mac, final String name, final boolean hitDisk)\n\t{\n\t\tfinal String name_override = name != null ? name : \"\";\n\t\tm_inMemoryDb_name.put(mac, name_override);\n\t\tif( !hitDisk )  return;\n\t\tprefs(E_Namespace.DEVICE_NAME).edit().putString(mac, name_override).commit();\n\t}\n\tpublic String loadName(final String mac, final boolean hitDisk)\n\t{\n\t\tfinal String value_memory = m_inMemoryDb_name.get(mac);\n\t\tif( value_memory != null )\n\t\t{\n\t\t\treturn value_memory;\n\t\t}\n\t\tif( !hitDisk )  return null;\n\t\tfinal SharedPreferences prefs = prefs(E_Namespace.DEVICE_NAME);\n\t\tfinal String value_disk = prefs.getString(mac, null);\n\t\treturn value_disk;\n\t}\n\tvoid clear()\n\t{\n\t\tfinal E_Namespace[] values = E_Namespace.values();\n\t\tfor( int i = 0; i < values.length; i++ )\n\t\t{\n\t\t\tfinal SharedPreferences prefs = prefs(values[i]);\n\t\t\tprefs.edit().clear().commit();\n\t\t\tfinal HashMap ith = m_inMemoryDbs[i];\n\t\t\tif( ith != null )\n\t\t\t{\n\t\t\t\tith.clear();\n\t\t\t}\n\t\t}\n\t}\n\tvoid clearName(final String macAddress)\n\t{\n\t\tfinal E_Namespace namespace = E_Namespace.DEVICE_NAME;\n\t\tclearNamespace(macAddress, namespace);\n\t}\n\tprivate void clearNamespace(final String macAddress, final E_Namespace namespace)\n\t{\n\t\tfinal int ordinal = namespace.ordinal();\n\t\tfinal SharedPreferences prefs = prefs(namespace);\n\t\tprefs.edit().remove(macAddress).commit();\n\t\tfinal HashMap ith = m_inMemoryDbs[ordinal];\n\t\tif( ith != null )\n\t\t{\n\t\t\tith.remove(macAddress);\n\t\t}\n\t}\n\tvoid clear(final String macAddress)\n\t{\n\t\tfinal E_Namespace[] values = E_Namespace.values();\n\t\tfor( int i = 0; i < values.length; i++ )\n\t\t{\n\t\t\tclearNamespace(macAddress, values[i]);\n\t\t}\n\t}\n\tIterator<String> getPreviouslyConnectedDevices()\n\t{\n\t\tfinal SharedPreferences prefs = prefs(E_Namespace.LAST_DISCONNECT);\n\t\tMap<String, ?> map = prefs.getAll();\n\t\tif( map != null )\n\t\t{\n\t\t\treturn map.keySet().iterator();\n\t\t}\n\t\telse\n\t\t{\n", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "length": 526, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "6ea1e33ef782f9f0b6368ddf7a3596cceda9cbefe6f4f336"}
{"input": "", "context": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing ServiceStack.ServiceHost;\nusing ServiceStack.ServiceModel.Serialization;\nusing ServiceStack.Text;\nnamespace ServiceStack.Common.Web\n{\n    public class HttpResponseFilter : IContentTypeFilter\n    {\n        private static readonly UTF8Encoding UTF8EncodingWithoutBom = new UTF8Encoding(false);\n        public static HttpResponseFilter Instance = new HttpResponseFilter();\n        public Dictionary<string, StreamSerializerDelegate> ContentTypeSerializers\n            = new Dictionary<string, StreamSerializerDelegate>();\n        public Dictionary<string, ResponseSerializerDelegate> ContentTypeResponseSerializers\n            = new Dictionary<string, ResponseSerializerDelegate>();\n        public Dictionary<string, StreamDeserializerDelegate> ContentTypeDeserializers\n            = new Dictionary<string, StreamDeserializerDelegate>();\n        public HttpResponseFilter()\n        {\n            this.ContentTypeFormats = new Dictionary<string, string>();\n        }\n        public void ClearCustomFilters()\n        {\n            this.ContentTypeFormats = new Dictionary<string, string>();\n            this.ContentTypeSerializers = new Dictionary<string, StreamSerializerDelegate>();\n            this.ContentTypeDeserializers = new Dictionary<string, StreamDeserializerDelegate>();\n        }\n        public Dictionary<string, string> ContentTypeFormats { get; set; }\n        public void Register(string contentType, StreamSerializerDelegate streamSerializer, StreamDeserializerDelegate streamDeserializer)\n        {\n            if (contentType.IsNullOrEmpty())\n                throw new ArgumentNullException(\"contentType\");\n            var parts = contentType.Split('/');\n            var format = parts[parts.Length - 1];\n            this.ContentTypeFormats[format] = contentType;\n            SetContentTypeSerializer(contentType, streamSerializer);\n            SetContentTypeDeserializer(contentType, streamDeserializer);\n        }\n        public void Register(string contentType, ResponseSerializerDelegate responseSerializer,\n                             StreamDeserializerDelegate streamDeserializer)\n        {\n            if (contentType.IsNullOrEmpty())\n                throw new ArgumentNullException(\"contentType\");\n            var parts = contentType.Split('/');\n            var format = parts[parts.Length - 1];\n            this.ContentTypeFormats[format] = contentType;\n            this.ContentTypeResponseSerializers[contentType] = responseSerializer;\n            SetContentTypeDeserializer(contentType, streamDeserializer);\n        }\n        public void SetContentTypeSerializer(string contentType, StreamSerializerDelegate streamSerializer)\n        {\n            this.ContentTypeSerializers[contentType] = streamSerializer;\n        }\n        public void SetContentTypeDeserializer(string contentType, StreamDeserializerDelegate streamDeserializer)\n        {\n            this.ContentTypeDeserializers[contentType] = streamDeserializer;\n        }\n        public string Serialize(string contentType, object response)\n        {\n            switch (contentType)\n            {\n                case ContentType.Xml:\n                    return XmlSerializer.SerializeToString(response);\n                case ContentType.Json:\n                    return JsonDataContractSerializer.Instance.SerializeToString(response);\n                case ContentType.Jsv:\n                    return TypeSerializer.SerializeToString(response);\n                default:\n                    throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            }\n        }\n        public byte[] SerializeToBytes(IRequestContext requestContext, object response)\n        {\n            var contentType = requestContext.ResponseContentType;\n            StreamSerializerDelegate responseStreamWriter;\n            if (this.ContentTypeSerializers.TryGetValue(contentType, out responseStreamWriter) ||\n                this.ContentTypeSerializers.TryGetValue(ContentType.GetRealContentType(contentType), out responseStreamWriter))\n            {\n                using (var ms = new MemoryStream())\n                {\n                    responseStreamWriter(requestContext, response, ms);\n                    ms.Position = 0;\n                    return ms.ToArray();\n                }\n            }\n            ResponseSerializerDelegate responseWriter;\n            if (this.ContentTypeResponseSerializers.TryGetValue(contentType, out responseWriter) ||\n                this.ContentTypeResponseSerializers.TryGetValue(ContentType.GetRealContentType(contentType), out responseWriter))\n            {\n                using (var ms = new MemoryStream())\n                {\n                    var httpRes = new HttpResponseStreamWrapper(ms);\n                    responseWriter(requestContext, response, httpRes);\n                    ms.Position = 0;\n                    return ms.ToArray();\n                }\n            }\n            var contentTypeAttr = ContentType.GetEndpointAttributes(contentType);\n            switch (contentTypeAttr)\n            {\n                case EndpointAttributes.Xml:\n                    return XmlSerializer.SerializeToString(response).ToUtf8Bytes();\n                case EndpointAttributes.Json:\n                    return JsonDataContractSerializer.Instance.SerializeToString(response).ToUtf8Bytes();\n                case EndpointAttributes.Jsv:\n                    return TypeSerializer.SerializeToString(response).ToUtf8Bytes();\n            }\n            throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n        }\n        public string SerializeToString(IRequestContext requestContext, object response)\n        {\n            var contentType = requestContext.ResponseContentType;\n            StreamSerializerDelegate responseStreamWriter;\n            if (this.ContentTypeSerializers.TryGetValue(contentType, out responseStreamWriter) ||\n                this.ContentTypeSerializers.TryGetValue(ContentType.GetRealContentType(contentType), out responseStreamWriter))\n            {\n                using (var ms = new MemoryStream())\n                {\n                    responseStreamWriter(requestContext, response, ms);\n                    ms.Position = 0;\n                    var result = new StreamReader(ms, UTF8EncodingWithoutBom).ReadToEnd();\n                    return result;\n                }\n            }\n            ResponseSerializerDelegate responseWriter;\n            if (this.ContentTypeResponseSerializers.TryGetValue(contentType, out responseWriter) ||\n                this.ContentTypeResponseSerializers.TryGetValue(ContentType.GetRealContentType(contentType), out responseWriter))\n            {\n                using (var ms = new MemoryStream())\n                {\n                    var httpRes = new HttpResponseStreamWrapper(ms);\n                    responseWriter(requestContext, response, httpRes);\n                    ms.Position = 0;\n                    var result = new StreamReader(ms, UTF8EncodingWithoutBom).ReadToEnd();\n                    return result;\n                }\n            }\n            var contentTypeAttr = ContentType.GetEndpointAttributes(contentType);\n            switch (contentTypeAttr)\n            {\n                case EndpointAttributes.Xml:\n                    return XmlSerializer.SerializeToString(response);\n                case EndpointAttributes.Json:\n                    return JsonDataContractSerializer.Instance.SerializeToString(response);\n                case EndpointAttributes.Jsv:\n                    return TypeSerializer.SerializeToString(response);\n            }\n            throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n        }\n        public void SerializeToStream(IRequestContext requestContext, object response, Stream responseStream)\n        {\n            var contentType = requestContext.ResponseContentType;\n            var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            var httpRes = new HttpResponseStreamWrapper(responseStream);\n            serializer(requestContext, response, httpRes);\n        }\n        public void SerializeToResponse(IRequestContext requestContext, object response, IHttpResponse httpResponse)\n        {\n            var contentType = requestContext.ResponseContentType;\n", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "length": 488, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "9f424a7d645e6ec5a11ebf96bec9e38738764ba0a9b8d063"}
{"input": "", "context": "using CRMPluginUtils;\nusing Microsoft.Crm.Sdk;\nusing Microsoft.Crm.Sdk.Messages;\nusing Microsoft.Xrm.Sdk;\nusing Microsoft.Xrm.Sdk.Client;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nnamespace MicrosoftDynamicsCRMPlugin\n{\n  public class DynamicsSession\n  {\n    private ConfigurationManager configurationManager = new ConfigurationManager(\"3CXCRMUser.ini\");\n    private LoginMgr loginMgr;\n    private OrganizationServiceProxy serviceProxy = null;\n    private Guid currentUserId = Guid.Empty;\n    private bool isActive = false;\n    private string createUrl(string id, ContactTypes contactType, string callNumberFlag = null, string newCase = null)\n    {\n      string currentServiceEndpointUri = serviceProxy.ServiceManagement.CurrentServiceEndpoint.Address.Uri.AbsoluteUri;\n      int xrmServicesIndex = currentServiceEndpointUri.IndexOf(\"/XRMServices\", StringComparison.InvariantCultureIgnoreCase);\n      string url = xrmServicesIndex < 0 ? currentServiceEndpointUri : currentServiceEndpointUri.Substring(0, xrmServicesIndex);\n        switch (contactType)\n        {\n        case ContactTypes.Account:\n            url += String.Format(\"/main.aspx?etn=account&id={{{0}}}&pagetype=entityrecord\", id);\n            break;\n        case ContactTypes.Contact:\n            url += String.Format(\"/main.aspx?etn=contact&id={{{0}}}&pagetype=entityrecord\", id);\n            break;\n        case ContactTypes.Lead:\n            if (callNumberFlag != null)\n            {\n                url += String.Format(\"/main.aspx?etn=phonecall&id={{{0}}}&pagetype=entityrecord\", id);\n                break;\n            }\n            else if (newCase != null)\n            {\n                url += String.Format(\"/main.aspx?etn=incident&id={{{0}}}&pagetype=entityrecord\", id);\n                break;\n            }\n            else\n            {\n                LogHelper.Log(Environment.SpecialFolder.ApplicationData, \"MicrosoftDynamicsCRM.log\", \"Something happened generating the URL, opening lead\");\n                url += String.Format(\"/main.aspx?etn=lead&id={{{0}}}&pagetype=entityrecord\", id);\n                break;\n            }\n        default:\n            break;\n        }\n      return url;\n    }\n    private void launchUrl(string url)\n    {\n      if (configurationManager.GetValue(\"Microsoft Dynamics Plug-in\", \"UseDefaultBrowser\", \"True\") == \"True\")\n        Process.Start(url);\n      else\n      {\n        string customBrowserPath = configurationManager.GetValue(\"Microsoft Dynamics Plug-in\", \"CustomBrowser\", \"\");\n        if (String.IsNullOrEmpty(customBrowserPath))\n          throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.CustomBrowserIsEmpty\"));\n        Process.Start(customBrowserPath, url);\n      }\n    }\n    private void connectivityTest()\n    {\n      if (serviceProxy == null)\n        throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.NotLoggedIn\"));\n      // Perform a dummy request\n      WhoAmIResponse whoResp = (WhoAmIResponse)serviceProxy.Execute(new WhoAmIRequest());\n      currentUserId = whoResp.UserId;\n    }\n    private ContactInfo createNewContactRecord(string contactNumber)\n    {\n      try\n      {\n        if (configurationManager.GetValue(\"Microsoft Dynamics Plug-in\", \"CreateNewRecordType\", \"Contact\") == \"Contact\")\n        {\n          Microsoft.Crm.Sdk.Contact contactItem = new Microsoft.Crm.Sdk.Contact();\n          contactItem.Telephone1 = contactNumber;\n          contactItem.Description = \"Contact created with 3cx plugin\";\n          Guid newContactId = serviceProxy.Create(contactItem);\n          launchUrl(createUrl(newContactId.ToString(), ContactTypes.Contact));\n          return new ContactInfo(newContactId.ToString(), contactNumber, ContactTypes.Contact);\n        }\n        else\n        {\n          Microsoft.Crm.Sdk.Lead leadItem = new Microsoft.Crm.Sdk.Lead();\n          leadItem.Telephone1 = contactNumber;\n          Guid newLeadId = serviceProxy.Create(leadItem);\n          launchUrl(createUrl(newLeadId.ToString(), ContactTypes.Lead));\n          return new ContactInfo(newLeadId.ToString(), contactNumber, ContactTypes.Lead);\n        }\n      }\n      catch (System.ServiceModel.Security.ExpiredSecurityTokenException)\n      {\n        throw;\n      }\n      catch (Exception exc)\n      {\n        throw new ApplicationException(String.Format(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.CreatingContact\"), ErrorHelper.GetErrorDescription(exc)));\n      }\n    }\n    public DynamicsSession()\n    {\n\t\t     var ver = GetVersion();\n            if(!string.IsNullOrEmpty(ver))\n                LogHelper.Log(Environment.SpecialFolder.ApplicationData, \"MicrosoftDynamicsCRM.log\", \"Plugin Version: \" +  ver);\n    }\n\t\n\tpublic string GetVersion()\n\t{\n\t  try\n\t  {\n\t\t\tvar path = AppDomain.CurrentDomain.BaseDirectory + @\"DotNetScripts\\MicrosoftDynamicsCRM\\VERSION\";\n\t\t\tLogHelper.Log(Environment.SpecialFolder.ApplicationData, \"MicrosoftDynamicsCRM.log\", path);\n\t\t\treturn System.IO.File.ReadAllText(path);\n\t\t}\n\t  catch (Exception exc)\n\t  {\n\t\t\tLogHelper.Log(Environment.SpecialFolder.ApplicationData, \"MicrosoftDynamicsCRM.log\", \"VERSION not found\");\n\t  }\n\t\treturn string.Empty;\n\t}\n    public bool IsActive\n    {\n      get { return isActive; }\n    }\n    public void Login(LoginMgr loginMgr)\n    {\n      this.loginMgr = loginMgr;\n      this.serviceProxy = loginMgr.Login();\n      this.serviceProxy.EnableProxyTypes();\n      this.isActive = true;\n      connectivityTest();\n    }\n    \n    public void Logout()\n    {\n      if (serviceProxy != null)\n      {\n        serviceProxy.Dispose();\n        serviceProxy = null;\n        isActive = false;\n      }\n    }\n    \n    public string GetContactNumberByContactId(string phoneType, string contactId)\n    {\n      if (serviceProxy == null)\n        throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.NotLoggedIn\"));\n      ContactFinder contactFinder = new ContactFinder(serviceProxy);\n      ContactInfo contactInfo = contactFinder.GetContactInformationByContactId(phoneType, contactId);\n      return contactInfo != null ? contactInfo.Number : null;\n    }\n    public string GetContactNumberByLeadId(string phoneType, string leadId)\n    {\n      if (serviceProxy == null)\n        throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.NotLoggedIn\"));\n      ContactFinder contactFinder = new ContactFinder(serviceProxy);\n      ContactInfo contactInfo = contactFinder.GetContactInformationByLeadId(phoneType, leadId);\n      return contactInfo != null ? contactInfo.Number : null;\n    }\n    public string GetContactNumberByAccountId(string phoneType, string accountId)\n    {\n      if (serviceProxy == null)\n        throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.NotLoggedIn\"));\n      ContactFinder contactFinder = new ContactFinder(serviceProxy);\n      ContactInfo contactInfo = contactFinder.GetContactInformationByAccountId(phoneType, accountId);\n      return contactInfo != null ? contactInfo.Number : null;\n    }\n    public ContactInfo ShowContactRecord(string contactNumber, bool createIfNotFound)\n    {\n      if (serviceProxy == null)\n        throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.NotLoggedIn\"));\n      ContactFinder contactFinder = new ContactFinder(serviceProxy);\n      ContactInfo contactInfo = contactFinder.GetContactInformation(contactNumber, 4);\n      if (contactInfo == null) contactInfo = contactFinder.GetContactInformation(contactNumber, 2);\n      bool OpenCaseNotContact = configurationManager.GetValue(\"Microsoft Dynamics Plug-in\", \"OpenCaseNotContact\", \"False\") == \"True\";\n        if (OpenCaseNotContact)\n        {//creating new case here, need to figure out the crm sdk for create case\n         //thinking case needs to be created here\n            string CaseNumberGuid = CreateCase(contactInfo).ToString();\n            //then launch the record\n            launchUrl(createUrl(CaseNumberGuid, ContactTypes.Lead, null, \"NotNull\")); //passing notnull in third value to trigger case creation in createurl, contactnumber that will be passed in this instance will be the guid for the new case created\n            return contactInfo;\n        }\n        else\n        {\n            if (contactInfo == null)\n            {\n                if (createIfNotFound)\n                    return createNewContactRecord(contactNumber);\n                else\n                    throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.ContactNotFound\"));\n            }\n            else\n            {\n                launchUrl(createUrl(contactInfo.Id, contactInfo.Type));\n                return contactInfo;\n            }\n        }\n    }\n    public void ShowPhoneCallRecord(Guid CallNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.NotLoggedIn\"));\n        if (CallNumber == null)\n        {\n                LogHelper.Log(Environment.SpecialFolder.ApplicationData, \"MicrosoftDynamicsCRM.log\", \"Call not found\");\n        }\n        else\n        {\n", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "length": 648, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "dc6be0ef58abc3144c039a40c84dddabd1490e8457051e1c"}
{"input": "", "context": "package org.intermine.sql.query;\n/*\n * Copyright (C) 2002-2014 FlyMine\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  See the LICENSE file for more\n * information or http://www.gnu.org/copyleft/lesser.html.\n *\n */\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n/**\n * Subclass of ExplainResult specific to PostgreSQL.\n *\n * @author Matthew Wakeling\n * @author Andrew Varley\n * @version 1.0\n */\npublic class PostgresExplainResult extends ExplainResult\n{\n    /*\n     * Fields inherited from ExplainResult:\n     * protected long rows, start, complete, width, estimatedRows\n     */\n    private String explainText = null;\n    /**\n     * Constructs an instance of PostgresExplainResult without any data.\n     *\n     */\n    protected PostgresExplainResult() {\n    }\n    /**\n     * Constructs an instance of PostgresExplainResult for a given Query and\n     * database Connection.\n     *\n     * @param query the org.intermine.sql.query.Query to be explained\n     * @param database a java.sql.Connection by which to access the database\n     * @throws SQLException if a database error occurs\n     * @throws NullPointerException if either query or database are null\n     */\n    public PostgresExplainResult(Query query, Connection database) throws SQLException {\n        this(query.getSQLString(), database);\n    }\n    /**\n     * Constructs an instance of PostgresExplainResult for a given Query String and database\n     * Connection.\n     *\n     * @param query the String query to be explained\n     * @param database a java.sql.Connection by which to access the database\n     * @throws SQLException if a database error occurs\n     * @throws NullPointerException if either query or database are null\n     */\n    public PostgresExplainResult(String query, Connection database) throws SQLException {\n        if ((query == null) || (database == null)) {\n            throw new NullPointerException(\"Arguments cannot be null\");\n        }\n        Statement s = database.createStatement();\n        if (!query.toUpperCase().startsWith(\"EXPLAIN \")) {\n            query = \"explain \" + query;\n        }\n        try {\n            s.execute(query);\n            retrieveExplainString(s);\n            s.close();\n        } catch (SQLException e) {\n            SQLException e2 = new SQLException(\"Error running query \\\"\" + query + \"\\\"\");\n            e2.initCause(e);\n            throw e2;\n        }\n    }\n    /**\n     * Constructs an instance of ExplainResult given a PreparedStatement\n     * object.  Assumes that sql string already has EXPLAIN at beginning\n     *\n     * @param stmt the PreparedStatement to be explained\n     * @throws SQLException if the query cannot be explained by that database\n     */\n    public PostgresExplainResult(PreparedStatement stmt) throws SQLException {\n        if (stmt == null) {\n            throw (new NullPointerException(\"PreparedStatement argument cannot be null\"));\n        }\n        Connection database = stmt.getConnection();\n        if (database == null) {\n            throw (new NullPointerException(\"Failed to retrieve Connection\"\n                                            + \" from PreparedStatement\"));\n        }\n        stmt.execute();\n        retrieveExplainString(stmt);\n        stmt.close();\n    }\n    /**\n     * Returns the text of the explain result, in human readable form.\n     *\n     * @return a String\n     */\n    public String getExplainText() {\n        return explainText;\n    }\n    /**\n     * Retrieve EXPLAIN String from post-7.3 databases\n     *\n     * @param stmt the Statement that ran the EXPLAIN\n     * @throws SQLException if a database error occurs\n     */\n    protected void retrieveExplainString(Statement stmt) throws SQLException {\n        ResultSet results = stmt.getResultSet();\n        if ((results == null) || !results.next()) {\n            throw (new SQLException(\"Failed to get a valid explain string from database\"));\n        }\n        String text = results.getString(1);\n        try {\n            parseWarningString(text);\n        } catch (RuntimeException e) {\n            throw (new SQLException(\"Error parsing EXPLAIN string: \" + e));\n        }\n        StringBuffer explainTextBuffer = new StringBuffer(text).append(\"\\n\");\n        while (results.next()) {\n            explainTextBuffer.append(results.getString(1)).append(\"\\n\");\n        }\n        explainText = explainTextBuffer.toString();\n        if (stmt.getMoreResults()) {\n            throw new SQLException(\"Database returned more than ResultSet while EXPLAINing\");\n        }\n    }\n    /**\n     * Parses the warning returned by the database into statistics for the\n     * ExplainResult object.\n     *\n     * @param text the String returned by the database\n     * @throws IllegalArgumentException if text is not a valid EXPLAIN result\n     * @throws NullPointerException if text is null\n     */\n    void parseWarningString(String text) {\n        int nextToken = text.indexOf(\"(cost=\") + 6;\n        if (nextToken < 6) {\n            throw (new IllegalArgumentException(\"Invalid EXPLAIN string: no \\\"(cost=\\\" bad string: \"\n                    + text));\n        }\n        int endOfString = text.indexOf(')', nextToken);\n        if (endOfString < 0) {\n            throw (new IllegalArgumentException(\"Invalid EXPLAIN string: no \\\")\\\" bad string \"\n                    + text));\n        }\n        text = text.substring(nextToken, endOfString);\n        nextToken = text.indexOf(\"..\");\n        if (nextToken < 0) {\n            throw (new IllegalArgumentException(\"Invalid EXPLAIN string: no \\\"..\\\" bad string: \"\n                    + text));\n        }\n        String toParse = text.substring(0, text.indexOf('.'))\n            + text.substring(text.indexOf('.') + 1, text.indexOf('.') + 2);\n        try {\n            start = Long.parseLong(toParse);\n        } catch (NumberFormatException e) {\n            start = Long.MAX_VALUE;\n        }\n        text = text.substring(nextToken + 2);\n        nextToken = text.indexOf(\" rows=\");\n        if (nextToken < 0) {\n            throw (new IllegalArgumentException(\"Invalid EXPLAIN string: no \\\" rows=\\\"\"));\n        }\n        toParse = text.substring(0, text.indexOf('.'))\n            + text.substring(text.indexOf('.') + 1, text.indexOf('.') + 2);\n        try {\n            complete = Long.parseLong(toParse);\n        } catch (NumberFormatException e) {\n            complete = Long.MAX_VALUE;\n        }\n        text = text.substring(nextToken + 6);\n        nextToken = text.indexOf(\" width=\");\n        if (nextToken < 0) {\n            throw (new IllegalArgumentException(\"Invalid EXPLAIN string: no \\\" width=\\\" bad string:\"\n                    + text));\n        }\n        try {\n            rows = Long.parseLong(text.substring(0, nextToken));\n        } catch (NumberFormatException e) {\n            rows = Long.MAX_VALUE;\n        }\n        estimatedRows = rows;\n", "answers": ["        text = text.substring(nextToken + 7);"], "length": 772, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "325d8cd412858d285318eb3b241589512f014a8dd81c9dca"}
{"input": "", "context": "package org.netlib.lapack;\nimport org.netlib.blas.Dcopy;\nimport org.netlib.err.Xerbla;\nimport org.netlib.util.doubleW;\nimport org.netlib.util.intW;\npublic final class Dlasda\n{\n  public static void dlasda(int paramInt1, int paramInt2, int paramInt3, int paramInt4, double[] paramArrayOfDouble1, int paramInt5, double[] paramArrayOfDouble2, int paramInt6, double[] paramArrayOfDouble3, int paramInt7, int paramInt8, double[] paramArrayOfDouble4, int paramInt9, int[] paramArrayOfInt1, int paramInt10, double[] paramArrayOfDouble5, int paramInt11, double[] paramArrayOfDouble6, int paramInt12, double[] paramArrayOfDouble7, int paramInt13, double[] paramArrayOfDouble8, int paramInt14, int[] paramArrayOfInt2, int paramInt15, int[] paramArrayOfInt3, int paramInt16, int paramInt17, int[] paramArrayOfInt4, int paramInt18, double[] paramArrayOfDouble9, int paramInt19, double[] paramArrayOfDouble10, int paramInt20, double[] paramArrayOfDouble11, int paramInt21, double[] paramArrayOfDouble12, int paramInt22, int[] paramArrayOfInt5, int paramInt23, intW paramintW)\n  {\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int m = 0;\n    int n = 0;\n    int i1 = 0;\n    int i2 = 0;\n    int i3 = 0;\n    int i4 = 0;\n    int i5 = 0;\n    int i6 = 0;\n    int i7 = 0;\n    int i8 = 0;\n    int i9 = 0;\n    int i10 = 0;\n    int i11 = 0;\n    intW localintW1 = new intW(0);\n    int i12 = 0;\n    int i13 = 0;\n    int i14 = 0;\n    int i15 = 0;\n    int i16 = 0;\n    int i17 = 0;\n    intW localintW2 = new intW(0);\n    int i18 = 0;\n    int i19 = 0;\n    int i20 = 0;\n    int i21 = 0;\n    int i22 = 0;\n    int i23 = 0;\n    int i24 = 0;\n    int i25 = 0;\n    int i26 = 0;\n    int i27 = 0;\n    int i28 = 0;\n    int i29 = 0;\n    doubleW localdoubleW1 = new doubleW(0.0D);\n    doubleW localdoubleW2 = new doubleW(0.0D);\n    paramintW.val = 0;\n    if ((paramInt1 >= 0 ? 0 : 1) == 0) {}\n    if (((paramInt1 <= 1 ? 0 : 1) == 0 ? 0 : 1) != 0)\n    {\n      paramintW.val = -1;\n    }\n    else if ((paramInt2 >= 3 ? 0 : 1) != 0)\n    {\n      paramintW.val = -2;\n    }\n    else if ((paramInt3 >= 0 ? 0 : 1) != 0)\n    {\n      paramintW.val = -3;\n    }\n    else\n    {\n      if ((paramInt4 >= 0 ? 0 : 1) == 0) {}\n      if (((paramInt4 <= 1 ? 0 : 1) == 0 ? 0 : 1) != 0) {\n        paramintW.val = -4;\n      } else if ((paramInt8 >= paramInt3 + paramInt4 ? 0 : 1) != 0) {\n        paramintW.val = -8;\n      } else if ((paramInt17 >= paramInt3 ? 0 : 1) != 0) {\n        paramintW.val = -17;\n      }\n    }\n    if ((paramintW.val == 0 ? 0 : 1) != 0)\n    {\n      Xerbla.xerbla(\"DLASDA\", -paramintW.val);\n      return;\n    }\n    i10 = paramInt3 + paramInt4;\n    if ((paramInt3 > paramInt2 ? 0 : 1) != 0)\n    {\n      if ((paramInt1 != 0 ? 0 : 1) != 0) {\n        Dlasdq.dlasdq(\"U\", paramInt4, paramInt3, 0, 0, 0, paramArrayOfDouble1, paramInt5, paramArrayOfDouble2, paramInt6, paramArrayOfDouble4, paramInt9, paramInt8, paramArrayOfDouble3, paramInt7, paramInt8, paramArrayOfDouble3, paramInt7, paramInt8, paramArrayOfDouble12, paramInt22, paramintW);\n      } else {\n        Dlasdq.dlasdq(\"U\", paramInt4, paramInt3, i10, paramInt3, 0, paramArrayOfDouble1, paramInt5, paramArrayOfDouble2, paramInt6, paramArrayOfDouble4, paramInt9, paramInt8, paramArrayOfDouble3, paramInt7, paramInt8, paramArrayOfDouble3, paramInt7, paramInt8, paramArrayOfDouble12, paramInt22, paramintW);\n      }\n      return;\n    }\n    i2 = 1;\n    i13 = i2 + paramInt3;\n    i14 = i13 + paramInt3;\n    m = i14 + paramInt3;\n    i4 = m + paramInt3;\n    i11 = 0;\n    i21 = 0;\n    i24 = paramInt2 + 1;\n    i26 = 1;\n    i28 = i26 + i10;\n    i22 = i28 + i10;\n    i23 = i22 + i24 * i24;\n    Dlasdt.dlasdt(paramInt3, localintW2, localintW1, paramArrayOfInt5, i2 - 1 + paramInt23, paramArrayOfInt5, i13 - 1 + paramInt23, paramArrayOfInt5, i14 - 1 + paramInt23, paramInt2);\n    i12 = (localintW1.val + 1) / 2;\n    i = i12;\n    int i31;\n    for (int i30 = localintW1.val - i12 + 1; i30 > 0; i30--)\n    {\n      j = i - 1;\n      k = paramArrayOfInt5[(i2 + j - 1 + paramInt23)];\n      i15 = paramArrayOfInt5[(i13 + j - 1 + paramInt23)];\n      i17 = i15 + 1;\n      i18 = paramArrayOfInt5[(i14 + j - 1 + paramInt23)];\n      i16 = k - i15;\n      i19 = k + 1;\n      n = m + i16 - 2;\n      i27 = i26 + i16 - 1;\n      i29 = i28 + i16 - 1;\n      i25 = 1;\n      if ((paramInt1 != 0 ? 0 : 1) != 0)\n      {\n        Dlaset.dlaset(\"A\", i17, i17, 0.0D, 1.0D, paramArrayOfDouble12, i22 - 1 + paramInt22, i24);\n        Dlasdq.dlasdq(\"U\", i25, i15, i17, i21, i11, paramArrayOfDouble1, i16 - 1 + paramInt5, paramArrayOfDouble2, i16 - 1 + paramInt6, paramArrayOfDouble12, i22 - 1 + paramInt22, i24, paramArrayOfDouble12, i23 - 1 + paramInt22, i15, paramArrayOfDouble12, i23 - 1 + paramInt22, i15, paramArrayOfDouble12, i23 - 1 + paramInt22, paramintW);\n        i3 = i22 + i15 * i24;\n        Dcopy.dcopy(i17, paramArrayOfDouble12, i22 - 1 + paramInt22, 1, paramArrayOfDouble12, i27 - 1 + paramInt22, 1);\n        Dcopy.dcopy(i17, paramArrayOfDouble12, i3 - 1 + paramInt22, 1, paramArrayOfDouble12, i29 - 1 + paramInt22, 1);\n      }\n      else\n      {\n        Dlaset.dlaset(\"A\", i15, i15, 0.0D, 1.0D, paramArrayOfDouble3, i16 - 1 + (1 - 1) * paramInt8 + paramInt7, paramInt8);\n        Dlaset.dlaset(\"A\", i17, i17, 0.0D, 1.0D, paramArrayOfDouble4, i16 - 1 + (1 - 1) * paramInt8 + paramInt9, paramInt8);\n        Dlasdq.dlasdq(\"U\", i25, i15, i17, i15, i11, paramArrayOfDouble1, i16 - 1 + paramInt5, paramArrayOfDouble2, i16 - 1 + paramInt6, paramArrayOfDouble4, i16 - 1 + (1 - 1) * paramInt8 + paramInt9, paramInt8, paramArrayOfDouble3, i16 - 1 + (1 - 1) * paramInt8 + paramInt7, paramInt8, paramArrayOfDouble3, i16 - 1 + (1 - 1) * paramInt8 + paramInt7, paramInt8, paramArrayOfDouble12, i22 - 1 + paramInt22, paramintW);\n        Dcopy.dcopy(i17, paramArrayOfDouble4, i16 - 1 + (1 - 1) * paramInt8 + paramInt9, 1, paramArrayOfDouble12, i27 - 1 + paramInt22, 1);\n        Dcopy.dcopy(i17, paramArrayOfDouble4, i16 - 1 + (i17 - 1) * paramInt8 + paramInt9, 1, paramArrayOfDouble12, i29 - 1 + paramInt22, 1);\n      }\n      if ((paramintW.val == 0 ? 0 : 1) != 0) {\n        return;\n      }\n      i5 = 1;\n      for (i31 = i15 - 1 + 1; i31 > 0; i31--)\n      {\n        paramArrayOfInt5[(n + i5 - 1 + paramInt23)] = i5;\n        i5 += 1;\n      }\n      if ((i != localintW1.val ? 0 : 1) != 0) {}\n      if (((paramInt4 != 0 ? 0 : 1) != 0 ? 1 : 0) != 0) {\n        i25 = 0;\n      } else {\n        i25 = 1;\n      }\n      n += i17;\n      i27 += i17;\n      i29 += i17;\n      i20 = i18 + i25;\n      if ((paramInt1 != 0 ? 0 : 1) != 0)\n      {\n        Dlaset.dlaset(\"A\", i20, i20, 0.0D, 1.0D, paramArrayOfDouble12, i22 - 1 + paramInt22, i24);\n        Dlasdq.dlasdq(\"U\", i25, i18, i20, i21, i11, paramArrayOfDouble1, i19 - 1 + paramInt5, paramArrayOfDouble2, i19 - 1 + paramInt6, paramArrayOfDouble12, i22 - 1 + paramInt22, i24, paramArrayOfDouble12, i23 - 1 + paramInt22, i18, paramArrayOfDouble12, i23 - 1 + paramInt22, i18, paramArrayOfDouble12, i23 - 1 + paramInt22, paramintW);\n        i3 = i22 + (i20 - 1) * i24;\n        Dcopy.dcopy(i20, paramArrayOfDouble12, i22 - 1 + paramInt22, 1, paramArrayOfDouble12, i27 - 1 + paramInt22, 1);\n        Dcopy.dcopy(i20, paramArrayOfDouble12, i3 - 1 + paramInt22, 1, paramArrayOfDouble12, i29 - 1 + paramInt22, 1);\n      }\n      else\n      {\n        Dlaset.dlaset(\"A\", i18, i18, 0.0D, 1.0D, paramArrayOfDouble3, i19 - 1 + (1 - 1) * paramInt8 + paramInt7, paramInt8);\n        Dlaset.dlaset(\"A\", i20, i20, 0.0D, 1.0D, paramArrayOfDouble4, i19 - 1 + (1 - 1) * paramInt8 + paramInt9, paramInt8);\n        Dlasdq.dlasdq(\"U\", i25, i18, i20, i18, i11, paramArrayOfDouble1, i19 - 1 + paramInt5, paramArrayOfDouble2, i19 - 1 + paramInt6, paramArrayOfDouble4, i19 - 1 + (1 - 1) * paramInt8 + paramInt9, paramInt8, paramArrayOfDouble3, i19 - 1 + (1 - 1) * paramInt8 + paramInt7, paramInt8, paramArrayOfDouble3, i19 - 1 + (1 - 1) * paramInt8 + paramInt7, paramInt8, paramArrayOfDouble12, i22 - 1 + paramInt22, paramintW);\n        Dcopy.dcopy(i20, paramArrayOfDouble4, i19 - 1 + (1 - 1) * paramInt8 + paramInt9, 1, paramArrayOfDouble12, i27 - 1 + paramInt22, 1);\n        Dcopy.dcopy(i20, paramArrayOfDouble4, i19 - 1 + (i20 - 1) * paramInt8 + paramInt9, 1, paramArrayOfDouble12, i29 - 1 + paramInt22, 1);\n      }\n      if ((paramintW.val == 0 ? 0 : 1) != 0) {\n        return;\n      }\n      i5 = 1;\n      for (i31 = i18 - 1 + 1; i31 > 0; i31--)\n      {\n        paramArrayOfInt5[(n + i5 - 1 + paramInt23)] = i5;\n        i5 += 1;\n      }\n      i += 1;\n    }\n    i5 = (int)Math.pow(2, localintW2.val);\n    i8 = localintW2.val;\n    for (int i30 = (1 - localintW2.val + -1) / -1; i30 > 0; i30--)\n    {\n      i9 = i8 * 2 - 1;\n      if ((i8 != 1 ? 0 : 1) != 0)\n      {\n        i6 = 1;\n        i7 = 1;\n      }\n      else\n      {\n        i6 = (int)Math.pow(2, i8 - 1);\n        i7 = 2 * i6 - 1;\n      }\n      i = i6;\n      for (i31 = i7 - i6 + 1; i31 > 0; i31--)\n      {\n        i1 = i - 1;\n        k = paramArrayOfInt5[(i2 + i1 - 1 + paramInt23)];\n        i15 = paramArrayOfInt5[(i13 + i1 - 1 + paramInt23)];\n        i18 = paramArrayOfInt5[(i14 + i1 - 1 + paramInt23)];\n        i16 = k - i15;\n        i19 = k + 1;\n", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "length": 1437, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "e50ed194324643c764552efee061210fc51ecec8d54a5a64"}
{"input": "", "context": "/*\n * Copyright (c) 2010, 2016, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage sun.security.util;\nimport java.security.CryptoPrimitive;\nimport java.security.AlgorithmParameters;\nimport java.security.Key;\nimport java.security.cert.CertPathValidatorException;\nimport java.security.cert.CertPathValidatorException.BasicReason;\nimport java.security.cert.X509Certificate;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TimeZone;\nimport java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n/**\n * Algorithm constraints for disabled algorithms property\n *\n * See the \"jdk.certpath.disabledAlgorithms\" specification in java.security\n * for the syntax of the disabled algorithm string.\n */\npublic class DisabledAlgorithmConstraints extends AbstractAlgorithmConstraints {\n    private static final Debug debug = Debug.getInstance(\"certpath\");\n    // the known security property, jdk.certpath.disabledAlgorithms\n    public static final String PROPERTY_CERTPATH_DISABLED_ALGS =\n            \"jdk.certpath.disabledAlgorithms\";\n    // the known security property, jdk.tls.disabledAlgorithms\n    public static final String PROPERTY_TLS_DISABLED_ALGS =\n            \"jdk.tls.disabledAlgorithms\";\n    private final String[] disabledAlgorithms;\n    private final Constraints algorithmConstraints;\n    /**\n     * Initialize algorithm constraints with the specified security property.\n     *\n     * @param propertyName the security property name that define the disabled\n     *        algorithm constraints\n     */\n    public DisabledAlgorithmConstraints(String propertyName) {\n        this(propertyName, new AlgorithmDecomposer());\n    }\n    public DisabledAlgorithmConstraints(String propertyName,\n            AlgorithmDecomposer decomposer) {\n        super(decomposer);\n        disabledAlgorithms = getAlgorithms(propertyName);\n        algorithmConstraints = new Constraints(disabledAlgorithms);\n    }\n    /*\n     * This only checks if the algorithm has been completely disabled.  If\n     * there are keysize or other limit, this method allow the algorithm.\n     */\n    @Override\n    public final boolean permits(Set<CryptoPrimitive> primitives,\n            String algorithm, AlgorithmParameters parameters) {\n        if (primitives == null || primitives.isEmpty()) {\n            throw new IllegalArgumentException(\n                        \"No cryptographic primitive specified\");\n        }\n        return checkAlgorithm(disabledAlgorithms, algorithm, decomposer);\n    }\n    /*\n     * Checks if the key algorithm has been disabled or constraints have been\n     * placed on the key.\n     */\n    @Override\n    public final boolean permits(Set<CryptoPrimitive> primitives, Key key) {\n        return checkConstraints(primitives, \"\", key, null);\n    }\n    /*\n     * Checks if the key algorithm has been disabled or if constraints have\n     * been placed on the key.\n     */\n    @Override\n    public final boolean permits(Set<CryptoPrimitive> primitives,\n            String algorithm, Key key, AlgorithmParameters parameters) {\n        if (algorithm == null || algorithm.length() == 0) {\n            throw new IllegalArgumentException(\"No algorithm name specified\");\n        }\n        return checkConstraints(primitives, algorithm, key, parameters);\n    }\n    /*\n     * Check if a x509Certificate object is permitted.  Check if all\n     * algorithms are allowed, certificate constraints, and the\n     * public key against key constraints.\n     *\n     * Uses new style permit() which throws exceptions.\n     */\n    public final void permits(Set<CryptoPrimitive> primitives,\n            CertConstraintParameters cp) throws CertPathValidatorException {\n        checkConstraints(primitives, cp);\n    }\n    /*\n     * Check if Certificate object is within the constraints.\n     * Uses new style permit() which throws exceptions.\n     */\n    public final void permits(Set<CryptoPrimitive> primitives,\n            X509Certificate cert) throws CertPathValidatorException {\n        checkConstraints(primitives, new CertConstraintParameters(cert));\n    }\n    // Check if a string is contained inside the property\n    public boolean checkProperty(String param) {\n        param = param.toLowerCase(Locale.ENGLISH);\n        for (String block : disabledAlgorithms) {\n            if (block.toLowerCase(Locale.ENGLISH).indexOf(param) >= 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Check algorithm constraints with key and algorithm\n    private boolean checkConstraints(Set<CryptoPrimitive> primitives,\n            String algorithm, Key key, AlgorithmParameters parameters) {\n        // check the key parameter, it cannot be null.\n        if (key == null) {\n            throw new IllegalArgumentException(\"The key cannot be null\");\n        }\n        // check the signature algorithm\n        if (algorithm != null && algorithm.length() != 0) {\n            if (!permits(primitives, algorithm, parameters)) {\n                return false;\n            }\n        }\n        // check the key algorithm\n        if (!permits(primitives, key.getAlgorithm(), null)) {\n            return false;\n        }\n        // check the key constraints\n        return algorithmConstraints.permits(key);\n    }\n    /*\n     * Check algorithm constraints with Certificate\n     * Uses new style permit() which throws exceptions.\n     */\n    private void checkConstraints(Set<CryptoPrimitive> primitives,\n            CertConstraintParameters cp) throws CertPathValidatorException {\n        X509Certificate cert = cp.getCertificate();\n        String algorithm = cert.getSigAlgName();\n        // Check signature algorithm is not disabled\n        if (!permits(primitives, algorithm, null)) {\n            throw new CertPathValidatorException(\n                    \"Algorithm constraints check failed on disabled \"+\n                            \"signature algorithm: \" + algorithm,\n                    null, null, -1, BasicReason.ALGORITHM_CONSTRAINED);\n        }\n        // Check key algorithm is not disabled\n        if (!permits(primitives, cert.getPublicKey().getAlgorithm(), null)) {\n            throw new CertPathValidatorException(\n                    \"Algorithm constraints check failed on disabled \"+\n                            \"public key algorithm: \" + algorithm,\n                    null, null, -1, BasicReason.ALGORITHM_CONSTRAINED);\n        }\n        // Check the certificate and key constraints\n        algorithmConstraints.permits(cp);\n    }\n    /**\n     * Key and Certificate Constraints\n     *\n     * The complete disabling of an algorithm is not handled by Constraints or\n     * Constraint classes.  That is addressed with\n     *   permit(Set<CryptoPrimitive>, String, AlgorithmParameters)\n     *\n     * When passing a Key to permit(), the boolean return values follow the\n     * same as the interface class AlgorithmConstraints.permit().  This is to\n     * maintain compatibility:\n     * 'true' means the operation is allowed.\n     * 'false' means it failed the constraints and is disallowed.\n     *\n     * When passing CertConstraintParameters through permit(), an exception\n     * will be thrown on a failure to better identify why the operation was\n     * disallowed.\n     */\n    private static class Constraints {\n        private Map<String, Set<Constraint>> constraintsMap = new HashMap<>();\n        private static final Pattern keySizePattern = Pattern.compile(\n                \"keySize\\\\s*(<=|<|==|!=|>|>=)\\\\s*(\\\\d+)\");\n        private static final Pattern denyAfterPattern = Pattern.compile(\n                \"denyAfter\\\\s+(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\");\n        public Constraints(String[] constraintArray) {\n            for (String constraintEntry : constraintArray) {\n                if (constraintEntry == null || constraintEntry.isEmpty()) {\n                    continue;\n                }\n                constraintEntry = constraintEntry.trim();\n", "answers": ["                if (debug != null) {"], "length": 983, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "f543c290a8be15fe20be426000cfed4819911e0cccae9626"}
{"input": "", "context": "/*************** <auto-copyright.pl BEGIN do not edit this line> **************\n *\n * VR Juggler is (C) Copyright 1998-2007 by Iowa State University\n *\n * Original Authors:\n *   Allen Bierbaum, Christopher Just,\n *   Patrick Hartling, Kevin Meinert,\n *   Carolina Cruz-Neira, Albert Baker\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Library General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n *\n *************** <auto-copyright.pl END do not edit this line> ***************/\npackage org.vrjuggler.vrjconfig.commoneditors.devicegraph;\nimport java.awt.Dimension;\nimport java.awt.geom.Rectangle2D;\nimport java.util.*;\nimport org.jgraph.JGraph;\nimport org.jgraph.graph.AttributeMap;\nimport org.jgraph.graph.CellView;\nimport org.jgraph.graph.ConnectionSet;\nimport org.jgraph.graph.DefaultEdge;\nimport org.jgraph.graph.DefaultGraphCell;\nimport org.jgraph.graph.DefaultPort;\nimport org.jgraph.graph.GraphCell;\nimport org.jgraph.graph.GraphConstants;\nimport org.vrjuggler.jccl.config.*;\nimport org.vrjuggler.vrjconfig.commoneditors.DeviceGraph;\nimport org.vrjuggler.vrjconfig.commoneditors.EditorConstants;\n/**\n * A collection of helper functions that can be helpful in extending JGraph.\n *\n * <p>\n * The basic structure of a device graph is relatively straightfoward.  There\n * are three types of cells: edges, proxy vertices, and device vertices.\n * Edges must always be of type <code>ProxyToDeviceEdge</code>.  Proxy vertices\n * have the following characteristics:\n *\n * <ul>\n *   <li>\n *     Is of type <code>org.jgraph.graph.DefaultGraphCell</code>\n *   </li>\n *   <li>\n *     Contains a user object of type <code>ProxyInfo</code>\n *   </li>\n *   <li>\n *     Has a single port (type <code>DefaultPort</code>) with at most one\n *     out-going edge\n *   </li>\n * </ul>\n *\n * Device vertices, on the other hand, have these characteristics:\n *\n * <ul>\n *   <li>\n *     Is of type <code>org.jgraph.graph.DefaultGraphCell</code>\n *   </li>\n *   <li>\n *     Contains a user object of type <code>DeviceInfo</code>\n *   </li>\n *   <li>\n *     Has one or more ports (type <code>DefaultPort</code>), each of which\n *     contains a user object of type <code>UnitInfo</code>\n *   </li>\n * </ul>\n *\n * <p>\n * The functions included in this class take care of all the details related\n * to creating and connecting cells.  In particular, there are functions that\n * know about all the default device and device proxy config element types in\n * VR Juggler and know how to create cells and proxies for those types.\n * </p>\n *\n * @see DeviceInfo\n * @see ProxyInfo\n * @see UnitInfo\n * @see ProxyToDeviceEdge\n * @see org.jgraph.graph.DefaultGraphCell\n * @see org.jgraph.graph.DefaultPort\n */\npublic abstract class GraphHelpers\n   implements EditorConstants\n{\n   private static Map mDevCellCreatorMap = new HashMap();\n   /**\n    * Registers the given device graph cell creator as the creator for the\n    * given config definition.  Subsequent calls to \n    * <code>createDeviceCell(ConfigElement,ConfigContext,Map)</code> will be\n    * able to create device graph cells for the given config definition.\n    *\n    * @param def        the config definition that uniquely identifies which\n    *                   creator to be used\n    * @param c          the device graph cell creator\n    *\n    * @see #createDeviceCell(ConfigElement,ConfigContext,Map)\n    */\n   public static void registerGraphCellCreator(ConfigDefinition def,\n                                               DeviceGraphCellCreator c)\n   {\n      mDevCellCreatorMap.put(def, c);\n   }\n   /**\n    * Changes the size of the given <code>CellView</code> reference to be the\n    * given dimensions.  The graph cell associated with the given view must be\n    * in the given graph.  If the cell view is resized successfully, an edit is\n    * posted with the graph's layout cache, and the graph is repainted.\n    *\n    * @param graph      the graph that knows about the cell view and its cell\n    * @param size       the new dimensions for the cell view\n    * @param view       the cell view to be resized\n    *\n    * @see #autoSizeCellView(Dimension,CellView,Hashtable)\n    */\n   public static void autoSizeCellView(JGraph graph, Dimension size,\n                                       CellView view)\n   {\n      Hashtable table = new Hashtable();\n      if ( autoSizeCellView(size, view, table) )\n      {\n         graph.getGraphLayoutCache().edit(table, null, null, null);\n         graph.repaint();\n      }\n   }\n   /**\n    * Changes the size of the given <code>CellView</code> reference to be the\n    * given dimensions.  The resizing is done by modifying the bounds in the\n    * cell view's attributes.  The position of the cell view is left unchanged,\n    * but the width and height are changed to the values given in\n    * <code>size</code>.  The new attributes are placed into the given\n    * <code>Hashtable</code> object using the view's cell as the key.\n    *\n    * @param size       the new dimensions for the cell view\n    * @param view       the cell view to be resized\n    * @param table      a non-null hashtable used for storing the modified cell\n    *                   view attributes\n    *\n    * @see org.jgraph.graph.GraphConstants#setBounds(Map,Rectangle2D)\n    * @see org.jgraph.graph.CellView#getCell()\n    */\n   public static boolean autoSizeCellView(Dimension size, CellView view,\n                                          Hashtable table)\n   {\n      boolean edited = false;\n      Rectangle2D bounds = GraphConstants.getBounds(view.getAllAttributes());\n      if ( bounds != null )\n      {\n         bounds = (Rectangle2D) bounds.clone();\n         bounds.setFrame(bounds.getX(), bounds.getY(), size.width, size.height);\n         AttributeMap map = new AttributeMap();\n         GraphConstants.setBounds(map, bounds);\n         table.put(view.getCell(), map);\n         edited = true;\n      }\n      return edited;\n   }\n   /**\n    * Creates a new graph cell for the given config element that is used to\n    * configure an input device.  Pluggable \"creators\" are used to construct\n    * the appropriate <code>DefaultGraphCell</code> instance (with its ports)\n    * that is returned.  The creator to use is determined using the config\n    * definition of the given config element.  This method is intended to be\n    * used for ensuring correct and easy graph cell creation for config\n    * elements used to configure devices.  Creators must be registered prior\n    * to calling this function.\n    *\n    * @param devElt     the config element for the device being represented by\n    *                   the vertex cell to be created\n    * @param context    the config context where <code>devElt</code> exists\n    * @param attributes the attribute map where the vertex cell's default\n    *                   attribute map will be stored by this function\n    *\n    * @throws IllegalArgumentException\n    *   thrown when the graph cell cannot be created due to one of two\n    *   causes: there is no creator known for the config definition of\n    *   <code>devElt</code> or the registered creator failed\n    *\n    * @see #registerGraphCellCreator(ConfigDefinition,DeviceGraphCellCreator)\n    */\n   public static DefaultGraphCell createDeviceCell(ConfigElement devElt,\n                                                   ConfigContext context,\n                                                   Map attributes)\n   {\n      DefaultGraphCell cell = null;\n      ConfigDefinition def = devElt.getDefinition();\n      DeviceGraphCellCreator creator =\n         (DeviceGraphCellCreator) mDevCellCreatorMap.get(def);\n      if ( creator != null )\n      {\n         cell = creator.createDeviceGraphCell(devElt, context, attributes);\n      }\n      // If creator is null, cell will be null.  If the creator failed, cell\n      // will be null.\n      if ( cell == null )\n      {\n         throw new IllegalArgumentException(\"Unexpected definition \" +\n                                            def.getToken());\n      }\n      return cell;\n   }\n   /**\n    * Creates a new graph cell for the given config element that is used to\n    * configure an input device, which has exactly one input source (unit)\n    * at all times.  The number of units indicates how many ports the new\n    * graph cell should have initially.\n    *\n    * @param devElt             the config element for the device being\n    *                           represented by the vertex cell to be created\n    * @param context            the config context where <code>devElt</code>\n    *                           exists\n    * @param attributes         the attribute map where the vertex cell's\n    *                           default attribute map will be stored by this\n    *                           function\n    * @param x                  the X coordinate for the initial positionaing\n    *                           of the new vertex\n    * @param y                  the Y coordinate for the initial positionaing\n    *                           of the new vertex\n    * @param autoSize           flag indicating whether the new cell should be\n    *                           auto-sized\n    *\n    * @see #createDeviceCell(ConfigElement,ConfigContext,int,Map,int,int,boolean)\n    * @see #createBaseDeviceCell(BaseDeviceInfo,Map,int,int,boolean)\n    */\n   public static DefaultGraphCell createDeviceCell(ConfigElement devElt,\n                                                   ConfigContext context,\n                                                   Map attributes, int x,\n                                                   int y, boolean autoSize)\n   {\n      return createDeviceCell(devElt, context, 1, attributes, x, y, autoSize);\n   }\n   /**\n    * Creates a new graph cell for the given config element that is used to\n    * configure an input device.  The number of units is determined based on\n    * the value of <code>unitPropName</code>.  If it is non-null, then\n    * <code>devElt</code> is queried for the number of values of the named\n    * property.  Further, a non-null value for <code>unitPropName</code>\n    * indicates that the number of values is variable.  If\n    * <code>unitPropName</code> is null, then the number of units is set to 1\n    * and is treated as non-variable.  The number of units indicates how many\n    * ports the new graph cell should have initially.\n    *\n    * @param devElt             the config element for the device being\n    *                           represented by the vertex cell to be created\n    * @param context            the config context where <code>devElt</code>\n    *                           exists\n    * @param unitPropName       the name of the property that indicates the\n    *                           number of available units for the represented\n    *                           device\n    * @param attributes         the attribute map where the vertex cell's\n    *                           default attribute map will be stored by this\n    *                           function\n    * @param x                  the X coordinate for the initial positionaing\n    *                           of the new vertex\n    * @param y                  the Y coordinate for the initial positionaing\n    *                           of the new vertex\n    * @param autoSize           flag indicating whether the new cell should be\n    *                           auto-sized\n    *\n    * @see #createBaseDeviceCell(BaseDeviceInfo,Map,int,int,boolean)\n    */\n   public static DefaultGraphCell createDeviceCell(ConfigElement devElt,\n                                                   ConfigContext context,\n                                                   String unitPropName,\n                                                   Map attributes, int x,\n                                                   int y, boolean autoSize)\n   {\n      DefaultGraphCell dev_cell =\n         createBaseDeviceCell(new DeviceInfo(devElt, context, unitPropName),\n                              attributes, x, y, autoSize);\n      // If unitPropName is null, that means that the number of units for the\n      // device being represented by dev_cell is exactly 1 at all times.\n      // Otherwise, we get the current number of units by querying devElt.\n      int num_units =\n         (unitPropName == null) ? 1\n                                : devElt.getPropertyValueCount(unitPropName);\n      addDevicePorts(dev_cell,\n                     UnitTypeHelpers.getSingleUnitType(devElt.getDefinition()),\n                     num_units);\n      return dev_cell;\n   }\n   /**\n    * Creates a new graph cell for the given config element that is used to\n    * configure an input device.  The number of units (specified by the\n    * <code>numUnits</code> parameter) indicates the fixed number of ports\n    * the new graph cell has.\n    *\n    * @param devElt             the config element for the device being\n    *                           represented by the vertex cell to be created\n    * @param context            the config context where <code>devElt</code>\n    *                           exists\n    * @param numUnits           the fixed number of units this device has\n    * @param attributes         the attribute map where the vertex cell's\n    *                           default attribute map will be stored by this\n    *                           function\n    * @param x                  the X coordinate for the initial positionaing\n    *                           of the new vertex\n    * @param y                  the Y coordinate for the initial positionaing\n    *                           of the new vertex\n    * @param autoSize           flag indicating whether the new cell should be\n    *                           auto-sized\n    *\n    * @see #createBaseDeviceCell(BaseDeviceInfo,Map,int,int,boolean)\n    */\n   public static DefaultGraphCell createDeviceCell(ConfigElement devElt,\n                                                   ConfigContext context,\n                                                   int numUnits,\n                                                   Map attributes, int x,\n                                                   int y, boolean autoSize)\n   {\n      // Create a DeviceInfo object with a fixed number of units.\n      DefaultGraphCell dev_cell =\n         createBaseDeviceCell(new DeviceInfo(devElt, context), attributes,\n                              x, y, autoSize);\n      addDevicePorts(dev_cell,\n                     UnitTypeHelpers.getSingleUnitType(devElt.getDefinition()),\n                     numUnits);\n      return dev_cell;\n   }\n   /**\n    * Creates a new graph cell for the given config element that is used to\n    * configure an input device using \"artificial\" input sources (units).\n    *\n    * @param devElt     the config element for the device being\n    *                   represented by the vertex cell to be created\n    * @param context    the config context where <code>devElt</code> exists\n    * @param proxyTypes the list of proxy types that can point at the device\n    * @param attributes the attribute map where the vertex cell's default\n    *                   attribute map will be stored by this function\n    * @param x          the X coordinate for the initial positionaing of the\n    *                   new vertex\n    * @param y          the Y coordinate for the initial positionaing of the\n    *                   new vertex\n    * @param autoSize   flag indicating whether the new cell should be\n    *                   auto-sized\n    *\n    * @see #createBaseDeviceCell(BaseDeviceInfo,Map,int,int,boolean)\n    */\n   public static DefaultGraphCell createDeviceCell(ConfigElement devElt,\n                                                   ConfigContext context,\n                                                   List proxyTypes,\n                                                   Map attributes,\n                                                   int x, int y,\n                                                   boolean autoSize)\n   {\n      ConfigBroker broker = new ConfigBrokerProxy();\n      List all_elts = broker.getElements(context);\n      Map unit_map = new HashMap();\n      for ( Iterator d = proxyTypes.iterator(); d.hasNext(); )\n      {\n         Object def_obj = d.next();\n         List all_proxy_elts = null;\n         if ( def_obj instanceof String )\n         {\n            all_proxy_elts = \n               ConfigUtilities.getElementsWithDefinition(all_elts,\n                                                         (String) def_obj);\n         }\n         else if ( def_obj instanceof ConfigDefinition )\n         {\n            all_proxy_elts = \n               ConfigUtilities.getElementsWithDefinition(all_elts,\n                                                         (ConfigDefinition) def_obj);\n         }\n         if ( ! all_proxy_elts.isEmpty() )\n         {\n            ConfigDefinition def = \n               ((ConfigElement) all_proxy_elts.get(0)).getDefinition();\n            PropertyDefinition prop_def =\n               def.getPropertyDefinition(DEVICE_PROPERTY);\n            Integer unit_type =\n               UnitTypeHelpers.getUnitType(prop_def.getAllowedType(0));\n            int proxy_count = 0;\n            for ( Iterator e = all_proxy_elts.iterator(); e.hasNext(); )\n            {\n               ConfigElement proxy_elt = (ConfigElement) e.next();\n               ConfigElementPointer dev_ptr =\n                  (ConfigElementPointer) proxy_elt.getProperty(DEVICE_PROPERTY,\n                                                               0);\n               if ( dev_ptr != null &&\n                    dev_ptr.getTarget().equals(devElt.getName()) )\n               {\n                  proxy_count++;\n               }\n            }\n            DefaultUnitPropertyHandler.addArtificialUnits(unit_map, unit_type,\n                                                          proxy_count);\n         }\n      }\n      DefaultGraphCell cell =\n         createBaseDeviceCell(new DeviceInfo(devElt, context, unit_map),\n                              attributes, x, y, false);\n      for ( Iterator t = unit_map.keySet().iterator(); t.hasNext(); )\n      {\n         Integer type = (Integer) t.next();\n         Integer proxy_count = (Integer) unit_map.get(type);\n         addDevicePorts(cell, type, proxy_count.intValue());\n      }\n      return cell;\n   }\n   /**\n    * Creates a basic device graph cell by creating an attribute map using\n    * <code>org.vrjuggler.vrjconfig.commoneditors.DeviceGraph.createDeviceAttributes()</code>\n    * and the given parameters.  The freshly created attribute map is stored\n    * in the given attribute map using the new <code>DefaultGraphCell</code>\n    * instance as its key.  In general, user code should not be using this\n    * method directly, but it is made public so that instances of\n    * <code>DeviceGraphCellCreator</code> can utilize it when necessary.\n    *\n    * @param devInfo    the informational object describing the device\n    * @param attributes the attribute map where the vertex cell's default\n    *                   attribute map will be stored by this function\n    * @param x          the X coordinate for the initial positionaing of the\n    *                   new vertex\n    * @param y          the Y coordinate for the initial positionaing of the\n    *                   new vertex\n    * @param autoSize   flag indicating whether the new cell should be\n    *                   auto-sized\n    *\n    * @see org.vrjuggler.vrjconfig.commoneditors.DeviceGraph#createDeviceAttributes(int,int,boolean)\n    * @see DeviceGraphCellCreator\n    * @see org.jgraph.graph.GraphConstants\n    * @see org.jgraph.graph.AttributeMap\n    */\n   public static DefaultGraphCell createBaseDeviceCell(BaseDeviceInfo devInfo,\n                                                       Map attributes,\n                                                       int x, int y,\n                                                       boolean autoSize)\n   {\n      DefaultGraphCell dev_cell = new DefaultGraphCell(devInfo);\n      attributes.put(dev_cell, DeviceGraph.createDeviceAttributes(x, y,\n                                                                  autoSize));\n      return dev_cell;\n   }\n   /**\n    * Adds the given number of ports to the given graph cell as children.\n    * The ports are all created using\n    * <code>createDevicePort(Integer,int)</code>.\n    *\n    * @param cell       the device graph cell to which the ports will be\n    *                   added\n    * @param unitType   the type of the input source (unit) for the new\n    *                   ports\n    * @param numUnits   the number of ports that will be addded\n    *\n    * @see #createDevicePort(Integer,int)\n    */\n   public static void addDevicePorts(DefaultGraphCell cell, Integer unitType,\n                                     int numUnits)\n   {\n      for ( int i = 0; i < numUnits; ++i )\n      {\n         cell.add(createDevicePort(unitType, i));\n      }\n   }\n   /**\n    * Creates a new graph cell for the given config element that is used to\n    * configure a device proxy.  The parameters to use for creating the\n    * appropriate <code>DefaultGraphCell</code> (with its ports) are\n    * determined based on the type of the config element passed in.  This\n    * method is intended to be used for ensuring correct and easy graph cell\n    * creation for config elements used to configure proxies.  However, the\n    * config element type must be known <i>a priori</i> in order for this\n    * method to be able to do its job.\n    *\n    * @param proxyElt           the config element for the device proxy being\n    *                           represented by the vertex cell to be created\n    * @param context            the config context where <code>proxyElt</code>\n    *                           exists\n    * @param aliases            all the aliases (zero or more) that exist for\n    *                           <code>proxyElt</code>\n    * @param attributes         the attribute map where the vertex cell's\n    *                           default attribute map will be stored by this\n    *                           function\n    *\n    * @throws IllegalArgumentException\n    *   thrown when the type of <code>proxyElt</code> is unknown to this\n    *   method, thus preventing correct creation of a\n    *   <code>DefaultGraphCell</code> instance.\n    */\n   public static DefaultGraphCell createProxyCell(ConfigElement proxyElt,\n                                                  ConfigContext context,\n                                                  List aliases,\n                                                  Map attributes)\n   {\n      ConfigDefinition def = proxyElt.getDefinition();\n      DefaultGraphCell cell = null;\n      // XXX: Come up with a better system for setting the x and y values.\n      int x = 120, y = 20;\n      if ( def.isOfType(PROXY_TYPE) )\n      {\n         cell = createProxyCell(proxyElt, context, aliases, attributes, x, y,\n                                false);\n      }\n      else\n      {\n         throw new IllegalArgumentException(\"Unexpected definition \" +\n                                            def.getToken());\n      }\n      return cell;\n   }\n   /**\n    * Creates a graph cell for a device proxy that has a single port as a\n    * child.  The initial attribute map used for the graph cell is created\n    * using\n    * <code>org.vrjuggler.vrjconfig.commoneditors.DeviceGraph.createProxyAttributes()</code>,\n    * and it is stored in the given attribute map.\n    *\n    * @param proxyElt           the config element for the device proxy being\n    *                           represented by the vertex cell to be created\n    * @param context            the config context where <code>proxyElt</code>\n    *                           exists\n    * @param aliases            all the aliases (zero or more) that exist for\n    *                           <code>proxyElt</code>\n    * @param attributes         the attribute map where the vertex cell's\n    *                           default attribute map will be stored by this\n    *                           function\n    * @param x                  the X coordinate for the initial positionaing\n    *                           of the new vertex\n    * @param y                  the Y coordinate for the initial positionaing\n    *                           of the new vertex\n    * @param autoSize           flag indicating whether the new cell should be\n    *                           auto-sized\n    *\n    * @see org.vrjuggler.vrjconfig.commoneditors.DeviceGraph#createProxyAttributes(int,int,boolean)\n    */\n   public static DefaultGraphCell createProxyCell(ConfigElement proxyElt,\n                                                  ConfigContext context,\n                                                  List aliases,\n                                                  Map attributes, int x,\n                                                  int y, boolean autoSize)\n   {\n      DefaultGraphCell proxy_cell =\n         new DefaultGraphCell(new ProxyInfo(proxyElt, context, aliases));\n      proxy_cell.add(new DefaultPort());\n      attributes.put(proxy_cell,\n                     DeviceGraph.createProxyAttributes(x, y, autoSize));\n      return proxy_cell;\n   }\n   /**\n    * Creates a connection between <code>proxyCell</code> and\n    * <code>deviceCell</code> using the appropriate port in\n    * <code>deviceCell</code>.  The port to use is determined by the user\n    * object contained in <code>proxyCell</code>, which must be of type\n    * <code>ProxyInfo</code>.  The proxy cell's user object will contain the\n    * <code>ConfigElement</code> for the proxy, which in turn provides a unit\n    * number for the device to which the proxy should refer.  The proxy config\n    * element and the device config element will remain unchanged.\n    *\n    * @throws NoSuchPortException thrown If the two cells cannot be connected\n    *                             because no appropriate port exists in\n    *                             <code>deviceCell</code>\n    *\n    * @see ProxyInfo\n    * @see #createProxyCell(ConfigElement,ConfigContext,List,Map,int,int,boolean)\n    */\n   public static DefaultEdge connectProxyToDevice(DefaultGraphCell proxyCell,\n                                                  DefaultGraphCell deviceCell,\n                                                  ConnectionSet cs,\n                                                  Map attributes)\n      throws NoSuchPortException\n   {\n      ProxyToDeviceEdge edge = null;\n", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "length": 2936, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "62a58f0fc96f0960c26b962cb44a918eb0501adec6123f55"}
{"input": "", "context": "/********\n * This file is part of Ext.NET.\n *     \n * Ext.NET is free software: you can redistribute it and/or modify\n * it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE as \n * published by the Free Software Foundation, either version 3 of the \n * License, or (at your option) any later version.\n * \n * Ext.NET is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n * \n * You should have received a copy of the GNU AFFERO GENERAL PUBLIC LICENSE\n * along with Ext.NET.  If not, see <http://www.gnu.org/licenses/>.\n *\n *\n * @version   : 1.2.0 - Ext.NET Pro License\n * @author    : Ext.NET, Inc. http://www.ext.net/\n * @date      : 2011-09-12\n * @copyright : Copyright (c) 2006-2011, Ext.NET, Inc. (http://www.ext.net/). All rights reserved.\n * @license   : GNU AFFERO GENERAL PUBLIC LICENSE (AGPL) 3.0. \n *              See license.txt and http://www.ext.net/license/.\n *              See AGPL License at http://www.gnu.org/licenses/agpl-3.0.txt\n ********/\nusing System;\nusing System.ComponentModel;\nusing System.IO;\nusing System.Web.UI;\nusing Newtonsoft.Json;\nusing Ext.Net.Utilities;\nnamespace Ext.Net\n{\n    /// <summary>\n    /// \n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    [Meta]\n    [Description(\"\")]\n    public abstract partial class MultiSelectBase<T> : Field, IStore where T : StateManagedItem \n    {\n        /// <summary>\n        /// The data store to use.\n        /// </summary>\n        [Meta]\n        [ConfigOption(\"store\", JsonMode.ToClientID)]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(\"\")]\n        [IDReferenceProperty(typeof(Store))]\n        [Description(\"The data store to use.\")]\n        public virtual string StoreID\n        {\n            get\n            {\n                return (string)this.ViewState[\"StoreID\"] ?? \"\";\n            }\n            set\n            {\n                this.ViewState[\"StoreID\"] = value;\n            }\n        }\n        private StoreCollection store;\n        /// <summary>\n        ///  The data store to use.\n        /// </summary>\n        [Meta]\n        [ConfigOption(\"store>Primary\")]\n        [Category(\"7. MultiSelect\")]\n        [PersistenceMode(PersistenceMode.InnerProperty)]\n        [Description(\"The data store to use.\")]\n        public virtual StoreCollection Store\n        {\n            get\n            {\n                if (this.store == null)\n                {\n                    this.store = new StoreCollection();\n                    this.store.AfterItemAdd += this.AfterStoreAdd;\n                    this.store.AfterItemRemove += this.AfterStoreRemove;\n                }\n                return this.store;\n            }\n        }\n\t\t/// <summary>\n\t\t/// \n\t\t/// </summary>\n\t\t[Description(\"\")]\n        protected virtual void AfterStoreAdd(Store item)\n        {\n            this.Controls.AddAt(0, item);\n            this.LazyItems.Insert(0, item);\n        }\n\t\t/// <summary>\n\t\t/// \n\t\t/// </summary>\n\t\t[Description(\"\")]\n        protected virtual void AfterStoreRemove(Store item)\n        {\n            this.Controls.Remove(item);\n            this.LazyItems.Remove(item);\n        }\n        private ListItemCollection<T> items;\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n        [PersistenceMode(PersistenceMode.InnerProperty)]\n        [ViewStateMember]\n        [Description(\"\")]\n        public ListItemCollection<T> Items\n        {\n            get\n            {\n                if (this.items == null)\n                {\n                    this.items = new ListItemCollection<T>();\n                }\n                return this.items;\n            }\n        }\n\t\t/// <summary>\n\t\t/// \n\t\t/// </summary>\n        [ConfigOption(\"store\", JsonMode.Raw)]\n        [DefaultValue(\"\")]\n\t\t[Description(\"\")]\n        protected string ItemsProxy\n        {\n            get\n            {\n                if (this.StoreID.IsNotEmpty() || this.Store.Primary != null)\n                {\n                    return \"\";\n                }\n                return this.ItemsToStore;\n            }\n        }\n        private string ItemsToStore\n        {\n            get\n            {\n                StringWriter sw = new StringWriter();\n                JsonTextWriter jw = new JsonTextWriter(sw);\n                ListItemCollectionJsonConverter converter = new ListItemCollectionJsonConverter();\n                converter.WriteJson(jw, this.Items, null);\n                return sw.GetStringBuilder().ToString();\n            }\n        }\n        private SelectedListItemCollection selectedItems;\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n        [PersistenceMode(PersistenceMode.InnerProperty)]\n        [ViewStateMember]\n        [Description(\"\")]\n        public SelectedListItemCollection SelectedItems\n        {\n            get\n            {\n                if (this.selectedItems == null)\n                {\n                    this.selectedItems = new SelectedListItemCollection();\n                }\n                return this.selectedItems;\n            }\n        }\n        /// <summary>\n        /// The underlying data field name to bind to this MultiSelect.\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(\"\")]\n        [Description(\"The underlying data field name to bind to this MultiSelect.\")]\n        public virtual string DisplayField\n        {\n            get\n            {\n                return (string)this.ViewState[\"DisplayField\"] ?? \"text\";\n            }\n            set\n            {\n                this.ViewState[\"DisplayField\"] = value;\n            }\n        }\n        /// <summary>\n        /// The underlying data value name to bind to this MultiSelect.\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(\"\")]\n        [Description(\"The underlying data value name to bind to this MultiSelect.\")]\n        public virtual string ValueField\n        {\n            get\n            {\n                return (string)this.ViewState[\"ValueField\"] ?? \"value\";\n            }\n            set\n            {\n                this.ViewState[\"ValueField\"] = value;\n            }\n        }\n        /// <summary>\n        /// False to validate that the value length > 0 (defaults to true).\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(true)]\n        [Description(\"False to validate that the value length > 0 (defaults to true).\")]\n        public virtual bool AllowBlank\n        {\n            get\n            {\n                object obj = this.ViewState[\"AllowBlank\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"AllowBlank\"] = value;\n            }\n        }\n        /// <summary>\n        /// Maximum input field length allowed (defaults to Number.MAX_VALUE).\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(-1)]\n        [Description(\"Maximum input field length allowed (defaults to Number.MAX_VALUE).\")]\n        public virtual int MaxLength\n        {\n            get\n            {\n                object obj = this.ViewState[\"MaxLength\"];\n                return (obj == null) ? -1 : (int)obj;\n            }\n            set\n            {\n                this.ViewState[\"MaxLength\"] = value;\n            }\n        }\n        /// <summary>\n        /// Minimum input field length required (defaults to 0).\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(0)]\n        [Description(\"Minimum input field length required (defaults to 0).\")]\n        public virtual int MinLength\n        {\n            get\n            {\n                object obj = this.ViewState[\"MinLength\"];\n                return (obj == null) ? 0 : (int)obj;\n            }\n            set\n            {\n                this.ViewState[\"MinLength\"] = value;\n            }\n        }\n        /// <summary>\n        /// Error text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}').\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(\"\")]\n        [Localizable(true)]\n        [Description(\"Error text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}').\")]\n        public virtual string MaxLengthText\n        {\n            get\n            {\n                return (string)this.ViewState[\"MaxLengthText\"] ?? \"\";\n            }\n            set\n            {\n                this.ViewState[\"MaxLengthText\"] = value;\n            }\n        }\n        /// <summary>\n        /// Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}').\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(\"\")]\n        [Localizable(true)]\n        [Description(\"Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}').\")]\n        public virtual string MinLengthText\n        {\n            get\n            {\n                return (string)this.ViewState[\"MinLengthText\"] ?? \"\";\n            }\n            set\n            {\n                this.ViewState[\"MinLengthText\"] = value;\n            }\n        }\n        /// <summary>\n        /// Error text to display if the allow blank validation fails (defaults to 'This field is required').\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(\"\")]\n        [Localizable(true)]\n        [Description(\"Error text to display if the allow blank validation fails (defaults to 'This field is required').\")]\n        public virtual string BlankText\n        {\n            get\n            {\n                return (string)this.ViewState[\"BlankText\"] ?? \"\";\n            }\n            set\n            {\n                this.ViewState[\"BlankText\"] = value;\n            }\n        }\n        /// <summary>\n        /// Causes drag operations to copy nodes rather than move (defaults to false).\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(false)]\n        [Description(\"Causes drag operations to copy nodes rather than move (defaults to false).\")]\n        public virtual bool Copy\n        {\n            get\n            {\n                object obj = this.ViewState[\"Copy\"];\n                return (obj == null) ? false : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"Copy\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n        [ConfigOption(\"allowDup\")]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(false)]\n        [Description(\"\")]\n        public virtual bool AllowDuplicates\n        {\n            get\n            {\n                object obj = this.ViewState[\"AllowDuplicates\"];\n                return (obj == null) ? false : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"AllowDuplicates\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(false)]\n        [Description(\"\")]\n        public virtual bool AllowTrash\n        {\n            get\n            {\n                object obj = this.ViewState[\"AllowTrash\"];\n                return (obj == null) ? false : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"AllowTrash\"] = value;\n            }\n        }\n        /// <summary>\n        /// The title text to display in the panel header (defaults to '')\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(\"\")]\n        [Description(\"The title text to display in the panel header (defaults to '')\")]\n        public virtual string Legend\n        {\n            get\n            {\n                return (string)this.ViewState[\"Legend\"] ?? \"\";\n            }\n            set\n            {\n                this.ViewState[\"Legend\"] = value;\n            }\n        }\n        /// <summary>\n        /// The string used to delimit between items when set or returned as a string of values\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(\",\")]\n        [Description(\"The string used to delimit between items when set or returned as a string of values\")]\n        public virtual string Delimiter\n        {\n            get\n            {\n                return (string)this.ViewState[\"Delimiter\"] ?? \",\";\n            }\n            set\n            {\n                this.ViewState[\"Delimiter\"] = value;\n            }\n        }\n        /// <summary>\n        /// The ddgroup name(s) for the View's DragZone (defaults to undefined).\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(\"\")]\n        [Description(\"The ddgroup name(s) for the View's DragZone (defaults to undefined).\")]\n        public virtual string DragGroup\n        {\n            get\n            {\n                return (string)this.ViewState[\"DragGroup\"] ?? \"\";\n            }\n            set\n            {\n                this.ViewState[\"DragGroup\"] = value;\n            }\n        }\n        /// <summary>\n        /// The ddgroup name(s) for the View's DropZone (defaults to undefined).\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(\"\")]\n        [Description(\"The ddgroup name(s) for the View's DropZone (defaults to undefined).\")]\n        public virtual string DropGroup\n        {\n            get\n            {\n                return (string)this.ViewState[\"DropGroup\"] ?? \"\";\n            }\n            set\n            {\n                this.ViewState[\"DropGroup\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(false)]\n        [Description(\"\")]\n        public virtual bool AppendOnly\n        {\n            get\n            {\n                object obj = this.ViewState[\"AppendOnly\"];\n                return (obj == null) ? false : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"AppendOnly\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(\"\")]\n        [Description(\"\")]\n        public virtual string SortField\n        {\n            get\n            {\n                return (string)this.ViewState[\"SortField\"] ?? \"\";\n            }\n            set\n            {\n                this.ViewState[\"SortField\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n        [ConfigOption(JsonMode.ToLower)]\n        [DefaultValue(SortDirection.ASC)]\n        [NotifyParentProperty(true)]\n        [Description(\"\")]\n        public SortDirection Direction\n        {\n            get\n            {\n                object obj = this.ViewState[\"Direction\"];\n                return (obj == null) ? SortDirection.ASC : (SortDirection)obj;\n            }\n            set\n            {\n                this.ViewState[\"Direction\"] = value;\n            }\n        }\n        /// <summary>\n        /// True to submit text of selected items\n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6. MultiSelect\")]\n        [DefaultValue(true)]\n        [Description(\"True to submit text of selected items\")]\n        public virtual bool SubmitText\n        {\n            get\n            {\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "length": 1411, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "b1a3b5f96b79841d13ee9fa68ce3fa8ff64333803d491dd6"}
{"input": "", "context": "\"\"\"Imports:\n    defaultdict: for multidimensional dictionaries (implicitly instantiating\n        the nested dictionaries as the dimensions are accessed)\n    operator: sorting dictionaries\n    os: writing the collection out to disk\n\"\"\"\nfrom collections import defaultdict\nimport operator\nimport os\nclass TrackCollection(object):\n    \"\"\"A structure sorting tracks by artist and album\n    Attributes:\n        file_count: int number of files in this collection\n        collection: 2-dimensional defaultdict of all tracks namespaced by artist\n            then album\n    \"\"\"\n    file_count = 0\n    def __init__(self):\n        def create_multidimensional_dict(n, dict_type):\n            \"\"\"Recursive function to create a multidimensional defaultdict\n            Args:\n                n: int dimensionality of the defaultdict\n                dict_type: type of the elements\n            Returns:\n                A multidimensional defaultdict\"\"\"\n            if n < 1:\n                return dict_type()\n            return defaultdict(lambda: create_multidimensional_dict(n-1, dict_type))\n        # Create one.\n        self.collection = create_multidimensional_dict(2, list)\n    def __str__(self):\n        s = \"---- Album Dictionary Mappings ----\\n\"\n        # List artists and sort\n        artists = self.collection.keys()\n        artists.sort()\n        for artist in artists:\n            # List albums and sort\n            albums = self.collection[artist].keys()\n            albums.sort(key=lambda k2, k1=artist: self.collection[k1][k2][0].final.year)\n            for album in albums:\n                s += \"[%s][%s]\\n\" % (artist, album)\n                for song in self.collection[artist][album]:\n                    s += \"  %02d %s\\n\" % (song.final.track, song.final.title)\n        s += \"-----------------------------------\"\n        return s\n    def add(self, track):\n        \"\"\"Adds a TrackFile to the collection.\n        Args:\n            track: A TrackFile to add. Must be finalised at this point (for\n                indexing purposes).\n        Returns:\n            None\n        Raises:\n            Exception: The given track was not finalised.\n        \"\"\"\n        # TODO Compilations are going to wreak havoc here too, see note on\n        # remove_duplicates.\n        if not track.finalised:\n            raise Exception(\"TrackCollection cannot add a non-finalised track\")\n        if not self.collection[track.final.artist][track.final.album]:\n            self.collection[track.final.artist][track.final.album] = []\n        self.collection[track.final.artist][track.final.album].append(track)\n        self.file_count += 1\n    def remove_duplicates(self, warnings=None, report_progress=None):\n        \"\"\"Look for duplicate songs and remove them.\n        Duplicate artists and albums are not a problem - you need a music file\n        (itself a song) to contain the data to have generated them, so you\n        either have duplicate songs, or different songs with slightly different\n        artist/album names. This should be corrected by the TrackFile's\n        compression step. If it wasn't properly picked up then (i.e. the names\n        were too dissimilar) we have no further information at this point so we\n        can't fix it.\n        Args:\n            report_progress: Optional two argument function to report progress\n                where the first argument is the total number of items and the\n                second argument is the completed number of items.\n        Returns:\n            None\n        \"\"\"\n        # TODO: Compilations are going to go crazy here... revist this later,\n        # probably with a TrackFile flag for (probable) compilation tracks.\n        processed_count = 0\n        for artist in self.collection:\n            for album in self.collection[artist]:\n                duplicate_tracker = {}\n                to_be_removed = []\n                for song in self.collection[artist][album]:\n                    title = song.final.title\n                    # If a track with this title already exists within this\n                    # artist/album tuple, mark it as a duplicate (and optionally\n                    # generate a warning\n                    if title in duplicate_tracker:\n                        duplicate = duplicate_tracker[title]\n                        if warnings is not None and ( \\\n                                duplicate.final.track != song.final.track or \\\n                                duplicate.final.year != song.final.year):\n                            warnings.append('Found songs with the same artist, ' \\\n                                'album and title but differing track or year:\\n' \\\n                                '  %s\\n    %s\\n  %s\\n    %s' % ( \\\n                                    duplicate, duplicate.file_path, \\\n                                    song, song.file_path))\n                        to_be_removed.append(song)\n                    else:\n                        duplicate_tracker[title] = song\n                    processed_count += 1\n                    if report_progress:\n                        report_progress(self.file_count, processed_count)\n                for song in to_be_removed:\n                    self.collection[artist][album].remove(song)\n                self.file_count -= len(to_be_removed)\n    def standardise_album_tracks(self, warnings=None, report_progress=None):\n        \"\"\"Standardises track data between tracks within each album.\n        Takes a vote between tracks within albums to standardise information on\n        the album year and track numbering.\n        Args:\n            report_progress: Optional two argument function to report progress\n                where the first argument is the total number of items and the\n                second argument is the completed number of items.\n        Returns:\n            None\n        \"\"\"\n        # TODO Compilations are going to wreak havoc here too, see note on\n        # remove_duplicates.\n        processed_count = 0\n        for artist in self.collection:\n            for album in self.collection[artist]:\n                # First collect the number of times each different album year\n                # data appears. Ideally all tracks should have the same year.\n                album_year_votes = {}\n                for song in self.collection[artist][album]:\n                    if song.final.year in album_year_votes:\n                        album_year_votes[song.final.year] += 1\n                    else:\n                        album_year_votes[song.final.year] = 1\n                    processed_count += 1\n                    if report_progress:\n                        report_progress(self.file_count, processed_count)\n                # If there is more than one album year listed, standardise. A\n                # good argument could be made for any number of strategies for\n                # standardising. Currently the majority vote takes it, but the\n                # latest 'sensible' year would also be an idea.\n                if len(album_year_votes.keys()) > 1:\n                    sorted_album_year_votes = sorted(album_year_votes.iteritems(),\n                                                     key=operator.itemgetter(1),\n                                                     reverse=True)\n                    if sorted_album_year_votes[0][0] != 0:\n                        correct_year = sorted_album_year_votes[0][0]\n                    else:\n                        correct_year = sorted_album_year_votes[1][0]\n                    if warnings is not None:\n                        warnings.append('Multiple album years for %s ' \\\n                            'by %s: %s. Using %d.' \\\n                            % (album, artist, str(sorted_album_year_votes), correct_year))\n                    for song in self.collection[artist][album]:\n                        song.final.year = correct_year\n    def sort_songs_by_track(self):\n        \"\"\"Sort the songs in the lists by their track numbers.\n        Returns:\n            None\n        \"\"\"\n        for artist in self.collection:\n            for album in self.collection[artist]:\n                self.collection[artist][album].sort(key=lambda x: x.final.track)\n    def create_new_filesystem(self, new_path):\n        \"\"\"Creates a collection starting from a root directory.\n        Args:\n            new_path: The path to recursively search for the collection within.\n        Returns:\n            None\n        \"\"\"\n        os.mkdir(new_path)\n        for artist in self.collection:\n            artist_subpath = '/%s' % (artist)\n            os.mkdir(new_path + artist_subpath)\n            for album in self.collection[artist]:\n                if self.collection[artist][album][0].final.year != 0:\n                    album_subpath = '/[%d] %s' % (self.collection[artist][album][0].final.year, album)\n                else:\n                    album_subpath = '/%s' % (album)\n                os.mkdir(new_path + artist_subpath + album_subpath)\n", "answers": ["                for song in self.collection[artist][album]:"], "length": 826, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "50c8a624b72c93ccf1b9dc94cc56cefefc09ed423276260c"}
{"input": "", "context": "/*\n * Copyright (c) 2014, 2017, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage java.lang;\nimport java.lang.module.Configuration;\nimport java.lang.module.ModuleDescriptor;\nimport java.lang.module.ResolvedModule;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport jdk.internal.loader.ClassLoaderValue;\nimport jdk.internal.loader.Loader;\nimport jdk.internal.loader.LoaderPool;\nimport jdk.internal.module.ServicesCatalog;\nimport sun.security.util.SecurityConstants;\n/**\n * A layer of modules in the Java virtual machine.\n *\n * <p> A layer is created from a graph of modules in a {@link Configuration}\n * and a function that maps each module to a {@link ClassLoader}.\n * Creating a layer informs the Java virtual machine about the classes that\n * may be loaded from the modules so that the Java virtual machine knows which\n * module that each class is a member of. </p>\n *\n * <p> Creating a layer creates a {@link Module} object for each {@link\n * ResolvedModule} in the configuration. For each resolved module that is\n * {@link ResolvedModule#reads() read}, the {@code Module} {@link\n * Module#canRead reads} the corresponding run-time {@code Module}, which may\n * be in the same layer or a {@link #parents() parent} layer. </p>\n *\n * <p> The {@link #defineModulesWithOneLoader defineModulesWithOneLoader} and\n * {@link #defineModulesWithManyLoaders defineModulesWithManyLoaders} methods\n * provide convenient ways to create a module layer where all modules are\n * mapped to a single class loader or where each module is mapped to its own\n * class loader. The {@link #defineModules defineModules} method is for more\n * advanced cases where modules are mapped to custom class loaders by means of\n * a function specified to the method. Each of these methods has an instance\n * and static variant. The instance methods create a layer with the receiver\n * as the parent layer. The static methods are for more advanced cases where\n * there can be more than one parent layer or where a {@link\n * ModuleLayer.Controller Controller} is needed to control modules in the layer\n * </p>\n *\n * <p> A Java virtual machine has at least one non-empty layer, the {@link\n * #boot() boot} layer, that is created when the Java virtual machine is\n * started. The boot layer contains module {@code java.base} and is the only\n * layer in the Java virtual machine with a module named \"{@code java.base}\".\n * The modules in the boot layer are mapped to the bootstrap class loader and\n * other class loaders that are <a href=\"ClassLoader.html#builtinLoaders\">\n * built-in</a> into the Java virtual machine. The boot layer will often be\n * the {@link #parents() parent} when creating additional layers. </p>\n *\n * <p> Each {@code Module} in a layer is created so that it {@link\n * Module#isExported(String) exports} and {@link Module#isOpen(String) opens}\n * the packages described by its {@link ModuleDescriptor}. Qualified exports\n * (where a package is exported to a set of target modules rather than all\n * modules) are reified when creating the layer as follows: </p>\n * <ul>\n *     <li> If module {@code X} exports a package to {@code Y}, and if the\n *     runtime {@code Module} {@code X} reads {@code Module} {@code Y}, then\n *     the package is exported to {@code Module} {@code Y} (which may be in\n *     the same layer as {@code X} or a parent layer). </li>\n *\n *     <li> If module {@code X} exports a package to {@code Y}, and if the\n *     runtime {@code Module} {@code X} does not read {@code Y} then target\n *     {@code Y} is located as if by invoking {@link #findModule(String)\n *     findModule} to find the module in the layer or its parent layers. If\n *     {@code Y} is found then the package is exported to the instance of\n *     {@code Y} that was found. If {@code Y} is not found then the qualified\n *     export is ignored. </li>\n * </ul>\n *\n * <p> Qualified opens are handled in same way as qualified exports. </p>\n *\n * <p> As when creating a {@code Configuration},\n * {@link ModuleDescriptor#isAutomatic() automatic} modules receive special\n * treatment when creating a layer. An automatic module is created in the\n * Java virtual machine as a {@code Module} that reads every unnamed {@code\n * Module} in the Java virtual machine. </p>\n *\n * <p> Unless otherwise specified, passing a {@code null} argument to a method\n * in this class causes a {@link NullPointerException NullPointerException} to\n * be thrown. </p>\n *\n * <h3> Example usage: </h3>\n *\n * <p> This example creates a configuration by resolving a module named\n * \"{@code myapp}\" with the configuration for the boot layer as the parent. It\n * then creates a new layer with the modules in this configuration. All modules\n * are defined to the same class loader. </p>\n *\n * <pre>{@code\n *     ModuleFinder finder = ModuleFinder.of(dir1, dir2, dir3);\n *\n *     ModuleLayer parent = ModuleLayer.boot();\n *\n *     Configuration cf = parent.configuration().resolve(finder, ModuleFinder.of(), Set.of(\"myapp\"));\n *\n *     ClassLoader scl = ClassLoader.getSystemClassLoader();\n *\n *     ModuleLayer layer = parent.defineModulesWithOneLoader(cf, scl);\n *\n *     Class<?> c = layer.findLoader(\"myapp\").loadClass(\"app.Main\");\n * }</pre>\n *\n * @since 9\n * @spec JPMS\n * @see Module#getLayer()\n */\npublic final class ModuleLayer {\n    // the empty layer\n    private static final ModuleLayer EMPTY_LAYER\n        = new ModuleLayer(Configuration.empty(), List.of(), null);\n    // the configuration from which this layer was created\n    private final Configuration cf;\n    // parent layers, empty in the case of the empty layer\n    private final List<ModuleLayer> parents;\n    // maps module name to jlr.Module\n    private final Map<String, Module> nameToModule;\n    /**\n     * Creates a new module layer from the modules in the given configuration.\n     */\n    private ModuleLayer(Configuration cf,\n                        List<ModuleLayer> parents,\n                        Function<String, ClassLoader> clf)\n    {\n        this.cf = cf;\n        this.parents = parents; // no need to do defensive copy\n        Map<String, Module> map;\n        if (parents.isEmpty()) {\n            map = Map.of();\n        } else {\n            map = Module.defineModules(cf, clf, this);\n        }\n        this.nameToModule = map; // no need to do defensive copy\n    }\n    /**\n     * Controls a module layer. The static methods defined by {@link ModuleLayer}\n     * to create module layers return a {@code Controller} that can be used to\n     * control modules in the layer.\n     *\n     * <p> Unless otherwise specified, passing a {@code null} argument to a\n     * method in this class causes a {@link NullPointerException\n     * NullPointerException} to be thrown. </p>\n     *\n     * @apiNote Care should be taken with {@code Controller} objects, they\n     * should never be shared with untrusted code.\n     *\n     * @since 9\n     * @spec JPMS\n     */\n    public static final class Controller {\n        private final ModuleLayer layer;\n        Controller(ModuleLayer layer) {\n            this.layer = layer;\n        }\n        /**\n         * Returns the layer that this object controls.\n         *\n         * @return the module layer\n         */\n        public ModuleLayer layer() {\n            return layer;\n        }\n        private void ensureInLayer(Module source) {\n            if (source.getLayer() != layer)\n                throw new IllegalArgumentException(source + \" not in layer\");\n        }\n        /**\n         * Updates module {@code source} in the layer to read module\n         * {@code target}. This method is a no-op if {@code source} already\n         * reads {@code target}.\n         *\n         * @implNote <em>Read edges</em> added by this method are <em>weak</em>\n         * and do not prevent {@code target} from being GC'ed when {@code source}\n         * is strongly reachable.\n         *\n         * @param  source\n         *         The source module\n         * @param  target\n         *         The target module to read\n         *\n         * @return This controller\n         *\n         * @throws IllegalArgumentException\n         *         If {@code source} is not in the module layer\n         *\n         * @see Module#addReads\n         */\n        public Controller addReads(Module source, Module target) {\n            ensureInLayer(source);\n            source.implAddReads(target);\n            return this;\n        }\n        /**\n         * Updates module {@code source} in the layer to export a package to\n         * module {@code target}. This method is a no-op if {@code source}\n         * already exports the package to at least {@code target}.\n         *\n         * @param  source\n         *         The source module\n         * @param  pn\n         *         The package name\n         * @param  target\n         *         The target module\n         *\n         * @return This controller\n         *\n         * @throws IllegalArgumentException\n         *         If {@code source} is not in the module layer or the package\n         *         is not in the source module\n         *\n         * @see Module#addExports\n         */\n        public Controller addExports(Module source, String pn, Module target) {\n            ensureInLayer(source);\n            source.implAddExports(pn, target);\n            return this;\n        }\n        /**\n         * Updates module {@code source} in the layer to open a package to\n         * module {@code target}. This method is a no-op if {@code source}\n         * already opens the package to at least {@code target}.\n         *\n         * @param  source\n         *         The source module\n         * @param  pn\n         *         The package name\n         * @param  target\n         *         The target module\n         *\n         * @return This controller\n         *\n         * @throws IllegalArgumentException\n         *         If {@code source} is not in the module layer or the package\n         *         is not in the source module\n         *\n         * @see Module#addOpens\n         */\n        public Controller addOpens(Module source, String pn, Module target) {\n            ensureInLayer(source);\n            source.implAddOpens(pn, target);\n            return this;\n        }\n    }\n    /**\n     * Creates a new module layer, with this layer as its parent, by defining the\n     * modules in the given {@code Configuration} to the Java virtual machine.\n     * This method creates one class loader and defines all modules to that\n     * class loader. The {@link ClassLoader#getParent() parent} of each class\n     * loader is the given parent class loader. This method works exactly as\n     * specified by the static {@link\n     * #defineModulesWithOneLoader(Configuration,List,ClassLoader)\n     * defineModulesWithOneLoader} method when invoked with this layer as the\n     * parent. In other words, if this layer is {@code thisLayer} then this\n     * method is equivalent to invoking:\n     * <pre> {@code\n     *     ModuleLayer.defineModulesWithOneLoader(cf, List.of(thisLayer), parentLoader).layer();\n     * }</pre>\n     *\n     * @param  cf\n     *         The configuration for the layer\n     * @param  parentLoader\n     *         The parent class loader for the class loader created by this\n     *         method; may be {@code null} for the bootstrap class loader\n     *\n     * @return The newly created layer\n     *\n     * @throws IllegalArgumentException\n     *         If the given configuration has more than one parent or the parent\n     *         of the configuration is not the configuration for this layer\n     * @throws LayerInstantiationException\n     *         If the layer cannot be created for any of the reasons specified\n     *         by the static {@code defineModulesWithOneLoader} method\n     * @throws SecurityException\n     *         If {@code RuntimePermission(\"createClassLoader\")} or\n     *         {@code RuntimePermission(\"getClassLoader\")} is denied by\n     *         the security manager\n     *\n     * @see #findLoader\n     */\n    public ModuleLayer defineModulesWithOneLoader(Configuration cf,\n                                                  ClassLoader parentLoader) {\n        return defineModulesWithOneLoader(cf, List.of(this), parentLoader).layer();\n    }\n    /**\n     * Creates a new module layer, with this layer as its parent, by defining the\n     * modules in the given {@code Configuration} to the Java virtual machine.\n     * Each module is defined to its own {@link ClassLoader} created by this\n     * method. The {@link ClassLoader#getParent() parent} of each class loader\n     * is the given parent class loader. This method works exactly as specified\n     * by the static {@link\n     * #defineModulesWithManyLoaders(Configuration,List,ClassLoader)\n     * defineModulesWithManyLoaders} method when invoked with this layer as the\n     * parent. In other words, if this layer is {@code thisLayer} then this\n     * method is equivalent to invoking:\n     * <pre> {@code\n     *     ModuleLayer.defineModulesWithManyLoaders(cf, List.of(thisLayer), parentLoader).layer();\n     * }</pre>\n     *\n     * @param  cf\n     *         The configuration for the layer\n     * @param  parentLoader\n     *         The parent class loader for each of the class loaders created by\n     *         this method; may be {@code null} for the bootstrap class loader\n     *\n     * @return The newly created layer\n     *\n     * @throws IllegalArgumentException\n     *         If the given configuration has more than one parent or the parent\n     *         of the configuration is not the configuration for this layer\n     * @throws LayerInstantiationException\n     *         If the layer cannot be created for any of the reasons specified\n     *         by the static {@code defineModulesWithManyLoaders} method\n     * @throws SecurityException\n     *         If {@code RuntimePermission(\"createClassLoader\")} or\n     *         {@code RuntimePermission(\"getClassLoader\")} is denied by\n     *         the security manager\n     *\n     * @see #findLoader\n     */\n    public ModuleLayer defineModulesWithManyLoaders(Configuration cf,\n                                                    ClassLoader parentLoader) {\n        return defineModulesWithManyLoaders(cf, List.of(this), parentLoader).layer();\n    }\n    /**\n     * Creates a new module layer, with this layer as its parent, by defining the\n     * modules in the given {@code Configuration} to the Java virtual machine.\n     * Each module is mapped, by name, to its class loader by means of the\n     * given function. This method works exactly as specified by the static\n     * {@link #defineModules(Configuration,List,Function) defineModules}\n     * method when invoked with this layer as the parent. In other words, if\n     * this layer is {@code thisLayer} then this method is equivalent to\n     * invoking:\n     * <pre> {@code\n     *     ModuleLayer.defineModules(cf, List.of(thisLayer), clf).layer();\n     * }</pre>\n     *\n     * @param  cf\n     *         The configuration for the layer\n     * @param  clf\n     *         The function to map a module name to a class loader\n     *\n     * @return The newly created layer\n     *\n     * @throws IllegalArgumentException\n     *         If the given configuration has more than one parent or the parent\n     *         of the configuration is not the configuration for this layer\n     * @throws LayerInstantiationException\n     *         If the layer cannot be created for any of the reasons specified\n     *         by the static {@code defineModules} method\n     * @throws SecurityException\n     *         If {@code RuntimePermission(\"getClassLoader\")} is denied by\n     *         the security manager\n     */\n    public ModuleLayer defineModules(Configuration cf,\n                                     Function<String, ClassLoader> clf) {\n        return defineModules(cf, List.of(this), clf).layer();\n    }\n    /**\n     * Creates a new module layer by defining the modules in the given {@code\n     * Configuration} to the Java virtual machine. This method creates one\n     * class loader and defines all modules to that class loader.\n     *\n     * <p> The class loader created by this method implements <em>direct\n     * delegation</em> when loading classes from modules. If the {@link\n     * ClassLoader#loadClass(String, boolean) loadClass} method is invoked to\n     * load a class then it uses the package name of the class to map it to a\n     * module. This may be a module in this layer and hence defined to the same\n     * class loader. It may be a package in a module in a parent layer that is\n     * exported to one or more of the modules in this layer. The class\n     * loader delegates to the class loader of the module, throwing {@code\n     * ClassNotFoundException} if not found by that class loader.\n     * When {@code loadClass} is invoked to load classes that do not map to a\n     * module then it delegates to the parent class loader. </p>\n     *\n     * <p> The class loader created by this method locates resources\n     * ({@link ClassLoader#getResource(String) getResource}, {@link\n     * ClassLoader#getResources(String) getResources}, and other resource\n     * methods) in all modules in the layer before searching the parent class\n     * loader. </p>\n     *\n     * <p> Attempting to create a layer with all modules defined to the same\n     * class loader can fail for the following reasons:\n     *\n     * <ul>\n     *\n     *     <li><p> <em>Overlapping packages</em>: Two or more modules in the\n     *     configuration have the same package. </p></li>\n     *\n     *     <li><p> <em>Split delegation</em>: The resulting class loader would\n     *     need to delegate to more than one class loader in order to load\n     *     classes in a specific package. </p></li>\n     *\n     * </ul>\n     *\n     * <p> In addition, a layer cannot be created if the configuration contains\n     * a module named \"{@code java.base}\", or a module contains a package named\n     * \"{@code java}\" or a package with a name starting with \"{@code java.}\". </p>\n     *\n     * <p> If there is a security manager then the class loader created by\n     * this method will load classes and resources with privileges that are\n     * restricted by the calling context of this method. </p>\n     *\n     * @param  cf\n     *         The configuration for the layer\n     * @param  parentLayers\n     *         The list of parent layers in search order\n     * @param  parentLoader\n     *         The parent class loader for the class loader created by this\n     *         method; may be {@code null} for the bootstrap class loader\n     *\n     * @return A controller that controls the newly created layer\n     *\n     * @throws IllegalArgumentException\n     *         If the parent(s) of the given configuration do not match the\n     *         configuration of the parent layers, including order\n     * @throws LayerInstantiationException\n     *         If all modules cannot be defined to the same class loader for any\n     *         of the reasons listed above\n     * @throws SecurityException\n     *         If {@code RuntimePermission(\"createClassLoader\")} or\n     *         {@code RuntimePermission(\"getClassLoader\")} is denied by\n     *         the security manager\n     *\n     * @see #findLoader\n     */\n    public static Controller defineModulesWithOneLoader(Configuration cf,\n                                                        List<ModuleLayer> parentLayers,\n                                                        ClassLoader parentLoader)\n    {\n        List<ModuleLayer> parents = new ArrayList<>(parentLayers);\n        checkConfiguration(cf, parents);\n        checkCreateClassLoaderPermission();\n        checkGetClassLoaderPermission();\n        try {\n            Loader loader = new Loader(cf.modules(), parentLoader);\n            loader.initRemotePackageMap(cf, parents);\n            ModuleLayer layer = new ModuleLayer(cf, parents, mn -> loader);\n            return new Controller(layer);\n        } catch (IllegalArgumentException | IllegalStateException e) {\n            throw new LayerInstantiationException(e.getMessage());\n        }\n    }\n    /**\n     * Creates a new module layer by defining the modules in the given {@code\n     * Configuration} to the Java virtual machine. Each module is defined to\n     * its own {@link ClassLoader} created by this method. The {@link\n     * ClassLoader#getParent() parent} of each class loader is the given parent\n     * class loader.\n     *\n     * <p> The class loaders created by this method implement <em>direct\n     * delegation</em> when loading classes from modules. If the {@link\n     * ClassLoader#loadClass(String, boolean) loadClass} method is invoked to\n     * load a class then it uses the package name of the class to map it to a\n     * module. The package may be in the module defined to the class loader.\n     * The package may be exported by another module in this layer to the\n     * module defined to the class loader. It may be in a package exported by a\n     * module in a parent layer. The class loader delegates to the class loader\n     * of the module, throwing {@code ClassNotFoundException} if not found by\n     * that class loader. When {@code loadClass} is invoked to load a class\n     * that does not map to a module then it delegates to the parent class\n     * loader. </p>\n     *\n     * <p> The class loaders created by this method locate resources\n     * ({@link ClassLoader#getResource(String) getResource}, {@link\n     * ClassLoader#getResources(String) getResources}, and other resource\n     * methods) in the module defined to the class loader before searching\n     * the parent class loader. </p>\n     *\n     * <p> If there is a security manager then the class loaders created by\n     * this method will load classes and resources with privileges that are\n     * restricted by the calling context of this method. </p>\n     *\n     * @param  cf\n     *         The configuration for the layer\n     * @param  parentLayers\n     *         The list of parent layers in search order\n     * @param  parentLoader\n     *         The parent class loader for each of the class loaders created by\n     *         this method; may be {@code null} for the bootstrap class loader\n     *\n     * @return A controller that controls the newly created layer\n     *\n     * @throws IllegalArgumentException\n     *         If the parent(s) of the given configuration do not match the\n     *         configuration of the parent layers, including order\n     * @throws LayerInstantiationException\n     *         If the layer cannot be created because the configuration contains\n     *         a module named \"{@code java.base}\" or a module contains a package\n     *         named \"{@code java}\" or a package with a name starting with\n     *         \"{@code java.}\"\n     *\n     * @throws SecurityException\n     *         If {@code RuntimePermission(\"createClassLoader\")} or\n     *         {@code RuntimePermission(\"getClassLoader\")} is denied by\n     *         the security manager\n     *\n     * @see #findLoader\n     */\n    public static Controller defineModulesWithManyLoaders(Configuration cf,\n                                                          List<ModuleLayer> parentLayers,\n                                                          ClassLoader parentLoader)\n    {\n        List<ModuleLayer> parents = new ArrayList<>(parentLayers);\n        checkConfiguration(cf, parents);\n        checkCreateClassLoaderPermission();\n        checkGetClassLoaderPermission();\n        LoaderPool pool = new LoaderPool(cf, parents, parentLoader);\n        try {\n            ModuleLayer layer = new ModuleLayer(cf, parents, pool::loaderFor);\n            return new Controller(layer);\n        } catch (IllegalArgumentException | IllegalStateException e) {\n            throw new LayerInstantiationException(e.getMessage());\n        }\n    }\n    /**\n     * Creates a new module layer by defining the modules in the given {@code\n     * Configuration} to the Java virtual machine. The given function maps each\n     * module in the configuration, by name, to a class loader. Creating the\n     * layer informs the Java virtual machine about the classes that may be\n     * loaded so that the Java virtual machine knows which module that each\n     * class is a member of.\n     *\n     * <p> The class loader delegation implemented by the class loaders must\n     * respect module readability. The class loaders should be\n     * {@link ClassLoader#registerAsParallelCapable parallel-capable} so as to\n     * avoid deadlocks during class loading. In addition, the entity creating\n     * a new layer with this method should arrange that the class loaders be\n     * ready to load from these modules before there are any attempts to load\n     * classes or resources. </p>\n     *\n     * <p> Creating a layer can fail for the following reasons: </p>\n     *\n     * <ul>\n     *\n     *     <li><p> Two or more modules with the same package are mapped to the\n     *     same class loader. </p></li>\n     *\n     *     <li><p> A module is mapped to a class loader that already has a\n     *     module of the same name defined to it. </p></li>\n     *\n     *     <li><p> A module is mapped to a class loader that has already\n     *     defined types in any of the packages in the module. </p></li>\n     *\n     * </ul>\n     *\n     * <p> In addition, a layer cannot be created if the configuration contains\n     * a module named \"{@code java.base}\", a configuration contains a module\n     * with a package named \"{@code java}\" or a package name starting with\n     * \"{@code java.}\", or the function to map a module name to a class loader\n     * returns {@code null} or the {@linkplain ClassLoader#getPlatformClassLoader()\n     * platform class loader}. </p>\n     *\n     * <p> If the function to map a module name to class loader throws an error\n     * or runtime exception then it is propagated to the caller of this method.\n     * </p>\n     *\n     * @apiNote It is implementation specific as to whether creating a layer\n     * with this method is an atomic operation or not. Consequentially it is\n     * possible for this method to fail with some modules, but not all, defined\n     * to the Java virtual machine.\n     *\n     * @param  cf\n     *         The configuration for the layer\n     * @param  parentLayers\n     *         The list of parent layers in search order\n     * @param  clf\n     *         The function to map a module name to a class loader\n     *\n     * @return A controller that controls the newly created layer\n     *\n     * @throws IllegalArgumentException\n     *         If the parent(s) of the given configuration do not match the\n     *         configuration of the parent layers, including order\n     * @throws LayerInstantiationException\n     *         If creating the layer fails for any of the reasons listed above\n     * @throws SecurityException\n     *         If {@code RuntimePermission(\"getClassLoader\")} is denied by\n     *         the security manager\n     */\n    public static Controller defineModules(Configuration cf,\n                                           List<ModuleLayer> parentLayers,\n                                           Function<String, ClassLoader> clf)\n    {\n        List<ModuleLayer> parents = new ArrayList<>(parentLayers);\n        checkConfiguration(cf, parents);\n        Objects.requireNonNull(clf);\n        checkGetClassLoaderPermission();\n        // The boot layer is checked during module system initialization\n        if (boot() != null) {\n            checkForDuplicatePkgs(cf, clf);\n        }\n        try {\n            ModuleLayer layer = new ModuleLayer(cf, parents, clf);\n            return new Controller(layer);\n        } catch (IllegalArgumentException | IllegalStateException e) {\n            throw new LayerInstantiationException(e.getMessage());\n        }\n    }\n    /**\n     * Checks that the parent configurations match the configuration of\n     * the parent layers.\n     */\n    private static void checkConfiguration(Configuration cf,\n                                           List<ModuleLayer> parentLayers)\n    {\n        Objects.requireNonNull(cf);\n        List<Configuration> parentConfigurations = cf.parents();\n        if (parentLayers.size() != parentConfigurations.size())\n            throw new IllegalArgumentException(\"wrong number of parents\");\n        int index = 0;\n        for (ModuleLayer parent : parentLayers) {\n            if (parent.configuration() != parentConfigurations.get(index)) {\n                throw new IllegalArgumentException(\n                        \"Parent of configuration != configuration of this Layer\");\n            }\n            index++;\n        }\n    }\n    private static void checkCreateClassLoaderPermission() {\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.CREATE_CLASSLOADER_PERMISSION);\n    }\n    private static void checkGetClassLoaderPermission() {\n", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "length": 3987, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "bb930587e12f029a24404d35679f8e99696f13f661ef2e3c"}
{"input": "", "context": "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Text;\nusing SmartStore.Core;\nusing SmartStore.Core.Domain.Catalog;\nusing SmartStore.Core.Domain.Common;\nusing SmartStore.Core.Domain.Customers;\nusing SmartStore.Core.Domain.Directory;\nusing SmartStore.Core.Domain.Discounts;\nusing SmartStore.Core.Domain.Localization;\nusing SmartStore.Core.Domain.Logging;\nusing SmartStore.Core.Domain.Orders;\nusing SmartStore.Core.Domain.Payments;\nusing SmartStore.Core.Domain.Shipping;\nusing SmartStore.Core.Domain.Tax;\nusing SmartStore.Core.Events;\nusing SmartStore.Core.Logging;\nusing SmartStore.Core.Plugins;\nusing SmartStore.Services.Affiliates;\nusing SmartStore.Services.Catalog;\nusing SmartStore.Services.Common;\nusing SmartStore.Services.Customers;\nusing SmartStore.Services.Directory;\nusing SmartStore.Services.Discounts;\nusing SmartStore.Services.Localization;\nusing SmartStore.Services.Messages;\nusing SmartStore.Services.Payments;\nusing SmartStore.Services.Security;\nusing SmartStore.Services.Shipping;\nusing SmartStore.Services.Tax;\nnamespace SmartStore.Services.Orders\n{\n    /// <summary>\n    /// Order processing service\n    /// </summary>\n    public partial class OrderProcessingService : IOrderProcessingService\n    {\n        #region Fields\n        \n        private readonly IOrderService _orderService;\n        private readonly IWebHelper _webHelper;\n        private readonly ILocalizationService _localizationService;\n        private readonly ILanguageService _languageService;\n        private readonly IProductService _productService;\n        private readonly IPaymentService _paymentService;\n        private readonly ILogger _logger;\n        private readonly IOrderTotalCalculationService _orderTotalCalculationService;\n        private readonly IPriceCalculationService _priceCalculationService;\n        private readonly IPriceFormatter _priceFormatter;\n        private readonly IProductAttributeParser _productAttributeParser;\n        private readonly IProductAttributeFormatter _productAttributeFormatter;\n        private readonly IGiftCardService _giftCardService;\n        private readonly IShoppingCartService _shoppingCartService;\n        private readonly ICheckoutAttributeFormatter _checkoutAttributeFormatter;\n        private readonly IShippingService _shippingService;\n        private readonly IShipmentService _shipmentService;\n        private readonly ITaxService _taxService;\n        private readonly ICustomerService _customerService;\n        private readonly IDiscountService _discountService;\n        private readonly IEncryptionService _encryptionService;\n        private readonly IWorkContext _workContext;\n\t\tprivate readonly IStoreContext _storeContext;\n        private readonly IWorkflowMessageService _workflowMessageService;\n        private readonly ICustomerActivityService _customerActivityService;\n        private readonly ICurrencyService _currencyService;\n\t\tprivate readonly IAffiliateService _affiliateService;\n        private readonly IEventPublisher _eventPublisher;\n\t\tprivate readonly IGenericAttributeService _genericAttributeService;\n        private readonly PaymentSettings _paymentSettings;\n        private readonly RewardPointsSettings _rewardPointsSettings;\n        private readonly OrderSettings _orderSettings;\n        private readonly TaxSettings _taxSettings;\n        private readonly LocalizationSettings _localizationSettings;\n        private readonly CurrencySettings _currencySettings;\n\t\tprivate readonly ShoppingCartSettings _shoppingCartSettings;\n        #endregion\n        #region Ctor\n        /// <summary>\n        /// Ctor\n        /// </summary>\n        /// <param name=\"orderService\">Order service</param>\n        /// <param name=\"webHelper\">Web helper</param>\n        /// <param name=\"localizationService\">Localization service</param>\n        /// <param name=\"languageService\">Language service</param>\n        /// <param name=\"productService\">Product service</param>\n        /// <param name=\"paymentService\">Payment service</param>\n        /// <param name=\"logger\">Logger</param>\n        /// <param name=\"orderTotalCalculationService\">Order total calculationservice</param>\n        /// <param name=\"priceCalculationService\">Price calculation service</param>\n        /// <param name=\"priceFormatter\">Price formatter</param>\n        /// <param name=\"productAttributeParser\">Product attribute parser</param>\n        /// <param name=\"productAttributeFormatter\">Product attribute formatter</param>\n        /// <param name=\"giftCardService\">Gift card service</param>\n        /// <param name=\"shoppingCartService\">Shopping cart service</param>\n        /// <param name=\"checkoutAttributeFormatter\">Checkout attribute service</param>\n        /// <param name=\"shippingService\">Shipping service</param>\n        /// <param name=\"shipmentService\">Shipment service</param>\n        /// <param name=\"taxService\">Tax service</param>\n        /// <param name=\"customerService\">Customer service</param>\n        /// <param name=\"discountService\">Discount service</param>\n        /// <param name=\"encryptionService\">Encryption service</param>\n        /// <param name=\"workContext\">Work context</param>\n\t\t/// <param name=\"storeContext\">Store context</param>\n        /// <param name=\"workflowMessageService\">Workflow message service</param>\n        /// <param name=\"customerActivityService\">Customer activity service</param>\n        /// <param name=\"currencyService\">Currency service</param>\n\t\t/// <param name=\"affiliateService\">Affiliate service</param>\n        /// <param name=\"eventPublisher\">Event published</param>\n        /// <param name=\"paymentSettings\">Payment settings</param>\n        /// <param name=\"rewardPointsSettings\">Reward points settings</param>\n        /// <param name=\"orderSettings\">Order settings</param>\n        /// <param name=\"taxSettings\">Tax settings</param>\n        /// <param name=\"localizationSettings\">Localization settings</param>\n        /// <param name=\"currencySettings\">Currency settings</param>\n        public OrderProcessingService(IOrderService orderService,\n            IWebHelper webHelper,\n            ILocalizationService localizationService,\n            ILanguageService languageService,\n            IProductService productService,\n            IPaymentService paymentService,\n            ILogger logger,\n            IOrderTotalCalculationService orderTotalCalculationService,\n            IPriceCalculationService priceCalculationService,\n            IPriceFormatter priceFormatter,\n            IProductAttributeParser productAttributeParser,\n            IProductAttributeFormatter productAttributeFormatter,\n            IGiftCardService giftCardService,\n            IShoppingCartService shoppingCartService,\n            ICheckoutAttributeFormatter checkoutAttributeFormatter,\n            IShippingService shippingService,\n            IShipmentService shipmentService,\n            ITaxService taxService,\n            ICustomerService customerService,\n            IDiscountService discountService,\n            IEncryptionService encryptionService,\n            IWorkContext workContext,\n\t\t\tIStoreContext storeContext,\n            IWorkflowMessageService workflowMessageService,\n            ICustomerActivityService customerActivityService,\n            ICurrencyService currencyService,\n\t\t\tIAffiliateService affiliateService,\n            IEventPublisher eventPublisher,\n\t\t\tIGenericAttributeService genericAttributeService,\n            PaymentSettings paymentSettings,\n            RewardPointsSettings rewardPointsSettings,\n            OrderSettings orderSettings,\n            TaxSettings taxSettings,\n            LocalizationSettings localizationSettings,\n            CurrencySettings currencySettings,\n\t\t\tShoppingCartSettings shoppingCartSettings)\n        {\n            this._orderService = orderService;\n            this._webHelper = webHelper;\n            this._localizationService = localizationService;\n            this._languageService = languageService;\n            this._productService = productService;\n            this._paymentService = paymentService;\n            this._logger = logger;\n            this._orderTotalCalculationService = orderTotalCalculationService;\n            this._priceCalculationService = priceCalculationService;\n            this._priceFormatter = priceFormatter;\n            this._productAttributeParser = productAttributeParser;\n            this._productAttributeFormatter = productAttributeFormatter;\n            this._giftCardService = giftCardService;\n            this._shoppingCartService = shoppingCartService;\n            this._checkoutAttributeFormatter = checkoutAttributeFormatter;\n            this._workContext = workContext;\n\t\t\tthis._storeContext = storeContext;\n            this._workflowMessageService = workflowMessageService;\n            this._shippingService = shippingService;\n            this._shipmentService = shipmentService;\n            this._taxService = taxService;\n            this._customerService = customerService;\n            this._discountService = discountService;\n            this._encryptionService = encryptionService;\n            this._customerActivityService = customerActivityService;\n            this._currencyService = currencyService;\n\t\t\tthis._affiliateService = affiliateService;\n            this._eventPublisher = eventPublisher;\n\t\t\tthis._genericAttributeService = genericAttributeService;\n            this._paymentSettings = paymentSettings;\n            this._rewardPointsSettings = rewardPointsSettings;\n            this._orderSettings = orderSettings;\n            this._taxSettings = taxSettings;\n            this._localizationSettings = localizationSettings;\n            this._currencySettings = currencySettings;\n\t\t\tthis._shoppingCartSettings = shoppingCartSettings;\n        }\n        #endregion\n        #region Utilities\n\t\tprivate decimal Round(decimal value)\n\t\t{\n\t\t\treturn (_shoppingCartSettings.RoundPricesDuringCalculation ? Math.Round(value, 2) : value);\n\t\t}\n        private string TNote(string resKey)\n        {\n            return _localizationService.GetResource(\"Admin.OrderNotice.\" + resKey);\n        }\n        /// <summary>\n        /// Award reward points\n        /// </summary>\n        /// <param name=\"order\">Order</param>\n\t\t/// <param name=\"amount\">The amount. OrderTotal is used if null.</param>\n\t\tprotected void AwardRewardPoints(Order order, decimal? amount = null)\n        {\n            if (!_rewardPointsSettings.Enabled)\n                return;\n            if (_rewardPointsSettings.PointsForPurchases_Amount <= decimal.Zero)\n                return;\n            //Ensure that reward points are applied only to registered users\n            if (order.Customer == null || order.Customer.IsGuest())\n                return;\n\t\t\t//Ensure that reward points were not added before. We should not add reward points if they were already earned for this order\n\t\t\tif (order.RewardPointsWereAdded)\n\t\t\t\treturn;\n\t\t\t// Truncate increases the risk of inaccuracy of rounding\n            //int points = (int)Math.Truncate((amount ?? order.OrderTotal) / _rewardPointsSettings.PointsForPurchases_Amount * _rewardPointsSettings.PointsForPurchases_Points);\n\t\t\t// why are points awarded for OrderTotal? wouldn't be OrderSubtotalInclTax better?\n\t\t\tint points = (int)Math.Round((amount ?? order.OrderTotal) / _rewardPointsSettings.PointsForPurchases_Amount * _rewardPointsSettings.PointsForPurchases_Points);\n            if (points == 0)\n                return;\n            //add reward points\n            order.Customer.AddRewardPointsHistoryEntry(points, string.Format(_localizationService.GetResource(\"RewardPoints.Message.EarnedForOrder\"), order.GetOrderNumber()));\n            order.RewardPointsWereAdded = true;\n            _orderService.UpdateOrder(order);\n        }\n        /// <summary>\n        /// Reduce reward points\n        /// </summary>\n        /// <param name=\"order\">Order</param>\n\t\t/// <param name=\"amount\">The amount. OrderTotal is used if null.</param>\n        protected void ReduceRewardPoints(Order order, decimal? amount = null)\n        {\n            if (!_rewardPointsSettings.Enabled)\n                return;\n            if (_rewardPointsSettings.PointsForPurchases_Amount <= decimal.Zero)\n                return;\n\t\t\t//ensure that reward points were already earned for this order before\n\t\t\tif (!order.RewardPointsWereAdded)\n\t\t\t\treturn;\n            //Ensure that reward points are applied only to registered users\n            if (order.Customer == null || order.Customer.IsGuest())\n                return;\n\t\t\t// Truncate increases the risk of inaccuracy of rounding\n\t\t\t//int points = (int)Math.Truncate((amount ?? order.OrderTotal) / _rewardPointsSettings.PointsForPurchases_Amount * _rewardPointsSettings.PointsForPurchases_Points);\n\t\t\tint points = (int)Math.Round((amount ?? order.OrderTotal) / _rewardPointsSettings.PointsForPurchases_Amount * _rewardPointsSettings.PointsForPurchases_Points);\n\t\t\tif (order.RewardPointsRemaining.HasValue && order.RewardPointsRemaining.Value < points)\n\t\t\t\tpoints = order.RewardPointsRemaining.Value;\n\t\t\tif (points == 0)\n\t\t\t\treturn;\n            //reduce reward points\n            order.Customer.AddRewardPointsHistoryEntry(-points, string.Format(_localizationService.GetResource(\"RewardPoints.Message.ReducedForOrder\"), order.GetOrderNumber()));\n\t\t\tif (!order.RewardPointsRemaining.HasValue)\n\t\t\t\torder.RewardPointsRemaining = (int)Math.Round(order.OrderTotal / _rewardPointsSettings.PointsForPurchases_Amount * _rewardPointsSettings.PointsForPurchases_Points);\n\t\t\torder.RewardPointsRemaining = Math.Max(order.RewardPointsRemaining.Value - points, 0);\n            _orderService.UpdateOrder(order);\n        }\n        /// <summary>\n        /// Set IsActivated value for purchase gift cards for particular order\n        /// </summary>\n        /// <param name=\"order\">Order</param>\n        /// <param name=\"activate\">A value indicating whether to activate gift cards; true - actuvate, false - deactivate</param>\n        protected void SetActivatedValueForPurchasedGiftCards(Order order, bool activate)\n        {\n            var giftCards = _giftCardService.GetAllGiftCards(order.Id, null, null, !activate);\n            foreach (var gc in giftCards)\n            {\n                if (activate)\n                {\n                    //activate\n                    bool isRecipientNotified = gc.IsRecipientNotified;\n                    if (gc.GiftCardType == GiftCardType.Virtual)\n                    {\n                        //send email for virtual gift card\n                        if (!String.IsNullOrEmpty(gc.RecipientEmail) &&\n                            !String.IsNullOrEmpty(gc.SenderEmail))\n                        {\n                            var customerLang = _languageService.GetLanguageById(order.CustomerLanguageId);\n                            if (customerLang == null)\n                                customerLang = _languageService.GetAllLanguages().FirstOrDefault();\n                            int queuedEmailId = _workflowMessageService.SendGiftCardNotification(gc, customerLang.Id);\n                            if (queuedEmailId > 0)\n                                isRecipientNotified = true;\n                        }\n                    }\n                    gc.IsGiftCardActivated = true;\n                    gc.IsRecipientNotified = isRecipientNotified;\n                    _giftCardService.UpdateGiftCard(gc);\n                }\n                else\n                {\n                    //deactivate\n                    gc.IsGiftCardActivated = false;\n                    _giftCardService.UpdateGiftCard(gc);\n                }\n            }\n        }\n        /// <summary>\n        /// Sets an order status\n        /// </summary>\n        /// <param name=\"order\">Order</param>\n        /// <param name=\"os\">New order status</param>\n        /// <param name=\"notifyCustomer\">True to notify customer</param>\n        protected void SetOrderStatus(Order order, OrderStatus os, bool notifyCustomer)\n        {\n            if (order == null)\n                throw new ArgumentNullException(\"order\");\n            OrderStatus prevOrderStatus = order.OrderStatus;\n            if (prevOrderStatus == os)\n                return;\n            //set and save new order status\n            order.OrderStatusId = (int)os;\n            _orderService.UpdateOrder(order);\n            //order notes, notifications\n            order.OrderNotes.Add(new OrderNote\n                {\n                    Note = string.Format(TNote(\"OrderStatusChanged\"), os.GetLocalizedEnum(_localizationService)),\n                    DisplayToCustomer = false,\n                    CreatedOnUtc = DateTime.UtcNow\n                });\n            _orderService.UpdateOrder(order);\n            if (prevOrderStatus != OrderStatus.Complete && os == OrderStatus.Complete && notifyCustomer)\n            {\n                //notification\n                int orderCompletedCustomerNotificationQueuedEmailId = _workflowMessageService.SendOrderCompletedCustomerNotification(order, order.CustomerLanguageId);\n                if (orderCompletedCustomerNotificationQueuedEmailId > 0)\n                {\n                    order.OrderNotes.Add(new OrderNote\n                    {\n                        Note = string.Format(TNote(\"CustomerCompletedEmailQueued\"), orderCompletedCustomerNotificationQueuedEmailId),\n                        DisplayToCustomer = false,\n                        CreatedOnUtc = DateTime.UtcNow\n                    });\n                    _orderService.UpdateOrder(order);\n                }\n            }\n            if (prevOrderStatus != OrderStatus.Cancelled && os == OrderStatus.Cancelled && notifyCustomer)\n            {\n                //notification\n                int orderCancelledCustomerNotificationQueuedEmailId = _workflowMessageService.SendOrderCancelledCustomerNotification(order, order.CustomerLanguageId);\n                if (orderCancelledCustomerNotificationQueuedEmailId > 0)\n                {\n                    order.OrderNotes.Add(new OrderNote\n                    {\n                        Note = string.Format(TNote(\"CustomerCancelledEmailQueued\"), orderCancelledCustomerNotificationQueuedEmailId),\n                        DisplayToCustomer = false,\n                        CreatedOnUtc = DateTime.UtcNow\n                    });\n                    _orderService.UpdateOrder(order);\n                }\n            }\n            //reward points\n            if (_rewardPointsSettings.PointsForPurchases_Awarded == order.OrderStatus)\n            {\n                AwardRewardPoints(order);\n            }\n            if (_rewardPointsSettings.PointsForPurchases_Canceled == order.OrderStatus)\n            {\n                ReduceRewardPoints(order);\n            }\n            //gift cards activation\n            if (_orderSettings.GiftCards_Activated_OrderStatusId > 0 &&\n               _orderSettings.GiftCards_Activated_OrderStatusId == (int)order.OrderStatus)\n            {\n                SetActivatedValueForPurchasedGiftCards(order, true);\n            }\n            //gift cards deactivation\n            if (_orderSettings.GiftCards_Deactivated_OrderStatusId > 0 &&\n               _orderSettings.GiftCards_Deactivated_OrderStatusId == (int)order.OrderStatus)\n            {\n                SetActivatedValueForPurchasedGiftCards(order, false);\n            }\n        }\n        /// <summary>\n        /// Checks order status\n        /// </summary>\n        /// <param name=\"order\">Order</param>\n        /// <returns>Validated order</returns>\n        public void CheckOrderStatus(Order order)\n        {\n            if (order == null)\n                throw new ArgumentNullException(\"order\");\n            if (order.PaymentStatus == PaymentStatus.Paid && !order.PaidDateUtc.HasValue)\n            {\n                //ensure that paid date is set\n                order.PaidDateUtc = DateTime.UtcNow;\n                _orderService.UpdateOrder(order);\n            }\n            if (order.OrderStatus == OrderStatus.Pending)\n            {\n                if (order.PaymentStatus == PaymentStatus.Authorized || order.PaymentStatus == PaymentStatus.Paid)\n                {\n                    SetOrderStatus(order, OrderStatus.Processing, false);\n                }\n            }\n            if (order.OrderStatus == OrderStatus.Pending)\n            {\n                if (order.ShippingStatus == ShippingStatus.PartiallyShipped || order.ShippingStatus == ShippingStatus.Shipped || order.ShippingStatus == ShippingStatus.Delivered)\n                {\n                    SetOrderStatus(order, OrderStatus.Processing, false);\n                }\n            }\n            if (order.OrderStatus != OrderStatus.Cancelled && order.OrderStatus != OrderStatus.Complete)\n            {\n                if (order.PaymentStatus == PaymentStatus.Paid)\n                {\n                    if (order.ShippingStatus == ShippingStatus.ShippingNotRequired || order.ShippingStatus == ShippingStatus.Delivered)\n                    {\n                        SetOrderStatus(order, OrderStatus.Complete, true);\n                    }\n                }\n            }\n        }\n        #endregion\n        #region Methods\n        /// <summary>\n        /// Places an order\n        /// </summary>\n        /// <param name=\"processPaymentRequest\">Process payment request</param>\n        /// <returns>Place order result</returns>\n        public virtual PlaceOrderResult PlaceOrder(ProcessPaymentRequest processPaymentRequest, Dictionary<string, string> extraData)\n        {\n            //think about moving functionality of processing recurring orders (after the initial order was placed) to ProcessNextRecurringPayment() method\n            if (processPaymentRequest == null)\n                throw new ArgumentNullException(\"processPaymentRequest\");\n            if (processPaymentRequest.OrderGuid == Guid.Empty)\n                processPaymentRequest.OrderGuid = Guid.NewGuid();\n            var result = new PlaceOrderResult();\n\t\t\tvar utcNow = DateTime.UtcNow;\n            try\n            {\n                #region Order details (customer, totals)\n                //Recurring orders. Load initial order\n                Order initialOrder = _orderService.GetOrderById(processPaymentRequest.InitialOrderId);\n                if (processPaymentRequest.IsRecurringPayment)\n                {\n                    if (initialOrder == null)\n                        throw new ArgumentException(\"Initial order is not set for recurring payment\");\n                    processPaymentRequest.PaymentMethodSystemName = initialOrder.PaymentMethodSystemName;\n                }\n                //customer\n                var customer = _customerService.GetCustomerById(processPaymentRequest.CustomerId);\n                if (customer == null)\n                    throw new ArgumentException(\"Customer is not set\");\n\t\t\t\t//affilites\n\t\t\t\tint affiliateId = 0;\n\t\t\t\tvar affiliate = _affiliateService.GetAffiliateById(customer.AffiliateId);\n\t\t\t\tif (affiliate != null && affiliate.Active && !affiliate.Deleted)\n\t\t\t\t\taffiliateId = affiliate.Id;\n                //customer currency\n                string customerCurrencyCode = \"\";\n                decimal customerCurrencyRate = decimal.Zero;\n                if (!processPaymentRequest.IsRecurringPayment)\n                {\n\t\t\t\t\tvar currencyTmp = _currencyService.GetCurrencyById(customer.GetAttribute<int>(SystemCustomerAttributeNames.CurrencyId, processPaymentRequest.StoreId));\n\t\t\t\t\tvar customerCurrency = (currencyTmp != null && currencyTmp.Published) ? currencyTmp : _workContext.WorkingCurrency;\n                    customerCurrencyCode = customerCurrency.CurrencyCode;\n                    var primaryStoreCurrency = _storeContext.CurrentStore.PrimaryStoreCurrency;\n                    customerCurrencyRate = customerCurrency.Rate / primaryStoreCurrency.Rate;\n                }\n                else\n                {\n                    customerCurrencyCode = initialOrder.CustomerCurrencyCode;\n                    customerCurrencyRate = initialOrder.CurrencyRate;\n                }\n                //customer language\n                Language customerLanguage = null;\n                if (!processPaymentRequest.IsRecurringPayment)\n\t\t\t\t{\n\t\t\t\t\tcustomerLanguage = _languageService.GetLanguageById(customer.GetAttribute<int>(\n\t\t\t\t\t\tSystemCustomerAttributeNames.LanguageId, processPaymentRequest.StoreId));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcustomerLanguage = _languageService.GetLanguageById(initialOrder.CustomerLanguageId);\n\t\t\t\t}\n                if (customerLanguage == null || !customerLanguage.Published)\n                    customerLanguage = _workContext.WorkingLanguage;\n                //check whether customer is guest\n                if (customer.IsGuest() && !_orderSettings.AnonymousCheckoutAllowed)\n                    throw new SmartException(\"Anonymous checkout is not allowed\");\n\t\t\t\tvar storeId = _storeContext.CurrentStore.Id;\n                \n                //load and validate customer shopping cart\n                IList<OrganizedShoppingCartItem> cart = null;\n                if (!processPaymentRequest.IsRecurringPayment)\n                {\n                    //load shopping cart\n\t\t\t\t\tcart = customer.GetCartItems(ShoppingCartType.ShoppingCart, processPaymentRequest.StoreId);\n                    if (cart.Count == 0)\n                        throw new SmartException(\"Cart is empty\");\n                    //validate the entire shopping cart\n\t\t\t\t\tvar warnings = _shoppingCartService.GetShoppingCartWarnings(cart,\n\t\t\t\t\t\tcustomer.GetAttribute<string>(SystemCustomerAttributeNames.CheckoutAttributes), true);\n                    if (warnings.Count > 0)\n                    {\n                        var warningsSb = new StringBuilder();\n                        foreach (string warning in warnings)\n                        {\n                            warningsSb.Append(warning);\n                            warningsSb.Append(\";\");\n                        }\n                        throw new SmartException(warningsSb.ToString());\n                    }\n                    //validate individual cart items\n                    foreach (var sci in cart)\n                    {\n                        var sciWarnings = _shoppingCartService.GetShoppingCartItemWarnings(customer, sci.Item.ShoppingCartType,\n\t\t\t\t\t\t\tsci.Item.Product, processPaymentRequest.StoreId, sci.Item.AttributesXml,\n                            sci.Item.CustomerEnteredPrice, sci.Item.Quantity, false, childItems: sci.ChildItems);\n                        if (sciWarnings.Count > 0)\n                        {\n                            var warningsSb = new StringBuilder();\n                            foreach (string warning in sciWarnings)\n                            {\n                                warningsSb.Append(warning);\n                                warningsSb.Append(\";\");\n                            }\n                            throw new SmartException(warningsSb.ToString());\n                        }\n                    }\n                }\n                //min totals validation\n                if (!processPaymentRequest.IsRecurringPayment)\n                {\n                    bool minOrderSubtotalAmountOk = ValidateMinOrderSubtotalAmount(cart);\n                    if (!minOrderSubtotalAmountOk)\n                    {\n                        decimal minOrderSubtotalAmount = _currencyService.ConvertFromPrimaryStoreCurrency(_orderSettings.MinOrderSubtotalAmount, _workContext.WorkingCurrency);\n                        throw new SmartException(string.Format(_localizationService.GetResource(\"Checkout.MinOrderSubtotalAmount\"), _priceFormatter.FormatPrice(minOrderSubtotalAmount, true, false)));\n                    }\n                    bool minOrderTotalAmountOk = ValidateMinOrderTotalAmount(cart);\n                    if (!minOrderTotalAmountOk)\n                    {\n                        decimal minOrderTotalAmount = _currencyService.ConvertFromPrimaryStoreCurrency(_orderSettings.MinOrderTotalAmount, _workContext.WorkingCurrency);\n                        throw new SmartException(string.Format(_localizationService.GetResource(\"Checkout.MinOrderTotalAmount\"), _priceFormatter.FormatPrice(minOrderTotalAmount, true, false)));\n                    }\n                }\n                \n                //tax display type\n                var customerTaxDisplayType = TaxDisplayType.IncludingTax;\n                if (!processPaymentRequest.IsRecurringPayment)\n                {\n\t\t\t\t\tcustomerTaxDisplayType = _workContext.GetTaxDisplayTypeFor(customer, processPaymentRequest.StoreId);\n                }\n                else\n                {\n                    customerTaxDisplayType = initialOrder.CustomerTaxDisplayType;\n                }\n                //checkout attributes\n                string checkoutAttributeDescription, checkoutAttributesXml;\n                if (!processPaymentRequest.IsRecurringPayment)\n                {\n\t\t\t\t\tcheckoutAttributesXml = customer.GetAttribute<string>(SystemCustomerAttributeNames.CheckoutAttributes);\n\t\t\t\t\tcheckoutAttributeDescription = _checkoutAttributeFormatter.FormatAttributes(checkoutAttributesXml, customer);\n                }\n                else\n                {\n\t\t\t\t\tcheckoutAttributesXml = initialOrder.CheckoutAttributesXml;\n                    checkoutAttributeDescription = initialOrder.CheckoutAttributeDescription;\n                }\n                //applied discount (used to store discount usage history)\n                var appliedDiscounts = new List<Discount>();\n                //sub total\n                decimal orderSubTotalInclTax, orderSubTotalExclTax;\n                decimal orderSubTotalDiscountInclTax = 0, orderSubTotalDiscountExclTax = 0;\n                if (!processPaymentRequest.IsRecurringPayment)\n                {\n                    //sub total (incl tax)\n                    decimal orderSubTotalDiscountAmount1 = decimal.Zero;\n                    Discount orderSubTotalAppliedDiscount1 = null;\n                    decimal subTotalWithoutDiscountBase1 = decimal.Zero;\n                    decimal subTotalWithDiscountBase1 = decimal.Zero;\n                    _orderTotalCalculationService.GetShoppingCartSubTotal(cart,\n                        true, out orderSubTotalDiscountAmount1, out orderSubTotalAppliedDiscount1, out subTotalWithoutDiscountBase1, out subTotalWithDiscountBase1);\n                    orderSubTotalInclTax = subTotalWithoutDiscountBase1;\n                    orderSubTotalDiscountInclTax = orderSubTotalDiscountAmount1;\n                    //discount history\n                    if (orderSubTotalAppliedDiscount1 != null && !appliedDiscounts.Any(x => x.Id == orderSubTotalAppliedDiscount1.Id))\n                        appliedDiscounts.Add(orderSubTotalAppliedDiscount1);\n                    //sub total (excl tax)\n                    decimal orderSubTotalDiscountAmount2 = decimal.Zero;\n                    Discount orderSubTotalAppliedDiscount2 = null;\n                    decimal subTotalWithoutDiscountBase2 = decimal.Zero;\n                    decimal subTotalWithDiscountBase2 = decimal.Zero;\n                    _orderTotalCalculationService.GetShoppingCartSubTotal(cart,\n                        false, out orderSubTotalDiscountAmount2, out orderSubTotalAppliedDiscount2, out subTotalWithoutDiscountBase2, out subTotalWithDiscountBase2);\n                    orderSubTotalExclTax = subTotalWithoutDiscountBase2;\n                    orderSubTotalDiscountExclTax = orderSubTotalDiscountAmount2;\n                }\n                else\n                {\n                    orderSubTotalInclTax = initialOrder.OrderSubtotalInclTax;\n                    orderSubTotalExclTax = initialOrder.OrderSubtotalExclTax;\n                }\n                //shipping info\n                bool shoppingCartRequiresShipping = false;\n                if (!processPaymentRequest.IsRecurringPayment)\n                {\n                    shoppingCartRequiresShipping = cart.RequiresShipping();\n                }\n                else\n                {\n                    shoppingCartRequiresShipping = initialOrder.ShippingStatus != ShippingStatus.ShippingNotRequired;\n                }\n                string shippingMethodName = \"\", shippingRateComputationMethodSystemName = \"\";\n                if (shoppingCartRequiresShipping)\n                {\n                    if (!processPaymentRequest.IsRecurringPayment)\n                    {\n\t\t\t\t\t\tvar shippingOption = customer.GetAttribute<ShippingOption>(SystemCustomerAttributeNames.SelectedShippingOption, processPaymentRequest.StoreId);\n                        if (shippingOption != null)\n                        {\n                            shippingMethodName = shippingOption.Name;\n                            shippingRateComputationMethodSystemName = shippingOption.ShippingRateComputationMethodSystemName;\n                        }\n                    }\n                    else\n                    {\n                        shippingMethodName = initialOrder.ShippingMethod;\n                        shippingRateComputationMethodSystemName = initialOrder.ShippingRateComputationMethodSystemName;\n                    }\n                }\n                //shipping total\n                decimal? orderShippingTotalInclTax, orderShippingTotalExclTax = null;\n\t\t\t\tdecimal orderShippingTaxRate = decimal.Zero;\n                if (!processPaymentRequest.IsRecurringPayment)\n                {\n                    Discount shippingTotalDiscount = null;\n                    orderShippingTotalInclTax = _orderTotalCalculationService.GetShoppingCartShippingTotal(cart, true, out orderShippingTaxRate, out shippingTotalDiscount);\n                    orderShippingTotalExclTax = _orderTotalCalculationService.GetShoppingCartShippingTotal(cart, false);\n                    if (!orderShippingTotalInclTax.HasValue || !orderShippingTotalExclTax.HasValue)\n                        throw new SmartException(\"Shipping total couldn't be calculated\");\n                    if (shippingTotalDiscount != null && !appliedDiscounts.Any(x => x.Id == shippingTotalDiscount.Id))\n                        appliedDiscounts.Add(shippingTotalDiscount);\n                }\n                else\n                {\n                    orderShippingTotalInclTax = initialOrder.OrderShippingInclTax;\n                    orderShippingTotalExclTax = initialOrder.OrderShippingExclTax;\n\t\t\t\t\torderShippingTaxRate = initialOrder.OrderShippingTaxRate;\n                }\n                //payment total\n\t\t\t\tdecimal paymentAdditionalFeeInclTax, paymentAdditionalFeeExclTax, paymentAdditionalFeeTaxRate;\n                if (!processPaymentRequest.IsRecurringPayment)\n                {\n                    decimal paymentAdditionalFee = _paymentService.GetAdditionalHandlingFee(cart, processPaymentRequest.PaymentMethodSystemName);\n                    paymentAdditionalFeeInclTax = _taxService.GetPaymentMethodAdditionalFee(paymentAdditionalFee, true, customer, out paymentAdditionalFeeTaxRate);\n                    paymentAdditionalFeeExclTax = _taxService.GetPaymentMethodAdditionalFee(paymentAdditionalFee, false, customer);\n                }\n                else\n                {\n                    paymentAdditionalFeeInclTax = initialOrder.PaymentMethodAdditionalFeeInclTax;\n                    paymentAdditionalFeeExclTax = initialOrder.PaymentMethodAdditionalFeeExclTax;\n\t\t\t\t\tpaymentAdditionalFeeTaxRate = initialOrder.PaymentMethodAdditionalFeeTaxRate;\n                }\n                //tax total\n                decimal orderTaxTotal = decimal.Zero;\n                string vatNumber = \"\", taxRates = \"\";\n                if (!processPaymentRequest.IsRecurringPayment)\n                {\n                    //tax amount\n                    SortedDictionary<decimal, decimal> taxRatesDictionary = null;\n                    orderTaxTotal = _orderTotalCalculationService.GetTaxTotal(cart, out taxRatesDictionary);\n                    //VAT number\n\t\t\t\t\tvar customerVatStatus = (VatNumberStatus)customer.GetAttribute<int>(SystemCustomerAttributeNames.VatNumberStatusId);\n\t\t\t\t\tif (_taxSettings.EuVatEnabled && customerVatStatus == VatNumberStatus.Valid)\n\t\t\t\t\t\tvatNumber = customer.GetAttribute<string>(SystemCustomerAttributeNames.VatNumber);\n                    //tax rates\n                    foreach (var kvp in taxRatesDictionary)\n                    {\n                        var taxRate = kvp.Key;\n                        var taxValue = kvp.Value;\n                        taxRates += string.Format(\"{0}:{1};   \", taxRate.ToString(CultureInfo.InvariantCulture), taxValue.ToString(CultureInfo.InvariantCulture));\n                    }\n                }\n                else\n                {\n                    orderTaxTotal = initialOrder.OrderTax;\n                    //VAT number\n                    vatNumber = initialOrder.VatNumber;\n                }\n\t\t\t\tprocessPaymentRequest.OrderTax = orderTaxTotal;\n                //order total (and applied discounts, gift cards, reward points)\n                decimal? orderTotal = null;\n                decimal orderDiscountAmount = decimal.Zero;\n                List<AppliedGiftCard> appliedGiftCards = null;\n                int redeemedRewardPoints = 0;\n                decimal redeemedRewardPointsAmount = decimal.Zero;\n                if (!processPaymentRequest.IsRecurringPayment)\n                {\n                    Discount orderAppliedDiscount = null;\n                    orderTotal = _orderTotalCalculationService.GetShoppingCartTotal(cart,\n                        out orderDiscountAmount, out orderAppliedDiscount, out appliedGiftCards,\n                        out redeemedRewardPoints, out redeemedRewardPointsAmount);\n                    if (!orderTotal.HasValue)\n                        throw new SmartException(\"Order total couldn't be calculated\");\n                    //discount history\n                    if (orderAppliedDiscount != null && !appliedDiscounts.Any(x => x.Id == orderAppliedDiscount.Id))\n                        appliedDiscounts.Add(orderAppliedDiscount);\n                }\n                else\n                {\n                    orderDiscountAmount = initialOrder.OrderDiscount;\n                    orderTotal = initialOrder.OrderTotal;\n                }\n                processPaymentRequest.OrderTotal = orderTotal.Value;\n                #endregion\n\t\t\t\t#region Addresses & pre payment workflow\n\t\t\t\t\n\t\t\t\t// give payment processor the opportunity to fullfill billing address\n\t\t\t\tvar preProcessPaymentResult = _paymentService.PreProcessPayment(processPaymentRequest);\n\t\t\t\tif (!preProcessPaymentResult.Success)\n\t\t\t\t{\n\t\t\t\t\tresult.Errors.AddRange(preProcessPaymentResult.Errors);\n\t\t\t\t\tresult.Errors.Add(_localizationService.GetResource(\"Common.Error.PreProcessPayment\"));\n\t\t\t\t\treturn result;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tAddress billingAddress = null;\n\t\t\t\tif (!processPaymentRequest.IsRecurringPayment)\n\t\t\t\t{\n\t\t\t\t\tif (customer.BillingAddress == null)\n\t\t\t\t\t\tthrow new SmartException(\"Billing address is not provided\");\n\t\t\t\t\tif (!customer.BillingAddress.Email.IsEmail())\n\t\t\t\t\t\tthrow new SmartException(\"Email is not valid\");\n\t\t\t\t\tbillingAddress = (Address)customer.BillingAddress.Clone();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (initialOrder.BillingAddress == null)\n\t\t\t\t\t\tthrow new SmartException(\"Billing address is not available\");\n\t\t\t\t\tbillingAddress = (Address)initialOrder.BillingAddress.Clone();\n\t\t\t\t}\n\t\t\t\tif (billingAddress.Country != null && !billingAddress.Country.AllowsBilling)\n\t\t\t\t\tthrow new SmartException(string.Format(\"Country '{0}' is not allowed for billing\", billingAddress.Country.Name));\n\t\t\t\tAddress shippingAddress = null;\n\t\t\t\tif (shoppingCartRequiresShipping)\n\t\t\t\t{\n\t\t\t\t\tif (!processPaymentRequest.IsRecurringPayment)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (customer.ShippingAddress == null)\n\t\t\t\t\t\t\tthrow new SmartException(\"Shipping address is not provided\");\n\t\t\t\t\t\tif (!customer.ShippingAddress.Email.IsEmail())\n\t\t\t\t\t\t\tthrow new SmartException(\"Email is not valid\");\n\t\t\t\t\t\tshippingAddress = (Address)customer.ShippingAddress.Clone();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (initialOrder.ShippingAddress == null)\n\t\t\t\t\t\t\tthrow new SmartException(\"Shipping address is not available\");\n\t\t\t\t\t\tshippingAddress = (Address)initialOrder.ShippingAddress.Clone();\n\t\t\t\t\t}\n\t\t\t\t\tif (shippingAddress.Country != null && !shippingAddress.Country.AllowsShipping)\n\t\t\t\t\t\tthrow new SmartException(string.Format(\"Country '{0}' is not allowed for shipping\", shippingAddress.Country.Name));\n\t\t\t\t}\n\t\t\t\t#endregion\n\t\t\t\t#region Payment workflow\n\t\t\t\t//skip payment workflow if order total equals zero\n                bool skipPaymentWorkflow = false;\n                if (orderTotal.Value == decimal.Zero)\n                    skipPaymentWorkflow = true;\n                //payment workflow\n                Provider<IPaymentMethod> paymentMethod = null;\n\t\t\t\tif (!skipPaymentWorkflow)\n\t\t\t\t{\n\t\t\t\t\tpaymentMethod = _paymentService.LoadPaymentMethodBySystemName(processPaymentRequest.PaymentMethodSystemName);\n\t\t\t\t\tif (paymentMethod == null)\n\t\t\t\t\t\tthrow new SmartException(\"Payment method couldn't be loaded\");\n\t\t\t\t\t//ensure that payment method is active\n\t\t\t\t\tif (!paymentMethod.IsPaymentMethodActive(_paymentSettings))\n\t\t\t\t\t\tthrow new SmartException(\"Payment method is not active\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprocessPaymentRequest.PaymentMethodSystemName = \"\";\n\t\t\t\t}\n                //recurring or standard shopping cart?\n                bool isRecurringShoppingCart = false;\n\t\t\t\tif (!processPaymentRequest.IsRecurringPayment)\n\t\t\t\t{\n\t\t\t\t\tisRecurringShoppingCart = cart.IsRecurring();\n\t\t\t\t\tif (isRecurringShoppingCart)\n\t\t\t\t\t{\n\t\t\t\t\t\tint recurringCycleLength = 0;\n\t\t\t\t\t\tRecurringProductCyclePeriod recurringCyclePeriod;\n\t\t\t\t\t\tint recurringTotalCycles = 0;\n\t\t\t\t\t\tstring recurringCyclesError = cart.GetRecurringCycleInfo(_localizationService, out recurringCycleLength, out recurringCyclePeriod, out recurringTotalCycles);\n\t\t\t\t\t\tif (!string.IsNullOrEmpty(recurringCyclesError))\n\t\t\t\t\t\t\tthrow new SmartException(recurringCyclesError);\n\t\t\t\t\t\tprocessPaymentRequest.RecurringCycleLength = recurringCycleLength;\n\t\t\t\t\t\tprocessPaymentRequest.RecurringCyclePeriod = recurringCyclePeriod;\n\t\t\t\t\t\tprocessPaymentRequest.RecurringTotalCycles = recurringTotalCycles;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tisRecurringShoppingCart = true;\n\t\t\t\t}\n                //process payment\n                ProcessPaymentResult processPaymentResult = null;\n                if (!skipPaymentWorkflow)\n                {\n                    if (!processPaymentRequest.IsRecurringPayment)\n                    {\n                        if (isRecurringShoppingCart)\n                        {\n                            //recurring cart\n                            var recurringPaymentType = _paymentService.GetRecurringPaymentType(processPaymentRequest.PaymentMethodSystemName);\n                            switch (recurringPaymentType)\n                            {\n                                case RecurringPaymentType.NotSupported:\n                                    throw new SmartException(\"Recurring payments are not supported by selected payment method\");\n                                case RecurringPaymentType.Manual:\n                                case RecurringPaymentType.Automatic:\n                                    processPaymentResult = _paymentService.ProcessRecurringPayment(processPaymentRequest);\n                                    break;\n                                default:\n                                    throw new SmartException(\"Not supported recurring payment type\");\n                            }\n                        }\n                        else\n                        {\n                            //standard cart\n                            processPaymentResult = _paymentService.ProcessPayment(processPaymentRequest);\n                        }\n                    }\n                    else\n                    {\n                        if (isRecurringShoppingCart)\n                        {\n                            //Old credit card info\n                            processPaymentRequest.CreditCardType = initialOrder.AllowStoringCreditCardNumber ? _encryptionService.DecryptText(initialOrder.CardType) : \"\";\n                            processPaymentRequest.CreditCardName = initialOrder.AllowStoringCreditCardNumber ? _encryptionService.DecryptText(initialOrder.CardName) : \"\";\n                            processPaymentRequest.CreditCardNumber = initialOrder.AllowStoringCreditCardNumber ? _encryptionService.DecryptText(initialOrder.CardNumber) : \"\";\n                            //MaskedCreditCardNumber \n                            processPaymentRequest.CreditCardCvv2 = initialOrder.AllowStoringCreditCardNumber ? _encryptionService.DecryptText(initialOrder.CardCvv2) : \"\";\n                            try\n                            {\n                                processPaymentRequest.CreditCardExpireMonth = initialOrder.AllowStoringCreditCardNumber ? Convert.ToInt32(_encryptionService.DecryptText(initialOrder.CardExpirationMonth)) : 0;\n                                processPaymentRequest.CreditCardExpireYear = initialOrder.AllowStoringCreditCardNumber ? Convert.ToInt32(_encryptionService.DecryptText(initialOrder.CardExpirationYear)) : 0;\n                            }\n                            catch {}\n                            var recurringPaymentType = _paymentService.GetRecurringPaymentType(processPaymentRequest.PaymentMethodSystemName);\n                            switch (recurringPaymentType)\n                            {\n                                case RecurringPaymentType.NotSupported:\n                                    throw new SmartException(\"Recurring payments are not supported by selected payment method\");\n                                case RecurringPaymentType.Manual:\n                                    processPaymentResult = _paymentService.ProcessRecurringPayment(processPaymentRequest);\n                                    break;\n                                case RecurringPaymentType.Automatic:\n                                    //payment is processed on payment gateway site\n                                    processPaymentResult = new ProcessPaymentResult();\n                                    break;\n                                default:\n                                    throw new SmartException(\"Not supported recurring payment type\");\n                            }\n                        }\n                        else\n                        {\n                            throw new SmartException(\"No recurring products\");\n                        }\n                    }\n                }\n                else\n                {\n                    //payment is not required\n                    if (processPaymentResult == null)\n                        processPaymentResult = new ProcessPaymentResult();\n                    processPaymentResult.NewPaymentStatus = PaymentStatus.Paid;\n                }\n                if (processPaymentResult == null)\n                    throw new SmartException(\"processPaymentResult is not available\");\n                #endregion\n                if (processPaymentResult.Success)\n                {\n                    //save order in data storage\n                    //uncomment this line to support transactions\n                    //using (var scope = new System.Transactions.TransactionScope())\n                    {\n                        #region Save order details\n                        var shippingStatus = ShippingStatus.NotYetShipped;\n                        if (!shoppingCartRequiresShipping)\n                            shippingStatus = ShippingStatus.ShippingNotRequired;\n                        \n                        var order = new Order()\n                        {\n\t\t\t\t\t\t\tStoreId = processPaymentRequest.StoreId,\n                            OrderGuid = processPaymentRequest.OrderGuid,\n                            CustomerId = customer.Id,\n                            CustomerLanguageId = customerLanguage.Id,\n                            CustomerTaxDisplayType = customerTaxDisplayType,\n                            CustomerIp = _webHelper.GetCurrentIpAddress(),\n                            OrderSubtotalInclTax = orderSubTotalInclTax,\n                            OrderSubtotalExclTax = orderSubTotalExclTax,\n                            OrderSubTotalDiscountInclTax = orderSubTotalDiscountInclTax,\n                            OrderSubTotalDiscountExclTax = orderSubTotalDiscountExclTax,\n                            OrderShippingInclTax = orderShippingTotalInclTax.Value,\n                            OrderShippingExclTax = orderShippingTotalExclTax.Value,\n\t\t\t\t\t\t\tOrderShippingTaxRate = orderShippingTaxRate,\n                            PaymentMethodAdditionalFeeInclTax = paymentAdditionalFeeInclTax,\n                            PaymentMethodAdditionalFeeExclTax = paymentAdditionalFeeExclTax,\n\t\t\t\t\t\t\tPaymentMethodAdditionalFeeTaxRate = paymentAdditionalFeeTaxRate,\n                            TaxRates = taxRates,\n                            OrderTax = orderTaxTotal,\n                            OrderTotal = orderTotal.Value,\n                            RefundedAmount = decimal.Zero,\n                            OrderDiscount = orderDiscountAmount,\n                            CheckoutAttributeDescription = checkoutAttributeDescription,\n                            CheckoutAttributesXml = checkoutAttributesXml,\n                            CustomerCurrencyCode = customerCurrencyCode,\n                            CurrencyRate = customerCurrencyRate,\n\t\t\t\t\t\t\tAffiliateId = affiliateId,\n                            OrderStatus = OrderStatus.Pending,\n                            AllowStoringCreditCardNumber = processPaymentResult.AllowStoringCreditCardNumber,\n                            CardType = processPaymentResult.AllowStoringCreditCardNumber ? _encryptionService.EncryptText(processPaymentRequest.CreditCardType) : string.Empty,\n                            CardName = processPaymentResult.AllowStoringCreditCardNumber ? _encryptionService.EncryptText(processPaymentRequest.CreditCardName) : string.Empty,\n                            CardNumber = processPaymentResult.AllowStoringCreditCardNumber ? _encryptionService.EncryptText(processPaymentRequest.CreditCardNumber) : string.Empty,\n                            MaskedCreditCardNumber = _encryptionService.EncryptText(_paymentService.GetMaskedCreditCardNumber(processPaymentRequest.CreditCardNumber)),\n                            CardCvv2 = processPaymentResult.AllowStoringCreditCardNumber ? _encryptionService.EncryptText(processPaymentRequest.CreditCardCvv2) : string.Empty,\n                            CardExpirationMonth = processPaymentResult.AllowStoringCreditCardNumber ? _encryptionService.EncryptText(processPaymentRequest.CreditCardExpireMonth.ToString()) : string.Empty,\n                            CardExpirationYear = processPaymentResult.AllowStoringCreditCardNumber ? _encryptionService.EncryptText(processPaymentRequest.CreditCardExpireYear.ToString()) : string.Empty,\n                            AllowStoringDirectDebit = processPaymentResult.AllowStoringDirectDebit,\n                            DirectDebitAccountHolder = processPaymentResult.AllowStoringDirectDebit ? _encryptionService.EncryptText(processPaymentRequest.DirectDebitAccountHolder) : string.Empty,\n                            DirectDebitAccountNumber = processPaymentResult.AllowStoringDirectDebit ? _encryptionService.EncryptText(processPaymentRequest.DirectDebitAccountNumber) : string.Empty,\n                            DirectDebitBankCode = processPaymentResult.AllowStoringDirectDebit ? _encryptionService.EncryptText(processPaymentRequest.DirectDebitBankCode) : string.Empty,\n                            DirectDebitBankName = processPaymentResult.AllowStoringDirectDebit ? _encryptionService.EncryptText(processPaymentRequest.DirectDebitBankName) : string.Empty,\n                            DirectDebitBIC = processPaymentResult.AllowStoringDirectDebit ? _encryptionService.EncryptText(processPaymentRequest.DirectDebitBic) : string.Empty,\n                            DirectDebitCountry = processPaymentResult.AllowStoringDirectDebit ? _encryptionService.EncryptText(processPaymentRequest.DirectDebitCountry) : string.Empty,\n                            DirectDebitIban = processPaymentResult.AllowStoringDirectDebit ? _encryptionService.EncryptText(processPaymentRequest.DirectDebitIban) : string.Empty,\n                            PaymentMethodSystemName = processPaymentRequest.PaymentMethodSystemName,\n                            AuthorizationTransactionId = processPaymentResult.AuthorizationTransactionId,\n                            AuthorizationTransactionCode = processPaymentResult.AuthorizationTransactionCode,\n                            AuthorizationTransactionResult = processPaymentResult.AuthorizationTransactionResult,\n                            CaptureTransactionId = processPaymentResult.CaptureTransactionId,\n                            CaptureTransactionResult = processPaymentResult.CaptureTransactionResult,\n                            SubscriptionTransactionId = processPaymentResult.SubscriptionTransactionId,\n                            PurchaseOrderNumber = processPaymentRequest.PurchaseOrderNumber,\n                            PaymentStatus = processPaymentResult.NewPaymentStatus,\n                            PaidDateUtc = null,\n                            BillingAddress = billingAddress,\n                            ShippingAddress = shippingAddress,\n                            ShippingStatus = shippingStatus,\n                            ShippingMethod = shippingMethodName,\n                            ShippingRateComputationMethodSystemName = shippingRateComputationMethodSystemName,\n                            VatNumber = vatNumber,\n\t\t\t\t\t\t\tCreatedOnUtc = utcNow,\n\t\t\t\t\t\t\tUpdatedOnUtc = utcNow,\n                            CustomerOrderComment = extraData.ContainsKey(\"CustomerComment\") ? extraData[\"CustomerComment\"] : \"\"\n                        };\n                        _orderService.InsertOrder(order);\n                        result.PlacedOrder = order;\n                        if (!processPaymentRequest.IsRecurringPayment)\n                        {\n                            //move shopping cart items to order products\n                            foreach (var sc in cart)\n                            {\n\t\t\t\t\t\t\t\tsc.Item.Product.MergeWithCombination(sc.Item.AttributesXml);\n                                //prices\n                                decimal taxRate = decimal.Zero;\n\t\t\t\t\t\t\t\tdecimal unitPriceTaxRate = decimal.Zero;\n                                decimal scUnitPrice = _priceCalculationService.GetUnitPrice(sc, true);\n                                decimal scSubTotal = _priceCalculationService.GetSubTotal(sc, true);\n\t\t\t\t\t\t\t\tdecimal scUnitPriceInclTax = _taxService.GetProductPrice(sc.Item.Product, scUnitPrice, true, customer, out unitPriceTaxRate);\n                                decimal scUnitPriceExclTax = _taxService.GetProductPrice(sc.Item.Product, scUnitPrice, false, customer, out taxRate);\n                                decimal scSubTotalInclTax = _taxService.GetProductPrice(sc.Item.Product, scSubTotal, true, customer, out taxRate);\n                                decimal scSubTotalExclTax = _taxService.GetProductPrice(sc.Item.Product, scSubTotal, false, customer, out taxRate);\n                                //discounts\n                                Discount scDiscount = null;\n                                decimal discountAmount = _priceCalculationService.GetDiscountAmount(sc, out scDiscount);\n                                decimal discountAmountInclTax = _taxService.GetProductPrice(sc.Item.Product, discountAmount, true, customer, out taxRate);\n                                decimal discountAmountExclTax = _taxService.GetProductPrice(sc.Item.Product, discountAmount, false, customer, out taxRate);\n                                \n\t\t\t\t\t\t\t\tif (scDiscount != null && !appliedDiscounts.Any(x => x.Id == scDiscount.Id))\n                                    appliedDiscounts.Add(scDiscount);\n                                //attributes\n                                string attributeDescription = _productAttributeFormatter.FormatAttributes(sc.Item.Product, sc.Item.AttributesXml, customer);\n                                var itemWeight = _shippingService.GetShoppingCartItemWeight(sc);\n                                //save order item\n                                var orderItem = new OrderItem\n                                {\n                                    OrderItemGuid = Guid.NewGuid(),\n                                    Order = order,\n                                    ProductId = sc.Item.ProductId,\n                                    UnitPriceInclTax = scUnitPriceInclTax,\n                                    UnitPriceExclTax = scUnitPriceExclTax,\n                                    PriceInclTax = scSubTotalInclTax,\n                                    PriceExclTax = scSubTotalExclTax,\n\t\t\t\t\t\t\t\t\tTaxRate = unitPriceTaxRate,\n                                    AttributeDescription = attributeDescription,\n                                    AttributesXml = sc.Item.AttributesXml,\n                                    Quantity = sc.Item.Quantity,\n                                    DiscountAmountInclTax = discountAmountInclTax,\n                                    DiscountAmountExclTax = discountAmountExclTax,\n                                    DownloadCount = 0,\n                                    IsDownloadActivated = false,\n                                    LicenseDownloadId = 0,\n                                    ItemWeight = itemWeight,\n\t\t\t\t\t\t\t\t\tProductCost = _priceCalculationService.GetProductCost(sc.Item.Product, sc.Item.AttributesXml)\n                                };\n\t\t\t\t\t\t\t\tif (sc.Item.Product.ProductType == ProductType.BundledProduct && sc.ChildItems != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar listBundleData = new List<ProductBundleItemOrderData>();\n\t\t\t\t\t\t\t\t\tforeach (var childItem in sc.ChildItems)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdecimal bundleItemSubTotal = _taxService.GetProductPrice(childItem.Item.Product, _priceCalculationService.GetSubTotal(childItem, true), out taxRate);\n\t\t\t\t\t\t\t\t\t\tstring attributesInfo = _productAttributeFormatter.FormatAttributes(childItem.Item.Product, childItem.Item.AttributesXml, order.Customer,\n\t\t\t\t\t\t\t\t\t\t\trenderPrices: false, allowHyperlinks: false);\n\t\t\t\t\t\t\t\t\t\tchildItem.BundleItemData.ToOrderData(listBundleData, bundleItemSubTotal, childItem.Item.AttributesXml, attributesInfo);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\torderItem.SetBundleData(listBundleData);\n\t\t\t\t\t\t\t\t}\n                                order.OrderItems.Add(orderItem);\n                                _orderService.UpdateOrder(order);\n                                //gift cards\n                                if (sc.Item.Product.IsGiftCard)\n                                {\n                                    string giftCardRecipientName, giftCardRecipientEmail,\n                                        giftCardSenderName, giftCardSenderEmail, giftCardMessage;\n                                    _productAttributeParser.GetGiftCardAttribute(sc.Item.AttributesXml,\n                                        out giftCardRecipientName, out giftCardRecipientEmail,\n                                        out giftCardSenderName, out giftCardSenderEmail, out giftCardMessage);\n                                    for (int i = 0; i < sc.Item.Quantity; i++)\n                                    {\n                                        var gc = new GiftCard\n                                        {\n                                            GiftCardType = sc.Item.Product.GiftCardType,\n                                            PurchasedWithOrderItem = orderItem,\n                                            Amount = scUnitPriceExclTax,\n                                            IsGiftCardActivated = false,\n                                            GiftCardCouponCode = _giftCardService.GenerateGiftCardCode(),\n                                            RecipientName = giftCardRecipientName,\n                                            RecipientEmail = giftCardRecipientEmail,\n                                            SenderName = giftCardSenderName,\n                                            SenderEmail = giftCardSenderEmail,\n                                            Message = giftCardMessage,\n                                            IsRecipientNotified = false,\n\t\t\t\t\t\t\t\t\t\t\tCreatedOnUtc = utcNow\n                                        };\n                                        _giftCardService.InsertGiftCard(gc);\n                                    }\n                                }\n                                //inventory\n\t\t\t\t\t\t\t\t_productService.AdjustInventory(sc, true);\n                            }\n                            //clear shopping cart\n                            cart.ToList().ForEach(sci => _shoppingCartService.DeleteShoppingCartItem(sci.Item, false));\n                        }\n                        else\n                        {\n                            //recurring payment\n                            var initialOrderItems = initialOrder.OrderItems;\n                            foreach (var orderItem in initialOrderItems)\n                            {\n                                //save item\n                                var newOrderItem = new OrderItem()\n                                {\n                                    OrderItemGuid = Guid.NewGuid(),\n                                    Order = order,\n                                    ProductId = orderItem.ProductId,\n                                    UnitPriceInclTax = orderItem.UnitPriceInclTax,\n                                    UnitPriceExclTax = orderItem.UnitPriceExclTax,\n                                    PriceInclTax = orderItem.PriceInclTax,\n                                    PriceExclTax = orderItem.PriceExclTax,\n\t\t\t\t\t\t\t\t\tTaxRate = orderItem.TaxRate,\n                                    AttributeDescription = orderItem.AttributeDescription,\n                                    AttributesXml = orderItem.AttributesXml,\n                                    Quantity = orderItem.Quantity,\n                                    DiscountAmountInclTax = orderItem.DiscountAmountInclTax,\n                                    DiscountAmountExclTax = orderItem.DiscountAmountExclTax,\n                                    DownloadCount = 0,\n                                    IsDownloadActivated = false,\n                                    LicenseDownloadId = 0,\n                                    ItemWeight = orderItem.ItemWeight,\n\t\t\t\t\t\t\t\t\tBundleData = orderItem.BundleData,\n\t\t\t\t\t\t\t\t\tProductCost = orderItem.ProductCost\n                                };\n                                order.OrderItems.Add(newOrderItem);\n                                _orderService.UpdateOrder(order);\n                                //gift cards\n                                if (orderItem.Product.IsGiftCard)\n                                {\n                                    string giftCardRecipientName, giftCardRecipientEmail, giftCardSenderName, giftCardSenderEmail, giftCardMessage;\n                                    _productAttributeParser.GetGiftCardAttribute(orderItem.AttributesXml,\n                                        out giftCardRecipientName, out giftCardRecipientEmail,\n                                        out giftCardSenderName, out giftCardSenderEmail, out giftCardMessage);\n                                    for (int i = 0; i < orderItem.Quantity; i++)\n                                    {\n                                        var gc = new GiftCard()\n                                        {\n                                            GiftCardType = orderItem.Product.GiftCardType,\n                                            PurchasedWithOrderItem = newOrderItem,\n                                            Amount = orderItem.UnitPriceExclTax,\n                                            IsGiftCardActivated = false,\n                                            GiftCardCouponCode = _giftCardService.GenerateGiftCardCode(),\n                                            RecipientName = giftCardRecipientName,\n                                            RecipientEmail = giftCardRecipientEmail,\n                                            SenderName = giftCardSenderName,\n                                            SenderEmail = giftCardSenderEmail,\n                                            Message = giftCardMessage,\n                                            IsRecipientNotified = false,\n\t\t\t\t\t\t\t\t\t\t\tCreatedOnUtc = utcNow\n                                        };\n                                        _giftCardService.InsertGiftCard(gc);\n                                    }\n                                }\n                                //inventory\n\t\t\t\t\t\t\t\t_productService.AdjustInventory(orderItem, true, orderItem.Quantity);\n                            }\n                        }\n                        //discount usage history\n\t\t\t\t\t\tif (!processPaymentRequest.IsRecurringPayment)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach (var discount in appliedDiscounts)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar duh = new DiscountUsageHistory()\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tDiscount = discount,\n\t\t\t\t\t\t\t\t\tOrder = order,\n\t\t\t\t\t\t\t\t\tCreatedOnUtc = utcNow\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t_discountService.InsertDiscountUsageHistory(duh);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n                        //gift card usage history\n\t\t\t\t\t\tif (!processPaymentRequest.IsRecurringPayment && appliedGiftCards != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach (var agc in appliedGiftCards)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdecimal amountUsed = agc.AmountCanBeUsed;\n\t\t\t\t\t\t\t\tvar gcuh = new GiftCardUsageHistory()\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tGiftCard = agc.GiftCard,\n\t\t\t\t\t\t\t\t\tUsedWithOrder = order,\n\t\t\t\t\t\t\t\t\tUsedValue = amountUsed,\n\t\t\t\t\t\t\t\t\tCreatedOnUtc = utcNow\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tagc.GiftCard.GiftCardUsageHistory.Add(gcuh);\n\t\t\t\t\t\t\t\t_giftCardService.UpdateGiftCard(agc.GiftCard);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n                        //reward points history\n                        if (redeemedRewardPointsAmount > decimal.Zero)\n                        {\n                            customer.AddRewardPointsHistoryEntry(-redeemedRewardPoints,\n                                string.Format(_localizationService.GetResource(\"RewardPoints.Message.RedeemedForOrder\", order.CustomerLanguageId), order.GetOrderNumber()),\n                                order,\n                                redeemedRewardPointsAmount);\n                            _customerService.UpdateCustomer(customer);\n                        }\n                        //recurring orders\n                        if (!processPaymentRequest.IsRecurringPayment && isRecurringShoppingCart)\n                        {\n                            //create recurring payment (the first payment)\n                            var rp = new RecurringPayment()\n                            {\n                                CycleLength = processPaymentRequest.RecurringCycleLength,\n                                CyclePeriod = processPaymentRequest.RecurringCyclePeriod,\n                                TotalCycles = processPaymentRequest.RecurringTotalCycles,\n                                StartDateUtc = utcNow,\n                                IsActive = true,\n\t\t\t\t\t\t\t\tCreatedOnUtc = utcNow,\n                                InitialOrder = order,\n                            };\n                            _orderService.InsertRecurringPayment(rp);\n                            var recurringPaymentType = _paymentService.GetRecurringPaymentType(processPaymentRequest.PaymentMethodSystemName);\n                            switch (recurringPaymentType)\n                            {\n                                case RecurringPaymentType.NotSupported:\n                                    {\n                                        //not supported\n                                    }\n                                    break;\n                                case RecurringPaymentType.Manual:\n                                    {\n                                        //first payment\n                                        var rph = new RecurringPaymentHistory()\n                                        {\n                                            RecurringPayment = rp,\n\t\t\t\t\t\t\t\t\t\t\tCreatedOnUtc = utcNow,\n                                            OrderId = order.Id,\n                                        };\n                                        rp.RecurringPaymentHistory.Add(rph);\n                                        _orderService.UpdateRecurringPayment(rp);\n                                    }\n                                    break;\n                                case RecurringPaymentType.Automatic:\n                                    {\n                                        //will be created later (process is automated)\n                                    }\n                                    break;\n                                default:\n                                    break;\n                            }\n                        }\n                        #endregion\n                        #region Notifications, notes and attributes\n                        \n                        //notes, messages\n                        order.OrderNotes.Add(new OrderNote\n                            {\n                                Note = TNote(\"OrderPlaced\"),\n                                DisplayToCustomer = false,\n\t\t\t\t\t\t\t\tCreatedOnUtc = utcNow\n                            });\n                        _orderService.UpdateOrder(order);\n                        //send email notifications\n                        int orderPlacedStoreOwnerNotificationQueuedEmailId = _workflowMessageService.SendOrderPlacedStoreOwnerNotification(order, _localizationSettings.DefaultAdminLanguageId);\n                        if (orderPlacedStoreOwnerNotificationQueuedEmailId > 0)\n                        {\n                            order.OrderNotes.Add(new OrderNote\n                            {\n                                Note = string.Format(TNote(\"MerchantEmailQueued\"), orderPlacedStoreOwnerNotificationQueuedEmailId),\n                                DisplayToCustomer = false,\n\t\t\t\t\t\t\t\tCreatedOnUtc = utcNow\n                            });\n                            _orderService.UpdateOrder(order);\n                        }\n                        int orderPlacedCustomerNotificationQueuedEmailId = _workflowMessageService.SendOrderPlacedCustomerNotification(order, order.CustomerLanguageId);\n                        if (orderPlacedCustomerNotificationQueuedEmailId > 0)\n                        {\n                            order.OrderNotes.Add(new OrderNote\n                            {\n                                Note = string.Format(TNote(\"CustomerEmailQueued\"), orderPlacedCustomerNotificationQueuedEmailId),\n                                DisplayToCustomer = false,\n\t\t\t\t\t\t\t\tCreatedOnUtc = utcNow\n                            });\n                            _orderService.UpdateOrder(order);\n                        }\n                        //check order status\n                        CheckOrderStatus(order);\n                        //reset checkout data\n                        if (!processPaymentRequest.IsRecurringPayment)\n\t\t\t\t\t\t\t_customerService.ResetCheckoutData(customer, processPaymentRequest.StoreId, clearCouponCodes: true, clearCheckoutAttributes: true);\n\t\t\t\t\t\t// check for generic attributes to be inserted automatically\n\t\t\t\t\t\tforeach (var customProperty in processPaymentRequest.CustomProperties.Where(x => x.Key.HasValue() && x.Value.AutoCreateGenericAttribute))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_genericAttributeService.SaveAttribute<object>(order, customProperty.Key, customProperty.Value.Value, order.StoreId);\n\t\t\t\t\t\t}\n                        //uncomment this line to support transactions\n                        //scope.Complete();\n                        //raise event       \n                        _eventPublisher.PublishOrderPlaced(order);\n                        if (!processPaymentRequest.IsRecurringPayment)\n                        {\n                            _customerActivityService.InsertActivity(\n                                \"PublicStore.PlaceOrder\",\n                                _localizationService.GetResource(\"ActivityLog.PublicStore.PlaceOrder\"),\n                                order.GetOrderNumber());\n                        }\n\t\t\t\t\t\t\n                        //raise event         \n                        if (order.PaymentStatus == PaymentStatus.Paid)\n                        {\n                            _eventPublisher.PublishOrderPaid(order);\n                        }\n                        #endregion\n                    }\n                }\n                else\n                {\n                    foreach (var paymentError in processPaymentResult.Errors)\n                        result.AddError(paymentError);\n                }\n            }\n            catch (Exception exc)\n            {\n                _logger.Error(exc.Message, exc);\n                result.AddError(exc.Message);\n            }\n\t\t\tif (result.Errors.Count > 0)\n\t\t\t{\n\t\t\t\t_logger.Error(string.Join(\" \", result.Errors));\n\t\t\t}\n            return result;\n        }\n        /// <summary>\n        /// Deletes an order\n        /// </summary>\n        /// <param name=\"order\">The order</param>\n        public virtual void DeleteOrder(Order order)\n        {\n            if (order == null)\n                throw new ArgumentNullException(\"order\");\n            //reward points\n            ReduceRewardPoints(order);\n            //cancel recurring payments\n            var recurringPayments = _orderService.SearchRecurringPayments(0, 0, order.Id, null);\n            foreach (var rp in recurringPayments)\n            {\n                //use errors?\n                var errors = CancelRecurringPayment(rp);\n            }\n            //Adjust inventory\n\t\t\tforeach (var orderItem in order.OrderItems)\n\t\t\t{\n\t\t\t\t_productService.AdjustInventory(orderItem, false, orderItem.Quantity);\n\t\t\t}\n            //add a note\n            order.OrderNotes.Add(new OrderNote()\n            {\n                Note = TNote(\"OrderDeleted\"),\n                DisplayToCustomer = false,\n                CreatedOnUtc = DateTime.UtcNow\n            });\n            _orderService.UpdateOrder(order);\n            \n            //now delete an order\n            _orderService.DeleteOrder(order);\n        }\n        /// <summary>\n        /// Process next recurring psayment\n        /// </summary>\n        /// <param name=\"recurringPayment\">Recurring payment</param>\n        public virtual void ProcessNextRecurringPayment(RecurringPayment recurringPayment)\n        {\n            if (recurringPayment == null)\n                throw new ArgumentNullException(\"recurringPayment\");\n            try\n            {\n                if (!recurringPayment.IsActive)\n                    throw new SmartException(\"Recurring payment is not active\");\n                var initialOrder = recurringPayment.InitialOrder;\n                if (initialOrder == null)\n                    throw new SmartException(\"Initial order could not be loaded\");\n                var customer = initialOrder.Customer;\n                if (customer == null)\n                    throw new SmartException(\"Customer could not be loaded\");\n                var nextPaymentDate = recurringPayment.NextPaymentDate;\n                if (!nextPaymentDate.HasValue)\n                    throw new SmartException(\"Next payment date could not be calculated\");\n                //payment info\n                var paymentInfo = new ProcessPaymentRequest()\n                {\n\t\t\t\t\tStoreId = initialOrder.StoreId,\n                    CustomerId = customer.Id,\n                    OrderGuid = Guid.NewGuid(),\n                    IsRecurringPayment = true,\n                    InitialOrderId = initialOrder.Id,\n                    RecurringCycleLength = recurringPayment.CycleLength,\n                    RecurringCyclePeriod = recurringPayment.CyclePeriod,\n                    RecurringTotalCycles = recurringPayment.TotalCycles,\n                };\n                //place a new order\n                var result = this.PlaceOrder(paymentInfo, new Dictionary<string, string>());\n                if (result.Success)\n                {\n                    if (result.PlacedOrder == null)\n                        throw new SmartException(\"Placed order could not be loaded\");\n                    var rph = new RecurringPaymentHistory()\n                    {\n                        RecurringPayment = recurringPayment,\n                        CreatedOnUtc = DateTime.UtcNow,\n                        OrderId = result.PlacedOrder.Id,\n                    };\n                    recurringPayment.RecurringPaymentHistory.Add(rph);\n                    _orderService.UpdateRecurringPayment(recurringPayment);\n                }\n                else\n                {\n                    string error = \"\";\n                    for (int i = 0; i < result.Errors.Count; i++)\n                    {\n                        error += string.Format(\"Error {0}: {1}\", i, result.Errors[i]);\n                        if (i != result.Errors.Count - 1)\n                            error += \". \";\n                    }\n                    throw new SmartException(error);\n                }\n            }\n            catch (Exception exc)\n            {\n                _logger.Error(string.Format(\"Error while processing recurring order. {0}\", exc.Message), exc);\n                throw;\n            }\n        }\n        /// <summary>\n        /// Cancels a recurring payment\n        /// </summary>\n        /// <param name=\"recurringPayment\">Recurring payment</param>\n        public virtual IList<string> CancelRecurringPayment(RecurringPayment recurringPayment)\n        {\n            if (recurringPayment == null)\n                throw new ArgumentNullException(\"recurringPayment\");\n            var initialOrder = recurringPayment.InitialOrder;\n            if (initialOrder == null)\n                return new List<string>() { \"Initial order could not be loaded\" };\n            var request = new CancelRecurringPaymentRequest();\n            CancelRecurringPaymentResult result = null;\n            try\n            {\n                request.Order = initialOrder;\n                result = _paymentService.CancelRecurringPayment(request);\n                if (result.Success)\n                {\n                    //update recurring payment\n                    recurringPayment.IsActive = false;\n                    _orderService.UpdateRecurringPayment(recurringPayment);\n                    //add a note\n                    initialOrder.OrderNotes.Add(new OrderNote()\n                    {\n                        Note = TNote(\"RecurringPaymentCancelled\"),\n                        DisplayToCustomer = false,\n                        CreatedOnUtc = DateTime.UtcNow\n                    });\n                    _orderService.UpdateOrder(initialOrder);\n                    //notify a store owner\n                    _workflowMessageService\n                        .SendRecurringPaymentCancelledStoreOwnerNotification(recurringPayment, \n                        _localizationSettings.DefaultAdminLanguageId);\n                }\n            }\n            catch (Exception exc)\n            {\n                if (result == null)\n                    result = new CancelRecurringPaymentResult();\n                result.AddError(string.Format(\"Error: {0}. Full exception: {1}\", exc.Message, exc.ToString()));\n            }\n            //process errors\n            string error = \"\";\n            for (int i = 0; i < result.Errors.Count; i++)\n            {\n                error += string.Format(\"Error {0}: {1}\", i, result.Errors[i]);\n                if (i != result.Errors.Count - 1)\n                    error += \". \";\n            }\n            if (!String.IsNullOrEmpty(error))\n            {\n                //add a note\n                initialOrder.OrderNotes.Add(new OrderNote()\n                {\n                    Note = string.Format(TNote(\"RecurringPaymentCancellationError\"), error),\n                    DisplayToCustomer = false,\n                    CreatedOnUtc = DateTime.UtcNow\n                });\n                _orderService.UpdateOrder(initialOrder);\n                //log it\n                string logError = string.Format(\"Error cancelling recurring payment. Order #{0}. Error: {1}\", initialOrder.Id, error);\n                _logger.InsertLog(LogLevel.Error, logError, logError);\n            }\n            return result.Errors;\n        }\n        /// <summary>\n        /// Gets a value indicating whether a customer can cancel recurring payment\n        /// </summary>\n        /// <param name=\"customerToValidate\">Customer</param>\n        /// <param name=\"recurringPayment\">Recurring Payment</param>\n        /// <returns>value indicating whether a customer can cancel recurring payment</returns>\n        public virtual bool CanCancelRecurringPayment(Customer customerToValidate, RecurringPayment recurringPayment)\n        {\n            if (recurringPayment == null)\n                return false;\n            if (customerToValidate == null)\n                return false;\n            var initialOrder = recurringPayment.InitialOrder;\n            if (initialOrder == null)\n                return false;\n            var customer = recurringPayment.InitialOrder.Customer;\n            if (customer == null)\n                return false;\n            if (initialOrder.OrderStatus == OrderStatus.Cancelled)\n                return false;\n            if (!customerToValidate.IsAdmin())\n            {\n                if (customer.Id != customerToValidate.Id)\n                    return false;\n            }\n            if (!recurringPayment.NextPaymentDate.HasValue)\n                return false;\n            return true;\n        }\n        /// <summary>\n        /// Send a shipment\n        /// </summary>\n        /// <param name=\"shipment\">Shipment</param>\n        /// <param name=\"notifyCustomer\">True to notify customer</param>\n        public virtual void Ship(Shipment shipment, bool notifyCustomer)\n        {\n            if (shipment == null)\n                throw new ArgumentNullException(\"shipment\");\n            var order = _orderService.GetOrderById(shipment.OrderId);\n            if (order == null)\n                throw new Exception(\"Order cannot be loaded\");\n            if (shipment.ShippedDateUtc.HasValue)\n                throw new Exception(\"This shipment is already shipped\");\n            shipment.ShippedDateUtc = DateTime.UtcNow;\n            _shipmentService.UpdateShipment(shipment);\n            //check whether we have more items to ship\n            if (order.HasItemsToAddToShipment() || order.HasItemsToShip())\n                order.ShippingStatusId = (int)ShippingStatus.PartiallyShipped;\n            else\n                order.ShippingStatusId = (int)ShippingStatus.Shipped;\n            _orderService.UpdateOrder(order);\n            //add a note\n            order.OrderNotes.Add(new OrderNote()\n                {\n                    Note = string.Format(TNote(\"ShipmentSent\"), shipment.Id),\n                    DisplayToCustomer = false,\n                    CreatedOnUtc = DateTime.UtcNow\n                });\n            _orderService.UpdateOrder(order);\n            if (notifyCustomer)\n            {\n                //notify customer\n                int queuedEmailId = _workflowMessageService.SendShipmentSentCustomerNotification(shipment, order.CustomerLanguageId);\n                if (queuedEmailId > 0)\n                {\n                    order.OrderNotes.Add(new OrderNote()\n                    {\n                        Note = string.Format(TNote(\"CustomerShippedEmailQueued\"), queuedEmailId),\n                        DisplayToCustomer = false,\n                        CreatedOnUtc = DateTime.UtcNow\n                    });\n                    _orderService.UpdateOrder(order);\n                }\n            }\n            //check order status\n            CheckOrderStatus(order);\n        }\n        /// <summary>\n        /// Marks a shipment as delivered\n        /// </summary>\n        /// <param name=\"shipment\">Shipment</param>\n        /// <param name=\"notifyCustomer\">True to notify customer</param>\n        public virtual void Deliver(Shipment shipment, bool notifyCustomer)\n        {\n            if (shipment == null)\n                throw new ArgumentNullException(\"shipment\");\n            var order = shipment.Order;\n            if (order == null)\n                throw new Exception(\"Order cannot be loaded\");\n            if (shipment.DeliveryDateUtc.HasValue)\n                throw new Exception(\"This shipment is already delivered\");\n            shipment.DeliveryDateUtc = DateTime.UtcNow;\n            _shipmentService.UpdateShipment(shipment);\n            if (!order.HasItemsToAddToShipment() && !order.HasItemsToShip() && !order.HasItemsToDeliver())\n                order.ShippingStatusId = (int)ShippingStatus.Delivered;\n            _orderService.UpdateOrder(order);\n            //add a note\n            order.OrderNotes.Add(new OrderNote()\n            {\n                Note = string.Format(TNote(\"ShipmentDelivered\"), shipment.Id),\n                DisplayToCustomer = false,\n                CreatedOnUtc = DateTime.UtcNow\n            });\n            _orderService.UpdateOrder(order);\n            if (notifyCustomer)\n            {\n                //send email notification\n                int queuedEmailId = _workflowMessageService.SendShipmentDeliveredCustomerNotification(shipment, order.CustomerLanguageId);\n                if (queuedEmailId > 0)\n                {\n                    order.OrderNotes.Add(new OrderNote()\n                    {\n                        Note = string.Format(TNote(\"CustomerDeliveredEmailQueued\"), queuedEmailId),\n                        DisplayToCustomer = false,\n                        CreatedOnUtc = DateTime.UtcNow\n                    });\n                    _orderService.UpdateOrder(order);\n                }\n            }\n            //check order status\n            CheckOrderStatus(order);\n        }\n        /// <summary>\n        /// Gets a value indicating whether cancel is allowed\n        /// </summary>\n        /// <param name=\"order\">Order</param>\n        /// <returns>A value indicating whether cancel is allowed</returns>\n        public virtual bool CanCancelOrder(Order order)\n        {\n            if (order == null)\n                throw new ArgumentNullException(\"order\");\n            if (order.OrderStatus == OrderStatus.Cancelled)\n                return false;\n            return true;\n        }\n        /// <summary>\n        /// Cancels order\n        /// </summary>\n        /// <param name=\"order\">Order</param>\n        /// <param name=\"notifyCustomer\">True to notify customer</param>\n        public virtual void CancelOrder(Order order, bool notifyCustomer)\n        {\n            if (order == null)\n                throw new ArgumentNullException(\"order\");\n            if (!CanCancelOrder(order))\n                throw new SmartException(\"Cannot do cancel for order.\");\n            //Cancel order\n            SetOrderStatus(order, OrderStatus.Cancelled, notifyCustomer);\n            //add a note\n            order.OrderNotes.Add(new OrderNote()\n            {\n                Note = TNote(\"OrderCancelled\"),\n                DisplayToCustomer = false,\n                CreatedOnUtc = DateTime.UtcNow\n            });\n            _orderService.UpdateOrder(order);\n            //cancel recurring payments\n            var recurringPayments = _orderService.SearchRecurringPayments(0, 0, order.Id, null);\n            foreach (var rp in recurringPayments)\n            {\n                //use errors?\n                var errors = CancelRecurringPayment(rp);\n            }\n            //Adjust inventory\n\t\t\tforeach (var orderItem in order.OrderItems)\n\t\t\t{\n\t\t\t\t_productService.AdjustInventory(orderItem, false, orderItem.Quantity);\n\t\t\t}\n        }\n\t\t/// <summary>\n\t\t/// Auto update order details\n\t\t/// </summary>\n\t\t/// <param name=\"context\">Context parameters</param>\n\t\tpublic virtual void AutoUpdateOrderDetails(AutoUpdateOrderItemContext context)\n\t\t{\n\t\t\tvar oi = context.OrderItem;\n\t\t\tcontext.RewardPointsOld = context.RewardPointsNew = oi.Order.Customer.GetRewardPointsBalance();\n\t\t\tif (context.UpdateTotals && oi.Order.OrderStatusId <= (int)OrderStatus.Pending)\n\t\t\t{\n\t\t\t\tdecimal priceInclTax = Round(context.QuantityNew * oi.UnitPriceInclTax);\n\t\t\t\tdecimal priceExclTax = Round(context.QuantityNew * oi.UnitPriceExclTax);\n\t\t\t\tdecimal deltaPriceInclTax = priceInclTax - (context.IsNewOrderItem ? decimal.Zero : oi.PriceInclTax);\n\t\t\t\tdecimal deltaPriceExclTax = priceExclTax - (context.IsNewOrderItem ? decimal.Zero : oi.PriceExclTax);\n\t\t\t\toi.Quantity = context.QuantityNew;\n\t\t\t\toi.PriceInclTax = Round(priceInclTax);\n\t\t\t\toi.PriceExclTax = Round(priceExclTax);\n\t\t\t\tdecimal subtotalInclTax = oi.Order.OrderSubtotalInclTax + deltaPriceInclTax;\n\t\t\t\tdecimal subtotalExclTax = oi.Order.OrderSubtotalExclTax + deltaPriceExclTax;\n\t\t\t\toi.Order.OrderSubtotalInclTax = Round(subtotalInclTax);\n\t\t\t\toi.Order.OrderSubtotalExclTax = Round(subtotalExclTax);\n\t\t\t\tdecimal discountInclTax = oi.DiscountAmountInclTax * context.QuantityChangeFactor;\n\t\t\t\tdecimal discountExclTax = oi.DiscountAmountExclTax * context.QuantityChangeFactor;\n\t\t\t\tdecimal deltaDiscountInclTax = discountInclTax - oi.DiscountAmountInclTax;\n\t\t\t\tdecimal deltaDiscountExclTax = discountExclTax - oi.DiscountAmountExclTax;\n\t\t\t\toi.DiscountAmountInclTax = Round(discountInclTax);\n\t\t\t\toi.DiscountAmountExclTax = Round(discountExclTax);\n\t\t\t\tdecimal total = Math.Max(oi.Order.OrderTotal + deltaPriceInclTax, 0);\n\t\t\t\tdecimal tax = Math.Max(oi.Order.OrderTax + (deltaPriceInclTax - deltaPriceExclTax), 0);\n\t\t\t\toi.Order.OrderTotal = Round(total);\n\t\t\t\toi.Order.OrderTax = Round(tax);\n\t\t\t\t_orderService.UpdateOrder(oi.Order);\n\t\t\t}\n\t\t\tif (context.AdjustInventory && context.QuantityDelta != 0)\n\t\t\t{\n\t\t\t\tcontext.Inventory = _productService.AdjustInventory(oi, context.QuantityDelta > 0, Math.Abs(context.QuantityDelta));\n\t\t\t}\n\t\t\tif (context.UpdateRewardPoints && context.QuantityDelta < 0)\n\t\t\t{\n\t\t\t\t// we reduce but we do not award points subsequently. they can be awarded once per order anyway (see Order.RewardPointsWereAdded).\n\t\t\t\t// UpdateRewardPoints only visible for unpending orders (see RewardPointsSettingsValidator).\n\t\t\t\t// note: reducing can of cource only work if oi.UnitPriceExclTax has not been changed!\n\t\t\t\tdecimal reduceAmount = Math.Abs(context.QuantityDelta) * oi.UnitPriceInclTax;\n\t\t\t\tReduceRewardPoints(oi.Order, reduceAmount);\n\t\t\t\tcontext.RewardPointsNew = oi.Order.Customer.GetRewardPointsBalance();\n\t\t\t}\n\t\t}\n        /// <summary>\n        /// Gets a value indicating whether order can be marked as authorized\n        /// </summary>\n        /// <param name=\"order\">Order</param>\n        /// <returns>A value indicating whether order can be marked as authorized</returns>\n        public virtual bool CanMarkOrderAsAuthorized(Order order)\n        {\n            if (order == null)\n                throw new ArgumentNullException(\"order\");\n            if (order.OrderStatus == OrderStatus.Cancelled)\n                return false;\n            if (order.PaymentStatus == PaymentStatus.Pending)\n                return true;\n            return false;\n        }\n        /// <summary>\n        /// Marks order as authorized\n        /// </summary>\n        /// <param name=\"order\">Order</param>\n        public virtual void MarkAsAuthorized(Order order)\n        {\n            if (order == null)\n                throw new ArgumentNullException(\"order\");\n            order.PaymentStatusId = (int)PaymentStatus.Authorized;\n            _orderService.UpdateOrder(order);\n            //add a note\n            order.OrderNotes.Add(new OrderNote()\n            {\n                Note = TNote(\"OrderMarkedAsAuthorized\"),\n                DisplayToCustomer = false,\n                CreatedOnUtc = DateTime.UtcNow\n            });\n            _orderService.UpdateOrder(order);\n            //check order status\n            CheckOrderStatus(order);\n        }\n\t\t/// <summary>\n\t\t/// Gets a value indicating whether the order can be marked as completed\n\t\t/// </summary>\n\t\t/// <param name=\"order\">Order</param>\n\t\t/// <returns>A value indicating whether the order can be marked as completed</returns>\n\t\tpublic virtual bool CanCompleteOrder(Order order)\n\t\t{\n\t\t\tif (order == null)\n\t\t\t\tthrow new ArgumentNullException(\"order\");\n\t\t\treturn (order.OrderStatus != OrderStatus.Complete && order.OrderStatus != OrderStatus.Cancelled);\n\t\t}\n\t\t/// <summary>\n\t\t/// Marks the order as completed\n\t\t/// </summary>\n\t\t/// <param name=\"order\">Order</param>\n\t\tpublic virtual void CompleteOrder(Order order)\n\t\t{\n            if (!CanCompleteOrder(order))\n                throw new SmartException(\"You can't mark this order as completed\");\n\t\t\tif (CanMarkOrderAsPaid(order))\n\t\t\t{\n\t\t\t\tMarkOrderAsPaid(order);\n\t\t\t}\n\t\t\tif (order.ShippingStatus != ShippingStatus.ShippingNotRequired)\n\t\t\t{\n", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "length": 5265, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "dffd4a8b00955ae07c4ff880a14e7b34a2af5c49d13555ee"}
{"input": "", "context": "/* Copyright (C) 2022, Specify Collections Consortium\n * \n * Specify Collections Consortium, Biodiversity Institute, University of Kansas,\n * 1345 Jayhawk Boulevard, Lawrence, Kansas, 66045, USA, support@specifysoftware.org\n * \n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n*/\npackage edu.ku.brc.specify.config.init;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.sql.Timestamp;\nimport java.text.DateFormat;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Vector;\nimport org.apache.commons.io.FileUtils;\nimport org.hibernate.Session;\nimport com.thoughtworks.xstream.XStream;\nimport edu.ku.brc.af.auth.SecurityOptionIFace;\nimport edu.ku.brc.af.auth.specify.permission.BasicSpPermission;\nimport edu.ku.brc.af.auth.specify.permission.PermissionService;\nimport edu.ku.brc.af.auth.specify.policy.DatabaseService;\nimport edu.ku.brc.af.auth.specify.principal.AdminPrincipal;\nimport edu.ku.brc.af.auth.specify.principal.GroupPrincipal;\nimport edu.ku.brc.af.auth.specify.principal.UserPrincipal;\nimport edu.ku.brc.af.core.AppContextMgr;\nimport edu.ku.brc.af.core.PermissionIFace;\nimport edu.ku.brc.af.core.TaskMgr;\nimport edu.ku.brc.af.core.Taskable;\nimport edu.ku.brc.af.prefs.AppPreferences;\nimport edu.ku.brc.af.ui.db.PickListIFace;\nimport edu.ku.brc.af.ui.forms.formatters.UIFieldFormatterIFace;\nimport edu.ku.brc.dbsupport.AttributeIFace;\nimport edu.ku.brc.dbsupport.DBConnection;\nimport edu.ku.brc.dbsupport.RecordSetIFace;\nimport edu.ku.brc.helpers.XMLHelper;\nimport edu.ku.brc.specify.SpecifyUserTypes;\nimport edu.ku.brc.specify.conversion.BasicSQLUtils;\nimport edu.ku.brc.specify.datamodel.Accession;\nimport edu.ku.brc.specify.datamodel.AccessionAgent;\nimport edu.ku.brc.specify.datamodel.AccessionAuthorization;\nimport edu.ku.brc.specify.datamodel.Address;\nimport edu.ku.brc.specify.datamodel.Agent;\nimport edu.ku.brc.specify.datamodel.AgentVariant;\nimport edu.ku.brc.specify.datamodel.Attachment;\nimport edu.ku.brc.specify.datamodel.AttributeDef;\nimport edu.ku.brc.specify.datamodel.Author;\nimport edu.ku.brc.specify.datamodel.AutoNumberingScheme;\nimport edu.ku.brc.specify.datamodel.Borrow;\nimport edu.ku.brc.specify.datamodel.BorrowAgent;\nimport edu.ku.brc.specify.datamodel.BorrowMaterial;\nimport edu.ku.brc.specify.datamodel.BorrowReturnMaterial;\nimport edu.ku.brc.specify.datamodel.CollectingEvent;\nimport edu.ku.brc.specify.datamodel.CollectingEventAttr;\nimport edu.ku.brc.specify.datamodel.CollectingTrip;\nimport edu.ku.brc.specify.datamodel.Collection;\nimport edu.ku.brc.specify.datamodel.CollectionObject;\nimport edu.ku.brc.specify.datamodel.CollectionObjectAttr;\nimport edu.ku.brc.specify.datamodel.CollectionObjectCitation;\nimport edu.ku.brc.specify.datamodel.CollectionRelType;\nimport edu.ku.brc.specify.datamodel.Collector;\nimport edu.ku.brc.specify.datamodel.Container;\nimport edu.ku.brc.specify.datamodel.DataType;\nimport edu.ku.brc.specify.datamodel.Disposal;\nimport edu.ku.brc.specify.datamodel.DisposalAgent;\nimport edu.ku.brc.specify.datamodel.DisposalPreparation;\nimport edu.ku.brc.specify.datamodel.Determination;\nimport edu.ku.brc.specify.datamodel.DeterminationCitation;\nimport edu.ku.brc.specify.datamodel.Discipline;\nimport edu.ku.brc.specify.datamodel.Division;\nimport edu.ku.brc.specify.datamodel.Geography;\nimport edu.ku.brc.specify.datamodel.GeographyTreeDef;\nimport edu.ku.brc.specify.datamodel.GeographyTreeDefItem;\nimport edu.ku.brc.specify.datamodel.GeologicTimePeriod;\nimport edu.ku.brc.specify.datamodel.GeologicTimePeriodTreeDef;\nimport edu.ku.brc.specify.datamodel.GeologicTimePeriodTreeDefItem;\nimport edu.ku.brc.specify.datamodel.GroupPerson;\nimport edu.ku.brc.specify.datamodel.InfoRequest;\nimport edu.ku.brc.specify.datamodel.Institution;\nimport edu.ku.brc.specify.datamodel.Journal;\nimport edu.ku.brc.specify.datamodel.LithoStratTreeDef;\nimport edu.ku.brc.specify.datamodel.LithoStratTreeDefItem;\nimport edu.ku.brc.specify.datamodel.Loan;\nimport edu.ku.brc.specify.datamodel.LoanAgent;\nimport edu.ku.brc.specify.datamodel.LoanPreparation;\nimport edu.ku.brc.specify.datamodel.LoanReturnPreparation;\nimport edu.ku.brc.specify.datamodel.Locality;\nimport edu.ku.brc.specify.datamodel.LocalityCitation;\nimport edu.ku.brc.specify.datamodel.LocalityDetail;\nimport edu.ku.brc.specify.datamodel.OtherIdentifier;\nimport edu.ku.brc.specify.datamodel.Permit;\nimport edu.ku.brc.specify.datamodel.PickList;\nimport edu.ku.brc.specify.datamodel.PrepType;\nimport edu.ku.brc.specify.datamodel.Preparation;\nimport edu.ku.brc.specify.datamodel.PreparationAttr;\nimport edu.ku.brc.specify.datamodel.Project;\nimport edu.ku.brc.specify.datamodel.RecordSet;\nimport edu.ku.brc.specify.datamodel.ReferenceWork;\nimport edu.ku.brc.specify.datamodel.RepositoryAgreement;\nimport edu.ku.brc.specify.datamodel.Shipment;\nimport edu.ku.brc.specify.datamodel.SpPermission;\nimport edu.ku.brc.specify.datamodel.SpPrincipal;\nimport edu.ku.brc.specify.datamodel.SpQuery;\nimport edu.ku.brc.specify.datamodel.SpQueryField;\nimport edu.ku.brc.specify.datamodel.SpecifyUser;\nimport edu.ku.brc.specify.datamodel.Storage;\nimport edu.ku.brc.specify.datamodel.StorageTreeDef;\nimport edu.ku.brc.specify.datamodel.StorageTreeDefItem;\nimport edu.ku.brc.specify.datamodel.Taxon;\nimport edu.ku.brc.specify.datamodel.TaxonCitation;\nimport edu.ku.brc.specify.datamodel.TaxonTreeDef;\nimport edu.ku.brc.specify.datamodel.TaxonTreeDefItem;\nimport edu.ku.brc.specify.datamodel.TreeDefIface;\nimport edu.ku.brc.specify.datamodel.UserGroupScope;\nimport edu.ku.brc.specify.datamodel.Workbench;\nimport edu.ku.brc.specify.datamodel.WorkbenchDataItem;\nimport edu.ku.brc.specify.datamodel.WorkbenchRow;\nimport edu.ku.brc.specify.datamodel.WorkbenchTemplate;\nimport edu.ku.brc.specify.datamodel.WorkbenchTemplateMappingItem;\nimport edu.ku.brc.specify.tasks.BaseTask;\nimport edu.ku.brc.specify.tasks.ExportMappingTask;\nimport edu.ku.brc.specify.tasks.PermissionOptionPersist;\nimport edu.ku.brc.util.Pair;\npublic class DataBuilder\n{\n    protected static Calendar startCal = Calendar.getInstance();\n    protected static Session  session  = null;\n    \n    /** Maps usertype strings to the name of the default groups */\n    protected static Map<String, Pair<String, Byte>> usertypeToDefaultGroup;\n    \n    /**\n     * @return\n     */\n    public static Session getSession()\n    {\n        return session;\n    }\n    /**\n     * @param session\n     */\n    public static void setSession(Session session)\n    {\n        DataBuilder.session = session;\n    }\n    public static AccessionAgent createAccessionAgent(Accession accession, Agent agent)\n    {\n        AccessionAgent accessionAgent = new AccessionAgent();\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        accessionAgent.setTimestampCreated(now);\n        accessionAgent.setAccession(accession);\n        accessionAgent.setAgent(agent);\n        persist(accessionAgent);\n        return accessionAgent;\n    }\n    public static AgentVariant createAgentVariant(final Byte varType, final String name, final Agent agentOwner)\n    {\n        AgentVariant av = new AgentVariant();\n        av.initialize();\n        av.setVarType(varType);\n        av.setName(name);\n        av.setAgent(agentOwner);\n        agentOwner.getVariants().add(av);\n        return av;\n    }\n    \n    public static Institution createInstitution(final String name)\n    {\n        // Create Discipline\n        Institution inst = new Institution();\n        inst.initialize();\n        inst.setName(name);\n        persist(inst);\n        return inst;\n    }\n    \n    public static Division createDivision(final Institution inst, \n                                          final String discipline, \n                                          final String name, \n                                          final String abbrev, \n                                          final String title)\n    {\n        // Create Discipline\n        Division division = new Division();\n        division.initialize();\n        division.setName(name);\n        division.setDiscipline(discipline);\n        division.setAbbrev(abbrev);\n        division.setTitle(title);\n        \n        inst.addReference(division, \"divisions\");\n        persist(division);\n        return division;\n    }\n    \n    public static GroupPerson createGroupPerson(final Agent group, \n                                                final Agent agent, \n                                                final int order,\n                                                final Division division)\n    {\n        GroupPerson groupPerson = new GroupPerson();\n        groupPerson.initialize();\n        groupPerson.setOrderIndex(order);\n        \n        groupPerson.setDivision(division);\n        \n        if (true)\n        {\n            groupPerson.setMember(agent);\n            groupPerson.setGroup(group);\n            \n            agent.getGroups().add(groupPerson);\n            group.getMembers().add(groupPerson);\n        } else\n        {\n            group.addReference(groupPerson, \"groups\");\n            agent.addReference(groupPerson, \"members\");\n        }\n        \n        /*System.out.println(\"Agent '\"+agent.getLastName()+\"' is in groups:\");\n        for (GroupPerson gp : agent.getGroups())\n        {\n            System.out.println(\"  Mem '\"+gp.getGroup().getLastName()+\"'  \"+gp.getOrderIndex());\n        }\n        System.out.println(\"------------------------\\nGroup '\"+group.getLastName()+\"'  has Agents:  \");\n        for (GroupPerson gp : group.getMembers())\n        {\n            System.out.println(\"  Mem '\"+gp.getMember().getLastName()+\"'  \"+gp.getOrderIndex());\n        }*/\n        return groupPerson;\n    }\n    \n    /**\n     * @param title\n     * @param firstName\n     * @param middleInit\n     * @param lastName\n     * @param abbreviation\n     * @param email\n     * @return\n     */\n    public static Agent createAgent(final String title,\n                                    final String firstName,\n                                    final String middleInit,\n                                    final String lastName,\n                                    final String abbreviation,\n                                    final String email)\n    {\n        return createAgent(title, firstName, middleInit, lastName, abbreviation, email, null, null);\n    }\n    \n    /**\n     * @param title\n     * @param firstName\n     * @param middleInit\n     * @param lastName\n     * @param abbreviation\n     * @param email\n     * @param division\n     * @param discipline\n     * @return\n     */\n    public static Agent createAgent(final String title,\n                                    final String firstName,\n                                    final String middleInit,\n                                    final String lastName,\n                                    final String abbreviation,\n                                    final String email,\n                                    final Division division,\n                                    final Discipline discipline)\n    {\n        // Create Discipline\n        Agent agent = new Agent();\n        agent.initialize();\n        agent.setAgentType((byte) 1);\n        agent.setFirstName(firstName);\n        agent.setLastName(lastName);\n        agent.setMiddleInitial(middleInit);\n        agent.setAbbreviation(abbreviation);\n        agent.setTitle(title);\n        agent.setEmail(email);\n        \n        if (division == null)\n        {\n            Division div = AppContextMgr.getInstance().getClassObject(Division.class);\n            if (div == null)\n            {\n                throw new RuntimeException(\"Division is NULL!\");\n            }\n            agent.setDivision(div);\n        } else\n        {\n            agent.setDivision(division);\n        }\n        \n        persist(agent);\n        return agent;\n    }\n    \n    /**\n     * @param filename\n     * @param mimeType\n     * @return\n     */\n    public static Attachment createAttachment(final String filename,\n                                              final String mimeType,\n                                              final int tableId)\n    {\n        Attachment attachment = new Attachment();\n        attachment.initialize();\n        attachment.setOrigFilename(filename);\n        attachment.setMimeType(mimeType);\n        attachment.setTableId(tableId);\n        persist(attachment);\n        return attachment;\n    }\n    \n    public static SpQuery createQuery(final String      name, \n                                      final String      contextName, \n                                      final int         contextTableId,\n                                      final SpecifyUser owner,\n                                      final Agent       agent)\n    {\n        SpQuery query = new SpQuery();\n        query.initialize();\n        query.setName(name);\n        query.setContextName(contextName);\n        query.setContextTableId((short)contextTableId);\n        query.setCreatedByAgent(agent);\n        query.setSpecifyUser(owner);\n        return query;\n        \n    }\n    \n    public static CollectionRelType createCollectionRelType(final String name,\n                                                            final Collection leftSideCollection,\n                                                            final Collection rightSideCollection)\n    {\n        CollectionRelType crt = new CollectionRelType();\n        crt.initialize();\n        crt.setName(name);\n        \n        crt.setLeftSideCollection(leftSideCollection);\n        crt.setRightSideCollection(rightSideCollection);\n        rightSideCollection.getRightSideRelTypes().add(crt);\n        leftSideCollection.getLeftSideRelTypes().add(crt);\n        \n        return crt;\n    }\n    \n    public static SpQueryField createQueryField(final SpQuery query,\n                                                final Short   position,\n                                                final String  fieldName,\n                                                final String  fieldAlias,\n                                                final Boolean isNot,\n                                                final Byte    operStart,\n                                                final Byte    operEnd,\n                                                final String  startValue,\n                                                final String  endValue,\n                                                final Byte    sortType,\n                                                final Boolean isDisplay,\n                                                final String  tableList,\n                                                final int contextTableIdent)\n    {\n        SpQueryField field = new SpQueryField();\n        field.initialize();\n        field.setPosition(position);\n        field.setFieldName(fieldName);\n        field.setColumnAlias(fieldAlias); \n        field.setOperStart(operStart);\n        field.setOperEnd(operEnd);\n        field.setEndValue(endValue);\n        field.setIsDisplay(isDisplay);\n        field.setIsNot(isNot);\n        field.setSortType(sortType);\n        field.setStartValue(startValue);\n        field.setTableList(tableList);\n        field.setContextTableIdent(contextTableIdent);\n        field.setIsPrompt(true);\n        query.addReference(field, \"fields\");\n        return field;\n    }\n                                              \n    public static AttributeDef createAttributeDef(final AttributeIFace.FieldType type,\n                                                  final String name,\n                                                  final Discipline discipline,\n                                                  final PrepType prepType)\n    {\n        AttributeDef attrDef = new AttributeDef();\n        attrDef.initialize();\n        attrDef.setDataType(type.getType());\n        attrDef.setFieldName(name);\n        attrDef.setPrepType(prepType);\n        attrDef.setDiscipline(discipline);\n        \n        discipline.getAttributeDefs().add(attrDef);\n        \n        return attrDef;\n    }\n    /**\n     * @param division\n     * @param type\n     * @param name\n     * @param dataType\n     * @param taxonTreeDef\n     * @param geographyTreeDef\n     * @param geologicTimePeriodTreeDef\n     * @param lithoStratTreeDef\n     * @return\n     */\n    public static Discipline createDiscipline(final Division         division,\n                                              final String           type,\n                                              final String           name,\n                                              final DataType         dataType,\n                                              final TaxonTreeDef     taxonTreeDef,\n                                              final GeographyTreeDef geographyTreeDef,\n                                              final GeologicTimePeriodTreeDef geologicTimePeriodTreeDef,\n                                              final LithoStratTreeDef lithoStratTreeDef)\n    {\n        Discipline discipline = new Discipline();\n        discipline.initialize();\n        discipline.setType(type);\n        discipline.setName(name);\n        discipline.setDataType(dataType);\n        discipline.setTaxonTreeDef(taxonTreeDef);\n        discipline.setGeographyTreeDef(geographyTreeDef);//meg added to support not-null constraints\n        discipline.setGeologicTimePeriodTreeDef(geologicTimePeriodTreeDef);//meg added to support not-null constraints\n        discipline.setLithoStratTreeDef(lithoStratTreeDef);\n        \n        geographyTreeDef.getDisciplines().add(discipline);\n        geologicTimePeriodTreeDef.getDisciplines().add(discipline);\n        lithoStratTreeDef.getDisciplines().add(discipline);\n        \n        taxonTreeDef.setDiscipline(discipline);\n        \n        division.addReference(discipline, \"disciplines\");\n        persist(discipline);\n        \n        return discipline;\n    }\n    /**\n     * @param prefix\n     * @param name\n     * @param catalogNumberingScheme\n     * @param disciplines\n     * @param isEmbeddedCollectingEvent\n     * @return\n     */\n    public static Collection createCollection(final String prefix,\n                                              final String name,\n                                              final String catalogNumFormatName,\n                                              final AutoNumberingScheme catalogNumberingScheme,\n                                              final Discipline[] disciplines,\n                                              final boolean isEmbeddedCollectingEvent)\n    {\n        Collection collection = new Collection();\n        collection.initialize();\n        collection.setCatalogNumFormatName(catalogNumFormatName);\n        collection.setCode(prefix);\n        collection.setModifiedByAgent(null);\n        collection.setCollectionName(name);\n        collection.setIsEmbeddedCollectingEvent(isEmbeddedCollectingEvent);\n        \n        if (catalogNumberingScheme != null)\n        {\n            collection.getNumberingSchemes().add(catalogNumberingScheme);\n            catalogNumberingScheme.getCollections().add(collection);\n        }\n        \n        for (Discipline disp : disciplines)\n        {\n            collection.setDiscipline(disp);\n        }\n        persist(collection);\n        \n        if (catalogNumberingScheme != null)\n        {\n            persist(catalogNumberingScheme);\n        }\n        return collection;\n    }\n    /**\n     * @param prefix\n     * @param name\n     * @param discipline\n     * @return\n     */\n    public static Collection createCollection(final String prefix,\n                                              final String name,\n                                              final String catalogNumFormatName,\n                                              final AutoNumberingScheme numberingScheme,\n                                              final Discipline discipline)\n    {\n        return createCollection(prefix, name, catalogNumFormatName, numberingScheme, discipline, true);\n    }\n    /**\n     * @param prefix\n     * @param name\n     * @param discipline\n     * @return\n     */\n    public static Collection createCollection(final String prefix,\n                                              final String name,\n                                              final String catalogNumFormatName,\n                                              final AutoNumberingScheme numberingScheme,\n                                              final Discipline discipline,\n                                              final boolean isEmbeddedCE)\n    {\n        return createCollection(prefix, name, catalogNumFormatName, numberingScheme, new Discipline[] { discipline }, isEmbeddedCE);\n    }\n    /**\n     * @param locality\n     * @param collectors\n     * @return\n     */\n    public static CollectingEvent createCollectingEvent(final Locality locality, \n                                                        final Calendar startDate,\n                                                        final String stationFieldNumber,\n                                                        final Collector[] collectors)\n    {\n        CollectingEvent colEv = new CollectingEvent();\n        colEv.initialize();\n        colEv.setStartDate(startDate);\n        colEv.setStationFieldNumber(stationFieldNumber);\n        \n        HashSet<Collector> collectorSet = new HashSet<Collector>();\n        if (collectors != null)\n        {\n            for (Collector c: collectors)\n            {\n                c.setCollectingEvent(colEv);\n                collectorSet.add(c);\n            }\n        }\n        colEv.setCollectors(collectorSet);\n        colEv.setLocality(locality);\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        colEv.setTimestampCreated(now);\n        persist(colEv);\n        persist(locality);\n        return colEv;\n    }\n    \n    public static CollectingTrip createCollectingTrip(final String collectingTripName,\n                                                      final String remarks, \n                                                      final CollectingEvent[] events)\n    {\n        CollectingTrip trip = new CollectingTrip();\n        trip.initialize();\n        trip.setCollectingTripName(collectingTripName);\n        trip.setRemarks(remarks);\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        trip.setTimestampCreated(now);\n        Calendar startDate = Calendar.getInstance();\n        startDate.set(9999, 12, 31);\n        Calendar endDate = Calendar.getInstance();\n        endDate.set(1, 1, 1);\n        String verStartDate = null;\n        String verEndDate = null;\n        \n        for (CollectingEvent e: events)\n        {\n            if (e.getStartDate().before(startDate))\n            {\n                startDate = e.getStartDate();\n                verStartDate = e.getStartDateVerbatim();\n            }\n            if (e.getEndDate().after(endDate))\n            {\n                endDate = e.getEndDate();\n                verEndDate = e.getEndDateVerbatim();\n            }\n            trip.getCollectingEvents().add(e);\n        }\n        \n        trip.setStartDate(startDate);\n        trip.setEndDate(endDate);\n        trip.setStartDateVerbatim(verStartDate);\n        trip.setEndDateVerbatim(verEndDate);\n        \n        return trip;\n    }\n    public static CollectingEventAttr createCollectingEventAttr(final CollectingEvent colEv,\n                                                                final AttributeDef colObjAttrDef,\n                                                                final String strVal,\n                                                                final Double dblVal)\n    {\n        // Create CollectionObjectAttr\n        CollectingEventAttr colEvAttr = new CollectingEventAttr();\n        colEvAttr.initialize();\n        colEvAttr.setDefinition(colObjAttrDef);\n        colObjAttrDef.getCollectingEventAttrs().add(colEvAttr);\n        \n        colEvAttr.setCollectingEvent(colEv);\n        if (strVal != null)\n        {\n            colEvAttr.setStrValue(strVal);\n        }\n        if (dblVal != null)\n        {\n            colEvAttr.setDblValue(dblVal);\n        }\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        colEvAttr.setTimestampCreated(now);\n        colEv.getAttrs().add(colEvAttr);\n        persist(colEv);\n        return colEvAttr;\n    }\n    public static CollectionObjectAttr createCollectionObjectAttr(final CollectionObject colObj,\n                                                                  final AttributeDef colObjAttrDef,\n                                                                  final String strVal,\n                                                                  final Double dblVal)\n    {\n        // Create CollectionObjectAttr\n        CollectionObjectAttr colObjAttr = new CollectionObjectAttr();\n        colObjAttr.initialize();\n        colObjAttr.setDefinition(colObjAttrDef);\n        colObjAttr.setCollectionObject(colObj);\n        if (strVal != null)\n        {\n            colObjAttr.setStrValue(strVal);\n        }\n        if (dblVal != null)\n        {\n            colObjAttr.setDblValue(dblVal);\n        }\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        colObjAttr.setTimestampCreated(now);\n        colObj.getAttrs().add(colObjAttr);\n        persist(colObj);\n        return colObjAttr;\n    }\n    public static Collector createCollector(final Agent agent, int orderNum)\n    {\n        Collector collector = new Collector();\n        collector.initialize();\n        collector.setAgent(agent);\n        collector.setModifiedByAgent(null);\n        collector.setOrderNumber(orderNum);\n        collector.setRemarks(\"\");\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        collector.setTimestampCreated(now);\n        persist(collector);\n        return collector;\n    }\n    public static CollectionObject createCollectionObject(final String catalogNumber,\n                                                          final String fieldNumber,\n                                                          final Agent cataloger,\n                                                          final Collection collection,\n                                                          final int count,\n                                                          final CollectingEvent collectingEvent,\n                                                          final Calendar catalogedDate,\n                                                          @SuppressWarnings(\"unused\") final String lastEditedBy)\n    {\n        return createCollectionObject(catalogNumber, fieldNumber, cataloger,\n                                      collection, count, collectingEvent, catalogedDate, \n                                      UIFieldFormatterIFace.PartialDateEnum.Full, lastEditedBy);\n    }\n    \n    public static CollectionObject createCollectionObject(final String catalogNumber,\n                                                          final String fieldNumber,\n                                                          final Agent cataloger,\n                                                          final Collection collection,\n                                                          final int count,\n                                                          final CollectingEvent collectingEvent,\n                                                          final Calendar catalogedDate,\n                                                          final UIFieldFormatterIFace.PartialDateEnum dateType,\n                                                          @SuppressWarnings(\"unused\") final String lastEditedBy)\n    {\n        // Create Collection Object\n        CollectionObject colObj = new CollectionObject();\n        colObj.initialize();\n        \n        colObj.setCataloger(cataloger);\n        colObj.setCatalogedDate(catalogedDate);\n        colObj.setCatalogedDateVerbatim(DateFormat.getInstance().format(catalogedDate.getTime()));\n        colObj.setCatalogNumber(catalogNumber);\n        colObj.setCatalogedDatePrecision((byte)dateType.ordinal());\n        colObj.setCollection(collection);\n        colObj.setCollectingEvent(collectingEvent);\n        colObj.setCountAmt(count);\n        colObj.setFieldNumber(fieldNumber);\n        colObj.setModifiedByAgent(cataloger);\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        colObj.setTimestampCreated(now);\n        if (collectingEvent != null)\n        {\n            collectingEvent.getCollectionObjects().add(colObj);\n        }\n        persist(colObj);\n        if (collectingEvent != null)\n        {\n            persist(collectingEvent);\n        }\n        return colObj;\n    }\n    public static Determination createDetermination(final CollectionObject collectionObject,\n                                                    final Agent determiner,\n                                                    final Taxon taxon,\n                                                    final boolean isCurrent,\n                                                    final Calendar calendar)\n    {\n        // Create Determination\n        Determination determination = new Determination();\n        determination.initialize();\n        determination.setIsCurrent(isCurrent);\n        determination.setCollectionObject(collectionObject);\n        determination.setDeterminedDate(calendar);\n        determination.setDeterminer(determiner);\n        determination.setTaxon(taxon);\n        //status.getDeterminations().add(determination);\n        collectionObject.getDeterminations().add(determination);\n        //taxon.getDeterminations().add(determination);\n        persist(collectionObject);\n        persist(determination);\n        persist(taxon);\n        return determination;\n    }\n    /**\n     * Create a <code>GeographyTreeDef</code> with the given name.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param name tree def name\n     * @return the geography tree def\n     */\n    public static GeographyTreeDef createGeographyTreeDef(final String name, final int treeDir)\n    {\n        GeographyTreeDef gtd = new GeographyTreeDef();\n        gtd.initialize();\n        gtd.setName(name);\n        gtd.setFullNameDirection(treeDir);\n        persist(gtd);\n        return gtd;\n    }\n    /**\n     * Creates a <code>GeographyTreeDefItem</code> using the given values.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param parent the parent node\n     * @param gtd the associated definition object\n     * @param name the name of the item\n     * @param rankId the rank of the itme\n     * @return the new item\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static GeographyTreeDefItem createGeographyTreeDefItem(final GeographyTreeDefItem parent,\n                                                                  final GeographyTreeDef gtd,\n                                                                  final String name,\n                                                                  final int rankId)\n    {\n        GeographyTreeDefItem gtdi = new GeographyTreeDefItem();\n        gtdi.initialize();\n        gtdi.setName(name);\n        gtdi.setParent(parent);\n        gtdi.setRankId(rankId);\n        gtdi.setIsInFullName(false);\n        gtdi.setIsEnforced(false);\n        gtdi.setTreeDef(gtd);\n        gtdi.setFullNameSeparator(\", \");\n        if (gtd != null)\n        {\n            gtd.getTreeDefItems().add(gtdi);\n        }\n        persist(gtdi);\n        return gtdi;\n    }\n    /**\n     * Creates a new <code>Geography</code> object using the given values.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param gtd the associated definition\n     * @param parent the parent node\n     * @param name the name of the node\n     * @param rankId the rank of the node\n     * @return the new node\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static Geography createGeography(final GeographyTreeDef gtd, final Geography parent,\n    //final String abbrev,\n                                            final String name,\n                                            //final int highNode,\n                                            //final int nodeNum,\n                                            final int rankId)\n    {\n        Geography geography = new Geography();\n        geography.initialize();\n        geography.setDefinition(gtd);\n        geography.setName(name);\n        geography.setParent(parent);\n        geography.setIsAccepted(true);\n        geography.setIsCurrent(true);\n        if (parent!=null)\n        {\n            parent.getChildren().add(geography);\n        }\n        geography.setRankId(rankId);\n        GeographyTreeDefItem defItem = gtd.getDefItemByRank(rankId);\n        if (defItem != null)\n        {\n            geography.setDefinitionItem(defItem);\n        }\n        gtd.getTreeEntries().add(geography);\n        persist(geography);\n        return geography;\n    }\n    \n    public static List<Geography> createGeographyChildren(final GeographyTreeDef geoTreeDef,\n                                                      final Geography        parent,\n                                                      final String[]         childNames,\n                                                      final int              rankId)\n    {\n        List<Geography> geos = new Vector<Geography>();\n        for (int i=0;i<childNames.length;i++)\n        {\n            geos.add(createGeography(geoTreeDef, parent, childNames[i], rankId));\n        }\n        return geos;\n    }\n    /**\n     * Create a <code>StorageTreeDef</code> with the given name.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param name tree def name\n     * @return the storage tree def\n     */\n    public static StorageTreeDef createStorageTreeDef(final String name, final int treeDir)\n    {\n        StorageTreeDef ltd = new StorageTreeDef();\n        ltd.initialize();\n        ltd.setName(name);\n        ltd.setFullNameDirection(treeDir);\n        persist(ltd);\n        return ltd;\n    }\n    /**\n     * Creates a <code>StorageTreeDefItem</code> using the given values.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param parent the parent node\n     * @param ltd the associated definition object\n     * @param name the name of the item\n     * @param rankId the rank of the itme\n     * @return the new item\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static StorageTreeDefItem createStorageTreeDefItem(final StorageTreeDefItem parent,\n                                                                final StorageTreeDef ltd,\n                                                                final String name,\n                                                                final int rankId)\n    {\n        StorageTreeDefItem ltdi = new StorageTreeDefItem();\n        ltdi.initialize();\n        ltdi.setName(name);\n        ltdi.setParent(parent);\n        ltdi.setRankId(rankId);\n        ltdi.setTreeDef(ltd);\n        ltdi.setIsInFullName(false);\n        ltdi.setIsEnforced(false);\n        ltdi.setFullNameSeparator(\", \");\n        if (ltd != null)\n        {\n            ltd.getTreeDefItems().add(ltdi);\n        }\n        persist(ltdi);\n        return ltdi;\n    }\n    /**\n     * Creates a new <code>Storage</code> object using the given values.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param ltd the associated definition\n     * @param parent the parent node\n     * @param name the name of the node\n     * @param rankId the rank of the node\n     * @return the new node\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static Storage createStorage(final StorageTreeDef ltd, final Storage parent,\n    //final String abbrev,\n                                          final String name,\n                                          //final int highNode,\n                                          //final int nodeNum,\n                                          final int rankId)\n    {\n        Storage storage = new Storage();\n        storage.initialize();\n        storage.setDefinition(ltd);\n        storage.setName(name);\n        storage.setParent(parent);\n        storage.setIsAccepted(true);\n        if (parent!=null)\n        {\n            parent.getChildren().add(storage);\n        }\n        StorageTreeDefItem defItem = ltd.getDefItemByRank(rankId);\n        if (defItem != null)\n        {\n            storage.setDefinitionItem(defItem);\n        }\n        storage.setRankId(rankId);\n        ltd.getTreeEntries().add(storage);\n        persist(storage);\n        return storage;\n    }\n    /**\n     * @param name\n     * @param type\n     * @param tableName\n     * @param fieldName\n     * @param formatter\n     * @param readOnly\n     * @param sizeLimit\n     * @return\n     */\n    public static PickList createPickList(final String  name,\n                                          final Byte    type,\n                                          final String  tableName,\n                                          final String  fieldName,\n                                          final String  formatter,\n                                          final boolean readOnly, \n                                          final int     sizeLimit,\n                                          final Boolean isSystem,\n                                          final Byte    sortType,\n                                          final Collection collectionArg)\n    {\n        PickList pickList = new PickList();\n        pickList.initialize();\n        pickList.setName(name);\n        pickList.setType(type);\n        pickList.setTableName(tableName);\n        pickList.setFieldName(fieldName);\n        pickList.setFormatter(formatter);\n        pickList.setReadOnly(readOnly);\n        pickList.setSizeLimit(sizeLimit);\n        pickList.setIsSystem(isSystem);\n        pickList.setSortType(sortType);\n        \n        Collection collection = collectionArg != null ? collectionArg : AppContextMgr.getInstance().hasContext() ? AppContextMgr.getInstance().getClassObject(Collection.class) : null;\n        if (collection != null)\n        {\n            pickList.setCollection(collection);\n            collection.getPickLists().add(pickList);\n        }\n        \n        persist(pickList);\n        return pickList;\n    }\n    \n    /**\n     * Create a <code>GeologicTimePeriodTreeDef</code> with the given name.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param name tree def name\n     * @return the geologic time period tree def\n     */\n    public static GeologicTimePeriodTreeDef createGeologicTimePeriodTreeDef(final String name, final int treeDir)\n    {\n        GeologicTimePeriodTreeDef gtp = new GeologicTimePeriodTreeDef();\n        gtp.initialize();\n        gtp.setName(name);\n        gtp.setFullNameDirection(treeDir);\n        persist(gtp);\n        return gtp;\n    }\n    /**\n     * Creates a <code>GeologicTimePeriodTreeDefItem</code> using the given values.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param parent the parent node\n     * @param gtptd the associated definition object\n     * @param name the name of the item\n     * @param rankId the rank of the itme\n     * @return the new item\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static GeologicTimePeriodTreeDefItem createGeologicTimePeriodTreeDefItem(final GeologicTimePeriodTreeDefItem parent,\n                                                                                    final GeologicTimePeriodTreeDef gtptd,\n                                                                                    final String name,\n                                                                                    final int rankId)\n    {\n        GeologicTimePeriodTreeDefItem gtdi = new GeologicTimePeriodTreeDefItem();\n        gtdi.initialize();\n        gtdi.setName(name);\n        gtdi.setParent(parent);\n        gtdi.setRankId(rankId);\n        gtdi.setTreeDef(gtptd);\n        gtdi.setIsInFullName(false);\n        gtdi.setIsEnforced(false);\n         gtdi.setFullNameSeparator(\", \");\n        if (gtptd != null)\n        {\n            gtptd.getTreeDefItems().add(gtdi);\n        }\n        persist(gtdi);\n        return gtdi;\n    }\n    /**\n     * Creates a new <code>GeologicTimePeriod</code> object using the given values.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param gtptd the associated definition\n     * @param parent the parent node\n     * @param name the name of the node\n     * @param rankId the rank of the node\n     * @return the new node\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static GeologicTimePeriod createGeologicTimePeriod(final GeologicTimePeriodTreeDef gtptd,\n                                                              final GeologicTimePeriod parent,\n                                                              final String name,\n                                                              final float startMYA,\n                                                              final float endMYA,\n                                                              final int rankId)\n    {\n        GeologicTimePeriod gtp = new GeologicTimePeriod();\n        gtp.initialize();\n        gtp.setDefinition(gtptd);\n        gtp.setDefinition(gtptd);\n        gtp.setName(name);\n        gtp.setParent(parent);\n        gtp.setIsAccepted(true);\n        if (parent!=null)\n        {\n            parent.getChildren().add(gtp);\n        }\n        gtp.setStartPeriod(startMYA);\n        gtp.setStartUncertainty(0.0f);\n        gtp.setEndPeriod(endMYA);\n        gtp.setEndUncertainty(0.0f);\n        GeologicTimePeriodTreeDefItem defItem = gtptd.getDefItemByRank(rankId);\n        if (defItem != null)\n        {\n            gtp.setDefinitionItem(defItem);\n        }\n        gtp.setRankId(rankId);\n        gtptd.getTreeEntries().add(gtp);\n        persist(gtp);\n        return gtp;\n    }\n    /**\n     * Create a <code>TaxonTreeDef</code> with the given name.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param name tree def name\n     * @return the taxon tree def\n     */\n    public static TaxonTreeDef createTaxonTreeDef(final String name, final int treeDir)\n    {\n        TaxonTreeDef ttd = new TaxonTreeDef();\n        ttd.initialize();\n        ttd.setName(name);\n        ttd.setFullNameDirection(treeDir);\n        return ttd;\n    }\n    /**\n     * Creates a <code>TaxonTreeDefItem</code> using the given values.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param parent the parent node\n     * @param ttd the associated definition object\n     * @param name the name of the item\n     * @param rankId the rank of the itme\n     * @return the new item\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static TaxonTreeDefItem createTaxonTreeDefItem(final TaxonTreeDefItem parent,\n                                                          final TaxonTreeDef ttd,\n                                                          final String name,\n                                                          final int rankId)\n    {\n        TaxonTreeDefItem ttdi = new TaxonTreeDefItem();\n        ttdi.initialize();\n        ttdi.setName(name);\n        ttdi.setParent(parent);\n        ttdi.setRankId(rankId);\n        ttdi.setIsInFullName(false);\n        ttdi.setIsEnforced(false);\n        ttdi.setTreeDef(ttd);\n        ttdi.setFullNameSeparator(\" \");\n        if (ttd != null)\n        {\n            ttd.getTreeDefItems().add(ttdi);\n        }\n        persist(ttdi);\n        return ttdi;\n    }\n    \n    /**\n     * Create a <code>LithoStratTreeDef</code> with the given name.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param name tree def name\n     * @return the LithoStrat tree def\n     */\n    public static LithoStratTreeDef createLithoStratTreeDef(final String name)\n    {\n        LithoStratTreeDef lstd = new LithoStratTreeDef();\n        lstd.initialize();\n        lstd.setName(name);\n        lstd.setFullNameDirection(TreeDefIface.FORWARD);\n        return lstd;\n    }\n    public static LithoStratTreeDefItem createLithoStratTreeDefItem(final LithoStratTreeDefItem parent,\n                                                                    final String name,\n                                                                    final int rankId,\n                                                                    final boolean inFullName)\n    {\n        if (parent != null)\n        {\n            LithoStratTreeDef treeDef = parent.getTreeDef();\n            if (treeDef != null)\n            {\n                LithoStratTreeDefItem lstdi = new LithoStratTreeDefItem();\n                lstdi.initialize();\n                lstdi.setName(name);\n                lstdi.setRankId(rankId);\n                lstdi.setIsInFullName(inFullName);\n                lstdi.setIsEnforced(false);\n                lstdi.setTreeDef(treeDef);\n                treeDef.getTreeDefItems().add(lstdi);\n                \n                parent.getChildren().add(lstdi);\n                lstdi.setParent(parent);\n                \n                return lstdi;\n            }\n            throw new RuntimeException(\"LithoStratTreeDef is null!\");\n        }\n        throw new RuntimeException(\"Parent is null!\");\n    }\n    public static LithoStratTreeDefItem createLithoStratTreeDefItem(final LithoStratTreeDef treeDef,\n                                                                    final String name,\n                                                                    final int rankId,\n                                                                    final boolean inFullName)\n    {\n        if (treeDef != null)\n        {\n            LithoStratTreeDefItem lstdi = new LithoStratTreeDefItem();\n            lstdi.initialize();\n            lstdi.setName(name);\n            lstdi.setRankId(rankId);\n            lstdi.setIsInFullName(inFullName);\n            lstdi.setIsEnforced(false);\n            lstdi.setTreeDef(treeDef);\n            treeDef.getTreeDefItems().add(lstdi);\n            return lstdi;\n        }\n        throw new RuntimeException(\"LithoStratTreeDef is null!\");\n    }\n    /**\n     * Creates a new <code>Taxon</code> object using the given values.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param ttd the associated definition\n     * @param parent the parent node\n     * @param name the name of the node\n     * @param rankId the rank of the node\n     * @return the new node\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static Taxon createTaxon(final TaxonTreeDef ttd, final Taxon parent, final String name, final int rankId)\n    {\n        return createTaxon(ttd, parent, name, null, rankId);\n    }\n    /**\n     * Creates a new <code>Taxon</code> object using the given values.  The object is also\n     * persisted with a call to {@link #persist(Object)}.\n     * \n     * @param ttd the associated definition\n     * @param parent the parent node\n     * @param name the name of the node\n     * @param commonName the common name of the node\n     * @param rankId the rank of the node\n     * @return the new node\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static Taxon createTaxon(final TaxonTreeDef ttd, final Taxon parent, final String name, final String commonName, final int rankId)\n    {\n        Taxon taxon = new Taxon();\n        taxon.initialize();\n        taxon.setDefinition(ttd);\n        taxon.setName(name);\n        taxon.setCommonName(commonName);\n        taxon.setParent(parent);\n        taxon.setIsAccepted(true);\n        if (parent != null)\n        {\n            parent.getChildren().add(taxon);\n        }\n        TaxonTreeDefItem defItem = ttd.getDefItemByRank(rankId);\n        if (defItem != null)\n        {\n            taxon.setDefinitionItem(defItem);\n        }\n        taxon.setRankId(rankId);\n        ttd.getTreeEntries().add(taxon);\n        persist(taxon);\n        return taxon;\n    }\n    \n    public static List<Object> createTaxonChildren(final TaxonTreeDef treeDef,\n                                              final Taxon parent,\n                                              final String[] childNames,\n                                              final String[] commonNames,\n                                              final int rankId)\n    {\n        Vector<Object> kids = new Vector<Object>();\n        for (int i = 0; i < childNames.length; i++)\n        {\n            kids.add(createTaxon(treeDef, parent, childNames[i], commonNames[i], rankId));\n        }\n        return kids;\n    }\n    public static Preparation createPreparation(final PrepType prepType,\n                                                final Agent preparedBy,\n                                                final CollectionObject colObj,\n                                                final Storage storage,\n                                                final int count,\n                                                final Calendar preparedDate)\n    {\n        Preparation prep = new Preparation();\n        prep.initialize();\n        prep.setCollectionObject(colObj);\n        prep.setCountAmt(count);\n        prep.setModifiedByAgent(null);\n        prep.setStorage(storage);\n        prep.setPreparedByAgent(preparedBy);\n        prep.setPreparedDate(preparedDate);\n        prep.setPrepType(prepType);\n        prep.setRemarks(null);\n        prep.setStorageLocation(null);\n        prep.setText1(null);\n        prep.setText2(null);\n        colObj.getPreparations().add(prep);\n        persist(prep);\n        return prep;\n    }\n    public static Locality createLocality(final String name, final Geography geo)\n    {\n        Locality locality = new Locality();\n        locality.initialize();\n        locality.setLocalityName(name);\n        locality.setGeography(geo);\n        persist(locality);\n        return locality;\n    }\n    public static PreparationAttr createPreparationAttr(final AttributeDef attrDef,\n                                                        final Preparation prep,\n                                                        final String strVal,\n                                                        final Double dblVal)\n    {\n        PreparationAttr prepAttr = new PreparationAttr();\n        prepAttr.initialize();\n        prepAttr.setDefinition(attrDef);\n        prepAttr.setPreparation(prep);\n        if (strVal != null)\n        {\n            prepAttr.setStrValue(strVal);\n        }\n        else if (dblVal != null)\n        {\n            prepAttr.setDblValue(dblVal);\n        }\n        prepAttr.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        prep.getAttrs().add(prepAttr);\n        persist(prepAttr);\n        return prepAttr;\n    }\n    public static Address createAddress(final Agent agent,\n                                        final String address1,\n                                        final String address2,\n                                        final String city,\n                                        final String state,\n                                        final String country,\n                                        final String postalCode)\n    {\n        return createAddress(agent, address1, address2, city, state, country, postalCode, 0);\n    }\n    public static Address createAddress(final Agent agent,\n                                        final String address1,\n                                        final String address2,\n                                        final String city,\n                                        final String state,\n                                        final String country,\n                                        final String postalCode,\n                                        final int    ordinal)\n    {\n        Address address = new Address();\n        address.initialize();\n        address.setAgent(agent);\n        address.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        address.setAddress(address1);\n        address.setAddress2(address2);\n        address.setCity(city);\n        address.setCountry(country);\n        address.setPostalCode(postalCode);\n        address.setState(state);\n        address.setIsPrimary(true);\n        address.setOrdinal(ordinal);\n        \n        agent.getAddresses().add(address);\n        persist(address);\n        persist(agent);\n        return address;\n    }\n    public static Permit createPermit(final String permitNumber,\n                                      final String type,\n                                      final Calendar issuedDate,\n                                      final Calendar startDate,\n                                      final Calendar endDate,\n                                      final Calendar renewalDate)\n    {\n        Permit permit = new Permit();\n        permit.initialize();\n        permit.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        permit.setStartDate(startDate);\n        permit.setEndDate(endDate);\n        permit.setPermitNumber(permitNumber);\n        permit.setIssuedDate(issuedDate);\n        permit.setRenewalDate(renewalDate);\n        permit.setType(type);\n        persist(permit);\n        return permit;\n    }\n    //-----------------------------------------------------------\n    public static Accession createAccession(final Division division,\n                                            final String type,\n                                            final String status,\n                                            final String number,\n                                            final String verbatimDate,\n                                            final Calendar dateAccessioned,\n                                            final Calendar dateReceived)\n    {\n        Accession accession = new Accession();\n        accession.initialize();\n        accession.setDivision(division);\n        accession.setAccessionNumber(number);\n        accession.setVerbatimDate(verbatimDate);\n        accession.setDateAccessioned(dateAccessioned);\n        accession.setDateReceived(dateReceived);\n        accession.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        accession.setStatus(status);\n        accession.setType(type);\n        persist(accession);\n        return accession;\n    }\n    public static AccessionAgent createAccessionAgent(final String role,\n                                                       final Agent agent,\n                                                       final Accession accession,\n                                                       final RepositoryAgreement repositoryAgreement)\n    {\n        AccessionAgent accessionagent = new AccessionAgent();\n        accessionagent.initialize();\n        accessionagent.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        accessionagent.setAccession(accession);\n        accessionagent.setRepositoryAgreement(repositoryAgreement);\n        accessionagent.setRole(role);\n        accessionagent.setAgent(agent);\n        persist(accessionagent);\n        return accessionagent;\n    }\n    public static AccessionAuthorization createAccessionAuthorization(final Permit permit,\n                                                                        final Accession accession,\n                                                                        final RepositoryAgreement repositoryAgreement)\n    {\n        AccessionAuthorization accessionauthorization = new AccessionAuthorization();\n        accessionauthorization.initialize();\n        accessionauthorization.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        accessionauthorization.setAccession(accession);\n        accessionauthorization.setPermit(permit);\n        accessionauthorization.setRepositoryAgreement(repositoryAgreement);\n        persist(accessionauthorization);\n        return accessionauthorization;\n    }\n    public static AttributeDef createAttributeDef(final Short tableType,\n                                                  final String fieldName,\n                                                  final Short dataType,\n                                                  final Discipline discipline,\n                                                  final PrepType prepType)\n    {\n        AttributeDef attributedef = new AttributeDef();\n        attributedef.initialize();\n        attributedef.setDiscipline(discipline);\n        attributedef.setPrepType(prepType);\n        attributedef.setTableType(tableType);\n        attributedef.setFieldName(fieldName);\n        attributedef.setDataType(dataType);\n        persist(attributedef);\n        return attributedef;\n    }\n    public static Author createAuthor(final Short orderNumber, final ReferenceWork referenceWork, final Agent agent)\n    {\n        Author author = new Author();\n        author.initialize();\n        author.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        author.setAgent(agent);\n        author.setOrderNumber(orderNumber);\n        author.setReferenceWork(referenceWork);\n        persist(author);\n        return author;\n    }\n    public static Borrow createBorrow(final String invoiceNumber,\n                                      final Calendar receivedDate,\n                                      final Calendar originalDueDate,\n                                      final Calendar dateClosed,\n                                      final Boolean isClosed,\n                                      final Calendar currentDueDate)\n    {\n        Borrow borrow = new Borrow();\n        borrow.initialize();\n        borrow.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        borrow.setInvoiceNumber(invoiceNumber);\n        borrow.setReceivedDate(receivedDate);\n        borrow.setOriginalDueDate(originalDueDate);\n        borrow.setDateClosed(dateClosed);\n        borrow.setCurrentDueDate(currentDueDate);\n        borrow.setIsClosed(isClosed);\n        persist(borrow);\n        return borrow;\n    }\n    public static BorrowAgent createBorrowAgent(final String role, final Agent agent, final Borrow borrow)\n    {\n        BorrowAgent borrowagent = new BorrowAgent();\n        borrowagent.initialize();\n        borrowagent.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        borrowagent.setRole(role);\n        borrowagent.setAgent(agent);\n        borrowagent.setBorrow(borrow);\n        persist(borrowagent);\n        return borrowagent;\n    }\n    public static BorrowMaterial createBorrowMaterial(final String materialNumber,\n                                                      final String description,\n                                                      final Short quantity,\n                                                      final String outComments,\n                                                      final String inComments,\n                                                      final Short quantityResolved,\n                                                      final Short quantityReturned,\n                                                      final Borrow borrow)\n    {\n        BorrowMaterial borrowmaterial = new BorrowMaterial();\n        borrowmaterial.initialize();\n        borrowmaterial.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        borrowmaterial.setQuantity(quantity);\n        borrowmaterial.setBorrow(borrow);\n        borrowmaterial.setMaterialNumber(materialNumber);\n        borrowmaterial.setOutComments(outComments);\n        borrowmaterial.setInComments(inComments);\n        borrowmaterial.setQuantityResolved(quantityResolved);\n        borrowmaterial.setQuantityReturned(quantityReturned);\n        borrowmaterial.setDescription(description);\n        persist(borrowmaterial);\n        return borrowmaterial;\n    }\n    public static BorrowReturnMaterial createBorrowReturnMaterial(final Calendar returnedDate,\n                                                                  final Short quantity,\n                                                                  final Agent agent,\n                                                                  final BorrowMaterial borrowMaterial)\n    {\n        BorrowReturnMaterial borrowreturnmaterial = new BorrowReturnMaterial();\n        borrowreturnmaterial.initialize();\n        borrowreturnmaterial.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        borrowreturnmaterial.setAgent(agent);\n        borrowreturnmaterial.setReturnedDate(returnedDate);\n        borrowreturnmaterial.setQuantity(quantity);\n        borrowreturnmaterial.setBorrowMaterial(borrowMaterial);\n        persist(borrowreturnmaterial);\n        return borrowreturnmaterial;\n    }\n//    public static BorrowShipment createBorrowShipment(final Shipment shipment, final Borrow borrow)\n//    {\n//        BorrowShipment borrowshipment = new BorrowShipment();\n//        borrowshipment.initialize();\n//        borrowshipment.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n//        borrowshipment.setShipment(shipment);\n//        borrowshipment.setBorrow(borrow);\n//        persist(borrowshipment);\n//        return borrowshipment;\n//    }\n    public static CollectingEvent createCollectingEvent(final String   stationFieldNumber,\n                                                        final String   method,\n                                                        final String   verbatimDate,\n                                                        final Calendar startDate,\n                                                        final Byte    startDatePrecision,\n                                                        final String   startDateVerbatim,\n                                                        final Calendar endDate,\n                                                        final Byte     endDatePrecision,\n                                                        final String   endDateVerbatim,\n                                                        final Short    startTime,\n                                                        final Short    endTime,\n                                                        final String   verbatimLocality,\n                                                        final Integer  groupPermittedToView,\n                                                        final Locality locality)\n    {\n        CollectingEvent collectingevent = new CollectingEvent();\n        collectingevent.initialize();\n        collectingevent.setVerbatimDate(verbatimDate);\n        collectingevent.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        collectingevent.setStartDate(startDate);\n        collectingevent.setEndDate(endDate);\n        collectingevent.setStationFieldNumber(stationFieldNumber);\n        collectingevent.setStartDatePrecision(startDatePrecision);\n        collectingevent.setStartDateVerbatim(startDateVerbatim);\n        collectingevent.setEndDatePrecision(endDatePrecision);\n        collectingevent.setEndDateVerbatim(endDateVerbatim);\n        collectingevent.setEndTime(endTime);\n        collectingevent.setVerbatimLocality(verbatimLocality);\n        collectingevent.setLocality(locality);\n        collectingevent.setMethod(method);\n        collectingevent.setStartTime(startTime);\n        persist(collectingevent);\n        return collectingevent;\n    }\n    public static CollectingEventAttr createCollectingEventAttr(final String strValue,\n                                                                final Double dblValue,\n                                                                final CollectingEvent collectingEvent,\n                                                                final AttributeDef definition)\n    {\n        CollectingEventAttr collectingeventattr = new CollectingEventAttr();\n        collectingeventattr.initialize();\n        collectingeventattr.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        collectingeventattr.setCollectingEvent(collectingEvent);\n        collectingeventattr.setStrValue(strValue);\n        collectingeventattr.setDblValue(dblValue);\n        collectingeventattr.setDefinition(definition);\n        persist(collectingeventattr);\n        return collectingeventattr;\n    }\n    public static Discipline createDiscipline(final String name,\n                                                          final DataType dataType,\n                                                          final GeographyTreeDef geographyTreeDef,\n                                                          final GeologicTimePeriodTreeDef geologicTimePeriodTreeDef,\n                                                          final TaxonTreeDef taxonTreeDef)\n    {\n        Discipline discipline = new Discipline();\n        discipline.initialize();\n        discipline.setDataType(dataType);\n        discipline.setGeographyTreeDef(geographyTreeDef);\n        discipline.setGeologicTimePeriodTreeDef(geologicTimePeriodTreeDef);\n        discipline.setTaxonTreeDef(taxonTreeDef);\n        discipline.setType(name);\n        persist(discipline);\n        return discipline;\n    }\n    public static CollectionObject createCollectionObject(final String fieldNumber,\n                                                          final String description,\n                                                          final Integer countAmt,\n                                                          final String name,\n                                                          final String modifier,\n                                                          final Calendar catalogedDate,\n                                                          final String catalogedDateVerbatim,\n                                                          final String guid,\n                                                          //final String altCatalogNumber,\n                                                          final Integer groupPermittedToView,\n                                                          final Boolean deaccessioned,\n                                                          final String catalogNumber,\n                                                          final CollectingEvent collectingEvent,\n                                                          final Collection collection,\n                                                          final Accession accession,\n                                                          final Agent cataloger,\n                                                          final Container container)\n    {\n        CollectionObject collectionobject = new CollectionObject();\n        collectionobject.initialize();\n        collectionobject.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        collectionobject.setFieldNumber(fieldNumber);\n        collectionobject.setCountAmt(countAmt);\n        collectionobject.setModifier(modifier);\n        collectionobject.setCatalogedDate(catalogedDate);\n        collectionobject.setCatalogedDateVerbatim(catalogedDateVerbatim);\n        collectionobject.setGuid(guid);\n        //collectionobject.setAltCatalogNumber(altCatalogNumber);\n        collectionobject.setDeaccessioned(deaccessioned);\n        collectionobject.setCatalogNumber(catalogNumber);\n        collectionobject.setCollectingEvent(collectingEvent);\n        collectionobject.setCollection(collection);\n        collectionobject.setAccession(accession);\n        collectionobject.setCataloger(cataloger);\n        collectionobject.setContainer(container);\n        collectionobject.setName(name);\n        collectionobject.setDescription(description);\n        persist(collectionobject);\n        return collectionobject;\n    }\n    public static CollectionObjectAttr createCollectionObjectAttr(final String strValue,\n                                                                  final Double dblValue,\n                                                                  final CollectionObject collectionObject,\n                                                                  final AttributeDef definition)\n    {\n        CollectionObjectAttr collectionobjectattr = new CollectionObjectAttr();\n        collectionobjectattr.initialize();\n        collectionobjectattr.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        collectionobjectattr.setCollectionObject(collectionObject);\n        collectionobjectattr.setStrValue(strValue);\n        collectionobjectattr.setDblValue(dblValue);\n        collectionobjectattr.setDefinition(definition);\n        persist(collectionobjectattr);\n        return collectionobjectattr;\n    }\n    public static CollectionObjectCitation createCollectionObjectCitation(final ReferenceWork referenceWork,\n                                                                          final CollectionObject collectionObject)\n    {\n        CollectionObjectCitation collectionobjectcitation = new CollectionObjectCitation();\n        collectionobjectcitation.initialize();\n        collectionobjectcitation.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        collectionobjectcitation.setCollectionObject(collectionObject);\n        collectionobjectcitation.setReferenceWork(referenceWork);\n        persist(collectionobjectcitation);\n        return collectionobjectcitation;\n    }\n    public static Collector createCollector(final Integer orderNumber,\n                                             final CollectingEvent collectingEvent,\n                                             final Agent agent)\n    {\n        Collector collector = new Collector();\n        collector.initialize();\n        collector.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        collector.setCollectingEvent(collectingEvent);\n        collector.setAgent(agent);\n        collector.setOrderNumber(orderNumber);\n        persist(collector);\n        return collector;\n    }\n    public static Container createContainer(final Short type,\n                                            final String name,\n                                            final String description,\n                                            final Integer number,\n                                            final CollectionObject colObj,\n                                            final Storage storage)\n    {\n        Container container = new Container();\n        container.initialize();\n        container.setNumber(number);\n        container.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        container.getCollectionObjects().add(colObj);\n        container.setName(name);\n        container.setStorage(storage);\n        container.setDescription(description);\n        container.setType(type);\n        persist(container);\n        return container;\n    }\n    public static DataType createDataType(final String name)\n    {\n        DataType datatype = new DataType();\n        datatype.initialize();\n        datatype.setName(name);\n        persist(datatype);\n        return datatype;\n    }\n    public static Disposal createDisposal(final String type,\n                                                final String disposalNumber,\n                                                final Calendar disposalDate)\n    {\n        Disposal disposal = new Disposal();\n        disposal.initialize();\n        disposal.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        disposal.setDisposalNumber(disposalNumber);\n        disposal.setDisposalDate(disposalDate);\n        disposal.setType(type);\n        persist(disposal);\n        return disposal;\n    }\n    public static DisposalAgent createDisposalAgent(final String role,\n                                                           final Agent agent,\n                                                           final Disposal disposal)\n    {\n        DisposalAgent disposalagent = new DisposalAgent();\n        disposalagent.initialize();\n        disposalagent.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        disposalagent.setRole(role);\n        disposalagent.setAgent(agent);\n        disposalagent.setDisposal(disposal);\n        persist(disposalagent);\n        return disposalagent;\n    }\n    public static DisposalPreparation createDisposalPreparation(final Short quantity,\n                                                                      final Disposal disposal)\n    {\n        DisposalPreparation disposalpreparation = new DisposalPreparation();\n        disposalpreparation.initialize();\n        disposalpreparation.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        disposalpreparation.setQuantity(quantity.intValue());\n        disposalpreparation.setDisposal(disposal);\n        persist(disposalpreparation);\n        return disposalpreparation;\n    }\n    public static Determination createDetermination(final boolean isCurrent,\n                                                    final String typeStatusName,\n                                                    final Calendar determinedDate,\n                                                    final String confidence,\n                                                    final String method,\n                                                    final String featureOrBasis,\n                                                    final Taxon taxon,\n                                                    final CollectionObject collectionObject,\n                                                    final Agent determiner)\n    {\n        Determination determination = new Determination();\n        determination.initialize();\n        determination.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        determination.setIsCurrent(isCurrent);\n        determination.setCollectionObject(collectionObject);\n        determination.setTypeStatusName(typeStatusName);\n        determination.setDeterminedDate(determinedDate);\n        determination.setConfidence(confidence);\n        determination.setFeatureOrBasis(featureOrBasis);\n        determination.setTaxon(taxon);\n        determination.setDeterminer(determiner);\n        determination.setMethod(method);\n        persist(determination);\n        return determination;\n    }\n    public static DeterminationCitation createDeterminationCitation(final ReferenceWork referenceWork,\n                                                                    final Determination determination)\n    {\n        DeterminationCitation determinationcitation = new DeterminationCitation();\n        determinationcitation.initialize();\n        determinationcitation.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        determinationcitation.setReferenceWork(referenceWork);\n        determinationcitation.setDetermination(determination);\n        persist(determinationcitation);\n        return determinationcitation;\n    }\n    /*\n     public static ExchangeIn createExchangeIn(final Calendar exchangeDate,\n     final Short quantityExchanged,\n     final String descriptionOfMaterial,\n     final Agent agent,\n     final Agent agent)\n     {\n     ExchangeIn exchangein = new ExchangeIn();\n     exchangein.initialize();\n     exchangein.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n     exchangein.setAgent(agent);\n     exchangein.setAgent(agent);\n     exchangein.setExchangeDate(exchangeDate);\n     exchangein.setQuantityExchanged(quantityExchanged);\n     exchangein.setDescriptionOfMaterial(descriptionOfMaterial);\n     if (session != null)\n     {\n     persist(exchangein);\n     }\n     return exchangein;\n     }\n     public static ExchangeOut createExchangeOut(final Calendar exchangeDate,\n     final Short quantityExchanged,\n     final String descriptionOfMaterial,\n     final Agent agent,\n     final Agent agent,\n     final Shipment shipment)\n     {\n     ExchangeOut exchangeout = new ExchangeOut();\n     exchangeout.initialize();\n     exchangeout.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n     exchangeout.setAgent(agent);\n     exchangeout.setAgent(agent);\n     exchangeout.setExchangeDate(exchangeDate);\n     exchangeout.setQuantityExchanged(quantityExchanged);\n     exchangeout.setDescriptionOfMaterial(descriptionOfMaterial);\n     exchangeout.setShipment(shipment);\n     if (session != null)\n     {\n     persist(exchangeout);\n     }\n     return exchangeout;\n     }*/\n    public static GroupPerson createGroupPerson(final Short orderNumber,\n                                                 final Agent agentByGroup,\n                                                 final Agent agentByMember)\n    {\n        GroupPerson groupperson = new GroupPerson();\n        groupperson.initialize();\n        groupperson.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        groupperson.setOrderNumber(orderNumber);\n        groupperson.setGroup(agentByGroup);\n        groupperson.setMember(agentByMember);\n        persist(groupperson);\n        return groupperson;\n    }\n    public static InfoRequest createInfoRequest(final Integer infoRequestID,\n                                                final String firstName,\n                                                final String lastName,\n                                                final String institution,\n                                                final String email,\n                                                final Calendar requestDate,\n                                                final Calendar replyDate,\n                                                final RecordSet recordSet,\n                                                final Agent agent)\n    {\n        InfoRequest infoRequest = new InfoRequest();\n        infoRequest.initialize();\n        infoRequest.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        infoRequest.setEmail(email);\n        infoRequest.setAgent(agent);\n        infoRequest.setFirstName(firstName);\n        infoRequest.setLastName(lastName);\n        infoRequest.setInfoRequestID(infoRequestID);\n        infoRequest.setInstitution(institution);\n        infoRequest.setRequestDate(requestDate);\n        infoRequest.setReplyDate(replyDate);\n        infoRequest.addReference(recordSet, \"recordSets\");\n        persist(infoRequest);\n        return infoRequest;\n    }\n    public static Journal createJournal(final String journalName, final String journalAbbreviation)\n    {\n        Journal journal = new Journal();\n        journal.initialize();\n        journal.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        journal.setJournalName(journalName);\n        journal.setJournalAbbreviation(journalAbbreviation);\n        persist(journal);\n        return journal;\n    }\n    public static Loan createLoan(final String loanNumber,\n                                  final Calendar loanDate,\n                                  final Calendar currentDueDate,\n                                  final Calendar originalDueDate,\n                                  final Calendar dateClosed,\n                                  final Boolean isClosed,\n                                  final Shipment shipment)\n    {\n        Loan loan = new Loan();\n        loan.initialize();\n        loan.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        //loan.setShipment(shipment);\n        loan.addReference(shipment, \"shipments\");\n        loan.setOriginalDueDate(originalDueDate);\n        loan.setDateClosed(dateClosed);\n        loan.setCurrentDueDate(currentDueDate);\n        loan.setLoanNumber(loanNumber);\n        loan.setLoanDate(loanDate);\n        loan.setIsClosed(isClosed);\n        persist(loan);\n        return loan;\n    }\n    public static LoanAgent createLoanAgent(final String role, final Loan loan, final Agent agent)\n    {\n        LoanAgent loanAgent = new LoanAgent();\n        loanAgent.initialize();\n        loanAgent.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        loanAgent.setRole(role);\n        loanAgent.addReference(agent, \"agent\");\n        //agent.getLoanAgents().add(loanAgent);\n        loanAgent.setLoan(loan);\n        persist(loanAgent);\n        return loanAgent;\n    }\n//createLoanPreparation((short)quantity, null, null, null, (short)0, (short)0, p, closedLoan);\n    public static LoanPreparation createLoanPreparation(final Integer quantity,\n                                                              final String descriptionOfMaterial,\n                                                              final String outComments,\n                                                              final String inComments,\n                                                              final Integer quantityResolved,\n                                                              final Integer quantityReturned,\n                                                              final Preparation preparation,\n                                                              final Loan loan)\n    {\n        LoanPreparation loanpreparation = new LoanPreparation();\n        loanpreparation.initialize();\n        loanpreparation.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        loanpreparation.setDescriptionOfMaterial(descriptionOfMaterial);\n        loanpreparation.setQuantity(quantity);\n        loanpreparation.setLoan(loan);\n        loanpreparation.setPreparation(preparation);\n        loanpreparation.setOutComments(outComments);\n        loanpreparation.setInComments(inComments);\n        loanpreparation.setQuantityResolved(quantityResolved);\n        loanpreparation.setQuantityReturned(quantityReturned);\n        \n        loan.getLoanPreparations().add(loanpreparation);\n        persist(loanpreparation);\n        return loanpreparation;\n    }\n    public static LoanReturnPreparation createLoanReturnPreparation(final Calendar returnedDate,\n                                                                    final Integer qtyRet,\n                                                                    final Integer qtyRes,\n                                                                    final LoanPreparation loanPreparation,\n                                                                    final DisposalPreparation disposalPreparation,\n                                                                    final Agent agent)\n    {\n        LoanReturnPreparation loanreturnpreparation = new LoanReturnPreparation();\n        loanreturnpreparation.initialize();\n        loanreturnpreparation.setReceivedBy(agent);\n        loanreturnpreparation.setReturnedDate(returnedDate);\n        loanreturnpreparation.setQuantityReturned(qtyRet);\n        loanreturnpreparation.setQuantityResolved(qtyRes);\n        loanreturnpreparation.setLoanPreparation(loanPreparation);\n        Set<DisposalPreparation> preps = new HashSet<>();\n        preps.add(disposalPreparation);\n        loanreturnpreparation.setDisposalPreparations(preps);\n        persist(loanreturnpreparation);\n        return loanreturnpreparation;\n    }\n    public static Locality createLocality(final String namedPlace,\n                                          final String relationToNamedPlace,\n                                          final String localityName,\n                                          final String baseMeridian,\n                                          final String range,\n                                          final String rangeDirection,\n                                          final String township,\n                                          final String townshipDirection,\n                                          final String section,\n                                          final String sectionPart,\n                                          final String verbatimElevation,\n                                          final String originalElevationUnit,\n                                          final Double minElevation,\n                                          final Double maxElevation,\n                                          final String elevationMethod,\n                                          final Double elevationAccuracy,\n                                          final Integer originalLatLongUnit,\n                                          final String latLongType,\n                                          final BigDecimal latitude1,\n                                          final BigDecimal longitude1,\n                                          final BigDecimal latitude2,\n                                          final BigDecimal longitude2,\n                                          final String latLongMethod,\n                                          final Double latLongAccuracy,\n                                          final String datum,\n                                          final Integer groupPermittedToView,\n                                          final String lat1text,\n                                          final String lat2text,\n                                          final String long1text,\n                                          final String long2text,\n                                          final String nationalParkName,\n                                          final String islandGroup,\n                                          final String island,\n                                          final String waterBody,\n                                          final String drainage,\n                                          final Geography geography)\n    {\n        Locality locality = new Locality();\n        locality.initialize();\n        locality.setNamedPlace(namedPlace);\n        locality.setRelationToNamedPlace(relationToNamedPlace);\n        locality.setLocalityName(localityName);\n        locality.setVerbatimElevation(verbatimElevation);\n        locality.setOriginalElevationUnit(originalElevationUnit);\n        locality.setMinElevation(minElevation);\n        locality.setMaxElevation(maxElevation);\n        locality.setElevationMethod(elevationMethod);\n        locality.setElevationAccuracy(elevationAccuracy);\n        locality.setOriginalLatLongUnit(originalLatLongUnit);\n        locality.setLatLongType(latLongType);\n        locality.setLatitude1(latitude1);\n        locality.setLongitude1(longitude1);\n        locality.setLatitude2(latitude2);\n        locality.setLongitude2(longitude2);\n        locality.setLatLongMethod(latLongMethod);\n        locality.setLatLongAccuracy(latLongAccuracy);\n        locality.setDatum(datum);\n        locality.setLat1text(lat1text);\n        locality.setLat2text(lat2text);\n        locality.setLong1text(long1text);\n        locality.setLong2text(long2text);\n        locality.setGeography(geography);\n        \n        LocalityDetail localityDetail = new LocalityDetail();\n        localityDetail.initialize();\n        \n        localityDetail.setBaseMeridian(baseMeridian);\n        localityDetail.setRangeDesc(range);\n        localityDetail.setRangeDirection(rangeDirection);\n        localityDetail.setTownship(township);\n        localityDetail.setTownshipDirection(townshipDirection);\n        localityDetail.setSection(section);\n        localityDetail.setSectionPart(sectionPart);\n        localityDetail.setNationalParkName(nationalParkName);\n        localityDetail.setIslandGroup(islandGroup);\n        localityDetail.setIsland(island);\n        localityDetail.setWaterBody(waterBody);\n        localityDetail.setDrainage(drainage);\n        locality.addReference(localityDetail, \"localityDetails\");\n        \n        persist(locality);\n        \n        return locality;\n    }\n    public static LocalityCitation createLocalityCitation(final ReferenceWork referenceWork, final Locality locality)\n    {\n        LocalityCitation localitycitation = new LocalityCitation();\n        localitycitation.initialize();\n        localitycitation.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        localitycitation.setReferenceWork(referenceWork);\n        localitycitation.setLocality(locality);\n        persist(localitycitation);\n        return localitycitation;\n    }\n    public static OtherIdentifier createOtherIdentifier(final String identifier, final CollectionObject collectionObject)\n    {\n        OtherIdentifier otheridentifier = new OtherIdentifier();\n        otheridentifier.initialize();\n        otheridentifier.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        otheridentifier.setCollectionObject(collectionObject);\n        otheridentifier.setIdentifier(identifier);\n        persist(otheridentifier);\n        return otheridentifier;\n    }\n    public static PrepType createPrepType(final Collection collection,\n                                          final String name)\n    {\n        PrepType preptype = new PrepType();\n        preptype.initialize();\n        collection.addReference(preptype, \"prepTypes\");\n        preptype.setName(name);\n        persist(preptype);\n        return preptype;\n    }\n    public static Preparation createPreparation(final Integer count,\n                                                final String storageLocation,\n                                                final Calendar preparedDate,\n                                                final PrepType prepType,\n                                                final CollectionObject collectionObject,\n                                                final Agent preparedByAgent,\n                                                final Storage storage)\n    {\n        Preparation preparation = new Preparation();\n        preparation.initialize();\n        preparation.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        preparation.setCountAmt(count);\n        preparation.setStorageLocation(storageLocation);\n        preparation.setPreparedDate(preparedDate);\n        preparation.setPrepType(prepType);\n        preparation.setCollectionObject(collectionObject);\n        preparation.setPreparedByAgent(preparedByAgent);\n        preparation.setStorage(storage);\n        persist(preparation);\n        return preparation;\n    }\n    public static PreparationAttr createPreparationAttr(final String strValue,\n                                                        final Double dblValue,\n                                                        final AttributeDef definition,\n                                                        final Preparation preparation)\n    {\n        PreparationAttr preparationattr = new PreparationAttr();\n        preparationattr.initialize();\n        preparationattr.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        preparationattr.setStrValue(strValue);\n        preparationattr.setDblValue(dblValue);\n        preparationattr.setDefinition(definition);\n        preparationattr.setPreparation(preparation);\n        persist(preparationattr);\n        return preparationattr;\n    }\n    public static Project createProject(final String projectName,\n                                        final String projectDescription,\n                                        final String url,\n                                        final Calendar startDate,\n                                        final Calendar endDate,\n                                        final Agent agent)\n    {\n        Project project = new Project();\n        project.initialize();\n        project.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        project.setUrl(url);\n        project.setAgent(agent);\n        project.setStartDate(startDate);\n        project.setEndDate(endDate);\n        project.setProjectName(projectName);\n        project.setProjectDescription(projectDescription);\n        persist(project);\n        return project;\n    }\n    public static RecordSetIFace createRecordSet(final Integer recordSetID, final String name, final SpecifyUser owner)\n    {\n        RecordSet recordset = new RecordSet();\n        recordset.initialize();\n        recordset.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        recordset.setRecordSetId(recordSetID);\n        recordset.setOwner(owner);\n        recordset.setName(name);\n        persist(recordset);\n        return recordset;\n    }\n    public static ReferenceWork createReferenceWork(final Byte referenceWorkType,\n                                                    final String title,\n                                                    final String publisher,\n                                                    final String placeOfPublication,\n                                                    final String workDate,\n                                                    final String volume,\n                                                    final String pages,\n                                                    final String url,\n                                                    final String libraryNumber,\n                                                    final Boolean isPublished,\n                                                    final Journal journal)\n    {\n        ReferenceWork referencework = new ReferenceWork();\n        referencework.initialize();\n        referencework.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        referencework.setUrl(url);\n        referencework.setReferenceWorkType(referenceWorkType);\n        referencework.setPublisher(publisher);\n        referencework.setPlaceOfPublication(placeOfPublication);\n        referencework.setWorkDate(workDate);\n        referencework.setVolume(volume);\n        referencework.setPages(pages);\n        referencework.setLibraryNumber(libraryNumber);\n        referencework.setIsPublished(isPublished);\n        referencework.setJournal(journal);\n        referencework.setTitle(title);\n        if (journal != null)\n        {\n            journal.getReferenceWorks().add(referencework);\n        }\n        persist(referencework);\n        return referencework;\n    }\n    public static RepositoryAgreement createRepositoryAgreement(final Division division,\n                                                                final String number,\n                                                                final String status,\n                                                                final Calendar startDate,\n                                                                final Calendar endDate,\n                                                                final Calendar dateReceived,\n                                                                final Agent originator)\n    {\n        RepositoryAgreement repositoryagreement = new RepositoryAgreement();\n        repositoryagreement.initialize();\n        repositoryagreement.setDivision(division);\n        repositoryagreement.setRepositoryAgreementNumber(number);\n        repositoryagreement.setDateReceived(dateReceived);\n        repositoryagreement.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        repositoryagreement.setStartDate(startDate);\n        repositoryagreement.setEndDate(endDate);\n        repositoryagreement.setOriginator(originator);\n        repositoryagreement.setStatus(status);\n        persist(repositoryagreement);\n        return repositoryagreement;\n    }\n    public static Shipment createShipment(final Calendar shipmentDate,\n                                          final String shipmentNumber,\n                                          final String shipmentMethod,\n                                          final Short numberOfPackages,\n                                          final String weight,\n                                          final String insuredForAmount,\n                                          final Agent shipper,\n                                          final Agent shippedTo,\n                                          final Agent agent)\n    {\n        Shipment shipment = new Shipment();\n        shipment.initialize();\n        shipment.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        shipment.setShippedBy(agent);\n        shipment.setShipmentDate(shipmentDate);\n        shipment.setShipmentNumber(shipmentNumber);\n        shipment.setShipmentMethod(shipmentMethod);\n        shipment.setNumberOfPackages(numberOfPackages);\n        shipment.setWeight(weight);\n        shipment.setInsuredForAmount(insuredForAmount);\n        shipment.setShipper(shipper);\n        shipment.setShippedTo(shippedTo);\n        persist(shipment);\n        return shipment;\n    }\n    public static SpecifyUser createSpecifyUser(final String    name,\n                                                final String    email,\n                                                final String    password,\n                                                final String    userType)\n    {\n        SpecifyUser specifyuser = new SpecifyUser();\n        specifyuser.initialize();\n        specifyuser.setEmail(email);\n        specifyuser.setPassword(password);\n        specifyuser.setName(name);\n        specifyuser.setUserType(userType);\n        persist(specifyuser);\n        return specifyuser;\n    }\n    \n    public static SpecifyUser createSpecifyUser(final String name,\n                                                final String email,\n                                                final String password,\n                                                final Map<String, SpPrincipal> groupMap,\n                                                final String userType)\n    {\n        SpecifyUser specifyuser = new SpecifyUser();\n        specifyuser.initialize();\n        specifyuser.setEmail(email);\n        specifyuser.setPassword(password);\n        specifyuser.addUserToSpPrincipalGroup(groupMap.get(userType));\n        specifyuser.setName(name);\n        specifyuser.setUserType(userType);\n        persist(specifyuser);\n        return specifyuser;\n    }\n    \n    public static SpecifyUser createSpecifyUser(final String name,\n                                                final String email,\n                                                final String    password,\n                                                final List<SpPrincipal> userGroups)\n    {\n        SpecifyUser specifyuser = new SpecifyUser();\n        specifyuser.initialize();\n        specifyuser.setEmail(email);\n        specifyuser.setPassword(password);\n        specifyuser.setName(name);\n        if (userGroups!=null) \n        {\n            for (SpPrincipal group : userGroups)\n            {\n                specifyuser.addUserToSpPrincipalGroup(group);\n            }\n        }\n        persist(specifyuser);\n        return specifyuser;\n    }\n    \n    public static SpecifyUser createSpecifyUser(final String name,\n                                                final String email,\n                                                final String    password,\n                                                final List<SpPrincipal> userGroups,\n                                                final String userType)\n    {\n        SpecifyUser specifyuser = new SpecifyUser();\n        specifyuser.initialize();\n        specifyuser.setEmail(email);\n        specifyuser.setPassword(password);\n        specifyuser.setName(name);\n        specifyuser.setUserType(userType);\n        if (userGroups!=null) \n        {\n            for (SpPrincipal group : userGroups)\n            {\n                specifyuser.addUserToSpPrincipalGroup(group);\n            }\n        }\n        persist(specifyuser);\n        return specifyuser;\n    }\n    public static SpecifyUser createAndAddTesterToCollection(final Session            sessionArg,\n                                                             final String             name,\n                                                             final String             email,\n                                                             final String             pwd,\n                                                             final String             title,\n                                                             final String             first,\n                                                             final String             middle,\n                                                             final String             last,\n                                                             final String             abbrev,\n                                                             final Discipline         discipline, \n                                                             final Division           division, \n                                                             final Collection         collection,\n                                                             final Map<String, SpPrincipal> groupMap, \n                                                             final String             userType) \n    {\n        // Tester\n        Agent testerAgent = createAgent(title, first, middle, last, abbrev, email);\n        sessionArg.saveOrUpdate(testerAgent);\n        \n        testerAgent.setDivision(division);\n        SpecifyUser testerUser = createSpecifyUser(name, email, pwd, groupMap, userType);\n        sessionArg.saveOrUpdate(testerUser);\n        \n        SpPrincipal testerUserPrincipal = DataBuilder.createUserPrincipal(testerUser, collection);\n        sessionArg.saveOrUpdate(testerUserPrincipal);\n        \n        testerUser.addUserToSpPrincipalGroup(testerUserPrincipal);\n        discipline.addReference(testerAgent, \"agents\");\n        testerUser.addReference(testerAgent, \"agents\");\n        return testerUser;\n    }\n//    public static UserPermission createUserPermission(SpecifyUser owner, \n//                                                      Discipline objDef, \n//                                                      boolean adminPrivilege, \n//                                                      boolean dataAccessPrivilege)\n//    {\n//        UserPermission permission = new UserPermission();\n//        permission.setAdminPrivilege(adminPrivilege);\n//        permission.setDiscipline(objDef);\n//        permission.setDataAccessPrivilege(dataAccessPrivilege);\n//        permission.setSpecifyUser(owner);\n//        persist(permission);\n//        return permission;\n//    }\n    public static TaxonCitation createTaxonCitation(final ReferenceWork referenceWork, final Taxon taxon)\n    {\n        TaxonCitation taxoncitation = new TaxonCitation();\n        taxoncitation.initialize();\n        taxoncitation.setTimestampCreated(new Timestamp(System.currentTimeMillis()));\n        taxoncitation.setTaxon(taxon);\n        taxoncitation.setReferenceWork(referenceWork);\n        persist(taxoncitation);\n        return taxoncitation;\n    }\n    public static SpPrincipal createGroup(final String name, \n                                          final String type, \n                                          final int priority, \n                                          final UserGroupScope scope)\n    {\n        SpPrincipal usergroup = new SpPrincipal();\n        usergroup.initialize();\n        usergroup.setName(name);\n        usergroup.setPriority(priority);\n        usergroup.setGroupType(type);\n        usergroup.setGroupSubClass(GroupPrincipal.class.getCanonicalName());\n        usergroup.setScope(scope);\n        return usergroup;    \n    }\n    \n    public static SpPrincipal createAdminGroup(final String name, final UserGroupScope scope)\n    {\n        SpPrincipal groupPrincipal = new SpPrincipal();\n        groupPrincipal.initialize();\n        groupPrincipal.setName(name);\n        groupPrincipal.setPriority(0);\n        groupPrincipal.setScope(scope);\n        groupPrincipal.setGroupSubClass(AdminPrincipal.class.getCanonicalName());\n        return groupPrincipal;\n    }\n    \n    public static SpPrincipal createUserPrincipal(final SpecifyUser user, final Collection scope)\n    {\n        SpPrincipal userPrincipal = new SpPrincipal();\n        userPrincipal.initialize();\n        userPrincipal.setName(user.getName());\n        userPrincipal.setPriority(80);\n        userPrincipal.setScope(scope);\n        userPrincipal.setGroupSubClass(UserPrincipal.class.getCanonicalName());\n        user.getSpPrincipals().add(userPrincipal);\n        return userPrincipal;   \n    }\n    \n    public static AutoNumberingScheme createAutoNumberingScheme(final String schemeName,\n                                                                final String schemeClassName,\n                                                                final String formatName,\n                                                                final boolean isNumericOnly,\n                                                                final int   tableNumber)\n    {\n", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "length": 5629, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "c5b81ba8430b7e7547bcdb1f18b7b7b19ce68f64a44ea88a"}
{"input": "", "context": "#region License, Terms and Author(s)\n//\n// BackLINQ\n// Copyright (c) 2008 Atif Aziz. All rights reserved.\n//\n//  Author(s):\n//\n//      Dominik Hug, http://www.dominikhug.ch\n//\n// This library is free software; you can redistribute it and/or modify it\n// under the terms of the New BSD License, a copy of which should have\n// been delivered along with this distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n// PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n#endregion\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Globalization;\nusing System.Text;\nusing System.Threading;\nusing NUnit.Framework;\nusing System.Linq;\nusing NUnit.Framework.SyntaxHelpers;\nusing NUnit.Framework.Constraints;\nusing System.Diagnostics;\nnamespace NUnit.Framework.SyntaxHelpers { class Dummy {} }\nnamespace MonoTests.System.Linq\n{\n\t[TestFixture]\n\tpublic sealed class EnumerableFixture {\n\t\tprivate CultureInfo initialCulture; // Thread culture saved during Setup to be undone in TearDown.\n\t\tprivate AssertionHandler tearDownAssertions;\n\t\tprivate delegate void AssertionHandler ();\n\t\t[SetUp]\n\t\tpublic void SetUp ()\n\t\t{\n\t\t\ttearDownAssertions = null;\n\t\t\tinitialCulture = Thread.CurrentThread.CurrentCulture;\n\t\t\tThread.CurrentThread.CurrentCulture = new CultureInfo (\"de-CH\");\n\t\t}\n\t\t[TearDown]\n\t\tpublic void TearDown ()\n\t\t{\n\t\t\tif (tearDownAssertions != null)\n\t\t\t\ttearDownAssertions ();\n\t\t\tThread.CurrentThread.CurrentCulture = initialCulture;\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Aggregate_EmptySource_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tvar source = Read<object> ();\n\t\t\tsource.Aggregate (delegate { throw new NotImplementedException (); });\n\t\t}\n\t\t[Test]\n\t\tpublic void Aggregate_AddFuncOnIntegers_ReturnsTotal ()\n\t\t{\n\t\t\tvar source = Read (12, 34, 56, 78, 910, 1112, 1314, 1516, 1718, 1920);\n\t\t\tvar result = source.Aggregate ((a, b) => a + b);\n\t\t\tAssert.That (result, Is.EqualTo (8670));\n\t\t}\n\t\t[Test]\n\t\tpublic void Aggregate_AddFuncOnIntegersWithSeed_ReturnsTotal ()\n\t\t{\n\t\t\tvar source = Read (12, 34, 56, 78, 910, 1112, 1314, 1516, 1718, 1920);\n\t\t\tvar result = source.Aggregate (100, (a, b) => a + b);\n\t\t\tAssert.That (result, Is.EqualTo (8770));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void Aggregate_NullSource_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tEnumerable.Aggregate<object> (null, delegate { throw new NotImplementedException (); });\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void Aggregate_NullFunc_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tRead<object> ().Aggregate (null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Empty_YieldsEmptySource ()\n\t\t{\n\t\t\tvar source = Enumerable.Empty<string> ();\n\t\t\tAssert.That (source, Is.Not.Null);\n\t\t\tvar e = source.GetEnumerator ();\n\t\t\tAssert.That (e, Is.Not.Null);\n\t\t\tAssert.That (e.MoveNext (), Is.False);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void Cast_NullSource_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tEnumerable.Cast<object> (null);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidCastException))]\n\t\tpublic void Cast_InvalidSource_ThrowsInvalidCastException ()\n\t\t{\n\t\t\tvar source = Read (1000, \"hello\", new object ());\n\t\t\tvar e = source.Cast<byte> ().GetEnumerator ();\n\t\t\te.MoveNext (); // Do something so Cast will really run (deferred execution)\n\t\t}\n\t\t[Test]\n\t\tpublic void Cast_ObjectSourceContainingIntegers_YieldsDowncastedIntegers ()\n\t\t{\n\t\t\tvar source = Read<object> (1, 10, 100);\n\t\t\tsource.Cast<int> ().AssertEquals (1, 10, 100);\n\t\t}\n\t\t[Test]\n\t\tpublic void Cast_Integers_YieldsUpcastedObjects ()\n\t\t{\n#if false\n\t\t\t// shouldn't this be inferred?\n\t\t\tRead (1, 10, 100).Cast<object> ().AssertEquals (1, 10, 100);\n#else\n\t\t\tRead (1, 10, 100).Cast<object> ().AssertEquals<object> (1, 10, 100);\n#endif\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void All_NullSource_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tEnumerable.All (null, (int i) => { throw new NotImplementedException (); });\n\t\t}\n\t\t[Test]\n\t\tpublic void All_SomeSourceElementsNotSatifyingPredicate_ReturnsFalse ()\n\t\t{\n\t\t\tvar source = Read (-100, -1, 0, 1, 100);\n\t\t\tAssert.That (source.All (i => i < 0), Is.False);\n\t\t}\n\t\t[Test]\n\t\tpublic void All_SourceElementsSatisfyingPredicate_ReturnsTrue ()\n\t\t{\n\t\t\tvar source = Read (-100, -1, 0, 1, 100);\n\t\t\tAssert.That (source.All (i => i >= -100), Is.True);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void Any_NullSource_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tEnumerable.Any<object> (null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Any_EmptySource_ReturnsFalse ()\n\t\t{\n\t\t\tvar source = Read<object> ();\n\t\t\tAssert.That (source.Any (), Is.False);\n\t\t}\n\t\t[Test]\n\t\tpublic void Any_NonEmptySource_ReturnsTrue ()\n\t\t{\n\t\t\tvar source = Read (new object ());\n\t\t\tAssert.That (source.Any (), Is.True);\n\t\t}\n\t\t[Test]\n\t\tpublic void Any_PredicateArg_EmptySource_ReturnsFalse ()\n\t\t{\n\t\t\tvar source = Read (new int [0]);\n\t\t\tAssert.That (source.Any (delegate { throw new NotImplementedException (); }), Is.False);\n\t\t}\n\t\t[Test]\n\t\tpublic void Any_PredicateArg_NonEmptySource_ReturnsTrue ()\n\t\t{\n\t\t\tAssert.That (Read (1, 2, 3, 4, 5).Any (i => i > 2), Is.True);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Average_EmptyLongSource_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tRead<long> ().Average ();\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_Longs_ReturnsAverage ()\n\t\t{\n\t\t\tAssert.That (Read (25L, 75L).Average (), Is.EqualTo (50));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_SelectorArg_Longs_ReturnsAverage ()\n\t\t{\n\t\t\tAssert.That (Read (25L, 75L).Average (n => n * 2L), Is.EqualTo (100));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_EmptyNullableLongSource_Null ()\n\t\t{\n\t\t\tAssert.That (Read<long?> ().Average (), Is.Null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_NullableLongsWithSomeNull_ReturnsAverage ()\n\t\t{\n\t\t\tAssert.That (Read<long?> (12L, null, 34L, null, 56L).Average (), Is.EqualTo (34.0));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_SelectorArg_NullableLongsWithSomeNull_ReturnsAverage ()\n\t\t{\n\t\t\tAssert.That (Read<long?> (12L, null, 34L, null, 56L).Average (n => n * 2L), Is.EqualTo (68.0));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_EmptyNullableIntegerSource_Null ()\n\t\t{\n\t\t\tAssert.That (Read<int?> ().Average (), Is.Null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_NullableIntegersWithSomeNull_ReturnsAverage ()\n\t\t{\n\t\t\tAssert.That (Read<int?> (12, null, 34, null, 56).Average (), Is.EqualTo (34.0));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_SelectorArg_NullableIntegersWithSomeNull_ReturnsAverage ()\n\t\t{\n\t\t\tAssert.That (Read<int?> (12, null, 34, null, 56).Average (n => n * 2), Is.EqualTo (68.0));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Average_EmptyDecimalSource_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tRead<decimal> ().Average ();\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_Decimals_ReturnsAverage ()\n\t\t{\n\t\t\tvar source = Read (-10000m, 2.0001m, 50m);\n\t\t\tAssert.That (source.Average (), Is.EqualTo (-3315.999966).Within (0.00001));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_SelectorArg_Decimals_ReturnsAverage ()\n\t\t{\n\t\t\tvar source = Read (-10000m, 2.0001m, 50m);\n\t\t\tAssert.That (source.Average (n => n * 2m), Is.EqualTo (-6631.999933).Within (0.00001));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Average_EmptySource_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tRead<int> ().Average ();\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_EmptyNullableIntegerSource_ReturnsNull ()\n\t\t{\n\t\t\tAssert.That (Read<int?> ().Average (), Is.Null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_SelectorArg_Integers_ReturnsAverage ()\n\t\t{\n\t\t\tAssert.That (Read (21, 22, 23, 24).Average (n => n * 2).Equals (45));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Average_EmptyDoubleSource_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tRead<double> ().Average ();\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_Doubles_ReturnsAverage ()\n\t\t{\n\t\t\tvar source = Read (-3.45, 9.001, 10000.01);\n\t\t\tAssert.That (source.Average (), Is.EqualTo (3335.187).Within (0.01));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_SelectorArg_Doubles_ReturnsAverage ()\n\t\t{\n\t\t\tvar source = Read (-3.45, 9.001, 10000.01);\n\t\t\tAssert.That (source.Average (n => n * 2.0), Is.EqualTo (6670.374).Within (0.01));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Average_EmptyFloatSource_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tRead<float> ().Average ();\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_Floats_ReturnsAverage ()\n\t\t{\n\t\t\tvar source = Read (-3.45F, 9.001F, 10000.01F);\n\t\t\tAssert.That (source.Average (), Is.EqualTo (3335.187).Within (0.01));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_SelectorArg_Floats_ReturnsAverage ()\n\t\t{\n\t\t\tvar source = Read (-3.45F, 9.001F, 10000.01F);\n\t\t\tAssert.That (source.Average (n => n * 2F), Is.EqualTo (6670.37354).Within (0.01));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_EmptyNullableFloatSource_Null ()\n\t\t{\n\t\t\tAssert.That (Read<float?> ().Average (), Is.Null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_NullableFloatsWithSomeNulls_ReturnsAverage ()\n\t\t{\n\t\t\tvar source = Read<float?> (-3.45F, null, 9.001F, null, 10000.01F);\n\t\t\tAssert.That (source.Average (), Is.EqualTo (3335.187).Within (0.01));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_SelectorArg_NullableFloatsWithSomeNulls_ReturnsAverage ()\n\t\t{\n\t\t\tvar source = Read<float?> (-3.45F, null, 9.001F, null, 10000.01F);\n\t\t\tAssert.That (source.Average (n => n * 2F), Is.EqualTo (6670.37354).Within (0.01));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_EmptyNullableDoubleSource_Null ()\n\t\t{\n\t\t\tAssert.That (Read<double?> ().Average (), Is.Null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_NullableDoublesWithSomeNulls_ReturnsAverage ()\n\t\t{\n\t\t\tvar source = Read<double?> (-3.45, null, 9.001, null, 10000.01);\n\t\t\tAssert.That (source.Average (), Is.EqualTo (3335.187).Within (0.01));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_SelectorArg_NullableDoublesWithSomeNulls_ReturnsAverage ()\n\t\t{\n\t\t\tvar source = Read<double?> (-3.45, null, 9.001, null, 10000.01);\n\t\t\tAssert.That (source.Average (n => n * 2.0), Is.EqualTo (6670.374).Within (0.01));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_EmptyNullableDecimalSource_Null ()\n\t\t{\n\t\t\tAssert.That (Read<decimal?> ().Average (), Is.Null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_NullableDecimalsWithSomeNulls_ReturnsAverage ()\n\t\t{\n\t\t\tvar source = Read<decimal?> (-3.45m, null, 9.001m, null, 10000.01m);\n\t\t\tAssert.That (source.Average (), Is.EqualTo (3335.187).Within (0.01));\n\t\t}\n\t\t[Test]\n\t\tpublic void Average_SelectorArg_NullableDecimalsWithSomeNulls_ReturnsAverage ()\n\t\t{\n\t\t\tvar source = Read<decimal?> (-3.45m, null, 9.001m, null, 10000.01m);\n\t\t\tAssert.That (source.Average (n => n * 2m), Is.EqualTo (6670.374m).Within (0.01));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void Concat_FirstSourceNull_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tEnumerable.Concat (null, new object [0]);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void Concat_SecondSourceNull_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tnew object [0].Concat (null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Concat_TwoSequences_CombinedSequenceWhereElementsOfSecondFollowFirst ()\n\t\t{\n\t\t\tvar first = Read (12, 34, 56);\n\t\t\tvar second = Read (78, 910, 1112);\n\t\t\tfirst.Concat (second).AssertEquals (12, 34, 56, 78, 910, 1112);\n\t\t}\n\t\t[Test]\n\t\tpublic void Contains_SequenceContainingSoughtValue_ReturnsTrue ()\n\t\t{\n\t\t\tvar source = Read (12, -15, 21);\n\t\t\tAssert.That (source.Contains (21), Is.True);\n\t\t}\n\t\t[Test]\n\t\tpublic void Contains_SequenceWithoutSoughtValue_ReturnsFalse ()\n\t\t{\n\t\t\tvar source = Read (-2, 4, 8);\n\t\t\tAssert.That (source.Contains (9), Is.False);\n\t\t}\n\t\t[Test]\n\t\tpublic void Contains_CollectionOptimization_ReturnsTrueWithoutEnumerating ()\n\t\t{\n\t\t\tvar source = new NonEnumerableList<int> (new [] { 1, 2, 3 });\n\t\t\t// IMPORTANT! Use the non-extension invocation style below\n\t\t\t//            to avoid calling List<T>.Contains instead of\n\t\t\t//            Enumerable.Contains.\n\t\t\tAssert.That (Enumerable.Contains (source, 3), Is.True);\n\t\t}\n\t\t[Test]\n\t\tpublic void Count_Integers_ReturnsNumberOfElements ()\n\t\t{\n\t\t\tAssert.That (Read (12, 34, 56).Count (), Is.EqualTo (3));\n\t\t}\n\t\t[Test]\n\t\tpublic void Count_PredicateArg_Strings_CountsOnlyStringsWithEvenLength ()\n\t\t{\n\t\t\tvar source = Read (\"A\", \"AB\", \"ABC\", \"ABCD\");\n\t\t\tAssert.That (source.Count (s => s.Length % 2 == 0), Is.EqualTo (2));\n\t\t}\n\t\t[Test]\n\t\tpublic void DefaultIfEmpty_Integers_YieldsIntegersInOrder ()\n\t\t{\n\t\t\tvar source = Read (12, 34, 56);\n\t\t\tsource.DefaultIfEmpty (1).AssertEquals (12, 34, 56);\n\t\t}\n\t\t[Test]\n\t\tpublic void DefaultIfEmpty_EmptyIntegerSequence_ReturnsZero ()\n\t\t{\n\t\t\tvar source = Read (new int [0]);\n\t\t\tsource.DefaultIfEmpty ().AssertEquals (0);\n\t\t}\n\t\t[Test]\n\t\tpublic void DefaultIfEmpty_DefaultValueArg_EmptyIntegerSequenceAndNonZeroDefault_ReturnNonZeroDefault ()\n\t\t{\n\t\t\tvar source = Read (new int [0]);\n\t\t\tsource.DefaultIfEmpty (5).AssertEquals (5);\n\t\t}\n\t\t[Test]\n\t\tpublic void DefaultIfEmpty_DefaultValueArg_Integers_YieldsIntegersInOrder ()\n\t\t{\n\t\t\tvar source = Read (12, 34, 56);\n\t\t\tsource.DefaultIfEmpty (5).AssertEquals (12, 34, 56);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void Distinct_NullSource_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tEnumerable.Distinct<object> (null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Distinct_IntegersWithSomeDuplicates_YieldsIntegersInSourceOrderWithoutDuplicates ()\n\t\t{\n\t\t\tvar source = Read (12, 34, 34, 56, 78, 78, 78, 910, 78);\n\t\t\tsource.Distinct ().AssertEquals (12, 34, 56, 78, 910);\n\t\t}\n\t\t[Test]\n\t\tpublic void Distinct_MixedCaseStringsWithCaseIgnoringComparer_YieldsFirstCaseOfEachDistinctStringInSourceOrder ()\n\t\t{\n\t\t\tvar source = Read (\"Foo Bar BAZ BaR baz FOo\".Split ());\n\t\t\tsource.Distinct (StringComparer.InvariantCultureIgnoreCase).AssertEquals (\"Foo\", \"Bar\", \"BAZ\");\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentOutOfRangeException))]\n\t\tpublic void ElementAt_IndexOutOfRange_ThrowsArgumentOutOfRangeException ()\n\t\t{\n\t\t\tvar source = Read (3, 5, 7);\n\t\t\tsource.ElementAt (3);\n\t\t}\n\t\t[Test]\n\t\tpublic void ElementAt_Integers_ReturnsValueAtGivenIndex ()\n\t\t{\n\t\t\tvar source = new [] { 15, 2, 7 };\n\t\t\tAssert.That (Read (source).ElementAt (0), Is.EqualTo (15));\n\t\t\tAssert.That (Read (source).ElementAt (1), Is.EqualTo (2));\n\t\t\tAssert.That (Read (source).ElementAt (2), Is.EqualTo (7));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentOutOfRangeException))]\n\t\tpublic void ElementAt_NegativeIndex_ThrowsArgumentOutOfRangeException ()\n\t\t{\n\t\t\tRead<int> ().ElementAt (-1);\n\t\t}\n\t\t[Test]\n\t\tpublic void ElementAt_ListOptimization_ReturnsValueAtGivenIndex ()\n\t\t{\n\t\t\tvar source = new NonEnumerableList<int> (new [] { 1, 2, 3, 4, 5, 6 });\n\t\t\tAssert.That (source.ElementAt (2), Is.EqualTo (3));\n\t\t}\n\t\t[Test]\n\t\tpublic void ElementAt_ReadOnlyListOptimization_ReturnsValueAtGivenIndex()\n\t\t{\n\t\t\tvar source = new NonEnumerableReadOnlyList<int> (new List<int> (new[] { 1, 2, 3, 4, 5, 6 }));\n\t\t\tAssert.That(source.ElementAt (2), Is.EqualTo (3));\n\t\t}\n\t\t[Test]\n\t\tpublic void ElementAtOrDefault_IntegersWithOutOfRangeIndex_ReturnsDefault ()\n\t\t{\n\t\t\tvar source = Read (3, 6, 8);\n\t\t\tAssert.That (source.ElementAtOrDefault (3), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void ElementAtOrDefault_Integers_ReturnsValueAtGivenIndex ()\n\t\t{\n\t\t\tvar source = Read (3, 6, 9);\n\t\t\tAssert.That (source.ElementAtOrDefault (2), Is.EqualTo (9));\n\t\t}\n\t\t[Test]\n\t\tpublic void ElementAtOrDefault_ListOptimization_ReturnsValueAtGivenIndex ()\n\t\t{\n\t\t\tvar source = new NonEnumerableList<int> (new [] { 1, 2, 3, 4, 5, 6 });\n\t\t\tAssert.That (source.ElementAtOrDefault (2), Is.EqualTo (3));\n\t\t}\n\t\t[Test]\n\t\tpublic void ElementAtOrDefault_ReadOnlyListOptimization_ReturnsValueAtGivenIndex()\n\t\t{\n\t\t\tvar source = new NonEnumerableReadOnlyList<int>(new List<int> (new[] { 1, 2, 3, 4, 5, 6 }));\n\t\t\tAssert.That(source.ElementAtOrDefault (2), Is.EqualTo (3));\n\t\t}\n\t\t[Test]\n\t\tpublic void ElementAtOrDefault_BooleansAndNegativeIndex_ReturnsDefault ()\n\t\t{\n\t\t\tvar source = Read (true, false, true, false);\n\t\t\tAssert.That (source.ElementAtOrDefault (-3), Is.False);\n\t\t}\n\t\t[Test]\n\t\tpublic void ElementAtOrDefault_ObjectsWithOutOfRangeIndex_ReturnsNull ()\n\t\t{\n\t\t\tvar source = Read (new object (), new object ());\n\t\t\tAssert.That (source.ElementAtOrDefault (2), Is.EqualTo (null));\n\t\t}\n\t\t[Test]\n\t\tpublic void ElementAtOrDefault_Objects_ReturnsValueAtGivenIndex ()\n\t\t{\n\t\t\tvar second = new object ();\n\t\t\tvar source = Read (new object (), second, new object ());\n\t\t\tAssert.That (source.ElementAt (1), Is.EqualTo (second));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void Except_SecondArg_ArgumentNull_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tRead<object> ().Except (null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Except_SecondArg_ValidArgument_ReturnsDifference ()\n\t\t{\n\t\t\tvar first = Read (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\t\t\tvar second = Read (1, 3, 5, 7, 9);\n\t\t\tfirst.Except (second).AssertEquals (2, 4, 6, 8, 10);\n\t\t}\n\t\t[Test]\n\t\tpublic void Except_SecondArgComparerArg_ComparerIsUsed ()\n\t\t{\n\t\t\tvar first = Read (\"albert\", \"john\", \"simon\");\n\t\t\tvar second = Read (\"ALBERT\");\n\t\t\tfirst.Except (second, StringComparer.CurrentCultureIgnoreCase).AssertEquals (\"john\", \"simon\");\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void First_EmptySource_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tRead<int> ().First ();\n\t\t}\n\t\t[Test]\n\t\tpublic void First_Integers_ReturnsFirst ()\n\t\t{\n\t\t\tvar source = Read (12, 34, 56);\n\t\t\tAssert.That (source.First (), Is.EqualTo (12));\n\t\t}\n\t\t[Test]\n\t\tpublic void First_IntegersWithPredicateForEvens_FirstEvenInteger ()\n\t\t{\n\t\t\tvar source = Read (15, 20, 25, 30);\n\t\t\tAssert.That (source.First (i => i % 2 == 0), Is.EqualTo (20));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void First_IntegerSequenceWithNoneMatchingPredicate_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tvar source = Read (12, 34, 56, 78);\n\t\t\tAssert.That (source.First (i => i > 100), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void FirstOrDefault_EmptyBooleanSource_ReturnsFalse ()\n\t\t{\n\t\t\tAssert.That (Read<bool> ().FirstOrDefault (), Is.False);\n\t\t}\n\t\t[Test]\n\t\tpublic void FirstOrDefault_Objects_ReturnsFirstReference ()\n\t\t{\n\t\t\tvar first = new object ();\n\t\t\tvar source = Read (first, new object ());\n\t\t\tAssert.That (source.FirstOrDefault (), Is.SameAs (first));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void FirstOrDefault_PredicateArg_NullPredicate_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tRead<int> ().FirstOrDefault (null);\n\t\t}\n\t\t[Test]\n\t\tpublic void FirstOrDefault_PredicateArg_NonNullPredicate_ReturnsFirstMatchingItem ()\n\t\t{\n\t\t\tvar source = Read (1, 4, 8);\n\t\t\tAssert.That (source.FirstOrDefault (i => i % 2 == 0), Is.EqualTo (4));\n\t\t}\n\t\t[Test]\n\t\tpublic void FirstOrDefault_PredicateArg_IntegerSequenceWithNonMatchingPredicate_ReturnsDefaultValue ()\n\t\t{\n\t\t\tvar source = Read (1, 4, 6);\n\t\t\tAssert.That (source.FirstOrDefault (i => i > 10), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void First_IntegerListOptimization_ReturnsFirstElementWithoutEnumerating ()\n\t\t{\n\t\t\tvar source = new NonEnumerableList<int> (new [] { 123, 456, 789 });\n\t\t\tAssert.That (source.First (), Is.EqualTo (123));\n\t\t}\n\t\tprivate class Person {\n\t\t\tpublic string FirstName { get; set; }\n\t\t\tpublic string LastName { get; set; }\n\t\t\tpublic int Age { get; set; }\n\t\t\tpublic static Person [] CreatePersons ()\n\t\t\t{\n\t\t\t\treturn new []\n                {\n                    new Person { LastName = \"M\\u00FCller\", FirstName = \"Peter\",   Age = 21 },\n                    new Person { LastName = \"M\\u00FCller\", FirstName = \"Herbert\", Age = 22 },\n                    new Person { LastName = \"Meier\",       FirstName = \"Hubert\",  Age = 23 },\n                    new Person { LastName = \"Meier\",       FirstName = \"Isidor\",  Age = 24 }\n                };\n\t\t\t}\n\t\t\tpublic static Person [] CreatePersonsWithNamesUsingMixedCase ()\n\t\t\t{\n\t\t\t\tvar persons = CreatePersons ();\n\t\t\t\tvar herbert = persons [1];\n\t\t\t\therbert.LastName = herbert.LastName.ToLower ();\n\t\t\t\tvar isidor = persons [3];\n\t\t\t\tisidor.LastName = isidor.LastName.ToLower ();\n\t\t\t\treturn persons;\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void GroupBy_KeySelectorArg_NullAsKeySelector_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tRead<object> ().GroupBy<object, object> (null);\n\t\t}\n\t\t[Test]\n\t\tpublic void GroupBy_KeySelectorArg_ValidArguments_CorrectGrouping ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersons ());\n\t\t\tvar result = new Reader<IGrouping<string, Person>> (persons.GroupBy (person => person.LastName));\n\t\t\tvar group1 = result.Read ();\n\t\t\tAssert.That (group1.Key, Is.EqualTo (\"M\\u00FCller\"));\n\t\t\tvar muellers = new Reader<Person> (group1);\n\t\t\tAssert.That (muellers.Read ().FirstName, Is.EqualTo (\"Peter\"));\n\t\t\tAssert.That (muellers.Read ().FirstName, Is.EqualTo (\"Herbert\"));\n\t\t\tvar group2 = result.Read ();\n\t\t\tAssert.That (group2.Key, Is.EqualTo (\"Meier\"));\n\t\t\tvar meiers = new Reader<Person> (group2);\n\t\t\tAssert.That (meiers.Read ().FirstName, Is.EqualTo (\"Hubert\"));\n\t\t\tAssert.That (meiers.Read ().FirstName, Is.EqualTo (\"Isidor\"));\n\t\t\tresult.AssertEnded ();\n\t\t}\n\t\t[Test]\n\t\tpublic void GroupBy_KeySelectorArg_ValidArguments_CorrectCaseSensitiveGrouping ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersonsWithNamesUsingMixedCase ());\n\t\t\tvar result = persons.GroupBy (person => person.LastName);\n\t\t\tvar e = result.GetEnumerator ();\n\t\t\tFunc<IGrouping<string, Person>, Person> first = g => new Reader<Person> (g).Read ();\n\t\t\te.MoveNext ();\n\t\t\tAssert.That (e.Current.Key, Is.EqualTo (\"M\\u00FCller\"));\n\t\t\tAssert.That (first (e.Current).FirstName, Is.EqualTo (\"Peter\"));\n\t\t\te.MoveNext ();\n\t\t\tAssert.That (e.Current.Key, Is.EqualTo (\"m\\u00FCller\"));\n\t\t\tAssert.That (first (e.Current).FirstName, Is.EqualTo (\"Herbert\"));\n\t\t\te.MoveNext ();\n\t\t\tAssert.That (e.Current.Key, Is.EqualTo (\"Meier\"));\n\t\t\tAssert.That (first (e.Current).FirstName, Is.EqualTo (\"Hubert\"));\n\t\t\te.MoveNext ();\n\t\t\tAssert.That (e.Current.Key, Is.EqualTo (\"meier\"));\n\t\t\tAssert.That (first (e.Current).FirstName, Is.EqualTo (\"Isidor\"));\n\t\t\tAssert.That (e.MoveNext (), Is.False);\n\t\t}\n\t\t[Test]\n\t\tpublic void GroupBy_KeySelectorArgComparerArg_KeysThatDifferInCasingNonCaseSensitiveStringComparer_CorrectGrouping ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersonsWithNamesUsingMixedCase ());\n\t\t\tvar result = new Reader<IGrouping<string, Person>> (\n\t\t\t\tpersons.GroupBy (person => person.LastName, StringComparer.CurrentCultureIgnoreCase));\n\t\t\tvar group1 = result.Read ();\n\t\t\tAssert.That (group1.Key, Is.EqualTo (\"M\\u00FCller\"));\n\t\t\tvar muellers = new Reader<Person> (group1);\n\t\t\tAssert.That (muellers.Read ().FirstName, Is.EqualTo (\"Peter\"));\n\t\t\tAssert.That (muellers.Read ().FirstName, Is.EqualTo (\"Herbert\"));\n\t\t\tvar group2 = result.Read ();\n\t\t\tAssert.That (group2.Key, Is.EqualTo (\"Meier\"));\n\t\t\tvar meiers = new Reader<Person> (group2);\n\t\t\tAssert.That (meiers.Read ().FirstName, Is.EqualTo (\"Hubert\"));\n\t\t\tAssert.That (meiers.Read ().FirstName, Is.EqualTo (\"Isidor\"));\n\t\t\tresult.AssertEnded ();\n\t\t}\n\t\t[Test]\n\t\tpublic void GroupBy_KeySelectorArgElementSelectorArg_ValidArguments_CorrectGroupingAndProjection ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersons ());\n\t\t\tvar result = new Reader<IGrouping<string, int>> (\n\t\t\t\tpersons.GroupBy (person => person.LastName, person => person.Age));\n\t\t\tvar group1 = result.Read ();\n\t\t\tAssert.That (group1.Key, Is.EqualTo (\"M\\u00FCller\"));\n\t\t\tvar muellers = new Reader<int> (group1);\n\t\t\tAssert.That (muellers.Read (), Is.EqualTo (21));\n\t\t\tAssert.That (muellers.Read (), Is.EqualTo (22));\n\t\t\tvar group2 = result.Read ();\n\t\t\tAssert.That (group2.Key, Is.EqualTo (\"Meier\"));\n\t\t\tvar meiers = new Reader<int> (group2);\n\t\t\tAssert.That (meiers.Read (), Is.EqualTo (23));\n\t\t\tAssert.That (meiers.Read (), Is.EqualTo (24));\n\t\t}\n\t\t[Test]\n\t\tpublic void GroupBy_KeySelectorArgResultSelectorArg_ValidArguments_CorrectGroupingProcessing ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersons ());\n\t\t\tvar result = persons.GroupBy (\n\t\t\t\t\t\t\t p => p.LastName,\n\t\t\t\t\t\t\t (key, group) => {\n\t\t\t\t\t\t\t\t var total = 0;\n\t\t\t\t\t\t\t\t foreach (var p in group)\n\t\t\t\t\t\t\t\t\t total += p.Age;\n\t\t\t\t\t\t\t\t return key + \":\" + total;\n\t\t\t\t\t\t\t });\n\t\t\tresult.AssertEquals (\"M\\u00FCller:43\", \"Meier:47\");\n\t\t}\n\t\t[Test]\n\t\tpublic void GroupBy_KeySelectorArgElementSelectorArgComparerArg_ValidArguments_CorrectGroupingAndProcessing ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersonsWithNamesUsingMixedCase ());\n\t\t\tvar result = new Reader<IGrouping<string, int>> (\n\t\t\t\tpersons.GroupBy (p => p.LastName, p => p.Age, StringComparer.CurrentCultureIgnoreCase));\n\t\t\tvar group1 = result.Read ();\n\t\t\tAssert.That (group1.Key, Is.EqualTo (\"M\\u00FCller\"));\n\t\t\tvar muellers = new Reader<int> (group1);\n\t\t\tAssert.That (muellers.Read (), Is.EqualTo (21));\n\t\t\tAssert.That (muellers.Read (), Is.EqualTo (22));\n\t\t\tvar group2 = result.Read ();\n\t\t\tAssert.That (group2.Key, Is.EqualTo (\"Meier\"));\n\t\t\tvar meiers = new Reader<int> (group2);\n\t\t\tAssert.That (meiers.Read (), Is.EqualTo (23));\n\t\t\tAssert.That (meiers.Read (), Is.EqualTo (24));\n\t\t}\n\t\t[Test]\n\t\tpublic void GroupBy_KeySelectorArgElementSelectorArgResultSelectorArg_ValidArguments_CorrectGroupingAndTransforming ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersons ());\n\t\t\tvar result = persons.GroupBy (\n\t\t\t\t\t\t\t p => p.LastName,\n\t\t\t\t\t\t\t p => p.Age,\n\t\t\t\t\t\t\t (key, ages) => {\n\t\t\t\t\t\t\t\t var total = 0;\n\t\t\t\t\t\t\t\t foreach (var age in ages)\n\t\t\t\t\t\t\t\t\t total += age;\n\t\t\t\t\t\t\t\t return key + \":\" + total;\n\t\t\t\t\t\t\t });\n\t\t\tresult.AssertEquals (\"M\\u00FCller:43\", \"Meier:47\");\n\t\t}\n\t\t[Test]\n\t\tpublic void GroupBy_KeySelectorArgResultSelectorArgComparerArg_ValidArguments_CorrectGroupingAndTransforming ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersonsWithNamesUsingMixedCase ());\n\t\t\tvar result = persons.GroupBy (\n\t\t\t\t\t\t\t p => p.LastName,\n\t\t\t\t\t\t\t (key, values) => {\n\t\t\t\t\t\t\t\t var total = 0;\n\t\t\t\t\t\t\t\t foreach (var person in values)\n\t\t\t\t\t\t\t\t\t total += person.Age;\n\t\t\t\t\t\t\t\t return key + \":\" + total;\n\t\t\t\t\t\t\t },\n\t\t\t\t\t\t\t StringComparer.CurrentCultureIgnoreCase);\n\t\t\tresult.AssertEquals (\"M\\u00FCller:43\", \"Meier:47\");\n\t\t}\n\t\t[Test]\n\t\tpublic void GroupBy_KeySelectorArgElementSelectorArgResultSelectorArgComparerArg_ValidArguments_CorrectGroupingAndTransforming ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersonsWithNamesUsingMixedCase ());\n\t\t\tvar result = persons.GroupBy (\n\t\t\t\t\t\t\t p => p.LastName,\n\t\t\t\t\t\t\t p => p.Age,\n\t\t\t\t\t\t\t (key, ages) => {\n\t\t\t\t\t\t\t\t var total = 0;\n\t\t\t\t\t\t\t\t foreach (var age in ages)\n\t\t\t\t\t\t\t\t\t total += age;\n\t\t\t\t\t\t\t\t return key + \":\" + total;\n\t\t\t\t\t\t\t },\n\t\t\t\t\t\t\t StringComparer.CurrentCultureIgnoreCase);\n\t\t\tresult.AssertEquals (\"M\\u00FCller:43\", \"Meier:47\");\n\t\t}\n\t\tclass Pet {\n\t\t\tpublic string Name { get; set; }\n\t\t\tpublic string Owner { get; set; }\n\t\t}\n\t\t[Test]\n\t\tpublic void GroupJoin_InnerArgOuterKeySelectorArgInnerKeySelectorArgResultSelectorArg_ValidArguments_CorrectGroupingAndJoining ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersons ());\n\t\t\tvar barley = new Pet { Name = \"Barley\", Owner = \"Peter\" };\n\t\t\tvar boots = new Pet { Name = \"Boots\", Owner = \"Herbert\" };\n\t\t\tvar whiskers = new Pet { Name = \"Whiskers\", Owner = \"Herbert\" };\n\t\t\tvar daisy = new Pet { Name = \"Daisy\", Owner = \"Isidor\" };\n\t\t\tvar pets = Read (barley, boots, whiskers, daisy);\n\t\t\tvar result = persons.GroupJoin (pets, person => person.FirstName, pet => pet.Owner,\n\t\t\t\t\t\t\t  (person, ppets) => new { Owner = person, Pets = ppets });\n\t\t\tusing (var e = result.GetEnumerator ()) {\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Owner.FirstName, Is.EqualTo (\"Peter\"));\n\t\t\t\te.Current.Pets.AssertThat (Is.SameAs, barley);\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Owner.FirstName, Is.EqualTo (\"Herbert\"));\n\t\t\t\te.Current.Pets.AssertThat (Is.SameAs, boots, whiskers);\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Owner.FirstName, Is.EqualTo (\"Hubert\"));\n\t\t\t\te.Current.Pets.AssertThat (Is.SameAs); // empty\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Owner.FirstName, Is.EqualTo (\"Isidor\"));\n\t\t\t\te.Current.Pets.AssertThat (Is.SameAs, daisy);\n\t\t\t\tAssert.That (e.MoveNext (), Is.False);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void GroupJoin_InnerArgOuterKeySelectorArgInnerKeySelectorArgResultSelectorArgComparerArg_ValidArguments_CorrectGroupingAndJoining ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersons ());\n\t\t\tvar barley = new Pet { Name = \"Barley\", Owner = \"Peter\" };\n\t\t\tvar boots = new Pet { Name = \"Boots\", Owner = \"Herbert\" };\n\t\t\tvar whiskers = new Pet { Name = \"Whiskers\", Owner = \"HeRbErT\" };\n\t\t\tvar daisy = new Pet { Name = \"Daisy\", Owner = \"Isidor\" };\n\t\t\tvar pets = Read (barley, boots, whiskers, daisy);\n\t\t\tvar result = persons.GroupJoin (pets, person => person.FirstName, pet => pet.Owner,\n\t\t\t\t\t\t\t  (person, ppets) => new { Owner = person, Pets = ppets },\n\t\t\t\t\t\t\t  StringComparer.CurrentCultureIgnoreCase);\n\t\t\tusing (var e = result.GetEnumerator ()) {\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Owner.FirstName, Is.EqualTo (\"Peter\"));\n\t\t\t\te.Current.Pets.AssertThat (Is.SameAs, barley);\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Owner.FirstName, Is.EqualTo (\"Herbert\"));\n\t\t\t\te.Current.Pets.AssertThat (Is.SameAs, boots, whiskers);\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Owner.FirstName, Is.EqualTo (\"Hubert\"));\n\t\t\t\te.Current.Pets.AssertThat (Is.SameAs); // empty\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Owner.FirstName, Is.EqualTo (\"Isidor\"));\n\t\t\t\te.Current.Pets.AssertThat (Is.SameAs, daisy);\n\t\t\t\tAssert.That (e.MoveNext (), Is.False);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void GroupJoin_InnerArgOuterKeySelectorArgInnerKeySelectorArgResultSelectorArg_NullOuterKeySelector_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tnew object [0].GroupJoin<object, object, object, object> (\n\t\t\t\tnew object [0], null,\n\t\t\t\tdelegate { throw new NotImplementedException (); },\n\t\t\t\tdelegate { throw new NotImplementedException (); });\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void Intersect_NullSecondSource_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tRead<object> ().Intersect (null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Intersect_IntegerSources_YieldsCommonSet ()\n\t\t{\n\t\t\tvar first = Read (1, 2, 3);\n\t\t\tvar second = Read (2, 3, 4);\n\t\t\tfirst.Intersect (second).AssertEquals (2, 3);\n\t\t}\n\t\t[Test]\n\t\tpublic void Intersect_MixedStringsAndCaseInsensitiveComparer_YieldsCommonSetFromFirstSource ()\n\t\t{\n\t\t\tvar first = Read (\"Heinrich\", \"Hubert\", \"Thomas\");\n\t\t\tvar second = Read (\"Heinrich\", \"hubert\", \"Joseph\");\n\t\t\tvar result = first.Intersect (second, StringComparer.CurrentCultureIgnoreCase);\n\t\t\tresult.AssertEquals (\"Heinrich\", \"Hubert\");\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void Join_InnerArgOuterKeySelectorArgInnerKeySelectorArgResultSelectorArg_PassNullAsArgument_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tRead<object> ().Join<object, object, object, object> (null, null, null, null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Join_InnerArgOuterKeySelectorArgInnerKeySelectorArgResultSelectorArg_PassingPetsAndOwners_PetsAreCorrectlyAssignedToOwners ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersons ());\n\t\t\tvar pets = new Reader<Pet> (new []\n                           {\n                               new Pet {Name = \"Barley\", Owner = \"Peter\"},\n                               new Pet {Name = \"Boots\", Owner = \"Herbert\"},\n                               new Pet {Name = \"Whiskers\", Owner = \"Herbert\"},\n                               new Pet {Name = \"Daisy\", Owner = \"Isidor\"}\n                           });\n\t\t\tvar result = persons.Join (pets, aPerson => aPerson.FirstName, aPet => aPet.Owner,\n\t\t\t\t\t\t (aPerson, aPet) => new { Owner = aPerson.FirstName, Pet = aPet.Name });\n\t\t\tvar e = result.GetEnumerator ();\n\t\t\tAssert.That (e.MoveNext (), Is.True);\n\t\t\tAssert.That (e.Current.Owner, Is.EqualTo (\"Peter\"));\n\t\t\tAssert.That (e.Current.Pet, Is.EqualTo (\"Barley\"));\n\t\t\tAssert.That (e.MoveNext (), Is.True);\n\t\t\tAssert.That (e.Current.Owner, Is.EqualTo (\"Herbert\"));\n\t\t\tAssert.That (e.Current.Pet, Is.EqualTo (\"Boots\"));\n\t\t\tAssert.That (e.MoveNext (), Is.True);\n\t\t\tAssert.That (e.Current.Owner, Is.EqualTo (\"Herbert\"));\n\t\t\tAssert.That (e.Current.Pet, Is.EqualTo (\"Whiskers\"));\n\t\t\tAssert.That (e.MoveNext (), Is.True);\n\t\t\tAssert.That (e.Current.Owner, Is.EqualTo (\"Isidor\"));\n\t\t\tAssert.That (e.Current.Pet, Is.EqualTo (\"Daisy\"));\n\t\t\tAssert.That (e.MoveNext (), Is.False);\n\t\t}\n\t\t[Test]\n\t\tpublic void Join_InnerArgOuterKeySelectorArgInnerKeySelectorArgResultSelectorArgComparerArg_PetOwnersNamesCasingIsInconsistent_CaseInsensitiveJoinIsPerformed ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersons ());\n\t\t\tvar pets = new Reader<Pet> (new []\n                           {\n                               new Pet {Name = \"Barley\", Owner = \"Peter\"},\n                               new Pet {Name = \"Boots\", Owner = \"Herbert\"},\n                               new Pet {Name = \"Whiskers\", Owner = \"herbert\"},\n                               new Pet {Name = \"Daisy\", Owner = \"Isidor\"}\n                           });\n\t\t\tvar result = persons.Join (pets, aPerson => aPerson.FirstName, aPet => aPet.Owner,\n\t\t\t\t\t\t (aPerson, aPet) => new { Owner = aPerson.FirstName, Pet = aPet.Name },\n\t\t\t\t\t\t StringComparer.CurrentCultureIgnoreCase);\n\t\t\tvar e = result.GetEnumerator ();\n\t\t\tAssert.That (e.MoveNext (), Is.True);\n\t\t\tAssert.That (e.Current.Owner, Is.EqualTo (\"Peter\"));\n\t\t\tAssert.That (e.Current.Pet, Is.EqualTo (\"Barley\"));\n\t\t\tAssert.That (e.MoveNext (), Is.True);\n\t\t\tAssert.That (e.Current.Owner, Is.EqualTo (\"Herbert\"));\n\t\t\tAssert.That (e.Current.Pet, Is.EqualTo (\"Boots\"));\n\t\t\tAssert.That (e.MoveNext (), Is.True);\n\t\t\tAssert.That (e.Current.Owner, Is.EqualTo (\"Herbert\"));\n\t\t\tAssert.That (e.Current.Pet, Is.EqualTo (\"Whiskers\"));\n\t\t\tAssert.That (e.MoveNext (), Is.True);\n\t\t\tAssert.That (e.Current.Owner, Is.EqualTo (\"Isidor\"));\n\t\t\tAssert.That (e.Current.Pet, Is.EqualTo (\"Daisy\"));\n\t\t\tAssert.That (e.MoveNext (), Is.False);\n\t\t}\n\t\t[Test]\n\t\tpublic void Last_Integers_ReturnsLastElement ()\n\t\t{\n\t\t\tvar source = Read (1, 2, 3);\n\t\t\tAssert.That (source.Last (), Is.EqualTo (3));\n\t\t}\n\t\t[Test]\n\t\tpublic void Last_IntegerListOptimization_ReturnsLastElementWithoutEnumerating ()\n\t\t{\n\t\t\tvar source = new NonEnumerableList<int> (new [] { 1, 2, 3 });\n\t\t\tAssert.That (source.Last (), Is.EqualTo (3));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Last_EmptyIntegerListOptimization_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tnew NonEnumerableList<int> ().Last ();\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void Last_PredicateArg_NullAsPredicate_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tRead<object> ().Last (null);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Last_PredicateArg_NoMatchingElement_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tvar source = Read (1, 2, 3, 4, 5);\n\t\t\tsource.Last (i => i > 10);\n\t\t}\n\t\t[Test]\n\t\tpublic void Last_PredicateArg_ListOfInts_ReturnsLastMatchingElement ()\n\t\t{\n\t\t\tvar source = Read (1, 2, 3, 4, 5);\n\t\t\tAssert.That (source.Last (i => i % 2 == 0), Is.EqualTo (4));\n\t\t}\n\t\t[Test]\n\t\tpublic void LastOrDefault_EmptySource_ReturnsZero ()\n\t\t{\n\t\t\tvar source = Read (new int [0]);\n\t\t\tAssert.That (source.LastOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void LastOrDefault_NonEmptyList_ReturnsLastElement ()\n\t\t{\n\t\t\tvar source = Read (1, 2, 3, 4, 5);\n\t\t\tAssert.That (source.LastOrDefault (), Is.EqualTo (5));\n\t\t}\n\t\t[Test]\n\t\tpublic void LastOrDefault_PredicateArg_ValidArguments_RetunsLastMatchingElement ()\n\t\t{\n\t\t\tvar source = Read (1, 2, 3, 4, 5);\n\t\t\tAssert.That (source.LastOrDefault (i => i % 2 == 0), Is.EqualTo (4));\n\t\t}\n\t\t[Test]\n\t\tpublic void LastOrDefault_PredicateArg_NoMatchingElement_ReturnsZero ()\n\t\t{\n\t\t\tvar source = Read (1, 3, 5, 7);\n\t\t\tAssert.That (source.LastOrDefault (i => i % 2 == 0), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void LongCount_ValidArgument_ReturnsCorrectNumberOfElements ()\n\t\t{\n\t\t\tvar source = Read (1, 4, 7, 10);\n\t\t\tAssert.That (source.LongCount (), Is.EqualTo (4));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void LongCount_PredicateArg_NullAsPredicate_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tRead<object> ().LongCount (null);\n\t\t}\n\t\t[Test]\n\t\tpublic void LongCount_PredicateArg_ValidArguments_ReturnsCorrectNumerOfMatchingElements ()\n\t\t{\n\t\t\tvar source = Read (1, 2, 3, 4, 5);\n\t\t\tAssert.That (source.LongCount (i => i % 2 == 0), Is.EqualTo (2));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Max_EmptyList_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tvar source = Read (new int [0]);\n\t\t\tsource.Max ();\n\t\t}\n\t\t[Test]\n\t\tpublic void Max_EmptyNullableIntegerArray_ReturnsNull ()\n\t\t{\n\t\t\tAssert.That (Read (new int? [0]).Max (), Is.Null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Max_NullableIntegerArrayWithNullsOnly_ReturnsNull ()\n\t\t{\n\t\t\tAssert.That (Read<int?> (null, null, null).Max (), Is.Null);\n\t\t}\n\t\t[Test]\n\t\tpublic void Max_Integers_ReturnsMaxValue ()\n\t\t{\n\t\t\tvar source = Read (1000, 203, -9999);\n\t\t\tAssert.That (source.Max (), Is.EqualTo (1000));\n\t\t}\n\t\t[Test]\n\t\tpublic void Max_NullableLongs_ReturnsMaxValue ()\n\t\t{\n\t\t\tAssert.That (Read<long?> (1L, 2L, 3L, null).Max (), Is.EqualTo (3));\n\t\t}\n\t\t[Test]\n\t\tpublic void Max_NullableDoubles_ReturnsMaxValue ()\n\t\t{\n\t\t\tAssert.That (Read<double?> (1.0, 2.0, 3.0, null).Max (), Is.EqualTo (3));\n\t\t}\n\t\t[Test]\n\t\tpublic void Max_NullableDecimals_ReturnsMaxValue ()\n\t\t{\n\t\t\tAssert.That (Read<decimal?> (1m, 2m, 3m, null).Max (), Is.EqualTo (3));\n\t\t}\n\t\t[Test]\n\t\tpublic void Max_NullableFloats_ReturnsMaxValue ()\n\t\t{\n\t\t\tAssert.That (Read<float?> (-1000F, -100F, -1F, null).Max (), Is.EqualTo (-1));\n\t\t}\n\t\t[Test]\n\t\tpublic void Max_ListWithNullableType_ReturnsMaximum ()\n\t\t{\n\t\t\tvar source = Read<int?> (1, 4, null, 10);\n\t\t\tAssert.That (source.Max (), Is.EqualTo (10));\n\t\t}\n\t\t[Test]\n\t\tpublic void Max_NullableList_ReturnsMaxNonNullValue ()\n\t\t{\n\t\t\tvar source = Read<int?> (-5, -2, null);\n\t\t\tAssert.That (source.Max (), Is.EqualTo (-2));\n\t\t}\n\t\t[Test]\n\t\tpublic void Max_SelectorArg_ListOfObjects_ReturnsMaxSelectedValue ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersons ());\n\t\t\tAssert.That (persons.Max (p => p.Age), Is.EqualTo (24));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Min_EmptyList_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tvar source = Read<int> ();\n\t\t\tsource.Min ();\n\t\t}\n\t\t[Test]\n\t\tpublic void Min_IntegersWithSomeNull_ReturnsMinimumNonNullValue ()\n\t\t{\n\t\t\tvar source = Read<int?> (199, 15, null, 30);\n\t\t\tAssert.That (source.Min (), Is.EqualTo (15));\n\t\t}\n\t\t[Test]\n\t\tpublic void Min_NullableLongs_ReturnsMinimumNonNullValue ()\n\t\t{\n\t\t\tvar source = Read<long?> (199L, 15L, null, 30L);\n\t\t\tAssert.That (source.Min (), Is.EqualTo (15));\n\t\t}\n\t\t[Test]\n\t\tpublic void Min_NullableFloats_ReturnsMinimumNonNullValue ()\n\t\t{\n\t\t\tvar source = Read<float?> (1.111F, null, 2.222F); // TODO Improve test data\n\t\t\tAssert.That (source.Min (), Is.EqualTo (1.111F).Within (0.01));\n\t\t}\n\t\t[Test]\n\t\tpublic void Min_NullableDoubles_ReturnsMinimumNonNullValue ()\n\t\t{\n\t\t\tvar source = Read<double?> (1.111, null, 2.222); // TODO Improve test data\n\t\t\tAssert.That (source.Min (), Is.EqualTo (1.111).Within (0.01));\n\t\t}\n\t\t[Test]\n\t\tpublic void Min_NullableDecimals_ReturnsMinimumNonNullValue ()\n\t\t{\n\t\t\tvar source = Read<decimal?> (1.111m, null, 2.222m);  // TODO Improve test data\n\t\t\tAssert.That (source.Min (), Is.EqualTo (1.111m).Within (0.01));\n\t\t}\n\t\t[Test]\n\t\tpublic void Min_Chars_ReturnsMinimumBySortOrder ()\n\t\t{\n\t\t\tAssert.That (\"qwertzuioplkjhgfdsayxcvbnm\".ToCharArray ().Min (), Is.EqualTo ('a'));\n\t\t}\n\t\t[Test]\n\t\tpublic void Min_StringsWithLengthSelector_ReturnsMinimumNonNullStringLength ()\n\t\t{\n\t\t\tvar strings = Read (\"five\", \"four\", null, \"three\", null, \"two\", \"one\", \"zero\");\n\t\t\tAssert.That (strings.Min (s => s != null ? s.Length : (int?) null), Is.EqualTo (3));\n\t\t}\n\t\t[Test]\n\t\tpublic void OfType_EnumerableWithElementsOfDifferentTypes_OnlyDecimalsAreReturned ()\n\t\t{\n\t\t\tvar source = Read<object> (1, \"Hello\", 1.234m, new object ());\n\t\t\tvar result = source.OfType<decimal> ();\n\t\t\tresult.AssertEquals (1.234m);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void OrderBy_KeySelectorArg_NullAsKeySelector_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tRead<object> ().OrderBy<object, object> (null);\n\t\t}\n\t\t[Test]\n\t\tpublic void OrderBy_KeySelector_ArrayOfPersons_PersonsAreOrderedByAge ()\n\t\t{\n\t\t\tvar persons = Person.CreatePersons ();\n\t\t\tvar reversePersons = (Person []) persons.Clone ();\n\t\t\tArray.Reverse (reversePersons);\n\t\t\tvar source = Read (reversePersons);\n\t\t\tvar result = source.OrderBy (p => p.Age);\n\t\t\tvar age = 21;\n\t\t\tforeach (var person in result)\n\t\t\t\tAssert.That (person.Age, Is.EqualTo (age++));\n\t\t\tAssert.That (age, Is.EqualTo (25));\n\t\t}\n\t\t[Test]\n\t\tpublic void OrderBy_KeySelector_DataWithDuplicateKeys_YieldsStablySortedData ()\n\t\t{\n\t\t\tvar data = new []\n            {\n                new { Number = 4, Text = \"four\" },\n                new { Number = 4, Text = \"quatre\" },\n                new { Number = 4, Text = \"vier\" },\n                new { Number = 4, Text = \"quattro\" },\n                new { Number = 1, Text = \"one\" },\n                new { Number = 2, Text = \"two\" },\n                new { Number = 2, Text = \"deux\" },\n                new { Number = 3, Text = \"three\" },\n                new { Number = 3, Text = \"trois\" },\n                new { Number = 3, Text = \"drei\" },\n            };\n\t\t\tvar result = Read (data).OrderBy (e => e.Number);\n\t\t\tusing (var e = result.GetEnumerator ()) {\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Text, Is.EqualTo (\"one\"));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Text, Is.EqualTo (\"two\"));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Text, Is.EqualTo (\"deux\"));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Text, Is.EqualTo (\"three\"));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Text, Is.EqualTo (\"trois\"));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Text, Is.EqualTo (\"drei\"));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Text, Is.EqualTo (\"four\"));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Text, Is.EqualTo (\"quatre\"));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Text, Is.EqualTo (\"vier\"));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Text, Is.EqualTo (\"quattro\"));\n\t\t\t\tAssert.That (e.MoveNext (), Is.False);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void ThenBy_KeySelector_DataWithDuplicateKeys_YieldsStablySortedData ()\n\t\t{\n\t\t\tvar data = new []\n            {\n                new { Position = 1, LastName = \"Smith\", FirstName = \"John\" },\n                new { Position = 2, LastName = \"Smith\", FirstName = \"Jack\" },\n                new { Position = 3, LastName = \"Smith\", FirstName = \"John\" },\n                new { Position = 4, LastName = \"Smith\", FirstName = \"Jack\" },\n                new { Position = 5, LastName = \"Smith\", FirstName = \"John\" },\n                new { Position = 6, LastName = \"Smith\", FirstName = \"Jack\" },\n            };\n\t\t\tvar result = Read (data).OrderBy (e => e.LastName).ThenBy (e => e.FirstName);\n\t\t\tusing (var e = result.GetEnumerator ()) {\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Position, Is.EqualTo (2));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Position, Is.EqualTo (4));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Position, Is.EqualTo (6));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Position, Is.EqualTo (1));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Position, Is.EqualTo (3));\n\t\t\t\te.MoveNext (); Assert.That (e.Current.Position, Is.EqualTo (5));\n\t\t\t\tAssert.That (e.MoveNext (), Is.False);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void ThenBy_NullSource_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tEnumerable.ThenBy<object, object> (null, delegate { throw new NotImplementedException (); });\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void ThenBy_NullKeySelector_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tRead<object> ().OrderBy<object, object> (e => { throw new NotImplementedException (); }).ThenBy<object, object> (null);\n\t\t}\n\t\t[Test]\n\t\tpublic void ThenByDescending_KeySelectorArgComparerArg_StringArray_CorrectOrdering ()\n\t\t{\n\t\t\tvar source = Read (\"AA\", \"AB\", \"AC\", \"-BA\", \"-BB\", \"-BC\");\n\t\t\tvar result = source.OrderBy (s => s.ToCharArray () [s.ToCharArray ().Length - 1]).ThenByDescending (s => s.Length); /*.AssertEquals(\"butterfly\", \"elephant\", \"dog\", \"snake\", \"ape\"); */\n\t\t\tresult.AssertEquals (\"-BA\", \"AA\", \"-BB\", \"AB\", \"-BC\", \"AC\");\n\t\t}\n\t\tclass ReverseComparer<T> : IComparer<T> where T : IComparable<T> {\n\t\t\tpublic int Compare (T x, T y)\n\t\t\t{\n\t\t\t\treturn -1 * x.CompareTo (y);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void OrderBy_KeySelectorArgComparerArg_ArrayOfPersonsAndReversecomparer_PersonsAreOrderedByAgeUsingReversecomparer ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersons ());\n\t\t\tvar result = persons.OrderBy (p => p.Age, new ReverseComparer<int> ());\n\t\t\tvar age = 25;\n\t\t\tforeach (var person in result) {\n\t\t\t\tage--;\n\t\t\t\tAssert.That (person.Age, Is.EqualTo (age));\n\t\t\t}\n\t\t\tAssert.That (age, Is.EqualTo (21));\n\t\t}\n\t\t[Test]\n\t\tpublic void OrderByDescending_KeySelectorArg_ArrayOfPersons_PersonsAreOrderedByAgeDescending ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersons ());\n\t\t\tvar result = persons.OrderByDescending (p => p.Age);\n\t\t\tint age = 25;\n\t\t\tforeach (var person in result) {\n\t\t\t\tage--;\n\t\t\t\tAssert.That (person.Age, Is.EqualTo (age));\n\t\t\t}\n\t\t\tAssert.That (age, Is.EqualTo (21));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentOutOfRangeException))]\n\t\tpublic void Range_ProduceRangeThatLeadsToOverflow_ThrowsArgumentOutOfRangeException ()\n\t\t{\n\t\t\tEnumerable.Range (int.MaxValue - 3, 5);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentOutOfRangeException))]\n\t\tpublic void Range_NegativeCount_ThrowsArgumentOutOfRangeException ()\n\t\t{\n\t\t\tEnumerable.Range (0, -1);\n\t\t}\n\t\t[Test]\n\t\tpublic void Range_Start10Count5_IntsFrom10To14 ()\n\t\t{\n\t\t\tvar result = Enumerable.Range (10, 5);\n\t\t\tresult.AssertEquals (10, 11, 12, 13, 14);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentOutOfRangeException))]\n\t\tpublic void Repeat_PassNegativeCount_ThrowsArgumentOutOfRangeException ()\n\t\t{\n\t\t\tEnumerable.Repeat (\"Hello World\", -2);\n\t\t}\n\t\t[Test]\n\t\tpublic void Repeat_StringArgumentCount2_ReturnValueContainsStringArgumentTwice ()\n\t\t{\n\t\t\tvar result = Enumerable.Repeat (\"Hello World\", 2);\n\t\t\tresult.AssertEquals (\"Hello World\", \"Hello World\");\n\t\t}\n\t\t[Test]\n\t\tpublic void Reverse_SeriesOfInts_IntsAreCorrectlyReversed ()\n\t\t{\n\t\t\tvar source = Read (1, 2, 3, 4, 5);\n\t\t\tsource.Reverse ().AssertEquals (5, 4, 3, 2, 1);\n\t\t}\n\t\t[Test]\n\t\tpublic void Select_ArrayOfPersons_AgeOfPersonsIsSelectedAccordingToPassedLambdaExpression ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersons ());\n\t\t\tpersons.Select (p => p.Age).AssertEquals (21, 22, 23, 24);\n\t\t}\n\t\t[Test]\n\t\tpublic void Select_SelectorArg_LambdaThatTakesIndexAsArgument_ReturnValueContainsElementsMultipliedByIndex ()\n\t\t{\n\t\t\tvar source = Read (0, 1, 2, 3);\n\t\t\tsource.Select ((i, index) => i * index).AssertEquals (0, 1, 4, 9);\n\t\t}\n\t\t[Test]\n\t\tpublic void SelectMany_SelectorArg_ArrayOfPersons_ReturnsASequenceWithAllLettersOfFirstnames ()\n\t\t{\n\t\t\tvar persons = Read (Person.CreatePersons ());\n\t\t\tvar result = persons.SelectMany (p => p.FirstName.ToCharArray ());\n\t\t\tvar check = \"PeterHerbertHubertIsidor\".ToCharArray ();\n\t\t\tint count = 0; // BUGBUG Collapse loop-based check with array assertion!\n\t\t\tforeach (var c in result) {\n\t\t\t\tAssert.That (c, Is.EqualTo (check [count]));\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tclass PetOwner {\n\t\t\tpublic string Name { get; set; }\n\t\t\tpublic IList<string> Pets { get; set; }\n\t\t}\n\t\t[Test]\n\t\tpublic void SelectMany_Selector3Arg_ArrayOfPetOwners_SelectorUsesElementIndexArgument ()\n\t\t{\n\t\t\tvar petOwners = Read (new [] {\n                  new PetOwner { Name = \"Higa, Sidney\",     Pets = new[] { \"Scruffy\", \"Sam\" } },\n                  new PetOwner { Name = \"Ashkenazi, Ronen\", Pets = new[] { \"Walker\", \"Sugar\" } },\n                  new PetOwner { Name = \"Price, Vernette\",  Pets = new[] { \"Scratches\", \"Diesel\" } },\n                  new PetOwner { Name = \"Hines, Patrick\",   Pets = new[] { \"Dusty\" } } });\n\t\t\tvar result = petOwners.SelectMany ((po, index) => po.Pets.Select (pet => index + pet));\n\t\t\tresult.AssertEquals (\"0Scruffy\", \"0Sam\", \"1Walker\", \"1Sugar\", \"2Scratches\", \"2Diesel\", \"3Dusty\");\n\t\t}\n\t\t[Test]\n\t\tpublic void SelectMany_CollectionSelectorArgResultSelectorArg_ArrayOfPetOwner_ResultContainsElementForEachPetAPetOwnerHas ()\n\t\t{\n\t\t\tvar petOwners = Read (new [] {\n                  new PetOwner { Name = \"Higa\",      Pets = new[] { \"Scruffy\", \"Sam\" } },\n                  new PetOwner { Name = \"Ashkenazi\", Pets = new[] { \"Walker\", \"Sugar\" } },\n                  new PetOwner { Name = \"Price\",     Pets = new[] { \"Scratches\", \"Diesel\" } },\n                  new PetOwner { Name = \"Hines\",     Pets = new[] { \"Dusty\" } } });\n\t\t\tvar result = petOwners.SelectMany (po => po.Pets, (po, pet) => po.Name + \"+\" + pet);\n\t\t\tresult.AssertEquals (\n\t\t\t\t\"Higa+Scruffy\", \"Higa+Sam\",\n\t\t\t\t\"Ashkenazi+Walker\", \"Ashkenazi+Sugar\",\n\t\t\t\t\"Price+Scratches\", \"Price+Diesel\",\n\t\t\t\t\"Hines+Dusty\");\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void SequenceEqual_NullFirstSequence_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tEnumerable.SequenceEqual (null, Read<object> ());\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void SequenceEqual_NullSecondSequence_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tRead<object> ().SequenceEqual (null);\n\t\t}\n\t\t[Test]\n\t\tpublic void SequenceEqual_EqualSequences_ReturnsTrue ()\n\t\t{\n\t\t\tvar source = Read (1, 2, 3);\n\t\t\tvar argument = Read (1, 2, 3);\n\t\t\tAssert.That (source.SequenceEqual (argument), Is.True);\n\t\t}\n\t\t[Test]\n\t\tpublic void SequenceEqual_DifferentSequences_ReturnsFalse ()\n\t\t{\n\t\t\tvar source = Read (1, 2, 3);\n\t\t\tvar argument = Read (1, 3, 2);\n\t\t\tAssert.That (source.SequenceEqual (argument), Is.False);\n\t\t}\n\t\t[Test]\n\t\tpublic void SequenceEqual_LongerSecondSequence_ReturnsFalse ()\n\t\t{\n\t\t\tvar source = Read (1, 2, 3);\n\t\t\tvar argument = Read (1, 2, 3, 4);\n\t\t\tAssert.That (source.SequenceEqual (argument), Is.False);\n\t\t}\n\t\t[Test]\n\t\tpublic void SequenceEqual_ShorterSecondSequence_ReturnsFalse ()\n\t\t{\n\t\t\tvar first = Read (1, 2, 3, 4);\n\t\t\tvar second = Read (1, 2, 3);\n\t\t\tAssert.That (first.SequenceEqual (second), Is.False);\n\t\t}\n\t\t[Test]\n\t\tpublic void SequenceEqual_FloatsWithTolerantComparer_ComparerIsUsed ()\n\t\t{\n\t\t\tvar source = Read (1F, 2F, 3F);\n\t\t\tvar argument = Read (1.03F, 1.99F, 3.02F);\n\t\t\tAssert.That (source.SequenceEqual (argument, new FloatComparer ()), Is.True);\n\t\t}\n\t\tprivate sealed class FloatComparer : IEqualityComparer<float> {\n\t\t\tpublic bool Equals (float x, float y)\n\t\t\t{\n\t\t\t\treturn Math.Abs (x - y) < 0.1f;\n\t\t\t}\n\t\t\tpublic int GetHashCode (float x)\n\t\t\t{\n\t\t\t\tthrow new NotImplementedException ();\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Single_EmptySource_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tvar source = Read<int> ();\n\t\t\tsource.Single ();\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Single_SourceWithMoreThanOneElement_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tvar source = Read (3, 6);\n\t\t\tsource.Single ();\n\t\t}\n\t\t[Test]\n\t\tpublic void Single_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{\n\t\t\tvar source = Read (1);\n\t\t\tAssert.That (source.Single (), Is.EqualTo (1));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (ArgumentNullException))]\n\t\tpublic void Single_PredicateArg_PassNullAsPredicate_ThrowsArgumentNullException ()\n\t\t{\n\t\t\tRead<object> ().Single (null);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Single_PredicateArg_NoElementSatisfiesCondition_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tvar source = Read (1, 3, 5);\n\t\t\tsource.Single (i => i % 2 == 0);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Single_PredicateArg_MoreThanOneElementSatisfiedCondition_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tvar source = Read (1, 2, 3, 4);\n\t\t\tsource.Single (i => i % 2 == 0);\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void Single_PredicateArg_SourceIsEmpty_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tvar source = Read<int> ();\n\t\t\tsource.Single (i => i % 2 == 0);\n\t\t}\n\t\t[Test]\n\t\tpublic void Single_PredicateArg_ArrayOfIntWithOnlyOneElementSatisfyingCondition_ReturnsOnlyThisElement ()\n\t\t{\n\t\t\tvar source = Read (1, 2, 3);\n\t\t\tAssert.That (source.Single (i => i % 2 == 0), Is.EqualTo (2));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]\n\t\tpublic void SingleOrDefault_MoreThanOneElementInSource_ThrowsInvalidOperationException ()\n\t\t{\n\t\t\tvar source = Read (1, 2, 3);\n\t\t\tsource.SingleOrDefault ();\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_EmptySource_ReturnsZero ()\n\t\t{\n", "answers": ["\t\t\tvar source = Read<int> ();"], "length": 5586, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "e14e35f177d9ba393959b9d478b3ae2f2d56e104c871bd73"}
{"input": "", "context": "package dna.plot;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport dna.io.ZipReader;\nimport dna.io.filesystem.Dir;\nimport dna.io.filesystem.Files;\nimport dna.io.filesystem.PlotFilenames;\nimport dna.plot.data.ExpressionData;\nimport dna.plot.data.PlotData;\nimport dna.plot.data.PlotData.DistributionPlotType;\nimport dna.plot.data.PlotData.NodeValueListOrder;\nimport dna.plot.data.PlotData.NodeValueListOrderBy;\nimport dna.plot.data.PlotData.PlotDataLocation;\nimport dna.plot.data.PlotData.PlotStyle;\nimport dna.plot.data.PlotData.PlotType;\nimport dna.series.aggdata.AggregatedBatch;\nimport dna.series.aggdata.AggregatedBatch.BatchReadMode;\nimport dna.series.aggdata.AggregatedBinnedDistribution;\nimport dna.series.aggdata.AggregatedDistribution;\nimport dna.series.aggdata.AggregatedMetric;\nimport dna.series.data.BatchData;\nimport dna.series.data.IBatch;\nimport dna.series.data.MetricData;\nimport dna.series.data.SeriesData;\nimport dna.series.data.distributions.BinnedDistributionDouble;\nimport dna.series.data.distributions.BinnedDistributionInt;\nimport dna.series.data.distributions.BinnedDistributionLong;\nimport dna.series.data.distributions.Distribution;\nimport dna.series.data.distributions.DistributionDouble;\nimport dna.series.data.distributions.DistributionInt;\nimport dna.series.data.distributions.DistributionLong;\nimport dna.util.Config;\nimport dna.util.Log;\n/**\n * Plotting class which holds static utility methods for plotting.\n * \n * @author Rwilmes\n * @date 05.11.2014\n */\npublic class PlottingUtils {\n\t/** Returns the first value inside the expression. **/\n\tpublic static String getValueFromExpression(String expr) {\n\t\tString[] split = expr.split(\"\\\\$\");\n\t\tfor (int i = 0; i < split.length; i++) {\n\t\t\tif (split.length > 1) {\n\t\t\t\tString[] split2 = split[1]\n\t\t\t\t\t\t.split(PlotConfig.customPlotDomainDelimiter);\n\t\t\t\tif (split2.length > 1) {\n\t\t\t\t\tString value = \"\";\n\t\t\t\t\tfor (int j = 1; j < split2.length; j++)\n\t\t\t\t\t\tvalue += split2[j];\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\treturn split[1];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t/** Returns the domain of the first value inside the expression. **/\n\tpublic static String getDomainFromExpression(String expr,\n\t\t\tString generalDomain) {\n\t\tString[] split = expr.split(\"\\\\$\");\n\t\tfor (int i = 0; i < split.length; i++) {\n\t\t\tif (split.length > 1) {\n\t\t\t\tString[] split2 = split[1]\n\t\t\t\t\t\t.split(PlotConfig.customPlotDomainDelimiter);\n\t\t\t\tif (split2.length > 1) {\n\t\t\t\t\treturn split2[0];\n\t\t\t\t} else {\n\t\t\t\t\treturn generalDomain;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * Checks if the given value of the given domain is contained in atleast on\n\t * of the given batches. If yes, true is returned.\n\t * \n\t * @param domain\n\t *            Domain to be checked.\n\t * @param value\n\t *            Value to be checked.\n\t * @param batches\n\t *            Array of batches to be checked.\n\t * @return True if domain and value is found in atleast one of the batches.\n\t */\n\tpublic static boolean isContained(String domain, String value,\n\t\t\tBatchData[] batches) {\n\t\tboolean contained = false;\n\t\t// if domain or value null, return false\n\t\tif (domain == null || value == null)\n\t\t\treturn false;\n\t\t// check if statistic\n\t\tif (domain.equals(PlotConfig.customPlotDomainStatistics)) {\n\t\t\tfor (BatchData b : batches) {\n\t\t\t\tif (b.getValues().getNames().contains(value)) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// check if general runtime\n\t\tif (domain.equals(PlotConfig.customPlotDomainRuntimes)\n\t\t\t\t|| domain.equals(PlotConfig.customPlotDomainGeneralRuntimes)) {\n\t\t\tfor (BatchData b : batches) {\n\t\t\t\tif (b.getGeneralRuntimes().getNames().contains(value)) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// check if metric runtime\n\t\tif (domain.equals(PlotConfig.customPlotDomainRuntimes)\n\t\t\t\t|| domain.equals(PlotConfig.customPlotDomainMetricRuntimes)) {\n\t\t\tfor (BatchData b : batches) {\n\t\t\t\tif (b.getMetricRuntimes().getNames().contains(value)) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// check if domain is a metric\n\t\tfor (BatchData b : batches) {\n\t\t\tif (b.getMetrics().getNames().contains(domain)) {\n\t\t\t\tMetricData m = b.getMetrics().get(domain);\n\t\t\t\t// if value\n\t\t\t\tif (m.getValues().getNames().contains(value)) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// if distribution\n\t\t\t\tif (m.getDistributions().getNames().contains(value)) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// if nodevaluelist\n\t\t\t\tif (m.getNodeValues().getNames().contains(value)) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn contained;\n\t}\n\t/**\n\t * Checks if the given value of the given domain is contained in atleast on\n\t * of the given batches. If yes, true is returned.\n\t * \n\t * @param domain\n\t *            Domain to be checked.\n\t * @param value\n\t *            Value to be checked.\n\t * @param batches\n\t *            Array of batches to be checked.\n\t * @return True if domain and value is found in atleast one of the batches.\n\t */\n\tpublic static boolean isContained(String domain, String value,\n\t\t\tAggregatedBatch[] batches) {\n\t\tboolean contained = false;\n\t\t// if domain or value null, return false\n\t\tif (domain == null || value == null)\n\t\t\treturn false;\n\t\t// check if statistic\n\t\tif (domain.equals(PlotConfig.customPlotDomainStatistics)) {\n\t\t\tfor (AggregatedBatch b : batches) {\n\t\t\t\tif (b.getValues().getNames().contains(value)) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// check if general runtime\n\t\tif (domain.equals(PlotConfig.customPlotDomainRuntimes)\n\t\t\t\t|| domain.equals(PlotConfig.customPlotDomainGeneralRuntimes)) {\n\t\t\tfor (AggregatedBatch b : batches) {\n\t\t\t\tif (b.getGeneralRuntimes().getNames().contains(value)) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// check if metric runtime\n\t\tif (domain.equals(PlotConfig.customPlotDomainRuntimes)\n\t\t\t\t|| domain.equals(PlotConfig.customPlotDomainMetricRuntimes)) {\n\t\t\tfor (AggregatedBatch b : batches) {\n\t\t\t\tif (b.getMetricRuntimes().getNames().contains(value)) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// check if domain is a metric\n\t\tfor (AggregatedBatch b : batches) {\n\t\t\tif (b.getMetrics().getNames().contains(domain)) {\n\t\t\t\tAggregatedMetric m = b.getMetrics().get(domain);\n\t\t\t\t// if value\n\t\t\t\tif (m.getValues().getNames().contains(value)) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// if distribution\n\t\t\t\tif (m.getDistributions().getNames().contains(value)) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// if nodevaluelist\n\t\t\t\tif (m.getNodeValues().getNames().contains(value)) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn contained;\n\t}\n\t/** Checks if the value and domain are contained in the given batch. **/\n\tpublic static boolean isContained(String domain, String value,\n\t\t\tAggregatedBatch batch) {\n\t\treturn PlottingUtils.isContained(domain, value,\n\t\t\t\tnew AggregatedBatch[] { batch });\n\t}\n\t/** Checks if the value and domain are contained in the given batch. **/\n\tpublic static boolean isContained(String domain, String value,\n\t\t\tBatchData batch) {\n\t\treturn PlottingUtils.isContained(domain, value,\n\t\t\t\tnew BatchData[] { batch });\n\t}\n\t/**\n\t * Generates custom plots from the given PlotConfig list and adds them to\n\t * the Plot list.\n\t * \n\t * @param plotConfigs\n\t *            Input plot config list from which the plots will be created.\n\t * @param customPlots\n\t *            List of Plot-Objects to which the new generated plots will be\n\t *            added.\n\t * @param dstDir\n\t *            Destination directory for the plots.\n\t * @param seriesData\n\t *            Array of SeriesData objects that will be plotted.\n\t * @param indizes\n\t *            Indizes of the runs, used for line naming.\n\t * @param initBatches\n\t *            Array of init batches, one for each series data object.\n\t * @param style\n\t *            PlotStyle of the resulting plots.\n\t * @param type\n\t *            PlotType of the resulting plots.\n\t * @throws IOException\n\t *             Thrown by the writer created in the plots.\n\t */\n\tpublic static void generateCustomPlots(ArrayList<PlotConfig> plotConfigs,\n\t\t\tArrayList<Plot> customPlots, String dstDir,\n\t\t\tSeriesData[] seriesData, int[] indizes, IBatch[] initBatches,\n\t\t\tPlotStyle style, PlotType type, HashMap<Long, Long> timestampMap)\n\t\t\tthrows IOException {\n\t\t// check if aggregated batches\n\t\tboolean aggregatedBatches = false;\n\t\tif (initBatches instanceof AggregatedBatch[])\n\t\t\taggregatedBatches = true;\n\t\tfor (int i = 0; i < plotConfigs.size(); i++) {\n\t\t\tLog.info(\"\\tplotting '\" + plotConfigs.get(i).getFilename() + \"'\");\n\t\t\tPlotConfig config = plotConfigs.get(i);\n\t\t\tString[] values = config.getValues();\n\t\t\tString[] domains = config.getDomains();\n\t\t\t// set flags for what to plot\n\t\t\tboolean plotNormal = false;\n\t\t\tboolean plotAsCdf = false;\n\t\t\tswitch (config.getPlotAsCdf()) {\n\t\t\tcase \"true\":\n\t\t\t\tplotAsCdf = true;\n\t\t\t\tbreak;\n\t\t\tcase \"false\":\n\t\t\t\tplotNormal = true;\n\t\t\t\tbreak;\n\t\t\tcase \"both\":\n\t\t\t\tplotNormal = true;\n\t\t\t\tplotAsCdf = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// series data quantities array\n\t\t\tint[] seriesDataQuantities = new int[seriesData.length];\n\t\t\t// plot data list, will contain \"lines\" of the plot\n\t\t\tArrayList<PlotData> dataList = new ArrayList<PlotData>();\n\t\t\t// iterate over values\n\t\t\tfor (int k = 0; k < values.length; k++) {\n\t\t\t\tString value = values[k];\n\t\t\t\tString domain = domains[k];\n\t\t\t\t// if function, add it only once\n\t\t\t\tif (domain.equals(PlotConfig.customPlotDomainFunction)) {\n\t\t\t\t\t// if function\n\t\t\t\t\tString[] functionSplit = value.split(\"=\");\n\t\t\t\t\tif (functionSplit.length != 2) {\n\t\t\t\t\t\tLog.warn(\"wrong function syntax for '\" + value + \"'\");\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tdataList.add(PlotData.get(functionSplit[0].trim(),\n\t\t\t\t\t\t\tfunctionSplit[1].trim(), style, domain\n\t\t\t\t\t\t\t\t\t+ PlotConfig.customPlotDomainDelimiter\n\t\t\t\t\t\t\t\t\t+ value, PlotType.function));\n\t\t\t\t\t// if not function, iterate over series\n\t\t\t\t} else {\n\t\t\t\t\t// iterate over series\n\t\t\t\t\tfor (int j = 0; j < seriesData.length; j++) {\n\t\t\t\t\t\tString title = value + \" (\" + seriesData[j].getName();\n\t\t\t\t\t\tif (!aggregatedBatches)\n\t\t\t\t\t\t\ttitle += \" @ run.\" + indizes[j];\n\t\t\t\t\t\ttitle += \")\";\n\t\t\t\t\t\t// iterate over values to be plotted\n\t\t\t\t\t\tif (domain\n\t\t\t\t\t\t\t\t.equals(PlotConfig.customPlotDomainExpression)) {\n\t\t\t\t\t\t\t// if expression\n\t\t\t\t\t\t\tString[] expressionSplit = value.split(\":\");\n\t\t\t\t\t\t\tif (expressionSplit.length != 2) {\n\t\t\t\t\t\t\t\tLog.warn(\"wrong expression syntax for '\"\n\t\t\t\t\t\t\t\t\t\t+ value + \"'\");\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// parse name\n\t\t\t\t\t\t\tString exprName;\n\t\t\t\t\t\t\tif (expressionSplit[0].equals(\"\"))\n\t\t\t\t\t\t\t\texprName = expressionSplit[1];\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\texprName = expressionSplit[0];\n\t\t\t\t\t\t\tif (initBatches[j]\n\t\t\t\t\t\t\t\t\t.contains(\n\t\t\t\t\t\t\t\t\t\t\tPlottingUtils.getDomainFromExpression(\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\t\t\t\t\t\tconfig.getGeneralDomain()),\n\t\t\t\t\t\t\t\t\t\t\tPlottingUtils\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getValueFromExpression(value))) {\n\t\t\t\t\t\t\t\tString runAddition = \"\";\n\t\t\t\t\t\t\t\tif (!aggregatedBatches)\n\t\t\t\t\t\t\t\t\trunAddition = \" @ run.\" + indizes[j];\n\t\t\t\t\t\t\t\tdataList.add(new ExpressionData(exprName,\n\t\t\t\t\t\t\t\t\t\texpressionSplit[1], style, exprName\n\t\t\t\t\t\t\t\t\t\t\t\t.replace(\"$\", \"\")\n\t\t\t\t\t\t\t\t\t\t\t\t+ \" (\"\n\t\t\t\t\t\t\t\t\t\t\t\t+ seriesData[j].getName()\n\t\t\t\t\t\t\t\t\t\t\t\t+ runAddition + \")\", config\n\t\t\t\t\t\t\t\t\t\t\t\t.getGeneralDomain()));\n\t\t\t\t\t\t\t\tseriesDataQuantities[j]++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// check if series contains value\n\t\t\t\t\t\t\tif (initBatches[j].contains(domain, value)) {\n\t\t\t\t\t\t\t\tdataList.add(PlotData.get(value, domain, style,\n\t\t\t\t\t\t\t\t\t\ttitle, type));\n\t\t\t\t\t\t\t\tseriesDataQuantities[j]++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// transform datalist to array\n\t\t\tPlotData[] data = dataList.toArray(new PlotData[0]);\n\t\t\tString filename = config.getFilename();\n\t\t\tif (plotNormal) {\n\t\t\t\t// create plot\n\t\t\t\tPlot p = new Plot(dstDir, filename,\n\t\t\t\t\t\tPlotFilenames.getValuesGnuplotScript(filename),\n\t\t\t\t\t\tconfig.getTitle(), config, data);\n\t\t\t\t// set timestamp mapping\n\t\t\t\tp.setTimestampMap(timestampMap);\n\t\t\t\t// set series data quantities\n\t\t\t\tp.setSeriesDataQuantities(seriesDataQuantities);\n\t\t\t\t// add to plot list\n\t\t\t\tcustomPlots.add(p);\n\t\t\t}\n\t\t\tif (plotAsCdf) {\n\t\t\t\t// create plot\n\t\t\t\tPlot p = new Plot(dstDir,\n\t\t\t\t\t\tPlotFilenames.getValuesPlotCDF(filename),\n\t\t\t\t\t\tPlotFilenames.getValuesGnuplotScriptCDF(filename),\n\t\t\t\t\t\t\"CDF of \" + config.getTitle(), config, data);\n\t\t\t\t// set timestamp mapping\n\t\t\t\tp.setTimestampMap(timestampMap);\n\t\t\t\t// set as cdf plot\n\t\t\t\tp.setCdfPlot(true);\n\t\t\t\t// set series data quantities\n\t\t\t\tp.setSeriesDataQuantities(seriesDataQuantities);\n\t\t\t\t// add to plot list\n\t\t\t\tcustomPlots.add(p);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Generates default plots for the given SeriesData objects and adds them to\n\t * the Plot list.\n\t * \n\t * @param plotList\n\t *            List of Plot-Objects to which the new generated plots will be\n\t *            added.\n\t * @param dstDir\n\t *            Destination directory for the plots.\n\t * @param seriesData\n\t *            Array of SeriesData objects that will be plotted.\n\t * @param indizes\n\t *            Indizes of the runs, used for line naming.\n\t * @param initBatches\n\t *            Array of init batches, one for each series data object.\n\t * @param plotStatistics\n\t *            Flag if statistics will be plotted.\n\t * @param plotMetricValues\n\t *            Flag if metric values will be plotted.\n\t * @param plotRuntimes\n\t *            Flag if runtimes will be plotted.\n\t * @param style\n\t *            PlotStyle of the resulting plots.\n\t * @param type\n\t *            PlotType of the resulting plots.\n\t * @throws IOException\n\t *             Thrown by the writer created in the plots.\n\t */\n\tpublic static void generateMultiSeriesDefaultPlots(\n\t\t\tArrayList<Plot> plotList, String dstDir, SeriesData[] seriesData,\n\t\t\tint[] indizes, IBatch[] initBatches, boolean plotStatistics,\n\t\t\tboolean plotMetricValues, boolean plotRuntimes, PlotStyle style,\n\t\t\tPlotType type, ArrayList<PlotConfig> customMetricValuePlots,\n\t\t\tArrayList<PlotConfig> customValuePlots,\n\t\t\tHashMap<Long, Long> timestampMap) throws IOException {\n\t\tboolean aggregatedBatches = false;\n\t\tif (initBatches instanceof AggregatedBatch[])\n\t\t\taggregatedBatches = true;\n\t\t// contains the names of values\n\t\tArrayList<String> values = new ArrayList<String>();\n\t\tArrayList<String> genRuntimeValues = new ArrayList<String>();\n\t\tArrayList<String> metRuntimeValues = new ArrayList<String>();\n\t\t// contains for each value a list of domains\n\t\tArrayList<ArrayList<String>> valuesDomainsList = new ArrayList<ArrayList<String>>();\n\t\t// contains an int which states how often a value occurs\n\t\tArrayList<Integer> valuesOccurence = new ArrayList<Integer>();\n\t\tArrayList<Integer> genRuntimeOccurence = new ArrayList<Integer>();\n\t\tArrayList<Integer> metRuntimeOccurence = new ArrayList<Integer>();\n\t\t// define list of custom plots that substitute default plots\n\t\tArrayList<PlotConfig> customDefaultSubstitutePlots = new ArrayList<PlotConfig>();\n\t\tif (customMetricValuePlots != null) {\n\t\t\tfor (PlotConfig pc : customMetricValuePlots) {\n\t\t\t\t// if only 1 value, add plot to list of substitutes\n\t\t\t\tif (pc.getValues().length == 1)\n\t\t\t\t\tcustomDefaultSubstitutePlots.add(pc);\n\t\t\t}\n\t\t}\n\t\tif (customValuePlots != null) {\n\t\t\tfor (PlotConfig pc : customValuePlots) {\n\t\t\t\t// if only 1 value, add plot to list of substitutes\n\t\t\t\tif (pc.getValues().length == 1)\n\t\t\t\t\tcustomDefaultSubstitutePlots.add(pc);\n\t\t\t}\n\t\t}\n\t\t// printed flag\n\t\tboolean printed = false;\n\t\t// gather fixed values\n\t\tfor (int i = 0; i < seriesData.length; i++) {\n\t\t\t// statistic values\n\t\t\tif (plotStatistics && Config.getBoolean(\"DEFAULT_PLOT_VALUES\")) {\n\t\t\t\t// ValueList aValues = initBatches[i].getValues();\n\t\t\t\t// get statistic value names\n\t\t\t\tCollection<String> valueNames;\n\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\tvalueNames = ((AggregatedBatch) initBatches[i]).getValues()\n\t\t\t\t\t\t\t.getNames();\n\t\t\t\telse\n\t\t\t\t\tvalueNames = ((BatchData) initBatches[i]).getValues()\n\t\t\t\t\t\t\t.getNames();\n\t\t\t\tfor (String value : valueNames) {\n\t\t\t\t\tif (!values.contains(value)) {\n\t\t\t\t\t\t// if value not present, add it and add new domain\n\t\t\t\t\t\t// list\n\t\t\t\t\t\tvalues.add(value);\n\t\t\t\t\t\tArrayList<String> dList = new ArrayList<String>();\n\t\t\t\t\t\tdList.add(PlotConfig.customPlotDomainStatistics);\n\t\t\t\t\t\tvaluesDomainsList.add(dList);\n\t\t\t\t\t\tvaluesOccurence.add(1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if value present, add new domain to domain list\n\t\t\t\t\t\tint index = values.indexOf(value);\n\t\t\t\t\t\tArrayList<String> domainList = valuesDomainsList\n\t\t\t\t\t\t\t\t.get(index);\n\t\t\t\t\t\tvaluesOccurence.set(index,\n\t\t\t\t\t\t\t\tvaluesOccurence.get(index) + 1);\n\t\t\t\t\t\tif (!domainList\n\t\t\t\t\t\t\t\t.contains(PlotConfig.customPlotDomainStatistics)) {\n\t\t\t\t\t\t\tdomainList\n\t\t\t\t\t\t\t\t\t.add(PlotConfig.customPlotDomainStatistics);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// combined metric value plots\n\t\t\tif (Config.getBoolean(\"DEFAULT_PLOTS_ENABLED\")\n\t\t\t\t\t&& Config.getBoolean(\"DEFAULT_PLOT_COMBINED_METRIC_VALUES\")) {\n\t\t\t\t// plot metric values\n\t\t\t\tif (plotMetricValues\n\t\t\t\t\t\t&& Config.getBoolean(\"DEFAULT_PLOT_METRIC_VALUES\")) {\n\t\t\t\t\t// MetricDataList aMetrics = initBatches[i].getMetrics();\n\t\t\t\t\t// get metric names\n\t\t\t\t\tCollection<String> metricNames;\n\t\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\t\tmetricNames = ((AggregatedBatch) initBatches[i])\n\t\t\t\t\t\t\t\t.getMetrics().getNames();\n\t\t\t\t\telse\n\t\t\t\t\t\tmetricNames = ((BatchData) initBatches[i]).getMetrics()\n\t\t\t\t\t\t\t\t.getNames();\n\t\t\t\t\tfor (String metric : metricNames) {\n\t\t\t\t\t\t// ValueList aMetricValues = aMetrics.get(metric)\n\t\t\t\t\t\t// .getValues();\n\t\t\t\t\t\t// get metric value names\n\t\t\t\t\t\tCollection<String> metricValueNames;\n\t\t\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\t\t\tmetricValueNames = ((AggregatedBatch) initBatches[i])\n\t\t\t\t\t\t\t\t\t.getMetrics().get(metric).getValues()\n\t\t\t\t\t\t\t\t\t.getNames();\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tmetricValueNames = ((BatchData) initBatches[i])\n\t\t\t\t\t\t\t\t\t.getMetrics().get(metric).getValues()\n\t\t\t\t\t\t\t\t\t.getNames();\n\t\t\t\t\t\tfor (String value : metricValueNames) {\n\t\t\t\t\t\t\tif (!values.contains(value)) {\n\t\t\t\t\t\t\t\t// if value not present, add it and add new\n\t\t\t\t\t\t\t\t// domain\n\t\t\t\t\t\t\t\t// list\n\t\t\t\t\t\t\t\tvalues.add(value);\n\t\t\t\t\t\t\t\tArrayList<String> dList = new ArrayList<String>();\n\t\t\t\t\t\t\t\tdList.add(metric);\n\t\t\t\t\t\t\t\tvaluesDomainsList.add(dList);\n\t\t\t\t\t\t\t\tvaluesOccurence.add(1);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// if value present, add new domain to domain\n\t\t\t\t\t\t\t\t// list\n\t\t\t\t\t\t\t\tint index = values.indexOf(value);\n\t\t\t\t\t\t\t\tArrayList<String> domainList = valuesDomainsList\n\t\t\t\t\t\t\t\t\t\t.get(index);\n\t\t\t\t\t\t\t\tvaluesOccurence.set(index,\n\t\t\t\t\t\t\t\t\t\tvaluesOccurence.get(index) + 1);\n\t\t\t\t\t\t\t\tif (!domainList.contains(metric)) {\n\t\t\t\t\t\t\t\t\tdomainList.add(metric);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// runtimes\n\t\t\tif (plotRuntimes && Config.getBoolean(\"DEFAULT_PLOT_RUNTIMES\")) {\n\t\t\t\t// get general runtimes\n\t\t\t\tCollection<String> runtimeNames;\n\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\truntimeNames = ((AggregatedBatch) initBatches[i])\n\t\t\t\t\t\t\t.getGeneralRuntimes().getNames();\n\t\t\t\telse\n\t\t\t\t\truntimeNames = ((BatchData) initBatches[i])\n\t\t\t\t\t\t\t.getGeneralRuntimes().getNames();\n\t\t\t\tfor (String runtime : runtimeNames) {\n\t\t\t\t\tif (!genRuntimeValues.contains(runtime)) {\n\t\t\t\t\t\tgenRuntimeValues.add(runtime);\n\t\t\t\t\t\tgenRuntimeOccurence.add(1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tint index = genRuntimeValues.indexOf(runtime);\n\t\t\t\t\t\tgenRuntimeOccurence.set(index,\n\t\t\t\t\t\t\t\tgenRuntimeOccurence.get(index) + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// get metric runtimes\n\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\truntimeNames = ((AggregatedBatch) initBatches[i])\n\t\t\t\t\t\t\t.getMetricRuntimes().getNames();\n\t\t\t\telse\n\t\t\t\t\truntimeNames = ((BatchData) initBatches[i])\n\t\t\t\t\t\t\t.getMetricRuntimes().getNames();\n\t\t\t\tfor (String runtime : runtimeNames) {\n\t\t\t\t\tif (!metRuntimeValues.contains(runtime)) {\n\t\t\t\t\t\tmetRuntimeValues.add(runtime);\n\t\t\t\t\t\tmetRuntimeOccurence.add(1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tint index = metRuntimeValues.indexOf(runtime);\n\t\t\t\t\t\tmetRuntimeOccurence.set(index,\n\t\t\t\t\t\t\t\tmetRuntimeOccurence.get(index) + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// create general runtime plots\n\t\tprinted = false;\n\t\tfor (int i = 0; i < genRuntimeValues.size(); i++) {\n\t\t\tif (!printed) {\n\t\t\t\tLog.info(\"Plotting default general runtimes:\");\n\t\t\t\tprinted = true;\n\t\t\t}\n\t\t\tString runtime = genRuntimeValues.get(i);\n\t\t\tPlotData[] data = new PlotData[genRuntimeOccurence.get(i)];\n\t\t\tint index = 0;\n\t\t\tint[] seriesDataQuantities = new int[seriesData.length];\n\t\t\t// iterate over series\n\t\t\tfor (int j = 0; j < seriesData.length; j++) {\n\t\t\t\t// check if batch contains general runtime\n\t\t\t\tCollection<String> runtimeNames;\n\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\truntimeNames = ((AggregatedBatch) initBatches[j])\n\t\t\t\t\t\t\t.getGeneralRuntimes().getNames();\n\t\t\t\telse\n\t\t\t\t\truntimeNames = ((BatchData) initBatches[j])\n\t\t\t\t\t\t\t.getGeneralRuntimes().getNames();\n\t\t\t\tif (runtimeNames.contains(runtime)) {\n\t\t\t\t\tString runAddition = \"\";\n\t\t\t\t\tif (!aggregatedBatches)\n\t\t\t\t\t\trunAddition = \" @ run.\" + indizes[j];\n\t\t\t\t\tdata[index] = PlotData.get(runtime,\n\t\t\t\t\t\t\tPlotConfig.customPlotDomainGeneralRuntimes, style,\n\t\t\t\t\t\t\tseriesData[j].getName() + runAddition, type);\n\t\t\t\t\tseriesDataQuantities[j]++;\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// log\n\t\t\tLog.info(\"\\tplotting '\" + runtime + \"'\");\n\t\t\t// create plot\n\t\t\tPlot p = new Plot(dstDir,\n\t\t\t\t\tPlotFilenames.getRuntimesMultiSeriesGnuplotFile(runtime),\n\t\t\t\t\tPlotFilenames.getRuntimesMultiSeriesGnuplotScript(runtime),\n\t\t\t\t\truntime, data);\n\t\t\t// set quantities\n\t\t\tp.setSeriesDataQuantities(seriesDataQuantities);\n\t\t\t// add to plot list\n\t\t\tplotList.add(p);\n\t\t}\n\t\t// create metric runtime plots\n\t\tprinted = false;\n\t\tfor (int i = 0; i < metRuntimeValues.size(); i++) {\n\t\t\tif (!printed) {\n\t\t\t\tLog.info(\"Plotting default metric runtimes:\");\n\t\t\t\tprinted = true;\n\t\t\t}\n\t\t\tString runtime = metRuntimeValues.get(i);\n\t\t\tPlotData[] data = new PlotData[metRuntimeOccurence.get(i)];\n\t\t\tint index = 0;\n\t\t\tint[] seriesDataQuantities = new int[seriesData.length];\n\t\t\t// iterate over series\n\t\t\tfor (int j = 0; j < seriesData.length; j++) {\n\t\t\t\t// check if batch contains metric runtime\n\t\t\t\tCollection<String> runtimeNames;\n\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\truntimeNames = ((AggregatedBatch) initBatches[j])\n\t\t\t\t\t\t\t.getGeneralRuntimes().getNames();\n\t\t\t\telse\n\t\t\t\t\truntimeNames = ((BatchData) initBatches[j])\n\t\t\t\t\t\t\t.getGeneralRuntimes().getNames();\n\t\t\t\tif (runtimeNames.contains(runtime)) {\n\t\t\t\t\tString runAddition = \"\";\n\t\t\t\t\tif (!aggregatedBatches)\n\t\t\t\t\t\trunAddition = \" @ run.\" + indizes[j];\n\t\t\t\t\tdata[index] = PlotData.get(runtime,\n\t\t\t\t\t\t\tPlotConfig.customPlotDomainMetricRuntimes, style,\n\t\t\t\t\t\t\tseriesData[j].getName() + runAddition, type);\n\t\t\t\t\tseriesDataQuantities[j]++;\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// log\n\t\t\tLog.info(\"\\tplotting \" + \"'\" + runtime + \"'\");\n\t\t\t// create plot\n\t\t\tPlot p = new Plot(dstDir,\n\t\t\t\t\tPlotFilenames.getRuntimesMultiSeriesGnuplotFile(runtime),\n\t\t\t\t\tPlotFilenames.getRuntimesMultiSeriesGnuplotScript(runtime),\n\t\t\t\t\truntime, data);\n\t\t\t// set timestamp mapping\n\t\t\tp.setTimestampMap(timestampMap);\n\t\t\t// set quantities\n\t\t\tp.setSeriesDataQuantities(seriesDataQuantities);\n\t\t\t// add to plot list\n\t\t\tplotList.add(p);\n\t\t}\n\t\t// create default value plots\n\t\tprinted = false;\n\t\tfor (int i = 0; i < values.size(); i++) {\n\t\t\tif (!printed) {\n\t\t\t\tLog.info(\"Plotting default value plots: \");\n\t\t\t\tprinted = true;\n\t\t\t}\n\t\t\tString value = values.get(i);\n\t\t\tPlotData[] valuePlotData = new PlotData[valuesOccurence.get(i)];\n\t\t\tint index = 0;\n\t\t\tint[] seriesDataQuantities = new int[seriesData.length];\n\t\t\tboolean simpleTitles = false;\n\t\t\tArrayList<String> domains = valuesDomainsList.get(i);\n\t\t\t// if only one domain enable simple titles\n\t\t\tif (domains.size() == 1)\n\t\t\t\tsimpleTitles = true;\n\t\t\t// iterate over series\n\t\t\tfor (int j = 0; j < seriesData.length; j++) {\n\t\t\t\t// get batch statistics names\n\t\t\t\tCollection<String> valueNames;\n\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\tvalueNames = ((AggregatedBatch) initBatches[j]).getValues()\n\t\t\t\t\t\t\t.getNames();\n\t\t\t\telse\n\t\t\t\t\tvalueNames = ((BatchData) initBatches[j]).getValues()\n\t\t\t\t\t\t\t.getNames();\n\t\t\t\t// iterate over domains that contain the value\n\t\t\t\tfor (String d : domains) {\n\t\t\t\t\tString lineTitle;\n\t\t\t\t\tString runAddition = \"\";\n\t\t\t\t\tif (!aggregatedBatches)\n\t\t\t\t\t\trunAddition = \" @ run.\" + indizes[j];\n\t\t\t\t\tif (simpleTitles) {\n\t\t\t\t\t\tlineTitle = seriesData[j].getName();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (d.equals(PlotConfig.customPlotDomainStatistics))\n\t\t\t\t\t\t\tlineTitle = value + \" (\" + seriesData[j].getName()\n\t\t\t\t\t\t\t\t\t+ runAddition + \")\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tlineTitle = d\n\t\t\t\t\t\t\t\t\t+ PlotConfig.customPlotDomainDelimiter\n\t\t\t\t\t\t\t\t\t+ value + \" (\" + seriesData[j].getName()\n\t\t\t\t\t\t\t\t\t+ runAddition + \")\";\n\t\t\t\t\t}\n\t\t\t\t\t// check if series j contains value as a statistic\n\t\t\t\t\tif (d.equals(PlotConfig.customPlotDomainStatistics)) {\n\t\t\t\t\t\tif (valueNames.contains(value)) {\n\t\t\t\t\t\t\tvaluePlotData[index] = PlotData.get(value, d,\n\t\t\t\t\t\t\t\t\tstyle, lineTitle, type);\n\t\t\t\t\t\t\tseriesDataQuantities[j]++;\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// get metric names\n\t\t\t\t\tCollection<String> metricNames;\n\t\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\t\tmetricNames = ((AggregatedBatch) initBatches[j])\n\t\t\t\t\t\t\t\t.getMetrics().getNames();\n\t\t\t\t\telse\n\t\t\t\t\t\tmetricNames = ((BatchData) initBatches[j]).getMetrics()\n\t\t\t\t\t\t\t\t.getNames();\n\t\t\t\t\t// check if series j contains value in metric d\n\t\t\t\t\tif (metricNames.contains(d)) {\n\t\t\t\t\t\t// get metric value names\n\t\t\t\t\t\tCollection<String> metricValueNames;\n\t\t\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\t\t\tmetricValueNames = ((AggregatedBatch) initBatches[j])\n\t\t\t\t\t\t\t\t\t.getMetrics().get(d).getValues().getNames();\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tmetricValueNames = ((BatchData) initBatches[j])\n\t\t\t\t\t\t\t\t\t.getMetrics().get(d).getValues().getNames();\n\t\t\t\t\t\tif (metricValueNames.contains(value)) {\n\t\t\t\t\t\t\tvaluePlotData[index] = PlotData.get(value, d,\n\t\t\t\t\t\t\t\t\tstyle, lineTitle, type);\n\t\t\t\t\t\t\tseriesDataQuantities[j]++;\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// title\n\t\t\tString plotTitle;\n\t\t\tif (simpleTitles) {\n\t\t\t\tif (domains.get(0)\n\t\t\t\t\t\t.equals(PlotConfig.customPlotDomainStatistics))\n\t\t\t\t\tplotTitle = value;\n\t\t\t\telse\n\t\t\t\t\tplotTitle = domains.get(0)\n\t\t\t\t\t\t\t+ PlotConfig.customPlotDomainDelimiter + value;\n\t\t\t} else {\n\t\t\t\tplotTitle = value;\n\t\t\t}\n\t\t\t// log\n\t\t\tLog.info(\"\\tplotting \" + \"'\" + value + \"'\");\n\t\t\t// create plot\n\t\t\tPlot p = new Plot(dstDir, PlotFilenames.getValuesPlot(value),\n\t\t\t\t\tPlotFilenames.getValuesGnuplotScript(value), plotTitle,\n\t\t\t\t\tvaluePlotData);\n\t\t\t// set timestamp mapping\n\t\t\tp.setTimestampMap(timestampMap);\n\t\t\t// set quantities\n\t\t\tp.setSeriesDataQuantities(seriesDataQuantities);\n\t\t\t// add to plot list\n\t\t\tplotList.add(p);\n\t\t}\n\t\t// HashMap<String, Boolean> printedValues = new HashMap<String,\n\t\t// Boolean>();\n\t\t// create default metric plots\n\t\tif (plotMetricValues && Config.getBoolean(\"DEFAULT_PLOT_METRIC_VALUES\")) {\n\t\t\t// log\n\t\t\tLog.info(\"Plotting default metric value plots:\");\n\t\t\tArrayList<String> usedValues = new ArrayList<String>();\n\t\t\tfor (int i = 0; i < seriesData.length; i++) {\n\t\t\t\t// get metric names\n\t\t\t\tCollection<String> metricNames;\n\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\tmetricNames = ((AggregatedBatch) initBatches[i])\n\t\t\t\t\t\t\t.getMetrics().getNames();\n\t\t\t\telse\n\t\t\t\t\tmetricNames = ((BatchData) initBatches[i]).getMetrics()\n\t\t\t\t\t\t\t.getNames();\n\t\t\t\tfor (String metric : metricNames) {\n\t\t\t\t\t// get metric value names\n\t\t\t\t\tCollection<String> metricValueNames;\n\t\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\t\tmetricValueNames = ((AggregatedBatch) initBatches[i])\n\t\t\t\t\t\t\t\t.getMetrics().get(metric).getValues()\n\t\t\t\t\t\t\t\t.getNames();\n\t\t\t\t\telse\n\t\t\t\t\t\tmetricValueNames = ((BatchData) initBatches[i])\n\t\t\t\t\t\t\t\t.getMetrics().get(metric).getValues()\n\t\t\t\t\t\t\t\t.getNames();\n\t\t\t\t\t// check values\n\t\t\t\t\tfor (String value : metricValueNames) {\n\t\t\t\t\t\tif (!usedValues.contains(metric\n\t\t\t\t\t\t\t\t+ PlotConfig.customPlotDomainDelimiter + value)) {\n\t\t\t\t\t\t\tusedValues.add(metric\n\t\t\t\t\t\t\t\t\t+ PlotConfig.customPlotDomainDelimiter\n\t\t\t\t\t\t\t\t\t+ value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// create value plots\n\t\t\tfor (String entry : usedValues) {\n\t\t\t\tString[] split = entry\n\t\t\t\t\t\t.split(PlotConfig.customPlotDomainDelimiter);\n\t\t\t\tString metric = split[0];\n\t\t\t\tString value = split[1];\n\t\t\t\t// substitution\n\t\t\t\tboolean substituteAvailable = false;\n\t\t\t\tfor (PlotConfig pc : customDefaultSubstitutePlots) {\n\t\t\t\t\tif (substituteAvailable)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (pc.getDomains()[0]\n\t\t\t\t\t\t\t.equals(PlotConfig.customPlotDomainExpression)) {\n\t\t\t\t\t\tif (PlottingUtils.getDomainFromExpression(\n\t\t\t\t\t\t\t\tpc.getValues()[0], pc.getGeneralDomain())\n\t\t\t\t\t\t\t\t.equals(metric)\n\t\t\t\t\t\t\t\t&& PlottingUtils.getValueFromExpression(\n\t\t\t\t\t\t\t\t\t\tpc.getValues()[0]).equals(value)) {\n\t\t\t\t\t\t\tLog.info(\"\\tskipping '\" + metric + \".\" + value\n\t\t\t\t\t\t\t\t\t+ \"'\");\n\t\t\t\t\t\t\tLog.info(\"\\t\\t->  replaced by customplot '\"\n\t\t\t\t\t\t\t\t\t+ pc.getFilename() + \"'\");\n\t\t\t\t\t\t\tsubstituteAvailable = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (pc.getDomains()[0].equals(metric)\n\t\t\t\t\t\t\t&& pc.getValues()[0].equals(value)) {\n\t\t\t\t\t\tLog.info(\"\\tskipping '\" + metric + \".\" + value + \"'\");\n\t\t\t\t\t\tLog.info(\"\\t\\t->  replaced by customplot '\"\n\t\t\t\t\t\t\t\t+ pc.getFilename() + \"'\");\n\t\t\t\t\t\tsubstituteAvailable = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// skip if substitution is available\n\t\t\t\tif (substituteAvailable)\n\t\t\t\t\tcontinue;\n\t\t\t\t// log\n\t\t\t\tLog.info(\"\\tplotting '\" + metric + \".\" + value + \"'\");\n\t\t\t\tArrayList<PlotData> lines = new ArrayList<PlotData>();\n\t\t\t\tint[] seriesDataQuantities = new int[seriesData.length];\n\t\t\t\t// iterate over series\n\t\t\t\tfor (int i = 0; i < seriesData.length; i++) {\n\t\t\t\t\t// get metric names\n\t\t\t\t\tCollection<String> metricNames;\n\t\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\t\tmetricNames = ((AggregatedBatch) initBatches[i])\n\t\t\t\t\t\t\t\t.getMetrics().getNames();\n\t\t\t\t\telse\n\t\t\t\t\t\tmetricNames = ((BatchData) initBatches[i]).getMetrics()\n\t\t\t\t\t\t\t\t.getNames();\n\t\t\t\t\tif (metricNames.contains(metric)) {\n\t\t\t\t\t\t// get metric value names\n\t\t\t\t\t\tCollection<String> metricValueNames;\n\t\t\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\t\t\tmetricValueNames = ((AggregatedBatch) initBatches[i])\n\t\t\t\t\t\t\t\t\t.getMetrics().get(metric).getValues()\n\t\t\t\t\t\t\t\t\t.getNames();\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tmetricValueNames = ((BatchData) initBatches[i])\n\t\t\t\t\t\t\t\t\t.getMetrics().get(metric).getValues()\n\t\t\t\t\t\t\t\t\t.getNames();\n\t\t\t\t\t\tif (metricValueNames.contains(value)) {\n\t\t\t\t\t\t\tString runAddition = \"\";\n\t\t\t\t\t\t\tif (!aggregatedBatches)\n\t\t\t\t\t\t\t\trunAddition = \" @ run.\" + indizes[i];\n\t\t\t\t\t\t\t// create \"line\"\n\t\t\t\t\t\t\tPlotData data = PlotData\n\t\t\t\t\t\t\t\t\t.get(value, metric, style,\n\t\t\t\t\t\t\t\t\t\t\tseriesData[i].getName()\n\t\t\t\t\t\t\t\t\t\t\t\t\t+ runAddition, type);\n\t\t\t\t\t\t\tlines.add(data);\n\t\t\t\t\t\t\tseriesDataQuantities[i]++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// creeate plot\n\t\t\t\tPlotData[] data = lines.toArray(new PlotData[0]);\n\t\t\t\tPlot p = new Plot(dstDir, PlotFilenames.getValuesPlot(metric,\n\t\t\t\t\t\tvalue), PlotFilenames.getValuesGnuplotScript(metric,\n\t\t\t\t\t\tvalue), metric + \".\" + value, data);\n\t\t\t\t// set timestamp mapping\n\t\t\t\tp.setTimestampMap(timestampMap);\n\t\t\t\t// set quantities\n\t\t\t\tp.setSeriesDataQuantities(seriesDataQuantities);\n\t\t\t\t// add plot to list\n\t\t\t\tplotList.add(p);\n\t\t\t}\n\t\t}\n\t}\n\t/** Plots Distributions and NodeValueLists **/\n\tpublic static void plotDistributionsAndNodeValues(\n\t\t\tboolean plotDistributions, boolean plotNodeValues,\n\t\t\tIBatch initBatch, String[] batches, double[] timestamps,\n\t\t\tArrayList<PlotConfig> customDistributionPlots,\n\t\t\tArrayList<PlotConfig> customNodeValueListPlots, String seriesDir,\n\t\t\tString aggrDir, String dstDir, String title, PlotStyle style,\n\t\t\tPlotType type, DistributionPlotType distPlotType,\n\t\t\tNodeValueListOrder order, NodeValueListOrderBy orderBy)\n\t\t\tthrows IOException, InterruptedException {\n\t\tLog.infoSep();\n\t\tLog.info(\"Sequentially plotting Distributions and / or NodeValueLists\");\n\t\tLog.info(\"\");\n\t\t// check if aggregated batches\n\t\tboolean aggregatedBatches = false;\n\t\tif (initBatch instanceof AggregatedBatch)\n\t\t\taggregatedBatches = true;\n\t\t// check if singlefile\n\t\tboolean zippedRuns = false;\n\t\tboolean zippedBatches = false;\n\t\tif (Config.get(\"GENERATION_AS_ZIP\").equals(\"runs\"))\n\t\t\tzippedRuns = true;\n\t\tif (Config.get(\"GENERATION_AS_ZIP\").equals(\"batches\"))\n\t\t\tzippedBatches = true;\n\t\t// generate plots\n\t\tList<Plot> plots = new LinkedList<Plot>();\n\t\t// define list of custom plots that substitute default plots\n\t\tArrayList<PlotConfig> customDefaultSubstitutePlots = new ArrayList<PlotConfig>();\n\t\tfor (PlotConfig pc : customDistributionPlots) {\n\t\t\t// if only 1 value, add plot to list of substitutes\n\t\t\tif (pc.getValues().length == 1)\n\t\t\t\tcustomDefaultSubstitutePlots.add(pc);\n\t\t}\n\t\tfor (PlotConfig pc : customNodeValueListPlots) {\n\t\t\t// if only 1 value, add plot to list of substitutes\n\t\t\tif (pc.getValues().length == 1)\n\t\t\t\tcustomDefaultSubstitutePlots.add(pc);\n\t\t}\n\t\t// if aggregated, add type\n\t\tString aggAddition = \"\";\n\t\tif (aggregatedBatches)\n\t\t\taggAddition = \" (\" + type + \")\";\n\t\t// get metric names\n\t\tCollection<String> metricNames;\n\t\tif (aggregatedBatches)\n\t\t\tmetricNames = ((AggregatedBatch) initBatch).getMetrics().getNames();\n\t\telse\n\t\t\tmetricNames = ((BatchData) initBatch).getMetrics().getNames();\n\t\t// iterate over metrics and create plots\n\t\tfor (String metric : metricNames) {\n\t\t\tLog.infoSep();\n\t\t\tLog.info(\"Plotting metric \" + metric);\n\t\t\t// generate distribution plots\n\t\t\tif (plotDistributions && Config.getBoolean(\"DEFAULT_PLOTS_ENABLED\")\n\t\t\t\t\t&& Config.getBoolean(\"DEFAULT_PLOT_DISTRIBUTIONS\")) {\n\t\t\t\t// get distribution names\n\t\t\t\tCollection<String> distributionNames;\n\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\tdistributionNames = ((AggregatedBatch) initBatch)\n\t\t\t\t\t\t\t.getMetrics().get(metric).getDistributions()\n\t\t\t\t\t\t\t.getNames();\n\t\t\t\telse\n\t\t\t\t\tdistributionNames = ((BatchData) initBatch).getMetrics()\n\t\t\t\t\t\t\t.get(metric).getDistributions().getNames();\n\t\t\t\tfor (String distribution : distributionNames) {\n\t\t\t\t\t// substitution\n\t\t\t\t\tboolean substituteAvailable = false;\n\t\t\t\t\tfor (PlotConfig pc : customDefaultSubstitutePlots) {\n\t\t\t\t\t\tif (substituteAvailable)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tif (pc.getDomains()[0].equals(metric)\n\t\t\t\t\t\t\t\t&& pc.getValues()[0].equals(distribution)) {\n\t\t\t\t\t\t\tLog.info(\"\\tskipping '\" + metric + \".\"\n\t\t\t\t\t\t\t\t\t+ distribution + \"'\");\n\t\t\t\t\t\t\tLog.info(\"\\t\\t->  replaced by customplot '\"\n\t\t\t\t\t\t\t\t\t+ pc.getFilename() + \"'\");\n\t\t\t\t\t\t\tsubstituteAvailable = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// skip if substitution is available\n\t\t\t\t\tif (substituteAvailable)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t// log\n\t\t\t\t\tLog.info(\"\\tplotting distribution '\" + distribution + \"'\");\n\t\t\t\t\t// get dist filename\n\t\t\t\t\tString distFilename;\n\t\t\t\t\tif (aggregatedBatches) {\n\t\t\t\t\t\tAggregatedDistribution d = ((AggregatedBatch) initBatch)\n\t\t\t\t\t\t\t\t.getMetrics().get(metric).getDistributions()\n\t\t\t\t\t\t\t\t.get(distribution);\n\t\t\t\t\t\tif (d instanceof AggregatedBinnedDistribution) {\n\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t.getDistributionBinnedFilename(d.getName());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdistFilename = Files.getDistributionFilename(d\n\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tDistribution d = ((BatchData) initBatch).getMetrics()\n\t\t\t\t\t\t\t\t.get(metric).getDistributions()\n\t\t\t\t\t\t\t\t.get(distribution);\n\t\t\t\t\t\tif (d instanceof BinnedDistributionInt) {\n\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t.getDistributionBinnedIntFilename(d\n\t\t\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t} else if (d instanceof BinnedDistributionLong) {\n\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t.getDistributionBinnedLongFilename(d\n\t\t\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t} else if (d instanceof BinnedDistributionDouble) {\n\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t.getDistributionBinnedDoubleFilename(d\n\t\t\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t} else if (d instanceof DistributionInt) {\n\t\t\t\t\t\t\tdistFilename = Files.getDistributionIntFilename(d\n\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t} else if (d instanceof DistributionLong) {\n\t\t\t\t\t\t\tdistFilename = Files.getDistributionLongFilename(d\n\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t} else if (d instanceof DistributionDouble) {\n\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t.getDistributionDoubleFilename(d.getName());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdistFilename = Files.getDistributionFilename(d\n\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// check what to plot\n\t\t\t\t\tboolean plotDist = false;\n\t\t\t\t\tboolean plotCdf = false;\n\t\t\t\t\tswitch (distPlotType) {\n\t\t\t\t\tcase distOnly:\n\t\t\t\t\t\tplotDist = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase cdfOnly:\n\t\t\t\t\t\tplotCdf = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase distANDcdf:\n\t\t\t\t\t\tplotDist = true;\n\t\t\t\t\t\tplotCdf = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// generate normal plots\n\t\t\t\t\tif (plotDist) {\n\t\t\t\t\t\tPlotData[] dPlotData = new PlotData[batches.length];\n\t\t\t\t\t\tfor (int i = 0; i < batches.length; i++) {\n\t\t\t\t\t\t\tdPlotData[i] = PlotData.get(distribution, metric,\n\t\t\t\t\t\t\t\t\tstyle, title + \" @ \" + timestamps[i], type);\n\t\t\t\t\t\t\tif (!Config.getBoolean(\"GNUPLOT_DATA_IN_SCRIPT\")\n\t\t\t\t\t\t\t\t\t&& !zippedBatches && !zippedRuns) {\n\t\t\t\t\t\t\t\tif (aggregatedBatches) {\n\t\t\t\t\t\t\t\t\tdPlotData[i]\n\t\t\t\t\t\t\t\t\t\t\t.setDataLocation(\n\t\t\t\t\t\t\t\t\t\t\t\t\tPlotDataLocation.dataFile,\n\t\t\t\t\t\t\t\t\t\t\t\t\tDir.getMetricDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDir.getBatchDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taggrDir,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(long) timestamps[i]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmetric)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ distFilename);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdPlotData[i]\n\t\t\t\t\t\t\t\t\t\t\t.setDataLocation(\n\t\t\t\t\t\t\t\t\t\t\t\t\tPlotDataLocation.dataFile,\n\t\t\t\t\t\t\t\t\t\t\t\t\tDir.getMetricDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDir.getBatchDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taggrDir,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(long) timestamps[i]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmetric,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((BatchData) initBatch)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getMetrics()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.get(metric)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getType())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ distFilename);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tPlot p = new Plot(dstDir,\n\t\t\t\t\t\t\t\tPlotFilenames.getDistributionPlot(metric,\n\t\t\t\t\t\t\t\t\t\tdistribution),\n\t\t\t\t\t\t\t\tPlotFilenames.getDistributionGnuplotScript(\n\t\t\t\t\t\t\t\t\t\tmetric, distribution), distribution\n\t\t\t\t\t\t\t\t\t\t+ aggAddition, dPlotData);\n\t\t\t\t\t\t// disable datetime for distribution plot\n\t\t\t\t\t\tp.setPlotDateTime(false);\n\t\t\t\t\t\t// add to plots\n\t\t\t\t\t\tplots.add(p);\n\t\t\t\t\t}\n\t\t\t\t\t// generate cdf plots\n\t\t\t\t\tif (plotCdf) {\n\t\t\t\t\t\tPlotData[] dPlotDataCDF = new PlotData[batches.length];\n\t\t\t\t\t\tfor (int i = 0; i < batches.length; i++) {\n\t\t\t\t\t\t\tPlotData cdfPlotData = PlotData.get(distribution,\n\t\t\t\t\t\t\t\t\tmetric, style, title + \" @ \"\n\t\t\t\t\t\t\t\t\t\t\t+ timestamps[i], type);\n\t\t\t\t\t\t\tcdfPlotData.setPlotAsCdf(true);\n\t\t\t\t\t\t\tif (!Config.getBoolean(\"GNUPLOT_DATA_IN_SCRIPT\")\n\t\t\t\t\t\t\t\t\t&& !zippedBatches && !zippedRuns) {\n\t\t\t\t\t\t\t\tif (aggregatedBatches) {\n\t\t\t\t\t\t\t\t\tcdfPlotData\n\t\t\t\t\t\t\t\t\t\t\t.setDataLocation(\n\t\t\t\t\t\t\t\t\t\t\t\t\tPlotDataLocation.dataFile,\n\t\t\t\t\t\t\t\t\t\t\t\t\tDir.getMetricDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDir.getBatchDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taggrDir,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(long) timestamps[i]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmetric)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ distFilename);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcdfPlotData\n\t\t\t\t\t\t\t\t\t\t\t.setDataLocation(\n\t\t\t\t\t\t\t\t\t\t\t\t\tPlotDataLocation.dataFile,\n\t\t\t\t\t\t\t\t\t\t\t\t\tDir.getMetricDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDir.getBatchDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taggrDir,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(long) timestamps[i]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmetric,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((BatchData) initBatch)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getMetrics()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.get(metric)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getType())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ distFilename);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdPlotDataCDF[i] = cdfPlotData;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tPlot p = new Plot(dstDir,\n\t\t\t\t\t\t\t\tPlotFilenames.getDistributionCdfPlot(metric,\n\t\t\t\t\t\t\t\t\t\tdistribution),\n\t\t\t\t\t\t\t\tPlotFilenames.getDistributionCdfGnuplotScript(\n\t\t\t\t\t\t\t\t\t\tmetric, distribution), \"CDF of \"\n\t\t\t\t\t\t\t\t\t\t+ distribution + aggAddition,\n\t\t\t\t\t\t\t\tdPlotDataCDF);\n\t\t\t\t\t\t// set cdf\n\t\t\t\t\t\tp.setCdfPlot(true);\n\t\t\t\t\t\t// disable datetime for distribution plot\n\t\t\t\t\t\tp.setPlotDateTime(false);\n\t\t\t\t\t\t// add to plots\n\t\t\t\t\t\tplots.add(p);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// generate nodevaluelist plots\n\t\t\tif (plotNodeValues && Config.getBoolean(\"DEFAULT_PLOTS_ENABLED\")\n\t\t\t\t\t&& Config.getBoolean(\"DEFAULT_PLOT_NODEVALUELISTS\")) {\n\t\t\t\t// get nodevaluelist names\n\t\t\t\tCollection<String> nodevaluelistNames;\n\t\t\t\tif (aggregatedBatches)\n\t\t\t\t\tnodevaluelistNames = ((AggregatedBatch) initBatch)\n\t\t\t\t\t\t\t.getMetrics().get(metric).getNodeValues()\n\t\t\t\t\t\t\t.getNames();\n\t\t\t\telse\n\t\t\t\t\tnodevaluelistNames = ((BatchData) initBatch).getMetrics()\n\t\t\t\t\t\t\t.get(metric).getNodeValues().getNames();\n\t\t\t\tfor (String nodevaluelist : nodevaluelistNames) {\n\t\t\t\t\t// substitution\n\t\t\t\t\tboolean substituteAvailable = false;\n\t\t\t\t\tfor (PlotConfig pc : customDefaultSubstitutePlots) {\n\t\t\t\t\t\tif (substituteAvailable)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tif (pc.getDomains()[0].equals(metric)\n\t\t\t\t\t\t\t\t&& pc.getValues()[0].equals(nodevaluelist)) {\n\t\t\t\t\t\t\tLog.info(\"\\tskipping '\" + metric + \".\"\n\t\t\t\t\t\t\t\t\t+ nodevaluelist + \"'\");\n\t\t\t\t\t\t\tLog.info(\"\\t\\t->  replaced by customplot '\"\n\t\t\t\t\t\t\t\t\t+ pc.getFilename() + \"'\");\n\t\t\t\t\t\t\tsubstituteAvailable = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// skip if substitution is available\n\t\t\t\t\tif (substituteAvailable)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t// log\n\t\t\t\t\tLog.info(\"\\tplotting nodevaluelist '\" + nodevaluelist + \"'\");\n\t\t\t\t\t// generate normal plots\n\t\t\t\t\tPlotData[] nPlotData = new PlotData[batches.length];\n\t\t\t\t\tfor (int i = 0; i < batches.length; i++) {\n\t\t\t\t\t\tPlotData plotData = PlotData.get(nodevaluelist, metric,\n\t\t\t\t\t\t\t\tstyle, title + \" @ \" + timestamps[i], type);\n\t\t\t\t\t\tif (!Config.getBoolean(\"GNUPLOT_DATA_IN_SCRIPT\")\n\t\t\t\t\t\t\t\t&& !zippedBatches && !zippedRuns) {\n\t\t\t\t\t\t\tif (aggregatedBatches) {\n\t\t\t\t\t\t\t\tplotData.setDataLocation(\n\t\t\t\t\t\t\t\t\t\tPlotDataLocation.dataFile,\n\t\t\t\t\t\t\t\t\t\tDir.getMetricDataDir(Dir\n\t\t\t\t\t\t\t\t\t\t\t\t.getBatchDataDir(aggrDir,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(long) timestamps[i]),\n\t\t\t\t\t\t\t\t\t\t\t\tmetric)\n\t\t\t\t\t\t\t\t\t\t\t\t+ Files.getNodeValueListFilename(nodevaluelist));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tplotData.setDataLocation(\n\t\t\t\t\t\t\t\t\t\tPlotDataLocation.dataFile,\n\t\t\t\t\t\t\t\t\t\tDir.getMetricDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\tDir.getBatchDataDir(aggrDir,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(long) timestamps[i]),\n\t\t\t\t\t\t\t\t\t\t\t\tmetric,\n\t\t\t\t\t\t\t\t\t\t\t\t((BatchData) initBatch)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getMetrics()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.get(metric).getType())\n\t\t\t\t\t\t\t\t\t\t\t\t+ Files.getNodeValueListFilename(nodevaluelist));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnPlotData[i] = plotData;\n\t\t\t\t\t}\n\t\t\t\t\tPlot nPlot = new Plot(dstDir,\n\t\t\t\t\t\t\tPlotFilenames.getNodeValueListPlot(metric,\n\t\t\t\t\t\t\t\t\tnodevaluelist),\n\t\t\t\t\t\t\tPlotFilenames.getNodeValueListGnuplotScript(metric,\n\t\t\t\t\t\t\t\t\tnodevaluelist),\n\t\t\t\t\t\t\tnodevaluelist + aggAddition, nPlotData);\n\t\t\t\t\t// disable datetime for nodevaluelist plot\n\t\t\t\t\tnPlot.setPlotDateTime(false);\n\t\t\t\t\t// set nvl sort options\n\t\t\t\t\tnPlot.setNodeValueListOrder(order);\n\t\t\t\t\tnPlot.setNodeValueListOrderBy(orderBy);\n\t\t\t\t\t// add to plots\n\t\t\t\t\tplots.add(nPlot);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// generate custom distribution plots\n\t\tif (customDistributionPlots != null) {\n\t\t\tif (!customDistributionPlots.isEmpty()) {\n\t\t\t\tLog.infoSep();\n\t\t\t\tLog.info(\"Plotting Custom-Distribution-Plots:\");\n\t\t\t\tfor (PlotConfig pc : customDistributionPlots) {\n\t\t\t\t\tString name = pc.getTitle();\n\t\t\t\t\tif (name == null)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tLog.info(\"\\tplotting '\" + name + \"'\");\n\t\t\t\t\t// check for invalid values\n\t\t\t\t\tString[] tempValues = pc.getValues();\n\t\t\t\t\tString[] tempDomains = pc.getDomains();\n\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> functionsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i = 0; i < tempValues.length; i++) {\n\t\t\t\t\t\tString v = tempValues[i];\n\t\t\t\t\t\tString d = tempDomains[i];\n\t\t\t\t\t\t// check if invalid value\n\t\t\t\t\t\tif (d.equals(PlotConfig.customPlotDomainStatistics)\n\t\t\t\t\t\t\t\t|| d.equals(PlotConfig.customPlotDomainRuntimes)) {\n\t\t\t\t\t\t\tLog.warn(\"invalid value '\" + tempDomains[i]\n\t\t\t\t\t\t\t\t\t+ PlotConfig.customPlotDomainDelimiter\n\t\t\t\t\t\t\t\t\t+ tempValues[i]\n\t\t\t\t\t\t\t\t\t+ \"' in distribution plot '\" + name + \"'\");\n\t\t\t\t\t\t} else if (d\n\t\t\t\t\t\t\t\t.equals(PlotConfig.customPlotDomainFunction)) {\n\t\t\t\t\t\t\t// check if function\n\t\t\t\t\t\t\tfunctionsList.add(v);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvaluesList.add(v);\n\t\t\t\t\t\t\tdomainsList.add(d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// only take over valid values\n\t\t\t\t\tString[] values = valuesList.toArray(new String[0]);\n\t\t\t\t\tString[] domains = domainsList.toArray(new String[0]);\n\t\t\t\t\tint valuesCount = values.length;\n\t\t\t\t\t// check what to plot\n\t\t\t\t\tboolean plotDist = false;\n\t\t\t\t\tboolean plotCdf = false;\n\t\t\t\t\tif (pc.getDistPlotType() != null) {\n\t\t\t\t\t\tswitch (pc.getDistPlotType()) {\n\t\t\t\t\t\tcase distOnly:\n\t\t\t\t\t\t\tplotDist = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase cdfOnly:\n\t\t\t\t\t\t\tplotCdf = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase distANDcdf:\n\t\t\t\t\t\t\tplotDist = true;\n\t\t\t\t\t\t\tplotCdf = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tplotDist = true;\n\t\t\t\t\t}\n\t\t\t\t\t// gather plot data\n\t\t\t\t\tPlotData[] data = null;\n\t\t\t\t\tPlotData[] dataCdf = null;\n\t\t\t\t\tif (plotDist)\n\t\t\t\t\t\tdata = new PlotData[valuesCount * batches.length\n\t\t\t\t\t\t\t\t+ functionsList.size()];\n\t\t\t\t\tif (plotCdf)\n\t\t\t\t\t\tdataCdf = new PlotData[valuesCount * batches.length\n\t\t\t\t\t\t\t\t+ functionsList.size()];\n\t\t\t\t\t// gather plot data\n\t\t\t\t\t// example: distributions d1, d2\n\t\t\t\t\t// -> data[] = { d1(0), d2(0), d1(1), d2(1), ... }\n\t\t\t\t\t// where d1(x) is the plotdata of d1 at timestamp x\n\t\t\t\t\tfor (int i = 0; i < batches.length; i++) {\n\t\t\t\t\t\tfor (int j = 0; j < valuesCount; j++) {\n\t\t\t\t\t\t\t// get dist filename\n\t\t\t\t\t\t\tString distFilename;\n\t\t\t\t\t\t\tif (aggregatedBatches) {\n\t\t\t\t\t\t\t\tif (((AggregatedBatch) initBatch).getMetrics()\n\t\t\t\t\t\t\t\t\t\t.get(domains[j]).getDistributions()\n\t\t\t\t\t\t\t\t\t\t.get(values[j]) instanceof AggregatedBinnedDistribution) {\n\t\t\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t\t\t.getDistributionBinnedFilename(values[j]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t\t\t.getDistributionFilename(values[j]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tDistribution d = ((BatchData) initBatch)\n\t\t\t\t\t\t\t\t\t\t.getMetrics().get(domains[j])\n\t\t\t\t\t\t\t\t\t\t.getDistributions().get(values[j]);\n\t\t\t\t\t\t\t\tif (d instanceof BinnedDistributionInt) {\n\t\t\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t\t\t.getDistributionBinnedIntFilename(d\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t\t\t} else if (d instanceof BinnedDistributionLong) {\n\t\t\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t\t\t.getDistributionBinnedLongFilename(d\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t\t\t} else if (d instanceof BinnedDistributionDouble) {\n\t\t\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t\t\t.getDistributionBinnedDoubleFilename(d\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t\t\t} else if (d instanceof DistributionInt) {\n\t\t\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t\t\t.getDistributionIntFilename(d\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t\t\t} else if (d instanceof DistributionLong) {\n\t\t\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t\t\t.getDistributionLongFilename(d\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t\t\t} else if (d instanceof DistributionDouble) {\n\t\t\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t\t\t.getDistributionDoubleFilename(d\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdistFilename = Files\n\t\t\t\t\t\t\t\t\t\t\t.getDistributionFilename(d\n\t\t\t\t\t\t\t\t\t\t\t\t\t.getName());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (plotDist) {\n\t\t\t\t\t\t\t\tPlotData pd = PlotData\n\t\t\t\t\t\t\t\t\t\t.get(values[j],\n\t\t\t\t\t\t\t\t\t\t\t\tdomains[j],\n\t\t\t\t\t\t\t\t\t\t\t\tstyle,\n\t\t\t\t\t\t\t\t\t\t\t\tdomains[j]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ PlotConfig.customPlotDomainDelimiter\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ values[j] + \" @ \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ timestamps[i], type);\n\t\t\t\t\t\t\t\tif (!Config\n\t\t\t\t\t\t\t\t\t\t.getBoolean(\"GNUPLOT_DATA_IN_SCRIPT\")\n\t\t\t\t\t\t\t\t\t\t&& !zippedBatches && !zippedRuns) {\n\t\t\t\t\t\t\t\t\tif (aggregatedBatches) {\n\t\t\t\t\t\t\t\t\t\tpd.setDataLocation(\n\t\t\t\t\t\t\t\t\t\t\t\tPlotDataLocation.dataFile,\n\t\t\t\t\t\t\t\t\t\t\t\tDir.getMetricDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDir.getBatchDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taggrDir,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(long) timestamps[i]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdomains[j])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ distFilename);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tpd.setDataLocation(\n\t\t\t\t\t\t\t\t\t\t\t\tPlotDataLocation.dataFile,\n\t\t\t\t\t\t\t\t\t\t\t\tDir.getMetricDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDir.getBatchDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taggrDir,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(long) timestamps[i]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdomains[j],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t((BatchData) initBatch)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getMetrics()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.get(domains[j])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getType())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ distFilename);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdata[i * valuesCount + j] = pd;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (plotCdf) {\n\t\t\t\t\t\t\t\tPlotData dCdf = PlotData\n\t\t\t\t\t\t\t\t\t\t.get(values[j],\n\t\t\t\t\t\t\t\t\t\t\t\tdomains[j],\n\t\t\t\t\t\t\t\t\t\t\t\tstyle,\n\t\t\t\t\t\t\t\t\t\t\t\tdomains[j]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ PlotConfig.customPlotDomainDelimiter\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ values[j] + \" @ \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ timestamps[i], type);\n\t\t\t\t\t\t\t\tif (!Config\n\t\t\t\t\t\t\t\t\t\t.getBoolean(\"GNUPLOT_DATA_IN_SCRIPT\")\n\t\t\t\t\t\t\t\t\t\t&& !zippedBatches && !zippedRuns) {\n\t\t\t\t\t\t\t\t\tif (aggregatedBatches) {\n\t\t\t\t\t\t\t\t\t\tdCdf.setDataLocation(\n\t\t\t\t\t\t\t\t\t\t\t\tPlotDataLocation.dataFile,\n\t\t\t\t\t\t\t\t\t\t\t\tDir.getMetricDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDir.getBatchDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taggrDir,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(long) timestamps[i]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdomains[j])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ distFilename);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdCdf.setDataLocation(\n\t\t\t\t\t\t\t\t\t\t\t\tPlotDataLocation.dataFile,\n\t\t\t\t\t\t\t\t\t\t\t\tDir.getMetricDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDir.getBatchDataDir(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taggrDir,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(long) timestamps[i]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdomains[j],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t((BatchData) initBatch)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getMetrics()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.get(domains[j])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getType())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ distFilename);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdCdf.setPlotAsCdf(true);\n\t\t\t\t\t\t\t\tdataCdf[i * valuesCount + j] = dCdf;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// add function datas\n\t\t\t\t\tint offset = batches.length * valuesCount;\n\t\t\t\t\tfor (int i = 0; i < functionsList.size(); i++) {\n\t\t\t\t\t\tString f = functionsList.get(i);\n\t\t\t\t\t\tString[] functionSplit = f.split(\"=\");\n\t\t\t\t\t\tif (functionSplit.length != 2) {\n\t\t\t\t\t\t\tLog.warn(\"wrong function syntax for \" + f);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (plotDist)\n\t\t\t\t\t\t\tdata[offset + i] = PlotData.get(functionSplit[0],\n\t\t\t\t\t\t\t\t\tfunctionSplit[1], style, title,\n\t\t\t\t\t\t\t\t\tPlotType.function);\n\t\t\t\t\t\tif (plotCdf)\n\t\t\t\t\t\t\tdataCdf[offset + i] = PlotData.get(\n\t\t\t\t\t\t\t\t\tfunctionSplit[0], functionSplit[1], style,\n\t\t\t\t\t\t\t\t\ttitle, PlotType.function);\n\t\t\t\t\t}\n\t\t\t\t\t// get filename\n\t\t\t\t\tString filename = name;\n\t\t\t\t\tif (pc.getFilename() != null) {\n\t\t\t\t\t\tfilename = pc.getFilename();\n\t\t\t\t\t}\n\t\t\t\t\t// create normal plot\n\t\t\t\t\tif (plotDist) {\n\t\t\t\t\t\tPlot p = new Plot(\n\t\t\t\t\t\t\t\tdstDir,\n\t\t\t\t\t\t\t\tPlotFilenames.getDistributionPlot(filename),\n\t\t\t\t\t\t\t\tPlotFilenames\n\t\t\t\t\t\t\t\t\t\t.getDistributionGnuplotScript(filename),\n\t\t\t\t\t\t\t\tname + aggAddition, pc, data);\n\t\t\t\t\t\t// set data quantity\n\t\t\t\t\t\tp.setDataQuantity(values.length);\n\t\t\t\t\t\t// disable datetime for distribution plot\n\t\t\t\t\t\tp.setPlotDateTime(false);\n\t\t\t\t\t\t// add to plots\n\t\t\t\t\t\tplots.add(p);\n\t\t\t\t\t}\n\t\t\t\t\t// create cdf plot\n\t\t\t\t\tif (plotCdf) {\n\t\t\t\t\t\tPlot pCdf = new Plot(\n\t\t\t\t\t\t\t\tdstDir,\n\t\t\t\t\t\t\t\tPlotFilenames.getDistributionCdfPlot(filename),\n\t\t\t\t\t\t\t\tPlotFilenames\n\t\t\t\t\t\t\t\t\t\t.getDistributionCdfGnuplotScript(filename),\n\t\t\t\t\t\t\t\t\"CDF of \" + name + aggAddition, pc, dataCdf);\n\t\t\t\t\t\t// set cdf plot\n\t\t\t\t\t\tpCdf.setCdfPlot(true);\n\t\t\t\t\t\t// set data quantity\n\t\t\t\t\t\tpCdf.setDataQuantity(values.length);\n\t\t\t\t\t\t// disable datetime for distribution plot\n\t\t\t\t\t\tpCdf.setPlotDateTime(false);\n\t\t\t\t\t\t// add to plots\n\t\t\t\t\t\tplots.add(pCdf);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// generate custom nodevaluelist plots\n\t\tif (customNodeValueListPlots != null) {\n\t\t\tif (!customNodeValueListPlots.isEmpty()) {\n\t\t\t\tLog.infoSep();\n\t\t\t\tLog.info(\"Plotting Custom-NodeValueList-Plots:\");\n\t\t\t\tfor (PlotConfig pc : customNodeValueListPlots) {\n\t\t\t\t\tString name = pc.getTitle();\n\t\t\t\t\tif (name == null)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tLog.info(\"\\tplotting '\" + name + \"'\");\n\t\t\t\t\t// check for invalid values\n\t\t\t\t\tString[] tempValues = pc.getValues();\n\t\t\t\t\tString[] tempDomains = pc.getDomains();\n", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "length": 4724, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "99a5312912d8af14418c3beb93dd8fdebd2654a2f1e3357a"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n########################## Copyrights and license ############################\n#                                                                            #\n# Copyright 2011-2015  Christian Lupien <christian.lupien@usherbrooke.ca>    #\n#                                                                            #\n# This file is part of pyHegel.  http://github.com/lupien/pyHegel            #\n#                                                                            #\n# pyHegel is free software: you can redistribute it and/or modify it under   #\n# the terms of the GNU Lesser General Public License as published by the     #\n# Free Software Foundation, either version 3 of the License, or (at your     #\n# option) any later version.                                                 #\n#                                                                            #\n# pyHegel is distributed in the hope that it will be useful, but WITHOUT     #\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or      #\n# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public        #\n# License for more details.                                                  #\n#                                                                            #\n# You should have received a copy of the GNU Lesser General Public License   #\n# along with pyHegel.  If not, see <http://www.gnu.org/licenses/>.           #\n#                                                                            #\n##############################################################################\nfrom __future__ import absolute_import\nimport numpy as np\nimport random\nimport time\nfrom scipy.optimize import brentq as brentq_rootsolver\nfrom .. import traces\nfrom ..instruments_base import BaseInstrument, visaInstrument, visaInstrumentAsync,\\\n                            BaseDevice, scpiDevice, MemoryDevice, Dict_SubDevice, ReadvalDev,\\\n                            ChoiceBase, ChoiceMultiple, ChoiceMultipleDep, ChoiceSimpleMap,\\\n                            ChoiceStrings, ChoiceIndex,\\\n                            make_choice_list, _fromstr_helper,\\\n                            decode_float64, visa_wrap, locked_calling\nfrom ..types import dict_improved\nfrom ..instruments_registry import register_instrument, register_usb_name, register_idn_alias\nfrom .logical import FunctionDevice\n#######################################################\n##    Yokogawa source\n#######################################################\nregister_usb_name('Yokogawa Electric Corporation', 0x0B21)\n@register_instrument('YOKOGAWA', 'GS210', usb_vendor_product=[0x0B21, 0x0039])\n#@register_instrument('YOKOGAWA', 'GS210', '1.05')\n#@register_instrument('YOKOGAWA', 'GS210', '1.02')\nclass yokogawa_gs200(visaInstrument):\n    # TODO: implement multipliers, units. The multiplier\n    #      should be the same for all instruments, and be stripped\n    #      before writing and going to the cache (in BaseDevice)\n    #      This is probably not needed. Just use 1e3\n    # case insensitive\n    multipliers = ['YO', 'ZE', 'EX', 'PE', 'T', 'G', 'MA', 'K', 'M', 'U', 'N', 'P',\n                   'F', 'A', 'Z', 'Y']\n    multvals    = [1e24, 1e21, 1e18, 1e15, 1e12, 1e9, 1e6, 1e3, 1e-3, 1e-6, 1e-9, 1e-12,\n                   1e-15, 1e-18, 1e-21, 1e-24]\n    def init(self, full=False):\n        # clear event register, extended event register and error queue\n        self.clear()\n    def _current_config(self, dev_obj=None, options={}):\n        return self._conf_helper('function', 'range', 'level', 'output_en', options)\n    def _create_devs(self):\n        #self.level_2 = wrapDevice(self.levelsetdev, self.levelgetdev, self.levelcheck)\n        self.function = scpiDevice(':source:function', choices=ChoiceStrings('VOLT', 'CURRent')) # use 'voltage' or 'current'\n        # voltage or current means to add V or A in the string (possibly with multiplier)\n        self.range = scpiDevice(':source:range', str_type=float, setget=True) # can be a voltage, current, MAX, MIN, UP or DOWN\n        #self.level = scpiDevice(':source:level') # can be a voltage, current, MAX, MIN\n        self.voltlim = scpiDevice(':source:protection:voltage', str_type=float, setget=True) #voltage, MIN or MAX\n        self.currentlim = scpiDevice(':source:protection:current', str_type=float, setget=True) #current, MIN or MAX\n        self.output_en = scpiDevice('OUTPut', str_type=bool)\n        self._devwrap('level', setget=True)\n        self.alias = self.level\n        # This needs to be last to complete creation\n        super(type(self),self)._create_devs()\n    def _level_check(self, val):\n        rnge = 1.2*self.range.getcache()\n        if self.function.getcache()=='CURR' and rnge>.2:\n            rnge = .2\n        if abs(val) > rnge:\n            raise ValueError, self.perror('level is invalid')\n    def _level_getdev(self):\n        return float(self.ask(':source:level?'))\n    def _level_setdev(self, val):\n        # used %.6e instead of repr\n        # repr sometimes sends 0.010999999999999999\n        # which the yokogawa understands as 0.010 instead of 0.011\n        self.write(':source:level %.6e'%val)\n#######################################################\n##    Stanford Research SR830 Lock-in Amplifier\n#######################################################\n#@register_instrument('Stanford_Research_Systems', 'SR830', 'ver1.07 ')\n@register_instrument('Stanford_Research_Systems', 'SR830', alias='SR830 LIA')\nclass sr830_lia(visaInstrument):\n    \"\"\"\n    Don't forget to set the async_wait to some usefull values.\n     might do set(sr1.async_wait, 1.)\n    when using 24dB/oct, 100ms filter.\n    You can use find_n_time and find_fraction to set the time.\n    For example: set(sr1.async_wait, sr1.find_n_time(.99,sec=True))\n    To read more than one channel at a time use readval/fetch(snap)\n    Otherwise you can use x, y, t, theta\n    \"\"\"\n    # TODO setup snapsel to use the names instead of the numbers\n    _snap_type = {1:'x', 2:'y', 3:'R', 4:'theta', 5:'Aux_in1', 6:'Aux_in2',\n                  7:'Aux_in3', 8:'Aux_in4', 9:'Ref_Freq', 10:'Ch1', 11:'Ch2'}\n    def init(self, full=False):\n        # This empties the instrument buffers\n        self._dev_clear()\n    def _check_snapsel(self,sel):\n        if not (2 <= len(sel) <= 6):\n            raise ValueError, 'snap sel needs at least 2 and no more thant 6 elements'\n    def _snap_getdev(self, sel=[1,2]):\n        # sel must be a list\n        self._check_snapsel(sel)\n        sel = map(str, sel)\n        return decode_float64(self.ask('snap? '+','.join(sel)))\n    def _snap_getformat(self, sel=[1,2], **kwarg):\n        self._check_snapsel(sel)\n        headers = [ self._snap_type[i] for i in sel]\n        d = self.snap._format\n        d.update(multi=headers, graph=range(len(sel)))\n        return BaseDevice.getformat(self.snap, sel=sel, **kwarg)\n    def auto_offset(self, ch='x'):\n        \"\"\"\n           commands the auto offset for channel ch\n           which can be 'x', 'y' or 'r'\n        \"\"\"\n        choices=ChoiceIndex(['x', 'y', 'r'], offset=1)\n        ch_i = choices.tostr(ch)\n        self.write('aoff '+ch_i)\n    def _current_config(self, dev_obj=None, options={}):\n        #base = ['async_delay=%r'%self.async_delay]\n        return self._conf_helper('async_delay','async_wait', 'freq', 'sens', 'srclvl', 'harm', 'phase', 'timeconstant', 'filter_slope',\n                                 'sync_filter', 'reserve_mode',\n                                 'offset_expand_x', 'offset_expand_y', 'offset_expand_r',\n                                 'input_conf', 'grounded_conf', 'dc_coupled_conf', 'linefilter_conf', options)\n    def _create_devs(self):\n        self.freq = scpiDevice('freq', str_type=float, setget=True, min=0.001, max=102e3)\n        sens = ChoiceIndex(make_choice_list([2,5,10], -9, -1), normalize=True)\n        self.sens = scpiDevice('sens', choices=sens, doc='Set the sensitivity in V (for currents it is in uA)')\n        self.oauxi1 = scpiDevice(getstr='oaux? 1', str_type=float, setget=True)\n        self.srclvl = scpiDevice('slvl', str_type=float, min=0.004, max=5., setget=True)\n        self.harm = scpiDevice('harm', str_type=int, min=1, max=19999)\n        self.phase = scpiDevice('phas', str_type=float, min=-360., max=729.90, setget=True)\n        timeconstants = ChoiceIndex(make_choice_list([10, 30], -6, 3), normalize=True)\n        self.timeconstant = scpiDevice('oflt', choices=timeconstants)\n        filter_slopes=ChoiceIndex([6, 12, 18, 24])\n        self.filter_slope = scpiDevice('ofsl', choices=filter_slopes, doc='in dB/oct\\n')\n        self.sync_filter = scpiDevice('sync', str_type=bool)\n        self.x = scpiDevice(getstr='outp? 1', str_type=float, trig=True)\n        self.y = scpiDevice(getstr='outp? 2', str_type=float, trig=True)\n        self.r = scpiDevice(getstr='outp? 3', str_type=float, trig=True)\n        off_exp = ChoiceMultiple(['offset_pct', 'expand_factor'], [float, ChoiceIndex([1, 10 ,100])])\n        self.offset_expand_x = scpiDevice('oexp 1,{val}', 'oexp? 1', choices=off_exp, setget=True)\n        self.offset_expand_y = scpiDevice('oexp 2,{val}', 'oexp? 2', choices=off_exp, setget=True)\n        self.offset_expand_r = scpiDevice('oexp 3,{val}', 'oexp? 3', choices=off_exp, setget=True)\n        self.theta = scpiDevice(getstr='outp? 4', str_type=float, trig=True)\n        input_conf = ChoiceIndex(['A', 'A-B', 'I1', 'I100'])\n        self.input_conf = scpiDevice('isrc', choices=input_conf, doc='For currents I1 refers to 1 MOhm, I100 refers to 100 MOhm\\n')\n        self.grounded_conf = scpiDevice('ignd', str_type=bool)\n        self.dc_coupled_conf = scpiDevice('icpl', str_type=bool)\n        reserve_mode = ChoiceIndex(['high', 'normal', 'low'])\n        self.reserve_mode = scpiDevice('rmod', choices=reserve_mode)\n        linefilter = ChoiceIndex(['none', 'line', '2xline', 'both'])\n        self.linefilter_conf = scpiDevice('ilin', choices=linefilter, doc='Selects the notch filters')\n        # status: b0=Input/Reserver ovld, b1=Filter ovld, b2=output ovld, b3=unlock,\n        # b4=range change (accross 200 HZ, hysteresis), b5=indirect time constant change\n        # b6=triggered, b7=unused\n        self.status_byte = scpiDevice(getstr='LIAS?', str_type=int)\n        self._devwrap('snap', trig=True, doc=\"\"\"\n            This device can be called snap or fetch (they are both the same)\n            This device obtains simultaneous readings from many inputs.\n            To select the inputs, use the parameter\n             sel\n            which is [1,2] by default.\n            The numbers are taken from the following dictionnary:\n                %r\n                \"\"\"%self._snap_type)\n        self.fetch = self.snap\n        self.readval = ReadvalDev(self.fetch)\n        self.alias = self.readval\n        # This needs to be last to complete creation\n        super(type(self),self)._create_devs()\n    def get_error(self):\n        \"\"\"\n         returns a byte of bit flags\n          bit 0 (1):   unused\n          bit 1 (2):   Backup error\n          bit 2 (4):   RAM error\n          bit 3 (8):   Unused\n          bit 4 (16):  Rom error\n          bit 5 (32):  GPIB error\n          bit 6 (64):  DSP error\n          bit 7 (128): Math Error\n        \"\"\"\n        return int(self.ask('ERRS?'))\n    def find_fraction(self, n_time_constant, n_filter=None, time_constant=None, sec=False):\n        \"\"\"\n        Calculates the fraction of a step function that is obtained after\n        n_time_constant*time_constant time when using n_filter\n        n_filter is the order of the filter: 1, 2, 3 ...\n        By default time_constant and n_filter are the current ones\n        When sec is True the input time is in sec, not in time_constants\n        \"\"\"\n        if n_filter == None:\n            n_filter = self.filter_slope.getcache()\n            n_filter = self.filter_slope.choices.index(n_filter)+1\n        if time_constant == None:\n            time_constant = self.timeconstant.getcache()\n        if sec:\n            n_time_constant /= time_constant\n        t = n_time_constant\n        et = np.exp(-t)\n        if n_filter == 1:\n            return 1.-et\n        elif n_filter == 2:\n            return 1.-et*(1.+t)\n#        elif n_filter == 3:\n#            return 1.-et*(1.+t+0.5*t**2)\n#        elif n_filter == 4:\n#            return 1.-et*(1.+t+0.5*t**2+t**3/6.)\n        else:\n            # general formula: 1-exp(-t)*( 1+t +t**/2 + ... t**(n-1)/(n-1)!) )\n            m = 1.\n            tt = 1.\n            for i in range(1, n_filter):\n                tt *= t/i\n                m += tt\n            return 1.-et*m\n    def find_n_time(self, frac=.99, n_filter=None, time_constant=None, sec=False):\n        \"\"\"\n        Does the inverse of find_fraction.\n        Here, given a fraction, we find the number of time_constants needed to wait.\n        When sec is true, it returs the time in sec not in number of time_constants.\n        \"\"\"\n        if n_filter == None:\n            n_filter = self.filter_slope.getcache()\n            n_filter = self.filter_slope.choices.index(n_filter)+1\n        if time_constant == None:\n            time_constant = self.timeconstant.getcache()\n        func = lambda x: self.find_fraction(x, n_filter, time_constant)-frac\n        n_time = brentq_rootsolver(func, 0, 100)\n        if sec:\n            return n_time*time_constant\n        else:\n            return n_time\n#######################################################\n##    Stanford Research SR384 RF source\n#######################################################\n#@register_instrument('Stanford Research Systems', 'SG384', 'ver1.02.0E')\n@register_instrument('Stanford Research Systems', 'SG384', alias='SG384 RF source')\nclass sr384_rf(visaInstrument):\n    # This instruments needs to be on local state or to pass through local state\n    #  after a local_lockout to actually turn off the local key.\n    # allowed units: amp: dBm, rms, Vpp; freq: GHz, MHz, kHz, Hz; Time: ns, us, ms, s\n    def init(self, full=False):\n        # This clears the error state\n        self.clear()\n    def _current_config(self, dev_obj=None, options={}):\n        return self._conf_helper('freq', 'en_lf', 'amp_lf_dbm', 'offset_low',\n                                 'en_rf', 'amp_rf_dbm', 'en_hf', 'amp_hf_dbm',\n                                 'phase', 'mod_en', options)\n    def _create_devs(self):\n        self.freq = scpiDevice('freq',str_type=float, min=1e-6, max=8.1e9)\n        self.offset_low = scpiDevice('ofsl',str_type=float, min=-1.5, max=+1.5) #volts\n        self.amp_lf_dbm = scpiDevice('ampl',str_type=float, min=-47, max=14.96) # all channel output power calibrated to +13 dBm only, manual says 15.5 for low but intruments stops at 14.96\n        self.amp_rf_dbm = scpiDevice('ampr',str_type=float, min=-110, max=16.53)\n        self.amp_hf_dbm = scpiDevice('amph',str_type=float, min=-10, max=16.53) # doubler\n        self.en_lf = scpiDevice('enbl', str_type=bool) # 0 is off, 1 is on, read value depends on freq\n        self.en_rf = scpiDevice('enbr', str_type=bool) # 0 is off, 1 is on, read value depends on freq\n        self.en_hf = scpiDevice('enbh', str_type=bool) # 0 is off, 1 is on, read value depends on freq\n        self.phase = scpiDevice('phas',str_type=float, min=-360, max=360) # deg, only change by 360\n        self.mod_en = scpiDevice('modl', str_type=bool) # 0 is off, 1 is on\n        # This needs to be last to complete creation\n        super(type(self),self)._create_devs()\n    def get_error(self):\n        \"\"\"\n         Pops last error\n          ## Execution Errors\n          0: No error\n         10: Illegal value\n         11: Illegal Mode\n         12: Not allowed\n         13: Recall Failed\n         14: No clock option\n         15: No RF doubler option\n         16: No IQ option\n         17: Failed self test\n          ## Query Errors\n         30: Lost data\n         32: No listener\n          ## Device dependent errors\n         40: Failed ROM check\n         42: Failed EEPROM check\n         43: Failed FPGA check\n         44: Failed SRAM check\n         45: Failed GPIB check\n         46: Failed LF DDS check\n         47: Failed RF DDS check\n         48: Failed 20 MHz PLL\n         49: Failed 100 MHz PLL\n         50: Failed 19 MHz PLL\n         51: Failed 1 GHz PLL\n         52: Failed 4 GHz PLL\n         53: Failed DAC\n          ## Parsing errors\n        110: Illegal command\n        111: Undefined command\n        112: Illegal query\n        113: Illegal set\n        114: Null parameter\n        115: Extra parameters\n        116: Missing parameters\n        117: Parameter overflow\n        118: Invalid floating point number\n        120: Invalid Integer\n        121: Integer overflow\n        122: Invalid Hexadecimal\n        126: Syntax error\n        127: Illegal units\n        128: Missing units\n          ## Communication errors\n        170: Communication error\n        171: Over run\n          ## Other errors\n        254: Too many errors\n        \"\"\"\n        return int(self.ask('LERR?'))\n#######################################################\n##    Stanford Research SR780 2 channel network analyzer\n#######################################################\n#@register_instrument('Stanford_Research_Systems', 'SR780', 'ver116')\n@register_instrument('Stanford_Research_Systems', 'SR780', alias='SR780 network analyser')\nclass sr780_analyzer(visaInstrumentAsync):\n    \"\"\"\n    This controls a 2 channel network analyzer\n    It currently only handles the FFT measurement group (not octave or swept sine).\n    Markers are not handled. Only sine sources are handled.\n    Useful devices:\n        fetch, readval\n        dump\n        current_display\n        current_channel\n        freq_start, freq_stop, freq_center, freq_span\n        window_type\n        average_en\n        average_type\n        average_mode\n        average_count_requested\n        async_wait (needed for exponential average, not for linear)\n    Useful methods:\n        start\n        get_xscale\n    Changing a setup should be done in the following order\n        meas_grp\n        meas\n        meas_view\n        unit\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super(sr780_analyzer, self).__init__(*args, **kwargs)\n        # The parant __init__ overrides our selection of 'wait' mode\n        # in _async_detect_setup(reset=True) in init. So lets set it back\n        self._async_mode = 'wait'\n    def init(self, full=False):\n        # This empties the instrument buffers\n        self._dev_clear()\n        # This clears the error state, and status/event flags\n        self.clear()\n        if full:\n            self._async_sre_flag = 2\n            self.write('DSPE 0;*sre 2') # Display flags\n            self._async_detect_setup(reset=True)\n            #self._async_tocheck = 0\n            #self._async_use_delay = False\n            self.visa.write_termination = '\\n'\n            #self.visa.term_chars='\\n'\n            # The above turned on detection of termchar on read. This is not good for\n            # raw reads so turn it off.\n            # visa.vpp43.set_attribute(self.visa.vi, visa.VI_ATTR_TERMCHAR_EN, visa.VI_FALSE)\n            self.write('OUTX 0') # Force interface to be on GPIB, in case it is not anymore (problem with dump function)\n    def _async_select(self, devs=[]):\n        # This is called during init of async mode.\n        self._async_detect_setup(reset=True)\n        for dev, kwarg in devs:\n            if dev in [self.fetch, self.readval]:\n                disp = kwarg.get('disp', None)\n                self._async_detect_setup(disp=disp)\n    def _async_detect_setup(self, disp=None, reset=False):\n        if reset:\n            # make the default async_mode is 'wait' so that if\n            # _async_tocheck == 0, we just turn on wait.\n            # This could happen when using run_and_wait before anything is set\n            # Otherwise, getasync and readval both call async_select to setup\n            # the mode properly (_async_mode and_async_tocheck).\n            self._async_tocheck = 0\n            self._async_mode = 'wait'\n            return\n        self._async_mode = 'srq'\n        disp_org = self.current_display.getcache()\n        if disp==None:\n            disp = disp_org\n        self.current_display.set(disp)\n        # 0x2=A-linear avg, 0x4=A-settled, 0x200=B-linear, 0x400=B-settled\n        if self.average_en.get(disp=disp):\n            if self.average_type.get() in ['linear', 'FixedLength']:\n                tocheck = 0x2\n            else:\n                self._async_mode = 'wait+srq'\n                tocheck = 0x4\n        else:\n            tocheck = 0x4\n        if disp == 'B':\n            tocheck <<= 8\n        self._async_tocheck |= tocheck\n        self.current_display.set(disp_org)\n    def _async_trigger_helper(self):\n        # We are setup so that run_and_wait resuses the last config which starts\n        # with a simple wait (could be invalid now if averaging is changed on the instrument).\n        # Should not be a big deal since that is not a normal use of it.\n        self._cum_display_status = 0\n        self.write('PAUS') # make sure we are not scanning anymore.\n        self.get_display_status() # reset the display status flags\n        self.write('DSPE %i'%self._async_tocheck)\n        self.write('STRT')\n    def _get_esr(self):\n        # This disables the get_esr in the async routines.\n        return 0\n    @locked_calling\n    def start(self):\n        \"\"\"\n        Same as pressing Start/Reset button.\n        \"\"\"\n        self._async_trigger_helper()\n    def _async_detect(self, max_time=.5): # 0.5 s max by default\n        ret = super(sr780_analyzer, self)._async_detect(max_time)\n        if self._async_mode == 'wait':\n            # pure wait\n            return ret\n        if not ret:\n            # Did not receive SRQ or wait long enough\n            return False\n        # Received SRQ, check if we are done\n        disp_st = self.get_display_status()\n        self._cum_display_status |= disp_st\n        tocheck = self._async_tocheck\n        #print 'tocheck %0x %0x %0x'%(tocheck, self._cum_display_status, disp_st)\n        if self._cum_display_status&tocheck == tocheck:\n            self.write('DSPE 0')\n            self._cum_display_status = 0\n            return True # We are done!\n        return False\n    def _fetch_getformat(self, **kwarg):\n        xaxis = kwarg.get('xaxis', True)\n        if xaxis:\n            multi = ('freq', 'data')\n        else:\n            multi = True\n        fmt = self.fetch._format\n        fmt.update(multi=multi, graph=[], xaxis=xaxis)\n        return BaseDevice.getformat(self.fetch, **kwarg)\n    def _fetch_getdev(self, disp=None, xaxis=True):\n        \"\"\"\n        Optional parameter: disp and xaxis\n         -disp:  To select which display to read.\n         -xaxis: when True(default), the first column of data is the xaxis\n        For faster transfer, make the view and unit the same type (both linear or both log)\n        It is STRONGLY recommended to use linear averaging.\n        For exponential averaging you need to specify a wait time with async_wait\n         i.e. set(srnet.async_wait,3)  # for 3 seconds\n        \"\"\"\n        # The instrument has 5 Traces that can be used for memory.\n        # There is REFY? d,j to obtain pint j (0..length-1) in ref curve of display d\n        #  DSPN? d to obtain lenght of data set\n        if disp != None:\n            self.current_display.set(disp)\n        disp = self.current_display.getcache()\n        disp = self.current_display._tostr(disp)\n        # DSPY returns ascii but is slower than DSPB (binary)\n        # TODO implement handling of nyquist and nichols plot which return 2 values per datapoint.\n        # TODO handle waterfalls: dswb\n        data = self.ask('DSPB? %s'%disp, raw=True)\n        ret = np.fromstring(data, np.float32)\n        if xaxis:\n            ret = ret = np.asarray([self.get_xscale(), ret])\n        return ret\n    def _current_config(self, dev_obj=None, options={}):\n        if options.has_key('disp'):\n            self.current_display.set(options['disp'])\n        want_ch = 1\n        meas = self.meas.getcache()\n        # This does not handle Coherence, CrossSpectrum F2/F1 ...\n        if meas[-1] == '2' and meas[-4:-1] != 'ser':\n            want_ch = 2\n        orig_ch = self.current_channel.getcache()\n        if want_ch != orig_ch:\n            self.current_channel.set(want_ch)\n        conf = self._conf_helper('current_display', 'current_channel',\n                                 'input_source', 'input_mode', 'input_grounding', 'input_coupling',\n                                 'input_range_dBV', 'input_autorange_en', 'input_autorange_mode', 'input_antialiasing_en',\n                                 'input_aweight_en', 'input_auto_offset_en', 'input_eng_unit_en', 'input_eng_label',\n                                 'input_eng_unit_scale', 'input_eng_unit_user',\n                                 'freq_start', 'freq_stop', 'freq_resolution', 'freq_baseline', 'window_type',\n                                 'meas_group', 'meas', 'meas_view',\n                                 'meas_unit', 'dBm_ref', 'disp_PSD_en', 'disp_transducer_unit_mode',\n                                 'disp_live_en',\n                                 'average_en', 'average_mode', 'average_type', 'average_count_requested',\n                                 'average_increment_pct', 'average_overload_reject_en', 'average_preview_type',\n                                 'source_en', 'source_type', 'source_freq1', 'source_ampl1_V',\n                                 'source_offset_V', 'source_freq2', 'source_ampl2_V', 'async_wait',\n                                 options)\n        if want_ch != orig_ch:\n            self.current_channel.set(orig_ch)\n        return conf\n    def _create_devs(self):\n        display_sel = ChoiceIndex(['A', 'B']) # also both=2\n        self.current_display = MemoryDevice('A', choices=display_sel)\n        self.current_channel = MemoryDevice(1, choices=[1, 2])\n        self.freq_baseline = scpiDevice('FBAS 2,{val}', 'FBAS? 0', choices=ChoiceIndex([100e3, 102.4e3]))\n        self.dBm_ref = scpiDevice('DBMR 2,{val}', 'DBMR? 2', str_type=float, min=0)\n        self.source_en = scpiDevice('SRCO', str_type=bool)\n        self.source_type = scpiDevice('STYP', choices=ChoiceIndex(['Sine', 'Chirp', 'Noise', 'Arbitrary']))\n        self.source_freq1 = scpiDevice('S1FR', str_type=float)\n        self.source_ampl1_V = scpiDevice('S1AM', str_type=float)\n        self.source_offset_V = scpiDevice('SOFF', str_type=float)\n        self.source_freq2 = scpiDevice('S2FR', str_type=float)\n        self.source_ampl2_V = scpiDevice('S2AM', str_type=float)\n        self.input_source = scpiDevice('ISRC', choices=ChoiceIndex(['Analog', 'Capture']))\n        def devChOption(*arg, **kwarg):\n            options = kwarg.pop('options', {}).copy()\n            options.update(ch=self.current_channel)\n            app = kwarg.pop('options_apply', ['ch'])\n            kwarg.update(options=options, options_apply=app)\n            return scpiDevice(*arg, **kwarg)\n        self.input_mode = devChOption('I{ch}MD', choices=ChoiceIndex(['Analog', 'Capture']))\n        self.input_grounding = devChOption('I{ch}GD', choices=ChoiceIndex(['Float', 'Ground']))\n        self.input_coupling = devChOption('I{ch}GD', choices=ChoiceIndex(['DC', 'AC', 'ICP']))\n        self.input_range_dBV = devChOption('I{ch}RG', str_type=int, choices=range(-50, 36, 2))\n        self.input_autorange_en = devChOption('A{ch}RG', str_type=bool)\n        self.input_autorange_mode = devChOption('I{ch}AR', choices=ChoiceIndex(['Normal', 'Tracking']))\n        self.input_antialiasing_en = devChOption('I{ch}AF', str_type=bool)\n        self.input_aweight_en = devChOption('I{ch}AW', str_type=bool)\n        self.input_auto_offset_en = scpiDevice('IAOM', str_type=bool)\n        self.input_eng_unit_en = devChOption('EU{ch}M', str_type=bool)\n        self.input_eng_label = devChOption('EU{ch}L', str_type=ChoiceIndex(['m/s2', 'm/s', 'm', 'in/s2', 'in/s', 'in', 'mil', 'g', 'kg', 'lbs', 'N', 'dyne', 'Pas', 'bar', 'USER']))\n        self.input_eng_unit_scale = devChOption('EU{ch}V', str_type=float, doc='number of eng.unit/Volt')\n        self.input_eng_unit_user = devChOption('EU{ch}U', str_type=str)\n        def devDispOption(*arg, **kwarg):\n            options = kwarg.pop('options', {}).copy()\n            options.update(disp=self.current_display)\n            app = kwarg.pop('options_apply', ['disp'])\n            kwarg.update(options=options, options_apply=app)\n            return scpiDevice(*arg, **kwarg)\n        self.freq_span = devDispOption('FSPN {disp},{val}', 'FSPN? {disp}', str_type=float, setget=True)\n        self.freq_start = devDispOption('FSTR {disp},{val}', 'FSTR? {disp}', str_type=float, setget=True, min=0, max=102.4e3)\n        self.freq_stop = devDispOption('FEND {disp},{val}', 'FEND? {disp}', str_type=float, setget=True, min=0, max=102.4e3)\n        self.freq_center = devDispOption('FCTR {disp},{val}', 'FCTR? {disp}', str_type=float, setget=True, min=0, max=102.4e3)\n        resol_sel = ChoiceIndex([100, 200, 400, 800])\n        self.freq_resolution = devDispOption('FLIN {disp},{val}', 'FLIN? {disp}', choices=resol_sel)\n        mgrp_sel = ChoiceIndex(['FFT', 'Octave', 'Swept Sine'])\n        self.meas_group = devDispOption('MGRP {disp},{val}', 'MGRP? {disp}', choices=mgrp_sel)\n        meas_sel = ChoiceIndex(['FFT1', 'FFT2', 'Time1', 'Time2', 'WindowedTime1', 'WindowedTime2',\n                                'Orbit', 'Coherence', 'CrossSpectrum', '<F2/F1>', '<F2>/<F1>',\n                                'AutoCorr1', 'AutoCorr2', 'CaptureBuffer1', 'CaptureBuffer2',\n                                'FFTuser1', 'FFTuser2', 'FFTuser3', 'FFTuser4', 'FFTuser5',\n                                'Octave1', 'Octave2', 'OctaveCapBuff1', 'OctaveCapBuff2',\n                                'OctaveUser1', 'OctaveUser2', 'OctaveUser3', 'OctaveUser4', 'OctaveUser5',\n                                'SweptSpectrum1', 'SweptSpectrum2', 'SweptCross', 'SweptTransferFunction',\n                                'SweptUser1', 'SweptUser2', 'SweptUser3', 'SweptUser4', 'SweptUser5'])\n        self.meas = devDispOption('MEAS {disp},{val}', 'MEAS? {disp}', choices=meas_sel)\n        view_sel = ChoiceIndex(['LogMag', 'LinMag', 'MagSquared', 'Real', 'Imag', 'Phase', 'UnWrapPhase', 'Nyquist', 'Nichols'])\n        self.meas_view = devDispOption('VIEW {disp},{val}', 'VIEW? {disp}', choices=view_sel)\n        unit_sel = ChoiceIndex(['Vpk', 'Vrms', 'Vpk2', 'Vrms2', 'dBVpk', 'dBVrms', 'dBm', 'dBspl', 'deg', 'rad', 'Units', 'dB'])\n        self.meas_unit = devDispOption('UNIT {disp},{val}', 'UNIT? {disp}', choices=unit_sel)\n        self.disp_live_en = devDispOption('DISP {disp},{val}', 'DISP? {disp}', str_type=bool)\n        self.disp_log_xscale = devDispOption('XAXS {disp},{val}', 'XAXS? {disp}', str_type=bool)\n        self.disp_PSD_en = devDispOption('PSDU {disp},{val}', 'PSDU? {disp}', str_type=bool, doc='Wether PSD (power spectral density) is enabled.')\n        self.disp_transducer_unit_mode = devDispOption('TDRC {disp},{val}', 'TDRC? {disp}', choices=ChoiceIndex(['acceleration', 'velocity', 'displacement']))\n        self.average_en = devDispOption('FAVG {disp},{val}', 'FAVG? {disp}', str_type=bool)\n        self.average_mode = devDispOption('FAVM {disp},{val}', 'FAVM? {disp}', choices=ChoiceIndex(['vector', 'RMS', 'PeakHold']))\n        self.average_type = devDispOption('FAVT {disp},{val}', 'FAVT? {disp}', choices=ChoiceIndex(['linear', 'exponential', 'FixedLength', 'continuous']))\n        self.average_count_requested = devDispOption('FAVN {disp},{val}', 'FAVN? {disp}', str_type=int, min=2, max=32767)\n        self.average_count = devDispOption(getstr='NAVG? {disp}', str_type=int)\n        self.average_increment_pct = devDispOption('FOVL {disp},{val}', 'FOVL? {disp}', str_type=float, min=0, max=300)\n        self.average_overload_reject_en = scpiDevice('FREJ 2,{val}', 'FREJ? 0', str_type=bool)\n        self.average_preview_type = devDispOption('PAVO {disp},{val}', 'PAVO? {disp}', choices=ChoiceIndex(['off', 'manual', 'timed']))\n        self.window_type = devDispOption('FWIN {disp},{val}', 'FWIN? {disp}', choices=ChoiceIndex(['uniform', 'hanning', 'flattop', 'BMH', 'kaiser', 'force', 'exponential', 'user', '-T/2..T/2', '0..T/2', '-T/4..T/4',]))\n        self._devwrap('fetch', autoinit=False, trig=True)\n        self.readval = ReadvalDev(self.fetch)\n        self._devwrap('dump', autoinit=False)\n        # This needs to be last to complete creation\n        super(type(self),self)._create_devs()\n    @locked_calling\n    def get_xscale(self):\n        # only works for fft\n        start = self.freq_start.getcache()\n        stop = self.freq_stop.getcache()\n        npoints = self.freq_resolution.getcache() + 1 # could also use DSPN? d\n        return np.linspace(start, stop, npoints)\n    def _dump_getformat(self, ps=True, **kwarg):\n        fmt = self.dump._format\n        if ps:\n            binfmt = '.ps'\n        else:\n            binfmt = '.gif'\n        fmt.update(bin=binfmt)\n        return BaseDevice.getformat(self.dump, **kwarg)\n    def _dump_getdev(self, ps=True, area='all'):\n        \"\"\"\n        options are ps, area\n         -ps: when True (default) returns a postscript object, otherwise returns a GIF file\n         -area: used for GIF files, one of 'graph', 'menu', 'status' or 'all'(default)\n        \"\"\"\n        # Reading data is tricky because the instrument does not send\n        # EOI on its last byte so we either need to detect the ending comment\n        # of the postscript or wait for the first timeout to occur for\n        # the bitmap.\n        # Also when the remote output is set to GPIB we do no receive the last byte.\n        # So we need to switch the output to RS232 first.\n        area_sel = dict(graph=0, menu=1, status=2, all=3)\n        # POUT sets hardware print key to bitmap or vector\n        # PDST 3 selects GPIB\n        # PCIC 0 selects host controller\n        # PLTP selects postscript\n        # PRTP selects GIF\n        r=''\n        old_to = self.set_timeout\n        self.set_timeout=.5 # useful for bitmap mode since we need to wait for timeout\n        self.write('OUTX 1') # Go to RS232 interface\n        if ps:\n            self.write('POUT 1;PDST 3;PCIC 0;PLTP 1;PLOT')\n            while r[-11:] != '%%Trailer\\r\\n':\n                r += self.visa.read_raw_n(1)\n        else:\n            self.write('POUT 0;PDST 3;PCIC 0;PRTP 4;PSCR %d;PRNT'%area_sel[area])\n            try:\n                while True:\n                    r += self.visa.read_raw_n(1)\n            except visa_wrap.VisaIOError:\n                pass\n        self.write('OUTX 0') # return to gpib interface\n        self.set_timeout = old_to\n        return r\n    # serial poll status word: 0=INSTrument, 1=DISPlay, 2=INPuT, 3=ERRor, 4=output buffer empty\n    #                          5=standard status word, 6=SRQ, 7=IFC (no command execution in progress)\n    def get_instrument_status(self):\n        \"\"\"\n         returns a byte of bit flags\n          bit 0 (1):   A measurement has been triggered\n          bit 1 (2):   Disk operation complete\n          bit 2 (4):   Hardcopy output complete\n          bit 3 (8):   unused\n          bit 4 (16):  Capture buffer filled\n          bit 5 (32):  Measurement has been paused\n          bit 6 (64):  Measurement has been started\n          bit 7 (128): Single shot capture playback has finished\n          bit 8 (256): Measurement stopped to wait for average preview\n          bit 9-15: unused\n        \"\"\"\n        # can access bits with inst? 1\n        # can enable in status register with INSE\n        return int(self.ask('INST?'))\n    def get_display_status(self):\n        \"\"\"\n         returns a byte of bit flags\n          bit 0 (1):    displayA has new data\n          bit 1 (2):    displayA linear average complete\n          bit 2 (4):    displayA new settled data available\n          bit 3 (8):    displayA failed a limit test\n          bit 4 (16):   displayA swept sine has failed\n          bit 5 (32):   displayA 1-shot waterfall has finished\n          bit 6-7:      unused\n          bit 8 (256):  displayB has new data\n          bit 9 (512):  displayB linear average complete\n          bit 10 (1024):displayB new settled data available\n          bit 11 (2048):displayB failed a limit test\n          bit 12 (4096):displayB swept sine has failed\n          bit 13 (8192):displayB 1-shot waterfall has finished\n          bit 14-15:    unused\n         except for waterfall always test for new data (bit 0/8) for\n         the correct display first.\n        \"\"\"\n        # can access bits with inst? 1\n        # can enable in status register with DSPE\n        return int(self.ask('DSPS?'))\n    def get_input_status(self):\n        \"\"\"\n         returns a byte of bit flags\n          bit 0 (1):    input1 has fallend below half of full scale\n          bit 1 (2):    input1 has exceeded half of full scale\n          bit 2 (4):    input1 has exceeded full scale\n          bit 3 (8):    input1 has exceeded 35 dBV, range switched to 34 dBV\n          bit 4 (16):   input1 has autoranged\n          bit 5-7:      unused\n          bit 8 (256):  input2 has fallend below half of full scale\n          bit 9 (512):  input2 has exceeded half of full scale\n          bit 10 (1024):input2 has exceeded full scale\n          bit 11 (2048):input2 has exceeded 35 dBV, range switched to 34 dBV\n          bit 12 (4096):input2 has autoranged\n          bit 13-15:    unused\n        \"\"\"\n        # can access bits with inst? 1\n        # can enable in status register with INPE\n        # also see INPC? 0 (ch1) or INPC? 1 (ch2)\n        # which returns instanteneous a value 0-3 where:\n        #   0=input under half full scale\n        #   1=input over half full scale\n        #   2=input overloaded\n        #   3=input is HighV\n        return int(self.ask('INPS?'))\n    @locked_calling\n    def get_error(self):\n        \"\"\"\n         returns two byte of bit flags\n         first:\n          bit 0-1:     unused\n          bit 2 (4):   Too many responses are pending\n          bit 3 (8):   too many commands received\n          bit 4 (16):  command cannot execute successfully\n          bit 5 (32):  command syntax error\n          bit 6 (64):  key press or knob rotated\n          bit 7 (128): power is turned on\n          bit 8-15:    unused\n         second:\n          bit 0 (1):   An output error as occured (print, plot, dump)\n          bit 1 (2):   disk errro\n          bit 2 (4):   math error\n          bit 3 (8):   RAM memory test fails\n          bit 4 (16):  ROM memory test fails\n          bit 5 (32):  Video memory test fails\n          bit 6 (64):  Help memory test fails\n          bit 7 (128): DSP data memory fails\n          bit 8 (256): DSP program memory fails\n          bit 9 (512): DSP DRAM memory fails\n          bit 10 (1024): DSP calibration memory fails\n          bit 11 (2048): Ch1 calibration memory fails\n          bit 12 (4096): Ch2 calibration memory fails\n          bit 13-15: unused\n        \"\"\"\n        # can access bits with errs? 1\n        # can enable in status register with ERRE\n        # enable *ese with *ese\n        return int(self.ask('*esr?')),int(self.ask('ERRS?'))\n#######################################################\n##    Lakeshore 325 Temperature controller\n#######################################################\n#@register_instrument('LSCI', 'MODEL325', '1.7/1.1')\n@register_instrument('LSCI', 'MODEL325')\nclass lakeshore_325(visaInstrument):\n    \"\"\"\n       Temperature controller\n       Useful device:\n           sa\n           sb\n           ta\n           tb\n           status_a\n           status_b\n           fetch\n       s? and t? return the sensor or kelvin value of a certain channel\n       status_? returns the status of the channel\n       fetch allows to read all channels\n    \"\"\"\n    def _fetch_helper(self, ch=None):\n        if ch == None:\n            ch = self.enabled_list.getcache()\n        if not isinstance(ch, (list, ChoiceBase)):\n            ch = [ch]\n        return ch\n    def _fetch_getformat(self, **kwarg):\n        ch = kwarg.get('ch', None)\n        ch = self._fetch_helper(ch)\n        multi = []\n        graph = []\n        for i, c in enumerate(ch):\n            graph.append(2*i)\n            multi.extend([c+'_T', c+'_S'])\n        fmt = self.fetch._format\n        fmt.update(multi=multi, graph=graph)\n        return BaseDevice.getformat(self.fetch, **kwarg)\n    def _fetch_getdev(self, ch=None):\n        ch = self._fetch_helper(ch)\n        ret = []\n        for c in ch:\n            if c == 'A':\n                ret.append(self.ta.get())\n                ret.append(self.sa.get())\n            elif c == 'B':\n                ret.append(self.tb.get())\n                ret.append(self.sb.get())\n            else:\n                raise ValueError(\"Invalid selection for ch. If it is None, check that enabled_list is a list with 'A' and/or 'B'\")\n        return ret\n    def _current_config(self, dev_obj=None, options={}):\n        return self._conf_helper('sp', options)\n    def _create_devs(self):\n        self.crdg = scpiDevice(getstr='CRDG? A', str_type=float)\n        self.enabled_list = MemoryDevice(['A', 'B'])\n        self.thermocouple = scpiDevice(getstr='TEMP?', str_type=float)\n        self.ta = scpiDevice(getstr='KRDG? A', str_type=float) #in Kelvin\n        self.tb = scpiDevice(getstr='KRDG? B', str_type=float) #in Kelvin\n        self.sa = scpiDevice(getstr='SRDG? A', str_type=float) #in sensor unit: Ohm, V or mV\n        self.sb = scpiDevice(getstr='SRDG? B', str_type=float) #in sensor unit\n        self.status_a = scpiDevice(getstr='RDGST? A', str_type=int) #flags 1(0)=invalid, 16(4)=temp underrange,\n                               #32(5)=temp overrange, 64(6)=sensor under (<0), 128(7)=sensor overrange\n                               # 000 = valid\n        self.status_b = scpiDevice(getstr='RDGST? b', str_type=int)\n        self.htr = scpiDevice(getstr='HTR?', str_type=float) #heater out in %\n        self.sp = scpiDevice(setstr='SETP 1,', getstr='SETP? 1', str_type=float)\n        self._devwrap('fetch', autoinit=False)\n        self.alias = self.fetch\n        # This needs to be last to complete creation\n        super(type(self),self)._create_devs()\n#######################################################\n##    Lakeshore 340 Temperature controller\n#######################################################\nregister_idn_alias('Lake Shore Cryotronics', 'LSCI')\n#@register_instrument('LSCI', 'MODEL340', '061407')\n@register_instrument('LSCI', 'MODEL340')\nclass lakeshore_340(visaInstrument):\n    \"\"\"\n       Temperature controller used for He3 system\n       Useful device:\n           s\n           t\n           fetch\n           status_ch\n           current_ch\n       s and t return the sensor or kelvin value of a certain channel\n       which defaults to current_ch\n       status_ch returns the status of ch\n       fetch allows to read all channels\n    \"\"\"\n    def _current_config(self, dev_obj=None, options={}):\n", "answers": ["        if dev_obj == self.fetch:"], "length": 4119, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "8315f5f7696d567019104d0bca173bb58486f52c04ab7202"}
{"input": "", "context": "/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */\n/*\n  Part of the Processing project - http://processing.org\n  Copyright (c) 2004-10 Ben Fry and Casey Reas\n  Copyright (c) 2001-04 Massachusetts Institute of Technology\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software Foundation,\n  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\npackage processing.app;\nimport processing.app.debug.AvrdudeUploader;\nimport processing.app.debug.Compiler;\nimport processing.app.debug.RunnerException;\nimport processing.app.debug.Sizer;\nimport processing.app.debug.Uploader;\nimport processing.app.preproc.*;\nimport processing.core.*;\nimport static processing.app.I18n._;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.beans.*;\nimport java.io.*;\nimport java.util.*;\nimport java.util.List;\nimport java.util.zip.*;\nimport javax.swing.*;\nimport javax.swing.border.EmptyBorder;\nimport javax.swing.border.TitledBorder;\n/**\n * Stores information about files in the current sketch\n */\npublic class Sketch {\n  static private File tempBuildFolder;\n  private Editor editor;\n  /** main pde file for this sketch. */\n  private File primaryFile;\n  /**\n   * Name of sketch, which is the name of main file\n   * (without .pde or .java extension)\n   */\n  private String name;\n  /** true if any of the files have been modified. */\n  private boolean modified;\n  /** folder that contains this sketch */\n  private File folder;\n  /** data folder location for this sketch (may not exist yet) */\n  private File dataFolder;\n  /** code folder location for this sketch (may not exist yet) */\n  private File codeFolder;\n  private SketchCode current;\n  private int currentIndex;\n  /**\n   * Number of sketchCode objects (tabs) in the current sketch. Note that this\n   * will be the same as code.length, because the getCode() method returns\n   * just the code[] array, rather than a copy of it, or an array that's been\n   * resized to just the relevant files themselves.\n   * http://dev.processing.org/bugs/show_bug.cgi?id=940\n   */\n  private int codeCount;\n  private SketchCode[] code;\n  /** Class name for the PApplet, as determined by the preprocessor. */\n  private String appletClassName;\n  /** Class path determined during build. */\n  private String classPath;\n  /**\n   * This is *not* the \"Processing\" libraries path, this is the Java libraries\n   * path, as in java.library.path=BlahBlah, which identifies search paths for\n   * DLLs or JNILIBs.\n   */\n  private String libraryPath;\n  /**\n   * List of library folders. \n   */\n  private ArrayList<File> importedLibraries;\n  /**\n   * path is location of the main .pde file, because this is also\n   * simplest to use when opening the file from the finder/explorer.\n   */\n  public Sketch(Editor editor, String path) throws IOException {\n    this.editor = editor;\n    primaryFile = new File(path);\n    // get the name of the sketch by chopping .pde or .java\n    // off of the main file name\n    String mainFilename = primaryFile.getName();\n    int suffixLength = getDefaultExtension().length() + 1;\n    name = mainFilename.substring(0, mainFilename.length() - suffixLength);\n    // lib/build must exist when the application is started\n    // it is added to the CLASSPATH by default, but if it doesn't\n    // exist when the application is started, then java will remove\n    // the entry from the CLASSPATH, causing Runner to fail.\n    //\n    /*\n    tempBuildFolder = new File(TEMP_BUILD_PATH);\n    if (!tempBuildFolder.exists()) {\n      tempBuildFolder.mkdirs();\n      Base.showError(\"Required folder missing\",\n                        \"A required folder was missing from \\n\" +\n                        \"from your installation of Processing.\\n\" +\n                        \"It has now been replaced, please restart    \\n\" +\n                        \"the application to complete the repair.\", null);\n    }\n    */\n    tempBuildFolder = Base.getBuildFolder();\n    //Base.addBuildFolderToClassPath();\n    folder = new File(new File(path).getParent());\n    //System.out.println(\"sketch dir is \" + folder);\n    load();\n  }\n  /**\n   * Build the list of files.\n   * <P>\n   * Generally this is only done once, rather than\n   * each time a change is made, because otherwise it gets to be\n   * a nightmare to keep track of what files went where, because\n   * not all the data will be saved to disk.\n   * <P>\n   * This also gets called when the main sketch file is renamed,\n   * because the sketch has to be reloaded from a different folder.\n   * <P>\n   * Another exception is when an external editor is in use,\n   * in which case the load happens each time \"run\" is hit.\n   */\n  protected void load() {\n    codeFolder = new File(folder, \"code\");\n    dataFolder = new File(folder, \"data\");\n    // get list of files in the sketch folder\n    String list[] = folder.list();\n    // reset these because load() may be called after an\n    // external editor event. (fix for 0099)\n    codeCount = 0;\n    code = new SketchCode[list.length];\n    String[] extensions = getExtensions();\n    for (String filename : list) {\n      // Ignoring the dot prefix files is especially important to avoid files\n      // with the ._ prefix on Mac OS X. (You'll see this with Mac files on\n      // non-HFS drives, i.e. a thumb drive formatted FAT32.)\n      if (filename.startsWith(\".\")) continue;\n      // Don't let some wacko name a directory blah.pde or bling.java.\n      if (new File(folder, filename).isDirectory()) continue;\n      // figure out the name without any extension\n      String base = filename;\n      // now strip off the .pde and .java extensions\n      for (String extension : extensions) {\n        if (base.toLowerCase().endsWith(\".\" + extension)) {\n          base = base.substring(0, base.length() - (extension.length() + 1));\n          // Don't allow people to use files with invalid names, since on load,\n          // it would be otherwise possible to sneak in nasty filenames. [0116]\n          if (Sketch.isSanitaryName(base)) {\n            code[codeCount++] =\n              new SketchCode(new File(folder, filename), extension);\n          }\n        }\n      }\n    }\n    // Remove any code that wasn't proper\n    code = (SketchCode[]) PApplet.subset(code, 0, codeCount);\n    // move the main class to the first tab\n    // start at 1, if it's at zero, don't bother\n    for (int i = 1; i < codeCount; i++) {\n      //if (code[i].file.getName().equals(mainFilename)) {\n      if (code[i].getFile().equals(primaryFile)) {\n        SketchCode temp = code[0];\n        code[0] = code[i];\n        code[i] = temp;\n        break;\n      }\n    }\n    // sort the entries at the top\n    sortCode();\n    // set the main file to be the current tab\n    if (editor != null) {\n      setCurrentCode(0);\n    }\n  }\n  protected void replaceCode(SketchCode newCode) {\n    for (int i = 0; i < codeCount; i++) {\n      if (code[i].getFileName().equals(newCode.getFileName())) {\n        code[i] = newCode;\n        break;\n      }\n    }\n  }\n  protected void insertCode(SketchCode newCode) {\n    // make sure the user didn't hide the sketch folder\n    ensureExistence();\n    // add file to the code/codeCount list, resort the list\n    //if (codeCount == code.length) {\n      code = (SketchCode[]) PApplet.append(code, newCode);\n    codeCount++;\n    //}\n    //code[codeCount++] = newCode;\n    }\n  protected void sortCode() {\n    // cheap-ass sort of the rest of the files\n    // it's a dumb, slow sort, but there shouldn't be more than ~5 files\n    for (int i = 1; i < codeCount; i++) {\n      int who = i;\n      for (int j = i + 1; j < codeCount; j++) {\n        if (code[j].getFileName().compareTo(code[who].getFileName()) < 0) {\n          who = j;  // this guy is earlier in the alphabet\n        }\n      }\n      if (who != i) {  // swap with someone if changes made\n        SketchCode temp = code[who];\n        code[who] = code[i];\n        code[i] = temp;\n      }\n    }\n  }\n  boolean renamingCode;\n  /**\n   * Handler for the New Code menu option.\n   */\n  public void handleNewCode() {\n    // make sure the user didn't hide the sketch folder\n    ensureExistence();\n    // if read-only, give an error\n    if (isReadOnly()) {\n      // if the files are read-only, need to first do a \"save as\".\n      Base.showMessage(_(\"Sketch is Read-Only\"),\n                       _(\"Some files are marked \\\"read-only\\\", so you'll\\n\" +\n                         \"need to re-save the sketch in another location,\\n\" +\n                         \"and try again.\"));\n      return;\n    }\n    renamingCode = false;\n    editor.status.edit(_(\"Name for new file:\"), \"\");\n  }\n  /**\n   * Handler for the Rename Code menu option.\n   */\n  public void handleRenameCode() {\n    // make sure the user didn't hide the sketch folder\n    ensureExistence();\n    if (currentIndex == 0 && editor.untitled) {\n      Base.showMessage(_(\"Sketch is Untitled\"),\n                       _(\"How about saving the sketch first \\n\" +\n                         \"before trying to rename it?\"));\n      return;\n    }\n    // if read-only, give an error\n    if (isReadOnly()) {\n      // if the files are read-only, need to first do a \"save as\".\n      Base.showMessage(_(\"Sketch is Read-Only\"),\n                       _(\"Some files are marked \\\"read-only\\\", so you'll\\n\" +\n                         \"need to re-save the sketch in another location,\\n\" +\n                         \"and try again.\"));\n      return;\n    }\n    // ask for new name of file (internal to window)\n    // TODO maybe just popup a text area?\n    renamingCode = true;\n    String prompt = (currentIndex == 0) ?\n      \"New name for sketch:\" : \"New name for file:\";\n    String oldName = (current.isExtension(\"ino\")) ?\n      current.getPrettyName() : current.getFileName();\n    editor.status.edit(prompt, oldName);\n  }\n  /**\n   * This is called upon return from entering a new file name.\n   * (that is, from either newCode or renameCode after the prompt)\n   * This code is almost identical for both the newCode and renameCode\n   * cases, so they're kept merged except for right in the middle\n   * where they diverge.\n   */\n  protected void nameCode(String newName) {\n    // make sure the user didn't hide the sketch folder\n    ensureExistence();\n    // Add the extension here, this simplifies some of the logic below.\n    if (newName.indexOf('.') == -1) {\n      newName += \".\" + getDefaultExtension();\n    }\n    // if renaming to the same thing as before, just ignore.\n    // also ignoring case here, because i don't want to write\n    // a bunch of special stuff for each platform\n    // (osx is case insensitive but preserving, windows insensitive,\n    // *nix is sensitive and preserving.. argh)\n    if (renamingCode) {\n      if (newName.equalsIgnoreCase(current.getFileName())) {\n        // exit quietly for the 'rename' case.\n        // if it's a 'new' then an error will occur down below\n        return;\n      }\n    }\n    newName = newName.trim();\n    if (newName.equals(\"\")) return;\n    int dot = newName.indexOf('.');\n    if (dot == 0) {\n      Base.showWarning(_(\"Problem with rename\"),\n                       _(\"The name cannot start with a period.\"), null);\n      return;\n    }\n    String newExtension = newName.substring(dot+1).toLowerCase();\n    if (!validExtension(newExtension)) {\n      Base.showWarning(_(\"Problem with rename\"),\n                       I18n.format(\n\t\t\t _(\"\\\".{0}\\\" is not a valid extension.\"), newExtension\n\t\t       ), null);\n      return;\n    }\n    // Don't let the user create the main tab as a .java file instead of .pde\n    if (!isDefaultExtension(newExtension)) {\n      if (renamingCode) {  // If creating a new tab, don't show this error\n        if (current == code[0]) {  // If this is the main tab, disallow\n          Base.showWarning(_(\"Problem with rename\"),\n                           _(\"The main file can't use an extension.\\n\" +\n                             \"(It may be time for your to graduate to a\\n\" +\n                             \"\\\"real\\\" programming environment)\"), null);\n          return;\n        }\n      }\n    }\n    // dots are allowed for the .pde and .java, but not in the name\n    // make sure the user didn't name things poo.time.pde\n    // or something like that (nothing against poo time)\n    String shortName = newName.substring(0, dot);\n    String sanitaryName = Sketch.sanitizeName(shortName);\n    if (!shortName.equals(sanitaryName)) {\n      newName = sanitaryName + \".\" + newExtension;\n    }\n    // In Arduino, we want to allow files with the same name but different\n    // extensions, so compare the full names (including extensions).  This\n    // might cause problems: http://dev.processing.org/bugs/show_bug.cgi?id=543\n    for (SketchCode c : code) {\n      if (newName.equalsIgnoreCase(c.getFileName())) {\n        Base.showMessage(_(\"Nope\"),\n                         I18n.format(\n\t\t\t   _(\"A file named \\\"{0}\\\" already exists in \\\"{1}\\\"\"),\n\t\t\t   c.getFileName(),\n\t\t\t   folder.getAbsolutePath()\n\t\t\t ));\n        return;\n      }\n    }\n    \n    // In Arduino, don't allow a .cpp file with the same name as the sketch,\n    // because the sketch is concatenated into a file with that name as part\n    // of the build process.  \n    if (newName.equals(getName() + \".cpp\")) {\n      Base.showMessage(_(\"Nope\"),\n                       _(\"You can't have a .cpp file with the same name as the sketch.\"));\n      return;\n    }\n    \n    if (renamingCode && currentIndex == 0) {\n      for (int i = 1; i < codeCount; i++) {\n        if (sanitaryName.equalsIgnoreCase(code[i].getPrettyName()) &&\n          code[i].getExtension().equalsIgnoreCase(\"cpp\")) {\n          Base.showMessage(_(\"Nope\"),\n                           I18n.format(\n\t\t\t     _(\"You can't rename the sketch to \\\"{0}\\\"\\n\" +\n\t\t\t       \"because the sketch already has a .cpp file with that name.\"),\n\t\t\t     sanitaryName\n\t\t\t   ));\n          return;\n        }\n      }\n    }\n    File newFile = new File(folder, newName);\n//    if (newFile.exists()) {  // yay! users will try anything\n//      Base.showMessage(\"Nope\",\n//                       \"A file named \\\"\" + newFile + \"\\\" already exists\\n\" +\n//                       \"in \\\"\" + folder.getAbsolutePath() + \"\\\"\");\n//      return;\n//    }\n//    File newFileHidden = new File(folder, newName + \".x\");\n//    if (newFileHidden.exists()) {\n//      // don't let them get away with it if they try to create something\n//      // with the same name as something hidden\n//      Base.showMessage(\"No Way\",\n//                       \"A hidden tab with the same name already exists.\\n\" +\n//                       \"Use \\\"Unhide\\\" to bring it back.\");\n//      return;\n//    }\n    if (renamingCode) {\n      if (currentIndex == 0) {\n        // get the new folder name/location\n        String folderName = newName.substring(0, newName.indexOf('.'));\n        File newFolder = new File(folder.getParentFile(), folderName);\n        if (newFolder.exists()) {\n          Base.showWarning(_(\"Cannot Rename\"),\n                           I18n.format(\n\t\t\t     _(\"Sorry, a sketch (or folder) named \" +\n                               \"\\\"{0}\\\" already exists.\"),\n\t\t\t     newName\n\t\t\t   ), null);\n          return;\n        }\n        // unfortunately this can't be a \"save as\" because that\n        // only copies the sketch files and the data folder\n        // however this *will* first save the sketch, then rename\n        // first get the contents of the editor text area\n        if (current.isModified()) {\n          current.setProgram(editor.getText());\n          try {\n            // save this new SketchCode\n            current.save();\n          } catch (Exception e) {\n            Base.showWarning(_(\"Error\"), _(\"Could not rename the sketch. (0)\"), e);\n            return;\n          }\n        }\n        if (!current.renameTo(newFile, newExtension)) {\n          Base.showWarning(_(\"Error\"),\n                           I18n.format(\n\t\t\t     _(\"Could not rename \\\"{0}\\\" to \\\"{1}\\\"\"),\n\t\t\t     current.getFileName(),\n\t\t\t     newFile.getName()\n\t\t\t   ), null);\n          return;\n        }\n        // save each of the other tabs because this is gonna be re-opened\n        try {\n          for (int i = 1; i < codeCount; i++) {\n            code[i].save();\n          }\n        } catch (Exception e) {\n          Base.showWarning(_(\"Error\"), _(\"Could not rename the sketch. (1)\"), e);\n          return;\n        }\n        // now rename the sketch folder and re-open\n        boolean success = folder.renameTo(newFolder);\n        if (!success) {\n          Base.showWarning(_(\"Error\"), _(\"Could not rename the sketch. (2)\"), null);\n          return;\n        }\n        // if successful, set base properties for the sketch\n        File newMainFile = new File(newFolder, newName + \".ino\");\n        String newMainFilePath = newMainFile.getAbsolutePath();\n        // having saved everything and renamed the folder and the main .pde,\n        // use the editor to re-open the sketch to re-init state\n        // (unfortunately this will kill positions for carets etc)\n        editor.handleOpenUnchecked(newMainFilePath,\n                                   currentIndex,\n                                   editor.getSelectionStart(),\n                                   editor.getSelectionStop(),\n                                   editor.getScrollPosition());\n        // get the changes into the sketchbook menu\n        // (re-enabled in 0115 to fix bug #332)\n        editor.base.rebuildSketchbookMenus();\n      } else {  // else if something besides code[0]\n        if (!current.renameTo(newFile, newExtension)) {\n          Base.showWarning(_(\"Error\"),\n                           I18n.format(\n\t\t\t     _(\"Could not rename \\\"{0}\\\" to \\\"{1}\\\"\"),\n\t\t\t     current.getFileName(),\n\t\t\t     newFile.getName()\n\t\t\t   ), null);\n          return;\n        }\n      }\n    } else {  // creating a new file\n      try {\n        if (!newFile.createNewFile()) {\n          // Already checking for IOException, so make our own.\n          throw new IOException(_(\"createNewFile() returned false\"));\n        }\n      } catch (IOException e) {\n        Base.showWarning(_(\"Error\"),\n\t\t\t I18n.format(\n                           \"Could not create the file \\\"{0}\\\" in \\\"{1}\\\"\",\n\t\t\t   newFile,\n\t\t\t   folder.getAbsolutePath()\n\t\t\t ), e);\n        return;\n      }\n      SketchCode newCode = new SketchCode(newFile, newExtension);\n      //System.out.println(\"new code is named \" + newCode.getPrettyName() + \" \" + newCode.getFile());\n      insertCode(newCode);\n    }\n    // sort the entries\n    sortCode();\n    // set the new guy as current\n    setCurrentCode(newName);\n    // update the tabs\n    editor.header.rebuild();\n  }\n  /**\n   * Remove a piece of code from the sketch and from the disk.\n   */\n  public void handleDeleteCode() {\n    // make sure the user didn't hide the sketch folder\n    ensureExistence();\n    // if read-only, give an error\n    if (isReadOnly()) {\n      // if the files are read-only, need to first do a \"save as\".\n      Base.showMessage(_(\"Sketch is Read-Only\"),\n                       _(\"Some files are marked \\\"read-only\\\", so you'll\\n\" +\n                       \"need to re-save the sketch in another location,\\n\" +\n                       \"and try again.\"));\n      return;\n    }\n    // confirm deletion with user, yes/no\n    Object[] options = { _(\"OK\"), _(\"Cancel\") };\n    String prompt = (currentIndex == 0) ?\n      _(\"Are you sure you want to delete this sketch?\") :\n      I18n.format(_(\"Are you sure you want to delete \\\"{0}\\\"?\"), current.getPrettyName());\n    int result = JOptionPane.showOptionDialog(editor,\n                                              prompt,\n                                              _(\"Delete\"),\n                                              JOptionPane.YES_NO_OPTION,\n                                              JOptionPane.QUESTION_MESSAGE,\n                                              null,\n                                              options,\n                                              options[0]);\n    if (result == JOptionPane.YES_OPTION) {\n      if (currentIndex == 0) {\n        // need to unset all the modified flags, otherwise tries\n        // to do a save on the handleNew()\n        // delete the entire sketch\n        Base.removeDir(folder);\n        // get the changes into the sketchbook menu\n        //sketchbook.rebuildMenus();\n        // make a new sketch, and i think this will rebuild the sketch menu\n        //editor.handleNewUnchecked();\n        //editor.handleClose2();\n        editor.base.handleClose(editor);\n      } else {\n        // delete the file\n        if (!current.deleteFile()) {\n          Base.showMessage(_(\"Couldn't do it\"),\n                           I18n.format(_(\"Could not delete \\\"{0}\\\".\"), current.getFileName()));\n          return;\n        }\n        // remove code from the list\n        removeCode(current);\n        // just set current tab to the main tab\n        setCurrentCode(0);\n        // update the tabs\n        editor.header.repaint();\n      }\n    }\n  }\n  protected void removeCode(SketchCode which) {\n    // remove it from the internal list of files\n    // resort internal list of files\n    for (int i = 0; i < codeCount; i++) {\n      if (code[i] == which) {\n        for (int j = i; j < codeCount-1; j++) {\n          code[j] = code[j+1];\n        }\n        codeCount--;\n        code = (SketchCode[]) PApplet.shorten(code);\n        return;\n      }\n    }\n    System.err.println(_(\"removeCode: internal error.. could not find code\"));\n  }\n  /**\n   * Move to the previous tab.\n   */\n  public void handlePrevCode() {\n    int prev = currentIndex - 1;\n    if (prev < 0) prev = codeCount-1;\n    setCurrentCode(prev);\n  }\n  /**\n   * Move to the next tab.\n   */\n  public void handleNextCode() {\n    setCurrentCode((currentIndex + 1) % codeCount);\n  }\n  /**\n   * Sets the modified value for the code in the frontmost tab.\n   */\n  public void setModified(boolean state) {\n    //System.out.println(\"setting modified to \" + state);\n    //new Exception().printStackTrace();\n    current.setModified(state);\n    calcModified();\n  }\n  protected void calcModified() {\n    modified = false;\n    for (int i = 0; i < codeCount; i++) {\n      if (code[i].isModified()) {\n        modified = true;\n        break;\n      }\n    }\n    editor.header.repaint();\n    if (Base.isMacOS()) {\n      // http://developer.apple.com/qa/qa2001/qa1146.html\n      Object modifiedParam = modified ? Boolean.TRUE : Boolean.FALSE;\n      editor.getRootPane().putClientProperty(\"windowModified\", modifiedParam);\n    }\n  }\n  public boolean isModified() {\n    return modified;\n  }\n  /**\n   * Save all code in the current sketch.\n   */\n  public boolean save() throws IOException {\n    // make sure the user didn't hide the sketch folder\n    ensureExistence();\n    // first get the contents of the editor text area\n    if (current.isModified()) {\n      current.setProgram(editor.getText());\n    }\n    // don't do anything if not actually modified\n    //if (!modified) return false;\n    if (isReadOnly()) {\n      // if the files are read-only, need to first do a \"save as\".\n      Base.showMessage(_(\"Sketch is read-only\"),\n                       _(\"Some files are marked \\\"read-only\\\", so you'll\\n\" +\n                         \"need to re-save this sketch to another location.\"));\n      // if the user cancels, give up on the save()\n      if (!saveAs()) return false;\n    } else {\n      // rename .pde files to .ino\n      File mainFile = new File(getMainFilePath());\n      File mainFolder = mainFile.getParentFile();\n      File[] pdeFiles = mainFolder.listFiles(new FilenameFilter() {\n        public boolean accept(File dir, String name) {\n          return name.toLowerCase().endsWith(\".pde\");\n        }\n      });\n      \n      if (pdeFiles != null && pdeFiles.length > 0) {\n        if (Preferences.get(\"editor.update_extension\") == null) {\n          Object[] options = { _(\"OK\"), _(\"Cancel\") };\n          int result = JOptionPane.showOptionDialog(editor,\n                                                    _(\"In Arduino 1.0, the default file extension has changed\\n\" +\n                                                      \"from .pde to .ino.  New sketches (including those created\\n\" +\n                                                      \"by \\\"Save-As\\\" will use the new extension.  The extension\\n\" +\n                                                      \"of existing sketches will be updated on save, but you can\\n\" +\n                                                      \"disable this in the Preferences dialog.\\n\" +\n                                                      \"\\n\" +\n                                                      \"Save sketch and update its extension?\"),\n                                                    _(\".pde -> .ino\"),\n                                                    JOptionPane.OK_CANCEL_OPTION,\n                                                    JOptionPane.QUESTION_MESSAGE,\n                                                    null,\n                                                    options,\n                                                    options[0]);\n          \n          if (result != JOptionPane.OK_OPTION) return false; // save cancelled\n          \n          Preferences.setBoolean(\"editor.update_extension\", true);\n        }\n        \n        if (Preferences.getBoolean(\"editor.update_extension\")) {\n          // Do rename of all .pde files to new .ino extension\n          for (File pdeFile : pdeFiles)\n            renameCodeToInoExtension(pdeFile);\n        }\n      }\n    }\n    for (int i = 0; i < codeCount; i++) {\n      if (code[i].isModified()) \n        code[i].save();\n    }\n    calcModified();\n    return true;\n  }\n  \n  protected boolean renameCodeToInoExtension(File pdeFile) {\n    for (SketchCode c : code) {\n      if (!c.getFile().equals(pdeFile))\n        continue;\n      String pdeName = pdeFile.getPath();\n      pdeName = pdeName.substring(0, pdeName.length() - 4) + \".ino\";\n      return c.renameTo(new File(pdeName), \"ino\");\n    }\n    return false;\n  }\n  \n  /**\n   * Handles 'Save As' for a sketch.\n   * <P>\n   * This basically just duplicates the current sketch folder to\n   * a new location, and then calls 'Save'. (needs to take the current\n   * state of the open files and save them to the new folder..\n   * but not save over the old versions for the old sketch..)\n   * <P>\n   * Also removes the previously-generated .class and .jar files,\n   * because they can cause trouble.\n   */\n  protected boolean saveAs() throws IOException {\n    String newParentDir = null;\n    String newName = null;\n    /*\n      JFileChooser fc = new JFileChooser();\n      fc.setDialogTitle(\"Save sketch folder as...\");\n      if (isReadOnly() || isUntitled()) {\n        // default to the sketchbook folder\n        fc.setCurrentDirectory(new File(Preferences.get(\"sketchbook.path\")));\n      } else {\n        // default to the parent folder of where this was\n        fc.setCurrentDirectory(folder.getParentFile());\n      }\n      // can't do this, will try to save into itself by default\n      //fc.setSelectedFile(folder);\n      int result = fc.showSaveDialog(editor);\n      if (result == JFileChooser.APPROVE_OPTION) {\n        File selection = fc.getSelectedFile();\n        newParentDir = selection.getParent();\n        newName = selection.getName();\n      }\n    */\n    // get new name for folder\n    FileDialog fd = new FileDialog(editor,\n                                   _(\"Save sketch folder as...\"),\n                                   FileDialog.SAVE);\n    if (isReadOnly() || isUntitled()) {\n      // default to the sketchbook folder\n      fd.setDirectory(Preferences.get(\"sketchbook.path\"));\n    } else {\n      // default to the parent folder of where this was\n      fd.setDirectory(folder.getParent());\n    }\n    String oldName = folder.getName();\n    fd.setFile(oldName);\n    fd.setVisible(true);\n    newParentDir = fd.getDirectory();\n    newName = fd.getFile();\n    // user canceled selection\n    if (newName == null) return false;\n    newName = Sketch.checkName(newName);\n    File newFolder = new File(newParentDir, newName);\n//    String newPath = newFolder.getAbsolutePath();\n//    String oldPath = folder.getAbsolutePath();\n//    if (newPath.equals(oldPath)) {\n//      return false;  // Can't save a sketch over itself\n//    }\n    // make sure there doesn't exist a .cpp file with that name already\n    // but ignore this situation for the first tab, since it's probably being\n    // resaved (with the same name) to another location/folder.\n    for (int i = 1; i < codeCount; i++) {\n      if (newName.equalsIgnoreCase(code[i].getPrettyName()) &&\n        code[i].getExtension().equalsIgnoreCase(\"cpp\")) {\n        Base.showMessage(_(\"Nope\"),\n\t\t\t I18n.format(\n                           _(\"You can't save the sketch as \\\"{0}\\\"\\n\" +\n                             \"because the sketch already has a .cpp file with that name.\"),\n\t\t\t   newName\n\t\t\t ));\n        return false;\n      }\n    }\n    // check if the paths are identical\n    if (newFolder.equals(folder)) {\n      // just use \"save\" here instead, because the user will have received a\n      // message (from the operating system) about \"do you want to replace?\"\n      return save();\n    }\n    // check to see if the user is trying to save this sketch inside itself\n    try {\n      String newPath = newFolder.getCanonicalPath() + File.separator;\n      String oldPath = folder.getCanonicalPath() + File.separator;\n      if (newPath.indexOf(oldPath) == 0) {\n        Base.showWarning(_(\"How very Borges of you\"),\n                         _(\"You cannot save the sketch into a folder\\n\" +\n                           \"inside itself. This would go on forever.\"), null);\n        return false;\n      }\n    } catch (IOException e) { }\n    // if the new folder already exists, then need to remove\n    // its contents before copying everything over\n    // (user will have already been warned)\n    if (newFolder.exists()) {\n      Base.removeDir(newFolder);\n    }\n    // in fact, you can't do this on windows because the file dialog\n    // will instead put you inside the folder, but it happens on osx a lot.\n    // now make a fresh copy of the folder\n    newFolder.mkdirs();\n    // grab the contents of the current tab before saving\n    // first get the contents of the editor text area\n    if (current.isModified()) {\n      current.setProgram(editor.getText());\n    }\n    // save the other tabs to their new location\n    for (int i = 1; i < codeCount; i++) {\n      File newFile = new File(newFolder, code[i].getFileName());\n      code[i].saveAs(newFile);\n    }\n    // re-copy the data folder (this may take a while.. add progress bar?)\n    if (dataFolder.exists()) {\n      File newDataFolder = new File(newFolder, \"data\");\n      Base.copyDir(dataFolder, newDataFolder);\n    }\n    // re-copy the code folder\n    if (codeFolder.exists()) {\n      File newCodeFolder = new File(newFolder, \"code\");\n      Base.copyDir(codeFolder, newCodeFolder);\n    }\n    // copy custom applet.html file if one exists\n    // http://dev.processing.org/bugs/show_bug.cgi?id=485\n    File customHtml = new File(folder, \"applet.html\");\n    if (customHtml.exists()) {\n      File newHtml = new File(newFolder, \"applet.html\");\n      Base.copyFile(customHtml, newHtml);\n    }\n    // save the main tab with its new name\n    File newFile = new File(newFolder, newName + \".ino\");\n    code[0].saveAs(newFile);\n    editor.handleOpenUnchecked(newFile.getPath(),\n                               currentIndex,\n                               editor.getSelectionStart(),\n                               editor.getSelectionStop(),\n                               editor.getScrollPosition());\n    // Name changed, rebuild the sketch menus\n    //editor.sketchbook.rebuildMenusAsync();\n    editor.base.rebuildSketchbookMenus();\n    // Make sure that it's not an untitled sketch\n    setUntitled(false);\n    // let Editor know that the save was successful\n    return true;\n  }\n  /**\n   * Prompt the user for a new file to the sketch, then call the\n   * other addFile() function to actually add it.\n   */\n  public void handleAddFile() {\n    // make sure the user didn't hide the sketch folder\n    ensureExistence();\n    // if read-only, give an error\n    if (isReadOnly()) {\n      // if the files are read-only, need to first do a \"save as\".\n      Base.showMessage(_(\"Sketch is Read-Only\"),\n                       _(\"Some files are marked \\\"read-only\\\", so you'll\\n\" +\n                         \"need to re-save the sketch in another location,\\n\" +\n                         \"and try again.\"));\n      return;\n    }\n    // get a dialog, select a file to add to the sketch\n    String prompt =\n      _(\"Select an image or other data file to copy to your sketch\");\n    //FileDialog fd = new FileDialog(new Frame(), prompt, FileDialog.LOAD);\n    FileDialog fd = new FileDialog(editor, prompt, FileDialog.LOAD);\n    fd.setVisible(true);\n    String directory = fd.getDirectory();\n    String filename = fd.getFile();\n    if (filename == null) return;\n    // copy the file into the folder. if people would rather\n    // it move instead of copy, they can do it by hand\n    File sourceFile = new File(directory, filename);\n    // now do the work of adding the file\n    boolean result = addFile(sourceFile);\n    if (result) {\n      editor.statusNotice(_(\"One file added to the sketch.\"));\n    }\n  }\n  /**\n   * Add a file to the sketch.\n   * <p/>\n   * .pde or .java files will be added to the sketch folder. <br/>\n   * .jar, .class, .dll, .jnilib, and .so files will all\n   * be added to the \"code\" folder. <br/>\n   * All other files will be added to the \"data\" folder.\n   * <p/>\n   * If they don't exist already, the \"code\" or \"data\" folder\n   * will be created.\n   * <p/>\n   * @return true if successful.\n   */\n  public boolean addFile(File sourceFile) {\n    String filename = sourceFile.getName();\n    File destFile = null;\n    String codeExtension = null;\n    boolean replacement = false;\n    // if the file appears to be code related, drop it\n    // into the code folder, instead of the data folder\n    if (filename.toLowerCase().endsWith(\".o\") ||\n        filename.toLowerCase().endsWith(\".a\") ||\n        filename.toLowerCase().endsWith(\".so\")) {\n      //if (!codeFolder.exists()) codeFolder.mkdirs();\n      prepareCodeFolder();\n      destFile = new File(codeFolder, filename);\n    } else {\n      for (String extension : getExtensions()) {\n        String lower = filename.toLowerCase();\n        if (lower.endsWith(\".\" + extension)) {\n          destFile = new File(this.folder, filename);\n          codeExtension = extension;\n        }\n      }\n      if (codeExtension == null) {\n        prepareDataFolder();\n        destFile = new File(dataFolder, filename);\n      }\n    }\n    // check whether this file already exists\n    if (destFile.exists()) {\n      Object[] options = { _(\"OK\"), _(\"Cancel\") };\n      String prompt = I18n.format(_(\"Replace the existing version of {0}?\"), filename);\n      int result = JOptionPane.showOptionDialog(editor,\n                                                prompt,\n                                                _(\"Replace\"),\n                                                JOptionPane.YES_NO_OPTION,\n                                                JOptionPane.QUESTION_MESSAGE,\n                                                null,\n                                                options,\n                                                options[0]);\n      if (result == JOptionPane.YES_OPTION) {\n        replacement = true;\n      } else {\n        return false;\n      }\n    }\n    // If it's a replacement, delete the old file first,\n    // otherwise case changes will not be preserved.\n    // http://dev.processing.org/bugs/show_bug.cgi?id=969\n    if (replacement) {\n      boolean muchSuccess = destFile.delete();\n      if (!muchSuccess) {\n        Base.showWarning(_(\"Error adding file\"),\n                         I18n.format(_(\"Could not delete the existing ''{0}'' file.\"), filename),\n\t\t\t null);\n        return false;\n      }\n    }\n    // make sure they aren't the same file\n    if ((codeExtension == null) && sourceFile.equals(destFile)) {\n      Base.showWarning(_(\"You can't fool me\"),\n                       _(\"This file has already been copied to the\\n\" +\n                         \"location from which where you're trying to add it.\\n\" +\n                         \"I ain't not doin nuthin'.\"), null);\n      return false;\n    }\n    // in case the user is \"adding\" the code in an attempt\n    // to update the sketch's tabs\n    if (!sourceFile.equals(destFile)) {\n      try {\n        Base.copyFile(sourceFile, destFile);\n      } catch (IOException e) {\n        Base.showWarning(_(\"Error adding file\"),\n                         I18n.format(_(\"Could not add ''{0}'' to the sketch.\"), filename),\n\t\t\t e);\n        return false;\n      }\n    }\n    if (codeExtension != null) {\n      SketchCode newCode = new SketchCode(destFile, codeExtension);\n      if (replacement) {\n        replaceCode(newCode);\n      } else {\n        insertCode(newCode);\n        sortCode();\n      }\n      setCurrentCode(filename);\n      editor.header.repaint();\n      if (editor.untitled) {  // TODO probably not necessary? problematic?\n        // Mark the new code as modified so that the sketch is saved\n        current.setModified(true);\n      }\n    } else {\n      if (editor.untitled) {  // TODO probably not necessary? problematic?\n        // If a file has been added, mark the main code as modified so\n        // that the sketch is properly saved.\n        code[0].setModified(true);\n      }\n    }\n    return true;\n  }\n  /**\n   * Add import statements to the current tab for all of packages inside\n   * the specified jar file.\n   */\n  public void importLibrary(String jarPath) throws IOException {\n    // make sure the user didn't hide the sketch folder\n    ensureExistence();\n    String list[] = Compiler.headerListFromIncludePath(jarPath);\n    // import statements into the main sketch file (code[0])\n    // if the current code is a .java file, insert into current\n    //if (current.flavor == PDE) {\n    if (hasDefaultExtension(current)) {\n      setCurrentCode(0);\n    }\n    // could also scan the text in the file to see if each import\n    // statement is already in there, but if the user has the import\n    // commented out, then this will be a problem.\n    StringBuffer buffer = new StringBuffer();\n    for (int i = 0; i < list.length; i++) {\n      buffer.append(\"#include <\");\n      buffer.append(list[i]);\n      buffer.append(\">\\n\");\n    }\n    buffer.append('\\n');\n    buffer.append(editor.getText());\n    editor.setText(buffer.toString());\n    editor.setSelection(0, 0);  // scroll to start\n    setModified(true);\n  }\n  /**\n   * Change what file is currently being edited. Changes the current tab index.\n   * <OL>\n   * <LI> store the String for the text of the current file.\n   * <LI> retrieve the String for the text of the new file.\n   * <LI> change the text that's visible in the text area\n   * </OL>\n   */\n  public void setCurrentCode(int which) {\n    // if current is null, then this is the first setCurrent(0)\n    if ((currentIndex == which) && (current != null)) {\n      return;\n    }\n    // get the text currently being edited\n    if (current != null) {\n      current.setState(editor.getText(),\n                       editor.getSelectionStart(),\n                       editor.getSelectionStop(),\n                       editor.getScrollPosition());\n    }\n    current = code[which];\n    currentIndex = which;\n    editor.setCode(current);\n    editor.header.rebuild();\n  }\n  /**\n   * Internal helper function to set the current tab based on a name.\n   * @param findName the file name (not pretty name) to be shown\n   */\n  protected void setCurrentCode(String findName) {\n    for (int i = 0; i < codeCount; i++) {\n      if (findName.equals(code[i].getFileName()) ||\n          findName.equals(code[i].getPrettyName())) {\n        setCurrentCode(i);\n        return;\n      }\n    }\n  }\n  /**\n   * Cleanup temporary files used during a build/run.\n   */\n  protected void cleanup() {\n    // if the java runtime is holding onto any files in the build dir, we\n    // won't be able to delete them, so we need to force a gc here\n    System.gc();\n    if (deleteFilesOnNextBuild) {\n      // delete the entire directory and all contents\n      // when we know something changed and all objects\n      // need to be recompiled, or if the board does not\n      // use setting build.dependency\n      //Base.removeDir(tempBuildFolder);\n      \n      // note that we can't remove the builddir itself, otherwise\n      // the next time we start up, internal runs using Runner won't\n      // work because the build dir won't exist at startup, so the classloader\n      // will ignore the fact that that dir is in the CLASSPATH in run.sh\n      Base.removeDescendants(tempBuildFolder);\n      \n      deleteFilesOnNextBuild = false;\n    } else {\n      // delete only stale source files, from the previously\n      // compiled sketch.  This allows multiple windows to be\n      // used.  Keep everything else, which might be reusable\n      if (tempBuildFolder.exists()) {\n        String files[] = tempBuildFolder.list();\n        for (String file : files) {\n          if (file.endsWith(\".c\") || file.endsWith(\".cpp\") || file.endsWith(\".s\")) {\n            File deleteMe = new File(tempBuildFolder, file);\n            if (!deleteMe.delete()) {\n              System.err.println(\"Could not delete \" + deleteMe);\n            }\n          }\n        }\n      }\n    }\n    \n    // Create a fresh applet folder (needed before preproc is run below)\n    //tempBuildFolder.mkdirs();\n  }\n  /**\n   * Preprocess, Compile, and Run the current code.\n   * <P>\n   * There are three main parts to this process:\n   * <PRE>\n   *   (0. if not java, then use another 'engine'.. i.e. python)\n   *\n   *    1. do the p5 language preprocessing\n   *       this creates a working .java file in a specific location\n   *       better yet, just takes a chunk of java code and returns a\n   *       new/better string editor can take care of saving this to a\n   *       file location\n   *\n   *    2. compile the code from that location\n   *       catching errors along the way\n   *       placing it in a ready classpath, or .. ?\n   *\n   *    3. run the code\n   *       needs to communicate location for window\n   *       and maybe setup presentation space as well\n   *       run externally if a code folder exists,\n   *       or if more than one file is in the project\n   *\n   *    X. afterwards, some of these steps need a cleanup function\n   * </PRE>\n   */\n  //protected String compile() throws RunnerException {\n  // called when any setting changes that requires all files to be recompiled\n  public static void buildSettingChanged() {\n    deleteFilesOnNextBuild = true;\n  }\n  private static boolean deleteFilesOnNextBuild = true;\n  /**\n   * When running from the editor, take care of preparations before running \n   * the build. \n   */\n  public void prepare() {\n    // make sure the user didn't hide the sketch folder\n    ensureExistence();\n    current.setProgram(editor.getText());\n    // TODO record history here\n    //current.history.record(program, SketchHistory.RUN);\n    // if an external editor is being used, need to grab the\n    // latest version of the code from the file.\n    if (Preferences.getBoolean(\"editor.external\")) {\n      // history gets screwed by the open..\n      //String historySaved = history.lastRecorded;\n      //handleOpen(sketch);\n      //history.lastRecorded = historySaved;\n      // set current to null so that the tab gets updated\n      // http://dev.processing.org/bugs/show_bug.cgi?id=515\n      current = null;\n      // nuke previous files and settings, just get things loaded\n      load();\n    }\n    // in case there were any boogers left behind\n    // do this here instead of after exiting, since the exit\n    // can happen so many different ways.. and this will be\n    // better connected to the dataFolder stuff below.\n    cleanup();\n//    // handle preprocessing the main file's code\n//    return build(tempBuildFolder.getAbsolutePath());\n  }\n  /**\n   * Build all the code for this sketch.\n   *\n   * In an advanced program, the returned class name could be different,\n   * which is why the className is set based on the return value.\n   * A compilation error will burp up a RunnerException.\n   *\n   * Setting purty to 'true' will cause exception line numbers to be incorrect.\n   * Unless you know the code compiles, you should first run the preprocessor\n   * with purty set to false to make sure there are no errors, then once\n   * successful, re-export with purty set to true.\n   *\n   * @param buildPath Location to copy all the .java files\n   * @return null if compilation failed, main class name if not\n   */\n  public String preprocess(String buildPath) throws RunnerException {\n    return preprocess(buildPath, new PdePreprocessor());\n  }\n  public String preprocess(String buildPath, PdePreprocessor preprocessor) throws RunnerException {\n    // make sure the user didn't hide the sketch folder\n    ensureExistence();\n    String[] codeFolderPackages = null;\n    classPath = buildPath;\n//    // figure out the contents of the code folder to see if there\n//    // are files that need to be added to the imports\n//    if (codeFolder.exists()) {\n//      libraryPath = codeFolder.getAbsolutePath();\n//\n//      // get a list of .jar files in the \"code\" folder\n//      // (class files in subfolders should also be picked up)\n//      String codeFolderClassPath =\n//        Compiler.contentsToClassPath(codeFolder);\n//      // append the jar files in the code folder to the class path\n//      classPath += File.pathSeparator + codeFolderClassPath;\n//      // get list of packages found in those jars\n//      codeFolderPackages =\n//        Compiler.packageListFromClassPath(codeFolderClassPath);\n//\n//    } else {\n//      libraryPath = \"\";\n//    }\n    // 1. concatenate all .pde files to the 'main' pde\n    //    store line number for starting point of each code bit\n    StringBuffer bigCode = new StringBuffer();\n    int bigCount = 0;\n    for (SketchCode sc : code) {\n      if (sc.isExtension(\"ino\") || sc.isExtension(\"pde\")) {\n        sc.setPreprocOffset(bigCount);\n        // These #line directives help the compiler report errors with\n        // correct the filename and line number (issue 281 & 907)\n        bigCode.append(\"#line 1 \\\"\" + sc.getFileName() + \"\\\"\\n\");\n        bigCode.append(sc.getProgram());\n        bigCode.append('\\n');\n        bigCount += sc.getLineCount();\n      }\n    }\n    // Note that the headerOffset isn't applied until compile and run, because\n    // it only applies to the code after it's been written to the .java file.\n    int headerOffset = 0;\n    //PdePreprocessor preprocessor = new PdePreprocessor();\n    try {\n      headerOffset = preprocessor.writePrefix(bigCode.toString(),\n                                              buildPath,\n                                              name,\n                                              codeFolderPackages);\n    } catch (FileNotFoundException fnfe) {\n      fnfe.printStackTrace();\n      String msg = _(\"Build folder disappeared or could not be written\");\n      throw new RunnerException(msg);\n    }\n    // 2. run preproc on that code using the sugg class name\n    //    to create a single .java file and write to buildpath\n    String primaryClassName = null;\n    try {\n      // if (i != 0) preproc will fail if a pde file is not\n      // java mode, since that's required\n      String className = preprocessor.write();\n      if (className == null) {\n        throw new RunnerException(_(\"Could not find main class\"));\n        // this situation might be perfectly fine,\n        // (i.e. if the file is empty)\n        //System.out.println(\"No class found in \" + code[i].name);\n        //System.out.println(\"(any code in that file will be ignored)\");\n        //System.out.println();\n//      } else {\n//        code[0].setPreprocName(className + \".java\");\n      }\n      // store this for the compiler and the runtime\n      primaryClassName = className + \".cpp\";\n    } catch (FileNotFoundException fnfe) {\n      fnfe.printStackTrace();\n      String msg = _(\"Build folder disappeared or could not be written\");\n      throw new RunnerException(msg);\n    } catch (RunnerException pe) {\n      // RunnerExceptions are caught here and re-thrown, so that they don't\n      // get lost in the more general \"Exception\" handler below.\n      throw pe;\n    } catch (Exception ex) {\n      // TODO better method for handling this?\n      System.err.println(I18n.format(_(\"Uncaught exception type: {0}\"), ex.getClass()));\n      ex.printStackTrace();\n      throw new RunnerException(ex.toString());\n    }\n    // grab the imports from the code just preproc'd\n    importedLibraries = new ArrayList<File>();\n    for (String item : preprocessor.getExtraImports()) {\n      File libFolder = (File) Base.importToLibraryTable.get(item);\n      if (libFolder != null && !importedLibraries.contains(libFolder)) {\n        importedLibraries.add(libFolder);\n        //classPath += Compiler.contentsToClassPath(libFolder);\n        libraryPath += File.pathSeparator + libFolder.getAbsolutePath();\n      }\n    }\n    // 3. then loop over the code[] and save each .java file\n    for (SketchCode sc : code) {\n      if (sc.isExtension(\"c\") || sc.isExtension(\"cpp\") || sc.isExtension(\"h\")) {\n        // no pre-processing services necessary for java files\n        // just write the the contents of 'program' to a .java file\n        // into the build directory. uses byte stream and reader/writer\n        // shtuff so that unicode bunk is properly handled\n        String filename = sc.getFileName(); //code[i].name + \".java\";\n        try {\n          Base.saveFile(sc.getProgram(), new File(buildPath, filename));\n        } catch (IOException e) {\n          e.printStackTrace();\n          throw new RunnerException(I18n.format(_(\"Problem moving {0} to the build folder\"), filename));\n        }\n//        sc.setPreprocName(filename);\n      } else if (sc.isExtension(\"ino\") || sc.isExtension(\"pde\")) {\n        // The compiler and runner will need this to have a proper offset\n        sc.addPreprocOffset(headerOffset);\n      }\n    }\n    return primaryClassName;\n  }\n  public ArrayList<File> getImportedLibraries() {\n    return importedLibraries;\n  }\n  \n  /**\n   * Map an error from a set of processed .java files back to its location\n   * in the actual sketch.\n   * @param message The error message.\n   * @param filename The .java file where the exception was found.\n   * @param line Line number of the .java file for the exception (1-indexed)\n   * @return A RunnerException to be sent to the editor, or null if it wasn't\n   *         possible to place the exception to the sketch code.\n   */\n//  public RunnerException placeExceptionAlt(String message, \n//                                        String filename, int line) {\n//    String appletJavaFile = appletClassName + \".java\";\n//    SketchCode errorCode = null;\n//    if (filename.equals(appletJavaFile)) {\n//      for (SketchCode code : getCode()) {\n//        if (code.isExtension(\"ino\")) {\n//          if (line >= code.getPreprocOffset()) {\n//            errorCode = code;\n//          }\n//        }\n//      }\n//    } else {\n//      for (SketchCode code : getCode()) {\n//        if (code.isExtension(\"java\")) {\n//          if (filename.equals(code.getFileName())) {\n//            errorCode = code;\n//          }\n//        }\n//      }\n//    }\n//    int codeIndex = getCodeIndex(errorCode);\n//\n//    if (codeIndex != -1) {\n//      //System.out.println(\"got line num \" + lineNumber);\n//      // in case this was a tab that got embedded into the main .java\n//      line -= getCode(codeIndex).getPreprocOffset();\n//\n//      // lineNumber is 1-indexed, but editor wants zero-indexed\n//      line--;\n//\n//      // getMessage() will be what's shown in the editor\n//      RunnerException exception = \n//        new RunnerException(message, codeIndex, line, -1);\n//      exception.hideStackTrace();\n//      return exception;\n//    }\n//    return null;\n//  }\n  \n  /**\n   * Map an error from a set of processed .java files back to its location\n   * in the actual sketch.\n   * @param message The error message.\n   * @param filename The .java file where the exception was found.\n   * @param line Line number of the .java file for the exception (0-indexed!)\n   * @return A RunnerException to be sent to the editor, or null if it wasn't\n   *         possible to place the exception to the sketch code.\n   */\n  public RunnerException placeException(String message, \n                                        String dotJavaFilename, \n                                        int dotJavaLine) {\n     // Placing errors is simple, because we inserted #line directives\n     // into the preprocessed source.  The compiler gives us correct\n     // the file name and line number.  :-)\n     for (int codeIndex = 0; codeIndex < getCodeCount(); codeIndex++) {\n       SketchCode code = getCode(codeIndex);\n       if (dotJavaFilename.equals(code.getFileName())) {\n         return new RunnerException(message, codeIndex, dotJavaLine);\n       }\n     }\n     return null;\n  }\n  /**\n   * Run the build inside the temporary build folder.\n   * @return null if compilation failed, main class name if not\n   * @throws RunnerException\n   */\n  public String build(boolean verbose) throws RunnerException {\n    return build(tempBuildFolder.getAbsolutePath(), verbose);\n  }\n  /**\n   * Preprocess and compile all the code for this sketch.\n   *\n   * In an advanced program, the returned class name could be different,\n   * which is why the className is set based on the return value.\n   * A compilation error will burp up a RunnerException.\n   *\n   * @return null if compilation failed, main class name if not\n   */\n  public String build(String buildPath, boolean verbose)\n    throws RunnerException {\n    \n    // run the preprocessor\n    editor.status.progressUpdate(20);\n    String primaryClassName = preprocess(buildPath);\n    // compile the program. errors will happen as a RunnerException\n    // that will bubble up to whomever called build().\n    Compiler compiler = new Compiler();\n    if (compiler.compile(this, buildPath, primaryClassName, verbose)) {\n      size(buildPath, primaryClassName);\n      return primaryClassName;\n    }\n    return null;\n  }\n  \n  \n  protected boolean exportApplet(boolean usingProgrammer) throws Exception {\n    return exportApplet(tempBuildFolder.getAbsolutePath(), usingProgrammer);\n  }\n  /**\n   * Handle export to applet.\n   */\n  public boolean exportApplet(String appletPath, boolean usingProgrammer)\n    throws RunnerException, IOException, SerialException {\n    prepare();\n      \n    // build the sketch\n    editor.status.progressNotice(_(\"Compiling sketch...\"));\n    String foundName = build(appletPath, false);\n    // (already reported) error during export, exit this function\n    if (foundName == null) return false;\n//    // If name != exportSketchName, then that's weirdness\n//    // BUG unfortunately, that can also be a bug in the preproc :(\n//    if (!name.equals(foundName)) {\n//      Base.showWarning(\"Error during export\",\n//                       \"Sketch name is \" + name + \" but the sketch\\n\" +\n//                       \"name in the code was \" + foundName, null);\n//      return false;\n//    }\n    editor.status.progressNotice(_(\"Uploading...\"));\n    upload(appletPath, foundName, usingProgrammer);\n    editor.status.progressUpdate(100);\n    return true;\n  }\n  \n  public void setCompilingProgress(int percent) {\n    editor.status.progressUpdate(percent);\n  }\n  \n  protected void size(String buildPath, String suggestedClassName)\n    throws RunnerException {\n    long size = 0;\n    String maxsizeString = Base.getBoardPreferences().get(\"upload.maximum_size\");\n    if (maxsizeString == null) return;\n    long maxsize = Integer.parseInt(maxsizeString);\n    Sizer sizer = new Sizer(buildPath, suggestedClassName);\n      try {\n      size = sizer.computeSize();\n      System.out.println(\n\tI18n.format(\n\t  _(\"Binary sketch size: {0} bytes (of a {1} byte maximum)\"),\n\t  size, maxsize\n\t)\n      );\n    } catch (RunnerException e) {\n      System.err.println(I18n.format(_(\"Couldn't determine program size: {0}\"), e.getMessage()));\n    }\n    if (size > maxsize)\n      throw new RunnerException(\n        _(\"Sketch too big; see http://www.arduino.cc/en/Guide/Troubleshooting#size for tips on reducing it.\"));\n  }\n  protected String upload(String buildPath, String suggestedClassName, boolean usingProgrammer)\n    throws RunnerException, SerialException {\n    Uploader uploader;\n    // download the program\n    //\n    uploader = new AvrdudeUploader();\n    boolean success = uploader.uploadUsingPreferences(buildPath,\n                                                      suggestedClassName,\n                                                      usingProgrammer);\n", "answers": ["    return success ? suggestedClassName : null;"], "length": 6878, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "e34212aa3077645a24fe01119b2d8f3d6d7e068bc2300179"}
{"input": "", "context": "\"\"\"\n    Copyright (C) 2011-2015  Parametric Products Intellectual Holdings, LLC\n    This file is part of CadQuery.\n    CadQuery is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n    CadQuery is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; If not, see <http://www.gnu.org/licenses/>\n\"\"\"\nimport time\nimport math\nfrom cadquery import *\nfrom cadquery import selectors\nfrom cadquery import exporters\nfrom copy import copy, deepcopy\nclass CQContext(object):\n    \"\"\"\n        A shared context for modeling.\n        All objects in the same CQ chain share a reference to this same object instance\n        which allows for shared state when needed,\n    \"\"\"\n    def __init__(self):\n        self.pendingWires = []   # a list of wires that have been created and need to be extruded\n        self.pendingEdges = []   # a list of created pending edges that need to be joined into wires\n        # a reference to the first point for a set of edges.\n        # Used to determine how to behave when close() is called\n        self.firstPoint = None\n        self.tolerance = 0.0001  # user specified tolerance\nclass CQ(object):\n    \"\"\"\n    Provides enhanced functionality for a wrapped CAD primitive.\n    Examples include feature selection, feature creation, 2d drawing\n    using work planes, and 3d operations like fillets, shells, and splitting\n    \"\"\"\n    def __init__(self, obj):\n        \"\"\"\n        Construct a new CadQuery (CQ) object that wraps a CAD primitive.\n        :param obj: Object to Wrap.\n        :type obj: A CAD Primitive ( wire,vertex,face,solid,edge )\n        \"\"\"\n        self.objects = []\n        self.ctx = CQContext()\n        self.parent = None\n        if obj:  # guarded because sometimes None for internal use\n            self.objects.append(obj)\n    def newObject(self, objlist):\n        \"\"\"\n        Make a new CQ object.\n        :param objlist: The stack of objects to use\n        :type objlist: a list of CAD primitives ( wire,face,edge,solid,vertex,etc )\n        The parent of the new object will be set to the current object,\n        to preserve the chain correctly.\n        Custom plugins and subclasses should use this method to create new CQ objects\n        correctly.\n        \"\"\"\n        r = type(self)(None)  # create a completely blank one\n        r.parent = self\n        r.ctx = self.ctx  # context solid remains the same\n        r.objects = list(objlist)\n        return r\n    def _collectProperty(self, propName):\n        \"\"\"\n        Collects all of the values for propName,\n        for all items on the stack.\n        FreeCAD objects do not implement id correctly,\n        so hashCode is used to ensure we don't add the same\n        object multiple times.\n        One weird use case is that the stack could have a solid reference object\n        on it.  This is meant to be a reference to the most recently modified version\n        of the context solid, whatever it is.\n        \"\"\"\n        all = {}\n        for o in self.objects:\n            # tricky-- if an object is a compound of solids,\n            # do not return all of the solids underneath-- typically\n            # then we'll keep joining to ourself\n            if propName == 'Solids' and isinstance(o, Solid) and o.ShapeType() == 'Compound':\n                for i in getattr(o, 'Compounds')():\n                    all[i.hashCode()] = i\n            else:\n                if hasattr(o, propName):\n                    for i in getattr(o, propName)():\n                        all[i.hashCode()] = i\n        return list(all.values())\n    def split(self, keepTop=False, keepBottom=False):\n        \"\"\"\n            Splits a solid on the stack into two parts, optionally keeping the separate parts.\n            :param boolean keepTop: True to keep the top, False or None to discard it\n            :param boolean keepBottom: True to keep the bottom, False or None to discard it\n            :raises: ValueError if keepTop and keepBottom are both false.\n            :raises: ValueError if there is not a solid in the current stack or the parent chain\n            :returns: CQ object with the desired objects on the stack.\n            The most common operation splits a solid and keeps one half. This sample creates\n            split bushing::\n                #drill a hole in the side\n                c = Workplane().box(1,1,1).faces(\">Z\").workplane().circle(0.25).cutThruAll()F\n                #now cut it in half sideways\n                c.faces(\">Y\").workplane(-0.5).split(keepTop=True)\n        \"\"\"\n        solid = self.findSolid()\n        if (not keepTop) and (not keepBottom):\n            raise ValueError(\"You have to keep at least one half\")\n        maxDim = solid.BoundingBox().DiagonalLength * 10.0\n        topCutBox = self.rect(maxDim, maxDim)._extrude(maxDim)\n        bottomCutBox = self.rect(maxDim, maxDim)._extrude(-maxDim)\n        top = solid.cut(bottomCutBox)\n        bottom = solid.cut(topCutBox)\n        if keepTop and keepBottom:\n            # Put both on the stack, leave original unchanged.\n            return self.newObject([top, bottom])\n        else:\n            # Put the one we are keeping on the stack, and also update the\n            # context solidto the one we kept.\n            if keepTop:\n                solid.wrapped = top.wrapped\n                return self.newObject([top])\n            else:\n                solid.wrapped = bottom.wrapped\n                return self.newObject([bottom])\n    def combineSolids(self, otherCQToCombine=None):\n        \"\"\"\n        !!!DEPRECATED!!! use union()\n        Combines all solids on the current stack, and any context object, together\n        into a single object.\n        After the operation, the returned solid is also the context solid.\n        :param otherCQToCombine: another CadQuery to combine.\n        :return: a cQ object with the resulting combined solid on the stack.\n        Most of the time, both objects will contain a single solid, which is\n        combined and returned on the stack of the new object.\n        \"\"\"\n        #loop through current stack objects, and combine them\n        #TODO: combine other types of objects as well, like edges and wires\n        toCombine = self.solids().vals()\n        if otherCQToCombine:\n            for obj in otherCQToCombine.solids().vals():\n                toCombine.append(obj)\n        if len(toCombine) < 1:\n            raise ValueError(\"Cannot Combine: at least one solid required!\")\n        #get context solid and we don't want to find our own objects\n        ctxSolid = self.findSolid(searchStack=False, searchParents=True)\n        if ctxSolid is None:\n            ctxSolid = toCombine.pop(0)\n        #now combine them all. make sure to save a reference to the ctxSolid pointer!\n        s = ctxSolid\n        for tc in toCombine:\n            s = s.fuse(tc)\n        ctxSolid.wrapped = s.wrapped\n        return self.newObject([s])\n    def all(self):\n        \"\"\"\n        Return a list of all CQ objects on the stack.\n        useful when you need to operate on the elements\n        individually.\n        Contrast with vals, which returns the underlying\n        objects for all of the items on the stack\n        \"\"\"\n        return [self.newObject([o]) for o in self.objects]\n    def size(self):\n        \"\"\"\n         Return the number of objects currently on the stack\n        \"\"\"\n        return len(self.objects)\n    def vals(self):\n        \"\"\"\n        get the values in the current list\n        :rtype: list of FreeCAD objects\n        :returns: the values of the objects on the stack.\n        Contrast with :py:meth:`all`, which returns CQ objects for all of the items on the stack\n        \"\"\"\n        return self.objects\n    def add(self, obj):\n        \"\"\"\n        Adds an object or a list of objects to the stack\n        :param obj: an object to add\n        :type obj: a CQ object, CAD primitive, or list of CAD primitives\n        :return: a CQ object with the requested operation performed\n        If an CQ object, the values of that object's stack are added. If a list of cad primitives,\n        they are all added. If a single CAD primitive it is added\n        Used in rare cases when you need to combine the results of several CQ results\n        into a single CQ object. Shelling is one common example\n        \"\"\"\n        if type(obj) == list:\n            self.objects.extend(obj)\n        elif isinstance(obj, CQ):\n            self.objects.extend(obj.objects)\n        else:\n            self.objects.append(obj)\n        return self\n    def val(self):\n        \"\"\"\n        Return the first value on the stack\n        :return: the first value on the stack.\n        :rtype: A FreeCAD object or a SolidReference\n        \"\"\"\n        return self.objects[0]\n    def toFreecad(self):\n        \"\"\"\n        Directly returns the wrapped FreeCAD object to cut down on the amount of boiler plate code\n        needed when rendering a model in FreeCAD's 3D view.\n        :return: The wrapped FreeCAD object\n        :rtype A FreeCAD object or a SolidReference\n        \"\"\"\n        return self.objects[0].wrapped\n    def workplane(self, offset=0.0, invert=False, centerOption='CenterOfMass'):\n        \"\"\"\n        Creates a new 2-D workplane, located relative to the first face on the stack.\n        :param offset:  offset for the work plane in the Z direction. Default\n        :param invert:  invert the Z direction from that of the face.\n        :type offset: float or None=0.0\n        :type invert: boolean or None=False\n        :rtype: Workplane object ( which is a subclass of CQ )\n        The first element on the stack must be a face, a set of\n        co-planar faces or a vertex.  If a vertex, then the parent\n        item on the chain immediately before the vertex must be a\n        face.\n        The result will be a 2-d working plane\n        with a new coordinate system set up as follows:\n           * The origin will be located in the *center* of the\n             face/faces, if a face/faces was selected. If a vertex was\n             selected, the origin will be at the vertex, and located\n             on the face.\n           * The Z direction will be normal to the plane of the face,computed\n             at the center point.\n           * The X direction will be parallel to the x-y plane. If the workplane is  parallel to\n             the global x-y plane, the x direction of the workplane will co-incide with the\n             global x direction.\n        Most commonly, the selected face will be planar, and the workplane lies in the same plane\n        of the face ( IE, offset=0).  Occasionally, it is useful to define a face offset from\n        an existing surface, and even more rarely to define a workplane based on a face that is\n        not planar.\n        To create a workplane without first having a face, use the Workplane() method.\n        Future Enhancements:\n          * Allow creating workplane from planar wires\n          * Allow creating workplane based on an arbitrary point on a face, not just the center.\n            For now you can work around by creating a workplane and then offsetting the center\n            afterwards.\n        \"\"\"\n        def _isCoPlanar(f0, f1):\n            \"\"\"Test if two faces are on the same plane.\"\"\"\n            p0 = f0.Center()\n            p1 = f1.Center()\n            n0 = f0.normalAt()\n            n1 = f1.normalAt()\n            # test normals (direction of planes)\n            if not ((abs(n0.x-n1.x) < self.ctx.tolerance) or\n                    (abs(n0.y-n1.y) < self.ctx.tolerance) or\n                    (abs(n0.z-n1.z) < self.ctx.tolerance)):\n                return False\n            # test if p1 is on the plane of f0 (offset of planes)\n            return abs(n0.dot(p0.sub(p1)) < self.ctx.tolerance)\n        def _computeXdir(normal):\n            \"\"\"\n            Figures out the X direction based on the given normal.\n            :param :normal The direction that's normal to the plane.\n            :type :normal A Vector\n            :return A vector representing the X direction.\n            \"\"\"\n            xd = Vector(0, 0, 1).cross(normal)\n            if xd.Length < self.ctx.tolerance:\n                #this face is parallel with the x-y plane, so choose x to be in global coordinates\n                xd = Vector(1, 0, 0)\n            return xd\n        if len(self.objects) > 1:\n            # are all objects 'PLANE'?\n            if not all(o.geomType() == 'PLANE' for o in self.objects):\n                raise ValueError(\"If multiple objects selected, they all must be planar faces.\")\n            # are all faces co-planar with each other?\n            if not all(_isCoPlanar(self.objects[0], f) for f in self.objects[1:]):\n                raise ValueError(\"Selected faces must be co-planar.\")\n            if centerOption == 'CenterOfMass':\n                center = Shape.CombinedCenter(self.objects)\n            elif centerOption == 'CenterOfBoundBox':\n                center = Shape.CombinedCenterOfBoundBox(self.objects)\n            normal = self.objects[0].normalAt()\n            xDir = _computeXdir(normal)\n        else:\n            obj = self.objects[0]\n            if isinstance(obj, Face):\n                if centerOption == 'CenterOfMass':\n                        center = obj.Center()\n                elif centerOption == 'CenterOfBoundBox':\n                        center = obj.CenterOfBoundBox()\n                normal = obj.normalAt(center)\n                xDir = _computeXdir(normal)\n            else:\n                if hasattr(obj, 'Center'):\n                    if centerOption == 'CenterOfMass':\n                        center = obj.Center()\n                    elif centerOption == 'CenterOfBoundBox':\n                        center = obj.CenterOfBoundBox()\n                    normal = self.plane.zDir\n                    xDir = self.plane.xDir\n                else:\n                    raise ValueError(\"Needs a face or a vertex or point on a work plane\")\n        #invert if requested\n        if invert:\n            normal = normal.multiply(-1.0)\n        #offset origin if desired\n        offsetVector = normal.normalized().multiply(offset)\n        offsetCenter = center.add(offsetVector)\n        #make the new workplane\n        plane = Plane(offsetCenter, xDir, normal)\n        s = Workplane(plane)\n        s.parent = self\n        s.ctx = self.ctx\n        #a new workplane has the center of the workplane on the stack\n        return s\n    def first(self):\n        \"\"\"\n        Return the first item on the stack\n        :returns: the first item on the stack.\n        :rtype: a CQ object\n        \"\"\"\n        return self.newObject(self.objects[0:1])\n    def item(self, i):\n        \"\"\"\n        Return the ith item on the stack.\n        :rtype: a CQ object\n        \"\"\"\n        return self.newObject([self.objects[i]])\n    def last(self):\n        \"\"\"\n        Return the last item on the stack.\n        :rtype: a CQ object\n        \"\"\"\n        return self.newObject([self.objects[-1]])\n    def end(self):\n        \"\"\"\n        Return the parent of this CQ element\n        :rtype: a CQ object\n        :raises: ValueError if there are no more parents in the chain.\n        For example::\n            CQ(obj).faces(\"+Z\").vertices().end()\n        will return the same as::\n            CQ(obj).faces(\"+Z\")\n        \"\"\"\n        if self.parent:\n            return self.parent\n        else:\n            raise ValueError(\"Cannot End the chain-- no parents!\")\n    def findSolid(self, searchStack=True, searchParents=True):\n        \"\"\"\n        Finds the first solid object in the chain, searching from the current node\n        backwards through parents until one is found.\n        :param searchStack: should objects on the stack be searched first.\n        :param searchParents: should parents be searched?\n        :raises: ValueError if no solid is found in the current object or its parents,\n            and errorOnEmpty is True\n        This function is very important for chains that are modifying a single parent object,\n        most often a solid.\n        Most of the time, a chain defines or selects a solid, and then modifies it using workplanes\n        or other operations.\n        Plugin Developers should make use of this method to find the solid that should be modified,\n        if the plugin implements a unary operation, or if the operation will automatically merge its\n        results with an object already on the stack.\n        \"\"\"\n        #notfound = ValueError(\"Cannot find a Valid Solid to Operate on!\")\n        if searchStack:\n            for s in self.objects:\n                if isinstance(s, Solid):\n                    return s\n                elif isinstance(s, Compound):\n                    return s.Solids()\n        if searchParents and self.parent is not None:\n            return self.parent.findSolid(searchStack=True, searchParents=searchParents)\n        return None\n    def _selectObjects(self, objType, selector=None):\n        \"\"\"\n            Filters objects of the selected type with the specified selector,and returns results\n            :param objType: the type of object we are searching for\n            :type objType: string: (Vertex|Edge|Wire|Solid|Shell|Compound|CompSolid)\n            :return: a CQ object with the selected objects on the stack.\n            **Implementation Note**: This is the base implementation of the vertices,edges,faces,\n            solids,shells, and other similar selector methods.  It is a useful extension point for\n            plugin developers to make other selector methods.\n        \"\"\"\n        # A single list of all faces from all objects on the stack\n        toReturn = self._collectProperty(objType)\n        if selector is not None:\n            # if isinstance(selector, str) or isinstance(selector, str):\n            try:\n                selectorObj = selectors.StringSyntaxSelector(selector)\n            except:\n                selectorObj = selector\n            toReturn = selectorObj.filter(toReturn)\n        return self.newObject(toReturn)\n    def vertices(self, selector=None):\n        \"\"\"\n        Select the vertices of objects on the stack, optionally filtering the selection. If there\n        are multiple objects on the stack, the vertices of all objects are collected and a list of\n        all the distinct vertices is returned.\n        :param selector:\n        :type selector:  None, a Selector object, or a string selector expression.\n        :return: a CQ object who's stack contains  the *distinct* vertices of *all* objects on the\n           current stack, after being filtered by the selector, if provided\n        If there are no vertices for any objects on the current stack, an empty CQ object\n        is returned\n        The typical use is to select the vertices of a single object on the stack. For example::\n           Workplane().box(1,1,1).faces(\"+Z\").vertices().size()\n        returns 4, because the topmost face of cube will contain four vertices. While this::\n           Workplane().box(1,1,1).faces().vertices().size()\n        returns 8, because a cube has a total of 8 vertices\n        **Note** Circles are peculiar, they have a single vertex at the center!\n        :py:class:`StringSyntaxSelector`\n        \"\"\"\n        return self._selectObjects('Vertices', selector)\n    def faces(self, selector=None):\n        \"\"\"\n        Select the faces of objects on the stack, optionally filtering the selection. If there are\n        multiple objects on the stack, the faces of all objects are collected and a list of all the\n        distinct faces is returned.\n        :param selector: A selector\n        :type selector:  None, a Selector object, or a string selector expression.\n        :return: a CQ object who's stack contains all of the *distinct* faces of *all* objects on\n            the current stack, filtered by the provided selector.\n        If there are no vertices for any objects on the current stack, an empty CQ object\n        is returned.\n        The typical use is to select the faces of a single object on the stack. For example::\n           CQ(aCube).faces(\"+Z\").size()\n        returns 1, because a cube has one face with a normal in the +Z direction. Similarly::\n           CQ(aCube).faces().size()\n        returns 6, because a cube has a total of 6 faces, And::\n            CQ(aCube).faces(\"|Z\").size()\n        returns 2, because a cube has 2 faces having normals parallel to the z direction\n        See more about selectors HERE\n        \"\"\"\n        return self._selectObjects('Faces', selector)\n    def edges(self, selector=None):\n        \"\"\"\n        Select the edges of objects on the stack, optionally filtering the selection. If there are\n        multiple objects on the stack, the edges of all objects are collected and a list of all the\n        distinct edges is returned.\n        :param selector: A selector\n        :type selector:  None, a Selector object, or a string selector expression.\n        :return: a CQ object who's stack contains all of the *distinct* edges of *all* objects on\n            the current stack, filtered by the provided selector.\n        If there are no edges for any objects on the current stack, an empty CQ object is returned\n        The typical use is to select the edges of a single object on the stack. For example::\n           CQ(aCube).faces(\"+Z\").edges().size()\n        returns 4, because a cube has one face with a normal in the +Z direction. Similarly::\n           CQ(aCube).edges().size()\n        returns 12, because a cube has a total of 12 edges, And::\n            CQ(aCube).edges(\"|Z\").size()\n        returns 4, because a cube has 4 edges parallel to the z direction\n        See more about selectors HERE\n        \"\"\"\n        return self._selectObjects('Edges', selector)\n    def wires(self, selector=None):\n        \"\"\"\n        Select the wires of objects on the stack, optionally filtering the selection. If there are\n        multiple objects on the stack, the wires of all objects are collected and a list of all the\n        distinct wires is returned.\n        :param selector: A selector\n        :type selector:  None, a Selector object, or a string selector expression.\n        :return: a CQ object who's stack contains all of the *distinct* wires of *all* objects on\n            the current stack, filtered by the provided selector.\n        If there are no wires for any objects on the current stack, an empty CQ object is returned\n        The typical use is to select the wires of a single object on the stack. For example::\n           CQ(aCube).faces(\"+Z\").wires().size()\n        returns 1, because a face typically only has one outer wire\n        See more about selectors HERE\n        \"\"\"\n        return self._selectObjects('Wires', selector)\n    def solids(self, selector=None):\n        \"\"\"\n        Select the solids of objects on the stack, optionally filtering the selection. If there are\n        multiple objects on the stack, the solids of all objects are collected and a list of all the\n        distinct solids is returned.\n        :param selector: A selector\n        :type selector:  None, a Selector object, or a string selector expression.\n        :return: a CQ object who's stack contains all of the *distinct* solids of *all* objects on\n            the current stack, filtered by the provided selector.\n        If there are no solids for any objects on the current stack, an empty CQ object is returned\n        The typical use is to select the  a single object on the stack. For example::\n           CQ(aCube).solids().size()\n        returns 1, because a cube consists of one solid.\n        It is possible for single CQ object ( or even a single CAD primitive ) to contain\n        multiple solids.\n        See more about selectors HERE\n        \"\"\"\n        return self._selectObjects('Solids', selector)\n    def shells(self, selector=None):\n        \"\"\"\n        Select the shells of objects on the stack, optionally filtering the selection. If there are\n        multiple objects on the stack, the shells of all objects are collected and a list of all the\n        distinct shells is returned.\n        :param selector: A selector\n        :type selector:  None, a Selector object, or a string selector expression.\n        :return: a CQ object who's stack contains all of the *distinct* solids of *all* objects on\n            the current stack, filtered by the provided selector.\n        If there are no shells for any objects on the current stack, an empty CQ object is returned\n        Most solids will have a single shell, which represents the outer surface. A shell will\n        typically be composed of multiple faces.\n        See more about selectors HERE\n        \"\"\"\n        return self._selectObjects('Shells', selector)\n    def compounds(self, selector=None):\n        \"\"\"\n        Select compounds on the stack, optionally filtering the selection. If there are multiple\n        objects on the stack, they are collected and a list of all the distinct compounds\n        is returned.\n        :param selector: A selector\n        :type selector:  None, a Selector object, or a string selector expression.\n        :return: a CQ object who's stack contains all of the *distinct* solids of *all* objects on\n            the current stack, filtered by the provided selector.\n        A compound contains multiple CAD primitives that resulted from a single operation, such as\n        a union, cut, split, or fillet.  Compounds can contain multiple edges, wires, or solids.\n        See more about selectors HERE\n        \"\"\"\n        return self._selectObjects('Compounds', selector)\n    def toSvg(self, opts=None, view_vector=(-1.75,1.1,5)):\n        \"\"\"\n        Returns svg text that represents the first item on the stack.\n        for testing purposes.\n        :param opts: svg formatting options\n        :type opts: dictionary, width and height\n        :param view_vector: camera's view direction vector\n        :type view_vector: tuple, (x, y, z)\n        :return: a string that contains SVG that represents this item.\n        \"\"\"\n        return exporters.getSVG(self.val().wrapped, opts=opts, view_vector=view_vector)\n    def exportSvg(self, fileName, view_vector=(-1.75,1.1,5)):\n        \"\"\"\n        Exports the first item on the stack as an SVG file\n        For testing purposes mainly.\n        :param fileName: the filename to export\n        :param view_vector: camera's view direction vector\n        :type view_vector: tuple, (x, y, z)\n        :type fileName: String, absolute path to the file\n        \"\"\"\n        exporters.exportSVG(self, fileName, view_vector)\n    def rotateAboutCenter(self, axisEndPoint, angleDegrees):\n        \"\"\"\n        Rotates all items on the stack by the specified angle, about the specified axis\n        The center of rotation is a vector starting at the center of the object on the stack,\n        and ended at the specified point.\n        :param axisEndPoint: the second point of axis of rotation\n        :type axisEndPoint: a three-tuple in global coordinates\n        :param angleDegrees: the rotation angle, in degrees\n        :type angleDegrees: float\n        :returns: a CQ object, with all items rotated.\n        WARNING: This version returns the same cq object instead of a new one-- the\n        old object is not accessible.\n        Future Enhancements:\n            * A version of this method that returns a transformed copy, rather than modifying\n              the originals\n            * This method doesn't expose a very good interface, because the axis of rotation\n              could be inconsistent between multiple objects.  This is because the beginning\n              of the axis is variable, while the end is fixed. This is fine when operating on\n              one object, but is not cool for multiple.\n        \"\"\"\n        #center point is the first point in the vector\n        endVec = Vector(axisEndPoint)\n        def _rot(obj):\n            startPt = obj.Center()\n            endPt = startPt + endVec\n            return obj.rotate(startPt, endPt, angleDegrees)\n        return self.each(_rot, False)\n    def rotate(self, axisStartPoint, axisEndPoint, angleDegrees):\n        \"\"\"\n        Returns a copy of all of the items on the stack rotated through and angle around the axis\n        of rotation.\n        :param axisStartPoint: The first point of the axis of rotation\n        :type axisStartPoint: a 3-tuple of floats\n        :type axisEndPoint: The second point of the axis of rotation\n        :type axisEndPoint: a 3-tuple of floats\n        :param angleDegrees: the rotation angle, in degrees\n        :type angleDegrees: float\n        :returns: a CQ object\n        \"\"\"\n        return self.newObject([o.rotate(axisStartPoint, axisEndPoint, angleDegrees)\n                               for o in self.objects])\n    def mirror(self, mirrorPlane=\"XY\", basePointVector=(0, 0, 0)):\n        \"\"\"\n        Mirror a single CQ object. This operation is the same as in the FreeCAD PartWB's mirroring\n        :param mirrorPlane: the plane to mirror about\n        :type mirrorPlane: string, one of \"XY\", \"YX\", \"XZ\", \"ZX\", \"YZ\", \"ZY\" the planes\n        :param basePointVector: the base point to mirror about\n        :type basePointVector: tuple\n        \"\"\"\n        newS = self.newObject([self.objects[0].mirror(mirrorPlane, basePointVector)])\n        return newS.first()\n    def translate(self, vec):\n        \"\"\"\n        Returns a copy of all of the items on the stack moved by the specified translation vector.\n        :param tupleDistance: distance to move, in global coordinates\n        :type  tupleDistance: a 3-tuple of float\n        :returns: a CQ object\n        \"\"\"\n        return self.newObject([o.translate(vec) for o in self.objects])\n    def shell(self, thickness):\n        \"\"\"\n        Remove the selected faces to create a shell of the specified thickness.\n        To shell, first create a solid, and *in the same chain* select the faces you wish to remove.\n        :param thickness: a positive float, representing the thickness of the desired shell.\n            Negative values shell inwards, positive values shell outwards.\n        :raises: ValueError if the current stack contains objects that are not faces of a solid\n             further up in the chain.\n        :returns: a CQ object with the resulting shelled solid selected.\n        This example will create a hollowed out unit cube, where the top most face is open,\n        and all other walls are 0.2 units thick::\n            Workplane().box(1,1,1).faces(\"+Z\").shell(0.2)\n        Shelling is one of the cases where you may need to use the add method to select several\n        faces. For example, this example creates a 3-walled corner, by removing three faces\n        of a cube::\n            s = Workplane().box(1,1,1)\n            s1 = s.faces(\"+Z\")\n            s1.add(s.faces(\"+Y\")).add(s.faces(\"+X\"))\n            self.saveModel(s1.shell(0.2))\n        This fairly yucky syntax for selecting multiple faces is planned for improvement\n        **Note**:  When sharp edges are shelled inwards, they remain sharp corners, but **outward**\n        shells are automatically filleted, because an outward offset from a corner generates\n        a radius.\n        Future Enhancements:\n            Better selectors to make it easier to select multiple faces\n        \"\"\"\n        solidRef = self.findSolid()\n        for f in self.objects:\n            if type(f) != Face:\n                raise ValueError(\"Shelling requires that faces be selected\")\n        s = solidRef.shell(self.objects, thickness)\n        solidRef.wrapped = s.wrapped\n        return self.newObject([s])\n    def fillet(self, radius):\n        \"\"\"\n        Fillets a solid on the selected edges.\n        The edges on the stack are filleted. The solid to which the edges belong must be in the\n        parent chain of the selected edges.\n        :param radius: the radius of the fillet, must be > zero\n        :type radius: positive float\n        :raises: ValueError if at least one edge is not selected\n        :raises: ValueError if the solid containing the edge is not in the chain\n        :returns: cq object with the resulting solid selected.\n        This example will create a unit cube, with the top edges filleted::\n", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "length": 4053, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "edc5a05e949253312fe2af3c4fcdab85f5bf23272d2a6b86"}
{"input": "", "context": "# coding=utf-8\n# Python Standard Library Imports\nfrom time import sleep\nfrom math import atan, atan2, sqrt\n# External Imports\npass\n# Custom Imports\nfrom pycomms import PyComms, u_to_s, qv_mult\nclass MPU6050:\n    # Register map based on Jeff Rowberg <jeff@rowberg.net> source code at\n    # https://github.com/jrowberg/i2cdevlib/blob/master/Arduino/MPU6050\n    # /MPU6050.h\n    MPU6050_ADDRESS_AD0_LOW = 0x68 # address pin low (GND), default for\n    # InvenSense evaluation board\n    MPU6050_ADDRESS_AD0_HIGH = 0x69 # address pin high (VCC)\n    MPU6050_DEFAULT_ADDRESS = MPU6050_ADDRESS_AD0_LOW\n    MPU6050_RA_XG_OFFS_TC = 0x00 # [7] PWR_MODE, [6:1] XG_OFFS_TC,\n    # [0] OTP_BNK_VLD\n    MPU6050_RA_YG_OFFS_TC = 0x01 # [7] PWR_MODE, [6:1] YG_OFFS_TC,\n    # [0] OTP_BNK_VLD\n    MPU6050_RA_ZG_OFFS_TC = 0x02 # [7] PWR_MODE, [6:1] ZG_OFFS_TC,\n    # [0] OTP_BNK_VLD\n    MPU6050_RA_X_FINE_GAIN = 0x03 # [7:0] X_FINE_GAIN\n    MPU6050_RA_Y_FINE_GAIN = 0x04 # [7:0] Y_FINE_GAIN\n    MPU6050_RA_Z_FINE_GAIN = 0x05 # [7:0] Z_FINE_GAIN\n    MPU6050_RA_XA_OFFS_H = 0x06 # [15:0] XA_OFFS\n    MPU6050_RA_XA_OFFS_L_TC = 0x07\n    MPU6050_RA_YA_OFFS_H = 0x08 # [15:0] YA_OFFS\n    MPU6050_RA_YA_OFFS_L_TC = 0x09\n    MPU6050_RA_ZA_OFFS_H = 0x0A # [15:0] ZA_OFFS\n    MPU6050_RA_ZA_OFFS_L_TC = 0x0B\n    MPU6050_RA_XG_OFFS_USRH = 0x13 # [15:0] XG_OFFS_USR\n    MPU6050_RA_XG_OFFS_USRL = 0x14\n    MPU6050_RA_YG_OFFS_USRH = 0x15 # [15:0] YG_OFFS_USR\n    MPU6050_RA_YG_OFFS_USRL = 0x16\n    MPU6050_RA_ZG_OFFS_USRH = 0x17 # [15:0] ZG_OFFS_USR\n    MPU6050_RA_ZG_OFFS_USRL = 0x18\n    MPU6050_RA_SMPLRT_DIV = 0x19\n    MPU6050_RA_CONFIG = 0x1A\n    MPU6050_RA_GYRO_CONFIG = 0x1B\n    MPU6050_RA_ACCEL_CONFIG = 0x1C\n    MPU6050_RA_FF_THR = 0x1D\n    MPU6050_RA_FF_DUR = 0x1E\n    MPU6050_RA_MOT_THR = 0x1F\n    MPU6050_RA_MOT_DUR = 0x20\n    MPU6050_RA_ZRMOT_THR = 0x21\n    MPU6050_RA_ZRMOT_DUR = 0x22\n    MPU6050_RA_FIFO_EN = 0x23\n    MPU6050_RA_I2C_MST_CTRL = 0x24\n    MPU6050_RA_I2C_SLV0_ADDR = 0x25\n    MPU6050_RA_I2C_SLV0_REG = 0x26\n    MPU6050_RA_I2C_SLV0_CTRL = 0x27\n    MPU6050_RA_I2C_SLV1_ADDR = 0x28\n    MPU6050_RA_I2C_SLV1_REG = 0x29\n    MPU6050_RA_I2C_SLV1_CTRL = 0x2A\n    MPU6050_RA_I2C_SLV2_ADDR = 0x2B\n    MPU6050_RA_I2C_SLV2_REG = 0x2C\n    MPU6050_RA_I2C_SLV2_CTRL = 0x2D\n    MPU6050_RA_I2C_SLV3_ADDR = 0x2E\n    MPU6050_RA_I2C_SLV3_REG = 0x2F\n    MPU6050_RA_I2C_SLV3_CTRL = 0x30\n    MPU6050_RA_I2C_SLV4_ADDR = 0x31\n    MPU6050_RA_I2C_SLV4_REG = 0x32\n    MPU6050_RA_I2C_SLV4_DO = 0x33\n    MPU6050_RA_I2C_SLV4_CTRL = 0x34\n    MPU6050_RA_I2C_SLV4_DI = 0x35\n    MPU6050_RA_I2C_MST_STATUS = 0x36\n    MPU6050_RA_INT_PIN_CFG = 0x37\n    MPU6050_RA_INT_ENABLE = 0x38\n    MPU6050_RA_DMP_INT_STATUS = 0x39\n    MPU6050_RA_INT_STATUS = 0x3A\n    MPU6050_RA_ACCEL_XOUT_H = 0x3B\n    MPU6050_RA_ACCEL_XOUT_L = 0x3C\n    MPU6050_RA_ACCEL_YOUT_H = 0x3D\n    MPU6050_RA_ACCEL_YOUT_L = 0x3E\n    MPU6050_RA_ACCEL_ZOUT_H = 0x3F\n    MPU6050_RA_ACCEL_ZOUT_L = 0x40\n    MPU6050_RA_TEMP_OUT_H = 0x41\n    MPU6050_RA_TEMP_OUT_L = 0x42\n    MPU6050_RA_GYRO_XOUT_H = 0x43\n    MPU6050_RA_GYRO_XOUT_L = 0x44\n    MPU6050_RA_GYRO_YOUT_H = 0x45\n    MPU6050_RA_GYRO_YOUT_L = 0x46\n    MPU6050_RA_GYRO_ZOUT_H = 0x47\n    MPU6050_RA_GYRO_ZOUT_L = 0x48\n    MPU6050_RA_EXT_SENS_DATA_00 = 0x49\n    MPU6050_RA_EXT_SENS_DATA_01 = 0x4A\n    MPU6050_RA_EXT_SENS_DATA_02 = 0x4B\n    MPU6050_RA_EXT_SENS_DATA_03 = 0x4C\n    MPU6050_RA_EXT_SENS_DATA_04 = 0x4D\n    MPU6050_RA_EXT_SENS_DATA_05 = 0x4E\n    MPU6050_RA_EXT_SENS_DATA_06 = 0x4F\n    MPU6050_RA_EXT_SENS_DATA_07 = 0x50\n    MPU6050_RA_EXT_SENS_DATA_08 = 0x51\n    MPU6050_RA_EXT_SENS_DATA_09 = 0x52\n    MPU6050_RA_EXT_SENS_DATA_10 = 0x53\n    MPU6050_RA_EXT_SENS_DATA_11 = 0x54\n    MPU6050_RA_EXT_SENS_DATA_12 = 0x55\n    MPU6050_RA_EXT_SENS_DATA_13 = 0x56\n    MPU6050_RA_EXT_SENS_DATA_14 = 0x57\n    MPU6050_RA_EXT_SENS_DATA_15 = 0x58\n    MPU6050_RA_EXT_SENS_DATA_16 = 0x59\n    MPU6050_RA_EXT_SENS_DATA_17 = 0x5A\n    MPU6050_RA_EXT_SENS_DATA_18 = 0x5B\n    MPU6050_RA_EXT_SENS_DATA_19 = 0x5C\n    MPU6050_RA_EXT_SENS_DATA_20 = 0x5D\n    MPU6050_RA_EXT_SENS_DATA_21 = 0x5E\n    MPU6050_RA_EXT_SENS_DATA_22 = 0x5F\n    MPU6050_RA_EXT_SENS_DATA_23 = 0x60\n    MPU6050_RA_MOT_DETECT_STATUS = 0x61\n    MPU6050_RA_I2C_SLV0_DO = 0x63\n    MPU6050_RA_I2C_SLV1_DO = 0x64\n    MPU6050_RA_I2C_SLV2_DO = 0x65\n    MPU6050_RA_I2C_SLV3_DO = 0x66\n    MPU6050_RA_I2C_MST_DELAY_CTRL = 0x67\n    MPU6050_RA_SIGNAL_PATH_RESET = 0x68\n    MPU6050_RA_MOT_DETECT_CTRL = 0x69\n    MPU6050_RA_USER_CTRL = 0x6A\n    MPU6050_RA_PWR_MGMT_1 = 0x6B\n    MPU6050_RA_PWR_MGMT_2 = 0x6C\n    MPU6050_RA_BANK_SEL = 0x6D\n    MPU6050_RA_MEM_START_ADDR = 0x6E\n    MPU6050_RA_MEM_R_W = 0x6F\n    MPU6050_RA_DMP_CFG_1 = 0x70\n    MPU6050_RA_DMP_CFG_2 = 0x71\n    MPU6050_RA_FIFO_COUNTH = 0x72\n    MPU6050_RA_FIFO_COUNTL = 0x73\n    MPU6050_RA_FIFO_R_W = 0x74\n    MPU6050_RA_WHO_AM_I = 0x75\n    MPU6050_TC_PWR_MODE_BIT = 7\n    MPU6050_TC_OFFSET_BIT = 6\n    MPU6050_TC_OFFSET_LENGTH = 6\n    MPU6050_TC_OTP_BNK_VLD_BIT = 0\n    MPU6050_VDDIO_LEVEL_VLOGIC = 0\n    MPU6050_VDDIO_LEVEL_VDD = 1\n    MPU6050_CFG_EXT_SYNC_SET_BIT = 5\n    MPU6050_CFG_EXT_SYNC_SET_LENGTH = 3\n    MPU6050_CFG_DLPF_CFG_BIT = 2\n    MPU6050_CFG_DLPF_CFG_LENGTH = 3\n    MPU6050_EXT_SYNC_DISABLED = 0x0\n    MPU6050_EXT_SYNC_TEMP_OUT_L = 0x1\n    MPU6050_EXT_SYNC_GYRO_XOUT_L = 0x2\n    MPU6050_EXT_SYNC_GYRO_YOUT_L = 0x3\n    MPU6050_EXT_SYNC_GYRO_ZOUT_L = 0x4\n    MPU6050_EXT_SYNC_ACCEL_XOUT_L = 0x5\n    MPU6050_EXT_SYNC_ACCEL_YOUT_L = 0x6\n    MPU6050_EXT_SYNC_ACCEL_ZOUT_L = 0x7\n    MPU6050_DLPF_BW_256 = 0x00\n    MPU6050_DLPF_BW_188 = 0x01\n    MPU6050_DLPF_BW_98 = 0x02\n    MPU6050_DLPF_BW_42 = 0x03\n    MPU6050_DLPF_BW_20 = 0x04\n    MPU6050_DLPF_BW_10 = 0x05\n    MPU6050_DLPF_BW_5 = 0x06\n    MPU6050_GCONFIG_FS_SEL_BIT = 4\n    MPU6050_GCONFIG_FS_SEL_LENGTH = 2\n    MPU6050_GYRO_FS_250 = 0x00\n    MPU6050_GYRO_FS_500 = 0x01\n    MPU6050_GYRO_FS_1000 = 0x02\n    MPU6050_GYRO_FS_2000 = 0x03\n    MPU6050_ACONFIG_XA_ST_BIT = 7\n    MPU6050_ACONFIG_YA_ST_BIT = 6\n    MPU6050_ACONFIG_ZA_ST_BIT = 5\n    MPU6050_ACONFIG_AFS_SEL_BIT = 4\n    MPU6050_ACONFIG_AFS_SEL_LENGTH = 2\n    MPU6050_ACONFIG_ACCEL_HPF_BIT = 2\n    MPU6050_ACONFIG_ACCEL_HPF_LENGTH = 3\n    MPU6050_ACCEL_FS_2 = 0x00\n    MPU6050_ACCEL_FS_4 = 0x01\n    MPU6050_ACCEL_FS_8 = 0x02\n    MPU6050_ACCEL_FS_16 = 0x03\n    MPU6050_DHPF_RESET = 0x00\n    MPU6050_DHPF_5 = 0x01\n    MPU6050_DHPF_2P5 = 0x02\n    MPU6050_DHPF_1P25 = 0x03\n    MPU6050_DHPF_0P63 = 0x04\n    MPU6050_DHPF_HOLD = 0x07\n    MPU6050_TEMP_FIFO_EN_BIT = 7\n    MPU6050_XG_FIFO_EN_BIT = 6\n    MPU6050_YG_FIFO_EN_BIT = 5\n    MPU6050_ZG_FIFO_EN_BIT = 4\n    MPU6050_ACCEL_FIFO_EN_BIT = 3\n    MPU6050_SLV2_FIFO_EN_BIT = 2\n    MPU6050_SLV1_FIFO_EN_BIT = 1\n    MPU6050_SLV0_FIFO_EN_BIT = 0\n    MPU6050_MULT_MST_EN_BIT = 7\n    MPU6050_WAIT_FOR_ES_BIT = 6\n    MPU6050_SLV_3_FIFO_EN_BIT = 5\n    MPU6050_I2C_MST_P_NSR_BIT = 4\n    MPU6050_I2C_MST_CLK_BIT = 3\n    MPU6050_I2C_MST_CLK_LENGTH = 4\n    MPU6050_CLOCK_DIV_348 = 0x0\n    MPU6050_CLOCK_DIV_333 = 0x1\n    MPU6050_CLOCK_DIV_320 = 0x2\n    MPU6050_CLOCK_DIV_308 = 0x3\n    MPU6050_CLOCK_DIV_296 = 0x4\n    MPU6050_CLOCK_DIV_286 = 0x5\n    MPU6050_CLOCK_DIV_276 = 0x6\n    MPU6050_CLOCK_DIV_267 = 0x7\n    MPU6050_CLOCK_DIV_258 = 0x8\n    MPU6050_CLOCK_DIV_500 = 0x9\n    MPU6050_CLOCK_DIV_471 = 0xA\n    MPU6050_CLOCK_DIV_444 = 0xB\n    MPU6050_CLOCK_DIV_421 = 0xC\n    MPU6050_CLOCK_DIV_400 = 0xD\n    MPU6050_CLOCK_DIV_381 = 0xE\n    MPU6050_CLOCK_DIV_364 = 0xF\n    MPU6050_I2C_SLV_RW_BIT = 7\n    MPU6050_I2C_SLV_ADDR_BIT = 6\n    MPU6050_I2C_SLV_ADDR_LENGTH = 7\n    MPU6050_I2C_SLV_EN_BIT = 7\n    MPU6050_I2C_SLV_BYTE_SW_BIT = 6\n    MPU6050_I2C_SLV_REG_DIS_BIT = 5\n    MPU6050_I2C_SLV_GRP_BIT = 4\n    MPU6050_I2C_SLV_LEN_BIT = 3\n    MPU6050_I2C_SLV_LEN_LENGTH = 4\n    MPU6050_I2C_SLV4_RW_BIT = 7\n    MPU6050_I2C_SLV4_ADDR_BIT = 6\n    MPU6050_I2C_SLV4_ADDR_LENGTH = 7\n    MPU6050_I2C_SLV4_EN_BIT = 7\n    MPU6050_I2C_SLV4_INT_EN_BIT = 6\n    MPU6050_I2C_SLV4_REG_DIS_BIT = 5\n    MPU6050_I2C_SLV4_MST_DLY_BIT = 4\n    MPU6050_I2C_SLV4_MST_DLY_LENGTH = 5\n    MPU6050_MST_PASS_THROUGH_BIT = 7\n    MPU6050_MST_I2C_SLV4_DONE_BIT = 6\n    MPU6050_MST_I2C_LOST_ARB_BIT = 5\n    MPU6050_MST_I2C_SLV4_NACK_BIT = 4\n    MPU6050_MST_I2C_SLV3_NACK_BIT = 3\n    MPU6050_MST_I2C_SLV2_NACK_BIT = 2\n    MPU6050_MST_I2C_SLV1_NACK_BIT = 1\n    MPU6050_MST_I2C_SLV0_NACK_BIT = 0\n    MPU6050_INTCFG_INT_LEVEL_BIT = 7\n    MPU6050_INTCFG_INT_OPEN_BIT = 6\n    MPU6050_INTCFG_LATCH_INT_EN_BIT = 5\n    MPU6050_INTCFG_INT_RD_CLEAR_BIT = 4\n    MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT = 3\n    MPU6050_INTCFG_FSYNC_INT_EN_BIT = 2\n    MPU6050_INTCFG_I2C_BYPASS_EN_BIT = 1\n    MPU6050_INTCFG_CLKOUT_EN_BIT = 0\n    MPU6050_INTMODE_ACTIVEHIGH = 0x00\n    MPU6050_INTMODE_ACTIVELOW = 0x01\n    MPU6050_INTDRV_PUSHPULL = 0x00\n    MPU6050_INTDRV_OPENDRAIN = 0x01\n    MPU6050_INTLATCH_50USPULSE = 0x00\n    MPU6050_INTLATCH_WAITCLEAR = 0x01\n    MPU6050_INTCLEAR_STATUSREAD = 0x00\n    MPU6050_INTCLEAR_ANYREAD = 0x01\n    MPU6050_INTERRUPT_FF_BIT = 7\n    MPU6050_INTERRUPT_MOT_BIT = 6\n    MPU6050_INTERRUPT_ZMOT_BIT = 5\n    MPU6050_INTERRUPT_FIFO_OFLOW_BIT = 4\n    MPU6050_INTERRUPT_I2C_MST_INT_BIT = 3\n    MPU6050_INTERRUPT_PLL_RDY_INT_BIT = 2\n    MPU6050_INTERRUPT_DMP_INT_BIT = 1\n    MPU6050_INTERRUPT_DATA_RDY_BIT = 0\n    # TODO: figure out what these actually do\n    # UMPL source code is not very obivous\n    MPU6050_DMPINT_5_BIT = 5\n    MPU6050_DMPINT_4_BIT = 4\n    MPU6050_DMPINT_3_BIT = 3\n    MPU6050_DMPINT_2_BIT = 2\n    MPU6050_DMPINT_1_BIT = 1\n    MPU6050_DMPINT_0_BIT = 0\n    MPU6050_MOTION_MOT_XNEG_BIT = 7\n    MPU6050_MOTION_MOT_XPOS_BIT = 6\n    MPU6050_MOTION_MOT_YNEG_BIT = 5\n    MPU6050_MOTION_MOT_YPOS_BIT = 4\n    MPU6050_MOTION_MOT_ZNEG_BIT = 3\n    MPU6050_MOTION_MOT_ZPOS_BIT = 2\n    MPU6050_MOTION_MOT_ZRMOT_BIT = 0\n    MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT = 7\n    MPU6050_DELAYCTRL_I2C_SLV4_DLY_EN_BIT = 4\n    MPU6050_DELAYCTRL_I2C_SLV3_DLY_EN_BIT = 3\n    MPU6050_DELAYCTRL_I2C_SLV2_DLY_EN_BIT = 2\n    MPU6050_DELAYCTRL_I2C_SLV1_DLY_EN_BIT = 1\n    MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT = 0\n    MPU6050_PATHRESET_GYRO_RESET_BIT = 2\n    MPU6050_PATHRESET_ACCEL_RESET_BIT = 1\n    MPU6050_PATHRESET_TEMP_RESET_BIT = 0\n    MPU6050_DETECT_ACCEL_ON_DELAY_BIT = 5\n    MPU6050_DETECT_ACCEL_ON_DELAY_LENGTH = 2\n    MPU6050_DETECT_FF_COUNT_BIT = 3\n    MPU6050_DETECT_FF_COUNT_LENGTH = 2\n    MPU6050_DETECT_MOT_COUNT_BIT = 1\n    MPU6050_DETECT_MOT_COUNT_LENGTH = 2\n    MPU6050_DETECT_DECREMENT_RESET = 0x0\n    MPU6050_DETECT_DECREMENT_1 = 0x1\n    MPU6050_DETECT_DECREMENT_2 = 0x2\n    MPU6050_DETECT_DECREMENT_4 = 0x3\n    MPU6050_USERCTRL_DMP_EN_BIT = 7\n    MPU6050_USERCTRL_FIFO_EN_BIT = 6\n    MPU6050_USERCTRL_I2C_MST_EN_BIT = 5\n    MPU6050_USERCTRL_I2C_IF_DIS_BIT = 4\n    MPU6050_USERCTRL_DMP_RESET_BIT = 3\n    MPU6050_USERCTRL_FIFO_RESET_BIT = 2\n    MPU6050_USERCTRL_I2C_MST_RESET_BIT = 1\n    MPU6050_USERCTRL_SIG_COND_RESET_BIT = 0\n    MPU6050_PWR1_DEVICE_RESET_BIT = 7\n    MPU6050_PWR1_SLEEP_BIT = 6\n    MPU6050_PWR1_CYCLE_BIT = 5\n    MPU6050_PWR1_TEMP_DIS_BIT = 3\n    MPU6050_PWR1_CLKSEL_BIT = 2\n    MPU6050_PWR1_CLKSEL_LENGTH = 3\n    MPU6050_CLOCK_INTERNAL = 0x00\n    MPU6050_CLOCK_PLL_XGYRO = 0x01\n    MPU6050_CLOCK_PLL_YGYRO = 0x02\n    MPU6050_CLOCK_PLL_ZGYRO = 0x03\n    MPU6050_CLOCK_PLL_EXT32K = 0x04\n    MPU6050_CLOCK_PLL_EXT19M = 0x05\n    MPU6050_CLOCK_KEEP_RESET = 0x07\n    MPU6050_PWR2_LP_WAKE_CTRL_BIT = 7\n    MPU6050_PWR2_LP_WAKE_CTRL_LENGTH = 2\n    MPU6050_PWR2_STBY_XA_BIT = 5\n    MPU6050_PWR2_STBY_YA_BIT = 4\n    MPU6050_PWR2_STBY_ZA_BIT = 3\n    MPU6050_PWR2_STBY_XG_BIT = 2\n    MPU6050_PWR2_STBY_YG_BIT = 1\n    MPU6050_PWR2_STBY_ZG_BIT = 0\n    MPU6050_WAKE_FREQ_1P25 = 0x0\n    MPU6050_WAKE_FREQ_2P5 = 0x1\n    MPU6050_WAKE_FREQ_5 = 0x2\n    MPU6050_WAKE_FREQ_10 = 0x3\n    MPU6050_BANKSEL_PRFTCH_EN_BIT = 6\n    MPU6050_BANKSEL_CFG_USER_BANK_BIT = 5\n    MPU6050_BANKSEL_MEM_SEL_BIT = 4\n    MPU6050_BANKSEL_MEM_SEL_LENGTH = 5\n    MPU6050_WHO_AM_I_BIT = 6\n    MPU6050_WHO_AM_I_LENGTH = 6\n    # DMP\n    MPU6050_DMP_MEMORY_BANKS = 8\n    MPU6050_DMP_MEMORY_BANK_SIZE = 256\n    MPU6050_DMP_MEMORY_CHUNK_SIZE = 16\n    MPU6050_DMP_CODE_SIZE = 1929    # dmpMemory[]\n    MPU6050_DMP_CONFIG_SIZE = 192     # dmpConfig[]\n    MPU6050_DMP_UPDATES_SIZE = 47      # dmpUpdates[]\n    # ====================================================================================================\n    # | Default MotionApps v2.0 42-byte FIFO packet structure:\n    #                             |\n    # |\n    #                             |\n    # | [QUAT W][      ][QUAT X][      ][QUAT Y][      ][QUAT Z][      ][GYRO X][      ][GYRO Y][      ] |\n    # |   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  |\n    # |                                                                                                  |\n    # | [GYRO Z][      ][ACC X ][      ][ACC Y ][      ][ACC Z ][      ][      ]                         |\n    # |  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41                          |\n    # ====================================================================================================\n    # this block of memory gets written to the MPU on start-up, and it seems\n    # to be volatile memory, so it has to be done each time (it only takes\n    # ~1 second though)\n    dmpMemory = [\n        # bank 0, 256 bytes\n        0xFB, 0x00, 0x00, 0x3E, 0x00, 0x0B, 0x00, 0x36, 0x00, 0x01, 0x00, 0x02,\n        0x00, 0x03, 0x00, 0x00,\n        0x00, 0x65, 0x00, 0x54, 0xFF, 0xEF, 0x00, 0x00, 0xFA, 0x80, 0x00, 0x0B,\n        0x12, 0x82, 0x00, 0x01,\n        0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x28, 0x00, 0x00, 0xFF, 0xFF, 0x45, 0x81, 0xFF, 0xFF, 0xFA, 0x72,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x7F, 0xFF,\n        0xFF, 0xFE, 0x80, 0x01,\n        0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x3E, 0x03, 0x30, 0x40, 0x00, 0x00, 0x00, 0x02, 0xCA, 0xE3, 0x09,\n        0x3E, 0x80, 0x00, 0x00,\n        0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,\n        0x60, 0x00, 0x00, 0x00,\n        0x41, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x2A, 0x00, 0x00, 0x16, 0x55,\n        0x00, 0x00, 0x21, 0x82,\n        0xFD, 0x87, 0x26, 0x50, 0xFD, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00,\n        0x00, 0x05, 0x80, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,\n        0x00, 0x03, 0x00, 0x00,\n        0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6F, 0x00, 0x02, 0x65, 0x32,\n        0x00, 0x00, 0x5E, 0xC0,\n        0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0xFB, 0x8C, 0x6F, 0x5D, 0xFD, 0x5D, 0x08, 0xD9, 0x00, 0x7C, 0x73, 0x3B,\n        0x00, 0x6C, 0x12, 0xCC,\n        0x32, 0x00, 0x13, 0x9D, 0x32, 0x00, 0xD0, 0xD6, 0x32, 0x00, 0x08, 0x00,\n        0x40, 0x00, 0x01, 0xF4,\n        0xFF, 0xE6, 0x80, 0x79, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xD6,\n        0x00, 0x00, 0x27, 0x10,\n        # bank 1, 256 bytes\n        0xFB, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,\n        0x01, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0xFA, 0x36, 0xFF, 0xBC, 0x30, 0x8E, 0x00, 0x05, 0xFB, 0xF0,\n        0xFF, 0xD9, 0x5B, 0xC8,\n        0xFF, 0xD0, 0x9A, 0xBE, 0x00, 0x00, 0x10, 0xA9, 0xFF, 0xF4, 0x1E, 0xB2,\n        0x00, 0xCE, 0xBB, 0xF7,\n        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02,\n        0x02, 0x00, 0x00, 0x0C,\n        0xFF, 0xC2, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xCF, 0x80, 0x00,\n        0x40, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,\n        0x00, 0x00, 0x00, 0x14,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x03, 0x3F, 0x68, 0xB6, 0x79, 0x35, 0x28, 0xBC,\n        0xC6, 0x7E, 0xD1, 0x6C,\n        0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x6A,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0,\n        0x00, 0x00, 0x00, 0x30,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x25, 0x4D, 0x00, 0x2F, 0x70, 0x6D, 0x00, 0x00, 0x05, 0xAE,\n        0x00, 0x0C, 0x02, 0xD0,\n        # bank 2, 256 bytes\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x54, 0xFF, 0xEF, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x01, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00,\n        0x00, 0x00, 0x01, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00,\n        0xFF, 0xEF, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x40, 0x00, 0x00, 0x00,\n        0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        # bank 3, 256 bytes\n        0xD8, 0xDC, 0xBA, 0xA2, 0xF1, 0xDE, 0xB2, 0xB8, 0xB4, 0xA8, 0x81, 0x91,\n        0xF7, 0x4A, 0x90, 0x7F,\n        0x91, 0x6A, 0xF3, 0xF9, 0xDB, 0xA8, 0xF9, 0xB0, 0xBA, 0xA0, 0x80, 0xF2,\n        0xCE, 0x81, 0xF3, 0xC2,\n        0xF1, 0xC1, 0xF2, 0xC3, 0xF3, 0xCC, 0xA2, 0xB2, 0x80, 0xF1, 0xC6, 0xD8,\n        0x80, 0xBA, 0xA7, 0xDF,\n        0xDF, 0xDF, 0xF2, 0xA7, 0xC3, 0xCB, 0xC5, 0xB6, 0xF0, 0x87, 0xA2, 0x94,\n        0x24, 0x48, 0x70, 0x3C,\n        0x95, 0x40, 0x68, 0x34, 0x58, 0x9B, 0x78, 0xA2, 0xF1, 0x83, 0x92, 0x2D,\n        0x55, 0x7D, 0xD8, 0xB1,\n        0xB4, 0xB8, 0xA1, 0xD0, 0x91, 0x80, 0xF2, 0x70, 0xF3, 0x70, 0xF2, 0x7C,\n        0x80, 0xA8, 0xF1, 0x01,\n        0xB0, 0x98, 0x87, 0xD9, 0x43, 0xD8, 0x86, 0xC9, 0x88, 0xBA, 0xA1, 0xF2,\n        0x0E, 0xB8, 0x97, 0x80,\n        0xF1, 0xA9, 0xDF, 0xDF, 0xDF, 0xAA, 0xDF, 0xDF, 0xDF, 0xF2, 0xAA, 0xC5,\n        0xCD, 0xC7, 0xA9, 0x0C,\n        0xC9, 0x2C, 0x97, 0x97, 0x97, 0x97, 0xF1, 0xA9, 0x89, 0x26, 0x46, 0x66,\n        0xB0, 0xB4, 0xBA, 0x80,\n        0xAC, 0xDE, 0xF2, 0xCA, 0xF1, 0xB2, 0x8C, 0x02, 0xA9, 0xB6, 0x98, 0x00,\n        0x89, 0x0E, 0x16, 0x1E,\n        0xB8, 0xA9, 0xB4, 0x99, 0x2C, 0x54, 0x7C, 0xB0, 0x8A, 0xA8, 0x96, 0x36,\n        0x56, 0x76, 0xF1, 0xB9,\n        0xAF, 0xB4, 0xB0, 0x83, 0xC0, 0xB8, 0xA8, 0x97, 0x11, 0xB1, 0x8F, 0x98,\n        0xB9, 0xAF, 0xF0, 0x24,\n        0x08, 0x44, 0x10, 0x64, 0x18, 0xF1, 0xA3, 0x29, 0x55, 0x7D, 0xAF, 0x83,\n        0xB5, 0x93, 0xAF, 0xF0,\n        0x00, 0x28, 0x50, 0xF1, 0xA3, 0x86, 0x9F, 0x61, 0xA6, 0xDA, 0xDE, 0xDF,\n        0xD9, 0xFA, 0xA3, 0x86,\n        0x96, 0xDB, 0x31, 0xA6, 0xD9, 0xF8, 0xDF, 0xBA, 0xA6, 0x8F, 0xC2, 0xC5,\n        0xC7, 0xB2, 0x8C, 0xC1,\n        0xB8, 0xA2, 0xDF, 0xDF, 0xDF, 0xA3, 0xDF, 0xDF, 0xDF, 0xD8, 0xD8, 0xF1,\n        0xB8, 0xA8, 0xB2, 0x86,\n        # bank 4, 256 bytes\n        0xB4, 0x98, 0x0D, 0x35, 0x5D, 0xB8, 0xAA, 0x98, 0xB0, 0x87, 0x2D, 0x35,\n        0x3D, 0xB2, 0xB6, 0xBA,\n        0xAF, 0x8C, 0x96, 0x19, 0x8F, 0x9F, 0xA7, 0x0E, 0x16, 0x1E, 0xB4, 0x9A,\n        0xB8, 0xAA, 0x87, 0x2C,\n        0x54, 0x7C, 0xB9, 0xA3, 0xDE, 0xDF, 0xDF, 0xA3, 0xB1, 0x80, 0xF2, 0xC4,\n        0xCD, 0xC9, 0xF1, 0xB8,\n        0xA9, 0xB4, 0x99, 0x83, 0x0D, 0x35, 0x5D, 0x89, 0xB9, 0xA3, 0x2D, 0x55,\n        0x7D, 0xB5, 0x93, 0xA3,\n        0x0E, 0x16, 0x1E, 0xA9, 0x2C, 0x54, 0x7C, 0xB8, 0xB4, 0xB0, 0xF1, 0x97,\n        0x83, 0xA8, 0x11, 0x84,\n        0xA5, 0x09, 0x98, 0xA3, 0x83, 0xF0, 0xDA, 0x24, 0x08, 0x44, 0x10, 0x64,\n        0x18, 0xD8, 0xF1, 0xA5,\n        0x29, 0x55, 0x7D, 0xA5, 0x85, 0x95, 0x02, 0x1A, 0x2E, 0x3A, 0x56, 0x5A,\n        0x40, 0x48, 0xF9, 0xF3,\n        0xA3, 0xD9, 0xF8, 0xF0, 0x98, 0x83, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18,\n        0x97, 0x82, 0xA8, 0xF1,\n        0x11, 0xF0, 0x98, 0xA2, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xDA, 0xF3,\n        0xDE, 0xD8, 0x83, 0xA5,\n        0x94, 0x01, 0xD9, 0xA3, 0x02, 0xF1, 0xA2, 0xC3, 0xC5, 0xC7, 0xD8, 0xF1,\n        0x84, 0x92, 0xA2, 0x4D,\n        0xDA, 0x2A, 0xD8, 0x48, 0x69, 0xD9, 0x2A, 0xD8, 0x68, 0x55, 0xDA, 0x32,\n        0xD8, 0x50, 0x71, 0xD9,\n        0x32, 0xD8, 0x70, 0x5D, 0xDA, 0x3A, 0xD8, 0x58, 0x79, 0xD9, 0x3A, 0xD8,\n        0x78, 0x93, 0xA3, 0x4D,\n        0xDA, 0x2A, 0xD8, 0x48, 0x69, 0xD9, 0x2A, 0xD8, 0x68, 0x55, 0xDA, 0x32,\n        0xD8, 0x50, 0x71, 0xD9,\n        0x32, 0xD8, 0x70, 0x5D, 0xDA, 0x3A, 0xD8, 0x58, 0x79, 0xD9, 0x3A, 0xD8,\n        0x78, 0xA8, 0x8A, 0x9A,\n        0xF0, 0x28, 0x50, 0x78, 0x9E, 0xF3, 0x88, 0x18, 0xF1, 0x9F, 0x1D, 0x98,\n        0xA8, 0xD9, 0x08, 0xD8,\n        0xC8, 0x9F, 0x12, 0x9E, 0xF3, 0x15, 0xA8, 0xDA, 0x12, 0x10, 0xD8, 0xF1,\n        0xAF, 0xC8, 0x97, 0x87,\n        # bank 5, 256 bytes\n        0x34, 0xB5, 0xB9, 0x94, 0xA4, 0x21, 0xF3, 0xD9, 0x22, 0xD8, 0xF2, 0x2D,\n        0xF3, 0xD9, 0x2A, 0xD8,\n        0xF2, 0x35, 0xF3, 0xD9, 0x32, 0xD8, 0x81, 0xA4, 0x60, 0x60, 0x61, 0xD9,\n        0x61, 0xD8, 0x6C, 0x68,\n        0x69, 0xD9, 0x69, 0xD8, 0x74, 0x70, 0x71, 0xD9, 0x71, 0xD8, 0xB1, 0xA3,\n        0x84, 0x19, 0x3D, 0x5D,\n        0xA3, 0x83, 0x1A, 0x3E, 0x5E, 0x93, 0x10, 0x30, 0x81, 0x10, 0x11, 0xB8,\n        0xB0, 0xAF, 0x8F, 0x94,\n        0xF2, 0xDA, 0x3E, 0xD8, 0xB4, 0x9A, 0xA8, 0x87, 0x29, 0xDA, 0xF8, 0xD8,\n        0x87, 0x9A, 0x35, 0xDA,\n        0xF8, 0xD8, 0x87, 0x9A, 0x3D, 0xDA, 0xF8, 0xD8, 0xB1, 0xB9, 0xA4, 0x98,\n        0x85, 0x02, 0x2E, 0x56,\n        0xA5, 0x81, 0x00, 0x0C, 0x14, 0xA3, 0x97, 0xB0, 0x8A, 0xF1, 0x2D, 0xD9,\n        0x28, 0xD8, 0x4D, 0xD9,\n        0x48, 0xD8, 0x6D, 0xD9, 0x68, 0xD8, 0xB1, 0x84, 0x0D, 0xDA, 0x0E, 0xD8,\n        0xA3, 0x29, 0x83, 0xDA,\n        0x2C, 0x0E, 0xD8, 0xA3, 0x84, 0x49, 0x83, 0xDA, 0x2C, 0x4C, 0x0E, 0xD8,\n        0xB8, 0xB0, 0xA8, 0x8A,\n        0x9A, 0xF5, 0x20, 0xAA, 0xDA, 0xDF, 0xD8, 0xA8, 0x40, 0xAA, 0xD0, 0xDA,\n        0xDE, 0xD8, 0xA8, 0x60,\n        0xAA, 0xDA, 0xD0, 0xDF, 0xD8, 0xF1, 0x97, 0x86, 0xA8, 0x31, 0x9B, 0x06,\n        0x99, 0x07, 0xAB, 0x97,\n        0x28, 0x88, 0x9B, 0xF0, 0x0C, 0x20, 0x14, 0x40, 0xB8, 0xB0, 0xB4, 0xA8,\n        0x8C, 0x9C, 0xF0, 0x04,\n        0x28, 0x51, 0x79, 0x1D, 0x30, 0x14, 0x38, 0xB2, 0x82, 0xAB, 0xD0, 0x98,\n        0x2C, 0x50, 0x50, 0x78,\n        0x78, 0x9B, 0xF1, 0x1A, 0xB0, 0xF0, 0x8A, 0x9C, 0xA8, 0x29, 0x51, 0x79,\n        0x8B, 0x29, 0x51, 0x79,\n        0x8A, 0x24, 0x70, 0x59, 0x8B, 0x20, 0x58, 0x71, 0x8A, 0x44, 0x69, 0x38,\n        0x8B, 0x39, 0x40, 0x68,\n        0x8A, 0x64, 0x48, 0x31, 0x8B, 0x30, 0x49, 0x60, 0xA5, 0x88, 0x20, 0x09,\n        0x71, 0x58, 0x44, 0x68,\n        # bank 6, 256 bytes\n        0x11, 0x39, 0x64, 0x49, 0x30, 0x19, 0xF1, 0xAC, 0x00, 0x2C, 0x54, 0x7C,\n        0xF0, 0x8C, 0xA8, 0x04,\n        0x28, 0x50, 0x78, 0xF1, 0x88, 0x97, 0x26, 0xA8, 0x59, 0x98, 0xAC, 0x8C,\n        0x02, 0x26, 0x46, 0x66,\n        0xF0, 0x89, 0x9C, 0xA8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69,\n        0x38, 0x64, 0x48, 0x31,\n        0xA9, 0x88, 0x09, 0x20, 0x59, 0x70, 0xAB, 0x11, 0x38, 0x40, 0x69, 0xA8,\n        0x19, 0x31, 0x48, 0x60,\n        0x8C, 0xA8, 0x3C, 0x41, 0x5C, 0x20, 0x7C, 0x00, 0xF1, 0x87, 0x98, 0x19,\n        0x86, 0xA8, 0x6E, 0x76,\n        0x7E, 0xA9, 0x99, 0x88, 0x2D, 0x55, 0x7D, 0x9E, 0xB9, 0xA3, 0x8A, 0x22,\n        0x8A, 0x6E, 0x8A, 0x56,\n        0x8A, 0x5E, 0x9F, 0xB1, 0x83, 0x06, 0x26, 0x46, 0x66, 0x0E, 0x2E, 0x4E,\n        0x6E, 0x9D, 0xB8, 0xAD,\n        0x00, 0x2C, 0x54, 0x7C, 0xF2, 0xB1, 0x8C, 0xB4, 0x99, 0xB9, 0xA3, 0x2D,\n        0x55, 0x7D, 0x81, 0x91,\n        0xAC, 0x38, 0xAD, 0x3A, 0xB5, 0x83, 0x91, 0xAC, 0x2D, 0xD9, 0x28, 0xD8,\n        0x4D, 0xD9, 0x48, 0xD8,\n        0x6D, 0xD9, 0x68, 0xD8, 0x8C, 0x9D, 0xAE, 0x29, 0xD9, 0x04, 0xAE, 0xD8,\n        0x51, 0xD9, 0x04, 0xAE,\n        0xD8, 0x79, 0xD9, 0x04, 0xD8, 0x81, 0xF3, 0x9D, 0xAD, 0x00, 0x8D, 0xAE,\n        0x19, 0x81, 0xAD, 0xD9,\n        0x01, 0xD8, 0xF2, 0xAE, 0xDA, 0x26, 0xD8, 0x8E, 0x91, 0x29, 0x83, 0xA7,\n        0xD9, 0xAD, 0xAD, 0xAD,\n        0xAD, 0xF3, 0x2A, 0xD8, 0xD8, 0xF1, 0xB0, 0xAC, 0x89, 0x91, 0x3E, 0x5E,\n        0x76, 0xF3, 0xAC, 0x2E,\n        0x2E, 0xF1, 0xB1, 0x8C, 0x5A, 0x9C, 0xAC, 0x2C, 0x28, 0x28, 0x28, 0x9C,\n        0xAC, 0x30, 0x18, 0xA8,\n        0x98, 0x81, 0x28, 0x34, 0x3C, 0x97, 0x24, 0xA7, 0x28, 0x34, 0x3C, 0x9C,\n        0x24, 0xF2, 0xB0, 0x89,\n        0xAC, 0x91, 0x2C, 0x4C, 0x6C, 0x8A, 0x9B, 0x2D, 0xD9, 0xD8, 0xD8, 0x51,\n        0xD9, 0xD8, 0xD8, 0x79,\n        # bank 7, 138 bytes (remainder)\n        0xD9, 0xD8, 0xD8, 0xF1, 0x9E, 0x88, 0xA3, 0x31, 0xDA, 0xD8, 0xD8, 0x91,\n        0x2D, 0xD9, 0x28, 0xD8,\n        0x4D, 0xD9, 0x48, 0xD8, 0x6D, 0xD9, 0x68, 0xD8, 0xB1, 0x83, 0x93, 0x35,\n        0x3D, 0x80, 0x25, 0xDA,\n        0xD8, 0xD8, 0x85, 0x69, 0xDA, 0xD8, 0xD8, 0xB4, 0x93, 0x81, 0xA3, 0x28,\n        0x34, 0x3C, 0xF3, 0xAB,\n        0x8B, 0xF8, 0xA3, 0x91, 0xB6, 0x09, 0xB4, 0xD9, 0xAB, 0xDE, 0xFA, 0xB0,\n        0x87, 0x9C, 0xB9, 0xA3,\n        0xDD, 0xF1, 0xA3, 0xA3, 0xA3, 0xA3, 0x95, 0xF1, 0xA3, 0xA3, 0xA3, 0x9D,\n        0xF1, 0xA3, 0xA3, 0xA3,\n        0xA3, 0xF2, 0xA3, 0xB4, 0x90, 0x80, 0xF2, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,\n        0xA3, 0xA3, 0xA3, 0xA3,\n        0xA3, 0xB2, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xB0, 0x87, 0xB5, 0x99,\n        0xF1, 0xA3, 0xA3, 0xA3,\n        0x98, 0xF1, 0xA3, 0xA3, 0xA3, 0xA3, 0x97, 0xA3, 0xA3, 0xA3, 0xA3, 0xF3,\n        0x9B, 0xA3, 0xA3, 0xDC,\n        0xB9, 0xA7, 0xF1, 0x26, 0x26, 0x26, 0xD8, 0xD8, 0xFF]\n    dmpConfig = [\n        # BANK    OFFSET  LENGTH  [DATA]\n        0x03, 0x7B, 0x03, 0x4C, 0xCD, 0x6C, # FCFG_1 inv_set_gyro_calibration\n        0x03, 0xAB, 0x03, 0x36, 0x56, 0x76, # FCFG_3 inv_set_gyro_calibration\n        0x00, 0x68, 0x04, 0x02, 0xCB, 0x47, 0xA2,\n        # D_0_104 inv_set_gyro_calibration\n        0x02, 0x18, 0x04, 0x00, 0x05, 0x8B, 0xC1,\n        # D_0_24 inv_set_gyro_calibration\n        0x01, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00,\n        # D_1_152 inv_set_accel_calibration\n        0x03, 0x7F, 0x06, 0x0C, 0xC9, 0x2C, 0x97, 0x97, 0x97,\n        # FCFG_2 inv_set_accel_calibration\n        0x03, 0x89, 0x03, 0x26, 0x46, 0x66, # FCFG_7 inv_set_accel_calibration\n        0x00, 0x6C, 0x02, 0x20, 0x00, # D_0_108 inv_set_accel_calibration\n        0x02, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00,\n        # CPASS_MTX_00 inv_set_compass_calibration\n        0x02, 0x44, 0x04, 0x00, 0x00, 0x00, 0x00, # CPASS_MTX_01\n        0x02, 0x48, 0x04, 0x00, 0x00, 0x00, 0x00, # CPASS_MTX_02\n        0x02, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, # CPASS_MTX_10\n        0x02, 0x50, 0x04, 0x00, 0x00, 0x00, 0x00, # CPASS_MTX_11\n        0x02, 0x54, 0x04, 0x00, 0x00, 0x00, 0x00, # CPASS_MTX_12\n        0x02, 0x58, 0x04, 0x00, 0x00, 0x00, 0x00, # CPASS_MTX_20\n        0x02, 0x5C, 0x04, 0x00, 0x00, 0x00, 0x00, # CPASS_MTX_21\n        0x02, 0xBC, 0x04, 0x00, 0x00, 0x00, 0x00, # CPASS_MTX_22\n        0x01, 0xEC, 0x04, 0x00, 0x00, 0x40, 0x00,\n        # D_1_236 inv_apply_endian_accel\n        0x03, 0x7F, 0x06, 0x0C, 0xC9, 0x2C, 0x97, 0x97, 0x97,\n        # FCFG_2 inv_set_mpu_sensors\n        0x04, 0x02, 0x03, 0x0D, 0x35, 0x5D,\n        # CFG_MOTION_BIAS inv_turn_on_bias_from_no_motion\n        0x04, 0x09, 0x04, 0x87, 0x2D, 0x35, 0x3D, # FCFG_5 inv_set_bias_update\n        0x00, 0xA3, 0x01, 0x00, # D_0_163 inv_set_dead_zone\n        # SPECIAL 0x01 = enable interrupts\n        0x00, 0x00, 0x00, 0x01, # SET INT_ENABLE at i=22, SPECIAL INSTRUCTION\n        0x07, 0x86, 0x01, 0xFE, # CFG_6 inv_set_fifo_interupt\n        0x07, 0x41, 0x05, 0xF1, 0x20, 0x28, 0x30, 0x38,\n        # CFG_8 inv_send_quaternion\n        0x07, 0x7E, 0x01, 0x30, # CFG_16 inv_set_footer\n        0x07, 0x46, 0x01, 0x9A, # CFG_GYRO_SOURCE inv_send_gyro\n        0x07, 0x47, 0x04, 0xF1, 0x28, 0x30, 0x38,\n        # CFG_9 inv_send_gyro -> inv_construct3_fifo\n        0x07, 0x6C, 0x04, 0xF1, 0x28, 0x30, 0x38,\n        # CFG_12 inv_send_accel -> inv_construct3_fifo\n        0x02, 0x16, 0x02, 0x00, 0x05                # D_0_22 inv_set_fifo_rate\n        # This very last 0x01 WAS a 0x09, which drops the FIFO rate down to\n        # 20 Hz. 0x07 is 25 Hz,\n        # 0x01 is 100Hz. Going faster than 100Hz (0x00=200Hz) tends to\n        # result in very noisy data.\n        # DMP output frequency is calculated easily using this equation: (\n        # 200Hz / (1 + value))\n        # It is important to make sure the host processor can keep up with\n        # reading and processing\n        # the FIFO output at the desired rate. Handling FIFO overflow\n        # cleanly is also a good idea.\n    ]\n    dmpUpdates = [\n        0x01, 0xB2, 0x02, 0xFF, 0xFF,\n        0x01, 0x90, 0x04, 0x09, 0x23, 0xA1, 0x35,\n        0x01, 0x6A, 0x02, 0x06, 0x00,\n        0x01, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x60, 0x04, 0x40, 0x00, 0x00, 0x00,\n        0x01, 0x62, 0x02, 0x00, 0x00,\n        0x00, 0x60, 0x04, 0x00, 0x40, 0x00, 0x00]\n    # Setting up internal 42-byte (default) DMP packet buffer\n    dmpPacketSize = 42\n    # construct a new object with the I2C address of the MPU6050\n    def __init__(self, address=MPU6050_DEFAULT_ADDRESS, bus=None):\n        self.i2c = PyComms(address, bus)\n        self.address = address\n    def initialize(self):\n        self.setClockSource(self.MPU6050_CLOCK_PLL_XGYRO)\n        self.setFullScaleGyroRange(self.MPU6050_GYRO_FS_250)\n        self.setFullScaleAccelRange(self.MPU6050_ACCEL_FS_2)\n        self.setSleepEnabled(False)\n    def testConnection(self):\n        return self.getDeviceID() == 0x34\n    def getAuxVDDIOLevel(self):\n        return self.i2c.readBit(self.MPU6050_RA_YG_OFFS_TC,\n                                self.MPU6050_TC_PWR_MODE_BIT)\n    def setAuxVDDIOLevel(self, level):\n        self.i2c.writeBit(self.MPU6050_RA_YG_OFFS_TC,\n                          self.MPU6050_TC_PWR_MODE_BIT, level)\n    def getRate(self):\n        return self.i2c.readU8(self.MPU6050_RA_SMPLRT_DIV)\n    def setRate(self, value):\n        self.i2c.write8(self.MPU6050_RA_SMPLRT_DIV, value)\n    def getExternalFrameSync(self):\n        return self.i2c.readBits(self.MPU6050_RA_CONFIG,\n                                 self.MPU6050_CFG_EXT_SYNC_SET_BIT,\n                                 self.MPU6050_CFG_EXT_SYNC_SET_LENGTH)\n    def setExternalFrameSync(self, sync):\n        self.i2c.writeBits(self.MPU6050_RA_CONFIG,\n                           self.MPU6050_CFG_EXT_SYNC_SET_BIT,\n                           self.MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync)\n    def getDLPFMode(self):\n        return self.i2c.readBits(self.MPU6050_RA_CONFIG,\n                                 self.MPU6050_CFG_DLPF_CFG_BIT,\n                                 self.MPU6050_CFG_DLPF_CFG_LENGTH)\n    def setDLPFMode(self, mode):\n        self.i2c.writeBits(self.MPU6050_RA_CONFIG,\n                           self.MPU6050_CFG_DLPF_CFG_BIT,\n                           self.MPU6050_CFG_DLPF_CFG_LENGTH, mode)\n    def getFullScaleGyroRange(self):\n        return self.i2c.readBits(self.MPU6050_RA_GYRO_CONFIG,\n                                 self.MPU6050_GCONFIG_FS_SEL_BIT,\n                                 self.MPU6050_GCONFIG_FS_SEL_LENGTH)\n    def setFullScaleGyroRange(self, range):\n        self.i2c.writeBits(self.MPU6050_RA_GYRO_CONFIG,\n                           self.MPU6050_GCONFIG_FS_SEL_BIT,\n                           self.MPU6050_GCONFIG_FS_SEL_LENGTH, range)\n    def getAccelXSelfTest(self):\n        return self.i2c.readBit(self.MPU6050_RA_ACCEL_CONFIG,\n                                self.MPU6050_ACONFIG_XA_ST_BIT)\n    def setAccelXSelfTest(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_ACCEL_CONFIG,\n                          self.MPU6050_ACONFIG_XA_ST_BIT, enabled)\n    def getAccelYSelfTest(self):\n        return self.readBit(self.MPU6050_RA_ACCEL_CONFIG,\n                            self.MPU6050_ACONFIG_YA_ST_BIT)\n    def setAccelYSelfTest(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_ACCEL_CONFIG,\n                          self.MPU6050_ACONFIG_YA_ST_BIT, enabled)\n    def getAccelZSelfTest(self):\n        return self.i2c.readBit(self.MPU6050_RA_ACCEL_CONFIG,\n                                self.MPU6050_ACONFIG_ZA_ST_BIT)\n    def setAccelZSelfTest(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_ACCEL_CONFIG,\n                          self.MPU6050_ACONFIG_ZA_ST_BIT, enabled)\n    def getFullScaleAccelRange(self):\n        return self.i2c.readBits(self.MPU6050_RA_ACCEL_CONFIG,\n                                 self.MPU6050_ACONFIG_AFS_SEL_BIT,\n                                 self.MPU6050_ACONFIG_AFS_SEL_LENGTH)\n    def setFullScaleAccelRange(self, value):\n        self.i2c.writeBits(self.MPU6050_RA_ACCEL_CONFIG,\n                           self.MPU6050_ACONFIG_AFS_SEL_BIT,\n                           self.MPU6050_ACONFIG_AFS_SEL_LENGTH, value)\n    def getDHPFMode(self):\n        return self.i2c.readBits(self.MPU6050_RA_ACCEL_CONFIG,\n                                 self.MPU6050_ACONFIG_ACCEL_HPF_BIT,\n                                 self.MPU6050_ACONFIG_ACCEL_HPF_LENGTH)\n    def setDHPFMode(self, bandwith):\n        self.i2c.writeBits(self.MPU6050_RA_ACCEL_CONFIG,\n                           self.MPU6050_ACONFIG_ACCEL_HPF_BIT,\n                           self.MPU6050_ACONFIG_ACCEL_HPF_LENGTH, bandwidth)\n    def getFreefallDetectionThreshold(self):\n        return self.i2c.readU8(self.MPU6050_RA_FF_THR)\n    def setFreefallDetectionThreshold(self, treshold):\n        self.i2c.write8(self.MPU6050_RA_FF_THR, treshold)\n    def getFreefallDetectionDuration(self):\n        return self.i2c.readU8(self.MPU6050_RA_FF_DUR)\n    def setFreefallDetectionDuration(self, duration):\n        self.i2c.write8(self.MPU6050_RA_FF_DUR)\n    def getMotionDetectionThreshold(self):\n        return self.i2c.readU8(self.MPU6050_RA_MOT_THR)\n    def setMotionDetectionThreshold(self, treshold):\n        self.i2c.write8(self.MPU6050_RA_MOT_THR, treshold)\n    def getMotionDetectionDuration(self):\n        return self.i2c.readU8(self.MPU6050_RA_MOT_DUR)\n    def setMotionDetectionDuration(self, duration):\n        self.i2c.write8(self.MPU6050_RA_MOT_DUR, duration)\n    def getZeroMotionDetectionThreshold(self):\n        return self.i2c.readU8(self.MPU6050_RA_ZRMOT_THR)\n    def setZeroMotionDetectionThreshold(self, treshold):\n        self.i2c.write8(self.MPU6050_RA_ZRMOT_THR, treshold)\n    def getZeroMotionDetectionDuration(self):\n        return self.i2c.readU8(self.MPU6050_RA_ZRMOT_DUR)\n    def setZeroMotionDetectionDuration(self, duration):\n        self.i2c.write8(self.MPU6050_RA_ZRMOT_DUR, duration)\n    def getTempFIFOEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_FIFO_EN,\n                                self.MPU6050_TEMP_FIFO_EN_BIT)\n    def setTempFIFOEnabled(self, enabled):\n        self.i2c.write8(self.MPU6050_RA_FIFO_EN, self.MPU6050_TEMP_FIFO_EN_BIT,\n                        enabled)\n    def getXGyroFIFOEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_FIFO_EN,\n                                self.MPU6050_XG_FIFO_EN_BIT)\n    def setXGyroFIFOEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_FIFO_EN, self.MPU6050_XG_FIFO_EN_BIT,\n                          enabled)\n    def getYGyroFIFOEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_FIFO_EN,\n                                self.MPU6050_YG_FIFO_EN_BIT)\n    def setYGyroFIFOEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_FIFO_EN, self.MPU6050_YG_FIFO_EN_BIT,\n                          enabled)\n    def getZGyroFIFOEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_FIFO_EN,\n                                self.MPU6050_ZG_FIFO_EN_BIT)\n    def setZGyroFIFOEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_FIFO_EN, self.MPU6050_ZG_FIFO_EN_BIT,\n                          enabled)\n    def getAccelFIFOEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_FIFO_EN,\n                                self.MPU6050_ACCEL_FIFO_EN_BIT)\n    def setAccelFIFOEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_FIFO_EN,\n                          self.MPU6050_ACCEL_FIFO_EN_BIT, enabled)\n    def getSlave2FIFOEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_FIFO_EN,\n                                self.MPU6050_SLV2_FIFO_EN_BIT)\n    def setSlave2FIFOEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_FIFO_EN,\n                          self.MPU6050_SLV2_FIFO_EN_BIT, enabled)\n    def getSlave1FIFOEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_FIFO_EN,\n                                self.MPU6050_SLV1_FIFO_EN_BIT)\n    def setSlave1FIFOEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_FIFO_EN,\n                          self.MPU6050_SLV1_FIFO_EN_BIT, enabled)\n    def getSlave0FIFOEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_FIFO_EN,\n                                self.MPU6050_SLV0_FIFO_EN_BIT)\n    def setSlave0FIFOEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_FIFO_EN,\n                          self.MPU6050_SLV0_FIFO_EN_BIT, enabled)\n    def getMultiMasterEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_CTRL,\n                                self.MPU6050_MULT_MST_EN_BIT)\n    def setMultiMasterEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_I2C_MST_CTRL,\n                          self.MPU6050_MULT_MST_EN_BIT, enabled)\n    def getWaitForExternalSensorEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_CTRL,\n                                self.MPU6050_WAIT_FOR_ES_BIT)\n    def setWaitForExternalSensorEnabled(self, value):\n        self.i2c.writeBit(self.MPU6050_RA_I2C_MST_CTRL,\n                          self.MPU6050_WAIT_FOR_ES_BIT, enabled)\n    def getSlave3FIFOEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_CTRL,\n                                self.MPU6050_SLV_3_FIFO_EN_BIT)\n    def setSlave3FIFOEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_I2C_MST_CTRL,\n                          self.MPU6050_SLV_3_FIFO_EN_BIT, enabled)\n    def getSlaveReadWriteTransitionEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_CTRL,\n                                self.MPU6050_I2C_MST_P_NSR_BIT)\n    def setSlaveReadWriteTransitionEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_I2C_MST_CTRL,\n                          self.MPU6050_I2C_MST_P_NSR_BIT, enabled)\n    def getMasterClockSpeed(self):\n        return self.i2c.readBits(self.MPU6050_RA_I2C_MST_CTRL,\n                                 self.MPU6050_I2C_MST_CLK_BIT,\n                                 self.MPU6050_I2C_MST_CLK_LENGTH)\n    def setMasterClockSpeed(self, speed):\n        self.i2c.writeBits(self.MPU6050_RA_I2C_MST_CTRL,\n                           self.MPU6050_I2C_MST_CLK_BIT,\n                           self.MPU6050_I2C_MST_CLK_LENGTH, speed)\n    def getSlaveAddress(self, num):\n        if num > 3:\n            return 0\n        return self.i2c.readU8(self.MPU6050_RA_I2C_SLV0_ADDR + num * 3)\n    def setSlaveAddress(self, num, address):\n        if num > 3:\n            return\n        self.i2c.write8(self.MPU6050_RA_I2C_SLV0_ADDR + num * 3, address)\n    def getSlaveRegister(self, num):\n        if num > 3:\n            return 0\n        return self.i2c.readU8(self.MPU6050_RA_I2C_SLV0_REG + num * 3)\n    def setSlaveRegister(self, num, reg):\n        if num > 3:\n            return\n        self.i2c.write8(self.MPU6050_RA_I2C_SLV0_REG + num * 3, reg)\n    def getSlaveEnabled(self, num):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_SLV0_CTRL + num * 3,\n                                self.MPU6050_I2C_SLV_EN_BIT)\n    def setSlaveEnabled(self, num, enabled):\n        if num > 3:\n            return\n        self.i2c.writeBit(self.MPU6050_RA_I2C_SLV0_CTRL + num * 3,\n                          self.MPU6050_I2C_SLV_EN_BIT, enabled)\n    def getSlaveWordByteSwap(self, num):\n        if num > 3:\n            return 0\n        return self.i2c.readBit(self.MPU6050_RA_I2C_SLV0_CTRL + num * 3,\n                                self.MPU6050_I2C_SLV_BYTE_SW_BIT)\n    def setSlaveWordByteSwap(self, num, enabled):\n        if num > 3:\n            return\n        self.i2c.writeBit(self.MPU6050_RA_I2C_SLV0_CTRL + num * 3,\n                          self.MPU6050_I2C_SLV_BYTE_SW_BIT, enabled)\n    def getSlaveWriteMode(self, num):\n        if num > 3:\n            return 0\n        return self.i2c.readBit(self.MPU6050_RA_I2C_SLV0_CTRL + num * 3,\n                                self.MPU6050_I2C_SLV_REG_DIS_BIT)\n    def setSlaveWriteMode(self, num, mode):\n        if num > 3:\n            return\n        self.i2c.writeBit(self.MPU6050_RA_I2C_SLV0_CTRL + num * 3,\n                          self.MPU6050_I2C_SLV_REG_DIS_BIT, mode)\n    def getSlaveWordGroupOffset(self, num):\n        if num > 3:\n            return 0\n        return self.i2c.readBit(self.MPU6050_RA_I2C_SLV0_CTRL + num * 3,\n                                self.MPU6050_I2C_SLV_GRP_BIT)\n    def setSlaveWordGroupOffset(self, num, enabled):\n        if num > 3:\n            return\n        self.i2c.writeBit(self.MPU6050_RA_I2C_SLV0_CTRL + num * 3,\n                          self.MPU6050_I2C_SLV_GRP_BIT, enabled)\n    def getSlaveDataLength(self, num):\n        if num > 3:\n            return 0\n        return self.i2c.readBits(self.MPU6050_RA_I2C_SLV0_CTRL + num * 3,\n                                 self.MPU6050_I2C_SLV_LEN_BIT,\n                                 self.MPU6050_I2C_SLV_LEN_LENGTH)\n    def setSlaveDataLength(self, num, length):\n        if num > 3:\n            return\n        self.i2c.writeBits(self.MPU6050_RA_I2C_SLV0_CTRL + num * 3,\n                           self.MPU6050_I2C_SLV_LEN_BIT,\n                           self.MPU6050_I2C_SLV_LEN_LENGTH, length)\n    def getSlave4Address(self):\n        return self.i2c.readU8(self.MPU6050_RA_I2C_SLV4_ADDR)\n    def setSlave4Address(self, address):\n        self.i2c.write8(self.MPU6050_RA_I2C_SLV4_ADDR, address)\n    def getSlave4Register(self):\n        return self.i2c.readU8(self.MPU6050_RA_I2C_SLV4_REG)\n    def setSlave4Register(self, reg):\n        self.i2c.write8(self.MPU6050_RA_I2C_SLV4_REG, reg)\n    def setSlave4OutputByte(self, data):\n        self.i2c.write8(self.MPU6050_RA_I2C_SLV4_DO, data)\n    def getSlave4Enabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_SLV4_CTRL,\n                                self.MPU6050_I2C_SLV4_EN_BIT)\n    def setSlave4Enabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_I2C_SLV4_CTRL,\n                          self.MPU6050_I2C_SLV4_EN_BIT, enabled)\n    def getSlave4InterruptEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_SLV4_CTRL,\n                                self.MPU6050_I2C_SLV4_INT_EN_BIT)\n    def setSlave4InterruptEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_I2C_SLV4_CTRL,\n                          self.MPU6050_I2C_SLV4_INT_EN_BIT, enabled)\n    def getSlave4WriteMode(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_SLV4_CTRL,\n                                self.MPU6050_I2C_SLV4_REG_DIS_BIT)\n    def setSlave4WriteMode(self, mode):\n        self.i2c.writeBit(self.MPU6050_RA_I2C_SLV4_CTRL,\n                          self.MPU6050_I2C_SLV4_REG_DIS_BIT, mode)\n    def getSlave4MasterDelay(self):\n        return self.i2c.readBits(self.MPU6050_RA_I2C_SLV4_CTRL,\n                                 self.MPU6050_I2C_SLV4_MST_DLY_BIT,\n                                 self.MPU6050_I2C_SLV4_MST_DLY_LENGTH)\n    def setSlave4MasterDelay(self, delay):\n        self.i2c.writeBits(self.MPU6050_RA_I2C_SLV4_CTRL,\n                           self.MPU6050_I2C_SLV4_MST_DLY_BIT,\n                           self.MPU6050_I2C_SLV4_MST_DLY_LENGTH, delay)\n    def getSlate4InputByte(self):\n        return self.i2c.readU8(self.MPU6050_RA_I2C_SLV4_DI)\n    def getPassthroughStatus(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_STATUS,\n                                self.MPU6050_MST_PASS_THROUGH_BIT)\n    def getSlave4IsDone(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_STATUS,\n                                self.MPU6050_MST_I2C_SLV4_DONE_BIT)\n    def getLostArbitration(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_STATUS,\n                                self.MPU6050_MST_I2C_LOST_ARB_BIT)\n    def getSlave4Nack(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_STATUS,\n                                self.MPU6050_MST_I2C_SLV4_NACK_BIT)\n    def getSlave3Nack(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_STATUS,\n                                self.MPU6050_MST_I2C_SLV3_NACK_BIT)\n    def getSlave2Nack(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_STATUS,\n                                self.MPU6050_MST_I2C_SLV2_NACK_BIT)\n    def getSlave1Nack(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_STATUS,\n                                self.MPU6050_MST_I2C_SLV1_NACK_BIT)\n    def getSlave0Nack(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_STATUS,\n                                self.MPU6050_MST_I2C_SLV0_NACK_BIT)\n    def getInterruptMode(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_PIN_CFG,\n                                self.MPU6050_INTCFG_INT_LEVEL_BIT)\n    def setInterruptMode(self, mode):\n        self.i2c.writeBit(self.MPU6050_RA_INT_PIN_CFG,\n                          self.MPU6050_INTCFG_INT_LEVEL_BIT, mode)\n    def getInterruptDrive(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_PIN_CFG,\n                                self.MPU6050_INTCFG_INT_OPEN_BIT)\n    def setInterruptDrive(self, drive):\n        self.i2c.writeBit(self.MPU6050_RA_INT_PIN_CFG,\n                          self.MPU6050_INTCFG_INT_OPEN_BIT, drive)\n    def getInterruptLatch(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_PIN_CFG,\n                                self.MPU6050_INTCFG_LATCH_INT_EN_BIT)\n    def setInterruptLatch(self, latch):\n        self.i2c.writeBit(self.MPU6050_RA_INT_PIN_CFG,\n                          self.MPU6050_INTCFG_LATCH_INT_EN_BIT, latch)\n    def getInterruptLatchClear(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_PIN_CFG,\n                                self.MPU6050_INTCFG_INT_RD_CLEAR_BIT)\n    def setInterruptLatchClear(self, clear):\n        self.i2c.writeBit(self.MPU6050_RA_INT_PIN_CFG,\n                          self.MPU6050_INTCFG_INT_RD_CLEAR_BIT, clear)\n    def getFSyncInterruptLevel(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_PIN_CFG,\n                                self.MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT)\n    def setFSyncInterruptLevel(self, level):\n        self.i2c.writeBit(self.MPU6050_RA_INT_PIN_CFG,\n                          self.MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT, level)\n    def getFSyncInterruptEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_PIN_CFG,\n                                self.MPU6050_INTCFG_FSYNC_INT_EN_BIT)\n    def setFSyncInterruptEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_INT_PIN_CFG,\n                          self.MPU6050_INTCFG_FSYNC_INT_EN_BIT, enabled)\n    def getI2CBypassEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_PIN_CFG,\n                                self.MPU6050_INTCFG_I2C_BYPASS_EN_BIT)\n    def setI2CBypassEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_INT_PIN_CFG,\n                          self.MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled)\n    def getClockOutputEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_PIN_CFG,\n                                self.MPU6050_INTCFG_CLKOUT_EN_BIT)\n    def setClockOutputEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_INT_PIN_CFG,\n                          self.MPU6050_INTCFG_CLKOUT_EN_BIT, enabled)\n    def getIntEnabled(self):\n        return self.i2c.readU8(self.MPU6050_RA_INT_ENABLE)\n    def setIntEnabled(self, status):\n        self.i2c.write8(self.MPU6050_RA_INT_ENABLE, status)\n    def getIntFreefallEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_ENABLE,\n                                self.MPU6050_INTERRUPT_FF_BIT)\n    def setIntFreefallEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_INT_ENABLE,\n                          self.MPU6050_INTERRUPT_FF_BIT, enabled)\n    def getIntMotionEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_ENABLE,\n                                self.MPU6050_INTERRUPT_MOT_BIT)\n    def setIntMotionEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_INT_ENABLE,\n                          self.MPU6050_INTERRUPT_MOT_BIT, enabled)\n    def getIntZeroMotionEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_ENABLE,\n                                self.MPU6050_INTERRUPT_ZMOT_BIT)\n    def setIntZeroMotionEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_INT_ENABLE,\n                          self.MPU6050_INTERRUPT_ZMOT_BIT, enabled)\n    def getIntFIFOBufferOverflowEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_ENABLE,\n                                self.MPU6050_INTERRUPT_FIFO_OFLOW_BIT)\n    def setIntFIFOBufferOverflowEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_INT_ENABLE,\n                          self.MPU6050_INTERRUPT_FIFO_OFLOW_BIT, enabled)\n    def getIntI2CMasterEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_ENABLE,\n                                self.MPU6050_INTERRUPT_I2C_MST_INT_BIT)\n    def setIntI2CMasterEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_INT_ENABLE,\n                          self.MPU6050_INTERRUPT_I2C_MST_INT_BIT, enabled)\n    def getIntDataReadyEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_ENABLE,\n                                self.MPU6050_INTERRUPT_DATA_RDY_BIT)\n    def setIntDataReadyEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_INT_ENABLE,\n                          self.MPU6050_INTERRUPT_DATA_RDY_BIT, enabled)\n    def getIntStatus(self):\n        return self.i2c.readU8(self.MPU6050_RA_INT_STATUS)\n    def getIntFreefallStatus(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_STATUS,\n                                self.MPU6050_INTERRUPT_FF_BIT)\n    def getIntMotionStatus(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_STATUS,\n                                self.MPU6050_INTERRUPT_MOT_BIT)\n    def getIntZeroMotionStatus(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_STATUS,\n                                self.MPU6050_INTERRUPT_ZMOT_BIT)\n    def getIntFIFOBufferOverflowStatus(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_STATUS,\n                                self.MPU6050_INTERRUPT_FIFO_OFLOW_BIT)\n    def getIntI2CMasterStatus(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_STATUS,\n                                self.MPU6050_INTERRUPT_I2C_MST_INT_BIT)\n    def getIntDataReadyStatus(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_STATUS,\n                                self.MPU6050_INTERRUPT_DATA_RDY_BIT)\n    def getMotion9(self):\n        # unknown\n        pass\n    def getMotion6(self):\n        pass\n    def getAcceleration(self):\n        pass\n    def getAccelerationX(self):\n        pass\n    def getAccelerationY(self):\n        pass\n    def getAccelerationZ(self):\n        pass\n    def getTemperature(self):\n        pass\n    def getRotation(self):\n        pass\n    def getRotationX(self):\n        pass\n    def getRotationY(self):\n        pass\n    def getRotationZ(self):\n        pass\n    def getExternalSensorByte(self, position):\n        return self.i2c.readU8(self.MPU6050_RA_EXT_SENS_DATA_00 + position)\n    def getExternalSensorWord(self, position):\n        pass\n    def getExternalSensorDWord(self, position):\n        pass\n    def getXNegMotionDetected(self):\n        return self.i2c.readBit(self.MPU6050_RA_MOT_DETECT_STATUS,\n                                self.MPU6050_MOTION_MOT_XNEG_BIT)\n    def getXPosMotionDetected(self):\n        return self.i2c.readBit(self.MPU6050_RA_MOT_DETECT_STATUS,\n                                self.MPU6050_MOTION_MOT_XPOS_BIT)\n    def getYNegMotionDetected(self):\n        return self.i2c.readBit(self.MPU6050_RA_MOT_DETECT_STATUS,\n                                self.MPU6050_MOTION_MOT_YNEG_BIT)\n    def getYPosMotionDetected(self):\n        return self.i2c.readBit(self.MPU6050_RA_MOT_DETECT_STATUS,\n                                self.MPU6050_MOTION_MOT_YPOS_BIT)\n    def getZNegMotionDetected(self):\n        return self.i2c.readBit(self.MPU6050_RA_MOT_DETECT_STATUS,\n                                self.MPU6050_MOTION_MOT_ZNEG_BIT)\n    def getZPosMotionDetected(self):\n        return self.i2c.readBit(self.MPU6050_RA_MOT_DETECT_STATUS,\n                                self.MPU6050_MOTION_MOT_ZPOS_BIT)\n    def getZeroMotionDetected(self):\n        return self.i2c.readBit(self.MPU6050_RA_MOT_DETECT_STATUS,\n                                self.MPU6050_MOTION_MOT_ZRMOT_BIT)\n    def setSlaveOutputByte(self, num, data):\n        if num > 3:\n            return\n        self.i2c.write8(self.MPU6050_RA_I2C_SLV0_DO + num, data)\n    def getExternalShadowDelayEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_DELAY_CTRL,\n                                self.MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT)\n    def setExternalShadowDelayEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_I2C_MST_DELAY_CTRL,\n                          self.MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT, enabled)\n    def getSlaveDelayEnabled(self, num):\n        # // MPU6050_DELAYCTRL_I2C_SLV4_DLY_EN_BIT is 4, SLV3 is 3, etc.\n        if num > 4:\n            return 0\n        return self.i2c.readBit(self.MPU6050_RA_I2C_MST_DELAY_CTRL, num)\n    def setSlaveDelayEnabled(self, num, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_I2C_MST_DELAY_CTRL, num, enabled)\n    def resetGyroscopePath(self):\n        self.i2c.writeBit(self.MPU6050_RA_SIGNAL_PATH_RESET,\n                          self.MPU6050_PATHRESET_GYRO_RESET_BIT, True)\n    def resetAccelerometerPath(self):\n        self.i2c.writeBit(self.MPU6050_RA_SIGNAL_PATH_RESET,\n                          self.MPU6050_PATHRESET_ACCEL_RESET_BIT, True)\n    def resetTemperaturePath(self):\n        self.i2c.writeBit(self.MPU6050_RA_SIGNAL_PATH_RESET,\n                          self.MPU6050_PATHRESET_TEMP_RESET_BIT, True)\n    def getAccelerometerPowerOnDelay(self):\n        return self.i2c.readBits(self.MPU6050_RA_MOT_DETECT_CTRL,\n                                 self.MPU6050_DETECT_ACCEL_ON_DELAY_BIT,\n                                 self.MPU6050_DETECT_ACCEL_ON_DELAY_LENGTH)\n    def setAccelerometerPowerOnDelay(self, delay):\n        self.i2c.writeBits(self.MPU6050_RA_MOT_DETECT_CTRL,\n                           self.MPU6050_DETECT_ACCEL_ON_DELAY_BIT,\n                           self.MPU6050_DETECT_ACCEL_ON_DELAY_LENGTH, delay)\n    def getFreefallDetectionCounterDecrement(self):\n        return self.i2c.readBits(self.MPU6050_RA_MOT_DETECT_CTRL,\n                                 self.MPU6050_DETECT_FF_COUNT_BIT,\n                                 self.MPU6050_DETECT_FF_COUNT_LENGTH)\n    def setFreefallDetectionCounterDecrement(self, decrement):\n        self.i2c.writeBits(self.MPU6050_RA_MOT_DETECT_CTRL,\n                           self.MPU6050_DETECT_FF_COUNT_BIT,\n                           self.MPU6050_DETECT_FF_COUNT_LENGTH, decrement)\n    def getMotionDetectionCounterDecrement(self):\n        return self.i2c.readBits(self.MPU6050_RA_MOT_DETECT_CTRL,\n                                 self.MPU6050_DETECT_MOT_COUNT_BIT,\n                                 self.MPU6050_DETECT_MOT_COUNT_LENGTH)\n    def setMotionDetectionCounterDecrement(self, decrement):\n        self.i2c.writeBits(self.MPU6050_RA_MOT_DETECT_CTRL,\n                           self.MPU6050_DETECT_MOT_COUNT_BIT,\n                           self.MPU6050_DETECT_MOT_COUNT_LENGTH, decrement)\n    def getFIFOEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_USER_CTRL,\n                                self.MPU6050_USERCTRL_FIFO_EN_BIT)\n    def setFIFOEnabled(self, status):\n        self.i2c.writeBit(self.MPU6050_RA_USER_CTRL,\n                          self.MPU6050_USERCTRL_FIFO_EN_BIT, status)\n    def getI2CMasterModeEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_USER_CTRL,\n                                self.MPU6050_USERCTRL_I2C_MST_EN_BIT)\n    def setI2CMasterModeEnabled(self, status):\n        self.i2c.writeBit(self.MPU6050_RA_USER_CTRL,\n                          self.MPU6050_USERCTRL_I2C_MST_EN_BIT, status)\n    def switchSPIEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_USER_CTRL,\n                          self.MPU6050_USERCTRL_I2C_IF_DIS_BIT, enabled)\n    def resetFIFO(self):\n        self.i2c.writeBit(self.MPU6050_RA_USER_CTRL,\n                          self.MPU6050_USERCTRL_FIFO_RESET_BIT, True)\n    def resetI2CMaster(self):\n        self.i2c.writeBit(self.MPU6050_RA_USER_CTRL,\n                          self.MPU6050_USERCTRL_I2C_MST_RESET_BIT, True)\n    def resetSensors(self):\n        self.i2c.writeBit(self.MPU6050_RA_USER_CTRL,\n                          self.MPU6050_USERCTRL_SIG_COND_RESET_BIT, True)\n    def reset(self):\n        self.i2c.writeBit(self.MPU6050_RA_PWR_MGMT_1,\n                          self.MPU6050_PWR1_DEVICE_RESET_BIT, True)\n    def getSleepEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_PWR_MGMT_1,\n                                self.MPU6050_PWR1_SLEEP_BIT)\n    def setSleepEnabled(self, status):\n        self.i2c.writeBit(self.MPU6050_RA_PWR_MGMT_1,\n                          self.MPU6050_PWR1_SLEEP_BIT, status)\n    def getWakeCycleEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_PWR_MGMT_1,\n                                self.MPU6050_PWR1_CYCLE_BIT)\n    def setWakeCycleEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_PWR_MGMT_1,\n                          self.MPU6050_PWR1_CYCLE_BIT, enabled)\n    def getTempSensorEnabled(self):\n        result = self.i2c.readBit(self.MPU6050_RA_PWR_MGMT_1,\n                                  self.MPU6050_PWR1_TEMP_DIS_BIT)\n        return result == 0 # 1 is actually disabled here\n    def setTempSensorEnabled(self, enabled):\n        # 1 is actually disabled here\n        self.i2c.writeBit(self.MPU6050_RA_PWR_MGMT_1,\n                          self.MPU6050_PWR1_TEMP_DIS_BIT, enabled != enabled)\n    def getClockSource(self):\n        return self.i2c.readBits(self.MPU6050_RA_PWR_MGMT_1,\n                                 self.MPU6050_PWR1_CLKSEL_BIT,\n                                 self.MPU6050_PWR1_CLKSEL_LENGTH)\n    def setClockSource(self, source):\n        self.i2c.writeBits(self.MPU6050_RA_PWR_MGMT_1,\n                           self.MPU6050_PWR1_CLKSEL_BIT,\n                           self.MPU6050_PWR1_CLKSEL_LENGTH, source)\n    def getWakeFrequency(self):\n        return self.i2c.readBits(self.MPU6050_RA_PWR_MGMT_2,\n                                 self.MPU6050_PWR2_LP_WAKE_CTRL_BIT,\n                                 self.MPU6050_PWR2_LP_WAKE_CTRL_LENGTH)\n    def setWakeFrequency(self, frequency):\n        self.i2c.writeBits(self.MPU6050_RA_PWR_MGMT_2,\n                           self.MPU6050_PWR2_LP_WAKE_CTRL_BIT,\n                           self.MPU6050_PWR2_LP_WAKE_CTRL_LENGTH, frequency)\n    def getStandbyXAccelEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_PWR_MGMT_2,\n                                self.MPU6050_PWR2_STBY_XA_BIT)\n    def setStandbyXAccelEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_PWR_MGMT_2,\n                          self.MPU6050_PWR2_STBY_XA_BIT, enabled)\n    def getStandbyYAccelEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_PWR_MGMT_2,\n                                self.MPU6050_PWR2_STBY_YA_BIT)\n    def setStandbyYAccelEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_PWR_MGMT_2,\n                          self.MPU6050_PWR2_STBY_YA_BIT, enabled)\n    def getStandbyZAccelEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_PWR_MGMT_2,\n                                self.MPU6050_PWR2_STBY_ZA_BIT)\n    def setStandbyZAccelEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_PWR_MGMT_2,\n                          self.MPU6050_PWR2_STBY_ZA_BIT, enabled)\n    def getStandbyXGyroEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_PWR_MGMT_2,\n                                self.MPU6050_PWR2_STBY_XG_BIT)\n    def setStandbyXGyroEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_PWR_MGMT_2,\n                          self.MPU6050_PWR2_STBY_XG_BIT, enabled)\n    def getStandbyYGyroEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_PWR_MGMT_2,\n                                self.MPU6050_PWR2_STBY_YG_BIT)\n    def setStandbyYGyroEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_PWR_MGMT_2,\n                          self.MPU6050_PWR2_STBY_YG_BIT, enabled)\n    def getStandbyZGyroEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_PWR_MGMT_2,\n                                self.MPU6050_PWR2_STBY_ZG_BIT)\n    def setStandbyZGyroEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_PWR_MGMT_2,\n                          self.MPU6050_PWR2_STBY_ZG_BIT, enabled)\n    def getFIFOCount(self):\n        return self.i2c.readU16(self.MPU6050_RA_FIFO_COUNTH)\n    def getFIFOByte(self):\n        return self.i2c.readU8(self.MPU6050_RA_FIFO_R_W)\n    def getFIFOBytes(self, length):\n        return self.i2c.readBytes(self.MPU6050_RA_FIFO_R_W, length)\n    def setFIFOByte(self, data):\n        self.i2c.write8(self.MPU6050_RA_FIFO_R_W, data)\n    def getDeviceID(self):\n        return self.i2c.readBits(self.MPU6050_RA_WHO_AM_I,\n                                 self.MPU6050_WHO_AM_I_BIT,\n                                 self.MPU6050_WHO_AM_I_LENGTH)\n    def setDeviceID(self, id):\n        self.i2c.writeBits(self.MPU6050_RA_WHO_AM_I, self.MPU6050_WHO_AM_I_BIT,\n                           self.MPU6050_WHO_AM_I_LENGTH, id)\n    def getOTPBankValid(self):\n        result = self.i2c.readBit(self.MPU6050_RA_XG_OFFS_TC,\n                                  self.MPU6050_TC_OTP_BNK_VLD_BIT)\n        return result\n    def setOTPBankValid(self, status):\n        self.i2c.writeBit(self.MPU6050_RA_XG_OFFS_TC,\n                          self.MPU6050_TC_OTP_BNK_VLD_BIT, status)\n    def getXGyroOffset(self):\n        return self.i2c.readBits(self.MPU6050_RA_XG_OFFS_TC,\n                                 self.MPU6050_TC_OFFSET_BIT,\n                                 self.MPU6050_TC_OFFSET_LENGTH)\n    def setXGyroOffset(self, offset):\n        self.i2c.writeBits(self.MPU6050_RA_XG_OFFS_TC,\n                           self.MPU6050_TC_OFFSET_BIT,\n                           self.MPU6050_TC_OFFSET_LENGTH, offset)\n    def getYGyroOffset(self):\n        return self.i2c.readBits(self.MPU6050_RA_YG_OFFS_TC,\n                                 self.MPU6050_TC_OFFSET_BIT,\n                                 self.MPU6050_TC_OFFSET_LENGTH)\n    def setYGyroOffset(self, offset):\n        self.i2c.writeBits(self.MPU6050_RA_YG_OFFS_TC,\n                           self.MPU6050_TC_OFFSET_BIT,\n                           self.MPU6050_TC_OFFSET_LENGTH, offset)\n    def getZGyroOffset(self):\n        return self.i2c.readBits(self.MPU6050_RA_ZG_OFFS_TC,\n                                 self.MPU6050_TC_OFFSET_BIT,\n                                 self.MPU6050_TC_OFFSET_LENGTH)\n    def setZGyroOffset(self, offset):\n        self.i2c.writeBits(self.MPU6050_RA_ZG_OFFS_TC,\n                           self.MPU6050_TC_OFFSET_BIT,\n                           self.MPU6050_TC_OFFSET_LENGTH, offset)\n    def getXFineGain(self):\n        return self.i2c.readU8(self.MPU6050_RA_X_FINE_GAIN)\n    def setXFineGain(self, gain):\n        self.i2c.write8(self.MPU6050_RA_X_FINE_GAIN, gain)\n    def getYFineGain(self):\n        return self.i2c.readU8(self.MPU6050_RA_Y_FINE_GAIN)\n    def setYFineGain(self, gain):\n        self.i2c.write8(self.MPU6050_RA_Y_FINE_GAIN, gain)\n    def getZFineGain(self):\n        return self.i2c.readU8(self.MPU6050_RA_Z_FINE_GAIN)\n    def setZFineGain(self, gain):\n        self.i2c.write8(self.MPU6050_RA_Z_FINE_GAIN, gain)\n    def getXAccelOffset(self):\n        pass\n    def setXAccelOffset(self, offset):\n        pass\n    def getYAccelOffset(self):\n        pass\n    def setYAccelOffset(self, offset):\n        pass\n    def getZAccelOffset(self):\n        pass\n    def setZAccelOffset(self, offset):\n        pass\n    def getXGyroOffsetUser(self):\n        pass\n    def setXGyroOffsetUser(self, value):\n        self.i2c.write8(self.MPU6050_RA_XG_OFFS_USRH, value >> 8)\n        self.i2c.write8(self.MPU6050_RA_XG_OFFS_USRL, value & 0xFF)\n        return True\n    def getYGyroOffsetUser(self):\n        pass\n    def setYGyroOffsetUser(self, value):\n        self.i2c.write8(self.MPU6050_RA_YG_OFFS_USRH, value >> 8)\n        self.i2c.write8(self.MPU6050_RA_YG_OFFS_USRL, value & 0xFF)\n        return True\n    def getZGyroOffsetUser(self):\n        pass\n    def setZGyroOffsetUser(self, value):\n        self.i2c.write8(self.MPU6050_RA_ZG_OFFS_USRH, value >> 8)\n        self.i2c.write8(self.MPU6050_RA_ZG_OFFS_USRL, value & 0xFF)\n        return True\n    def getIntPLLReadyEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_ENABLE,\n                                self.MPU6050_INTERRUPT_PLL_RDY_INT_BIT)\n    def setIntPLLReadyEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_INT_ENABLE,\n                          self.MPU6050_INTERRUPT_PLL_RDY_INT_BIT, enabled)\n    def getIntDMPEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_ENABLE,\n                                self.MPU6050_INTERRUPT_DMP_INT_BIT)\n    def setIntDMPEnabled(self, enabled):\n        self.i2c.writeBit(self.MPU6050_RA_INT_ENABLE,\n                          self.MPU6050_INTERRUPT_DMP_INT_BIT, enabled)\n    def getDMPInt5Status(self):\n        return self.i2c.readBit(self.MPU6050_RA_DMP_INT_STATUS,\n                                self.MPU6050_DMPINT_5_BIT)\n    def getDMPInt4Status(self):\n        return self.i2c.readBit(self.MPU6050_RA_DMP_INT_STATUS,\n                                self.MPU6050_DMPINT_4_BIT)\n    def getDMPInt3Status(self):\n        return self.i2c.readBit(self.MPU6050_RA_DMP_INT_STATUS,\n                                self.MPU6050_DMPINT_3_BIT)\n    def getDMPInt2Status(self):\n        return self.i2c.readBit(self.MPU6050_RA_DMP_INT_STATUS,\n                                self.MPU6050_DMPINT_2_BIT)\n    def getDMPInt1Status(self):\n        return self.i2c.readBit(self.MPU6050_RA_DMP_INT_STATUS,\n                                self.MPU6050_DMPINT_1_BIT)\n    def getDMPInt0Status(self):\n        return self.i2c.readBit(self.MPU6050_RA_DMP_INT_STATUS,\n                                self.MPU6050_DMPINT_0_BIT)\n    def getIntPLLReadyStatus(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_STATUS,\n                                self.MPU6050_INTERRUPT_PLL_RDY_INT_BIT)\n    def getIntDMPStatus(self):\n        return self.i2c.readBit(self.MPU6050_RA_INT_STATUS,\n                                self.MPU6050_INTERRUPT_DMP_INT_BIT)\n    def getDMPEnabled(self):\n        return self.i2c.readBit(self.MPU6050_RA_USER_CTRL,\n                                self.MPU6050_USERCTRL_DMP_EN_BIT)\n    def setDMPEnabled(self, status):\n        self.i2c.writeBit(self.MPU6050_RA_USER_CTRL,\n                          self.MPU6050_USERCTRL_DMP_EN_BIT, status)\n    def resetDMP(self):\n        self.i2c.writeBit(self.MPU6050_RA_USER_CTRL,\n                          self.MPU6050_USERCTRL_DMP_RESET_BIT, True)\n    def setMemoryBank(self, bank, prefetchEnabled=False, userBank=False):\n        bank &= 0x1F\n        if userBank:\n            bank |= 0x20\n        if prefetchEnabled:\n            bank |= 0x40\n        self.i2c.write8(self.MPU6050_RA_BANK_SEL, bank)\n        return True\n    def setMemoryStartAddress(self, address):\n        self.i2c.write8(self.MPU6050_RA_MEM_START_ADDR, address)\n    def readMemoryByte(self):\n        result = self.i2c.readU8(self.MPU6050_RA_MEM_R_W)\n        return result\n    def writeMemoryByte(self, data):\n        self.i2c.write8(self.MPU6050_RA_MEM_R_W, data)\n    def readMemoryBlock(self):\n        pass\n    def writeMemoryBlock(self, data, dataSize, bank=0, address=0,\n                         verify=False):\n        self.setMemoryBank(bank)\n        self.setMemoryStartAddress(address)\n        i = 0\n        while i < dataSize:\n            self.i2c.write8(self.MPU6050_RA_MEM_R_W, data[i])\n            # Verify\n            if verify:\n                self.setMemoryBank(bank)\n                self.setMemoryStartAddress(address)\n                result = self.i2c.readU8(self.MPU6050_RA_MEM_R_W)\n                if result != data[i]:\n                    print(data[i]),\n                    print(result),\n                    print(address)\n            # reset adress to 0 after reaching 255\n            if address == 255:\n                address = 0\n                bank += 1\n                self.setMemoryBank(bank)\n            else:\n                address += 1\n            self.setMemoryStartAddress(address)\n            # increase byte index\n            i += 1\n    def writeDMPConfigurationSet(self, data, dataSize, bank=0, address=0,\n                                 verify=False):\n        # config set data is a long string of blocks with the following\n        # structure:\n        # [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]\n        pos = 0\n        while pos < dataSize:\n            j = 0\n            dmpConfSet = []\n            while ((j < 4) or (j < dmpConfSet[2] + 3)):\n                dmpConfSet.append(data[pos])\n                j += 1\n                pos += 1\n            # write data or perform special action\n            if dmpConfSet[2] > 0:\n                # regular block of data to write  \n                self.writeMemoryBlock(dmpConfSet[3:], dmpConfSet[2],\n                                      dmpConfSet[0], dmpConfSet[1], verify)\n            else:\n                # special instruction\n                # NOTE: this kind of behavior (what and when to do certain\n                # things)\n                # is totally undocumented. This code is in here based on\n                # observed\n                # behavior only, and exactly why (or even whether) it has to\n                # be here\n                # is anybody's guess for now.\n                if dmpConfSet[3] == 0x01:\n                    # enable DMP-related interrupts\n                    #setIntZeroMotionEnabled(true);\n                    #setIntFIFOBufferOverflowEnabled(true);\n                    #setIntDMPEnabled(true);\n                    self.i2c.write8(self.MPU6050_RA_INT_ENABLE,\n                                    0x32);  # single operation\n    def getDMPConfig1(self):\n        self.i2c.readU8(self.MPU6050_RA_DMP_CFG_1)\n    def setDMPConfig1(self, config):\n        self.i2c.write8(self.MPU6050_RA_DMP_CFG_1, config)\n    def getDMPConfig2(self):\n        return self.i2c.readU8(self.MPU6050_RA_DMP_CFG_2)\n    def setDMPConfig2(self, config):\n        self.i2c.write8(self.MPU6050_RA_DMP_CFG_2, config)\n    def dmpPacketAvailable(self):\n        return self.getFIFOCount() >= self.dmpGetFIFOPacketSize()\n    def dmpGetFIFOPacketSize(self):\n        return self.dmpPacketSize\n    def dmpGetAccel(self, packet):\n        # | [ACC X ][      ][ACC Y ][      ][ACC Z ][      ][      ] |\n        # |  28  29  30  31  32  33  34  35  36  37  38  39  40  41  |\n        return {\n            'x': ((u_to_s(packet[28]) << 8) + packet[29]),\n            'y': ((u_to_s(packet[32]) << 8) + packet[33]),\n            'z': ((u_to_s(packet[36]) << 8) + packet[37]),\n        }\n    def dmpGetQuaternion(self, packet):\n        return {\n            'w': ((u_to_s(packet[0]) << 8) + packet[1]) / 16384.0,\n            'x': ((u_to_s(packet[4]) << 8) + packet[5]) / 16384.0,\n            'y': ((u_to_s(packet[8]) << 8) + packet[9]) / 16384.0,\n            'z': ((u_to_s(packet[12]) << 8) + packet[13]) / 16384.0,\n        }\n    def dmpGetGyro(self):\n        pass\n    def dmpGetLinearAccel(self, a, g):\n        \"\"\"\n        Use dmpGetAccel output as a.\n        \"\"\"\n        return {\n            'x': a['x'] - g['x'] * 8192,\n            'y': a['y'] - g['x'] * 8192,\n            'z': a['z'] - g['x'] * 8192,\n        }\n    def dmpGetLinearAccelInWorld(self, a, q):\n        v = qv_mult((q['w'], q['x'], q['y'], q['z'], ),\n                       (a['x'], a['y'], a['z'], ))\n        return {\n            'x': v[0],\n            'y': v[1],\n            'z': v[2],\n        }\n    def dmpGetGravity(self, q):\n        data = {\n            'x': float(2 * (q['x'] * q['z'] - q['w'] * q['y'])),\n            'y': float(2 * (q['w'] * q['x'] + q['y'] * q['z'])),\n            'z': float(\n                q['w'] * q['w'] - q['x'] * q['x'] - q['y'] * q['y'] + q['z'] *\n                q['z'])}\n        return data\n    def dmpGetEuler(self, q):\n        pass\n    def dmpGetYawPitchRoll(self, q, g):\n        data = {\n            # yaw: (about Z axis)\n            'yaw': atan2(2 * q['x'] * q['y'] - 2 * q['w'] * q['z'],\n                         2 * q['w'] * q['w'] + 2 * q['x'] * q['x'] - 1),\n            # pitch: (nose up/down, about Y axis)\n            'pitch': atan(g['x'] / sqrt(g['y'] * g['y'] + g['z'] * g['z'])),\n            # roll: (tilt left/right, about X axis)\n            'roll': atan(g['y'] / sqrt(g['x'] * g['x'] + g['z'] * g['z']))}\n        return data\n    def dmpProcessFIFOPacket(self):\n        pass\n    def dmpReadAndProcessFIFOPacket(self):\n        pass\n    def dmpInitialize(self):\n        # Resetting MPU6050\n        self.reset()\n        sleep(0.05)  # wait after reset\n        # Disable sleep mode\n        self.setSleepEnabled(False)\n        # get MPU hardware revision\n        self.setMemoryBank(0x10, True, True) # Selecting user bank 16\n        self.setMemoryStartAddress(0x06) # Selecting memory byte 6\n        hwRevision = self.readMemoryByte() # Checking hardware revision\n        #print('Revision @ user[16][6] ='),\n        #print(hex(hwRevision))\n        self.setMemoryBank(0, False,\n                           False) # Resetting memory bank selection to 0\n        # get X/Y/Z gyro offsets\n        xgOffset = self.getXGyroOffset()\n        ygOffset = self.getYGyroOffset()\n        zgOffset = self.getZGyroOffset()\n        # Enable pass through mode\n        self.setI2CBypassEnabled(True)\n        # load DMP code into memory banks\n        self.writeMemoryBlock(self.dmpMemory, self.MPU6050_DMP_CODE_SIZE, 0, 0,\n                              False)\n        #print('Success! DMP code written and verified')\n        # write DMP configuration\n        self.writeDMPConfigurationSet(self.dmpConfig,\n                                      self.MPU6050_DMP_CONFIG_SIZE, 0, 0,\n                                      False)\n        #print('Success! DMP configuration written and verified')\n        # Setting clock source to Z Gyro\n        self.setClockSource(self.MPU6050_CLOCK_PLL_ZGYRO)\n        # Setting DMP and FIFO_OFLOW interrupts enabled\n        self.setIntEnabled(0x12)\n        # Setting sample rate to 200Hz\n        self.setRate(4) # 1khz / (1 + 4) = 200 Hz [9 = 100 Hz]\n        # Setting external frame sync to TEMP_OUT_L[0]\n        self.setExternalFrameSync(self.MPU6050_EXT_SYNC_TEMP_OUT_L)\n        # Setting DLPF bandwidth to 42Hz\n        self.setDLPFMode(self.MPU6050_DLPF_BW_42)\n        # Setting gyro sensitivity to +/- 2000 deg/sec\n        self.setFullScaleGyroRange(self.MPU6050_GYRO_FS_2000)\n        # Setting DMP configuration bytes (function unknown)\n        self.setDMPConfig1(0x03)\n        self.setDMPConfig2(0x00)\n        # Clearing OTP Bank flag\n        self.setOTPBankValid(False)\n        # Setting X/Y/Z gyro offsets to previous values\n        self.setXGyroOffset(xgOffset)\n        self.setYGyroOffset(ygOffset)\n        self.setZGyroOffset(zgOffset)\n        # Setting X/Y/Z gyro user offsets to zero\n        #self.setXGyroOffsetUser(0)\n        #self.setYGyroOffsetUser(0)\n        #self.setZGyroOffsetUser(0)\n        # Writing final memory update 1/7 (function unknown)\n        pos = 0\n        j = 0\n        dmpUpdate = []\n        while (j < 4) or (j < dmpUpdate[2] + 3):\n            dmpUpdate.append(self.dmpUpdates[pos])\n            j += 1\n            pos += 1\n        self.writeMemoryBlock(dmpUpdate[3:], dmpUpdate[2], dmpUpdate[0],\n                              dmpUpdate[1], True)\n        # Writing final memory update 2/7 (function unknown)\n        j = 0\n        dmpUpdate = []\n        while (j < 4) or (j < dmpUpdate[2] + 3):\n            dmpUpdate.append(self.dmpUpdates[pos])\n            j += 1\n            pos += 1\n        self.writeMemoryBlock(dmpUpdate[3:], dmpUpdate[2], dmpUpdate[0],\n                              dmpUpdate[1], True)\n        # Resetting FIFO\n        self.resetFIFO()\n        # Reading FIFO count\n        fifoCount = self.getFIFOCount()\n        #print('Current FIFO count = %s' % fifoCount)\n        # Setting motion detection threshold to 2\n        self.setMotionDetectionThreshold(2)\n        # Setting zero-motion detection threshold to 156\n        self.setZeroMotionDetectionThreshold(156)\n        # Setting motion detection duration to 80\n        self.setMotionDetectionDuration(80)\n        # Setting zero-motion detection duration to 0\n        self.setZeroMotionDetectionDuration(0)\n        # Resetting FIFO\n        self.resetFIFO()\n        # Enabling FIFO\n        self.setFIFOEnabled(True)\n        # Enabling DMP\n        self.setDMPEnabled(True)\n        # Resetting DMP\n        self.resetDMP()\n        # Writing final memory update 3/7 (function unknown)\n        j = 0\n        dmpUpdate = []\n        while ((j < 4) or (j < dmpUpdate[2] + 3)):\n            dmpUpdate.append(self.dmpUpdates[pos])\n            j += 1\n            pos += 1\n        self.writeMemoryBlock(dmpUpdate[3:], dmpUpdate[2], dmpUpdate[0],\n                              dmpUpdate[1], True)\n        # Writing final memory update 4/7 (function unknown)\n        j = 0\n        dmpUpdate = []\n        while ((j < 4) or (j < dmpUpdate[2] + 3)):\n            dmpUpdate.append(self.dmpUpdates[pos])\n            j += 1\n            pos += 1\n        self.writeMemoryBlock(dmpUpdate[3:], dmpUpdate[2], dmpUpdate[0],\n                              dmpUpdate[1], True)\n        # Writing final memory update 5/7 (function unknown)\n        j = 0\n        dmpUpdate = []\n        while ((j < 4) or (j < dmpUpdate[2] + 3)):\n            dmpUpdate.append(self.dmpUpdates[pos])\n            j += 1\n            pos += 1\n        self.writeMemoryBlock(dmpUpdate[3:], dmpUpdate[2], dmpUpdate[0],\n                              dmpUpdate[1], True)\n        # Waiting for FIFO count > 2\n        while (self.getFIFOCount() < 3):\n", "answers": ["            fifoCount = self.getFIFOCount()"], "length": 6204, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "a4bf3f805b8466b1223216081b5cf014eeddec9df3c3867e"}
{"input": "", "context": "# Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors\n# License: GNU General Public License v3. See license.txt\nfrom __future__ import unicode_literals\nimport itertools\nimport json\nimport erpnext\nimport frappe\nimport copy\nfrom frappe.utils.pdf import get_pdf\nimport pdfkit\t\nimport os\nfrom erpnext.controllers.item_variant import (ItemVariantExistsError,\n\t\tcopy_attributes_to_variant, get_variant, make_variant_item_code, validate_item_variant_attributes)\nfrom erpnext.setup.doctype.item_group.item_group import (get_parent_item_groups, invalidate_cache_for)\nfrom frappe import _, msgprint\nfrom frappe.utils import (nowdate, cint, cstr, flt, formatdate, get_timestamp, getdate,\n\t\t\t\t\t\t  now_datetime, random_string, strip)\nfrom frappe.utils.html_utils import clean_html\nfrom frappe.website.doctype.website_slideshow.website_slideshow import \\\n\tget_slideshow\nfrom frappe.website.render import clear_cache\nfrom frappe.website.website_generator import WebsiteGenerator\nfrom frappe.model.naming import make_autoname\nfrom six import iteritems\nfrom erpnext.stock.stock_balance import update_bin_qty, get_reserved_qty\nclass DuplicateReorderRows(frappe.ValidationError):\n\tpass\nclass StockExistsForTemplate(frappe.ValidationError):\n\tpass\nclass InvalidBarcode(frappe.ValidationError):\n\tpass\nclass Item(WebsiteGenerator):\n\twebsite = frappe._dict(\n\t\tpage_title_field=\"item_name\",\n\t\tcondition_field=\"show_in_website\",\n\t\ttemplate=\"templates/generators/item.html\",\n\t\tno_cache=1\n\t)\n\tdef onload(self):\n\t\tsuper(Item, self).onload()\n\t\tself.set_onload('stock_exists', self.stock_ledger_created())\n\t\tself.set_asset_naming_series()\n\tdef set_asset_naming_series(self):\n\t\tif not hasattr(self, '_asset_naming_series'):\n\t\t\tfrom erpnext.assets.doctype.asset.asset import get_asset_naming_series\n\t\t\tself._asset_naming_series = get_asset_naming_series()\n\t\tself.set_onload('asset_naming_series', self._asset_naming_series)\n\tdef autoname(self):\n\t\tif frappe.db.get_default(\"item_naming_by\") == \"Naming Series\":\n\t\t\tif self.variant_of:\n\t\t\t\tif not self.item_code:\n\t\t\t\t\ttemplate_item_name = frappe.db.get_value(\"Item\", self.variant_of, \"item_name\")\n\t\t\t\t\tself.item_code = make_variant_item_code(self.variant_of, template_item_name, self)\n\t\t\telse:\n\t\t\t\tfrom frappe.model.naming import set_name_by_naming_series\n\t\t\t\tset_name_by_naming_series(self)\n\t\t\t\tself.item_code = self.name\n\t\telif not self.item_code or self.generer_code_interne or self.item_code == \"CODE\" or self.item_code == \"code\":\n\t\t\tgroup = frappe.get_doc(\"Item Group\",self.item_group)\n\t\t\tgroup_numero = group.numero\n                        self.item_name = group.name\n\t\t\tif group_numero:\n\t\t\t\tif self.variant_of:\n\t\t\t\t\tfabricant = frappe.get_doc('Manufacturer',self.manufacturer)\n\t\t\t\t\tself.item_code = make_autoname(self.variant_of+\"-\"+fabricant.code+\".##\")\n\t\t\t\telse:\n\t\t\t\t\tif(len(group_numero) < 6):\n\t\t\t\t\t\tgroup_numero = group_numero.ljust(6,'0')\n\t\t\t\t\tself.item_code = make_autoname(group_numero + \"-\" + \".####\")\n\t\t\telse:\n\t\t\t\tmsgprint(_(\"Impossible de generer le code. Groupe article n'est pas numerote.\"), raise_exception=1)\n\t\tself.nom_generique_long = self.item_name\n\t\tif self.designation_commerciale:\n\t\t\tself.nom_generique_long += ' '+self.designation_commerciale\n\t\tself.item_code = strip(self.item_code)\n\t\tself.name = self.item_code\n\tdef before_insert(self):\n\t\tif not self.description:\n\t\t\tself.description = self.titre_article\n\t\tself.ref_fabricant = self.manufacturer_part_no\n\t\t# if self.is_sales_item and not self.get('is_item_from_hub'):\n\t\t# \tself.publish_in_hub = 1\n\tdef after_insert(self):\n\t\t'''set opening stock and item price'''\n\t\tif self.standard_rate:\n\t\t\tfor default in self.item_defaults:\n\t\t\t\tself.add_price(default.default_price_list)\n\t\tif self.opening_stock:\n\t\t\tself.set_opening_stock()\n        def set_prices(self): \n                if self.has_variants:\n                    price_list = frappe.get_all(\"Item Price\",fields=[\"name\",\"price_list\",\"price_list_rate\",\"currency\",\"selling\",\"buying\",\"manufacturer\",\"manufacturer_part_no\"],filters={\"item_model\":self.name})\n                    if price_list:\n                        self.prices = \"\"\n                        self.selling = \"\"\n                        for price in price_list:\n                            text = \"%s %s : %s : %.2f %s\" % (price.manufacturer,price.manufacturer_part_no,price.price_list,price.price_list_rate,price.currency)\n                            if price.buying == 1:\n                                self.prices += text+ \" / \\n\"\n                            if price.selling == 1:\n                                self.selling += text +\" / \\n\"\n                            #self.prices += \"/ \\n\"\n\tdef validate(self):\n\t\tif self.versions and self.generation_vehicule_supporte:\n\t\t\tfrappe.msgprint(\"Attention vous avez mis des valeurs dans table Version vehicule et Generation vehicule au meme temps!\")\n\t\tif self.versions and self.modele_vehicule_supporte:\n\t\t\tfrappe.msgprint(\"Attention vous avez mis des valeurs dans table Version vehicule et Modeles vehicule au meme temps!\")\n\t\tif self.versions and self.marque_vehicule_supporte:\n\t\t\tfrappe.msgprint(\"Attention vous avez mis des valeurs dans table Version vehicule et marque vehicule au meme temps!\")\n\t\tif self.generation_vehicule_supporte and self.modele_vehicule_supporte:\n\t\t\tfrappe.msgprint(\"Attention vous avez mis des valeurs dans table Generation vehicule et Modeles vehicule au meme temps!\")\n\t\t\n\t\tcr = []\n\t\t#if self.has_variants:\n\t\tfor critere in self.critere_piece:\n\t\t\tif critere.important:\n\t\t\t\tcr.append(\"{0}: {1}\".format(critere.parametre, (critere.valeur_p or '') +' '+ (critere.valeur or '')))\n\t\t\n\t\tfor vcritere in self.criteres_piece_variante:\n\t\t\tif vcritere.important:\n\t\t\t\tcr.append(\"{0}: {1}\".format(vcritere.parametre, (vcritere.valeur_p or '') +' '+ (vcritere.valeur or '')))\n\t\tif cr:\n\t\t\tself.critere_text = ' / '.join(str(x) for x in cr)\n\t\t\n\t\t\t\t#critere_text\n                self.oem_text = \"\"\n\t\tfor o in self.oem:\n\t\t\tif o.oem:\n\t\t\t\to.oem_simplifie = ''.join(e for e in o.oem if e.isalnum()).replace(\" \",\"\").replace(\"-\",\"\").replace(\".\",\"\").replace(\"/\",\"\").replace(\"_\",\"\").replace(\":\",\"\")\n\t\tif self.oem:\n\t\t\tself.oem_text = ' - '.join(str(x.oem_simplifie or x.oem) for x in self.oem)\n                #for moem in self.oem:\n                #    self.oem_text += \"%s - \" % moem.oem\n\t\tself.get_doc_before_save()\n\t\tif self.manufacturer_part_no:\n\t\t\tself.ref_fabricant = self.manufacturer_part_no\n\t\tif self.manufacturer:\n\t\t\tlogo = frappe.get_doc(\"Manufacturer\",self.manufacturer)\n\t\t\tself.fabricant_logo = logo.logo\n\t\t\tself.titre_article = self.nom_groupe+' : '+self.manufacturer_part_no+' '+logo.full_name\n\t\telse:\n\t\t\tself.titre_article = self.item_name\n\t\tsuper(Item, self).validate()\n\t\tif self.has_variants == 0 and self.variant_of and self.variant_based_on == 'Manufacturer' and not self.manufacturer_part_no:\n\t\t\tfrappe.throw(_(\"Numero piece fabricant n'est pas valide\"))\n\t\tif not \tself.item_name:\n\t\t\tself.item_name = self.item_code\n\t\tif not self.description:\n\t\t\tself.description = self.titre_article\n\t\t\n\t\tself.validate_uom()\n\t\tself.validate_description()\n\t\tself.add_default_uom_in_conversion_factor_table()\n\t\tself.validate_conversion_factor()\n\t\tself.validate_item_type()\n\t\tself.check_for_active_boms()\n\t\tself.fill_customer_code()\n\t\tself.check_item_tax()\n\t\tself.validate_barcode()\n\t\tself.validate_warehouse_for_reorder()\n\t\tself.update_bom_item_desc()\n\t\tself.synced_with_hub = 0\n\t\tself.validate_has_variants()\n\t\tself.validate_stock_exists_for_template_item()\n\t\tself.validate_attributes()\n\t\tself.validate_variant_attributes()\n\t\tself.validate_variant_based_on_change()\n\t\tself.validate_website_image()\n\t\tself.make_thumbnail()\n\t\tself.validate_fixed_asset()\n\t\tself.validate_retain_sample()\n\t\tself.validate_uom_conversion_factor()\n\t\tself.validate_item_defaults()\n\t\tself.update_defaults_from_item_group()\n\t\tself.validate_stock_for_has_batch_and_has_serial()\n\t\t\n\t\tif self.has_variants:\n\t\t\tcount = frappe.db.sql(\"\"\"select count(name) as cnt from `tabItem` where variant_of='%s'\"\"\" % (self.name),as_dict=1)\n\t\t\tif count:\n\t\t\t\tself.nbr_variante = count[0]['cnt'] or 0\n\t\telse:\n\t\t\tcount = frappe.db.sql(\"\"\"select count(name) as cnt from `tabItem` where variant_of='%s'\"\"\" % (self.variant_of),as_dict=1)\n\t\t\tif count:\n\t\t\t\tself.nbr_variante = count[0]['cnt'] or 0\n\t\t#\tself.nbr_var = ''\n\t\t#\tvars = frappe.db.sql(''' select count(name) from `tabItem` where variant_of=%s ''',self.name)\n\t\t#\tif vars:\n\t\t#\t\tself.nbr_var = vars[0] or 0\n                # set table reorder\n                min_qts = self.recom_minimum\n\t\tqts = self.recom_qts\n\t\tif self.manufacturer_part_no:\n\t\t\tself.clean_manufacturer_part_number = self.manufacturer_part_no.replace(\" \",\"\").replace(\"-\",\"\").replace(\"_\",\"\").replace(\"/\",\"\").replace(\".\",\"\")\n\t\tif min_qts == -1 and qts == -1:\n\t\t    self.reorder_levels = []\n\t\t    self.recom_minimum = 0\n                    self.recom_qts = 0\n                if min_qts > 0 :\n\t\t    if not qts or qts == 0:\n\t\t\tqts = 1\n                    levels = frappe.get_all(\"Item Reorder\",fields=[\"warehouse_group\",\"name\",\"parent\",\"warehouse\"],filters=[{\"parent\":self.name},{\"warehouse\":\"GLOBAL - MV\"}])\n                    original = list(filter(lambda x: x.warehouse != \"GLOBAL - MV\",self.reorder_levels))\n                    self.reorder_levels = []\n                    row = self.append('reorder_levels',{})\n                    row.warehouse='GLOBAL - MV'\n\t\t    row.warehouse_group='GLOBAL - MV'\n                    row.warehouse_reorder_level=min_qts\n                    row.warehouse_reorder_qty=qts\n                    row.material_request_type='Purchase'\n\t\t    self.reorder_levels.extend(original)\n                    self.recom_minimum = 0\n                    self.recom_qts = 0\n                #elif levels:\n                    #level = frappe.get_doc(\"Item Reorder\",levels[0].name)\n                    #level.warehouse_reorder_level=min_qts\n                    #level.warehouse_reorder_qty=qts\n                    #level.save()\n                #original = list(filter(lambda(x: x.warehouse != \"GLOBAL - MV\",self.reorder_levels))\n\t\tnom_g = ''\n\t\tif self.variant_of and self.manufacturer_part_no and self.manufacturer:\n\t\t\tnom_g +=nom_g+ (self.manufacturer or '') +' '+(self.manufacturer_part_no or '') +' '+ (self.item_name or '') + ' '\n\t\tif self.has_variants:\n\t\t\tnom_g += (self.item_name or '') + ' '\n\t\tif self.oem_text:\n\t\t\tnom_g += (self.oem_text or '') + ' '\n\t\tif self.critere_text:\n\t\t\tnom_g += (self.critere_text or '') + ' '\n\t\tif self.composant_text:\n\t\t\tnom_g += 'Composant : ' + (self.composant_text or '')+ ' '\n\t\tif self.articles_text:\n\t\t\tnom_g += 'Complements : ' + (self.articles_text or '')+ ' '\n\t\tif self.clean_manufacturer_part_number:\n\t\t\tnom_g += (self.clean_manufacturer_part_number or '') + ' '\n\t\tfor v in self.versions:\n\t\t\tnom_g += (v.marque_vehicule or '')+' '+(v.modele_vehicule or '')+' '+(v.nom_version or '')+' - '\n\t\tfor g in self.generation_vehicule_supporte:\n\t\t\tnom_g += (g.nom_marque or '')+' '+(g.nom_generation or '')+' - '\n\t\tfor g in self.modele_vehicule_supporte:\n\t\t\tnom_g += (g.nom_marque or '')+' '+(g.nom_modele or '')+' - '\n\t\tfor g in self.marque_vehicule_supporte:\n\t\t\tnom_g += (g.marque or '')+' '\n\t\t\n\t\t\t\n\t\tself.nom_generique_long = (nom_g or '').lower()\n\t\tif not self.get(\"__islocal\"):\n\t\t\tself.old_item_group = frappe.db.get_value(self.doctype, self.name, \"item_group\")\n\t\t\tself.old_website_item_groups = frappe.db.sql_list(\"\"\"select item_group\n\t\t\t\t\tfrom `tabWebsite Item Group`\n\t\t\t\t\twhere parentfield='website_item_groups' and parenttype='Item' and parent=%s\"\"\", self.name)\n\t\t# update qts\n\t\tself.set_qts()\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\tdef set_qts(self,save=False):\n\t\tif not self.has_variants:\n\t\t\tself.qts_total = 0\t\t\t\t\n\t\t\tself.qts_depot =0\n\t\t\tstotal = frappe.db.sql(\"\"\"select sum(actual_qty) from  tabBin  where item_code=%s\"\"\",[self.item_code])\n\t\t\t#frappe.msgprint(\"stotal: %s\" % stotal)\n\t\t\tif stotal:\n\t\t\t\tself.qts_total = stotal[0][0]\n\t\t\t\t\n\t\t\tdepot_parent  = frappe.db.get_value('Stock Settings', None, 'depot_parent')\n\t\t\tif depot_parent:\n\t\t\t\twarehouses= frappe.db.sql(\"\"\"select name from `tabWarehouse` where parent_warehouse=%s\"\"\",(depot_parent),as_dict=True)\n\t\t\t\tif warehouses:\n\t\t\t\t\tqtotal = frappe.db.sql(\"\"\"select sum(actual_qty) from  tabBin  where item_code='%s' and warehouse in (%s)\"\"\" % (self.item_code,', '.join(['%s']*len(warehouses))),tuple([w.name for w in warehouses]))\n\t\t\t\t\t#frappe.msgprint(\"%s\" % warehouses)\n\t\t\t\t\tif qtotal:\n\t\t\t\t\t\tself.qts_depot = qtotal[0][0]\n\t\t\tif save:\n\t\t\t\t#self.save()\n\t\t\t\t\n\t\t\t\tfrappe.db.set_value(\"Item\", self.name, \"qts_total\", self.qts_total)\n\t\t\t\tfrappe.db.set_value(\"Item\", self.name, \"qts_depot\", self.qts_depot)\n\t\t\t\tfrappe.db.commit()\n\tdef sync_comp(self):\n\t\tif self.variant_of:\n\t\t\tself.composant_text = \"\"\n\t\t\t#_variantes = frappe.db.sql(\"\"\" select name,manufacturer_part_no,manufacturer from  `tabItem` where variant_of= '{}'\"\"\".format(self.name),as_dict=True)\n\t\t\tfor cmp in self.composant:\n\t\t\t\tif cmp.manufacturer_part_no:\n\t\t\t\t\tself.composant_text += \"%s (%s) /\" % ((cmp.manufacturer_part_no or ''),cmp.item_group )\n\t\t\t\telif cmp.item:\n\t\t\t\t\tvar_comp = frappe.db.sql(\"\"\" select name,item_group,manufacturer_part_no,manufacturer from  `tabItem` where variant_of= '{}' and manufacturer='{}' limit 1\"\"\".format(cmp.item,self.manufacturer),as_dict=True)\n\t\t\t\t\tif var_comp:\n\t\t\t\t\t\t_comp=var_comp[0]\n\t\t\t\t\t\tself.composant_text += \"%s (%s) /\" %  ((_comp.manufacturer_part_no or ''),_comp.item_group)\n\t\t\n\t\t\tself.articles_text= \"\"\n\t\t\tfor art in self.articles:\n\t\t\t\tif art.manufacturer_part_no:\n\t\t\t\t\tself.articles_text += \"%s (%s) /\" % ((art.manufacturer_part_no or ''),art.item_group )\n\t\t\t\telif art.item:\n\t\t\t\t\tvar_comp = frappe.db.sql(\"\"\" select name,item_group,manufacturer_part_no,manufacturer from  `tabItem` where variant_of= '{}' and manufacturer='{}' limit 1\"\"\".format(art.item,self.manufacturer),as_dict=True)\n\t\t\t\t\tif var_comp:\n\t\t\t\t\t\t_comp=var_comp[0]\n\t\t\t\t\t\tself.articles_text += \"%s (%s) /\" % ((_comp.manufacturer_part_no or '')  ,_comp.item_group )\n\tdef on_update(self):\n\t\tinvalidate_cache_for_item(self)\n\t\tself.validate_name_with_item_group()\n\t\tself.update_variants()\n\t\tself.update_item_price()\n\t\tself.update_template_item()\n\t\tself.sync_comp()\n\t\t\n\t\t\n\t\t\n\tdef validate_description(self):\n\t\t'''Clean HTML description if set'''\n\t\tif cint(frappe.db.get_single_value('Stock Settings', 'clean_description_html')):\n\t\t\tself.description = clean_html(self.description)\n\tdef add_price(self, price_list=None):\n\t\t'''Add a new price'''\n\t\tif not price_list:\n\t\t\tprice_list = (frappe.db.get_single_value('Selling Settings', 'selling_price_list')\n\t\t\t\t\t\tor frappe.db.get_value('Price List', _('Standard Selling')))\n\t\tif price_list:\n\t\t\titem_price = frappe.get_doc({\n\t\t\t\t\"doctype\": \"Item Price\",\n\t\t\t\t\"price_list\": price_list,\n\t\t\t\t\"item_code\": self.name,\n\t\t\t\t\"currency\": erpnext.get_default_currency(),\n\t\t\t\t\"price_list_rate\": self.standard_rate\n\t\t\t})\n\t\t\titem_price.insert()\n\tdef set_opening_stock(self):\n\t\t'''set opening stock'''\n\t\tif not self.is_stock_item or self.has_serial_no or self.has_batch_no:\n\t\t\treturn\n\t\tif not self.valuation_rate and self.standard_rate:\n\t\t\tself.valuation_rate = self.standard_rate\n\t\tif not self.valuation_rate:\n\t\t\tfrappe.throw(_(\"Valuation Rate is mandatory if Opening Stock entered\"))\n\t\tfrom erpnext.stock.doctype.stock_entry.stock_entry_utils import make_stock_entry\n\t\t# default warehouse, or Stores\n\t\tfor default in self.item_defaults:\n\t\t\tdefault_warehouse = (default.default_warehouse\n\t\t\t\t\tor frappe.db.get_single_value('Stock Settings', 'default_warehouse')\n\t\t\t\t\tor frappe.db.get_value('Warehouse', {'warehouse_name': _('Stores')}))\n\t\t\tif default_warehouse:\n\t\t\t\tstock_entry = make_stock_entry(item_code=self.name, target=default_warehouse, qty=self.opening_stock,\n\t\t\t\t\t\t\t\t\t\t\t\trate=self.valuation_rate, company=default.company)\n\t\t\t\tstock_entry.add_comment(\"Comment\", _(\"Opening Stock\"))\n\tdef make_route(self):\n\t\tif not self.route:\n\t\t\treturn cstr(frappe.db.get_value('Item Group', self.item_group,\n\t\t\t\t\t'route')) + '/' + self.scrub((self.item_name if self.item_name else self.item_code) + '-' + random_string(5))\n\tdef validate_website_image(self):\n\t\t\"\"\"Validate if the website image is a public file\"\"\"\n\t\tauto_set_website_image = False\n\t\tif not self.website_image and self.image:\n\t\t\tauto_set_website_image = True\n\t\t\tself.website_image = self.image\n\t\tif not self.website_image:\n\t\t\treturn\n\t\t# find if website image url exists as public\n\t\tfile_doc = frappe.get_all(\"File\", filters={\n\t\t\t\"file_url\": self.website_image\n\t\t}, fields=[\"name\", \"is_private\"], order_by=\"is_private asc\", limit_page_length=1)\n\t\tif file_doc:\n\t\t\tfile_doc = file_doc[0]\n\t\tif not file_doc:\n\t\t\tif not auto_set_website_image:\n\t\t\t\tfrappe.msgprint(_(\"Website Image {0} attached to Item {1} cannot be found\")\n\t\t\t\t\t\t\t\t\t.format(self.website_image, self.name))\n\t\t\tself.website_image = None\n\t\telif file_doc.is_private:\n\t\t\tif not auto_set_website_image:\n\t\t\t\tfrappe.msgprint(_(\"Website Image should be a public file or website URL\"))\n\t\t\tself.website_image = None\n\tdef make_thumbnail(self):\n\t\t\"\"\"Make a thumbnail of `website_image`\"\"\"\n\t\timport requests.exceptions\n\t\tif not self.is_new() and self.website_image != frappe.db.get_value(self.doctype, self.name, \"website_image\"):\n\t\t\tself.thumbnail = None\n\t\tif self.website_image and not self.thumbnail:\n\t\t\tfile_doc = None\n\t\t\ttry:\n\t\t\t\tfile_doc = frappe.get_doc(\"File\", {\n\t\t\t\t\t\"file_url\": self.website_image,\n\t\t\t\t\t\"attached_to_doctype\": \"Item\",\n\t\t\t\t\t\"attached_to_name\": self.name\n\t\t\t\t})\n\t\t\texcept frappe.DoesNotExistError:\n\t\t\t\tpass\n\t\t\t\t# cleanup\n\t\t\t\tfrappe.local.message_log.pop()\n\t\t\texcept requests.exceptions.HTTPError:\n\t\t\t\tfrappe.msgprint(_(\"Warning: Invalid attachment {0}\").format(self.website_image))\n\t\t\t\tself.website_image = None\n\t\t\texcept requests.exceptions.SSLError:\n\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t_(\"Warning: Invalid SSL certificate on attachment {0}\").format(self.website_image))\n\t\t\t\tself.website_image = None\n\t\t\t# for CSV import\n\t\t\tif self.website_image and not file_doc:\n\t\t\t\ttry:\n\t\t\t\t\tfile_doc = frappe.get_doc({\n\t\t\t\t\t\t\"doctype\": \"File\",\n\t\t\t\t\t\t\"file_url\": self.website_image,\n\t\t\t\t\t\t\"attached_to_doctype\": \"Item\",\n\t\t\t\t\t\t\"attached_to_name\": self.name\n\t\t\t\t\t}).insert()\n\t\t\t\texcept IOError:\n\t\t\t\t\tself.website_image = None\n\t\t\tif file_doc:\n\t\t\t\tif not file_doc.thumbnail_url:\n\t\t\t\t\tfile_doc.make_thumbnail()\n\t\t\t\tself.thumbnail = file_doc.thumbnail_url\n\tdef validate_fixed_asset(self):\n\t\tif self.is_fixed_asset:\n\t\t\tif self.is_stock_item:\n\t\t\t\tfrappe.throw(_(\"Fixed Asset Item must be a non-stock item.\"))\n\t\t\tif not self.asset_category:\n\t\t\t\tfrappe.throw(_(\"Asset Category is mandatory for Fixed Asset item\"))\n\t\t\tif self.stock_ledger_created():\n\t\t\t\tfrappe.throw(_(\"Cannot be a fixed asset item as Stock Ledger is created.\"))\n\t\tif not self.is_fixed_asset:\n\t\t\tasset = frappe.db.get_all(\"Asset\", filters={\"item_code\": self.name, \"docstatus\": 1}, limit=1)\n\t\t\tif asset:\n\t\t\t\tfrappe.throw(_('\"Is Fixed Asset\" cannot be unchecked, as Asset record exists against the item'))\n\tdef validate_retain_sample(self):\n\t\tif self.retain_sample and not frappe.db.get_single_value('Stock Settings', 'sample_retention_warehouse'):\n\t\t\tfrappe.throw(_(\"Please select Sample Retention Warehouse in Stock Settings first\"))\n\t\tif self.retain_sample and not self.has_batch_no:\n\t\t\tfrappe.throw(_(\" {0} Retain Sample is based on batch, please check Has Batch No to retain sample of item\").format(\n\t\t\t\tself.item_code))\n\tdef get_context(self, context):\n\t\tcontext.show_search = True\n\t\tcontext.search_link = '/product_search'\n\t\tcontext.parents = get_parent_item_groups(self.item_group)\n\t\tself.set_variant_context(context)\n\t\tself.set_attribute_context(context)\n\t\tself.set_disabled_attributes(context)\n\t\treturn context\n\tdef set_variant_context(self, context):\n\t\tif self.has_variants:\n\t\t\tcontext.no_cache = True\n\t\t\t# load variants\n\t\t\t# also used in set_attribute_context\n\t\t\tcontext.variants = frappe.get_all(\"Item\",\n\t\t\t\t filters={\"variant_of\": self.name, \"show_variant_in_website\": 1},\n\t\t\t\t order_by=\"name asc\")\n\t\t\tvariant = frappe.form_dict.variant\n\t\t\tif not variant and context.variants:\n\t\t\t\t# the case when the item is opened for the first time from its list\n\t\t\t\tvariant = context.variants[0]\n\t\t\tif variant:\n\t\t\t\tcontext.variant = frappe.get_doc(\"Item\", variant)\n\t\t\t\tfor fieldname in (\"website_image\", \"web_long_description\", \"description\",\n\t\t\t\t\t\t\t\t\t\t\"website_specifications\"):\n\t\t\t\t\tif context.variant.get(fieldname):\n\t\t\t\t\t\tvalue = context.variant.get(fieldname)\n\t\t\t\t\t\tif isinstance(value, list):\n\t\t\t\t\t\t\tvalue = [d.as_dict() for d in value]\n\t\t\t\t\t\tcontext[fieldname] = value\n\t\tif self.slideshow:\n\t\t\tif context.variant and context.variant.slideshow:\n\t\t\t\tcontext.update(get_slideshow(context.variant))\n\t\t\telse:\n\t\t\t\tcontext.update(get_slideshow(self))\n\tdef set_attribute_context(self, context):\n\t\tif self.has_variants:\n\t\t\tattribute_values_available = {}\n\t\t\tcontext.attribute_values = {}\n\t\t\tcontext.selected_attributes = {}\n\t\t\t# load attributes\n\t\t\tfor v in context.variants:\n\t\t\t\tv.attributes = frappe.get_all(\"Item Variant Attribute\",\n\t\t\t\t\t  fields=[\"attribute\", \"attribute_value\"],\n\t\t\t\t\t  filters={\"parent\": v.name})\n\t\t\t\tfor attr in v.attributes:\n\t\t\t\t\tvalues = attribute_values_available.setdefault(attr.attribute, [])\n\t\t\t\t\tif attr.attribute_value not in values:\n\t\t\t\t\t\tvalues.append(attr.attribute_value)\n\t\t\t\t\tif v.name == context.variant.name:\n\t\t\t\t\t\tcontext.selected_attributes[attr.attribute] = attr.attribute_value\n\t\t\t# filter attributes, order based on attribute table\n\t\t\tfor attr in self.attributes:\n\t\t\t\tvalues = context.attribute_values.setdefault(attr.attribute, [])\n\t\t\t\tif cint(frappe.db.get_value(\"Item Attribute\", attr.attribute, \"numeric_values\")):\n\t\t\t\t\tfor val in sorted(attribute_values_available.get(attr.attribute, []), key=flt):\n\t\t\t\t\t\tvalues.append(val)\n\t\t\t\telse:\n\t\t\t\t\t# get list of values defined (for sequence)\n\t\t\t\t\tfor attr_value in frappe.db.get_all(\"Item Attribute Value\",\n\t\t\t\t\t\tfields=[\"attribute_value\"],\n\t\t\t\t\t\tfilters={\"parent\": attr.attribute}, order_by=\"idx asc\"):\n\t\t\t\t\t\tif attr_value.attribute_value in attribute_values_available.get(attr.attribute, []):\n\t\t\t\t\t\t\tvalues.append(attr_value.attribute_value)\n\t\t\tcontext.variant_info = json.dumps(context.variants)\n\tdef set_disabled_attributes(self, context):\n\t\t\"\"\"Disable selection options of attribute combinations that do not result in a variant\"\"\"\n\t\tif not self.attributes or not self.has_variants:\n\t\t\treturn\n\t\tcontext.disabled_attributes = {}\n\t\tattributes = [attr.attribute for attr in self.attributes]\n\t\tdef find_variant(combination):\n\t\t\tfor variant in context.variants:\n\t\t\t\tif len(variant.attributes) < len(attributes):\n\t\t\t\t\tcontinue\n\t\t\t\tif \"combination\" not in variant:\n\t\t\t\t\tref_combination = []\n\t\t\t\t\tfor attr in variant.attributes:\n\t\t\t\t\t\tidx = attributes.index(attr.attribute)\n\t\t\t\t\t\tref_combination.insert(idx, attr.attribute_value)\n\t\t\t\t\tvariant[\"combination\"] = ref_combination\n\t\t\t\tif not (set(combination) - set(variant[\"combination\"])):\n\t\t\t\t\t# check if the combination is a subset of a variant combination\n\t\t\t\t\t# eg. [Blue, 0.5] is a possible combination if exists [Blue, Large, 0.5]\n\t\t\t\t\treturn True\n\t\tfor i, attr in enumerate(self.attributes):\n\t\t\tif i == 0:\n\t\t\t\tcontinue\n\t\t\tcombination_source = []\n\t\t\t# loop through previous attributes\n\t\t\tfor prev_attr in self.attributes[:i]:\n\t\t\t\tcombination_source.append([context.selected_attributes.get(prev_attr.attribute)])\n\t\t\tcombination_source.append(context.attribute_values[attr.attribute])\n\t\t\tfor combination in itertools.product(*combination_source):\n\t\t\t\tif not find_variant(combination):\n\t\t\t\t\tcontext.disabled_attributes.setdefault(attr.attribute, []).append(combination[-1])\n\tdef add_default_uom_in_conversion_factor_table(self):\n\t\tuom_conv_list = [d.uom for d in self.get(\"uoms\")]\n\t\tif self.stock_uom not in uom_conv_list:\n\t\t\tch = self.append('uoms', {})\n\t\t\tch.uom = self.stock_uom\n\t\t\tch.conversion_factor = 1\n\t\tto_remove = []\n\t\tfor d in self.get(\"uoms\"):\n\t\t\tif d.conversion_factor == 1 and d.uom != self.stock_uom:\n\t\t\t\tto_remove.append(d)\n\t\t[self.remove(d) for d in to_remove]\n\tdef update_template_tables(self):\n\t\ttemplate = frappe.get_doc(\"Item\", self.variant_of)\n\t\t# add item taxes from template\n\t\tfor d in template.get(\"taxes\"):\n\t\t\tself.append(\"taxes\", {\"tax_type\": d.tax_type, \"tax_rate\": d.tax_rate})\n\t\t# copy re-order table if empty\n\t\tif not self.get(\"reorder_levels\"):\n\t\t\tfor d in template.get(\"reorder_levels\"):\n\t\t\t\tn = {}\n\t\t\t\tfor k in (\"warehouse\", \"warehouse_reorder_level\",\n\t\t\t\t\t\"warehouse_reorder_qty\", \"material_request_type\"):\n\t\t\t\t\tn[k] = d.get(k)\n\t\t\t\tself.append(\"reorder_levels\", n)\n\tdef validate_conversion_factor(self):\n\t\tcheck_list = []\n\t\tfor d in self.get('uoms'):\n\t\t\tif cstr(d.uom) in check_list:\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\"Unit of Measure {0} has been entered more than once in Conversion Factor Table\").format(d.uom))\n\t\t\telse:\n\t\t\t\tcheck_list.append(cstr(d.uom))\n\t\t\tif d.uom and cstr(d.uom) == cstr(self.stock_uom) and flt(d.conversion_factor) != 1:\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\"Conversion factor for default Unit of Measure must be 1 in row {0}\").format(d.idx))\n\tdef validate_item_type(self):\n\t\tif self.has_serial_no == 1 and self.is_stock_item == 0 and not self.is_fixed_asset:\n\t\t\tmsgprint(_(\"'Has Serial No' can not be 'Yes' for non-stock item\"), raise_exception=1)\n\t\tif self.has_serial_no == 0 and self.serial_no_series:\n\t\t\tself.serial_no_series = None\n\tdef check_for_active_boms(self):\n\t\tif self.default_bom:\n\t\t\tbom_item = frappe.db.get_value(\"BOM\", self.default_bom, \"item\")\n\t\t\tif bom_item not in (self.name, self.variant_of):\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\"Default BOM ({0}) must be active for this item or its template\").format(bom_item))\n\tdef fill_customer_code(self):\n\t\t\"\"\" Append all the customer codes and insert into \"customer_code\" field of item table \"\"\"\n\t\tcust_code = []\n\t\tfor d in self.get('customer_items'):\n\t\t\tcust_code.append(d.ref_code)\n\t\tself.customer_code = ','.join(cust_code)\n\tdef check_item_tax(self):\n\t\t\"\"\"Check whether Tax Rate is not entered twice for same Tax Type\"\"\"\n\t\tcheck_list = []\n\t\tfor d in self.get('taxes'):\n\t\t\tif d.tax_type:\n\t\t\t\taccount_type = frappe.db.get_value(\"Account\", d.tax_type, \"account_type\")\n\t\t\t\tif account_type not in ['Tax', 'Chargeable', 'Income Account', 'Expense Account']:\n\t\t\t\t\tfrappe.throw(\n\t\t\t\t\t\t_(\"Item Tax Row {0} must have account of type Tax or Income or Expense or Chargeable\").format(d.idx))\n\t\t\t\telse:\n\t\t\t\t\tif d.tax_type in check_list:\n\t\t\t\t\t\tfrappe.throw(_(\"{0} entered twice in Item Tax\").format(d.tax_type))\n\t\t\t\t\telse:\n\t\t\t\t\t\tcheck_list.append(d.tax_type)\n\tdef validate_barcode(self):\n\t\tfrom stdnum import ean\n\t\tif len(self.barcodes) > 0:\n\t\t\tfor item_barcode in self.barcodes:\n\t\t\t\toptions = frappe.get_meta(\"Item Barcode\").get_options(\"barcode_type\").split('\\n')\n\t\t\t\tif item_barcode.barcode:\n\t\t\t\t\tduplicate = frappe.db.sql(\n\t\t\t\t\t\t\"\"\"select parent from `tabItem Barcode` where barcode = %s and parent != %s\"\"\", (item_barcode.barcode, self.name))\n\t\t\t\t\tif duplicate:\n\t\t\t\t\t\tfrappe.throw(_(\"Barcode {0} already used in Item {1}\").format(\n\t\t\t\t\t\t\titem_barcode.barcode, duplicate[0][0]), frappe.DuplicateEntryError)\n\t\t\t\t\titem_barcode.barcode_type = \"\" if item_barcode.barcode_type not in options else item_barcode.barcode_type\n\t\t\t\t\tif item_barcode.barcode_type and item_barcode.barcode_type.upper() in ('EAN', 'UPC-A', 'EAN-13', 'EAN-8'):\n\t\t\t\t\t\tif not ean.is_valid(item_barcode.barcode):\n\t\t\t\t\t\t\tfrappe.throw(_(\"Barcode {0} is not a valid {1} code\").format(\n\t\t\t\t\t\t\t\titem_barcode.barcode, item_barcode.barcode_type), InvalidBarcode)\n\tdef validate_warehouse_for_reorder(self):\n\t\t'''Validate Reorder level table for duplicate and conditional mandatory'''\n\t\twarehouse = []\n\t\tfor d in self.get(\"reorder_levels\"):\n\t\t\tif not d.warehouse_group:\n\t\t\t\td.warehouse_group = d.warehouse\n\t\t\tif d.get(\"warehouse\") and d.get(\"warehouse\") not in warehouse:\n\t\t\t\twarehouse += [d.get(\"warehouse\")]\n\t\t\telse:\n\t\t\t\tfrappe.throw(_(\"Row {0}: An Reorder entry already exists for this warehouse {1}\")\n\t\t\t\t\t\t\t\t\t.format(d.idx, d.warehouse), DuplicateReorderRows)\n\t\t\tif d.warehouse_reorder_level and not d.warehouse_reorder_qty:\n\t\t\t\tfrappe.throw(_(\"Row #{0}: Please set reorder quantity\").format(d.idx))\n\tdef stock_ledger_created(self):\n\t\tif not hasattr(self, '_stock_ledger_created'):\n\t\t\tself._stock_ledger_created = len(frappe.db.sql(\"\"\"select name from `tabStock Ledger Entry`\n\t\t\t\twhere item_code = %s limit 1\"\"\", self.name))\n\t\treturn self._stock_ledger_created\n\tdef validate_name_with_item_group(self):\n\t\t# causes problem with tree build\n\t\tif frappe.db.exists(\"Item Group\", self.name):\n\t\t\tfrappe.throw(\n\t\t\t\t_(\"An Item Group exists with same name, please change the item name or rename the item group\"))\n\tdef update_item_price(self):\n\t\tfrappe.db.sql(\"\"\"update `tabItem Price` set item_name=%s,\n\t\t\titem_description=%s, brand=%s where item_code=%s\"\"\",\n\t\t\t\t\t(self.item_name, self.description, self.brand, self.name))\n\tdef on_trash(self):\n\t\tsuper(Item, self).on_trash()\n\t\tfrappe.db.sql(\"\"\"delete from tabBin where item_code=%s\"\"\", self.name)\n\t\tfrappe.db.sql(\"delete from `tabItem Price` where item_code=%s\", self.name)\n\t\tfor variant_of in frappe.get_all(\"Item\", filters={\"variant_of\": self.name}):\n\t\t\tfrappe.delete_doc(\"Item\", variant_of.name)\n\tdef before_rename(self, old_name, new_name, merge=False):\n\t\tif self.item_name == old_name:\n\t\t\tfrappe.db.set_value(\"Item\", old_name, \"item_name\", new_name)\n\t\tif merge:\n\t\t\t# Validate properties before merging\n\t\t\tif not frappe.db.exists(\"Item\", new_name):\n\t\t\t\tfrappe.throw(_(\"Item {0} does not exist\").format(new_name))\n\t\t\tfield_list = [\"stock_uom\", \"is_stock_item\", \"has_serial_no\", \"has_batch_no\"]\n\t\t\tnew_properties = [cstr(d) for d in frappe.db.get_value(\"Item\", new_name, field_list)]\n\t\t\tif new_properties != [cstr(self.get(fld)) for fld in field_list]:\n\t\t\t\tfrappe.throw(_(\"To merge, following properties must be same for both items\")\n\t\t\t\t\t\t\t\t\t+ \": \\n\" + \", \".join([self.meta.get_label(fld) for fld in field_list]))\n\tdef after_rename(self, old_name, new_name, merge):\n\t\tif self.route:\n\t\t\tinvalidate_cache_for_item(self)\n\t\t\tclear_cache(self.route)\n\t\tfrappe.db.set_value(\"Item\", new_name, \"item_code\", new_name)\n\t\tif merge:\n\t\t\tself.set_last_purchase_rate(new_name)\n\t\t\tself.recalculate_bin_qty(new_name)\n\t\tfor dt in (\"Sales Taxes and Charges\", \"Purchase Taxes and Charges\"):\n\t\t\tfor d in frappe.db.sql(\"\"\"select name, item_wise_tax_detail from `tab{0}`\n\t\t\t\t\twhere ifnull(item_wise_tax_detail, '') != ''\"\"\".format(dt), as_dict=1):\n\t\t\t\titem_wise_tax_detail = json.loads(d.item_wise_tax_detail)\n\t\t\t\tif isinstance(item_wise_tax_detail, dict) and old_name in item_wise_tax_detail:\n\t\t\t\t\titem_wise_tax_detail[new_name] = item_wise_tax_detail[old_name]\n\t\t\t\t\titem_wise_tax_detail.pop(old_name)\n\t\t\t\t\tfrappe.db.set_value(dt, d.name, \"item_wise_tax_detail\",\n\t\t\t\t\t\t\t\t\t\t\tjson.dumps(item_wise_tax_detail), update_modified=False)\n\tdef set_last_purchase_rate(self, new_name):\n\t\tlast_purchase_rate = get_last_purchase_details(new_name).get(\"base_rate\", 0)\n\t\tfrappe.db.set_value(\"Item\", new_name, \"last_purchase_rate\", last_purchase_rate)\n\tdef recalculate_bin_qty(self, new_name):\n\t\tfrom erpnext.stock.stock_balance import repost_stock\n\t\tfrappe.db.auto_commit_on_many_writes = 1\n\t\texisting_allow_negative_stock = frappe.db.get_value(\"Stock Settings\", None, \"allow_negative_stock\")\n\t\tfrappe.db.set_value(\"Stock Settings\", None, \"allow_negative_stock\", 1)\n\t\trepost_stock_for_warehouses = frappe.db.sql_list(\"\"\"select distinct warehouse\n\t\t\tfrom tabBin where item_code=%s\"\"\", new_name)\n\t\t# Delete all existing bins to avoid duplicate bins for the same item and warehouse\n\t\tfrappe.db.sql(\"delete from `tabBin` where item_code=%s\", new_name)\n\t\tfor warehouse in repost_stock_for_warehouses:\n\t\t\trepost_stock(new_name, warehouse)\n\t\tfrappe.db.set_value(\"Stock Settings\", None, \"allow_negative_stock\", existing_allow_negative_stock)\n\t\tfrappe.db.auto_commit_on_many_writes = 0\n\tdef copy_specification_from_item_group(self):\n\t\tself.set(\"website_specifications\", [])\n\t\tif self.item_group:\n\t\t\tfor label, desc in frappe.db.get_values(\"Item Website Specification\",\n\t\t\t\t\t\t\t\t\t\t   {\"parent\": self.item_group}, [\"label\", \"description\"]):\n\t\t\t\trow = self.append(\"website_specifications\")\n\t\t\t\trow.label = label\n\t\t\t\trow.description = desc\n\tdef update_bom_item_desc(self):\n\t\tif self.is_new():\n\t\t\treturn\n\t\tif self.db_get('description') != self.description:\n\t\t\tfrappe.db.sql(\"\"\"\n\t\t\t\tupdate `tabBOM`\n\t\t\t\tset description = %s\n\t\t\t\twhere item = %s and docstatus < 2\n\t\t\t\"\"\", (self.description, self.name))\n\t\t\tfrappe.db.sql(\"\"\"\n\t\t\t\tupdate `tabBOM Item`\n\t\t\t\tset description = %s\n\t\t\t\twhere item_code = %s and docstatus < 2\n\t\t\t\"\"\", (self.description, self.name))\n\t\t\tfrappe.db.sql(\"\"\"\n\t\t\t\tupdate `tabBOM Explosion Item`\n\t\t\t\tset description = %s\n\t\t\t\twhere item_code = %s and docstatus < 2\n\t\t\t\"\"\", (self.description, self.name))\n\tdef update_template_item(self):\n\t\t\"\"\"Set Show in Website for Template Item if True for its Variant\"\"\"\n\t\tif self.variant_of:\n\t\t\tif self.show_in_website:\n\t\t\t\tself.show_variant_in_website = 1\n\t\t\t\tself.show_in_website = 0\n\t\t\tif self.show_variant_in_website:\n\t\t\t\t# show template\n\t\t\t\ttemplate_item = frappe.get_doc(\"Item\", self.variant_of)\n\t\t\t\tif not template_item.show_in_website:\n\t\t\t\t\ttemplate_item.show_in_website = 1\n\t\t\t\t\ttemplate_item.flags.dont_update_variants = True\n\t\t\t\t\ttemplate_item.flags.ignore_permissions = True\n\t\t\t\t\ttemplate_item.save()\n\tdef validate_item_defaults(self):\n\t\tcompanies = list(set([row.company for row in self.item_defaults]))\n\t\tif len(companies) != len(self.item_defaults):\n\t\t\tfrappe.throw(_(\"Cannot set multiple Item Defaults for a company.\"))\n\tdef update_defaults_from_item_group(self):\n\t\t\"\"\"Get defaults from Item Group\"\"\"\n\t\tif self.item_group and not self.item_defaults:\n\t\t\titem_defaults = frappe.db.get_values(\"Item Default\", {\"parent\": self.item_group},\n\t\t\t\t['company', 'default_warehouse','default_price_list','buying_cost_center','default_supplier',\n\t\t\t\t'expense_account','selling_cost_center','income_account'], as_dict = 1)\n\t\t\tif item_defaults:\n\t\t\t\tfor item in item_defaults:\n\t\t\t\t\tself.append('item_defaults', {\n\t\t\t\t\t\t'company': item.company,\n\t\t\t\t\t\t'default_warehouse': item.default_warehouse,\n\t\t\t\t\t\t'default_price_list': item.default_price_list,\n\t\t\t\t\t\t'buying_cost_center': item.buying_cost_center,\n\t\t\t\t\t\t'default_supplier': item.default_supplier,\n\t\t\t\t\t\t'expense_account': item.expense_account,\n\t\t\t\t\t\t'selling_cost_center': item.selling_cost_center,\n\t\t\t\t\t\t'income_account': item.income_account\n\t\t\t\t\t})\n\t\t\telse:\n\t\t\t\twarehouse = ''\n\t\t\t\tdefaults = frappe.defaults.get_defaults() or {}\n\t\t\t\t# To check default warehouse is belong to the default company\n\t\t\t\tif defaults.get(\"default_warehouse\") and frappe.db.exists(\"Warehouse\",\n\t\t\t\t\t{'name': defaults.default_warehouse, 'company': defaults.company}):\n\t\t\t\t\twarehouse = defaults.default_warehouse\n\t\t\t\tself.append(\"item_defaults\", {\n\t\t\t\t\t\"company\": defaults.get(\"company\"),\n\t\t\t\t\t\"default_warehouse\": warehouse\n\t\t\t\t})\n\tdef update_variants(self):\n\t\tif self.flags.dont_update_variants or \\\n\t\t\t\t\t\tfrappe.db.get_single_value('Item Variant Settings', 'do_not_update_variants'):\n\t\t\treturn\n\t\tif self.has_variants:\n\t\t\tvariants = frappe.db.get_all(\"Item\", fields=[\"item_code\"], filters={\"variant_of\": self.name})\n\t\t\tif variants:\n\t\t\t\tif len(variants) <= 30:\n\t\t\t\t\tupdate_variants(variants, self, publish_progress=False)\n\t\t\t\t\tfrappe.msgprint(_(\"Item Variants updated\"))\n\t\t\t\telse:\n\t\t\t\t\tfrappe.enqueue(\"erpnext.stock.doctype.item.item.update_variants\",\n\t\t\t\t\t\tvariants=variants, template=self, now=frappe.flags.in_test, timeout=600)\n\tdef validate_has_variants(self):\n\t\tif not self.has_variants and frappe.db.get_value(\"Item\", self.name, \"has_variants\"):\n\t\t\tif frappe.db.exists(\"Item\", {\"variant_of\": self.name}):\n\t\t\t\tfrappe.throw(_(\"Item has variants.\"))\n\tdef validate_stock_exists_for_template_item(self):\n\t\tif self.stock_ledger_created() and self._doc_before_save:\n\t\t\tif (cint(self._doc_before_save.has_variants) != cint(self.has_variants)\n\t\t\t\tor self._doc_before_save.variant_of != self.variant_of):\n\t\t\t\tfrappe.throw(_(\"Cannot change Variant properties after stock transaction. You will have to make a new Item to do this.\").format(self.name),\n\t\t\t\t\tStockExistsForTemplate)\n\t\t\tif self.has_variants or self.variant_of:\n\t\t\t\tif not self.is_child_table_same('attributes'):\n\t\t\t\t\tfrappe.throw(\n\t\t\t\t\t\t_('Cannot change Attributes after stock transaction. Make a new Item and transfer stock to the new Item'))\n\tdef validate_variant_based_on_change(self):\n\t\tif not self.is_new() and (self.variant_of or (self.has_variants and frappe.get_all(\"Item\", {\"variant_of\": self.name}))):\n\t\t\tif self.variant_based_on != frappe.db.get_value(\"Item\", self.name, \"variant_based_on\"):\n\t\t\t\tfrappe.throw(_(\"Variant Based On cannot be changed\"))\n\tdef validate_uom(self):\n\t\tif not self.get(\"__islocal\"):\n\t\t\tcheck_stock_uom_with_bin(self.name, self.stock_uom)\n\t\tif self.has_variants:\n\t\t\tfor d in frappe.db.get_all(\"Item\", filters={\"variant_of\": self.name}):\n\t\t\t\tcheck_stock_uom_with_bin(d.name, self.stock_uom)\n\t\tif self.variant_of:\n\t\t\ttemplate_uom = frappe.db.get_value(\"Item\", self.variant_of, \"stock_uom\")\n\t\t\t#if template_uom != self.stock_uom:\n\t\t\t\t#frappe.throw(_(\"Default Unit of Measure for Variant '{0}' must be same as in Template '{1}'\")\n\t\t\t\t#\t\t\t\t\t.format(self.stock_uom, template_uom))\n\tdef validate_uom_conversion_factor(self):\n\t\tif self.uoms:\n\t\t\tfor d in self.uoms:\n\t\t\t\tvalue = get_uom_conv_factor(d.uom, self.stock_uom)\n\t\t\t\tif value:\n\t\t\t\t\td.conversion_factor = value\n\tdef validate_attributes(self):\n\t\tif not (self.has_variants or self.variant_of):\n\t\t\treturn\n\t\tif not self.variant_based_on:\n\t\t\tself.variant_based_on = 'Item Attribute'\n\t\tif self.variant_based_on == 'Item Attribute':\n\t\t\tattributes = []\n\t\t\tif not self.attributes:\n\t\t\t\tfrappe.throw(_(\"Attribute table is mandatory\"))\n\t\t\tfor d in self.attributes:\n\t\t\t\tif d.attribute in attributes:\n\t\t\t\t\tfrappe.throw(\n\t\t\t\t\t\t_(\"Attribute {0} selected multiple times in Attributes Table\".format(d.attribute)))\n\t\t\t\telse:\n\t\t\t\t\tattributes.append(d.attribute)\n\tdef validate_variant_attributes(self):\n\t\tif self.is_new() and self.variant_of and self.variant_based_on == 'Item Attribute':\n\t\t\targs = {}\n\t\t\tfor d in self.attributes:\n\t\t\t\tif cstr(d.attribute_value).strip() == '':\n\t\t\t\t\tfrappe.throw(_(\"Please specify Attribute Value for attribute {0}\").format(d.attribute))\n\t\t\t\targs[d.attribute] = d.attribute_value\n\t\t\tvariant = get_variant(self.variant_of, args, self.name)\n\t\t\tif variant:\n\t\t\t\tfrappe.throw(_(\"Item variant {0} exists with same attributes\")\n\t\t\t\t\t.format(variant), ItemVariantExistsError)\n\t\t\tvalidate_item_variant_attributes(self, args)\n\tdef validate_stock_for_has_batch_and_has_serial(self):\n\t\tif self.stock_ledger_created():\n\t\t\tfor value in [\"has_batch_no\", \"has_serial_no\"]:\n\t\t\t\tif frappe.db.get_value(\"Item\", self.name, value) != self.get_value(value):\n\t\t\t\t\tfrappe.throw(_(\"Cannot change {0} as Stock Transaction for Item {1} exist.\".format(value, self.name)))\ndef get_timeline_data(doctype, name):\n\t'''returns timeline data based on stock ledger entry'''\n\tout = {}\n\titems = dict(frappe.db.sql('''select posting_date, count(*)\n\t\tfrom `tabStock Ledger Entry` where item_code=%s\n\t\t\tand posting_date > date_sub(curdate(), interval 1 year)\n\t\t\tgroup by posting_date''', name))\n\tfor date, count in iteritems(items):\n\t\ttimestamp = get_timestamp(date)\n\t\tout.update({timestamp: count})\n\treturn out\ndef validate_end_of_life(item_code, end_of_life=None, disabled=None, verbose=1):\n\tif (not end_of_life) or (disabled is None):\n\t\tend_of_life, disabled = frappe.db.get_value(\"Item\", item_code, [\"end_of_life\", \"disabled\"])\n\tif end_of_life and end_of_life != \"0000-00-00\" and getdate(end_of_life) <= now_datetime().date():\n\t\tmsg = _(\"Item {0} has reached its end of life on {1}\").format(item_code, formatdate(end_of_life))\n\t\t_msgprint(msg, verbose)\n\tif disabled:\n\t\t_msgprint(_(\"Item {0} is disabled\").format(item_code), verbose)\ndef validate_is_stock_item(item_code, is_stock_item=None, verbose=1):\n\tif not is_stock_item:\n\t\tis_stock_item = frappe.db.get_value(\"Item\", item_code, \"is_stock_item\")\n\tif is_stock_item != 1:\n\t\tmsg = _(\"Item {0} is not a stock Item\").format(item_code)\n\t\t_msgprint(msg, verbose)\ndef validate_cancelled_item(item_code, docstatus=None, verbose=1):\n\tif docstatus is None:\n\t\tdocstatus = frappe.db.get_value(\"Item\", item_code, \"docstatus\")\n\tif docstatus == 2:\n\t\tmsg = _(\"Item {0} is cancelled\").format(item_code)\n\t\t_msgprint(msg, verbose)\ndef _msgprint(msg, verbose):\n\tif verbose:\n\t\tmsgprint(msg, raise_exception=True)\n\telse:\n\t\traise frappe.ValidationError(msg)\ndef get_last_purchase_details(item_code, doc_name=None, conversion_rate=1.0):\n\t\"\"\"returns last purchase details in stock uom\"\"\"\n\t# get last purchase order item details\n\tlast_purchase_order = frappe.db.sql(\"\"\"\\\n\t\tselect po.name, po.transaction_date, po.conversion_rate,\n\t\t\tpo_item.conversion_factor, po_item.base_price_list_rate,\n\t\t\tpo_item.discount_percentage, po_item.base_rate, po_item.rate\n\t\tfrom `tabPurchase Order` po, `tabPurchase Order Item` po_item\n\t\twhere po.docstatus = 1 and po_item.item_code = %s and po.name != %s and\n\t\t\tpo.name = po_item.parent\n\t\torder by po.transaction_date desc, po.name desc\n\t\tlimit 1\"\"\", (item_code, cstr(doc_name)), as_dict=1)\n\t# get last purchase receipt item details\n\tlast_purchase_receipt = frappe.db.sql(\"\"\"\\\n\t\tselect pr.name, pr.posting_date, pr.posting_time, pr.conversion_rate,\n\t\t\tpr_item.conversion_factor, pr_item.base_price_list_rate, pr_item.discount_percentage,\n\t\t\tpr_item.base_rate, pr_item.rate\n\t\tfrom `tabPurchase Receipt` pr, `tabPurchase Receipt Item` pr_item\n\t\twhere pr.docstatus = 1 and pr_item.item_code = %s and pr.name != %s and\n\t\t\tpr.name = pr_item.parent\n\t\torder by pr.posting_date desc, pr.posting_time desc, pr.name desc\n\t\tlimit 1\"\"\", (item_code, cstr(doc_name)), as_dict=1)\n\tpurchase_order_date = getdate(last_purchase_order and last_purchase_order[0].transaction_date\n\t\t\t\t\t\t\t   or \"1900-01-01\")\n\tpurchase_receipt_date = getdate(last_purchase_receipt and\n\t\t\t\t\t\t\t\t last_purchase_receipt[0].posting_date or \"1900-01-01\")\n\tif (purchase_order_date > purchase_receipt_date) or \\\n\t\t\t\t(last_purchase_order and not last_purchase_receipt):\n\t\t# use purchase order\n\t\tlast_purchase = last_purchase_order[0]\n\t\tpurchase_date = purchase_order_date\n\telif (purchase_receipt_date > purchase_order_date) or \\\n\t\t\t\t(last_purchase_receipt and not last_purchase_order):\n\t\t# use purchase receipt\n\t\tlast_purchase = last_purchase_receipt[0]\n\t\tpurchase_date = purchase_receipt_date\n\telse:\n\t\treturn frappe._dict()\n\tconversion_factor = flt(last_purchase.conversion_factor)\n\tout = frappe._dict({\n\t\t\"base_price_list_rate\": flt(last_purchase.base_price_list_rate) / conversion_factor,\n\t\t\"base_rate\": flt(last_purchase.base_rate) / conversion_factor,\n\t\t\"discount_percentage\": flt(last_purchase.discount_percentage),\n\t\t\"purchase_date\": purchase_date,\n\t\t\"rate\":flt(last_purchase.rate)\n\t})\n\tconversion_rate = flt(conversion_rate) or 1.0\n\tout.update({\n\t\t\"price_list_rate\": out.base_price_list_rate / conversion_rate,\n\t\t\"base_rate\": out.base_rate\n\t})\n\treturn out\ndef invalidate_cache_for_item(doc):\n\tinvalidate_cache_for(doc, doc.item_group)\n\twebsite_item_groups = list(set((doc.get(\"old_website_item_groups\") or [])\n\t\t\t\t\t\t\t\t+ [d.item_group for d in doc.get({\"doctype\": \"Website Item Group\"}) if d.item_group]))\n\tfor item_group in website_item_groups:\n\t\tinvalidate_cache_for(doc, item_group)\n\tif doc.get(\"old_item_group\") and doc.get(\"old_item_group\") != doc.item_group and frappe.db.exists({\"doctype\": \"Item Group\",\"name\": doc.old_item_group}):\n\t\tinvalidate_cache_for(doc, doc.old_item_group)\ndef check_stock_uom_with_bin(item, stock_uom):\n\tif stock_uom == frappe.db.get_value(\"Item\", item, \"stock_uom\"):\n\t\treturn\n\tmatched = True\n\tref_uom = frappe.db.get_value(\"Stock Ledger Entry\",\n\t\t\t\t\t\t\t   {\"item_code\": item}, \"stock_uom\")\n\tif ref_uom:\n\t\tif cstr(ref_uom) != cstr(stock_uom):\n\t\t\tmatched = False\n\telse:\n\t\tbin_list = frappe.db.sql(\"select * from tabBin where item_code=%s\", item, as_dict=1)\n\t\tfor bin in bin_list:\n\t\t\tif (bin.reserved_qty > 0 or bin.ordered_qty > 0 or bin.indented_qty > 0\n\t\t\t\t\t\t\t\tor bin.planned_qty > 0) and cstr(bin.stock_uom) != cstr(stock_uom):\n\t\t\t\tmatched = False\n\t\t\t\tbreak\n\t\tif matched and bin_list:\n\t\t\tfrappe.db.sql(\"\"\"update tabBin set stock_uom=%s where item_code=%s\"\"\", (stock_uom, item))\n\tif not matched:\n\t\tfrappe.throw(\n\t\t\t_(\"Default Unit of Measure for Item {0} cannot be changed directly because you have already made some transaction(s) with another UOM. You will need to create a new Item to use a different Default UOM.\").format(item))\ndef get_item_defaults(item_code, company):\n\titem = frappe.get_cached_doc('Item', item_code)\n\tout = item.as_dict()\n\tfor d in item.item_defaults:\n\t\tif d.company == company:\n\t\t\trow = copy.deepcopy(d.as_dict())\n\t\t\trow.pop(\"name\")\n\t\t\tout.update(row)\n\treturn out\ndef set_item_default(item_code, company, fieldname, value):\n\titem = frappe.get_cached_doc('Item', item_code)\n\tfor d in item.item_defaults:\n\t\tif d.company == company:\n\t\t\tif not d.get(fieldname):\n\t\t\t\tfrappe.db.set_value(d.doctype, d.name, fieldname, value)\n\t\t\treturn\n\t# no row found, add a new row for the company\n\td = item.append('item_defaults', {fieldname: value, \"company\": company})\n\td.db_insert()\n\titem.clear_cache()\n@frappe.whitelist()\ndef get_uom_conv_factor(uom, stock_uom):\n\tuoms = [uom, stock_uom]\n\tvalue = \"\"\n\tuom_details = frappe.db.sql(\"\"\"select to_uom, from_uom, value from `tabUOM Conversion Factor`\\\n\t\twhere to_uom in ({0})\n\t\t\"\"\".format(', '.join(['\"' + frappe.db.escape(i, percent=False) + '\"' for i in uoms])), as_dict=True)\n\tfor d in uom_details:\n\t\tif d.from_uom == stock_uom and d.to_uom == uom:\n\t\t\tvalue = 1/flt(d.value)\n\t\telif d.from_uom == uom and d.to_uom == stock_uom:\n\t\t\tvalue = d.value\n\tif not value:\n\t\tuom_stock = frappe.db.get_value(\"UOM Conversion Factor\", {\"to_uom\": stock_uom}, [\"from_uom\", \"value\"], as_dict=1)\n\t\tuom_row = frappe.db.get_value(\"UOM Conversion Factor\", {\"to_uom\": uom}, [\"from_uom\", \"value\"], as_dict=1)\n\t\tif uom_stock and uom_row:\n\t\t\tif uom_stock.from_uom == uom_row.from_uom:\n\t\t\t\tvalue = flt(uom_stock.value) * 1/flt(uom_row.value)\n\treturn value\n@frappe.whitelist()\ndef get_item_attribute(parent, attribute_value=''):\n\tif not frappe.has_permission(\"Item\"):\n\t\tfrappe.msgprint(_(\"No Permission\"), raise_exception=1)\n\treturn frappe.get_all(\"Item Attribute Value\", fields = [\"attribute_value\"],\n\t\tfilters = {'parent': parent, 'attribute_value': (\"like\", \"%%%s%%\" % attribute_value)})\n@frappe.whitelist()\ndef set_item_transfer(item_code,qty,warehouse):\n\tif item_code and qty and warehouse:\n\t\tqty = flt(qty)\n\t\tcompany = frappe.db.get_single_value('Global Defaults', 'default_company')\n\t\tmr = frappe.new_doc(\"Material Request\")\n\t\tmr.update({\n\t\t\t\"company\": company,\n\t\t\t\"transaction_date\": nowdate(),\n\t\t\t\"warehouse\": warehouse,\n\t\t\t\"material_request_type\": \"Material Transfer\"\n\t\t})\n\t\titem = frappe.get_doc(\"Item\",item_code)\n\t\tuom = item.stock_uom\n\t\tconversion_factor = 1.0\n\t\tuom = item.purchase_uom or item.stock_uom\n\t\tif uom != item.stock_uom:\n\t\t\tconversion_factor = frappe.db.get_value(\"UOM Conversion Detail\",\n\t\t\t\t{'parent': item.name, 'uom': uom}, 'conversion_factor') or 1.0\n\t\tmr.append(\"items\", {\n\t\t\t\"doctype\": \"Material Request Item\",\n\t\t\t\"item_code\": item.item_code,\n\t\t\t\"schedule_date\": nowdate(),\n\t\t\t\"qty\": qty / conversion_factor,\n\t\t\t\"uom\": uom,\n\t\t\t\"stock_uom\": item.stock_uom,\n\t\t\t\"warehouse\": warehouse,\n\t\t\t\"item_name\": item.item_name,\n\t\t\t\"description\": item.description,\n\t\t\t\"item_group\": item.item_group,\n\t\t\t\"brand\": item.brand,\n\t\t})\n\t\tmr.schedule_date = nowdate()\n\t\tmr.insert()\n\t\tmr.submit()\n\t\treturn \"Demande enregistree\"\n\telse:\n\t\treturn \"---- Verifier les donnees qts et article -----\"\n\t\n@frappe.whitelist()\ndef set_item_demande(item_code,qty):\n\tif item_code and qty:\n\t\tqty = flt(qty)\n\t\tcompany = frappe.db.get_single_value('Global Defaults', 'default_company')\n\t\tmr = frappe.new_doc(\"Material Request\")\n\t\tmr.update({\n\t\t\t\"company\": company,\n\t\t\t\"transaction_date\": nowdate(),\n\t\t\t\"material_request_type\": \"Purchase\"\n\t\t})\n\t\titem = frappe.get_doc(\"Item\",item_code)\n\t\tuom = item.stock_uom\n\t\tconversion_factor = 1.0\n\t\tuom = item.purchase_uom or item.stock_uom\n\t\tif uom != item.stock_uom:\n\t\t\tconversion_factor = frappe.db.get_value(\"UOM Conversion Detail\",\n\t\t\t\t{'parent': item.name, 'uom': uom}, 'conversion_factor') or 1.0\n\t\tmr.append(\"items\", {\n\t\t\t\"doctype\": \"Material Request Item\",\n\t\t\t\"item_code\": item.item_code,\n\t\t\t\"schedule_date\": nowdate(),\n\t\t\t\"qty\": qty / conversion_factor,\n\t\t\t\"uom\": uom,\n\t\t\t\"stock_uom\": item.stock_uom,\n\t\t\t\"warehouse\": \"GLOBAL - MV\",\n\t\t\t\"item_name\": item.item_name,\n\t\t\t\"description\": item.description,\n\t\t\t\"item_group\": item.item_group,\n\t\t\t\"brand\": item.brand,\n\t\t})\n\t\tmr.schedule_date = nowdate()\n\t\tmr.insert()\n\t\tmr.submit()\n\t\treturn \"Demande enregistree\"\n\telse:\n\t\treturn \"---- Verifier les donnees qts et article -----\"\n@frappe.whitelist()\ndef set_item_achat(item_code):\n\tif item_code:\n\t\titem = frappe.get_doc(\"Item\",item_code)\n\t\tif item:\n\t\t\tif item.is_purchase_item:\n\t\t\t\titem.is_purchase_item = 0\n\t\t\telse:\n\t\t\t\titem.is_purchase_item = 1\n\t\t\titem.save()\n\t\t\treturn \"ACHAT : %s\" % item.is_purchase_item\ndef update_variants(variants, template, publish_progress=True):\n\tcount=0\n\t#Composant\n\tif template.articles:\n\t\tfor comp in template.articles:\n\t\t\tif comp.item:\n\t\t\t\tother_comp = frappe.get_doc(\"Item\",comp.item)\n\t\t\t\tif other_comp.has_variants and template.name not in {a.item for a in other_comp.articles}:\n\t\t\t\t\trow = other_comp.append('articles',{})\n\t\t\t\t\trow.item = template.name\n\t\t\t\t\tother_comp.save()\n\t\t\t\t\t\n\t\t\t\t\n\tfor d in variants:\n\t\tvariant = frappe.get_doc(\"Item\", d)\n\t\tcopy_attributes_to_variant(template, variant)\n\t\tvariant.sync_comp()\n\t\tvariant.save()\n\t\tcount+=1\n\t\tif publish_progress:\n\t\t\t\tfrappe.publish_progress(count*100/len(variants), title = _(\"Updating Variants...\"))\n@frappe.whitelist()\ndef delete_order_item(item_code):\n\tif item_code:\n\t\titem = frappe.get_doc(\"Sales Order Item\",item_code)\n\t\t\n\t\tfrappe.db.sql(\"\"\"delete from `tabSales Order Item` where name = %s\"\"\", (item_code))\n\t\tupdate_bin_qty(item.item_code, item.warehouse, {\n\t\t\t\t\"reserved_qty\": get_reserved_qty(item.item_code, item.warehouse)\n\t\t\t})\n\t\treturn \"Article %s est Supprime\" % (item_code)\n\t\t\n@frappe.whitelist()\ndef bulk_print_list(names):\n\tif names:\t\t\n\t\tnames = {\"names\":names.split(\",\")}\t\t\n\t\tbulk_print_memberships(json.dumps(names))\n\treturn \"ok\"\n\t\n@frappe.whitelist()\ndef bulk_print_memberships(names):\n\t\n\tnames = json.loads(names)\n\tif names and 'names' in names:\n", "answers": ["\t\tnames = names['names']"], "length": 4346, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "e6ef26f48ff864846fd354ceed186901245ee88c5aa2b90f"}
{"input": "", "context": "/*******************************************************************************\n * HELIUM V, Open Source ERP software for sustained success\n * at small and medium-sized enterprises.\n * Copyright (C) 2004 - 2015 HELIUM V IT-Solutions GmbH\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published \n * by the Free Software Foundation, either version 3 of theLicense, or \n * (at your option) any later version.\n * \n * According to sec. 7 of the GNU Affero General Public License, version 3, \n * the terms of the AGPL are supplemented with the following terms:\n * \n * \"HELIUM V\" and \"HELIUM 5\" are registered trademarks of \n * HELIUM V IT-Solutions GmbH. The licensing of the program under the \n * AGPL does not imply a trademark license. Therefore any rights, title and\n * interest in our trademarks remain entirely with us. If you want to propagate\n * modified versions of the Program under the name \"HELIUM V\" or \"HELIUM 5\",\n * you may only do so if you have a written permission by HELIUM V IT-Solutions \n * GmbH (to acquire a permission please contact HELIUM V IT-Solutions\n * at trademark@heliumv.com).\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n * \n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * Contact: developers@heliumv.com\n ******************************************************************************/\npackage com.lp.server.projekt.ejbfac;\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.math.BigDecimal;\nimport java.rmi.RemoteException;\nimport java.sql.Date;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.TreeMap;\nimport javax.ejb.Stateless;\nimport javax.ejb.TransactionAttribute;\nimport javax.ejb.TransactionAttributeType;\nimport javax.interceptor.Interceptors;\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport net.sf.jasperreports.engine.JRDataSource;\nimport net.sf.jasperreports.engine.JRException;\nimport net.sf.jasperreports.engine.JRField;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.rendering.PDFRenderer;\nimport org.hibernate.Criteria;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.Restrictions;\nimport com.lp.server.anfrage.service.AnfrageDto;\nimport com.lp.server.angebot.service.AngebotDto;\nimport com.lp.server.angebotstkl.service.AgstklDto;\nimport com.lp.server.artikel.service.ArtikelDto;\nimport com.lp.server.artikel.service.ArtikelFac;\nimport com.lp.server.artikel.service.ArtikelkommentarDto;\nimport com.lp.server.artikel.service.ArtikellieferantDto;\nimport com.lp.server.artikel.service.GeometrieDto;\nimport com.lp.server.artikel.service.LagerabgangursprungDto;\nimport com.lp.server.artikel.service.SeriennrChargennrMitMengeDto;\nimport com.lp.server.artikel.service.VerpackungDto;\nimport com.lp.server.auftrag.service.AuftragDto;\nimport com.lp.server.auftrag.service.AuftragNachkalkulationDto;\nimport com.lp.server.auftrag.service.AuftragReportFac;\nimport com.lp.server.auftrag.service.AuftragzeitenDto;\nimport com.lp.server.bestellung.service.BestellungDto;\nimport com.lp.server.eingangsrechnung.service.EingangsrechnungAuftragszuordnungDto;\nimport com.lp.server.eingangsrechnung.service.EingangsrechnungDto;\nimport com.lp.server.fertigung.service.LosDto;\nimport com.lp.server.fertigung.service.LosablieferungDto;\nimport com.lp.server.fertigung.service.LosistmaterialDto;\nimport com.lp.server.fertigung.service.LossollarbeitsplanDto;\nimport com.lp.server.fertigung.service.LossollmaterialDto;\nimport com.lp.server.fertigung.service.ReportLosnachkalkulationDto;\nimport com.lp.server.lieferschein.service.LieferscheinDto;\nimport com.lp.server.lieferschein.service.LieferscheinpositionDto;\nimport com.lp.server.partner.service.AnsprechpartnerDto;\nimport com.lp.server.partner.service.KundeFac;\nimport com.lp.server.partner.service.PartnerDto;\nimport com.lp.server.partner.service.PartnerFac;\nimport com.lp.server.personal.fastlanereader.generated.FLRTelefonzeiten;\nimport com.lp.server.personal.service.PersonalDto;\nimport com.lp.server.personal.service.PersonalgehaltDto;\nimport com.lp.server.personal.service.ReiseDto;\nimport com.lp.server.personal.service.TelefonzeitenDto;\nimport com.lp.server.personal.service.ZeiterfassungFac;\nimport com.lp.server.projekt.fastlanereader.ProjektHandler;\nimport com.lp.server.projekt.fastlanereader.ProjektverlaufHandler;\nimport com.lp.server.projekt.fastlanereader.generated.FLRHistory;\nimport com.lp.server.projekt.fastlanereader.generated.FLRProjekt;\nimport com.lp.server.projekt.service.BereichDto;\nimport com.lp.server.projekt.service.ProjektDto;\nimport com.lp.server.projekt.service.ProjektFac;\nimport com.lp.server.projekt.service.ProjektReportFac;\nimport com.lp.server.projekt.service.ProjektServiceFac;\nimport com.lp.server.projekt.service.ProjektVerlaufHelperDto;\nimport com.lp.server.rechnung.service.RechnungDto;\nimport com.lp.server.rechnung.service.RechnungFac;\nimport com.lp.server.rechnung.service.RechnungartDto;\nimport com.lp.server.stueckliste.service.StuecklisteDto;\nimport com.lp.server.system.service.BelegartDto;\nimport com.lp.server.system.service.LocaleFac;\nimport com.lp.server.system.service.MandantDto;\nimport com.lp.server.system.service.MediaFac;\nimport com.lp.server.system.service.ReportJournalKriterienDto;\nimport com.lp.server.system.service.TheClientDto;\nimport com.lp.server.util.LPReport;\nimport com.lp.server.util.fastlanereader.FLRSessionFactory;\nimport com.lp.server.util.fastlanereader.service.query.FilterBlock;\nimport com.lp.server.util.fastlanereader.service.query.FilterKriterium;\nimport com.lp.server.util.fastlanereader.service.query.QueryParameters;\nimport com.lp.server.util.report.JasperPrintLP;\nimport com.lp.server.util.report.TimingInterceptor;\nimport com.lp.util.AufgeloesteFehlmengenDto;\nimport com.lp.util.EJBExceptionLP;\nimport com.lp.util.Helper;\nimport com.lp.util.LPDatenSubreport;\n@Stateless\n@Interceptors(TimingInterceptor.class)\npublic class ProjektReportFacBean extends LPReport implements ProjektReportFac,\n\t\tJRDataSource {\n\t@PersistenceContext\n\tprivate EntityManager em;\n\tprivate String cAktuellerReport = null;\n\tprivate Object[][] data = null;\n\tpublic JasperPrintLP printProjektverlauf(Integer projektIId,\n\t\t\tTheClientDto theClientDto) throws EJBExceptionLP, RemoteException {\n\t\tcAktuellerReport = ProjektReportFac.REPORT_PROJEKTVERLAUF;\n\t\tHashMap<String, Object> parameter = new HashMap<String, Object>();\n\t\tProjektDto projektDto = getProjektFac().projektFindByPrimaryKey(\n\t\t\t\tprojektIId);\n\t\tLinkedHashMap<String, ProjektVerlaufHelperDto> hm = getProjektFac()\n\t\t\t\t.getProjektVerlauf(projektIId, theClientDto);\n\t\tPartnerDto partnerDto = getPartnerFac().partnerFindByPrimaryKey(\n\t\t\t\tprojektDto.getPartnerIId(), theClientDto);\n\t\tMandantDto mandantDto = getMandantFac().mandantFindByPrimaryKey(\n\t\t\t\tprojektDto.getMandantCNr(), theClientDto);\n\t\tLocale locDruck = Helper.string2Locale(partnerDto\n\t\t\t\t.getLocaleCNrKommunikation());\n\t\tparameter.put(\"P_PROJEKTNUMMER\", projektDto.getCNr());\n\t\tparameter.put(\"P_TITEL\", projektDto.getCTitel());\n\t\tparameter.put(\n\t\t\t\t\"P_KUNDE_ADRESSBLOCK\",\n\t\t\t\tformatAdresseFuerAusdruck(partnerDto, null, mandantDto,\n\t\t\t\t\t\tlocDruck));\n\t\tparameter.put(\"P_MANDANTENWAEHRUNG\",\n\t\t\t\ttheClientDto.getSMandantenwaehrung());\n\t\tArrayList alDaten = new ArrayList();\n\t\tIterator<String> it = hm.keySet().iterator();\n\t\tboolean bProjektHinzugefuegt = false;\n\t\tObject[] oZeileProjekt = new Object[ProjektReportFac.REPORT_PROJEKTVERLAUF_ANZAHL_SPALTEN];\n\t\toZeileProjekt[ProjektReportFac.REPORT_PROJEKTVERLAUF_BELEGART] = LocaleFac.BELEGART_PROJEKT;\n\t\toZeileProjekt[ProjektReportFac.REPORT_PROJEKTVERLAUF_BELEGNUMMER] = projektDto\n\t\t\t\t.getCNr();\n\t\toZeileProjekt[ProjektReportFac.REPORT_PROJEKTVERLAUF_EBENE] = 0;\n\t\toZeileProjekt[ProjektReportFac.REPORT_PROJEKTVERLAUF_STATUS] = projektDto\n\t\t\t\t.getStatusCNr();\n\t\toZeileProjekt = befuelleZeileProjektverlaufMitZeitdaten(\n\t\t\t\tLocaleFac.BELEGART_PROJEKT, projektDto.getIId(), oZeileProjekt,\n\t\t\t\ttheClientDto);\n\t\talDaten.add(oZeileProjekt);\n\t\tbProjektHinzugefuegt = true;\n\t\twhile (it.hasNext()) {\n\t\t\tProjektVerlaufHelperDto belegDto = hm.get(it.next());\n\t\t\tString einrueckung = \"\";\n\t\t\tfor (int i = 0; i < belegDto.getiEbene(); i++) {\n\t\t\t\teinrueckung = einrueckung + \"   \";\n\t\t\t}\n\t\t\tString belegart = \"Unbekannt\";\n\t\t\tString belegnummer = \"Unbekannt\";\n\t\t\tInteger belegIId = null;\n\t\t\tString status = null;\n\t\t\tjava.util.Date belegdatum = null;\n\t\t\tBigDecimal bdVKMaterialwert = null;\n\t\t\tBigDecimal bdVKAZWert = null;\n\t\t\tBigDecimal bdEKMaterialwert = null;\n\t\t\tBigDecimal bdEKAZWert = null;\n\t\t\tBigDecimal bdGestMaterialwert = null;\n\t\t\tBigDecimal bdGestAZWert = null;\n\t\t\tObject[] oZeile = new Object[ProjektReportFac.REPORT_PROJEKTVERLAUF_ANZAHL_SPALTEN];\n\t\t\tif (belegDto.getBelegDto() instanceof AngebotDto) {\n\t\t\t\tAngebotDto dto = (AngebotDto) belegDto.getBelegDto();\n\t\t\t\tbelegart = LocaleFac.BELEGART_ANGEBOT;\n\t\t\t\tbelegnummer = dto.getCNr();\n\t\t\t\tbelegIId = dto.getIId();\n\t\t\t\tbdGestMaterialwert = getAngebotFac()\n\t\t\t\t\t\t.berechneGestehungswertSoll(dto.getIId(),\n\t\t\t\t\t\t\t\tArtikelFac.ARTIKELART_ARTIKEL, true,\n\t\t\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbdGestAZWert = getAngebotFac().berechneGestehungswertSoll(\n\t\t\t\t\t\tdto.getIId(), ArtikelFac.ARTIKELART_ARBEITSZEIT, true,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbdVKMaterialwert = getAngebotFac().berechneVerkaufswertSoll(\n\t\t\t\t\t\tdto.getIId(), ArtikelFac.ARTIKELART_ARTIKEL,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbdVKAZWert = getAngebotFac().berechneVerkaufswertSoll(\n\t\t\t\t\t\tdto.getIId(), ArtikelFac.ARTIKELART_ARBEITSZEIT,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbelegdatum = dto.getTBelegdatum();\n\t\t\t\tstatus = dto.getStatusCNr();\n\t\t\t} else if (belegDto.getBelegDto() instanceof AuftragDto) {\n\t\t\t\tAuftragDto dto = (AuftragDto) belegDto.getBelegDto();\n\t\t\t\tbelegart = LocaleFac.BELEGART_AUFTRAG;\n\t\t\t\tbelegnummer = dto.getCNr();\n\t\t\t\tbelegIId = dto.getIId();\n\t\t\t\tbdGestMaterialwert = getAuftragFac()\n\t\t\t\t\t\t.berechneGestehungswertSoll(dto.getIId(),\n\t\t\t\t\t\t\t\tArtikelFac.ARTIKELART_ARTIKEL, true,\n\t\t\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbdGestAZWert = getAuftragFac().berechneGestehungswertSoll(\n\t\t\t\t\t\tdto.getIId(), ArtikelFac.ARTIKELART_ARBEITSZEIT, true,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbdVKMaterialwert = getAuftragFac().berechneVerkaufswertSoll(\n\t\t\t\t\t\tdto.getIId(), ArtikelFac.ARTIKELART_ARTIKEL,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbdVKAZWert = getAuftragFac().berechneVerkaufswertSoll(\n\t\t\t\t\t\tdto.getIId(), ArtikelFac.ARTIKELART_ARBEITSZEIT,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbelegdatum = dto.getTBelegdatum();\n\t\t\t\tstatus = dto.getStatusCNr();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_AUFTRAG_BESTELLNUMMER] = dto\n\t\t\t\t\t\t.getCBestellnummer();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_LIEFERTERMIN] = dto\n\t\t\t\t\t\t.getDLiefertermin();\n\t\t\t} else if (belegDto.getBelegDto() instanceof LieferscheinDto) {\n\t\t\t\tLieferscheinDto dto = (LieferscheinDto) belegDto.getBelegDto();\n\t\t\t\tbelegart = LocaleFac.BELEGART_LIEFERSCHEIN;\n\t\t\t\tbelegnummer = dto.getCNr();\n\t\t\t\tbdGestMaterialwert = getLieferscheinFac()\n\t\t\t\t\t\t.berechneGestehungswertIst(dto.getIId(), null,\n\t\t\t\t\t\t\t\tArtikelFac.ARTIKELART_ARTIKEL, theClientDto);\n\t\t\t\tbdGestAZWert = getLieferscheinFac().berechneGestehungswertIst(\n\t\t\t\t\t\tdto.getIId(), null, ArtikelFac.ARTIKELART_ARBEITSZEIT,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbdVKMaterialwert = getLieferscheinFac()\n\t\t\t\t\t\t.berechneVerkaufswertIst(dto.getIId(), null,\n\t\t\t\t\t\t\t\tArtikelFac.ARTIKELART_ARTIKEL, theClientDto);\n\t\t\t\tbdVKAZWert = getLieferscheinFac().berechneVerkaufswertIst(\n\t\t\t\t\t\tdto.getIId(), null, ArtikelFac.ARTIKELART_ARBEITSZEIT,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbdEKMaterialwert = getLagerFac().getEinstandsWertEinesBeleges(\n\t\t\t\t\t\tLocaleFac.BELEGART_LIEFERSCHEIN, dto.getIId(),\n\t\t\t\t\t\tArtikelFac.ARTIKELART_ARTIKEL, theClientDto);\n\t\t\t\tbdEKAZWert = getLagerFac().getEinstandsWertEinesBeleges(\n\t\t\t\t\t\tLocaleFac.BELEGART_LIEFERSCHEIN, dto.getIId(),\n\t\t\t\t\t\tArtikelFac.ARTIKELART_ARBEITSZEIT, theClientDto);\n\t\t\t\tbelegdatum = dto.getTBelegdatum();\n\t\t\t\tstatus = dto.getStatusCNr();\n\t\t\t} else if (belegDto.getBelegDto() instanceof RechnungDto) {\n\t\t\t\tRechnungDto dto = (RechnungDto) belegDto.getBelegDto();\n\t\t\t\tbelegart = dto.getRechnungartCNr();\n\t\t\t\tbelegnummer = dto.getCNr();\n\t\t\t\tboolean bGutschrift = false;\n\t\t\t\tRechnungartDto raDto = getRechnungServiceFac()\n\t\t\t\t\t\t.rechnungartFindByPrimaryKey(dto.getRechnungartCNr(),\n\t\t\t\t\t\t\t\ttheClientDto);\n\t\t\t\tif (raDto.getRechnungtypCNr().equals(\n\t\t\t\t\t\tRechnungFac.RECHNUNGTYP_GUTSCHRIFT)) {\n\t\t\t\t\tbGutschrift = true;\n\t\t\t\t}\n\t\t\t\tbdGestMaterialwert = getRechnungFac()\n\t\t\t\t\t\t.berechneGestehungswertIst(dto.getIId(),\n\t\t\t\t\t\t\t\tArtikelFac.ARTIKELART_ARTIKEL, theClientDto);\n\t\t\t\tbdGestAZWert = getRechnungFac().berechneGestehungswertIst(\n\t\t\t\t\t\tdto.getIId(), ArtikelFac.ARTIKELART_ARBEITSZEIT,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbdVKMaterialwert = getRechnungFac().berechneVerkaufswertIst(\n\t\t\t\t\t\tdto.getIId(), ArtikelFac.ARTIKELART_ARTIKEL,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbdVKAZWert = getRechnungFac().berechneVerkaufswertIst(\n\t\t\t\t\t\tdto.getIId(), ArtikelFac.ARTIKELART_ARBEITSZEIT,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbdEKMaterialwert = getLagerFac().getEinstandsWertEinesBeleges(\n\t\t\t\t\t\tbGutschrift ? LocaleFac.BELEGART_GUTSCHRIFT\n\t\t\t\t\t\t\t\t: LocaleFac.BELEGART_RECHNUNG, dto.getIId(),\n\t\t\t\t\t\tArtikelFac.ARTIKELART_ARTIKEL, theClientDto);\n\t\t\t\tbdEKAZWert = getLagerFac().getEinstandsWertEinesBeleges(\n\t\t\t\t\t\tbGutschrift ? LocaleFac.BELEGART_GUTSCHRIFT\n\t\t\t\t\t\t\t\t: LocaleFac.BELEGART_RECHNUNG, dto.getIId(),\n\t\t\t\t\t\tArtikelFac.ARTIKELART_ARBEITSZEIT, theClientDto);\n\t\t\t\tif (bGutschrift == true) {\n\t\t\t\t\tif (bdGestMaterialwert != null) {\n\t\t\t\t\t\tbdGestMaterialwert = bdGestMaterialwert.negate();\n\t\t\t\t\t}\n\t\t\t\t\tif (bdGestAZWert != null) {\n\t\t\t\t\t\tbdGestAZWert = bdGestAZWert.negate();\n\t\t\t\t\t}\n\t\t\t\t\tif (bdVKMaterialwert != null) {\n\t\t\t\t\t\tbdVKMaterialwert = bdVKMaterialwert.negate();\n\t\t\t\t\t}\n\t\t\t\t\tif (bdVKAZWert != null) {\n\t\t\t\t\t\tbdVKAZWert = bdVKAZWert.negate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbelegdatum = dto.getTBelegdatum();\n\t\t\t\tstatus = dto.getStatusCNr();\n\t\t\t} else if (belegDto.getBelegDto() instanceof BestellungDto) {\n\t\t\t\tBestellungDto dto = (BestellungDto) belegDto.getBelegDto();\n\t\t\t\tbelegart = LocaleFac.BELEGART_BESTELLUNG;\n\t\t\t\tbelegnummer = dto.getCNr();\n\t\t\t\tbdEKMaterialwert = getBestellungFac().berechneEinkaufswertIst(\n\t\t\t\t\t\tdto.getIId(), ArtikelFac.ARTIKELART_ARTIKEL,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbdEKAZWert = getBestellungFac().berechneEinkaufswertIst(\n\t\t\t\t\t\tdto.getIId(), ArtikelFac.ARTIKELART_ARBEITSZEIT,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbelegdatum = dto.getDBelegdatum();\n\t\t\t\tstatus = dto.getStatusCNr();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_LIEFERANT] = getLieferantFac()\n\t\t\t\t\t\t.lieferantFindByPrimaryKey(\n\t\t\t\t\t\t\t\tdto.getLieferantIIdBestelladresse(),\n\t\t\t\t\t\t\t\ttheClientDto).getPartnerDto()\n\t\t\t\t\t\t.formatFixName1Name2();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_LIEFERTERMIN] = dto\n\t\t\t\t\t\t.getDLiefertermin();\n\t\t\t} else if (belegDto.getBelegDto() instanceof AnfrageDto) {\n\t\t\t\tAnfrageDto dto = (AnfrageDto) belegDto.getBelegDto();\n\t\t\t\tbelegart = LocaleFac.BELEGART_ANFRAGE;\n\t\t\t\tbelegnummer = dto.getCNr();\n\t\t\t\tbdEKMaterialwert = getAnfrageFac().berechneEinkaufswertIst(\n\t\t\t\t\t\tdto.getIId(), ArtikelFac.ARTIKELART_ARTIKEL,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbdEKAZWert = getBestellungFac().berechneEinkaufswertIst(\n\t\t\t\t\t\tdto.getIId(), ArtikelFac.ARTIKELART_ARBEITSZEIT,\n\t\t\t\t\t\ttheClientDto);\n\t\t\t\tbelegdatum = dto.getTBelegdatum();\n\t\t\t\tstatus = dto.getStatusCNr();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_LIEFERANT] = getLieferantFac()\n\t\t\t\t\t\t.lieferantFindByPrimaryKey(\n\t\t\t\t\t\t\t\tdto.getLieferantIIdAnfrageadresse(),\n\t\t\t\t\t\t\t\ttheClientDto).getPartnerDto()\n\t\t\t\t\t\t.formatFixName1Name2();\n\t\t\t} else if (belegDto.getBelegDto() instanceof LosDto) {\n\t\t\t\tLosDto dto = (LosDto) belegDto.getBelegDto();\n\t\t\t\tbelegart = LocaleFac.BELEGART_LOS;\n\t\t\t\tbelegnummer = dto.getCNr();\n\t\t\t\tbelegIId = dto.getIId();\n\t\t\t\tstatus = dto.getStatusCNr();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_LOS_BEGINN] = dto\n\t\t\t\t\t\t.getTProduktionsbeginn();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_LOS_ENDE] = dto\n\t\t\t\t\t\t.getTProduktionsende();\n\t\t\t\tBigDecimal ablMenge = new BigDecimal(0);\n\t\t\t\tBigDecimal ablWert = new BigDecimal(0);\n\t\t\t\tLosablieferungDto[] ablDtos = getFertigungFac()\n\t\t\t\t\t\t.losablieferungFindByLosIId(dto.getIId(), true,\n\t\t\t\t\t\t\t\ttheClientDto);\n\t\t\t\tfor (int i = 0; i < ablDtos.length; i++) {\n\t\t\t\t\tablMenge = ablMenge.add(ablDtos[i].getNMenge());\n\t\t\t\t\tablWert = ablWert.add(ablDtos[i].getNMaterialwert()\n\t\t\t\t\t\t\t.multiply(ablDtos[i].getNMenge()));\n\t\t\t\t}\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_MATERIALWERT_LOS] = ablWert;\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_LOS_ABGELIEFERTE_MENGE] = ablMenge;\n\t\t\t\tbdEKMaterialwert = getLagerFac().getEinstandsWertEinesBeleges(\n\t\t\t\t\t\tLocaleFac.BELEGART_LOS, dto.getIId(),\n\t\t\t\t\t\tArtikelFac.ARTIKELART_ARTIKEL, theClientDto);\n\t\t\t\t// AZ\n\t\t\t\tAuftragzeitenDto[] belegzeitenDtos = getZeiterfassungFac()\n\t\t\t\t\t\t.getAllZeitenEinesBeleges(LocaleFac.BELEGART_LOS,\n\t\t\t\t\t\t\t\tdto.getIId(), null, null, null, null, true,\n\t\t\t\t\t\t\t\tfalse, false, theClientDto);\n\t\t\t\tBigDecimal bdKostenGesamt = BigDecimal.ZERO;\n\t\t\t\tfor (int i = 0; i < belegzeitenDtos.length; i++) {\n\t\t\t\t\tbdKostenGesamt = bdKostenGesamt.add(belegzeitenDtos[i]\n\t\t\t\t\t\t\t.getBdKosten());\n\t\t\t\t}\n\t\t\t\tbdEKAZWert = bdKostenGesamt;\n\t\t\t} else if (belegDto.getBelegDto() instanceof ReiseDto) {\n\t\t\t\tReiseDto reiseDto = (ReiseDto) belegDto.getBelegDto();\n\t\t\t\tbelegart = \"Reise\";\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_REISE_KOMMENTAR] = reiseDto\n\t\t\t\t\t\t.getCKommentar();\n\t\t\t\tbdGestMaterialwert = reiseDto.getNKostenDesAbschnitts();\n\t\t\t} else if (belegDto.getBelegDto() instanceof EingangsrechnungAuftragszuordnungDto) {\n\t\t\t\tEingangsrechnungAuftragszuordnungDto eaDto = (EingangsrechnungAuftragszuordnungDto) belegDto\n\t\t\t\t\t\t.getBelegDto();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_ER_KEINE_AUFTRAGSWERTUNG] = Helper\n\t\t\t\t\t\t.short2Boolean(eaDto.getBKeineAuftragswertung());\n\t\t\t\tEingangsrechnungDto erDto = getEingangsrechnungFac()\n\t\t\t\t\t\t.eingangsrechnungFindByPrimaryKey(\n\t\t\t\t\t\t\t\teaDto.getEingangsrechnungIId());\n\t\t\t\tbelegart = LocaleFac.BELEGART_EINGANGSRECHNUNG;\n\t\t\t\tbelegnummer = erDto.getCNr();\n\t\t\t\tbdGestMaterialwert = getLocaleFac()\n\t\t\t\t\t\t.rechneUmInMandantenWaehrung(eaDto.getNBetrag(),\n\t\t\t\t\t\t\t\terDto.getNKurs());\n\t\t\t} else if (belegDto.getBelegDto() instanceof AgstklDto) {\n\t\t\t\tAgstklDto agstklDto = (AgstklDto) belegDto.getBelegDto();\n\t\t\t\tbelegart = LocaleFac.BELEGART_AGSTUECKLISTE;\n\t\t\t\tbelegnummer = agstklDto.getCNr();\n\t\t\t} else if (belegDto.getBelegDto() instanceof TelefonzeitenDto) {\n\t\t\t\tTelefonzeitenDto telefonzeitenDto = (TelefonzeitenDto) belegDto\n\t\t\t\t\t\t.getBelegDto();\n\t\t\t\tbelegart = \"Telefon\";\n\t\t\t\t// Die Kosten kommen aus dem Stundensatz\n\t\t\t\tCalendar c = Calendar.getInstance();\n\t\t\t\tc.setTimeInMillis(telefonzeitenDto.getTVon().getTime());\n\t\t\t\tPersonalgehaltDto pgDto = getPersonalFac()\n\t\t\t\t\t\t.personalgehaltFindLetztePersonalgehalt(\n\t\t\t\t\t\t\t\ttelefonzeitenDto.getPersonalIId(),\n\t\t\t\t\t\t\t\tc.get(Calendar.YEAR), c.get(Calendar.MONTH));\n\t\t\t\tif (telefonzeitenDto.getTBis() != null) {\n\t\t\t\t\tDouble dauer = new Double(((double) (telefonzeitenDto\n\t\t\t\t\t\t\t.getTBis().getTime() - telefonzeitenDto.getTVon()\n\t\t\t\t\t\t\t.getTime()) / 3600000));\n\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_AZ_DAUER] = dauer;\n\t\t\t\t\tif (pgDto != null && pgDto.getNStundensatz() != null) {\n\t\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_AZ_KOSTEN] = pgDto\n\t\t\t\t\t\t\t\t.getNStundensatz().multiply(\n\t\t\t\t\t\t\t\t\t\tnew BigDecimal(dauer));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_TELEFON_KOMMENTAR_EXTERN] = telefonzeitenDto\n\t\t\t\t\t\t.getXKommentarext();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_TELEFON_KOMMENTAR_INTERN] = telefonzeitenDto\n\t\t\t\t\t\t.getXKommentarint();\n\t\t\t}\n\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_BELEGDATUM] = belegdatum;\n\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_BELEGART] = belegart;\n\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_BELEGNUMMER] = belegnummer;\n\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_EBENE] = belegDto\n\t\t\t\t\t.getiEbene();\n\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_VKWERT_MATERIAL] = bdVKMaterialwert;\n\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_VKWERT_AZ] = bdVKAZWert;\n\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_GESTWERT_MATERIAL] = bdGestMaterialwert;\n\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_GESTWERT_AZ] = bdGestAZWert;\n\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_EKWERT_MATERIAL] = bdEKMaterialwert;\n\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_EKWERT_AZ] = bdEKAZWert;\n\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_STATUS] = status;\n\t\t\toZeile = befuelleZeileProjektverlaufMitZeitdaten(belegart,\n\t\t\t\t\tbelegIId, oZeile, theClientDto);\n\t\t\tif (belegDto.getBelegDto() instanceof LosDto) {\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_AZWERT_LOS] = new BigDecimal(\n\t\t\t\t\t\t((BigDecimal) oZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_AZ_KOSTEN])\n\t\t\t\t\t\t\t\t.doubleValue());\n\t\t\t}\n\t\t\talDaten.add(oZeile);\n\t\t\tif (belegDto.getBelegDto() instanceof LieferscheinDto) {\n\t\t\t\tLieferscheinDto dto = (LieferscheinDto) belegDto.getBelegDto();\n\t\t\t\tLieferscheinpositionDto[] lsposDtos = getLieferscheinpositionFac()\n\t\t\t\t\t\t.lieferscheinpositionFindByLieferscheinIId(dto.getIId());\n\t\t\t\tfor (int i = 0; i < lsposDtos.length; i++) {\n\t\t\t\t\talDaten = losablieferungHinzufuegen(belegart,\n\t\t\t\t\t\t\tlsposDtos[i].getIId(), theClientDto,\n\t\t\t\t\t\t\tlsposDtos[i].getNMenge(), belegDto.getiEbene() + 1,\n\t\t\t\t\t\t\talDaten);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tObject[][] returnArray = new Object[alDaten.size()][ProjektReportFac.REPORT_PROJEKTVERLAUF_ANZAHL_SPALTEN];\n\t\tdata = (Object[][]) alDaten.toArray(returnArray);\n\t\tinitJRDS(parameter, ProjektReportFac.REPORT_MODUL,\n\t\t\t\tProjektReportFac.REPORT_PROJEKTVERLAUF,\n\t\t\t\ttheClientDto.getMandant(), theClientDto.getLocUi(),\n\t\t\t\ttheClientDto);\n\t\treturn getReportPrint();\n\t}\n\tprivate ArrayList losablieferungHinzufuegen(String belegartCNr,\n\t\t\tInteger belegpositionIId, TheClientDto theClientDto,\n\t\t\tBigDecimal bdVerbrauchteMenge, int iEbene, ArrayList alDaten)\n\t\t\tthrows RemoteException {\n\t\t// PJ18623\n\t\tBigDecimal bdLosanteilImLieferschein = new BigDecimal(0);\n\t\tSession session = FLRSessionFactory.getFactory().openSession();\n\t\tString sQuery = \"select distinct lagerbewegung.i_id_buchung from FLRLagerbewegung lagerbewegung WHERE lagerbewegung.c_belegartnr='\"\n\t\t\t\t+ belegartCNr\n\t\t\t\t+ \"' AND lagerbewegung.i_belegartpositionid=\"\n\t\t\t\t+ belegpositionIId;\n\t\tQuery inventurliste = session.createQuery(sQuery);\n\t\tList<?> resultList = inventurliste.list();\n\t\tIterator<?> resultListIterator = resultList.iterator();\n\t\twhile (resultListIterator.hasNext()) {\n\t\t\tInteger o = (Integer) resultListIterator.next();\n\t\t\tLagerabgangursprungDto[] dtos = getLagerFac()\n\t\t\t\t\t.lagerabgangursprungFindByLagerbewegungIIdBuchung(o);\n\t\t\t// Fuer jeden Lagerabgangs- Ursprung, der aus einem Los\n\t\t\t// kommt, einen zusaetzlichen eintrag anlegen\n\t\t\tfor (int j = 0; j < dtos.length; j++) {\n\t\t\t\t// aber nur wenn verbrauchte menge grosser 0\n\t\t\t\tLagerabgangursprungDto dto = dtos[j];\n\t\t\t\tif (dto.getNVerbrauchtemenge().doubleValue() != 0) {\n\t\t\t\t\tSession session2 = FLRSessionFactory.getFactory()\n\t\t\t\t\t\t\t.openSession();\n\t\t\t\t\tString sQuery2 = \"from FLRLagerbewegung lagerbewegung WHERE lagerbewegung.i_id_buchung=\"\n\t\t\t\t\t\t\t+ dtos[j].getILagerbewegungidursprung()\n\t\t\t\t\t\t\t+ \" AND lagerbewegung.b_historie=0 order by lagerbewegung.t_buchungszeit DESC\";\n\t\t\t\t\tQuery ursrungsbuchung = session2.createQuery(sQuery2);\n\t\t\t\t\tursrungsbuchung.setMaxResults(1);\n\t\t\t\t\tList<?> resultList2 = ursrungsbuchung.list();\n\t\t\t\t\tcom.lp.server.artikel.fastlanereader.generated.FLRLagerbewegung lagerbewegung_ursprung = (com.lp.server.artikel.fastlanereader.generated.FLRLagerbewegung) resultList2\n\t\t\t\t\t\t\t.iterator().next();\n\t\t\t\t\tif (lagerbewegung_ursprung.getC_belegartnr().equals(\n\t\t\t\t\t\t\tLocaleFac.BELEGART_LOSABLIEFERUNG)) {\n\t\t\t\t\t\tLosablieferungDto losablieferungDto = getFertigungFac()\n\t\t\t\t\t\t\t\t.losablieferungFindByPrimaryKey(\n\t\t\t\t\t\t\t\t\t\tlagerbewegung_ursprung\n\t\t\t\t\t\t\t\t\t\t\t\t.getI_belegartpositionid(),\n\t\t\t\t\t\t\t\t\t\ttrue, theClientDto);\n\t\t\t\t\t\tLosDto losDto = getFertigungFac().losFindByPrimaryKey(\n\t\t\t\t\t\t\t\tlagerbewegung_ursprung.getI_belegartid());\n\t\t\t\t\t\t// Neuer Eintrag\n\t\t\t\t\t\tObject[] oZeileLosanteil = new Object[ProjektReportFac.REPORT_PROJEKTVERLAUF_ANZAHL_SPALTEN];\n\t\t\t\t\t\toZeileLosanteil[ProjektReportFac.REPORT_PROJEKTVERLAUF_LOSANTEIL_LIEFERSCHEIN_LOSNUMMER] = losDto\n\t\t\t\t\t\t\t\t.getCNr();\n\t\t\t\t\t\toZeileLosanteil[ProjektReportFac.REPORT_PROJEKTVERLAUF_EBENE] = iEbene;\n\t\t\t\t\t\tBigDecimal gestWertArbeitIst = losablieferungDto\n\t\t\t\t\t\t\t\t.getNArbeitszeitwertdetailliert().multiply(\n\t\t\t\t\t\t\t\t\t\tdto.getNVerbrauchtemenge());\n\t\t\t\t\t\tBigDecimal gestWertMaterialIst = losablieferungDto\n\t\t\t\t\t\t\t\t.getNMaterialwertdetailliert().multiply(\n\t\t\t\t\t\t\t\t\t\tdto.getNVerbrauchtemenge());\n\t\t\t\t\t\toZeileLosanteil[ProjektReportFac.REPORT_PROJEKTVERLAUF_LOSANTEIL_LIEFERSCHEIN_EINSTANDSWERT_MATERIAL] = gestWertMaterialIst;\n\t\t\t\t\t\tbdLosanteilImLieferschein = bdLosanteilImLieferschein\n\t\t\t\t\t\t\t\t.add(gestWertArbeitIst)\n\t\t\t\t\t\t\t\t.add(gestWertMaterialIst);\n\t\t\t\t\t\tBigDecimal gesamtAbgeliefert = getFertigungFac()\n\t\t\t\t\t\t\t\t.getErledigteMenge(losDto.getIId(),\n\t\t\t\t\t\t\t\t\t\ttheClientDto);\n\t\t\t\t\t\tAuftragzeitenDto[] azDtos = getZeiterfassungFac()\n\t\t\t\t\t\t\t\t.getAllZeitenEinesBeleges(\n\t\t\t\t\t\t\t\t\t\tLocaleFac.BELEGART_LOS,\n\t\t\t\t\t\t\t\t\t\tlosDto.getIId(), null, null, null,\n\t\t\t\t\t\t\t\t\t\tnull, true, false, theClientDto);\n\t\t\t\t\t\tBigDecimal summeKosten = BigDecimal.ZERO;\n\t\t\t\t\t\tfor (int i = 0; i < azDtos.length; i++) {\n\t\t\t\t\t\t\tsummeKosten = summeKosten.add(azDtos[i]\n\t\t\t\t\t\t\t\t\t.getBdKosten());\n\t\t\t\t\t\t}\n\t\t\t\t\t\toZeileLosanteil[ProjektReportFac.REPORT_PROJEKTVERLAUF_LOSANTEIL_LIEFERSCHEIN_EINSTANDSWERT_AZ] = new BigDecimal(\n\t\t\t\t\t\t\t\tsummeKosten.doubleValue()\n\t\t\t\t\t\t\t\t\t\t/ gesamtAbgeliefert.doubleValue()\n\t\t\t\t\t\t\t\t\t\t* dto.getNVerbrauchtemenge()\n\t\t\t\t\t\t\t\t\t\t\t\t.doubleValue());\n\t\t\t\t\t\tBigDecimal einstandswert = BigDecimal.ZERO;\n\t\t\t\t\t\tLossollmaterialDto[] sollMatDtos = getFertigungFac()\n\t\t\t\t\t\t\t\t.lossollmaterialFindByLosIId(\n\t\t\t\t\t\t\t\t\t\tlosablieferungDto.getLosIId());\n\t\t\t\t\t\tfor (int i = 0; i < sollMatDtos.length; i++) {\n\t\t\t\t\t\t\tLosistmaterialDto[] istmatDto = getFertigungFac()\n\t\t\t\t\t\t\t\t\t.losistmaterialFindByLossollmaterialIId(\n\t\t\t\t\t\t\t\t\t\t\tsollMatDtos[i].getIId());\n\t\t\t\t\t\t\tfor (int k = 0; k < istmatDto.length; k++) {\n\t\t\t\t\t\t\t\t// Wert\n\t\t\t\t\t\t\t\tList<SeriennrChargennrMitMengeDto> snrs = getLagerFac()\n\t\t\t\t\t\t\t\t\t\t.getAllSeriennrchargennrEinerBelegartpositionUeberHibernate(\n\t\t\t\t\t\t\t\t\t\t\t\tLocaleFac.BELEGART_LOS,\n\t\t\t\t\t\t\t\t\t\t\t\tistmatDto[k].getIId());\n\t\t\t\t\t\t\t\tfor (int m = 0; m < snrs.size(); m++) {\n\t\t\t\t\t\t\t\t\tBigDecimal bdWEinstandswertZeile = getLagerFac()\n\t\t\t\t\t\t\t\t\t\t\t.getEinstandspreis(\n\t\t\t\t\t\t\t\t\t\t\t\t\tLocaleFac.BELEGART_LOS,\n\t\t\t\t\t\t\t\t\t\t\t\t\tistmatDto[k].getIId(),\n\t\t\t\t\t\t\t\t\t\t\t\t\tsnrs.get(m)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getCSeriennrChargennr());\n\t\t\t\t\t\t\t\t\tif (bdWEinstandswertZeile != null) {\n\t\t\t\t\t\t\t\t\t\teinstandswert = einstandswert\n\t\t\t\t\t\t\t\t\t\t\t\t.add(bdWEinstandswertZeile);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\toZeileLosanteil[ProjektReportFac.REPORT_PROJEKTVERLAUF_LOSANTEIL_LIEFERSCHEIN_EINSTANDSWERT_MATERIAL] = new BigDecimal(\n\t\t\t\t\t\t\t\teinstandswert.doubleValue()\n\t\t\t\t\t\t\t\t\t\t/ gesamtAbgeliefert.doubleValue()\n\t\t\t\t\t\t\t\t\t\t* dto.getNVerbrauchtemenge()\n\t\t\t\t\t\t\t\t\t\t\t\t.doubleValue());\n\t\t\t\t\t\talDaten.add(oZeileLosanteil);\n\t\t\t\t\t\tfor (int i = 0; i < sollMatDtos.length; i++) {\n\t\t\t\t\t\t\tLosistmaterialDto[] istmatDto = getFertigungFac()\n\t\t\t\t\t\t\t\t\t.losistmaterialFindByLossollmaterialIId(\n\t\t\t\t\t\t\t\t\t\t\tsollMatDtos[i].getIId());\n\t\t\t\t\t\t\tfor (int k = 0; k < istmatDto.length; k++) {\n\t\t\t\t\t\t\t\t// Wenn istmaterial aus Los kommt\n\t\t\t\t\t\t\t\tlosablieferungHinzufuegen(\n\t\t\t\t\t\t\t\t\t\tLocaleFac.BELEGART_LOS,\n\t\t\t\t\t\t\t\t\t\tistmatDto[k].getIId(), theClientDto,\n\t\t\t\t\t\t\t\t\t\tistmatDto[k].getNMenge(), iEbene + 1,\n\t\t\t\t\t\t\t\t\t\talDaten);\n\t\t\t\t\t\t\t\t// Wert\n\t\t\t\t\t\t\t\tgetLagerFac().getEinstandspreis(\n\t\t\t\t\t\t\t\t\t\tLocaleFac.BELEGART_LOS,\n\t\t\t\t\t\t\t\t\t\tistmatDto[k].getIId(), null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// ev rekursiv aufrufen\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsession.close();\n\t\treturn alDaten;\n\t}\n\tprivate Object[] befuelleZeileProjektverlaufMitZeitdaten(String belegart,\n\t\t\tInteger belegIId, Object[] oZeile, TheClientDto theClientDto) {\n\t\tif (belegart != null && belegIId != null) {\n\t\t\tAuftragzeitenDto[] azDtos = getZeiterfassungFac()\n\t\t\t\t\t.getAllZeitenEinesBeleges(belegart, belegIId, null, null,\n\t\t\t\t\t\t\tnull, null, true, false, theClientDto);\n\t\t\tdouble zeiten = 0;\n\t\t\tBigDecimal bdKosten = new BigDecimal(0);\n\t\t\tfor (int i = 0; i < azDtos.length; i++) {\n\t\t\t\tif (azDtos[i] != null && azDtos[i].getDdDauer() != null) {\n\t\t\t\t\tzeiten = zeiten + azDtos[i].getDdDauer().doubleValue();\n\t\t\t\t}\n\t\t\t\tif (azDtos[i] != null && azDtos[i].getBdKosten() != null) {\n\t\t\t\t\tbdKosten = bdKosten.add(azDtos[i].getBdKosten());\n\t\t\t\t}\n\t\t\t}\n\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_AZ_DAUER] = new Double(\n\t\t\t\t\tzeiten);\n\t\t\toZeile[ProjektReportFac.REPORT_PROJEKTVERLAUF_AZ_KOSTEN] = bdKosten;\n\t\t}\n\t\treturn oZeile;\n\t}\n\tpublic JasperPrintLP printProjekt(Integer iIdProjektI,\n\t\t\tInteger iAnzahlKopienI, Boolean bMitLogo, TheClientDto theClientDto)\n\t\t\tthrows EJBExceptionLP, RemoteException {\n\t\tJasperPrintLP aJasperPrint = null;\n\t\ttry {\n\t\t\tProjektDto projektDto = getProjektFac().projektFindByPrimaryKey(\n\t\t\t\t\tiIdProjektI);\n\t\t\tPartnerDto partnerDto = getPartnerFac().partnerFindByPrimaryKey(\n\t\t\t\t\tprojektDto.getPartnerIId(), theClientDto);\n\t\t\tMandantDto mandantDto = getMandantFac().mandantFindByPrimaryKey(\n\t\t\t\t\tprojektDto.getMandantCNr(), theClientDto);\n\t\t\tcAktuellerReport = ProjektReportFac.REPORT_PROJEKT;\n\t\t\t// dem Report seine Parameter setzen\n\t\t\tHashMap<String, Object> parameter = new HashMap<String, Object>();\n\t\t\tLocale locDruck = Helper.string2Locale(partnerDto\n\t\t\t\t\t.getLocaleCNrKommunikation());\n\t\t\tif (partnerDto.getPartnerklasseIId() != null) {\n\t\t\t\tparameter.put(\n\t\t\t\t\t\t\"P_PARTNERKLASSE\",\n\t\t\t\t\t\tgetPartnerFac().partnerklasseFindByPrimaryKey(\n\t\t\t\t\t\t\t\tpartnerDto.getPartnerklasseIId(), theClientDto)\n\t\t\t\t\t\t\t\t.getBezeichnung());\n\t\t\t}\n\t\t\tparameter.put(\"P_BEREICH\", getProjektServiceFac()\n\t\t\t\t\t.bereichFindByPrimaryKey(projektDto.getBereichIId())\n\t\t\t\t\t.getCBez());\n\t\t\tif (partnerDto.getBrancheIId() != null) {\n\t\t\t\tparameter.put(\n\t\t\t\t\t\t\"P_BRANCHE\",\n\t\t\t\t\t\tgetPartnerServicesFac().brancheFindByPrimaryKey(\n\t\t\t\t\t\t\t\tpartnerDto.getBrancheIId(), theClientDto)\n\t\t\t\t\t\t\t\t.getBezeichnung());\n\t\t\t}\n\t\t\tparameter.put(\"P_MANDANTADRESSE\",\n\t\t\t\t\tHelper.formatMandantAdresse(mandantDto));\n\t\t\tparameter.put(\"P_TITEL\", projektDto.getCTitel());\n\t\t\tparameter.put(\"P_PROJEKTNUMMER\", projektDto.getCNr());\n\t\t\tparameter\n\t\t\t\t\t.put(\"P_KOPFTEXT\", Helper\n\t\t\t\t\t\t\t.formatStyledTextForJasper(projektDto\n\t\t\t\t\t\t\t\t\t.getXFreetext()));\n\t\t\tparameter.put(\"P_KATEGORIE\", projektDto.getKategorieCNr());\n\t\t\tparameter.put(\"P_WAHRSCHEINLICHKEIT\",\n\t\t\t\t\tprojektDto.getIWahrscheinlichkeit());\n\t\t\tparameter.put(\"P_UMSATZGEPLANT\", projektDto.getNUmsatzgeplant());\n\t\t\tparameter\n\t\t\t\t\t.put(\"P_ZIELTERMIN\",\n\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t\t\t+ Helper.formatDatum(\n\t\t\t\t\t\t\t\t\t\t\tprojektDto.getTZielwunschdatum(),\n\t\t\t\t\t\t\t\t\t\t\tlocDruck));\n\t\t\tparameter.put(\n\t\t\t\t\t\"P_ERLEDIGUNGSDATUM\",\n\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t+ Helper.formatDatum(projektDto.getTErledigt(),\n\t\t\t\t\t\t\t\t\tlocDruck));\n\t\t\tparameter\n\t\t\t\t\t.put(\"P_BELEGDATUM\",\n\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t\t\t+ Helper.formatDatum(\n\t\t\t\t\t\t\t\t\t\t\tprojektDto.getTAnlegen(), locDruck));\n\t\t\tparameter.put(\n\t\t\t\t\t\"P_KUNDE_ADRESSBLOCK\",\n\t\t\t\t\tformatAdresseFuerAusdruck(partnerDto, null, mandantDto,\n\t\t\t\t\t\t\tlocDruck));\n\t\t\tif (projektDto.getAnsprechpartnerIId() != null) {\n\t\t\t\tAnsprechpartnerDto ansprechpartnerDto = getAnsprechpartnerFac()\n\t\t\t\t\t\t.ansprechpartnerFindByPrimaryKey(\n\t\t\t\t\t\t\t\tprojektDto.getAnsprechpartnerIId(),\n\t\t\t\t\t\t\t\ttheClientDto);\n\t\t\t\tparameter.put(LPReport.P_ANSPRECHPARTNER, ansprechpartnerDto\n\t\t\t\t\t\t.getPartnerDto().formatFixName1Name2());\n\t\t\t\tparameter.put(LPReport.P_ANSPRECHPARTNERHANDY,\n\t\t\t\t\t\tansprechpartnerDto.getCHandy());\n\t\t\t\tparameter.put(LPReport.P_ANSPRECHPARTNERDW,\n\t\t\t\t\t\tansprechpartnerDto.getCTelefon());\n\t\t\t\tparameter.put(LPReport.P_ANSPRECHPARTNEREMAIL,\n\t\t\t\t\t\tansprechpartnerDto.getCEmail());\n\t\t\t\tparameter.put(LPReport.P_ANSPRECHPARTNERFAX,\n\t\t\t\t\t\tansprechpartnerDto.getCDirektfax());\n\t\t\t\tString sTelefon = getPartnerFac()\n\t\t\t\t\t\t.partnerkommFindRespectPartnerAsStringOhneExec(\n\t\t\t\t\t\t\t\tansprechpartnerDto.getIId(), partnerDto,\n\t\t\t\t\t\t\t\tPartnerFac.KOMMUNIKATIONSART_TELEFON,\n\t\t\t\t\t\t\t\ttheClientDto.getMandant(), theClientDto);\n\t\t\t\tparameter.put(LPReport.P_ANSPRECHPARTNERTELEFON,\n\t\t\t\t\t\tsTelefon != null ? sTelefon : \"\");\n\t\t\t}\n\t\t\tSessionFactory factory = FLRSessionFactory.getFactory();\n\t\t\tSession session = null;\n\t\t\ttry {\n\t\t\t\tsession = factory.openSession();\n\t\t\t\t// Hiberante Criteria fuer alle Tabellen ausgehend von meiner\n\t\t\t\t// Haupttabelle anlegen,\n\t\t\t\t// nach denen ich filtern und sortieren kann\n\t\t\t\tCriteria crit = session.createCriteria(FLRHistory.class);\n\t\t\t\tcrit.createCriteria(ProjektFac.FLR_HISTORY_FLRPROJEKT).add(\n\t\t\t\t\t\tRestrictions.eq(ProjektFac.FLR_PROJEKT_I_ID,\n\t\t\t\t\t\t\t\tprojektDto.getIId()));\n\t\t\t\tcrit.addOrder(Order.desc(ProjektFac.FLR_HISTORY_T_BELEGDATUM));\n\t\t\t\tList<?> resultList = crit.list();\n\t\t\t\tif (resultList.size() == 0) {\n\t\t\t\t\tdata = new Object[1][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_ANZAHL_SPALTEN];\n\t\t\t\t\tparameter.put(\"P_OHNEPOSITION\", new Boolean(true));\n\t\t\t\t} else {\n\t\t\t\t\tparameter.put(\"P_OHNEPOSITION\", new Boolean(false));\n\t\t\t\t\tIterator<?> it = resultList.iterator();\n\t\t\t\t\tint i = 0;\n\t\t\t\t\tdata = new Object[resultList.size()][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_ANZAHL_SPALTEN];\n\t\t\t\t\twhile (it.hasNext()) {\n\t\t\t\t\t\tFLRHistory history = (FLRHistory) it.next();\n\t\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_POSITION] = i;\n\t\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_ERZEUGER] = history\n\t\t\t\t\t\t\t\t.getFlrpersonal().getFlrpartner()\n\t\t\t\t\t\t\t\t.getC_name1nachnamefirmazeile1();\n\t\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_HISTORY_BELEGDATUM] = Helper\n\t\t\t\t\t\t\t\t.formatDatum(history.getT_belegdatum(),\n\t\t\t\t\t\t\t\t\t\tlocDruck);\n\t\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_HISTORY_TEXT] = history\n\t\t\t\t\t\t\t\t.getX_text();\n\t\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_TITEL] = history\n\t\t\t\t\t\t\t\t.getC_titel();\n\t\t\t\t\t\tif (history.getFlrhistoryart() != null) {\n\t\t\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_HISTORYART] = history\n\t\t\t\t\t\t\t\t\t.getFlrhistoryart().getC_bez();\n\t\t\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_ROT] = history\n\t\t\t\t\t\t\t\t\t.getFlrhistoryart().getI_rot();\n\t\t\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_BLAU] = history\n\t\t\t\t\t\t\t\t\t.getFlrhistoryart().getI_blau();\n\t\t\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_GRUEN] = history\n\t\t\t\t\t\t\t\t\t.getFlrhistoryart().getI_gruen();\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Throwable t) {\n\t\t\t\tthrow new EJBExceptionLP(EJBExceptionLP.FEHLER_FLR,\n\t\t\t\t\t\tnew Exception(t));\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tsession.close();\n\t\t\t\t} catch (HibernateException he) {\n\t\t\t\t\tthrow new EJBExceptionLP(EJBExceptionLP.FEHLER_HIBERNATE,\n\t\t\t\t\t\t\the);\n\t\t\t\t}\n\t\t\t}\n\t\t\tinitJRDS(parameter, ProjektReportFac.REPORT_MODUL,\n\t\t\t\t\tcAktuellerReport, theClientDto.getMandant(), locDruck,\n\t\t\t\t\ttheClientDto);\n\t\t\t// SP2599 Bild anhaengen\n\t\t\tArrayList<BufferedImage> images = new ArrayList<BufferedImage>();\n\t\t\t// Bild einfuegen\n\t\t\tif (projektDto.getOAttachments() != null\n\t\t\t\t\t&& projektDto.getCAttachmentsType() != null) {\n\t\t\t\tif (projektDto.getCAttachmentsType().equals(\n\t\t\t\t\t\tMediaFac.DATENFORMAT_MIMETYPE_IMAGE_JPEG)\n\t\t\t\t\t\t|| projektDto.getCAttachmentsType().equals(\n\t\t\t\t\t\t\t\tMediaFac.DATENFORMAT_MIMETYPE_IMAGE_PNG)\n\t\t\t\t\t\t|| projektDto.getCAttachmentsType().equals(\n\t\t\t\t\t\t\t\tMediaFac.DATENFORMAT_MIMETYPE_IMAGE_GIF)) {\n\t\t\t\t\tbyte[] bild = projektDto.getOAttachments();\n\t\t\t\t\timages.add(Helper.byteArrayToImage(bild));\n\t\t\t\t} else if (projektDto.getCAttachmentsType().equals(\n\t\t\t\t\t\tMediaFac.DATENFORMAT_MIMETYPE_IMAGE_TIFF)) {\n\t\t\t\t\tbyte[] bild = projektDto.getOAttachments();\n\t\t\t\t\tjava.awt.image.BufferedImage[] tiffs = Helper\n\t\t\t\t\t\t\t.tiffToImageArray(bild);\n\t\t\t\t\tif (tiffs != null) {\n\t\t\t\t\t\tfor (int k = 0; k < tiffs.length; k++) {\n\t\t\t\t\t\t\timages.add(tiffs[k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (projektDto.getCAttachmentsType().equals(\n\t\t\t\t\t\tMediaFac.DATENFORMAT_MIMETYPE_APP_PDF)) {\n\t\t\t\t\tbyte[] pdf = projektDto.getOAttachments();\n\t\t\t\t\tPDDocument document = null;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tInputStream myInputStream = new ByteArrayInputStream(\n\t\t\t\t\t\t\t\tpdf);\n\t\t\t\t\t\tdocument = PDDocument.load(myInputStream);\n\t\t\t\t\t\tPDFRenderer renderer = new PDFRenderer(document);\n\t\t\t\t\t\tint numPages = document.getNumberOfPages();\n\t\t\t\t\t\tfor (int p = 0; p < numPages; p++) {\n\t\t\t\t\t\t\tBufferedImage image = renderer.renderImageWithDPI(\n\t\t\t\t\t\t\t\t\tp, 150);\n\t\t\t\t\t\t\timages.add(image);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\tthrow new EJBExceptionLP(EJBExceptionLP.FEHLER,\n\t\t\t\t\t\t\t\te.getMessage());\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (document != null) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdocument.close();\n\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t\tthrow new EJBExceptionLP(EJBExceptionLP.FEHLER,\n\t\t\t\t\t\t\t\t\t\te.getMessage());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tJasperPrintLP print = getReportPrint();\n\t\t\tInteger cachedReportvariante = theClientDto.getReportvarianteIId();\n\t\t\tif (images != null) {\n\t\t\t\tfor (int k = 0; k < images.size(); k++) {\n\t\t\t\t\tHashMap mapParameter = new HashMap<String, Object>();\n\t\t\t\t\tmapParameter.put(\"P_BILD\", images.get(k));\n\t\t\t\t\tcAktuellerReport = REPORT_GANZSEITIGESBILD;\n\t\t\t\t\tthis.index = -1;\n\t\t\t\t\tdata = new Object[1][1];\n\t\t\t\t\tBufferedImage img = images.get(k);\n\t\t\t\t\timg = Helper.bildUm90GradDrehenWennNoetig(img);\n\t\t\t\t\tdata[0][0] = img;\n\t\t\t\t\ttheClientDto.setReportvarianteIId(cachedReportvariante);\n\t\t\t\t\tinitJRDS(mapParameter, REPORT_MODUL_ALLGEMEIN,\n\t\t\t\t\t\t\tREPORT_GANZSEITIGESBILD, theClientDto.getMandant(),\n\t\t\t\t\t\t\ttheClientDto.getLocUi(), theClientDto);\n\t\t\t\t\tprint = Helper.addReport2Report(print, getReportPrint()\n\t\t\t\t\t\t\t.getPrint());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn print;\n\t\t} catch (RemoteException ex) {\n\t\t\tthrowEJBExceptionLPRespectOld(ex);\n\t\t} catch (Throwable t) {\n\t\t\tthrow new EJBExceptionLP(EJBExceptionLP.FEHLER_BEIM_DRUCKEN,\n\t\t\t\t\tnew Exception(t));\n\t\t}\n\t\treturn aJasperPrint;\n\t}\n\tpublic JasperPrintLP printProjektAlle(\n\t\t\tReportJournalKriterienDto reportJournalKriterienDtoI,\n\t\t\tDate dStichtag, Integer bereichIId,\n\t\t\tboolean belegdatumStattZieltermin, TheClientDto theClientDto)\n\t\t\tthrows EJBExceptionLP, RemoteException {\n\t\tJasperPrintLP oPrint = null;\n\t\tint iAnzahlZeilen = 0;\n\t\tcAktuellerReport = ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE;\n\t\tLocale locDruck;\n\t\tSessionFactory factory = FLRSessionFactory.getFactory();\n\t\tSession session = null;\n\t\t// vom Stichtag die Uhrzeit abschneiden\n\t\tdStichtag = Helper.cutDate(dStichtag);\n\t\ttry {\n\t\t\tsession = factory.openSession();\n\t\t\t// Hiberante Criteria fuer alle Tabellen ausgehend von meiner\n\t\t\t// Haupttabelle anlegen,\n\t\t\t// nach denen ich filtern und sortieren kann\n\t\t\tCriteria critProjekt = session.createCriteria(FLRProjekt.class);\n\t\t\t// Einschraenkung auf den aktuellen Mandanten\n\t\t\tcritProjekt.add(Restrictions.eq(\n\t\t\t\t\tProjektFac.FLR_PROJEKT_MANDANT_C_NR,\n\t\t\t\t\ttheClientDto.getMandant()));\n\t\t\tcritProjekt.add(Restrictions.not(Restrictions.eq(\n\t\t\t\t\tProjektFac.FLR_PROJEKT_STATUS_C_NR,\n\t\t\t\t\tProjektServiceFac.PROJEKT_STATUS_STORNIERT)));\n\t\t\t// Einschraenkung nach Belegdatum von - bis\n\t\t\tString sVon = null;\n\t\t\tString sBis = null;\n\t\t\tif (reportJournalKriterienDtoI.dVon != null) {\n\t\t\t\tif (belegdatumStattZieltermin) {\n\t\t\t\t\tcritProjekt.add(Restrictions.ge(\n\t\t\t\t\t\t\tProjektFac.FLR_PROJEKT_T_ANLEGEN,\n\t\t\t\t\t\t\treportJournalKriterienDtoI.dVon));\n\t\t\t\t} else {\n\t\t\t\t\tcritProjekt.add(Restrictions.ge(\n\t\t\t\t\t\t\tProjektFac.FLR_PROJEKT_T_ZIELDATUM,\n\t\t\t\t\t\t\treportJournalKriterienDtoI.dVon));\n\t\t\t\t}\n\t\t\t\tsVon = Helper.formatDatum(reportJournalKriterienDtoI.dVon,\n\t\t\t\t\t\ttheClientDto.getLocUi());\n\t\t\t}\n\t\t\tif (reportJournalKriterienDtoI.dBis != null) {\n\t\t\t\tif (belegdatumStattZieltermin) {\n\t\t\t\t\tcritProjekt.add(Restrictions.le(\n\t\t\t\t\t\t\tProjektFac.FLR_PROJEKT_T_ANLEGEN,\n\t\t\t\t\t\t\treportJournalKriterienDtoI.dBis));\n\t\t\t\t} else {\n\t\t\t\t\tcritProjekt.add(Restrictions.le(\n\t\t\t\t\t\t\tProjektFac.FLR_PROJEKT_T_ZIELDATUM,\n\t\t\t\t\t\t\treportJournalKriterienDtoI.dBis));\n\t\t\t\t}\n\t\t\t\tsBis = Helper.formatDatum(reportJournalKriterienDtoI.dBis,\n\t\t\t\t\t\ttheClientDto.getLocUi());\n\t\t\t}\n\t\t\tif (reportJournalKriterienDtoI.sBelegnummerVon != null) {\n\t\t\t\tsVon = reportJournalKriterienDtoI.sBelegnummerVon;\n\t\t\t\tcritProjekt.add(Restrictions.ge(ProjektFac.FLR_PROJEKT_C_NR,\n\t\t\t\t\t\tnew Integer(sVon)));\n\t\t\t}\n\t\t\tcritProjekt.add(Restrictions.eq(\n\t\t\t\t\tProjektFac.FLR_PROJEKT_BEREICH_I_ID, bereichIId));\n\t\t\tif (reportJournalKriterienDtoI.sBelegnummerBis != null) {\n\t\t\t\tsBis = reportJournalKriterienDtoI.sBelegnummerBis;\n\t\t\t\tcritProjekt.add(Restrictions.le(ProjektFac.FLR_PROJEKT_C_NR,\n\t\t\t\t\t\tnew Integer(sBis)));\n\t\t\t}\n\t\t\t// Einschraenkung nach einer bestimmten Perosn\n\t\t\tif (reportJournalKriterienDtoI.personalIId != null) {\n\t\t\t\tcritProjekt.add(Restrictions.eq(\n\t\t\t\t\t\tProjektFac.FLR_PROJEKT_PERSONAL_I_ID_ZUGEWIESENER,\n\t\t\t\t\t\treportJournalKriterienDtoI.personalIId));\n\t\t\t}\n\t\t\t// Sortierung nach Personal ist immer die erste Sortierung\n\t\t\tif (reportJournalKriterienDtoI.bSortiereNachPersonal) {\n\t\t\t\tcritProjekt\n\t\t\t\t\t\t.createCriteria(\n\t\t\t\t\t\t\t\tProjektFac.FLR_PROJEKT_FLRPERSONALZUGEWIESENER)\n\t\t\t\t\t\t.createCriteria(KundeFac.FLR_PARTNER)\n\t\t\t\t\t\t.addOrder(\n\t\t\t\t\t\t\t\tOrder.asc(PartnerFac.FLR_PARTNER_NAME1NACHNAMEFIRMAZEILE1));\n\t\t\t}\n\t\t\t// Sortierung nach Partner,\n\t\t\tif (reportJournalKriterienDtoI.iSortierung == ReportJournalKriterienDto.KRIT_SORT_NACH_PARTNER) {\n\t\t\t\tcritProjekt\n\t\t\t\t\t\t.createCriteria(ProjektFac.FLR_PROJEKT_FLRPARTNER)\n\t\t\t\t\t\t.addOrder(\n\t\t\t\t\t\t\t\tOrder.asc(PartnerFac.FLR_PARTNER_NAME1NACHNAMEFIRMAZEILE1));\n\t\t\t}\n\t\t\t// es wird in jedem Fall nach der Iid sortiert\n\t\t\tcritProjekt.addOrder(Order.asc(ProjektFac.FLR_PROJEKT_C_NR));\n\t\t\tList<?> list = critProjekt.list();\n\t\t\tIterator<?> it = list.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tFLRProjekt projekt = (FLRProjekt) it.next();\n\t\t\t\tsession = factory.openSession();\n\t\t\t\tCriteria critHistory = session.createCriteria(FLRHistory.class);\n\t\t\t\tcritHistory.createCriteria(ProjektFac.FLR_HISTORY_FLRPROJEKT)\n\t\t\t\t\t\t.add(Restrictions.eq(ProjektFac.FLR_PROJEKT_I_ID,\n\t\t\t\t\t\t\t\tprojekt.getI_id()));\n\t\t\t\tList<?> historyList = critHistory.list();\n\t\t\t\tif (historyList.size() != 0) {\n\t\t\t\t\tiAnzahlZeilen = iAnzahlZeilen + historyList.size();\n\t\t\t\t}\n\t\t\t\tiAnzahlZeilen++;\n\t\t\t}\n\t\t\tdata = new Object[iAnzahlZeilen][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_ANZAHL_SPALTEN];\n\t\t\tint i = 0;\n\t\t\tit = list.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tFLRProjekt projekt = (FLRProjekt) it.next();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_PROJEKTTITEL] = projekt\n\t\t\t\t\t\t.getC_titel();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_PROJEKTKATEGORIE] = projekt\n\t\t\t\t\t\t.getKategorie_c_nr();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_PROJEKTCNR] = projekt\n\t\t\t\t\t\t.getC_nr();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_KUNDECNAME1] = projekt\n\t\t\t\t\t\t.getFlrpartner().getC_name1nachnamefirmazeile1();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_STATUS] = projekt\n\t\t\t\t\t\t.getStatus_c_nr();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_TYP] = projekt\n\t\t\t\t\t\t.getTyp_c_nr();\n\t\t\t\tif (projekt.getPersonal_i_id_internerledigt() != null) {\n\t\t\t\t\tPersonalDto personalDto = getPersonalFac()\n\t\t\t\t\t\t\t.personalFindByPrimaryKey(\n\t\t\t\t\t\t\t\t\tprojekt.getPersonal_i_id_internerledigt(),\n\t\t\t\t\t\t\t\t\ttheClientDto);\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_INTERNERLEDIGT_PERSON] = personalDto\n\t\t\t\t\t\t\t.getPartnerDto().formatAnrede();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_INTERNERLEDIGT_ZEIT] = projekt\n\t\t\t\t\t\t\t.getT_internerledigt();\n\t\t\t\t}\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_WAHRSCHEINLICHKEIT] = projekt\n\t\t\t\t\t\t.getI_wahrscheinlichkeit();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_GEPLANTERUMSATZ] = projekt\n\t\t\t\t\t\t.getN_umsatzgeplant();\n\t\t\t\tlocDruck = Helper.string2Locale(projekt.getFlrpartner()\n\t\t\t\t\t\t.getLocale_c_nr_kommunikation());\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_ZIELTERMIN] = Helper\n\t\t\t\t\t\t.formatDatum(projekt.getT_zielwunschdatum(), locDruck);\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_BELEGDATUM] = Helper\n\t\t\t\t\t\t.formatDatum(projekt.getT_anlegen(), locDruck);\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_ERLEDIGUNGSDATUM] = Helper\n\t\t\t\t\t\t.formatDatumZeit(projekt.getT_erledigungsdatum(),\n\t\t\t\t\t\t\t\tlocDruck);\n\t\t\t\tCalendar calendar = new GregorianCalendar();\n\t\t\t\tcalendar.setTime(new Date(projekt.getT_zielwunschdatum()\n\t\t\t\t\t\t.getTime()));\n\t\t\t\tint KW = calendar.get(Calendar.WEEK_OF_YEAR); // Kalendarwochen\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_ZIELWOCHE] = \"\"\n\t\t\t\t\t\t+ KW;\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_PRIO] = projekt\n\t\t\t\t\t\t.getI_prio();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_TEXT] = projekt\n\t\t\t\t\t\t.getX_freetext();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_ERZEUGER] = projekt\n\t\t\t\t\t\t.getFlrpersonalErzeuger().getFlrpartner()\n\t\t\t\t\t\t.getC_name1nachnamefirmazeile1();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_ZUGEWIESENER] = projekt\n\t\t\t\t\t\t.getFlrpersonalZugewiesener().getFlrpartner()\n\t\t\t\t\t\t.getC_name1nachnamefirmazeile1();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_ZEIT] = projekt\n\t\t\t\t\t\t.getT_zeit();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_DAUER] = projekt\n\t\t\t\t\t\t.getD_dauer();\n\t\t\t\t//\n\t\t\t\t//\n\t\t\t\tCriteria crit1 = session.createCriteria(FLRHistory.class);\n\t\t\t\tcrit1.createCriteria(ProjektFac.FLR_HISTORY_FLRPROJEKT).add(\n\t\t\t\t\t\tRestrictions.eq(ProjektFac.FLR_PROJEKT_I_ID,\n\t\t\t\t\t\t\t\tprojekt.getI_id()));\n\t\t\t\tList<?> resultList = crit1.list();\n\t\t\t\tIterator<?> itHistory = resultList.iterator();\n\t\t\t\ti++;\n\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_PROJEKTCNR] = projekt\n\t\t\t\t\t\t\t.getC_nr();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_ZUGEWIESENER] = projekt\n\t\t\t\t\t\t\t.getFlrpersonalZugewiesener().getFlrpartner()\n\t\t\t\t\t\t\t.getC_name1nachnamefirmazeile1();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_HISTORY_MITARBEITER] = history\n\t\t\t\t\t\t\t.getFlrpersonal().getFlrpartner()\n\t\t\t\t\t\t\t.getC_name1nachnamefirmazeile1();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_HISTORY_BELEGDATUM] = Helper\n\t\t\t\t\t\t\t.formatDatum(history.getT_belegdatum(), locDruck);\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ALLE_HISTORY_TEXT] = history\n\t\t\t\t\t\t\t.getX_text();\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\tthrow new EJBExceptionLP(EJBExceptionLP.FEHLER_FLR,\n\t\t\t\t\tnew Exception(t));\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tsession.close();\n\t\t\t} catch (HibernateException he) {\n\t\t\t\tthrow new EJBExceptionLP(EJBExceptionLP.FEHLER_HIBERNATE, he);\n\t\t\t}\n\t\t}\n\t\t// die Parameter dem Report uebergeben\n\t\tHashMap<String, Object> parameter = new HashMap<String, Object>();\n\t\tparameter.put(\n\t\t\t\tLPReport.P_SORTIERUNG,\n\t\t\t\tbuildSortierungProjektAlle(reportJournalKriterienDtoI,\n\t\t\t\t\t\ttheClientDto));\n\t\tparameter.put(\"P_BEREICH\", getProjektServiceFac()\n\t\t\t\t.bereichFindByPrimaryKey(bereichIId).getCBez());\n\t\tparameter.put(\"P_BELEGDATUM_STATT_ZIELTERMIN\", new Boolean(\n\t\t\t\tbelegdatumStattZieltermin));\n\t\tparameter\n\t\t\t\t.put(LPReport.P_FILTER,\n\t\t\t\t\t\tbuildFilterProjektAlle(reportJournalKriterienDtoI,\n\t\t\t\t\t\t\t\ttheClientDto));\n\t\tif (reportJournalKriterienDtoI.personalIId != null) {\n\t\t\tparameter.put(LPReport.P_SORTIERENACHPERSONAL, new Boolean(true));\n\t\t} else {\n\t\t\tparameter.put(LPReport.P_SORTIERENACHPERSONAL, new Boolean(false));\n\t\t}\n\t\tparameter.put(\n\t\t\t\t\"P_TITLE\",\n\t\t\t\tgetTextRespectUISpr(\"proj.print.alle\",\n\t\t\t\t\t\ttheClientDto.getMandant(), theClientDto.getLocUi()));\n\t\tinitJRDS(parameter, ProjektReportFac.REPORT_MODUL, cAktuellerReport,\n\t\t\t\ttheClientDto.getMandant(), theClientDto.getLocUi(),\n\t\t\t\ttheClientDto);\n\t\toPrint = getReportPrint();\n\t\treturn oPrint;\n\t}\n\tpublic JasperPrintLP printProjektErledigt(\n\t\t\tReportJournalKriterienDto reportJournalKriterienDtoI,\n\t\t\tDate dStichtag, Integer bereichIId,\n\t\t\tboolean interneErledigungBeruecksichtigen, TheClientDto theClientDto)\n\t\t\tthrows EJBExceptionLP, RemoteException {\n\t\tJasperPrintLP oPrint = null;\n\t\tcAktuellerReport = ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT;\n\t\tLocale locDruck;\n\t\tSessionFactory factory = FLRSessionFactory.getFactory();\n\t\tSession session = null;\n\t\t// vom Stichtag die Uhrzeit abschneiden\n\t\tdStichtag = Helper.cutDate(dStichtag);\n\t\ttry {\n\t\t\tsession = factory.openSession();\n\t\t\t// Hiberante Criteria fuer alle Tabellen ausgehend von meiner\n\t\t\t// Haupttabelle anlegen,\n\t\t\t// nach denen ich filtern und sortieren kann\n\t\t\tCriteria crit = session.createCriteria(FLRProjekt.class);\n\t\t\t// Einschraenkung auf den aktuellen Mandanten\n\t\t\tcrit.add(Restrictions.eq(ProjektFac.FLR_PROJEKT_MANDANT_C_NR,\n\t\t\t\t\ttheClientDto.getMandant()));\n\t\t\tcrit.add(Restrictions.not(Restrictions.eq(\n\t\t\t\t\tProjektFac.FLR_PROJEKT_STATUS_C_NR,\n\t\t\t\t\tProjektServiceFac.PROJEKT_STATUS_STORNIERT)));\n\t\t\tcrit.add(Restrictions.eq(ProjektFac.FLR_PROJEKT_BEREICH_I_ID,\n\t\t\t\t\tbereichIId));\n\t\t\t// Einschraenkung nach Status Offen, Erledigt\n\t\t\tif (interneErledigungBeruecksichtigen == false) {\n\t\t\t\t// PJ18471\n\t\t\t\tcrit.createAlias(\"flrprojektstatus\", \"s\");\n\t\t\t\tcrit.add(Restrictions.eq(\"s.b_erledigt\",\n\t\t\t\t\t\tHelper.boolean2Short(true)));\n\t\t\t}\n\t\t\tif (reportJournalKriterienDtoI.dVon != null) {\n\t\t\t\tif (interneErledigungBeruecksichtigen == true) {\n\t\t\t\t\tcrit.add(Restrictions.or(\n\t\t\t\t\t\t\tRestrictions\n\t\t\t\t\t\t\t\t\t.and(Restrictions\n\t\t\t\t\t\t\t\t\t\t\t.isNotNull(ProjektFac.FLR_PROJEKT_T_INTERNERLEDIGT),\n\t\t\t\t\t\t\t\t\t\t\tRestrictions\n\t\t\t\t\t\t\t\t\t\t\t\t\t.ge(ProjektFac.FLR_PROJEKT_T_INTERNERLEDIGT,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treportJournalKriterienDtoI.dVon)),\n\t\t\t\t\t\t\tRestrictions.ge(\n\t\t\t\t\t\t\t\t\tProjektFac.FLR_PROJEKT_T_ERLEDIGUNGSDATUM,\n\t\t\t\t\t\t\t\t\treportJournalKriterienDtoI.dVon)));\n\t\t\t\t} else {\n\t\t\t\t\tcrit.add(Restrictions.ge(\n\t\t\t\t\t\t\tProjektFac.FLR_PROJEKT_T_ERLEDIGUNGSDATUM,\n\t\t\t\t\t\t\treportJournalKriterienDtoI.dVon));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (reportJournalKriterienDtoI.dBis != null) {\n\t\t\t\tDate d = Helper.addiereTageZuDatum(\n\t\t\t\t\t\treportJournalKriterienDtoI.dBis, 1);\n\t\t\t\tif (interneErledigungBeruecksichtigen == true) {\n\t\t\t\t\tcrit.add(Restrictions.or(\n\t\t\t\t\t\t\tRestrictions.and(\n\t\t\t\t\t\t\t\t\tRestrictions\n\t\t\t\t\t\t\t\t\t\t\t.isNotNull(ProjektFac.FLR_PROJEKT_T_INTERNERLEDIGT),\n\t\t\t\t\t\t\t\t\tRestrictions\n\t\t\t\t\t\t\t\t\t\t\t.lt(ProjektFac.FLR_PROJEKT_T_INTERNERLEDIGT,\n\t\t\t\t\t\t\t\t\t\t\t\t\td)), Restrictions.lt(\n\t\t\t\t\t\t\t\t\tProjektFac.FLR_PROJEKT_T_ERLEDIGUNGSDATUM,\n\t\t\t\t\t\t\t\t\td)));\n\t\t\t\t} else {\n\t\t\t\t\tcrit.add(Restrictions.lt(\n\t\t\t\t\t\t\tProjektFac.FLR_PROJEKT_T_ERLEDIGUNGSDATUM, d));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Einschraenkung nach einer bestimmten Perosn\n\t\t\tif (reportJournalKriterienDtoI.personalIId != null) {\n\t\t\t\tcrit.add(Restrictions.eq(\n\t\t\t\t\t\tProjektFac.FLR_PROJEKT_PERSONAL_I_ID_ERLEDIGER,\n\t\t\t\t\t\treportJournalKriterienDtoI.personalIId));\n\t\t\t}\n\t\t\t// Sortierung nach Partner,\n\t\t\tif (reportJournalKriterienDtoI.iSortierung == ReportJournalKriterienDto.KRIT_SORT_NACH_PARTNER) {\n\t\t\t\tcrit.createCriteria(ProjektFac.FLR_PROJEKT_FLRPARTNER)\n\t\t\t\t\t\t.addOrder(\n\t\t\t\t\t\t\t\tOrder.asc(PartnerFac.FLR_PARTNER_NAME1NACHNAMEFIRMAZEILE1));\n\t\t\t\tcrit.addOrder(Order\n\t\t\t\t\t\t.asc(ProjektFac.FLR_PROJEKT_T_ERLEDIGUNGSDATUM));\n\t\t\t\tcrit.addOrder(Order.asc(ProjektFac.FLR_PROJEKT_C_NR));\n\t\t\t}\n\t\t\tcrit.addOrder(Order.asc(ProjektFac.FLR_PROJEKT_KATEGORIE_C_NR));\n\t\t\tList<?> list = crit.list();\n\t\t\tArrayList<Object[]> alDaten = new ArrayList<Object[]>();\n\t\t\tIterator<?> it = list.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tFLRProjekt projekt = (FLRProjekt) it.next();\n\t\t\t\tObject[] oZeile = new Object[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_ANZAHL_SPALTEN];\n\t\t\t\tif (interneErledigungBeruecksichtigen == true\n\t\t\t\t\t\t&& projekt.getT_internerledigt() != null\n\t\t\t\t\t\t&& projekt.getT_erledigungsdatum() != null) {\n\t\t\t\t\t// Wenn intern-Erledigt und normal erledigt, dann gilt jenes\n\t\t\t\t\t// Datum, das frueher war\n\t\t\t\t\tif (projekt.getT_internerledigt().getTime() <= projekt\n\t\t\t\t\t\t\t.getT_erledigungsdatum().getTime()) {\n\t\t\t\t\t\tif (reportJournalKriterienDtoI.dVon != null\n\t\t\t\t\t\t\t\t&& projekt.getT_internerledigt().getTime() < reportJournalKriterienDtoI.dVon\n\t\t\t\t\t\t\t\t\t\t.getTime()) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (reportJournalKriterienDtoI.dBis != null\n\t\t\t\t\t\t\t\t&& projekt.getT_internerledigt().getTime() > reportJournalKriterienDtoI.dBis\n\t\t\t\t\t\t\t\t\t\t.getTime()) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_PROJEKTTITEL] = projekt\n\t\t\t\t\t\t.getC_titel();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_PROJEKTKATEGORIE] = projekt\n\t\t\t\t\t\t.getKategorie_c_nr();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_PROJEKTCNR] = projekt\n\t\t\t\t\t\t.getC_nr();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_TYP] = projekt\n\t\t\t\t\t\t.getTyp_c_nr();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_KUNDECNAME1] = projekt\n\t\t\t\t\t\t.getFlrpartner().getC_name1nachnamefirmazeile1();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_WAHRSCHEINLICHKEIT] = projekt\n\t\t\t\t\t\t.getI_wahrscheinlichkeit();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_GEPLANTERUMSATZ] = projekt\n\t\t\t\t\t\t.getN_umsatzgeplant();\n\t\t\t\tif (projekt.getPersonal_i_id_internerledigt() != null) {\n\t\t\t\t\tPersonalDto personalDto = getPersonalFac()\n\t\t\t\t\t\t\t.personalFindByPrimaryKey(\n\t\t\t\t\t\t\t\t\tprojekt.getPersonal_i_id_internerledigt(),\n\t\t\t\t\t\t\t\t\ttheClientDto);\n\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_INTERNERLEDIGT_PERSON] = personalDto\n\t\t\t\t\t\t\t.getPartnerDto().formatAnrede();\n\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_INTERNERLEDIGT_ZEIT] = projekt\n\t\t\t\t\t\t\t.getT_internerledigt();\n\t\t\t\t}\n\t\t\t\tlocDruck = Helper.string2Locale(projekt.getFlrpartner()\n\t\t\t\t\t\t.getLocale_c_nr_kommunikation());\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_ZIELTERMIN] = Helper\n\t\t\t\t\t\t.formatDatum(projekt.getT_zielwunschdatum(), locDruck);\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_BELEGDATUM] = Helper\n\t\t\t\t\t\t.formatDatum(projekt.getT_anlegen(), locDruck);\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_ERLEDIGUNGSDATUM] = Helper\n\t\t\t\t\t\t.formatDatumZeit(projekt.getT_erledigungsdatum(),\n\t\t\t\t\t\t\t\tlocDruck);\n\t\t\t\tif (projekt.getB_verrechenbar().equals(\n\t\t\t\t\t\tnew Integer(1).shortValue())) {\n\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_B_VERRECHENBAR] = \"verrechenbar\";\n\t\t\t\t} else {\n\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_B_VERRECHENBAR] = null;\n\t\t\t\t}\n\t\t\t\tif (projekt.getB_freigegeben().equals(\n\t\t\t\t\t\tnew Integer(1).shortValue())) {\n\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_FREIGEGEBEN] = \"freigegeben\";\n\t\t\t\t} else {\n\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_FREIGEGEBEN] = null;\n\t\t\t\t}\n\t\t\t\tCalendar calendar = new GregorianCalendar();\n\t\t\t\tcalendar.setTime(new Date(projekt.getT_zielwunschdatum()\n\t\t\t\t\t\t.getTime()));\n\t\t\t\tint KW = calendar.get(Calendar.WEEK_OF_YEAR); // Kalendarwochen\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_ZIELWOCHE] = \"\"\n\t\t\t\t\t\t+ KW;\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_STATUS] = projekt\n\t\t\t\t\t\t.getStatus_c_nr();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_PRIO] = projekt\n\t\t\t\t\t\t.getI_prio();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_TEXT] = Helper\n\t\t\t\t\t\t.formatStyledTextForJasper(projekt.getX_freetext());\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_ERZEUGER] = projekt\n\t\t\t\t\t\t.getFlrpersonalErzeuger().getFlrpartner()\n\t\t\t\t\t\t.getC_name1nachnamefirmazeile1();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_ZUGEWIESENER] = projekt\n\t\t\t\t\t\t.getFlrpersonalZugewiesener().getFlrpartner()\n\t\t\t\t\t\t.getC_name1nachnamefirmazeile1();\n\t\t\t\tif (projekt.getPersonal_i_id_erlediger() != null) {\n\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_ERLEDIGER] = projekt\n\t\t\t\t\t\t\t.getFlrpersonalErlediger().getFlrpartner()\n\t\t\t\t\t\t\t.getC_name1nachnamefirmazeile1();\n\t\t\t\t}\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_ZEIT] = projekt\n\t\t\t\t\t\t.getT_zeit();\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_DAUER] = projekt\n\t\t\t\t\t\t.getD_dauer();\n\t\t\t\t// Gesamte Dauer eines Projektes\n\t\t\t\tDouble ddArbeitszeitist = getZeiterfassungFac()\n\t\t\t\t\t\t.getSummeZeitenEinesBeleges(LocaleFac.BELEGART_PROJEKT,\n\t\t\t\t\t\t\t\tprojekt.getI_id(), null, null, null, null,\n\t\t\t\t\t\t\t\ttheClientDto);\n\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_GESAMTDAUER] = ddArbeitszeitist;\n\t\t\t\tCriteria crit1 = session.createCriteria(FLRHistory.class);\n\t\t\t\tcrit1.createCriteria(ProjektFac.FLR_HISTORY_FLRPROJEKT).add(\n\t\t\t\t\t\tRestrictions.eq(ProjektFac.FLR_PROJEKT_I_ID,\n\t\t\t\t\t\t\t\tprojekt.getI_id()));\n\t\t\t\tList<?> resultList = crit1.list();\n\t\t\t\tIterator<?> itHistory = resultList.iterator();\n\t\t\t\talDaten.add(oZeile);\n\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\toZeile = new Object[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_ANZAHL_SPALTEN];\n\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_PROJEKTCNR] = projekt\n\t\t\t\t\t\t\t.getC_nr();\n\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_ZUGEWIESENER] = projekt\n\t\t\t\t\t\t\t.getFlrpersonalZugewiesener().getFlrpartner()\n\t\t\t\t\t\t\t.getC_name1nachnamefirmazeile1();\n\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_HISTORY_MITARBEITER] = history\n\t\t\t\t\t\t\t.getFlrpersonal().getFlrpartner()\n\t\t\t\t\t\t\t.getC_name1nachnamefirmazeile1();\n\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_HISTORY_BELEGDATUM] = Helper\n\t\t\t\t\t\t\t.formatDatum(history.getT_belegdatum(), locDruck);\n\t\t\t\t\toZeile[ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_HISTORY_TEXT] = history\n\t\t\t\t\t\t\t.getX_text();\n\t\t\t\t\talDaten.add(oZeile);\n\t\t\t\t}\n\t\t\t}\n\t\t\tObject[][] returnArray = new Object[alDaten.size()][ProjektReportFac.REPORT_PROJEKT_JOURNAL_ERLEDIGT_ANZAHL_SPALTEN];\n\t\t\tdata = (Object[][]) alDaten.toArray(returnArray);\n\t\t} catch (RemoteException e) {\n\t\t\tthrow new EJBExceptionLP(EJBExceptionLP.FEHLER_IN_ZEITDATEN,\n\t\t\t\t\tnew Exception(e));\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tsession.close();\n\t\t\t} catch (HibernateException he) {\n\t\t\t\tthrow new EJBExceptionLP(EJBExceptionLP.FEHLER_HIBERNATE, he);\n\t\t\t}\n\t\t}\n\t\t// die Parameter dem Report uebergeben\n\t\tHashMap<String, Object> parameter = new HashMap<String, Object>();\n\t\tparameter.put(\n\t\t\t\tLPReport.P_FILTER,\n\t\t\t\tbuildFilterProjektErledigt(reportJournalKriterienDtoI,\n\t\t\t\t\t\ttheClientDto));\n\t\tparameter.put(\"P_BEREICH\", getProjektServiceFac()\n\t\t\t\t.bereichFindByPrimaryKey(bereichIId).getCBez());\n\t\tparameter.put(\"P_INTERNEERLEDIGUNGBERUECKSICHTIGEN\",\n\t\t\t\tinterneErledigungBeruecksichtigen);\n\t\tparameter.put(\n\t\t\t\t\"P_TITLE\",\n\t\t\t\tgetTextRespectUISpr(\"proj.print.erledigt\",\n\t\t\t\t\t\ttheClientDto.getMandant(), theClientDto.getLocUi()));\n\t\tinitJRDS(parameter, ProjektReportFac.REPORT_MODUL, cAktuellerReport,\n\t\t\t\ttheClientDto.getMandant(), theClientDto.getLocUi(),\n\t\t\t\ttheClientDto);\n\t\toPrint = getReportPrint();\n\t\treturn oPrint;\n\t}\n\t@TransactionAttribute(TransactionAttributeType.NEVER)\n\tpublic JasperPrintLP printProjektOffene(\n\t\t\tReportJournalKriterienDto reportJournalKriterienDtoI,\n\t\t\tDate dStichtag, Integer bereichIId, TheClientDto theClientDto)\n\t\t\tthrows EJBExceptionLP, RemoteException {\n\t\tJasperPrintLP oPrint = null;\n\t\tint iAnzahlZeilen = 0;\n\t\tcAktuellerReport = ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE;\n\t\tLocale locDruck;\n\t\tSessionFactory factory = FLRSessionFactory.getFactory();\n\t\tSession session = null;\n\t\t// vom Stichtag die Uhrzeit abschneiden\n\t\tdStichtag = Helper.cutDate(dStichtag);\n\t\ttry {\n\t\t\tsession = factory.openSession();\n\t\t\t// Hiberante Criteria fuer alle Tabellen ausgehend von meiner\n\t\t\t// Haupttabelle anlegen,\n\t\t\t// nach denen ich filtern und sortieren kann\n\t\t\tCriteria critProjekt = session.createCriteria(FLRProjekt.class);\n\t\t\t// Einschraenkung auf den aktuellen Mandanten\n\t\t\tcritProjekt.add(Restrictions.eq(\n\t\t\t\t\tProjektFac.FLR_PROJEKT_MANDANT_C_NR,\n\t\t\t\t\ttheClientDto.getMandant()));\n\t\t\tcritProjekt.add(Restrictions.not(Restrictions.eq(\n\t\t\t\t\tProjektFac.FLR_PROJEKT_STATUS_C_NR,\n\t\t\t\t\tProjektServiceFac.PROJEKT_STATUS_STORNIERT)));\n\t\t\tcritProjekt.add(Restrictions.eq(\n\t\t\t\t\tProjektFac.FLR_PROJEKT_BEREICH_I_ID, bereichIId));\n\t\t\t// PJ18471\n\t\t\tcritProjekt.createAlias(\"flrprojektstatus\", \"s\");\n\t\t\tcritProjekt.add(Restrictions.eq(\"s.b_erledigt\",\n\t\t\t\t\tHelper.boolean2Short(false)));\n\t\t\t// Das Belegdatum muss vor dem Stichtag liegen\n\t\t\tcritProjekt.add(Restrictions.le(ProjektFac.FLR_PROJEKT_T_ANLEGEN,\n\t\t\t\t\tdStichtag));\n\t\t\t// Einschraenkung nach einer bestimmten Perosn\n\t\t\tif (reportJournalKriterienDtoI.personalIId != null) {\n\t\t\t\tcritProjekt.add(Restrictions.eq(\n\t\t\t\t\t\tProjektFac.FLR_PROJEKT_PERSONAL_I_ID_ZUGEWIESENER,\n\t\t\t\t\t\treportJournalKriterienDtoI.personalIId));\n\t\t\t}\n\t\t\t// Sortierung nach Personal ist immer die erste Sortierung\n\t\t\tif (reportJournalKriterienDtoI.bSortiereNachPersonal) {\n\t\t\t\tcritProjekt\n\t\t\t\t\t\t.createCriteria(\n\t\t\t\t\t\t\t\tProjektFac.FLR_PROJEKT_FLRPERSONALZUGEWIESENER)\n\t\t\t\t\t\t.createCriteria(KundeFac.FLR_PARTNER)\n\t\t\t\t\t\t.addOrder(\n\t\t\t\t\t\t\t\tOrder.asc(PartnerFac.FLR_PARTNER_NAME1NACHNAMEFIRMAZEILE1));\n\t\t\t}\n\t\t\t// Sortierung nach Partner,\n\t\t\tif (reportJournalKriterienDtoI.iSortierung == ReportJournalKriterienDto.KRIT_SORT_NACH_PARTNER) {\n\t\t\t\tcritProjekt\n\t\t\t\t\t\t.createCriteria(ProjektFac.FLR_PROJEKT_FLRPARTNER)\n\t\t\t\t\t\t.addOrder(\n\t\t\t\t\t\t\t\tOrder.asc(PartnerFac.FLR_PARTNER_NAME1NACHNAMEFIRMAZEILE1));\n\t\t\t\tcritProjekt\n\t\t\t\t\t\t.addOrder(Order.asc(ProjektFac.FLR_PROJEKT_TYP_C_NR));\n\t\t\t\tcritProjekt.addOrder(Order.asc(ProjektFac.FLR_PROJEKT_I_PRIO));\n\t\t\t\tcritProjekt.addOrder(Order\n\t\t\t\t\t\t.asc(ProjektFac.FLR_PROJEKT_KATEGORIE_C_NR));\n\t\t\t}\n\t\t\t// es wird in jedem Fall nach der Belegnummer sortiert\n\t\t\tcritProjekt.addOrder(Order.asc(ProjektFac.FLR_PROJEKT_C_NR));\n\t\t\tList<?> list = critProjekt.list();\n\t\t\tIterator<?> it = list.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tFLRProjekt projekt = (FLRProjekt) it.next();\n\t\t\t\tsession = factory.openSession();\n\t\t\t\tCriteria critHistory = session.createCriteria(FLRHistory.class);\n\t\t\t\tcritHistory.createCriteria(ProjektFac.FLR_HISTORY_FLRPROJEKT)\n\t\t\t\t\t\t.add(Restrictions.eq(ProjektFac.FLR_PROJEKT_I_ID,\n\t\t\t\t\t\t\t\tprojekt.getI_id()));\n\t\t\t\tList<?> historyList = critHistory.list();\n\t\t\t\tif (historyList.size() != 0) {\n\t\t\t\t\tiAnzahlZeilen = iAnzahlZeilen + historyList.size();\n\t\t\t\t}\n\t\t\t\tiAnzahlZeilen++;\n\t\t\t}\n\t\t\tdata = new Object[iAnzahlZeilen][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_ANZAHL_SPALTEN];\n\t\t\tint i = 0;\n\t\t\tit = list.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tFLRProjekt projekt = (FLRProjekt) it.next();\n\t\t\t\tif (projekt.getI_id() == 7689) {\n\t\t\t\t\tSystem.out.println(\"x\");\n\t\t\t\t}\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_PROJEKTTITEL] = projekt\n\t\t\t\t\t\t.getC_titel();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_PROJEKTKATEGORIE] = projekt\n\t\t\t\t\t\t.getKategorie_c_nr();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_PROJEKTCNR] = projekt\n\t\t\t\t\t\t.getC_nr();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_STATUS] = projekt\n\t\t\t\t\t\t.getStatus_c_nr();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_TYP] = projekt\n\t\t\t\t\t\t.getTyp_c_nr();\n\t\t\t\tif (projekt.getPersonal_i_id_internerledigt() != null) {\n\t\t\t\t\tPersonalDto personalDto = getPersonalFac()\n\t\t\t\t\t\t\t.personalFindByPrimaryKey(\n\t\t\t\t\t\t\t\t\tprojekt.getPersonal_i_id_internerledigt(),\n\t\t\t\t\t\t\t\t\ttheClientDto);\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_INTERNERLEDIGT_PERSON] = personalDto\n\t\t\t\t\t\t\t.getPartnerDto().formatAnrede();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_INTERNERLEDIGT_ZEIT] = projekt\n\t\t\t\t\t\t\t.getT_internerledigt();\n\t\t\t\t}\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_WAHRSCHEINLICHKEIT] = projekt\n\t\t\t\t\t\t.getI_wahrscheinlichkeit();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_GEPLANTERUMSATZ] = projekt\n\t\t\t\t\t\t.getN_umsatzgeplant();\n\t\t\t\t// Gesamte Dauer eines Projektes\n\t\t\t\tDouble ddArbeitszeitist = getZeiterfassungFac()\n\t\t\t\t\t\t.getSummeZeitenEinesBeleges(LocaleFac.BELEGART_PROJEKT,\n\t\t\t\t\t\t\t\tprojekt.getI_id(), null, null, null, null,\n\t\t\t\t\t\t\t\ttheClientDto);\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_GESAMTDAUER] = ddArbeitszeitist;\n\t\t\t\tif (projekt.getFlrpartner().getFlrlandplzort() != null) {\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_LKZ] = projekt\n\t\t\t\t\t\t\t.getFlrpartner().getFlrlandplzort().getFlrland()\n\t\t\t\t\t\t\t.getC_lkz();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_PLZ] = projekt\n\t\t\t\t\t\t\t.getFlrpartner().getFlrlandplzort().getC_plz();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_ORT] = projekt\n\t\t\t\t\t\t\t.getFlrpartner().getFlrlandplzort().getFlrort()\n\t\t\t\t\t\t\t.getC_name();\n\t\t\t\t}\n\t\t\t\tif (projekt.getFlrpartner().getFlrpartnerklasse() != null) {\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_PARTNERKLASSE] = projekt\n\t\t\t\t\t\t\t.getFlrpartner().getFlrpartnerklasse().getC_nr();\n\t\t\t\t}\n\t\t\t\tif (projekt.getFlrpartner().getFlrbranche() != null) {\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_BRANCHE] = projekt\n\t\t\t\t\t\t\t.getFlrpartner().getFlrbranche().getC_nr();\n\t\t\t\t}\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_KUNDECNAME1] = projekt\n\t\t\t\t\t\t.getFlrpartner().getC_name1nachnamefirmazeile1();\n\t\t\t\tlocDruck = Helper.string2Locale(projekt.getFlrpartner()\n\t\t\t\t\t\t.getLocale_c_nr_kommunikation());\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_ZIELTERMIN] = Helper\n\t\t\t\t\t\t.formatDatum(projekt.getT_zielwunschdatum(), locDruck);\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_BELEGDATUM] = Helper\n\t\t\t\t\t\t.formatDatum(projekt.getT_anlegen(), locDruck);\n\t\t\t\tCalendar calendar = new GregorianCalendar();\n\t\t\t\tcalendar.setTime(new Date(projekt.getT_zielwunschdatum()\n\t\t\t\t\t\t.getTime()));\n\t\t\t\tint KW = calendar.get(Calendar.WEEK_OF_YEAR); // Kalendarwochen\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_ZIELWOCHE] = \"\"\n\t\t\t\t\t\t+ KW;\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_PRIO] = projekt\n\t\t\t\t\t\t.getI_prio();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_TEXT] = projekt\n\t\t\t\t\t\t.getX_freetext();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_ERZEUGER] = projekt\n\t\t\t\t\t\t.getFlrpersonalErzeuger().getFlrpartner()\n\t\t\t\t\t\t.getC_name1nachnamefirmazeile1();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_ZUGEWIESENER] = projekt\n\t\t\t\t\t\t.getFlrpersonalZugewiesener().getFlrpartner()\n\t\t\t\t\t\t.getC_name1nachnamefirmazeile1();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_ZEIT] = projekt\n\t\t\t\t\t\t.getT_zeit();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_DAUER] = projekt\n\t\t\t\t\t\t.getD_dauer();\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_B_VERRECHENBAR] = Helper\n\t\t\t\t\t\t.short2Boolean(projekt.getB_verrechenbar());\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_B_FREIGEGEBEN] = Helper\n\t\t\t\t\t\t.short2Boolean(projekt.getB_freigegeben());\n\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_DATEINAME] = projekt\n\t\t\t\t\t\t.getC_dateiname();\n\t\t\t\t// try {\n\t\t\t\tif (projekt.getFlransprechpartner() != null\n\t\t\t\t\t\t&& (projekt.getFlransprechpartner().getI_id() != null)) {\n\t\t\t\t\tif (projekt.getFlransprechpartner()\n\t\t\t\t\t\t\t.getFlrpartneransprechpartner() != null\n\t\t\t\t\t\t\t&& projekt.getFlransprechpartner()\n\t\t\t\t\t\t\t\t\t.getFlrpartneransprechpartner().getI_id() != null) {\n\t\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_ANSPRECHPARTNERCNAME1] = projekt\n\t\t\t\t\t\t\t\t.getFlransprechpartner()\n\t\t\t\t\t\t\t\t.getFlrpartneransprechpartner()\n\t\t\t\t\t\t\t\t.getC_name1nachnamefirmazeile1();\n\t\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_ANSPRECHPARTNER] = (projekt\n\t\t\t\t\t\t\t\t.getFlransprechpartner()\n\t\t\t\t\t\t\t\t.getFlrpartneransprechpartner()\n\t\t\t\t\t\t\t\t.getC_name1nachnamefirmazeile1()\n\t\t\t\t\t\t\t\t+ \" \"\n\t\t\t\t\t\t\t\t+ (projekt.getFlransprechpartner()\n\t\t\t\t\t\t\t\t\t\t.getFlrpartneransprechpartner()\n\t\t\t\t\t\t\t\t\t\t.getC_name2vornamefirmazeile2() == null ? \"\"\n\t\t\t\t\t\t\t\t\t\t: projekt.getFlransprechpartner()\n\t\t\t\t\t\t\t\t\t\t\t\t.getFlrpartneransprechpartner()\n\t\t\t\t\t\t\t\t\t\t\t\t.getC_name2vornamefirmazeile2())\n\t\t\t\t\t\t\t\t+ \" \" + (projekt.getFlransprechpartner()\n\t\t\t\t\t\t\t\t.getFlrpartneransprechpartner()\n\t\t\t\t\t\t\t\t.getC_name3vorname2abteilung() == null ? \"\"\n\t\t\t\t\t\t\t\t: projekt.getFlransprechpartner()\n\t\t\t\t\t\t\t\t\t\t.getFlrpartneransprechpartner()\n\t\t\t\t\t\t\t\t\t\t.getC_name3vorname2abteilung())).trim();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// } catch (Exception e) {\n\t\t\t\t// e.printStackTrace();\n\t\t\t\t// }\n\t\t\t\t//\n\t\t\t\tCriteria crit1 = session.createCriteria(FLRHistory.class);\n\t\t\t\tcrit1.createCriteria(ProjektFac.FLR_HISTORY_FLRPROJEKT).add(\n\t\t\t\t\t\tRestrictions.eq(ProjektFac.FLR_PROJEKT_I_ID,\n\t\t\t\t\t\t\t\tprojekt.getI_id()));\n\t\t\t\tList<?> resultList = crit1.list();\n\t\t\t\tIterator<?> itHistory = resultList.iterator();\n\t\t\t\ti++;\n", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "length": 4200, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "9bc86f68e09ca098de1e1d2d7675bcc53668be74a87866a4"}
{"input": "", "context": "using System;\nusing System.Collections.Generic;\nusing Server.ContextMenus;\nusing Server.Engines.Craft;\nusing Server.Engines.XmlSpawner2;\nusing Server.Factions;\nusing Server.Network;\nusing Server.Mobiles;\nusing AMA = Server.Items.ArmorMeditationAllowance;\nusing AMT = Server.Items.ArmorMaterialType;\nusing ABT = Server.Items.ArmorBodyType;\nusing System.Linq;\nnamespace Server.Items\n{\n    public abstract class BaseArmor : Item, IScissorable, IFactionItem, ICraftable, IWearableDurability, ISetItem, IVvVItem, IOwnerRestricted, ITalismanProtection\n    {\n        #region Factions\n        private FactionItem m_FactionState;\n        public FactionItem FactionItemState\n        {\n            get\n            {\n                return this.m_FactionState;\n            }\n            set\n            {\n                this.m_FactionState = value;\n                if (this.m_FactionState == null)\n                    this.Hue = CraftResources.GetHue(this.Resource);\n                this.LootType = (this.m_FactionState == null ? LootType.Regular : LootType.Blessed);\n            }\n        }\n        #endregion\n        private bool _VvVItem;\n        private Mobile _Owner;\n        private string _OwnerName;\n        [CommandProperty(AccessLevel.GameMaster)]\n        public bool IsVvVItem\n        {\n            get { return _VvVItem; }\n            set { _VvVItem = value; InvalidateProperties(); }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public Mobile Owner\n        {\n            get { return _Owner; }\n            set { _Owner = value; if (_Owner != null) _OwnerName = _Owner.Name; InvalidateProperties(); }\n        }\n        public virtual string OwnerName\n        {\n            get { return _OwnerName; }\n            set { _OwnerName = value; InvalidateProperties(); }\n        }\n        /* Armor internals work differently now (Jun 19 2003)\n        * \n        * The attributes defined below default to -1.\n        * If the value is -1, the corresponding virtual 'Aos/Old' property is used.\n        * If not, the attribute value itself is used. Here's the list:\n        *  - ArmorBase\n        *  - StrBonus\n        *  - DexBonus\n        *  - IntBonus\n        *  - StrReq\n        *  - DexReq\n        *  - IntReq\n        *  - MeditationAllowance\n        */\n        // Instance values. These values must are unique to each armor piece.\n        private int m_MaxHitPoints;\n        private int m_HitPoints;\n        private Mobile m_Crafter;\n        private ArmorQuality m_Quality;\n        private ArmorDurabilityLevel m_Durability;\n        private ArmorProtectionLevel m_Protection;\n        private CraftResource m_Resource;\n        private bool m_Identified, m_PlayerConstructed;\n        private int m_PhysicalBonus, m_FireBonus, m_ColdBonus, m_PoisonBonus, m_EnergyBonus;\n        #region Runic Reforging\n        private bool m_BlockRepair;\n        private ItemPower m_ItemPower;\n        private ReforgedPrefix m_ReforgedPrefix;\n        private ReforgedSuffix m_ReforgedSuffix;\n        #endregion\n        #region Stygian Abyss\n        private int m_GorgonLenseCharges;\n        private LenseType m_GorgonLenseType;\n        private bool m_Altered;\n        private int m_TimesImbued;\n        private bool m_IsImbued;\n        private int m_PhysImbuing;\n        private int m_FireImbuing;\n        private int m_ColdImbuing;\n        private int m_PoisonImbuing;\n        private int m_EnergyImbuing;\n        #endregion\n        private AosAttributes m_AosAttributes;\n        private AosArmorAttributes m_AosArmorAttributes;\n        private AosSkillBonuses m_AosSkillBonuses;\n        private SAAbsorptionAttributes m_SAAbsorptionAttributes;\n        private NegativeAttributes m_NegativeAttributes;\n\t\tprivate TalismanAttribute m_TalismanProtection;\n        // Overridable values. These values are provided to override the defaults which get defined in the individual armor scripts.\n        private int m_ArmorBase = -1;\n        private int m_StrBonus = -1, m_DexBonus = -1, m_IntBonus = -1;\n        private int m_StrReq = -1, m_DexReq = -1, m_IntReq = -1;\n        private AMA m_Meditate = (AMA)(-1);\n        public virtual bool AllowMaleWearer\n        {\n            get\n            {\n                return true;\n            }\n        }\n        public virtual bool AllowFemaleWearer\n        {\n            get\n            {\n                return true;\n            }\n        }\n        public abstract AMT MaterialType { get; }\n        public virtual int RevertArmorBase\n        {\n            get\n            {\n                return this.ArmorBase;\n            }\n        }\n        public virtual int ArmorBase\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual AMA DefMedAllowance\n        {\n            get\n            {\n                return AMA.None;\n            }\n        }\n        public virtual AMA AosMedAllowance\n        {\n            get\n            {\n                return this.DefMedAllowance;\n            }\n        }\n        public virtual AMA OldMedAllowance\n        {\n            get\n            {\n                return this.DefMedAllowance;\n            }\n        }\n        public virtual int AosStrBonus\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int AosDexBonus\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int AosIntBonus\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int AosStrReq\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int AosDexReq\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int AosIntReq\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int OldStrBonus\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int OldDexBonus\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int OldIntBonus\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int OldStrReq\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int OldDexReq\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int OldIntReq\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual bool CanFortify\n        {\n            get\n            {\n                return !IsImbued && NegativeAttributes.Antique < 3;\n            }\n        }\n        public virtual bool CanRepair\n        {\n            get\n            {\n                return m_NegativeAttributes.NoRepair == 0;\n            }\n        }\n\t\tpublic virtual bool CanAlter { get { return true; } }\n        public virtual bool UseIntOrDexProperty\n        {\n            get\n            {\n                return false;\n            }\n        }\n        public virtual int IntOrDexPropertyValue\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public override void OnAfterDuped(Item newItem)\n        {\n            BaseArmor armor = newItem as BaseArmor;\n            if (armor == null)\n                return;\n            armor.m_AosAttributes = new AosAttributes(newItem, this.m_AosAttributes);\n            armor.m_AosArmorAttributes = new AosArmorAttributes(newItem, this.m_AosArmorAttributes);\n            armor.m_AosSkillBonuses = new AosSkillBonuses(newItem, this.m_AosSkillBonuses);\n            armor.m_SAAbsorptionAttributes = new SAAbsorptionAttributes(newItem, this.m_SAAbsorptionAttributes);\n            armor.m_SetAttributes = new AosAttributes(newItem, this.m_SetAttributes);\n            armor.m_SetSkillBonuses = new AosSkillBonuses(newItem, this.m_SetSkillBonuses);\n            armor.m_NegativeAttributes = new NegativeAttributes(newItem, m_NegativeAttributes);\n\t\t\tarmor.m_TalismanProtection = new TalismanAttribute(m_TalismanProtection);\n        }\n        #region Personal Bless Deed\n        private Mobile m_BlessedBy;\n        [CommandProperty(AccessLevel.GameMaster)]\n        public Mobile BlessedBy\n        {\n            get\n            {\n                return this.m_BlessedBy;\n            }\n            set\n            {\n                this.m_BlessedBy = value;\n                this.InvalidateProperties();\n            }\n        }\n        public override void GetContextMenuEntries(Mobile from, List<ContextMenuEntry> list)\n        {\n            base.GetContextMenuEntries(from, list);\n            if (this.BlessedFor == from && this.BlessedBy == from && this.RootParent == from)\n            {\n                list.Add(new UnBlessEntry(from, this));\n            }\n        }\n        private class UnBlessEntry : ContextMenuEntry\n        {\n            private readonly Mobile m_From;\n            private readonly BaseArmor m_Item;\n            public UnBlessEntry(Mobile from, BaseArmor item)\n                : base(6208, -1)\n            {\n                this.m_From = from;\n                this.m_Item = item;\n            }\n            public override void OnClick()\n            {\n                this.m_Item.BlessedFor = null;\n                this.m_Item.BlessedBy = null;\n                Container pack = this.m_From.Backpack;\n                if (pack != null)\n                {\n                    pack.DropItem(new PersonalBlessDeed(this.m_From));\n                    this.m_From.SendLocalizedMessage(1062200); // A personal bless deed has been placed in your backpack.\n                }\n            }\n        }\n        #endregion\n        [CommandProperty(AccessLevel.GameMaster)]\n        public AMA MeditationAllowance\n        {\n            get\n            {\n                return (this.m_Meditate == (AMA)(-1) ? Core.AOS ? this.AosMedAllowance : this.OldMedAllowance : this.m_Meditate);\n            }\n            set\n            {\n                this.m_Meditate = value;\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int BaseArmorRating\n        {\n            get\n            {\n                if (this.m_ArmorBase == -1)\n                    return this.ArmorBase;\n                else\n                    return this.m_ArmorBase;\n            }\n            set\n            { \n                this.m_ArmorBase = value;\n                this.Invalidate(); \n            }\n        }\n        public double BaseArmorRatingScaled\n        {\n            get\n            {\n                return (this.BaseArmorRating * this.ArmorScalar);\n            }\n        }\n        public virtual double ArmorRating\n        {\n            get\n            {\n                int ar = this.BaseArmorRating;\n                if (this.m_Protection != ArmorProtectionLevel.Regular)\n                    ar += 10 + (5 * (int)this.m_Protection);\n\t\t\t\t//daat99 OWLTR start - armor rating\n\t\t\t\tar += CraftResources.GetIndex(m_Resource) * 2;\n\t\t\t\t//daat99 OWLTR end - armor rating               \n                ar += -8 + (8 * (int)this.m_Quality);\n                return this.ScaleArmorByDurability(ar);\n            }\n        }\n        public double ArmorRatingScaled\n        {\n            get\n            {\n                return (this.ArmorRating * this.ArmorScalar);\n            }\n        }\n        #region Publish 81 Armor Refinement\n        private int m_RefinedPhysical;\n        private int m_RefinedFire;\n        private int m_RefinedCold;\n        private int m_RefinedPoison;\n        private int m_RefinedEnergy;\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int RefinedPhysical { get { return m_RefinedPhysical; } set { m_RefinedPhysical = value; InvalidateProperties(); } }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int RefinedFire { get { return m_RefinedFire; } set { m_RefinedFire = value; InvalidateProperties(); } }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int RefinedCold { get { return m_RefinedCold; } set { m_RefinedCold = value; InvalidateProperties(); } }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int RefinedPoison { get { return m_RefinedPoison; } set { m_RefinedPoison = value; InvalidateProperties(); } }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int RefinedEnergy { get { return m_RefinedEnergy; } set { m_RefinedEnergy = value; InvalidateProperties(); } }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int RefinedDefenseChance { get { return -(m_RefinedPhysical + m_RefinedFire + m_RefinedCold + m_RefinedPoison + m_RefinedEnergy); } }\n        public static int GetRefinedResist(Mobile from, ResistanceType attr)\n        {\n            int value = 0;\n            foreach (Item item in from.Items)\n            {\n                if (item is BaseArmor)\n                {\n                    BaseArmor armor = item as BaseArmor;\n                    switch (attr)\n                    {\n                        case ResistanceType.Physical: value += armor.m_RefinedPhysical; break;\n                        case ResistanceType.Fire: value += armor.m_RefinedFire; break;\n                        case ResistanceType.Cold: value += armor.m_RefinedCold; break;\n                        case ResistanceType.Poison: value += armor.m_RefinedPoison; break;\n                        case ResistanceType.Energy: value += armor.m_RefinedEnergy; break;\n                    }\n                }\n            }\n            return value;\n        }\n        public static int GetRefinedDefenseChance(Mobile from)\n        {\n            int value = 0;\n            foreach (Item item in from.Items)\n            {\n                if (item is BaseArmor)\n                    value += ((BaseArmor)item).RefinedDefenseChance;\n            }\n            return value;\n        }\n        \n        public override void AddResistanceProperties(ObjectPropertyList list)\n        {\n            if (PhysicalResistance != 0 || m_RefinedPhysical != 0)\n            {\n                if (m_RefinedPhysical != 0)\n                    list.Add(1153735, String.Format(\"{0}\\t{1}\\t{2}\", PhysicalResistance.ToString(), \"\", m_RefinedPhysical.ToString()));// physical resist ~1_val~% / ~2_symb~~3_val~% Max\n                else\n                    list.Add(1060448, PhysicalResistance.ToString()); // physical resist ~1_val~%\n            }\n            if (FireResistance != 0 || m_RefinedFire != 0)\n            {\n                if (m_RefinedFire != 0)\n                    list.Add(1153737, String.Format(\"{0}\\t{1}\\t{2}\", FireResistance.ToString(), \"\", m_RefinedFire.ToString()));// physical resist ~1_val~% / ~2_symb~~3_val~% Max\n                else\n                    list.Add(1060447, FireResistance.ToString()); // physical resist ~1_val~%\n            }\n            if (ColdResistance != 0 || m_RefinedCold != 0)\n            {\n                if (m_RefinedCold != 0)\n                    list.Add(1153739, String.Format(\"{0}\\t{1}\\t{2}\", ColdResistance.ToString(), \"\", m_RefinedCold.ToString()));// physical resist ~1_val~% / ~2_symb~~3_val~% Max\n                else\n                    list.Add(1060445, ColdResistance.ToString()); // physical resist ~1_val~%\n            }\n            if (PoisonResistance != 0 || m_RefinedPoison != 0)\n            {\n                if (m_RefinedPoison != 0)\n                    list.Add(1153736, String.Format(\"{0}\\t{1}\\t{2}\", PoisonResistance.ToString(), \"\", m_RefinedPoison.ToString()));// physical resist ~1_val~% / ~2_symb~~3_val~% Max\n                else\n                    list.Add(1060449, PoisonResistance.ToString()); // physical resist ~1_val~%\n            }\n            if (EnergyResistance != 0 || m_RefinedEnergy != 0)\n            {\n                if (m_RefinedEnergy != 0)\n                    list.Add(1153738, String.Format(\"{0}\\t{1}\\t{2}\", EnergyResistance.ToString(), \"\", m_RefinedEnergy.ToString()));// physical resist ~1_val~% / ~2_symb~~3_val~% Max\n                else\n                    list.Add(1060446, EnergyResistance.ToString()); // physical resist ~1_val~%\n            }\n            if (RefinedDefenseChance != 0)\n                list.Add(1153733, String.Format(\"{0}\\t{1}\", \"\", RefinedDefenseChance.ToString()));\n        }\n        public static int GetInherentLowerManaCost(Mobile from)\n        {\n            int toReduce = 0;\n            foreach (BaseArmor armor in from.Items.OfType<BaseArmor>())\n            {\n                if (armor.ArmorAttributes.MageArmor > 1 || armor is WoodlandArms || armor is WoodlandChest || armor is WoodlandGloves || armor is WoodlandLegs || armor is WoodlandGorget || armor is BaseShield)\n                    continue;\n                if (armor.MaterialType == ArmorMaterialType.Studded || armor.MaterialType == ArmorMaterialType.Bone)\n                    toReduce += 3;\n                else if (armor.MaterialType >= ArmorMaterialType.Ringmail)\n                    toReduce += 1;\n            }\n            return Math.Min(15, toReduce);\n        }\n        #endregion\n        #region Stygian Abyss\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int GorgonLenseCharges\n        {\n            get { return m_GorgonLenseCharges; }\n            set { m_GorgonLenseCharges = value; if (value == 0) m_GorgonLenseType = LenseType.None; InvalidateProperties(); }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public LenseType GorgonLenseType\n        {\n            get { return m_GorgonLenseType; }\n            set { m_GorgonLenseType = value; InvalidateProperties(); }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int TimesImbued\n        {\n            get { return m_TimesImbued; }\n            set { m_TimesImbued = value; InvalidateProperties(); }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public bool IsImbued\n        {\n            get\n            {\n                if (this.TimesImbued >= 1 && !m_IsImbued)\n                    m_IsImbued = true;\n                return m_IsImbued;\n            }\n            set\n            {\n                if (this.TimesImbued >= 1)\n                    m_IsImbued = true;\n                else\n                    m_IsImbued = value; InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int PhysImbuing\n        {\n            get { return m_PhysImbuing; }\n            set { m_PhysImbuing = value; }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int FireImbuing\n        {\n            get { return m_FireImbuing; }\n            set { m_FireImbuing = value; }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int ColdImbuing\n        {\n            get { return m_ColdImbuing; }\n            set { m_ColdImbuing = value; }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int PoisonImbuing\n        {\n            get { return m_PoisonImbuing; }\n            set { m_PoisonImbuing = value; }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int EnergyImbuing\n        {\n            get { return m_EnergyImbuing; }\n            set { m_EnergyImbuing = value; }\n        }\n        #endregion\n        #region Runic Reforging\n        [CommandProperty(AccessLevel.GameMaster)]\n        public ReforgedPrefix ReforgedPrefix \n        { \n            get { return m_ReforgedPrefix; } \n            set { m_ReforgedPrefix = value; InvalidateProperties(); }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public ReforgedSuffix ReforgedSuffix \n        { \n            get { return m_ReforgedSuffix; }\n            set { m_ReforgedSuffix = value; InvalidateProperties(); } \n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public bool BlockRepair\n        {\n            get { return m_BlockRepair; }\n            set { m_BlockRepair = value; InvalidateProperties(); }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public ItemPower ItemPower\n        { \n            get { return m_ItemPower; } \n            set { m_ItemPower = value; InvalidateProperties(); } \n        }\n        #endregion\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int StrBonus\n        {\n            get\n            {\n                return (this.m_StrBonus == -1 ? Core.AOS ? this.AosStrBonus : this.OldStrBonus : this.m_StrBonus);\n            }\n            set\n            {\n                this.m_StrBonus = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int DexBonus\n        {\n            get\n            {\n                return (this.m_DexBonus == -1 ? Core.AOS ? this.AosDexBonus : this.OldDexBonus : this.m_DexBonus);\n            }\n            set\n            {\n                this.m_DexBonus = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int IntBonus\n        {\n            get\n            {\n                return (this.m_IntBonus == -1 ? Core.AOS ? this.AosIntBonus : this.OldIntBonus : this.m_IntBonus);\n            }\n            set\n            {\n                this.m_IntBonus = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int StrRequirement\n        {\n            get\n            {\n                return Math.Min(110, (int)((double)(m_StrReq == -1 ? (Core.AOS ? AosStrReq : OldStrReq) : m_StrReq) * (m_NegativeAttributes.Massive > 0 ? 1.5 : 1)));\n            }\n            set\n            {\n                this.m_StrReq = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int DexRequirement\n        {\n            get\n            {\n                return (this.m_DexReq == -1 ? Core.AOS ? this.AosDexReq : this.OldDexReq : this.m_DexReq);\n            }\n            set\n            {\n                this.m_DexReq = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int IntRequirement\n        {\n            get\n            {\n                return (this.m_IntReq == -1 ? Core.AOS ? this.AosIntReq : this.OldIntReq : this.m_IntReq);\n            }\n            set\n            {\n                this.m_IntReq = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public bool Identified\n        {\n            get\n            {\n                return this.m_Identified;\n            }\n            set\n            {\n                this.m_Identified = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public bool PlayerConstructed\n        {\n            get\n            {\n                return this.m_PlayerConstructed;\n            }\n            set\n            {\n                this.m_PlayerConstructed = value;\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public CraftResource Resource\n        {\n            get\n            {\n                return this.m_Resource;\n            }\n            set\n            {\n                if (this.m_Resource != value)\n                {\n                    this.UnscaleDurability();\n                    this.m_Resource = value;\n                    if (CraftItem.RetainsColor(this.GetType()))\n                    {\n                        this.Hue = CraftResources.GetHue(this.m_Resource);\n                    }\n                    this.Invalidate();\n                    this.InvalidateProperties();\n                    if (this.Parent is Mobile)\n                        ((Mobile)this.Parent).UpdateResistances();\n                    this.ScaleDurability();\n                }\n            }\n        }\n        public virtual double ArmorScalar\n        {\n            get\n            {\n                int pos = (int)this.BodyPosition;\n                if (pos >= 0 && pos < m_ArmorScalars.Length)\n                    return m_ArmorScalars[pos];\n                return 1.0;\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int MaxHitPoints\n        {\n            get\n            {\n                return this.m_MaxHitPoints;\n            }\n            set\n            {\n                this.m_MaxHitPoints = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int HitPoints\n        {\n            get \n            {\n                return this.m_HitPoints;\n            }\n            set \n            {\n                if (value != this.m_HitPoints && this.MaxHitPoints > 0)\n                {\n                    this.m_HitPoints = value;\n                    if (this.m_HitPoints < 0)\n                        this.Delete();\n                    else if (this.m_HitPoints > this.MaxHitPoints)\n                        this.m_HitPoints = this.MaxHitPoints;\n                    this.InvalidateProperties();\n                }\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public Mobile Crafter\n        {\n            get\n            {\n                return this.m_Crafter;\n            }\n            set\n            {\n                this.m_Crafter = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public ArmorQuality Quality\n        {\n            get\n            {\n                return this.m_Quality;\n            }\n            set\n            {\n                this.UnscaleDurability();\n                this.m_Quality = value;\n                this.Invalidate();\n                this.InvalidateProperties();\n                this.ScaleDurability();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public ArmorDurabilityLevel Durability\n        {\n            get\n            {\n                return this.m_Durability;\n            }\n            set\n            {\n                this.UnscaleDurability();\n                this.m_Durability = value;\n                this.ScaleDurability();\n                this.InvalidateProperties();\n            }\n        }\n        public virtual int ArtifactRarity\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public override bool DisplayWeight\n        {\n            get\n            {\n                if (IsVvVItem)\n                    return true;\n                return base.DisplayWeight;\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public ArmorProtectionLevel ProtectionLevel\n        {\n            get\n            {\n                return this.m_Protection;\n            }\n            set\n            {\n                if (this.m_Protection != value)\n                {\n                    this.m_Protection = value;\n                    this.Invalidate();\n                    this.InvalidateProperties();\n                    if (this.Parent is Mobile)\n                        ((Mobile)this.Parent).UpdateResistances();\n                }\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public AosAttributes Attributes\n        {\n            get\n            {\n                return this.m_AosAttributes;\n            }\n            set\n            {\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public AosArmorAttributes ArmorAttributes\n        {\n            get\n            {\n                return this.m_AosArmorAttributes;\n            }\n            set\n            {\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public AosSkillBonuses SkillBonuses\n        {\n            get\n            {\n                return this.m_AosSkillBonuses;\n            }\n            set\n            {\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public SAAbsorptionAttributes AbsorptionAttributes\n        {\n            get\n            {\n                return this.m_SAAbsorptionAttributes;\n            }\n            set\n            {\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public NegativeAttributes NegativeAttributes\n        {\n            get \n            { \n                return m_NegativeAttributes;\n            }\n            set \n            { \n            }\n        }\n\t\t[CommandProperty(AccessLevel.GameMaster)]\n        public TalismanAttribute Protection\n        {\n            get { return m_TalismanProtection; }\n            set { m_TalismanProtection = value; InvalidateProperties(); }\n        }\n        public override double DefaultWeight\n        {\n            get\n            {\n                if (NegativeAttributes == null || NegativeAttributes.Unwieldly == 0)\n                    return base.DefaultWeight;\n                return base.DefaultWeight * 3;\n            }\n        }\n        public int ComputeStatReq(StatType type)\n        {\n            int v;\n            if (type == StatType.Str)\n                v = this.StrRequirement;\n            else if (type == StatType.Dex)\n                v = this.DexRequirement;\n            else\n                v = this.IntRequirement;\n            return AOS.Scale(v, 100 - this.GetLowerStatReq());\n        }\n        public int ComputeStatBonus(StatType type)\n        {\n            if (type == StatType.Str)\n                return this.StrBonus + this.Attributes.BonusStr;\n            else if (type == StatType.Dex)\n                return this.DexBonus + this.Attributes.BonusDex;\n            else\n                return this.IntBonus + this.Attributes.BonusInt;\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int PhysicalBonus\n        {\n            get\n            {\n                return this.m_PhysicalBonus;\n            }\n            set\n            {\n                this.m_PhysicalBonus = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int FireBonus\n        {\n            get\n            {\n                return this.m_FireBonus;\n            }\n            set\n            {\n                this.m_FireBonus = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int ColdBonus\n        {\n            get\n            {\n                return this.m_ColdBonus;\n            }\n            set\n            {\n                this.m_ColdBonus = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int PoisonBonus\n        {\n            get\n            {\n                return this.m_PoisonBonus;\n            }\n            set\n            {\n                this.m_PoisonBonus = value;\n                this.InvalidateProperties();\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int EnergyBonus\n        {\n            get\n            {\n                return this.m_EnergyBonus;\n            }\n            set\n            {\n                this.m_EnergyBonus = value;\n                this.InvalidateProperties();\n            }\n        }\n        public virtual int BasePhysicalResistance\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int BaseFireResistance\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int BaseColdResistance\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int BasePoisonResistance\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int BaseEnergyResistance\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        //daat99 OWLTR start\n        private int m_PhysicalResistance = -1, m_FireResistance = -1, m_ColdResistance = -1, m_PoisonResistance = -1, m_EnergyResistance = -1;\n        public override int PhysicalResistance { get { return ((m_PhysicalResistance != -1) ? m_PhysicalResistance : (BasePhysicalResistance + GetProtOffset() + GetResourceAttrs().ArmorPhysicalResist + m_PhysicalBonus)); } }\n        public override int FireResistance { get { return ((m_FireResistance != -1) ? m_FireResistance : (BaseFireResistance + GetProtOffset() + GetResourceAttrs().ArmorFireResist + m_FireBonus)); } }\n        public override int ColdResistance { get { return ((m_ColdResistance != -1) ? m_ColdResistance : (BaseColdResistance + GetProtOffset() + GetResourceAttrs().ArmorColdResist + m_ColdBonus)); } }\n        public override int PoisonResistance { get { return ((m_PoisonResistance != -1) ? m_PoisonResistance : (BasePoisonResistance + GetProtOffset() + GetResourceAttrs().ArmorPoisonResist + m_PoisonBonus)); } }\n        public override int EnergyResistance { get { return ((m_EnergyResistance != -1) ? m_EnergyResistance : (BaseEnergyResistance + GetProtOffset() + GetResourceAttrs().ArmorEnergyResist + m_EnergyBonus)); } }\n        //daat99 OWLTR end\n        public virtual int InitMinHits\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        public virtual int InitMaxHits\n        {\n            get\n            {\n                return 0;\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public ArmorBodyType BodyPosition\n        {\n            get\n            {\n                switch ( this.Layer )\n                {\n                    default:\n                    case Layer.Neck:\n                        return ArmorBodyType.Gorget;\n                    case Layer.TwoHanded:\n                        return ArmorBodyType.Shield;\n                    case Layer.Gloves:\n                        return ArmorBodyType.Gloves;\n                    case Layer.Helm:\n                        return ArmorBodyType.Helmet;\n                    case Layer.Arms:\n                        return ArmorBodyType.Arms;\n                    case Layer.InnerLegs:\n                    case Layer.OuterLegs:\n                    case Layer.Pants:\n                        return ArmorBodyType.Legs;\n                    case Layer.InnerTorso:\n                    case Layer.OuterTorso:\n                    case Layer.Shirt:\n                        return ArmorBodyType.Chest;\n                }\n            }\n        }\n        public void DistributeBonuses(int amount)\n        {\n            for (int i = 0; i < amount; ++i)\n            {\n                switch ( Utility.Random(5) )\n                {\n                    case 0:\n                        ++this.m_PhysicalBonus;\n                        break;\n                    case 1:\n                        ++this.m_FireBonus;\n                        break;\n                    case 2:\n                        ++this.m_ColdBonus;\n                        break;\n                    case 3:\n                        ++this.m_PoisonBonus;\n                        break;\n                    case 4:\n                        ++this.m_EnergyBonus;\n                        break;\n                }\n            }\n            this.InvalidateProperties();\n        }\n        public CraftAttributeInfo GetResourceAttrs()\n        {\n            CraftResourceInfo info = CraftResources.GetInfo(this.m_Resource);\n            if (info == null)\n                return CraftAttributeInfo.Blank;\n            return info.AttributeInfo;\n        }\n        public int GetProtOffset()\n        {\n            switch ( this.m_Protection )\n            {\n                case ArmorProtectionLevel.Guarding:\n                    return 1;\n                case ArmorProtectionLevel.Hardening:\n                    return 2;\n                case ArmorProtectionLevel.Fortification:\n                    return 3;\n                case ArmorProtectionLevel.Invulnerability:\n                    return 4;\n            }\n            return 0;\n        }\n        public void UnscaleDurability()\n        {\n            int scale = 100 + this.GetDurabilityBonus();\n            this.m_HitPoints = ((this.m_HitPoints * 100) + (scale - 1)) / scale;\n            this.m_MaxHitPoints = ((this.m_MaxHitPoints * 100) + (scale - 1)) / scale;\n            this.InvalidateProperties();\n        }\n        public void ScaleDurability()\n        {\n            int scale = 100 + this.GetDurabilityBonus();\n            this.m_HitPoints = ((this.m_HitPoints * scale) + 99) / 100;\n            this.m_MaxHitPoints = ((this.m_MaxHitPoints * scale) + 99) / 100;\n            this.InvalidateProperties();\n        }\n        public int GetDurabilityBonus()\n        {\n            int bonus = 0;\n            if (this.m_Quality == ArmorQuality.Exceptional &&!(this is GargishLeatherWingArmor))\n                bonus += 20;\n            switch ( this.m_Durability )\n            {\n                case ArmorDurabilityLevel.Durable:\n                    bonus += 20;\n                    break;\n                case ArmorDurabilityLevel.Substantial:\n                    bonus += 50;\n                    break;\n                case ArmorDurabilityLevel.Massive:\n                    bonus += 70;\n                    break;\n                case ArmorDurabilityLevel.Fortified:\n                    bonus += 100;\n                    break;\n                case ArmorDurabilityLevel.Indestructible:\n                    bonus += 120;\n                    break;\n            }\n            if (Core.AOS)\n            {\n                bonus += this.m_AosArmorAttributes.DurabilityBonus;\n                if (this.m_Resource == CraftResource.Heartwood)\n                    return bonus;\n                CraftResourceInfo resInfo = CraftResources.GetInfo(this.m_Resource);\n                CraftAttributeInfo attrInfo = null;\n                if (resInfo != null)\n                    attrInfo = resInfo.AttributeInfo;\n                if (attrInfo != null)\n                    bonus += attrInfo.ArmorDurability;\n            }\n            return bonus;\n        }\n        public virtual bool Scissor(Mobile from, Scissors scissors)\n        {\n            if (!this.IsChildOf(from.Backpack))\n            {\n                from.SendLocalizedMessage(502437); // Items you wish to cut must be in your backpack.\n                return false;\n            }\n            if (Ethics.Ethic.IsImbued(this))\n            {\n                from.SendLocalizedMessage(502440); // Scissors can not be used on that to produce anything.\n                return false;\n            }\n            CraftSystem system = DefTailoring.CraftSystem;\n            CraftItem item = system.CraftItems.SearchFor(this.GetType());\n            if (item != null && item.Resources.Count == 1 && item.Resources.GetAt(0).Amount >= 2)\n            {\n                try\n                {\n                    Item res = (Item)Activator.CreateInstance(CraftResources.GetInfo(this.m_Resource).ResourceTypes[0]);\n                    this.ScissorHelper(from, res, this.m_PlayerConstructed ? (item.Resources.GetAt(0).Amount / 2) : 1);\n                    return true;\n                }\n                catch\n                {\n                }\n            }\n            from.SendLocalizedMessage(502440); // Scissors can not be used on that to produce anything.\n            return false;\n        }\n        private static double[] m_ArmorScalars = { 0.07, 0.07, 0.14, 0.15, 0.22, 0.35 };\n        public static double[] ArmorScalars\n        {\n            get\n            {\n                return m_ArmorScalars;\n            }\n            set\n            {\n                m_ArmorScalars = value;\n            }\n        }\n        public static void ValidateMobile(Mobile m)\n        {\n            for (int i = m.Items.Count - 1; i >= 0; --i)\n            {\n                if (i >= m.Items.Count)\n                    continue;\n                Item item = m.Items[i];\n                if (item is BaseArmor)\n                {\n                    BaseArmor armor = (BaseArmor)item;\n                    if (m.Race == Race.Gargoyle && !armor.CanBeWornByGargoyles)\n                    {\n                        m.SendLocalizedMessage(1111708); // Gargoyles can't wear this.\n                        m.AddToBackpack(armor);\n                    }\n                    if (armor.RequiredRace != null && m.Race != armor.RequiredRace)\n                    {\n                        if (armor.RequiredRace == Race.Elf)\n                            m.SendLocalizedMessage(1072203); // Only Elves may use this.\n                        else if (armor.RequiredRace == Race.Gargoyle)\n                            m.SendLocalizedMessage(1111707); // Only gargoyles can wear this.\n                        else\n                            m.SendMessage(\"Only {0} may use this.\", armor.RequiredRace.PluralName);\n                        m.AddToBackpack(armor);\n                    }\n                    else if (!armor.AllowMaleWearer && !m.Female && m.AccessLevel < AccessLevel.GameMaster)\n                    {\n                        if (armor.AllowFemaleWearer)\n                            m.SendLocalizedMessage(1010388); // Only females can wear this.\n                        else\n                            m.SendMessage(\"You may not wear this.\");\n                        m.AddToBackpack(armor);\n                    }\n                    else if (!armor.AllowFemaleWearer && m.Female && m.AccessLevel < AccessLevel.GameMaster)\n                    {\n                        if (armor.AllowMaleWearer)\n                            m.SendLocalizedMessage(1063343); // Only males can wear this.\n                        else\n                            m.SendMessage(\"You may not wear this.\");\n                        m.AddToBackpack(armor);\n                    }\n                }\n            }\n        }\n        public int GetLowerStatReq()\n        {\n            if (!Core.AOS)\n                return 0;\n            int v = this.m_AosArmorAttributes.LowerStatReq;\n            if (this.m_Resource == CraftResource.Heartwood)\n                return v;\n            CraftResourceInfo info = CraftResources.GetInfo(this.m_Resource);\n            if (info != null)\n            {\n                CraftAttributeInfo attrInfo = info.AttributeInfo;\n                if (attrInfo != null)\n                    v += attrInfo.ArmorLowerRequirements;\n            }\n            if (v > 100)\n                v = 100;\n            return v;\n        }\n        public override void OnAdded(object parent)\n        {\n            if (parent is Mobile)\n            {\n                Mobile from = (Mobile)parent;\n                if (Core.AOS)\n                    this.m_AosSkillBonuses.AddTo(from);\n                #region Mondain's Legacy Sets\n                if (this.IsSetItem)\n                {\n                    this.m_SetEquipped = SetHelper.FullSetEquipped(from, this.SetID, this.Pieces);\n                    if (this.m_SetEquipped)\n                    {\n                        this.m_LastEquipped = true;\n                        SetHelper.AddSetBonus(from, this.SetID);\n                    }\n                }\n                #endregion\n                from.Delta(MobileDelta.Armor); // Tell them armor rating has changed\n            }\n        }\n        public virtual double ScaleArmorByDurability(double armor)\n        {\n            int scale = 100;\n            if (this.m_MaxHitPoints > 0 && this.m_HitPoints < this.m_MaxHitPoints)\n                scale = 50 + ((50 * this.m_HitPoints) / this.m_MaxHitPoints);\n            return (armor * scale) / 100;\n        }\n        protected void Invalidate()\n        {\n            if (this.Parent is Mobile)\n                ((Mobile)this.Parent).Delta(MobileDelta.Armor); // Tell them armor rating has changed\n        }\n        public BaseArmor(Serial serial)\n            : base(serial)\n        {\n        }\n        private static void SetSaveFlag(ref SaveFlag flags, SaveFlag toSet, bool setIf)\n        {\n            if (setIf)\n                flags |= toSet;\n        }\n        private static bool GetSaveFlag(SaveFlag flags, SaveFlag toGet)\n        {\n            return ((flags & toGet) != 0);\n        }\n        [Flags]\n        private enum SaveFlag\n        {\n            None = 0x00000000,\n            Attributes = 0x00000001,\n            ArmorAttributes = 0x00000002,\n            PhysicalBonus = 0x00000004,\n            FireBonus = 0x00000008,\n            ColdBonus = 0x00000010,\n            PoisonBonus = 0x00000020,\n            EnergyBonus = 0x00000040,\n            Identified = 0x00000080,\n            MaxHitPoints = 0x00000100,\n            HitPoints = 0x00000200,\n            Crafter = 0x00000400,\n            Quality = 0x00000800,\n            Durability = 0x00001000,\n            Protection = 0x00002000,\n            Resource = 0x00004000,\n            BaseArmor = 0x00008000,\n            StrBonus = 0x00010000,\n            DexBonus = 0x00020000,\n            IntBonus = 0x00040000,\n            StrReq = 0x00080000,\n            DexReq = 0x00100000,\n            IntReq = 0x00200000,\n            MedAllowance = 0x00400000,\n            SkillBonuses = 0x00800000,\n            PlayerConstructed = 0x01000000,\n            xAbsorptionAttributes = 0x02000000,\n            //TimesImbued = 0x04000000,\n            NegativeAttributes  = 0x08000000,\n            Altered = 0x10000000, \n            TalismanProtection = 0x20000000\n        }\n        #region Mondain's Legacy Sets\n        private static void SetSaveFlag(ref SetFlag flags, SetFlag toSet, bool setIf)\n        {\n            if (setIf)\n                flags |= toSet;\n        }\n        private static bool GetSaveFlag(SetFlag flags, SetFlag toGet)\n        {\n            return ((flags & toGet) != 0);\n        }\n        [Flags]\n        private enum SetFlag\n        {\n            None = 0x00000000,\n            Attributes = 0x00000001,\n            ArmorAttributes = 0x00000002,\n            SkillBonuses = 0x00000004,\n            PhysicalBonus = 0x00000008,\n            FireBonus = 0x00000010,\n            ColdBonus = 0x00000020,\n            PoisonBonus = 0x00000040,\n            EnergyBonus = 0x00000080,\n            Hue = 0x00000100,\n            LastEquipped = 0x00000200,\n            SetEquipped = 0x00000400,\n            SetSelfRepair = 0x00000800,\n        }\n        #endregion\n        public override void Serialize(GenericWriter writer)\n        {\n            base.Serialize(writer);\n\t\t\t//daat99 OWLTR start - increase version from 12 to 13 and save resistance\n            writer.Write((int)13); // version\n            //version 13\n            writer.WriteEncodedInt((int)PhysicalResistance);\n            writer.WriteEncodedInt((int)FireResistance);\n            writer.WriteEncodedInt((int)ColdResistance);\n            writer.WriteEncodedInt((int)PoisonResistance);\n            writer.WriteEncodedInt((int)EnergyResistance);\n            //end version 13\n            //daat99 OWLTR end\n            writer.Write(_VvVItem);\n            writer.Write(_Owner);\n            writer.Write(_OwnerName);\n            //Version 11\n            writer.Write(m_RefinedPhysical);\n            writer.Write(m_RefinedFire);\n            writer.Write(m_RefinedCold);\n            writer.Write(m_RefinedPoison);\n            writer.Write(m_RefinedEnergy);\n            //Version 10\n            writer.Write((bool)this.m_IsImbued);\n            // Version 9\n            #region Runic Reforging\n            writer.Write((int)m_ReforgedPrefix);\n            writer.Write((int)m_ReforgedSuffix);\n            writer.Write((int)m_ItemPower);\n            writer.Write(m_BlockRepair);\n            #endregion\n            #region Stygian Abyss\n            writer.Write(m_GorgonLenseCharges);\n            writer.Write((int)m_GorgonLenseType);\n            writer.Write(m_PhysImbuing);\n            writer.Write(m_FireImbuing);\n            writer.Write(m_ColdImbuing);\n            writer.Write(m_PoisonImbuing);\n            writer.Write(m_EnergyImbuing);\n            // Version 8\n            writer.Write((int)this.m_TimesImbued);\n           \n            #endregion\n            writer.Write((Mobile)this.m_BlessedBy);\n            SetFlag sflags = SetFlag.None;\n            SetSaveFlag(ref sflags, SetFlag.Attributes, !this.m_SetAttributes.IsEmpty);\n            SetSaveFlag(ref sflags, SetFlag.SkillBonuses, !this.m_SetSkillBonuses.IsEmpty);\n            SetSaveFlag(ref sflags, SetFlag.PhysicalBonus, this.m_SetPhysicalBonus != 0);\n            SetSaveFlag(ref sflags, SetFlag.FireBonus, this.m_SetFireBonus != 0);\n            SetSaveFlag(ref sflags, SetFlag.ColdBonus, this.m_SetColdBonus != 0);\n            SetSaveFlag(ref sflags, SetFlag.PoisonBonus, this.m_SetPoisonBonus != 0);\n            SetSaveFlag(ref sflags, SetFlag.EnergyBonus, this.m_SetEnergyBonus != 0);\n            SetSaveFlag(ref sflags, SetFlag.Hue, this.m_SetHue != 0);\n            SetSaveFlag(ref sflags, SetFlag.LastEquipped, this.m_LastEquipped);\n            SetSaveFlag(ref sflags, SetFlag.SetEquipped, this.m_SetEquipped);\n            SetSaveFlag(ref sflags, SetFlag.SetSelfRepair, this.m_SetSelfRepair != 0);\n            writer.WriteEncodedInt((int)sflags);\n            if (GetSaveFlag(sflags, SetFlag.Attributes))\n                this.m_SetAttributes.Serialize(writer);\n            if (GetSaveFlag(sflags, SetFlag.SkillBonuses))\n                this.m_SetSkillBonuses.Serialize(writer);\n            if (GetSaveFlag(sflags, SetFlag.PhysicalBonus))\n                writer.WriteEncodedInt((int)this.m_SetPhysicalBonus);\n            if (GetSaveFlag(sflags, SetFlag.FireBonus))\n                writer.WriteEncodedInt((int)this.m_SetFireBonus);\n            if (GetSaveFlag(sflags, SetFlag.ColdBonus))\n                writer.WriteEncodedInt((int)this.m_SetColdBonus);\n            if (GetSaveFlag(sflags, SetFlag.PoisonBonus))\n                writer.WriteEncodedInt((int)this.m_SetPoisonBonus);\n            if (GetSaveFlag(sflags, SetFlag.EnergyBonus))\n                writer.WriteEncodedInt((int)this.m_SetEnergyBonus);\n            if (GetSaveFlag(sflags, SetFlag.Hue))\n                writer.WriteEncodedInt((int)this.m_SetHue);\n            if (GetSaveFlag(sflags, SetFlag.LastEquipped))\n                writer.Write((bool)this.m_LastEquipped);\n            if (GetSaveFlag(sflags, SetFlag.SetEquipped))\n                writer.Write((bool)this.m_SetEquipped);\n            if (GetSaveFlag(sflags, SetFlag.SetSelfRepair))\n                writer.WriteEncodedInt((int)this.m_SetSelfRepair);\n            // Version 7\n            SaveFlag flags = SaveFlag.None;\n\t\t\tSetSaveFlag(ref flags, SaveFlag.TalismanProtection, !m_TalismanProtection.IsEmpty);\n            SetSaveFlag(ref flags, SaveFlag.NegativeAttributes, !this.m_NegativeAttributes.IsEmpty);\n            SetSaveFlag(ref flags, SaveFlag.Attributes, !this.m_AosAttributes.IsEmpty);\n            SetSaveFlag(ref flags, SaveFlag.ArmorAttributes, !this.m_AosArmorAttributes.IsEmpty);\n            SetSaveFlag(ref flags, SaveFlag.PhysicalBonus, this.m_PhysicalBonus != 0);\n            SetSaveFlag(ref flags, SaveFlag.FireBonus, this.m_FireBonus != 0);\n            SetSaveFlag(ref flags, SaveFlag.ColdBonus, this.m_ColdBonus != 0);\n            SetSaveFlag(ref flags, SaveFlag.PoisonBonus, this.m_PoisonBonus != 0);\n            SetSaveFlag(ref flags, SaveFlag.EnergyBonus, this.m_EnergyBonus != 0);\n            SetSaveFlag(ref flags, SaveFlag.Identified, this.m_Identified != false);\n            SetSaveFlag(ref flags, SaveFlag.MaxHitPoints, this.m_MaxHitPoints != 0);\n            SetSaveFlag(ref flags, SaveFlag.HitPoints, this.m_HitPoints != 0);\n            SetSaveFlag(ref flags, SaveFlag.Crafter, this.m_Crafter != null);\n            SetSaveFlag(ref flags, SaveFlag.Quality, this.m_Quality != ArmorQuality.Regular);\n            SetSaveFlag(ref flags, SaveFlag.Durability, this.m_Durability != ArmorDurabilityLevel.Regular);\n            SetSaveFlag(ref flags, SaveFlag.Protection, this.m_Protection != ArmorProtectionLevel.Regular);\n            SetSaveFlag(ref flags, SaveFlag.Resource, this.m_Resource != this.DefaultResource);\n            SetSaveFlag(ref flags, SaveFlag.BaseArmor, this.m_ArmorBase != -1);\n            SetSaveFlag(ref flags, SaveFlag.StrBonus, this.m_StrBonus != -1);\n            SetSaveFlag(ref flags, SaveFlag.DexBonus, this.m_DexBonus != -1);\n            SetSaveFlag(ref flags, SaveFlag.IntBonus, this.m_IntBonus != -1);\n            SetSaveFlag(ref flags, SaveFlag.StrReq, this.m_StrReq != -1);\n            SetSaveFlag(ref flags, SaveFlag.DexReq, this.m_DexReq != -1);\n            SetSaveFlag(ref flags, SaveFlag.IntReq, this.m_IntReq != -1);\n            SetSaveFlag(ref flags, SaveFlag.MedAllowance, this.m_Meditate != (AMA)(-1));\n            SetSaveFlag(ref flags, SaveFlag.SkillBonuses, !this.m_AosSkillBonuses.IsEmpty);\n            SetSaveFlag(ref flags, SaveFlag.PlayerConstructed, this.m_PlayerConstructed != false);\n            SetSaveFlag(ref flags, SaveFlag.xAbsorptionAttributes, !this.m_SAAbsorptionAttributes.IsEmpty);\n            //SetSaveFlag(ref flags, SaveFlag.TimesImbued, this.m_TimesImbued != 0);\n            SetSaveFlag(ref flags, SaveFlag.Altered, m_Altered);\n            writer.WriteEncodedInt((int)flags);\n\t\t\tif (GetSaveFlag(flags, SaveFlag.TalismanProtection))\n                m_TalismanProtection.Serialize(writer);\n            if (GetSaveFlag(flags, SaveFlag.NegativeAttributes))\n                m_NegativeAttributes.Serialize(writer);\n            if (GetSaveFlag(flags, SaveFlag.Attributes))\n                this.m_AosAttributes.Serialize(writer);\n            if (GetSaveFlag(flags, SaveFlag.ArmorAttributes))\n                this.m_AosArmorAttributes.Serialize(writer);\n            if (GetSaveFlag(flags, SaveFlag.PhysicalBonus))\n                writer.WriteEncodedInt((int)this.m_PhysicalBonus);\n            if (GetSaveFlag(flags, SaveFlag.FireBonus))\n                writer.WriteEncodedInt((int)this.m_FireBonus);\n            if (GetSaveFlag(flags, SaveFlag.ColdBonus))\n                writer.WriteEncodedInt((int)this.m_ColdBonus);\n            if (GetSaveFlag(flags, SaveFlag.PoisonBonus))\n                writer.WriteEncodedInt((int)this.m_PoisonBonus);\n            if (GetSaveFlag(flags, SaveFlag.EnergyBonus))\n                writer.WriteEncodedInt((int)this.m_EnergyBonus);\n            if (GetSaveFlag(flags, SaveFlag.MaxHitPoints))\n                writer.WriteEncodedInt((int)this.m_MaxHitPoints);\n            if (GetSaveFlag(flags, SaveFlag.HitPoints))\n                writer.WriteEncodedInt((int)this.m_HitPoints);\n            if (GetSaveFlag(flags, SaveFlag.Crafter))\n                writer.Write((Mobile)this.m_Crafter);\n            if (GetSaveFlag(flags, SaveFlag.Quality))\n                writer.WriteEncodedInt((int)this.m_Quality);\n            if (GetSaveFlag(flags, SaveFlag.Durability))\n                writer.WriteEncodedInt((int)this.m_Durability);\n            if (GetSaveFlag(flags, SaveFlag.Protection))\n                writer.WriteEncodedInt((int)this.m_Protection);\n            if (GetSaveFlag(flags, SaveFlag.Resource))\n                writer.WriteEncodedInt((int)this.m_Resource);\n            if (GetSaveFlag(flags, SaveFlag.BaseArmor))\n                writer.WriteEncodedInt((int)this.m_ArmorBase);\n            if (GetSaveFlag(flags, SaveFlag.StrBonus))\n                writer.WriteEncodedInt((int)this.m_StrBonus);\n            if (GetSaveFlag(flags, SaveFlag.DexBonus))\n                writer.WriteEncodedInt((int)this.m_DexBonus);\n            if (GetSaveFlag(flags, SaveFlag.IntBonus))\n                writer.WriteEncodedInt((int)this.m_IntBonus);\n            if (GetSaveFlag(flags, SaveFlag.StrReq))\n                writer.WriteEncodedInt((int)this.m_StrReq);\n            if (GetSaveFlag(flags, SaveFlag.DexReq))\n                writer.WriteEncodedInt((int)this.m_DexReq);\n            if (GetSaveFlag(flags, SaveFlag.IntReq))\n                writer.WriteEncodedInt((int)this.m_IntReq);\n            if (GetSaveFlag(flags, SaveFlag.MedAllowance))\n                writer.WriteEncodedInt((int)this.m_Meditate);\n            if (GetSaveFlag(flags, SaveFlag.SkillBonuses))\n                this.m_AosSkillBonuses.Serialize(writer);\n            if (GetSaveFlag(flags, SaveFlag.xAbsorptionAttributes))\n                this.m_SAAbsorptionAttributes.Serialize(writer);\n        }\n        public override void Deserialize(GenericReader reader)\n        {\n            base.Deserialize(reader);\n            int version = reader.ReadInt();\n            switch ( version )\n            {\n\t\t\t\t//daat99 OWLTR start - load resists version 13\n                case 13:\n                    {\n                        m_PhysicalResistance = reader.ReadEncodedInt();\n                        m_FireResistance = reader.ReadEncodedInt();\n                        m_ColdResistance = reader.ReadEncodedInt();\n                        m_PoisonResistance = reader.ReadEncodedInt();\n                        m_EnergyResistance = reader.ReadEncodedInt();\n                        goto case 12;\n                    }\n                //daat99 OWLTR end\n                case 12:\n                    {\n                        _VvVItem = reader.ReadBool();\n                        _Owner = reader.ReadMobile();\n                        _OwnerName = reader.ReadString();\n                        goto case 11;\n                    }\n                case 11:\n                    {\n                        m_RefinedPhysical = reader.ReadInt();\n                        m_RefinedFire = reader.ReadInt();\n                        m_RefinedCold = reader.ReadInt();\n                        m_RefinedPoison = reader.ReadInt();\n                        m_RefinedEnergy = reader.ReadInt();\n                        goto case 10;\n                    }\n                case 10:\n                    {\n                        this.m_IsImbued = reader.ReadBool();\n                        goto case 9;\n                    }\n                case 9:\n                    {\n                        #region Runic Reforging\n                        m_ReforgedPrefix = (ReforgedPrefix)reader.ReadInt();\n                        m_ReforgedSuffix = (ReforgedSuffix)reader.ReadInt();\n                        m_ItemPower = (ItemPower)reader.ReadInt();\n                        m_BlockRepair = reader.ReadBool();\n                        #endregion\n                        #region Stygian Abyss\n                        m_GorgonLenseCharges = reader.ReadInt();\n                        m_GorgonLenseType = (LenseType)reader.ReadInt();\n                        m_PhysImbuing = reader.ReadInt();\n                        m_FireImbuing = reader.ReadInt();\n                        m_ColdImbuing = reader.ReadInt();\n                        m_PoisonImbuing = reader.ReadInt();\n                        m_EnergyImbuing = reader.ReadInt();\n                        goto case 8;\n                    }\n                case 8:\n                    {\n                        this.m_TimesImbued = reader.ReadInt();\n                        \n                        #endregion\n                        this.m_BlessedBy = reader.ReadMobile();\n                        SetFlag sflags = (SetFlag)reader.ReadEncodedInt();\n                        if (GetSaveFlag(sflags, SetFlag.Attributes))\n                            this.m_SetAttributes = new AosAttributes(this, reader);\n                        else\n                            this.m_SetAttributes = new AosAttributes(this);\n                        if (GetSaveFlag(sflags, SetFlag.ArmorAttributes))\n                            this.m_SetSelfRepair = (new AosArmorAttributes(this, reader)).SelfRepair;\n                        if (GetSaveFlag(sflags, SetFlag.SkillBonuses))\n                            this.m_SetSkillBonuses = new AosSkillBonuses(this, reader);\n                        else\n                            this.m_SetSkillBonuses = new AosSkillBonuses(this);\n                        if (GetSaveFlag(sflags, SetFlag.PhysicalBonus))\n                            this.m_SetPhysicalBonus = reader.ReadEncodedInt();\n                        if (GetSaveFlag(sflags, SetFlag.FireBonus))\n                            this.m_SetFireBonus = reader.ReadEncodedInt();\n                        if (GetSaveFlag(sflags, SetFlag.ColdBonus))\n                            this.m_SetColdBonus = reader.ReadEncodedInt();\n                        if (GetSaveFlag(sflags, SetFlag.PoisonBonus))\n                            this.m_SetPoisonBonus = reader.ReadEncodedInt();\n                        if (GetSaveFlag(sflags, SetFlag.EnergyBonus))\n                            this.m_SetEnergyBonus = reader.ReadEncodedInt();\n                        if (GetSaveFlag(sflags, SetFlag.Hue))\n                            this.m_SetHue = reader.ReadEncodedInt();\n                        if (GetSaveFlag(sflags, SetFlag.LastEquipped))\n                            this.m_LastEquipped = reader.ReadBool();\n                        if (GetSaveFlag(sflags, SetFlag.SetEquipped))\n                            this.m_SetEquipped = reader.ReadBool();\n                        if (GetSaveFlag(sflags, SetFlag.SetSelfRepair))\n                            this.m_SetSelfRepair = reader.ReadEncodedInt();\n                        goto case 5;\n                    }\n                case 7:\n                case 6:\n                case 5:\n                    {\n                        SaveFlag flags = (SaveFlag)reader.ReadEncodedInt();\n\t\t\t\t\t\tif (GetSaveFlag(flags, SaveFlag.TalismanProtection))\n                            m_TalismanProtection = new TalismanAttribute(reader);\n                        else\n                            m_TalismanProtection = new TalismanAttribute();\n                        if (GetSaveFlag(flags, SaveFlag.NegativeAttributes))\n                            m_NegativeAttributes = new NegativeAttributes(this, reader);\n                        else\n                            m_NegativeAttributes = new NegativeAttributes(this);\n                        if (GetSaveFlag(flags, SaveFlag.Attributes))\n                            this.m_AosAttributes = new AosAttributes(this, reader);\n                        else\n                            this.m_AosAttributes = new AosAttributes(this);\n                        if (GetSaveFlag(flags, SaveFlag.ArmorAttributes))\n                            this.m_AosArmorAttributes = new AosArmorAttributes(this, reader);\n                        else\n                            this.m_AosArmorAttributes = new AosArmorAttributes(this);\n                        if (GetSaveFlag(flags, SaveFlag.PhysicalBonus))\n                            this.m_PhysicalBonus = reader.ReadEncodedInt();\n                        if (GetSaveFlag(flags, SaveFlag.FireBonus))\n                            this.m_FireBonus = reader.ReadEncodedInt();\n                        if (GetSaveFlag(flags, SaveFlag.ColdBonus))\n                            this.m_ColdBonus = reader.ReadEncodedInt();\n                        if (GetSaveFlag(flags, SaveFlag.PoisonBonus))\n                            this.m_PoisonBonus = reader.ReadEncodedInt();\n                        if (GetSaveFlag(flags, SaveFlag.EnergyBonus))\n                            this.m_EnergyBonus = reader.ReadEncodedInt();\n                        if (GetSaveFlag(flags, SaveFlag.Identified))\n                            this.m_Identified = (version >= 7 || reader.ReadBool());\n                        if (GetSaveFlag(flags, SaveFlag.MaxHitPoints))\n                            this.m_MaxHitPoints = reader.ReadEncodedInt();\n                        if (GetSaveFlag(flags, SaveFlag.HitPoints))\n                            this.m_HitPoints = reader.ReadEncodedInt();\n                        if (GetSaveFlag(flags, SaveFlag.Crafter))\n                            this.m_Crafter = reader.ReadMobile();\n                        if (GetSaveFlag(flags, SaveFlag.Quality))\n                            this.m_Quality = (ArmorQuality)reader.ReadEncodedInt();\n                        else\n                            this.m_Quality = ArmorQuality.Regular;\n                        if (version == 5 && this.m_Quality == ArmorQuality.Low)\n                            this.m_Quality = ArmorQuality.Regular;\n                        if (GetSaveFlag(flags, SaveFlag.Durability))\n                        {\n                            this.m_Durability = (ArmorDurabilityLevel)reader.ReadEncodedInt();\n                            if (this.m_Durability > ArmorDurabilityLevel.Indestructible)\n                                this.m_Durability = ArmorDurabilityLevel.Durable;\n                        }\n                        if (GetSaveFlag(flags, SaveFlag.Protection))\n                        {\n                            this.m_Protection = (ArmorProtectionLevel)reader.ReadEncodedInt();\n                            if (this.m_Protection > ArmorProtectionLevel.Invulnerability)\n                                this.m_Protection = ArmorProtectionLevel.Defense;\n                        }\n                        if (GetSaveFlag(flags, SaveFlag.Resource))\n                            this.m_Resource = (CraftResource)reader.ReadEncodedInt();\n                        else\n                            this.m_Resource = this.DefaultResource;\n                        if (this.m_Resource == CraftResource.None)\n                            this.m_Resource = this.DefaultResource;\n                        if (GetSaveFlag(flags, SaveFlag.BaseArmor))\n                            this.m_ArmorBase = reader.ReadEncodedInt();\n                        else\n                            this.m_ArmorBase = -1;\n                        if (GetSaveFlag(flags, SaveFlag.StrBonus))\n                            this.m_StrBonus = reader.ReadEncodedInt();\n                        else\n                            this.m_StrBonus = -1;\n                        if (GetSaveFlag(flags, SaveFlag.DexBonus))\n                            this.m_DexBonus = reader.ReadEncodedInt();\n                        else\n                            this.m_DexBonus = -1;\n                        if (GetSaveFlag(flags, SaveFlag.IntBonus))\n                            this.m_IntBonus = reader.ReadEncodedInt();\n                        else\n                            this.m_IntBonus = -1;\n                        if (GetSaveFlag(flags, SaveFlag.StrReq))\n                            this.m_StrReq = reader.ReadEncodedInt();\n                        else\n                            this.m_StrReq = -1;\n                        if (GetSaveFlag(flags, SaveFlag.DexReq))\n                            this.m_DexReq = reader.ReadEncodedInt();\n                        else\n                            this.m_DexReq = -1;\n                        if (GetSaveFlag(flags, SaveFlag.IntReq))\n                            this.m_IntReq = reader.ReadEncodedInt();\n                        else\n                            this.m_IntReq = -1;\n                        if (GetSaveFlag(flags, SaveFlag.MedAllowance))\n                            this.m_Meditate = (AMA)reader.ReadEncodedInt();\n                        else\n                            this.m_Meditate = (AMA)(-1);\n                        if (GetSaveFlag(flags, SaveFlag.SkillBonuses))\n                            this.m_AosSkillBonuses = new AosSkillBonuses(this, reader);\n                        if (GetSaveFlag(flags, SaveFlag.PlayerConstructed))\n                            this.m_PlayerConstructed = true;\n                        if (version > 7 && GetSaveFlag(flags, SaveFlag.xAbsorptionAttributes))\n                            this.m_SAAbsorptionAttributes = new SAAbsorptionAttributes(this, reader);\n                        else\n                            this.m_SAAbsorptionAttributes = new SAAbsorptionAttributes(this);\n                        if (GetSaveFlag(flags, SaveFlag.Altered))\n                            m_Altered = true;\n                        break;\n                    }\n                case 4:\n                    {\n                        this.m_AosAttributes = new AosAttributes(this, reader);\n                        this.m_AosArmorAttributes = new AosArmorAttributes(this, reader);\n                        goto case 3;\n                    }\n                case 3:\n                    {\n                        this.m_PhysicalBonus = reader.ReadInt();\n                        this.m_FireBonus = reader.ReadInt();\n                        this.m_ColdBonus = reader.ReadInt();\n                        this.m_PoisonBonus = reader.ReadInt();\n                        this.m_EnergyBonus = reader.ReadInt();\n                        goto case 2;\n                    }\n                case 2:\n                case 1:\n                    {\n                        this.m_Identified = reader.ReadBool();\n                        goto case 0;\n                    }\n                case 0:\n                    {\n                        this.m_ArmorBase = reader.ReadInt();\n                        this.m_MaxHitPoints = reader.ReadInt();\n                        this.m_HitPoints = reader.ReadInt();\n                        this.m_Crafter = reader.ReadMobile();\n                        this.m_Quality = (ArmorQuality)reader.ReadInt();\n                        this.m_Durability = (ArmorDurabilityLevel)reader.ReadInt();\n                        this.m_Protection = (ArmorProtectionLevel)reader.ReadInt();\n                        AMT mat = (AMT)reader.ReadInt();\n                        if (this.m_ArmorBase == this.RevertArmorBase)\n                            this.m_ArmorBase = -1;\n                        /*m_BodyPos = (ArmorBodyType)*/reader.ReadInt();\n                        if (version < 4)\n                        {\n                            this.m_AosAttributes = new AosAttributes(this);\n                            this.m_AosArmorAttributes = new AosArmorAttributes(this);\n                        }\n                        if (version < 3 && this.m_Quality == ArmorQuality.Exceptional)\n                            this.DistributeBonuses(6);\n                        if (version >= 2)\n                        {\n                            this.m_Resource = (CraftResource)reader.ReadInt();\n                        }\n                        else\n                        {\n                            OreInfo info;\n                            switch ( reader.ReadInt() )\n                            {\n                                default:\n                                case 0:\n                                    info = OreInfo.Iron;\n                                    break;\n                                case 1:\n                                    info = OreInfo.DullCopper;\n                                    break;\n                                case 2:\n                                    info = OreInfo.ShadowIron;\n                                    break;\n                                case 3:\n                                    info = OreInfo.Copper;\n                                    break;\n                                case 4:\n                                    info = OreInfo.Bronze;\n                                    break;\n                                case 5:\n                                    info = OreInfo.Gold;\n                                    break;\n                                case 6:\n                                    info = OreInfo.Agapite;\n                                    break;\n                                case 7:\n                                    info = OreInfo.Verite;\n                                    break;\n                                case 8:\n                                    info = OreInfo.Valorite;\n                                    break;\n                                //daat99 OWLTR start - add custom ores\n                                case 9: \n\t\t\t\t\t\t\t\t\tinfo = OreInfo.Blaze; \n\t\t\t\t\t\t\t\t\tbreak;\n                                case 10: \n\t\t\t\t\t\t\t\t\tinfo = OreInfo.Ice;\n\t\t\t\t\t\t\t\t\tbreak;\n                                case 11: \n\t\t\t\t\t\t\t\t\tinfo = OreInfo.Toxic; \n\t\t\t\t\t\t\t\t\tbreak;\n                                case 12: \n\t\t\t\t\t\t\t\t\tinfo = OreInfo.Electrum; \n\t\t\t\t\t\t\t\t\tbreak;\n                                case 13: \n\t\t\t\t\t\t\t\t\tinfo = OreInfo.Platinum; \n\t\t\t\t\t\t\t\t\tbreak;\n                                //daat99 OWLTR end - add custom ores\n                            }\n                            this.m_Resource = CraftResources.GetFromOreInfo(info, mat);\n                        }\n                        this.m_StrBonus = reader.ReadInt();\n                        this.m_DexBonus = reader.ReadInt();\n                        this.m_IntBonus = reader.ReadInt();\n                        this.m_StrReq = reader.ReadInt();\n                        this.m_DexReq = reader.ReadInt();\n                        this.m_IntReq = reader.ReadInt();\n                        if (this.m_StrBonus == this.OldStrBonus)\n                            this.m_StrBonus = -1;\n                        if (this.m_DexBonus == this.OldDexBonus)\n                            this.m_DexBonus = -1;\n                        if (this.m_IntBonus == this.OldIntBonus)\n                            this.m_IntBonus = -1;\n                        if (this.m_StrReq == this.OldStrReq)\n                            this.m_StrReq = -1;\n                        if (this.m_DexReq == this.OldDexReq)\n                            this.m_DexReq = -1;\n                        if (this.m_IntReq == this.OldIntReq)\n                            this.m_IntReq = -1;\n                        this.m_Meditate = (AMA)reader.ReadInt();\n                        if (this.m_Meditate == this.OldMedAllowance)\n                            this.m_Meditate = (AMA)(-1);\n                        if (this.m_Resource == CraftResource.None)\n                        {\n                            if (mat == ArmorMaterialType.Studded || mat == ArmorMaterialType.Leather)\n                                this.m_Resource = CraftResource.RegularLeather;\n                            else if (mat == ArmorMaterialType.Spined)\n                                this.m_Resource = CraftResource.SpinedLeather;\n                            else if (mat == ArmorMaterialType.Horned)\n                                this.m_Resource = CraftResource.HornedLeather;\n                            else if (mat == ArmorMaterialType.Barbed)\n                                this.m_Resource = CraftResource.BarbedLeather;\n                            //daat99 OWLTR start - add custom leather\n                            else if (mat == ArmorMaterialType.Polar)\n                                m_Resource = CraftResource.PolarLeather;\n                            else if (mat == ArmorMaterialType.Synthetic)\n                                m_Resource = CraftResource.SyntheticLeather;\n                            else if (mat == ArmorMaterialType.BlazeL)\n                                m_Resource = CraftResource.BlazeLeather;\n                            else if (mat == ArmorMaterialType.Daemonic)\n                                m_Resource = CraftResource.DaemonicLeather;\n                            else if (mat == ArmorMaterialType.Shadow)\n                                m_Resource = CraftResource.ShadowLeather;\n                            else if (mat == ArmorMaterialType.Frost)\n                                m_Resource = CraftResource.FrostLeather;\n                            else if (mat == ArmorMaterialType.Ethereal)\n                                m_Resource = CraftResource.EtherealLeather;\n                            //daat99 OWLTR end\n                            else\n                                this.m_Resource = CraftResource.Iron;\n                        }\n                        if (this.m_MaxHitPoints == 0 && this.m_HitPoints == 0)\n                            this.m_HitPoints = this.m_MaxHitPoints = Utility.RandomMinMax(this.InitMinHits, this.InitMaxHits);\n                        break;\n                    }\n            }\n            #region Mondain's Legacy Sets\n            if (this.m_SetAttributes == null)\n                this.m_SetAttributes = new AosAttributes(this);\n            if (this.m_SetSkillBonuses == null)\n                this.m_SetSkillBonuses = new AosSkillBonuses(this);\n            #endregion\n            if (this.m_AosSkillBonuses == null)\n                this.m_AosSkillBonuses = new AosSkillBonuses(this);\n            if (Core.AOS && this.Parent is Mobile)\n                this.m_AosSkillBonuses.AddTo((Mobile)this.Parent);\n            int strBonus = this.ComputeStatBonus(StatType.Str);\n            int dexBonus = this.ComputeStatBonus(StatType.Dex);\n            int intBonus = this.ComputeStatBonus(StatType.Int);\n            if (this.Parent is Mobile && (strBonus != 0 || dexBonus != 0 || intBonus != 0))\n            {\n                Mobile m = (Mobile)this.Parent;\n                string modName = this.Serial.ToString();\n                if (strBonus != 0)\n                    m.AddStatMod(new StatMod(StatType.Str, modName + \"Str\", strBonus, TimeSpan.Zero));\n                if (dexBonus != 0)\n                    m.AddStatMod(new StatMod(StatType.Dex, modName + \"Dex\", dexBonus, TimeSpan.Zero));\n                if (intBonus != 0)\n                    m.AddStatMod(new StatMod(StatType.Int, modName + \"Int\", intBonus, TimeSpan.Zero));\n            }\n            if (this.Parent is Mobile)\n                ((Mobile)this.Parent).CheckStatTimers();\n            if (version < 7)\n                this.m_PlayerConstructed = true; // we don't know, so, assume it's crafted\n        }\n        public virtual CraftResource DefaultResource\n        {\n            get\n            {\n                return CraftResource.Iron;\n            }\n        }\n        public BaseArmor(int itemID)\n            : base(itemID)\n        {\n            this.m_Quality = ArmorQuality.Regular;\n            this.m_Durability = ArmorDurabilityLevel.Regular;\n            this.m_Crafter = null;\n            this.m_Resource = this.DefaultResource;\n            this.Hue = CraftResources.GetHue(this.m_Resource);\n            this.m_HitPoints = this.m_MaxHitPoints = Utility.RandomMinMax(this.InitMinHits, this.InitMaxHits);\n            this.Layer = (Layer)this.ItemData.Quality;\n            this.m_AosAttributes = new AosAttributes(this);\n            this.m_AosArmorAttributes = new AosArmorAttributes(this);\n            this.m_AosSkillBonuses = new AosSkillBonuses(this);\n            this.m_SAAbsorptionAttributes = new SAAbsorptionAttributes(this);\n            #region Mondain's Legacy Sets\n            this.m_SetAttributes = new AosAttributes(this);\n            this.m_SetSkillBonuses = new AosSkillBonuses(this);\n            #endregion\n            this.m_AosSkillBonuses = new AosSkillBonuses(this);\n            m_NegativeAttributes = new NegativeAttributes(this);\n\t\t\tm_TalismanProtection = new TalismanAttribute();\n            // Mod to randomly add sockets and socketability features to armor. These settings will yield\n            // 2% drop rate of socketed/socketable items\n            // 0.1% chance of 5 sockets\n            // 0.5% of 4 sockets\n            // 3% chance of 3 sockets\n            // 15% chance of 2 sockets\n            // 50% chance of 1 socket\n            // the remainder will be 0 socket (31.4% in this case)\n            if(XmlSpawner.SocketsEnabled)\n\t\t\t\tXmlSockets.ConfigureRandom(this, 2.0, 0.1, 0.5, 3.0, 15.0, 50.0);\n        }\n        public override bool AllowSecureTrade(Mobile from, Mobile to, Mobile newOwner, bool accepted)\n        {\n            if (!Ethics.Ethic.CheckTrade(from, to, newOwner, this))\n                return false;\n            return base.AllowSecureTrade(from, to, newOwner, accepted);\n        }\n        public virtual Race RequiredRace\n        {\n            get\n            {\n                return null;\n            }\n        }\n        public virtual bool CanBeWornByGargoyles\n        {\n            get\n            {\n                return false;\n            }\n        }\n        public override bool CanEquip(Mobile from)\n        {\n            if (!Ethics.Ethic.CheckEquip(from, this))\n                return false;\n            if (from.IsPlayer())\n            {\n                if (_Owner != null && _Owner != from)\n                {\n                    from.SendLocalizedMessage(501023); // You must be the owner to use this item.\n                    return false;\n                }\n                if (this is IAccountRestricted && ((IAccountRestricted)this).Account != null)\n                {\n                    Accounting.Account acct = from.Account as Accounting.Account;\n                    if (acct == null || acct.Username != ((IAccountRestricted)this).Account)\n                    {\n                        from.SendLocalizedMessage(1071296); // This item is Account Bound and your character is not bound to it. You cannot use this item.\n                        return false;\n                    }\n                }\n                if (IsVvVItem && !Engines.VvV.ViceVsVirtueSystem.IsVvV(from))\n                {\n                    from.SendLocalizedMessage(1155496); // This item can only be used by VvV participants!\n                    return false;\n                }\n                if (from.Race == Race.Gargoyle && !this.CanBeWornByGargoyles)\n                {\n                    from.SendLocalizedMessage(1111708); // Gargoyles can't wear this.\n                    return false;\n                }\n                if (this.RequiredRace != null && from.Race != this.RequiredRace)\n                {\n                    if (this.RequiredRace == Race.Elf)\n                        from.SendLocalizedMessage(1072203); // Only Elves may use this.\n                    else if (this.RequiredRace == Race.Gargoyle)\n                        from.SendLocalizedMessage(1111707); // Only gargoyles can wear this.\n                    else\n                        from.SendMessage(\"Only {0} may use this.\", this.RequiredRace.PluralName);\n                    return false;\n                }\n                else if (!this.AllowMaleWearer && !from.Female)\n                {\n                    if (this.AllowFemaleWearer)\n                        from.SendLocalizedMessage(1010388); // Only females can wear this.\n                    else\n                        from.SendMessage(\"You may not wear this.\");\n                    return false;\n                }\n                else if (!this.AllowFemaleWearer && from.Female)\n                {\n                    if (this.AllowMaleWearer)\n                        from.SendLocalizedMessage(1063343); // Only males can wear this.\n                    else\n                        from.SendMessage(\"You may not wear this.\");\n                    return false;\n                }\n                #region Personal Bless Deed\n                else if (this.BlessedBy != null && this.BlessedBy != from)\n                {\n                    from.SendLocalizedMessage(1075277); // That item is blessed by another player.\n                    return false;\n                }\n                #endregion\n                else\n                {\n                    int strBonus = this.ComputeStatBonus(StatType.Str), strReq = this.ComputeStatReq(StatType.Str);\n                    int dexBonus = this.ComputeStatBonus(StatType.Dex), dexReq = this.ComputeStatReq(StatType.Dex);\n                    int intBonus = this.ComputeStatBonus(StatType.Int), intReq = this.ComputeStatReq(StatType.Int);\n                    if (from.Dex < dexReq || (from.Dex + dexBonus) < 1)\n                    {\n                        from.SendLocalizedMessage(502077); // You do not have enough dexterity to equip this item.\n                        return false;\n                    }\n                    else if (from.Str < strReq || (from.Str + strBonus) < 1)\n                    {\n                        from.SendLocalizedMessage(500213); // You are not strong enough to equip that.\n                        return false;\n                    }\n                    else if (from.Int < intReq || (from.Int + intBonus) < 1)\n                    {\n                        from.SendMessage(\"You are not smart enough to equip that.\");\n                        return false;\n                    }\n                }\n            }\n            if (!Server.Engines.XmlSpawner2.XmlAttach.CheckCanEquip(this, from))\n                return false;\n            else\n                return base.CanEquip(from);\n        }\n        public override bool CheckPropertyConfliction(Mobile m)\n        {\n            if (base.CheckPropertyConfliction(m))\n                return true;\n            if (this.Layer == Layer.Pants)\n                return (m.FindItemOnLayer(Layer.InnerLegs) != null);\n            if (this.Layer == Layer.Shirt)\n                return (m.FindItemOnLayer(Layer.InnerTorso) != null);\n            return false;\n        }\n        public override bool OnEquip(Mobile from)\n        {\n            from.CheckStatTimers();\n            int strBonus = this.ComputeStatBonus(StatType.Str);\n            int dexBonus = this.ComputeStatBonus(StatType.Dex);\n            int intBonus = this.ComputeStatBonus(StatType.Int);\n            if (strBonus != 0 || dexBonus != 0 || intBonus != 0)\n            {\n                string modName = this.Serial.ToString();\n                if (strBonus != 0)\n                    from.AddStatMod(new StatMod(StatType.Str, modName + \"Str\", strBonus, TimeSpan.Zero));\n                if (dexBonus != 0)\n                    from.AddStatMod(new StatMod(StatType.Dex, modName + \"Dex\", dexBonus, TimeSpan.Zero));\n                if (intBonus != 0)\n                    from.AddStatMod(new StatMod(StatType.Int, modName + \"Int\", intBonus, TimeSpan.Zero));\n            }\n            Server.Engines.XmlSpawner2.XmlAttach.CheckOnEquip(this, from);\n            return base.OnEquip(from);\n        }\n        public override void OnRemoved(object parent)\n        {\n            if (parent is Mobile)\n            {\n                Mobile m = (Mobile)parent;\n                string modName = this.Serial.ToString();\n                m.RemoveStatMod(modName + \"Str\");\n                m.RemoveStatMod(modName + \"Dex\");\n                m.RemoveStatMod(modName + \"Int\");\n                if (Core.AOS)\n                    this.m_AosSkillBonuses.Remove();\n                ((Mobile)parent).Delta(MobileDelta.Armor); // Tell them armor rating has changed\n                m.CheckStatTimers();\n                #region Mondain's Legacy Sets\n                if (this.IsSetItem && this.m_SetEquipped)\n                    SetHelper.RemoveSetBonus(m, this.SetID, this);\n                #endregion\n            }\n            Server.Engines.XmlSpawner2.XmlAttach.CheckOnRemoved(this, parent);\n            base.OnRemoved(parent);\n        }\n        public virtual int OnHit(BaseWeapon weapon, int damageTaken)\n        {\n            double HalfAr = this.ArmorRating / 2.0;\n            int Absorbed = (int)(HalfAr + HalfAr * Utility.RandomDouble());\n            damageTaken -= Absorbed;\n            if (damageTaken < 0) \n                damageTaken = 0;\n            if (Absorbed < 2)\n                Absorbed = 2;\n            double chance = NegativeAttributes.Antique > 0 ? 80 : 25;\n            if (chance >= Utility.Random(100)) // 25% chance to lower durability\n            {\n                if (Core.AOS && this.m_AosArmorAttributes.SelfRepair + (this.IsSetItem && this.m_SetEquipped ? this.m_SetSelfRepair : 0) > Utility.Random(10))\n                {\n                    this.HitPoints += 2;\n                }\n                else\n                {\n                    int wear;\n                    if (weapon.Type == WeaponType.Bashing)\n                        wear = Absorbed / 2;\n                    else\n                        wear = Utility.Random(2);\n                    if (wear > 0 && this.m_MaxHitPoints > 0)\n                    {\n                        if (this.m_HitPoints >= wear)\n                        {\n                            this.HitPoints -= wear;\n                            wear = 0;\n                        }\n                        else\n                        {\n                            wear -= this.HitPoints;\n                            this.HitPoints = 0;\n                        }\n                        if (wear > 0)\n                        {\n                            if (this.m_MaxHitPoints > wear)\n                            {\n                                this.MaxHitPoints -= wear;\n                                if (this.Parent is Mobile)\n                                    ((Mobile)this.Parent).LocalOverheadMessage(MessageType.Regular, 0x3B2, 1061121); // Your equipment is severely damaged.\n                            }\n                            else\n                            {\n                                this.Delete();\n                            }\n                        }\n                    }\n                }\n            }\n            return damageTaken;\n        }\n        private string GetNameString()\n        {\n            string name = this.Name;\n            if (name == null)\n                name = String.Format(\"#{0}\", this.LabelNumber);\n            return name;\n        }\n        [Hue, CommandProperty(AccessLevel.GameMaster)]\n        public override int Hue\n        {\n            get\n            {\n                return base.Hue;\n            }\n            set\n            {\n                base.Hue = value;\n                this.InvalidateProperties();\n            }\n        }\n        public override void AddNameProperty(ObjectPropertyList list)\n        {\n            //daat99 OWLTR start - add custom resources to name\n            string oreType = CraftResources.GetName(m_Resource);\n            int level = CraftResources.GetIndex(m_Resource) + 1;\n            if (m_Quality == ArmorQuality.Exceptional)\n            {\n                if (level > 1 && !string.IsNullOrEmpty(oreType))\n                    list.Add(1053100, \"{0}\\t{1}\", oreType, GetNameString()); // exceptional ~1_oretype~ ~2_armortype~\n                else\n                    list.Add(1050040, GetNameString()); // exceptional ~1_ITEMNAME~\n            }\n            else\n            {\n                if (level > 1 && !string.IsNullOrEmpty(oreType))\n                    list.Add(1053099, \"{0}\\t{1}\", oreType, GetNameString()); // ~1_oretype~ ~2_armortype~\n                else\n                    list.Add(GetNameString());\n            }\n            //daat99 OWLTR end - add custom resources to name\n        }\n        public override bool AllowEquipedCast(Mobile from)\n        {\n            if (base.AllowEquipedCast(from))\n                return true;\n            return (this.m_AosAttributes.SpellChanneling != 0);\n        }\n        public virtual int GetLuckBonus()\n        {\n            if (this.m_Resource == CraftResource.Heartwood)\n                return 0;\n            CraftResourceInfo resInfo = CraftResources.GetInfo(this.m_Resource);\n            if (resInfo == null)\n                return 0;\n            CraftAttributeInfo attrInfo = resInfo.AttributeInfo;\n            if (attrInfo == null)\n                return 0;\n            return attrInfo.ArmorLuck;\n        }\n        public override void AddWeightProperty(ObjectPropertyList list)\n        {\n            base.AddWeightProperty(list);\n            if (IsVvVItem)\n                list.Add(1154937); // VvV Item\n        }\n        public override void GetProperties(ObjectPropertyList list)\n        {\n            base.GetProperties(list);\n            if (OwnerName != null)\n            {\n                list.Add(1153213, OwnerName);\n            }\n            #region Stygian Abyss\n            if (this.IsImbued)\n                list.Add(1080418); // (Imbued)\n            if (m_GorgonLenseCharges > 0)\n                list.Add(1112590, m_GorgonLenseCharges.ToString()); //Gorgon Lens Charges: ~1_val~\n            #endregion\n            if (this.m_Crafter != null)\n\t\t\t\tlist.Add(1050043, m_Crafter.TitleName); // crafted by ~1_NAME~\n            if (m_Altered)\n                list.Add(1111880); // Altered\n            #region Factions\n            if (this.m_FactionState != null)\n                list.Add(1041350); // faction item\n            #endregion\n            #region Mondain's Legacy Sets\n            if (this.IsSetItem)\n            {\n                if (this.MixedSet)\n                    list.Add(1073491, this.Pieces.ToString()); // Part of a Weapon/Armor Set (~1_val~ pieces)\n                else\n                    list.Add(1072376, this.Pieces.ToString()); // Part of an Armor Set (~1_val~ pieces)\n\t\t\t\tif (SetID == SetItem.Bestial)\n                    list.Add(1151541, BestialSetHelper.GetTotalBerserk(this).ToString()); // Berserk ~1_VAL~\n                if (this.BardMasteryBonus)\n                    list.Add(1151553); // Activate: Bard Mastery Bonus x2<br>(Effect: 1 min. Cooldown: 30 min.)\n                if (this.m_SetEquipped)\n                {\n                    if (this.MixedSet)\n                        list.Add(1073492); // Full Weapon/Armor Set Present\n                    else\n                        list.Add(1072377); // Full Armor Set Present\n                    this.GetSetProperties(list);\n                }\n            }\n            #endregion\n            if (this.RequiredRace == Race.Elf)\n                list.Add(1075086); // Elves Only\n            else if (this.RequiredRace == Race.Gargoyle)\n                list.Add(1111709); // Gargoyles Only\n            if (this is SurgeShield && ((SurgeShield)this).Surge > SurgeType.None)\n                list.Add(1116176 + ((int)((SurgeShield)this).Surge));\n            m_NegativeAttributes.GetProperties(list, this);\n            this.m_AosSkillBonuses.GetProperties(list);\n            int prop;\n            if ((prop = this.ArtifactRarity) > 0)\n                list.Add(1061078, prop.ToString()); // artifact rarity ~1_val~\n\t\t\tif (m_TalismanProtection != null && !m_TalismanProtection.IsEmpty && m_TalismanProtection.Amount > 0)\n                list.Add(1072387, \"{0}\\t{1}\", m_TalismanProtection.Name != null ? m_TalismanProtection.Name.ToString() : \"Unknown\", m_TalismanProtection.Amount); // ~1_NAME~ Protection: +~2_val~%\n            if ((prop = this.m_AosAttributes.WeaponDamage) != 0)\n                list.Add(1060401, prop.ToString()); // damage increase ~1_val~%\n            if ((prop = this.m_AosAttributes.DefendChance) != 0)\n                list.Add(1060408, prop.ToString()); // defense chance increase ~1_val~%\n            if ((prop = this.m_AosAttributes.BonusDex) != 0)\n                list.Add(1060409, prop.ToString()); // dexterity bonus ~1_val~\n            if ((prop = this.m_AosAttributes.EnhancePotions) != 0)\n                list.Add(1060411, prop.ToString()); // enhance potions ~1_val~%\n            if ((prop = this.m_AosAttributes.CastRecovery) != 0)\n                list.Add(1060412, prop.ToString()); // faster cast recovery ~1_val~\n            if ((prop = this.m_AosAttributes.CastSpeed) != 0)\n                list.Add(1060413, prop.ToString()); // faster casting ~1_val~\n            if ((prop = this.m_AosAttributes.AttackChance) != 0)\n                list.Add(1060415, prop.ToString()); // hit chance increase ~1_val~%\n            if ((prop = this.m_AosAttributes.BonusHits) != 0)\n                list.Add(1060431, prop.ToString()); // hit point increase ~1_val~\n            if ((prop = this.m_AosAttributes.BonusInt) != 0)\n                list.Add(1060432, prop.ToString()); // intelligence bonus ~1_val~\n            if ((prop = this.m_AosAttributes.LowerManaCost) != 0)\n                list.Add(1060433, prop.ToString()); // lower mana cost ~1_val~%\n            if ((prop = this.m_AosAttributes.LowerRegCost) != 0)\n                list.Add(1060434, prop.ToString()); // lower reagent cost ~1_val~%\n            if ((prop = this.GetLowerStatReq()) != 0)\n                list.Add(1060435, prop.ToString()); // lower requirements ~1_val~%\n            if ((prop = (this.GetLuckBonus() + this.m_AosAttributes.Luck)) != 0)\n                list.Add(1060436, prop.ToString()); // luck ~1_val~\n            if ((prop = this.m_AosArmorAttributes.MageArmor) != 0)\n                list.Add(1060437); // mage armor\n            if ((prop = this.m_AosAttributes.BonusMana) != 0)\n                list.Add(1060439, prop.ToString()); // mana increase ~1_val~\n            if ((prop = this.m_AosAttributes.RegenMana) != 0)\n                list.Add(1060440, prop.ToString()); // mana regeneration ~1_val~\n            if ((prop = this.m_AosAttributes.NightSight) != 0)\n                list.Add(1060441); // night sight\n            if ((prop = this.m_AosAttributes.ReflectPhysical) != 0)\n                list.Add(1060442, prop.ToString()); // reflect physical damage ~1_val~%\n            if ((prop = this.m_AosAttributes.RegenStam) != 0)\n                list.Add(1060443, prop.ToString()); // stamina regeneration ~1_val~\n            if ((prop = this.m_AosAttributes.RegenHits) != 0)\n                list.Add(1060444, prop.ToString()); // hit point regeneration ~1_val~\n            if ((prop = this.m_AosArmorAttributes.SelfRepair) != 0)\n                list.Add(1060450, prop.ToString()); // self repair ~1_val~\n            if ((prop = this.m_AosAttributes.SpellChanneling) != 0)\n                list.Add(1060482); // spell channeling\n            if ((prop = this.m_AosAttributes.SpellDamage) != 0)\n                list.Add(1060483, prop.ToString()); // spell damage increase ~1_val~%\n            if ((prop = this.m_AosAttributes.BonusStam) != 0)\n                list.Add(1060484, prop.ToString()); // stamina increase ~1_val~\n            if ((prop = this.m_AosAttributes.BonusStr) != 0)\n                list.Add(1060485, prop.ToString()); // strength bonus ~1_val~\n            if ((prop = this.m_AosAttributes.WeaponSpeed) != 0)\n                list.Add(1060486, prop.ToString()); // swing speed increase ~1_val~%\n            if (Core.ML && (prop = this.m_AosAttributes.IncreasedKarmaLoss) != 0)\n                list.Add(1075210, prop.ToString()); // Increased Karma Loss ~1val~%\n            if ((prop = this.m_SAAbsorptionAttributes.EaterFire) != 0)\n                list.Add(1113593, prop.ToString()); // Fire Eater ~1_Val~%\n            if ((prop = this.m_SAAbsorptionAttributes.EaterCold) != 0)\n                list.Add(1113594, prop.ToString()); // Cold Eater ~1_Val~%\n            if ((prop = this.m_SAAbsorptionAttributes.EaterPoison) != 0)\n                list.Add(1113595, prop.ToString()); // Poison Eater ~1_Val~%\n            if ((prop = this.m_SAAbsorptionAttributes.EaterEnergy) != 0)\n                list.Add(1113596, prop.ToString()); // Energy Eater ~1_Val~%\n            if ((prop = this.m_SAAbsorptionAttributes.EaterKinetic) != 0)\n                list.Add(1113597, prop.ToString()); // Kinetic Eater ~1_Val~%\n            if ((prop = this.m_SAAbsorptionAttributes.EaterDamage) != 0)\n                list.Add(1113598, prop.ToString()); // Damage Eater ~1_Val~%\n            if ((prop = this.m_SAAbsorptionAttributes.ResonanceFire) != 0)\n                list.Add(1113691, prop.ToString()); // Fire Resonance ~1_val~%\n            if ((prop = this.m_SAAbsorptionAttributes.ResonanceCold) != 0)\n                list.Add(1113692, prop.ToString()); // Cold Resonance ~1_val~%\n            if ((prop = this.m_SAAbsorptionAttributes.ResonancePoison) != 0)\n                list.Add(1113693, prop.ToString()); // Poison Resonance ~1_val~%\n            if ((prop = this.m_SAAbsorptionAttributes.ResonanceEnergy) != 0)\n                list.Add(1113694, prop.ToString()); // Energy Resonance ~1_val~%\n            if ((prop = this.m_SAAbsorptionAttributes.ResonanceKinetic) != 0)\n                list.Add(1113695, prop.ToString()); // Kinetic Resonance ~1_val~%\n            if ((prop = m_SAAbsorptionAttributes.CastingFocus) != 0)\n                list.Add(1113696, prop.ToString()); // Casting Focus ~1_val~%\n\t\t\tif ((prop = this.m_AosArmorAttributes.SoulCharge) != 0)\n\t\t\t\tlist.Add(1113630, prop.ToString()); // Soul Charge ~1_val~%\n            if (this is SurgeShield && ((SurgeShield)this).Surge > SurgeType.None)\n                list.Add(1153098, ((SurgeShield)this).Charges.ToString());\n            AddResistanceProperties(list);\n            if ((prop = this.GetDurabilityBonus()) > 0)\n                list.Add(1060410, prop.ToString()); // durability ~1_val~%\n            if ((prop = this.ComputeStatReq(StatType.Str)) > 0)\n                list.Add(1061170, prop.ToString()); // strength requirement ~1_val~\n            if (this.m_HitPoints >= 0 && this.m_MaxHitPoints > 0)\n                list.Add(1060639, \"{0}\\t{1}\", this.m_HitPoints, this.m_MaxHitPoints); // durability ~1_val~ / ~2_val~\n            Server.Engines.XmlSpawner2.XmlAttach.AddAttachmentProperties(this, list);\n            if (this.IsSetItem && !this.m_SetEquipped)\n            {\n", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "length": 6963, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "b5c5b301413a1cf82e1459ab5cd80e6d76c457e5f0d2562b"}
{"input": "", "context": "/*\n * Copyright (c) 1998-2010 Caucho Technology -- all rights reserved\n * Copyright (c) 2011-2012 Clever Cloud SAS -- all rights reserved\n *\n * This file is part of Bianca(R) Open Source\n *\n * Each copy or derived work must preserve the copyright notice and this\n * notice unmodified.\n *\n * Bianca Open Source is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Bianca Open Source is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty\n * of NON-INFRINGEMENT.  See the GNU General Public License for more\n * details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Bianca Open Source; if not, write to the\n *\n *   Free Software Foundation, Inc.\n *   59 Temple Place, Suite 330\n *   Boston, MA 02111-1307  USA\n *\n * @author Scott Ferguson\n * @author Marc-Antoine Perennou <Marc-Antoine@Perennou.com>\n */\npackage com.clevercloud.bianca.env;\nimport com.clevercloud.bianca.BiancaModuleException;\nimport com.clevercloud.bianca.BiancaRuntimeException;\nimport com.clevercloud.bianca.lib.file.BinaryInput;\nimport com.clevercloud.bianca.marshal.Marshal;\nimport com.clevercloud.vfs.ReadStream;\nimport com.clevercloud.vfs.WriteStream;\nimport com.clevercloud.vfs.i18n.UTF8Reader;\nimport java.io.*;\nimport java.util.IdentityHashMap;\nimport java.util.zip.CRC32;\n/* TOCHECK append int */\n/**\n * Represents a PHP string\n */\npublic class StringValue\n   extends Value\n   implements CharSequence {\n   public static final StringValue EMPTY = new StringValue(\"\");\n   private static final StringValue[] CHAR_STRINGS;\n   protected static final int IS_STRING = 0;\n   protected static final int IS_LONG = 1;\n   protected static final int IS_DOUBLE = 2;\n   private StringBuilder _buffer;\n   public StringValue() {\n      _buffer = new StringBuilder();\n   }\n   public StringValue(String buffer, int offset, int length) {\n      if (offset < 0) offset = 0;\n      _buffer = new StringBuilder(buffer.substring(Math.min(offset, buffer.length()), Math.min(offset + length, buffer.length())));\n   }\n   /**\n    * Creates a new StringValue with the buffer without copying.\n    */\n   public StringValue(String buffer, int length) {\n      this(buffer, 0, length);\n   }\n   public StringValue(char ch) {\n      _buffer = new StringBuilder().append(ch);\n   }\n   public StringValue(byte ch) {\n      _buffer = new StringBuilder().append(ch);\n   }\n   public StringValue(String s) {\n      _buffer = new StringBuilder(s);\n   }\n   public StringValue(String s, Value v1) {\n      _buffer = new StringBuilder(s);\n      v1.appendTo(this);\n   }\n   public StringValue(Value v1) {\n      if (v1 instanceof StringValue) {\n         _buffer = new StringBuilder(((StringValue) v1)._buffer);\n      } else {\n         _buffer = new StringBuilder();\n         v1.appendTo(this);\n      }\n   }\n   public StringValue(Value v1, Value v2) {\n      _buffer = new StringBuilder();\n      v1.appendTo(this);\n      v2.appendTo(this);\n   }\n   public StringValue(Value v1, Value v2, Value v3) {\n      _buffer = new StringBuilder();\n      v1.appendTo(this);\n      v2.appendTo(this);\n      v3.appendTo(this);\n   }\n   /**\n    * Creates the string.\n    */\n   public static Value create(String value) {\n      if (value == null) {\n         return NullValue.NULL;\n      } else if (value.length() == 0) {\n         return StringValue.EMPTY;\n      } else {\n         return new StringValue(value);\n      }\n   }\n   /**\n    * Creates the string.\n    */\n   public static StringValue create(char value) {\n      if (value < CHAR_STRINGS.length)\n         return CHAR_STRINGS[value];\n      return new StringValue();\n   }\n   /**\n    * Creates the string.\n    */\n   public static Value create(Object value) {\n      if (value == null) {\n         return NullValue.NULL;\n      } else {\n         return new StringValue(value.toString());\n      }\n   }\n   /*\n    * Decodes the Unicode str from charset.\n    *\n    * @param str should be a Unicode string\n    * @param charset to decode string from\n    */\n   public StringValue create(Env env, StringValue unicodeStr, String charset) {\n      try {\n         StringValue sb = new StringValue();\n         byte[] bytes = unicodeStr.toString().getBytes(charset);\n         sb.append(bytes);\n         return sb;\n      } catch (UnsupportedEncodingException e) {\n         env.warning(e);\n         return unicodeStr;\n      }\n   }\n   //\n   // Predicates and relations\n   //\n   /**\n    * Returns the type.\n    */\n   @Override\n   public String getType() {\n      return \"string\";\n   }\n   /**\n    * Returns the ValueType.\n    */\n   @Override\n   public ValueType getValueType() {\n      return getValueType(_buffer.toString(), 0, _buffer.length());\n   }\n   public static ValueType getValueType(String buffer,\n                                        int offset,\n                                        int len) {\n      if (len == 0) {\n         // php/0307\n         return ValueType.LONG_ADD;\n      }\n      int i = offset;\n      int ch = 0;\n      while (i < len && Character.isWhitespace(buffer.charAt(i))) {\n         i++;\n      }\n      if (i + 1 < len && buffer.charAt(i) == '0' && buffer.charAt(i + 1) == 'x') {\n         return ValueType.LONG_EQ;\n      }\n      if (i < len && ((ch = buffer.charAt(i)) == '+' || ch == '-')) {\n         i++;\n      }\n      if (len <= i) {\n         return ValueType.STRING;\n      }\n      ch = buffer.charAt(i);\n      if (ch == '.') {\n         for (i++; i < len && '0' <= (ch = buffer.charAt(i)) && ch <= '9'; i++) {\n            return ValueType.DOUBLE_CMP;\n         }\n         return ValueType.STRING;\n      } else if (!('0' <= ch && ch <= '9')) {\n         return ValueType.STRING;\n      }\n      for (; i < len && '0' <= (ch = buffer.charAt(i)) && ch <= '9'; i++) {\n      }\n      while (i < len && Character.isWhitespace(buffer.charAt(i))) {\n         i++;\n      }\n      if (len <= i) {\n         return ValueType.LONG_EQ;\n      } else if (ch == '.' || ch == 'e' || ch == 'E') {\n         for (i++;\n              i < len\n                 && ('0' <= (ch = buffer.charAt(i)) && ch <= '9'\n                 || ch == '+'\n                 || ch == '-'\n                 || ch == 'e'\n                 || ch == 'E');\n              i++) {\n         }\n         while (i < len && Character.isWhitespace(buffer.charAt(i))) {\n            i++;\n         }\n         if (i < len) {\n            return ValueType.STRING;\n         } else {\n            return ValueType.DOUBLE_CMP;\n         }\n      } else {\n         return ValueType.STRING;\n      }\n   }\n   /**\n    * Returns true for a long\n    */\n   @Override\n   public boolean isLongConvertible() {\n      return getValueType().isLongCmp();\n   }\n   /**\n    * Returns true for a double\n    */\n   @Override\n   public boolean isDoubleConvertible() {\n      return getValueType().isNumberCmp();\n   }\n   /**\n    * Returns true for a number\n    */\n   public boolean isNumber() {\n      return false;\n   }\n   /**\n    * Returns true for is_numeric\n    */\n   @Override\n   public boolean isNumeric() {\n      // php/120y\n      return getValueType().isNumberCmp();\n   }\n   /**\n    * Returns true for a scalar\n    */\n   public boolean isScalar() {\n      return true;\n   }\n   /**\n    * Returns true for StringValue\n    */\n   @Override\n   public boolean isString() {\n      return true;\n   }\n   /**\n    * Returns true if the value is empty\n    */\n   @Override\n   public boolean isEmpty() {\n      return length() == 0 || length() == 1 && charAt(0) == '0';\n   }\n   //\n   // marshal cost\n   //\n   /**\n    * Cost to convert to a double\n    */\n   @Override\n   public int toDoubleMarshalCost() {\n      ValueType valueType = getValueType();\n      if (valueType.isLongCmp()) {\n         return Marshal.COST_TO_CHAR_ARRAY + 20;\n      } else if (valueType.isNumberCmp()) {\n         return Marshal.COST_TO_CHAR_ARRAY + 10;\n      } else {\n         return Marshal.COST_INCOMPATIBLE;\n      }\n   }\n   /**\n    * Cost to convert to a float\n    */\n   @Override\n   public int toFloatMarshalCost() {\n      ValueType valueType = getValueType();\n      if (valueType.isLongCmp()) {\n         return Marshal.COST_TO_CHAR_ARRAY + 25;\n      } else if (valueType.isNumberCmp()) {\n         return Marshal.COST_TO_CHAR_ARRAY + 15;\n      } else {\n         return Marshal.COST_INCOMPATIBLE;\n      }\n   }\n   /**\n    * Cost to convert to a long\n    */\n   @Override\n   public int toLongMarshalCost() {\n      ValueType valueType = getValueType();\n      if (valueType.isLongCmp()) {\n         return Marshal.COST_TO_CHAR_ARRAY + 10;\n      } else if (valueType.isNumberCmp()) {\n         return Marshal.COST_TO_CHAR_ARRAY + 40;\n      } else {\n         return Marshal.COST_INCOMPATIBLE;\n      }\n   }\n   /**\n    * Cost to convert to an integer\n    */\n   @Override\n   public int toIntegerMarshalCost() {\n      ValueType valueType = getValueType();\n      if (valueType.isLongCmp()) {\n         return Marshal.COST_TO_CHAR_ARRAY + 10;\n      } else if (valueType.isNumberCmp()) {\n         return Marshal.COST_TO_CHAR_ARRAY + 40;\n      } else {\n         return Marshal.COST_INCOMPATIBLE;\n      }\n   }\n   /**\n    * Cost to convert to a short\n    */\n   @Override\n   public int toShortMarshalCost() {\n      ValueType valueType = getValueType();\n      if (valueType.isLongCmp()) {\n         return Marshal.COST_TO_CHAR_ARRAY + 30;\n      } else if (valueType.isNumberCmp()) {\n         return Marshal.COST_TO_CHAR_ARRAY + 50;\n      } else {\n         return Marshal.COST_INCOMPATIBLE;\n      }\n   }\n   /**\n    * Cost to convert to a byte\n    */\n   @Override\n   public int toByteMarshalCost() {\n      ValueType valueType = getValueType();\n      if (valueType.isLongCmp()) {\n         return Marshal.COST_TO_CHAR_ARRAY + 30;\n      } else if (valueType.isNumberCmp()) {\n         return Marshal.COST_TO_CHAR_ARRAY + 50;\n      } else if (isLongConvertible()) {\n         return Marshal.COST_NUMERIC_LOSSLESS;\n      } else if (isDoubleConvertible()) {\n         return Marshal.COST_NUMERIC_LOSSY;\n      } else {\n         return Marshal.COST_STRING_TO_BYTE;\n      }\n   }\n   /**\n    * Cost to convert to a character\n    */\n   @Override\n   public int toCharMarshalCost() {\n      return Marshal.COST_STRING_TO_CHAR;\n   }\n   /**\n    * Cost to convert to a String\n    */\n   @Override\n   public int toStringMarshalCost() {\n      return Marshal.COST_EQUAL;\n   }\n   /**\n    * Cost to convert to a char[]\n    */\n   @Override\n   public int toCharArrayMarshalCost() {\n      return Marshal.COST_STRING_TO_CHAR_ARRAY;\n   }\n   /**\n    * Cost to convert to a StringValue\n    */\n   @Override\n   public int toStringValueMarshalCost() {\n      return Marshal.COST_IDENTICAL;\n   }\n   /**\n    * Returns true for equality\n    */\n   @Override\n   public int cmp(Value rValue) {\n      if (isNumberConvertible() || rValue.isNumberConvertible()) {\n         double l = toDouble();\n         double r = rValue.toDouble();\n         if (l == r) {\n            return 0;\n         } else if (l < r) {\n            return -1;\n         } else {\n            return 1;\n         }\n      } else {\n         int result = toString().compareTo(rValue.toString());\n         if (result == 0) {\n            return 0;\n         } else if (result > 0) {\n            return 1;\n         } else {\n            return -1;\n         }\n      }\n   }\n   /**\n    * Returns true for equality\n    */\n   @Override\n   public boolean eq(Value rValue) {\n      ValueType typeA = getValueType();\n      ValueType typeB = rValue.getValueType();\n      if (typeB.isNumber()) {\n         double l = toDouble();\n         double r = rValue.toDouble();\n         return l == r;\n      } else if (typeB.isBoolean()) {\n         return toBoolean() == rValue.toBoolean();\n      } else if (typeA.isNumberCmp() && typeB.isNumberCmp()) {\n         double l = toDouble();\n         double r = rValue.toDouble();\n         return l == r;\n      } else {\n         return toString().equals(rValue.toString());\n      }\n   }\n   /**\n    * Compare two strings\n    */\n   public int cmpString(StringValue rValue) {\n      return toString().compareTo(rValue.toString());\n   }\n   // Conversions\n   /**\n    * Converts to a string value.\n    */\n   @Override\n   public StringValue toStringValue() {\n      return this;\n   }\n   /**\n    * Converts to a string value.\n    */\n   @Override\n   public StringValue toStringValue(Env env) {\n      return this;\n   }\n   /**\n    * Converts to a long.\n    */\n   @Override\n   public long toLong() {\n      return toLong(_buffer.toString());\n   }\n   public static long toLong(String string) {\n      return parseLong(string);\n   }\n   /**\n    * String to long conversion routines used by this module\n    * and other modules in this package. These methods are\n    * only invoked by other implementations of a \"string\" object.\n    * The 3 implementations should be identical except for the\n    * char data source.\n    */\n   static long parseLong(String buffer, int offset, int len) {\n      if (len == 0) {\n         return 0;\n      }\n      long value = 0;\n      long sign = 1;\n      boolean isResultSet = false;\n      long result = 0;\n      int end = offset + len;\n      while (offset < end && Character.isWhitespace(buffer.charAt(offset))) {\n         offset++;\n      }\n      int ch;\n      if (offset + 1 < end && buffer.charAt(offset) == '0'\n         && ((ch = buffer.charAt(offset + 1)) == 'x' || ch == 'X')) {\n         for (offset += 2; offset < end; offset++) {\n            ch = buffer.charAt(offset);\n            long oldValue = value;\n            if ('0' <= ch && ch <= '9') {\n               value = value * 16 + ch - '0';\n            } else if ('a' <= ch && ch <= 'z') {\n               value = value * 16 + ch - 'a' + 10;\n            } else if ('A' <= ch && ch <= 'Z') {\n               value = value * 16 + ch - 'A' + 10;\n            } else {\n               return value;\n            }\n            if (value < oldValue) {\n               return Integer.MAX_VALUE;\n            }\n         }\n         return value;\n      }\n      if (offset < end && buffer.charAt(offset) == '-') {\n         sign = -1;\n         offset++;\n      } else if (offset < end && buffer.charAt(offset) == '+') {\n         sign = +1;\n         offset++;\n      }\n      while (offset < end) {\n         ch = buffer.charAt(offset++);\n         if ('0' <= ch && ch <= '9') {\n            long newValue = 10 * value + ch - '0';\n            if (newValue < value) {\n               // php/0143\n               // long value overflowed\n               result = Integer.MAX_VALUE;\n               isResultSet = true;\n               break;\n            }\n            value = newValue;\n         } else {\n            result = sign * value;\n            isResultSet = true;\n            break;\n         }\n      }\n      if (!isResultSet) {\n         result = sign * value;\n      }\n      return result;\n   }\n   static long parseLong(CharSequence string) {\n      final int len = string.length();\n      if (len == 0) {\n         return 0;\n      }\n      long value = 0;\n      long sign = 1;\n      boolean isResultSet = false;\n      long result = 0;\n      int offset = 0;\n      int end = offset + len;\n      while (offset < end && Character.isWhitespace(string.charAt(offset))) {\n         offset++;\n      }\n      if (offset < end && string.charAt(offset) == '-') {\n         sign = -1;\n         offset++;\n      } else if (offset < end && string.charAt(offset) == '+') {\n         sign = +1;\n         offset++;\n      }\n      while (offset < end) {\n         int ch = string.charAt(offset++);\n         if ('0' <= ch && ch <= '9') {\n            long newValue = 10 * value + ch - '0';\n            if (newValue < value) {\n               // long value overflowed, set result to integer max\n               result = Integer.MAX_VALUE;\n               isResultSet = true;\n               break;\n            }\n            value = newValue;\n         } else {\n            result = sign * value;\n            isResultSet = true;\n            break;\n         }\n      }\n      if (!isResultSet) {\n         result = sign * value;\n      }\n      return result;\n   }\n   /**\n    * Converts to a double.\n    */\n   @Override\n   public double toDouble() {\n      return toDouble(toString());\n   }\n   /**\n    * Converts to a double.\n    */\n   public static double toDouble(String s) {\n      int len = s.length();\n      int start = 0;\n      int i = 0;\n      int ch = 0;\n      while (i < len && Character.isWhitespace(s.charAt(i))) {\n         start++;\n         i++;\n      }\n      if (i + 1 < len && s.charAt(i) == '0'\n         && ((ch = s.charAt(i)) == 'x' || ch == 'X')) {\n         double value = 0;\n         for (i += 2; i < len; i++) {\n            ch = s.charAt(i);\n            if ('0' <= ch && ch <= '9') {\n               value = value * 16 + ch - '0';\n            } else if ('a' <= ch && ch <= 'z') {\n               value = value * 16 + ch - 'a' + 10;\n            } else if ('A' <= ch && ch <= 'Z') {\n               value = value * 16 + ch - 'A' + 10;\n            } else {\n               return value;\n            }\n         }\n         return value;\n      }\n      if (i < len && ((ch = s.charAt(i)) == '+' || ch == '-')) {\n         i++;\n      }\n      for (; i < len && '0' <= (ch = s.charAt(i)) && ch <= '9'; i++) {\n      }\n      if (ch == '.') {\n         for (i++; i < len && '0' <= (ch = s.charAt(i)) && ch <= '9'; i++) {\n         }\n      }\n      if (ch == 'e' || ch == 'E') {\n         int e = i++;\n         if (i < len && (ch = s.charAt(i)) == '+' || ch == '-') {\n            i++;\n         }\n         for (; i < len && '0' <= (ch = s.charAt(i)) && ch <= '9'; i++) {\n         }\n         if (i == e + 1) {\n            i = e;\n         }\n      }\n      if (i == 0) {\n         return 0;\n      } else if (i == len && start == 0) {\n         return Double.parseDouble(s);\n      } else {\n         return Double.parseDouble(s.substring(Math.max(0, start), i));\n      }\n   }\n   public static double toDouble(String buffer, int offset, int len) {\n      int start = offset;\n      int i = offset;\n      int ch = 0;\n      while (i < len && Character.isWhitespace(buffer.charAt(i))) {\n         start++;\n         i++;\n      }\n      int end = offset + len;\n      if (offset + 1 < end && buffer.charAt(offset) == '0'\n         && ((ch = buffer.charAt(offset + 1)) == 'x' || ch == 'X')) {\n         double value = 0;\n         for (offset += 2; offset < end; offset++) {\n            ch = buffer.charAt(offset);\n            if ('0' <= ch && ch <= '9') {\n               value = value * 16 + ch - '0';\n            } else if ('a' <= ch && ch <= 'z') {\n               value = value * 16 + ch - 'a' + 10;\n            } else if ('A' <= ch && ch <= 'Z') {\n               value = value * 16 + ch - 'A' + 10;\n            } else {\n               return value;\n            }\n         }\n         return value;\n      }\n      if (i < len && ((ch = buffer.charAt(i)) == '+' || ch == '-')) {\n         i++;\n      }\n      for (; i < len && '0' <= (ch = buffer.charAt(i)) && ch <= '9'; i++) {\n      }\n      if (ch == '.') {\n         for (i++; i < len && '0' <= (ch = buffer.charAt(i)) && ch <= '9'; i++) {\n         }\n         if (i == 1) {\n            return 0;\n         }\n      }\n      if (ch == 'e' || ch == 'E') {\n         int e = i++;\n         if (i < len && (ch = buffer.charAt(i)) == '+' || ch == '-') {\n            i++;\n         }\n         for (; i < len && '0' <= (ch = buffer.charAt(i)) && ch <= '9'; i++) {\n         }\n         if (i == e + 1) {\n            i = e;\n         }\n      }\n      if (i == 0) {\n         return 0;\n      }\n      if (start < 0) start = 0;\n      try {\n         return Double.parseDouble(buffer.substring(Math.min(start, buffer.length()), Math.min(i - start, buffer.length())));\n      } catch (NumberFormatException e) {\n         return 0;\n      }\n   }\n   /**\n    * Converts to a boolean.\n    */\n   @Override\n   public final boolean toBoolean() {\n      if (_buffer.length() == 0) {\n         return false;\n      } else {\n         return (_buffer.length() != 1 || _buffer.charAt(0) != '0');\n      }\n   }\n   /**\n    * Converts to a key.\n    */\n   @Override\n   public Value toKey() {\n      int len = length();\n      if (len == 0) {\n         return this;\n      }\n      int sign = 1;\n      long value = 0;\n      String buffer = toString();\n      int i = 0;\n      char ch = buffer.charAt(i++);\n      if ('0' <= ch && ch <= '9') {\n         value = ch - '0';\n      } else if (ch == '-' && len > 1) {\n         sign = -1;\n      } else {\n         return this;\n      }\n      for (; i < len; i++) {\n         ch = charAt(i);\n         if ('0' <= ch && ch <= '9') {\n            value = 10 * value + ch - '0';\n         } else {\n            return this;\n         }\n      }\n      return LongValue.create(sign * value);\n   }\n   /**\n    * Converts to an object.\n    */\n   @Override\n   final public Value toAutoObject(Env env) {\n      return env.createObject();\n   }\n   /**\n    * Converts to an array if null.\n    */\n   @Override\n   public Value toAutoArray() {\n      if (length() == 0) {\n         return new ArrayValueImpl();\n      } else {\n         return this;\n      }\n   }\n   /**\n    * Converts to a Java object.\n    */\n   @Override\n   public Object toJavaObject() {\n      return toString();\n   }\n   /**\n    * Takes the values of this array, unmarshalls them to objects of type\n    * <i>elementType</i>, and puts them in a java array.\n    */\n   @Override\n   public Object valuesToArray(Env env, Class elementType) {\n      if (char.class.equals(elementType)) {\n         return toCharArray();\n      } else if (Character.class.equals(elementType)) {\n         char[] chars = toCharArray();\n         int length = chars.length;\n         Character[] charObjects = new Character[length];\n         for (int i = 0; i < length; i++) {\n            charObjects[i] = Character.valueOf(chars[i]);\n         }\n         return charObjects;\n      } else if (byte.class.equals(elementType)) {\n         return toStringValue(env).toString().getBytes();\n      } else if (Byte.class.equals(elementType)) {\n         byte[] bytes = toStringValue(env).toString().getBytes();\n         int length = bytes.length;\n         Byte[] byteObjects = new Byte[length];\n         for (int i = 0; i < length; i++) {\n            byteObjects[i] = Byte.valueOf(bytes[i]);\n         }\n         return byteObjects;\n      } else {\n         env.error(L.l(\"Can't assign {0} with type {1} to {2}\",\n            this,\n            this.getClass(),\n            elementType));\n         return null;\n      }\n   }\n   /**\n    * Converts to a callable object\n    */\n   @Override\n   public Callable toCallable(Env env) {\n      // php/1h0o\n      if (isEmpty()) {\n         return super.toCallable(env);\n      }\n      String s = toString();\n      int p = s.indexOf(\"::\");\n      if (p < 0) {\n         return new CallbackFunction(env, s);\n      } else {\n         String className = s.substring(0, p);\n         String methodName = s.substring(p + 2);\n         BiancaClass cl = env.findClass(className);\n         if (cl == null) {\n            env.warning(L.l(\"can't find class {0}\",\n               className));\n            return super.toCallable(env);\n         }\n         return new CallbackClassMethod(cl, env.createString(methodName));\n      }\n   }\n   /**\n    * Sets the array value, returning the new array, e.g. to handle\n    * string update ($a[0] = 'A').  Creates an array automatically if\n    * necessary.\n    */\n   @Override\n   public Value append(Value index, Value value) {\n      if (_buffer.length() > 0) {\n         return setCharValueAt(index.toLong(), value);\n      } else {\n         return new ArrayValueImpl().append(index, value);\n      }\n   }\n   // Operations\n   /**\n    * Returns the character at an index\n    */\n   @Override\n   public Value get(Value key) {\n      return charValueAt(key.toLong());\n   }\n   @Override\n   public Value put(Value index, Value value) {\n      setCharValueAt(index.toLong(), value);\n      return value;\n   }\n   /**\n    * Returns the character at an index\n    */\n   @Override\n   public Value getArg(Value key, boolean isTop) {\n      // php/03ma\n      return charValueAt(key.toLong());\n   }\n   /**\n    * Returns the character at an index\n    */\n   @Override\n   public Value charValueAt(long index) {\n      int len = length();\n      if (index < 0 || len <= index) {\n         return StringValue.EMPTY;\n      } else {\n         return StringValue.create(charAt((int) index));\n      }\n   }\n   /**\n    * sets the character at an index\n    */\n   @Override\n   public Value setCharValueAt(long indexL, Value value) {\n      int len = _buffer.length();\n      if (indexL < 0) {\n         return this;\n      } else if (indexL < len) {\n         StringValue sb = new StringValue(_buffer.toString());\n         StringValue str = value.toStringValue();\n         int index = (int) indexL;\n         if (value.length() == 0) {\n            sb._buffer.setCharAt(index, (char) 0);\n         } else {\n            sb._buffer.setCharAt(index, str.charAt(0));\n         }\n         return sb;\n      } else {\n         // php/03mg, #2940\n         int index = (int) indexL;\n         StringValue sb = new StringValue(this);\n         int padLen = index - len;\n         for (int i = 0; i <= padLen; i++) {\n            sb._buffer.append(' ');\n         }\n         StringValue str = value.toStringValue();\n         if (value.length() == 0) {\n            sb._buffer.setCharAt(index, (char) 0);\n         } else {\n            sb._buffer.setCharAt(index, str.charAt(0));\n         }\n         return sb;\n      }\n   }\n   /**\n    * Converts to a string.\n    */\n   @Override\n   public String toString() {\n      return _buffer.toString();\n   }\n   /**\n    * Increment the following value.\n    */\n   @Override\n   public Value increment(int incr) {\n      // php/03i6\n      if (length() == 0) {\n         if (incr == 1) {\n            return new StringValue().append(\"1\");\n         } else {\n            return LongValue.MINUS_ONE;\n         }\n      }\n      if (incr > 0) {\n         StringBuilder tail = new StringBuilder();\n         for (int i = length() - 1; i >= 0; i--) {\n            char ch = charAt(i);\n            if (ch == 'z') {\n               if (i == 0) {\n                  return new StringValue().append(\"aa\").append(tail);\n               } else {\n                  tail.insert(0, 'a');\n               }\n            } else if ('a' <= ch && ch < 'z') {\n               return (new StringValue().append(this, 0, i).append((char) (ch + 1)).append(tail));\n            } else if (ch == 'Z') {\n               if (i == 0) {\n                  return new StringValue().append(\"AA\").append(tail);\n               } else {\n                  tail.insert(0, 'A');\n               }\n            } else if ('A' <= ch && ch < 'Z') {\n               return (new StringValue().append(this, 0, i).append((char) (ch + 1)).append(tail));\n            } else if ('0' <= ch && ch <= '9' && i == length() - 1) {\n               return LongValue.create(toLong() + incr);\n            }\n         }\n         return new StringValue().append(tail.toString());\n      } else if (getValueType().isLongAdd()) {\n         return LongValue.create(toLong() + incr);\n      } else {\n         return this;\n      }\n   }\n   /**\n    * Adds to the following value.\n    */\n   @Override\n   public Value add(long rValue) {\n      if (getValueType().isLongAdd()) {\n         return LongValue.create(toLong() + rValue);\n      }\n      return DoubleValue.create(toDouble() + rValue);\n   }\n   /**\n    * Adds to the following value.\n    */\n   @Override\n   public Value sub(long rValue) {\n      if (getValueType().isLongAdd()) {\n         return LongValue.create(toLong() - rValue);\n      }\n      return DoubleValue.create(toDouble() - rValue);\n   }\n   /*\n    * Bit and.\n    */\n   @Override\n   public Value bitAnd(Value rValue) {\n      if (rValue.isString()) {\n         StringValue rStr = (StringValue) rValue;\n         int len = Math.min(length(), rValue.length());\n         StringValue sb = new StringValue();\n         for (int i = 0; i < len; i++) {\n            char l = charAt(i);\n            char r = rStr.charAt(i);\n            sb.append(l & r);\n         }\n         return sb;\n      } else {\n         return LongValue.create(toLong() & rValue.toLong());\n      }\n   }\n   /*\n    * Bit or.\n    */\n   @Override\n   public Value bitOr(Value rValue) {\n      if (rValue.isString()) {\n         StringValue rStr = (StringValue) rValue;\n         int len = Math.min(length(), rValue.length());\n         StringValue sb = new StringValue();\n         for (int i = 0; i < len; i++) {\n            char l = charAt(i);\n            char r = rStr.charAt(i);\n            sb.append(l | r);\n         }\n         if (len != length()) {\n            sb.append(substring(len));\n         } else if (len != rStr.length()) {\n            sb.append(rStr.substring(len));\n         }\n         return sb;\n      } else {\n         return LongValue.create(toLong() | rValue.toLong());\n      }\n   }\n   /*\n    * Bit xor.\n    */\n   @Override\n   public Value bitXor(Value rValue) {\n      if (rValue.isString()) {\n         StringValue rStr = rValue.toStringValue();\n         int len = Math.min(length(), rValue.length());\n         StringValue sb = new StringValue();\n         for (int i = 0; i < len; i++) {\n            char l = charAt(i);\n            char r = rStr.charAt(i);\n            sb.append(l ^ r);\n         }\n         return sb;\n      } else {\n         return LongValue.create(toLong() ^ rValue.toLong());\n      }\n   }\n   /**\n    * Serializes the value.\n    */\n   @Override\n   public void serialize(Env env, StringBuilder sb) {\n      sb.append(\"s:\");\n      sb.append(length());\n      sb.append(\":\\\"\");\n      sb.append(toString());\n      sb.append(\"\\\";\");\n   }\n   /**\n    * Encodes the value in JSON.\n    */\n   @Override\n   public void jsonEncode(Env env, StringValue sb) {\n      sb.append('\"');\n      int len = length();\n      for (int i = 0; i < len; i++) {\n         char c = charAt(i);\n         switch (c) {\n            case '\\b':\n               sb.append('\\\\');\n               sb.append('b');\n               break;\n            case '\\f':\n               sb.append('\\\\');\n               sb.append('f');\n               break;\n            case '\\n':\n               sb.append('\\\\');\n               sb.append('n');\n               break;\n            case '\\r':\n               sb.append('\\\\');\n               sb.append('r');\n               break;\n            case '\\t':\n               sb.append('\\\\');\n               sb.append('t');\n               break;\n            case '\\\\':\n               sb.append('\\\\');\n               sb.append('\\\\');\n               break;\n            case '\"':\n               sb.append('\\\\');\n               sb.append('\"');\n               break;\n            case '/':\n               sb.append('\\\\');\n               sb.append('/');\n               break;\n            default:\n               if (c <= 0x1f) {\n                  addUnicode(sb, c);\n               } else if (c < 0x80) {\n                  sb.append(c);\n               } else if ((c & 0xe0) == 0xc0 && i + 1 < len) {\n                  int c1 = charAt(i + 1);\n                  i++;\n                  int ch = ((c & 0x1f) << 6) + (c1 & 0x3f);\n                  addUnicode(sb, ch);\n               } else if ((c & 0xf0) == 0xe0 && i + 2 < len) {\n                  int c1 = charAt(i + 1);\n                  int c2 = charAt(i + 2);\n                  i += 2;\n                  int ch = ((c & 0x0f) << 12) + ((c1 & 0x3f) << 6) + (c2 & 0x3f);\n                  addUnicode(sb, ch);\n               } else {\n                  // technically illegal\n                  addUnicode(sb, c);\n               }\n               break;\n         }\n      }\n      sb.append('\"');\n   }\n   private void addUnicode(StringValue sb, int c) {\n      sb.append('\\\\');\n      sb.append('u');\n      int d = (c >> 12) & 0xf;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else {\n", "answers": ["         sb.append((char) ('a' + d - 10));"], "length": 4005, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "6c7fc0dfbb754f9bc08f08a9190c83e8e7012dfd598e020a"}
{"input": "", "context": "/*\nTShock, a server mod for Terraria\nCopyright (C) 2011-2019 Pryaxis & TShock Contributors\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Diagnostics;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Reflection;\nusing MaxMind;\nusing Mono.Data.Sqlite;\nusing MySql.Data.MySqlClient;\nusing Newtonsoft.Json;\nusing Rests;\nusing Terraria;\nusing Terraria.ID;\nusing Terraria.Localization;\nusing TerrariaApi.Server;\nusing TShockAPI.DB;\nusing TShockAPI.Hooks;\nusing TShockAPI.ServerSideCharacters;\nusing Terraria.Utilities;\nusing Microsoft.Xna.Framework;\nusing TShockAPI.Sockets;\nusing TShockAPI.CLI;\nusing TShockAPI.Localization;\nnamespace TShockAPI\n{\n\t/// <summary>\n\t/// This is the TShock main class. TShock is a plugin on the TerrariaServerAPI, so it extends the base TerrariaPlugin.\n\t/// TShock also complies with the API versioning system, and defines its required API version here.\n\t/// </summary>\n\t[ApiVersion(2, 1)]\n\tpublic class TShock : TerrariaPlugin\n\t{\n\t\t/// <summary>VersionNum - The version number the TerrariaAPI will return back to the API. We just use the Assembly info.</summary>\n\t\tpublic static readonly Version VersionNum = Assembly.GetExecutingAssembly().GetName().Version;\n\t\t/// <summary>VersionCodename - The version codename is displayed when the server starts. Inspired by software codenames conventions.</summary>\n\t\tpublic static readonly string VersionCodename = \"Go to sleep Patrikkk, Icy, Chris, Death, Axeel, Zaicon, hakusaro, Zack, and Yoraiz0r <3\";\n\t\t/// <summary>SavePath - This is the path TShock saves its data in. This path is relative to the TerrariaServer.exe (not in ServerPlugins).</summary>\n\t\tpublic static string SavePath = \"tshock\";\n\t\t/// <summary>LogFormatDefault - This is the default log file naming format. Actually, this is the only log format, because it never gets set again.</summary>\n\t\tprivate const string LogFormatDefault = \"yyyy-MM-dd_HH-mm-ss\";\n\t\t//TODO: Set the log path in the config file.\n\t\t/// <summary>LogFormat - This is the log format, which is never set again.</summary>\n\t\tprivate static string LogFormat = LogFormatDefault;\n\t\t/// <summary>LogPathDefault - The default log path.</summary>\n\t\tprivate const string LogPathDefault = \"tshock\";\n\t\t/// <summary>This is the log path, which is initially set to the default log path, and then to the config file log path later.</summary>\n\t\tprivate static string LogPath = LogPathDefault;\n\t\t/// <summary>LogClear - Determines whether or not the log file should be cleared on initialization.</summary>\n\t\tprivate static bool LogClear;\n\t\t/// <summary>Will be set to true once Utils.StopServer() is called.</summary>\n\t\tpublic static bool ShuttingDown;\n\t\t/// <summary>Players - Contains all TSPlayer objects for accessing TSPlayers currently on the server</summary>\n\t\tpublic static TSPlayer[] Players = new TSPlayer[Main.maxPlayers];\n\t\t/// <summary>Bans - Static reference to the ban manager for accessing bans & related functions.</summary>\n\t\tpublic static BanManager Bans;\n\t\t/// <summary>Warps - Static reference to the warp manager for accessing the warp system.</summary>\n\t\tpublic static WarpManager Warps;\n\t\t/// <summary>Regions - Static reference to the region manager for accessing the region system.</summary>\n\t\tpublic static RegionManager Regions;\n\t\t/// <summary>Backups - Static reference to the backup manager for accessing the backup system.</summary>\n\t\tpublic static BackupManager Backups;\n\t\t/// <summary>Groups - Static reference to the group manager for accessing the group system.</summary>\n\t\tpublic static GroupManager Groups;\n\t\t/// <summary>Users - Static reference to the user manager for accessing the user database system.</summary>\n\t\tpublic static UserAccountManager UserAccounts;\n\t\t/// <summary>Itembans - Static reference to the item ban system.</summary>\n\t\tpublic static ItemManager Itembans;\n\t\t/// <summary>ProjectileBans - Static reference to the projectile ban system.</summary>\n\t\tpublic static ProjectileManagager ProjectileBans;\n\t\t/// <summary>TileBans - Static reference to the tile ban system.</summary>\n\t\tpublic static TileManager TileBans;\n\t\t/// <summary>RememberedPos - Static reference to the remembered position manager.</summary>\n\t\tpublic static RememberedPosManager RememberedPos;\n\t\t/// <summary>CharacterDB - Static reference to the SSC character manager.</summary>\n\t\tpublic static CharacterManager CharacterDB;\n\t\t/// <summary>Contains the information about what research has been performed in Journey mode.</summary>\n\t\tpublic static ResearchDatastore ResearchDatastore;\n\t\t/// <summary>Config - Static reference to the config system, for accessing values set in users' config files.</summary>\n\t\tpublic static ConfigFile Config { get; set; }\n\t\t/// <summary>ServerSideCharacterConfig - Static reference to the server side character config, for accessing values set by users to modify SSC.</summary>\n\t\tpublic static ServerSideConfig ServerSideCharacterConfig;\n\t\t/// <summary>DB - Static reference to the database.</summary>\n\t\tpublic static IDbConnection DB;\n\t\t/// <summary>OverridePort - Determines if TShock should override the server port.</summary>\n\t\tpublic static bool OverridePort;\n\t\t/// <summary>Geo - Static reference to the GeoIP system which determines the location of an IP address.</summary>\n\t\tpublic static GeoIPCountry Geo;\n\t\t/// <summary>RestApi - Static reference to the Rest API authentication manager.</summary>\n\t\tpublic static SecureRest RestApi;\n\t\t/// <summary>RestManager - Static reference to the Rest API manager.</summary>\n\t\tpublic static RestManager RestManager;\n\t\t/// <summary>Utils - Static reference to the utilities class, which contains a variety of utility functions.</summary>\n\t\tpublic static Utils Utils = Utils.Instance;\n\t\t/// <summary>UpdateManager - Static reference to the update checker, which checks for updates and notifies server admins of updates.</summary>\n\t\tpublic static UpdateManager UpdateManager;\n\t\t/// <summary>Log - Static reference to the log system, which outputs to either SQL or a text file, depending on user config.</summary>\n\t\tpublic static ILog Log;\n\t\t/// <summary>instance - Static reference to the TerrariaPlugin instance.</summary>\n\t\tpublic static TerrariaPlugin instance;\n\t\t/// <summary>\n\t\t/// Static reference to a <see cref=\"CommandLineParser\"/> used for simple command-line parsing\n\t\t/// </summary>\n\t\tpublic static CommandLineParser CliParser { get; } = new CommandLineParser();\n\t\t/// <summary>\n\t\t/// Used for implementing REST Tokens prior to the REST system starting up.\n\t\t/// </summary>\n\t\tpublic static Dictionary<string, SecureRest.TokenData> RESTStartupTokens = new Dictionary<string, SecureRest.TokenData>();\n\t\t/// <summary>The TShock anti-cheat/anti-exploit system.</summary>\n\t\tinternal Bouncer Bouncer;\n\t\t/// <summary>The TShock item ban system.</summary>\n\t\tinternal ItemBans ItemBans;\n\t\t/// <summary>\n\t\t/// TShock's Region subsystem.\n\t\t/// </summary>\n\t\tinternal RegionHandler RegionSystem;\n\t\t/// <summary>\n\t\t/// Called after TShock is initialized. Useful for plugins that needs hooks before tshock but also depend on tshock being loaded.\n\t\t/// </summary>\n\t\tpublic static event Action Initialized;\n\t\t/// <summary>Version - The version required by the TerrariaAPI to be passed back for checking & loading the plugin.</summary>\n\t\t/// <value>value - The version number specified in the Assembly, based on the VersionNum variable set in this class.</value>\n\t\tpublic override Version Version\n\t\t{\n\t\t\tget { return VersionNum; }\n\t\t}\n\t\t/// <summary>Name - The plugin name.</summary>\n\t\t/// <value>value - \"TShock\"</value>\n\t\tpublic override string Name\n\t\t{\n\t\t\tget { return \"TShock\"; }\n\t\t}\n\t\t/// <summary>Author - The author of the plugin.</summary>\n\t\t/// <value>value - \"The TShock Team\"</value>\n\t\tpublic override string Author\n\t\t{\n\t\t\tget { return \"The TShock Team\"; }\n\t\t}\n\t\t/// <summary>Description - The plugin description.</summary>\n\t\t/// <value>value - \"The administration modification of the future.\"</value>\n\t\tpublic override string Description\n\t\t{\n\t\t\tget { return \"The administration modification of the future.\"; }\n\t\t}\n\t\t/// <summary>TShock - The constructor for the TShock plugin.</summary>\n\t\t/// <param name=\"game\">game - The Terraria main game.</param>\n\t\tpublic TShock(Main game)\n\t\t\t: base(game)\n\t\t{\n\t\t\tConfig = new ConfigFile();\n\t\t\tServerSideCharacterConfig = new ServerSideConfig();\n\t\t\tServerSideCharacterConfig.StartingInventory.Add(new NetItem(-15, 1, 0));\n\t\t\tServerSideCharacterConfig.StartingInventory.Add(new NetItem(-13, 1, 0));\n\t\t\tServerSideCharacterConfig.StartingInventory.Add(new NetItem(-16, 1, 0));\n\t\t\tOrder = 0;\n\t\t\tinstance = this;\n\t\t}\n\t\t/// <summary>Initialize - Called by the TerrariaServerAPI during initialization.</summary>\n\t\t[SuppressMessage(\"Microsoft.Security\", \"CA2122:DoNotIndirectlyExposeMethodsWithLinkDemands\")]\n\t\tpublic override void Initialize()\n\t\t{\n\t\t\tstring logFilename;\n\t\t\tstring logPathSetupWarning;\n\t\t\tOTAPI.Hooks.Net.Socket.Create = () =>\n\t\t\t{\n\t\t\t\t//Console.WriteLine($\"Creating socket {nameof(LinuxTcpSocket)}\");\n\t\t\t\treturn new LinuxTcpSocket();\n\t\t\t\t//return new OTAPI.Sockets.PoolSocket();\n\t\t\t\t//return new Terraria.Net.Sockets.TcpSocket();\n\t\t\t};\n\t\t\tOTAPI.Hooks.Player.Announce = (int playerId) =>\n\t\t\t{\n\t\t\t\t//TShock handles this\n\t\t\t\treturn OTAPI.HookResult.Cancel;\n\t\t\t};\n\t\t\tMain.SettingsUnlock_WorldEvil = true;\n\t\t\tTerrariaApi.Reporting.CrashReporter.HeapshotRequesting += CrashReporter_HeapshotRequesting;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tCliParser.Reset();\n\t\t\t\tHandleCommandLine(Environment.GetCommandLineArgs());\n\t\t\t\tif (!Directory.Exists(SavePath))\n\t\t\t\t\tDirectory.CreateDirectory(SavePath);\n\t\t\t\tConfigFile.ConfigRead += OnConfigRead;\n\t\t\t\tFileTools.SetupConfig();\n\t\t\t\tMain.ServerSideCharacter = ServerSideCharacterConfig.Enabled;\n\t\t\t\t//TSAPI previously would do this automatically, but the vanilla server wont\n\t\t\t\tif (Netplay.ServerIP == null)\n\t\t\t\t\tNetplay.ServerIP = IPAddress.Any;\n\t\t\t\tDateTime now = DateTime.Now;\n\t\t\t\t// Log path was not already set by the command line parameter?\n\t\t\t\tif (LogPath == LogPathDefault)\n\t\t\t\t\tLogPath = Config.LogPath;\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tlogFilename = Path.Combine(LogPath, now.ToString(LogFormat) + \".log\");\n\t\t\t\t\tif (!Directory.Exists(LogPath))\n\t\t\t\t\t\tDirectory.CreateDirectory(LogPath);\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex)\n\t\t\t\t{\n\t\t\t\t\tlogPathSetupWarning =\n\t\t\t\t\t\t\"Could not apply the given log path / log format, defaults will be used. Exception details:\\n\" + ex;\n\t\t\t\t\tServerApi.LogWriter.PluginWriteLine(this, logPathSetupWarning, TraceLevel.Error);\n\t\t\t\t\t// Problem with the log path or format use the default\n\t\t\t\t\tlogFilename = Path.Combine(LogPathDefault, now.ToString(LogFormatDefault) + \".log\");\n\t\t\t\t}\n\t\t\t\tAppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t// Will be handled by the server api and written to its crashlog.txt.\n\t\t\t\tthrow new Exception(\"Fatal TShock initialization exception. See inner exception for details.\", ex);\n\t\t\t}\n\t\t\t// Further exceptions are written to TShock's log from now on.\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (Config.StorageType.ToLower() == \"sqlite\")\n\t\t\t\t{\n\t\t\t\t\tstring sql = Path.Combine(SavePath, Config.SqliteDBPath);\n\t\t\t\t\tDirectory.CreateDirectory(Path.GetDirectoryName(sql));\n\t\t\t\t\tDB = new SqliteConnection(string.Format(\"uri=file://{0},Version=3\", sql));\n\t\t\t\t}\n\t\t\t\telse if (Config.StorageType.ToLower() == \"mysql\")\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tvar hostport = Config.MySqlHost.Split(':');\n\t\t\t\t\t\tDB = new MySqlConnection();\n\t\t\t\t\t\tDB.ConnectionString =\n\t\t\t\t\t\t\tString.Format(\"Server={0}; Port={1}; Database={2}; Uid={3}; Pwd={4};\",\n\t\t\t\t\t\t\t\thostport[0],\n\t\t\t\t\t\t\t\thostport.Length > 1 ? hostport[1] : \"3306\",\n\t\t\t\t\t\t\t\tConfig.MySqlDbName,\n\t\t\t\t\t\t\t\tConfig.MySqlUsername,\n\t\t\t\t\t\t\t\tConfig.MySqlPassword\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (MySqlException ex)\n\t\t\t\t\t{\n\t\t\t\t\t\tServerApi.LogWriter.PluginWriteLine(this, ex.ToString(), TraceLevel.Error);\n\t\t\t\t\t\tthrow new Exception(\"MySql not setup correctly\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthrow new Exception(\"Invalid storage type\");\n\t\t\t\t}\n\t\t\t\tif (Config.UseSqlLogs)\n\t\t\t\t\tLog = new SqlLog(DB, logFilename, LogClear);\n\t\t\t\telse\n\t\t\t\t\tLog = new TextLog(logFilename, LogClear);\n\t\t\t\tif (File.Exists(Path.Combine(SavePath, \"tshock.pid\")))\n\t\t\t\t{\n\t\t\t\t\tLog.ConsoleInfo(\n\t\t\t\t\t\t\"TShock was improperly shut down. Please use the exit command in the future to prevent this.\");\n\t\t\t\t\tFile.Delete(Path.Combine(SavePath, \"tshock.pid\"));\n\t\t\t\t}\n\t\t\t\tFile.WriteAllText(Path.Combine(SavePath, \"tshock.pid\"),\n\t\t\t\t\tProcess.GetCurrentProcess().Id.ToString(CultureInfo.InvariantCulture));\n\t\t\t\tCliParser.Reset();\n\t\t\t\tHandleCommandLinePostConfigLoad(Environment.GetCommandLineArgs());\n\t\t\t\tBackups = new BackupManager(Path.Combine(SavePath, \"backups\"));\n\t\t\t\tBackups.KeepFor = Config.BackupKeepFor;\n\t\t\t\tBackups.Interval = Config.BackupInterval;\n\t\t\t\tBans = new BanManager(DB);\n\t\t\t\tWarps = new WarpManager(DB);\n\t\t\t\tRegions = new RegionManager(DB);\n\t\t\t\tUserAccounts = new UserAccountManager(DB);\n\t\t\t\tGroups = new GroupManager(DB);\n\t\t\t\tItembans = new ItemManager(DB);\n\t\t\t\tProjectileBans = new ProjectileManagager(DB);\n\t\t\t\tTileBans = new TileManager(DB);\n\t\t\t\tRememberedPos = new RememberedPosManager(DB);\n\t\t\t\tCharacterDB = new CharacterManager(DB);\n\t\t\t\tResearchDatastore = new ResearchDatastore(DB);\n\t\t\t\tRestApi = new SecureRest(Netplay.ServerIP, Config.RestApiPort);\n\t\t\t\tRestManager = new RestManager(RestApi);\n\t\t\t\tRestManager.RegisterRestfulCommands();\n\t\t\t\tBouncer = new Bouncer();\n\t\t\t\tRegionSystem = new RegionHandler(Regions);\n\t\t\t\tItemBans = new ItemBans(this, DB);\n\t\t\t\tvar geoippath = \"GeoIP.dat\";\n\t\t\t\tif (Config.EnableGeoIP && File.Exists(geoippath))\n\t\t\t\t\tGeo = new GeoIPCountry(geoippath);\n\t\t\t\tLog.ConsoleInfo(\"TShock {0} ({1}) now running.\", Version, VersionCodename);\n\t\t\t\tServerApi.Hooks.GamePostInitialize.Register(this, OnPostInit);\n\t\t\t\tServerApi.Hooks.GameUpdate.Register(this, OnUpdate);\n\t\t\t\tServerApi.Hooks.GameHardmodeTileUpdate.Register(this, OnHardUpdate);\n\t\t\t\tServerApi.Hooks.GameStatueSpawn.Register(this, OnStatueSpawn);\n\t\t\t\tServerApi.Hooks.ServerConnect.Register(this, OnConnect);\n\t\t\t\tServerApi.Hooks.ServerJoin.Register(this, OnJoin);\n\t\t\t\tServerApi.Hooks.ServerLeave.Register(this, OnLeave);\n\t\t\t\tServerApi.Hooks.ServerChat.Register(this, OnChat);\n\t\t\t\tServerApi.Hooks.ServerCommand.Register(this, ServerHooks_OnCommand);\n\t\t\t\tServerApi.Hooks.NetGetData.Register(this, OnGetData);\n\t\t\t\tServerApi.Hooks.NetSendData.Register(this, NetHooks_SendData);\n\t\t\t\tServerApi.Hooks.NetGreetPlayer.Register(this, OnGreetPlayer);\n\t\t\t\tServerApi.Hooks.NpcStrike.Register(this, NpcHooks_OnStrikeNpc);\n\t\t\t\tServerApi.Hooks.ProjectileSetDefaults.Register(this, OnProjectileSetDefaults);\n\t\t\t\tServerApi.Hooks.WorldStartHardMode.Register(this, OnStartHardMode);\n\t\t\t\tServerApi.Hooks.WorldSave.Register(this, SaveManager.Instance.OnSaveWorld);\n\t\t\t\tServerApi.Hooks.WorldChristmasCheck.Register(this, OnXmasCheck);\n\t\t\t\tServerApi.Hooks.WorldHalloweenCheck.Register(this, OnHalloweenCheck);\n\t\t\t\tServerApi.Hooks.NetNameCollision.Register(this, NetHooks_NameCollision);\n\t\t\t\tServerApi.Hooks.ItemForceIntoChest.Register(this, OnItemForceIntoChest);\n\t\t\t\tServerApi.Hooks.WorldGrassSpread.Register(this, OnWorldGrassSpread);\n\t\t\t\tHooks.PlayerHooks.PlayerPreLogin += OnPlayerPreLogin;\n\t\t\t\tHooks.PlayerHooks.PlayerPostLogin += OnPlayerLogin;\n\t\t\t\tHooks.AccountHooks.AccountDelete += OnAccountDelete;\n\t\t\t\tHooks.AccountHooks.AccountCreate += OnAccountCreate;\n\t\t\t\tGetDataHandlers.InitGetDataHandler();\n\t\t\t\tCommands.InitCommands();\n\t\t\t\tEnglishLanguage.Initialize();\n\t\t\t\tif (Config.RestApiEnabled)\n\t\t\t\t\tRestApi.Start();\n\t\t\t\tLog.ConsoleInfo(\"AutoSave \" + (Config.AutoSave ? \"Enabled\" : \"Disabled\"));\n\t\t\t\tLog.ConsoleInfo(\"Backups \" + (Backups.Interval > 0 ? \"Enabled\" : \"Disabled\"));\n\t\t\t\tif (Initialized != null)\n\t\t\t\t\tInitialized();\n\t\t\t\tLog.ConsoleInfo(\"Welcome to TShock for Terraria!\");\n\t\t\t\tLog.ConsoleInfo(\"TShock comes with no warranty & is free software.\");\n\t\t\t\tLog.ConsoleInfo(\"You can modify & distribute it under the terms of the GNU GPLv3.\");\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tLog.Error(\"Fatal Startup Exception\");\n\t\t\t\tLog.Error(ex.ToString());\n\t\t\t\tEnvironment.Exit(1);\n\t\t\t}\n\t\t}\n\t\tprotected void CrashReporter_HeapshotRequesting(object sender, EventArgs e)\n\t\t{\n\t\t\tforeach (TSPlayer player in TShock.Players)\n\t\t\t{\n\t\t\t\tplayer.Account = null;\n\t\t\t}\n\t\t}\n\t\t/// <summary>Dispose - Called when disposing.</summary>\n\t\t/// <param name=\"disposing\">disposing - If set, disposes of all hooks and other systems.</param>\n\t\tprotected override void Dispose(bool disposing)\n\t\t{\n\t\t\tif (disposing)\n\t\t\t{\n\t\t\t\t// NOTE: order is important here\n\t\t\t\tif (Geo != null)\n\t\t\t\t{\n\t\t\t\t\tGeo.Dispose();\n\t\t\t\t}\n\t\t\t\tSaveManager.Instance.Dispose();\n\t\t\t\tServerApi.Hooks.GamePostInitialize.Deregister(this, OnPostInit);\n\t\t\t\tServerApi.Hooks.GameUpdate.Deregister(this, OnUpdate);\n\t\t\t\tServerApi.Hooks.GameHardmodeTileUpdate.Deregister(this, OnHardUpdate);\n\t\t\t\tServerApi.Hooks.GameStatueSpawn.Deregister(this, OnStatueSpawn);\n\t\t\t\tServerApi.Hooks.ServerConnect.Deregister(this, OnConnect);\n\t\t\t\tServerApi.Hooks.ServerJoin.Deregister(this, OnJoin);\n\t\t\t\tServerApi.Hooks.ServerLeave.Deregister(this, OnLeave);\n\t\t\t\tServerApi.Hooks.ServerChat.Deregister(this, OnChat);\n\t\t\t\tServerApi.Hooks.ServerCommand.Deregister(this, ServerHooks_OnCommand);\n\t\t\t\tServerApi.Hooks.NetGetData.Deregister(this, OnGetData);\n\t\t\t\tServerApi.Hooks.NetSendData.Deregister(this, NetHooks_SendData);\n\t\t\t\tServerApi.Hooks.NetGreetPlayer.Deregister(this, OnGreetPlayer);\n\t\t\t\tServerApi.Hooks.NpcStrike.Deregister(this, NpcHooks_OnStrikeNpc);\n\t\t\t\tServerApi.Hooks.ProjectileSetDefaults.Deregister(this, OnProjectileSetDefaults);\n\t\t\t\tServerApi.Hooks.WorldStartHardMode.Deregister(this, OnStartHardMode);\n\t\t\t\tServerApi.Hooks.WorldSave.Deregister(this, SaveManager.Instance.OnSaveWorld);\n\t\t\t\tServerApi.Hooks.WorldChristmasCheck.Deregister(this, OnXmasCheck);\n\t\t\t\tServerApi.Hooks.WorldHalloweenCheck.Deregister(this, OnHalloweenCheck);\n\t\t\t\tServerApi.Hooks.NetNameCollision.Deregister(this, NetHooks_NameCollision);\n\t\t\t\tServerApi.Hooks.ItemForceIntoChest.Deregister(this, OnItemForceIntoChest);\n\t\t\t\tServerApi.Hooks.WorldGrassSpread.Deregister(this, OnWorldGrassSpread);\n\t\t\t\tTShockAPI.Hooks.PlayerHooks.PlayerPostLogin -= OnPlayerLogin;\n\t\t\t\tif (File.Exists(Path.Combine(SavePath, \"tshock.pid\")))\n\t\t\t\t{\n\t\t\t\t\tFile.Delete(Path.Combine(SavePath, \"tshock.pid\"));\n\t\t\t\t}\n\t\t\t\tRestApi.Dispose();\n\t\t\t\tLog.Dispose();\n\t\t\t\tRegionSystem.Dispose();\n\t\t\t}\n\t\t\tbase.Dispose(disposing);\n\t\t}\n\t\t/// <summary>OnPlayerLogin - Fires the PlayerLogin hook to listening plugins.</summary>\n\t\t/// <param name=\"args\">args - The PlayerPostLoginEventArgs object.</param>\n\t\tprivate void OnPlayerLogin(PlayerPostLoginEventArgs args)\n\t\t{\n\t\t\tList<String> KnownIps = new List<string>();\n\t\t\tif (!string.IsNullOrWhiteSpace(args.Player.Account.KnownIps))\n\t\t\t{\n\t\t\t\tKnownIps = JsonConvert.DeserializeObject<List<String>>(args.Player.Account.KnownIps);\n\t\t\t}\n\t\t\tif (KnownIps.Count == 0)\n\t\t\t{\n\t\t\t\tKnownIps.Add(args.Player.IP);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbool last = KnownIps.Last() == args.Player.IP;\n\t\t\t\tif (!last)\n\t\t\t\t{\n\t\t\t\t\tif (KnownIps.Count == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tKnownIps.RemoveAt(0);\n\t\t\t\t\t}\n\t\t\t\t\tKnownIps.Add(args.Player.IP);\n\t\t\t\t}\n\t\t\t}\n\t\t\targs.Player.Account.KnownIps = JsonConvert.SerializeObject(KnownIps, Formatting.Indented);\n\t\t\tUserAccounts.UpdateLogin(args.Player.Account);\n\t\t\tBan potentialBan = Bans.GetBanByAccountName(args.Player.Account.Name);\n\t\t\tif (potentialBan != null)\n\t\t\t{\n\t\t\t\t// A user just signed in successfully despite being banned by account name.\n\t\t\t\t// We should fix the ban database so that all of their ban info is up to date.\n\t\t\t\tBans.AddBan(args.Player.IP, args.Player.Name, args.Player.UUID, args.Player.Account.Name,\n\t\t\t\t\tpotentialBan.Reason, false, potentialBan.BanningUser, potentialBan.Expiration);\n\t\t\t\t// And then get rid of them.\n\t\t\t\tif (potentialBan.Expiration == \"\")\n\t\t\t\t{\n\t\t\t\t\targs.Player.Kick(String.Format(\"Permanently banned by {0} for {1}\", potentialBan.BanningUser\n\t\t\t\t\t\t,potentialBan.Reason), true, true);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\targs.Player.Kick(String.Format(\"Still banned by {0} for {1}\", potentialBan.BanningUser,\n\t\t\t\t\t\tpotentialBan.Reason), true, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>OnAccountDelete - Internal hook fired on account delete.</summary>\n\t\t/// <param name=\"args\">args - The AccountDeleteEventArgs object.</param>\n\t\tprivate void OnAccountDelete(Hooks.AccountDeleteEventArgs args)\n\t\t{\n\t\t\tCharacterDB.RemovePlayer(args.Account.ID);\n\t\t}\n\t\t/// <summary>OnAccountCreate - Internal hook fired on account creation.</summary>\n\t\t/// <param name=\"args\">args - The AccountCreateEventArgs object.</param>\n\t\tprivate void OnAccountCreate(Hooks.AccountCreateEventArgs args)\n\t\t{\n\t\t\tCharacterDB.SeedInitialData(UserAccounts.GetUserAccount(args.Account));\n\t\t}\n\t\t/// <summary>OnPlayerPreLogin - Internal hook fired when on player pre login.</summary>\n\t\t/// <param name=\"args\">args - The PlayerPreLoginEventArgs object.</param>\n\t\tprivate void OnPlayerPreLogin(Hooks.PlayerPreLoginEventArgs args)\n\t\t{\n\t\t\tif (args.Player.IsLoggedIn)\n\t\t\t\targs.Player.SaveServerCharacter();\n\t\t}\n\t\t/// <summary>NetHooks_NameCollision - Internal hook fired when a name collision happens.</summary>\n\t\t/// <param name=\"args\">args - The NameCollisionEventArgs object.</param>\n\t\tprivate void NetHooks_NameCollision(NameCollisionEventArgs args)\n\t\t{\n\t\t\tif (args.Handled)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstring ip = Utils.GetRealIP(Netplay.Clients[args.Who].Socket.GetRemoteAddress().ToString());\n\t\t\tvar player = Players.First(p => p != null && p.Name == args.Name && p.Index != args.Who);\n\t\t\tif (player != null)\n\t\t\t{\n\t\t\t\tif (player.IP == ip)\n\t\t\t\t{\n\t\t\t\t\tNetplay.Clients[player.Index].PendingTermination = true;\n\t\t\t\t\targs.Handled = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (player.IsLoggedIn)\n\t\t\t\t{\n\t\t\t\t\tvar ips = JsonConvert.DeserializeObject<List<string>>(player.Account.KnownIps);\n\t\t\t\t\tif (ips.Contains(ip))\n\t\t\t\t\t{\n\t\t\t\t\t\tNetplay.Clients[player.Index].PendingTermination = true;\n\t\t\t\t\t\targs.Handled = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>OnItemForceIntoChest - Internal hook fired when a player quick stacks items into a chest.</summary>\n\t\t/// <param name=\"args\">The <see cref=\"ForceItemIntoChestEventArgs\"/> object.</param>\n\t\tprivate void OnItemForceIntoChest(ForceItemIntoChestEventArgs args)\n\t\t{\n\t\t\tif (args.Handled)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (args.Player == null)\n\t\t\t{\n\t\t\t\targs.Handled = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tTSPlayer tsplr = Players[args.Player.whoAmI];\n\t\t\tif (tsplr == null)\n\t\t\t{\n\t\t\t\targs.Handled = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (args.Chest != null)\n\t\t\t{\n\t\t\t\tif (Config.RegionProtectChests && !Regions.CanBuild((int)args.WorldPosition.X, (int)args.WorldPosition.Y, tsplr))\n\t\t\t\t{\n\t\t\t\t\targs.Handled = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!tsplr.IsInRange(args.Chest.x, args.Chest.y))\n\t\t\t\t{\n\t\t\t\t\targs.Handled = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>OnXmasCheck - Internal hook fired when the XMasCheck happens.</summary>\n\t\t/// <param name=\"args\">args - The ChristmasCheckEventArgs object.</param>\n\t\tprivate void OnXmasCheck(ChristmasCheckEventArgs args)\n\t\t{\n\t\t\tif (args.Handled)\n\t\t\t\treturn;\n\t\t\tif (Config.ForceXmas)\n\t\t\t{\n\t\t\t\targs.Xmas = true;\n\t\t\t\targs.Handled = true;\n\t\t\t}\n\t\t}\n\t\t/// <summary>OnHalloweenCheck - Internal hook fired when the HalloweenCheck happens.</summary>\n\t\t/// <param name=\"args\">args - The HalloweenCheckEventArgs object.</param>\n\t\tprivate void OnHalloweenCheck(HalloweenCheckEventArgs args)\n\t\t{\n\t\t\tif (args.Handled)\n\t\t\t\treturn;\n\t\t\tif (Config.ForceHalloween)\n\t\t\t{\n\t\t\t\targs.Halloween = true;\n\t\t\t\targs.Handled = true;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Handles exceptions that we didn't catch earlier in the code, or in Terraria.\n\t\t/// </summary>\n\t\t/// <param name=\"sender\">sender - The object that sent the exception.</param>\n\t\t/// <param name=\"e\">e - The UnhandledExceptionEventArgs object.</param>\n\t\tprivate void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)\n\t\t{\n\t\t\tLog.Error(e.ExceptionObject.ToString());\n\t\t\tif (e.ExceptionObject.ToString().Contains(\"Terraria.Netplay.ListenForClients\") ||\n\t\t\t\te.ExceptionObject.ToString().Contains(\"Terraria.Netplay.ServerLoop\"))\n\t\t\t{\n\t\t\t\tvar sb = new List<string>();\n\t\t\t\tfor (int i = 0; i < Netplay.Clients.Length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (Netplay.Clients[i] == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsb.Add(\"Client[\" + i + \"]\");\n\t\t\t\t\t}\n\t\t\t\t\telse if (Netplay.Clients[i].Socket == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsb.Add(\"Tcp[\" + i + \"]\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tLog.Error(string.Join(\", \", sb));\n\t\t\t}\n\t\t\tif (e.IsTerminating)\n\t\t\t{\n\t\t\t\tif (Main.worldPathName != null && Config.SaveWorldOnCrash)\n\t\t\t\t{\n\t\t\t\t\tMain.ActiveWorldFileData._path += \".crash\";\n\t\t\t\t\tSaveManager.Instance.SaveWorld();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>HandleCommandLine - Handles the command line parameters passed to the server.</summary>\n\t\t/// <param name=\"parms\">parms - The array of arguments passed in through the command line.</param>\n\t\tprivate void HandleCommandLine(string[] parms)\n\t\t{\n\t\t\tstring path = null;\n\t\t\t//Generic method for doing a path sanity check\n\t\t\tAction<string> pathChecker = (p) =>\n\t\t\t{\n\t\t\t\tif (!string.IsNullOrWhiteSpace(p) && p.IndexOfAny(Path.GetInvalidPathChars()) == -1)\n\t\t\t\t{\n\t\t\t\t\tpath = p;\n\t\t\t\t}\n\t\t\t};\n\t\t\t//Prepare the parser with all the flags available\n\t\t\tCliParser\n\t\t\t\t.AddFlag(\"-configpath\", pathChecker)\n\t\t\t\t\t//The .After Action is run after the pathChecker Action\n\t\t\t\t\t.After(() =>\n\t\t\t\t\t{\n\t\t\t\t\t\tSavePath = path ?? \"tshock\";\n\t\t\t\t\t\tif (path != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tServerApi.LogWriter.PluginWriteLine(this, \"Config path has been set to \" + path, TraceLevel.Info);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.AddFlag(\"-worldselectpath\", pathChecker)\n\t\t\t\t\t.After(() =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (path != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMain.WorldPath = path;\n\t\t\t\t\t\t\tServerApi.LogWriter.PluginWriteLine(this, \"World path has been set to \" + path, TraceLevel.Info);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.AddFlag(\"-logpath\", pathChecker)\n\t\t\t\t\t.After(() =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (path != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tLogPath = path;\n\t\t\t\t\t\t\tServerApi.LogWriter.PluginWriteLine(this, \"Log path has been set to \" + path, TraceLevel.Info);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.AddFlag(\"-logformat\", (format) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!string.IsNullOrWhiteSpace(format)) { LogFormat = format; }\n\t\t\t\t\t})\n\t\t\t\t.AddFlag(\"-config\", (cfg) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!string.IsNullOrWhiteSpace(cfg))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tServerApi.LogWriter.PluginWriteLine(this, string.Format(\"Loading dedicated config file: {0}\", cfg), TraceLevel.Verbose);\n\t\t\t\t\t\t\tMain.instance.LoadDedConfig(cfg);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.AddFlag(\"-port\", (p) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tint port;\n\t\t\t\t\t\tif (int.TryParse(p, out port))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tNetplay.ListenPort = port;\n\t\t\t\t\t\t\tServerApi.LogWriter.PluginWriteLine(this, string.Format(\"Listening on port {0}.\", port), TraceLevel.Verbose);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.AddFlag(\"-worldname\", (world) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!string.IsNullOrWhiteSpace(world))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMain.instance.SetWorldName(world);\n\t\t\t\t\t\t\tServerApi.LogWriter.PluginWriteLine(this, string.Format(\"World name will be overridden by: {0}\", world), TraceLevel.Verbose);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.AddFlag(\"-ip\", (ip) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tIPAddress addr;\n\t\t\t\t\t\tif (IPAddress.TryParse(ip, out addr))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tNetplay.ServerIP = addr;\n\t\t\t\t\t\t\tServerApi.LogWriter.PluginWriteLine(this, string.Format(\"Listening on IP {0}.\", addr), TraceLevel.Verbose);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The server should not start up if this argument is invalid.\n\t\t\t\t\t\t\tthrow new InvalidOperationException(\"Invalid value given for command line argument \\\"-ip\\\".\");\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.AddFlag(\"-autocreate\", (size) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!string.IsNullOrWhiteSpace(size))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMain.instance.autoCreate(size);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t//Flags without arguments\n\t\t\t\t.AddFlag(\"-logclear\", () => LogClear = true)\n\t\t\t\t.AddFlag(\"-autoshutdown\", () => Main.instance.EnableAutoShutdown())\n\t\t\t\t.AddFlag(\"-dump\", () => Utils.Dump());\n\t\t\tCliParser.ParseFromSource(parms);\n\t\t}\n\t\t/// <summary>HandleCommandLinePostConfigLoad - Handles additional command line options after the config file is read.</summary>\n\t\t/// <param name=\"parms\">parms - The array of arguments passed in through the command line.</param>\n\t\tpublic static void HandleCommandLinePostConfigLoad(string[] parms)\n\t\t{\n\t\t\tFlagSet portSet = new FlagSet(\"-port\");\n\t\t\tFlagSet playerSet = new FlagSet(\"-maxplayers\", \"-players\");\n\t\t\tFlagSet restTokenSet = new FlagSet(\"--rest-token\", \"-rest-token\");\n\t\t\tFlagSet restEnableSet = new FlagSet(\"--rest-enabled\", \"-rest-enabled\");\n\t\t\tFlagSet restPortSet = new FlagSet(\"--rest-port\", \"-rest-port\");\n\t\t\tCliParser\n\t\t\t\t.AddFlags(portSet, (p) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tint port;\n\t\t\t\t\t\tif (int.TryParse(p, out port))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tNetplay.ListenPort = port;\n\t\t\t\t\t\t\tConfig.ServerPort = port;\n\t\t\t\t\t\t\tOverridePort = true;\n\t\t\t\t\t\t\tLog.ConsoleInfo(\"Port overridden by startup argument. Set to \" + port);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.AddFlags(restTokenSet, (token) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tRESTStartupTokens.Add(token, new SecureRest.TokenData { Username = \"null\", UserGroupName = \"superadmin\" });\n\t\t\t\t\t\tConsole.WriteLine(\"Startup parameter overrode REST token.\");\n\t\t\t\t\t})\n\t\t\t\t.AddFlags(restEnableSet, (e) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tbool enabled;\n\t\t\t\t\t\tif (bool.TryParse(e, out enabled))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tConfig.RestApiEnabled = enabled;\n\t\t\t\t\t\t\tConsole.WriteLine(\"Startup parameter overrode REST enable.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.AddFlags(restPortSet, (p) =>\n\t\t\t\t{\n\t\t\t\t\tint restPort;\n\t\t\t\t\tif (int.TryParse(p, out restPort))\n\t\t\t\t\t{\n\t\t\t\t\t\tConfig.RestApiPort = restPort;\n\t\t\t\t\t\tConsole.WriteLine(\"Startup parameter overrode REST port.\");\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.AddFlags(playerSet, (p)=>\n\t\t\t\t\t{\n\t\t\t\t\t\tint slots;\n\t\t\t\t\t\tif (int.TryParse(p, out slots))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tConfig.MaxSlots = slots;\n\t\t\t\t\t\t\tConsole.WriteLine(\"Startup parameter overrode maximum player slot configuration value.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\tCliParser.ParseFromSource(parms);\n\t\t}\n\t\t/// <summary>SetupToken - The auth token used by the setup system to grant temporary superadmin access to new admins.</summary>\n\t\tpublic static int SetupToken = -1;\n\t\tprivate string _cliPassword = null;\n\t\t/// <summary>OnPostInit - Fired when the server loads a map, to perform world specific operations.</summary>\n\t\t/// <param name=\"args\">args - The EventArgs object.</param>\n\t\tprivate void OnPostInit(EventArgs args)\n\t\t{\n\t\t\tUtils.SetConsoleTitle(false);\n\t\t\t//This is to prevent a bug where a CLI-defined password causes packets to be\n\t\t\t//sent in an unexpected order, resulting in clients being unable to connect\n\t\t\tif (!string.IsNullOrEmpty(Netplay.ServerPassword))\n\t\t\t{\n\t\t\t\t//CLI defined password overrides a config password\n\t\t\t\t_cliPassword = Netplay.ServerPassword;\n\t\t\t\tNetplay.ServerPassword = \"\";\n\t\t\t\tConfig.ServerPassword = _cliPassword;\n\t\t\t}\n\t\t\t// Disable the auth system if \"setup.lock\" is present or a user account already exists\n\t\t\tif (File.Exists(Path.Combine(SavePath, \"setup.lock\")) || (UserAccounts.GetUserAccounts().Count() > 0))\n\t\t\t{\n\t\t\t\tSetupToken = 0;\n\t\t\t\tif (File.Exists(Path.Combine(SavePath, \"setup-code.txt\")))\n\t\t\t\t{\n\t\t\t\t\tLog.ConsoleInfo(\"An account has been detected in the user database, but setup-code.txt is still present.\");\n\t\t\t\t\tLog.ConsoleInfo(\"TShock will now disable the initial setup system and remove setup-code.txt as it is no longer needed.\");\n\t\t\t\t\tFile.Delete(Path.Combine(SavePath, \"setup-code.txt\"));\n\t\t\t\t}\n\t\t\t\tif (!File.Exists(Path.Combine(SavePath, \"setup.lock\")))\n\t\t\t\t{\n\t\t\t\t\t// This avoids unnecessary database work, which can get ridiculously high on old servers as all users need to be fetched\n\t\t\t\t\tFile.Create(Path.Combine(SavePath, \"setup.lock\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!File.Exists(Path.Combine(SavePath, \"setup-code.txt\")))\n\t\t\t{\n\t\t\t\tvar r = new Random((int)DateTime.Now.ToBinary());\n\t\t\t\tSetupToken = r.Next(100000, 10000000);\n\t\t\t\tConsole.ForegroundColor = ConsoleColor.Yellow;\n\t\t\t\tConsole.WriteLine(\"To setup the server, join the game and type {0}setup {1}\", Commands.Specifier, SetupToken);\n\t\t\t\tConsole.WriteLine(\"This token will display until disabled by verification. ({0}setup)\", Commands.Specifier);\n\t\t\t\tConsole.ResetColor();\n\t\t\t\tFile.WriteAllText(Path.Combine(SavePath, \"setup-code.txt\"), SetupToken.ToString());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetupToken = Convert.ToInt32(File.ReadAllText(Path.Combine(SavePath, \"setup-code.txt\")));\n\t\t\t\tConsole.ForegroundColor = ConsoleColor.Yellow;\n\t\t\t\tConsole.WriteLine(\"TShock Notice: setup-code.txt is still present, and the code located in that file will be used.\");\n\t\t\t\tConsole.WriteLine(\"To setup the server, join the game and type {0}setup {1}\", Commands.Specifier, SetupToken);\n\t\t\t\tConsole.WriteLine(\"This token will display until disabled by verification. ({0}setup)\", Commands.Specifier);\n\t\t\t\tConsole.ResetColor();\n\t\t\t}\n\t\t\tRegions.Reload();\n\t\t\tWarps.ReloadWarps();\n\t\t\tUtils.ComputeMaxStyles();\n\t\t\tUtils.FixChestStacks();\n\t\t\tif (Config.UseServerName)\n\t\t\t{\n\t\t\t\tMain.worldName = Config.ServerName;\n\t\t\t}\n\t\t\tUpdateManager = new UpdateManager();\n\t\t}\n\t\t/// <summary>LastCheck - Used to keep track of the last check for basically all time based checks.</summary>\n\t\tprivate DateTime LastCheck = DateTime.UtcNow;\n\t\t/// <summary>LastSave - Used to keep track of SSC save intervals.</summary>\n\t\tprivate DateTime LastSave = DateTime.UtcNow;\n\t\t/// <summary>OnUpdate - Called when ever the server ticks.</summary>\n\t\t/// <param name=\"args\">args - EventArgs args</param>\n\t\tprivate void OnUpdate(EventArgs args)\n\t\t{\n\t\t\tif (Backups.IsBackupTime)\n\t\t\t\tBackups.Backup();\n\t\t\t//call these every second, not every update\n\t\t\tif ((DateTime.UtcNow - LastCheck).TotalSeconds >= 1)\n\t\t\t{\n\t\t\t\tOnSecondUpdate();\n\t\t\t\tLastCheck = DateTime.UtcNow;\n\t\t\t}\n\t\t\tif (Main.ServerSideCharacter && (DateTime.UtcNow - LastSave).TotalMinutes >= ServerSideCharacterConfig.ServerSideCharacterSave)\n\t\t\t{\n\t\t\t\tforeach (TSPlayer player in Players)\n\t\t\t\t{\n\t\t\t\t\t// prevent null point exceptions\n\t\t\t\t\tif (player != null && player.IsLoggedIn && !player.IsDisabledPendingTrashRemoval)\n\t\t\t\t\t{\n\t\t\t\t\t\tCharacterDB.InsertPlayerData(player);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tLastSave = DateTime.UtcNow;\n\t\t\t}\n\t\t}\n\t\t/// <summary>OnSecondUpdate - Called effectively every second for all time based checks.</summary>\n\t\tprivate void OnSecondUpdate()\n\t\t{\n\t\t\tDisableFlags flags = Config.DisableSecondUpdateLogs ? DisableFlags.WriteToConsole : DisableFlags.WriteToLogAndConsole;\n\t\t\tif (Config.ForceTime != \"normal\")\n\t\t\t{\n\t\t\t\tswitch (Config.ForceTime)\n\t\t\t\t{\n\t\t\t\t\tcase \"day\":\n\t\t\t\t\t\tTSPlayer.Server.SetTime(true, 27000.0);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"night\":\n\t\t\t\t\t\tTSPlayer.Server.SetTime(false, 16200.0);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach (TSPlayer player in Players)\n\t\t\t{\n\t\t\t\tif (player != null && player.Active)\n\t\t\t\t{\n\t\t\t\t\tif (player.TilesDestroyed != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (player.TileKillThreshold >= Config.TileKillThreshold)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplayer.Disable(\"Reached TileKill threshold.\", flags);\n\t\t\t\t\t\t\tTSPlayer.Server.RevertTiles(player.TilesDestroyed);\n\t\t\t\t\t\t\tplayer.TilesDestroyed.Clear();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (player.TileKillThreshold > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.TileKillThreshold = 0;\n\t\t\t\t\t\t//We don't want to revert the entire map in case of a disable.\n\t\t\t\t\t\tlock (player.TilesDestroyed)\n\t\t\t\t\t\t\tplayer.TilesDestroyed.Clear();\n\t\t\t\t\t}\n\t\t\t\t\tif (player.TilesCreated != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (player.TilePlaceThreshold >= Config.TilePlaceThreshold)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplayer.Disable(\"Reached TilePlace threshold\", flags);\n\t\t\t\t\t\t\tlock (player.TilesCreated)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTSPlayer.Server.RevertTiles(player.TilesCreated);\n\t\t\t\t\t\t\t\tplayer.TilesCreated.Clear();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (player.TilePlaceThreshold > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.TilePlaceThreshold = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (player.RecentFuse > 0)\n\t\t\t\t\t\tplayer.RecentFuse--;\n\t\t\t\t\tif ((Main.ServerSideCharacter) && (player.TPlayer.SpawnX > 0) && (player.sX != player.TPlayer.SpawnX))\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.sX = player.TPlayer.SpawnX;\n\t\t\t\t\t\tplayer.sY = player.TPlayer.SpawnY;\n\t\t\t\t\t}\n\t\t\t\t\tif ((Main.ServerSideCharacter) && (player.sX > 0) && (player.sY > 0) && (player.TPlayer.SpawnX < 0))\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.TPlayer.SpawnX = player.sX;\n\t\t\t\t\t\tplayer.TPlayer.SpawnY = player.sY;\n\t\t\t\t\t}\n\t\t\t\t\tif (player.RPPending > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (player.RPPending == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar pos = RememberedPos.GetLeavePos(player.Name, player.IP);\n\t\t\t\t\t\t\tplayer.Teleport(pos.X * 16, pos.Y * 16);\n\t\t\t\t\t\t\tplayer.RPPending = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplayer.RPPending--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (player.TileLiquidThreshold >= Config.TileLiquidThreshold)\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.Disable(\"Reached TileLiquid threshold\", flags);\n\t\t\t\t\t}\n\t\t\t\t\tif (player.TileLiquidThreshold > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.TileLiquidThreshold = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (player.ProjectileThreshold >= Config.ProjectileThreshold)\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.Disable(\"Reached projectile threshold\", flags);\n\t\t\t\t\t}\n\t\t\t\t\tif (player.ProjectileThreshold > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.ProjectileThreshold = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (player.PaintThreshold >= Config.TilePaintThreshold)\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.Disable(\"Reached paint threshold\", flags);\n\t\t\t\t\t}\n\t\t\t\t\tif (player.PaintThreshold > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.PaintThreshold = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (player.HealOtherThreshold >= TShock.Config.HealOtherThreshold)\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.Disable(\"Reached HealOtherPlayer threshold\", flags);\n\t\t\t\t\t}\n\t\t\t\t\tif (player.HealOtherThreshold > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.HealOtherThreshold = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (player.RespawnTimer > 0 && --player.RespawnTimer == 0 && player.Difficulty != 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.Spawn(PlayerSpawnContext.ReviveFromDeath);\n\t\t\t\t\t}\n\t\t\t\t\tif (!Main.ServerSideCharacter || (Main.ServerSideCharacter && player.IsLoggedIn))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!player.HasPermission(Permissions.ignorestackhackdetection))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplayer.IsDisabledForStackDetection = player.HasHackedItemStacks(shouldWarnPlayer: true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (player.IsBeingDisabled())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplayer.Disable(flags: flags);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tBouncer.OnSecondUpdate();\n\t\t\tUtils.SetConsoleTitle(false);\n\t\t}\n\t\t/// <summary>OnHardUpdate - Fired when a hardmode tile update event happens.</summary>\n\t\t/// <param name=\"args\">args - The HardmodeTileUpdateEventArgs object.</param>\n\t\tprivate void OnHardUpdate(HardmodeTileUpdateEventArgs args)\n\t\t{\n\t\t\tif (args.Handled)\n\t\t\t\treturn;\n\t\t\tif (!OnCreep(args.Type))\n\t\t\t{\n\t\t\t\targs.Handled = true;\n\t\t\t}\n\t\t}\n\t\t/// <summary>OnWorldGrassSpread - Fired when grass is attempting to spread.</summary>\n\t\t/// <param name=\"args\">args - The GrassSpreadEventArgs object.</param>\n\t\tprivate void OnWorldGrassSpread(GrassSpreadEventArgs args)\n\t\t{\n\t\t\tif (args.Handled)\n\t\t\t\treturn;\n\t\t\tif(!OnCreep(args.Grass))\n\t\t\t{\n\t\t\t\targs.Handled = true;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Checks if the tile type is allowed to creep\n\t\t/// </summary>\n\t\t/// <param name=\"tileType\">Tile id</param>\n\t\t/// <returns>True if allowed, otherwise false</returns>\n\t\tprivate bool OnCreep(int tileType)\n\t\t{\n\t\t\tif (!Config.AllowCrimsonCreep && (tileType == TileID.Dirt || tileType == TileID.CrimsonGrass\n\t\t\t\t|| TileID.Sets.Crimson[tileType]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!Config.AllowCorruptionCreep && (tileType == TileID.Dirt || tileType == TileID.CorruptThorns\n\t\t\t\t|| TileID.Sets.Corrupt[tileType]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!Config.AllowHallowCreep && (TileID.Sets.Hallow[tileType]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\t/// <summary>OnStatueSpawn - Fired when a statue spawns.</summary>\n\t\t/// <param name=\"args\">args - The StatueSpawnEventArgs object.</param>\n\t\tprivate void OnStatueSpawn(StatueSpawnEventArgs args)\n\t\t{\n\t\t\tif (args.Within200 < Config.StatueSpawn200 && args.Within600 < Config.StatueSpawn600 && args.WorldWide < Config.StatueSpawnWorld)\n\t\t\t{\n\t\t\t\targs.Handled = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\targs.Handled = false;\n\t\t\t}\n\t\t}\n\t\t/// <summary>OnConnect - Fired when a player connects to the server.</summary>\n\t\t/// <param name=\"args\">args - The ConnectEventArgs object.</param>\n\t\tprivate void OnConnect(ConnectEventArgs args)\n\t\t{\n\t\t\tif (ShuttingDown)\n\t\t\t{\n\t\t\t\tNetMessage.SendData((int)PacketTypes.Disconnect, args.Who, -1, NetworkText.FromLiteral(\"Server is shutting down...\"));\n\t\t\t\targs.Handled = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar player = new TSPlayer(args.Who);\n\t\t\tif (Utils.GetActivePlayerCount() + 1 > Config.MaxSlots + Config.ReservedSlots)\n\t\t\t{\n\t\t\t\tplayer.Kick(Config.ServerFullNoReservedReason, true, true, null, false);\n\t\t\t\targs.Handled = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!FileTools.OnWhitelist(player.IP))\n\t\t\t{\n\t\t\t\tplayer.Kick(Config.WhitelistKickReason, true, true, null, false);\n\t\t\t\targs.Handled = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (Geo != null)\n\t\t\t{\n\t\t\t\tvar code = Geo.TryGetCountryCode(IPAddress.Parse(player.IP));\n\t\t\t\tplayer.Country = code == null ? \"N/A\" : GeoIPCountry.GetCountryNameByCode(code);\n\t\t\t\tif (code == \"A1\")\n\t\t\t\t{\n\t\t\t\t\tif (Config.KickProxyUsers)\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.Kick(\"Connecting via a proxy is not allowed.\", true, true, null, false);\n\t\t\t\t\t\targs.Handled = true;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tPlayers[args.Who] = player;\n\t\t}\n\t\t/// <summary>OnJoin - Internal hook called when a player joins. This is called after OnConnect.</summary>\n\t\t/// <param name=\"args\">args - The JoinEventArgs object.</param>\n\t\tprivate void OnJoin(JoinEventArgs args)\n\t\t{\n\t\t\tvar player = Players[args.Who];\n\t\t\tif (player == null)\n\t\t\t{\n\t\t\t\targs.Handled = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (Config.KickEmptyUUID && String.IsNullOrWhiteSpace(player.UUID))\n\t\t\t{\n\t\t\t\tplayer.Kick(\"Your client sent a blank UUID. Configure it to send one or use a different client.\", true, true, null, false);\n\t\t\t\targs.Handled = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tBan ban = null;\n\t\t\tif (Config.EnableBanOnUsernames)\n\t\t\t{\n\t\t\t\tvar newban = Bans.GetBanByName(player.Name);\n\t\t\t\tif (null != newban)\n\t\t\t\t\tban = newban;\n\t\t\t}\n\t\t\tif (Config.EnableIPBans && null == ban)\n\t\t\t{\n\t\t\t\tban = Bans.GetBanByIp(player.IP);\n\t\t\t}\n\t\t\tif (Config.EnableUUIDBans && null == ban && !String.IsNullOrWhiteSpace(player.UUID))\n\t\t\t{\n\t\t\t\tban = Bans.GetBanByUUID(player.UUID);\n\t\t\t}\n\t\t\tif (ban != null)\n\t\t\t{\n\t\t\t\tif (!Bans.RemoveBanIfExpired(ban))\n\t\t\t\t{\n\t\t\t\t\tDateTime exp;\n\t\t\t\t\tif (!DateTime.TryParse(ban.Expiration, out exp))\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.Disconnect(\"Permanently banned for: \" + ban.Reason);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tTimeSpan ts = exp - DateTime.UtcNow;\n\t\t\t\t\t\tint months = ts.Days / 30;\n\t\t\t\t\t\tif (months > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplayer.Disconnect(String.Format(\"You are banned for {0} month{1} and {2} day{3}: {4}\",\n\t\t\t\t\t\t\t\tmonths, months == 1 ? \"\" : \"s\", ts.Days, ts.Days == 1 ? \"\" : \"s\", ban.Reason));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (ts.Days > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplayer.Disconnect(String.Format(\"You are banned for {0} day{1} and {2} hour{3}: {4}\",\n\t\t\t\t\t\t\t\tts.Days, ts.Days == 1 ? \"\" : \"s\", ts.Hours, ts.Hours == 1 ? \"\" : \"s\", ban.Reason));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (ts.Hours > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplayer.Disconnect(String.Format(\"You are banned for {0} hour{1} and {2} minute{3}: {4}\",\n\t\t\t\t\t\t\t\tts.Hours, ts.Hours == 1 ? \"\" : \"s\", ts.Minutes, ts.Minutes == 1 ? \"\" : \"s\", ban.Reason));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (ts.Minutes > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplayer.Disconnect(String.Format(\"You are banned for {0} minute{1} and {2} second{3}: {4}\",\n\t\t\t\t\t\t\t\tts.Minutes, ts.Minutes == 1 ? \"\" : \"s\", ts.Seconds, ts.Seconds == 1 ? \"\" : \"s\", ban.Reason));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tplayer.Disconnect(String.Format(\"You are banned for {0} second{1}: {2}\",\n\t\t\t\t\t\t\t\tts.Seconds, ts.Seconds == 1 ? \"\" : \"s\", ban.Reason));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\targs.Handled = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>OnLeave - Called when a player leaves the server.</summary>\n\t\t/// <param name=\"args\">args - The LeaveEventArgs object.</param>\n\t\tprivate void OnLeave(LeaveEventArgs args)\n\t\t{\n\t\t\tif (args.Who >= Players.Length || args.Who < 0)\n\t\t\t{\n\t\t\t\t//Something not right has happened\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar tsplr = Players[args.Who];\n\t\t\tif (tsplr == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPlayers[args.Who] = null;\n\t\t\tif (tsplr.ReceivedInfo)\n\t\t\t{\n\t\t\t\tif (!tsplr.SilentKickInProgress && tsplr.State >= 3)\n\t\t\t\t\tUtils.Broadcast(tsplr.Name + \" has left.\", Color.Yellow);\n\t\t\t\tLog.Info(\"{0} disconnected.\", tsplr.Name);\n\t\t\t\tif (tsplr.IsLoggedIn && !tsplr.IsDisabledPendingTrashRemoval && Main.ServerSideCharacter && (!tsplr.Dead || tsplr.TPlayer.difficulty != 2))\n\t\t\t\t{\n\t\t\t\t\ttsplr.PlayerData.CopyCharacter(tsplr);\n\t\t\t\t\tCharacterDB.InsertPlayerData(tsplr);\n\t\t\t\t}\n\t\t\t\tif (Config.RememberLeavePos && !tsplr.LoginHarassed)\n\t\t\t\t{\n\t\t\t\t\tRememberedPos.InsertLeavePos(tsplr.Name, tsplr.IP, (int)(tsplr.X / 16), (int)(tsplr.Y / 16));\n\t\t\t\t}\n\t\t\t\tif (tsplr.tempGroupTimer != null)\n\t\t\t\t{\n\t\t\t\t\ttsplr.tempGroupTimer.Stop();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Fire the OnPlayerLogout hook too, if the player was logged in and they have a TSPlayer object.\n\t\t\tif (tsplr.IsLoggedIn)\n\t\t\t{\n\t\t\t\tHooks.PlayerHooks.OnPlayerLogout(tsplr);\n\t\t\t}\n\t\t\t// The last player will leave after this hook is executed.\n\t\t\tif (Utils.GetActivePlayerCount() == 1)\n\t\t\t{\n\t\t\t\tif (Config.SaveWorldOnLastPlayerExit)\n\t\t\t\t\tSaveManager.Instance.SaveWorld();\n\t\t\t\tUtils.SetConsoleTitle(true);\n\t\t\t}\n\t\t}\n\t\t/// <summary>OnChat - Fired when a player chats. Used for handling chat and commands.</summary>\n\t\t/// <param name=\"args\">args - The ServerChatEventArgs object.</param>\n\t\tprivate void OnChat(ServerChatEventArgs args)\n\t\t{\n\t\t\tif (args.Handled)\n\t\t\t\treturn;\n\t\t\tvar tsplr = Players[args.Who];\n\t\t\tif (tsplr == null)\n\t\t\t{\n\t\t\t\targs.Handled = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (args.Text.Length > 500)\n\t\t\t{\n\t\t\t\ttsplr.Kick(\"Crash attempt via long chat packet.\", true);\n\t\t\t\targs.Handled = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstring text = args.Text;\n\t\t\t// Terraria now has chat commands on the client side.\n\t\t\t// These commands remove the commands prefix (e.g. /me /playing) and send the command id instead\n\t\t\t// In order for us to keep legacy code we must reverse this and get the prefix using the command id\n\t\t\tforeach (var item in Terraria.UI.Chat.ChatManager.Commands._localizedCommands)\n\t\t\t{\n\t\t\t\tif (item.Value._name == args.CommandId._name)\n\t\t\t\t{\n\t\t\t\t\tif (!String.IsNullOrEmpty(text))\n\t\t\t\t\t{\n\t\t\t\t\t\ttext = item.Key.Value + ' ' + text;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttext = item.Key.Value;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ((text.StartsWith(Config.CommandSpecifier) || text.StartsWith(Config.CommandSilentSpecifier))\n\t\t\t\t&& !string.IsNullOrWhiteSpace(text.Substring(1)))\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\targs.Handled = true;\n\t\t\t\t\tif (!Commands.HandleCommand(tsplr, text))\n\t\t\t\t\t{\n\t\t\t\t\t\t// This is required in case anyone makes HandleCommand return false again\n\t\t\t\t\t\ttsplr.SendErrorMessage(\"Unable to parse command. Please contact an administrator for assistance.\");\n\t\t\t\t\t\tLog.ConsoleError(\"Unable to parse command '{0}' from player {1}.\", text, tsplr.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex)\n\t\t\t\t{\n\t\t\t\t\tLog.ConsoleError(\"An exception occurred executing a command.\");\n\t\t\t\t\tLog.Error(ex.ToString());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tsplr.HasPermission(Permissions.canchat))\n\t\t\t\t{\n\t\t\t\t\targs.Handled = true;\n\t\t\t\t}\n\t\t\t\telse if (tsplr.mute)\n\t\t\t\t{\n\t\t\t\t\ttsplr.SendErrorMessage(\"You are muted!\");\n\t\t\t\t\targs.Handled = true;\n\t\t\t\t}\n\t\t\t\telse if (!TShock.Config.EnableChatAboveHeads)\n\t\t\t\t{\n\t\t\t\t\ttext = String.Format(Config.ChatFormat, tsplr.Group.Name, tsplr.Group.Prefix, tsplr.Name, tsplr.Group.Suffix,\n\t\t\t\t\t\t\t\t\t\t\t args.Text);\n\t\t\t\t\tHooks.PlayerHooks.OnPlayerChat(tsplr, args.Text, ref text);\n\t\t\t\t\tUtils.Broadcast(text, tsplr.Group.R, tsplr.Group.G, tsplr.Group.B);\n\t\t\t\t\targs.Handled = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tPlayer ply = Main.player[args.Who];\n\t\t\t\t\tstring name = ply.name;\n\t\t\t\t\tply.name = String.Format(Config.ChatAboveHeadsFormat, tsplr.Group.Name, tsplr.Group.Prefix, tsplr.Name, tsplr.Group.Suffix);\n\t\t\t\t\t//Update the player's name to format text nicely. This needs to be done because Terraria automatically formats messages against our will\n\t\t\t\t\tNetMessage.SendData((int)PacketTypes.PlayerInfo, -1, -1, NetworkText.FromLiteral(ply.name), args.Who, 0, 0, 0, 0);\n\t\t\t\t\t//Give that poor player their name back :'c\n\t\t\t\t\tply.name = name;\n\t\t\t\t\tPlayerHooks.OnPlayerChat(tsplr, args.Text, ref text);\n\t\t\t\t\t//This netpacket is used to send chat text from the server to clients, in this case on behalf of a client\n\t\t\t\t\tTerraria.Net.NetPacket packet = Terraria.GameContent.NetModules.NetTextModule.SerializeServerMessage(\n\t\t\t\t\t\tNetworkText.FromLiteral(text), new Color(tsplr.Group.R, tsplr.Group.G, tsplr.Group.B), (byte)args.Who\n\t\t\t\t\t);\n\t\t\t\t\t//Broadcast to everyone except the player who sent the message.\n\t\t\t\t\t//This is so that we can send them the same nicely formatted message that everyone else gets\n\t\t\t\t\tTerraria.Net.NetManager.Instance.Broadcast(packet, args.Who);\n\t\t\t\t\t//Reset their name\n\t\t\t\t\tNetMessage.SendData((int)PacketTypes.PlayerInfo, -1, -1, NetworkText.FromLiteral(name), args.Who, 0, 0, 0, 0);\n\t\t\t\t\tstring msg = String.Format(\"<{0}> {1}\",\n\t\t\t\t\t\tString.Format(Config.ChatAboveHeadsFormat, tsplr.Group.Name, tsplr.Group.Prefix, tsplr.Name, tsplr.Group.Suffix),\n\t\t\t\t\t\ttext\n\t\t\t\t\t);\n\t\t\t\t\t//Send the original sender their nicely formatted message, and do all the loggy things\n\t\t\t\t\ttsplr.SendMessage(msg, tsplr.Group.R, tsplr.Group.G, tsplr.Group.B);\n\t\t\t\t\tTSPlayer.Server.SendMessage(msg, tsplr.Group.R, tsplr.Group.G, tsplr.Group.B);\n\t\t\t\t\tLog.Info(\"Broadcast: {0}\", msg);\n\t\t\t\t\targs.Handled = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Called when a command is issued from the server console.\n\t\t/// </summary>\n\t\t/// <param name=\"args\">The CommandEventArgs object</param>\n\t\tprivate void ServerHooks_OnCommand(CommandEventArgs args)\n\t\t{\n\t\t\tif (args.Handled)\n\t\t\t\treturn;\n\t\t\tif (string.IsNullOrWhiteSpace(args.Command))\n\t\t\t{\n\t\t\t\targs.Handled = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Damn you ThreadStatic and Redigit\n\t\t\tif (Main.rand == null)\n\t\t\t{\n\t\t\t\tMain.rand = new UnifiedRandom();\n\t\t\t}\n\t\t\tif (args.Command == \"autosave\")\n\t\t\t{\n\t\t\t\tMain.autoSave = Config.AutoSave = !Config.AutoSave;\n\t\t\t\tLog.ConsoleInfo(\"AutoSave \" + (Config.AutoSave ? \"Enabled\" : \"Disabled\"));\n\t\t\t}\n\t\t\telse if (args.Command.StartsWith(Commands.Specifier) || args.Command.StartsWith(Commands.SilentSpecifier))\n\t\t\t{\n\t\t\t\tCommands.HandleCommand(TSPlayer.Server, args.Command);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tCommands.HandleCommand(TSPlayer.Server, \"/\" + args.Command);\n\t\t\t}\n\t\t\targs.Handled = true;\n\t\t}\n\t\t/// <summary>OnGetData - Called when the server gets raw data packets.</summary>\n\t\t/// <param name=\"e\">e - The GetDataEventArgs object.</param>\n\t\tprivate void OnGetData(GetDataEventArgs e)\n\t\t{\n\t\t\tif (e.Handled)\n\t\t\t\treturn;\n\t\t\tPacketTypes type = e.MsgID;\n", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "length": 4973, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "2acc02028b0c25ff2f1ace54d857911f96bec894b1ad5a29"}
{"input": "", "context": "/**\n * Kunta API\n * Solution to combine municipality services under single API.\n *\n * OpenAPI spec version: 0.1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage fi.metatavu.kuntaapi.client;\nimport fi.metatavu.kuntaapi.ApiCallback;\nimport fi.metatavu.kuntaapi.ApiClient;\nimport fi.metatavu.kuntaapi.ApiException;\nimport fi.metatavu.kuntaapi.ApiResponse;\nimport fi.metatavu.kuntaapi.Configuration;\nimport fi.metatavu.kuntaapi.Pair;\nimport fi.metatavu.kuntaapi.ProgressRequestBody;\nimport fi.metatavu.kuntaapi.ProgressResponseBody;\nimport com.google.gson.reflect.TypeToken;\nimport java.io.IOException;\nimport fi.metatavu.kuntaapi.client.model.BadRequest;\nimport fi.metatavu.kuntaapi.client.model.Agency;\nimport fi.metatavu.kuntaapi.client.model.Forbidden;\nimport fi.metatavu.kuntaapi.client.model.InternalServerError;\nimport fi.metatavu.kuntaapi.client.model.Route;\nimport fi.metatavu.kuntaapi.client.model.Schedule;\nimport fi.metatavu.kuntaapi.client.model.Stop;\nimport fi.metatavu.kuntaapi.client.model.StopTime;\nimport fi.metatavu.kuntaapi.client.model.Trip;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\npublic class PublicTransportApi {\n    private ApiClient apiClient;\n    public PublicTransportApi() {\n        this(Configuration.getDefaultApiClient());\n    }\n    public PublicTransportApi(ApiClient apiClient) {\n        this.apiClient = apiClient;\n    }\n    public ApiClient getApiClient() {\n        return apiClient;\n    }\n    public void setApiClient(ApiClient apiClient) {\n        this.apiClient = apiClient;\n    }\n    /* Build call for findOrganizationPublicTransportAgency */\n    private com.squareup.okhttp.Call findOrganizationPublicTransportAgencyCall(String organizationId, String agencyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {\n        Object localVarPostBody = null;\n        \n        // verify the required parameter 'organizationId' is set\n        if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportAgency(Async)\");\n        }\n        \n        // verify the required parameter 'agencyId' is set\n        if (agencyId == null) {\n            throw new ApiException(\"Missing the required parameter 'agencyId' when calling findOrganizationPublicTransportAgency(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId}/transportAgencies/{agencyId}\".replaceAll(\"\\\\{format\\\\}\",\"json\")\n        .replaceAll(\"\\\\{\" + \"organizationId\" + \"\\\\}\", apiClient.escapeString(organizationId.toString()))\n        .replaceAll(\"\\\\{\" + \"agencyId\" + \"\\\\}\", apiClient.escapeString(agencyId.toString()));\n        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n        Map<String, Object> localVarFormParams = new HashMap<String, Object>();\n        final String[] localVarAccepts = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n        final String[] localVarContentTypes = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n        if(progressListener != null) {\n            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n                @Override\n                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                    return originalResponse.newBuilder()\n                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n                    .build();\n                }\n            });\n        }\n        String[] localVarAuthNames = new String[] { \"basicAuth\" };\n        return apiClient.buildCall(localVarPath, \"GET\", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);\n    }\n    /**\n     * Finds an organizations public transport agency\n     * Finds organization&#39;s single public transport agency \n     * @param organizationId Organization id (required)\n     * @param agencyId Agency id (required)\n     * @return Agency\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public Agency findOrganizationPublicTransportAgency(String organizationId, String agencyId) throws ApiException {\n        ApiResponse<Agency> resp = findOrganizationPublicTransportAgencyWithHttpInfo(organizationId, agencyId);\n        return resp.getData();\n    }\n    /**\n     * Finds an organizations public transport agency\n     * Finds organization&#39;s single public transport agency \n     * @param organizationId Organization id (required)\n     * @param agencyId Agency id (required)\n     * @return ApiResponse&lt;Agency&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public ApiResponse<Agency> findOrganizationPublicTransportAgencyWithHttpInfo(String organizationId, String agencyId) throws ApiException {\n        com.squareup.okhttp.Call call = findOrganizationPublicTransportAgencyCall(organizationId, agencyId, null, null);\n        Type localVarReturnType = new TypeToken<Agency>(){}.getType();\n        return apiClient.execute(call, localVarReturnType);\n    }\n    /**\n     * Finds an organizations public transport agency (asynchronously)\n     * Finds organization&#39;s single public transport agency \n     * @param organizationId Organization id (required)\n     * @param agencyId Agency id (required)\n     * @param callback The callback to be executed when the API call finishes\n     * @return The request call\n     * @throws ApiException If fail to process the API call, e.g. serializing the request body object\n     */\n    public com.squareup.okhttp.Call findOrganizationPublicTransportAgencyAsync(String organizationId, String agencyId, final ApiCallback<Agency> callback) throws ApiException {\n        ProgressResponseBody.ProgressListener progressListener = null;\n        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;\n        if (callback != null) {\n            progressListener = new ProgressResponseBody.ProgressListener() {\n                @Override\n                public void update(long bytesRead, long contentLength, boolean done) {\n                    callback.onDownloadProgress(bytesRead, contentLength, done);\n                }\n            };\n            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {\n                @Override\n                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {\n                    callback.onUploadProgress(bytesWritten, contentLength, done);\n                }\n            };\n        }\n        com.squareup.okhttp.Call call = findOrganizationPublicTransportAgencyCall(organizationId, agencyId, progressListener, progressRequestListener);\n        Type localVarReturnType = new TypeToken<Agency>(){}.getType();\n        apiClient.executeAsync(call, localVarReturnType, callback);\n        return call;\n    }\n    /* Build call for findOrganizationPublicTransportRoute */\n    private com.squareup.okhttp.Call findOrganizationPublicTransportRouteCall(String organizationId, String routeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {\n        Object localVarPostBody = null;\n        \n        // verify the required parameter 'organizationId' is set\n        if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportRoute(Async)\");\n        }\n        \n        // verify the required parameter 'routeId' is set\n        if (routeId == null) {\n            throw new ApiException(\"Missing the required parameter 'routeId' when calling findOrganizationPublicTransportRoute(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId}/transportRoutes/{routeId}\".replaceAll(\"\\\\{format\\\\}\",\"json\")\n        .replaceAll(\"\\\\{\" + \"organizationId\" + \"\\\\}\", apiClient.escapeString(organizationId.toString()))\n        .replaceAll(\"\\\\{\" + \"routeId\" + \"\\\\}\", apiClient.escapeString(routeId.toString()));\n        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n        Map<String, Object> localVarFormParams = new HashMap<String, Object>();\n        final String[] localVarAccepts = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n        final String[] localVarContentTypes = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n        if(progressListener != null) {\n            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n                @Override\n                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                    return originalResponse.newBuilder()\n                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n                    .build();\n                }\n            });\n        }\n        String[] localVarAuthNames = new String[] { \"basicAuth\" };\n        return apiClient.buildCall(localVarPath, \"GET\", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);\n    }\n    /**\n     * Finds an organizations public transport route\n     * Finds organization&#39;s single public transport route \n     * @param organizationId Organization id (required)\n     * @param routeId Route id (required)\n     * @return Route\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public Route findOrganizationPublicTransportRoute(String organizationId, String routeId) throws ApiException {\n        ApiResponse<Route> resp = findOrganizationPublicTransportRouteWithHttpInfo(organizationId, routeId);\n        return resp.getData();\n    }\n    /**\n     * Finds an organizations public transport route\n     * Finds organization&#39;s single public transport route \n     * @param organizationId Organization id (required)\n     * @param routeId Route id (required)\n     * @return ApiResponse&lt;Route&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public ApiResponse<Route> findOrganizationPublicTransportRouteWithHttpInfo(String organizationId, String routeId) throws ApiException {\n        com.squareup.okhttp.Call call = findOrganizationPublicTransportRouteCall(organizationId, routeId, null, null);\n        Type localVarReturnType = new TypeToken<Route>(){}.getType();\n        return apiClient.execute(call, localVarReturnType);\n    }\n    /**\n     * Finds an organizations public transport route (asynchronously)\n     * Finds organization&#39;s single public transport route \n     * @param organizationId Organization id (required)\n     * @param routeId Route id (required)\n     * @param callback The callback to be executed when the API call finishes\n     * @return The request call\n     * @throws ApiException If fail to process the API call, e.g. serializing the request body object\n     */\n    public com.squareup.okhttp.Call findOrganizationPublicTransportRouteAsync(String organizationId, String routeId, final ApiCallback<Route> callback) throws ApiException {\n        ProgressResponseBody.ProgressListener progressListener = null;\n        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;\n        if (callback != null) {\n            progressListener = new ProgressResponseBody.ProgressListener() {\n                @Override\n                public void update(long bytesRead, long contentLength, boolean done) {\n                    callback.onDownloadProgress(bytesRead, contentLength, done);\n                }\n            };\n            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {\n                @Override\n                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {\n                    callback.onUploadProgress(bytesWritten, contentLength, done);\n                }\n            };\n        }\n        com.squareup.okhttp.Call call = findOrganizationPublicTransportRouteCall(organizationId, routeId, progressListener, progressRequestListener);\n        Type localVarReturnType = new TypeToken<Route>(){}.getType();\n        apiClient.executeAsync(call, localVarReturnType, callback);\n        return call;\n    }\n    /* Build call for findOrganizationPublicTransportSchedule */\n    private com.squareup.okhttp.Call findOrganizationPublicTransportScheduleCall(String organizationId, String scheduleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {\n        Object localVarPostBody = null;\n        \n        // verify the required parameter 'organizationId' is set\n        if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportSchedule(Async)\");\n        }\n        \n        // verify the required parameter 'scheduleId' is set\n        if (scheduleId == null) {\n            throw new ApiException(\"Missing the required parameter 'scheduleId' when calling findOrganizationPublicTransportSchedule(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId}/transportSchedules/{scheduleId}\".replaceAll(\"\\\\{format\\\\}\",\"json\")\n        .replaceAll(\"\\\\{\" + \"organizationId\" + \"\\\\}\", apiClient.escapeString(organizationId.toString()))\n        .replaceAll(\"\\\\{\" + \"scheduleId\" + \"\\\\}\", apiClient.escapeString(scheduleId.toString()));\n        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n        Map<String, Object> localVarFormParams = new HashMap<String, Object>();\n        final String[] localVarAccepts = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n        final String[] localVarContentTypes = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n        if(progressListener != null) {\n            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n                @Override\n                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                    return originalResponse.newBuilder()\n                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n                    .build();\n                }\n            });\n        }\n        String[] localVarAuthNames = new String[] { \"basicAuth\" };\n        return apiClient.buildCall(localVarPath, \"GET\", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);\n    }\n    /**\n     * Finds organizations public transport schedule\n     * Finds organizations public transport schedule \n     * @param organizationId Organization id (required)\n     * @param scheduleId Schedule id (required)\n     * @return Schedule\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public Schedule findOrganizationPublicTransportSchedule(String organizationId, String scheduleId) throws ApiException {\n        ApiResponse<Schedule> resp = findOrganizationPublicTransportScheduleWithHttpInfo(organizationId, scheduleId);\n        return resp.getData();\n    }\n    /**\n     * Finds organizations public transport schedule\n     * Finds organizations public transport schedule \n     * @param organizationId Organization id (required)\n     * @param scheduleId Schedule id (required)\n     * @return ApiResponse&lt;Schedule&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public ApiResponse<Schedule> findOrganizationPublicTransportScheduleWithHttpInfo(String organizationId, String scheduleId) throws ApiException {\n        com.squareup.okhttp.Call call = findOrganizationPublicTransportScheduleCall(organizationId, scheduleId, null, null);\n        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();\n        return apiClient.execute(call, localVarReturnType);\n    }\n    /**\n     * Finds organizations public transport schedule (asynchronously)\n     * Finds organizations public transport schedule \n     * @param organizationId Organization id (required)\n     * @param scheduleId Schedule id (required)\n     * @param callback The callback to be executed when the API call finishes\n     * @return The request call\n     * @throws ApiException If fail to process the API call, e.g. serializing the request body object\n     */\n    public com.squareup.okhttp.Call findOrganizationPublicTransportScheduleAsync(String organizationId, String scheduleId, final ApiCallback<Schedule> callback) throws ApiException {\n        ProgressResponseBody.ProgressListener progressListener = null;\n        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;\n        if (callback != null) {\n            progressListener = new ProgressResponseBody.ProgressListener() {\n                @Override\n                public void update(long bytesRead, long contentLength, boolean done) {\n                    callback.onDownloadProgress(bytesRead, contentLength, done);\n                }\n            };\n            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {\n                @Override\n                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {\n                    callback.onUploadProgress(bytesWritten, contentLength, done);\n                }\n            };\n        }\n        com.squareup.okhttp.Call call = findOrganizationPublicTransportScheduleCall(organizationId, scheduleId, progressListener, progressRequestListener);\n        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();\n        apiClient.executeAsync(call, localVarReturnType, callback);\n        return call;\n    }\n    /* Build call for findOrganizationPublicTransportStop */\n    private com.squareup.okhttp.Call findOrganizationPublicTransportStopCall(String organizationId, String stopId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {\n        Object localVarPostBody = null;\n        \n        // verify the required parameter 'organizationId' is set\n        if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportStop(Async)\");\n        }\n        \n        // verify the required parameter 'stopId' is set\n        if (stopId == null) {\n            throw new ApiException(\"Missing the required parameter 'stopId' when calling findOrganizationPublicTransportStop(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId}/transportStops/{stopId}\".replaceAll(\"\\\\{format\\\\}\",\"json\")\n        .replaceAll(\"\\\\{\" + \"organizationId\" + \"\\\\}\", apiClient.escapeString(organizationId.toString()))\n        .replaceAll(\"\\\\{\" + \"stopId\" + \"\\\\}\", apiClient.escapeString(stopId.toString()));\n        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n        Map<String, Object> localVarFormParams = new HashMap<String, Object>();\n        final String[] localVarAccepts = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n        final String[] localVarContentTypes = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n        if(progressListener != null) {\n            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n                @Override\n                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                    return originalResponse.newBuilder()\n                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n                    .build();\n                }\n            });\n        }\n        String[] localVarAuthNames = new String[] { \"basicAuth\" };\n        return apiClient.buildCall(localVarPath, \"GET\", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);\n    }\n    /**\n     * Finds a stop of organizations public transport route\n     * Finds a stop of organizations public transport route \n     * @param organizationId Organization id (required)\n     * @param stopId Stop id (required)\n     * @return Stop\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public Stop findOrganizationPublicTransportStop(String organizationId, String stopId) throws ApiException {\n        ApiResponse<Stop> resp = findOrganizationPublicTransportStopWithHttpInfo(organizationId, stopId);\n        return resp.getData();\n    }\n    /**\n     * Finds a stop of organizations public transport route\n     * Finds a stop of organizations public transport route \n     * @param organizationId Organization id (required)\n     * @param stopId Stop id (required)\n     * @return ApiResponse&lt;Stop&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public ApiResponse<Stop> findOrganizationPublicTransportStopWithHttpInfo(String organizationId, String stopId) throws ApiException {\n        com.squareup.okhttp.Call call = findOrganizationPublicTransportStopCall(organizationId, stopId, null, null);\n        Type localVarReturnType = new TypeToken<Stop>(){}.getType();\n        return apiClient.execute(call, localVarReturnType);\n    }\n    /**\n     * Finds a stop of organizations public transport route (asynchronously)\n     * Finds a stop of organizations public transport route \n     * @param organizationId Organization id (required)\n     * @param stopId Stop id (required)\n     * @param callback The callback to be executed when the API call finishes\n     * @return The request call\n     * @throws ApiException If fail to process the API call, e.g. serializing the request body object\n     */\n    public com.squareup.okhttp.Call findOrganizationPublicTransportStopAsync(String organizationId, String stopId, final ApiCallback<Stop> callback) throws ApiException {\n        ProgressResponseBody.ProgressListener progressListener = null;\n        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;\n        if (callback != null) {\n            progressListener = new ProgressResponseBody.ProgressListener() {\n                @Override\n                public void update(long bytesRead, long contentLength, boolean done) {\n                    callback.onDownloadProgress(bytesRead, contentLength, done);\n                }\n            };\n            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {\n                @Override\n                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {\n                    callback.onUploadProgress(bytesWritten, contentLength, done);\n                }\n            };\n        }\n        com.squareup.okhttp.Call call = findOrganizationPublicTransportStopCall(organizationId, stopId, progressListener, progressRequestListener);\n        Type localVarReturnType = new TypeToken<Stop>(){}.getType();\n        apiClient.executeAsync(call, localVarReturnType, callback);\n        return call;\n    }\n    /* Build call for findOrganizationPublicTransportStopTime */\n    private com.squareup.okhttp.Call findOrganizationPublicTransportStopTimeCall(String organizationId, String stopTimeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {\n        Object localVarPostBody = null;\n        \n        // verify the required parameter 'organizationId' is set\n        if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportStopTime(Async)\");\n        }\n        \n        // verify the required parameter 'stopTimeId' is set\n        if (stopTimeId == null) {\n            throw new ApiException(\"Missing the required parameter 'stopTimeId' when calling findOrganizationPublicTransportStopTime(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId}/transportStopTimes/{stopTimeId}\".replaceAll(\"\\\\{format\\\\}\",\"json\")\n        .replaceAll(\"\\\\{\" + \"organizationId\" + \"\\\\}\", apiClient.escapeString(organizationId.toString()))\n        .replaceAll(\"\\\\{\" + \"stopTimeId\" + \"\\\\}\", apiClient.escapeString(stopTimeId.toString()));\n        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n        Map<String, Object> localVarFormParams = new HashMap<String, Object>();\n        final String[] localVarAccepts = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n        final String[] localVarContentTypes = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n        if(progressListener != null) {\n            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n                @Override\n                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                    return originalResponse.newBuilder()\n                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n                    .build();\n                }\n            });\n        }\n        String[] localVarAuthNames = new String[] { \"basicAuth\" };\n        return apiClient.buildCall(localVarPath, \"GET\", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);\n    }\n    /**\n     * Finds organizations public transport stopTime\n     * Finds organizations public transport stopTime \n     * @param organizationId Organization id (required)\n     * @param stopTimeId StopTime id (required)\n     * @return StopTime\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public StopTime findOrganizationPublicTransportStopTime(String organizationId, String stopTimeId) throws ApiException {\n        ApiResponse<StopTime> resp = findOrganizationPublicTransportStopTimeWithHttpInfo(organizationId, stopTimeId);\n        return resp.getData();\n    }\n    /**\n     * Finds organizations public transport stopTime\n     * Finds organizations public transport stopTime \n     * @param organizationId Organization id (required)\n     * @param stopTimeId StopTime id (required)\n     * @return ApiResponse&lt;StopTime&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public ApiResponse<StopTime> findOrganizationPublicTransportStopTimeWithHttpInfo(String organizationId, String stopTimeId) throws ApiException {\n        com.squareup.okhttp.Call call = findOrganizationPublicTransportStopTimeCall(organizationId, stopTimeId, null, null);\n        Type localVarReturnType = new TypeToken<StopTime>(){}.getType();\n        return apiClient.execute(call, localVarReturnType);\n    }\n    /**\n     * Finds organizations public transport stopTime (asynchronously)\n     * Finds organizations public transport stopTime \n     * @param organizationId Organization id (required)\n     * @param stopTimeId StopTime id (required)\n     * @param callback The callback to be executed when the API call finishes\n     * @return The request call\n     * @throws ApiException If fail to process the API call, e.g. serializing the request body object\n     */\n    public com.squareup.okhttp.Call findOrganizationPublicTransportStopTimeAsync(String organizationId, String stopTimeId, final ApiCallback<StopTime> callback) throws ApiException {\n        ProgressResponseBody.ProgressListener progressListener = null;\n        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;\n        if (callback != null) {\n            progressListener = new ProgressResponseBody.ProgressListener() {\n                @Override\n                public void update(long bytesRead, long contentLength, boolean done) {\n                    callback.onDownloadProgress(bytesRead, contentLength, done);\n                }\n            };\n            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {\n                @Override\n                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {\n                    callback.onUploadProgress(bytesWritten, contentLength, done);\n                }\n            };\n        }\n        com.squareup.okhttp.Call call = findOrganizationPublicTransportStopTimeCall(organizationId, stopTimeId, progressListener, progressRequestListener);\n        Type localVarReturnType = new TypeToken<StopTime>(){}.getType();\n        apiClient.executeAsync(call, localVarReturnType, callback);\n        return call;\n    }\n    /* Build call for findOrganizationPublicTransportTrip */\n    private com.squareup.okhttp.Call findOrganizationPublicTransportTripCall(String organizationId, String tripId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {\n        Object localVarPostBody = null;\n        \n        // verify the required parameter 'organizationId' is set\n        if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportTrip(Async)\");\n        }\n        \n        // verify the required parameter 'tripId' is set\n        if (tripId == null) {\n            throw new ApiException(\"Missing the required parameter 'tripId' when calling findOrganizationPublicTransportTrip(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId}/transportTrips/{tripId}\".replaceAll(\"\\\\{format\\\\}\",\"json\")\n        .replaceAll(\"\\\\{\" + \"organizationId\" + \"\\\\}\", apiClient.escapeString(organizationId.toString()))\n        .replaceAll(\"\\\\{\" + \"tripId\" + \"\\\\}\", apiClient.escapeString(tripId.toString()));\n        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n        Map<String, Object> localVarFormParams = new HashMap<String, Object>();\n        final String[] localVarAccepts = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n        final String[] localVarContentTypes = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n        if(progressListener != null) {\n            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n                @Override\n                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                    return originalResponse.newBuilder()\n                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n                    .build();\n                }\n            });\n        }\n        String[] localVarAuthNames = new String[] { \"basicAuth\" };\n        return apiClient.buildCall(localVarPath, \"GET\", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);\n    }\n    /**\n     * Finds organizations public transport trip\n     * Finds organizations public transport trip \n     * @param organizationId Organization id (required)\n     * @param tripId Trip id (required)\n     * @return Trip\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public Trip findOrganizationPublicTransportTrip(String organizationId, String tripId) throws ApiException {\n        ApiResponse<Trip> resp = findOrganizationPublicTransportTripWithHttpInfo(organizationId, tripId);\n        return resp.getData();\n    }\n    /**\n     * Finds organizations public transport trip\n     * Finds organizations public transport trip \n     * @param organizationId Organization id (required)\n     * @param tripId Trip id (required)\n     * @return ApiResponse&lt;Trip&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public ApiResponse<Trip> findOrganizationPublicTransportTripWithHttpInfo(String organizationId, String tripId) throws ApiException {\n        com.squareup.okhttp.Call call = findOrganizationPublicTransportTripCall(organizationId, tripId, null, null);\n        Type localVarReturnType = new TypeToken<Trip>(){}.getType();\n        return apiClient.execute(call, localVarReturnType);\n    }\n    /**\n     * Finds organizations public transport trip (asynchronously)\n     * Finds organizations public transport trip \n     * @param organizationId Organization id (required)\n     * @param tripId Trip id (required)\n     * @param callback The callback to be executed when the API call finishes\n     * @return The request call\n     * @throws ApiException If fail to process the API call, e.g. serializing the request body object\n     */\n    public com.squareup.okhttp.Call findOrganizationPublicTransportTripAsync(String organizationId, String tripId, final ApiCallback<Trip> callback) throws ApiException {\n        ProgressResponseBody.ProgressListener progressListener = null;\n        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;\n        if (callback != null) {\n            progressListener = new ProgressResponseBody.ProgressListener() {\n                @Override\n                public void update(long bytesRead, long contentLength, boolean done) {\n                    callback.onDownloadProgress(bytesRead, contentLength, done);\n                }\n            };\n            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {\n                @Override\n                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {\n                    callback.onUploadProgress(bytesWritten, contentLength, done);\n                }\n            };\n        }\n        com.squareup.okhttp.Call call = findOrganizationPublicTransportTripCall(organizationId, tripId, progressListener, progressRequestListener);\n        Type localVarReturnType = new TypeToken<Trip>(){}.getType();\n        apiClient.executeAsync(call, localVarReturnType, callback);\n        return call;\n    }\n    /* Build call for listOrganizationPublicTransportAgencies */\n    private com.squareup.okhttp.Call listOrganizationPublicTransportAgenciesCall(String organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {\n        Object localVarPostBody = null;\n        \n        // verify the required parameter 'organizationId' is set\n        if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportAgencies(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId}/transportAgencies\".replaceAll(\"\\\\{format\\\\}\",\"json\")\n        .replaceAll(\"\\\\{\" + \"organizationId\" + \"\\\\}\", apiClient.escapeString(organizationId.toString()));\n        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n        Map<String, Object> localVarFormParams = new HashMap<String, Object>();\n        final String[] localVarAccepts = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n        final String[] localVarContentTypes = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n        if(progressListener != null) {\n            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n                @Override\n                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                    return originalResponse.newBuilder()\n                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n                    .build();\n                }\n            });\n        }\n        String[] localVarAuthNames = new String[] { \"basicAuth\" };\n        return apiClient.buildCall(localVarPath, \"GET\", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);\n    }\n    /**\n     * Lists organizations public transport agencies\n     * Lists organizations public transport agencies \n     * @param organizationId Organization id (required)\n     * @return List&lt;Agency&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public List<Agency> listOrganizationPublicTransportAgencies(String organizationId) throws ApiException {\n        ApiResponse<List<Agency>> resp = listOrganizationPublicTransportAgenciesWithHttpInfo(organizationId);\n        return resp.getData();\n    }\n    /**\n     * Lists organizations public transport agencies\n     * Lists organizations public transport agencies \n     * @param organizationId Organization id (required)\n     * @return ApiResponse&lt;List&lt;Agency&gt;&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public ApiResponse<List<Agency>> listOrganizationPublicTransportAgenciesWithHttpInfo(String organizationId) throws ApiException {\n        com.squareup.okhttp.Call call = listOrganizationPublicTransportAgenciesCall(organizationId, null, null);\n        Type localVarReturnType = new TypeToken<List<Agency>>(){}.getType();\n        return apiClient.execute(call, localVarReturnType);\n    }\n    /**\n     * Lists organizations public transport agencies (asynchronously)\n     * Lists organizations public transport agencies \n     * @param organizationId Organization id (required)\n     * @param callback The callback to be executed when the API call finishes\n     * @return The request call\n     * @throws ApiException If fail to process the API call, e.g. serializing the request body object\n     */\n    public com.squareup.okhttp.Call listOrganizationPublicTransportAgenciesAsync(String organizationId, final ApiCallback<List<Agency>> callback) throws ApiException {\n        ProgressResponseBody.ProgressListener progressListener = null;\n        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;\n        if (callback != null) {\n            progressListener = new ProgressResponseBody.ProgressListener() {\n                @Override\n                public void update(long bytesRead, long contentLength, boolean done) {\n                    callback.onDownloadProgress(bytesRead, contentLength, done);\n                }\n            };\n            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {\n                @Override\n                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {\n                    callback.onUploadProgress(bytesWritten, contentLength, done);\n                }\n            };\n        }\n        com.squareup.okhttp.Call call = listOrganizationPublicTransportAgenciesCall(organizationId, progressListener, progressRequestListener);\n        Type localVarReturnType = new TypeToken<List<Agency>>(){}.getType();\n        apiClient.executeAsync(call, localVarReturnType, callback);\n        return call;\n    }\n    /* Build call for listOrganizationPublicTransportRoutes */\n    private com.squareup.okhttp.Call listOrganizationPublicTransportRoutesCall(String organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {\n        Object localVarPostBody = null;\n        \n        // verify the required parameter 'organizationId' is set\n        if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportRoutes(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId}/transportRoutes\".replaceAll(\"\\\\{format\\\\}\",\"json\")\n        .replaceAll(\"\\\\{\" + \"organizationId\" + \"\\\\}\", apiClient.escapeString(organizationId.toString()));\n        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n        Map<String, Object> localVarFormParams = new HashMap<String, Object>();\n        final String[] localVarAccepts = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n        final String[] localVarContentTypes = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n        if(progressListener != null) {\n            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n                @Override\n                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                    return originalResponse.newBuilder()\n                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n                    .build();\n                }\n            });\n        }\n        String[] localVarAuthNames = new String[] { \"basicAuth\" };\n        return apiClient.buildCall(localVarPath, \"GET\", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);\n    }\n    /**\n     * Lists organizations public transport routes\n     * Lists organizations public transport routes \n     * @param organizationId Organization id (required)\n     * @return List&lt;Route&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public List<Route> listOrganizationPublicTransportRoutes(String organizationId) throws ApiException {\n        ApiResponse<List<Route>> resp = listOrganizationPublicTransportRoutesWithHttpInfo(organizationId);\n        return resp.getData();\n    }\n    /**\n     * Lists organizations public transport routes\n     * Lists organizations public transport routes \n     * @param organizationId Organization id (required)\n     * @return ApiResponse&lt;List&lt;Route&gt;&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public ApiResponse<List<Route>> listOrganizationPublicTransportRoutesWithHttpInfo(String organizationId) throws ApiException {\n        com.squareup.okhttp.Call call = listOrganizationPublicTransportRoutesCall(organizationId, null, null);\n        Type localVarReturnType = new TypeToken<List<Route>>(){}.getType();\n        return apiClient.execute(call, localVarReturnType);\n    }\n    /**\n     * Lists organizations public transport routes (asynchronously)\n     * Lists organizations public transport routes \n     * @param organizationId Organization id (required)\n     * @param callback The callback to be executed when the API call finishes\n     * @return The request call\n     * @throws ApiException If fail to process the API call, e.g. serializing the request body object\n     */\n    public com.squareup.okhttp.Call listOrganizationPublicTransportRoutesAsync(String organizationId, final ApiCallback<List<Route>> callback) throws ApiException {\n        ProgressResponseBody.ProgressListener progressListener = null;\n        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;\n        if (callback != null) {\n            progressListener = new ProgressResponseBody.ProgressListener() {\n                @Override\n                public void update(long bytesRead, long contentLength, boolean done) {\n                    callback.onDownloadProgress(bytesRead, contentLength, done);\n                }\n            };\n            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {\n                @Override\n                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {\n                    callback.onUploadProgress(bytesWritten, contentLength, done);\n                }\n            };\n        }\n        com.squareup.okhttp.Call call = listOrganizationPublicTransportRoutesCall(organizationId, progressListener, progressRequestListener);\n        Type localVarReturnType = new TypeToken<List<Route>>(){}.getType();\n        apiClient.executeAsync(call, localVarReturnType, callback);\n        return call;\n    }\n    /* Build call for listOrganizationPublicTransportSchedules */\n    private com.squareup.okhttp.Call listOrganizationPublicTransportSchedulesCall(String organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {\n        Object localVarPostBody = null;\n        \n        // verify the required parameter 'organizationId' is set\n        if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportSchedules(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId}/transportSchedules\".replaceAll(\"\\\\{format\\\\}\",\"json\")\n        .replaceAll(\"\\\\{\" + \"organizationId\" + \"\\\\}\", apiClient.escapeString(organizationId.toString()));\n        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n        Map<String, Object> localVarFormParams = new HashMap<String, Object>();\n        final String[] localVarAccepts = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n        final String[] localVarContentTypes = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n        if(progressListener != null) {\n            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n                @Override\n                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                    return originalResponse.newBuilder()\n                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n                    .build();\n                }\n            });\n        }\n        String[] localVarAuthNames = new String[] { \"basicAuth\" };\n        return apiClient.buildCall(localVarPath, \"GET\", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);\n    }\n    /**\n     * Lists schedules of organization&#39;s public transport schedules\n     * Lists schedules of organization&#39;s public transport schedules \n     * @param organizationId Organization id (required)\n     * @return List&lt;Schedule&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public List<Schedule> listOrganizationPublicTransportSchedules(String organizationId) throws ApiException {\n        ApiResponse<List<Schedule>> resp = listOrganizationPublicTransportSchedulesWithHttpInfo(organizationId);\n        return resp.getData();\n    }\n    /**\n     * Lists schedules of organization&#39;s public transport schedules\n     * Lists schedules of organization&#39;s public transport schedules \n     * @param organizationId Organization id (required)\n     * @return ApiResponse&lt;List&lt;Schedule&gt;&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public ApiResponse<List<Schedule>> listOrganizationPublicTransportSchedulesWithHttpInfo(String organizationId) throws ApiException {\n        com.squareup.okhttp.Call call = listOrganizationPublicTransportSchedulesCall(organizationId, null, null);\n        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();\n        return apiClient.execute(call, localVarReturnType);\n    }\n    /**\n     * Lists schedules of organization&#39;s public transport schedules (asynchronously)\n     * Lists schedules of organization&#39;s public transport schedules \n     * @param organizationId Organization id (required)\n     * @param callback The callback to be executed when the API call finishes\n     * @return The request call\n     * @throws ApiException If fail to process the API call, e.g. serializing the request body object\n     */\n    public com.squareup.okhttp.Call listOrganizationPublicTransportSchedulesAsync(String organizationId, final ApiCallback<List<Schedule>> callback) throws ApiException {\n        ProgressResponseBody.ProgressListener progressListener = null;\n        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;\n        if (callback != null) {\n            progressListener = new ProgressResponseBody.ProgressListener() {\n                @Override\n                public void update(long bytesRead, long contentLength, boolean done) {\n                    callback.onDownloadProgress(bytesRead, contentLength, done);\n                }\n            };\n            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {\n                @Override\n                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {\n                    callback.onUploadProgress(bytesWritten, contentLength, done);\n                }\n            };\n        }\n        com.squareup.okhttp.Call call = listOrganizationPublicTransportSchedulesCall(organizationId, progressListener, progressRequestListener);\n        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();\n        apiClient.executeAsync(call, localVarReturnType, callback);\n        return call;\n    }\n    /* Build call for listOrganizationPublicTransportStopTimes */\n    private com.squareup.okhttp.Call listOrganizationPublicTransportStopTimesCall(String organizationId, String stopId, Integer departureTime, String sortBy, String sortDir, Long firstResult, Long maxResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {\n        Object localVarPostBody = null;\n        \n        // verify the required parameter 'organizationId' is set\n        if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStopTimes(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId}/transportStopTimes\".replaceAll(\"\\\\{format\\\\}\",\"json\")\n        .replaceAll(\"\\\\{\" + \"organizationId\" + \"\\\\}\", apiClient.escapeString(organizationId.toString()));\n        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n        if (stopId != null)\n        localVarQueryParams.addAll(apiClient.parameterToPairs(\"\", \"stopId\", stopId));\n        if (departureTime != null)\n        localVarQueryParams.addAll(apiClient.parameterToPairs(\"\", \"departureTime\", departureTime));\n        if (sortBy != null)\n        localVarQueryParams.addAll(apiClient.parameterToPairs(\"\", \"sortBy\", sortBy));\n        if (sortDir != null)\n        localVarQueryParams.addAll(apiClient.parameterToPairs(\"\", \"sortDir\", sortDir));\n        if (firstResult != null)\n        localVarQueryParams.addAll(apiClient.parameterToPairs(\"\", \"firstResult\", firstResult));\n        if (maxResults != null)\n        localVarQueryParams.addAll(apiClient.parameterToPairs(\"\", \"maxResults\", maxResults));\n        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n        Map<String, Object> localVarFormParams = new HashMap<String, Object>();\n        final String[] localVarAccepts = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n        final String[] localVarContentTypes = {\n            \"application/json;charset=utf-8\"\n        };\n        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n        if(progressListener != null) {\n            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n                @Override\n                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                    return originalResponse.newBuilder()\n                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n                    .build();\n                }\n            });\n        }\n        String[] localVarAuthNames = new String[] { \"basicAuth\" };\n        return apiClient.buildCall(localVarPath, \"GET\", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);\n    }\n    /**\n     * Lists stopTimes of organization&#39;s public transport stopTimes\n     * Lists stopTimes of organization&#39;s public transport stopTimes \n     * @param organizationId Organization id (required)\n     * @param stopId Filter stop times by stopId (optional)\n     * @param departureTime Filter stop times that depart in or after specified time. Value is defined in seconds since midnight (optional)\n     * @param sortBy DEPARTURE_TIME (optional)\n     * @param sortDir ASC or DESC (optional)\n     * @param firstResult First result (optional)\n     * @param maxResults Max results (optional)\n     * @return List&lt;StopTime&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public List<StopTime> listOrganizationPublicTransportStopTimes(String organizationId, String stopId, Integer departureTime, String sortBy, String sortDir, Long firstResult, Long maxResults) throws ApiException {\n        ApiResponse<List<StopTime>> resp = listOrganizationPublicTransportStopTimesWithHttpInfo(organizationId, stopId, departureTime, sortBy, sortDir, firstResult, maxResults);\n        return resp.getData();\n    }\n    /**\n     * Lists stopTimes of organization&#39;s public transport stopTimes\n     * Lists stopTimes of organization&#39;s public transport stopTimes \n     * @param organizationId Organization id (required)\n     * @param stopId Filter stop times by stopId (optional)\n     * @param departureTime Filter stop times that depart in or after specified time. Value is defined in seconds since midnight (optional)\n     * @param sortBy DEPARTURE_TIME (optional)\n     * @param sortDir ASC or DESC (optional)\n     * @param firstResult First result (optional)\n     * @param maxResults Max results (optional)\n     * @return ApiResponse&lt;List&lt;StopTime&gt;&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body\n     */\n    public ApiResponse<List<StopTime>> listOrganizationPublicTransportStopTimesWithHttpInfo(String organizationId, String stopId, Integer departureTime, String sortBy, String sortDir, Long firstResult, Long maxResults) throws ApiException {\n        com.squareup.okhttp.Call call = listOrganizationPublicTransportStopTimesCall(organizationId, stopId, departureTime, sortBy, sortDir, firstResult, maxResults, null, null);\n        Type localVarReturnType = new TypeToken<List<StopTime>>(){}.getType();\n        return apiClient.execute(call, localVarReturnType);\n    }\n    /**\n     * Lists stopTimes of organization&#39;s public transport stopTimes (asynchronously)\n     * Lists stopTimes of organization&#39;s public transport stopTimes \n     * @param organizationId Organization id (required)\n     * @param stopId Filter stop times by stopId (optional)\n     * @param departureTime Filter stop times that depart in or after specified time. Value is defined in seconds since midnight (optional)\n     * @param sortBy DEPARTURE_TIME (optional)\n     * @param sortDir ASC or DESC (optional)\n     * @param firstResult First result (optional)\n     * @param maxResults Max results (optional)\n     * @param callback The callback to be executed when the API call finishes\n     * @return The request call\n     * @throws ApiException If fail to process the API call, e.g. serializing the request body object\n     */\n    public com.squareup.okhttp.Call listOrganizationPublicTransportStopTimesAsync(String organizationId, String stopId, Integer departureTime, String sortBy, String sortDir, Long firstResult, Long maxResults, final ApiCallback<List<StopTime>> callback) throws ApiException {\n        ProgressResponseBody.ProgressListener progressListener = null;\n        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;\n        if (callback != null) {\n            progressListener = new ProgressResponseBody.ProgressListener() {\n                @Override\n                public void update(long bytesRead, long contentLength, boolean done) {\n                    callback.onDownloadProgress(bytesRead, contentLength, done);\n                }\n            };\n            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {\n                @Override\n                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {\n                    callback.onUploadProgress(bytesWritten, contentLength, done);\n                }\n            };\n        }\n        com.squareup.okhttp.Call call = listOrganizationPublicTransportStopTimesCall(organizationId, stopId, departureTime, sortBy, sortDir, firstResult, maxResults, progressListener, progressRequestListener);\n        Type localVarReturnType = new TypeToken<List<StopTime>>(){}.getType();\n        apiClient.executeAsync(call, localVarReturnType, callback);\n        return call;\n    }\n    /* Build call for listOrganizationPublicTransportStops */\n    private com.squareup.okhttp.Call listOrganizationPublicTransportStopsCall(String organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {\n        Object localVarPostBody = null;\n        \n        // verify the required parameter 'organizationId' is set\n", "answers": ["        if (organizationId == null) {"], "length": 5074, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "1d864d8dd6e3b3f8fae4066f5f2cf765b3cf2c43bb7c4751"}
{"input": "", "context": "/*************************************************************************\nALGLIB 3.13.0 (source code generated 2017-12-29)\nCopyright (c) Sergey Bochkanov (ALGLIB project).\n>>> SOURCE LICENSE >>>\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation (www.fsf.org); either version 2 of the \nLicense, or (at your option) any later version.\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nA copy of the GNU General Public License is available at\nhttp://www.fsf.org/licensing/licenses\n>>> END OF LICENSE >>>\n*************************************************************************/\n#pragma warning disable 162\n#pragma warning disable 164\n#pragma warning disable 219\nusing System;\npublic partial class alglib\n{\n    \n    /*************************************************************************\n    Computation of nodes and weights for a Gauss quadrature formula\n    The algorithm generates the N-point Gauss quadrature formula  with  weight\n    function given by coefficients alpha and beta  of  a  recurrence  relation\n    which generates a system of orthogonal polynomials:\n    P-1(x)   =  0\n    P0(x)    =  1\n    Pn+1(x)  =  (x-alpha(n))*Pn(x)  -  beta(n)*Pn-1(x)\n    and zeroth moment Mu0\n    Mu0 = integral(W(x)dx,a,b)\n    INPUT PARAMETERS:\n        Alpha   -   array[0..N-1], alpha coefficients\n        Beta    -   array[0..N-1], beta coefficients\n                    Zero-indexed element is not used and may be arbitrary.\n                    Beta[I]>0.\n        Mu0     -   zeroth moment of the weight function.\n        N       -   number of nodes of the quadrature formula, N>=1\n    OUTPUT PARAMETERS:\n        Info    -   error code:\n                    * -3    internal eigenproblem solver hasn't converged\n                    * -2    Beta[i]<=0\n                    * -1    incorrect N was passed\n                    *  1    OK\n        X       -   array[0..N-1] - array of quadrature nodes,\n                    in ascending order.\n        W       -   array[0..N-1] - array of quadrature weights.\n      -- ALGLIB --\n         Copyright 2005-2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void gqgeneraterec(double[] alpha, double[] beta, double mu0, int n, out int info, out double[] x, out double[] w)\n    {\n        info = 0;\n        x = new double[0];\n        w = new double[0];\n        gq.gqgeneraterec(alpha, beta, mu0, n, ref info, ref x, ref w);\n        return;\n    }\n    \n    /*************************************************************************\n    Computation of nodes and weights for a Gauss-Lobatto quadrature formula\n    The algorithm generates the N-point Gauss-Lobatto quadrature formula  with\n    weight function given by coefficients alpha and beta of a recurrence which\n    generates a system of orthogonal polynomials.\n    P-1(x)   =  0\n    P0(x)    =  1\n    Pn+1(x)  =  (x-alpha(n))*Pn(x)  -  beta(n)*Pn-1(x)\n    and zeroth moment Mu0\n    Mu0 = integral(W(x)dx,a,b)\n    INPUT PARAMETERS:\n        Alpha   -   array[0..N-2], alpha coefficients\n        Beta    -   array[0..N-2], beta coefficients.\n                    Zero-indexed element is not used, may be arbitrary.\n                    Beta[I]>0\n        Mu0     -   zeroth moment of the weighting function.\n        A       -   left boundary of the integration interval.\n        B       -   right boundary of the integration interval.\n        N       -   number of nodes of the quadrature formula, N>=3\n                    (including the left and right boundary nodes).\n    OUTPUT PARAMETERS:\n        Info    -   error code:\n                    * -3    internal eigenproblem solver hasn't converged\n                    * -2    Beta[i]<=0\n                    * -1    incorrect N was passed\n                    *  1    OK\n        X       -   array[0..N-1] - array of quadrature nodes,\n                    in ascending order.\n        W       -   array[0..N-1] - array of quadrature weights.\n      -- ALGLIB --\n         Copyright 2005-2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void gqgenerategausslobattorec(double[] alpha, double[] beta, double mu0, double a, double b, int n, out int info, out double[] x, out double[] w)\n    {\n        info = 0;\n        x = new double[0];\n        w = new double[0];\n        gq.gqgenerategausslobattorec(alpha, beta, mu0, a, b, n, ref info, ref x, ref w);\n        return;\n    }\n    \n    /*************************************************************************\n    Computation of nodes and weights for a Gauss-Radau quadrature formula\n    The algorithm generates the N-point Gauss-Radau  quadrature  formula  with\n    weight function given by the coefficients alpha and  beta  of a recurrence\n    which generates a system of orthogonal polynomials.\n    P-1(x)   =  0\n    P0(x)    =  1\n    Pn+1(x)  =  (x-alpha(n))*Pn(x)  -  beta(n)*Pn-1(x)\n    and zeroth moment Mu0\n    Mu0 = integral(W(x)dx,a,b)\n    INPUT PARAMETERS:\n        Alpha   -   array[0..N-2], alpha coefficients.\n        Beta    -   array[0..N-1], beta coefficients\n                    Zero-indexed element is not used.\n                    Beta[I]>0\n        Mu0     -   zeroth moment of the weighting function.\n        A       -   left boundary of the integration interval.\n        N       -   number of nodes of the quadrature formula, N>=2\n                    (including the left boundary node).\n    OUTPUT PARAMETERS:\n        Info    -   error code:\n                    * -3    internal eigenproblem solver hasn't converged\n                    * -2    Beta[i]<=0\n                    * -1    incorrect N was passed\n                    *  1    OK\n        X       -   array[0..N-1] - array of quadrature nodes,\n                    in ascending order.\n        W       -   array[0..N-1] - array of quadrature weights.\n      -- ALGLIB --\n         Copyright 2005-2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void gqgenerategaussradaurec(double[] alpha, double[] beta, double mu0, double a, int n, out int info, out double[] x, out double[] w)\n    {\n        info = 0;\n        x = new double[0];\n        w = new double[0];\n        gq.gqgenerategaussradaurec(alpha, beta, mu0, a, n, ref info, ref x, ref w);\n        return;\n    }\n    \n    /*************************************************************************\n    Returns nodes/weights for Gauss-Legendre quadrature on [-1,1] with N\n    nodes.\n    INPUT PARAMETERS:\n        N           -   number of nodes, >=1\n    OUTPUT PARAMETERS:\n        Info        -   error code:\n                        * -4    an  error   was   detected   when  calculating\n                                weights/nodes.  N  is  too  large   to  obtain\n                                weights/nodes  with  high   enough   accuracy.\n                                Try  to   use   multiple   precision  version.\n                        * -3    internal eigenproblem solver hasn't  converged\n                        * -1    incorrect N was passed\n                        * +1    OK\n        X           -   array[0..N-1] - array of quadrature nodes,\n                        in ascending order.\n        W           -   array[0..N-1] - array of quadrature weights.\n      -- ALGLIB --\n         Copyright 12.05.2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void gqgenerategausslegendre(int n, out int info, out double[] x, out double[] w)\n    {\n        info = 0;\n        x = new double[0];\n        w = new double[0];\n        gq.gqgenerategausslegendre(n, ref info, ref x, ref w);\n        return;\n    }\n    \n    /*************************************************************************\n    Returns  nodes/weights  for  Gauss-Jacobi quadrature on [-1,1] with weight\n    function W(x)=Power(1-x,Alpha)*Power(1+x,Beta).\n    INPUT PARAMETERS:\n        N           -   number of nodes, >=1\n        Alpha       -   power-law coefficient, Alpha>-1\n        Beta        -   power-law coefficient, Beta>-1\n    OUTPUT PARAMETERS:\n        Info        -   error code:\n                        * -4    an  error  was   detected   when   calculating\n                                weights/nodes. Alpha or  Beta  are  too  close\n                                to -1 to obtain weights/nodes with high enough\n                                accuracy, or, may be, N is too large.  Try  to\n                                use multiple precision version.\n                        * -3    internal eigenproblem solver hasn't converged\n                        * -1    incorrect N/Alpha/Beta was passed\n                        * +1    OK\n        X           -   array[0..N-1] - array of quadrature nodes,\n                        in ascending order.\n        W           -   array[0..N-1] - array of quadrature weights.\n      -- ALGLIB --\n         Copyright 12.05.2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void gqgenerategaussjacobi(int n, double alpha, double beta, out int info, out double[] x, out double[] w)\n    {\n        info = 0;\n        x = new double[0];\n        w = new double[0];\n        gq.gqgenerategaussjacobi(n, alpha, beta, ref info, ref x, ref w);\n        return;\n    }\n    \n    /*************************************************************************\n    Returns  nodes/weights  for  Gauss-Laguerre  quadrature  on  [0,+inf) with\n    weight function W(x)=Power(x,Alpha)*Exp(-x)\n    INPUT PARAMETERS:\n        N           -   number of nodes, >=1\n        Alpha       -   power-law coefficient, Alpha>-1\n    OUTPUT PARAMETERS:\n        Info        -   error code:\n                        * -4    an  error  was   detected   when   calculating\n                                weights/nodes. Alpha is too  close  to  -1  to\n                                obtain weights/nodes with high enough accuracy\n                                or, may  be,  N  is  too  large.  Try  to  use\n                                multiple precision version.\n                        * -3    internal eigenproblem solver hasn't converged\n                        * -1    incorrect N/Alpha was passed\n                        * +1    OK\n        X           -   array[0..N-1] - array of quadrature nodes,\n                        in ascending order.\n        W           -   array[0..N-1] - array of quadrature weights.\n      -- ALGLIB --\n         Copyright 12.05.2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void gqgenerategausslaguerre(int n, double alpha, out int info, out double[] x, out double[] w)\n    {\n        info = 0;\n        x = new double[0];\n        w = new double[0];\n        gq.gqgenerategausslaguerre(n, alpha, ref info, ref x, ref w);\n        return;\n    }\n    \n    /*************************************************************************\n    Returns  nodes/weights  for  Gauss-Hermite  quadrature on (-inf,+inf) with\n    weight function W(x)=Exp(-x*x)\n    INPUT PARAMETERS:\n        N           -   number of nodes, >=1\n    OUTPUT PARAMETERS:\n        Info        -   error code:\n                        * -4    an  error  was   detected   when   calculating\n                                weights/nodes.  May be, N is too large. Try to\n                                use multiple precision version.\n                        * -3    internal eigenproblem solver hasn't converged\n                        * -1    incorrect N/Alpha was passed\n                        * +1    OK\n        X           -   array[0..N-1] - array of quadrature nodes,\n                        in ascending order.\n        W           -   array[0..N-1] - array of quadrature weights.\n      -- ALGLIB --\n         Copyright 12.05.2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void gqgenerategausshermite(int n, out int info, out double[] x, out double[] w)\n    {\n        info = 0;\n        x = new double[0];\n        w = new double[0];\n        gq.gqgenerategausshermite(n, ref info, ref x, ref w);\n        return;\n    }\n}\npublic partial class alglib\n{\n    \n    /*************************************************************************\n    Computation of nodes and weights of a Gauss-Kronrod quadrature formula\n    The algorithm generates the N-point Gauss-Kronrod quadrature formula  with\n    weight  function  given  by  coefficients  alpha  and beta of a recurrence\n    relation which generates a system of orthogonal polynomials:\n        P-1(x)   =  0\n        P0(x)    =  1\n        Pn+1(x)  =  (x-alpha(n))*Pn(x)  -  beta(n)*Pn-1(x)\n    and zero moment Mu0\n        Mu0 = integral(W(x)dx,a,b)\n    INPUT PARAMETERS:\n        Alpha       -   alpha coefficients, array[0..floor(3*K/2)].\n        Beta        -   beta coefficients,  array[0..ceil(3*K/2)].\n                        Beta[0] is not used and may be arbitrary.\n                        Beta[I]>0.\n        Mu0         -   zeroth moment of the weight function.\n        N           -   number of nodes of the Gauss-Kronrod quadrature formula,\n                        N >= 3,\n                        N =  2*K+1.\n    OUTPUT PARAMETERS:\n        Info        -   error code:\n                        * -5    no real and positive Gauss-Kronrod formula can\n                                be created for such a weight function  with  a\n                                given number of nodes.\n                        * -4    N is too large, task may be ill  conditioned -\n                                x[i]=x[i+1] found.\n                        * -3    internal eigenproblem solver hasn't converged\n                        * -2    Beta[i]<=0\n                        * -1    incorrect N was passed\n                        * +1    OK\n        X           -   array[0..N-1] - array of quadrature nodes,\n                        in ascending order.\n        WKronrod    -   array[0..N-1] - Kronrod weights\n        WGauss      -   array[0..N-1] - Gauss weights (interleaved with zeros\n                        corresponding to extended Kronrod nodes).\n      -- ALGLIB --\n         Copyright 08.05.2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void gkqgeneraterec(double[] alpha, double[] beta, double mu0, int n, out int info, out double[] x, out double[] wkronrod, out double[] wgauss)\n    {\n        info = 0;\n        x = new double[0];\n        wkronrod = new double[0];\n        wgauss = new double[0];\n        gkq.gkqgeneraterec(alpha, beta, mu0, n, ref info, ref x, ref wkronrod, ref wgauss);\n        return;\n    }\n    \n    /*************************************************************************\n    Returns   Gauss   and   Gauss-Kronrod   nodes/weights  for  Gauss-Legendre\n    quadrature with N points.\n    GKQLegendreCalc (calculation) or  GKQLegendreTbl  (precomputed  table)  is\n    used depending on machine precision and number of nodes.\n    INPUT PARAMETERS:\n        N           -   number of Kronrod nodes, must be odd number, >=3.\n    OUTPUT PARAMETERS:\n        Info        -   error code:\n                        * -4    an  error   was   detected   when  calculating\n                                weights/nodes.  N  is  too  large   to  obtain\n                                weights/nodes  with  high   enough   accuracy.\n                                Try  to   use   multiple   precision  version.\n                        * -3    internal eigenproblem solver hasn't converged\n                        * -1    incorrect N was passed\n                        * +1    OK\n        X           -   array[0..N-1] - array of quadrature nodes, ordered in\n                        ascending order.\n        WKronrod    -   array[0..N-1] - Kronrod weights\n        WGauss      -   array[0..N-1] - Gauss weights (interleaved with zeros\n                        corresponding to extended Kronrod nodes).\n      -- ALGLIB --\n         Copyright 12.05.2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void gkqgenerategausslegendre(int n, out int info, out double[] x, out double[] wkronrod, out double[] wgauss)\n    {\n        info = 0;\n        x = new double[0];\n        wkronrod = new double[0];\n        wgauss = new double[0];\n        gkq.gkqgenerategausslegendre(n, ref info, ref x, ref wkronrod, ref wgauss);\n        return;\n    }\n    \n    /*************************************************************************\n    Returns   Gauss   and   Gauss-Kronrod   nodes/weights   for   Gauss-Jacobi\n    quadrature on [-1,1] with weight function\n        W(x)=Power(1-x,Alpha)*Power(1+x,Beta).\n    INPUT PARAMETERS:\n        N           -   number of Kronrod nodes, must be odd number, >=3.\n        Alpha       -   power-law coefficient, Alpha>-1\n        Beta        -   power-law coefficient, Beta>-1\n    OUTPUT PARAMETERS:\n        Info        -   error code:\n                        * -5    no real and positive Gauss-Kronrod formula can\n                                be created for such a weight function  with  a\n                                given number of nodes.\n                        * -4    an  error  was   detected   when   calculating\n                                weights/nodes. Alpha or  Beta  are  too  close\n                                to -1 to obtain weights/nodes with high enough\n                                accuracy, or, may be, N is too large.  Try  to\n                                use multiple precision version.\n                        * -3    internal eigenproblem solver hasn't converged\n                        * -1    incorrect N was passed\n                        * +1    OK\n                        * +2    OK, but quadrature rule have exterior  nodes,\n                                x[0]<-1 or x[n-1]>+1\n        X           -   array[0..N-1] - array of quadrature nodes, ordered in\n                        ascending order.\n        WKronrod    -   array[0..N-1] - Kronrod weights\n        WGauss      -   array[0..N-1] - Gauss weights (interleaved with zeros\n                        corresponding to extended Kronrod nodes).\n      -- ALGLIB --\n         Copyright 12.05.2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void gkqgenerategaussjacobi(int n, double alpha, double beta, out int info, out double[] x, out double[] wkronrod, out double[] wgauss)\n    {\n        info = 0;\n        x = new double[0];\n        wkronrod = new double[0];\n        wgauss = new double[0];\n        gkq.gkqgenerategaussjacobi(n, alpha, beta, ref info, ref x, ref wkronrod, ref wgauss);\n        return;\n    }\n    \n    /*************************************************************************\n    Returns Gauss and Gauss-Kronrod nodes for quadrature with N points.\n    Reduction to tridiagonal eigenproblem is used.\n    INPUT PARAMETERS:\n        N           -   number of Kronrod nodes, must be odd number, >=3.\n    OUTPUT PARAMETERS:\n        Info        -   error code:\n                        * -4    an  error   was   detected   when  calculating\n                                weights/nodes.  N  is  too  large   to  obtain\n                                weights/nodes  with  high   enough   accuracy.\n                                Try  to   use   multiple   precision  version.\n                        * -3    internal eigenproblem solver hasn't converged\n                        * -1    incorrect N was passed\n                        * +1    OK\n        X           -   array[0..N-1] - array of quadrature nodes, ordered in\n                        ascending order.\n        WKronrod    -   array[0..N-1] - Kronrod weights\n        WGauss      -   array[0..N-1] - Gauss weights (interleaved with zeros\n                        corresponding to extended Kronrod nodes).\n      -- ALGLIB --\n         Copyright 12.05.2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void gkqlegendrecalc(int n, out int info, out double[] x, out double[] wkronrod, out double[] wgauss)\n    {\n        info = 0;\n        x = new double[0];\n        wkronrod = new double[0];\n        wgauss = new double[0];\n        gkq.gkqlegendrecalc(n, ref info, ref x, ref wkronrod, ref wgauss);\n        return;\n    }\n    \n    /*************************************************************************\n    Returns Gauss and Gauss-Kronrod nodes for quadrature with N  points  using\n    pre-calculated table. Nodes/weights were  computed  with  accuracy  up  to\n    1.0E-32 (if MPFR version of ALGLIB is used). In standard double  precision\n    accuracy reduces to something about 2.0E-16 (depending  on your compiler's\n    handling of long floating point constants).\n    INPUT PARAMETERS:\n        N           -   number of Kronrod nodes.\n                        N can be 15, 21, 31, 41, 51, 61.\n    OUTPUT PARAMETERS:\n        X           -   array[0..N-1] - array of quadrature nodes, ordered in\n                        ascending order.\n        WKronrod    -   array[0..N-1] - Kronrod weights\n        WGauss      -   array[0..N-1] - Gauss weights (interleaved with zeros\n                        corresponding to extended Kronrod nodes).\n      -- ALGLIB --\n         Copyright 12.05.2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void gkqlegendretbl(int n, out double[] x, out double[] wkronrod, out double[] wgauss, out double eps)\n    {\n        x = new double[0];\n        wkronrod = new double[0];\n        wgauss = new double[0];\n        eps = 0;\n        gkq.gkqlegendretbl(n, ref x, ref wkronrod, ref wgauss, ref eps);\n        return;\n    }\n}\npublic partial class alglib\n{\n    /*************************************************************************\n    Integration report:\n    * TerminationType = completetion code:\n        * -5    non-convergence of Gauss-Kronrod nodes\n                calculation subroutine.\n        * -1    incorrect parameters were specified\n        *  1    OK\n    * Rep.NFEV countains number of function calculations\n    * Rep.NIntervals contains number of intervals [a,b]\n      was partitioned into.\n    *************************************************************************/\n    public class autogkreport : alglibobject\n    {\n        //\n        // Public declarations\n        //\n        public int terminationtype { get { return _innerobj.terminationtype; } set { _innerobj.terminationtype = value; } }\n        public int nfev { get { return _innerobj.nfev; } set { _innerobj.nfev = value; } }\n        public int nintervals { get { return _innerobj.nintervals; } set { _innerobj.nintervals = value; } }\n    \n        public autogkreport()\n        {\n            _innerobj = new autogk.autogkreport();\n        }\n        \n        public override alglib.alglibobject make_copy()\n        {\n            return new autogkreport((autogk.autogkreport)_innerobj.make_copy());\n        }\n    \n        //\n        // Although some of declarations below are public, you should not use them\n        // They are intended for internal use only\n        //\n        private autogk.autogkreport _innerobj;\n        public autogk.autogkreport innerobj { get { return _innerobj; } }\n        public autogkreport(autogk.autogkreport obj)\n        {\n            _innerobj = obj;\n        }\n    }\n    /*************************************************************************\n    This structure stores state of the integration algorithm.\n    Although this class has public fields,  they are not intended for external\n    use. You should use ALGLIB functions to work with this class:\n    * autogksmooth()/AutoGKSmoothW()/... to create objects\n    * autogkintegrate() to begin integration\n    * autogkresults() to get results\n    *************************************************************************/\n    public class autogkstate : alglibobject\n    {\n        //\n        // Public declarations\n        //\n        public bool needf { get { return _innerobj.needf; } set { _innerobj.needf = value; } }\n        public double x { get { return _innerobj.x; } set { _innerobj.x = value; } }\n        public double xminusa { get { return _innerobj.xminusa; } set { _innerobj.xminusa = value; } }\n        public double bminusx { get { return _innerobj.bminusx; } set { _innerobj.bminusx = value; } }\n        public double f { get { return _innerobj.f; } set { _innerobj.f = value; } }\n    \n        public autogkstate()\n        {\n            _innerobj = new autogk.autogkstate();\n        }\n        \n        public override alglib.alglibobject make_copy()\n        {\n            return new autogkstate((autogk.autogkstate)_innerobj.make_copy());\n        }\n    \n        //\n        // Although some of declarations below are public, you should not use them\n        // They are intended for internal use only\n        //\n        private autogk.autogkstate _innerobj;\n        public autogk.autogkstate innerobj { get { return _innerobj; } }\n        public autogkstate(autogk.autogkstate obj)\n        {\n            _innerobj = obj;\n        }\n    }\n    \n    /*************************************************************************\n    Integration of a smooth function F(x) on a finite interval [a,b].\n    Fast-convergent algorithm based on a Gauss-Kronrod formula is used. Result\n    is calculated with accuracy close to the machine precision.\n    Algorithm works well only with smooth integrands.  It  may  be  used  with\n    continuous non-smooth integrands, but with  less  performance.\n    It should never be used with integrands which have integrable singularities\n    at lower or upper limits - algorithm may crash. Use AutoGKSingular in such\n    cases.\n    INPUT PARAMETERS:\n        A, B    -   interval boundaries (A<B, A=B or A>B)\n    OUTPUT PARAMETERS\n        State   -   structure which stores algorithm state\n    SEE ALSO\n        AutoGKSmoothW, AutoGKSingular, AutoGKResults.\n      -- ALGLIB --\n         Copyright 06.05.2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void autogksmooth(double a, double b, out autogkstate state)\n    {\n        state = new autogkstate();\n        autogk.autogksmooth(a, b, state.innerobj);\n        return;\n    }\n    \n    /*************************************************************************\n    Integration of a smooth function F(x) on a finite interval [a,b].\n    This subroutine is same as AutoGKSmooth(), but it guarantees that interval\n    [a,b] is partitioned into subintervals which have width at most XWidth.\n    Subroutine  can  be  used  when  integrating nearly-constant function with\n    narrow \"bumps\" (about XWidth wide). If \"bumps\" are too narrow, AutoGKSmooth\n    subroutine can overlook them.\n    INPUT PARAMETERS:\n        A, B    -   interval boundaries (A<B, A=B or A>B)\n    OUTPUT PARAMETERS\n        State   -   structure which stores algorithm state\n    SEE ALSO\n        AutoGKSmooth, AutoGKSingular, AutoGKResults.\n      -- ALGLIB --\n         Copyright 06.05.2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void autogksmoothw(double a, double b, double xwidth, out autogkstate state)\n    {\n        state = new autogkstate();\n        autogk.autogksmoothw(a, b, xwidth, state.innerobj);\n        return;\n    }\n    \n    /*************************************************************************\n    Integration on a finite interval [A,B].\n    Integrand have integrable singularities at A/B.\n    F(X) must diverge as \"(x-A)^alpha\" at A, as \"(B-x)^beta\" at B,  with known\n    alpha/beta (alpha>-1, beta>-1).  If alpha/beta  are  not known,  estimates\n    from below can be used (but these estimates should be greater than -1 too).\n    One  of  alpha/beta variables (or even both alpha/beta) may be equal to 0,\n    which means than function F(x) is non-singular at A/B. Anyway (singular at\n    bounds or not), function F(x) is supposed to be continuous on (A,B).\n    Fast-convergent algorithm based on a Gauss-Kronrod formula is used. Result\n    is calculated with accuracy close to the machine precision.\n    INPUT PARAMETERS:\n        A, B    -   interval boundaries (A<B, A=B or A>B)\n        Alpha   -   power-law coefficient of the F(x) at A,\n                    Alpha>-1\n        Beta    -   power-law coefficient of the F(x) at B,\n                    Beta>-1\n    OUTPUT PARAMETERS\n        State   -   structure which stores algorithm state\n    SEE ALSO\n        AutoGKSmooth, AutoGKSmoothW, AutoGKResults.\n      -- ALGLIB --\n         Copyright 06.05.2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void autogksingular(double a, double b, double alpha, double beta, out autogkstate state)\n    {\n        state = new autogkstate();\n        autogk.autogksingular(a, b, alpha, beta, state.innerobj);\n        return;\n    }\n    \n    /*************************************************************************\n    This function provides reverse communication interface\n    Reverse communication interface is not documented or recommended to use.\n    See below for functions which provide better documented API\n    *************************************************************************/\n    public static bool autogkiteration(autogkstate state)\n    {\n    \n        bool result = autogk.autogkiteration(state.innerobj);\n        return result;\n    }\n    /*************************************************************************\n    This function is used to launcn iterations of ODE solver\n    It accepts following parameters:\n        diff    -   callback which calculates dy/dx for given y and x\n        obj     -   optional object which is passed to diff; can be NULL\n      -- ALGLIB --\n         Copyright 07.05.2009 by Bochkanov Sergey\n    *************************************************************************/\n    public static void autogkintegrate(autogkstate state, integrator1_func func, object obj)\n    {\n        if( func==null )\n            throw new alglibexception(\"ALGLIB: error in 'autogkintegrate()' (func is null)\");\n        while( alglib.autogkiteration(state) )\n        {\n            if( state.needf )\n            {\n                func(state.innerobj.x, state.innerobj.xminusa, state.innerobj.bminusx, ref state.innerobj.f, obj);\n                continue;\n            }\n            throw new alglibexception(\"ALGLIB: unexpected error in 'autogksolve'\");\n        }\n    }\n    \n    /*************************************************************************\n    Adaptive integration results\n    Called after AutoGKIteration returned False.\n    Input parameters:\n        State   -   algorithm state (used by AutoGKIteration).\n    Output parameters:\n        V       -   integral(f(x)dx,a,b)\n        Rep     -   optimization report (see AutoGKReport description)\n      -- ALGLIB --\n         Copyright 14.11.2007 by Bochkanov Sergey\n    *************************************************************************/\n    public static void autogkresults(autogkstate state, out double v, out autogkreport rep)\n    {\n        v = 0;\n        rep = new autogkreport();\n        autogk.autogkresults(state.innerobj, ref v, rep.innerobj);\n        return;\n    }\n}\npublic partial class alglib\n{\n    public class gq\n    {\n        /*************************************************************************\n        Computation of nodes and weights for a Gauss quadrature formula\n        The algorithm generates the N-point Gauss quadrature formula  with  weight\n        function given by coefficients alpha and beta  of  a  recurrence  relation\n        which generates a system of orthogonal polynomials:\n        P-1(x)   =  0\n        P0(x)    =  1\n        Pn+1(x)  =  (x-alpha(n))*Pn(x)  -  beta(n)*Pn-1(x)\n        and zeroth moment Mu0\n        Mu0 = integral(W(x)dx,a,b)\n        INPUT PARAMETERS:\n            Alpha   -   array[0..N-1], alpha coefficients\n            Beta    -   array[0..N-1], beta coefficients\n                        Zero-indexed element is not used and may be arbitrary.\n                        Beta[I]>0.\n            Mu0     -   zeroth moment of the weight function.\n            N       -   number of nodes of the quadrature formula, N>=1\n        OUTPUT PARAMETERS:\n            Info    -   error code:\n                        * -3    internal eigenproblem solver hasn't converged\n                        * -2    Beta[i]<=0\n                        * -1    incorrect N was passed\n                        *  1    OK\n            X       -   array[0..N-1] - array of quadrature nodes,\n                        in ascending order.\n            W       -   array[0..N-1] - array of quadrature weights.\n          -- ALGLIB --\n             Copyright 2005-2009 by Bochkanov Sergey\n        *************************************************************************/\n        public static void gqgeneraterec(double[] alpha,\n            double[] beta,\n            double mu0,\n            int n,\n            ref int info,\n            ref double[] x,\n            ref double[] w)\n        {\n            int i = 0;\n            double[] d = new double[0];\n            double[] e = new double[0];\n            double[,] z = new double[0,0];\n            info = 0;\n            x = new double[0];\n            w = new double[0];\n            if( n<1 )\n            {\n                info = -1;\n                return;\n            }\n            info = 1;\n            \n            //\n            // Initialize\n            //\n            d = new double[n];\n            e = new double[n];\n            for(i=1; i<=n-1; i++)\n            {\n                d[i-1] = alpha[i-1];\n                if( (double)(beta[i])<=(double)(0) )\n                {\n                    info = -2;\n                    return;\n                }\n                e[i-1] = Math.Sqrt(beta[i]);\n            }\n            d[n-1] = alpha[n-1];\n            \n            //\n            // EVD\n            //\n            if( !evd.smatrixtdevd(ref d, e, n, 3, ref z) )\n            {\n                info = -3;\n                return;\n            }\n            \n            //\n            // Generate\n            //\n            x = new double[n];\n            w = new double[n];\n            for(i=1; i<=n; i++)\n            {\n                x[i-1] = d[i-1];\n                w[i-1] = mu0*math.sqr(z[0,i-1]);\n            }\n        }\n        /*************************************************************************\n        Computation of nodes and weights for a Gauss-Lobatto quadrature formula\n        The algorithm generates the N-point Gauss-Lobatto quadrature formula  with\n        weight function given by coefficients alpha and beta of a recurrence which\n        generates a system of orthogonal polynomials.\n        P-1(x)   =  0\n        P0(x)    =  1\n        Pn+1(x)  =  (x-alpha(n))*Pn(x)  -  beta(n)*Pn-1(x)\n        and zeroth moment Mu0\n        Mu0 = integral(W(x)dx,a,b)\n        INPUT PARAMETERS:\n            Alpha   -   array[0..N-2], alpha coefficients\n            Beta    -   array[0..N-2], beta coefficients.\n                        Zero-indexed element is not used, may be arbitrary.\n                        Beta[I]>0\n            Mu0     -   zeroth moment of the weighting function.\n            A       -   left boundary of the integration interval.\n            B       -   right boundary of the integration interval.\n            N       -   number of nodes of the quadrature formula, N>=3\n                        (including the left and right boundary nodes).\n        OUTPUT PARAMETERS:\n            Info    -   error code:\n                        * -3    internal eigenproblem solver hasn't converged\n                        * -2    Beta[i]<=0\n                        * -1    incorrect N was passed\n                        *  1    OK\n            X       -   array[0..N-1] - array of quadrature nodes,\n                        in ascending order.\n            W       -   array[0..N-1] - array of quadrature weights.\n          -- ALGLIB --\n             Copyright 2005-2009 by Bochkanov Sergey\n        *************************************************************************/\n        public static void gqgenerategausslobattorec(double[] alpha,\n            double[] beta,\n            double mu0,\n            double a,\n            double b,\n            int n,\n            ref int info,\n            ref double[] x,\n            ref double[] w)\n        {\n            int i = 0;\n            double[] d = new double[0];\n            double[] e = new double[0];\n            double[,] z = new double[0,0];\n            double pim1a = 0;\n            double pia = 0;\n            double pim1b = 0;\n            double pib = 0;\n            double t = 0;\n            double a11 = 0;\n            double a12 = 0;\n            double a21 = 0;\n            double a22 = 0;\n            double b1 = 0;\n            double b2 = 0;\n            double alph = 0;\n            double bet = 0;\n            alpha = (double[])alpha.Clone();\n            beta = (double[])beta.Clone();\n            info = 0;\n            x = new double[0];\n            w = new double[0];\n            if( n<=2 )\n            {\n                info = -1;\n                return;\n            }\n            info = 1;\n            \n            //\n            // Initialize, D[1:N+1], E[1:N]\n            //\n            n = n-2;\n            d = new double[n+2];\n            e = new double[n+1];\n            for(i=1; i<=n+1; i++)\n            {\n                d[i-1] = alpha[i-1];\n            }\n            for(i=1; i<=n; i++)\n            {\n                if( (double)(beta[i])<=(double)(0) )\n                {\n                    info = -2;\n                    return;\n                }\n                e[i-1] = Math.Sqrt(beta[i]);\n            }\n            \n            //\n            // Caclulate Pn(a), Pn+1(a), Pn(b), Pn+1(b)\n            //\n            beta[0] = 0;\n            pim1a = 0;\n            pia = 1;\n            pim1b = 0;\n            pib = 1;\n            for(i=1; i<=n+1; i++)\n            {\n                \n                //\n                // Pi(a)\n                //\n                t = (a-alpha[i-1])*pia-beta[i-1]*pim1a;\n                pim1a = pia;\n                pia = t;\n                \n                //\n                // Pi(b)\n                //\n                t = (b-alpha[i-1])*pib-beta[i-1]*pim1b;\n                pim1b = pib;\n                pib = t;\n            }\n            \n            //\n            // Calculate alpha'(n+1), beta'(n+1)\n            //\n            a11 = pia;\n            a12 = pim1a;\n            a21 = pib;\n            a22 = pim1b;\n            b1 = a*pia;\n            b2 = b*pib;\n            if( (double)(Math.Abs(a11))>(double)(Math.Abs(a21)) )\n            {\n                a22 = a22-a12*a21/a11;\n                b2 = b2-b1*a21/a11;\n                bet = b2/a22;\n                alph = (b1-bet*a12)/a11;\n            }\n            else\n            {\n                a12 = a12-a22*a11/a21;\n                b1 = b1-b2*a11/a21;\n                bet = b1/a12;\n                alph = (b2-bet*a22)/a21;\n            }\n            if( (double)(bet)<(double)(0) )\n            {\n                info = -3;\n                return;\n            }\n            d[n+1] = alph;\n            e[n] = Math.Sqrt(bet);\n            \n            //\n            // EVD\n            //\n            if( !evd.smatrixtdevd(ref d, e, n+2, 3, ref z) )\n            {\n                info = -3;\n                return;\n            }\n            \n            //\n            // Generate\n            //\n            x = new double[n+2];\n            w = new double[n+2];\n            for(i=1; i<=n+2; i++)\n            {\n                x[i-1] = d[i-1];\n                w[i-1] = mu0*math.sqr(z[0,i-1]);\n            }\n        }\n        /*************************************************************************\n        Computation of nodes and weights for a Gauss-Radau quadrature formula\n        The algorithm generates the N-point Gauss-Radau  quadrature  formula  with\n        weight function given by the coefficients alpha and  beta  of a recurrence\n        which generates a system of orthogonal polynomials.\n        P-1(x)   =  0\n        P0(x)    =  1\n        Pn+1(x)  =  (x-alpha(n))*Pn(x)  -  beta(n)*Pn-1(x)\n        and zeroth moment Mu0\n        Mu0 = integral(W(x)dx,a,b)\n        INPUT PARAMETERS:\n            Alpha   -   array[0..N-2], alpha coefficients.\n            Beta    -   array[0..N-1], beta coefficients\n                        Zero-indexed element is not used.\n                        Beta[I]>0\n            Mu0     -   zeroth moment of the weighting function.\n            A       -   left boundary of the integration interval.\n            N       -   number of nodes of the quadrature formula, N>=2\n                        (including the left boundary node).\n        OUTPUT PARAMETERS:\n            Info    -   error code:\n                        * -3    internal eigenproblem solver hasn't converged\n                        * -2    Beta[i]<=0\n                        * -1    incorrect N was passed\n                        *  1    OK\n            X       -   array[0..N-1] - array of quadrature nodes,\n                        in ascending order.\n            W       -   array[0..N-1] - array of quadrature weights.\n          -- ALGLIB --\n             Copyright 2005-2009 by Bochkanov Sergey\n        *************************************************************************/\n        public static void gqgenerategaussradaurec(double[] alpha,\n            double[] beta,\n            double mu0,\n            double a,\n            int n,\n            ref int info,\n            ref double[] x,\n            ref double[] w)\n        {\n            int i = 0;\n            double[] d = new double[0];\n            double[] e = new double[0];\n            double[,] z = new double[0,0];\n            double polim1 = 0;\n            double poli = 0;\n            double t = 0;\n            alpha = (double[])alpha.Clone();\n            beta = (double[])beta.Clone();\n            info = 0;\n            x = new double[0];\n            w = new double[0];\n            if( n<2 )\n            {\n                info = -1;\n                return;\n            }\n            info = 1;\n            \n            //\n            // Initialize, D[1:N], E[1:N]\n            //\n            n = n-1;\n            d = new double[n+1];\n            e = new double[n];\n            for(i=1; i<=n; i++)\n            {\n                d[i-1] = alpha[i-1];\n                if( (double)(beta[i])<=(double)(0) )\n                {\n                    info = -2;\n                    return;\n                }\n                e[i-1] = Math.Sqrt(beta[i]);\n            }\n            \n            //\n            // Caclulate Pn(a), Pn-1(a), and D[N+1]\n            //\n            beta[0] = 0;\n            polim1 = 0;\n            poli = 1;\n            for(i=1; i<=n; i++)\n            {\n                t = (a-alpha[i-1])*poli-beta[i-1]*polim1;\n                polim1 = poli;\n                poli = t;\n            }\n            d[n] = a-beta[n]*polim1/poli;\n            \n            //\n            // EVD\n            //\n            if( !evd.smatrixtdevd(ref d, e, n+1, 3, ref z) )\n            {\n                info = -3;\n                return;\n            }\n            \n            //\n            // Generate\n            //\n            x = new double[n+1];\n            w = new double[n+1];\n            for(i=1; i<=n+1; i++)\n            {\n                x[i-1] = d[i-1];\n                w[i-1] = mu0*math.sqr(z[0,i-1]);\n            }\n        }\n        /*************************************************************************\n        Returns nodes/weights for Gauss-Legendre quadrature on [-1,1] with N\n        nodes.\n        INPUT PARAMETERS:\n            N           -   number of nodes, >=1\n        OUTPUT PARAMETERS:\n            Info        -   error code:\n                            * -4    an  error   was   detected   when  calculating\n                                    weights/nodes.  N  is  too  large   to  obtain\n                                    weights/nodes  with  high   enough   accuracy.\n                                    Try  to   use   multiple   precision  version.\n                            * -3    internal eigenproblem solver hasn't  converged\n                            * -1    incorrect N was passed\n                            * +1    OK\n", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "length": 4527, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "bb235bd95d03dbe1d46ebbd40cea9c6aac1b5ad1bce81e2e"}
{"input": "", "context": "\"\"\"\n    Test split modulestore w/o using any django stuff.\n\"\"\"\nfrom mock import patch\nimport datetime\nfrom importlib import import_module\nfrom path import Path as path\nimport random\nimport re\nimport unittest\nimport uuid\nfrom contracts import contract\nfrom nose.plugins.attrib import attr\nfrom django.core.cache import get_cache, InvalidCacheBackendError\nfrom openedx.core.lib import tempdir\nfrom xblock.fields import Reference, ReferenceList, ReferenceValueDict\nfrom xmodule.course_module import CourseDescriptor\nfrom xmodule.modulestore import ModuleStoreEnum\nfrom xmodule.modulestore.exceptions import (\n    ItemNotFoundError, VersionConflictError,\n    DuplicateItemError, DuplicateCourseError,\n    InsufficientSpecificationError\n)\nfrom opaque_keys.edx.locator import CourseLocator, BlockUsageLocator, VersionTree, LocalId\nfrom xmodule.modulestore.inheritance import InheritanceMixin\nfrom xmodule.x_module import XModuleMixin\nfrom xmodule.fields import Date, Timedelta\nfrom xmodule.modulestore.split_mongo.split import SplitMongoModuleStore\nfrom xmodule.modulestore.tests.test_modulestore import check_has_course_method\nfrom xmodule.modulestore.split_mongo import BlockKey\nfrom xmodule.modulestore.tests.factories import check_mongo_calls\nfrom xmodule.modulestore.tests.mongo_connection import MONGO_PORT_NUM, MONGO_HOST\nfrom xmodule.modulestore.tests.utils import mock_tab_from_json\nfrom xmodule.modulestore.edit_info import EditInfoMixin\nBRANCH_NAME_DRAFT = ModuleStoreEnum.BranchName.draft\nBRANCH_NAME_PUBLISHED = ModuleStoreEnum.BranchName.published\n@attr('mongo')\nclass SplitModuleTest(unittest.TestCase):\n    '''\n    The base set of tests manually populates a db w/ courses which have\n    versions. It creates unique collection names and removes them after all\n    tests finish.\n    '''\n    # Snippets of what would be in the django settings envs file\n    DOC_STORE_CONFIG = {\n        'host': MONGO_HOST,\n        'db': 'test_xmodule',\n        'port': MONGO_PORT_NUM,\n        'collection': 'modulestore{0}'.format(uuid.uuid4().hex[:5]),\n    }\n    modulestore_options = {\n        'default_class': 'xmodule.raw_module.RawDescriptor',\n        'fs_root': tempdir.mkdtemp_clean(),\n        'xblock_mixins': (InheritanceMixin, XModuleMixin, EditInfoMixin)\n    }\n    MODULESTORE = {\n        'ENGINE': 'xmodule.modulestore.split_mongo.split.SplitMongoModuleStore',\n        'DOC_STORE_CONFIG': DOC_STORE_CONFIG,\n        'OPTIONS': modulestore_options\n    }\n    # don't create django dependency; so, duplicates common.py in envs\n    match = re.search(r'(.*?/common)(?:$|/)', path(__file__))\n    COMMON_ROOT = match.group(1)\n    modulestore = None\n    _date_field = Date()\n    _time_delta_field = Timedelta()\n    COURSE_CONTENT = {\n        \"testx.GreekHero\": {\n            \"org\": \"testx\",\n            \"course\": \"GreekHero\",\n            \"run\": \"run\",\n            \"root_block_id\": \"head12345\",\n            \"user_id\": \"test@edx.org\",\n            \"fields\": {\n                \"tabs\": [\n                    {\n                        \"type\": \"courseware\"\n                    },\n                    {\n                        \"type\": \"course_info\",\n                        \"name\": \"Course Info\"\n                    },\n                    {\n                        \"type\": \"discussion\",\n                        \"name\": \"Discussion\"\n                    },\n                    {\n                        \"type\": \"wiki\",\n                        \"name\": \"Wiki\"\n                    }\n                ],\n                \"start\": _date_field.from_json(\"2013-02-14T05:00\"),\n                \"display_name\": \"The Ancient Greek Hero\",\n                \"grading_policy\": {\n                    \"GRADER\": [\n                        {\n                            \"min_count\": 5,\n                            \"weight\": 0.15,\n                            \"type\": \"Homework\",\n                            \"drop_count\": 1,\n                            \"short_label\": \"HWa\"\n                        },\n                        {\n                            \"short_label\": \"\",\n                            \"min_count\": 2,\n                            \"type\": \"Lab\",\n                            \"drop_count\": 0,\n                            \"weight\": 0.15\n                        },\n                        {\n                            \"short_label\": \"Midterm\",\n                            \"min_count\": 1,\n                            \"type\": \"Midterm Exam\",\n                            \"drop_count\": 0,\n                            \"weight\": 0.3\n                        },\n                        {\n                            \"short_label\": \"Final\",\n                            \"min_count\": 1,\n                            \"type\": \"Final Exam\",\n                            \"drop_count\": 0,\n                            \"weight\": 0.4\n                        }\n                    ],\n                    \"GRADE_CUTOFFS\": {\n                        \"Pass\": 0.75\n                    },\n                },\n            },\n            \"revisions\": [\n                {\n                    \"user_id\": \"testassist@edx.org\",\n                    \"update\": {\n                        (\"course\", \"head12345\"): {\n                            \"end\": _date_field.from_json(\"2013-04-13T04:30\"),\n                            \"tabs\": [\n                                {\n                                    \"type\": \"courseware\"\n                                },\n                                {\n                                    \"type\": \"course_info\",\n                                    \"name\": \"Course Info\"\n                                },\n                                {\n                                    \"type\": \"discussion\",\n                                    \"name\": \"Discussion\"\n                                },\n                                {\n                                    \"type\": \"wiki\",\n                                    \"name\": \"Wiki\"\n                                },\n                                {\n                                    \"type\": \"static_tab\",\n                                    \"name\": \"Syllabus\",\n                                    \"url_slug\": \"01356a17b5924b17a04b7fc2426a3798\"\n                                },\n                                {\n                                    \"type\": \"static_tab\",\n                                    \"name\": \"Advice for Students\",\n                                    \"url_slug\": \"57e9991c0d794ff58f7defae3e042e39\"\n                                }\n                            ],\n                            \"graceperiod\": _time_delta_field.from_json(\"2 hours 0 minutes 0 seconds\"),\n                            \"grading_policy\": {\n                                \"GRADER\": [\n                                    {\n                                        \"min_count\": 5,\n                                        \"weight\": 0.15,\n                                        \"type\": \"Homework\",\n                                        \"drop_count\": 1,\n                                        \"short_label\": \"HWa\"\n                                    },\n                                    {\n                                        \"short_label\": \"\",\n                                        \"min_count\": 12,\n                                        \"type\": \"Lab\",\n                                        \"drop_count\": 2,\n                                        \"weight\": 0.15\n                                    },\n                                    {\n                                        \"short_label\": \"Midterm\",\n                                        \"min_count\": 1,\n                                        \"type\": \"Midterm Exam\",\n                                        \"drop_count\": 0,\n                                        \"weight\": 0.3\n                                    },\n                                    {\n                                        \"short_label\": \"Final\",\n                                        \"min_count\": 1,\n                                        \"type\": \"Final Exam\",\n                                        \"drop_count\": 0,\n                                        \"weight\": 0.4\n                                    }\n                                ],\n                                \"GRADE_CUTOFFS\": {\n                                    \"Pass\": 0.55\n                                }\n                            },\n                        }\n                    }\n                },\n                {\n                    \"user_id\": \"testassist@edx.org\",\n                    \"update\": {\n                        (\"course\", \"head12345\"): {\n                            \"end\": _date_field.from_json(\"2013-06-13T04:30\"),\n                            \"grading_policy\": {\n                                \"GRADER\": [\n                                    {\n                                        \"min_count\": 4,\n                                        \"weight\": 0.15,\n                                        \"type\": \"Homework\",\n                                        \"drop_count\": 2,\n                                        \"short_label\": \"HWa\"\n                                    },\n                                    {\n                                        \"short_label\": \"\",\n                                        \"min_count\": 12,\n                                        \"type\": \"Lab\",\n                                        \"drop_count\": 2,\n                                        \"weight\": 0.15\n                                    },\n                                    {\n                                        \"short_label\": \"Midterm\",\n                                        \"min_count\": 1,\n                                        \"type\": \"Midterm Exam\",\n                                        \"drop_count\": 0,\n                                        \"weight\": 0.3\n                                    },\n                                    {\n                                        \"short_label\": \"Final\",\n                                        \"min_count\": 1,\n                                        \"type\": \"Final Exam\",\n                                        \"drop_count\": 0,\n                                        \"weight\": 0.4\n                                    }\n                                ],\n                                \"GRADE_CUTOFFS\": {\n                                    \"Pass\": 0.45\n                                }\n                            },\n                            \"enrollment_start\": _date_field.from_json(\"2013-01-01T05:00\"),\n                            \"enrollment_end\": _date_field.from_json(\"2013-03-02T05:00\"),\n                            \"advertised_start\": \"Fall 2013\",\n                        }\n                    },\n                    \"create\": [\n                        {\n                            \"id\": \"chapter1\",\n                            \"parent\": \"head12345\",\n                            \"parent_type\": \"course\",\n                            \"category\": \"chapter\",\n                            \"fields\": {\n                                \"display_name\": \"Hercules\"\n                            },\n                        },\n                        {\n                            \"id\": \"chapter2\",\n                            \"parent\": \"head12345\",\n                            \"parent_type\": \"course\",\n                            \"category\": \"chapter\",\n                            \"fields\": {\n                                \"display_name\": \"Hera heckles Hercules\"\n                            },\n                        },\n                        {\n                            \"id\": \"chapter3\",\n                            \"parent\": \"head12345\",\n                            \"parent_type\": \"course\",\n                            \"category\": \"chapter\",\n                            \"fields\": {\n                                \"display_name\": \"Hera cuckolds Zeus\"\n                            },\n                        },\n                        {\n                            \"id\": \"problem1\",\n                            \"parent\": \"chapter3\",\n                            \"parent_type\": \"chapter\",\n                            \"category\": \"problem\",\n                            \"fields\": {\n                                \"display_name\": \"Problem 3.1\",\n                                \"graceperiod\": _time_delta_field.from_json(\"4 hours 0 minutes 0 seconds\"),\n                            },\n                        },\n                        {\n                            \"id\": \"problem3_2\",\n                            \"parent\": \"chapter3\",\n                            \"parent_type\": \"chapter\",\n                            \"category\": \"problem\",\n                            \"fields\": {\n                                \"display_name\": \"Problem 3.2\"\n                            },\n                        },\n                        {\n                            \"id\": \"problem32\",\n                            \"parent\": \"chapter3\",\n                            \"parent_type\": \"chapter\",\n                            \"category\": \"problem\",\n                            \"fields\": {\n                                \"display_name\": \"Problem 3.3\",\n                                \"group_access\": {\"3\": [\"33\"]},\n                            },\n                        }\n                    ]\n                },\n            ]\n        },\n        \"testx.wonderful\": {\n            \"org\": \"testx\",\n            \"course\": \"wonderful\",\n            \"run\": \"run\",\n            \"root_block_id\": \"head23456\",\n            \"user_id\": \"test@edx.org\",\n            \"fields\": {\n                \"tabs\": [\n                    {\n                        \"type\": \"courseware\"\n                    },\n                    {\n                        \"type\": \"course_info\",\n                        \"name\": \"Course Info\"\n                    },\n                    {\n                        \"type\": \"discussion\",\n                        \"name\": \"Discussion\"\n                    },\n                    {\n                        \"type\": \"wiki\",\n                        \"name\": \"Wiki\"\n                    }\n                ],\n                \"start\": _date_field.from_json(\"2013-02-14T05:00\"),\n                \"display_name\": \"A wonderful course\",\n                \"grading_policy\": {\n                    \"GRADER\": [\n                        {\n                            \"min_count\": 14,\n                            \"weight\": 0.25,\n                            \"type\": \"Homework\",\n                            \"drop_count\": 1,\n                            \"short_label\": \"HWa\"\n                        },\n                        {\n                            \"short_label\": \"\",\n                            \"min_count\": 12,\n                            \"type\": \"Lab\",\n                            \"drop_count\": 2,\n                            \"weight\": 0.25\n                        },\n                        {\n                            \"short_label\": \"Midterm\",\n                            \"min_count\": 1,\n                            \"type\": \"Midterm Exam\",\n                            \"drop_count\": 0,\n                            \"weight\": 0.2\n                        },\n                        {\n                            \"short_label\": \"Final\",\n                            \"min_count\": 1,\n                            \"type\": \"Final Exam\",\n                            \"drop_count\": 0,\n                            \"weight\": 0.3\n                        }\n                    ],\n                    \"GRADE_CUTOFFS\": {\n                        \"Pass\": 0.95\n                    }\n                },\n            },\n            \"revisions\": [\n                {\n                    \"user_id\": \"test@edx.org\",\n                    \"update\": {\n                        (\"course\", \"head23456\"): {\n                            \"display_name\": \"The most wonderful course\",\n                            \"grading_policy\": {\n                                \"GRADER\": [\n                                    {\n                                        \"min_count\": 14,\n                                        \"weight\": 0.25,\n                                        \"type\": \"Homework\",\n                                        \"drop_count\": 1,\n                                        \"short_label\": \"HWa\"\n                                    },\n                                    {\n                                        \"short_label\": \"\",\n                                        \"min_count\": 12,\n                                        \"type\": \"Lab\",\n                                        \"drop_count\": 2,\n                                        \"weight\": 0.25\n                                    },\n                                    {\n                                        \"short_label\": \"Midterm\",\n                                        \"min_count\": 1,\n                                        \"type\": \"Midterm Exam\",\n                                        \"drop_count\": 0,\n                                        \"weight\": 0.2\n                                    },\n                                    {\n                                        \"short_label\": \"Final\",\n                                        \"min_count\": 1,\n                                        \"type\": \"Final Exam\",\n                                        \"drop_count\": 0,\n                                        \"weight\": 0.3\n                                    }\n                                ],\n                                \"GRADE_CUTOFFS\": {\n                                    \"Pass\": 0.45\n                                }\n                            },\n                        }\n                    }\n                }\n            ]\n        },\n        \"guestx.contender\": {\n            \"org\": \"guestx\",\n            \"course\": \"contender\",\n            \"run\": \"run\",\n            \"root_block_id\": \"head345679\",\n            \"user_id\": \"test@guestx.edu\",\n            \"fields\": {\n                \"tabs\": [\n                    {\n                        \"type\": \"courseware\"\n                    },\n                    {\n                        \"type\": \"course_info\",\n                        \"name\": \"Course Info\"\n                    },\n                    {\n                        \"type\": \"discussion\",\n                        \"name\": \"Discussion\"\n                    },\n                    {\n                        \"type\": \"wiki\",\n                        \"name\": \"Wiki\"\n                    }\n                ],\n                \"start\": _date_field.from_json(\"2013-03-14T05:00\"),\n                \"display_name\": \"Yet another contender\",\n                \"grading_policy\": {\n                    \"GRADER\": [\n                        {\n                            \"min_count\": 4,\n                            \"weight\": 0.25,\n                            \"type\": \"Homework\",\n                            \"drop_count\": 0,\n                            \"short_label\": \"HW\"\n                        },\n                        {\n                            \"short_label\": \"Midterm\",\n                            \"min_count\": 1,\n                            \"type\": \"Midterm Exam\",\n                            \"drop_count\": 0,\n                            \"weight\": 0.4\n                        },\n                        {\n                            \"short_label\": \"Final\",\n                            \"min_count\": 1,\n                            \"type\": \"Final Exam\",\n                            \"drop_count\": 0,\n                            \"weight\": 0.35\n                        }\n                    ],\n                    \"GRADE_CUTOFFS\": {\n                        \"Pass\": 0.25\n                    }\n                },\n            }\n        },\n    }\n    @staticmethod\n    def bootstrapDB(split_store):  # pylint: disable=invalid-name\n        '''\n        Sets up the initial data into the db\n        '''\n        for _course_id, course_spec in SplitModuleTest.COURSE_CONTENT.iteritems():\n            course = split_store.create_course(\n                course_spec['org'],\n                course_spec['course'],\n                course_spec['run'],\n                course_spec['user_id'],\n                master_branch=BRANCH_NAME_DRAFT,\n                fields=course_spec['fields'],\n                root_block_id=course_spec['root_block_id']\n            )\n            for revision in course_spec.get('revisions', []):\n                for (block_type, block_id), fields in revision.get('update', {}).iteritems():\n                    # cheat since course is most frequent\n                    if course.location.block_id == block_id:\n                        block = course\n                    else:\n                        # not easy to figure out the category but get_item won't care\n                        block_usage = BlockUsageLocator.make_relative(course.location, block_type, block_id)\n                        block = split_store.get_item(block_usage)\n                    for key, value in fields.iteritems():\n                        setattr(block, key, value)\n                # create new blocks into dag: parent must already exist; thus, order is important\n                new_ele_dict = {}\n                for spec in revision.get('create', []):\n                    if spec['parent'] in new_ele_dict:\n                        parent = new_ele_dict.get(spec['parent'])\n                    elif spec['parent'] == course.location.block_id:\n                        parent = course\n                    else:\n                        block_usage = BlockUsageLocator.make_relative(course.location, spec['parent_type'], spec['parent'])\n                        parent = split_store.get_item(block_usage)\n                    block_id = LocalId(spec['id'])\n                    child = split_store.create_xblock(\n                        course.runtime, course.id, spec['category'], block_id, spec['fields'], parent_xblock=parent\n                    )\n                    new_ele_dict[spec['id']] = child\n                course = split_store.persist_xblock_dag(course, revision['user_id'])\n        # publish \"testx.wonderful\"\n        source_course = CourseLocator(org=\"testx\", course=\"wonderful\", run=\"run\", branch=BRANCH_NAME_DRAFT)\n        to_publish = BlockUsageLocator(\n            source_course,\n            block_type='course',\n            block_id=\"head23456\"\n        )\n        destination = CourseLocator(org=\"testx\", course=\"wonderful\", run=\"run\", branch=BRANCH_NAME_PUBLISHED)\n        split_store.copy(\"test@edx.org\", source_course, destination, [to_publish], None)\n    def setUp(self):\n        super(SplitModuleTest, self).setUp()\n        self.user_id = random.getrandbits(32)\n    def tearDown(self):\n        \"\"\"\n        Clear persistence between each test.\n        \"\"\"\n        collection_prefix = SplitModuleTest.MODULESTORE['DOC_STORE_CONFIG']['collection'] + '.'\n        if SplitModuleTest.modulestore:\n            for collection in ('active_versions', 'structures', 'definitions'):\n                modulestore().db.drop_collection(collection_prefix + collection)\n            # drop the modulestore to force re init\n            SplitModuleTest.modulestore = None\n        super(SplitModuleTest, self).tearDown()\n    def findByIdInResult(self, collection, _id):  # pylint: disable=invalid-name\n        \"\"\"\n        Result is a collection of descriptors. Find the one whose block id\n        matches the _id.\n        \"\"\"\n        for element in collection:\n            if element.location.block_id == _id:\n                return element\nclass TestHasChildrenAtDepth(SplitModuleTest):\n    \"\"\"Test the has_children_at_depth method of XModuleMixin. \"\"\"\n    @patch('xmodule.tabs.CourseTab.from_json', side_effect=mock_tab_from_json)\n    def test_has_children_at_depth(self, _from_json):\n        course_locator = CourseLocator(\n            org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT\n        )\n        block_locator = BlockUsageLocator(\n            course_locator, 'course', 'head12345'\n        )\n        block = modulestore().get_item(block_locator)\n        self.assertRaises(\n            ValueError, block.has_children_at_depth, -1,\n        )\n        self.assertTrue(block.has_children_at_depth(0))\n        self.assertTrue(block.has_children_at_depth(1))\n        self.assertFalse(block.has_children_at_depth(2))\n        ch1 = modulestore().get_item(\n            BlockUsageLocator(course_locator, 'chapter', block_id='chapter1')\n        )\n        self.assertFalse(ch1.has_children_at_depth(0))\n        ch2 = modulestore().get_item(\n            BlockUsageLocator(course_locator, 'chapter', block_id='chapter2')\n        )\n        self.assertFalse(ch2.has_children_at_depth(0))\n        ch3 = modulestore().get_item(\n            BlockUsageLocator(course_locator, 'chapter', block_id='chapter3')\n        )\n        self.assertTrue(ch3.has_children_at_depth(0))\n        self.assertFalse(ch3.has_children_at_depth(1))\nclass SplitModuleCourseTests(SplitModuleTest):\n    '''\n    Course CRUD operation tests\n    '''\n    @patch('xmodule.tabs.CourseTab.from_json', side_effect=mock_tab_from_json)\n    def test_get_courses(self, _from_json):\n        courses = modulestore().get_courses(branch=BRANCH_NAME_DRAFT)\n        # should have gotten 3 draft courses\n        self.assertEqual(len(courses), 3, \"Wrong number of courses\")\n        # check metadata -- NOTE no promised order\n        course = self.findByIdInResult(courses, \"head12345\")\n        self.assertEqual(course.location.org, \"testx\")\n        self.assertEqual(course.category, 'course', 'wrong category')\n        self.assertEqual(len(course.tabs), 6, \"wrong number of tabs\")\n        self.assertEqual(\n            course.display_name, \"The Ancient Greek Hero\",\n            \"wrong display name\"\n        )\n        self.assertEqual(\n            course.advertised_start, \"Fall 2013\",\n            \"advertised_start\"\n        )\n        self.assertEqual(len(course.children), 3, \"children\")\n        # check dates and graders--forces loading of descriptor\n        self.assertEqual(course.edited_by, \"testassist@edx.org\")\n        self.assertDictEqual(course.grade_cutoffs, {\"Pass\": 0.45})\n    @patch('xmodule.tabs.CourseTab.from_json', side_effect=mock_tab_from_json)\n    def test_get_org_courses(self, _from_json):\n        courses = modulestore().get_courses(branch=BRANCH_NAME_DRAFT, org='guestx')\n        # should have gotten 1 draft courses\n        self.assertEqual(len(courses), 1)\n        courses = modulestore().get_courses(branch=BRANCH_NAME_DRAFT, org='testx')\n        # should have gotten 2 draft courses\n        self.assertEqual(len(courses), 2)\n        # although this is already covered in other tests, let's\n        # also not pass in org= parameter to make sure we get back\n        # 3 courses\n        courses = modulestore().get_courses(branch=BRANCH_NAME_DRAFT)\n        self.assertEqual(len(courses), 3)\n    @patch('xmodule.tabs.CourseTab.from_json', side_effect=mock_tab_from_json)\n    def test_branch_requests(self, _from_json):\n        # query w/ branch qualifier (both draft and published)\n        def _verify_published_course(courses_published):\n            \"\"\" Helper function for verifying published course. \"\"\"\n            self.assertEqual(len(courses_published), 1, len(courses_published))\n            course = self.findByIdInResult(courses_published, \"head23456\")\n            self.assertIsNotNone(course, \"published courses\")\n            self.assertEqual(course.location.course_key.org, \"testx\")\n            self.assertEqual(course.location.course_key.course, \"wonderful\")\n            self.assertEqual(course.category, 'course', 'wrong category')\n            self.assertEqual(len(course.tabs), 4, \"wrong number of tabs\")\n            self.assertEqual(course.display_name, \"The most wonderful course\",\n                             course.display_name)\n            self.assertIsNone(course.advertised_start)\n            self.assertEqual(len(course.children), 0,\n                             \"children\")\n        _verify_published_course(modulestore().get_courses(branch=BRANCH_NAME_PUBLISHED))\n    def test_has_course(self):\n        '''\n        Test the various calling forms for has_course\n        '''\n        check_has_course_method(\n            modulestore(),\n            CourseLocator(org='testx', course='wonderful', run=\"run\", branch=BRANCH_NAME_DRAFT),\n            locator_key_fields=['org', 'course', 'run']\n        )\n    @patch('xmodule.tabs.CourseTab.from_json', side_effect=mock_tab_from_json)\n    def test_get_course(self, _from_json):\n        '''\n        Test the various calling forms for get_course\n        '''\n        locator = CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT)\n        head_course = modulestore().get_course(locator)\n        self.assertNotEqual(head_course.location.version_guid, head_course.previous_version)\n        locator = CourseLocator(version_guid=head_course.previous_version)\n        course = modulestore().get_course(locator)\n        self.assertIsNone(course.location.course_key.org)\n        self.assertEqual(course.location.version_guid, head_course.previous_version)\n        self.assertEqual(course.category, 'course')\n        self.assertEqual(len(course.tabs), 6)\n        self.assertEqual(course.display_name, \"The Ancient Greek Hero\")\n        self.assertEqual(course.graceperiod, datetime.timedelta(hours=2))\n        self.assertIsNone(course.advertised_start)\n        self.assertEqual(len(course.children), 0)\n        self.assertNotEqual(course.definition_locator.definition_id, head_course.definition_locator.definition_id)\n        # check dates and graders--forces loading of descriptor\n        self.assertEqual(course.edited_by, \"testassist@edx.org\")\n        self.assertDictEqual(course.grade_cutoffs, {\"Pass\": 0.55})\n        locator = CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT)\n        course = modulestore().get_course(locator)\n        self.assertEqual(course.location.course_key.org, \"testx\")\n        self.assertEqual(course.location.course_key.course, \"GreekHero\")\n        self.assertEqual(course.location.course_key.run, \"run\")\n        self.assertEqual(course.category, 'course')\n        self.assertEqual(len(course.tabs), 6)\n        self.assertEqual(course.display_name, \"The Ancient Greek Hero\")\n        self.assertEqual(course.advertised_start, \"Fall 2013\")\n        self.assertEqual(len(course.children), 3)\n        # check dates and graders--forces loading of descriptor\n        self.assertEqual(course.edited_by, \"testassist@edx.org\")\n        self.assertDictEqual(course.grade_cutoffs, {\"Pass\": 0.45})\n        locator = CourseLocator(org='testx', course='wonderful', run=\"run\", branch=BRANCH_NAME_PUBLISHED)\n        course = modulestore().get_course(locator)\n        published_version = course.location.version_guid\n        locator = CourseLocator(org='testx', course='wonderful', run=\"run\", branch=BRANCH_NAME_DRAFT)\n        course = modulestore().get_course(locator)\n        self.assertNotEqual(course.location.version_guid, published_version)\n    def test_get_course_negative(self):\n        # Now negative testing\n        with self.assertRaises(InsufficientSpecificationError):\n            modulestore().get_course(CourseLocator(org='edu', course='meh', run='blah'))\n        with self.assertRaises(ItemNotFoundError):\n            modulestore().get_course(CourseLocator(org='edu', course='nosuchthing', run=\"run\", branch=BRANCH_NAME_DRAFT))\n        with self.assertRaises(ItemNotFoundError):\n            modulestore().get_course(CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_PUBLISHED))\n    @patch('xmodule.tabs.CourseTab.from_json', side_effect=mock_tab_from_json)\n    def test_cache(self, _from_json):\n        \"\"\"\n        Test that the mechanics of caching work.\n        \"\"\"\n        locator = CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT)\n        course = modulestore().get_course(locator)\n        block_map = modulestore().cache_items(\n            course.system, [BlockKey.from_usage_key(child) for child in course.children], course.id, depth=3\n        )\n        self.assertIn(BlockKey('chapter', 'chapter1'), block_map)\n        self.assertIn(BlockKey('problem', 'problem3_2'), block_map)\n    @patch('xmodule.tabs.CourseTab.from_json', side_effect=mock_tab_from_json)\n    def test_course_successors(self, _from_json):\n        \"\"\"\n        get_course_successors(course_locator, version_history_depth=1)\n        \"\"\"\n        locator = CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT)\n        course = modulestore().get_course(locator)\n        versions = [course.location.version_guid, course.previous_version]\n        locator = CourseLocator(version_guid=course.previous_version)\n        course = modulestore().get_course(locator)\n        versions.append(course.previous_version)\n        locator = CourseLocator(version_guid=course.previous_version)\n        result = modulestore().get_course_successors(locator)\n        self.assertIsInstance(result, VersionTree)\n        self.assertIsNone(result.locator.org)\n        self.assertEqual(result.locator.version_guid, versions[-1])\n        self.assertEqual(len(result.children), 1)\n        self.assertEqual(result.children[0].locator.version_guid, versions[-2])\n        self.assertEqual(len(result.children[0].children), 0, \"descended more than one level\")\n        result = modulestore().get_course_successors(locator, version_history_depth=2)\n        self.assertEqual(len(result.children), 1)\n        self.assertEqual(result.children[0].locator.version_guid, versions[-2])\n        self.assertEqual(len(result.children[0].children), 1)\n        result = modulestore().get_course_successors(locator, version_history_depth=99)\n        self.assertEqual(len(result.children), 1)\n        self.assertEqual(result.children[0].locator.version_guid, versions[-2])\n        self.assertEqual(len(result.children[0].children), 1)\n        self.assertEqual(result.children[0].children[0].locator.version_guid, versions[0])\nclass TestCourseStructureCache(SplitModuleTest):\n    \"\"\"Tests for the CourseStructureCache\"\"\"\n    def setUp(self):\n        # use the default cache, since the `course_structure_cache`\n        # is a dummy cache during testing\n        self.cache = get_cache('default')\n        # make sure we clear the cache before every test...\n        self.cache.clear()\n        # ... and after\n        self.addCleanup(self.cache.clear)\n        # make a new course:\n        self.user = random.getrandbits(32)\n        self.new_course = modulestore().create_course(\n            'org', 'course', 'test_run', self.user, BRANCH_NAME_DRAFT,\n        )\n        super(TestCourseStructureCache, self).setUp()\n    @patch('xmodule.modulestore.split_mongo.mongo_connection.get_cache')\n    def test_course_structure_cache(self, mock_get_cache):\n        # force get_cache to return the default cache so we can test\n        # its caching behavior\n        mock_get_cache.return_value = self.cache\n        with check_mongo_calls(1):\n            not_cached_structure = self._get_structure(self.new_course)\n        # when cache is warmed, we should have one fewer mongo call\n        with check_mongo_calls(0):\n            cached_structure = self._get_structure(self.new_course)\n        # now make sure that you get the same structure\n        self.assertEqual(cached_structure, not_cached_structure)\n    @patch('xmodule.modulestore.split_mongo.mongo_connection.get_cache')\n    def test_course_structure_cache_no_cache_configured(self, mock_get_cache):\n        mock_get_cache.side_effect = InvalidCacheBackendError\n        with check_mongo_calls(1):\n            not_cached_structure = self._get_structure(self.new_course)\n        # if the cache isn't configured, we expect to have to make\n        # another mongo call here if we want the same course structure\n        with check_mongo_calls(1):\n            cached_structure = self._get_structure(self.new_course)\n        # now make sure that you get the same structure\n        self.assertEqual(cached_structure, not_cached_structure)\n    def test_dummy_cache(self):\n        with check_mongo_calls(1):\n            not_cached_structure = self._get_structure(self.new_course)\n        # Since the test is using the dummy cache, it's not actually caching\n        # anything\n        with check_mongo_calls(1):\n            cached_structure = self._get_structure(self.new_course)\n        # now make sure that you get the same structure\n        self.assertEqual(cached_structure, not_cached_structure)\n    def _get_structure(self, course):\n        \"\"\"\n        Helper function to get a structure from a course.\n        \"\"\"\n        return modulestore().db_connection.get_structure(\n            course.location.as_object_id(course.location.version_guid)\n        )\nclass SplitModuleItemTests(SplitModuleTest):\n    '''\n    Item read tests including inheritance\n    '''\n    @patch('xmodule.tabs.CourseTab.from_json', side_effect=mock_tab_from_json)\n    def test_has_item(self, _from_json):\n        '''\n        has_item(BlockUsageLocator)\n        '''\n        org = 'testx'\n        course = 'GreekHero'\n        run = 'run'\n        course_locator = CourseLocator(org=org, course=course, run=run, branch=BRANCH_NAME_DRAFT)\n        course = modulestore().get_course(course_locator)\n        previous_version = course.previous_version\n        # positive tests of various forms\n        locator = course.location.map_into_course(CourseLocator(version_guid=previous_version))\n        self.assertTrue(\n            modulestore().has_item(locator), \"couldn't find in %s\" % previous_version\n        )\n        locator = course.location.version_agnostic()\n        self.assertTrue(\n            modulestore().has_item(locator),\n        )\n        self.assertFalse(\n            modulestore().has_item(\n                BlockUsageLocator(\n                    locator.course_key.for_branch(BRANCH_NAME_PUBLISHED),\n                    block_type=locator.block_type,\n                    block_id=locator.block_id\n                )\n            ),\n            \"found in published head\"\n        )\n        # not a course obj\n        locator = BlockUsageLocator(course_locator, block_type='chapter', block_id='chapter1')\n        self.assertTrue(\n            modulestore().has_item(locator),\n            \"couldn't find chapter1\"\n        )\n        # in published course\n        locator = BlockUsageLocator(\n            CourseLocator(org=\"testx\", course=\"wonderful\", run=\"run\", branch=BRANCH_NAME_DRAFT),\n            block_type=\"course\",\n            block_id=\"head23456\"\n        )\n        self.assertTrue(\n            modulestore().has_item(locator.for_branch(BRANCH_NAME_PUBLISHED))\n        )\n    def test_negative_has_item(self):\n        # negative tests--not found\n        # no such course or block\n        locator = BlockUsageLocator(\n            CourseLocator(org=\"foo\", course=\"doesnotexist\", run=\"run\", branch=BRANCH_NAME_DRAFT),\n            block_type=\"course\",\n            block_id=\"head23456\"\n        )\n        self.assertFalse(modulestore().has_item(locator))\n        locator = BlockUsageLocator(\n            CourseLocator(org=\"testx\", course=\"wonderful\", run=\"run\", branch=BRANCH_NAME_DRAFT),\n            block_type=\"vertical\",\n            block_id=\"doesnotexist\"\n        )\n        self.assertFalse(modulestore().has_item(locator))\n    @patch('xmodule.tabs.CourseTab.from_json', side_effect=mock_tab_from_json)\n    def test_get_item(self, _from_json):\n        '''\n        get_item(blocklocator)\n        '''\n        hero_locator = CourseLocator(org=\"testx\", course=\"GreekHero\", run=\"run\", branch=BRANCH_NAME_DRAFT)\n        course = modulestore().get_course(hero_locator)\n        previous_version = course.previous_version\n        # positive tests of various forms\n        locator = course.location.map_into_course(CourseLocator(version_guid=previous_version))\n        block = modulestore().get_item(locator)\n        self.assertIsInstance(block, CourseDescriptor)\n        self.assertIsInstance(modulestore().get_item(locator), CourseDescriptor)\n        def verify_greek_hero(block):\n            \"\"\"\n            Check contents of block\n            \"\"\"\n            self.assertEqual(block.location.org, \"testx\")\n            self.assertEqual(block.location.course, \"GreekHero\")\n            self.assertEqual(block.location.run, \"run\")\n            self.assertEqual(len(block.tabs), 6, \"wrong number of tabs\")\n            self.assertEqual(block.display_name, \"The Ancient Greek Hero\")\n            self.assertEqual(block.advertised_start, \"Fall 2013\")\n            self.assertEqual(len(block.children), 3)\n            # check dates and graders--forces loading of descriptor\n            self.assertEqual(block.edited_by, \"testassist@edx.org\")\n            self.assertDictEqual(\n                block.grade_cutoffs, {\"Pass\": 0.45},\n            )\n        verify_greek_hero(modulestore().get_item(course.location))\n        # try to look up other branches\n        with self.assertRaises(ItemNotFoundError):\n            modulestore().get_item(course.location.for_branch(BRANCH_NAME_PUBLISHED))\n    def test_get_non_root(self):\n        # not a course obj\n        locator = BlockUsageLocator(\n            CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT), 'chapter', 'chapter1'\n        )\n        block = modulestore().get_item(locator)\n        self.assertEqual(block.location.org, \"testx\")\n        self.assertEqual(block.location.course, \"GreekHero\")\n        self.assertEqual(block.category, 'chapter')\n        self.assertEqual(block.display_name, \"Hercules\")\n        self.assertEqual(block.edited_by, \"testassist@edx.org\")\n        # in published course\n        locator = BlockUsageLocator(\n            CourseLocator(org='testx', course='wonderful', run=\"run\", branch=BRANCH_NAME_PUBLISHED), 'course', 'head23456'\n        )\n        self.assertIsInstance(\n            modulestore().get_item(locator),\n            CourseDescriptor\n        )\n        # negative tests--not found\n        # no such course or block\n        locator = BlockUsageLocator(\n            CourseLocator(org='doesnotexist', course='doesnotexist', run=\"run\", branch=BRANCH_NAME_DRAFT), 'course', 'head23456'\n        )\n        with self.assertRaises(ItemNotFoundError):\n            modulestore().get_item(locator)\n        locator = BlockUsageLocator(\n            CourseLocator(org='testx', course='wonderful', run=\"run\", branch=BRANCH_NAME_DRAFT), 'html', 'doesnotexist'\n        )\n        with self.assertRaises(ItemNotFoundError):\n            modulestore().get_item(locator)\n    # pylint: disable=protected-access\n    def test_matching(self):\n        '''\n        test the block and value matches help functions\n        '''\n        self.assertTrue(modulestore()._value_matches('help', 'help'))\n        self.assertFalse(modulestore()._value_matches('help', 'Help'))\n        self.assertTrue(modulestore()._value_matches(['distract', 'help', 'notme'], 'help'))\n        self.assertFalse(modulestore()._value_matches(['distract', 'Help', 'notme'], 'help'))\n        self.assertFalse(modulestore()._block_matches({'field': ['distract', 'Help', 'notme']}, {'field': 'help'}))\n        self.assertTrue(modulestore()._block_matches(\n            {'field': ['distract', 'help', 'notme'],\n                'irrelevant': 2},\n            {'field': 'help'}))\n        self.assertTrue(modulestore()._value_matches('I need some help', re.compile(r'help')))\n        self.assertTrue(modulestore()._value_matches(['I need some help', 'today'], re.compile(r'help')))\n        self.assertFalse(modulestore()._value_matches('I need some help', re.compile(r'Help')))\n        self.assertTrue(modulestore()._value_matches(['I need some help', 'today'], re.compile(r'Help', re.IGNORECASE)))\n        self.assertTrue(modulestore()._value_matches('gotcha', {'$in': ['a', 'bunch', 'of', 'gotcha']}))\n        self.assertFalse(modulestore()._value_matches('gotcha', {'$in': ['a', 'bunch', 'of', 'gotchas']}))\n        self.assertFalse(modulestore()._value_matches('gotcha', {'$nin': ['a', 'bunch', 'of', 'gotcha']}))\n        self.assertTrue(modulestore()._value_matches('gotcha', {'$nin': ['a', 'bunch', 'of', 'gotchas']}))\n        self.assertTrue(modulestore()._block_matches({'group_access': {'1': [1]}}, {'group_access': {'$exists': True}}))\n        self.assertTrue(modulestore()._block_matches({'a': 1, 'b': 2}, {'group_access': {'$exists': False}}))\n        self.assertTrue(modulestore()._block_matches(\n            {'a': 1, 'group_access': {'1': [1]}},\n            {'a': 1, 'group_access': {'$exists': True}}))\n        self.assertFalse(modulestore()._block_matches(\n            {'a': 1, 'group_access': {'1': [1]}},\n            {'a': 111, 'group_access': {'$exists': True}}))\n        self.assertTrue(modulestore()._block_matches({'a': 1, 'b': 2}, {'a': 1, 'group_access': {'$exists': False}}))\n        self.assertFalse(modulestore()._block_matches({'a': 1, 'b': 2}, {'a': 9, 'group_access': {'$exists': False}}))\n        self.assertTrue(modulestore()._block_matches({'a': 1, 'b': 2}, {'a': 1}))\n        self.assertFalse(modulestore()._block_matches({'a': 1, 'b': 2}, {'a': 2}))\n        self.assertFalse(modulestore()._block_matches({'a': 1, 'b': 2}, {'c': 1}))\n        self.assertFalse(modulestore()._block_matches({'a': 1, 'b': 2}, {'a': 1, 'c': 1}))\n        self.assertTrue(modulestore()._block_matches({'a': 1, 'b': 2}, {'a': lambda i: 0 < i < 2}))\n    def test_get_items(self):\n        '''\n        get_items(locator, qualifiers, [branch])\n        '''\n        locator = CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT)\n        # get all modules\n        matches = modulestore().get_items(locator)\n        self.assertEqual(len(matches), 7)\n        matches = modulestore().get_items(locator)\n        self.assertEqual(len(matches), 7)\n        matches = modulestore().get_items(locator, qualifiers={'category': 'chapter'})\n        self.assertEqual(len(matches), 3)\n        matches = modulestore().get_items(locator, qualifiers={'category': 'garbage'})\n        self.assertEqual(len(matches), 0)\n        matches = modulestore().get_items(\n            locator,\n            qualifiers={'category': 'chapter'},\n            settings={'display_name': re.compile(r'Hera')},\n        )\n        self.assertEqual(len(matches), 2)\n        matches = modulestore().get_items(locator, settings={'group_access': {'$exists': True}})\n        self.assertEqual(len(matches), 1)\n        matches = modulestore().get_items(locator, settings={'group_access': {'$exists': False}})\n        self.assertEqual(len(matches), 6)\n    def test_get_parents(self):\n        '''\n        get_parent_location(locator): BlockUsageLocator\n        '''\n        locator = BlockUsageLocator(\n            CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT),\n            'chapter', block_id='chapter1'\n        )\n        parent = modulestore().get_parent_location(locator)\n        self.assertIsNotNone(parent)\n        self.assertEqual(parent.block_id, 'head12345')\n        self.assertEqual(parent.org, \"testx\")\n        self.assertEqual(parent.course, \"GreekHero\")\n        locator = locator.course_key.make_usage_key('chapter', 'chapter2')\n        parent = modulestore().get_parent_location(locator)\n        self.assertIsNotNone(parent)\n        self.assertEqual(parent.block_id, 'head12345')\n        locator = locator.course_key.make_usage_key('garbage', 'nosuchblock')\n        parent = modulestore().get_parent_location(locator)\n        self.assertIsNone(parent)\n    @patch('xmodule.tabs.CourseTab.from_json', side_effect=mock_tab_from_json)\n    def test_get_children(self, _from_json):\n        \"\"\"\n        Test the existing get_children method on xdescriptors\n        \"\"\"\n        locator = BlockUsageLocator(\n            CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT), 'course', 'head12345'\n        )\n        block = modulestore().get_item(locator)\n        children = block.get_children()\n        expected_ids = [\n            \"chapter1\", \"chapter2\", \"chapter3\"\n        ]\n        for child in children:\n            self.assertEqual(child.category, \"chapter\")\n            self.assertIn(child.location.block_id, expected_ids)\n            expected_ids.remove(child.location.block_id)\n        self.assertEqual(len(expected_ids), 0)\ndef version_agnostic(children):\n    \"\"\"\n    children: list of descriptors\n    Returns the `children` list with each member version-agnostic\n    \"\"\"\n    return [child.version_agnostic() for child in children]\nclass TestItemCrud(SplitModuleTest):\n    \"\"\"\n    Test create update and delete of items\n    \"\"\"\n    # DHM do I need to test this case which I believe won't work:\n    #  1) fetch a course and some of its blocks\n    #  2) do a series of CRUD operations on those previously fetched elements\n    # The problem here will be that the version_guid of the items will be the version at time of fetch.\n    # Each separate save will change the head version; so, the 2nd piecemeal change will flag the version\n    # conflict. That is, if versions are v0..vn and start as v0 in initial fetch, the first CRUD op will\n    # say it's changing an object from v0, splitMongo will process it and make the current head v1, the next\n    # crud op will pass in its v0 element and splitMongo will flag the version conflict.\n    # What I don't know is how realistic this test is and whether to wrap the modulestore with a higher level\n    # transactional operation which manages the version change or make the threading cache reason out whether or\n    # not the changes are independent and additive and thus non-conflicting.\n    # A use case I expect is\n    # (client) change this metadata\n    # (server) done, here's the new info which, btw, updates the course version to v1\n    # (client) add these children to this other node (which says it came from v0 or\n    #          will the client have refreshed the version before doing the op?)\n    # In this case, having a server side transactional model won't help b/c the bug is a long-transaction on the\n    # on the client where it would be a mistake for the server to assume anything about client consistency. The best\n    # the server could do would be to see if the parent's children changed at all since v0.\n    def test_create_minimal_item(self):\n        \"\"\"\n        create_item(user, location, category, definition_locator=None, fields): new_desciptor\n        \"\"\"\n        # grab link to course to ensure new versioning works\n        locator = CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT)\n        premod_course = modulestore().get_course(locator)\n        premod_history = modulestore().get_course_history_info(locator)\n        # add minimal one w/o a parent\n        category = 'sequential'\n        new_module = modulestore().create_item(\n            'user123', locator, category,\n            fields={'display_name': 'new sequential'}\n        )\n        # check that course version changed and course's previous is the other one\n        self.assertEqual(new_module.location.course, \"GreekHero\")\n        self.assertNotEqual(new_module.location.version_guid, premod_course.location.version_guid)\n        self.assertIsNone(locator.version_guid, \"Version inadvertently filled in\")\n        current_course = modulestore().get_course(locator)\n        self.assertEqual(new_module.location.version_guid, current_course.location.version_guid)\n        history_info = modulestore().get_course_history_info(current_course.location.course_key)\n        self.assertEqual(history_info['previous_version'], premod_course.location.version_guid)\n        self.assertEqual(history_info['original_version'], premod_history['original_version'])\n        self.assertEqual(history_info['edited_by'], \"user123\")\n        # check block's info: category, definition_locator, and display_name\n        self.assertEqual(new_module.category, 'sequential')\n        self.assertIsNotNone(new_module.definition_locator)\n        self.assertEqual(new_module.display_name, 'new sequential')\n        # check that block does not exist in previous version\n        locator = new_module.location.map_into_course(\n            CourseLocator(version_guid=premod_course.location.version_guid)\n        )\n        with self.assertRaises(ItemNotFoundError):\n            modulestore().get_item(locator)\n    def test_create_parented_item(self):\n        \"\"\"\n        Test create_item w/ specifying the parent of the new item\n        \"\"\"\n        locator = BlockUsageLocator(\n            CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT),\n            'chapter', block_id='chapter2'\n        )\n        original = modulestore().get_item(locator)\n        locator = BlockUsageLocator(\n            CourseLocator(org='testx', course='wonderful', run=\"run\", branch=BRANCH_NAME_DRAFT), 'course', 'head23456'\n        )\n        premod_course = modulestore().get_course(locator.course_key)\n        category = 'chapter'\n        new_module = modulestore().create_child(\n            'user123', locator, category,\n            fields={'display_name': 'new chapter'},\n            definition_locator=original.definition_locator\n        )\n        # check that course version changed and course's previous is the other one\n        self.assertNotEqual(new_module.location.version_guid, premod_course.location.version_guid)\n        parent = modulestore().get_item(locator)\n        self.assertIn(new_module.location.version_agnostic(), version_agnostic(parent.children))\n        self.assertEqual(new_module.definition_locator.definition_id, original.definition_locator.definition_id)\n    def test_unique_naming(self):\n        \"\"\"\n        Check that 2 modules of same type get unique block_ids. Also check that if creation provides\n        a definition id and new def data that it branches the definition in the db.\n        Actually, this tries to test all create_item features not tested above.\n        \"\"\"\n        locator = BlockUsageLocator(\n            CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT),\n            'problem', block_id='problem1'\n        )\n        original = modulestore().get_item(locator)\n        locator = BlockUsageLocator(\n            CourseLocator(org='guestx', course='contender', run=\"run\", branch=BRANCH_NAME_DRAFT), 'course', 'head345679'\n        )\n        category = 'problem'\n        new_payload = \"<problem>empty</problem>\"\n        new_module = modulestore().create_child(\n            'anotheruser', locator, category,\n            fields={'display_name': 'problem 1', 'data': new_payload},\n        )\n        another_payload = \"<problem>not empty</problem>\"\n        another_module = modulestore().create_child(\n            'anotheruser', locator, category,\n            fields={'display_name': 'problem 2', 'data': another_payload},\n            definition_locator=original.definition_locator,\n        )\n        # check that course version changed and course's previous is the other one\n        parent = modulestore().get_item(locator)\n        self.assertNotEqual(new_module.location.block_id, another_module.location.block_id)\n        self.assertIn(new_module.location.version_agnostic(), version_agnostic(parent.children))\n        self.assertIn(another_module.location.version_agnostic(), version_agnostic(parent.children))\n        self.assertEqual(new_module.data, new_payload)\n        self.assertEqual(another_module.data, another_payload)\n        # check definition histories\n        new_history = modulestore().get_definition_history_info(new_module.definition_locator)\n        self.assertIsNone(new_history['previous_version'])\n        self.assertEqual(new_history['original_version'], new_module.definition_locator.definition_id)\n        self.assertEqual(new_history['edited_by'], \"anotheruser\")\n        another_history = modulestore().get_definition_history_info(another_module.definition_locator)\n        self.assertEqual(another_history['previous_version'], original.definition_locator.definition_id)\n    def test_encoded_naming(self):\n        \"\"\"\n        Check that using odd characters in block id don't break ability to add and retrieve block.\n        \"\"\"\n        course_key = CourseLocator(org='guestx', course='contender', run=\"run\", branch=BRANCH_NAME_DRAFT)\n        parent_locator = BlockUsageLocator(course_key, 'course', block_id=\"head345679\")\n        chapter_locator = BlockUsageLocator(course_key, 'chapter', block_id=\"foo.bar_-~:0\")\n        modulestore().create_child(\n            'anotheruser', parent_locator, 'chapter',\n            block_id=chapter_locator.block_id,\n            fields={'display_name': 'chapter 99'},\n        )\n        # check that course version changed and course's previous is the other one\n        new_module = modulestore().get_item(chapter_locator)\n        self.assertEqual(new_module.location.block_id, \"foo.bar_-~:0\")  # hardcode to ensure BUL init didn't change\n        # now try making that a parent of something\n        new_payload = \"<problem>empty</problem>\"\n        problem_locator = BlockUsageLocator(course_key, 'problem', block_id=\"prob.bar_-~:99a\")\n        modulestore().create_child(\n            'anotheruser', chapter_locator, 'problem',\n            block_id=problem_locator.block_id,\n            fields={'display_name': 'chapter 99', 'data': new_payload},\n        )\n        # check that course version changed and course's previous is the other one\n        new_module = modulestore().get_item(problem_locator)\n        self.assertEqual(new_module.location.block_id, problem_locator.block_id)\n        chapter = modulestore().get_item(chapter_locator)\n        self.assertIn(problem_locator, version_agnostic(chapter.children))\n    def test_create_bulk_operations(self):\n        \"\"\"\n        Test create_item using bulk_operations\n        \"\"\"\n        # start transaction w/ simple creation\n        user = random.getrandbits(32)\n        course_key = CourseLocator('test_org', 'test_transaction', 'test_run')\n        with modulestore().bulk_operations(course_key):\n            new_course = modulestore().create_course('test_org', 'test_transaction', 'test_run', user, BRANCH_NAME_DRAFT)\n            new_course_locator = new_course.id\n            index_history_info = modulestore().get_course_history_info(new_course.location.course_key)\n            course_block_prev_version = new_course.previous_version\n            course_block_update_version = new_course.update_version\n            self.assertIsNotNone(new_course_locator.version_guid, \"Want to test a definite version\")\n            versionless_course_locator = new_course_locator.version_agnostic()\n            # positive simple case: no force, add chapter\n            new_ele = modulestore().create_child(\n                user, new_course.location, 'chapter',\n                fields={'display_name': 'chapter 1'},\n            )\n            # version info shouldn't change\n            self.assertEqual(new_ele.update_version, course_block_update_version)\n            self.assertEqual(new_ele.update_version, new_ele.location.version_guid)\n            refetch_course = modulestore().get_course(versionless_course_locator)\n            self.assertEqual(refetch_course.location.version_guid, new_course.location.version_guid)\n            self.assertEqual(refetch_course.previous_version, course_block_prev_version)\n            self.assertEqual(refetch_course.update_version, course_block_update_version)\n            refetch_index_history_info = modulestore().get_course_history_info(refetch_course.location.course_key)\n            self.assertEqual(refetch_index_history_info, index_history_info)\n            self.assertIn(new_ele.location.version_agnostic(), version_agnostic(refetch_course.children))\n            # try to create existing item\n            with self.assertRaises(DuplicateItemError):\n                _fail = modulestore().create_child(\n                    user, new_course.location, 'chapter',\n                    block_id=new_ele.location.block_id,\n                    fields={'display_name': 'chapter 2'},\n                )\n        # start a new transaction\n        with modulestore().bulk_operations(course_key):\n            new_ele = modulestore().create_child(\n                user, new_course.location, 'chapter',\n                fields={'display_name': 'chapter 2'},\n            )\n            transaction_guid = new_ele.location.version_guid\n            # ensure force w/ continue gives exception\n            with self.assertRaises(VersionConflictError):\n                _fail = modulestore().create_child(\n                    user, new_course.location, 'chapter',\n                    fields={'display_name': 'chapter 2'},\n                    force=True\n                )\n            # ensure trying to continue the old one gives exception\n            with self.assertRaises(VersionConflictError):\n                _fail = modulestore().create_child(\n                    user, new_course.location, 'chapter',\n                    fields={'display_name': 'chapter 3'},\n                )\n            # add new child to old parent in continued (leave off version_guid)\n            course_module_locator = new_course.location.version_agnostic()\n            new_ele = modulestore().create_child(\n                user, course_module_locator, 'chapter',\n                fields={'display_name': 'chapter 4'},\n            )\n            self.assertNotEqual(new_ele.update_version, course_block_update_version)\n            self.assertEqual(new_ele.location.version_guid, transaction_guid)\n            # check children, previous_version\n            refetch_course = modulestore().get_course(versionless_course_locator)\n            self.assertIn(new_ele.location.version_agnostic(), version_agnostic(refetch_course.children))\n            self.assertEqual(refetch_course.previous_version, course_block_update_version)\n            self.assertEqual(refetch_course.update_version, transaction_guid)\n    def test_bulk_ops_org_filtering(self):\n        \"\"\"\n        Make sure of proper filtering when using bulk operations and\n        calling get_courses with an 'org' filter\n        \"\"\"\n        # start transaction w/ simple creation\n        user = random.getrandbits(32)\n        course_key = CourseLocator('test_org', 'test_transaction', 'test_run')\n        with modulestore().bulk_operations(course_key):\n            modulestore().create_course('test_org', 'test_transaction', 'test_run', user, BRANCH_NAME_DRAFT)\n            courses = modulestore().get_courses(branch=BRANCH_NAME_DRAFT, org='test_org')\n            self.assertEqual(len(courses), 1)\n            self.assertEqual(courses[0].id.org, course_key.org)\n            self.assertEqual(courses[0].id.course, course_key.course)\n            self.assertEqual(courses[0].id.run, course_key.run)\n            courses = modulestore().get_courses(branch=BRANCH_NAME_DRAFT, org='other_org')\n            self.assertEqual(len(courses), 0)\n        # re-assert after the end of the with scope\n        courses = modulestore().get_courses(branch=BRANCH_NAME_DRAFT, org='test_org')\n        self.assertEqual(len(courses), 1)\n        self.assertEqual(courses[0].id.org, course_key.org)\n        self.assertEqual(courses[0].id.course, course_key.course)\n        self.assertEqual(courses[0].id.run, course_key.run)\n        courses = modulestore().get_courses(branch=BRANCH_NAME_DRAFT, org='other_org')\n        self.assertEqual(len(courses), 0)\n    def test_update_metadata(self):\n        \"\"\"\n        test updating an items metadata ensuring the definition doesn't version but the course does if it should\n        \"\"\"\n        locator = BlockUsageLocator(\n            CourseLocator(org=\"testx\", course=\"GreekHero\", run=\"run\", branch=BRANCH_NAME_DRAFT),\n            'problem', block_id=\"problem3_2\"\n        )\n        problem = modulestore().get_item(locator)\n        pre_def_id = problem.definition_locator.definition_id\n        pre_version_guid = problem.location.version_guid\n        self.assertIsNotNone(pre_def_id)\n        self.assertIsNotNone(pre_version_guid)\n        self.assertNotEqual(problem.max_attempts, 4, \"Invalidates rest of test\")\n        problem.max_attempts = 4\n        problem.save()  # decache above setting into the kvs\n        updated_problem = modulestore().update_item(problem, self.user_id)\n        # check that course version changed and course's previous is the other one\n        self.assertEqual(updated_problem.definition_locator.definition_id, pre_def_id)\n        self.assertNotEqual(updated_problem.location.version_guid, pre_version_guid)\n        self.assertEqual(updated_problem.max_attempts, 4)\n        # refetch to ensure original didn't change\n        original_location = problem.location.map_into_course(CourseLocator(version_guid=pre_version_guid))\n        problem = modulestore().get_item(original_location)\n        self.assertNotEqual(problem.max_attempts, 4, \"original changed\")\n        current_course = modulestore().get_course(locator.course_key)\n        self.assertEqual(updated_problem.location.version_guid, current_course.location.version_guid)\n        history_info = modulestore().get_course_history_info(current_course.location.course_key)\n        self.assertEqual(history_info['previous_version'], pre_version_guid)\n        self.assertEqual(history_info['edited_by'], self.user_id)\n    def test_update_children(self):\n        \"\"\"\n        test updating an item's children ensuring the definition doesn't version but the course does if it should\n        \"\"\"\n        locator = BlockUsageLocator(\n            CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT), 'chapter', 'chapter3'\n        )\n        block = modulestore().get_item(locator)\n        pre_def_id = block.definition_locator.definition_id\n        pre_version_guid = block.location.version_guid\n        # reorder children\n        self.assertGreater(len(block.children), 0, \"meaningless test\")\n        moved_child = block.children.pop()\n        block.save()  # decache model changes\n        updated_problem = modulestore().update_item(block, self.user_id)\n        # check that course version changed and course's previous is the other one\n        self.assertEqual(updated_problem.definition_locator.definition_id, pre_def_id)\n        self.assertNotEqual(updated_problem.location.version_guid, pre_version_guid)\n        self.assertEqual(version_agnostic(updated_problem.children), version_agnostic(block.children))\n        self.assertNotIn(moved_child, version_agnostic(updated_problem.children))\n        locator = locator.course_key.make_usage_key('chapter', \"chapter1\")\n        other_block = modulestore().get_item(locator)\n        other_block.children.append(moved_child)\n        other_updated = modulestore().update_item(other_block, self.user_id)\n        self.assertIn(moved_child.version_agnostic(), version_agnostic(other_updated.children))\n    @patch('xmodule.tabs.CourseTab.from_json', side_effect=mock_tab_from_json)\n    def test_update_definition(self, _from_json):\n        \"\"\"\n        test updating an item's definition: ensure it gets versioned as well as the course getting versioned\n        \"\"\"\n        locator = BlockUsageLocator(\n            CourseLocator(org='testx', course='GreekHero', run=\"run\", branch=BRANCH_NAME_DRAFT), 'course', 'head12345'\n        )\n        block = modulestore().get_item(locator)\n        pre_def_id = block.definition_locator.definition_id\n        pre_version_guid = block.location.version_guid\n        block.grading_policy['GRADER'][0]['min_count'] = 13\n        block.save()  # decache model changes\n        updated_block = modulestore().update_item(block, self.user_id)\n        self.assertNotEqual(updated_block.definition_locator.definition_id, pre_def_id)\n        self.assertNotEqual(updated_block.location.version_guid, pre_version_guid)\n        self.assertEqual(updated_block.grading_policy['GRADER'][0]['min_count'], 13)\n    def test_update_manifold(self):\n        \"\"\"\n        Test updating metadata, children, and definition in a single call ensuring all the versioning occurs\n        \"\"\"\n        locator = BlockUsageLocator(\n            CourseLocator('testx', 'GreekHero', 'run', branch=BRANCH_NAME_DRAFT),\n            'problem', block_id='problem1'\n        )\n        original = modulestore().get_item(locator)\n        # first add 2 children to the course for the update to manipulate\n        locator = BlockUsageLocator(\n            CourseLocator('guestx', 'contender', 'run', branch=BRANCH_NAME_DRAFT),\n            'course', block_id=\"head345679\"\n        )\n        category = 'problem'\n        new_payload = \"<problem>empty</problem>\"\n        modulestore().create_child(\n            'test_update_manifold', locator, category,\n            fields={'display_name': 'problem 1', 'data': new_payload},\n        )\n        another_payload = \"<problem>not empty</problem>\"\n        modulestore().create_child(\n            'test_update_manifold', locator, category,\n            fields={'display_name': 'problem 2', 'data': another_payload},\n            definition_locator=original.definition_locator,\n        )\n        # pylint: disable=protected-access\n        modulestore()._clear_cache()\n        # now begin the test\n        block = modulestore().get_item(locator)\n        pre_def_id = block.definition_locator.definition_id\n        pre_version_guid = block.location.version_guid\n        self.assertNotEqual(block.grading_policy['GRADER'][0]['min_count'], 13)\n        block.grading_policy['GRADER'][0]['min_count'] = 13\n        block.children = block.children[1:] + [block.children[0]]\n        block.advertised_start = \"Soon\"\n        block.save()  # decache model changes\n        updated_block = modulestore().update_item(block, self.user_id)\n        self.assertNotEqual(updated_block.definition_locator.definition_id, pre_def_id)\n        self.assertNotEqual(updated_block.location.version_guid, pre_version_guid)\n        self.assertEqual(updated_block.grading_policy['GRADER'][0]['min_count'], 13)\n        self.assertEqual(updated_block.children[0].version_agnostic(), block.children[0].version_agnostic())\n        self.assertEqual(updated_block.advertised_start, \"Soon\")\n    def test_delete_item(self):\n        course = self.create_course_for_deletion()\n        with self.assertRaises(ValueError):\n            modulestore().delete_item(course.location, self.user_id)\n        reusable_location = course.id.version_agnostic().for_branch(BRANCH_NAME_DRAFT)\n        # delete a leaf\n        problems = modulestore().get_items(reusable_location, qualifiers={'category': 'problem'})\n        locn_to_del = problems[0].location\n        new_course_loc = modulestore().delete_item(locn_to_del, self.user_id)\n        deleted = locn_to_del.version_agnostic()\n        self.assertFalse(modulestore().has_item(deleted))\n        with self.assertRaises(VersionConflictError):\n            modulestore().has_item(locn_to_del)\n        with self.assertRaises(ValueError):\n            modulestore().delete_item(deleted, self.user_id)\n        self.assertTrue(modulestore().has_item(locn_to_del.course_agnostic()))\n        self.assertNotEqual(new_course_loc.version_guid, course.location.version_guid)\n        # delete a subtree\n        nodes = modulestore().get_items(reusable_location, qualifiers={'category': 'chapter'})\n        new_course_loc = modulestore().delete_item(nodes[0].location, self.user_id)\n        # check subtree\n        def check_subtree(node):\n            \"\"\"\n            Check contents of subtree recursively\n            \"\"\"\n            if node:\n                node_loc = node.location\n                self.assertFalse(\n                    modulestore().has_item(node_loc.version_agnostic())\n                )\n                self.assertTrue(modulestore().has_item(node_loc.course_agnostic()))\n                if node.has_children:\n                    for sub in node.get_children():\n                        check_subtree(sub)\n        check_subtree(nodes[0])\n    def create_course_for_deletion(self):\n        \"\"\"\n        Create a course we can delete\n        \"\"\"\n        course = modulestore().create_course('nihilx', 'deletion', 'run', 'deleting_user', BRANCH_NAME_DRAFT)\n        root = course.location.version_agnostic().for_branch(BRANCH_NAME_DRAFT)\n        for _ in range(4):\n            self.create_subtree_for_deletion(root, ['chapter', 'vertical', 'problem'])\n        return modulestore().get_item(root)\n    def create_subtree_for_deletion(self, parent, category_queue):\n        \"\"\"\n        Create a subtree in the tb deleted course\n        \"\"\"\n        if not category_queue:\n            return\n        node = modulestore().create_child(\n", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "length": 4289, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "271ef4fcd93c2d0dcdf4e07cc25ce775594a0c381c7b448f"}
{"input": "", "context": "/* ===========================================================\n * JFreeChart : a free chart library for the Java(tm) platform\n * ===========================================================\n *\n * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n *\n * Project Info:  http://www.jfree.org/jfreechart/index.html\n *\n * This library is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \n * USA.  \n *\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc.\n * in the United States and other countries.]\n *\n * --------------------\n * LogarithmicAxis.java\n * --------------------\n * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n *\n * Original Author:  Michael Duffy / Eric Thomas;\n * Contributor(s):   David Gilbert (for Object Refinery Limited);\n *                   David M. O'Donnell;\n *                   Scott Sams;\n *\n * $Id: LogarithmicAxis.java,v 1.11.2.1 2005/10/25 20:37:34 mungady Exp $\n *\n * Changes\n * -------\n * 14-Mar-2002 : Version 1 contributed by Michael Duffy (DG);\n * 19-Apr-2002 : drawVerticalString() is now drawRotatedString() in\n *               RefineryUtilities (DG);\n * 23-Apr-2002 : Added a range property (DG);\n * 15-May-2002 : Modified to be able to deal with negative and zero values (via\n *               new 'adjustedLog10()' method);  occurrences of \"Math.log(10)\"\n *               changed to \"LOG10_VALUE\"; changed 'intValue()' to\n *               'longValue()' in 'refreshTicks()' to fix label-text value\n *               out-of-range problem; removed 'draw()' method; added\n *               'autoRangeMinimumSize' check; added 'log10TickLabelsFlag'\n *               parameter flag and implementation (ET);\n * 25-Jun-2002 : Removed redundant import (DG);\n * 25-Jul-2002 : Changed order of parameters in ValueAxis constructor (DG);\n * 16-Jul-2002 : Implemented support for plotting positive values arbitrarily\n *               close to zero (added 'allowNegativesFlag' flag) (ET).\n * 05-Sep-2002 : Updated constructor reflecting changes in the Axis class (DG);\n * 02-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n * 08-Nov-2002 : Moved to new package com.jrefinery.chart.axis (DG);\n * 22-Nov-2002 : Bug fixes from David M. O'Donnell (DG);\n * 14-Jan-2003 : Changed autoRangeMinimumSize from Number --> double (DG);\n * 20-Jan-2003 : Removed unnecessary constructors (DG);\n * 26-Mar-2003 : Implemented Serializable (DG);\n * 08-May-2003 : Fixed plotting of datasets with lower==upper bounds when\n *               'minAutoRange' is very small; added 'strictValuesFlag'\n *               and default functionality of throwing a runtime exception\n *               if 'allowNegativesFlag' is false and any values are less\n *               than or equal to zero; added 'expTickLabelsFlag' and\n *               changed to use \"1e#\"-style tick labels by default\n *               (\"10^n\"-style tick labels still supported via 'set'\n *               method); improved generation of tick labels when range of\n *               values is small; changed to use 'NumberFormat.getInstance()'\n *               to create 'numberFormatterObj' (ET);\n * 14-May-2003 : Merged HorizontalLogarithmicAxis and\n *               VerticalLogarithmicAxis (DG);\n * 29-Oct-2003 : Added workaround for font alignment in PDF output (DG);\n * 07-Nov-2003 : Modified to use new NumberTick class (DG);\n * 08-Apr-2004 : Use numberFormatOverride if set - see patch 930139 (DG);\n * 11-Jan-2005 : Removed deprecated code in preparation for 1.0.0 release (DG);\n * 21-Apr-2005 : Added support for upper and lower margins; added\n *               get/setAutoRangeNextLogFlag() methods and changed\n *               default to 'autoRangeNextLogFlag'==false (ET);\n * 22-Apr-2005 : Removed refreshTicks() and fixed names and parameters for\n *               refreshHorizontalTicks() & refreshVerticalTicks();\n *               changed javadoc on setExpTickLabelsFlag() to specify\n *               proper default (ET);\n * 22-Apr-2005 : Renamed refreshHorizontalTicks --> refreshTicksHorizontal\n *               (and likewise the vertical version) for consistency with\n *               other axis classes (DG);\n *\n */\npackage org.jfree.chart.axis;\nimport java.awt.Graphics2D;\nimport java.awt.geom.Rectangle2D;\nimport java.text.DecimalFormat;\nimport java.text.NumberFormat;\nimport java.util.List;\nimport org.jfree.chart.plot.Plot;\nimport org.jfree.chart.plot.ValueAxisPlot;\nimport org.jfree.data.Range;\nimport org.jfree.ui.RectangleEdge;\nimport org.jfree.ui.TextAnchor;\n/**\n * A numerical axis that uses a logarithmic scale.\n *\n * @author Michael Duffy\n */\npublic class LogarithmicAxis extends NumberAxis {\n    /** For serialization. */\n    private static final long serialVersionUID = 2502918599004103054L;\n    \n    /** Useful constant for log(10). */\n    public static final double LOG10_VALUE = Math.log(10.0);\n    /** Smallest arbitrarily-close-to-zero value allowed. */\n    public static final double SMALL_LOG_VALUE = 1e-100;\n    /** Flag set true to allow negative values in data. */\n    protected boolean allowNegativesFlag = false;\n    /** Flag set true make axis throw exception if any values are\n      * <= 0 and 'allowNegativesFlag' is false. */\n    protected boolean strictValuesFlag = true;\n    /** Number formatter for generating numeric strings. */\n    protected final NumberFormat numberFormatterObj\n        = NumberFormat.getInstance();\n    /** Flag set true for \"1e#\"-style tick labels. */\n    protected boolean expTickLabelsFlag = false;\n    /** Flag set true for \"10^n\"-style tick labels. */\n    protected boolean log10TickLabelsFlag = false;\n    /** True to make 'autoAdjustRange()' select \"10^n\" values. */\n    protected boolean autoRangeNextLogFlag = false;\n    /** Helper flag for log axis processing. */\n    protected boolean smallLogFlag = false;\n    /**\n     * Creates a new axis.\n     *\n     * @param label  the axis label.\n     */\n    public LogarithmicAxis(String label) {\n        super(label);\n        setupNumberFmtObj();      //setup number formatter obj\n    }\n    /**\n     * Sets the 'allowNegativesFlag' flag; true to allow negative values\n     * in data, false to be able to plot positive values arbitrarily close to\n     * zero.\n     *\n     * @param flgVal  the new value of the flag.\n     */\n    public void setAllowNegativesFlag(boolean flgVal) {\n        this.allowNegativesFlag = flgVal;\n    }\n    /**\n     * Returns the 'allowNegativesFlag' flag; true to allow negative values\n     * in data, false to be able to plot positive values arbitrarily close\n     * to zero.\n     *\n     * @return The flag.\n     */\n    public boolean getAllowNegativesFlag() {\n        return this.allowNegativesFlag;\n    }\n    /**\n     * Sets the 'strictValuesFlag' flag; if true and 'allowNegativesFlag'\n     * is false then this axis will throw a runtime exception if any of its\n     * values are less than or equal to zero; if false then the axis will\n     * adjust for values less than or equal to zero as needed.\n     *\n     * @param flgVal true for strict enforcement.\n     */\n    public void setStrictValuesFlag(boolean flgVal) {\n        this.strictValuesFlag = flgVal;\n    }\n    /**\n     * Returns the 'strictValuesFlag' flag; if true and 'allowNegativesFlag'\n     * is false then this axis will throw a runtime exception if any of its\n     * values are less than or equal to zero; if false then the axis will\n     * adjust for values less than or equal to zero as needed.\n     *\n     * @return <code>true</code> if strict enforcement is enabled.\n     */\n    public boolean getStrictValuesFlag() {\n        return this.strictValuesFlag;\n    }\n    /**\n     * Sets the 'expTickLabelsFlag' flag.  If the 'log10TickLabelsFlag'\n     * is false then this will set whether or not \"1e#\"-style tick labels\n     * are used.  The default is to use regular numeric tick labels.\n     *\n     * @param flgVal true for \"1e#\"-style tick labels, false for\n     * log10 or regular numeric tick labels.\n     */\n    public void setExpTickLabelsFlag(boolean flgVal) {\n        this.expTickLabelsFlag = flgVal;\n        setupNumberFmtObj();             //setup number formatter obj\n    }\n    /**\n     * Returns the 'expTickLabelsFlag' flag.\n     *\n     * @return <code>true</code> for \"1e#\"-style tick labels,\n     *         <code>false</code> for log10 or regular numeric tick labels.\n     */\n    public boolean getExpTickLabelsFlag() {\n      return this.expTickLabelsFlag;\n    }\n    /**\n     * Sets the 'log10TickLabelsFlag' flag.  The default value is false.\n     *\n     * @param flag true for \"10^n\"-style tick labels, false for \"1e#\"-style\n     * or regular numeric tick labels.\n     */\n    public void setLog10TickLabelsFlag(boolean flag) {\n        this.log10TickLabelsFlag = flag;\n    }\n    /**\n     * Returns the 'log10TickLabelsFlag' flag.\n     *\n     * @return <code>true</code> for \"10^n\"-style tick labels,\n     *         <code>false</code> for \"1e#\"-style or regular numeric tick\n     *         labels.\n     */\n    public boolean getLog10TickLabelsFlag() {\n        return this.log10TickLabelsFlag;\n    }\n    /**\n     * Sets the 'autoRangeNextLogFlag' flag.  This determines whether or\n     * not the 'autoAdjustRange()' method will select the next \"10^n\"\n     * values when determining the upper and lower bounds.  The default\n     * value is false.\n     *\n     * @param flag <code>true</code> to make the 'autoAdjustRange()'\n     * method select the next \"10^n\" values, <code>false</code> to not.\n     */\n    public void setAutoRangeNextLogFlag(boolean flag) {\n        this.autoRangeNextLogFlag = flag;\n    }\n    /**\n     * Returns the 'autoRangeNextLogFlag' flag.\n     *\n     * @return <code>true</code> if the 'autoAdjustRange()' method will\n     * select the next \"10^n\" values, <code>false</code> if not.\n     */\n    public boolean getAutoRangeNextLogFlag() {\n        return this.autoRangeNextLogFlag;\n    }\n    /**\n     * Overridden version that calls original and then sets up flag for\n     * log axis processing.\n     *\n     * @param range  the new range.\n     */\n    public void setRange(Range range) {\n        super.setRange(range);      // call parent method\n        setupSmallLogFlag();        // setup flag based on bounds values\n    }\n    /**\n     * Sets up flag for log axis processing.  Set true if negative values\n     * not allowed and the lower bound is between 0 and 10.\n     */\n    protected void setupSmallLogFlag() {\n        // set flag true if negative values not allowed and the\n        // lower bound is between 0 and 10:\n        double lowerVal = getRange().getLowerBound();\n        this.smallLogFlag\n            = (!this.allowNegativesFlag && lowerVal < 10.0 && lowerVal > 0.0);\n    }\n    /**\n     * Sets up the number formatter object according to the\n     * 'expTickLabelsFlag' flag.\n     */\n    protected void setupNumberFmtObj() {\n        if (this.numberFormatterObj instanceof DecimalFormat) {\n            //setup for \"1e#\"-style tick labels or regular\n            // numeric tick labels, depending on flag:\n            ((DecimalFormat) this.numberFormatterObj).applyPattern(\n                this.expTickLabelsFlag ? \"0E0\" : \"0.###\"\n            );\n        }\n    }\n    /**\n     * Returns the log10 value, depending on if values between 0 and\n     * 1 are being plotted.  If negative values are not allowed and\n     * the lower bound is between 0 and 10 then a normal log is\n     * returned; otherwise the returned value is adjusted if the\n     * given value is less than 10.\n     *\n     * @param val the value.\n     *\n     * @return log<sub>10</sub>(val).\n     */\n    protected double switchedLog10(double val) {\n        return this.smallLogFlag ? Math.log(val)\n                / LOG10_VALUE : adjustedLog10(val);\n    }\n    /**\n     * Returns an adjusted log10 value for graphing purposes.  The first\n     * adjustment is that negative values are changed to positive during\n     * the calculations, and then the answer is negated at the end.  The\n     * second is that, for values less than 10, an increasingly large\n     * (0 to 1) scaling factor is added such that at 0 the value is\n     * adjusted to 1, resulting in a returned result of 0.\n     *\n     * @param val  value for which log10 should be calculated.\n     *\n     * @return An adjusted log<sub>10</sub>(val).\n     */\n    public double adjustedLog10(double val) {\n        boolean negFlag = (val < 0.0);\n        if (negFlag) {\n            val = -val;          // if negative then set flag and make positive\n        }\n        if (val < 10.0) {                // if < 10 then\n            val += (10.0 - val) / 10;    //increase so 0 translates to 0\n        }\n        //return value; negate if original value was negative:\n        return negFlag ? -(Math.log(val) / LOG10_VALUE)\n                : (Math.log(val) / LOG10_VALUE);\n    }\n    /**\n     * Returns the largest (closest to positive infinity) double value that is\n     * not greater than the argument, is equal to a mathematical integer and\n     * satisfying the condition that log base 10 of the value is an integer\n     * (i.e., the value returned will be a power of 10: 1, 10, 100, 1000, etc.).\n     *\n     * @param lower a double value below which a floor will be calcualted.\n     *\n     * @return 10<sup>N</sup> with N .. { 1 ... }\n     */\n    protected double computeLogFloor(double lower) {\n        double logFloor;\n        if (this.allowNegativesFlag) {\n            //negative values are allowed\n            if (lower > 10.0) {   //parameter value is > 10\n                // The Math.log() function is based on e not 10.\n                logFloor = Math.log(lower) / LOG10_VALUE;\n                logFloor = Math.floor(logFloor);\n                logFloor = Math.pow(10, logFloor);\n            }\n            else if (lower < -10.0) {   //parameter value is < -10\n                //calculate log using positive value:\n                logFloor = Math.log(-lower) / LOG10_VALUE;\n                //calculate floor using negative value:\n                logFloor = Math.floor(-logFloor);\n                //calculate power using positive value; then negate\n                logFloor = -Math.pow(10, -logFloor);\n            }\n            else {\n                //parameter value is -10 > val < 10\n                logFloor = Math.floor(lower);   //use as-is\n            }\n        }\n        else {\n            //negative values not allowed\n            if (lower > 0.0) {   //parameter value is > 0\n                // The Math.log() function is based on e not 10.\n                logFloor = Math.log(lower) / LOG10_VALUE;\n                logFloor = Math.floor(logFloor);\n                logFloor = Math.pow(10, logFloor);\n            }\n            else {\n                //parameter value is <= 0\n                logFloor = Math.floor(lower);   //use as-is\n            }\n        }\n        return logFloor;\n    }\n    /**\n     * Returns the smallest (closest to negative infinity) double value that is\n     * not less than the argument, is equal to a mathematical integer and\n     * satisfying the condition that log base 10 of the value is an integer\n     * (i.e., the value returned will be a power of 10: 1, 10, 100, 1000, etc.).\n     *\n     * @param upper a double value above which a ceiling will be calcualted.\n     *\n     * @return 10<sup>N</sup> with N .. { 1 ... }\n     */\n    protected double computeLogCeil(double upper) {\n        double logCeil;\n        if (this.allowNegativesFlag) {\n            //negative values are allowed\n            if (upper > 10.0) {\n                //parameter value is > 10\n                // The Math.log() function is based on e not 10.\n                logCeil = Math.log(upper) / LOG10_VALUE;\n                logCeil = Math.ceil(logCeil);\n                logCeil = Math.pow(10, logCeil);\n            }\n            else if (upper < -10.0) {\n                //parameter value is < -10\n                //calculate log using positive value:\n                logCeil = Math.log(-upper) / LOG10_VALUE;\n                //calculate ceil using negative value:\n                logCeil = Math.ceil(-logCeil);\n                //calculate power using positive value; then negate\n                logCeil = -Math.pow(10, -logCeil);\n            }\n            else {\n               //parameter value is -10 > val < 10\n               logCeil = Math.ceil(upper);     //use as-is\n            }\n        }\n        else {\n            //negative values not allowed\n            if (upper > 0.0) {\n                //parameter value is > 0\n                // The Math.log() function is based on e not 10.\n                logCeil = Math.log(upper) / LOG10_VALUE;\n                logCeil = Math.ceil(logCeil);\n                logCeil = Math.pow(10, logCeil);\n            }\n            else {\n                //parameter value is <= 0\n                logCeil = Math.ceil(upper);     //use as-is\n            }\n        }\n        return logCeil;\n    }\n    /**\n     * Rescales the axis to ensure that all data is visible.\n     */\n    public void autoAdjustRange() {\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data.\n        }\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n            double lower;\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                   //no real data present\n                r = new Range(DEFAULT_LOWER_BOUND, DEFAULT_UPPER_BOUND);\n                lower = r.getLowerBound();    //get lower bound value\n            }\n            else {\n                //actual data is present\n                lower = r.getLowerBound();    //get lower bound value\n                if (this.strictValuesFlag\n                        && !this.allowNegativesFlag && lower <= 0.0) {\n                    //strict flag set, allow-negatives not set and values <= 0\n                    throw new RuntimeException(\n                        \"Values less than or equal to \"\n                        + \"zero not allowed with logarithmic axis\"\n                    );\n                }\n            }\n            //apply lower margin by decreasing lower bound:\n            final double lowerMargin;\n            if (lower > 0.0 && (lowerMargin=getLowerMargin()) > 0.0) {\n                   //lower bound and margin OK; get log10 of lower bound\n              final double logLower = (Math.log(lower) / LOG10_VALUE);\n              double logAbs;      //get absolute value of log10 value\n              if((logAbs=Math.abs(logLower)) < 1.0) {\n                logAbs = 1.0;     //if less than 1.0 then make it 1.0\n              }              //subtract out margin and get exponential value:\n              lower = Math.pow(10, (logLower - (logAbs * lowerMargin)));\n            }\n            //if flag then change to log version of lowest value\n            // to make range begin at a 10^n value:\n           if (this.autoRangeNextLogFlag) {\n               lower = computeLogFloor(lower);\n           }\n            if (!this.allowNegativesFlag && lower >= 0.0\n                    && lower < SMALL_LOG_VALUE) {\n                //negatives not allowed and lower range bound is zero\n                lower = r.getLowerBound();    //use data range bound instead\n            }\n            double upper = r.getUpperBound();\n             //apply upper margin by increasing upper bound:\n            final double upperMargin;\n            if (upper > 0.0 && (upperMargin=getUpperMargin()) > 0.0) {\n                   //upper bound and margin OK; get log10 of upper bound\n              final double logUpper = (Math.log(upper) / LOG10_VALUE);\n              double logAbs;      //get absolute value of log10 value\n              if((logAbs=Math.abs(logUpper)) < 1.0) {\n                logAbs = 1.0;     //if less than 1.0 then make it 1.0\n              }              //add in margin and get exponential value:\n              upper = Math.pow(10, (logUpper + (logAbs * upperMargin)));\n            }\n            if (!this.allowNegativesFlag && upper < 1.0 && upper > 0.0\n                    && lower > 0.0) {\n                //negatives not allowed and upper bound between 0 & 1\n                //round up to nearest significant digit for bound:\n                //get negative exponent:\n                double expVal = Math.log(upper) / LOG10_VALUE;\n                expVal = Math.ceil(-expVal + 0.001); //get positive exponent\n                expVal = Math.pow(10, expVal);      //create multiplier value\n                //multiply, round up, and divide for bound value:\n                upper = (expVal > 0.0) ? Math.ceil(upper * expVal) / expVal\n                    : Math.ceil(upper);\n            }\n            else {\n                //negatives allowed or upper bound not between 0 & 1\n                //if flag then change to log version of highest value to\n                // make range begin at a 10^n value; else use nearest int\n                upper = (this.autoRangeNextLogFlag) ? computeLogCeil(upper)\n                    : Math.ceil(upper);\n            }\n            // ensure the autorange is at least <minRange> in size...\n            double minRange = getAutoRangeMinimumSize();\n            if (upper - lower < minRange) {\n                upper = (upper + lower + minRange) / 2;\n                lower = (upper + lower - minRange) / 2;\n                //if autorange still below minimum then adjust by 1%\n                // (can be needed when minRange is very small):\n                if (upper - lower < minRange) {\n                    double absUpper = Math.abs(upper);\n                    //need to account for case where upper==0.0\n                    double adjVal = (absUpper > SMALL_LOG_VALUE) ? absUpper\n                        / 100.0 : 0.01;\n                    upper = (upper + lower + adjVal) / 2;\n                    lower = (upper + lower - adjVal) / 2;\n                }\n            }\n            setRange(new Range(lower, upper), false, false);\n            setupSmallLogFlag();       //setup flag based on bounds values\n        }\n    }\n    /**\n     * Converts a data value to a coordinate in Java2D space, assuming that\n     * the axis runs along one edge of the specified plotArea.\n     * Note that it is possible for the coordinate to fall outside the\n     * plotArea.\n     *\n     * @param value  the data value.\n     * @param plotArea  the area for plotting the data.\n     * @param edge  the axis location.\n     *\n     * @return The Java2D coordinate.\n     */\n    public double valueToJava2D(double value, Rectangle2D plotArea,\n                                RectangleEdge edge) {\n        Range range = getRange();\n        double axisMin = switchedLog10(range.getLowerBound());\n        double axisMax = switchedLog10(range.getUpperBound());\n        double min = 0.0;\n        double max = 0.0;\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            min = plotArea.getMinX();\n            max = plotArea.getMaxX();\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            min = plotArea.getMaxY();\n            max = plotArea.getMinY();\n        }\n        value = switchedLog10(value);\n        if (isInverted()) {\n            return max\n                - (((value - axisMin) / (axisMax - axisMin)) * (max - min));\n        }\n        else {\n            return min\n                + (((value - axisMin) / (axisMax - axisMin)) * (max - min));\n        }\n    }\n    /**\n     * Converts a coordinate in Java2D space to the corresponding data\n     * value, assuming that the axis runs along one edge of the specified\n     * plotArea.\n     *\n     * @param java2DValue  the coordinate in Java2D space.\n     * @param plotArea  the area in which the data is plotted.\n     * @param edge  the axis location.\n     *\n     * @return The data value.\n     */\n    public double java2DToValue(double java2DValue, Rectangle2D plotArea,\n                                RectangleEdge edge) {\n        Range range = getRange();\n        double axisMin = switchedLog10(range.getLowerBound());\n        double axisMax = switchedLog10(range.getUpperBound());\n        double plotMin = 0.0;\n        double plotMax = 0.0;\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            plotMin = plotArea.getX();\n            plotMax = plotArea.getMaxX();\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            plotMin = plotArea.getMaxY();\n            plotMax = plotArea.getMinY();\n        }\n        if (isInverted()) {\n            return Math.pow(\n                10, axisMax - ((java2DValue - plotMin) / (plotMax - plotMin))\n                * (axisMax - axisMin)\n            );\n        }\n        else {\n            return Math.pow(\n                10, axisMin + ((java2DValue - plotMin) / (plotMax - plotMin))\n                * (axisMax - axisMin)\n            );\n        }\n    }\n    /**\n     * Calculates the positions of the tick labels for the axis, storing the\n     * results in the tick label list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the plot should be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return A list of ticks.\n     */\n    protected List refreshTicksHorizontal(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          RectangleEdge edge) {\n        List ticks = new java.util.ArrayList();\n        Range range = getRange();\n        //get lower bound value:\n        double lowerBoundVal = range.getLowerBound();\n              //if small log values and lower bound value too small\n              // then set to a small value (don't allow <= 0):\n        if (this.smallLogFlag && lowerBoundVal < SMALL_LOG_VALUE) {\n            lowerBoundVal = SMALL_LOG_VALUE;\n        }\n        //get upper bound value\n        double upperBoundVal = range.getUpperBound();\n        //get log10 version of lower bound and round to integer:\n        int iBegCount = (int) Math.rint(switchedLog10(lowerBoundVal));\n        //get log10 version of upper bound and round to integer:\n        int iEndCount = (int) Math.rint(switchedLog10(upperBoundVal));\n        if (iBegCount == iEndCount && iBegCount > 0\n                && Math.pow(10, iBegCount) > lowerBoundVal) {\n              //only 1 power of 10 value, it's > 0 and its resulting\n              // tick value will be larger than lower bound of data\n          --iBegCount;       //decrement to generate more ticks\n        }\n        double currentTickValue;\n        String tickLabel;\n        boolean zeroTickFlag = false;\n        for (int i = iBegCount; i <= iEndCount; i++) {\n            //for each power of 10 value; create ten ticks\n            for (int j = 0; j < 10; ++j) {\n                //for each tick to be displayed\n                if (this.smallLogFlag) {\n                    //small log values in use; create numeric value for tick\n                    currentTickValue = Math.pow(10, i) + (Math.pow(10, i) * j);\n                    if (this.expTickLabelsFlag\n                        || (i < 0 && currentTickValue > 0.0\n                        && currentTickValue < 1.0)) {\n                        //showing \"1e#\"-style ticks or negative exponent\n                        // generating tick value between 0 & 1; show fewer\n                        if (j == 0 || (i > -4 && j < 2)\n                                   || currentTickValue >= upperBoundVal) {\n                          //first tick of series, or not too small a value and\n                          // one of first 3 ticks, or last tick to be displayed\n                            // set exact number of fractional digits to be shown\n                            // (no effect if showing \"1e#\"-style ticks):\n                            this.numberFormatterObj\n                                .setMaximumFractionDigits(-i);\n                               //create tick label (force use of fmt obj):\n                            tickLabel = makeTickLabel(currentTickValue, true);\n                        }\n                        else {    //no tick label to be shown\n                            tickLabel = \"\";\n                        }\n                    }\n                    else {     //tick value not between 0 & 1\n                               //show tick label if it's the first or last in\n                               // the set, or if it's 1-5; beyond that show\n                               // fewer as the values get larger:\n                        tickLabel = (j < 1 || (i < 1 && j < 5) || (j < 4 - i)\n                                         || currentTickValue >= upperBoundVal)\n                                         ? makeTickLabel(currentTickValue) : \"\";\n                    }\n                }\n                else { //not small log values in use; allow for values <= 0\n                    if (zeroTickFlag) {   //if did zero tick last iter then\n                        --j;              //decrement to do 1.0 tick now\n                    }     //calculate power-of-ten value for tick:\n                    currentTickValue = (i >= 0)\n                        ? Math.pow(10, i) + (Math.pow(10, i) * j)\n                        : -(Math.pow(10, -i) - (Math.pow(10, -i - 1) * j));\n                    if (!zeroTickFlag) {  // did not do zero tick last iteration\n                        if (Math.abs(currentTickValue - 1.0) < 0.0001\n                            && lowerBoundVal <= 0.0 && upperBoundVal >= 0.0) {\n                            //tick value is 1.0 and 0.0 is within data range\n                            currentTickValue = 0.0;     //set tick value to zero\n                            zeroTickFlag = true;        //indicate zero tick\n                        }\n                    }\n                    else {     //did zero tick last iteration\n                        zeroTickFlag = false;         //clear flag\n                    }               //create tick label string:\n                               //show tick label if \"1e#\"-style and it's one\n                               // of the first two, if it's the first or last\n                               // in the set, or if it's 1-5; beyond that\n                               // show fewer as the values get larger:\n                    tickLabel = ((this.expTickLabelsFlag && j < 2)\n                                || j < 1\n                                || (i < 1 && j < 5) || (j < 4 - i)\n                                || currentTickValue >= upperBoundVal)\n                                   ? makeTickLabel(currentTickValue) : \"\";\n                }\n                if (currentTickValue > upperBoundVal) {\n                    return ticks;   // if past highest data value then exit\n                                    // method\n                }\n                if (currentTickValue >= lowerBoundVal - SMALL_LOG_VALUE) {\n                    //tick value not below lowest data value\n                    TextAnchor anchor = null;\n                    TextAnchor rotationAnchor = null;\n                    double angle = 0.0;\n                    if (isVerticalTickLabels()) {\n                        anchor = TextAnchor.CENTER_RIGHT;\n                        rotationAnchor = TextAnchor.CENTER_RIGHT;\n                        if (edge == RectangleEdge.TOP) {\n                            angle = Math.PI / 2.0;\n                        }\n                        else {\n                            angle = -Math.PI / 2.0;\n                        }\n                    }\n                    else {\n                        if (edge == RectangleEdge.TOP) {\n                            anchor = TextAnchor.BOTTOM_CENTER;\n                            rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                        }\n                        else {\n                            anchor = TextAnchor.TOP_CENTER;\n                            rotationAnchor = TextAnchor.TOP_CENTER;\n                        }\n                    }\n                    Tick tick = new NumberTick(\n                        new Double(currentTickValue), tickLabel, anchor,\n                        rotationAnchor, angle\n                    );\n                    ticks.add(tick);\n                }\n            }\n        }\n        return ticks;\n    }\n    /**\n     * Calculates the positions of the tick labels for the axis, storing the\n     * results in the tick label list (ready for drawing).\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area in which the plot should be drawn.\n     * @param edge  the location of the axis.\n     *\n     * @return A list of ticks.\n     */\n    protected List refreshTicksVertical(Graphics2D g2, \n                                        Rectangle2D dataArea,\n                                        RectangleEdge edge) {\n        List ticks = new java.util.ArrayList();\n        //get lower bound value:\n        double lowerBoundVal = getRange().getLowerBound();\n        //if small log values and lower bound value too small\n        // then set to a small value (don't allow <= 0):\n        if (this.smallLogFlag && lowerBoundVal < SMALL_LOG_VALUE) {\n            lowerBoundVal = SMALL_LOG_VALUE;\n        }\n        //get upper bound value\n        double upperBoundVal = getRange().getUpperBound();\n        //get log10 version of lower bound and round to integer:\n        int iBegCount = (int) Math.rint(switchedLog10(lowerBoundVal));\n        //get log10 version of upper bound and round to integer:\n        int iEndCount = (int) Math.rint(switchedLog10(upperBoundVal));\n        if (iBegCount == iEndCount && iBegCount > 0\n                && Math.pow(10, iBegCount) > lowerBoundVal) {\n              //only 1 power of 10 value, it's > 0 and its resulting\n              // tick value will be larger than lower bound of data\n          --iBegCount;       //decrement to generate more ticks\n        }\n        double tickVal;\n        String tickLabel;\n        boolean zeroTickFlag = false;\n        for (int i = iBegCount; i <= iEndCount; i++) {\n            //for each tick with a label to be displayed\n            int jEndCount = 10;\n            if (i == iEndCount) {\n                jEndCount = 1;\n            }\n            for (int j = 0; j < jEndCount; j++) {\n                //for each tick to be displayed\n                if (this.smallLogFlag) {\n                    //small log values in use\n                    tickVal = Math.pow(10, i) + (Math.pow(10, i) * j);\n                    if (j == 0) {\n                        //first tick of group; create label text\n                        if (this.log10TickLabelsFlag) {\n                            //if flag then\n                            tickLabel = \"10^\" + i;   //create \"log10\"-type label\n                        }\n                        else {    //not \"log10\"-type label\n                            if (this.expTickLabelsFlag) {\n                                //if flag then\n                                tickLabel = \"1e\" + i;  //create \"1e#\"-type label\n                            }\n                            else {    //not \"1e#\"-type label\n                                if (i >= 0) {   // if positive exponent then\n                                                // make integer\n                                    NumberFormat format\n                                        = getNumberFormatOverride();\n                                    if (format != null) {\n                                        tickLabel = format.format(tickVal);\n                                    }\n                                    else {\n                                        tickLabel = Long.toString((long)\n                                                Math.rint(tickVal));\n                                    }\n                                }\n                                else {\n                                    //negative exponent; create fractional value\n                                    //set exact number of fractional digits to\n                                    // be shown:\n                                    this.numberFormatterObj\n                                        .setMaximumFractionDigits(-i);\n                                    //create tick label:\n                                    tickLabel = this.numberFormatterObj.format(\n                                        tickVal\n                                    );\n                                }\n                            }\n                        }\n                    }\n                    else {   //not first tick to be displayed\n                        tickLabel = \"\";     //no tick label\n                    }\n                }\n                else { //not small log values in use; allow for values <= 0\n                    if (zeroTickFlag) {      //if did zero tick last iter then\n                        --j;\n                    }               //decrement to do 1.0 tick now\n                    tickVal = (i >= 0) ? Math.pow(10, i) + (Math.pow(10, i) * j)\n                             : -(Math.pow(10, -i) - (Math.pow(10, -i - 1) * j));\n                    if (j == 0) {  //first tick of group\n                        if (!zeroTickFlag) {     // did not do zero tick last\n                                                 // iteration\n                            if (i > iBegCount && i < iEndCount\n                                    && Math.abs(tickVal - 1.0) < 0.0001) {\n                                // not first or last tick on graph and value\n                                // is 1.0\n                                tickVal = 0.0;        //change value to 0.0\n                                zeroTickFlag = true;  //indicate zero tick\n                                tickLabel = \"0\";      //create label for tick\n                            }\n                            else {\n                                //first or last tick on graph or value is 1.0\n                                //create label for tick:\n                                if (this.log10TickLabelsFlag) {\n                                       //create \"log10\"-type label\n                                    tickLabel = (((i < 0) ? \"-\" : \"\")\n", "answers": ["                                            + \"10^\" + Math.abs(i));"], "length": 4434, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "64bac47b1e1bb0e0c8c9689439872cd09890eb9060b9d0cb"}
{"input": "", "context": "package com.dotcms.enterprise.publishing.remote.bundler;\nimport com.dotcms.contenttype.model.field.Field;\nimport com.dotcms.contenttype.model.field.ImageField;\nimport com.dotcms.contenttype.model.type.ContentType;\nimport com.dotcms.contenttype.transform.contenttype.StructureTransformer;\nimport com.dotcms.datagen.*;\nimport com.dotcms.publisher.assets.bean.PushedAsset;\nimport com.dotcms.publisher.bundle.bean.Bundle;\nimport com.dotcms.publisher.bundle.business.BundleFactoryImpl;\nimport com.dotcms.publisher.endpoint.bean.impl.PushPublishingEndPoint;\nimport com.dotcms.publisher.environment.bean.Environment;\nimport com.dotcms.publisher.pusher.PushPublisherConfig;\nimport com.dotcms.publishing.*;\nimport com.dotcms.publishing.PublisherConfig.Operation;\nimport com.dotcms.publishing.manifest.CSVManifestBuilder;\nimport com.dotcms.publishing.manifest.ManifestBuilder;\nimport com.dotcms.publishing.manifest.ManifestItem;\nimport com.dotcms.publishing.output.BundleOutput;\nimport com.dotcms.publishing.output.DirectoryBundleOutput;\nimport com.dotcms.util.IntegrationTestInitService;\nimport com.dotmarketing.beans.Host;\nimport com.dotmarketing.business.APILocator;\nimport com.dotmarketing.business.CacheLocator;\nimport com.dotmarketing.exception.DotDataException;\nimport com.dotmarketing.exception.DotRuntimeException;\nimport com.dotmarketing.exception.DotSecurityException;\nimport com.dotmarketing.image.focalpoint.FocalPointAPITest;\nimport com.dotmarketing.portlets.categories.model.Category;\nimport com.dotmarketing.portlets.containers.model.Container;\nimport com.dotmarketing.portlets.contentlet.model.Contentlet;\nimport com.dotmarketing.portlets.contentlet.model.IndexPolicy;\nimport com.dotmarketing.portlets.folders.model.Folder;\nimport com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\nimport com.dotmarketing.portlets.languagesmanager.business.LanguageDataGen;\nimport com.dotmarketing.portlets.languagesmanager.model.Language;\nimport com.dotmarketing.portlets.links.model.Link;\nimport com.dotmarketing.portlets.rules.RuleDataGen;\nimport com.dotmarketing.portlets.rules.model.Rule;\nimport com.dotmarketing.portlets.structure.model.Relationship;\nimport com.dotmarketing.portlets.structure.model.Structure;\nimport com.dotmarketing.portlets.templates.design.bean.TemplateLayout;\nimport com.dotmarketing.portlets.templates.model.Template;\nimport com.dotmarketing.portlets.workflows.model.WorkflowAction;\nimport com.dotmarketing.portlets.workflows.model.WorkflowScheme;\nimport com.dotmarketing.portlets.workflows.model.WorkflowStep;\nimport com.dotmarketing.util.Config;\nimport com.tngtech.java.junit.dataprovider.DataProvider;\nimport com.tngtech.java.junit.dataprovider.DataProviderRunner;\nimport com.tngtech.java.junit.dataprovider.UseDataProvider;\nimport io.vavr.collection.Stream;\nimport java.io.File;\nimport java.io.Serializable;\nimport java.net.URL;\nimport java.util.stream.Collectors;\nimport org.apache.commons.io.FileUtils;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport java.io.IOException;\nimport java.util.*;\nimport static com.dotcms.publishing.PublisherAPIImplTest.getLanguageVariables;\nimport static com.dotcms.publishing.PublisherAPIImplTest.getLanguagesVariableDependencies;\nimport static com.dotcms.util.CollectionsUtils.*;\nimport static java.util.stream.Collectors.*;\nimport static org.jgroups.util.Util.assertEquals;\nimport static org.jgroups.util.Util.assertTrue;\nimport static org.mockito.Mockito.mock;\n@RunWith(DataProviderRunner.class)\npublic class DependencyBundlerTest {\n    private static  Map<String, List<ManifestItem>> excludeSystemFolder;\n    private static  Map<String, List<ManifestItem>> excludeSystemFolderAndSystemHost;\n    public static final String EXCLUDE_SYSTEM_FOLDER_HOST = \"Excluded System Folder/Host\";\n    private static String FILTER_EXCLUDE_REASON = \"Excluded by filter\";\n    private static String FILTER_EXCLUDE_BY_OPERATION = \"Excluded by Operation: \";\n    private BundlerStatus status = null;\n    private DependencyBundler bundler = null;\n    private static FilterDescriptor filterDescriptorAllDependencies;\n    private static FilterDescriptor filterDescriptorNotDependencies;\n    private static FilterDescriptor filterDescriptorNotRelationship;\n    private static FilterDescriptor filterDescriptorNotDependenciesRelationship;\n    public static void prepare() throws Exception {\n        //Setting web app environment\n        IntegrationTestInitService.getInstance().init();\n        excludeSystemFolder = map(EXCLUDE_SYSTEM_FOLDER_HOST,\n                list(APILocator.getFolderAPI().findSystemFolder()));\n        excludeSystemFolderAndSystemHost = map(\n                EXCLUDE_SYSTEM_FOLDER_HOST, list(APILocator.getFolderAPI().findSystemFolder(),\n                        APILocator.getHostAPI().findSystemHost()));\n        filterDescriptorAllDependencies = new FilterDescriptorDataGen().next();\n        filterDescriptorNotDependencies = new FilterDescriptorDataGen()\n                .dependencies(false)\n                .next();\n        filterDescriptorNotRelationship = new FilterDescriptorDataGen()\n                .relationships(false)\n                .next();\n        filterDescriptorNotDependenciesRelationship = new FilterDescriptorDataGen()\n                .relationships(false)\n                .dependencies(false)\n                .next();\n    }\n    @Before\n    public void initTest() throws IOException {\n        status = mock(BundlerStatus.class);\n        bundler = new DependencyBundler();\n    }\n    @DataProvider(format = \"%m: %p[0]\")\n    public static Object[] assets() throws Exception {\n        prepare();\n        final ArrayList<Object> all = new ArrayList<>();\n        all.addAll(createContentTypeTestCase());\n        all.addAll(createTemplatesTestCase());\n        all.addAll(createContainerTestCase());\n        all.addAll(createFolderTestCase());\n        all.addAll(createHostTestCase());\n        all.addAll(createLinkTestCase());\n        all.addAll(createWorkflowTestCase());\n        all.addAll(createLanguageTestCase());\n        all.addAll(createRuleTestCase());\n        all.addAll(createContentTestCase());\n        all.addAll(createContentTypeWithThirdPartyTestCase());\n        all.addAll(createTemplateWithThirdPartyTestCase());\n        all.addAll(createContainerWithThirdPartyTestCase());\n        all.addAll(createFolderWithThirdPartyTestCase());\n        all.addAll(createLinkWithThirdPartyTestCase());\n        all.addAll(createRuleWithThirdPartyTestCase());\n        all.addAll(createContentletWithThirdPartyTestCase());\n        return all.toArray();\n    }\n    private static Collection<TestData> createContentletWithThirdPartyTestCase()\n            throws DotDataException, DotSecurityException {\n        final Host host = createHostWithDependencies();\n        final Language language = new LanguageDataGen().nextPersisted();\n        final TestData contentTypeWithDependencies = createContentTypeWithDependencies();\n        final ContentType contentType = (ContentType) contentTypeWithDependencies.assetsToAddInBundle;\n        final List<Relationship> relationships = APILocator.getRelationshipAPI().byContentType(contentType);\n        final Relationship relationship = relationships.get(0);\n        final ContentType contentTypeChild = new StructureTransformer(relationship.getChildStructure()).from();\n        final Contentlet contentletChild =  new ContentletDataGen(contentTypeChild.id())\n                .languageId(language.getId())\n                .host(host)\n                .nextPersisted();\n        final Contentlet content = new ContentletDataGen(contentType.id())\n                .languageId(language.getId())\n                .host(host)\n                .setProperty(contentType.variable(), list(contentletChild))\n                .nextPersisted();\n        final Map<ManifestItem, Collection<ManifestItem>> dependencies = map(\n                content, list(host, language, contentType, relationship),\n                contentletChild, list(language, contentTypeChild)\n        );\n        dependencies.putAll(contentTypeWithDependencies.dependenciesToAssert);\n        dependencies.get(relationship).add(contentletChild);\n        dependencies.get(relationship).add(contentType);\n        dependencies.get(relationship).add(contentTypeChild);\n        final TestData folderWithDependencies = createFolderWithDependencies();\n        final Folder folder = (Folder) folderWithDependencies.assetsToAddInBundle ;\n        final TestData contentTypeWithDependenciesWithFolder = createContentTypeWithDependencies();\n        final ContentType contentTypeWithFolder = (ContentType) contentTypeWithDependenciesWithFolder.assetsToAddInBundle;\n        final Contentlet contentWithFolder = new ContentletDataGen(contentTypeWithFolder.id())\n                .languageId(language.getId())\n                .host(folder.getHost())\n                .folder(folder)\n                .nextPersisted();\n        final List<Relationship> relationshipsWithFolder = APILocator.getRelationshipAPI().byContentType(contentTypeWithFolder);\n        final Relationship relationshipWithFolder = relationshipsWithFolder.get(0);\n        final Map<ManifestItem, Collection<ManifestItem>> dependenciesWithFolder = map(\n                contentWithFolder, list(folder, folder.getHost(), language, contentTypeWithFolder, relationshipWithFolder)\n        );\n        dependenciesWithFolder.putAll(contentTypeWithDependenciesWithFolder.dependenciesToAssert);\n        dependenciesWithFolder.get(relationshipWithFolder).add(contentTypeWithFolder);\n        return list(\n                new TestData(content, dependencies, excludeSystemFolder, filterDescriptorAllDependencies, \"Content with Third Party Dependencies\"),\n                new TestData(contentWithFolder, dependenciesWithFolder, excludeSystemFolder, filterDescriptorAllDependencies, \"Content with folder and Third Party Dependencies\")\n        );\n    }\n    private static Collection<TestData> createRuleWithThirdPartyTestCase()\n            throws DotDataException, DotSecurityException {\n        final Host host = createHostWithDependencies();\n        final Rule rule = new RuleDataGen().host(host).nextPersisted();\n        final TestData htmlPageWithDependencies = createHTMLPageWithDependencies();\n        final HTMLPageAsset htmlPageAsset = (HTMLPageAsset) htmlPageWithDependencies.assetsToAddInBundle;\n        final Rule ruleWithPage = new RuleDataGen().page(htmlPageAsset).nextPersisted();\n        return list(\n                new TestData(rule, map(rule, list(rule, host)), map(), filterDescriptorAllDependencies, \"Rule with third party\"),\n                new TestData(ruleWithPage, map(ruleWithPage, list(htmlPageAsset)), map(), filterDescriptorAllDependencies, \"Rule with page and third party\")\n        );\n    }\n    private static Collection<TestData> createLinkWithThirdPartyTestCase()\n            throws DotDataException, DotSecurityException {\n        final Host host = createHostWithDependencies();\n        final TestData folderWithDependencies = createFolderWithDependencies(host);\n        final Folder folder = (Folder) folderWithDependencies.assetsToAddInBundle;\n        final Link link = new LinkDataGen(folder)\n                .hostId(host.getIdentifier())\n                .nextPersisted();\n        final Map<ManifestItem, Collection<ManifestItem>> dependencies = map(link, list(host, folder));\n        return list(\n                new TestData(link, dependencies, map(), filterDescriptorAllDependencies, \"Link with third Party\")\n        );\n    }\n    private static Collection<TestData> createFolderWithThirdPartyTestCase()\n            throws DotDataException, DotSecurityException {\n        final Host host = createHostWithDependencies();\n        final TestData parentFolderDependencies = createFolderWithDependencies(host);\n        final Folder parentFolder = (Folder) parentFolderDependencies.assetsToAddInBundle;\n        final Folder folder = new FolderDataGen()\n                .site(host)\n                .parent(parentFolder)\n                .nextPersisted();\n        final TestData contentTypeWithDependencies = createContentTypeWithDependencies(folder);\n        final ContentType contentType = (ContentType) contentTypeWithDependencies.assetsToAddInBundle;\n        final TestData subFolderWithDependencies = createFolderWithDependencies(folder);\n        final Folder subFolder = (Folder) subFolderWithDependencies.assetsToAddInBundle;\n        final Structure folderStructure = CacheLocator.getContentTypeCache()\n                .getStructureByInode(folder.getDefaultFileType());\n        final ContentType folderContentType = new StructureTransformer(folderStructure).from();\n        final Map<ManifestItem, Collection<ManifestItem>> dependencies = map(\n                folder, list(host, folderContentType, contentType, subFolder, parentFolder));\n        dependencies.putAll(contentTypeWithDependencies.dependenciesToAssert);\n        dependencies.putAll(subFolderWithDependencies.dependenciesToAssert);\n        return list(\n                new TestData(folder, dependencies, excludeSystemFolderAndSystemHost, filterDescriptorAllDependencies, \"Folder with third party\")\n        );\n    }\n    private static TestData createHTMLPageWithDependencies() throws DotDataException {\n        final Language defaultLanguage = APILocator.getLanguageAPI().getDefaultLanguage();\n        final Host host = new SiteDataGen().nextPersisted();\n        final ContentType contentTypeToPage = new ContentTypeDataGen().host(host).nextPersisted();\n        final Container container = new ContainerDataGen().withContentType(contentTypeToPage, \"\").nextPersisted();\n        final TemplateLayout templateLayout = new TemplateLayoutDataGen().withContainer(container).next();\n        final Template template = new TemplateDataGen().drawedBody(templateLayout).nextPersisted();\n        final Contentlet htmlPageAsset = new HTMLPageDataGen(host, template).host(host).languageId(defaultLanguage.getId()).nextPersisted();\n        final ContentType htmlPageAssetContentType = htmlPageAsset.getContentType();\n        return new TestData(htmlPageAsset, map(\n                htmlPageAsset, list(defaultLanguage, host, template, htmlPageAssetContentType),\n                template, list(container),\n                container, list(contentTypeToPage)\n            ), null, \"Page with dependencies\");\n    }\n    private static Collection<TestData> createContainerWithThirdPartyTestCase()\n            throws DotDataException, DotSecurityException {\n        final Host host = createHostWithDependencies();\n        final TestData contentTypeWithDependencies = createContentTypeWithDependencies();\n        final ContentType contentType = (ContentType) contentTypeWithDependencies.assetsToAddInBundle;\n        final Container containerWithContentType = new ContainerDataGen()\n                .site(host)\n                .withContentType(contentType, \"\")\n                .nextPersisted();\n        final Map<ManifestItem, Collection<ManifestItem>> dependencies =\n                map(containerWithContentType, list(host, contentType));\n        dependencies.putAll(contentTypeWithDependencies.dependenciesToAssert);\n        return list(\n                new TestData(containerWithContentType, dependencies, excludeSystemFolder, filterDescriptorAllDependencies, \"Container with Third party dependencies\")\n        );\n    }\n    private static Collection<TestData> createTemplateWithThirdPartyTestCase()\n            throws DotDataException, DotSecurityException {\n        final Host host = createHostWithDependencies();\n        final TestData contentTypeWithDependencies = createContentTypeWithDependencies();\n        final ContentType contentType = (ContentType) contentTypeWithDependencies.assetsToAddInBundle;\n        final Container container = new ContainerDataGen()\n                .site(host)\n                .withContentType(contentType, \"\")\n                .nextPersisted();\n        final TemplateLayout templateLayout = new TemplateLayoutDataGen()\n                .withContainer(container)\n                .next();\n        final Template template = new TemplateDataGen()\n                .host(host)\n                .drawedBody(templateLayout)\n                .nextPersisted();\n        final Map<ManifestItem, Collection<ManifestItem>> templateIncludes = map(\n                template, list(host, container),\n                container, list(contentType)\n        );\n        templateIncludes.putAll(contentTypeWithDependencies.dependenciesToAssert);\n        return list(\n                new TestData(template, templateIncludes, excludeSystemFolder, filterDescriptorAllDependencies, \"Template with third party dependencies\")\n        );\n    }\n    private static Collection<TestData> createContentTypeWithThirdPartyTestCase()\n            throws DotDataException, DotSecurityException {\n        final Host host = createHostWithDependencies();\n        final ContentType contentType = new ContentTypeDataGen()\n                .host(host)\n                .nextPersisted();\n        final Folder contentTypeFolder = (Folder) createFolderWithDependencies().assetsToAddInBundle;\n        final Host folderHost = contentTypeFolder.getHost();\n        final ContentType contentTypeWithFolder = new ContentTypeDataGen()\n                .folder(contentTypeFolder)\n                .nextPersisted();\n        final WorkflowScheme systemWorkflowScheme = APILocator.getWorkflowAPI().findSystemWorkflowScheme();\n        return list(\n                new TestData(contentType, map(contentType, list(host, systemWorkflowScheme)), excludeSystemFolder,\n                        filterDescriptorAllDependencies, \"Content Type with third party dependencies\"),\n                new TestData(contentTypeWithFolder, map(\n                        contentTypeWithFolder, list(folderHost, contentTypeFolder, systemWorkflowScheme)\n                    ), map(), filterDescriptorAllDependencies, \"Content Type with folder and third party dependencies\")\n        );\n    }\n    private static TestData createFolderWithDependencies() throws DotDataException, DotSecurityException {\n        final Host host = new SiteDataGen().nextPersisted();\n        final Folder parentFolder = new FolderDataGen().site(host).nextPersisted();\n        return createFolderWithDependencies(parentFolder);\n    }\n    private static TestData createFolderWithDependencies(final Host host) throws DotDataException, DotSecurityException {\n        final Folder parentFolder = new FolderDataGen().site(host).nextPersisted();\n        return createFolderWithDependencies(parentFolder);\n    }\n    private static TestData createFolderWithDependencies(final Folder parentFolder)\n            throws DotDataException, DotSecurityException {\n        final Host host = parentFolder.getHost();\n        final Folder folder = new FolderDataGen()\n                .site(host)\n                .parent(parentFolder)\n                .nextPersisted();\n        final ContentType contentType = new ContentTypeDataGen()\n                .folder(folder)\n                .nextPersisted();\n        final File image = new File(Thread.currentThread().getContextClassLoader().getResource(\"images/test.jpg\").getFile());\n        final Contentlet contentlet = new FileAssetDataGen(folder, image)\n                .host(host)\n                .setProperty(\"title\", \"contentletTitle\")\n                .setProperty(\"fileName\", \"contentletfileName\")\n                .nextPersisted();\n        final Language language = APILocator.getLanguageAPI().getLanguage(contentlet.getLanguageId());\n        final Link link = new LinkDataGen(folder).nextPersisted();\n        final Folder subFolder = new FolderDataGen()\n                .site(host)\n                .parent(folder)\n                .nextPersisted();\n        final Contentlet contentlet_2 = new FileAssetDataGen(subFolder, image)\n                .setProperty(\"title\", \"contentlet_2Title\")\n                .setProperty(\"fileName\", \"contentlet_2fileName\")\n                .host(host)\n                .nextPersisted();\n        final Structure folderStructure = CacheLocator.getContentTypeCache()\n                .getStructureByInode(folder.getDefaultFileType());\n        final ContentType folderContentType = new StructureTransformer(folderStructure).from();\n        final WorkflowScheme systemWorkflowScheme = APILocator.getWorkflowAPI().findSystemWorkflowScheme();\n        return new TestData(folder, map(\n                folder, list(host, parentFolder, contentType, contentlet, link, subFolder),\n                contentlet, list(language),\n                subFolder, list(contentlet_2, folderContentType),\n                contentType, list(systemWorkflowScheme),\n                folderContentType, list(systemWorkflowScheme)\n        ), null, \"Folder with third dependencies\");\n    }\n    private static TestData createContentTypeWithDependencies() throws DotDataException, DotSecurityException {\n        return createContentTypeWithDependencies(null);\n    }\n    private static TestData createContentTypeWithDependencies(Folder folder) throws DotDataException, DotSecurityException {\n        final Host host = folder != null ? folder.getHost() : new SiteDataGen().nextPersisted();\n        final WorkflowScheme workflowScheme = APILocator.getWorkflowAPI().findSystemWorkflowScheme();\n        final Category category = new CategoryDataGen().nextPersisted();\n        ContentType contentType = null;\n        final ContentTypeDataGen contentTypeDataGen = new ContentTypeDataGen()\n                .workflowId(workflowScheme.getId())\n                .addCategory(category);\n        if (folder == null) {\n            contentType = contentTypeDataGen.host(host).nextPersisted();\n        } else {\n            contentType = contentTypeDataGen.folder(folder).nextPersisted();\n        }\n        final ContentType contentTypeChild =  new ContentTypeDataGen()\n                .host(host)\n                .nextPersisted();\n        final Relationship relationship = new FieldRelationshipDataGen()\n                .child(contentTypeChild)\n                .parent(contentType)\n                .nextPersisted();\n        final WorkflowScheme systemWorkflowScheme = APILocator.getWorkflowAPI().findSystemWorkflowScheme();\n        return new TestData(contentType, map(\n                contentType, list(host, workflowScheme, category, systemWorkflowScheme, relationship),\n                contentTypeChild, list(host, systemWorkflowScheme),\n                relationship, list(contentTypeChild)\n        ), null, \"Content Type with dependencies\");\n    }\n    private static Host createHostWithDependencies(){\n        final Host host = new SiteDataGen().nextPersisted();\n        new FolderDataGen().site(host).nextPersisted();\n        final ContentType anotherContentType = new ContentTypeDataGen().host(host).nextPersisted();\n        new ContentletDataGen(anotherContentType.id()).host(host).nextPersisted();\n        new RuleDataGen().host(host).nextPersisted();\n        return host;\n    }\n    private static Collection<TestData> createContentTestCase()\n            throws DotDataException, DotSecurityException, IOException {\n        final Host host = new SiteDataGen().nextPersisted();\n        final Language language = new LanguageDataGen().nextPersisted();\n        final ContentType contentType = new ContentTypeDataGen().host(host).nextPersisted();\n        final Contentlet contentlet = new ContentletDataGen(contentType.id())\n                .languageId(language.getId())\n                .host(host)\n                .nextPersisted();\n        final Folder folder = new FolderDataGen().site(host).nextPersisted();\n        final Contentlet contentletWithFolder = new ContentletDataGen(contentType.id())\n                .languageId(language.getId())\n                .host(host)\n                .folder(folder)\n                .nextPersisted();\n        final ContentType contentTypeParent =  new ContentTypeDataGen()\n                .host(host)\n                .nextPersisted();\n        final ContentType contentTypeChild =  new ContentTypeDataGen()\n                .host(host)\n                .nextPersisted();\n        final Relationship relationship = new FieldRelationshipDataGen()\n                .child(contentTypeChild)\n                .parent(contentTypeParent)\n                .nextPersisted();\n        final Contentlet contentletChild =  new ContentletDataGen(contentTypeChild.id())\n                .setPolicy(IndexPolicy.WAIT_FOR)\n                .languageId(language.getId())\n                .host(host)\n                .nextPersisted();\n        final Contentlet contentletWithRelationship = new ContentletDataGen(contentTypeParent.id())\n                .setPolicy(IndexPolicy.WAIT_FOR)\n                .languageId(language.getId())\n                .host(host)\n                .setProperty(contentTypeParent.variable(), list(contentletChild))\n                .nextPersisted();\n        final Category category = new CategoryDataGen().nextPersisted();\n        final ContentType contentTypeWithCategory = new ContentTypeDataGen()\n                .addCategory(category)\n                .host(host)\n                .nextPersisted();\n        Contentlet contentWithCategory = new ContentletDataGen(contentTypeWithCategory.id())\n                .languageId(language.getId())\n                .host(host)\n                .next();\n        contentWithCategory = APILocator.getContentletAPI().checkin(contentWithCategory, APILocator.systemUser(), false,\n                list(category));\n        final Language defaultLanguage = APILocator.getLanguageAPI().getDefaultLanguage();\n        final Host defaultHost = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), false);\n        final ContentType contentTypeToPage = new ContentTypeDataGen().host(host).nextPersisted();\n        final Container container = new ContainerDataGen().withContentType(contentTypeToPage, \"\").nextPersisted();\n        final TemplateLayout templateLayout = new TemplateLayoutDataGen().withContainer(container).next();\n        final Template template = new TemplateDataGen().drawedBody(templateLayout).nextPersisted();\n        final Contentlet htmlPageAsset = new HTMLPageDataGen(host, template).host(host).languageId(defaultLanguage.getId()).nextPersisted();\n        final ContentType htmlPageAssetContentType = htmlPageAsset.getContentType();\n        final WorkflowScheme systemWorkflowScheme = APILocator.getWorkflowAPI().findSystemWorkflowScheme();\n        final Language imageFileLanguage = new LanguageDataGen().nextPersisted();\n        final Folder imageFolder = new FolderDataGen().site(host).nextPersisted();\n        File tempFile = File.createTempFile(\"contentWithImageBundleTest\", \".jpg\");\n        URL url = FocalPointAPITest.class.getResource(\"/images/test.jpg\");\n        File testImage = new File(url.getFile());\n        FileUtils.copyFile(testImage, tempFile);\n        final Contentlet imageFileAsset = new FileAssetDataGen(tempFile)\n                .host(host)\n                .languageId(imageFileLanguage.getId())\n                .folder(imageFolder).nextPersisted();\n        final Field imageField = new FieldDataGen().type(ImageField.class).next();\n        final ContentType contentTypeWithImageField = new ContentTypeDataGen().host(host).field(imageField).nextPersisted();\n        final Contentlet contentletWithImage = new ContentletDataGen(contentTypeWithImageField)\n                .host(host)\n                .setProperty(imageField.variable(), imageFileAsset.getIdentifier())\n                .languageId(language.getId())\n                .nextPersisted();\n        final Map<ManifestItem, Collection<ManifestItem>> contentletInclude = map(\n                contentlet, list(host, contentType, language),\n                contentType, list(systemWorkflowScheme)\n        );\n        final Map<ManifestItem, Collection<ManifestItem>> contentletWithFolderIncludes = map(\n                contentletWithFolder, list(host, contentType, language, folder),\n                contentType, list(systemWorkflowScheme)\n        );\n        final Map<ManifestItem, Collection<ManifestItem>> contentletWithRelationshipIncludes = map(\n                contentletWithRelationship, list(host, relationship, contentTypeParent, language),\n                relationship, list(contentTypeParent, contentTypeChild, contentletChild),\n                contentletChild, list(language, contentTypeChild),\n                contentTypeParent, list(systemWorkflowScheme),\n                contentTypeChild, list(systemWorkflowScheme)\n        );\n        final Map<ManifestItem, Collection<ManifestItem>> contentWithCategoryIncludes = map(\n                contentWithCategory, list(host, contentTypeWithCategory, language, category),\n                contentTypeWithCategory, list(systemWorkflowScheme, category)\n        );\n        final Map<ManifestItem, Collection<ManifestItem>> htmlPageAssetIncludes = map(\n                htmlPageAsset, list(host, defaultLanguage, template, htmlPageAssetContentType),\n                template, list(container, defaultHost),\n                contentTypeToPage, list(systemWorkflowScheme),\n                htmlPageAssetContentType, list(systemWorkflowScheme),\n                container, list(contentTypeToPage)\n        );\n        final Map<ManifestItem, Collection<ManifestItem>>  contentletWithImageIncludes = map(\n                contentletWithImage, list(host, contentTypeWithImageField, imageFileAsset, language),\n                imageFileAsset, list(imageFolder, imageFileLanguage, imageFileAsset.getContentType())\n        );\n        final Folder systemFolder = APILocator.getFolderAPI().findSystemFolder();\n        final Map<String, List<ManifestItem>> contentletWithFolderExcludes = map(FILTER_EXCLUDE_REASON,\n                list(host, contentType, language, folder));\n        final Map<String, List<ManifestItem>> contentletWithRelationshipExcludes = map(\n                FILTER_EXCLUDE_REASON, list(host, relationship, contentTypeParent, language),\n                EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder));\n        final Map<String, List<ManifestItem>> contentWithCategoryExcludes = map(FILTER_EXCLUDE_REASON,\n                list(host, contentTypeWithCategory, language, category), EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder));\n        final Map<String, List<ManifestItem>> htmlPageAssetExcludes = map(FILTER_EXCLUDE_REASON,\n                list(host, defaultLanguage, template, htmlPageAssetContentType), EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder));\n        final Map<String, List<ManifestItem>>  contentletWithImageExcludes =  map(FILTER_EXCLUDE_REASON,\n                list(host, contentTypeWithImageField, imageFileAsset, language), EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder));\n        return list(\n                new TestData(contentlet, contentletInclude, excludeSystemFolder, filterDescriptorAllDependencies, \"Contentlet with filterDescriptorAllDependencies\"),\n                new TestData(contentlet, map(),\n                        map(FILTER_EXCLUDE_REASON, list(host, contentType, language), EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder)),\n                        filterDescriptorNotDependencies, \"Contentlet with filterDescriptorNotDependencies\"),\n                new TestData(contentlet, contentletInclude, excludeSystemFolder, filterDescriptorNotRelationship, \"Contentlet with filterDescriptorNotRelationship\"),\n                new TestData(contentlet, map(),\n                        map(FILTER_EXCLUDE_REASON, list(host, contentType, language), EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder)),\n                        filterDescriptorNotDependenciesRelationship, \"Contentlet with filterDescriptorNotDependenciesRelationship\"),\n                new TestData(contentletWithFolder, contentletWithFolderIncludes, excludeSystemFolder, filterDescriptorAllDependencies, \"Contentlet with folder and filterDescriptorAllDependencies\"),\n                new TestData(contentletWithFolder, map(), contentletWithFolderExcludes, filterDescriptorNotDependencies, \"Contentlet with folder and filterDescriptorNotDependencies\"),\n                new TestData(contentletWithFolder,contentletWithFolderIncludes, excludeSystemFolder, filterDescriptorNotRelationship, \"Contentlet folder and with filterDescriptorNotRelationship\"),\n                new TestData(contentletWithFolder, map(), contentletWithFolderExcludes, filterDescriptorNotDependenciesRelationship, \"Contentlet folder and with filterDescriptorNotDependenciesRelationship\"),\n                new TestData(contentletWithRelationship, contentletWithRelationshipIncludes, excludeSystemFolder,\n                        filterDescriptorAllDependencies, \"Contentlet with Relationship and filterDescriptorAllDependencies\"),\n                new TestData(contentletWithRelationship, map(), contentletWithRelationshipExcludes, filterDescriptorNotDependencies, \"Contentlet with Relationship and filterDescriptorNotDependencies\"),\n                new TestData(contentletWithRelationship, map(contentletWithRelationship, list(host, contentTypeParent, language), contentTypeParent, list(systemWorkflowScheme)),\n                        map(FILTER_EXCLUDE_REASON, list(relationship), EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder)),\n                        filterDescriptorNotRelationship, \"Contentlet with Relationship and filterDescriptorNotRelationship\"),\n                new TestData(contentletWithRelationship, map(), contentletWithRelationshipExcludes,\n                        filterDescriptorNotDependenciesRelationship, \"Contentlet with Relationship and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(contentWithCategory, contentWithCategoryIncludes, excludeSystemFolder,\n                        filterDescriptorAllDependencies, \"Contentlet with Category and filterDescriptorAllDependencies\"),\n                new TestData(contentWithCategory, map(),\n                        map(FILTER_EXCLUDE_REASON, list(host, contentTypeWithCategory, language, category),\n                                EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder)),\n                        filterDescriptorNotDependencies, \"Contentlet with Category and filterDescriptorNotDependencies\"),\n                new TestData(contentWithCategory, contentWithCategoryIncludes, excludeSystemFolder,\n                        filterDescriptorNotRelationship, \"Contentlet with Category and filterDescriptorNotRelationship\"),\n                new TestData(contentWithCategory, map(), contentWithCategoryExcludes, filterDescriptorNotDependenciesRelationship, \"Contentlet with Category and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(htmlPageAsset, htmlPageAssetIncludes, excludeSystemFolderAndSystemHost, filterDescriptorAllDependencies, \"Page with filterDescriptorAllDependencies\"),\n                new TestData(htmlPageAsset, map(), htmlPageAssetExcludes, filterDescriptorNotDependencies, \"Page with filterDescriptorNotDependencies\"),\n                new TestData(htmlPageAsset, htmlPageAssetIncludes, excludeSystemFolderAndSystemHost, filterDescriptorNotRelationship, \"Page with filterDescriptorNotRelationship\"),\n                new TestData(htmlPageAsset, map(), htmlPageAssetExcludes, filterDescriptorNotDependenciesRelationship, \"Page with filterDescriptorNotDependenciesRelationship\"),\n                new TestData(contentletWithImage, contentletWithImageIncludes, excludeSystemFolder, filterDescriptorAllDependencies, \"Contentlet with Image and filterDescriptorAllDependencies\"),\n                new TestData(contentletWithImage, map(), contentletWithImageExcludes, filterDescriptorNotDependencies, \"Contentlet with Image and filterDescriptorNotDependencies\"),\n                new TestData(contentletWithImage, contentletWithImageIncludes, excludeSystemFolder, filterDescriptorNotRelationship, \"Contentlet with Image and filterDescriptorNotRelationship\"),\n                new TestData(contentletWithImage, map(), contentletWithImageExcludes, filterDescriptorNotDependenciesRelationship, \"Contentlet with Image and filterDescriptorNotDependenciesRelationship\")\n        );\n    }\n    private static Collection<TestData> createRuleTestCase() {\n        final Host host = new SiteDataGen().nextPersisted();\n        final Rule rule = new RuleDataGen().host(host).nextPersisted();\n        final Template template = new TemplateDataGen().host(host).nextPersisted();\n        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template).nextPersisted();\n        final Rule ruleWithPage = new RuleDataGen().page(htmlPageAsset).nextPersisted();\n        return list(\n                new TestData(rule, map(rule, list(host)), map(), filterDescriptorAllDependencies, \"Rule with filterDescriptorAllDependencies\"),\n                new TestData(rule, map(), map(FILTER_EXCLUDE_REASON, list(host)), filterDescriptorNotDependencies, \"Rule with filterDescriptorNotDependencies\"),\n                new TestData(rule, map(rule, list(host)), map(), filterDescriptorNotRelationship, \"Rule with filterDescriptorNotRelationship\"),\n                new TestData(rule, map(), map(FILTER_EXCLUDE_REASON, list(host)), filterDescriptorNotDependenciesRelationship, \"Page with filterDescriptorNotDependenciesRelationship\"),\n                new TestData(ruleWithPage, map(ruleWithPage, list(htmlPageAsset)), map(), filterDescriptorAllDependencies, \"Rule with page and filterDescriptorAllDependencies\"),\n                new TestData(ruleWithPage, map(), map(FILTER_EXCLUDE_REASON, list(htmlPageAsset)), filterDescriptorNotDependencies, \"Rule with page and filterDescriptorAllDependencies\"),\n                new TestData(ruleWithPage, map(ruleWithPage, list(htmlPageAsset)), map(), filterDescriptorNotRelationship, \"Rule with page and filterDescriptorAllDependencies\"),\n                new TestData(ruleWithPage, map(), map(FILTER_EXCLUDE_REASON, list(htmlPageAsset)), filterDescriptorNotDependenciesRelationship, \"Rule with page and filterDescriptorAllDependencies\")\n        );\n    }\n    private static Collection<TestData> createLanguageTestCase() {\n        final Language language = new LanguageDataGen().nextPersisted();\n        return list(\n                new TestData(language, map(), map(), filterDescriptorAllDependencies, \"Language with filterDescriptorAllDependencies\"),\n                new TestData(language, map(), filterDescriptorNotDependencies, \"Language with filterDescriptorNotDependencies\"),\n                new TestData(language, map(), map(), filterDescriptorNotRelationship, \"Language with filterDescriptorNotRelationship\"),\n                new TestData(language, map(), filterDescriptorNotDependenciesRelationship, \"Language with filterDescriptorNotDependenciesRelationship\")\n        );\n    }\n    private static Collection<TestData> createWorkflowTestCase() {\n        final WorkflowScheme workflowScheme = new WorkflowDataGen().nextPersisted();\n        final WorkflowStep workflowStep = new WorkflowStepDataGen(workflowScheme.getId()).nextPersisted();\n        return list(\n                new TestData(workflowScheme, map(), map(), filterDescriptorAllDependencies, \"WorkflowScheme with filterDescriptorAllDependencies\"),\n                new TestData(workflowScheme, map(), filterDescriptorNotDependencies, \"WorkflowScheme with filterDescriptorNotDependencies\"),\n                new TestData(workflowScheme, map(), map(), filterDescriptorNotRelationship, \"WorkflowScheme with filterDescriptorNotRelationship\"),\n                new TestData(workflowScheme, map(), filterDescriptorNotDependenciesRelationship, \"WorkflowScheme with filterDescriptorNotDependenciesRelationship\")\n        );\n    }\n    private static Collection<TestData> createHostTestCase() throws DotDataException {\n        final Host host = new SiteDataGen().nextPersisted();\n        final Host hostWithTemplate = new SiteDataGen().nextPersisted();\n        final Template template = new TemplateDataGen().host(hostWithTemplate).nextPersisted();\n        final Host hostWithContainer = new SiteDataGen().nextPersisted();\n        final Container container = new ContainerDataGen()\n                .site(hostWithContainer)\n                .clearContentTypes()\n                .nextPersisted();\n        final Host hostWithFolder = new SiteDataGen().nextPersisted();\n        final Folder folder = new FolderDataGen().site(hostWithFolder).nextPersisted();\n        final Host hostWithContent = new SiteDataGen().nextPersisted();\n        final ContentType contentType = new ContentTypeDataGen().host(hostWithContent).nextPersisted();\n        final Contentlet contentlet = new ContentletDataGen(contentType.id()).host(hostWithContent).nextPersisted();\n        final Language language = APILocator.getLanguageAPI().getLanguage(contentlet.getLanguageId());\n        final Host hostWithRule = new SiteDataGen().nextPersisted();\n        final Rule rule = new RuleDataGen().host(hostWithRule).nextPersisted();\n        final WorkflowScheme systemWorkflowScheme = APILocator.getWorkflowAPI().findSystemWorkflowScheme();\n        final Folder systemFolder = APILocator.getFolderAPI().findSystemFolder();\n        final Structure folderStructure = CacheLocator.getContentTypeCache().getStructureByInode(systemFolder.getDefaultFileType());\n        final ContentType folderContentType = new StructureTransformer(folderStructure).from();\n        final Map<ManifestItem, Collection<ManifestItem>> hostWithContentIncludes = map(\n                hostWithContent, list(contentType, contentlet),\n                contentType, list(systemWorkflowScheme),\n                contentlet, list(language)\n        );\n        final Map<ManifestItem, Collection<ManifestItem>> hostWithFolderInclude = map(\n                hostWithFolder, list(folder),\n                folder, list(folderContentType),\n                folderContentType, list(systemWorkflowScheme)\n        );\n        return list(\n                new TestData(host, map(), map(), filterDescriptorAllDependencies, \"Host with filterDescriptorAllDependencies\"),\n                new TestData(host, map(), map(), filterDescriptorNotDependencies, \"Host with filterDescriptorNotDependencies\"),\n                new TestData(host, map(), map(), filterDescriptorNotRelationship, \"Host with filterDescriptorNotRelationship\"),\n                new TestData(host, map(), filterDescriptorNotDependenciesRelationship, \"Host with filterDescriptorNotDependenciesRelationship\"),\n                new TestData(hostWithTemplate, map(hostWithTemplate, list(template)),\n                        map(), filterDescriptorAllDependencies, \"Host with template and filterDescriptorAllDependencies\"),\n                new TestData(hostWithTemplate, map(), map(FILTER_EXCLUDE_REASON, list(template)),\n                        filterDescriptorNotDependencies, \"Host with template and  filterDescriptorNotDependencies\"),\n                new TestData(hostWithTemplate, map(hostWithTemplate, list(template)), map(),\n                        filterDescriptorNotRelationship, \"Host with template and  filterDescriptorNotRelationship\"),\n                new TestData(hostWithTemplate, map(), map(FILTER_EXCLUDE_REASON, list(template)),\n                        filterDescriptorNotDependenciesRelationship, \"Host with template and  filterDescriptorNotDependenciesRelationship\"),\n                new TestData(hostWithContainer, map(hostWithContainer, list(container)), map(),\n                        filterDescriptorAllDependencies, \"Host with Container and filterDescriptorAllDependencies\"),\n                new TestData(hostWithContainer, map(), map(FILTER_EXCLUDE_REASON, list(container)),\n                        filterDescriptorNotDependencies, \"Host with Container and filterDescriptorNotDependencies\"),\n                new TestData(hostWithContainer, map(hostWithContainer, list(container)), map(),\n                        filterDescriptorNotRelationship, \"Host with Container and filterDescriptorNotRelationship\"),\n                new TestData(hostWithContainer, map(), map(FILTER_EXCLUDE_REASON, list(container)),\n                        filterDescriptorNotDependenciesRelationship, \"Host with Container and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(hostWithContent, hostWithContentIncludes, excludeSystemFolder, filterDescriptorAllDependencies, \"Host with Content and filterDescriptorAllDependencies\"),\n                new TestData(hostWithContent, map(), map(FILTER_EXCLUDE_REASON, list(contentType, contentlet)),\n                        filterDescriptorNotDependencies, \"Host with Content andfilterDescriptorNotDependencies\"),\n                new TestData(hostWithContent, hostWithContentIncludes, excludeSystemFolder,\n                        filterDescriptorNotRelationship, \"Host with Content andfilterDescriptorNotRelationship\"),\n                new TestData(hostWithContent, map(), map(FILTER_EXCLUDE_REASON, list(contentType, contentlet)),\n                        filterDescriptorNotDependenciesRelationship, \"Host with Content andfilterDescriptorNotDependenciesRelationship\"),\n                new TestData(hostWithFolder, hostWithFolderInclude, excludeSystemFolderAndSystemHost, filterDescriptorAllDependencies, \"Host with Folder and filterDescriptorAllDependencies\"),\n                new TestData(hostWithFolder, map(), map(FILTER_EXCLUDE_REASON, list(folder)),\n                        filterDescriptorNotDependencies, \"Host with Folder and filterDescriptorNotDependencies\"),\n                new TestData(hostWithFolder, hostWithFolderInclude, excludeSystemFolderAndSystemHost,\n                        filterDescriptorNotRelationship, \"Host with Folder and filterDescriptorNotRelationship\"),\n                new TestData(hostWithFolder, map(), map(FILTER_EXCLUDE_REASON, list(folder)),\n                        filterDescriptorNotDependenciesRelationship, \"Host with Folder and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(hostWithRule, map(hostWithRule, list(rule)), map(),\n                        filterDescriptorAllDependencies, \"Host with Rule and filterDescriptorAllDependencies\"),\n                new TestData(hostWithRule, map(), map(FILTER_EXCLUDE_REASON, list(rule)),filterDescriptorNotDependencies, \"Host with Rule and filterDescriptorNotDependencies\"),\n                new TestData(hostWithRule, map(hostWithRule, list(rule)), map(), filterDescriptorNotRelationship, \"Host with Rule and filterDescriptorNotRelationship\"),\n                new TestData(hostWithRule, map(), map(FILTER_EXCLUDE_REASON, list(rule)), filterDescriptorNotDependenciesRelationship, \"Host with Rule and filterDescriptorNotDependenciesRelationship\")\n        );\n    }\n    private static Collection<TestData> createLinkTestCase() throws DotDataException {\n        final Host host = new SiteDataGen().nextPersisted();\n        final Folder folder = new FolderDataGen().site(host).nextPersisted();\n        final Link link = new LinkDataGen(folder)\n                .hostId(host.getIdentifier())\n                .nextPersisted();\n        return list(\n                new TestData(link, map(link, list(host, folder)), map(), filterDescriptorAllDependencies, \"Link with filterDescriptorAllDependencies\"),\n                new TestData(link, map(), map(FILTER_EXCLUDE_REASON, list(host, folder)), filterDescriptorNotDependencies, \"Link with filterDescriptorNotDependencies\"),\n                new TestData(link, map(link, list(host, folder)), map(), filterDescriptorNotRelationship, \"Link with filterDescriptorNotRelationship\"),\n                new TestData(link, map(), map(FILTER_EXCLUDE_REASON, list(host, folder)), filterDescriptorNotDependenciesRelationship, \"Link with filterDescriptorNotDependenciesRelationship\")\n        );\n    }\n    private static Collection<TestData> createFolderTestCase() throws DotDataException, DotSecurityException {\n        final Host host = new SiteDataGen().nextPersisted();\n        final Folder folder = new FolderDataGen().site(host).nextPersisted();\n        final Folder parentFolder = new FolderDataGen().site(host).nextPersisted();\n        final Folder folderWithParent = new FolderDataGen()\n                .site(host)\n                .parent(parentFolder)\n                .nextPersisted();\n        final Folder folderWithContentType = new FolderDataGen().site(host).nextPersisted();\n        final ContentType contentType = new ContentTypeDataGen()\n                .folder(folderWithContentType)\n                .nextPersisted();\n        final Folder folderWithContent = new FolderDataGen().site(host).nextPersisted();\n        final File image = new File(Thread.currentThread().getContextClassLoader().getResource(\"images/test.jpg\").getFile());\n        final Contentlet contentlet = new FileAssetDataGen(folderWithContent, image)\n                .host(host)\n                .nextPersisted();\n        final Language language = APILocator.getLanguageAPI().getLanguage(contentlet.getLanguageId());\n        final Folder folderWithLink = new FolderDataGen().site(host).nextPersisted();\n        final Link link = new LinkDataGen(folderWithLink).nextPersisted();\n        final Folder folderWithSubFolder = new FolderDataGen().site(host).nextPersisted();\n        final Folder subFolder = new FolderDataGen()\n                .parent(folderWithSubFolder)\n                .nextPersisted();\n        final Contentlet contentlet_2 = new FileAssetDataGen(subFolder, image)\n                .host(host)\n                .nextPersisted();\n        final Structure folderStructure = CacheLocator.getContentTypeCache()\n                .getStructureByInode(folder.getDefaultFileType());\n        final ContentType folderContentType = new StructureTransformer(folderStructure).from();\n        final WorkflowScheme systemWorkflowScheme = APILocator.getWorkflowAPI().findSystemWorkflowScheme();\n        final Map<ManifestItem, Collection<ManifestItem>> folderIncludes = map(\n                folder, list(host, folderContentType),\n                folderContentType, list(systemWorkflowScheme)\n        );\n        final Map<ManifestItem, Collection<ManifestItem>> folderWithParentIncludes = map(\n                folderWithParent, list(host, folderContentType, parentFolder),\n                folderContentType, list(systemWorkflowScheme)\n        );\n        final Map<ManifestItem, Collection<ManifestItem>> folderWithContentTypeIncludes = map(\n                folderWithContentType, list(host, folderContentType, contentType),\n                folderContentType, list(systemWorkflowScheme),\n                contentType, list(systemWorkflowScheme)\n        );\n        final Map<ManifestItem, Collection<ManifestItem>> folderWithContentIncludes = map(\n                folderWithContent, list(host, folderContentType, contentlet),\n                contentlet, list(contentlet, language, contentlet.getContentType()),\n                contentlet.getContentType(), list(systemWorkflowScheme)\n        );\n        final Map<ManifestItem, Collection<ManifestItem>>  folderWithLinkIncludes = map(\n                folderWithLink, list(host, folderContentType, link, systemWorkflowScheme),\n                folderContentType, list(systemWorkflowScheme)\n        );\n        final Map<ManifestItem, Collection<ManifestItem>>  folderWithSubFolderIncludes = map(\n                folderWithSubFolder, list(host, folderContentType, subFolder),\n                folderContentType, list(systemWorkflowScheme),\n                subFolder, list(contentlet_2),\n                contentlet_2, list(language)\n        );\n        //Folder with sub folder\n        return list(\n                new TestData(folder, folderIncludes, excludeSystemFolderAndSystemHost, filterDescriptorAllDependencies, \"Folder with filterDescriptorAllDependencies\"),\n                new TestData(folder, map(), map(FILTER_EXCLUDE_REASON, list(host, folderContentType)),\n                        filterDescriptorNotDependencies, \"Folder with filterDescriptorNotDependencies\"),\n                new TestData(folder, folderIncludes, excludeSystemFolderAndSystemHost, filterDescriptorNotRelationship, \"Folder with filterDescriptorNotRelationship\"),\n                new TestData(folder, map(), map(FILTER_EXCLUDE_REASON, list(host, folderContentType)),\n                        filterDescriptorNotDependenciesRelationship, \"Folder with filterDescriptorNotDependenciesRelationship\"),\n                //Dependency manager not add Parent Folder, the Parent Folder is added as dependency in FolderBundle\n                new TestData(folderWithParent, folderWithParentIncludes, excludeSystemFolderAndSystemHost,\n                        filterDescriptorAllDependencies, \"Folder with parent and filterDescriptorAllDependencies\"),\n                new TestData(folderWithParent, map(), map(FILTER_EXCLUDE_REASON, list(host, folderContentType, parentFolder)),\n                        filterDescriptorNotDependencies, \"Folder with parent and filterDescriptorNotDependencies\"),\n                new TestData(folderWithParent, folderWithParentIncludes, excludeSystemFolderAndSystemHost,\n                        filterDescriptorNotRelationship, \"Folder with parent and filterDescriptorNotRelationship\"),\n                new TestData(folderWithParent, map(), map(FILTER_EXCLUDE_REASON, list(host, folderContentType, parentFolder)),\n                        filterDescriptorNotDependenciesRelationship, \"Folder with parent and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(folderWithContentType, folderWithContentTypeIncludes, excludeSystemFolderAndSystemHost,\n                        filterDescriptorAllDependencies, \"Folder with ContentType and filterDescriptorAllDependencies\"),\n                new TestData(folderWithContentType, map(),\n                        map(FILTER_EXCLUDE_REASON, list(host, folderContentType, contentType)), filterDescriptorNotDependencies, \"Folder with ContentType and filterDescriptorNotDependencies\"),\n                new TestData(folderWithContentType, folderWithContentTypeIncludes, excludeSystemFolderAndSystemHost,\n                        filterDescriptorNotRelationship, \"Folder with ContentType and filterDescriptorNotRelationship\"),\n                new TestData(folderWithContentType, map(),\n                        map(FILTER_EXCLUDE_REASON, list(host, folderContentType, contentType)),\n                        filterDescriptorNotDependenciesRelationship, \"Folder with ContentType and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(folderWithContent, folderWithContentIncludes, excludeSystemFolderAndSystemHost, filterDescriptorAllDependencies, \"Folder with Content and filterDescriptorAllDependencies\"),\n                new TestData(folderWithContent, map(), map(FILTER_EXCLUDE_REASON, list(host, folderContentType, contentlet)),\n                        filterDescriptorNotDependencies, \"Folder with Content and filterDescriptorNotDependencies\"),\n                new TestData(folderWithContent, folderWithContentIncludes, excludeSystemFolderAndSystemHost, filterDescriptorNotRelationship, \"Folder with Content and filterDescriptorNotRelationship\"),\n                new TestData(folderWithContent, map(), map(FILTER_EXCLUDE_REASON, list(host, folderContentType, contentlet)),\n                        filterDescriptorNotDependenciesRelationship, \"Folder with Content and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(folderWithLink, folderWithLinkIncludes, excludeSystemFolderAndSystemHost, filterDescriptorAllDependencies, \"Folder with Link and filterDescriptorAllDependencies\"),\n                new TestData(folderWithLink, map(), map(FILTER_EXCLUDE_REASON, list(host, folderContentType, link)),\n                        filterDescriptorNotDependencies, \"Folder with Link and filterDescriptorNotDependencies\"),\n                new TestData(folderWithLink, folderWithLinkIncludes, excludeSystemFolderAndSystemHost, filterDescriptorNotRelationship, \"Folder with Link and filterDescriptorNotRelationship\"),\n                new TestData(folderWithLink, map(), map(FILTER_EXCLUDE_REASON, list(host, folderContentType, link)),\n                        filterDescriptorNotDependenciesRelationship, \"Folder with Link and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(folderWithSubFolder, folderWithSubFolderIncludes, excludeSystemFolderAndSystemHost, filterDescriptorAllDependencies, \"Folder with Subfolder and filterDescriptorAllDependencies\"),\n                new TestData(folderWithSubFolder, map(), map(FILTER_EXCLUDE_REASON, list(host, folderContentType, subFolder)),\n                        filterDescriptorNotDependencies, \"Folder with Subfolder and filterDescriptorNotDependencies\"),\n                new TestData(folderWithSubFolder,folderWithSubFolderIncludes, excludeSystemFolderAndSystemHost,\n                        filterDescriptorNotRelationship, \"Folder with Subfolder and filterDescriptorNotRelationship\"),\n                new TestData(folderWithSubFolder, map(), map(FILTER_EXCLUDE_REASON, list(host, folderContentType, subFolder)),\n                        filterDescriptorNotDependenciesRelationship, \"Folder with Subfolder and filterDescriptorNotDependenciesRelationship\")\n        );\n    }\n    private static Collection<TestData> createContainerTestCase() throws DotDataException, DotSecurityException {\n        final Host host = new SiteDataGen().nextPersisted();\n        final ContentType contentType = new ContentTypeDataGen().host(host).nextPersisted();\n        final Container containerWithoutContentType = new ContainerDataGen()\n                .site(host)\n                .clearContentTypes()\n                .nextPersisted();\n        final Container containerWithContentType = new ContainerDataGen()\n                .site(host)\n                .withContentType(contentType, \"\")\n                .nextPersisted();\n        final WorkflowScheme systemWorkflowScheme = APILocator.getWorkflowAPI().findSystemWorkflowScheme();\n        final Map<ManifestItem, Collection<ManifestItem>> containerWithContentTypeIncludes = map(\n                containerWithContentType, list(host, contentType),\n                contentType, list(systemWorkflowScheme)\n        );\n        return list(\n                new TestData(containerWithoutContentType, map(containerWithoutContentType, list(host)),\n                        map(), filterDescriptorAllDependencies, \"Container without Contenttype and filterDescriptorAllDependencies\"),\n                new TestData(containerWithoutContentType, map(), map(FILTER_EXCLUDE_REASON, list(host)),\n                        filterDescriptorNotDependencies, \"Container without Contenttype and der and filterDescriptorNotDependencies\"),\n                new TestData(containerWithoutContentType, map(containerWithoutContentType, list(host)),\n                        map(), filterDescriptorNotRelationship, \"Container without Contenttype and filterDescriptorNotRelationship\"),\n                new TestData(containerWithoutContentType,  map(), map(FILTER_EXCLUDE_REASON, list(host)),\n                        filterDescriptorNotDependenciesRelationship, \"Container without Contenttype and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(containerWithContentType,\n                        containerWithContentTypeIncludes, excludeSystemFolder, filterDescriptorAllDependencies, \"Container with Contenttype and filterDescriptorAllDependencies\"),\n                new TestData(containerWithContentType, map(), map(FILTER_EXCLUDE_REASON, list(host, contentType)),\n                        filterDescriptorNotDependencies, \"Container with Contenttype and filterDescriptorNotDependencies\"),\n                new TestData(containerWithContentType,containerWithContentTypeIncludes, excludeSystemFolder,\n                        filterDescriptorNotRelationship, \"Container with Contenttype and filterDescriptorNotRelationship\"),\n                new TestData(containerWithContentType, map(), map(FILTER_EXCLUDE_REASON, list(host, contentType)),\n                 filterDescriptorNotDependenciesRelationship, \"Container with Contenttype and filterDescriptorNotDependenciesRelationship\")\n        );\n    }\n    private static List<TestData> createTemplatesTestCase() throws DotDataException, DotSecurityException {\n        final Host host = new SiteDataGen().nextPersisted();\n        final Template advancedTemplateWithoutContainer = new TemplateDataGen().host(host).nextPersisted();\n        final ContentType contentType = new ContentTypeDataGen().host(host).nextPersisted();\n        final Container container_1 = new ContainerDataGen()\n                .site(host)\n                .withContentType(contentType, \"\")\n                .nextPersisted();\n        final Container container_2 = new ContainerDataGen()\n                .site(host)\n                .withContentType(contentType, \"\")\n                .nextPersisted();\n        final Template advancedTemplateWithContainer = new TemplateDataGen()\n                .host(host)\n                .withContainer(container_1.getIdentifier())\n                .withContainer(container_2.getIdentifier())\n                .nextPersisted();\n        final TemplateLayout templateLayout = new TemplateLayoutDataGen()\n                .withContainer(container_1)\n                .withContainer(container_2)\n                .next();\n        final Template templateWithTemplateLayout = new TemplateDataGen()\n                .host(host)\n                .drawedBody(templateLayout)\n                .nextPersisted();\n        final WorkflowScheme systemWorkflowScheme = APILocator.getWorkflowAPI().findSystemWorkflowScheme();\n        final Map<ManifestItem, Collection<ManifestItem>> templateWithTemplateLayoutIncludes = map(\n                templateWithTemplateLayout, list(host, container_1, container_2),\n                container_1, list(contentType),\n                container_2, list(contentType),\n                contentType, list(systemWorkflowScheme)\n        );\n        return list(\n                new TestData(advancedTemplateWithoutContainer, map(advancedTemplateWithoutContainer, list(host)),\n                        map(), filterDescriptorAllDependencies, \"Advanced Template without Container and filterDescriptorAllDependencies\"),\n                new TestData(advancedTemplateWithoutContainer, map(),  map(FILTER_EXCLUDE_REASON, list(host)),\n                        filterDescriptorNotDependencies, \"Advanced Template without Container and filterDescriptorNotDependencies\"),\n                new TestData(advancedTemplateWithoutContainer, map(advancedTemplateWithoutContainer, list(host)),\n                        map(), filterDescriptorNotRelationship, \"Advanced Template without Container and filterDescriptorNotRelationship\"),\n                new TestData(advancedTemplateWithoutContainer, map(),  map(FILTER_EXCLUDE_REASON, list(host)),\n                        filterDescriptorNotDependenciesRelationship, \"Advanced Template without Container and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(advancedTemplateWithContainer, map(advancedTemplateWithContainer, list(host)),\n                        map(), filterDescriptorAllDependencies, \"Advanced Template with Container and filterDescriptorAllDependencies\"),\n                new TestData(advancedTemplateWithContainer, map(),  map(FILTER_EXCLUDE_REASON, list(host)),\n                        filterDescriptorNotDependencies, \"Advanced Template with Container and filterDescriptorNotDependencies\"),\n                new TestData(advancedTemplateWithContainer, map(advancedTemplateWithContainer, list(host)),\n                        map(), filterDescriptorNotRelationship, \"Advanced Template with Container and filterDescriptorNotRelationship\"),\n                new TestData(advancedTemplateWithContainer, map(),  map(FILTER_EXCLUDE_REASON, list(host)),\n                        filterDescriptorNotDependenciesRelationship, \"Advanced Template with Container and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(templateWithTemplateLayout, templateWithTemplateLayoutIncludes, excludeSystemFolder,\n                        filterDescriptorAllDependencies, \"Template with Template Layout and filterDescriptorAllDependencies\"),\n                new TestData(templateWithTemplateLayout, map(),  map(FILTER_EXCLUDE_REASON, list(host, container_1, container_2)),\n                        filterDescriptorNotDependencies, \"Template with Template Layout and filterDescriptorNotDependencies\"),\n                new TestData(templateWithTemplateLayout, templateWithTemplateLayoutIncludes, excludeSystemFolder,\n                        filterDescriptorNotRelationship, \"Template with Template Layout and filterDescriptorNotRelationship\"),\n                new TestData(templateWithTemplateLayout, map(),  map(FILTER_EXCLUDE_REASON, list(host, container_1, container_2)),\n                        filterDescriptorNotDependenciesRelationship, \"Template with Template Layout and filterDescriptorNotDependenciesRelationship\")\n        );\n    }\n    private static List<TestData> createContentTypeTestCase() throws DotDataException {\n        final Host host = new SiteDataGen().nextPersisted();\n        final ContentType contentType = new ContentTypeDataGen()\n                .host(host)\n                .nextPersisted();\n        final Host folderHost = new SiteDataGen().nextPersisted();\n        final Folder folder = new FolderDataGen().site(folderHost).nextPersisted();\n        final ContentType contentTypeWithFolder = new ContentTypeDataGen()\n                .folder(folder)\n                .nextPersisted();\n        final WorkflowScheme workflowScheme = new WorkflowDataGen().nextPersisted();\n        final ContentType contentTypeWithWorkflow = new ContentTypeDataGen()\n                .host(host)\n                .workflowId(workflowScheme.getId())\n                .nextPersisted();\n        final Category category = new CategoryDataGen().nextPersisted();\n        final ContentType contentTypeWithCategory=  new ContentTypeDataGen()\n                .host(host)\n                .addCategory(category)\n                .nextPersisted();\n        final ContentType contentTypeParent =  new ContentTypeDataGen()\n                .host(host)\n                .nextPersisted();\n        final ContentType contentTypeChild =  new ContentTypeDataGen()\n                .host(host)\n                .nextPersisted();\n        final Relationship relationship = new FieldRelationshipDataGen()\n                .child(contentTypeChild)\n                .parent(contentTypeParent)\n                .nextPersisted();\n        final WorkflowScheme systemWorkflowScheme = APILocator.getWorkflowAPI().findSystemWorkflowScheme();\n        final Folder systemFolder = APILocator.getFolderAPI().findSystemFolder();\n        final Map<ManifestItem, Collection<ManifestItem>> contentTypeWithFolderIncludes = map(\n                contentTypeWithFolder, list(folder, systemWorkflowScheme, folderHost));\n        final Map<ManifestItem, Collection<ManifestItem>> contentTypeWithWorkflowIncludes = map(\n                contentTypeWithWorkflow, list(host, systemWorkflowScheme, workflowScheme));\n        final Map<ManifestItem, Collection<ManifestItem>> contentTypeWithCategoryIncludes = map(\n                contentTypeWithCategory, list(host, systemWorkflowScheme, category));\n        final Map<ManifestItem, Collection<ManifestItem>> contentTypeParentIncludes = map(\n                contentTypeParent, list(host, systemWorkflowScheme, relationship),\n                relationship, list(contentTypeChild)\n        );\n        list(host, systemWorkflowScheme, category);\n        return list(\n                new TestData(contentType,\n                        map(contentType, list(host, systemWorkflowScheme)), excludeSystemFolder, filterDescriptorAllDependencies, \"Contentype with filterDescriptorAllDependencies\"),\n                new TestData(contentType, map(),\n                        map(\n                            FILTER_EXCLUDE_REASON, list(host, systemWorkflowScheme),\n                            EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder)), filterDescriptorNotDependencies, \"Contentype with filterDescriptorNotDependencies\"),\n                new TestData(contentType,\n                        map(contentType, list(host, systemWorkflowScheme)),\n                        excludeSystemFolder, filterDescriptorNotRelationship, \"Contentype with and filterDescriptorNotRelationship\"),\n                new TestData(contentType, map(),\n                        map(FILTER_EXCLUDE_REASON, list(host, systemWorkflowScheme),\n                                EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder)), filterDescriptorNotDependenciesRelationship, \"Contentype with filterDescriptorNotDependenciesRelationship\"),\n                new TestData(contentTypeWithFolder, contentTypeWithFolderIncludes, map(),\n                        filterDescriptorAllDependencies, \"Contentype with Folder and filterDescriptorAllDependencies\"),\n                new TestData(contentTypeWithFolder, map(),\n                        map(FILTER_EXCLUDE_REASON, list(folder, systemWorkflowScheme, folderHost)), filterDescriptorNotDependencies, \"Contentype with Folder and filterDescriptorNotDependencies\"),\n                new TestData(contentTypeWithFolder, contentTypeWithFolderIncludes, map(),\n                        filterDescriptorNotRelationship, \"Contentype with Folder and filterDescriptorNotRelationship\"),\n               new TestData(contentTypeWithFolder, map(),\n                        map(FILTER_EXCLUDE_REASON, list(folder, systemWorkflowScheme, folderHost)),\n                        filterDescriptorNotDependenciesRelationship, \"Contentype with Folder and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(contentTypeWithWorkflow, contentTypeWithWorkflowIncludes, excludeSystemFolder, filterDescriptorAllDependencies, \"Contentype with Workflow and filterDescriptorAllDependencies\"),\n                new TestData(contentTypeWithWorkflow, map(), map(FILTER_EXCLUDE_REASON, list(host, systemWorkflowScheme, workflowScheme),\n                        EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder)), filterDescriptorNotDependencies, \"Contentype with Workflow and filterDescriptorNotDependencies\"),\n                new TestData(contentTypeWithWorkflow, contentTypeWithWorkflowIncludes, excludeSystemFolder, filterDescriptorNotRelationship, \"Contentype with Workflow and filterDescriptorNotRelationship\"),\n                new TestData(contentTypeWithWorkflow, map(), map(FILTER_EXCLUDE_REASON, list(host, systemWorkflowScheme, workflowScheme),\n                        EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder)), filterDescriptorNotDependenciesRelationship, \"Contentype with Workflow and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(contentTypeWithCategory, contentTypeWithCategoryIncludes, excludeSystemFolder,\n                        filterDescriptorAllDependencies, \"Contentype with Category and filterDescriptorAllDependencies\"),\n                new TestData(contentTypeWithCategory, map(), map(FILTER_EXCLUDE_REASON, list(host, systemWorkflowScheme, category),\n                        EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder)), filterDescriptorNotDependencies, \"Contentype with Category and filterDescriptorNotDependencies\"),\n                new TestData(contentTypeWithCategory, contentTypeWithCategoryIncludes, excludeSystemFolder,\n                        filterDescriptorNotRelationship, \"Contentype with Category and filterDescriptorNotRelationship\"),\n                new TestData(contentTypeWithCategory, map(), map(FILTER_EXCLUDE_REASON, list(host, systemWorkflowScheme, category),\n                        EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder)), filterDescriptorNotDependenciesRelationship, \"Contentype with Category and filterDescriptorNotDependenciesRelationship\"),\n                new TestData(contentTypeParent, contentTypeParentIncludes, excludeSystemFolder, filterDescriptorAllDependencies, \"Contentype with Relationship and filterDescriptorAllDependencies\"),\n                new TestData(contentTypeParent, map(), map(FILTER_EXCLUDE_REASON, list(host, systemWorkflowScheme, relationship),\n                        EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder)), filterDescriptorNotDependencies, \"Contentype with Relationship and filterDescriptorNotDependencies\"),\n                new TestData(contentTypeParent, map(contentTypeParent, list(host, systemWorkflowScheme)),\n                        map(FILTER_EXCLUDE_REASON, list(relationship), EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder)),\n                        filterDescriptorNotRelationship, \"Contentype with Relationship and filterDescriptorNotRelationship\"),\n                new TestData(contentTypeParent, map(), map(FILTER_EXCLUDE_REASON, list(host, systemWorkflowScheme, relationship),\n                        EXCLUDE_SYSTEM_FOLDER_HOST, list(systemFolder)), filterDescriptorNotDependenciesRelationship, \"Contentype with Relationship and filterDescriptorNotDependenciesRelationship\")\n        );\n    }\n    /**\n     * Method to Test: {@link DependencyBundler#generate(BundleOutput, BundlerStatus)}\n     * When: Case tested:\n     * - Add a {@link ContentType} into a Bundle\n     * - Add a {@link Container} into a Bundle\n     * - Add a {@link Template} into a Bundle\n     * - Add a {@link Folder} into a Bundle\n     * - Add a {@link Host} into a Bundle\n     * - Add a {@link Link} into a Bundle\n     * - Add a {@link WorkflowScheme} into a Bundle\n     * - Add a {@link Language} into a Bundle\n     * - Add a {@link Rule} into a Bundle\n     * Should:  Add all the dependencies ans created the Manifest file with all the register\n     */\n    @Test\n    @UseDataProvider(\"assets\")\n    public void addAssetInBundle(final TestData testData)\n            throws IOException, DotBundleException, DotDataException, DotSecurityException {\n        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n        APILocator.getPublisherAPI().addFilterDescriptor(testData.filterDescriptor);\n        final PushPublisherConfig config = new PushPublisherConfig();\n        final BundleOutput bundleOutput = new DirectoryBundleOutput(config);\n        final Set<Object> dependencies = new HashSet<>();\n        try (CSVManifestBuilder manifestBuilder = new CSVManifestBuilder()) {\n            config.setManifestBuilder(manifestBuilder);\n            new BundleDataGen()\n                    .pushPublisherConfig(config)\n                    .addAssets(set(testData.assetsToAddInBundle))\n                    .filter(testData.filterDescriptor)\n                    .nextPersisted();\n            final Set<Object> languagesVariableDependencies = getLanguagesVariableDependencies(\n                    true, false, false);\n            final PublisherFilter publisherFilter = APILocator.getPublisherAPI()\n                    .createPublisherFilter(config.getId());\n            if (publisherFilter.isDependencies()) {\n                dependencies.addAll(testData.dependencies());\n                dependencies.addAll(languagesVariableDependencies);\n            }\n            dependencies.add(testData.assetsToAddInBundle);\n            bundler.setConfig(config);\n            bundler.generate(bundleOutput, status);\n            manifestBuilder.close();\n            final ManifestItemsMapTest manifestLines = testData.manifestLines();\n            if (publisherFilter.isDependencies()) {\n                PublisherAPIImplTest.addLanguageVariableManifestItem(\n                        manifestLines,\n                        true,\n                        PublisherAPIImplTest.getLanguageVariables()\n                );\n            }\n            PublisherAPIImplTest.assertManifestFile(manifestBuilder.getManifestFile(),\n                    manifestLines, list(\"#Filter:\"));\n        }\n        assertAll(config, dependencies);\n    }\n    @Test\n    public void addLanguageVariableTestCaseInBundle()\n            throws DotSecurityException, DotDataException, DotBundleException, IOException {\n        Contentlet contentlet = null;\n        try {\n            final PushPublisherConfig config = new PushPublisherConfig();\n            PublisherAPIImplTest.createLanguageVariableIfNeeded();\n            final FilterDescriptor filterDescriptor = new FilterDescriptorDataGen().nextPersisted();\n            new BundleDataGen()\n                    .pushPublisherConfig(config)\n                    .filter(filterDescriptor)\n                    .nextPersisted();\n            final BundleOutput bundleOutput = new DirectoryBundleOutput(config);\n            try (ManifestBuilder manifestBuilder = new TestManifestBuilder()) {\n                config.setManifestBuilder(manifestBuilder);\n                bundler.setConfig(config);\n                bundler.generate(bundleOutput, status);\n                final Collection<Object> dependencies = getLanguagesVariableDependencies(\n                        true, false, false);\n                assertAll(config, dependencies);\n            }\n        } finally {\n            if (contentlet != null) {\n                ContentletDataGen.archive(contentlet);\n                ContentletDataGen.remove(contentlet);\n            }\n        }\n    }\n    @DataProvider(format = \"%m: %p[0]\")\n    public static Object[] configs() throws Exception {\n        return new ModDateTestData[] {\n                new ModDateTestData(false, false, Operation.PUBLISH),\n                new ModDateTestData(false, false, Operation.UNPUBLISH),\n                new ModDateTestData(true, false, Operation.PUBLISH),\n                new ModDateTestData(false, true, Operation.PUBLISH)\n        };\n    }\n    /**\n     * Method to Test: {@link DependencyBundler#generate(BundleOutput, BundlerStatus)}\n     * When:\n     * - Have a Relationship.\n     * - Have a parent content related with a child contentlet.\n     * - The child contentlet have a moddate before the last Push operation.\n     * - Add the parent content into a bundle.\n     * Should:\n     * - Exclude the child contentlet in the bundle when isForPush is false, isDownload is false and Operation is PUBLISH\n     * otherwise should include the content child and content child dependencies\n     * - Create the Manifest File\n     */\n    @Test\n    @UseDataProvider(\"configs\")\n    public void excludeContenletChildAssetByModDate(ModDateTestData modDateTestData)\n            throws DotBundleException, DotDataException, DotSecurityException, IOException {\n        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptorAllDependencies);\n        final Map<String, Object> relationShip = createRelationShip();\n        final Host host = (Host) relationShip.get(\"host\");\n        final Language language = (Language) relationShip.get(\"language\");\n        final ContentType contentTypeParent =  (ContentType) relationShip.get(\"contentTypeParent\");\n        final ContentType contentTypeChild =  (ContentType) relationShip.get(\"contentTypeChild\");\n        final Relationship relationship = (Relationship) relationShip.get(\"relationship\");\n        final Contentlet contentletChild =  (Contentlet) relationShip.get(\"contentletChild\");\n        final Contentlet contentParent = (Contentlet) relationShip.get(\"contentParent\");\n        final Map<String, Object> pushContext = createPushContext(modDateTestData, contentParent);\n        final Environment environment = (Environment) pushContext.get(\"environment\");\n        final PushPublishingEndPoint publishingEndPoint = (PushPublishingEndPoint) pushContext.get(\"publishingEndPoint\");\n        final PushPublisherConfig config = (PushPublisherConfig) pushContext.get(\"config\");\n        final Bundle bundle = (Bundle) pushContext.get(\"bundle\");\n        final BundleOutput bundleOutput = new DirectoryBundleOutput(config);\n        final Calendar yesterday = Calendar.getInstance();\n        yesterday.add(Calendar.DATE, -1);\n        yesterday.add(Calendar.HOUR, 2);\n        createPushAsset(\n                yesterday.getTime(),\n                contentletChild.getIdentifier(),\n                \"content\",\n                environment,\n                publishingEndPoint,\n                bundle,\n                Publisher.class);\n        final Collection<Object> dependencies = new HashSet<>();\n        try (CSVManifestBuilder manifestBuilder = new CSVManifestBuilder()) {\n            config.setManifestBuilder(manifestBuilder);\n            bundler.setConfig(config);\n            bundler.generate(bundleOutput, status);\n            final ManifestItemsMapTest manifestLines = new ManifestItemsMapTest();\n            manifestLines.add(contentParent, \"Added directly by User\");\n            final List<Contentlet> languageVariables = PublisherAPIImplTest.getLanguageVariables();\n            if (modDateTestData.operation == Operation.PUBLISH) {\n                dependencies.addAll(getLanguagesVariableDependencies(true, false, false));\n                dependencies.addAll(list(host, language, contentTypeParent, contentTypeChild));\n                dependencies.add(APILocator.getWorkflowAPI().findSystemWorkflowScheme());\n                dependencies.add(language);\n                manifestLines.addDependencies(map(\n                        contentParent, list(host, language, contentTypeParent, contentTypeChild, relationship),\n                        relationship, list(contentTypeChild, contentTypeParent),\n                        contentTypeParent, list(APILocator.getWorkflowAPI().findSystemWorkflowScheme()),\n                        contentTypeChild, list(APILocator.getWorkflowAPI().findSystemWorkflowScheme())\n                ));\n                if (!languageVariables.isEmpty()) {\n                    PublisherAPIImplTest.addLanguageVariableManifestItem(\n                            manifestLines,\n                            true,\n                            languageVariables\n                    );\n                }\n            } else {\n                final String excludeByOperation = FILTER_EXCLUDE_BY_OPERATION + modDateTestData.operation;\n                manifestLines.addExcludes(map(excludeByOperation,\n                        list(host, language, contentTypeParent, contentTypeChild, relationship,\n                                APILocator.getWorkflowAPI().findSystemWorkflowScheme())));\n                final List<? extends Serializable> generalLangVarDependencies = list(\n                        PublisherAPIImplTest.getLanguageVariablesContentType(),\n                        APILocator.getWorkflowAPI().findSystemWorkflowScheme());\n                Stream.concat(PublisherAPIImplTest.getLanguagesVariableDependencies(),\n                        languageVariables, generalLangVarDependencies).forEach(asset ->\n                        manifestLines.addExclude((ManifestItem) asset, excludeByOperation));\n            }\n            dependencies.add(contentParent);\n            manifestLines.addExclude(APILocator.getFolderAPI().findSystemFolder(), EXCLUDE_SYSTEM_FOLDER_HOST);\n            manifestLines.addExclude(APILocator.getHostAPI().findSystemHost(), EXCLUDE_SYSTEM_FOLDER_HOST);\n            if (modDateTestData.isDownload || modDateTestData.isForcePush) {\n                dependencies.add(contentletChild);\n                manifestLines.addDependencies(map(relationship, list(contentletChild)));\n                manifestLines.addDependencies(map(contentletChild, list(language, contentTypeChild)));\n            } else if (modDateTestData.operation == Operation.PUBLISH) {\n                manifestLines.addExclude(contentletChild, \"Excluded by mod_date\");\n                manifestLines.addDependencies(map(contentletChild, list(language)));\n            } else {\n                manifestLines.addExclude(contentletChild, FILTER_EXCLUDE_BY_OPERATION + modDateTestData.operation);\n            }\n            manifestBuilder.close();\n            PublisherAPIImplTest.assertManifestFile(manifestBuilder.getManifestFile(), manifestLines,\n                    list(\"#Filter:\"));\n        }\n         assertAll(config, dependencies);\n    }\n    /**\n     * Method to Test: {@link DependencyBundler#generate(BundleOutput, BundlerStatus)}\n     * When:\n     * - Have a Relationship.\n     * - Have a parent content related with a child contentlet.\n     * - The child contentlet have two versions in different languages, one of them after the last\n     * Push operation and the another one before it.\n     * - Add the parent content into a bundle.\n     * Should:\n     * - The child contentlet should be include all the time that the operation is equals to PUBLISH\n     */\n    @Test\n    @UseDataProvider(\"configs\")\n    public void includeContenletChildWithSeveralVersionAssetByModDate(ModDateTestData modDateTestData)\n            throws DotBundleException, DotDataException, DotSecurityException, IOException {\n        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptorAllDependencies);\n        final Map<String, Object> relationShip = createRelationShip();\n        final Host host = (Host) relationShip.get(\"host\");\n        final Language language = (Language) relationShip.get(\"language\");\n        final ContentType contentTypeParent =  (ContentType) relationShip.get(\"contentTypeParent\");\n        final ContentType contentTypeChild =  (ContentType) relationShip.get(\"contentTypeChild\");\n        final Contentlet contentletChild =  (Contentlet) relationShip.get(\"contentletChild\");\n        final Contentlet contentParent = (Contentlet) relationShip.get(\"contentParent\");\n        final Contentlet contentletChildAnotherLang = ContentletDataGen.checkout(contentletChild);\n        final Language anotherLang = new LanguageDataGen().nextPersisted();\n        contentletChildAnotherLang.setLanguageId(anotherLang.getId());\n        ContentletDataGen.checkin(contentletChildAnotherLang);\n        final Map<String, Object> pushContext = createPushContext(modDateTestData, contentParent);\n        final Environment environment = (Environment) pushContext.get(\"environment\");\n        final PushPublishingEndPoint publishingEndPoint = (PushPublishingEndPoint) pushContext.get(\"publishingEndPoint\");\n        final PushPublisherConfig config = (PushPublisherConfig) pushContext.get(\"config\");\n        final Bundle bundle = (Bundle) pushContext.get(\"bundle\");\n        final BundleOutput bundleOutput = new DirectoryBundleOutput(config);\n        final Calendar yesterday = Calendar.getInstance();\n        yesterday.add(Calendar.DATE, -1);\n        yesterday.add(Calendar.HOUR, 2);\n        createPushAsset(\n                yesterday.getTime(),\n                contentletChild.getIdentifier(),\n                \"content\",\n                environment,\n                publishingEndPoint,\n                bundle,\n                Publisher.class);\n        try (ManifestBuilder manifestBuilder = new TestManifestBuilder()) {\n            config.setManifestBuilder(manifestBuilder);\n            bundler.setConfig(config);\n            bundler.generate(bundleOutput, status);\n        }\n        final Collection<Object> dependencies = new HashSet<>();\n        if (modDateTestData.operation == Operation.PUBLISH) {\n            dependencies.addAll(getLanguagesVariableDependencies(\n                    true, false, false));\n            dependencies.addAll(list(host, language, contentTypeParent, contentTypeChild));\n            dependencies.add(APILocator.getWorkflowAPI().findSystemWorkflowScheme());\n            dependencies.add(language);\n            dependencies.add(anotherLang);\n            dependencies.add(contentletChild);\n        }\n        dependencies.add(contentParent);\n        assertAll(config, dependencies);\n    }\n    /**\n     * Method to Test: {@link DependencyBundler#generate(BundleOutput, BundlerStatus)}\n     * When:\n     * - Have a Relationship.\n     * - Have a parent content related with a child contentlet.\n     * - The child contentlet have a moddate before the last Push operation.\n     * - Add the child content into a bundle.\n     * Should:\n     * - Include the child contentlet in the bundle\n     */\n    @Test\n    @UseDataProvider(\"configs\")\n    public void notExcludeContenletChildAssetByModDate(ModDateTestData modDateTestData)\n            throws DotBundleException, DotDataException, DotSecurityException, IOException {\n        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptorAllDependencies);\n        final Map<String, Object> relationShipMap = createRelationShip();\n        final Host host = (Host) relationShipMap.get(\"host\");\n        final Language language = (Language) relationShipMap.get(\"language\");\n        final ContentType contentTypeParent =  (ContentType) relationShipMap.get(\"contentTypeParent\");\n        final ContentType contentTypeChild =  (ContentType) relationShipMap.get(\"contentTypeChild\");\n        final Calendar yesterday = Calendar.getInstance();\n        yesterday.add(Calendar.DATE, -1);\n        final Contentlet contentletChild =  (Contentlet) relationShipMap.get(\"contentletChild\");\n        final Contentlet contentParent = (Contentlet) relationShipMap.get(\"contentParent\");\n        final Map<String, Object> pushContext = createPushContext(modDateTestData, contentletChild);\n        final Environment environment = (Environment) pushContext.get(\"environment\");\n        final PushPublishingEndPoint publishingEndPoint = (PushPublishingEndPoint) pushContext.get(\"publishingEndPoint\");\n        final PushPublisherConfig config = (PushPublisherConfig) pushContext.get(\"config\");\n        final Bundle bundle = (Bundle) pushContext.get(\"bundle\");\n        yesterday.add(Calendar.HOUR, 2);\n        createPushAsset(\n                yesterday.getTime(),\n                contentletChild.getIdentifier(),\n                \"content\",\n                environment,\n                publishingEndPoint,\n                bundle, Publisher.class);\n        final BundleOutput bundleOutput = new DirectoryBundleOutput(config);\n        try (ManifestBuilder manifestBuilder = new TestManifestBuilder()) {\n            config.setManifestBuilder(manifestBuilder);\n            bundler.setConfig(config);\n            bundler.generate(bundleOutput, status);\n        }\n        final Collection<Object> dependencies = new HashSet<>();\n        if (modDateTestData.operation == Operation.PUBLISH) {\n            dependencies.addAll(getLanguagesVariableDependencies(\n                    true, false, false));\n            dependencies.addAll(list(host, language, contentTypeParent, contentTypeChild,\n                    contentParent));\n            dependencies.add(APILocator.getWorkflowAPI().findSystemWorkflowScheme());\n            dependencies.add(language);\n        }\n        dependencies.add(contentletChild);\n        assertAll(config, dependencies);\n    }\n    private Map<String, Object> createPushContext(final ModDateTestData modDateTestData,\n            final Object... assets){\n        final Environment environment = new EnvironmentDataGen().nextPersisted();\n        final PushPublishingEndPoint publishingEndPoint = new PushPublishingEndPointDataGen()\n                .environment(environment)\n                .nextPersisted();\n        final PushPublisherConfig config = new PushPublisherConfig();\n        config.setDownloading(modDateTestData.isDownload);\n        config.setOperation(modDateTestData.operation);\n        final Bundle bundle = new BundleDataGen()\n                .pushPublisherConfig(config)\n                .filter(filterDescriptorAllDependencies)\n                .downloading(modDateTestData.isDownload)\n                .addAssets(Arrays.asList(assets))\n                .operation(modDateTestData.operation)\n                .forcePush(modDateTestData.isForcePush)\n                .nextPersisted();\n        try {\n            final BundleFactoryImpl bundleFactory = new BundleFactoryImpl();\n            bundleFactory.saveBundleEnvironment(bundle, environment);\n            return map(\n                \"environment\", environment,\n                \"publishingEndPoint\", publishingEndPoint,\n                \"config\", config,\n                \"bundle\", bundle,\n                \"bundleFactory\", bundleFactory\n            );\n        }catch (DotDataException e) {\n            throw new DotRuntimeException(e);\n        }\n    }\n    private Map<String, Object> createRelationShip() {\n        final Host host = new SiteDataGen().nextPersisted();\n        final Language language = new LanguageDataGen().nextPersisted();\n        final ContentType contentTypeParent =  new ContentTypeDataGen()\n                .host(host)\n                .nextPersisted();\n        final ContentType contentTypeChild =  new ContentTypeDataGen()\n                .host(host)\n                .nextPersisted();\n        final Relationship relationship = new FieldRelationshipDataGen()\n                .child(contentTypeChild)\n                .parent(contentTypeParent)\n                .nextPersisted();\n        final Calendar yesterday = Calendar.getInstance();\n        yesterday.add(Calendar.DATE, -1);\n        final Contentlet contentletChild =  new ContentletDataGen(contentTypeChild.id())\n                .languageId(language.getId())\n                .host(host)\n                .modeDate(yesterday.getTime())\n                .nextPersisted();\n        final Contentlet contentParent = new ContentletDataGen(contentTypeParent.id())\n                .languageId(language.getId())\n                .host(host)\n                .setProperty(contentTypeParent.variable(), list(contentletChild))\n                .nextPersisted();\n        return map(\n            \"host\", host,\n            \"language\", language,\n            \"contentTypeParent\", contentTypeParent,\n            \"contentTypeChild\", contentTypeChild,\n            \"relationship\", relationship,\n            \"contentletChild\", contentletChild,\n            \"contentParent\", contentParent\n        );\n    }\n    private void createPushAsset(final Date pushDate,\n            final String assetId,\n            final String assetType,\n            final Environment environment,\n            final PushPublishingEndPoint publishingEndPoint,\n            final Bundle bundle, Class<Publisher> publisherClass) {\n        new PushedAssetDataGen()\n            .assetId(assetId)\n            .assetType(assetType)\n            .bundle(bundle)\n            .publishingEndPoint(publishingEndPoint)\n            .environment(environment)\n            .pushDate(pushDate)\n            .publisher(publisherClass)\n            .nextPersisted();\n    }\n    /**\n     * Method to Test: {@link DependencyBundler#generate(BundleOutput, BundlerStatus)}\n     * When:\n     * - Have a Page with all its dependencies: Template, Containers, Host.\n     * - Template, Containers, Host have a moddate before the last Push operation.\n     * - Add the page into a bundle.\n     * Should: Exclude all the page's dependencies\n     */\n    @Test\n    @UseDataProvider(\"configs\")\n    public void excludeHTMLDependenciesByModDate(ModDateTestData modDateTestData)\n            throws DotBundleException, DotDataException, DotSecurityException, IOException {\n        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptorAllDependencies);\n        final Calendar yesterday = Calendar.getInstance();\n        yesterday.add(Calendar.DATE, -1);\n        final Map<String, Object> pageAndDependencies = pageWithDependencies(yesterday.getTime());\n        final Host host = (Host) pageAndDependencies.get(\"host\");\n        final Container container = (Container) pageAndDependencies.get(\"container\");\n        final Template template = (Template) pageAndDependencies.get(\"template\");\n        final HTMLPageAsset htmlPageAsset = (HTMLPageAsset) pageAndDependencies.get(\"htmlPageAsset\");\n        final Map<String, Object> pushContext = createPushContext(modDateTestData, htmlPageAsset);\n        final Environment environment = (Environment) pushContext.get(\"environment\");\n        final PushPublishingEndPoint publishingEndPoint = (PushPublishingEndPoint) pushContext.get(\"publishingEndPoint\");\n        final PushPublisherConfig config = (PushPublisherConfig) pushContext.get(\"config\");\n        final Bundle bundle = (Bundle) pushContext.get(\"bundle\");\n        final BundleOutput bundleOutput = new DirectoryBundleOutput(config);\n        yesterday.add(Calendar.HOUR, 2);\n        createPushAsset(\n            yesterday.getTime(),\n            host.getIdentifier(),\n            \"host\",\n            environment,\n            publishingEndPoint,\n            bundle, Publisher.class);\n        createPushAsset(\n            yesterday.getTime(),\n            template.getIdentifier(),\n            \"template\",\n            environment,\n            publishingEndPoint,\n            bundle, Publisher.class);\n        createPushAsset(\n            yesterday.getTime(),\n            container.getIdentifier(),\n            \"container\",\n            environment,\n            publishingEndPoint,\n            bundle, Publisher.class);\n        try (ManifestBuilder manifestBuilder = new TestManifestBuilder()) {\n            config.setManifestBuilder(manifestBuilder);\n            bundler.setConfig(config);\n            bundler.generate(bundleOutput, status);\n        }\n        final Host systemHost = APILocator.getHostAPI().findSystemHost();\n        final Collection<Object> dependencies = new HashSet<>();\n        if (modDateTestData.operation == Operation.PUBLISH) {\n            dependencies.addAll(getLanguagesVariableDependencies(\n                    true, false, false));\n            final ContentType pageContentType = APILocator.getContentTypeAPI(APILocator.systemUser())\n                    .find(htmlPageAsset.getStructureInode());\n            dependencies.add(pageContentType);\n            dependencies.add(APILocator.getWorkflowAPI().findSystemWorkflowScheme());\n            dependencies.add(APILocator.getLanguageAPI().getDefaultLanguage());\n        }\n        if (modDateTestData.isDownload || modDateTestData.isForcePush) {\n            dependencies.addAll(list(host, container, template));\n        }\n        dependencies.add(htmlPageAsset);\n        assertAll(config, dependencies);\n    }\n    private Map<String, Object> pageWithDependencies(){\n        return pageWithDependencies(null);\n    }\n    private Map<String, Object> pageWithDependencies(final Date modDateParam){\n        final Date  modDate = modDateParam == null ? new Date() : modDateParam;\n        final Host host = new SiteDataGen()\n                .modDate(modDate)\n                .nextPersisted();\n        final Container container = new ContainerDataGen()\n                .modDate(modDate)\n                .site(host)\n                .nextPersisted();\n        final TemplateLayout templateLayout = new TemplateLayoutDataGen().withContainer(container).next();\n        final Template template = new TemplateDataGen()\n                .modDate(modDate)\n                .drawedBody(templateLayout)\n                .host(host)\n                .nextPersisted();\n        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template)\n                .nextPersisted();\n        return map(\n            \"host\", host,\n            \"container\", container,\n            \"template\", template,\n            \"htmlPageAsset\", htmlPageAsset\n        );\n    }\n    /**\n     * Method to Test: {@link DependencyBundler#generate(BundleOutput, BundlerStatus)}\n     * When:\n     * - Have a Page with all its dependencies: Template, Containers, Host.\n     * - Template, Containers, Host have a moddate before the last Push operation.\n     * - Add the Template, Containers, Host and Page into a bundle.\n     * Should: Should include all the pages's dependencies\n     */\n    @Test\n    @UseDataProvider(\"configs\")\n    public void includeHTMLDependenciesNoMatterModDate(ModDateTestData modDateTestData)\n            throws DotBundleException, DotDataException, DotSecurityException, IOException {\n        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptorAllDependencies);\n        final Calendar yesterday = Calendar.getInstance();\n        yesterday.add(Calendar.DATE, -1);\n        final Map<String, Object> pageAndDependencies = pageWithDependencies(yesterday.getTime());\n        final Host host = (Host) pageAndDependencies.get(\"host\");\n        final Container container = (Container) pageAndDependencies.get(\"container\");\n        final Template template = (Template) pageAndDependencies.get(\"template\");\n        final HTMLPageAsset htmlPageAsset = (HTMLPageAsset) pageAndDependencies.get(\"htmlPageAsset\");\n        final Map<String, Object> pushContext = createPushContext(modDateTestData, host, container,\n                template, htmlPageAsset);\n        final Environment environment = (Environment) pushContext.get(\"environment\");\n        final PushPublishingEndPoint publishingEndPoint = (PushPublishingEndPoint) pushContext.get(\"publishingEndPoint\");\n        final PushPublisherConfig config = (PushPublisherConfig) pushContext.get(\"config\");\n        final Bundle bundle = (Bundle) pushContext.get(\"bundle\");\n        final BundleOutput bundleOutput = new DirectoryBundleOutput(config);\n        yesterday.add(Calendar.HOUR, 2);\n        createPushAsset(\n                yesterday.getTime(),\n                host.getIdentifier(),\n                \"host\",\n                environment,\n                publishingEndPoint,\n                bundle, Publisher.class);\n        createPushAsset(\n                yesterday.getTime(),\n                template.getIdentifier(),\n                \"template\",\n                environment,\n                publishingEndPoint,\n                bundle, Publisher.class);\n        createPushAsset(\n                yesterday.getTime(),\n                container.getIdentifier(),\n                \"container\",\n                environment,\n                publishingEndPoint,\n                bundle, Publisher.class);\n        final BundleFactoryImpl bundleFactory = new BundleFactoryImpl();\n        bundleFactory.saveBundleEnvironment(bundle, environment);\n        try (ManifestBuilder manifestBuilder = new TestManifestBuilder()) {\n            config.setManifestBuilder(manifestBuilder);\n            bundler.setConfig(config);\n            bundler.generate(bundleOutput, status);\n        }\n        final Host systemHost = APILocator.getHostAPI().findSystemHost();\n        final Collection<Object> dependencies = new HashSet<>();\n        if (modDateTestData.operation == Operation.PUBLISH) {\n            dependencies.addAll(getLanguagesVariableDependencies(\n                    true, false, false));\n            final ContentType pageContentType = APILocator.getContentTypeAPI(APILocator.systemUser())\n                    .find(htmlPageAsset.getStructureInode());\n            dependencies.add(pageContentType);\n            dependencies.add(APILocator.getWorkflowAPI().findSystemWorkflowScheme());\n            dependencies.add(APILocator.getLanguageAPI().getDefaultLanguage());\n        }\n        dependencies.addAll(list(host, container, template));\n        dependencies.add(htmlPageAsset);\n        assertAll(config, dependencies);\n    }\n    /**\n     * Method to Test: {@link DependencyBundler#generate(BundleOutput, BundlerStatus)}\n     * When:\n     * - Have a Page with all its dependencies: Template, Containers, Host.\n     * - Template have a moddate before the last Push operation.\n     * - Add the Page into a bundle.\n     * Should: Should exclude the template from the bundle but include all the templates's dependencies\n     */\n    @Test\n    @UseDataProvider(\"configs\")\n    public void includeDependenciesEvenWhenAssetExcludeByModDate(ModDateTestData modDateTestData)\n            throws DotBundleException, DotDataException, DotSecurityException, IOException {\n        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptorAllDependencies);\n        final Calendar yesterday = Calendar.getInstance();\n        yesterday.add(Calendar.DATE, -1);\n        final Map<String, Object> pageAndDependencies = pageWithDependencies(yesterday.getTime());\n        final Host host = (Host) pageAndDependencies.get(\"host\");\n        final Container container = (Container) pageAndDependencies.get(\"container\");\n        final Template template = (Template) pageAndDependencies.get(\"template\");\n        final HTMLPageAsset htmlPageAsset = (HTMLPageAsset) pageAndDependencies.get(\"htmlPageAsset\");\n        final Map<String, Object> pushContext = createPushContext(modDateTestData, htmlPageAsset);\n        final Environment environment = (Environment) pushContext.get(\"environment\");\n        final PushPublishingEndPoint publishingEndPoint = (PushPublishingEndPoint) pushContext.get(\"publishingEndPoint\");\n        final PushPublisherConfig config = (PushPublisherConfig) pushContext.get(\"config\");\n        final Bundle bundle = (Bundle) pushContext.get(\"bundle\");\n        final BundleOutput bundleOutput = new DirectoryBundleOutput(config);\n        yesterday.add(Calendar.HOUR, 2);\n        createPushAsset(\n                yesterday.getTime(),\n                template.getIdentifier(),\n                \"template\",\n                environment,\n                publishingEndPoint,\n                bundle, Publisher.class);\n        final BundleFactoryImpl bundleFactory = new BundleFactoryImpl();\n        bundleFactory.saveBundleEnvironment(bundle, environment);\n        try (ManifestBuilder manifestBuilder = new TestManifestBuilder()) {\n            config.setManifestBuilder(manifestBuilder);\n            bundler.setConfig(config);\n            bundler.generate(bundleOutput, status);\n        }\n        final Host systemHost = APILocator.getHostAPI().findSystemHost();\n        final Collection<Object> dependencies = new HashSet<>();\n        if (modDateTestData.operation == Operation.PUBLISH) {\n            dependencies.addAll(getLanguagesVariableDependencies(\n                    true, false, false));\n            final ContentType pageContentType = APILocator.getContentTypeAPI(APILocator.systemUser())\n                    .find(htmlPageAsset.getStructureInode());\n            dependencies.add(pageContentType);\n            dependencies.add(APILocator.getWorkflowAPI().findSystemWorkflowScheme());\n            dependencies.add(APILocator.getLanguageAPI().getDefaultLanguage());\n            dependencies.addAll(list(host, container));\n        }\n        if (modDateTestData.isDownload || modDateTestData.isForcePush) {\n            dependencies.add(template);\n        }\n        dependencies.add(htmlPageAsset);\n        assertAll(config, dependencies);\n    }\n    /**\n     * Method to Test: {@link DependencyBundler#generate(BundleOutput, BundlerStatus)}\n     * When:\n     * - Have a Page with all its dependencies: Template, Containers, Host.\n     * - Template is exclude by Filter.\n     * - Add the Page into a bundle.\n     * Should: Should exclude the template and all the templates's dependencies from the bundle\n     */\n    @Test\n    @UseDataProvider(\"configs\")\n    public void excludeDependenciesWhenAssetExcludeByFilter(ModDateTestData modDateTestData)\n            throws DotBundleException, DotDataException, DotSecurityException, IOException {\n        final FilterDescriptor filterDescriptor = new FilterDescriptorDataGen()\n                .dependencies(true)\n                .relationships(true)\n                .excludeDependencyClasses(list(\"Template\"))\n                .nextPersisted();\n        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptor);\n        final Map<String, Object> pageAndDependencies = pageWithDependencies();\n        final Host host = (Host) pageAndDependencies.get(\"host\");\n        final Container container = (Container) pageAndDependencies.get(\"container\");\n        final Template template = (Template) pageAndDependencies.get(\"template\");\n        final HTMLPageAsset htmlPageAsset = (HTMLPageAsset) pageAndDependencies.get(\"htmlPageAsset\");\n        final Map<String, Object> pushContext = createPushContext(modDateTestData, htmlPageAsset);\n        final Environment environment = (Environment) pushContext.get(\"environment\");\n        final PushPublishingEndPoint publishingEndPoint = (PushPublishingEndPoint) pushContext.get(\"publishingEndPoint\");\n        final PushPublisherConfig config = (PushPublisherConfig) pushContext.get(\"config\");\n        final Bundle bundle = (Bundle) pushContext.get(\"bundle\");\n        final BundleOutput bundleOutput = new DirectoryBundleOutput(config);\n        final BundleFactoryImpl bundleFactory = new BundleFactoryImpl();\n        bundleFactory.saveBundleEnvironment(bundle, environment);\n        try (ManifestBuilder manifestBuilder = new TestManifestBuilder()) {\n            config.setManifestBuilder(manifestBuilder);\n            bundler.setConfig(config);\n            bundler.generate(bundleOutput, status);\n        }\n        final Host systemHost = APILocator.getHostAPI().findSystemHost();\n        final Collection<Object> dependencies = new HashSet<>();\n        if (modDateTestData.operation == Operation.PUBLISH) {\n            dependencies.addAll(getLanguagesVariableDependencies(\n                    true, false, false));\n            final ContentType pageContentType = APILocator.getContentTypeAPI(APILocator.systemUser())\n                    .find(htmlPageAsset.getStructureInode());\n            dependencies.add(pageContentType);\n            dependencies.add(APILocator.getWorkflowAPI().findSystemWorkflowScheme());\n            dependencies.add(APILocator.getLanguageAPI().getDefaultLanguage());\n            dependencies.addAll(list(host));\n        }\n        dependencies.add(htmlPageAsset);\n        assertAll(config, dependencies);\n    }\n    /**\n     * Method to Test: {@link DependencyBundler#generate(BundleOutput, BundlerStatus)}\n     * When:  {@link HTMLPageAsset}'s template has a modDate before the last Push Publish for one environment,\n     * but exists another environment\n     * should: the {@link Template} should be include in the bundle\n     */\n    @Test\n    public void includeTemplateUsingTwoEnvironment()\n            throws DotBundleException, DotDataException, DotSecurityException, IOException {\n        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptorAllDependencies);\n        final Calendar yesterday = Calendar.getInstance();\n        yesterday.add(Calendar.DATE, -1);\n        final Host host = new SiteDataGen().nextPersisted();\n        final Template template = new TemplateDataGen()\n                .modDate(yesterday.getTime())\n                .host(host)\n                .nextPersisted();\n        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template).nextPersisted();\n        final PushPublisherConfig config = new PushPublisherConfig();\n        config.setDownloading(false);\n        config.setOperation(Operation.PUBLISH);\n        final Environment environment_1 = new EnvironmentDataGen().nextPersisted();\n        final Environment environment_2 = new EnvironmentDataGen().nextPersisted();\n        final PushPublishingEndPoint publishingEndPoint_1 = new PushPublishingEndPointDataGen()\n                .environment(environment_1)\n                .nextPersisted();\n        final PushPublishingEndPoint publishingEndPoint_2 = new PushPublishingEndPointDataGen()\n                .environment(environment_2)\n                .nextPersisted();\n        final Bundle bundle = new BundleDataGen()\n                .pushPublisherConfig(config)\n                .filter(filterDescriptorAllDependencies)\n                .downloading(false)\n                .addAssets(set(htmlPageAsset))\n                .operation(Operation.PUBLISH)\n                .forcePush(false)\n                .nextPersisted();\n        final BundleOutput bundleOutput = new DirectoryBundleOutput(config);\n        yesterday.add(Calendar.HOUR, 2);\n        createPushAsset(\n                yesterday.getTime(),\n                template.getIdentifier(),\n                \"template\",\n                environment_1,\n                publishingEndPoint_1,\n                bundle, Publisher.class);\n        final BundleFactoryImpl bundleFactory = new BundleFactoryImpl();\n        bundleFactory.saveBundleEnvironment(bundle, environment_1);\n        bundleFactory.saveBundleEnvironment(bundle, environment_2);\n        try (ManifestBuilder manifestBuilder = new TestManifestBuilder()) {\n            config.setManifestBuilder(manifestBuilder);\n            bundler.setConfig(config);\n            bundler.generate(bundleOutput, status);\n        }\n        final Host systemHost = APILocator.getHostAPI().findSystemHost();\n        final ContentType pageContentType = APILocator.getContentTypeAPI(APILocator.systemUser())\n                .find(htmlPageAsset.getStructureInode());\n        final Collection<Object> dependencies = list(\n                pageContentType, host, template, htmlPageAsset,\n                APILocator.getWorkflowAPI().findSystemWorkflowScheme(),\n                APILocator.getLanguageAPI().getDefaultLanguage()\n        );\n        dependencies.addAll(getLanguagesVariableDependencies(\n                true, false, false));\n        assertAll(config, dependencies);\n        final List<PushedAsset> allPushedAssets = APILocator.getPushedAssetsAPI()\n                .getPushedAssets(template.getIdentifier());\n        final List<String> newBundlePushedAssets = allPushedAssets.stream()\n                .filter(pushedAsset -> pushedAsset.getPushDate().getTime() != yesterday.getTimeInMillis())\n", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "length": 6390, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "008e8692b825d1aaabfc2ca2c8a3d716f4dbc2a6b2ea8efd"}
{"input": "", "context": "/*\n * #%L\n * Alfresco Remote API\n * %%\n * Copyright (C) 2005 - 2016 Alfresco Software Limited\n * %%\n * This file is part of the Alfresco software. \n * If the software was purchased under a paid Alfresco license, the terms of \n * the paid license agreement will prevail.  Otherwise, the software is \n * provided under the following open source license terms:\n * \n * Alfresco is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * Alfresco is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.\n * #L%\n */\npackage org.alfresco.rest.api.tests;\nimport static org.alfresco.rest.api.tests.util.RestApiUtil.toJsonAsStringNonNull;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport org.alfresco.repo.content.MimetypeMap;\nimport org.alfresco.repo.quickshare.QuickShareLinkExpiryActionImpl;\nimport org.alfresco.repo.security.authentication.AuthenticationUtil;\nimport org.alfresco.repo.tenant.TenantUtil;\nimport org.alfresco.rest.api.People;\nimport org.alfresco.rest.api.QuickShareLinks;\nimport org.alfresco.rest.api.impl.QuickShareLinksImpl;\nimport org.alfresco.rest.api.model.NodePermissions;\nimport org.alfresco.rest.api.model.PathInfo;\nimport org.alfresco.rest.api.model.QuickShareLink;\nimport org.alfresco.rest.api.model.Site;\nimport org.alfresco.rest.api.nodes.NodesEntityResource;\nimport org.alfresco.rest.api.quicksharelinks.QuickShareLinkEntityResource;\nimport org.alfresco.rest.api.tests.client.HttpResponse;\nimport org.alfresco.rest.api.tests.client.PublicApiClient.Paging;\nimport org.alfresco.rest.api.tests.client.data.Document;\nimport org.alfresco.rest.api.tests.client.data.Folder;\nimport org.alfresco.rest.api.tests.client.data.Node;\nimport org.alfresco.rest.api.tests.client.data.QuickShareLinkEmailRequest;\nimport org.alfresco.rest.api.tests.client.data.Rendition;\nimport org.alfresco.rest.api.tests.client.data.UserInfo;\nimport org.alfresco.rest.api.tests.util.MultiPartBuilder;\nimport org.alfresco.rest.api.tests.util.RestApiUtil;\nimport org.alfresco.service.cmr.action.scheduled.ScheduledPersistedActionService;\nimport org.alfresco.service.cmr.quickshare.QuickShareLinkExpiryAction;\nimport org.alfresco.service.cmr.quickshare.QuickShareLinkExpiryActionPersister;\nimport org.alfresco.service.cmr.security.AccessStatus;\nimport org.alfresco.service.cmr.security.PermissionService;\nimport org.alfresco.service.cmr.site.SiteVisibility;\nimport org.joda.time.DateTime;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\n/**\n * V1 REST API tests for Shared Links (aka public \"quick shares\")\n *\n * <ul>\n * <li> {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links} </li>\n * <li> {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>} </li>\n * </ul>\n *\n * @author janv\n * @author mbhave\n */\n@SuppressWarnings(\"deprecation\")\npublic class SharedLinkApiTest extends AbstractBaseApiTest\n{\n    private static final String URL_SHARED_LINKS = \"shared-links\";\n    private QuickShareLinkExpiryActionPersister quickShareLinkExpiryActionPersister;\n    private ScheduledPersistedActionService scheduledPersistedActionService;\n    @Before\n    public void setup() throws Exception\n    {\n        super.setup();\n        quickShareLinkExpiryActionPersister = applicationContext.getBean(\"quickShareLinkExpiryActionPersister\", QuickShareLinkExpiryActionPersister.class);\n        scheduledPersistedActionService = applicationContext.getBean(\"scheduledPersistedActionService\", ScheduledPersistedActionService.class);\n    }\n    /**\n     * Tests shared links to file (content)\n     *\n     * <p>POST:</p>\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links}\n     *\n     * <p>DELETE:</p>\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>}\n     *\n     * <p>GET:</p>\n     * The following do not require authentication\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>}\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>/content}\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>/renditions}\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>/renditions/<renditionId>}\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>/renditions/<renditionId>/content}\n     *\n     */\n    @Test\n    public void testSharedLinkCreateGetDelete() throws Exception\n    {\n        // As user 1 ...\n        setRequestContext(user1);\n        // create doc d1 - pdf\n        String sharedFolderNodeId = getSharedNodeId();\n        String fileName1 = \"quick\"+RUNID+\"_1.pdf\";\n        File file1 = getResourceFile(\"quick.pdf\");\n        byte[] file1_originalBytes = Files.readAllBytes(Paths.get(file1.getAbsolutePath()));\n        String file1_MimeType = MimetypeMap.MIMETYPE_PDF;\n        MultiPartBuilder multiPartBuilder = MultiPartBuilder.create()\n                .setFileData(new MultiPartBuilder.FileData(fileName1, file1, file1_MimeType));\n        MultiPartBuilder.MultiPartRequest reqBody = multiPartBuilder.build();\n        HttpResponse response = post(getNodeChildrenUrl(sharedFolderNodeId), reqBody.getBody(), null, reqBody.getContentType(), 201);\n        Document doc1 = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), Document.class);\n        String d1Id = doc1.getId();\n        // create doc d2 - plain text\n        String myFolderNodeId = getMyNodeId();\n        String content2Text = \"The quick brown fox jumps over the lazy dog 2.\";\n        String fileName2 = \"content\" + RUNID + \"_2.txt\";\n        Document doc2 = createTextFile(myFolderNodeId, fileName2, content2Text);\n        String d2Id = doc2.getId();\n        String file2_MimeType = MimetypeMap.MIMETYPE_TEXT_PLAIN;\n        // As user 2 ...\n        setRequestContext(user2);\n        response = getSingle(NodesEntityResource.class, d1Id, null, 200);\n        Node nodeResp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), Node.class);\n        Date docModifiedAt = nodeResp.getModifiedAt();\n        String docModifiedBy = nodeResp.getModifiedByUser().getId();\n        assertEquals(user1, docModifiedBy);\n        // create shared link to document 1\n        Map<String, String> body = new HashMap<>();\n        body.put(\"nodeId\", d1Id);\n        response = post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 201);\n        QuickShareLink resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        String shared1Id = resp.getId();\n        assertNotNull(shared1Id);\n        assertEquals(d1Id, resp.getNodeId());\n        assertEquals(fileName1, resp.getName());\n        assertEquals(file1_MimeType, resp.getContent().getMimeType());\n        assertEquals(\"Adobe PDF Document\", resp.getContent().getMimeTypeName());\n        assertEquals(new Long(file1_originalBytes.length), resp.getContent().getSizeInBytes());\n        assertEquals(\"UTF-8\", resp.getContent().getEncoding());\n        assertEquals(docModifiedAt.getTime(), resp.getModifiedAt().getTime()); // not changed\n        assertEquals(docModifiedBy, resp.getModifiedByUser().getId()); // not changed (ie. not user2)\n        assertEquals(UserInfo.getTestDisplayName(docModifiedBy), resp.getModifiedByUser().getDisplayName());\n        assertEquals(user2, resp.getSharedByUser().getId());\n        assertEquals(UserInfo.getTestDisplayName(user2), resp.getSharedByUser().getDisplayName());\n        // -ve test - try to create again (same user) - already exists\n        post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 409);\n        // As user 1 ...\n        setRequestContext(user1);\n        // create shared link to document 2\n        body = new HashMap<>();\n        body.put(\"nodeId\", d2Id);\n        response = post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 201);\n        resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        String shared2Id = resp.getId();\n        // currently passing auth should make no difference (irrespective of MT vs non-MY enb)\n        // access to get shared link info - pass user1 (but ignore in non-MT)\n        Map<String, String> params = Collections.singletonMap(\"include\", \"allowableOperations\");\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id, params, 200);\n        resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        assertEquals(shared1Id, resp.getId());\n        assertEquals(fileName1, resp.getName());\n        assertEquals(d1Id, resp.getNodeId());\n        assertNull(resp.getAllowableOperations()); // include is ignored\n        assertNull(resp.getModifiedByUser().getId()); // userId not returned\n        assertEquals(UserInfo.getTestDisplayName(user1), resp.getModifiedByUser().getDisplayName());\n        assertNull(resp.getSharedByUser().getId()); // userId not returned\n        assertEquals(UserInfo.getTestDisplayName(user2), resp.getSharedByUser().getDisplayName());\n        // access to get shared link info - pass user2 (but ignore in non-MT)\n        params = Collections.singletonMap(\"include\", \"allowableOperations\");\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id, params, 200);\n        resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        assertEquals(shared1Id, resp.getId());\n        assertEquals(fileName1, resp.getName());\n        assertEquals(d1Id, resp.getNodeId());\n        assertNull(resp.getAllowableOperations()); // include is ignored\n        assertNull(resp.getModifiedByUser().getId()); // userId not returned\n        assertEquals(UserInfo.getTestDisplayName(user1), resp.getModifiedByUser().getDisplayName());\n        assertNull(resp.getSharedByUser().getId()); // userId not returned\n        assertEquals(UserInfo.getTestDisplayName(user2), resp.getSharedByUser().getDisplayName());\n        // allowable operations not included - no params\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id, null, 200);\n        resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        assertNull(resp.getAllowableOperations());\n        setRequestContext(null);\n        // unauth access to get shared link info\n        params = Collections.singletonMap(\"include\", \"allowableOperations\"); // note: this will be ignore for unauth access\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id, params, 200);\n        resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        assertEquals(shared1Id, resp.getId());\n        assertEquals(fileName1, resp.getName());\n        assertEquals(d1Id, resp.getNodeId());\n        assertNull(resp.getAllowableOperations()); // include is ignored\n        assertNull(resp.getModifiedByUser().getId()); // userId not returned\n        assertEquals(UserInfo.getTestDisplayName(user1), resp.getModifiedByUser().getDisplayName());\n        assertNull(resp.getSharedByUser().getId()); // userId not returned\n        assertEquals(UserInfo.getTestDisplayName(user2), resp.getSharedByUser().getDisplayName());\n        // unauth access to file 1 content (via shared link)\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/content\", null, 200);\n        assertArrayEquals(file1_originalBytes, response.getResponseAsBytes());\n        Map<String, String> responseHeaders = response.getHeaders();\n        assertNotNull(responseHeaders);\n        assertEquals(file1_MimeType+\";charset=UTF-8\", responseHeaders.get(\"Content-Type\"));\n        assertNotNull(responseHeaders.get(\"Expires\"));\n        assertEquals(\"attachment; filename=\\\"\" + fileName1 + \"\\\"; filename*=UTF-8''\" + fileName1 + \"\", responseHeaders.get(\"Content-Disposition\"));\n        String lastModifiedHeader = responseHeaders.get(LAST_MODIFIED_HEADER);\n        assertNotNull(lastModifiedHeader);\n        // Test 304 response\n        Map<String, String> headers = Collections.singletonMap(IF_MODIFIED_SINCE_HEADER, lastModifiedHeader);\n        getSingle(URL_SHARED_LINKS, shared1Id + \"/content\", null, headers, 304);\n        // unauth access to file 1 content (via shared link) - without Content-Disposition header (attachment=false)\n        params = new HashMap<>();\n        params.put(\"attachment\", \"false\");\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/content\", params, 200);\n        assertArrayEquals(file1_originalBytes, response.getResponseAsBytes());\n        responseHeaders = response.getHeaders();\n        assertNotNull(responseHeaders);\n        assertEquals(file1_MimeType+\";charset=UTF-8\", responseHeaders.get(\"Content-Type\"));\n        assertNotNull(responseHeaders.get(LAST_MODIFIED_HEADER));\n        assertNotNull(responseHeaders.get(\"Expires\"));\n        assertNull(responseHeaders.get(\"Content-Disposition\"));\n        // unauth access to file 2 content (via shared link)\n        response = getSingle(QuickShareLinkEntityResource.class, shared2Id + \"/content\", null, 200);\n        assertArrayEquals(content2Text.getBytes(), response.getResponseAsBytes());\n        responseHeaders = response.getHeaders();\n        assertNotNull(responseHeaders);\n        assertEquals(file2_MimeType+\";charset=ISO-8859-1\", responseHeaders.get(\"Content-Type\"));\n        assertNotNull(responseHeaders.get(\"Expires\"));\n        assertNotNull(responseHeaders.get(LAST_MODIFIED_HEADER));\n        assertEquals(\"attachment; filename=\\\"\" + fileName2 + \"\\\"; filename*=UTF-8''\" + fileName2 + \"\", responseHeaders.get(\"Content-Disposition\"));\n        // -ve test - unauth access to get shared link file content - without Content-Disposition header (attachment=false) - header ignored (plain text is not in white list)\n        params = new HashMap<>();\n        params.put(\"attachment\", \"false\");\n        response = getSingle(QuickShareLinkEntityResource.class, shared2Id + \"/content\", params, 200);\n        assertEquals(\"attachment; filename=\\\"\" + fileName2 + \"\\\"; filename*=UTF-8''\" + fileName2 + \"\", response.getHeaders().get(\"Content-Disposition\"));\n        // -ve shared link rendition tests\n        {\n            // -ve test - try to get non-existent rendition content\n            getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/doclib/content\", null, 404);\n            // -ve test - try to get unregistered rendition content\n            getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/dummy/content\", null, 404);\n        }\n        // unauth access to get rendition info for a shared link (available => CREATED rendition only)\n        // -ve shared link rendition tests\n        {\n            // -ve test - try to get not created rendition for the given shared link\n            getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/doclib\", null, 404);\n            // -ve test - try to get unregistered rendition\n            getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/dummy\", null, 404);\n        }\n        // unauth access to get shared link renditions info (available => CREATED renditions only)\n        response = getAll(URL_SHARED_LINKS + \"/\" + shared1Id + \"/renditions\", null, 200);\n        List<Rendition> renditions = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), Rendition.class);\n        assertEquals(0, renditions.size());\n        // create rendition of pdf doc - note: for some reason create rendition of txt doc fail on build m/c (TBC) ?\n        setRequestContext(user2);\n        \n        Rendition rendition = createAndGetRendition(d1Id, \"doclib\");\n        assertNotNull(rendition);\n        assertEquals(Rendition.RenditionStatus.CREATED, rendition.getStatus());\n        setRequestContext(null);\n        // unauth access to get shared link renditions info (available => CREATED renditions only)\n        response = getAll(URL_SHARED_LINKS + \"/\" + shared1Id + \"/renditions\", null, 200);\n        renditions = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), Rendition.class);\n        assertEquals(1, renditions.size());\n        assertEquals(Rendition.RenditionStatus.CREATED, renditions.get(0).getStatus());\n        assertEquals(\"doclib\", renditions.get(0).getId());\n        {\n            // try to get a created rendition for the given shared link\n            getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/doclib\", null, 200);\n        }\n        // unauth access to get shared link file rendition content\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/doclib/content\", null, 200);\n        assertTrue(response.getResponseAsBytes().length > 0);\n        responseHeaders = response.getHeaders();\n        assertNotNull(responseHeaders);\n        assertEquals(MimetypeMap.MIMETYPE_IMAGE_PNG+\";charset=UTF-8\", responseHeaders.get(\"Content-Type\"));\n        assertNotNull(responseHeaders.get(LAST_MODIFIED_HEADER));\n        assertNotNull(responseHeaders.get(\"Expires\"));\n        String docName = \"doclib\";\n        assertEquals(\"attachment; filename=\\\"\" + docName + \"\\\"; filename*=UTF-8''\" + docName + \"\", responseHeaders.get(\"Content-Disposition\"));\n        // unauth access to get shared link file rendition content - without Content-Disposition header (attachment=false)\n        params = new HashMap<>();\n        params.put(\"attachment\", \"false\");\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/doclib/content\", params, 200);\n        assertTrue(response.getResponseAsBytes().length > 0);\n        responseHeaders = response.getHeaders();\n        assertNotNull(responseHeaders);\n        assertEquals(MimetypeMap.MIMETYPE_IMAGE_PNG+\";charset=UTF-8\", responseHeaders.get(\"Content-Type\"));\n        assertNotNull(responseHeaders.get(\"Expires\"));\n        assertNull(responseHeaders.get(\"Content-Disposition\"));\n        lastModifiedHeader = responseHeaders.get(LAST_MODIFIED_HEADER);\n        assertNotNull(lastModifiedHeader);\n        // Test 304 response\n        headers = Collections.singletonMap(IF_MODIFIED_SINCE_HEADER, lastModifiedHeader);\n        getSingle(URL_SHARED_LINKS, shared1Id + \"/renditions/doclib/content\", null, headers, 304);\n        // -ve delete tests\n        {\n            // -ve test - unauthenticated\n            setRequestContext(null);\n            deleteSharedLink(shared1Id, 401);\n            \n            setRequestContext(user1);\n            // -ve test - user1 cannot delete shared link\n            deleteSharedLink(shared1Id, 403);\n            \n            // -ve test - delete - cannot delete non-existent link\n            deleteSharedLink(\"dummy\", 404);\n        }\n        // -ve create tests\n        {\n            // As user 1 ...\n            // -ve test - try to create again (different user, that has read permission) - already exists\n            body = new HashMap<>();\n            body.put(\"nodeId\", d1Id);\n            post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 409);\n            // -ve - create - missing nodeId\n            body = new HashMap<>();\n            post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 400);\n            // -ve - create - unknown nodeId\n            body = new HashMap<>();\n            body.put(\"nodeId\", \"dummy\");\n            post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 404);\n            // -ve - create - try to link to folder (ie. not a file)\n            String f1Id = createFolder(myFolderNodeId, \"f1 \" + RUNID).getId();\n            body = new HashMap<>();\n            body.put(\"nodeId\", f1Id);\n            post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 400);\n            // -ve test - cannot create if user does not have permission to read\n            setRequestContext(user2);\n            body = new HashMap<>();\n            body.put(\"nodeId\", d2Id);\n            post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 403);\n            // -ve test - unauthenticated\n            setRequestContext(null);\n            body = new HashMap<>();\n            body.put(\"nodeId\", d1Id);\n            post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 401);\n        }\n        // delete shared link\n        setRequestContext(user2);\n        deleteSharedLink(shared1Id);\n        // -ve test - delete - cannot delete non-existent link\n        setRequestContext(user1);\n        deleteSharedLink(shared1Id, 404);\n        setRequestContext(user2);\n        response = getSingle(NodesEntityResource.class, d1Id, null, 200);\n        nodeResp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), Node.class);\n        assertEquals(docModifiedAt.getTime(), nodeResp.getModifiedAt().getTime()); // not changed\n        assertEquals(docModifiedBy, nodeResp.getModifiedByUser().getId()); // not changed (ie. not user2)\n        // -ve get tests\n        {\n            // try to get link that has been deleted (see above)\n            getSingle(QuickShareLinkEntityResource.class, shared1Id, null, 404);\n            getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/content\", null, 404);\n            // try to get non-existent link\n            getSingle(QuickShareLinkEntityResource.class, \"dummy\", null, 404);\n            getSingle(QuickShareLinkEntityResource.class, \"dummy/content\", null, 404);\n        }\n        // TODO if and when these tests are optionally runnable via remote env then we could skip this part of the test\n        // (else need to verify test mechanism for enterprise admin via jmx ... etc)\n        QuickShareLinksImpl quickShareLinks = applicationContext.getBean(\"quickShareLinks\", QuickShareLinksImpl.class);\n        try\n        {\n            quickShareLinks.setEnabled(false);\n            setRequestContext(user1);\n            // -ve - disabled service tests\n            body.put(\"nodeId\", \"dummy\");\n            post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 501);\n            setRequestContext(null);\n            getSingle(QuickShareLinkEntityResource.class, \"dummy\", null, 501);\n            getSingle(QuickShareLinkEntityResource.class, \"dummy/content\", null, 501);\n            setRequestContext(user1);\n            deleteSharedLink(\"dummy\", 501);\n        }\n        finally\n        {\n            quickShareLinks.setEnabled(true);\n        }\n    }\n    /**\n     * Tests find shared links to file (content)\n     *\n     * Note: relies on search service\n     *\n     * <p>GET:</p>\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links}\n     */\n    @Test\n    public void testSharedLinkFind() throws Exception\n    {\n        // As user 1 ...\n        setRequestContext(user1);\n        \n        Paging paging = getPaging(0, 100);\n        // Get all shared links visible to user 1 (note: for now assumes clean repo)\n        HttpResponse response = getAll(URL_SHARED_LINKS, paging, 200);\n        List<QuickShareLink> sharedLinks = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), QuickShareLink.class);\n        assertEquals(0, sharedLinks.size());\n        \n        // create doc d1 - in \"My\" folder\n        String myFolderNodeId = getMyNodeId();\n        String content1Text = \"The quick brown fox jumps over the lazy dog 1.\";\n        String docName1 = \"content\" + RUNID + \"_1.txt\";\n        Document doc1 = createTextFile(myFolderNodeId, docName1, content1Text);\n        String d1Id = doc1.getId();\n        // create doc2 - in \"Shared\" folder\n        String sharedFolderNodeId = getSharedNodeId();\n        String docName2 = \"content\" + RUNID + \"_2.txt\";\n        Document doc2 = createTextFile(sharedFolderNodeId, docName2, content1Text);\n        String d2Id = doc2.getId();\n        // create shared link to doc 1\n        Map<String, String> body = new HashMap<>();\n        body.put(\"nodeId\", d1Id);\n        response = post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 201);\n        QuickShareLink resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        String shared1Id = resp.getId();\n        // As user 2 ...\n        setRequestContext(user2);\n        // create shared link to doc 2\n        body = new HashMap<>();\n        body.put(\"nodeId\", d2Id);\n        response = post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 201);\n        resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        String shared2Id = resp.getId();\n        //\n        // find links\n        //\n        setRequestContext(user1);\n        response = getAll(URL_SHARED_LINKS, paging, 200);\n        sharedLinks = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), QuickShareLink.class);\n        assertEquals(2, sharedLinks.size());\n        assertEquals(shared2Id, sharedLinks.get(0).getId());\n        assertEquals(d2Id, sharedLinks.get(0).getNodeId());\n        assertEquals(shared1Id, sharedLinks.get(1).getId());\n        assertEquals(d1Id, sharedLinks.get(1).getNodeId());\n        setRequestContext(user2);\n        response = getAll(URL_SHARED_LINKS, paging, 200);\n        sharedLinks = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), QuickShareLink.class);\n        assertEquals(1, sharedLinks.size());\n        assertEquals(shared2Id, sharedLinks.get(0).getId());\n        assertEquals(d2Id, sharedLinks.get(0).getNodeId());\n        setRequestContext(user1);\n        // find my links\n        Map<String, String> params = new HashMap<>();\n        params.put(\"where\", \"(\"+ QuickShareLinks.PARAM_SHAREDBY+\"='\"+People.DEFAULT_USER+\"')\");\n        response = getAll(URL_SHARED_LINKS, paging, params, 200);\n        sharedLinks = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), QuickShareLink.class);\n        assertEquals(1, sharedLinks.size());\n        assertEquals(shared1Id, sharedLinks.get(0).getId());\n        assertEquals(d1Id, sharedLinks.get(0).getNodeId());\n        // find links shared by a given user\n        params = new HashMap<>();\n        params.put(\"where\", \"(\"+ QuickShareLinks.PARAM_SHAREDBY+\"='\"+user2+\"')\");\n        response = getAll(URL_SHARED_LINKS, paging, params, 200);\n        sharedLinks = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), QuickShareLink.class);\n        assertEquals(1, sharedLinks.size());\n        assertEquals(shared2Id, sharedLinks.get(0).getId());\n        assertEquals(d2Id, sharedLinks.get(0).getNodeId());\n        setRequestContext(null);\n        // -ve test - unauthenticated\n        getAll(URL_SHARED_LINKS, paging, params, 401);\n        // delete the shared links\n        setRequestContext(user1);\n        deleteSharedLink(shared1Id);\n        setRequestContext(user2);\n        deleteSharedLink(shared2Id);\n        // TODO if and when these tests are optionally runnable via remote env then we could skip this part of the test\n        // (else need to verify test mechanism for enterprise admin via jmx ... etc)\n        setRequestContext(user1);\n        \n        QuickShareLinksImpl quickShareLinks = applicationContext.getBean(\"quickShareLinks\", QuickShareLinksImpl.class);\n        try\n        {\n            quickShareLinks.setEnabled(false);\n            // -ve - disabled service tests\n            getAll(URL_SHARED_LINKS, paging, 501);\n        }\n        finally\n        {\n            quickShareLinks.setEnabled(true);\n        }\n    }\n    /**\n     * Tests emailing shared links.\n     * <p>POST:</p>\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>/email}\n     */\n    @Test\n    public void testEmailSharedLink() throws Exception\n    {\n        setRequestContext(user1);\n        \n        // Create plain text document\n        String myFolderNodeId = getMyNodeId();\n        String contentText = \"The quick brown fox jumps over the lazy dog.\";\n        String fileName = \"file-\" + RUNID + \".txt\";\n        Document doc = createTextFile(myFolderNodeId, fileName, contentText);\n        String docId = doc.getId();\n        // Create shared link to document\n        Map<String, String> body = Collections.singletonMap(\"nodeId\", docId);\n        HttpResponse response = post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 201);\n        QuickShareLink resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        String sharedId = resp.getId();\n        assertNotNull(sharedId);\n        assertEquals(fileName, resp.getName());\n        // Email request with minimal properties\n        QuickShareLinkEmailRequest request = new QuickShareLinkEmailRequest();\n        request.setClient(\"share\");\n        List<String> recipients = new ArrayList<>(2);\n        recipients.add(user2 + \"@acme.test\");\n        recipients.add(user2 + \"@ping.test\");\n        request.setRecipientEmails(recipients);\n        post(getEmailSharedLinkUrl(sharedId), RestApiUtil.toJsonAsString(request), 202);\n        // Email request with all the properties\n        request = new QuickShareLinkEmailRequest();\n        request.setClient(\"share\");\n        request.setMessage(\"My custom message!\");\n        request.setLocale(Locale.UK.toString());\n        recipients = Collections.singletonList(user2 + \"@acme.test\");\n        request.setRecipientEmails(recipients);\n        post(getEmailSharedLinkUrl(sharedId), RestApiUtil.toJsonAsString(request), 202);\n        // -ve tests\n        // sharedId path parameter does not exist\n        post(getEmailSharedLinkUrl(sharedId + System.currentTimeMillis()), RestApiUtil.toJsonAsString(request), 404);\n        // Unregistered client\n        request = new QuickShareLinkEmailRequest();\n        request.setClient(\"VeryCoolClient\" + System.currentTimeMillis());\n        List<String> user2Email = Collections.singletonList(user2 + \"@acme.test\");\n        request.setRecipientEmails(user2Email);\n        post(getEmailSharedLinkUrl(sharedId), RestApiUtil.toJsonAsString(request), 404);\n        // client is mandatory\n        request.setClient(null);\n        post(getEmailSharedLinkUrl(sharedId), RestApiUtil.toJsonAsString(request), 400);\n        // recipientEmails is mandatory\n        request.setClient(\"share\");\n        request.setRecipientEmails(null);\n        post(getEmailSharedLinkUrl(sharedId), RestApiUtil.toJsonAsString(request), 400);\n        // TODO if and when these tests are optionally runnable via remote env then we could skip this part of the test\n        // (else need to verify test mechanism for enterprise admin via jmx ... etc)\n        QuickShareLinksImpl quickShareLinks = applicationContext.getBean(\"quickShareLinks\", QuickShareLinksImpl.class);\n        try\n        {\n            quickShareLinks.setEnabled(false);\n            request = new QuickShareLinkEmailRequest();\n            request.setClient(\"share\");\n            request.setRecipientEmails(user2Email);\n            post(getEmailSharedLinkUrl(sharedId), RestApiUtil.toJsonAsString(request), 501);\n        }\n        finally\n        {\n            quickShareLinks.setEnabled(true);\n        }\n    }\n    /**\n     * Tests shared links to file (content) in a multi-tenant system.\n     *\n     * <p>POST:</p>\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links}\n     *\n     * <p>DELETE:</p>\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>}\n     *\n     * <p>GET:</p>\n     * The following do not require authentication\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>}\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>/content}\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>/renditions}\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>/renditions/<renditionId>}\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links/<sharedId>/renditions/<renditionId>/content}\n     *\n     */\n    // TODO now covered by testSharedLinkCreateGetDelete ? (since base class now uses tenant context by default)\n    @Test\n    public void testSharedLinkCreateGetDelete_MultiTenant() throws Exception\n    {\n        // As user1\n        setRequestContext(user1);\n        String docLibNodeId = getSiteContainerNodeId(tSiteId, \"documentLibrary\");\n        \n        String folderName = \"folder\" + System.currentTimeMillis() + \"_1\";\n        String folderId = createFolder(docLibNodeId, folderName, null).getId();\n        // create doc d1 - pdf\n        String fileName1 = \"quick\" + RUNID + \"_1.pdf\";\n        File file1 = getResourceFile(\"quick.pdf\");\n        byte[] file1_originalBytes = Files.readAllBytes(Paths.get(file1.getAbsolutePath()));\n        String file1_MimeType = MimetypeMap.MIMETYPE_PDF;\n        MultiPartBuilder.MultiPartRequest reqBody = MultiPartBuilder.create()\n                    .setFileData(new MultiPartBuilder.FileData(fileName1, file1, file1_MimeType))\n                    .build();\n        HttpResponse response = post(getNodeChildrenUrl(folderId), reqBody.getBody(), null, reqBody.getContentType(), 201);\n        Document doc1 = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), Document.class);\n        String d1Id = doc1.getId();\n        assertNotNull(d1Id);\n        // create shared link to document 1\n        Map<String, String> body = new HashMap<>();\n        body.put(\"nodeId\", d1Id);\n        response = post(URL_SHARED_LINKS, toJsonAsStringNonNull(body), 201);\n        QuickShareLink resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        String shared1Id = resp.getId();\n        assertNotNull(shared1Id);\n        assertEquals(d1Id, resp.getNodeId());\n        assertEquals(fileName1, resp.getName());\n        assertEquals(file1_MimeType, resp.getContent().getMimeType());\n        assertEquals(user1, resp.getSharedByUser().getId());\n        // allowable operations not included - no params\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id, null, 200);\n        resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        assertNull(resp.getAllowableOperations());\n        setRequestContext(null);\n        // unauth access to get shared link info\n        Map<String, String> params = Collections.singletonMap(\"include\", \"allowableOperations\"); // note: this will be ignore for unauth access\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id, params, 200);\n        resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        assertEquals(shared1Id, resp.getId());\n        assertEquals(fileName1, resp.getName());\n        assertEquals(d1Id, resp.getNodeId());\n        assertNull(resp.getAllowableOperations()); // include is ignored\n        // unauth access to file 1 content (via shared link)\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/content\", null, 200);\n        assertArrayEquals(file1_originalBytes, response.getResponseAsBytes());\n        Map<String, String> responseHeaders = response.getHeaders();\n        assertNotNull(responseHeaders);\n        assertEquals(file1_MimeType + \";charset=UTF-8\", responseHeaders.get(\"Content-Type\"));\n        assertNotNull(responseHeaders.get(\"Expires\"));\n        assertEquals(\"attachment; filename=\\\"\" + fileName1 + \"\\\"; filename*=UTF-8''\" + fileName1 + \"\", responseHeaders.get(\"Content-Disposition\"));\n        String lastModifiedHeader = responseHeaders.get(LAST_MODIFIED_HEADER);\n        assertNotNull(lastModifiedHeader);\n        // Test 304 response\n        Map<String, String> headers = Collections.singletonMap(IF_MODIFIED_SINCE_HEADER, lastModifiedHeader);\n        getSingle(URL_SHARED_LINKS, shared1Id + \"/content\", null, headers, 304);\n        // unauth access to file 1 content (via shared link) - without Content-Disposition header (attachment=false)\n        params = new HashMap<>();\n        params.put(\"attachment\", \"false\");\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/content\", params, 200);\n        assertArrayEquals(file1_originalBytes, response.getResponseAsBytes());\n        responseHeaders = response.getHeaders();\n        assertNotNull(responseHeaders);\n        assertEquals(file1_MimeType + \";charset=UTF-8\", responseHeaders.get(\"Content-Type\"));\n        assertNotNull(responseHeaders.get(LAST_MODIFIED_HEADER));\n        assertNotNull(responseHeaders.get(\"Expires\"));\n        assertNull(responseHeaders.get(\"Content-Disposition\"));\n        // -ve shared link rendition tests\n        {\n            // -ve test - try to get non-existent rendition content\n            getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/doclib/content\", null, 404);\n            // -ve test - try to get unregistered rendition content\n            getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/dummy/content\", null, 404);\n        }\n        // unauth access to get rendition info for a shared link (available => CREATED rendition only)\n        // -ve shared link rendition tests\n        {\n            // -ve test - try to get not created rendition for the given shared link\n            getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/doclib\", null, 404);\n            // -ve test - try to get unregistered rendition\n            getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/dummy\", null, 404);\n        }\n        // unauth access to get shared link renditions info (available => CREATED renditions only)\n        response = getAll(URL_SHARED_LINKS + \"/\" + shared1Id + \"/renditions\", null, 200);\n        List<Rendition> renditions = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), Rendition.class);\n        assertEquals(0, renditions.size());\n        // create rendition of pdf doc - note: for some reason create rendition of txt doc fail on build m/c (TBC) ?\n        setRequestContext(user1);\n        Rendition rendition = createAndGetRendition(d1Id, \"doclib\");\n        assertNotNull(rendition);\n        assertEquals(Rendition.RenditionStatus.CREATED, rendition.getStatus());\n        setRequestContext(null);\n        // unauth access to get shared link renditions info (available => CREATED renditions only)\n        response = getAll(URL_SHARED_LINKS + \"/\" + shared1Id + \"/renditions\", null, 200);\n        renditions = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), Rendition.class);\n        assertEquals(1, renditions.size());\n        assertEquals(Rendition.RenditionStatus.CREATED, renditions.get(0).getStatus());\n        assertEquals(\"doclib\", renditions.get(0).getId());\n        // unauth access to get rendition info for a shared link (available => CREATED rendition only)\n        {\n            // get a created rendition for the given shared link\n            getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/doclib\", null, 200);\n        }\n        // unauth access to get shared link file rendition content\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/doclib/content\", null, 200);\n        assertTrue(response.getResponseAsBytes().length > 0);\n        responseHeaders = response.getHeaders();\n        assertNotNull(responseHeaders);\n        assertEquals(MimetypeMap.MIMETYPE_IMAGE_PNG + \";charset=UTF-8\", responseHeaders.get(\"Content-Type\"));\n        assertNotNull(responseHeaders.get(LAST_MODIFIED_HEADER));\n        assertNotNull(responseHeaders.get(\"Expires\"));\n        String docName = \"doclib\";\n        assertEquals(\"attachment; filename=\\\"\" + docName + \"\\\"; filename*=UTF-8''\" + docName + \"\", responseHeaders.get(\"Content-Disposition\"));\n        // unauth access to get shared link file rendition content - without Content-Disposition header (attachment=false)\n        params = new HashMap<>();\n        params.put(\"attachment\", \"false\");\n        response = getSingle(QuickShareLinkEntityResource.class, shared1Id + \"/renditions/doclib/content\", params, 200);\n        assertTrue(response.getResponseAsBytes().length > 0);\n        responseHeaders = response.getHeaders();\n        assertNotNull(responseHeaders);\n        assertEquals(MimetypeMap.MIMETYPE_IMAGE_PNG + \";charset=UTF-8\", responseHeaders.get(\"Content-Type\"));\n        assertNotNull(responseHeaders.get(\"Expires\"));\n        assertNull(responseHeaders.get(\"Content-Disposition\"));\n        lastModifiedHeader = responseHeaders.get(LAST_MODIFIED_HEADER);\n        assertNotNull(lastModifiedHeader);\n        // Test 304 response\n        headers = Collections.singletonMap(IF_MODIFIED_SINCE_HEADER, lastModifiedHeader);\n        getSingle(URL_SHARED_LINKS, shared1Id + \"/renditions/doclib/content\", null, headers, 304);\n        \n        // -ve test - userTwoN1 cannot delete shared link\n        setRequestContext(user2);\n        deleteSharedLink(shared1Id, 403);\n        // -ve test - unauthenticated\n        setRequestContext(null);\n        deleteSharedLink(shared1Id, 401);\n        // delete shared link\n        setRequestContext(user1);\n        deleteSharedLink(shared1Id);\n    }\n    /**\n     * Tests shared links to file with expiry date.\n     * <p>POST:</p>\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links}\n     */\n    @Test\n    public void testSharedLinkWithExpiryDate() throws Exception\n    {\n        // Clear any hanging security context from other tests.\n        // We add it here as getSchedules method will throw an exception.\n        AuthenticationUtil.clearCurrentSecurityContext();\n        final int numOfSchedules = getSchedules();\n        setRequestContext(user1);\n        // Create plain text document\n        String myFolderNodeId = getMyNodeId();\n        String contentText = \"The quick brown fox jumps over the lazy dog.\";\n        String fileName = \"file-\" + RUNID + \".txt\";\n        String docId = createTextFile(myFolderNodeId, fileName, contentText).getId();\n        // Create shared link to document\n        QuickShareLink body = new QuickShareLink();\n        body.setNodeId(docId);\n        // Invalid time - passed time\n        body.setExpiresAt(DateTime.now().minusSeconds(20).toDate());\n        post(URL_SHARED_LINKS, RestApiUtil.toJsonAsString(body), 400);\n        // The default expiryDate period is DAYS (see: 'system.quickshare.expiry_date.enforce.minimum.period' property),\n        // so the expiry date must be at least 1 day from now\n        body.setExpiresAt(DateTime.now().plusMinutes(5).toDate());\n        post(URL_SHARED_LINKS, RestApiUtil.toJsonAsString(body), 400);\n        // Set the expiry date to be in the next 2 days\n        Date time = DateTime.now().plusDays(2).toDate();\n        body.setExpiresAt(time);\n        // Post the share request\n        HttpResponse response = post(URL_SHARED_LINKS, RestApiUtil.toJsonAsString(body), 201);\n        QuickShareLink resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        assertNotNull(resp.getId());\n        assertEquals(fileName, resp.getName());\n        assertEquals(time, resp.getExpiresAt());\n        // Check that the schedule is persisted\n        // Note: No need to check for expiry actions here, as the scheduledPersistedActionService\n        // checks that the expiry action is persisted first and if it wasn't will throw an exception.\n        assertEquals(numOfSchedules + 1, getSchedules());\n        // Delete the shared link\n        deleteSharedLink(resp.getId());\n        // Check the shred link has been deleted\n        getSingle(QuickShareLinkEntityResource.class, resp.getId(), null, 404);\n        // As we deleted the shared link, the expiry action and its related schedule should have been removed as well.\n        // Check that the schedule is deleted\n        assertEquals(numOfSchedules, getSchedules());\n        // Set the expiry date to be in the next 24 hours\n        time = DateTime.now().plusDays(1).toDate();\n        body.setExpiresAt(time);\n        // Post the share request\n        response = post(URL_SHARED_LINKS, RestApiUtil.toJsonAsString(body), 201);\n        resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        assertNotNull(resp.getId());\n        // Check that the schedule is persisted\n        assertEquals(numOfSchedules + 1, getSchedules());\n        // Get the shared link info\n        response = getSingle(QuickShareLinkEntityResource.class, resp.getId(), null, 200);\n        resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        assertEquals(fileName, resp.getName());\n        assertEquals(time, resp.getExpiresAt());\n        // Change the expiry time to be in the next 6 seconds.\n        // Here we'll bypass the QuickShareService in order to force the new time.\n        // As the QuickShareService by default will enforce the expiry date to not be less than 24 hours.\n        forceNewExpiryTime(resp.getId(), DateTime.now().plusSeconds(6).toDate());\n        // Wait for 10 seconds - the expiry action should be triggered in the next 6 seconds.\n        Thread.sleep((10000));\n        // Check that the expiry action unshared the link\n        getSingle(QuickShareLinkEntityResource.class, resp.getId(), null, 404);\n        // The expiry action and its related schedule should have been removed after the link unshared by the action executor.\n        // Check that the schedule is deleted\n        assertEquals(numOfSchedules, getSchedules());\n        // Create a shared link without an expiry date\n        body.setExpiresAt(null);\n        response = post(URL_SHARED_LINKS, RestApiUtil.toJsonAsString(body), 201);\n        resp = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        assertNotNull(resp.getId());\n        assertNull(\"The 'expiryDate' property should have benn null.\", resp.getExpiresAt());\n        assertEquals(numOfSchedules, getSchedules());\n        // Delete the share link that hasn't got an expiry date\n        deleteSharedLink(resp.getId());\n    }\n    @Override\n    public String getScope()\n    {\n        return \"public\";\n    }\n    /**\n     * Tests for get /shared-links?include=path\n     *\n     * <p>GET:</p>\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links?include=path}\n     */\n    @Test\n    public void testGetSharedLinksIncludePath() throws Exception\n    {\n        String contentText = \"includePathTest\" + RUNID;\n        \n        Paging paging = getPaging(0, 100);\n        \n        Map<String, String> queryParams = new HashMap<>();\n        queryParams.put(\"include\", \"path\");\n        \n        // As user 1: Test the backward compatibility by checking response with and without path is consistent when no shared-links\n        setRequestContext(user1);\n        // Get all shared links visible to user 1\n        HttpResponse response = getAll(URL_SHARED_LINKS, paging, 200);\n        List<QuickShareLink> sharedLinks = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), QuickShareLink.class);\n        \n        // Check that the same no of items is returned with include=path\n        response = getAll(URL_SHARED_LINKS, paging, queryParams, 200);\n        List<QuickShareLink> sharedLinksWithPath = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), QuickShareLink.class);\n        assertEquals(\"get /shared-links/ API returns same no of shared-links with or without include=path, when there are no shared-links\", sharedLinks, sharedLinksWithPath);\n        \n        // Create Files in various locations: My Files, SharedFiles, Sites with different visibility\n        // Create doc in \"My Files\"\n        Document myFile = createTextFile(getMyNodeId(), \"MyFile\" + RUNID + \".txt\", contentText);\n        // Create doc in \"Shared\" folder\n        Document sharedFile = createTextFile(getSharedNodeId(), \"SharedFile\" + RUNID + \".txt\", contentText);\n        \n        // Create Sites\n        Site publicSite = createSite (\"TestSite-Public-\" + RUNID, SiteVisibility.PUBLIC);\n        Site modSite = createSite (\"TestSite-Moderate-\" + RUNID, SiteVisibility.MODERATED);\n        Site privateSite = createSite (\"TestSite-Private-\" + RUNID, SiteVisibility.PRIVATE);\n        \n        // Create file in Site Public > DocumentLibrary\n        String docLibPub = getSiteContainerNodeId(publicSite.getId(), \"documentLibrary\");\n        Document filePublic = createTextFile(docLibPub, \"filePublic.txt\", contentText);\n        \n        // Create files in Site Moderated > DocumentLibrary > Folder 1 and Folder 2\n        String docLibMod = getSiteContainerNodeId(modSite.getId(), \"documentLibrary\");\n        Folder folder1 = createFolder(docLibMod, \"1\");\n        Folder folder2 = createFolder(docLibMod, \"2\");\n        Document fileMod = createTextFile(folder1.getId(), \"fileMod.txt\", contentText);\n        Document fileMod2 = createTextFile(folder2.getId(), \"fileMod2.txt\", contentText);\n        \n        // Create file in Site Private > DocumentLibrary\n        String docLibPvt = getSiteContainerNodeId(privateSite.getId(), \"documentLibrary\");\n        Document filePrivate = createTextFile(docLibPvt, \"filePrivate.txt\", contentText);\n        \n        // Share the files above in: My Files, SharedFiles, Sites with different visibility\n        String myFileLinkId = postSharedLink(myFile);\n        String sharedLinkId = postSharedLink(sharedFile);\n  \n        String filePublicLinkId = postSharedLink(filePublic);\n        String fileModLinkId = postSharedLink(fileMod);\n        String fileMod2LinkId = postSharedLink(fileMod2);\n        String filePrivateLinkId = postSharedLink(filePrivate);\n        \n        // Grant user2: Consumer Permission for Moderated Site > File1\n        List<NodePermissions.NodePermission> locallySetPermissions = new ArrayList<>();\n        locallySetPermissions.add(new NodePermissions.NodePermission(user2, PermissionService.CONSUMER, AccessStatus.ALLOWED.toString()));\n        \n        NodePermissions nodePermissions = new NodePermissions();\n        nodePermissions.setIsInheritanceEnabled(false);\n        nodePermissions.setLocallySet(locallySetPermissions);\n        \n        Document docPermissions = new Document();\n        docPermissions.setPermissions(nodePermissions);\n        put(URL_NODES, fileMod.getId(), toJsonAsStringNonNull(docPermissions), null, 200);\n        \n        // Grant user2: Consumer Permission for Moderated Site > Folder 2, File2\n        put(URL_NODES, fileMod2.getId(), toJsonAsStringNonNull(docPermissions), null, 200);\n        \n        Folder folderPermissions = new Folder();\n        folderPermissions.setPermissions(nodePermissions);\n        put(URL_NODES, folder2.getId(), toJsonAsStringNonNull(folderPermissions), null, 200);\n        \n        // Get links For User1\n        setRequestContext(user1);\n        \n        response = getSingle(QuickShareLinkEntityResource.class, myFileLinkId, null, 200);\n        QuickShareLink link = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        assertNull(\"get /shared-links/<id> API does not return Path info by default\", link.getPath());\n        \n        // Path info is not included for get shared-links/<id>\n        response = getSingle(QuickShareLinkEntityResource.class, myFileLinkId, queryParams, 200);\n        link = RestApiUtil.parseRestApiEntry(response.getJsonResponse(), QuickShareLink.class);\n        assertNull(\"get /shared-links/<id> API ignores Path info when requested as it is a noAuth API.\", link.getPath());\n        \n        response = getAll(URL_SHARED_LINKS, paging, 200);\n        sharedLinks = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), QuickShareLink.class);\n        assertEquals(\"API returns correct shared-links as expected: without path info\", 6, sharedLinks.size());\n        sharedLinks.forEach(sharedLink -> assertNull(\"API does not return Path info for any shared-links by default\", sharedLink.getPath()));\n        \n        // Path info is included for get shared-links when requested\n        response = getAll(URL_SHARED_LINKS, paging, queryParams, 200);\n        sharedLinks = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), QuickShareLink.class);\n        \n        // Complete path info is retrieved for the user with access to the complete path\n        assertEquals(\"API returns correct shared-links as expected: with path info\", 6, sharedLinks.size());\n        sharedLinks.forEach(sharedLink -> assertTrue(\"API returns Complete Path info for each link when requested by content owner\", sharedLink.getPath().getIsComplete()));\n        // Get links For User2\n        setRequestContext(user2);\n        response = getAll(URL_SHARED_LINKS, paging, 200);\n        sharedLinks = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), QuickShareLink.class);\n        \n        // Path info is not included when not requested\n        assertEquals(\"API returns correct shared-links as expected for user2: without path info\", 4, sharedLinks.size());\n        sharedLinks.forEach(sharedLink -> assertNull(\"get /shared-links/ API does not return Path info for any shared-links by default\", sharedLink.getPath()));\n        \n        response = getAll(URL_SHARED_LINKS, paging, queryParams, 200);\n        sharedLinks = RestApiUtil.parseRestApiEntries(response.getJsonResponse(), QuickShareLink.class);\n        \n        // Path info is retrieved for the user with access to the complete path: Sorted as LIFO\n        assertEquals(\"API returns correct shared-links as expected for user2: with path info\", 4, sharedLinks.size());\n        sharedLinks.forEach(sharedLink -> assertNotNull(\"API returns Path info for each link when requested by user2\", sharedLink.getPath()));\n        \n        // Moderated Site > fileMod2: Path only includes elements where user2 has access\n        QuickShareLink sharedLink = sharedLinks.get(0);\n        assertEquals(\"Incorrect sort order or SharedLink ID for fileMod2: \" + sharedLink, fileMod2LinkId, sharedLink.getId());\n        \n        PathInfo path = sharedLink.getPath();\n        assertEquals(\"Complete Path is returned even when user2 does not have appropriate permissions. SharedLink Path: \" + path, false, path.getIsComplete());\n        assertEquals(\"Path omits immediate Parent folder Name when user has access to it. SharedLink Path: \" + path, \"/\" + folder2.getName(), path.getName());\n        assertEquals(\"Path omits immediate Parent folder ID when user has access to it. SharedLink Path: \" + path, folder2.getId(), path.getElements().get(0).getId());\n        \n        // Moderated Site > fileMod: Path empty when user2 does not have access to the immediate parent\n        sharedLink = sharedLinks.get(1);\n        assertEquals(\"Incorrect sort order or SharedLink ID for fileMod: \" + sharedLink, fileModLinkId, sharedLink.getId());\n        path = sharedLink.getPath();\n        \n        assertNotNull(\"Path info is not included in the response when user does not have right permissions. SharedLink Path: \" + path, path);\n        assertNull(\"Path Name is returned when user does not have right permissions. SharedLink Path: \" + path, path.getName());\n        assertNull(\"Path info is returned when user does not have right permissions. SharedLink Path: \" + path, path.getIsComplete());\n        assertNull(\"Path Elements are returned when user does not have right permissions. SharedLink Path: \" + path, path.getElements());\n       \n        // Public Site > filePublic: Path includes all the elements when user2 has appropriate access\n        sharedLink = sharedLinks.get(2);\n        assertEquals(\"Incorrect sort order or SharedLink ID for filePublic: \" + sharedLink, filePublicLinkId, sharedLink.getId());\n        \n        path = sharedLink.getPath();\n        \n        assertEquals(\"Complete Path is not returned for user2 for public files. SharedLink Path: \" + path, true, path.getIsComplete());\n        assertEquals(\"Incorrect Path Name for Public Site Files. SharedLink Path: \" + path, \"/Company Home/Sites/\" + publicSite.getId() + \"/documentLibrary\", path.getName());\n        assertEquals(\"Incorrect Path Elements for Public Site Files. SharedLink Path: \" + path, 4, path.getElements().size());\n        assertEquals(\"Incorrect ID in the Path for Company Home. SharedLink Path: \" + path, getRootNodeId(), path.getElements().get(0).getId());\n        assertEquals(\"Incorrect ID in the Path for Public Site. SharedLink Path: \" + path, publicSite.getGuid(), path.getElements().get(2).getId());\n        assertEquals(\"Incorrect ID in the Path for Public Site DocLib. SharedLink Path: \" + path, docLibPub, path.getElements().get(3).getId());\n        \n        // Shared Files > shared: Path includes all the elements when user2 has appropriate access\n        sharedLink = sharedLinks.get(3);\n        assertEquals(\"Incorrect sort order or SharedLink ID for sharedFiles: \" + sharedLink, sharedLinkId, sharedLink.getId());\n        \n        path = sharedLink.getPath();\n        \n        assertEquals(\"Complete Path is not returned for user2 for shared files. SharedLink Path: \" + path, true, path.getIsComplete());\n        assertEquals(\"Incorrect Path Name for Shared Files. SharedLink Path: \" + path, \"/Company Home/Shared\", path.getName());\n        assertEquals(\"Incorrect Path Elements for Shared Files. SharedLink Path: \" + path, 2, path.getElements().size());\n        assertEquals(\"Incorrect ID in the Path for Company Home. SharedLink Path: \" + path, getRootNodeId(), path.getElements().get(0).getId());\n        assertEquals(\"Incorrect ID in the path for Shared Files. SharedLink Path: \" + path, getSharedNodeId(), path.getElements().get(1).getId());\n        // Unauthorized request returns 401\n        setRequestContext(null, \"UserNotKnown\", DEFAULT_ADMIN_PWD);\n        queryParams = new HashMap<>();\n        getAll(URL_SHARED_LINKS, paging, queryParams, 401);\n        // Unauthenticated request returns 401\n        setRequestContext(user2, null, null);\n        getAll(URL_SHARED_LINKS, paging, queryParams, 401);\n        // Delete the shared links\n        setRequestContext(user1);\n        deleteSharedLink(myFileLinkId);\n        deleteSharedLink(sharedLinkId);\n        deleteSharedLink(filePublicLinkId);\n        deleteSharedLink(fileModLinkId);\n        deleteSharedLink(fileMod2LinkId);\n        deleteSharedLink(filePrivateLinkId);\n    }\n    /**\n     * Tests create shared-links with 'include' parameter.\n     *\n     * <p>POST:</p>\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links?include=path}\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links?include=allowableOperations}\n     * {@literal <host>:<port>/alfresco/api/<networkId>/public/alfresco/versions/1/shared-links?include=path,allowableOperations}\n     */\n    @Test\n    public void testCreateSharedLinkWithIncludeParam() throws Exception\n    {\n        String content = \"The quick brown fox jumps over the lazy dog.\";\n", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "length": 4714, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "f686b35e3b09eb7785a0f43edd85d7fed87d4fd197e2ff59"}
{"input": "", "context": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.lang3.math;\nimport static org.apache.commons.lang3.JavaVersion.JAVA_1_3;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport org.apache.commons.lang3.SystemUtils;\nimport org.junit.Test;\n/**\n * Unit tests {@link org.apache.commons.lang3.math.NumberUtils}.\n *\n * @version $Id$\n */\npublic class NumberUtilsTest {\n    //-----------------------------------------------------------------------\n    @Test\n    public void testConstructor() {\n        assertNotNull(new NumberUtils());\n        Constructor<?>[] cons = NumberUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n        assertTrue(Modifier.isPublic(NumberUtils.class.getModifiers()));\n        assertFalse(Modifier.isFinal(NumberUtils.class.getModifiers()));\n    }\n    //---------------------------------------------------------------------\n    /**\n     * Test for {@link NumberUtils#toInt(String)}.\n     */\n    @Test\n    public void testToIntString() {\n        assertTrue(\"toInt(String) 1 failed\", NumberUtils.toInt(\"12345\") == 12345);\n        assertTrue(\"toInt(String) 2 failed\", NumberUtils.toInt(\"abc\") == 0);\n        assertTrue(\"toInt(empty) failed\", NumberUtils.toInt(\"\") == 0);\n        assertTrue(\"toInt(null) failed\", NumberUtils.toInt(null) == 0);\n    }\n    /**\n     * Test for {@link NumberUtils#toInt(String, int)}.\n     */\n    @Test\n    public void testToIntStringI() {\n        assertTrue(\"toInt(String,int) 1 failed\", NumberUtils.toInt(\"12345\", 5) == 12345);\n        assertTrue(\"toInt(String,int) 2 failed\", NumberUtils.toInt(\"1234.5\", 5) == 5);\n    }\n    /**\n     * Test for {@link NumberUtils#toLong(String)}.\n     */\n    @Test\n    public void testToLongString() {\n        assertTrue(\"toLong(String) 1 failed\", NumberUtils.toLong(\"12345\") == 12345l);\n        assertTrue(\"toLong(String) 2 failed\", NumberUtils.toLong(\"abc\") == 0l);\n        assertTrue(\"toLong(String) 3 failed\", NumberUtils.toLong(\"1L\") == 0l);\n        assertTrue(\"toLong(String) 4 failed\", NumberUtils.toLong(\"1l\") == 0l);\n        assertTrue(\"toLong(Long.MAX_VALUE) failed\", NumberUtils.toLong(Long.MAX_VALUE+\"\") == Long.MAX_VALUE);\n        assertTrue(\"toLong(Long.MIN_VALUE) failed\", NumberUtils.toLong(Long.MIN_VALUE+\"\") == Long.MIN_VALUE);\n        assertTrue(\"toLong(empty) failed\", NumberUtils.toLong(\"\") == 0l);\n        assertTrue(\"toLong(null) failed\", NumberUtils.toLong(null) == 0l);\n    }\n    /**\n     * Test for {@link NumberUtils#toLong(String, long)}.\n     */\n    @Test\n    public void testToLongStringL() {\n        assertTrue(\"toLong(String,long) 1 failed\", NumberUtils.toLong(\"12345\", 5l) == 12345l);\n        assertTrue(\"toLong(String,long) 2 failed\", NumberUtils.toLong(\"1234.5\", 5l) == 5l);\n    }\n    /**\n     * Test for {@link NumberUtils#toFloat(String)}.\n     */\n    @Test\n    public void testToFloatString() {\n        assertTrue(\"toFloat(String) 1 failed\", NumberUtils.toFloat(\"-1.2345\") == -1.2345f);\n        assertTrue(\"toFloat(String) 2 failed\", NumberUtils.toFloat(\"1.2345\") == 1.2345f);\n        assertTrue(\"toFloat(String) 3 failed\", NumberUtils.toFloat(\"abc\") == 0.0f);\n        assertTrue(\"toFloat(Float.MAX_VALUE) failed\", NumberUtils.toFloat(Float.MAX_VALUE+\"\") ==  Float.MAX_VALUE);\n        assertTrue(\"toFloat(Float.MIN_VALUE) failed\", NumberUtils.toFloat(Float.MIN_VALUE+\"\") == Float.MIN_VALUE);\n        assertTrue(\"toFloat(empty) failed\", NumberUtils.toFloat(\"\") == 0.0f);\n        assertTrue(\"toFloat(null) failed\", NumberUtils.toFloat(null) == 0.0f);\n    }\n    /**\n     * Test for {@link NumberUtils#toFloat(String, float)}.\n     */\n    @Test\n    public void testToFloatStringF() {\n        assertTrue(\"toFloat(String,int) 1 failed\", NumberUtils.toFloat(\"1.2345\", 5.1f) == 1.2345f);\n        assertTrue(\"toFloat(String,int) 2 failed\", NumberUtils.toFloat(\"a\", 5.0f) == 5.0f);\n    }\n    /**\n     * Test for {@link NumberUtils#toDouble(String)}.\n     */\n    @Test\n    public void testStringToDoubleString() {\n        assertTrue(\"toDouble(String) 1 failed\", NumberUtils.toDouble(\"-1.2345\") == -1.2345d);\n        assertTrue(\"toDouble(String) 2 failed\", NumberUtils.toDouble(\"1.2345\") == 1.2345d);\n        assertTrue(\"toDouble(String) 3 failed\", NumberUtils.toDouble(\"abc\") == 0.0d);\n        assertTrue(\"toDouble(Double.MAX_VALUE) failed\", NumberUtils.toDouble(Double.MAX_VALUE+\"\") == Double.MAX_VALUE);\n        assertTrue(\"toDouble(Double.MIN_VALUE) failed\", NumberUtils.toDouble(Double.MIN_VALUE+\"\") == Double.MIN_VALUE);\n        assertTrue(\"toDouble(empty) failed\", NumberUtils.toDouble(\"\") == 0.0d);\n        assertTrue(\"toDouble(null) failed\", NumberUtils.toDouble(null) == 0.0d);\n    }\n    /**\n     * Test for {@link NumberUtils#toDouble(String, double)}.\n     */\n    @Test\n    public void testStringToDoubleStringD() {\n        assertTrue(\"toDouble(String,int) 1 failed\", NumberUtils.toDouble(\"1.2345\", 5.1d) == 1.2345d);\n        assertTrue(\"toDouble(String,int) 2 failed\", NumberUtils.toDouble(\"a\", 5.0d) == 5.0d);\n    }\n     /**\n     * Test for {@link NumberUtils#toByte(String)}.\n     */\n    @Test\n    public void testToByteString() {\n        assertTrue(\"toByte(String) 1 failed\", NumberUtils.toByte(\"123\") == 123);\n        assertTrue(\"toByte(String) 2 failed\", NumberUtils.toByte(\"abc\") == 0);\n        assertTrue(\"toByte(empty) failed\", NumberUtils.toByte(\"\") == 0);\n        assertTrue(\"toByte(null) failed\", NumberUtils.toByte(null) == 0);\n    }\n    /**\n     * Test for {@link NumberUtils#toByte(String, byte)}.\n     */\n    @Test\n    public void testToByteStringI() {\n        assertTrue(\"toByte(String,byte) 1 failed\", NumberUtils.toByte(\"123\", (byte) 5) == 123);\n        assertTrue(\"toByte(String,byte) 2 failed\", NumberUtils.toByte(\"12.3\", (byte) 5) == 5);\n    }\n    /**\n     * Test for {@link NumberUtils#toShort(String)}.\n     */\n    @Test\n    public void testToShortString() {\n        assertTrue(\"toShort(String) 1 failed\", NumberUtils.toShort(\"12345\") == 12345);\n        assertTrue(\"toShort(String) 2 failed\", NumberUtils.toShort(\"abc\") == 0);\n        assertTrue(\"toShort(empty) failed\", NumberUtils.toShort(\"\") == 0);\n        assertTrue(\"toShort(null) failed\", NumberUtils.toShort(null) == 0);\n    }\n    /**\n     * Test for {@link NumberUtils#toShort(String, short)}.\n     */\n    @Test\n    public void testToShortStringI() {\n        assertTrue(\"toShort(String,short) 1 failed\", NumberUtils.toShort(\"12345\", (short) 5) == 12345);\n        assertTrue(\"toShort(String,short) 2 failed\", NumberUtils.toShort(\"1234.5\", (short) 5) == 5);\n    }\n    @Test\n    public void testCreateNumber() {\n        // a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n        assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n        assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));\n        assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n        assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n        assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());\n        assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());\n        assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n        assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n        assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n        assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));\n        }\n        assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n        assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));\n        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));\n        // LANG-521\n        assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));\n        // LANG-638\n        assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));\n        // LANG-693\n        assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));\n    }\n    @Test\n    public void testCreateFloat() {\n        assertEquals(\"createFloat(String) failed\", Float.valueOf(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n        assertEquals(\"createFloat(null) failed\", null, NumberUtils.createFloat(null));\n        this.testCreateFloatFailure(\"\");\n        this.testCreateFloatFailure(\" \");\n        this.testCreateFloatFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateFloatFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n    protected void testCreateFloatFailure(String str) {\n        try {\n            Float value = NumberUtils.createFloat(str);\n            fail(\"createFloat(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n    @Test\n    public void testCreateDouble() {\n        assertEquals(\"createDouble(String) failed\", Double.valueOf(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n        assertEquals(\"createDouble(null) failed\", null, NumberUtils.createDouble(null));\n        this.testCreateDoubleFailure(\"\");\n        this.testCreateDoubleFailure(\" \");\n        this.testCreateDoubleFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateDoubleFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n    protected void testCreateDoubleFailure(String str) {\n        try {\n            Double value = NumberUtils.createDouble(str);\n            fail(\"createDouble(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n    @Test\n    public void testCreateInteger() {\n        assertEquals(\"createInteger(String) failed\", Integer.valueOf(\"12345\"), NumberUtils.createInteger(\"12345\"));\n        assertEquals(\"createInteger(null) failed\", null, NumberUtils.createInteger(null));\n        this.testCreateIntegerFailure(\"\");\n        this.testCreateIntegerFailure(\" \");\n        this.testCreateIntegerFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n    protected void testCreateIntegerFailure(String str) {\n        try {\n            Integer value = NumberUtils.createInteger(str);\n            fail(\"createInteger(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n    @Test\n    public void testCreateLong() {\n        assertEquals(\"createLong(String) failed\", Long.valueOf(\"12345\"), NumberUtils.createLong(\"12345\"));\n        assertEquals(\"createLong(null) failed\", null, NumberUtils.createLong(null));\n        this.testCreateLongFailure(\"\");\n        this.testCreateLongFailure(\" \");\n        this.testCreateLongFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateLongFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n    protected void testCreateLongFailure(String str) {\n        try {\n            Long value = NumberUtils.createLong(str);\n            fail(\"createLong(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n    @Test\n    public void testCreateBigInteger() {\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"));\n        assertEquals(\"createBigInteger(null) failed\", null, NumberUtils.createBigInteger(null));\n        this.testCreateBigIntegerFailure(\"\");\n        this.testCreateBigIntegerFailure(\" \");\n        this.testCreateBigIntegerFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateBigIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n    protected void testCreateBigIntegerFailure(String str) {\n        try {\n            BigInteger value = NumberUtils.createBigInteger(str);\n            fail(\"createBigInteger(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n    @Test\n    public void testCreateBigDecimal() {\n        assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n        assertEquals(\"createBigDecimal(null) failed\", null, NumberUtils.createBigDecimal(null));\n        this.testCreateBigDecimalFailure(\"\");\n        this.testCreateBigDecimalFailure(\" \");\n        this.testCreateBigDecimalFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateBigDecimalFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n        this.testCreateBigDecimalFailure(\"-\"); // sign alone not valid\n        this.testCreateBigDecimalFailure(\"--\"); // comment in NumberUtils suggests some implementations may incorrectly allow this\n        this.testCreateBigDecimalFailure(\"--0\");\n        this.testCreateBigDecimalFailure(\"+\"); // sign alone not valid\n        this.testCreateBigDecimalFailure(\"++\"); // in case this was also allowed by some JVMs\n        this.testCreateBigDecimalFailure(\"++0\");\n    }\n    protected void testCreateBigDecimalFailure(String str) {\n        try {\n            BigDecimal value = NumberUtils.createBigDecimal(str);\n            fail(\"createBigDecimal(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n    // min/max tests\n    // ----------------------------------------------------------------------\n    @Test(expected = IllegalArgumentException.class)\n    public void testMinLong_nullArray() {\n        NumberUtils.min((long[]) null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMinLong_emptyArray() {\n        NumberUtils.min(new long[0]);\n    }\n    @Test\n    public void testMinLong() {\n        assertEquals(\n            \"min(long[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new long[] { 5 }));\n        assertEquals(\n            \"min(long[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new long[] { 6, 9 }));\n        assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 }));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMinInt_nullArray() {\n        NumberUtils.min((int[]) null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMinInt_emptyArray() {\n        NumberUtils.min(new int[0]);\n    }\n    @Test\n    public void testMinInt() {\n        assertEquals(\n            \"min(int[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new int[] { 5 }));\n        assertEquals(\n            \"min(int[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new int[] { 6, 9 }));\n        assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 }));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMinShort_nullArray() {\n        NumberUtils.min((short[]) null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMinShort_emptyArray() {\n        NumberUtils.min(new short[0]);\n    }\n    @Test\n    public void testMinShort() {\n        assertEquals(\n            \"min(short[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new short[] { 5 }));\n        assertEquals(\n            \"min(short[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new short[] { 6, 9 }));\n        assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 }));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMinByte_nullArray() {\n        NumberUtils.min((byte[]) null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMinByte_emptyArray() {\n        NumberUtils.min(new byte[0]);\n    }\n    @Test\n    public void testMinByte() {\n        assertEquals(\n            \"min(byte[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new byte[] { 5 }));\n        assertEquals(\n            \"min(byte[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new byte[] { 6, 9 }));\n        assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 }));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMinDouble_nullArray() {\n        NumberUtils.min((double[]) null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMinDouble_emptyArray() {\n        NumberUtils.min(new double[0]);\n    }\n    @Test\n    public void testMinDouble() {\n        assertEquals(\n            \"min(double[]) failed for array length 1\",\n            5.12,\n            NumberUtils.min(new double[] { 5.12 }),\n            0);\n        assertEquals(\n            \"min(double[]) failed for array length 2\",\n            6.23,\n            NumberUtils.min(new double[] { 6.23, 9.34 }),\n            0);\n        assertEquals(\n            \"min(double[]) failed for array length 5\",\n            -10.45,\n            NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }),\n            0);\n        assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n        assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMinFloat_nullArray() {\n        NumberUtils.min((float[]) null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMinFloat_emptyArray() {\n        NumberUtils.min(new float[0]);\n    }\n    @Test\n    public void testMinFloat() {\n        assertEquals(\n            \"min(float[]) failed for array length 1\",\n            5.9f,\n            NumberUtils.min(new float[] { 5.9f }),\n            0);\n        assertEquals(\n            \"min(float[]) failed for array length 2\",\n            6.8f,\n            NumberUtils.min(new float[] { 6.8f, 9.7f }),\n            0);\n        assertEquals(\n            \"min(float[]) failed for array length 5\",\n            -10.6f,\n            NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }),\n            0);\n        assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n        assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMaxLong_nullArray() {\n        NumberUtils.max((long[]) null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMaxLong_emptyArray() {\n        NumberUtils.max(new long[0]);\n    }\n    @Test\n    public void testMaxLong() {\n        assertEquals(\n            \"max(long[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new long[] { 5 }));\n        assertEquals(\n            \"max(long[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new long[] { 6, 9 }));\n        assertEquals(\n            \"max(long[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 }));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMaxInt_nullArray() {\n        NumberUtils.max((int[]) null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMaxInt_emptyArray() {\n        NumberUtils.max(new int[0]);\n    }\n    @Test\n    public void testMaxInt() {\n        assertEquals(\n            \"max(int[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new int[] { 5 }));\n        assertEquals(\n            \"max(int[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new int[] { 6, 9 }));\n        assertEquals(\n            \"max(int[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 }));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMaxShort_nullArray() {\n        NumberUtils.max((short[]) null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMaxShort_emptyArray() {\n        NumberUtils.max(new short[0]);\n    }\n    @Test\n    public void testMaxShort() {\n        assertEquals(\n            \"max(short[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new short[] { 5 }));\n        assertEquals(\n            \"max(short[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new short[] { 6, 9 }));\n        assertEquals(\n            \"max(short[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 }));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMaxByte_nullArray() {\n        NumberUtils.max((byte[]) null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMaxByte_emptyArray() {\n        NumberUtils.max(new byte[0]);\n    }\n    @Test\n    public void testMaxByte() {\n        assertEquals(\n            \"max(byte[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new byte[] { 5 }));\n        assertEquals(\n            \"max(byte[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new byte[] { 6, 9 }));\n        assertEquals(\n            \"max(byte[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 }));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMaxDouble_nullArray() {\n        NumberUtils.max((double[]) null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMaxDouble_emptyArray() {\n        NumberUtils.max(new double[0]);\n    }\n    @Test\n    public void testMaxDouble() {\n        final double[] d = null;\n        try {\n            NumberUtils.max(d);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n        try {\n            NumberUtils.max(new double[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n        assertEquals(\n            \"max(double[]) failed for array length 1\",\n            5.1f,\n            NumberUtils.max(new double[] { 5.1f }),\n            0);\n        assertEquals(\n            \"max(double[]) failed for array length 2\",\n            9.2f,\n            NumberUtils.max(new double[] { 6.3f, 9.2f }),\n            0);\n        assertEquals(\n            \"max(double[]) failed for float length 5\",\n            10.4f,\n            NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n            0);\n        assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n        assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMaxFloat_nullArray() {\n        NumberUtils.max((float[]) null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testMaxFloat_emptyArray() {\n        NumberUtils.max(new float[0]);\n    }\n    @Test\n    public void testMaxFloat() {\n        assertEquals(\n            \"max(float[]) failed for array length 1\",\n            5.1f,\n            NumberUtils.max(new float[] { 5.1f }),\n            0);\n        assertEquals(\n            \"max(float[]) failed for array length 2\",\n            9.2f,\n            NumberUtils.max(new float[] { 6.3f, 9.2f }),\n            0);\n        assertEquals(\n            \"max(float[]) failed for float length 5\",\n            10.4f,\n            NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n            0);\n        assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n        assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f);\n    }\n    @Test\n    public void testMinimumLong() {\n        assertEquals(\"minimum(long,long,long) 1 failed\", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L));\n        assertEquals(\"minimum(long,long,long) 2 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L));\n        assertEquals(\"minimum(long,long,long) 3 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L));\n        assertEquals(\"minimum(long,long,long) 4 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L));\n        assertEquals(\"minimum(long,long,long) 5 failed\", 12345L, NumberUtils.min(12345L, 12345L, 12345L));\n    }\n    @Test\n    public void testMinimumInt() {\n        assertEquals(\"minimum(int,int,int) 1 failed\", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 2 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 3 failed\", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345));\n        assertEquals(\"minimum(int,int,int) 4 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345));\n        assertEquals(\"minimum(int,int,int) 5 failed\", 12345, NumberUtils.min(12345, 12345, 12345));\n    }\n    @Test\n    public void testMinimumShort() {\n        short low = 1234;\n        short mid = 1234 + 1;\n        short high = 1234 + 2;\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, high));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, low, high));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, high, low));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, low));\n    }\n    @Test\n    public void testMinimumByte() {\n        byte low = 123;\n        byte mid = 123 + 1;\n        byte high = 123 + 2;\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, high));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, low, high));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, high, low));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, low));\n    }\n    @Test\n    public void testMinimumDouble() {\n        double low = 12.3;\n        double mid = 12.3 + 1;\n        double high = 12.3 + 2;\n        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001);\n        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001);\n        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001);\n        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001);\n        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);\n    }\n    @Test\n    public void testMinimumFloat() {\n        float low = 12.3f;\n        float mid = 12.3f + 1;\n        float high = 12.3f + 2;\n        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f);\n        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f);\n        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f);\n        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f);\n        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);\n    }\n    @Test\n    public void testMaximumLong() {\n        assertEquals(\"maximum(long,long,long) 1 failed\", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 2 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 3 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L));\n        assertEquals(\"maximum(long,long,long) 4 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L));\n        assertEquals(\"maximum(long,long,long) 5 failed\", 12345L, NumberUtils.max(12345L, 12345L, 12345L));\n    }\n    @Test\n    public void testMaximumInt() {\n        assertEquals(\"maximum(int,int,int) 1 failed\", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 2 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 3 failed\", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345));\n        assertEquals(\"maximum(int,int,int) 4 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345));\n        assertEquals(\"maximum(int,int,int) 5 failed\", 12345, NumberUtils.max(12345, 12345, 12345));\n    }\n    @Test\n    public void testMaximumShort() {\n        short low = 1234;\n        short mid = 1234 + 1;\n        short high = 1234 + 2;\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(low, mid, high));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, low, high));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, high, low));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(high, mid, high));\n    }\n    @Test\n    public void testMaximumByte() {\n        byte low = 123;\n        byte mid = 123 + 1;\n        byte high = 123 + 2;\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(low, mid, high));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, low, high));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, high, low));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(high, mid, high));\n    }\n    @Test\n    public void testMaximumDouble() {\n        double low = 12.3;\n        double mid = 12.3 + 1;\n        double high = 12.3 + 2;\n        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001);\n        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001);\n        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001);\n        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001);\n        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);\n    }\n    @Test\n    public void testMaximumFloat() {\n        float low = 12.3f;\n        float mid = 12.3f + 1;\n        float high = 12.3f + 2;\n        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f);\n        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f);\n        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f);\n        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f);\n        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);\n    }\n    // Testing JDK against old Lang functionality\n    @Test\n    public void testCompareDouble() {\n        assertTrue(Double.compare(Double.NaN, Double.NaN) == 0);\n        assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);\n        assertTrue(Double.compare(Double.NaN, Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.NaN, 1.2d) == +1);\n        assertTrue(Double.compare(Double.NaN, 0.0d) == +1);\n        assertTrue(Double.compare(Double.NaN, -0.0d) == +1);\n        assertTrue(Double.compare(Double.NaN, -1.2d) == +1);\n        assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);\n        assertTrue(Double.compare(Double.MAX_VALUE, 1.2d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, 0.0d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, -0.0d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n        assertTrue(Double.compare(1.2d, Double.NaN) == -1);\n        assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(1.2d, 1.2d) == 0);\n        assertTrue(Double.compare(1.2d, 0.0d) == +1);\n        assertTrue(Double.compare(1.2d, -0.0d) == +1);\n        assertTrue(Double.compare(1.2d, -1.2d) == +1);\n        assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);\n        assertTrue(Double.compare(0.0d, Double.NaN) == -1);\n        assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(0.0d, 1.2d) == -1);\n        assertTrue(Double.compare(0.0d, 0.0d) == 0);\n        assertTrue(Double.compare(0.0d, -0.0d) == +1);\n        assertTrue(Double.compare(0.0d, -1.2d) == +1);\n        assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);\n        assertTrue(Double.compare(-0.0d, Double.NaN) == -1);\n        assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(-0.0d, 1.2d) == -1);\n        assertTrue(Double.compare(-0.0d, 0.0d) == -1);\n        assertTrue(Double.compare(-0.0d, -0.0d) == 0);\n        assertTrue(Double.compare(-0.0d, -1.2d) == +1);\n        assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);\n        assertTrue(Double.compare(-1.2d, Double.NaN) == -1);\n        assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(-1.2d, 1.2d) == -1);\n        assertTrue(Double.compare(-1.2d, 0.0d) == -1);\n        assertTrue(Double.compare(-1.2d, -0.0d) == -1);\n        assertTrue(Double.compare(-1.2d, -1.2d) == 0);\n        assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, 1.2d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, 0.0d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, -0.0d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);\n    }\n    @Test\n    public void testCompareFloat() {\n        assertTrue(Float.compare(Float.NaN, Float.NaN) == 0);\n        assertTrue(Float.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);\n        assertTrue(Float.compare(Float.NaN, Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.NaN, 1.2f) == +1);\n        assertTrue(Float.compare(Float.NaN, 0.0f) == +1);\n        assertTrue(Float.compare(Float.NaN, -0.0f) == +1);\n        assertTrue(Float.compare(Float.NaN, -1.2f) == +1);\n        assertTrue(Float.compare(Float.NaN, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);\n        assertTrue(Float.compare(Float.MAX_VALUE, 1.2f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, 0.0f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, -0.0f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, -1.2f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n        assertTrue(Float.compare(1.2f, Float.NaN) == -1);\n        assertTrue(Float.compare(1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(1.2f, 1.2f) == 0);\n        assertTrue(Float.compare(1.2f, 0.0f) == +1);\n        assertTrue(Float.compare(1.2f, -0.0f) == +1);\n        assertTrue(Float.compare(1.2f, -1.2f) == +1);\n        assertTrue(Float.compare(1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);\n        assertTrue(Float.compare(0.0f, Float.NaN) == -1);\n        assertTrue(Float.compare(0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(0.0f, 1.2f) == -1);\n        assertTrue(Float.compare(0.0f, 0.0f) == 0);\n        assertTrue(Float.compare(0.0f, -0.0f) == +1);\n        assertTrue(Float.compare(0.0f, -1.2f) == +1);\n        assertTrue(Float.compare(0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);\n        assertTrue(Float.compare(-0.0f, Float.NaN) == -1);\n        assertTrue(Float.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(-0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(-0.0f, 1.2f) == -1);\n        assertTrue(Float.compare(-0.0f, 0.0f) == -1);\n        assertTrue(Float.compare(-0.0f, -0.0f) == 0);\n        assertTrue(Float.compare(-0.0f, -1.2f) == +1);\n        assertTrue(Float.compare(-0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);\n        assertTrue(Float.compare(-1.2f, Float.NaN) == -1);\n        assertTrue(Float.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(-1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(-1.2f, 1.2f) == -1);\n        assertTrue(Float.compare(-1.2f, 0.0f) == -1);\n        assertTrue(Float.compare(-1.2f, -0.0f) == -1);\n        assertTrue(Float.compare(-1.2f, -1.2f) == 0);\n        assertTrue(Float.compare(-1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, 1.2f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, 0.0f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, -0.0f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, -1.2f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);\n    }\n    @Test\n    public void testIsDigits() {\n        assertFalse(\"isDigits(null) failed\", NumberUtils.isDigits(null));\n        assertFalse(\"isDigits('') failed\", NumberUtils.isDigits(\"\"));\n        assertTrue(\"isDigits(String) failed\", NumberUtils.isDigits(\"12345\"));\n        assertFalse(\"isDigits(String) neg 1 failed\", NumberUtils.isDigits(\"1234.5\"));\n        assertFalse(\"isDigits(String) neg 3 failed\", NumberUtils.isDigits(\"1ab\"));\n        assertFalse(\"isDigits(String) neg 4 failed\", NumberUtils.isDigits(\"abc\"));\n    }\n    /**\n     * Tests isNumber(String) and tests that createNumber(String) returns\n     * a valid number iff isNumber(String) returns false.\n     */\n    @Test\n    public void testIsNumber() {\n        String val = \"12345\";\n        assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\n        val = \"1234.5\";\n        assertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\n        val = \".12345\";\n        assertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\n        val = \"1234E5\";\n        assertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\n        val = \"1234E+5\";\n        assertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\n        val = \"1234E-5\";\n        assertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\n        val = \"123.4E5\";\n        assertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\n        val = \"-1234\";\n        assertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\n        val = \"-1234.5\";\n        assertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\n        val = \"-.12345\";\n        assertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\n        val = \"-1234E5\";\n        assertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\n        val = \"0\";\n        assertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\n        val = \"-0\";\n        assertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\n        val = \"01234\";\n        assertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\n        val = \"-01234\";\n        assertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\n        val = \"0xABC123\";\n        assertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\n        val = \"0x0\";\n        assertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\n        val = \"123.4E21D\";\n        assertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\n        val = \"-221.23F\";\n        assertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\n        val = \"22338L\";\n        assertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\n        val = null;\n        assertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\n        val = \"\";\n        assertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\n        val = \"--2.3\";\n        assertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\n        val = \".12.3\";\n        assertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E\";\n        assertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E+-212\";\n        assertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E2.12\";\n        assertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\n        val = \"0xGF\";\n        assertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\n        val = \"0xFAE-1\";\n        assertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\n        val = \".\";\n        assertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\n        val = \"-0ABC123\";\n        assertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4E-D\";\n        assertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4ED\";\n        assertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\n        val = \"1234E5l\";\n        assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n        val = \"11a\";\n        assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val));\n        val = \"1a\";\n        assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val));\n        val = \"a\";\n        assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val));\n        val = \"11g\";\n        assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val));\n        val = \"11z\";\n        assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val));\n        val = \"11def\";\n        assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val));\n        val = \"11d11\";\n        assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val));\n        val = \"11 11\";\n        assertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));\n        val = \" 1111\";\n        assertTrue(\"isNumber(String) 23 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 23 Neg failed\", !checkCreateNumber(val));\n        val = \"1111 \";\n        assertTrue(\"isNumber(String) 24 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 24 Neg failed\", !checkCreateNumber(val));\n        // LANG-521\n        val = \"2.\";\n        assertTrue(\"isNumber(String) LANG-521 failed\", NumberUtils.isNumber(val));\n        // LANG-664\n        val = \"1.1L\";\n        assertFalse(\"isNumber(String) LANG-664 failed\", NumberUtils.isNumber(val));\n    }\n    private boolean checkCreateNumber(String val) {\n        try {\n            Object obj = NumberUtils.createNumber(val);\n", "answers": ["            if (obj == null) {"], "length": 4128, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "dee90a7e3755a4c3061fa35d675acf7c6a75c00d09833f8f"}
{"input": "", "context": "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\n// using System.Windows.Media.Media3D; // seems to be not supported by Mono, using local Point3D now\nnamespace KML\n{\n    /// <summary>\n    /// KmlPart represents a KmlNode with the \"PART\" tag.\n    /// </summary>\n    public class KmlPart : KmlNode\n    {\n        /// <summary>\n        /// Possible origins where this node is found.\n        /// Regular PART nodes are children of a \"VESSEL\" node.\n        /// </summary>\n        public enum PartOrigin \n        { \n            /// <summary>\n            /// Part found under a VESSEL node\n            /// </summary>\n            Vessel, \n            /// <summary>\n            /// Part found anywhere else\n            /// </summary>\n            Other \n        };\n        /// <summary>\n        /// Get the origin of this node.\n        /// <see cref=\"KML.KmlPart.PartOrigin\"/>\n        /// </summary>\n        public PartOrigin Origin { get; private set; }\n        /// <summary>\n        /// Get a list of all KmlResource children.\n        /// </summary>\n        public List<KmlResource> Resources { get; private set; }\n        /// <summary>\n        /// Get a set of all types (names) of resources in this part.\n        /// </summary>\n        public SortedSet<string> ResourceTypes { get; private set; }\n        /// <summary>\n        /// Get the uid this part is identified by.\n        /// </summary>\n        public string Uid { get; private set; }\n        /// <summary>\n        /// Get x, y, z coordinates of this part relative to the vessel.\n        /// </summary>\n        public Point3D Position { get; private set; }\n        /// <summary>\n        /// Get the flag name of this part.\n        /// </summary>\n        public string Flag { get; private set; }\n        /// <summary>\n        /// Get the parent part index from vessel structure.\n        /// This data is read from KML attributes within this part.\n        /// </summary>\n        public int ParentPartIndex { get; private set; }\n        /// <summary>\n        /// Get the parent part from vessel structure.\n        /// This data is identified after vessel reading is completed.\n        /// </summary>\n        public KmlPart ParentPart { get; private set; }\n        // TODO KmlPart: Not make lists public, better have a Add(method)\n        /// <summary>\n        /// Get a list of part indexes this part is node attached to.\n        /// This data is read from KML attributes within this part.\n        /// </summary>\n        public List<int> AttachedToNodeIndices { get; private set; }\n        /// <summary>\n        /// Get a part index this part is surface attached to.\n        /// This data is read from KML attributes within this part.\n        /// </summary>\n        public int AttachedToSurfaceIndex { get; private set; }\n        /// <summary>\n        /// Get the surface attachment collider string if present.\n        /// This data is read from KML attributes within this part.\n        /// </summary>\n        public string AttachedToSurfaceCollider { get; private set; }\n        /// <summary>\n        /// Get a list of KmlParts this part is node attached to in top direction.\n        /// The list will be filled by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the indices and index lists that are filled on reading this part alone.\n        /// </summary>\n        public List<KmlPart> AttachedToPartsTop { get; private set; }\n        /// <summary>\n        /// Get a list of KmlParts this part is node attached to in bottom direction.\n        /// The list will be filled by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the indices and index lists that are filled on reading this part alone.\n        /// </summary>\n        public List<KmlPart> AttachedToPartsBottom { get; private set; }\n        /// <summary>\n        /// Get a list of KmlParts this part is node attached to in front direction.\n        /// The list will be filled by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the indices and index lists that are filled on reading this part alone.\n        /// </summary>\n        public List<KmlPart> AttachedToPartsFront { get; private set; }\n        /// <summary>\n        /// Get a list of KmlParts this part is node attached to in back direction.\n        /// The list will be filled by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the indices and index lists that are filled on reading this part alone.\n        /// </summary>\n        public List<KmlPart> AttachedToPartsBack { get; private set; }\n        /// <summary>\n        /// Get a list of KmlParts this part is node attached to in left direction.\n        /// The list will be filled by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the indices and index lists that are filled on reading this part alone.\n        /// </summary>\n        public List<KmlPart> AttachedToPartsLeft { get; private set; }\n        /// <summary>\n        /// Get a list of KmlParts this part is node attached to in right direction.\n        /// The list will be filled by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the indices and index lists that are filled on reading this part alone.\n        /// </summary>\n        public List<KmlPart> AttachedToPartsRight { get; private set; }\n        /// <summary>\n        /// Get the KmlPart this node is surface atteached to. In a correct persistence file this should only be one.\n        /// The part will be assigned by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the AttachedToSurfaceIndex that is filled on reading this part alone.\n        /// </summary>\n        public KmlPart AttachedToPartSurface { get; private set; }\n        /// <summary>\n        /// Get a list of KmlParts node attached to this part in top direction.\n        /// The list will be filled by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the indices and index lists that are filled on reading the other parts.\n        /// </summary>\n        public List<KmlPart> AttachedPartsTop { get; private set; }\n        /// <summary>\n        /// Get a list of KmlParts node attached to this part in bottom direction.\n        /// The list will be filled by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the indices and index lists that are filled on reading the other parts.\n        /// </summary>\n        public List<KmlPart> AttachedPartsBottom { get; private set; }\n        /// <summary>\n        /// Get a list of KmlParts node attached to this part in front direction.\n        /// The list will be filled by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the indices and index lists that are filled on reading the other parts.\n        /// </summary>\n        public List<KmlPart> AttachedPartsFront { get; private set; }\n        /// <summary>\n        /// Get a list of KmlParts node attached to this part in back direction.\n        /// The list will be filled by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the indices and index lists that are filled on reading the other parts.\n        /// </summary>\n        public List<KmlPart> AttachedPartsBack { get; private set; }\n        /// <summary>\n        /// Get a list of KmlParts node attached to this part in left direction.\n        /// The list will be filled by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the indices and index lists that are filled on reading the other parts.\n        /// </summary>\n        public List<KmlPart> AttachedPartsLeft { get; private set; }\n        /// <summary>\n        /// Get a list of KmlParts node attached to this part in right direction.\n        /// The list will be filled by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the indices and index lists that are filled on reading the other parts.\n        /// </summary>\n        public List<KmlPart> AttachedPartsRight { get; private set; }\n        /// <summary>\n        /// Get a list of KmlParts surface attached to this part.\n        /// The list will be filled by static BuildAttachmentStructure() method after a complete vessel is read,\n        /// based on the indices and index lists that are filled on reading the other parts.\n        /// </summary>\n        public List<KmlPart> AttachedPartsSurface { get; private set; }\n        /// <summary>\n        /// Get info whether this part has resources or not.\n        /// </summary>\n        public bool HasResources\n        {\n            get\n            {\n                return Resources.Count > 0;\n            }\n        }\n        /// <summary>\n        /// Get the worst ratio of all resources in this part.\n        /// If there is no resource it returns -1.0;\n        /// </summary>\n        public double WorstResourceRatio \n        { \n            get\n            {\n                if (HasResources)\n                {\n                    double worstRatio = 1.0;\n                    foreach (KmlResource res in Resources)\n                    {\n                        if (res.AmountRatio < worstRatio)\n                        {\n                            worstRatio = res.AmountRatio;\n                        }\n                    }\n                    return worstRatio;\n                }\n                else\n                {\n                    return -1.0;\n                }\n            }\n        }\n        /// <summary>\n        /// This bool value has no meaning within the part itself,\n        /// but could be used from other methods to traverse over all parts\n        /// and mark the ones it has already been to.\n        /// </summary>\n        public bool Visited { get; set; }\n        private string CraftName { get; set; }\n        /// <summary>\n        /// Creates a KmlPart as a copy of a given KmlNode.\n        /// </summary>\n        /// <param name=\"node\">The KmlNode to copy</param>\n        public KmlPart(KmlNode node)\n            : base(node.Line)\n        {\n            // First parent is null, will be set later when added to parent,\n            // then  IdentifyParent() will set Origin.\n            Origin = PartOrigin.Other;\n            Resources = new List<KmlResource>();\n            ResourceTypes = new SortedSet<string>();\n            Uid = \"\";\n            Position = new Point3D(0.0, 0.0, 0.0);\n            Flag = \"\";\n            ParentPartIndex = -1;\n            ParentPart = null;\n            AttachedToNodeIndices = new List<int>();\n            AttachedToSurfaceIndex = -1;\n            AttachedToPartsTop = new List<KmlPart>();\n            AttachedToPartsBottom = new List<KmlPart>();\n            AttachedToPartsFront = new List<KmlPart>();\n            AttachedToPartsBack = new List<KmlPart>();\n            AttachedToPartsLeft = new List<KmlPart>();\n            AttachedToPartsRight = new List<KmlPart>();\n            AttachedToPartSurface = null;\n            \n            AttachedPartsTop = new List<KmlPart>();\n            AttachedPartsBottom = new List<KmlPart>();\n            AttachedPartsFront = new List<KmlPart>();\n            AttachedPartsBack = new List<KmlPart>();\n            AttachedPartsLeft = new List<KmlPart>();\n            AttachedPartsRight = new List<KmlPart>();\n            AttachedPartsSurface = new List<KmlPart>();\n            Visited = false;\n            CraftName = \"\";\n            // Default is true for possible inserted empty nodes with \"PART\" tag\n            CanBeDeleted = true;\n            AddRange(node.AllItems);\n        }\n        /// <summary>\n        /// Adds a child KmlItem to this nodes lists of children, depending of its\n        /// derived class KmlNode, KmlAttrib or further derived from these.\n        /// When an KmlAttrib \"Name\" is found, its value \n        /// will be used for the corresponding property of this node.\n        /// </summary>\n        /// <param name=\"beforeItem\">The KmlItem where the new item should be inserted before</param>\n        /// <param name=\"newItem\">The KmlItem to add</param>\n        protected override void Add(KmlItem beforeItem, KmlItem newItem)\n        {\n            if (newItem is KmlAttrib)\n            {\n                KmlAttrib attrib = (KmlAttrib)newItem;\n                if (attrib.Name.ToLower() == \"part\")\n                {\n                    CraftName = attrib.Value;\n                    attrib.AttribValueChanged += PartName_Changed;\n                    attrib.CanBeDeleted = false;\n                }\n                else if (attrib.Name.ToLower() == \"uid\")\n                {\n                    Uid = attrib.Value;\n                    attrib.AttribValueChanged += Uid_Changed;\n                    attrib.CanBeDeleted = false;\n                }\n                else if (attrib.Name.ToLower() == \"flag\")\n                {\n                    Flag = attrib.Value;\n                    attrib.AttribValueChanged += Flag_Changed;\n                    attrib.CanBeDeleted = false;\n                }\n                else if (attrib.Name.ToLower() == \"parent\")\n                {\n                    int p = ParentPartIndex;\n                    if (int.TryParse(attrib.Value, out p))\n                    {\n                        ParentPartIndex = p;\n                    }\n                    else\n                    {\n                        Syntax.Warning(this, \"Unreadable parent part: \" + attrib.ToString());\n                    }\n                    attrib.AttribValueChanged += ParentPart_Changed;\n                    attrib.CanBeDeleted = false;\n                }\n                else if (attrib.Name.ToLower() == \"attn\")\n                {\n                    // Value looks like \"top, 12\", \"bottom, -1\", \"left, 1\", \"top2, 3\", etc.\n                    string[] items = attrib.Value.Split(new char[] {','});\n                    int index = -1;\n                    if (items.Count() == 2 && int.TryParse(items[1], out index))\n                    {\n                        if (index >= 0)\n                        {\n                            AttachedToNodeIndices.Add(index);\n                            attrib.CanBeDeleted = false;\n                        }\n                    }\n                    else\n                    {\n                        Syntax.Warning(this, \"Bad formatted part node attachment: \" + attrib.ToString());\n                    }\n                    attrib.AttribValueChanged += AttachmentNode_Changed;\n                }\n                else if (attrib.Name.ToLower() == \"srfn\")\n                {\n                    // Value looks like \"srfAttach, 12\"\n                    string[] items = attrib.Value.Split(new char[] { ',' });\n                    int index = -1;\n                    if ((items.Count() == 2 || items.Count() == 3) && int.TryParse(items[1], out index))\n                    {\n                        if (index >= 0)\n                        {\n                            if (AttachedToSurfaceIndex < 0)\n                            {\n                                AttachedToSurfaceIndex = index;\n                                attrib.CanBeDeleted = false;\n\t\t\t\t\t\t\t\tif (items.Count() == 3)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tAttachedToSurfaceCollider = items[2];\n\t\t\t\t\t\t\t\t}\n                            }\n                            else\n                            {\n                                Syntax.Warning(this, \"More than one surface attachment is not allowed, already attached to [\" + AttachedToSurfaceIndex + \"], could not attach to [\" + index + \"]\");\n                            }\n                        }\n                    }\n                    else\n                    {\n                        Syntax.Warning(this, \"Bad formatted part surface attachment: \" + attrib.ToString());\n                    }\n                    attrib.AttribValueChanged += AttachmentSurface_Changed;\n                }\n                else if (attrib.Name.ToLower() == \"position\")\n                {\n                    // Value looks like \"0.1,0,-0.3E-07\"\n                    string[] items = attrib.Value.Split(new char[] { ',' });\n                    double x = 0;\n                    double y = 0;\n                    double z = 0;\n                    if (items.Count() == 3 &&\n                        double.TryParse(items[0], NumberStyles.Number | NumberStyles.AllowExponent, CultureInfo.InvariantCulture, out x) &&\n                        double.TryParse(items[1], NumberStyles.Number | NumberStyles.AllowExponent, CultureInfo.InvariantCulture, out y) &&\n                        double.TryParse(items[2], NumberStyles.Number | NumberStyles.AllowExponent, CultureInfo.InvariantCulture, out z))\n                    {\n                        Position = new Point3D(x, y, z);\n                        attrib.CanBeDeleted = false;\n                    }\n                    else\n                    {\n                        Syntax.Warning(this, \"Bad formatted part position: \" + attrib.ToString());\n                    }\n                }\n            }\n            else if (newItem is KmlResource)\n            {\n                KmlResource res = (KmlResource)newItem;\n                Resources.Add(res);\n                ResourceTypes.Add(res.Name);\n                // Get notified when resources change\n                res.MaxAmount.AttribValueChanged += Resources_Changed;\n                res.MaxAmount.CanBeDeleted = false;\n                res.Amount.AttribValueChanged += Resources_Changed;\n                res.Amount.CanBeDeleted = false;\n                // TODO KmlPart.Add(): Get notified when resource is deleted\n                // Or make resource not deletable?\n            }\n            base.Add(beforeItem, newItem);\n        }\n        /// <summary>\n        /// Clear all child nodes and attributes from this node.\n        /// </summary>\n        public override void Clear()\n        {\n            Resources.Clear();\n            ResourceTypes.Clear();\n            Uid = \"\";\n            Position = new Point3D(0.0, 0.0, 0.0);\n            Flag = \"\";\n            ParentPartIndex = -1;\n            ParentPart = null;\n            ClearAttachments();\n            CraftName = \"\";\n            base.Clear();\n        }\n        private void ClearAttachments()\n        {\n            AttachedToNodeIndices.Clear();\n            AttachedToSurfaceIndex = -1;\n            ClearVirtualAttachments();\n        }\n        private void ClearVirtualAttachments()\n        {\n            AttachedPartsBack.Clear();\n            AttachedPartsBottom.Clear();\n            AttachedPartsFront.Clear();\n            AttachedPartsLeft.Clear();\n            AttachedPartsRight.Clear();\n            AttachedPartsSurface.Clear();\n            AttachedPartsTop.Clear();\n            AttachedToPartsBack.Clear();\n            AttachedToPartsBottom.Clear();\n            AttachedToPartsFront.Clear();\n            AttachedToPartsLeft.Clear();\n            AttachedToPartsRight.Clear();\n            AttachedToPartsTop.Clear();\n            AttachedToPartSurface = null;\n        }\n        /// <summary>\n        /// After a part is completely loaded the Intentify() method is called.\n        /// Then can be determined, if this part represents a docking port part or not,\n        /// checking all child nodes and their attributes.\n        /// If it doesen't need to be replaced, null is returned.\n        /// <see cref=\"KML.KmlItem.Identify()\"/>\n        /// </summary>\n        /// <returns>A KmlPortDock if this KmlPart needs to be replaced by or null otherwise</returns>\n        protected override KmlItem Identify()\n        {\n            if (KmlPartDock.PartIsDock(this))\n            {\n                return new KmlPartDock(this);\n            }\n            else\n            {\n                return base.Identify();\n            }\n        }\n        /// <summary>\n        /// When Parent is set or changed IdentifyParent will be called.\n        /// Deriving classes can override this method and check for the new parent.\n        /// </summary>\n        protected override void IdentifyParent()\n        {\n            if (Parent != null && Parent.Tag.ToLower() == \"vessel\")\n            {\n                Origin = PartOrigin.Vessel;\n            }\n            else\n            {\n                Origin = PartOrigin.Other;\n            }\n            base.IdentifyParent();\n        }\n        /// <summary>\n        /// Call on the part where to insert before to prepare part index structure.\n        /// </summary>\n        public void InsertionPreparation()\n        {\n            if (Parent is KmlVessel)\n            {\n                KmlVessel vessel = (KmlVessel)Parent;\n                ReIndexStructureForPartInsertion(this, vessel);\n            }\n        }\n        /// <summary>\n        /// Call on the part where to insert before after insertion happened.\n        /// </summary>\n        public void InsertionFinalization()\n        {\n            if (Parent is KmlVessel)\n            {\n                KmlVessel vessel = (KmlVessel)Parent;\n                int index = vessel.Parts.IndexOf(this);\n                for (int i = index; i < vessel.Parts.Count; i++)\n                {\n                    vessel.Parts[i].InvokeToStringChanged();\n                }\n            }\n        }\n        /// <summary>\n        /// Refill all resources of this part.\n        /// </summary>\n        public void Refill()\n        {\n            foreach(KmlResource res in Resources)\n            {\n                res.Refill();\n            }\n        }\n        /// <summary>\n        /// Refill all resources of a certain type of this part.\n        /// </summary>\n        /// <param name=\"type\">The type (name) of the resource to refill (ElectricCharge, LiquidFuel, Oxidizer, etc.)</param>\n        public void Refill(string type)\n        {\n            foreach (KmlResource res in Resources)\n            {\n                if (res.Name.ToLower() == type.ToLower())\n                {\n                    res.Refill();\n                }\n            }\n        }\n        /// <summary>\n        /// Exchange the flag of this part when it matches the oldFlag.\n        /// If it doesn't match, nothing will happen.\n        /// </summary>\n        /// <param name=\"oldFlag\">The old flag name this part should have</param>\n        /// <param name=\"newFlag\">The new flag name to apply</param>\n        public void FlagExchange(string oldFlag, string newFlag)\n        {\n            if (Flag.ToLower() != oldFlag.ToLower())\n            {\n                return;\n            }\n            foreach (KmlAttrib attrib in Attribs)\n            {\n                if (attrib.Name.ToLower() == \"flag\" && attrib.Value.ToLower() == oldFlag.ToLower())\n                {\n                    attrib.Value = newFlag;\n                    Flag = newFlag;\n                    return;\n                }\n            }\n        }\n        /// <summary>\n        /// Gets called before item is deleted.\n        /// </summary>\n        /// <returns>Return true on success. If false is returned the deletion will be canceled</returns>\n        protected override bool BeforeDelete()\n        {\n            if (Parent is KmlVessel)\n            {\n                KmlVessel vessel = (KmlVessel)Parent;\n                foreach (KmlKerbal kerbal in vessel.AssignedCrew)\n                {\n                    if (kerbal.AssignedPart == this)\n                    {\n                        kerbal.SendHome();\n                    }\n                }\n                // Fix Attachment structure on all other parts\n                ReIndexStructureForPartDeletion(this, vessel);\n            }\n            return true;\n        }\n        private static void ReIndexStructureForPartDeletion(KmlPart delPart, KmlVessel vessel)\n        {\n            int delIndex = vessel.Parts.IndexOf(delPart);\n            if (delIndex < 0)\n                return;\n            // Remove part from vessels part list\n            vessel.Parts.Remove(delPart);\n            foreach (KmlPart part in vessel.Parts)\n            {\n                // This is the essential part to change the persistent file data\n                for (int a = part.Attribs.Count - 1; a >= 0; a--)\n                {\n                    KmlAttrib attrib = part.Attribs[a];\n                    attrib.AttribValueChanged -= part.ParentPart_Changed;\n                    attrib.AttribValueChanged -= part.AttachmentSurface_Changed;\n                    attrib.AttribValueChanged -= part.AttachmentNode_Changed;\n                    switch (attrib.Name.ToLower())\n                    {\n                        case \"parent\":\n                            attrib.Value = ReIndexedValueForPartDeletion(delIndex, attrib.Value);\n                            break;\n                        case \"sym\":\n                            // Having \"sym = -1\" or \"sym = \" could crash KSP (at least version 1.1.3)\n                            attrib.Value = ReIndexedValueForPartDeletion(delIndex, attrib.Value);\n                            if (attrib.Value == \"-1\")\n                            {\n                                part.Attribs.RemoveAt(a);\n                                continue;\n                            }\n                            break;\n                        case \"srfn\":\n                        case \"attn\":\n                            char[] separator = { ',' };\n                            string[] s = attrib.Value.Split(separator);\n                            if (s.Length == 2)\n                            {\n                                attrib.Value = s[0] + \", \" + ReIndexedValueForPartDeletion(delIndex, s[1].Trim());\n                            }\n                            if (s.Length == 3)\n                            {\n                                attrib.Value = s[0] + \", \" + ReIndexedValueForPartDeletion(delIndex, s[1].Trim()) + \",\" + s[2];\n                            }\n                            break;\n                    }\n                    switch (attrib.Name.ToLower())\n                    {\n                        case \"parent\":\n                            attrib.AttribValueChanged += part.ParentPart_Changed;\n                            break;\n                        case \"srfn\":\n                            attrib.AttribValueChanged += part.AttachmentSurface_Changed;\n                            break;\n                        case \"attn\":\n                            attrib.AttribValueChanged += part.AttachmentNode_Changed;\n                            break;\n                    }\n                }\n                // Do additional fixup of redundant attachment informations\n                // First we need to fix indices like above\n                for (int i = part.AttachedToNodeIndices.Count - 1; i >= 0; i--)\n                {\n                    if (part.AttachedToNodeIndices[i] > delIndex)\n                        part.AttachedToNodeIndices[i]--;\n                    else if (part.AttachedToNodeIndices[i] == delIndex)\n                        part.AttachedToNodeIndices.RemoveAt(i);\n                }\n                \n                // Parent index needs to be updated here since we unbound ParentPart_Changed from the above changed attribute while changing\n                // TODO KmlPart.ReIndexStructureForPartDeletion(): Maybe find better usage of ParentPart_Changed\n                if (part.ParentPartIndex > delIndex)\n                    part.ParentPartIndex--;\n                // must be excluded by preconditions to call delete: else if (part.ParentPartIndex == delIndex)\n                \n                // Remove the part from any list, call to Remove() causes no problem if it's not contained\n                part.AttachedPartsBack.Remove(delPart);\n                part.AttachedPartsBottom.Remove(delPart);\n                part.AttachedPartsFront.Remove(delPart);\n                part.AttachedPartsLeft.Remove(delPart);\n                part.AttachedPartsRight.Remove(delPart);\n                part.AttachedPartsSurface.Remove(delPart);\n                part.AttachedPartsTop.Remove(delPart);\n                part.AttachedToPartsBack.Remove(delPart);\n                part.AttachedToPartsBottom.Remove(delPart);\n                part.AttachedToPartsFront.Remove(delPart);\n                part.AttachedToPartsLeft.Remove(delPart);\n                part.AttachedToPartsRight.Remove(delPart);\n                part.AttachedToPartsTop.Remove(delPart);\n                // must be excluded by preconditions to call delete: if (part.AttachedToPartSurface == delPart);\n                \n                // Based on new attachment structure we can now update if this part can be deleted\n                part.CanBeDeleted = part.CanPartBeDeleted();\n                // And force GuiTreeNode delete item enabled state to update\n                // TODO KmlPart:ReIndexStructureForPartDeletion(): Better event for change of CanBeDeleted\n                part.InvokeToStringChanged();\n            }\n        }\n        private static void ReIndexStructureForPartInsertion(KmlPart insPart, KmlVessel vessel)\n        {\n            int insIndex = vessel.Parts.IndexOf(insPart);\n            if (insIndex < 0)\n                return;\n            foreach (KmlPart part in vessel.Parts)\n            {\n                // This is the essential part to change the persistent file data\n                for (int a = part.Attribs.Count - 1; a >= 0; a--)\n                {\n                    KmlAttrib attrib = part.Attribs[a];\n                    attrib.AttribValueChanged -= part.ParentPart_Changed;\n                    attrib.AttribValueChanged -= part.AttachmentSurface_Changed;\n                    attrib.AttribValueChanged -= part.AttachmentNode_Changed;\n                    switch (attrib.Name.ToLower())\n                    {\n                        case \"parent\":\n                            attrib.Value = ReIndexedValueForPartInsertion(insIndex, attrib.Value);\n                            break;\n                        case \"sym\":\n                            // Having \"sym = -1\" or \"sym = \" could crash KSP (at least version 1.1.3)\n                            attrib.Value = ReIndexedValueForPartInsertion(insIndex, attrib.Value);\n                            if (attrib.Value == \"-1\")\n                            {\n                                part.Attribs.RemoveAt(a);\n                                continue;\n                            }\n                            break;\n                        case \"srfn\":\n                        case \"attn\":\n                            char[] separator = { ',' };\n                            string[] s = attrib.Value.Split(separator);\n                            if (s.Length == 2)\n                            {\n                                attrib.Value = s[0] + \", \" + ReIndexedValueForPartInsertion(insIndex, s[1].Trim());\n                            }\n                            if (s.Length == 3)\n                            {\n                                attrib.Value = s[0] + \", \" + ReIndexedValueForPartInsertion(insIndex, s[1].Trim()) + \",\" + s[2];\n                            }\n                            break;\n                    }\n                    switch (attrib.Name.ToLower())\n                    {\n                        case \"parent\":\n                            attrib.AttribValueChanged += part.ParentPart_Changed;\n                            break;\n                        case \"srfn\":\n                            attrib.AttribValueChanged += part.AttachmentSurface_Changed;\n                            break;\n                        case \"attn\":\n                            attrib.AttribValueChanged += part.AttachmentNode_Changed;\n                            break;\n                    }\n                }\n                // Do additional fixup of redundant attachment informations\n                // First we need to fix indices like above\n                for (int i = part.AttachedToNodeIndices.Count - 1; i >= 0; i--)\n                {\n                    if (part.AttachedToNodeIndices[i] >= insIndex)\n                        part.AttachedToNodeIndices[i]++;\n                }\n                // Parent index needs to be updated here since we unbound ParentPart_Changed from the above changed attribute while changing\n                // TODO KmlPart.ReIndexStructureForPartInsertion(): Maybe find better usage of ParentPart_Changed\n                if (part.ParentPartIndex >= insIndex)\n                    part.ParentPartIndex++;\n            }\n        }\n        private static string ReIndexedValueForPartDeletion(int delIndex, string value)\n        {\n            int i;\n            if (!int.TryParse(value, out i))\n                return value;\n            if (i == delIndex)\n                return \"-1\";\n            if (i > delIndex)\n                return (i - 1).ToString();\n            return value;\n        }\n        private static string ReIndexedValueForPartInsertion(int insIndex, string value)\n        {\n            int i;\n            if (!int.TryParse(value, out i))\n                return value;\n            if (i >= insIndex)\n                return (i + 1).ToString();\n            return value;\n        }\n        /// <summary>\n        /// Parts of a vessel are first read one after the other, so the first part can only store indices of later parts it is connected to.\n        /// After a complete vessel is read also all parts are read and the indices can be translated in references to now existing KmlParts.\n        /// This is done by this method. Also reverse information (what parts are connected to this one) is then stored in a part.\n        /// </summary>\n        /// <param name=\"parts\">The list of KmlParts, a KmlVessel will have one</param>\n        /// <returns>A list of root parts (not pointing to another parent part). Could be more than one, if some connections are broken.</returns>\n        public static List<KmlPart> BuildAttachmentStructure(List<KmlPart> parts)\n        {\n            foreach (KmlPart part in parts)\n            {\n                part.ClearVirtualAttachments();\n                if (part is KmlPartDock)\n                {\n                    (part as KmlPartDock).NeedsRepair = false;\n                    // TODO KmlPart.BuildAttachmentStructure(): Invoke another event than ToStringChanged\n                    // For the moment this will cause the GuiTreeNode to rebuild, including the context menu\n                    part.InvokeToStringChanged();\n                }\n            }\n            List<KmlPart> roots = new List<KmlPart>();\n            for (int i = 0; i < parts.Count; i++ )\n            {\n                // Check parent connection\n                KmlPart part = parts[i];\n                if(part.ParentPartIndex == i)\n                {\n                    // Parent part is itself, so ParentPart property stays null\n                    roots.Add(part);\n                }\n                else if (part.ParentPartIndex < 0 || part.ParentPartIndex >= parts.Count)\n                {\n                    Syntax.Warning(part, \"Part's parent part index [\" + part.ParentPartIndex + \"] does not point to a valid part\");\n                    roots.Add(part);\n                }\n                else \n                {\n                    part.ParentPart = parts[part.ParentPartIndex];\n                    if (!part.AttachedToNodeIndices.Contains(part.ParentPartIndex) && part.AttachedToSurfaceIndex != part.ParentPartIndex)\n                    {\n                        // Part could be docked to parent\n                        if ((part is KmlPartDock) && (part.ParentPart is KmlPartDock))\n                        {\n                            KmlPartDock docker = (KmlPartDock)part;\n                            KmlPartDock dockee = (KmlPartDock)part.ParentPart;\n                            // In case of \"Docked (same vessel)\" there has to be another docker-dockee connection and that would have connection via parent part\n                            if (docker.DockState.ToLower() == \"docked (docker)\")\n                            {\n                                if (dockee.DockState.ToLower() != \"docked (dockee)\")\n                                {\n                                    Syntax.Warning(dockee, \"Dock part is parent of other docker part. Docking state should be 'Docked (dockee)' but is '\" + dockee.DockState + \"', other dock: \" + docker);\n                                    docker.NeedsRepair = true;\n                                    dockee.NeedsRepair = true;\n                                }\n                                else\n                                {\n                                    KmlPartDock.BuildDockStructure(dockee, docker);\n                                    KmlPartDock.BuildDockStructure(docker, dockee);\n                                }\n                            }\n                            else if (docker.DockState.ToLower() == \"docked (dockee)\")\n                            {\n                                if (dockee.DockState.ToLower() != \"docked (docker)\")\n                                {\n                                    Syntax.Warning(dockee, \"Dock part is parent of other dockee part. Docking state should be 'Docked (docker)' but is '\" + dockee.DockState + \"', other dock: \" + docker);\n                                    docker.NeedsRepair = true;\n                                    dockee.NeedsRepair = true;\n                                }\n                                else\n                                {\n                                    KmlPartDock.BuildDockStructure(dockee, docker);\n                                    KmlPartDock.BuildDockStructure(docker, dockee);\n                                }\n                            }\n                            else if (docker.DockType == KmlPartDock.DockTypes.KasCPort && dockee.DockType == KmlPartDock.DockTypes.KasCPort)\n                            {\n                                // TODO KmlPart.BuildAttachmentStructure(): Some sanity checks on KAS links?\n                                KmlPartDock.BuildDockStructure(dockee, docker);\n                                KmlPartDock.BuildDockStructure(docker, dockee);\n                            }\n                            else\n                            {\n                                if (dockee.DockState.ToLower() == \"docked (dockee)\")\n                                {\n                                    Syntax.Warning(docker, \"Dock part is docked to parent dockee part. Docking state should be 'Docked (docker)' but is '\" + docker.DockState + \"', parent dock: \" + dockee);\n                                }\n                                else if (dockee.DockState.ToLower() == \"docked (docker)\")\n                                {\n                                    Syntax.Warning(docker, \"Dock part is docked to parent docker part. Docking state should be 'Docked (dockee)' but is '\" + docker.DockState + \"', parent dock: \" + dockee);\n                                }\n                                else\n                                {\n                                    Syntax.Warning(docker, \"Dock part is docked to parent dock part. Docking state should be 'Docked (docker)' or 'Docked (dockee)' but is '\" + docker.DockState + \"', parent dock: \" + dockee);\n                                    Syntax.Warning(dockee, \"Dock part is parent of other dock part. Docking state should be 'Docked (dockee)' or 'Docked (docker)' but is '\" + dockee.DockState + \"', other dock: \" + docker);\n                                }\n                                docker.NeedsRepair = true;\n                                dockee.NeedsRepair = true;\n                            }\n                        }\n                        // Part could be grappled by parent\n                        else if ((part.ParentPart is KmlPartDock) && (part.ParentPart as KmlPartDock).DockType == KmlPartDock.DockTypes.Grapple)\n                        {\n                            KmlPartDock grapple = (KmlPartDock)part.ParentPart;\n                            if (grapple.DockUid != part.Uid)\n                            {\n                                Syntax.Warning(part, \"Part not attached or grappled by parent grappling part: \" + grapple);\n                                Syntax.Warning(grapple, \"Grappling part is parent of other part, but is not grappled to it: \" + part);\n                                grapple.NeedsRepair = true;\n                            }\n                            else if (grapple.DockState.ToLower() != \"grappled\")\n                            {\n                                Syntax.Warning(part, \"Part grappled by parent part. Docking state should be 'Grappled' but is '\" + grapple.DockState + \"', parent grapple: \" + grapple);\n                                Syntax.Warning(grapple, \"Grappling part is parent of grappled part. Docking state should be 'Grappled' but is '\" + grapple.DockState + \"', grappled part: \" + part);\n                                grapple.NeedsRepair = true;\n                            }\n                            else\n                            {\n                                // It's docked but grappling needs a node attachment\n                                KmlPartDock.BuildDockStructure(grapple, part);\n                                Syntax.Warning(part, \"Part is docked but not attached to parent grappling part: \" + grapple);\n                                Syntax.Warning(grapple, \"Grappling part is parent and docked but not attached to grappled part: \" + part);\n                                grapple.NeedsRepair = true;\n                            }\n                        }\n                        // It may be a kerbalEVA/kerbalEVAfemale in external command seat\n                        else if (part.Name.StartsWith(\"kerbalEVA\"))\n                        {\n                            var seat = part.ParentPart.GetChildNode(\"MODULE\", \"KerbalSeat\");\n                            if (seat != null)\n                            {\n                                var occupantId = seat.GetAttrib(\"occupantID\");\n                                if (occupantId == null || occupantId.Value != part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Kerbal EVA not assigned to parent seat: \" + part.ParentPart);\n                                }\n                            }\n                            else\n                            {\n                                Syntax.Warning(part, \"Kerbal EVA not assigned to parent part: \" + part.ParentPart);\n                            }\n                        }\n                        // Usually you can only attach a new part by a node to the surface of parent\n                        // and not attach a part by surface to parents node. But if you have vessels docked\n                        // this situation may happen and this leads to this additional check\n                        else if (part.ParentPart.AttachedToSurfaceIndex != i && !part.ParentPart.AttachedToNodeIndices.Contains(i))\n                        {\n                            Syntax.Warning(part, \"Part not attached to parent part: \" + part.ParentPart);\n                        }\n                    }\n                }\n                // Check attachments\n                foreach (int p in part.AttachedToNodeIndices)\n                {\n                    if(p >= 0 && p < parts.Count)\n                    {\n                        KmlPart other = parts[p];\n                        // Sort attached part in the corresponding list, identified by position not by node name\n                        double diffX = part.Position.X - other.Position.X;\n                        double diffY = part.Position.Y - other.Position.Y;\n                        double diffZ = part.Position.Z - other.Position.Z;\n                        if (Math.Abs(diffX) > Math.Abs(diffY) && Math.Abs(diffX) > Math.Abs(diffZ))\n                        {\n                            if (diffX > 0)\n                            {\n                                other.AttachedPartsRight.Add(part);\n                                part.AttachedToPartsLeft.Add(other);\n                            }\n                            else\n                            {\n                                other.AttachedPartsLeft.Add(part);\n                                part.AttachedToPartsRight.Add(other);\n                            }\n                        }\n                        else if (Math.Abs(diffZ) > Math.Abs(diffX) && Math.Abs(diffZ) > Math.Abs(diffY))\n                        {\n                            if (diffZ > 0)\n                            {\n                                other.AttachedPartsFront.Add(part);\n                                part.AttachedToPartsBack.Add(other);\n                            }\n                            else\n                            {\n                                other.AttachedPartsBack.Add(part);\n                                part.AttachedToPartsFront.Add(other);\n                            }\n                        }\n                        else\n                        {\n                            if (diffY > 0)\n                            {\n                                other.AttachedPartsTop.Add(part);\n                                part.AttachedToPartsBottom.Add(other);\n                            }\n                            else\n                            {\n                                other.AttachedPartsBottom.Add(part);\n                                part.AttachedToPartsTop.Add(other);\n                            }\n                        }\n                        if(!other.AttachedToNodeIndices.Contains(parts.IndexOf(part)))\n                        {\n                            if ((other is KmlPartDock) && (other as KmlPartDock).DockType == KmlPartDock.DockTypes.Grapple)\n                            {\n                                KmlPartDock grapple = (KmlPartDock)other;\n", "answers": ["                                if (grapple.DockUid != part.Uid)"], "length": 4169, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "e800ea48fec113b50dc111d07e6b46585b6994a24785482f"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n##############################################################################\n#\n#    OpenERP, Open Source Business Applications\n#    Copyright (C) 2004-2012 OpenERP S.A. (<http://openerp.com>).\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU Affero General Public License as\n#    published by the Free Software Foundation, either version 3 of the\n#    License, or (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU Affero General Public License for more details.\n#\n#    You should have received a copy of the GNU Affero General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n##############################################################################\nimport logging\nimport re\nimport time\nimport types\nimport openerp\nimport openerp.modules.registry\nfrom openerp import SUPERUSER_ID\nfrom openerp import netsvc, pooler, tools\nfrom openerp.osv import fields,osv\nfrom openerp.osv.orm import Model\nfrom openerp.tools.safe_eval import safe_eval as eval\nfrom openerp.tools import config\nfrom openerp.tools.translate import _\nfrom openerp.osv.orm import except_orm, browse_record\n_logger = logging.getLogger(__name__)\nMODULE_UNINSTALL_FLAG = '_force_unlink'\ndef _get_fields_type(self, cr, uid, context=None):\n    # Avoid too many nested `if`s below, as RedHat's Python 2.6\n    # break on it. See bug 939653.\n    return sorted([(k,k) for k,v in fields.__dict__.iteritems()\n                      if type(v) == types.TypeType and \\\n                         issubclass(v, fields._column) and \\\n                         v != fields._column and \\\n                         not v._deprecated and \\\n                         not issubclass(v, fields.function)])\ndef _in_modules(self, cr, uid, ids, field_name, arg, context=None):\n    #pseudo-method used by fields.function in ir.model/ir.model.fields\n    module_pool = self.pool.get(\"ir.module.module\")\n    installed_module_ids = module_pool.search(cr, uid, [('state','=','installed')])\n    installed_module_names = module_pool.read(cr, uid, installed_module_ids, ['name'], context=context)\n    installed_modules = set(x['name'] for x in installed_module_names)\n    result = {}\n    xml_ids = osv.osv._get_xml_ids(self, cr, uid, ids)\n    for k,v in xml_ids.iteritems():\n        result[k] = ', '.join(sorted(installed_modules & set(xml_id.split('.')[0] for xml_id in v)))\n    return result\nclass ir_model(osv.osv):\n    _name = 'ir.model'\n    _description = \"Models\"\n    _order = 'model'\n    def _is_osv_memory(self, cr, uid, ids, field_name, arg, context=None):\n        models = self.browse(cr, uid, ids, context=context)\n        res = dict.fromkeys(ids)\n        for model in models:\n            if self.pool.get(model.model):\n                res[model.id] = self.pool.get(model.model).is_transient()\n            else:\n                _logger.error('Missing model %s' % (model.model, ))\n        return res\n    def _search_osv_memory(self, cr, uid, model, name, domain, context=None):\n        if not domain:\n            return []\n        __, operator, value = domain[0]\n        if operator not in ['=', '!=']:\n            raise osv.except_osv(_('Invalid search criterions'), _('The osv_memory field can only be compared with = and != operator.'))\n        value = bool(value) if operator == '=' else not bool(value)\n        all_model_ids = self.search(cr, uid, [], context=context)\n        is_osv_mem = self._is_osv_memory(cr, uid, all_model_ids, 'osv_memory', arg=None, context=context)\n        return [('id', 'in', [id for id in is_osv_mem if bool(is_osv_mem[id]) == value])]\n    def _view_ids(self, cr, uid, ids, field_name, arg, context=None):\n        models = self.browse(cr, uid, ids)\n        res = {}\n        for model in models:\n            res[model.id] = self.pool.get(\"ir.ui.view\").search(cr, uid, [('model', '=', model.model)])\n        return res\n    _columns = {\n        'name': fields.char('Model Description', size=64, translate=True, required=True),\n        'model': fields.char('Model', size=64, required=True, select=1),\n        'info': fields.text('Information'),\n        'field_id': fields.one2many('ir.model.fields', 'model_id', 'Fields', required=True),\n        'state': fields.selection([('manual','Custom Object'),('base','Base Object')],'Type',readonly=True),\n        'access_ids': fields.one2many('ir.model.access', 'model_id', 'Access'),\n        'osv_memory': fields.function(_is_osv_memory, string='Transient Model', type='boolean',\n            fnct_search=_search_osv_memory,\n            help=\"This field specifies whether the model is transient or not (i.e. if records are automatically deleted from the database or not)\"),\n        'modules': fields.function(_in_modules, type='char', size=128, string='In Modules', help='List of modules in which the object is defined or inherited'),\n        'view_ids': fields.function(_view_ids, type='one2many', obj='ir.ui.view', string='Views'),\n    }\n    _defaults = {\n        'model': 'x_',\n        'state': lambda self,cr,uid,ctx=None: (ctx and ctx.get('manual',False)) and 'manual' or 'base',\n    }\n    def _check_model_name(self, cr, uid, ids, context=None):\n        for model in self.browse(cr, uid, ids, context=context):\n            if model.state=='manual':\n                if not model.model.startswith('x_'):\n                    return False\n            if not re.match('^[a-z_A-Z0-9.]+$',model.model):\n                return False\n        return True\n    def _model_name_msg(self, cr, uid, ids, context=None):\n        return _('The Object name must start with x_ and not contain any special character !')\n    _constraints = [\n        (_check_model_name, _model_name_msg, ['model']),\n    ]\n    _sql_constraints = [\n        ('obj_name_uniq', 'unique (model)', 'Each model must be unique!'),\n    ]\n    # overridden to allow searching both on model name (model field)\n    # and model description (name field)\n    def _name_search(self, cr, uid, name='', args=None, operator='ilike', context=None, limit=100, name_get_uid=None):\n        if args is None:\n            args = []\n        domain = args + ['|', ('model', operator, name), ('name', operator, name)]\n        return self.name_get(cr, name_get_uid or uid,\n                             super(ir_model, self).search(cr, uid, domain, limit=limit, context=context),\n                             context=context)\n    def _drop_table(self, cr, uid, ids, context=None):\n        for model in self.browse(cr, uid, ids, context):\n            model_pool = self.pool.get(model.model)\n            cr.execute('select relkind from pg_class where relname=%s', (model_pool._table,))\n            result = cr.fetchone()\n            if result and result[0] == 'v':\n                cr.execute('DROP view %s' % (model_pool._table,))\n            elif result and result[0] == 'r':\n                cr.execute('DROP TABLE %s' % (model_pool._table,))\n        return True\n    def unlink(self, cr, user, ids, context=None):\n        # Prevent manual deletion of module tables\n        if context is None: context = {}\n        if isinstance(ids, (int, long)):\n            ids = [ids]\n        if not context.get(MODULE_UNINSTALL_FLAG):\n            for model in self.browse(cr, user, ids, context):\n                if model.state != 'manual':\n                    raise except_orm(_('Error'), _(\"Model '%s' contains module data and cannot be removed!\") % (model.name,))\n        self._drop_table(cr, user, ids, context)\n        res = super(ir_model, self).unlink(cr, user, ids, context)\n        if not context.get(MODULE_UNINSTALL_FLAG):\n            # only reload pool for normal unlink. For module uninstall the\n            # reload is done independently in openerp.modules.loading\n            cr.commit() # must be committed before reloading registry in new cursor\n            pooler.restart_pool(cr.dbname)\n            openerp.modules.registry.RegistryManager.signal_registry_change(cr.dbname)\n        return res\n    def write(self, cr, user, ids, vals, context=None):\n        if context:\n            context.pop('__last_update', None)\n        # Filter out operations 4 link from field id, because openerp-web\n        # always write (4,id,False) even for non dirty items\n        if 'field_id' in vals:\n            vals['field_id'] = [op for op in vals['field_id'] if op[0] != 4]\n        return super(ir_model,self).write(cr, user, ids, vals, context)\n    def create(self, cr, user, vals, context=None):\n        if  context is None:\n            context = {}\n        if context and context.get('manual'):\n            vals['state']='manual'\n        res = super(ir_model,self).create(cr, user, vals, context)\n        if vals.get('state','base')=='manual':\n            self.instanciate(cr, user, vals['model'], context)\n            ctx = dict(context,\n                field_name=vals['name'],\n                field_state='manual',\n                select=vals.get('select_level', '0'))\n            self.pool.get(vals['model'])._auto_init(cr, ctx)\n            openerp.modules.registry.RegistryManager.signal_registry_change(cr.dbname)\n        return res\n    def instanciate(self, cr, user, model, context=None):\n        class x_custom_model(osv.osv):\n            _custom = True\n        x_custom_model._name = model\n        x_custom_model._module = False\n        a = x_custom_model.create_instance(self.pool, cr)\n        if not a._columns:\n            x_name = 'id'\n        elif 'x_name' in a._columns.keys():\n            x_name = 'x_name'\n        else:\n            x_name = a._columns.keys()[0]\n        x_custom_model._rec_name = x_name\n        a._rec_name = x_name\nclass ir_model_fields(osv.osv):\n    _name = 'ir.model.fields'\n    _description = \"Fields\"\n    _columns = {\n        'name': fields.char('Name', required=True, size=64, select=1),\n        'model': fields.char('Object Name', size=64, required=True, select=1,\n            help=\"The technical name of the model this field belongs to\"),\n        'relation': fields.char('Object Relation', size=64,\n            help=\"For relationship fields, the technical name of the target model\"),\n        'relation_field': fields.char('Relation Field', size=64,\n            help=\"For one2many fields, the field on the target model that implement the opposite many2one relationship\"),\n        'model_id': fields.many2one('ir.model', 'Model', required=True, select=True, ondelete='cascade',\n            help=\"The model this field belongs to\"),\n        'field_description': fields.char('Field Label', required=True, size=256),\n        'ttype': fields.selection(_get_fields_type, 'Field Type',size=64, required=True),\n        'selection': fields.char('Selection Options',size=128, help=\"List of options for a selection field, \"\n            \"specified as a Python expression defining a list of (key, label) pairs. \"\n            \"For example: [('blue','Blue'),('yellow','Yellow')]\"),\n        'required': fields.boolean('Required'),\n        'readonly': fields.boolean('Readonly'),\n        'select_level': fields.selection([('0','Not Searchable'),('1','Always Searchable'),('2','Advanced Search (deprecated)')],'Searchable', required=True),\n        'translate': fields.boolean('Translatable', help=\"Whether values for this field can be translated (enables the translation mechanism for that field)\"),\n        'size': fields.integer('Size'),\n        'state': fields.selection([('manual','Custom Field'),('base','Base Field')],'Type', required=True, readonly=True, select=1),\n        'on_delete': fields.selection([('cascade','Cascade'),('set null','Set NULL')], 'On Delete', help='On delete property for many2one fields'),\n        'domain': fields.char('Domain', size=256, help=\"The optional domain to restrict possible values for relationship fields, \"\n            \"specified as a Python expression defining a list of triplets. \"\n            \"For example: [('color','=','red')]\"),\n        'groups': fields.many2many('res.groups', 'ir_model_fields_group_rel', 'field_id', 'group_id', 'Groups'),\n        'view_load': fields.boolean('View Auto-Load'),\n        'selectable': fields.boolean('Selectable'),\n        'modules': fields.function(_in_modules, type='char', size=128, string='In Modules', help='List of modules in which the field is defined'),\n        'serialization_field_id': fields.many2one('ir.model.fields', 'Serialization Field', domain = \"[('ttype','=','serialized')]\",\n                                                  ondelete='cascade', help=\"If set, this field will be stored in the sparse \"\n                                                                           \"structure of the serialization field, instead \"\n                                                                           \"of having its own database column. This cannot be \"\n                                                                           \"changed after creation.\"),\n    }\n    _rec_name='field_description'\n    _defaults = {\n        'view_load': 0,\n        'selection': \"\",\n        'domain': \"[]\",\n        'name': 'x_',\n        'state': lambda self,cr,uid,ctx=None: (ctx and ctx.get('manual',False)) and 'manual' or 'base',\n        'on_delete': 'set null',\n        'select_level': '0',\n        'size': 64,\n        'field_description': '',\n        'selectable': 1,\n    }\n    _order = \"name\"\n    def _check_selection(self, cr, uid, selection, context=None):\n        try:\n            selection_list = eval(selection)\n        except Exception:\n            _logger.warning('Invalid selection list definition for fields.selection', exc_info=True)\n            raise except_orm(_('Error'),\n                    _(\"The Selection Options expression is not a valid Pythonic expression.\"\n                      \"Please provide an expression in the [('key','Label'), ...] format.\"))\n        check = True\n        if not (isinstance(selection_list, list) and selection_list):\n            check = False\n        else:\n            for item in selection_list:\n                if not (isinstance(item, (tuple,list)) and len(item) == 2):\n                    check = False\n                    break\n        if not check:\n                raise except_orm(_('Error'),\n                    _(\"The Selection Options expression is must be in the [('key','Label'), ...] format!\"))\n        return True\n    def _size_gt_zero_msg(self, cr, user, ids, context=None):\n        return _('Size of the field can never be less than 1 !')\n    _sql_constraints = [\n        ('size_gt_zero', 'CHECK (size>0)',_size_gt_zero_msg ),\n    ]\n    def _drop_column(self, cr, uid, ids, context=None):\n        for field in self.browse(cr, uid, ids, context):\n            model = self.pool.get(field.model)\n            cr.execute('select relkind from pg_class where relname=%s', (model._table,))\n            result = cr.fetchone()\n            cr.execute(\"SELECT column_name FROM information_schema.columns WHERE table_name ='%s' and column_name='%s'\" %(model._table, field.name))\n            column_name = cr.fetchone()\n            if column_name and (result and result[0] == 'r'):\n                cr.execute('ALTER table \"%s\" DROP column \"%s\" cascade' % (model._table, field.name))\n            model._columns.pop(field.name, None)\n        return True\n    def unlink(self, cr, user, ids, context=None):\n        # Prevent manual deletion of module columns\n        if context is None: context = {}\n        if isinstance(ids, (int, long)):\n            ids = [ids]\n        if not context.get(MODULE_UNINSTALL_FLAG) and \\\n                any(field.state != 'manual' for field in self.browse(cr, user, ids, context)):\n            raise except_orm(_('Error'), _(\"This column contains module data and cannot be removed!\"))\n        self._drop_column(cr, user, ids, context)\n        res = super(ir_model_fields, self).unlink(cr, user, ids, context)\n        if not context.get(MODULE_UNINSTALL_FLAG):\n            cr.commit()\n            openerp.modules.registry.RegistryManager.signal_registry_change(cr.dbname)\n        return res\n    def create(self, cr, user, vals, context=None):\n        if 'model_id' in vals:\n            model_data = self.pool.get('ir.model').browse(cr, user, vals['model_id'])\n            vals['model'] = model_data.model\n        if context is None:\n            context = {}\n        if context and context.get('manual',False):\n            vals['state'] = 'manual'\n        if vals.get('ttype', False) == 'selection':\n            if not vals.get('selection',False):\n                raise except_orm(_('Error'), _('For selection fields, the Selection Options must be given!'))\n            self._check_selection(cr, user, vals['selection'], context=context)\n        res = super(ir_model_fields,self).create(cr, user, vals, context)\n        if vals.get('state','base') == 'manual':\n            if not vals['name'].startswith('x_'):\n                raise except_orm(_('Error'), _(\"Custom fields must have a name that starts with 'x_' !\"))\n            if vals.get('relation',False) and not self.pool.get('ir.model').search(cr, user, [('model','=',vals['relation'])]):\n                raise except_orm(_('Error'), _(\"Model %s does not exist!\") % vals['relation'])\n            if self.pool.get(vals['model']):\n                self.pool.get(vals['model']).__init__(self.pool, cr)\n                #Added context to _auto_init for special treatment to custom field for select_level\n                ctx = dict(context,\n                    field_name=vals['name'],\n                    field_state='manual',\n                    select=vals.get('select_level', '0'),\n                    update_custom_fields=True)\n                self.pool.get(vals['model'])._auto_init(cr, ctx)\n                openerp.modules.registry.RegistryManager.signal_registry_change(cr.dbname)\n        return res\n    def write(self, cr, user, ids, vals, context=None):\n        if context is None:\n            context = {}\n        if context and context.get('manual',False):\n            vals['state'] = 'manual'\n        #For the moment renaming a sparse field or changing the storing system is not allowed. This may be done later\n        if 'serialization_field_id' in vals or 'name' in vals:\n            for field in self.browse(cr, user, ids, context=context):\n                if 'serialization_field_id' in vals and field.serialization_field_id.id != vals['serialization_field_id']:\n                    raise except_orm(_('Error!'),  _('Changing the storing system for field \"%s\" is not allowed.')%field.name)\n                if field.serialization_field_id and (field.name != vals['name']):\n                    raise except_orm(_('Error!'),  _('Renaming sparse field \"%s\" is not allowed')%field.name)\n        column_rename = None # if set, *one* column can be renamed here\n        obj = None\n        models_patch = {}    # structs of (obj, [(field, prop, change_to),..])\n                             # data to be updated on the orm model\n        # static table of properties\n        model_props = [ # (our-name, fields.prop, set_fn)\n            ('field_description', 'string', str),\n            ('required', 'required', bool),\n            ('readonly', 'readonly', bool),\n            ('domain', '_domain', eval),\n            ('size', 'size', int),\n            ('on_delete', 'ondelete', str),\n            ('translate', 'translate', bool),\n            ('view_load', 'view_load', bool),\n            ('selectable', 'selectable', bool),\n            ('select_level', 'select', int),\n            ('selection', 'selection', eval),\n            ]\n        if vals and ids:\n            checked_selection = False # need only check it once, so defer\n            for item in self.browse(cr, user, ids, context=context):\n                if not (obj and obj._name == item.model):\n                    obj = self.pool.get(item.model)\n                if item.state != 'manual':\n                    raise except_orm(_('Error!'),\n                        _('Properties of base fields cannot be altered in this manner! '\n                          'Please modify them through Python code, '\n                          'preferably through a custom addon!'))\n                if item.ttype == 'selection' and 'selection' in vals \\\n                        and not checked_selection:\n                    self._check_selection(cr, user, vals['selection'], context=context)\n                    checked_selection = True\n                final_name = item.name\n                if 'name' in vals and vals['name'] != item.name:\n                    # We need to rename the column\n                    if column_rename:\n                        raise except_orm(_('Error!'), _('Can only rename one column at a time!'))\n                    if vals['name'] in obj._columns:\n                        raise except_orm(_('Error!'), _('Cannot rename column to %s, because that column already exists!') % vals['name'])\n                    if vals.get('state', 'base') == 'manual' and not vals['name'].startswith('x_'):\n                        raise except_orm(_('Error!'), _('New column name must still start with x_ , because it is a custom field!'))\n                    if '\\'' in vals['name'] or '\"' in vals['name'] or ';' in vals['name']:\n                        raise ValueError('Invalid character in column name')\n                    column_rename = (obj, (obj._table, item.name, vals['name']))\n                    final_name = vals['name']\n                if 'model_id' in vals and vals['model_id'] != item.model_id:\n                    raise except_orm(_(\"Error!\"), _(\"Changing the model of a field is forbidden!\"))\n                if 'ttype' in vals and vals['ttype'] != item.ttype:\n                    raise except_orm(_(\"Error!\"), _(\"Changing the type of a column is not yet supported. \"\n                                \"Please drop it and create it again!\"))\n                # We don't check the 'state', because it might come from the context\n                # (thus be set for multiple fields) and will be ignored anyway.\n                if obj:\n                    models_patch.setdefault(obj._name, (obj,[]))\n                    # find out which properties (per model) we need to update\n                    for field_name, field_property, set_fn in model_props:\n                        if field_name in vals:\n                            property_value = set_fn(vals[field_name])\n                            if getattr(obj._columns[item.name], field_property) != property_value:\n                                models_patch[obj._name][1].append((final_name, field_property, property_value))\n                        # our dict is ready here, but no properties are changed so far\n        # These shall never be written (modified)\n        for column_name in ('model_id', 'model', 'state'):\n            if column_name in vals:\n                del vals[column_name]\n        res = super(ir_model_fields,self).write(cr, user, ids, vals, context=context)\n        if column_rename:\n            cr.execute('ALTER TABLE \"%s\" RENAME COLUMN \"%s\" TO \"%s\"' % column_rename[1])\n            # This is VERY risky, but let us have this feature:\n            # we want to change the key of column in obj._columns dict\n            col = column_rename[0]._columns.pop(column_rename[1][1]) # take object out, w/o copy\n            column_rename[0]._columns[column_rename[1][2]] = col\n        if models_patch:\n            # We have to update _columns of the model(s) and then call their\n            # _auto_init to sync the db with the model. Hopefully, since write()\n            # was called earlier, they will be in-sync before the _auto_init.\n            # Anything we don't update in _columns now will be reset from\n            # the model into ir.model.fields (db).\n            ctx = dict(context, select=vals.get('select_level', '0'),\n                       update_custom_fields=True)\n            for __, patch_struct in models_patch.items():\n                obj = patch_struct[0]\n                for col_name, col_prop, val in patch_struct[1]:\n                    setattr(obj._columns[col_name], col_prop, val)\n                obj._auto_init(cr, ctx)\n            openerp.modules.registry.RegistryManager.signal_registry_change(cr.dbname)\n        return res\nclass ir_model_constraint(Model):\n    \"\"\"\n    This model tracks PostgreSQL foreign keys and constraints used by OpenERP\n    models.\n    \"\"\"\n    _name = 'ir.model.constraint'\n    _columns = {\n        'name': fields.char('Constraint', required=True, size=128, select=1,\n            help=\"PostgreSQL constraint or foreign key name.\"),\n        'model': fields.many2one('ir.model', string='Model',\n            required=True, select=1),\n        'module': fields.many2one('ir.module.module', string='Module',\n            required=True, select=1),\n        'type': fields.char('Constraint Type', required=True, size=1, select=1,\n            help=\"Type of the constraint: `f` for a foreign key, \"\n                \"`u` for other constraints.\"),\n        'date_update': fields.datetime('Update Date'),\n        'date_init': fields.datetime('Initialization Date')\n    }\n    _sql_constraints = [\n        ('module_name_uniq', 'unique(name, module)',\n            'Constraints with the same name are unique per module.'),\n    ]\n    def _module_data_uninstall(self, cr, uid, ids, context=None):\n        \"\"\"\n        Delete PostgreSQL foreign keys and constraints tracked by this model.\n        \"\"\" \n        if uid != SUPERUSER_ID and not self.pool.get('ir.model.access').check_groups(cr, uid, \"base.group_system\"):\n            raise except_orm(_('Permission Denied'), (_('Administrator access is required to uninstall a module')))\n        context = dict(context or {})\n        ids_set = set(ids)\n        ids.sort()\n        ids.reverse()\n        for data in self.browse(cr, uid, ids, context):\n            model = data.model.model\n            model_obj = self.pool.get(model)\n            name = openerp.tools.ustr(data.name)\n            typ = data.type\n            # double-check we are really going to delete all the owners of this schema element\n            cr.execute(\"\"\"SELECT id from ir_model_constraint where name=%s\"\"\", (data.name,))\n            external_ids = [x[0] for x in cr.fetchall()]\n            if set(external_ids)-ids_set:\n                # as installed modules have defined this element we must not delete it!\n                continue\n            if typ == 'f':\n                # test if FK exists on this table (it could be on a related m2m table, in which case we ignore it)\n                cr.execute(\"\"\"SELECT 1 from pg_constraint cs JOIN pg_class cl ON (cs.conrelid = cl.oid)\n                              WHERE cs.contype=%s and cs.conname=%s and cl.relname=%s\"\"\", ('f', name, model_obj._table))\n                if cr.fetchone():\n                    cr.execute('ALTER TABLE \"%s\" DROP CONSTRAINT \"%s\"' % (model_obj._table, name),)\n                    _logger.info('Dropped FK CONSTRAINT %s@%s', name, model)\n            if typ == 'u':\n                # test if constraint exists\n                cr.execute(\"\"\"SELECT 1 from pg_constraint cs JOIN pg_class cl ON (cs.conrelid = cl.oid)\n                              WHERE cs.contype=%s and cs.conname=%s and cl.relname=%s\"\"\", ('u', name, model_obj._table))\n                if cr.fetchone():\n                    cr.execute('ALTER TABLE \"%s\" DROP CONSTRAINT \"%s\"' % (model_obj._table, name),)\n                    _logger.info('Dropped CONSTRAINT %s@%s', name, model)\n        self.unlink(cr, uid, ids, context)\nclass ir_model_relation(Model):\n    \"\"\"\n    This model tracks PostgreSQL tables used to implement OpenERP many2many\n    relations.\n    \"\"\"\n    _name = 'ir.model.relation'\n    _columns = {\n        'name': fields.char('Relation Name', required=True, size=128, select=1,\n            help=\"PostgreSQL table name implementing a many2many relation.\"),\n        'model': fields.many2one('ir.model', string='Model',\n            required=True, select=1),\n        'module': fields.many2one('ir.module.module', string='Module',\n            required=True, select=1),\n        'date_update': fields.datetime('Update Date'),\n        'date_init': fields.datetime('Initialization Date')\n    }\n    def _module_data_uninstall(self, cr, uid, ids, context=None):\n        \"\"\"\n        Delete PostgreSQL many2many relations tracked by this model.\n        \"\"\" \n        if uid != SUPERUSER_ID and not self.pool.get('ir.model.access').check_groups(cr, uid, \"base.group_system\"):\n            raise except_orm(_('Permission Denied'), (_('Administrator access is required to uninstall a module')))\n        ids_set = set(ids)\n        to_drop_table = []\n        ids.sort()\n        ids.reverse()\n        for data in self.browse(cr, uid, ids, context):\n            model = data.model\n            name = openerp.tools.ustr(data.name)\n            # double-check we are really going to delete all the owners of this schema element\n            cr.execute(\"\"\"SELECT id from ir_model_relation where name = %s\"\"\", (data.name,))\n            external_ids = [x[0] for x in cr.fetchall()]\n            if set(external_ids)-ids_set:\n                # as installed modules have defined this element we must not delete it!\n                continue\n            cr.execute(\"SELECT 1 FROM information_schema.tables WHERE table_name=%s\", (name,))\n            if cr.fetchone() and not name in to_drop_table:\n                to_drop_table.append(name)\n        self.unlink(cr, uid, ids, context)\n        # drop m2m relation tables\n        for table in to_drop_table:\n            cr.execute('DROP TABLE %s CASCADE'% table,)\n            _logger.info('Dropped table %s', table)\n        cr.commit()\nclass ir_model_access(osv.osv):\n    _name = 'ir.model.access'\n    _columns = {\n        'name': fields.char('Name', size=64, required=True, select=True),\n        'active': fields.boolean('Active', help='If you uncheck the active field, it will disable the ACL without deleting it (if you delete a native ACL, it will be re-created when you reload the module.'),\n        'model_id': fields.many2one('ir.model', 'Object', required=True, domain=[('osv_memory','=', False)], select=True, ondelete='cascade'),\n        'group_id': fields.many2one('res.groups', 'Group', ondelete='cascade', select=True),\n        'perm_read': fields.boolean('Read Access'),\n        'perm_write': fields.boolean('Write Access'),\n        'perm_create': fields.boolean('Create Access'),\n        'perm_unlink': fields.boolean('Delete Access'),\n    }\n    _defaults = {\n        'active': True,\n    }\n    def check_groups(self, cr, uid, group):\n        grouparr  = group.split('.')\n        if not grouparr:\n            return False\n        cr.execute(\"select 1 from res_groups_users_rel where uid=%s and gid IN (select res_id from ir_model_data where module=%s and name=%s)\", (uid, grouparr[0], grouparr[1],))\n        return bool(cr.fetchone())\n    def check_group(self, cr, uid, model, mode, group_ids):\n        \"\"\" Check if a specific group has the access mode to the specified model\"\"\"\n        assert mode in ['read','write','create','unlink'], 'Invalid access mode'\n        if isinstance(model, browse_record):\n            assert model._table_name == 'ir.model', 'Invalid model object'\n            model_name = model.name\n        else:\n            model_name = model\n        if isinstance(group_ids, (int, long)):\n            group_ids = [group_ids]\n        for group_id in group_ids:\n            cr.execute(\"SELECT perm_\" + mode + \" \"\n                   \"  FROM ir_model_access a \"\n                   \"  JOIN ir_model m ON (m.id = a.model_id) \"\n                   \" WHERE m.model = %s AND a.active IS True \"\n                   \" AND a.group_id = %s\", (model_name, group_id)\n                   )\n            r = cr.fetchone()\n            if r is None:\n                cr.execute(\"SELECT perm_\" + mode + \" \"\n                       \"  FROM ir_model_access a \"\n                       \"  JOIN ir_model m ON (m.id = a.model_id) \"\n                       \" WHERE m.model = %s AND a.active IS True \"\n                       \" AND a.group_id IS NULL\", (model_name, )\n                       )\n                r = cr.fetchone()\n            access = bool(r and r[0])\n            if access:\n                return True\n        # pass no groups -> no access\n        return False\n    def group_names_with_access(self, cr, model_name, access_mode):\n        \"\"\"Returns the names of visible groups which have been granted ``access_mode`` on\n           the model ``model_name``.\n           :rtype: list\n        \"\"\"\n        assert access_mode in ['read','write','create','unlink'], 'Invalid access mode: %s' % access_mode\n        cr.execute('''SELECT\n                        c.name, g.name\n                      FROM\n                        ir_model_access a\n                        JOIN ir_model m ON (a.model_id=m.id)\n                        JOIN res_groups g ON (a.group_id=g.id)\n                        LEFT JOIN ir_module_category c ON (c.id=g.category_id)\n                      WHERE\n                        m.model=%s AND\n                        a.active IS True AND\n                        a.perm_''' + access_mode, (model_name,))\n        return [('%s/%s' % x) if x[0] else x[1] for x in cr.fetchall()]\n    @tools.ormcache()\n    def check(self, cr, uid, model, mode='read', raise_exception=True, context=None):\n        if uid==1:\n            # User root have all accesses\n            # TODO: exclude xml-rpc requests\n            return True\n        assert mode in ['read','write','create','unlink'], 'Invalid access mode'\n        if isinstance(model, browse_record):\n            assert model._table_name == 'ir.model', 'Invalid model object'\n            model_name = model.model\n        else:\n            model_name = model\n        # TransientModel records have no access rights, only an implicit access rule\n        if not self.pool.get(model_name):\n            _logger.error('Missing model %s' % (model_name, ))\n        elif self.pool.get(model_name).is_transient():\n            return True\n        # We check if a specific rule exists\n        cr.execute('SELECT MAX(CASE WHEN perm_' + mode + ' THEN 1 ELSE 0 END) '\n                   '  FROM ir_model_access a '\n                   '  JOIN ir_model m ON (m.id = a.model_id) '\n                   '  JOIN res_groups_users_rel gu ON (gu.gid = a.group_id) '\n                   ' WHERE m.model = %s '\n                   '   AND gu.uid = %s '\n                   '   AND a.active IS True '\n                   , (model_name, uid,)\n                   )\n        r = cr.fetchone()[0]\n        if r is None:\n            # there is no specific rule. We check the generic rule\n            cr.execute('SELECT MAX(CASE WHEN perm_' + mode + ' THEN 1 ELSE 0 END) '\n                       '  FROM ir_model_access a '\n                       '  JOIN ir_model m ON (m.id = a.model_id) '\n                       ' WHERE a.group_id IS NULL '\n                       '   AND m.model = %s '\n                       '   AND a.active IS True '\n                       , (model_name,)\n                       )\n            r = cr.fetchone()[0]\n        if not r and raise_exception:\n            groups = '\\n\\t'.join('- %s' % g for g in self.group_names_with_access(cr, model_name, mode))\n            msg_heads = {\n                # Messages are declared in extenso so they are properly exported in translation terms\n                'read': _(\"Sorry, you are not allowed to access this document.\"),\n                'write':  _(\"Sorry, you are not allowed to modify this document.\"),\n                'create': _(\"Sorry, you are not allowed to create this kind of document.\"),\n                'unlink': _(\"Sorry, you are not allowed to delete this document.\"),\n            }\n            if groups:\n                msg_tail = _(\"Only users with the following access level are currently allowed to do that\") + \":\\n%s\\n\\n(\" + _(\"Document model\") + \": %s)\"\n                msg_params = (groups, model_name)\n            else:\n                msg_tail = _(\"Please contact your system administrator if you think this is an error.\") + \"\\n\\n(\" + _(\"Document model\") + \": %s)\"\n                msg_params = (model_name,)\n            _logger.warning('Access Denied by ACLs for operation: %s, uid: %s, model: %s', mode, uid, model_name)\n            msg = '%s %s' % (msg_heads[mode], msg_tail)\n            raise except_orm(_('Access Denied'), msg % msg_params)\n        return r or False\n    __cache_clearing_methods = []\n    def register_cache_clearing_method(self, model, method):\n        self.__cache_clearing_methods.append((model, method))\n    def unregister_cache_clearing_method(self, model, method):\n        try:\n            i = self.__cache_clearing_methods.index((model, method))\n            del self.__cache_clearing_methods[i]\n        except ValueError:\n            pass\n    def call_cache_clearing_methods(self, cr):\n        self.check.clear_cache(self)    # clear the cache of check function\n        for model, method in self.__cache_clearing_methods:\n            object_ = self.pool.get(model)\n            if object_:\n                getattr(object_, method)()\n    #\n    # Check rights on actions\n    #\n    def write(self, cr, uid, *args, **argv):\n        self.call_cache_clearing_methods(cr)\n        res = super(ir_model_access, self).write(cr, uid, *args, **argv)\n        return res\n    def create(self, cr, uid, *args, **argv):\n        self.call_cache_clearing_methods(cr)\n        res = super(ir_model_access, self).create(cr, uid, *args, **argv)\n        return res\n    def unlink(self, cr, uid, *args, **argv):\n        self.call_cache_clearing_methods(cr)\n        res = super(ir_model_access, self).unlink(cr, uid, *args, **argv)\n        return res\nclass ir_model_data(osv.osv):\n    \"\"\"Holds external identifier keys for records in the database.\n       This has two main uses:\n           * allows easy data integration with third-party systems,\n             making import/export/sync of data possible, as records\n             can be uniquely identified across multiple systems\n           * allows tracking the origin of data installed by OpenERP\n             modules themselves, thus making it possible to later\n             update them seamlessly.\n    \"\"\"\n    _name = 'ir.model.data'\n    _order = 'module,model,name'\n    def _display_name_get(self, cr, uid, ids, prop, unknow_none, context=None):\n        result = {}\n        result2 = {}\n        for res in self.browse(cr, uid, ids, context=context):\n            if res.id:\n                result.setdefault(res.model, {})\n                result[res.model][res.res_id] = res.id\n            result2[res.id] = False\n        for model in result:\n            try:\n                r = dict(self.pool.get(model).name_get(cr, uid, result[model].keys(), context=context))\n                for key,val in result[model].items():\n                    result2[val] = r.get(key, False)\n            except:\n                # some object have no valid name_get implemented, we accept this\n                pass\n        return result2\n    def _complete_name_get(self, cr, uid, ids, prop, unknow_none, context=None):\n        result = {}\n        for res in self.browse(cr, uid, ids, context=context):\n            result[res.id] = (res.module and (res.module + '.') or '')+res.name\n        return result\n    _columns = {\n        'name': fields.char('External Identifier', required=True, size=128, select=1,\n                            help=\"External Key/Identifier that can be used for \"\n                                 \"data integration with third-party systems\"),\n        'complete_name': fields.function(_complete_name_get, type='char', string='Complete ID'),\n        'display_name': fields.function(_display_name_get, type='char', string='Record Name'),\n        'model': fields.char('Model Name', required=True, size=64, select=1),\n        'module': fields.char('Module', required=True, size=64, select=1),\n        'res_id': fields.integer('Record ID', select=1,\n                                 help=\"ID of the target record in the database\"),\n        'noupdate': fields.boolean('Non Updatable'),\n        'date_update': fields.datetime('Update Date'),\n        'date_init': fields.datetime('Init Date')\n    }\n    _defaults = {\n        'date_init': lambda *a: time.strftime('%Y-%m-%d %H:%M:%S'),\n        'date_update': lambda *a: time.strftime('%Y-%m-%d %H:%M:%S'),\n        'noupdate': False,\n        'module': ''\n    }\n    _sql_constraints = [\n        ('module_name_uniq', 'unique(name, module)', 'You cannot have multiple records with the same external ID in the same module!'),\n    ]\n    def __init__(self, pool, cr):\n        osv.osv.__init__(self, pool, cr)\n        self.doinit = True\n        # also stored in pool to avoid being discarded along with this osv instance\n        if getattr(pool, 'model_data_reference_ids', None) is None:\n            self.pool.model_data_reference_ids = {}\n        self.loads = self.pool.model_data_reference_ids\n    def _auto_init(self, cr, context=None):\n        super(ir_model_data, self)._auto_init(cr, context)\n        cr.execute('SELECT indexname FROM pg_indexes WHERE indexname = \\'ir_model_data_module_name_index\\'')\n        if not cr.fetchone():\n            cr.execute('CREATE INDEX ir_model_data_module_name_index ON ir_model_data (module, name)')\n    @tools.ormcache()\n    def _get_id(self, cr, uid, module, xml_id):\n        \"\"\"Returns the id of the ir.model.data record corresponding to a given module and xml_id (cached) or raise a ValueError if not found\"\"\"\n        ids = self.search(cr, uid, [('module','=',module), ('name','=', xml_id)])\n        if not ids:\n            raise ValueError('No such external ID currently defined in the system: %s.%s' % (module, xml_id))\n        # the sql constraints ensure us we have only one result\n        return ids[0]\n    @tools.ormcache()\n    def get_object_reference(self, cr, uid, module, xml_id):\n        \"\"\"Returns (model, res_id) corresponding to a given module and xml_id (cached) or raise ValueError if not found\"\"\"\n        data_id = self._get_id(cr, uid, module, xml_id)\n        res = self.read(cr, uid, data_id, ['model', 'res_id'])\n        if not res['res_id']:\n            raise ValueError('No such external ID currently defined in the system: %s.%s' % (module, xml_id))\n        return res['model'], res['res_id']\n    def get_object(self, cr, uid, module, xml_id, context=None):\n        \"\"\"Returns a browsable record for the given module name and xml_id or raise ValueError if not found\"\"\"\n        res_model, res_id = self.get_object_reference(cr, uid, module, xml_id)\n        result = self.pool.get(res_model).browse(cr, uid, res_id, context=context)\n        if not result.exists():\n            raise ValueError('No record found for unique ID %s.%s. It may have been deleted.' % (module, xml_id))\n        return result\n    def _update_dummy(self,cr, uid, model, module, xml_id=False, store=True):\n        if not xml_id:\n            return False\n        try:\n            id = self.read(cr, uid, [self._get_id(cr, uid, module, xml_id)], ['res_id'])[0]['res_id']\n            self.loads[(module,xml_id)] = (model,id)\n        except:\n            id = False\n        return id\n    def clear_caches(self):\n        \"\"\" Clears all orm caches on the object's methods\n        :returns: itself\n        \"\"\"\n        self._get_id.clear_cache(self)\n        self.get_object_reference.clear_cache(self)\n        return self\n    def unlink(self, cr, uid, ids, context=None):\n        \"\"\" Regular unlink method, but make sure to clear the caches. \"\"\"\n        self.clear_caches()\n        return super(ir_model_data,self).unlink(cr, uid, ids, context=context)\n    def _update(self,cr, uid, model, module, values, xml_id=False, store=True, noupdate=False, mode='init', res_id=False, context=None):\n        model_obj = self.pool.get(model)\n        if not context:\n            context = {}\n        # records created during module install should not display the messages of OpenChatter\n        context = dict(context, install_mode=True)\n        if xml_id and ('.' in xml_id):\n            assert len(xml_id.split('.'))==2, _(\"'%s' contains too many dots. XML ids should not contain dots ! These are used to refer to other modules data, as in module.reference_id\") % xml_id\n            module, xml_id = xml_id.split('.')\n        if (not xml_id) and (not self.doinit):\n            return False\n        action_id = False\n        if xml_id:\n            cr.execute('''SELECT imd.id, imd.res_id, md.id, imd.model\n                          FROM ir_model_data imd LEFT JOIN %s md ON (imd.res_id = md.id)\n                          WHERE imd.module=%%s AND imd.name=%%s''' % model_obj._table,\n                          (module, xml_id))\n            results = cr.fetchall()\n            for imd_id2,res_id2,real_id2,real_model in results:\n                if not real_id2:\n                    self._get_id.clear_cache(self, uid, module, xml_id)\n                    self.get_object_reference.clear_cache(self, uid, module, xml_id)\n                    cr.execute('delete from ir_model_data where id=%s', (imd_id2,))\n                    res_id = False\n                else:\n                    assert model == real_model, \"External ID conflict, %s already refers to a `%s` record,\"\\\n                        \" you can't define a `%s` record with this ID.\" % (xml_id, real_model, model)\n                    res_id,action_id = res_id2,imd_id2\n        if action_id and res_id:\n            model_obj.write(cr, uid, [res_id], values, context=context)\n            self.write(cr, uid, [action_id], {\n                'date_update': time.strftime('%Y-%m-%d %H:%M:%S'),\n                },context=context)\n        elif res_id:\n            model_obj.write(cr, uid, [res_id], values, context=context)\n            if xml_id:\n                self.create(cr, uid, {\n                    'name': xml_id,\n                    'model': model,\n                    'module':module,\n                    'res_id':res_id,\n                    'noupdate': noupdate,\n                    },context=context)\n                if model_obj._inherits:\n                    for table in model_obj._inherits:\n                        inherit_id = model_obj.browse(cr, uid,\n                                res_id,context=context)[model_obj._inherits[table]]\n                        self.create(cr, uid, {\n                            'name': xml_id + '_' + table.replace('.', '_'),\n                            'model': table,\n                            'module': module,\n                            'res_id': inherit_id.id,\n                            'noupdate': noupdate,\n                            },context=context)\n        else:\n            if mode=='init' or (mode=='update' and xml_id):\n                res_id = model_obj.create(cr, uid, values, context=context)\n                if xml_id:\n                    self.create(cr, uid, {\n                        'name': xml_id,\n                        'model': model,\n                        'module': module,\n                        'res_id': res_id,\n                        'noupdate': noupdate\n                        },context=context)\n                    if model_obj._inherits:\n                        for table in model_obj._inherits:\n                            inherit_id = model_obj.browse(cr, uid,\n                                    res_id,context=context)[model_obj._inherits[table]]\n                            self.create(cr, uid, {\n                                'name': xml_id + '_' + table.replace('.', '_'),\n                                'model': table,\n                                'module': module,\n                                'res_id': inherit_id.id,\n                                'noupdate': noupdate,\n                                },context=context)\n        if xml_id and res_id:\n            self.loads[(module, xml_id)] = (model, res_id)\n            for table, inherit_field in model_obj._inherits.iteritems():\n                inherit_id = model_obj.read(cr, uid, res_id,\n                        [inherit_field])[inherit_field]\n                self.loads[(module, xml_id + '_' + table.replace('.', '_'))] = (table, inherit_id)\n        return res_id\n    def ir_set(self, cr, uid, key, key2, name, models, value, replace=True, isobject=False, meta=None, xml_id=False):\n        if isinstance(models[0], (list, tuple)):\n            model,res_id = models[0]\n        else:\n            res_id=None\n            model = models[0]\n        if res_id:\n            where = ' and res_id=%s' % (res_id,)\n        else:\n            where = ' and (res_id is null)'\n        if key2:\n            where += ' and key2=\\'%s\\'' % (key2,)\n        else:\n            where += ' and (key2 is null)'\n        cr.execute('select * from ir_values where model=%s and key=%s and name=%s'+where,(model, key, name))\n        res = cr.fetchone()\n        if not res:\n", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "length": 4578, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "d67076d9d7bf62b5c38c0440629a0ded22f13c821ac9e30b"}
{"input": "", "context": "/*\n * Copyright (c) 2014, 2019, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.svm.core.thread;\nimport org.graalvm.compiler.api.directives.GraalDirectives;\nimport org.graalvm.compiler.api.replacements.Fold;\nimport org.graalvm.compiler.replacements.ReplacementsUtil;\nimport org.graalvm.compiler.replacements.nodes.AssertionNode;\nimport org.graalvm.nativeimage.CurrentIsolate;\nimport org.graalvm.nativeimage.ImageSingletons;\nimport org.graalvm.nativeimage.Isolate;\nimport org.graalvm.nativeimage.IsolateThread;\nimport org.graalvm.nativeimage.c.function.CFunction;\nimport org.graalvm.nativeimage.c.function.CodePointer;\nimport org.graalvm.nativeimage.c.type.CCharPointer;\nimport org.graalvm.nativeimage.impl.UnmanagedMemorySupport;\nimport org.graalvm.word.Pointer;\nimport org.graalvm.word.PointerBase;\nimport org.graalvm.word.UnsignedWord;\nimport org.graalvm.word.WordFactory;\nimport com.oracle.svm.core.SubstrateOptions;\nimport com.oracle.svm.core.annotate.NeverInline;\nimport com.oracle.svm.core.annotate.Uninterruptible;\nimport com.oracle.svm.core.c.function.CEntryPointErrors;\nimport com.oracle.svm.core.c.function.CFunctionOptions;\nimport com.oracle.svm.core.heap.Heap;\nimport com.oracle.svm.core.jdk.UninterruptibleUtils;\nimport com.oracle.svm.core.jdk.UninterruptibleUtils.AtomicWord;\nimport com.oracle.svm.core.locks.VMCondition;\nimport com.oracle.svm.core.locks.VMMutex;\nimport com.oracle.svm.core.log.Log;\nimport com.oracle.svm.core.nodes.CFunctionEpilogueNode;\nimport com.oracle.svm.core.nodes.CFunctionPrologueNode;\nimport com.oracle.svm.core.threadlocal.FastThreadLocal;\nimport com.oracle.svm.core.threadlocal.FastThreadLocalFactory;\nimport com.oracle.svm.core.threadlocal.FastThreadLocalInt;\nimport com.oracle.svm.core.threadlocal.FastThreadLocalWord;\nimport com.oracle.svm.core.threadlocal.VMThreadLocalMTSupport;\nimport com.oracle.svm.core.util.UnsignedUtils;\nimport com.oracle.svm.core.util.VMError;\n/**\n * Utility methods for the manipulation and iteration of {@link IsolateThread}s.\n */\npublic abstract class VMThreads {\n    @Fold\n    public static VMThreads singleton() {\n        return ImageSingletons.lookup(VMThreads.class);\n    }\n    /**\n     * Only use this mutex if it is absolutely necessary to operate on the linked list of\n     * {@link IsolateThread}s. This mutex is especially dangerous because it is used by the\n     * application, the GC, and the safepoint mechanism. To avoid potential deadlocks, all places\n     * that acquire this mutex must do one of the following:\n     *\n     * <ol type=\"a\">\n     * <li>Acquire the mutex within a VM operation: this is safe because it fixes the order in which\n     * the mutexes are acquired (VMOperation queue mutex first, {@link #THREAD_MUTEX} second). If\n     * the VM operation causes a safepoint, then it is possible that the {@link #THREAD_MUTEX} was\n     * already acquired for safepoint reasons.</li>\n     * <li>Acquire the mutex from a thread that is not yet attached\n     * ({@link StatusSupport#STATUS_CREATED}).</li>\n     * <li>Acquire the mutex from a thread that is in native code\n     * ({@link StatusSupport#STATUS_IN_NATIVE}). This is also possible from a thread that is in Java\n     * state by doing an explicit transition to native, see\n     * {@link #lockThreadMutexInNativeCode}.</li>\n     * </ol>\n     *\n     * Deadlock example 1:\n     * <ul>\n     * <li>Thread A acquires the {@link #THREAD_MUTEX}.</li>\n     * <li>Thread B queues a VM operation and therefore holds the corresponding VM operation queue\n     * mutex.</li>\n     * <li>Thread A allocates an object and the allocation wants to trigger a GC. So, a VM operation\n     * needs to be queued, and thread A tries to acquire the VM operation queue mutex. Thread A is\n     * blocked because thread B holds that mutex.</li>\n     * <li>Thread B needs to initiate a safepoint before executing the VM operation. So, it tries to\n     * acquire the {@link #THREAD_MUTEX} and is blocked because thread A holds that mutex.</li>\n     * </ul>\n     *\n     * Deadlock example 2:\n     * <ul>\n     * <li>Thread A acquires the {@link #THREAD_MUTEX}.</li>\n     * <li>Thread A allocates an object and the allocation wants to trigger a GC. So, a VM operation\n     * is queued and thread A blocks until the VM operation is completed.</li>\n     * <li>The dedicated VM operation thread needs to initiate a safepoint for the execution of the\n     * VM operation. So, it tries to acquire {@link #THREAD_MUTEX} and is blocked because thread A\n     * still holds that mutex.</li>\n     * </ul>\n     */\n    protected static final VMMutex THREAD_MUTEX = new VMMutex(\"thread\");\n    /**\n     * A condition variable for waiting for and notifying on changes to the {@link IsolateThread}\n     * list.\n     */\n    protected static final VMCondition THREAD_LIST_CONDITION = new VMCondition(THREAD_MUTEX);\n    /** The first element in the linked list of {@link IsolateThread}s. */\n    private static IsolateThread head;\n    /**\n     * This field is used to guarantee that all isolate threads that were started by SVM have exited\n     * on the operating system level before tearing down an isolate. This is necessary to prevent\n     * the case that a shared library native image is unloaded while there are still running\n     * threads.\n     *\n     * If a thread is referenced by this field, then it was started by the current isolate and has\n     * already finished execution on the Java-level. However, without checking explicitly, we can't\n     * say for sure if a thread has exited on the operating system level as well.\n     */\n    private static AtomicWord<OSThreadHandle> detachedOsThreadToCleanup = new AtomicWord<>();\n    /**\n     * The next element in the linked list of {@link IsolateThread}s. A thread points to itself with\n     * this field after being removed from the linked list.\n     */\n    public static final FastThreadLocalWord<IsolateThread> nextTL = FastThreadLocalFactory.createWord(\"VMThreads.nextTL\");\n    private static final FastThreadLocalWord<OSThreadId> OSThreadIdTL = FastThreadLocalFactory.createWord(\"VMThreads.OSThreadIdTL\");\n    protected static final FastThreadLocalWord<OSThreadHandle> OSThreadHandleTL = FastThreadLocalFactory.createWord(\"VMThreads.OSThreadHandleTL\");\n    public static final FastThreadLocalWord<Isolate> IsolateTL = FastThreadLocalFactory.createWord(\"VMThreads.IsolateTL\");\n    /** The highest stack address. */\n    public static final FastThreadLocalWord<UnsignedWord> StackBase = FastThreadLocalFactory.createWord(\"VMThreads.StackBase\");\n    /**\n     * The lowest stack address. Note that this value does not necessarily match the value that is\n     * used for the stack overflow check.\n     */\n    public static final FastThreadLocalWord<UnsignedWord> StackEnd = FastThreadLocalFactory.createWord(\"VMThreads.StackEnd\");\n    private static final int STATE_UNINITIALIZED = 1;\n    private static final int STATE_INITIALIZING = 2;\n    private static final int STATE_INITIALIZED = 3;\n    private static final int STATE_TEARING_DOWN = 4;\n    private static final UninterruptibleUtils.AtomicInteger initializationState = new UninterruptibleUtils.AtomicInteger(STATE_UNINITIALIZED);\n    @Uninterruptible(reason = \"Called from uninterruptible code. Too early for safepoints.\")\n    public static boolean isInitialized() {\n        return initializationState.get() >= STATE_INITIALIZED;\n    }\n    /** Is threading being torn down? */\n    @Uninterruptible(reason = \"Called from uninterruptible code during tear down.\")\n    public static boolean isTearingDown() {\n        return initializationState.get() >= STATE_TEARING_DOWN;\n    }\n    /** Note that threading is being torn down. */\n    static void setTearingDown() {\n        initializationState.set(STATE_TEARING_DOWN);\n    }\n    /**\n     * Make sure the runtime is initialized for threading.\n     */\n    @Uninterruptible(reason = \"Called from uninterruptible code. Too early for safepoints.\")\n    public static boolean ensureInitialized() {\n        boolean result = true;\n        if (initializationState.compareAndSet(STATE_UNINITIALIZED, STATE_INITIALIZING)) {\n            /*\n             * We claimed the initialization lock, so we are now responsible for doing all the\n             * initialization.\n             */\n            result = singleton().initializeOnce();\n            initializationState.set(STATE_INITIALIZED);\n        } else {\n            /* Already initialized, or some other thread claimed the initialization lock. */\n            while (initializationState.get() < STATE_INITIALIZED) {\n                /* Busy wait until the other thread finishes the initialization. */\n            }\n        }\n        return result;\n    }\n    /**\n     * Invoked exactly once early during the startup of an isolate. Subclasses can perform\n     * initialization of native OS resources.\n     */\n    @Uninterruptible(reason = \"Called from uninterruptible code. Too early for safepoints.\")\n    protected abstract boolean initializeOnce();\n    /*\n     * Stores the unaligned memory address returned by calloc, so that we can properly free the\n     * memory again.\n     */\n    private static final FastThreadLocalWord<Pointer> unalignedIsolateThreadMemoryTL = FastThreadLocalFactory.createWord(\"VMThreads.unalignedIsolateThreadMemoryTL\");\n    /**\n     * Allocate native memory for a {@link IsolateThread}. The returned memory must be initialized\n     * to 0.\n     */\n    @Uninterruptible(reason = \"Thread state not set up.\")\n    public IsolateThread allocateIsolateThread(int isolateThreadSize) {\n        /*\n         * We prefer to have the IsolateThread aligned on cache-line boundary, to avoid false\n         * sharing with native memory allocated before it. But until we have the real cache line\n         * size from the OS, we just use a hard-coded best guess. Using an inaccurate value does not\n         * lead to correctness problems.\n         */\n        UnsignedWord alignment = WordFactory.unsigned(64);\n        UnsignedWord memorySize = WordFactory.unsigned(isolateThreadSize).add(alignment);\n        Pointer memory = ImageSingletons.lookup(UnmanagedMemorySupport.class).calloc(memorySize);\n        if (memory.isNull()) {\n            return WordFactory.nullPointer();\n        }\n        IsolateThread isolateThread = (IsolateThread) UnsignedUtils.roundUp(memory, alignment);\n        unalignedIsolateThreadMemoryTL.set(isolateThread, memory);\n        return isolateThread;\n    }\n    /**\n     * Free the native memory allocated by {@link #allocateIsolateThread}.\n     */\n    @Uninterruptible(reason = \"Thread state not set up.\")\n    public void freeIsolateThread(IsolateThread thread) {\n        Pointer memory = unalignedIsolateThreadMemoryTL.get(thread);\n        ImageSingletons.lookup(UnmanagedMemorySupport.class).free(memory);\n    }\n    /**\n     * Report a fatal error to the user and exit. This method must not return.\n     */\n    @Uninterruptible(reason = \"Unknown thread state.\")\n    public abstract void failFatally(int code, CCharPointer message);\n    /**\n     * Iteration of all {@link IsolateThread}s that are currently running. {@link #THREAD_MUTEX}\n     * must be held when iterating the list.\n     *\n     * Use the following pattern to iterate all running threads. It is allocation free and can\n     * therefore be used during GC:\n     *\n     * <pre>\n     * for (VMThread thread = VMThreads.firstThread(); thread.isNonNull(); thread = VMThreads.nextThread(thread)) {\n     * </pre>\n     */\n    @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n    public static IsolateThread firstThread() {\n        guaranteeOwnsThreadMutex(\"Threads mutex must be locked before accessing/iterating the thread list.\");\n        return firstThreadUnsafe();\n    }\n    /**\n     * Like {@link #firstThread()} but without the check that {@link #THREAD_MUTEX} is locked by the\n     * current thread. Only use this method if absolutely necessary (e.g., for printing diagnostics\n     * on a fatal error).\n     */\n    @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n    public static IsolateThread firstThreadUnsafe() {\n        return head;\n    }\n    /**\n     * Iteration of all {@link IsolateThread}s that are currently running. See\n     * {@link #firstThread()} for details.\n     */\n    @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n    public static IsolateThread nextThread(IsolateThread cur) {\n        return nextTL.get(cur);\n    }\n    /**\n     * Creates a new {@link IsolateThread} and adds it to the list of running threads. This method\n     * must be the first method called in every thread.\n     */\n    @Uninterruptible(reason = \"Thread is not attached yet.\")\n    public int attachThread(IsolateThread thread) {\n        assert StatusSupport.isStatusCreated(thread) : \"Status should be initialized on creation.\";\n        OSThreadIdTL.set(thread, getCurrentOSThreadId());\n        OSThreadHandleTL.set(thread, getCurrentOSThreadHandle());\n        /* Set initial values for safepointRequested before making the thread visible. */\n        assert !ThreadingSupportImpl.isRecurringCallbackRegistered(thread);\n        Safepoint.setSafepointRequested(thread, Safepoint.THREAD_REQUEST_RESET);\n        THREAD_MUTEX.lockNoTransition();\n        try {\n            nextTL.set(thread, head);\n            head = thread;\n            Heap.getHeap().attachThread(CurrentIsolate.getCurrentThread());\n            /* On the initial transition to java code this thread should be synchronized. */\n            ActionOnTransitionToJavaSupport.setSynchronizeCode(thread);\n            StatusSupport.setStatusNative(thread);\n            THREAD_LIST_CONDITION.broadcast();\n        } finally {\n            THREAD_MUTEX.unlock();\n        }\n        return CEntryPointErrors.NO_ERROR;\n    }\n    /**\n     * Remove an {@link IsolateThread} from the thread list. This method must be the last method\n     * called in every thread.\n     */\n    @Uninterruptible(reason = \"Manipulates the threads list; broadcasts on changes.\")\n    public void detachThread(IsolateThread thread) {\n        assert thread.equal(CurrentIsolate.getCurrentThread()) : \"Cannot detach different thread with this method\";\n        // read thread local data (can't be accessed further below as the IsolateThread is freed)\n        OSThreadHandle nextOsThreadToCleanup = WordFactory.nullPointer();\n        if (PlatformThreads.wasStartedByCurrentIsolate(thread)) {\n            nextOsThreadToCleanup = OSThreadHandleTL.get(thread);\n        }\n        cleanupBeforeDetach(thread);\n        // From this point on, all code must be fully uninterruptible because this thread either\n        // holds the THREAD_MUTEX (see the JavaDoc on THREAD_MUTEX) or because the IsolateThread was\n        // already freed.\n        lockThreadMutexInNativeCode();\n        OSThreadHandle threadToCleanup;\n        try {\n            detachThreadInSafeContext(thread);\n            /*-\n             * It is crucial that the current thread is marked for cleanup WHILE still holding the\n             * thread mutex. Otherwise, the following race can happen with the teardown code:\n             * - This thread unlocks the thread mutex and notifies waiting threads that a thread\n             * was detached.\n             * - The teardown code realizes that the last thread was detached and checks for\n             * remaining operating system threads to clean up. As there are no threads marked for\n             * cleanup, the teardown is done.\n             * - This thread marks itself for cleanup and crashes because the Java heap was torn\n             * down.\n             */\n            threadToCleanup = detachedOsThreadToCleanup.getAndSet(nextOsThreadToCleanup);\n            releaseThread(thread);\n        } finally {\n            THREAD_MUTEX.unlock();\n        }\n        cleanupExitedOsThread(threadToCleanup);\n    }\n    @Uninterruptible(reason = \"Called from uninterruptible code.\")\n    @NeverInline(\"Must not be inlined in a caller that has an exception handler: We only support InvokeNode and not InvokeWithExceptionNode between a CFunctionPrologueNode and CFunctionEpilogueNode.\")\n    static void lockThreadMutexInNativeCode() {\n        CFunctionPrologueNode.cFunctionPrologue(StatusSupport.STATUS_IN_NATIVE);\n        lockThreadMutexInNativeCode0();\n        CFunctionEpilogueNode.cFunctionEpilogue(StatusSupport.STATUS_IN_NATIVE);\n    }\n    @Uninterruptible(reason = \"Must not stop while in native.\")\n    @NeverInline(\"Provide a return address for the Java frame anchor.\")\n    private static void lockThreadMutexInNativeCode0() {\n        THREAD_MUTEX.lockNoTransition();\n    }\n    @Uninterruptible(reason = \"Thread is detaching and holds the THREAD_MUTEX.\")\n    private static void releaseThread(IsolateThread thread) {\n        THREAD_MUTEX.guaranteeIsOwner(\"This mutex must be locked to prevent that a GC is triggered while detaching a thread from the heap\");\n        Heap.getHeap().detachThread(thread);\n        singleton().freeIsolateThread(thread);\n        // After that point, the freed thread must not access Object data in the Java heap.\n    }\n    @Uninterruptible(reason = \"Called from uninterruptible code.\")\n    protected void cleanupExitedOsThreads() {\n        OSThreadHandle threadToCleanup = detachedOsThreadToCleanup.getAndSet(WordFactory.nullPointer());\n        cleanupExitedOsThread(threadToCleanup);\n    }\n    /**\n     * This builds a dependency chain: if the current thread (n) exits, then it is guaranteed that\n     * the previous thread (n-1) exited on the operating-system level as well (because thread n\n     * joins thread n-1).\n     */\n    @Uninterruptible(reason = \"Called from uninterruptible code.\")\n    private void cleanupExitedOsThread(OSThreadHandle threadToCleanup) {\n        if (threadToCleanup.isNonNull()) {\n            joinNoTransition(threadToCleanup);\n        }\n    }\n    @Uninterruptible(reason = \"Thread is detaching and holds the THREAD_MUTEX.\")\n    private static void detachThreadInSafeContext(IsolateThread thread) {\n        PlatformThreads.detachThread(thread);\n        removeFromThreadList(thread);\n        // Signal that the VMThreads list has changed.\n        THREAD_LIST_CONDITION.broadcast();\n    }\n    @Uninterruptible(reason = \"Thread is detaching and holds the THREAD_MUTEX.\")\n    private static void removeFromThreadList(IsolateThread thread) {\n        IsolateThread previous = WordFactory.nullPointer();\n        IsolateThread current = head;\n        while (current.isNonNull()) {\n            IsolateThread next = nextTL.get(current);\n            if (current == thread) {\n                // Splice the current element out of the list.\n                if (previous.isNull()) {\n                    head = next;\n                } else {\n                    nextTL.set(previous, next);\n                }\n                // Set to the sentinel value denoting the thread is detached\n                nextTL.set(thread, thread);\n                break;\n            } else {\n                previous = current;\n                current = next;\n            }\n        }\n    }\n    public void tearDown() {\n        ThreadingSupportImpl.pauseRecurringCallback(\"Execution of arbitrary code is prohibited during the last teardown steps.\");\n        if (VMOperationControl.useDedicatedVMOperationThread()) {\n            VMOperationControl.shutdownAndDetachVMOperationThread();\n        }\n        // At this point, it is guaranteed that all other threads were detached.\n        waitUntilLastOsThreadExited();\n    }\n    /**\n     * Wait until the last operating-system thread exited. This implicitly guarantees (see\n     * {@link #detachedOsThreadToCleanup}) that all other threads exited on the operating-system\n     * level as well.\n     */\n    @Uninterruptible(reason = \"Called from uninterruptible code during teardown.\")\n    private void waitUntilLastOsThreadExited() {\n        cleanupExitedOsThreads();\n    }\n    @Uninterruptible(reason = \"Called from uninterruptible code, but still safe at this point.\", calleeMustBe = false, mayBeInlined = true)\n    private static void cleanupBeforeDetach(IsolateThread thread) {\n        PlatformThreads.cleanupBeforeDetach(thread);\n    }\n    /**\n     * Detaches all manually attached native threads, but not those threads that were launched from\n     * Java, which must be notified to individually exit in the immediately following tear-down.\n     *\n     * We cannot {@linkplain #cleanupBeforeDetach clean up} the threads we detach here because\n     * cleanup code needs to run in the detaching thread itself. We assume that this is tolerable\n     * considering the immediately following tear-down.\n     */\n    public void detachAllThreadsExceptCurrentWithoutCleanupForTearDown() {\n        JavaVMOperation.enqueueBlockingSafepoint(\"detachAllThreadsExceptCurrent\", () -> {\n            IsolateThread currentThread = CurrentIsolate.getCurrentThread();\n            IsolateThread thread = firstThread();\n            while (thread.isNonNull()) {\n                IsolateThread next = nextThread(thread);\n                if (thread.notEqual(currentThread)) {\n                    Thread javaThread = PlatformThreads.fromVMThread(thread);\n                    if (!PlatformThreads.wasStartedByCurrentIsolate(javaThread)) {\n                        detachThreadInSafeContext(thread);\n                        releaseThread(thread);\n                    }\n                }\n                thread = next;\n            }\n        });\n    }\n    /**\n     * Executes a non-multithreading-safe low-level (i.e., non-Java-level) join operation on the\n     * given native thread. If the thread hasn't yet exited on the operating system level, this\n     * method blocks until the thread exits on the operating system level. After successfully\n     * joining a thread, the operating system may free resources and recycle/reuse the given thread\n     * id for other newly started threads.\n     *\n     * As this method is marked as uninterruptible, it may only be used for joining threads that\n     * were already detached from SVM. Otherwise, this could result in deadlocks.\n     */\n    @Uninterruptible(reason = \"Called from uninterruptible code.\")\n    protected abstract void joinNoTransition(OSThreadHandle osThreadHandle);\n    /**\n     * Returns a platform-specific handle to the current thread. This handle can for example be used\n     * for joining a thread. Depending on the specific platform, it can be necessary to explicitly\n     * free the handle when it is no longer used. To avoid leaking operating system resources, this\n     * method should therefore only be called in {@link #attachThread(IsolateThread)}, when\n     * {@link #OSThreadHandleTL} is not set yet.\n     */\n    @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n    protected abstract OSThreadHandle getCurrentOSThreadHandle();\n    /**\n     * Returns a unique identifier for the current thread.\n     */\n    @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n    protected abstract OSThreadId getCurrentOSThreadId();\n    /**\n     * Puts this thread to sleep on the operating-system level and does not care about Java\n     * semantics. May only be used in very specific situations, e.g., when printing diagnostics.\n     */\n    @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n    public void nativeSleep(@SuppressWarnings(\"unused\") int milliseconds) {\n        throw VMError.shouldNotReachHere();\n    }\n    @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n    public void yield() {\n        throw VMError.shouldNotReachHere();\n    }\n    // Should not be implemented and will be removed with GR-34388.\n    @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n    public boolean supportsNativeYieldAndSleep() {\n        return false;\n    }\n    @Uninterruptible(reason = \"Called from uninterruptible verification code.\", mayBeInlined = true)\n    public boolean verifyThreadIsAttached(IsolateThread thread) {\n        return nextThread(thread) != thread;\n    }\n    @Uninterruptible(reason = \"Called from uninterruptible verification code.\", mayBeInlined = true)\n    public boolean verifyIsCurrentThread(IsolateThread thread) {\n        OSThreadId osThreadId = getCurrentOSThreadId();\n        return OSThreadIdTL.get(thread).equal(osThreadId);\n    }\n    @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n    public IsolateThread findIsolateThreadForCurrentOSThread(boolean inCrashHandler) {\n        OSThreadId osThreadId = getCurrentOSThreadId();\n        /*\n         * This code can execute during the prologue of a crash handler for a thread that already\n         * owns the lock. Trying to reacquire the lock here would result in deadlock.\n         */\n        boolean needsLock = !inCrashHandler;\n        if (needsLock) {\n            /*\n             * Accessing the VMThread list requires the lock, but locking must be without\n             * transitions because the IsolateThread is not set up yet.\n             */\n            THREAD_MUTEX.lockNoTransitionUnspecifiedOwner();\n        }\n        try {\n            IsolateThread thread;\n            for (thread = firstThreadUnsafe(); thread.isNonNull() && OSThreadIdTL.get(thread).notEqual(osThreadId); thread = nextThread(thread)) {\n            }\n            return thread;\n        } finally {\n            if (needsLock) {\n                THREAD_MUTEX.unlockNoTransitionUnspecifiedOwner();\n            }\n        }\n    }\n    @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n    public static void guaranteeOwnsThreadMutex(String message) {\n        THREAD_MUTEX.guaranteeIsOwner(message);\n    }\n    @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n    public static boolean ownsThreadMutex() {\n        return THREAD_MUTEX.isOwner();\n    }\n    public static boolean printLocationInfo(Log log, UnsignedWord value, boolean allowUnsafeOperations) {\n        for (IsolateThread thread = firstThreadUnsafe(); thread.isNonNull(); thread = nextThread(thread)) {\n            if (thread.equal(value)) {\n                log.string(\"is a thread\");\n                return true;\n            }\n            if (allowUnsafeOperations || VMOperation.isInProgressAtSafepoint()) {\n                // If we are not at a safepoint, then it is unsafe to access thread locals of\n                // another thread as the IsolateThread could be freed at any time.\n                UnsignedWord stackBase = StackBase.get(thread);\n                UnsignedWord stackEnd = StackEnd.get(thread);\n                if (value.belowThan(stackBase) && value.aboveOrEqual(stackEnd)) {\n                    log.string(\"points into the stack for thread \").zhex(thread);\n                    return true;\n                }\n            }\n            if (SubstrateOptions.MultiThreaded.getValue()) {\n                int sizeOfThreadLocals = ImageSingletons.lookup(VMThreadLocalMTSupport.class).vmThreadSize;\n                UnsignedWord endOfThreadLocals = ((UnsignedWord) thread).add(sizeOfThreadLocals);\n                if (value.aboveOrEqual((UnsignedWord) thread) && value.belowThan(endOfThreadLocals)) {\n                    log.string(\"points into the thread locals for thread \").zhex(thread);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /*\n     * Access to platform-specific implementations.\n     */\n    /** A thread-local enum giving the thread status of a VMThread. And supporting methods. */\n    public static class StatusSupport {\n        /** The status of a {@link IsolateThread}. */\n        public static final FastThreadLocalInt statusTL = FastThreadLocalFactory.createInt(\"StatusSupport.statusTL\").setMaxOffset(FastThreadLocal.FIRST_CACHE_LINE);\n        /** An illegal thread state for places where we need to pass a value. */\n        public static final int STATUS_ILLEGAL = -1;\n        /**\n         * {@link IsolateThread} memory has been allocated for the thread, but the thread is not on\n         * the VMThreads list yet.\n         */\n        public static final int STATUS_CREATED = 0;\n        /** The thread is running in Java code. */\n        public static final int STATUS_IN_JAVA = STATUS_CREATED + 1;\n        /** The thread has been requested to stop at a safepoint. */\n        public static final int STATUS_IN_SAFEPOINT = STATUS_IN_JAVA + 1;\n        /** The thread is running in native code. */\n        public static final int STATUS_IN_NATIVE = STATUS_IN_SAFEPOINT + 1;\n        /** The thread is running in trusted native code that was linked into the image. */\n        public static final int STATUS_IN_VM = STATUS_IN_NATIVE + 1;\n        private static final int MAX_STATUS = STATUS_IN_VM;\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        private static String statusToString(int status) {\n            switch (status) {\n                case STATUS_CREATED:\n                    return \"STATUS_CREATED\";\n                case STATUS_IN_JAVA:\n                    return \"STATUS_IN_JAVA\";\n                case STATUS_IN_SAFEPOINT:\n                    return \"STATUS_IN_SAFEPOINT\";\n                case STATUS_IN_NATIVE:\n                    return \"STATUS_IN_NATIVE\";\n                case STATUS_IN_VM:\n                    return \"STATUS_IN_VM\";\n                default:\n                    return \"STATUS error\";\n            }\n        }\n        /* Access methods to treat VMThreads.statusTL as a volatile int. */\n        /** For debugging. */\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static String getStatusString(IsolateThread vmThread) {\n            return statusToString(statusTL.getVolatile(vmThread));\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static int getStatusVolatile(IsolateThread vmThread) {\n            return statusTL.getVolatile(vmThread);\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static int getStatusVolatile() {\n            return statusTL.getVolatile();\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setStatusNative() {\n            statusTL.setVolatile(STATUS_IN_NATIVE);\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setStatusNative(IsolateThread vmThread) {\n            statusTL.setVolatile(vmThread, STATUS_IN_NATIVE);\n        }\n        /** There is no unguarded change to safepoint. */\n        public static boolean compareAndSetNativeToSafepoint(IsolateThread vmThread) {\n            return statusTL.compareAndSet(vmThread, STATUS_IN_NATIVE, STATUS_IN_SAFEPOINT);\n        }\n        /** An <em>unguarded</em> transition to Java. */\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setStatusJavaUnguarded() {\n            statusTL.setVolatile(STATUS_IN_JAVA);\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setStatusVM() {\n            statusTL.setVolatile(STATUS_IN_VM);\n        }\n        /** A guarded transition from native to another status. */\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static boolean compareAndSetNativeToNewStatus(int newStatus) {\n            return statusTL.compareAndSet(STATUS_IN_NATIVE, newStatus);\n        }\n        /*\n         * When querying and checking the thread status, be careful that the status is read only\n         * once. Reading the status multiple times is prone to race conditions. For example, the\n         * condition 'isStatusSafepoint() || isStatusNative()' could return false if another thread\n         * requests a safepoint after the first check was already executed. The condition\n         * 'isStatusNative() || isStatusSafepoint()' could return false if the safepoint is released\n         * after the first condition was checked.\n         */\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static boolean isStatusCreated(IsolateThread vmThread) {\n            return (statusTL.getVolatile(vmThread) == STATUS_CREATED);\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static boolean isStatusNativeOrSafepoint(IsolateThread vmThread) {\n            int status = statusTL.getVolatile(vmThread);\n            return status == STATUS_IN_NATIVE || status == STATUS_IN_SAFEPOINT;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static boolean isStatusNativeOrSafepoint() {\n            int status = statusTL.getVolatile();\n            return status == STATUS_IN_NATIVE || status == STATUS_IN_SAFEPOINT;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static boolean isStatusVM() {\n            return statusTL.getVolatile() == STATUS_IN_VM;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static boolean isStatusJava() {\n            return statusTL.getVolatile() == STATUS_IN_JAVA;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void assertStatusJava() {\n            String msg = \"Thread status must be 'Java'.\";\n            if (GraalDirectives.inIntrinsic()) {\n                if (ReplacementsUtil.REPLACEMENTS_ASSERTIONS_ENABLED) {\n                    AssertionNode.dynamicAssert(isStatusJava(), msg);\n                }\n            } else {\n                assert isStatusJava() : msg;\n            }\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void assertStatusNativeOrSafepoint() {\n            String msg = \"Thread status must be 'native' or 'safepoint'.\";\n            if (GraalDirectives.inIntrinsic()) {\n                if (ReplacementsUtil.REPLACEMENTS_ASSERTIONS_ENABLED) {\n                    AssertionNode.dynamicAssert(isStatusNativeOrSafepoint(), msg);\n                }\n            } else {\n                assert isStatusNativeOrSafepoint() : msg;\n            }\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void assertStatusVM() {\n            String msg = \"Thread status must be 'VM'.\";\n            if (GraalDirectives.inIntrinsic()) {\n                if (ReplacementsUtil.REPLACEMENTS_ASSERTIONS_ENABLED) {\n                    AssertionNode.dynamicAssert(isStatusVM(), msg);\n                }\n            } else {\n                assert isStatusVM() : msg;\n            }\n        }\n        public static boolean isValidStatus(int status) {\n            return status > STATUS_ILLEGAL && status <= MAX_STATUS;\n        }\n        public static int getNewThreadStatus(CFunction.Transition transition) {\n            switch (transition) {\n                case NO_TRANSITION:\n                    return StatusSupport.STATUS_ILLEGAL;\n                case TO_NATIVE:\n                    return StatusSupport.STATUS_IN_NATIVE;\n                default:\n                    throw VMError.shouldNotReachHere(\"Unknown transition type \" + transition);\n            }\n        }\n        public static int getNewThreadStatus(CFunctionOptions.Transition transition) {\n            switch (transition) {\n                case TO_VM:\n                    return StatusSupport.STATUS_IN_VM;\n                default:\n                    throw VMError.shouldNotReachHere(\"Unknown transition type \" + transition);\n            }\n        }\n    }\n    public static class SafepointBehavior {\n        /** Determines how this thread interacts with the safepoint handling. */\n        private static final FastThreadLocalInt safepointBehaviorTL = FastThreadLocalFactory.createInt(\"StatusSupport.safepointBehaviorTL\");\n        /** The thread will freeze as soon as possible if a safepoint is requested. */\n        public static final int ALLOW_SAFEPOINT = 0;\n        /**\n         * The thread won't freeze at a safepoint, and will actively prevent the VM from reaching a\n         * safepoint (regardless of the thread status).\n         */\n        static final int PREVENT_VM_FROM_REACHING_SAFEPOINT = 1;\n        /**\n         * The thread won't freeze at a safepoint and the safepoint handling will ignore the thread.\n         * So, the VM will be able to reach a safepoint regardless of the status of this thread.\n         */\n        static final int THREAD_CRASHED = 2;\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static boolean ignoresSafepoints() {\n            return safepointBehaviorTL.getVolatile() != ALLOW_SAFEPOINT;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static boolean ignoresSafepoints(IsolateThread vmThread) {\n            return safepointBehaviorTL.getVolatile(vmThread) != ALLOW_SAFEPOINT;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static int getSafepointBehaviorVolatile(IsolateThread vmThread) {\n            return safepointBehaviorTL.getVolatile(vmThread);\n        }\n        /**\n         * Changes the safepoint behavior so that this thread won't freeze at a safepoint. The\n         * thread will also actively prevent the VM from reaching a safepoint (regardless of its\n         * thread status).\n         * \n         * NOTE: Be careful with this method and make sure that this thread does not allocate any\n         * Java objects as this could result deadlocks. This method will only work prevent\n         * safepoints reliably if it is called from a thread with\n         * {@link StatusSupport#STATUS_IN_JAVA}.\n         */\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", callerMustBe = true)\n        public static void preventSafepoints() {\n            // It would be nice if we could retire the TLAB here but that wouldn't work reliably.\n            safepointBehaviorTL.setVolatile(PREVENT_VM_FROM_REACHING_SAFEPOINT);\n        }\n        /**\n         * Marks the thread as crashed. This method may only be used in places where it is not\n         * possible to safely detach a thread.\n         * \n         * Changes the safepoint behavior so that this thread won't freeze at a safepoint. The\n         * safepoint handling will ignore the thread so that the VM can reach a safepoint regardless\n         * of the status of this thread.\n         *\n         * NOTE: Be careful with this. If a thread is ignored by the safepoint handling, it means\n         * that it can continue executing while a safepoint (and therefore a GC) is in progress. So,\n         * make sure that this thread does not allocate or access any movable heap objects (even\n         * executing write barriers can already cause issues).\n         */\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void markThreadAsCrashed() {\n            // It would be nice if we could retire the TLAB here but that wouldn't work reliably.\n            safepointBehaviorTL.setVolatile(THREAD_CRASHED);\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static String toString(int safepointBehavior) {\n            switch (safepointBehavior) {\n                case ALLOW_SAFEPOINT:\n                    return \"ALLOW_SAFEPOINT\";\n                case PREVENT_VM_FROM_REACHING_SAFEPOINT:\n                    return \"PREVENT_VM_FROM_REACHING_SAFEPOINT\";\n                case THREAD_CRASHED:\n                    return \"THREAD_CRASHED\";\n                default:\n                    return \"Invalid safepoint behavior\";\n            }\n        }\n    }\n    /**\n     * A thread-local enum conveying any actions needed before thread begins executing Java code.\n     */\n    public static class ActionOnTransitionToJavaSupport {\n        /** The actions to be performed. */\n        private static final FastThreadLocalInt actionTL = FastThreadLocalFactory.createInt(\"ActionOnTransitionToJavaSupport.actionTL\");\n        /** The thread does not need to take any action. */\n        private static final int NO_ACTION = 0;\n        /** Code synchronization should be performed due to newly installed code. */\n        private static final int SYNCHRONIZE_CODE = NO_ACTION + 1;\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static boolean isActionPending() {\n            return actionTL.getVolatile() != NO_ACTION;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static boolean isSynchronizeCode() {\n", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "length": 4390, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "ab03358f6e613cba200aeb44b3d7298905aacdb98f8dd268"}
{"input": "", "context": "//\n// Mono.Unix/Syscall.cs\n//\n// Authors:\n//   Miguel de Icaza (miguel@novell.com)\n//   Jonathan Pryor (jonpryor@vt.edu)\n//\n// (C) 2003 Novell, Inc.\n// (C) 2004-2006 Jonathan Pryor\n//\n// This file implements the low-level syscall interface to the POSIX\n// subsystem.\n//\n// This file tries to stay close to the low-level API as much as possible\n// using enumerations, structures and in a few cases, using existing .NET\n// data types.\n//\n// Implementation notes:\n//\n//    Since the values for the various constants on the API changes\n//    from system to system (even Linux on different architectures will\n//    have different values), we define our own set of values, and we\n//    use a set of C helper routines to map from the constants we define\n//    to the values of the native OS.\n//\n//    Bitfields are flagged with the [Map] attribute, and a helper program\n//    generates a set of routines that we can call to convert from our value \n//    definitions to the value definitions expected by the OS; see\n//    NativeConvert for the conversion routines.\n//\n//    Methods that require tuning are bound as `private sys_NAME' methods\n//    and then a `NAME' method is exposed.\n//\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\nusing System.Security;\nusing System.Text;\nusing Mono.Unix.Native;\nnamespace Mono.Unix.Native {\n\t#region Enumerations\n\t[Flags][Map]\n\t[CLSCompliant (false)]\n\tpublic enum SyslogOptions {\n\t\tLOG_PID    = 0x01,  // log the pid with each message\n\t\tLOG_CONS   = 0x02,  // log on the console if errors in sending\n\t\tLOG_ODELAY = 0x04,  // delay open until first syslog (default)\n\t\tLOG_NDELAY = 0x08,  // don't delay open\n\t\tLOG_NOWAIT = 0x10,  // don't wait for console forks; DEPRECATED\n\t\tLOG_PERROR = 0x20   // log to stderr as well\n\t}\n\t[Map]\n\t[CLSCompliant (false)]\n\tpublic enum SyslogFacility {\n\t\tLOG_KERN      = 0 << 3,\n\t\tLOG_USER      = 1 << 3,\n\t\tLOG_MAIL      = 2 << 3,\n\t\tLOG_DAEMON    = 3 << 3,\n\t\tLOG_AUTH      = 4 << 3,\n\t\tLOG_SYSLOG    = 5 << 3,\n\t\tLOG_LPR       = 6 << 3,\n\t\tLOG_NEWS      = 7 << 3,\n\t\tLOG_UUCP      = 8 << 3,\n\t\tLOG_CRON      = 9 << 3,\n\t\tLOG_AUTHPRIV  = 10 << 3,\n\t\tLOG_FTP       = 11 << 3,\n\t\tLOG_LOCAL0    = 16 << 3,\n\t\tLOG_LOCAL1    = 17 << 3,\n\t\tLOG_LOCAL2    = 18 << 3,\n\t\tLOG_LOCAL3    = 19 << 3,\n\t\tLOG_LOCAL4    = 20 << 3,\n\t\tLOG_LOCAL5    = 21 << 3,\n\t\tLOG_LOCAL6    = 22 << 3,\n\t\tLOG_LOCAL7    = 23 << 3,\n\t}\n\t[Map]\n\t[CLSCompliant (false)]\n\tpublic enum SyslogLevel {\n\t\tLOG_EMERG   = 0,  // system is unusable\n\t\tLOG_ALERT   = 1,  // action must be taken immediately\n\t\tLOG_CRIT    = 2,  // critical conditions\n\t\tLOG_ERR     = 3,  // warning conditions\n\t\tLOG_WARNING = 4,  // warning conditions\n\t\tLOG_NOTICE  = 5,  // normal but significant condition\n\t\tLOG_INFO    = 6,  // informational\n\t\tLOG_DEBUG   = 7   // debug-level messages\n\t}\n\t[Map][Flags]\n\t[CLSCompliant (false)]\n\tpublic enum OpenFlags : int {\n\t\t//\n\t\t// One of these\n\t\t//\n\t\tO_RDONLY    = 0x00000000,\n\t\tO_WRONLY    = 0x00000001,\n\t\tO_RDWR      = 0x00000002,\n\t\t//\n\t\t// Or-ed with zero or more of these\n\t\t//\n\t\tO_CREAT     = 0x00000040,\n\t\tO_EXCL      = 0x00000080,\n\t\tO_NOCTTY    = 0x00000100,\n\t\tO_TRUNC     = 0x00000200,\n\t\tO_APPEND    = 0x00000400,\n\t\tO_NONBLOCK  = 0x00000800,\n\t\tO_SYNC      = 0x00001000,\n\t\t//\n\t\t// These are non-Posix.  Using them will result in errors/exceptions on\n\t\t// non-supported platforms.\n\t\t//\n\t\t// (For example, \"C-wrapped\" system calls -- calls with implementation in\n\t\t// MonoPosixHelper -- will return -1 with errno=EINVAL.  C#-wrapped system\n\t\t// calls will generate an exception in NativeConvert, as the value can't be\n\t\t// converted on the target platform.)\n\t\t//\n\t\t\n\t\tO_NOFOLLOW  = 0x00020000,\n\t\tO_DIRECTORY = 0x00010000,\n\t\tO_DIRECT    = 0x00004000,\n\t\tO_ASYNC     = 0x00002000,\n\t\tO_LARGEFILE = 0x00008000,\n\t\tO_CLOEXEC   = 0x00080000,\n\t\tO_PATH      = 0x00200000\n\t}\n\t\n\t[Map][Flags]\n\t[CLSCompliant (false)]\n\tpublic enum AtFlags : int {\n\t\tAT_SYMLINK_NOFOLLOW = 0x00000100,\n\t\tAT_REMOVEDIR        = 0x00000200,\n\t\tAT_SYMLINK_FOLLOW   = 0x00000400,\n\t\tAT_NO_AUTOMOUNT     = 0x00000800,\n\t\tAT_EMPTY_PATH       = 0x00001000\n\t}\n\t\n\t// mode_t\n\t[Flags][Map]\n\t[CLSCompliant (false)]\n\tpublic enum FilePermissions : uint {\n\t\tS_ISUID     = 0x0800, // Set user ID on execution\n\t\tS_ISGID     = 0x0400, // Set group ID on execution\n\t\tS_ISVTX     = 0x0200, // Save swapped text after use (sticky).\n\t\tS_IRUSR     = 0x0100, // Read by owner\n\t\tS_IWUSR     = 0x0080, // Write by owner\n\t\tS_IXUSR     = 0x0040, // Execute by owner\n\t\tS_IRGRP     = 0x0020, // Read by group\n\t\tS_IWGRP     = 0x0010, // Write by group\n\t\tS_IXGRP     = 0x0008, // Execute by group\n\t\tS_IROTH     = 0x0004, // Read by other\n\t\tS_IWOTH     = 0x0002, // Write by other\n\t\tS_IXOTH     = 0x0001, // Execute by other\n\t\tS_IRWXG     = (S_IRGRP | S_IWGRP | S_IXGRP),\n\t\tS_IRWXU     = (S_IRUSR | S_IWUSR | S_IXUSR),\n\t\tS_IRWXO     = (S_IROTH | S_IWOTH | S_IXOTH),\n\t\tACCESSPERMS = (S_IRWXU | S_IRWXG | S_IRWXO), // 0777\n\t\tALLPERMS    = (S_ISUID | S_ISGID | S_ISVTX | S_IRWXU | S_IRWXG | S_IRWXO), // 07777\n\t\tDEFFILEMODE = (S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH), // 0666\n\t\t// Device types\n\t\t// Why these are held in \"mode_t\" is beyond me...\n\t\tS_IFMT      = 0xF000, // Bits which determine file type\n\t\t[Map(SuppressFlags=\"S_IFMT\")]\n\t\tS_IFDIR     = 0x4000, // Directory\n\t\t[Map(SuppressFlags=\"S_IFMT\")]\n\t\tS_IFCHR     = 0x2000, // Character device\n\t\t[Map(SuppressFlags=\"S_IFMT\")]\n\t\tS_IFBLK     = 0x6000, // Block device\n\t\t[Map(SuppressFlags=\"S_IFMT\")]\n\t\tS_IFREG     = 0x8000, // Regular file\n\t\t[Map(SuppressFlags=\"S_IFMT\")]\n\t\tS_IFIFO     = 0x1000, // FIFO\n\t\t[Map(SuppressFlags=\"S_IFMT\")]\n\t\tS_IFLNK     = 0xA000, // Symbolic link\n\t\t[Map(SuppressFlags=\"S_IFMT\")]\n\t\tS_IFSOCK    = 0xC000, // Socket\n\t}\n\t[Map]\n\t[CLSCompliant (false)]\n\tpublic enum FcntlCommand : int {\n\t\t// Form /usr/include/bits/fcntl.h\n\t\tF_DUPFD    =    0, // Duplicate file descriptor.\n\t\tF_GETFD    =    1, // Get file descriptor flags.\n\t\tF_SETFD    =    2, // Set file descriptor flags.\n\t\tF_GETFL    =    3, // Get file status flags.\n\t\tF_SETFL    =    4, // Set file status flags.\n\t\tF_GETLK    =   12, // Get record locking info. [64]\n\t\tF_SETLK    =   13, // Set record locking info (non-blocking). [64]\n\t\tF_SETLKW   =   14, // Set record locking info (blocking). [64]\n\t\tF_SETOWN   =    8, // Set owner of socket (receiver of SIGIO).\n\t\tF_GETOWN   =    9, // Get owner of socket (receiver of SIGIO).\n\t\tF_SETSIG   =   10, // Set number of signal to be sent.\n\t\tF_GETSIG   =   11, // Get number of signal to be sent.\n\t\tF_SETLEASE = 1024, // Set a lease.\n\t\tF_GETLEASE = 1025, // Enquire what lease is active.\n\t\tF_NOTIFY   = 1026, // Required notifications on a directory\n\t}\n\t[Map]\n\t[CLSCompliant (false)]\n\tpublic enum LockType : short {\n\t\tF_RDLCK = 0, // Read lock.\n\t\tF_WRLCK = 1, // Write lock.\n\t\tF_UNLCK = 2, // Remove lock.\n\t}\n\t[Map]\n\t[CLSCompliant (false)]\n\tpublic enum SeekFlags : short {\n\t\t// values liberally copied from /usr/include/unistd.h\n\t\tSEEK_SET = 0, // Seek from beginning of file.\n\t\tSEEK_CUR = 1, // Seek from current position.\n\t\tSEEK_END = 2, // Seek from end of file.\n\t\tL_SET    = SEEK_SET, // BSD alias for SEEK_SET\n\t\tL_INCR   = SEEK_CUR, // BSD alias for SEEK_CUR\n\t\tL_XTND   = SEEK_END, // BSD alias for SEEK_END\n\t}\n\t\n\t[Map, Flags]\n\t[CLSCompliant (false)]\n\tpublic enum DirectoryNotifyFlags : int {\n\t\t// from /usr/include/bits/fcntl.h\n\t\tDN_ACCESS    = 0x00000001, // File accessed.\n\t\tDN_MODIFY    = 0x00000002, // File modified.\n\t\tDN_CREATE    = 0x00000004, // File created.\n\t\tDN_DELETE    = 0x00000008, // File removed.\n\t\tDN_RENAME    = 0x00000010, // File renamed.\n\t\tDN_ATTRIB    = 0x00000020, // File changed attributes.\n\t\tDN_MULTISHOT = unchecked ((int)0x80000000), // Don't remove notifier\n\t}\n\t[Map]\n\t[CLSCompliant (false)]\n\tpublic enum PosixFadviseAdvice : int {\n\t\tPOSIX_FADV_NORMAL     = 0,  // No further special treatment.\n\t\tPOSIX_FADV_RANDOM     = 1,  // Expect random page references.\n\t\tPOSIX_FADV_SEQUENTIAL = 2,  // Expect sequential page references.\n\t\tPOSIX_FADV_WILLNEED   = 3,  // Will need these pages.\n\t\tPOSIX_FADV_DONTNEED   = 4,  // Don't need these pages.\n\t\tPOSIX_FADV_NOREUSE    = 5,  // Data will be accessed once.\n\t}\n\t[Map]\n\t[CLSCompliant (false)]\n\tpublic enum PosixMadviseAdvice : int {\n\t\tPOSIX_MADV_NORMAL     = 0,  // No further special treatment.\n\t\tPOSIX_MADV_RANDOM     = 1,  // Expect random page references.\n\t\tPOSIX_MADV_SEQUENTIAL = 2,  // Expect sequential page references.\n\t\tPOSIX_MADV_WILLNEED   = 3,  // Will need these pages.\n\t\tPOSIX_MADV_DONTNEED   = 4,  // Don't need these pages.\n\t}\n\t[Map]\n\tpublic enum Signum : int {\n\t\tSIGHUP    =  1, // Hangup (POSIX).\n\t\tSIGINT    =  2, // Interrupt (ANSI).\n\t\tSIGQUIT   =  3, // Quit (POSIX).\n\t\tSIGILL    =  4, // Illegal instruction (ANSI).\n\t\tSIGTRAP   =  5, // Trace trap (POSIX).\n\t\tSIGABRT   =  6, // Abort (ANSI).\n\t\tSIGIOT    =  6, // IOT trap (4.2 BSD).\n\t\tSIGBUS    =  7, // BUS error (4.2 BSD).\n\t\tSIGFPE    =  8, // Floating-point exception (ANSI).\n\t\tSIGKILL   =  9, // Kill, unblockable (POSIX).\n\t\tSIGUSR1   = 10, // User-defined signal 1 (POSIX).\n\t\tSIGSEGV   = 11, // Segmentation violation (ANSI).\n\t\tSIGUSR2   = 12, // User-defined signal 2 (POSIX).\n\t\tSIGPIPE   = 13, // Broken pipe (POSIX).\n\t\tSIGALRM   = 14, // Alarm clock (POSIX).\n\t\tSIGTERM   = 15, // Termination (ANSI).\n\t\tSIGSTKFLT = 16, // Stack fault.\n\t\tSIGCLD    = SIGCHLD, // Same as SIGCHLD (System V).\n\t\tSIGCHLD   = 17, // Child status has changed (POSIX).\n\t\tSIGCONT   = 18, // Continue (POSIX).\n\t\tSIGSTOP   = 19, // Stop, unblockable (POSIX).\n\t\tSIGTSTP   = 20, // Keyboard stop (POSIX).\n\t\tSIGTTIN   = 21, // Background read from tty (POSIX).\n\t\tSIGTTOU   = 22, // Background write to tty (POSIX).\n\t\tSIGURG    = 23, // Urgent condition on socket (4.2 BSD).\n\t\tSIGXCPU   = 24, // CPU limit exceeded (4.2 BSD).\n\t\tSIGXFSZ   = 25, // File size limit exceeded (4.2 BSD).\n\t\tSIGVTALRM = 26, // Virtual alarm clock (4.2 BSD).\n\t\tSIGPROF   = 27, // Profiling alarm clock (4.2 BSD).\n\t\tSIGWINCH  = 28, // Window size change (4.3 BSD, Sun).\n\t\tSIGPOLL   = SIGIO, // Pollable event occurred (System V).\n\t\tSIGIO     = 29, // I/O now possible (4.2 BSD).\n\t\tSIGPWR    = 30, // Power failure restart (System V).\n\t\tSIGSYS    = 31, // Bad system call.\n\t\tSIGUNUSED = 31\n\t}\n\t[Flags][Map]\n\tpublic enum WaitOptions : int {\n\t\tWNOHANG   = 1,  // Don't block waiting\n\t\tWUNTRACED = 2,  // Report status of stopped children\n\t}\n  [Flags][Map]\n\t[CLSCompliant (false)]\n\tpublic enum AccessModes : int {\n\t\tR_OK = 1,\n\t\tW_OK = 2,\n\t\tX_OK = 4,\n\t\tF_OK = 8,\n\t}\n\t[Map]\n\t[CLSCompliant (false)]\n\tpublic enum PathconfName : int {\n\t\t_PC_LINK_MAX,\n\t\t_PC_MAX_CANON,\n\t\t_PC_MAX_INPUT,\n\t\t_PC_NAME_MAX,\n\t\t_PC_PATH_MAX,\n\t\t_PC_PIPE_BUF,\n\t\t_PC_CHOWN_RESTRICTED,\n\t\t_PC_NO_TRUNC,\n\t\t_PC_VDISABLE,\n\t\t_PC_SYNC_IO,\n\t\t_PC_ASYNC_IO,\n\t\t_PC_PRIO_IO,\n\t\t_PC_SOCK_MAXBUF,\n\t\t_PC_FILESIZEBITS,\n\t\t_PC_REC_INCR_XFER_SIZE,\n\t\t_PC_REC_MAX_XFER_SIZE,\n\t\t_PC_REC_MIN_XFER_SIZE,\n\t\t_PC_REC_XFER_ALIGN,\n\t\t_PC_ALLOC_SIZE_MIN,\n\t\t_PC_SYMLINK_MAX,\n\t\t_PC_2_SYMLINKS\n\t}\n\t[Map]\n\t[CLSCompliant (false)]\n\tpublic enum SysconfName : int {\n\t\t_SC_ARG_MAX,\n\t\t_SC_CHILD_MAX,\n\t\t_SC_CLK_TCK,\n\t\t_SC_NGROUPS_MAX,\n\t\t_SC_OPEN_MAX,\n\t\t_SC_STREAM_MAX,\n\t\t_SC_TZNAME_MAX,\n\t\t_SC_JOB_CONTROL,\n\t\t_SC_SAVED_IDS,\n\t\t_SC_REALTIME_SIGNALS,\n\t\t_SC_PRIORITY_SCHEDULING,\n\t\t_SC_TIMERS,\n\t\t_SC_ASYNCHRONOUS_IO,\n\t\t_SC_PRIORITIZED_IO,\n\t\t_SC_SYNCHRONIZED_IO,\n\t\t_SC_FSYNC,\n\t\t_SC_MAPPED_FILES,\n\t\t_SC_MEMLOCK,\n\t\t_SC_MEMLOCK_RANGE,\n\t\t_SC_MEMORY_PROTECTION,\n\t\t_SC_MESSAGE_PASSING,\n\t\t_SC_SEMAPHORES,\n\t\t_SC_SHARED_MEMORY_OBJECTS,\n\t\t_SC_AIO_LISTIO_MAX,\n\t\t_SC_AIO_MAX,\n\t\t_SC_AIO_PRIO_DELTA_MAX,\n\t\t_SC_DELAYTIMER_MAX,\n\t\t_SC_MQ_OPEN_MAX,\n\t\t_SC_MQ_PRIO_MAX,\n\t\t_SC_VERSION,\n\t\t_SC_PAGESIZE,\n\t\t_SC_RTSIG_MAX,\n\t\t_SC_SEM_NSEMS_MAX,\n\t\t_SC_SEM_VALUE_MAX,\n\t\t_SC_SIGQUEUE_MAX,\n\t\t_SC_TIMER_MAX,\n\t\t/* Values for the argument to `sysconf'\n\t\t\t corresponding to _POSIX2_* symbols.  */\n\t\t_SC_BC_BASE_MAX,\n\t\t_SC_BC_DIM_MAX,\n\t\t_SC_BC_SCALE_MAX,\n\t\t_SC_BC_STRING_MAX,\n\t\t_SC_COLL_WEIGHTS_MAX,\n\t\t_SC_EQUIV_CLASS_MAX,\n\t\t_SC_EXPR_NEST_MAX,\n\t\t_SC_LINE_MAX,\n\t\t_SC_RE_DUP_MAX,\n\t\t_SC_CHARCLASS_NAME_MAX,\n\t\t_SC_2_VERSION,\n\t\t_SC_2_C_BIND,\n\t\t_SC_2_C_DEV,\n\t\t_SC_2_FORT_DEV,\n\t\t_SC_2_FORT_RUN,\n\t\t_SC_2_SW_DEV,\n\t\t_SC_2_LOCALEDEF,\n\t\t_SC_PII,\n\t\t_SC_PII_XTI,\n\t\t_SC_PII_SOCKET,\n\t\t_SC_PII_INTERNET,\n\t\t_SC_PII_OSI,\n\t\t_SC_POLL,\n\t\t_SC_SELECT,\n\t\t_SC_UIO_MAXIOV,\n\t\t_SC_IOV_MAX = _SC_UIO_MAXIOV,\n\t\t_SC_PII_INTERNET_STREAM,\n\t\t_SC_PII_INTERNET_DGRAM,\n\t\t_SC_PII_OSI_COTS,\n\t\t_SC_PII_OSI_CLTS,\n\t\t_SC_PII_OSI_M,\n\t\t_SC_T_IOV_MAX,\n\t\t/* Values according to POSIX 1003.1c (POSIX threads).  */\n\t\t_SC_THREADS,\n\t\t_SC_THREAD_SAFE_FUNCTIONS,\n\t\t_SC_GETGR_R_SIZE_MAX,\n\t\t_SC_GETPW_R_SIZE_MAX,\n\t\t_SC_LOGIN_NAME_MAX,\n\t\t_SC_TTY_NAME_MAX,\n\t\t_SC_THREAD_DESTRUCTOR_ITERATIONS,\n\t\t_SC_THREAD_KEYS_MAX,\n\t\t_SC_THREAD_STACK_MIN,\n\t\t_SC_THREAD_THREADS_MAX,\n\t\t_SC_THREAD_ATTR_STACKADDR,\n\t\t_SC_THREAD_ATTR_STACKSIZE,\n\t\t_SC_THREAD_PRIORITY_SCHEDULING,\n\t\t_SC_THREAD_PRIO_INHERIT,\n\t\t_SC_THREAD_PRIO_PROTECT,\n\t\t_SC_THREAD_PROCESS_SHARED,\n\t\t_SC_NPROCESSORS_CONF,\n\t\t_SC_NPROCESSORS_ONLN,\n\t\t_SC_PHYS_PAGES,\n\t\t_SC_AVPHYS_PAGES,\n\t\t_SC_ATEXIT_MAX,\n\t\t_SC_PASS_MAX,\n\t\t_SC_XOPEN_VERSION,\n\t\t_SC_XOPEN_XCU_VERSION,\n\t\t_SC_XOPEN_UNIX,\n\t\t_SC_XOPEN_CRYPT,\n\t\t_SC_XOPEN_ENH_I18N,\n\t\t_SC_XOPEN_SHM,\n\t\t_SC_2_CHAR_TERM,\n\t\t_SC_2_C_VERSION,\n\t\t_SC_2_UPE,\n\t\t_SC_XOPEN_XPG2,\n\t\t_SC_XOPEN_XPG3,\n\t\t_SC_XOPEN_XPG4,\n\t\t_SC_CHAR_BIT,\n\t\t_SC_CHAR_MAX,\n\t\t_SC_CHAR_MIN,\n\t\t_SC_INT_MAX,\n\t\t_SC_INT_MIN,\n\t\t_SC_LONG_BIT,\n\t\t_SC_WORD_BIT,\n\t\t_SC_MB_LEN_MAX,\n\t\t_SC_NZERO,\n\t\t_SC_SSIZE_MAX,\n\t\t_SC_SCHAR_MAX,\n\t\t_SC_SCHAR_MIN,\n\t\t_SC_SHRT_MAX,\n\t\t_SC_SHRT_MIN,\n\t\t_SC_UCHAR_MAX,\n\t\t_SC_UINT_MAX,\n\t\t_SC_ULONG_MAX,\n\t\t_SC_USHRT_MAX,\n\t\t_SC_NL_ARGMAX,\n\t\t_SC_NL_LANGMAX,\n\t\t_SC_NL_MSGMAX,\n\t\t_SC_NL_NMAX,\n\t\t_SC_NL_SETMAX,\n\t\t_SC_NL_TEXTMAX,\n\t\t_SC_XBS5_ILP32_OFF32,\n\t\t_SC_XBS5_ILP32_OFFBIG,\n\t\t_SC_XBS5_LP64_OFF64,\n\t\t_SC_XBS5_LPBIG_OFFBIG,\n\t\t_SC_XOPEN_LEGACY,\n\t\t_SC_XOPEN_REALTIME,\n\t\t_SC_XOPEN_REALTIME_THREADS,\n\t\t_SC_ADVISORY_INFO,\n\t\t_SC_BARRIERS,\n\t\t_SC_BASE,\n\t\t_SC_C_LANG_SUPPORT,\n\t\t_SC_C_LANG_SUPPORT_R,\n\t\t_SC_CLOCK_SELECTION,\n\t\t_SC_CPUTIME,\n\t\t_SC_THREAD_CPUTIME,\n\t\t_SC_DEVICE_IO,\n\t\t_SC_DEVICE_SPECIFIC,\n\t\t_SC_DEVICE_SPECIFIC_R,\n\t\t_SC_FD_MGMT,\n\t\t_SC_FIFO,\n\t\t_SC_PIPE,\n\t\t_SC_FILE_ATTRIBUTES,\n\t\t_SC_FILE_LOCKING,\n\t\t_SC_FILE_SYSTEM,\n\t\t_SC_MONOTONIC_CLOCK,\n\t\t_SC_MULTI_PROCESS,\n\t\t_SC_SINGLE_PROCESS,\n\t\t_SC_NETWORKING,\n\t\t_SC_READER_WRITER_LOCKS,\n\t\t_SC_SPIN_LOCKS,\n\t\t_SC_REGEXP,\n\t\t_SC_REGEX_VERSION,\n\t\t_SC_SHELL,\n\t\t_SC_SIGNALS,\n\t\t_SC_SPAWN,\n\t\t_SC_SPORADIC_SERVER,\n\t\t_SC_THREAD_SPORADIC_SERVER,\n\t\t_SC_SYSTEM_DATABASE,\n\t\t_SC_SYSTEM_DATABASE_R,\n\t\t_SC_TIMEOUTS,\n\t\t_SC_TYPED_MEMORY_OBJECTS,\n\t\t_SC_USER_GROUPS,\n\t\t_SC_USER_GROUPS_R,\n\t\t_SC_2_PBS,\n\t\t_SC_2_PBS_ACCOUNTING,\n\t\t_SC_2_PBS_LOCATE,\n\t\t_SC_2_PBS_MESSAGE,\n\t\t_SC_2_PBS_TRACK,\n\t\t_SC_SYMLOOP_MAX,\n\t\t_SC_STREAMS,\n\t\t_SC_2_PBS_CHECKPOINT,\n\t\t_SC_V6_ILP32_OFF32,\n\t\t_SC_V6_ILP32_OFFBIG,\n\t\t_SC_V6_LP64_OFF64,\n\t\t_SC_V6_LPBIG_OFFBIG,\n\t\t_SC_HOST_NAME_MAX,\n\t\t_SC_TRACE,\n\t\t_SC_TRACE_EVENT_FILTER,\n\t\t_SC_TRACE_INHERIT,\n\t\t_SC_TRACE_LOG,\n\t\t_SC_LEVEL1_ICACHE_SIZE,\n\t\t_SC_LEVEL1_ICACHE_ASSOC,\n\t\t_SC_LEVEL1_ICACHE_LINESIZE,\n\t\t_SC_LEVEL1_DCACHE_SIZE,\n\t\t_SC_LEVEL1_DCACHE_ASSOC,\n\t\t_SC_LEVEL1_DCACHE_LINESIZE,\n\t\t_SC_LEVEL2_CACHE_SIZE,\n\t\t_SC_LEVEL2_CACHE_ASSOC,\n\t\t_SC_LEVEL2_CACHE_LINESIZE,\n\t\t_SC_LEVEL3_CACHE_SIZE,\n\t\t_SC_LEVEL3_CACHE_ASSOC,\n\t\t_SC_LEVEL3_CACHE_LINESIZE,\n\t\t_SC_LEVEL4_CACHE_SIZE,\n\t\t_SC_LEVEL4_CACHE_ASSOC,\n\t\t_SC_LEVEL4_CACHE_LINESIZE\n\t}\n\t[Map]\n\t[CLSCompliant (false)]\n\tpublic enum ConfstrName : int {\n\t\t_CS_PATH,\t\t\t/* The default search path.  */\n\t\t_CS_V6_WIDTH_RESTRICTED_ENVS,\n\t\t_CS_GNU_LIBC_VERSION,\n\t\t_CS_GNU_LIBPTHREAD_VERSION,\n\t\t_CS_LFS_CFLAGS = 1000,\n\t\t_CS_LFS_LDFLAGS,\n\t\t_CS_LFS_LIBS,\n\t\t_CS_LFS_LINTFLAGS,\n\t\t_CS_LFS64_CFLAGS,\n\t\t_CS_LFS64_LDFLAGS,\n\t\t_CS_LFS64_LIBS,\n\t\t_CS_LFS64_LINTFLAGS,\n\t\t_CS_XBS5_ILP32_OFF32_CFLAGS = 1100,\n\t\t_CS_XBS5_ILP32_OFF32_LDFLAGS,\n\t\t_CS_XBS5_ILP32_OFF32_LIBS,\n\t\t_CS_XBS5_ILP32_OFF32_LINTFLAGS,\n\t\t_CS_XBS5_ILP32_OFFBIG_CFLAGS,\n\t\t_CS_XBS5_ILP32_OFFBIG_LDFLAGS,\n\t\t_CS_XBS5_ILP32_OFFBIG_LIBS,\n\t\t_CS_XBS5_ILP32_OFFBIG_LINTFLAGS,\n\t\t_CS_XBS5_LP64_OFF64_CFLAGS,\n\t\t_CS_XBS5_LP64_OFF64_LDFLAGS,\n\t\t_CS_XBS5_LP64_OFF64_LIBS,\n\t\t_CS_XBS5_LP64_OFF64_LINTFLAGS,\n\t\t_CS_XBS5_LPBIG_OFFBIG_CFLAGS,\n\t\t_CS_XBS5_LPBIG_OFFBIG_LDFLAGS,\n\t\t_CS_XBS5_LPBIG_OFFBIG_LIBS,\n\t\t_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,\n\t\t_CS_POSIX_V6_ILP32_OFF32_CFLAGS,\n\t\t_CS_POSIX_V6_ILP32_OFF32_LDFLAGS,\n\t\t_CS_POSIX_V6_ILP32_OFF32_LIBS,\n\t\t_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,\n\t\t_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,\n\t\t_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,\n\t\t_CS_POSIX_V6_ILP32_OFFBIG_LIBS,\n\t\t_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,\n\t\t_CS_POSIX_V6_LP64_OFF64_CFLAGS,\n\t\t_CS_POSIX_V6_LP64_OFF64_LDFLAGS,\n\t\t_CS_POSIX_V6_LP64_OFF64_LIBS,\n\t\t_CS_POSIX_V6_LP64_OFF64_LINTFLAGS,\n\t\t_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,\n\t\t_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,\n\t\t_CS_POSIX_V6_LPBIG_OFFBIG_LIBS,\n\t\t_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS\n\t}\n\t[Map]\n\t[CLSCompliant (false)]\n\tpublic enum LockfCommand : int {\n\t\tF_ULOCK = 0, // Unlock a previously locked region.\n\t\tF_LOCK  = 1, // Lock a region for exclusive use.\n\t\tF_TLOCK = 2, // Test and lock a region for exclusive use.\n\t\tF_TEST  = 3, // Test a region for other process locks.\n\t}\n\t[Map][Flags]\n\tpublic enum PollEvents : short {\n\t\tPOLLIN      = 0x0001, // There is data to read\n\t\tPOLLPRI     = 0x0002, // There is urgent data to read\n\t\tPOLLOUT     = 0x0004, // Writing now will not block\n\t\tPOLLERR     = 0x0008, // Error condition\n\t\tPOLLHUP     = 0x0010, // Hung up\n\t\tPOLLNVAL    = 0x0020, // Invalid request; fd not open\n\t\t// XPG4.2 definitions (via _XOPEN_SOURCE)\n\t\tPOLLRDNORM  = 0x0040, // Normal data may be read\n\t\tPOLLRDBAND  = 0x0080, // Priority data may be read\n\t\tPOLLWRNORM  = 0x0100, // Writing now will not block\n\t\tPOLLWRBAND  = 0x0200, // Priority data may be written\n\t}\n\t[Map][Flags]\n\t[CLSCompliant (false)]\n\tpublic enum XattrFlags : int {\n\t\tXATTR_AUTO = 0,\n\t\tXATTR_CREATE = 1,\n\t\tXATTR_REPLACE = 2,\n\t}\n\t[Map][Flags]\n\t[CLSCompliant (false)]\n\tpublic enum MountFlags : ulong {\n\t\tST_RDONLY      =    1,  // Mount read-only\n\t\tST_NOSUID      =    2,  // Ignore suid and sgid bits\n\t\tST_NODEV       =    4,  // Disallow access to device special files\n\t\tST_NOEXEC      =    8,  // Disallow program execution\n\t\tST_SYNCHRONOUS =   16,  // Writes are synced at once\n\t\tST_REMOUNT     =   32,  // Alter flags of a mounted FS\n\t\tST_MANDLOCK    =   64,  // Allow mandatory locks on an FS\n\t\tST_WRITE       =  128,  // Write on file/directory/symlink\n\t\tST_APPEND      =  256,  // Append-only file\n\t\tST_IMMUTABLE   =  512,  // Immutable file\n\t\tST_NOATIME     = 1024,  // Do not update access times\n\t\tST_NODIRATIME  = 2048,  // Do not update directory access times\n\t\tST_BIND        = 4096,  // Bind directory at different place\n\t}\n\t[Map][Flags]\n\t[CLSCompliant (false)]\n\tpublic enum MmapFlags : int {\n\t\tMAP_SHARED      = 0x01,     // Share changes.\n\t\tMAP_PRIVATE     = 0x02,     // Changes are private.\n\t\tMAP_TYPE        = 0x0f,     // Mask for type of mapping.\n\t\tMAP_FIXED       = 0x10,     // Interpret addr exactly.\n\t\tMAP_FILE        = 0,\n\t\tMAP_ANONYMOUS   = 0x20,     // Don't use a file.\n\t\tMAP_ANON        = MAP_ANONYMOUS,\n\t\t// These are Linux-specific.\n\t\tMAP_GROWSDOWN   = 0x00100,  // Stack-like segment.\n\t\tMAP_DENYWRITE   = 0x00800,  // ETXTBSY\n\t\tMAP_EXECUTABLE  = 0x01000,  // Mark it as an executable.\n\t\tMAP_LOCKED      = 0x02000,  // Lock the mapping.\n\t\tMAP_NORESERVE   = 0x04000,  // Don't check for reservations.\n\t\tMAP_POPULATE    = 0x08000,  // Populate (prefault) pagetables.\n\t\tMAP_NONBLOCK    = 0x10000,  // Do not block on IO.\n\t}\n\t[Map][Flags]\n\t[CLSCompliant (false)]\n\tpublic enum MmapProts : int {\n\t\tPROT_READ       = 0x1,  // Page can be read.\n\t\tPROT_WRITE      = 0x2,  // Page can be written.\n\t\tPROT_EXEC       = 0x4,  // Page can be executed.\n\t\tPROT_NONE       = 0x0,  // Page can not be accessed.\n\t\tPROT_GROWSDOWN  = 0x01000000, // Extend change to start of\n\t\t                              //   growsdown vma (mprotect only).\n\t\tPROT_GROWSUP    = 0x02000000, // Extend change to start of\n\t\t                              //   growsup vma (mprotect only).\n\t}\n\t[Map][Flags]\n\t[CLSCompliant (false)]\n\tpublic enum MsyncFlags : int {\n\t\tMS_ASYNC      = 0x1,  // Sync memory asynchronously.\n\t\tMS_SYNC       = 0x4,  // Synchronous memory sync.\n\t\tMS_INVALIDATE = 0x2,  // Invalidate the caches.\n\t}\n\t[Map][Flags]\n\t[CLSCompliant (false)]\n\tpublic enum MlockallFlags : int {\n\t\tMCL_CURRENT\t= 0x1,\t// Lock all currently mapped pages.\n\t\tMCL_FUTURE  = 0x2,\t// Lock all additions to address\n\t}\n\t[Map][Flags]\n\t[CLSCompliant (false)]\n\tpublic enum MremapFlags : ulong {\n\t\tMREMAP_MAYMOVE = 0x1,\n\t}\n\t#endregion\n\t#region Structures\n\t[Map (\"struct flock\")]\n\tpublic struct Flock\n#if NET_2_0\n\t\t: IEquatable <Flock>\n#endif\n\t{\n\t\t[CLSCompliant (false)]\n\t\tpublic LockType         l_type;    // Type of lock: F_RDLCK, F_WRLCK, F_UNLCK\n\t\t[CLSCompliant (false)]\n\t\tpublic SeekFlags        l_whence;  // How to interpret l_start\n\t\t[off_t] public long     l_start;   // Starting offset for lock\n\t\t[off_t] public long     l_len;     // Number of bytes to lock\n\t\t[pid_t] public int      l_pid;     // PID of process blocking our lock (F_GETLK only)\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\treturn l_type.GetHashCode () ^ l_whence.GetHashCode () ^ \n\t\t\t\tl_start.GetHashCode () ^ l_len.GetHashCode () ^\n\t\t\t\tl_pid.GetHashCode ();\n\t\t}\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif ((obj == null) || (obj.GetType () != GetType ()))\n\t\t\t\treturn false;\n\t\t\tFlock value = (Flock) obj;\n\t\t\treturn l_type == value.l_type && l_whence == value.l_whence && \n\t\t\t\tl_start == value.l_start && l_len == value.l_len && \n\t\t\t\tl_pid == value.l_pid;\n\t\t}\n\t\tpublic bool Equals (Flock value)\n\t\t{\n\t\t\treturn l_type == value.l_type && l_whence == value.l_whence && \n\t\t\t\tl_start == value.l_start && l_len == value.l_len && \n\t\t\t\tl_pid == value.l_pid;\n\t\t}\n\t\tpublic static bool operator== (Flock lhs, Flock rhs)\n\t\t{\n\t\t\treturn lhs.Equals (rhs);\n\t\t}\n\t\tpublic static bool operator!= (Flock lhs, Flock rhs)\n\t\t{\n\t\t\treturn !lhs.Equals (rhs);\n\t\t}\n\t}\n\t[Map (\"struct pollfd\")]\n\tpublic struct Pollfd\n#if NET_2_0\n\t\t: IEquatable <Pollfd>\n#endif\n\t{\n\t\tpublic int fd;\n\t\t[CLSCompliant (false)]\n\t\tpublic PollEvents events;\n\t\t[CLSCompliant (false)]\n\t\tpublic PollEvents revents;\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\treturn events.GetHashCode () ^ revents.GetHashCode ();\n\t\t}\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif (obj == null || obj.GetType () != GetType ())\n\t\t\t\treturn false;\n\t\t\tPollfd value = (Pollfd) obj;\n\t\t\treturn value.events == events && value.revents == revents;\n\t\t}\n\t\tpublic bool Equals (Pollfd value)\n\t\t{\n\t\t\treturn value.events == events && value.revents == revents;\n\t\t}\n\t\tpublic static bool operator== (Pollfd lhs, Pollfd rhs)\n\t\t{\n\t\t\treturn lhs.Equals (rhs);\n\t\t}\n\t\tpublic static bool operator!= (Pollfd lhs, Pollfd rhs)\n\t\t{\n\t\t\treturn !lhs.Equals (rhs);\n\t\t}\n\t}\n\t// Use manually written To/From methods to handle fields st_atime_nsec etc.\n\tpublic struct Stat\n#if NET_2_0\n\t\t: IEquatable <Stat>\n#endif\n\t{\n\t\t[CLSCompliant (false)]\n\t\t[dev_t]     public ulong    st_dev;     // device\n\t\t[CLSCompliant (false)]\n\t\t[ino_t]     public  ulong   st_ino;     // inode\n\t\t[CLSCompliant (false)]\n\t\tpublic  FilePermissions     st_mode;    // protection\n\t\t[NonSerialized]\n#pragma warning disable 169\t\t\n\t\tprivate uint                _padding_;  // padding for structure alignment\n#pragma warning restore 169\t\t\n\t\t[CLSCompliant (false)]\n\t\t[nlink_t]   public  ulong   st_nlink;   // number of hard links\n\t\t[CLSCompliant (false)]\n\t\t[uid_t]     public  uint    st_uid;     // user ID of owner\n\t\t[CLSCompliant (false)]\n\t\t[gid_t]     public  uint    st_gid;     // group ID of owner\n\t\t[CLSCompliant (false)]\n\t\t[dev_t]     public  ulong   st_rdev;    // device type (if inode device)\n\t\t[off_t]     public  long    st_size;    // total size, in bytes\n\t\t[blksize_t] public  long    st_blksize; // blocksize for filesystem I/O\n\t\t[blkcnt_t]  public  long    st_blocks;  // number of blocks allocated\n\t\t[time_t]    public  long    st_atime;   // time of last access\n\t\t[time_t]    public  long    st_mtime;   // time of last modification\n\t\t[time_t]    public  long    st_ctime;   // time of last status change\n\t\tpublic  long             st_atime_nsec; // Timespec.tv_nsec partner to st_atime\n\t\tpublic  long             st_mtime_nsec; // Timespec.tv_nsec partner to st_mtime\n\t\tpublic  long             st_ctime_nsec; // Timespec.tv_nsec partner to st_ctime\n\t\tpublic Timespec st_atim {\n\t\t\tget {\n\t\t\t\treturn new Timespec { tv_sec = st_atime, tv_nsec = st_atime_nsec };\n\t\t\t}\n\t\t\tset {\n\t\t\t\tst_atime = value.tv_sec;\n\t\t\t\tst_atime_nsec = value.tv_nsec;\n\t\t\t}\n\t\t}\n\t\tpublic Timespec st_mtim {\n\t\t\tget {\n\t\t\t\treturn new Timespec { tv_sec = st_mtime, tv_nsec = st_mtime_nsec };\n\t\t\t}\n\t\t\tset {\n\t\t\t\tst_mtime = value.tv_sec;\n\t\t\t\tst_mtime_nsec = value.tv_nsec;\n\t\t\t}\n\t\t}\n\t\tpublic Timespec st_ctim {\n\t\t\tget {\n\t\t\t\treturn new Timespec { tv_sec = st_ctime, tv_nsec = st_ctime_nsec };\n\t\t\t}\n\t\t\tset {\n\t\t\t\tst_ctime = value.tv_sec;\n\t\t\t\tst_ctime_nsec = value.tv_nsec;\n\t\t\t}\n\t\t}\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\treturn st_dev.GetHashCode () ^\n\t\t\t\tst_ino.GetHashCode () ^\n\t\t\t\tst_mode.GetHashCode () ^\n\t\t\t\tst_nlink.GetHashCode () ^\n\t\t\t\tst_uid.GetHashCode () ^\n\t\t\t\tst_gid.GetHashCode () ^\n\t\t\t\tst_rdev.GetHashCode () ^\n\t\t\t\tst_size.GetHashCode () ^\n\t\t\t\tst_blksize.GetHashCode () ^\n\t\t\t\tst_blocks.GetHashCode () ^\n\t\t\t\tst_atime.GetHashCode () ^\n\t\t\t\tst_mtime.GetHashCode () ^\n\t\t\t\tst_ctime.GetHashCode () ^\n\t\t\t\tst_atime_nsec.GetHashCode () ^\n\t\t\t\tst_mtime_nsec.GetHashCode () ^\n\t\t\t\tst_ctime_nsec.GetHashCode ();\n\t\t}\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif (obj == null || obj.GetType() != GetType ())\n\t\t\t\treturn false;\n\t\t\tStat value = (Stat) obj;\n\t\t\treturn value.st_dev == st_dev &&\n\t\t\t\tvalue.st_ino == st_ino &&\n\t\t\t\tvalue.st_mode == st_mode &&\n\t\t\t\tvalue.st_nlink == st_nlink &&\n\t\t\t\tvalue.st_uid == st_uid &&\n\t\t\t\tvalue.st_gid == st_gid &&\n\t\t\t\tvalue.st_rdev == st_rdev &&\n\t\t\t\tvalue.st_size == st_size &&\n\t\t\t\tvalue.st_blksize == st_blksize &&\n\t\t\t\tvalue.st_blocks == st_blocks &&\n\t\t\t\tvalue.st_atime == st_atime &&\n\t\t\t\tvalue.st_mtime == st_mtime &&\n\t\t\t\tvalue.st_ctime == st_ctime &&\n\t\t\t\tvalue.st_atime_nsec == st_atime_nsec &&\n\t\t\t\tvalue.st_mtime_nsec == st_mtime_nsec &&\n\t\t\t\tvalue.st_ctime_nsec == st_ctime_nsec;\n\t\t}\n\t\tpublic bool Equals (Stat value)\n\t\t{\n\t\t\treturn value.st_dev == st_dev &&\n\t\t\t\tvalue.st_ino == st_ino &&\n\t\t\t\tvalue.st_mode == st_mode &&\n\t\t\t\tvalue.st_nlink == st_nlink &&\n\t\t\t\tvalue.st_uid == st_uid &&\n\t\t\t\tvalue.st_gid == st_gid &&\n\t\t\t\tvalue.st_rdev == st_rdev &&\n\t\t\t\tvalue.st_size == st_size &&\n\t\t\t\tvalue.st_blksize == st_blksize &&\n\t\t\t\tvalue.st_blocks == st_blocks &&\n\t\t\t\tvalue.st_atime == st_atime &&\n\t\t\t\tvalue.st_mtime == st_mtime &&\n\t\t\t\tvalue.st_ctime == st_ctime &&\n\t\t\t\tvalue.st_atime_nsec == st_atime_nsec &&\n\t\t\t\tvalue.st_mtime_nsec == st_mtime_nsec &&\n\t\t\t\tvalue.st_ctime_nsec == st_ctime_nsec;\n\t\t}\n\t\tpublic static bool operator== (Stat lhs, Stat rhs)\n\t\t{\n\t\t\treturn lhs.Equals (rhs);\n\t\t}\n\t\tpublic static bool operator!= (Stat lhs, Stat rhs)\n\t\t{\n\t\t\treturn !lhs.Equals (rhs);\n\t\t}\n\t}\n\t// `struct statvfs' isn't portable, so don't generate To/From methods.\n\t[Map]\n\t[CLSCompliant (false)]\n\tpublic struct Statvfs\n#if NET_2_0\n\t\t: IEquatable <Statvfs>\n#endif\n\t{\n\t\tpublic                  ulong f_bsize;\t  // file system block size\n\t\tpublic                  ulong f_frsize;   // fragment size\n\t\t[fsblkcnt_t] public     ulong f_blocks;   // size of fs in f_frsize units\n\t\t[fsblkcnt_t] public     ulong f_bfree;    // # free blocks\n\t\t[fsblkcnt_t] public     ulong f_bavail;   // # free blocks for non-root\n\t\t[fsfilcnt_t] public     ulong f_files;    // # inodes\n\t\t[fsfilcnt_t] public     ulong f_ffree;    // # free inodes\n\t\t[fsfilcnt_t] public     ulong f_favail;   // # free inodes for non-root\n\t\tpublic                  ulong f_fsid;     // file system id\n\t\tpublic MountFlags             f_flag;     // mount flags\n\t\tpublic                  ulong f_namemax;  // maximum filename length\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\treturn f_bsize.GetHashCode () ^\n\t\t\t\tf_frsize.GetHashCode () ^\n\t\t\t\tf_blocks.GetHashCode () ^\n\t\t\t\tf_bfree.GetHashCode () ^\n\t\t\t\tf_bavail.GetHashCode () ^\n\t\t\t\tf_files.GetHashCode () ^\n\t\t\t\tf_ffree.GetHashCode () ^\n\t\t\t\tf_favail.GetHashCode () ^\n\t\t\t\tf_fsid.GetHashCode () ^\n\t\t\t\tf_flag.GetHashCode () ^\n\t\t\t\tf_namemax.GetHashCode ();\n\t\t}\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif (obj == null || obj.GetType() != GetType ())\n\t\t\t\treturn false;\n\t\t\tStatvfs value = (Statvfs) obj;\n\t\t\treturn value.f_bsize == f_bsize &&\n\t\t\t\tvalue.f_frsize == f_frsize &&\n\t\t\t\tvalue.f_blocks == f_blocks &&\n\t\t\t\tvalue.f_bfree == f_bfree &&\n\t\t\t\tvalue.f_bavail == f_bavail &&\n\t\t\t\tvalue.f_files == f_files &&\n\t\t\t\tvalue.f_ffree == f_ffree &&\n\t\t\t\tvalue.f_favail == f_favail &&\n\t\t\t\tvalue.f_fsid == f_fsid &&\n\t\t\t\tvalue.f_flag == f_flag &&\n\t\t\t\tvalue.f_namemax == f_namemax;\n\t\t}\n\t\tpublic bool Equals (Statvfs value)\n\t\t{\n\t\t\treturn value.f_bsize == f_bsize &&\n\t\t\t\tvalue.f_frsize == f_frsize &&\n\t\t\t\tvalue.f_blocks == f_blocks &&\n\t\t\t\tvalue.f_bfree == f_bfree &&\n\t\t\t\tvalue.f_bavail == f_bavail &&\n\t\t\t\tvalue.f_files == f_files &&\n\t\t\t\tvalue.f_ffree == f_ffree &&\n\t\t\t\tvalue.f_favail == f_favail &&\n\t\t\t\tvalue.f_fsid == f_fsid &&\n\t\t\t\tvalue.f_flag == f_flag &&\n\t\t\t\tvalue.f_namemax == f_namemax;\n\t\t}\n\t\tpublic static bool operator== (Statvfs lhs, Statvfs rhs)\n\t\t{\n\t\t\treturn lhs.Equals (rhs);\n\t\t}\n\t\tpublic static bool operator!= (Statvfs lhs, Statvfs rhs)\n\t\t{\n\t\t\treturn !lhs.Equals (rhs);\n\t\t}\n\t}\n\t[Map (\"struct timeval\")]\n\tpublic struct Timeval\n#if NET_2_0\n\t\t: IEquatable <Timeval>\n#endif\n\t{\n\t\t[time_t]      public long tv_sec;   // seconds\n\t\t[suseconds_t] public long tv_usec;  // microseconds\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\treturn tv_sec.GetHashCode () ^ tv_usec.GetHashCode ();\n\t\t}\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif (obj == null || obj.GetType () != GetType ())\n\t\t\t\treturn false;\n\t\t\tTimeval value = (Timeval) obj;\n\t\t\treturn value.tv_sec == tv_sec && value.tv_usec == tv_usec;\n\t\t}\n\t\tpublic bool Equals (Timeval value)\n\t\t{\n\t\t\treturn value.tv_sec == tv_sec && value.tv_usec == tv_usec;\n\t\t}\n\t\tpublic static bool operator== (Timeval lhs, Timeval rhs)\n\t\t{\n\t\t\treturn lhs.Equals (rhs);\n\t\t}\n\t\tpublic static bool operator!= (Timeval lhs, Timeval rhs)\n\t\t{\n\t\t\treturn !lhs.Equals (rhs);\n\t\t}\n\t}\n\t[Map (\"struct timezone\")]\n\tpublic struct Timezone\n#if NET_2_0\n\t\t: IEquatable <Timezone>\n#endif\n\t{\n\t\tpublic  int tz_minuteswest; // minutes W of Greenwich\n#pragma warning disable 169\t\t\n\t\tprivate int tz_dsttime;     // type of dst correction (OBSOLETE)\n#pragma warning restore 169\t\t\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\treturn tz_minuteswest.GetHashCode ();\n\t\t}\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif (obj == null || obj.GetType () != GetType ())\n\t\t\t\treturn false;\n\t\t\tTimezone value = (Timezone) obj;\n\t\t\treturn value.tz_minuteswest == tz_minuteswest;\n\t\t}\n\t\tpublic bool Equals (Timezone value)\n\t\t{\n\t\t\treturn value.tz_minuteswest == tz_minuteswest;\n\t\t}\n\t\tpublic static bool operator== (Timezone lhs, Timezone rhs)\n\t\t{\n\t\t\treturn lhs.Equals (rhs);\n\t\t}\n\t\tpublic static bool operator!= (Timezone lhs, Timezone rhs)\n\t\t{\n\t\t\treturn !lhs.Equals (rhs);\n\t\t}\n\t}\n\t[Map (\"struct utimbuf\")]\n\tpublic struct Utimbuf\n#if NET_2_0\n\t\t: IEquatable <Utimbuf>\n#endif\n\t{\n\t\t[time_t] public long    actime;   // access time\n\t\t[time_t] public long    modtime;  // modification time\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\treturn actime.GetHashCode () ^ modtime.GetHashCode ();\n\t\t}\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif (obj == null || obj.GetType () != GetType ())\n\t\t\t\treturn false;\n\t\t\tUtimbuf value = (Utimbuf) obj;\n\t\t\treturn value.actime == actime && value.modtime == modtime;\n\t\t}\n\t\tpublic bool Equals (Utimbuf value)\n\t\t{\n\t\t\treturn value.actime == actime && value.modtime == modtime;\n\t\t}\n\t\tpublic static bool operator== (Utimbuf lhs, Utimbuf rhs)\n\t\t{\n\t\t\treturn lhs.Equals (rhs);\n\t\t}\n\t\tpublic static bool operator!= (Utimbuf lhs, Utimbuf rhs)\n\t\t{\n\t\t\treturn !lhs.Equals (rhs);\n\t\t}\n\t}\n\t[Map (\"struct timespec\")]\n\tpublic struct Timespec\n#if NET_2_0\n\t\t: IEquatable <Timespec>\n#endif\n\t{\n\t\t[time_t] public long    tv_sec;   // Seconds.\n\t\tpublic          long    tv_nsec;  // Nanoseconds.\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\treturn tv_sec.GetHashCode () ^ tv_nsec.GetHashCode ();\n\t\t}\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif (obj == null || obj.GetType () != GetType ())\n\t\t\t\treturn false;\n\t\t\tTimespec value = (Timespec) obj;\n\t\t\treturn value.tv_sec == tv_sec && value.tv_nsec == tv_nsec;\n\t\t}\n\t\tpublic bool Equals (Timespec value)\n\t\t{\n\t\t\treturn value.tv_sec == tv_sec && value.tv_nsec == tv_nsec;\n\t\t}\n\t\tpublic static bool operator== (Timespec lhs, Timespec rhs)\n\t\t{\n\t\t\treturn lhs.Equals (rhs);\n\t\t}\n\t\tpublic static bool operator!= (Timespec lhs, Timespec rhs)\n\t\t{\n\t\t\treturn !lhs.Equals (rhs);\n\t\t}\n\t}\n\t[Map (\"struct iovec\")]\n\tpublic struct Iovec\n\t{\n\t\tpublic IntPtr   iov_base; // Starting address\n\t\t[CLSCompliant (false)]\n\t\tpublic ulong    iov_len;  // Number of bytes to transfer\n\t}\n\t[Flags][Map]\n\tpublic enum EpollFlags {\n\t\tEPOLL_CLOEXEC = 02000000,\n\t\tEPOLL_NONBLOCK = 04000,\n\t}\n\t[Flags][Map]\n\t[CLSCompliant (false)]\n\tpublic enum EpollEvents : uint {\n\t\tEPOLLIN = 0x001,\n\t\tEPOLLPRI = 0x002,\n\t\tEPOLLOUT = 0x004,\n\t\tEPOLLRDNORM = 0x040,\n\t\tEPOLLRDBAND = 0x080,\n\t\tEPOLLWRNORM = 0x100,\n\t\tEPOLLWRBAND = 0x200,\n\t\tEPOLLMSG = 0x400,\n\t\tEPOLLERR = 0x008,\n\t\tEPOLLHUP = 0x010,\n\t\tEPOLLRDHUP = 0x2000,\n\t\tEPOLLONESHOT = 1 << 30,\n\t\tEPOLLET = unchecked ((uint) (1 << 31))\n\t}\n\tpublic enum EpollOp {\n\t\tEPOLL_CTL_ADD = 1,\n\t\tEPOLL_CTL_DEL = 2,\n\t\tEPOLL_CTL_MOD = 3,\n\t}\n\t[StructLayout (LayoutKind.Explicit, Size=12, Pack=1)]\n\t[CLSCompliant (false)]\n\tpublic struct EpollEvent {\n\t\t[FieldOffset (0)]\n\t\tpublic EpollEvents events;\n\t\t[FieldOffset (4)]\n\t\tpublic int fd;\n\t\t[FieldOffset (4)]\n\t\tpublic IntPtr ptr;\n\t\t[FieldOffset (4)]\n\t\tpublic uint u32;\n\t\t[FieldOffset (4)]\n\t\tpublic ulong u64;\n\t}\n\t#endregion\n\t#region Classes\n\tpublic sealed class Dirent\n#if NET_2_0\n\t\t: IEquatable <Dirent>\n#endif\n\t{\n\t\t[CLSCompliant (false)]\n\t\tpublic /* ino_t */ ulong  d_ino;\n\t\tpublic /* off_t */ long   d_off;\n\t\t[CLSCompliant (false)]\n\t\tpublic ushort             d_reclen;\n\t\tpublic byte               d_type;\n\t\tpublic string             d_name;\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\treturn d_ino.GetHashCode () ^ d_off.GetHashCode () ^ \n\t\t\t\td_reclen.GetHashCode () ^ d_type.GetHashCode () ^\n\t\t\t\td_name.GetHashCode ();\n\t\t}\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif (obj == null || GetType() != obj.GetType())\n\t\t\t\treturn false;\n\t\t\tDirent d = (Dirent) obj;\n\t\t\treturn Equals (d);\n\t\t}\n\t\tpublic bool Equals (Dirent value)\n\t\t{\n\t\t\tif (value == null)\n\t\t\t\treturn false;\n\t\t\treturn value.d_ino == d_ino && value.d_off == d_off &&\n\t\t\t\tvalue.d_reclen == d_reclen && value.d_type == d_type &&\n\t\t\t\tvalue.d_name == d_name;\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn d_name;\n\t\t}\n\t\tpublic static bool operator== (Dirent lhs, Dirent rhs)\n\t\t{\n\t\t\treturn Object.Equals (lhs, rhs);\n\t\t}\n\t\tpublic static bool operator!= (Dirent lhs, Dirent rhs)\n\t\t{\n\t\t\treturn !Object.Equals (lhs, rhs);\n\t\t}\n\t}\n\tpublic sealed class Fstab\n#if NET_2_0\n\t\t: IEquatable <Fstab>\n#endif\n\t{\n\t\tpublic string fs_spec;\n\t\tpublic string fs_file;\n\t\tpublic string fs_vfstype;\n\t\tpublic string fs_mntops;\n\t\tpublic string fs_type;\n\t\tpublic int    fs_freq;\n\t\tpublic int    fs_passno;\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\treturn fs_spec.GetHashCode () ^ fs_file.GetHashCode () ^\n\t\t\t\tfs_vfstype.GetHashCode () ^ fs_mntops.GetHashCode () ^\n\t\t\t\tfs_type.GetHashCode () ^ fs_freq ^ fs_passno;\n\t\t}\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif (obj == null || GetType() != obj.GetType())\n\t\t\t\treturn false;\n\t\t\tFstab f = (Fstab) obj;\n\t\t\treturn Equals (f);\n\t\t}\n\t\tpublic bool Equals (Fstab value)\n\t\t{\n\t\t\tif (value == null)\n\t\t\t\treturn false;\n\t\t\treturn value.fs_spec == fs_spec && value.fs_file == fs_file &&\n\t\t\t\tvalue.fs_vfstype == fs_vfstype && value.fs_mntops == fs_mntops &&\n\t\t\t\tvalue.fs_type == fs_type && value.fs_freq == fs_freq && \n\t\t\t\tvalue.fs_passno == fs_passno;\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn fs_spec;\n\t\t}\n\t\tpublic static bool operator== (Fstab lhs, Fstab rhs)\n\t\t{\n\t\t\treturn Object.Equals (lhs, rhs);\n\t\t}\n\t\tpublic static bool operator!= (Fstab lhs, Fstab rhs)\n\t\t{\n\t\t\treturn !Object.Equals (lhs, rhs);\n\t\t}\n\t}\n\tpublic sealed class Group\n#if NET_2_0\n\t\t: IEquatable <Group>\n#endif\n\t{\n\t\tpublic string           gr_name;\n\t\tpublic string           gr_passwd;\n\t\t[CLSCompliant (false)]\n\t\tpublic /* gid_t */ uint gr_gid;\n\t\tpublic string[]         gr_mem;\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\tint memhc = 0;\n\t\t\tfor (int i = 0; i < gr_mem.Length; ++i)\n\t\t\t\tmemhc ^= gr_mem[i].GetHashCode ();\n\t\t\treturn gr_name.GetHashCode () ^ gr_passwd.GetHashCode () ^ \n\t\t\t\tgr_gid.GetHashCode () ^ memhc;\n\t\t}\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif (obj == null || GetType() != obj.GetType())\n\t\t\t\treturn false;\n\t\t\tGroup g = (Group) obj;\n\t\t\treturn Equals (g);\n\t\t}\n\t\tpublic bool Equals (Group value)\n\t\t{\n\t\t\tif (value == null)\n\t\t\t\treturn false;\n\t\t\tif (value.gr_gid != gr_gid)\n\t\t\t\treturn false;\n\t\t\tif (value.gr_gid == gr_gid && value.gr_name == gr_name &&\n\t\t\t\tvalue.gr_passwd == gr_passwd) {\n\t\t\t\tif (value.gr_mem == gr_mem)\n\t\t\t\t\treturn true;\n\t\t\t\tif (value.gr_mem == null || gr_mem == null)\n\t\t\t\t\treturn false;\n\t\t\t\tif (value.gr_mem.Length != gr_mem.Length)\n\t\t\t\t\treturn false;\n\t\t\t\tfor (int i = 0; i < gr_mem.Length; ++i)\n\t\t\t\t\tif (gr_mem[i] != value.gr_mem[i])\n\t\t\t\t\t\treturn false;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\t// Generate string in /etc/group format\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\tStringBuilder sb = new StringBuilder ();\n\t\t\tsb.Append (gr_name).Append (\":\").Append (gr_passwd).Append (\":\");\n\t\t\tsb.Append (gr_gid).Append (\":\");\n\t\t\tGetMembers (sb, gr_mem);\n\t\t\treturn sb.ToString ();\n\t\t}\n\t\tprivate static void GetMembers (StringBuilder sb, string[] members)\n\t\t{\n\t\t\tif (members.Length > 0)\n\t\t\t\tsb.Append (members[0]);\n\t\t\tfor (int i = 1; i < members.Length; ++i) {\n\t\t\t\tsb.Append (\",\");\n\t\t\t\tsb.Append (members[i]);\n\t\t\t}\n\t\t}\n\t\tpublic static bool operator== (Group lhs, Group rhs)\n\t\t{\n\t\t\treturn Object.Equals (lhs, rhs);\n\t\t}\n\t\tpublic static bool operator!= (Group lhs, Group rhs)\n\t\t{\n\t\t\treturn !Object.Equals (lhs, rhs);\n\t\t}\n\t}\n\tpublic sealed class Passwd\n#if NET_2_0\n\t\t: IEquatable <Passwd>\n#endif\n\t{\n\t\tpublic string           pw_name;\n\t\tpublic string           pw_passwd;\n\t\t[CLSCompliant (false)]\n\t\tpublic /* uid_t */ uint pw_uid;\n\t\t[CLSCompliant (false)]\n\t\tpublic /* gid_t */ uint pw_gid;\n\t\tpublic string           pw_gecos;\n\t\tpublic string           pw_dir;\n\t\tpublic string           pw_shell;\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\treturn pw_name.GetHashCode () ^ pw_passwd.GetHashCode () ^ \n\t\t\t\tpw_uid.GetHashCode () ^ pw_gid.GetHashCode () ^\n\t\t\t\tpw_gecos.GetHashCode () ^ pw_dir.GetHashCode () ^\n\t\t\t\tpw_dir.GetHashCode () ^ pw_shell.GetHashCode ();\n\t\t}\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif (obj == null || GetType() != obj.GetType())\n\t\t\t\treturn false;\n\t\t\tPasswd p = (Passwd) obj;\n\t\t\treturn Equals (p);\n\t\t}\n\t\tpublic bool Equals (Passwd value)\n\t\t{\n\t\t\tif (value == null)\n\t\t\t\treturn false;\n\t\t\treturn value.pw_uid == pw_uid && value.pw_gid == pw_gid && \n\t\t\t\tvalue.pw_name == pw_name && value.pw_passwd == pw_passwd && \n\t\t\t\tvalue.pw_gecos == pw_gecos && value.pw_dir == pw_dir && \n\t\t\t\tvalue.pw_shell == pw_shell;\n\t\t}\n\t\t// Generate string in /etc/passwd format\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn string.Format (\"{0}:{1}:{2}:{3}:{4}:{5}:{6}\",\n\t\t\t\tpw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell);\n\t\t}\n\t\tpublic static bool operator== (Passwd lhs, Passwd rhs)\n\t\t{\n\t\t\treturn Object.Equals (lhs, rhs);\n\t\t}\n\t\tpublic static bool operator!= (Passwd lhs, Passwd rhs)\n\t\t{\n\t\t\treturn !Object.Equals (lhs, rhs);\n\t\t}\n\t}\n\tpublic sealed class Utsname\n#if NET_2_0\n\t\t: IEquatable <Utsname>\n#endif\n\t{\n\t\tpublic string sysname;\n\t\tpublic string nodename;\n\t\tpublic string release;\n\t\tpublic string version;\n\t\tpublic string machine;\n\t\tpublic string domainname;\n\t\tpublic override int GetHashCode ()\n\t\t{\n\t\t\treturn sysname.GetHashCode () ^ nodename.GetHashCode () ^ \n\t\t\t\trelease.GetHashCode () ^ version.GetHashCode () ^\n\t\t\t\tmachine.GetHashCode () ^ domainname.GetHashCode ();\n\t\t}\n\t\tpublic override bool Equals (object obj)\n\t\t{\n\t\t\tif (obj == null || GetType() != obj.GetType())\n\t\t\t\treturn false;\n\t\t\tUtsname u = (Utsname) obj;\n\t\t\treturn Equals (u);\n\t\t}\n\t\tpublic bool Equals (Utsname value)\n\t\t{\n\t\t\treturn value.sysname == sysname && value.nodename == nodename && \n\t\t\t\tvalue.release == release && value.version == version && \n\t\t\t\tvalue.machine == machine && value.domainname == domainname;\n\t\t}\n\t\t// Generate string in /etc/passwd format\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn string.Format (\"{0} {1} {2} {3} {4}\",\n\t\t\t\tsysname, nodename, release, version, machine);\n\t\t}\n\t\tpublic static bool operator== (Utsname lhs, Utsname rhs)\n\t\t{\n\t\t\treturn Object.Equals (lhs, rhs);\n\t\t}\n\t\tpublic static bool operator!= (Utsname lhs, Utsname rhs)\n\t\t{\n\t\t\treturn !Object.Equals (lhs, rhs);\n\t\t}\n\t}\n\t//\n\t// Convention: Functions *not* part of the standard C library AND part of\n\t// a POSIX and/or Unix standard (X/Open, SUS, XPG, etc.) go here.\n\t//\n\t// For example, the man page should be similar to:\n\t//\n\t//    CONFORMING TO (or CONFORMS TO)\n\t//           XPG2, SUSv2, POSIX, etc.\n\t//\n\t// BSD- and GNU-specific exports can also be placed here.\n\t//\n\t// Non-POSIX/XPG/etc. functions can also be placed here if:\n\t//  (a) They'd be likely to be covered in a Steven's-like book\n\t//  (b) The functions would be present in libc.so (or equivalent).\n\t//\n\t// If a function has its own library, that's a STRONG indicator that the\n\t// function should get a different binding, probably in its own assembly, \n\t// so that package management can work sanely.  (That is, we'd like to avoid\n\t// scenarios where FooLib.dll is installed, but it requires libFooLib.so to\n\t// run, and libFooLib.so doesn't exist.  That would be confusing.)\n\t//\n\t// The only methods in here should be:\n\t//  (1) low-level functions\n\t//  (2) \"Trivial\" function overloads.  For example, if the parameters to a\n\t//      function are related (e.g. getgroups(2))\n\t//  (3) The return type SHOULD NOT be changed.  If you want to provide a\n\t//      convenience function with a nicer return type, place it into one of\n\t//      the Mono.Unix.Unix* wrapper classes, and give it a .NET-styled name.\n\t//      - EXCEPTION: No public functions should have a `void' return type.\n\t//        `void' return types should be replaced with `int'.\n\t//        Rationality: `void'-return functions typically require a\n\t//        complicated call sequence, such as clear errno, then call, then\n\t//        check errno to see if any errors occurred.  This sequence can't \n\t//        be done safely in managed code, as errno may change as part of \n\t//        the P/Invoke mechanism.\n\t//        Instead, add a MonoPosixHelper export which does:\n\t//          errno = 0;\n\t//          INVOKE SYSCALL;\n\t//          return errno == 0 ? 0 : -1;\n\t//        This lets managed code check the return value in the usual manner.\n\t//  (4) Exceptions SHOULD NOT be thrown.  EXCEPTIONS: \n\t//      - If you're wrapping *broken* methods which make assumptions about \n\t//        input data, such as that an argument refers to N bytes of data.  \n\t//        This is currently limited to cuserid(3) and encrypt(3).\n\t//      - If you call functions which themselves generate exceptions.  \n\t//        This is the case for using NativeConvert, which will throw an\n\t//        exception if an invalid/unsupported value is used.\n\t//\n\t// Naming Conventions:\n\t//  - Syscall method names should have the same name as the function being\n\t//    wrapped (e.g. Syscall.read ==> read(2)).  This allows people to\n\t//    consult the appropriate man page if necessary.\n\t//  - Methods need not have the same arguments IF this simplifies or\n\t//    permits correct usage.  The current example is syslog, in which\n\t//    syslog(3)'s single `priority' argument is split into SyslogFacility\n\t//    and SyslogLevel arguments.\n\t//  - Type names (structures, classes, enumerations) are always PascalCased.\n\t//  - Enumerations are named as <MethodName><ArgumentName>, and are located\n\t//    in the Mono.Unix.Native namespace.  For readability, if ArgumentName \n\t//    is \"cmd\", use Command instead.  For example, fcntl(2) takes a\n\t//    FcntlCommand argument.  This naming convention is to provide an\n\t//    assocation between an enumeration and where it should be used, and\n\t//    allows a single method to accept multiple different enumerations \n\t//    (see mmap(2), which takes MmapProts and MmapFlags).\n\t//    - EXCEPTION: if an enumeration is shared between multiple different\n\t//      methods, AND/OR the \"obvious\" enumeration name conflicts with an\n\t//      existing .NET type, a more appropriate name should be used.\n\t//      Example: FilePermissions\n\t//    - EXCEPTION: [Flags] enumerations should get plural names to follow\n\t//      .NET name guidelines.  Usually this doesn't result in a change\n\t//      (OpenFlags is the `flags' parameter for open(2)), but it can\n\t//      (mmap(2) prot ==> MmapProts, access(2) mode ==> AccessModes).\n\t//  - Enumerations should have the [Map] and (optional) [Flags] attributes.\n\t//    [Map] is required for make-map to find the type and generate the\n\t//    appropriate NativeConvert conversion functions.\n\t//  - Enumeration contents should match the original Unix names.  This helps\n\t//    with documentation (the existing man pages are still useful), and is\n\t//    required for use with the make-map generation program.\n\t//  - Structure names should be the PascalCased version of the actual\n\t//    structure name (struct flock ==> Flock).  Structure members should\n\t//    have the same names, or a (reasonably) portable subset (Dirent being\n\t//    the poster child for questionable members).\n\t//    - Whether the managed type should be a reference type (class) or a \n\t//      value type (struct) should be determined on a case-by-case basis: \n\t//      if you ever need to be able to use NULL for it (such as with Dirent, \n\t//      Group, Passwd, as these are method return types and `null' is used \n\t//      to signify the end), it should be a reference type; otherwise, use \n\t//      your discretion, and keep any expected usage patterns in mind.\n\t//  - Syscall should be a Single Point Of Truth (SPOT).  There should be\n\t//    only ONE way to do anything.  By convention, the Linux function names\n\t//    are used, but that need not always be the case (use your discretion).\n\t//    It SHOULD NOT be required that developers know what platform they're\n\t//    on, and choose among a set of similar functions.  In short, anything\n\t//    that requires a platform check is BAD -- Mono.Unix is a wrapper, and\n\t//    we can afford to clean things up whenever possible.\n\t//    - Examples: \n\t//    \t- Syscall.statfs: Solaris/Mac OS X provide statfs(2), Linux provides\n\t//        statvfs(2).  MonoPosixHelper will \"thunk\" between the two,\n\t//        exporting a statvfs that works across platforms.\n\t//    \t- Syscall.getfsent: Glibc export which Solaris lacks, while Solaris\n\t//    \t  instead provides getvfsent(3).  MonoPosixHelper provides wrappers\n\t//    \t  to convert getvfsent(3) into Fstab data.\n\t//    - Exception: If it isn't possible to cleanly wrap platforms, then the\n\t//      method shouldn't be exported.  The user will be expected to do their\n\t//      own platform check and their own DllImports.\n\t//      Examples: mount(2), umount(2), etc.\n\t//    - Note: if a platform doesn't support a function AT ALL, the\n\t//      MonoPosixHelper wrapper won't be compiled, resulting in a\n\t//      EntryPointNotFoundException.  This is also consistent with a missing \n\t//      P/Invoke into libc.so.\n\t//\n\t[CLSCompliant (false)]\n\tpublic sealed class Syscall : Stdlib\n\t{\n\t\tnew internal const string LIBC  = \"libc\";\n\t\tprivate Syscall () {}\n\t\t//\n\t\t// <aio.h>\n\t\t//\n\t\t// TODO: aio_cancel(3), aio_error(3), aio_fsync(3), aio_read(3), \n\t\t// aio_return(3), aio_suspend(3), aio_write(3)\n\t\t//\n\t\t// Then update UnixStream.BeginRead to use the aio* functions.\n\t\t#region <attr/xattr.h> Declarations\n\t\t//\n\t\t// <attr/xattr.h> -- COMPLETE\n\t\t//\n\t\t// setxattr(2)\n\t\t//    int setxattr (const char *path, const char *name,\n\t\t//        const void *value, size_t size, int flags);\n\t\t[DllImport (MPH, SetLastError=true,\n\t\t\t\tEntryPoint=\"Mono_Posix_Syscall_setxattr\")]\n\t\tpublic static extern int setxattr (\n\t\t\t\t[MarshalAs (UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(FileNameMarshaler))]\n\t\t\t\tstring path, \n\t\t\t\t[MarshalAs (UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(FileNameMarshaler))]\n\t\t\t\tstring name, byte[] value, ulong size, XattrFlags flags);\n\t\tpublic static int setxattr (string path, string name, byte [] value, ulong size)\n\t\t{\n\t\t\treturn setxattr (path, name, value, size, XattrFlags.XATTR_AUTO);\n\t\t}\n\t\tpublic static int setxattr (string path, string name, byte [] value, XattrFlags flags)\n\t\t{\n\t\t\treturn setxattr (path, name, value, (ulong) value.Length, flags);\n\t\t}\n\t\tpublic static int setxattr (string path, string name, byte [] value)\n\t\t{\n\t\t\treturn setxattr (path, name, value, (ulong) value.Length);\n\t\t}\n\t\t// lsetxattr(2)\n\t\t// \t  int lsetxattr (const char *path, const char *name,\n\t\t//                   const void *value, size_t size, int flags);\n\t\t[DllImport (MPH, SetLastError=true,\n\t\t\t\tEntryPoint=\"Mono_Posix_Syscall_lsetxattr\")]\n\t\tpublic static extern int lsetxattr (\n\t\t\t\t[MarshalAs (UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(FileNameMarshaler))]\n\t\t\t\tstring path, \n\t\t\t\t[MarshalAs (UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(FileNameMarshaler))]\n\t\t\t\tstring name, byte[] value, ulong size, XattrFlags flags);\n\t\tpublic static int lsetxattr (string path, string name, byte [] value, ulong size)\n\t\t{\n\t\t\treturn lsetxattr (path, name, value, size, XattrFlags.XATTR_AUTO);\n\t\t}\n\t\tpublic static int lsetxattr (string path, string name, byte [] value, XattrFlags flags)\n\t\t{\n\t\t\treturn lsetxattr (path, name, value, (ulong) value.Length, flags);\n\t\t}\n\t\tpublic static int lsetxattr (string path, string name, byte [] value)\n\t\t{\n\t\t\treturn lsetxattr (path, name, value, (ulong) value.Length);\n\t\t}\n\t\t// fsetxattr(2)\n\t\t// \t  int fsetxattr (int fd, const char *name,\n\t\t//                   const void *value, size_t size, int flags);\n\t\t[DllImport (MPH, SetLastError=true,\n\t\t\t\tEntryPoint=\"Mono_Posix_Syscall_fsetxattr\")]\n\t\tpublic static extern int fsetxattr (int fd, \n\t\t\t\t[MarshalAs (UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(FileNameMarshaler))]\n\t\t\t\tstring name, byte[] value, ulong size, XattrFlags flags);\n\t\tpublic static int fsetxattr (int fd, string name, byte [] value, ulong size)\n\t\t{\n\t\t\treturn fsetxattr (fd, name, value, size, XattrFlags.XATTR_AUTO);\n\t\t}\n\t\tpublic static int fsetxattr (int fd, string name, byte [] value, XattrFlags flags)\n\t\t{\n\t\t\treturn fsetxattr (fd, name, value, (ulong) value.Length, flags);\n\t\t}\n\t\tpublic static int fsetxattr (int fd, string name, byte [] value)\n\t\t{\n\t\t\treturn fsetxattr (fd, name, value, (ulong) value.Length);\n\t\t}\n\t\t// getxattr(2)\n\t\t// \t  ssize_t getxattr (const char *path, const char *name,\n\t\t//                      void *value, size_t size);\n\t\t[DllImport (MPH, SetLastError=true,\n\t\t\t\tEntryPoint=\"Mono_Posix_Syscall_getxattr\")]\n\t\tpublic static extern long getxattr (\n\t\t\t\t[MarshalAs (UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(FileNameMarshaler))]\n\t\t\t\tstring path, \n\t\t\t\t[MarshalAs (UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(FileNameMarshaler))]\n\t\t\t\tstring name, byte[] value, ulong size);\n\t\tpublic static long getxattr (string path, string name, byte [] value)\n\t\t{\n\t\t\treturn getxattr (path, name, value, (ulong) value.Length);\n\t\t}\n\t\tpublic static long getxattr (string path, string name, out byte [] value)\n\t\t{\n\t\t\tvalue = null;\n\t\t\tlong size = getxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn getxattr (path, name, value, (ulong) size);\n\t\t}\n\t\t// lgetxattr(2)\n\t\t// \t  ssize_t lgetxattr (const char *path, const char *name,\n\t\t//                       void *value, size_t size);\n\t\t[DllImport (MPH, SetLastError=true,\n\t\t\t\tEntryPoint=\"Mono_Posix_Syscall_lgetxattr\")]\n\t\tpublic static extern long lgetxattr (\n\t\t\t\t[MarshalAs (UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(FileNameMarshaler))]\n\t\t\t\tstring path, \n\t\t\t\t[MarshalAs (UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(FileNameMarshaler))]\n\t\t\t\tstring name, byte[] value, ulong size);\n\t\tpublic static long lgetxattr (string path, string name, byte [] value)\n\t\t{\n\t\t\treturn lgetxattr (path, name, value, (ulong) value.Length);\n\t\t}\n\t\tpublic static long lgetxattr (string path, string name, out byte [] value)\n\t\t{\n\t\t\tvalue = null;\n", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "length": 6868, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "a8420508e955202ef3f7b66a3f9bc88371acb0b5888f242b"}
{"input": "", "context": "//#############################################################################\n//#                                                                           #\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\n//#                                                                           #\n//#  This program is free software: you can redistribute it and/or modify     #\n//#  it under the terms of the GNU Affero General Public License as           #\n//#  published by the Free Software Foundation, either version 3 of the       #\n//#  License, or (at your option) any later version.                          # \n//#                                                                           #\n//#  This program is distributed in the hope that it will be useful,          #\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\n//#  GNU Affero General Public License for more details.                      #\n//#                                                                           #\n//#  You should have received a copy of the GNU Affero General Public License #\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\n//#                                                                           #\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\n//#  this program.  Users of this software do so entirely at their own risk.  #\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\n//#  software that it builds, deploys and maintains.                          #\n//#                                                                           #\n//#############################################################################\n//#EOH\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\n// WARNING: DO NOT MODIFY the content of this file\npackage ims.clinical.forms.edischargeallergiesetccomponent;\nimport ims.framework.*;\nimport ims.framework.controls.*;\nimport ims.framework.enumerations.*;\nimport ims.framework.utils.RuntimeAnchoring;\npublic class GenForm extends FormBridge\n{\n\tprivate static final long serialVersionUID = 1L;\n\tprotected void fireCustomControlValueChanged()\n\t{\n\t\tsuper.fireValueChanged();\n\t}\n\tpublic boolean canProvideData(IReportSeed[] reportSeeds)\n\t{\n\t\treturn new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();\n\t}\n\tpublic boolean hasData(IReportSeed[] reportSeeds)\n\t{\n\t\treturn new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();\n\t}\n\tpublic IReportField[] getData(IReportSeed[] reportSeeds)\n\t{\n\t\treturn getData(reportSeeds, false);\n\t}\n\tpublic IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)\n\t{\n\t\treturn new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();\n\t}\n\tpublic static class ctnAlertContainer extends ContainerBridge\n\t{\n\t\tprivate static final long serialVersionUID = 1L;\n\t\tpublic static class cmbAlertCategoryComboBox extends ComboBoxBridge\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\n\t\t\tpublic void newRow(ims.core.vo.lookups.AlertType value, String text)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.AlertType value, String text, ims.framework.utils.Image image)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, image);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.AlertType value, String text, ims.framework.utils.Color textColor)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, textColor);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.AlertType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, image, textColor);\n\t\t\t}\n\t\t\tpublic boolean removeRow(ims.core.vo.lookups.AlertType value)\n\t\t\t{\n\t\t\t\treturn super.control.removeRow(value);\n\t\t\t}\n\t\t\tpublic ims.core.vo.lookups.AlertType getValue()\n\t\t\t{\n\t\t\t\treturn (ims.core.vo.lookups.AlertType)super.control.getValue();\n\t\t\t}\n\t\t\tpublic void setValue(ims.core.vo.lookups.AlertType value)\n\t\t\t{\n\t\t\t\tsuper.control.setValue(value);\n\t\t\t}\n\t\t}\n\t\tpublic static class cmbAlertAlertComboBox extends ComboBoxBridge\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\n\t\t\tpublic void newRow(ims.core.vo.lookups.AlertType value, String text)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.AlertType value, String text, ims.framework.utils.Image image)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, image);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.AlertType value, String text, ims.framework.utils.Color textColor)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, textColor);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.AlertType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, image, textColor);\n\t\t\t}\n\t\t\tpublic boolean removeRow(ims.core.vo.lookups.AlertType value)\n\t\t\t{\n\t\t\t\treturn super.control.removeRow(value);\n\t\t\t}\n\t\t\tpublic ims.core.vo.lookups.AlertType getValue()\n\t\t\t{\n\t\t\t\treturn (ims.core.vo.lookups.AlertType)super.control.getValue();\n\t\t\t}\n\t\t\tpublic void setValue(ims.core.vo.lookups.AlertType value)\n\t\t\t{\n\t\t\t\tsuper.control.setValue(value);\n\t\t\t}\n\t\t}\n\t\tpublic static class cmbAlertSourceComboBox extends ComboBoxBridge\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\n\t\t\tpublic void newRow(ims.core.vo.lookups.SourceofInformation value, String text)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Image image)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, image);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Color textColor)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, textColor);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, image, textColor);\n\t\t\t}\n\t\t\tpublic boolean removeRow(ims.core.vo.lookups.SourceofInformation value)\n\t\t\t{\n\t\t\t\treturn super.control.removeRow(value);\n\t\t\t}\n\t\t\tpublic ims.core.vo.lookups.SourceofInformation getValue()\n\t\t\t{\n\t\t\t\treturn (ims.core.vo.lookups.SourceofInformation)super.control.getValue();\n\t\t\t}\n\t\t\tpublic void setValue(ims.core.vo.lookups.SourceofInformation value)\n\t\t\t{\n\t\t\t\tsuper.control.setValue(value);\n\t\t\t}\n\t\t}\n\t\tprotected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception\n\t\t{\n\t\t\tif(form == null)\n\t\t\t\tthrow new RuntimeException(\"Invalid form\");\n\t\t\tif(appForm == null)\n\t\t\t\tthrow new RuntimeException(\"Invalid application form\");\n\t\t\tif(control == null); // this is to avoid eclipse warning only.\n\t\t\tif(loader == null); // this is to avoid eclipse warning only.\n\t\t\tif(form_images_local == null); // this is to avoid eclipse warning only.\n\t\t\tif(contextMenus == null); // this is to avoid eclipse warning only.\n\t\t\tif(startControlID == null)\n\t\t\t\tthrow new RuntimeException(\"Invalid startControlID\");\n\t\t\tif(designSize == null); // this is to avoid eclipse warning only.\n\t\t\tif(runtimeSize == null); // this is to avoid eclipse warning only.\n\t\t\tif(startTabIndex == null)\n\t\t\t\tthrow new RuntimeException(\"Invalid startTabIndex\");\n\t\n\t\n\t\t\t// Custom Controls\n\t\t\tims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();\n\t\t\tRuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 448, 56, 344, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);\n\t\t\tims.framework.FormUiLogic m_ccAlertAuthorForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 22, skipContextValidation);\n\t\t\t//ims.framework.Control m_ccAlertAuthorControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(448), new Integer(56), new Integer(344), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 22), m_ccAlertAuthorForm, instance1 } );\n\t\t\tims.framework.Control m_ccAlertAuthorControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 22), m_ccAlertAuthorForm, instance1, Boolean.FALSE } );\n\t\t\tsuper.addControl(m_ccAlertAuthorControl);\n\t\t\tMenu[] menus1 = m_ccAlertAuthorForm.getForm().getRegisteredMenus();\n\t\t\tfor(int x = 0; x < menus1.length; x++)\n\t\t\t{\n\t\t\t\tform.registerMenu(menus1[x]);\n\t\t\t}\n\t\n\t\t\t// Label Controls\n\t\t\tRuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Category:\", new Integer(1), null, new Integer(0)}));\n\t\t\tRuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Alert:\", new Integer(1), null, new Integer(0)}));\n\t\t\tRuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Comment:\", new Integer(1), null, new Integer(0)}));\n\t\t\tRuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 456, 8, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Source:\", new Integer(1), null, new Integer(0)}));\n\t\t\tRuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 456, 32, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Date Identified:\", new Integer(1), null, new Integer(0)}));\n\t\n\t\t\t// TextBox Controls\n\t\t\tRuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 120, 56, 304, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, \"\", \"\"}));\n\t\n\t\t\t// PartialDateBox Controls\n\t\t\tRuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 586, 32, 142, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Invalid date entered\", Boolean.FALSE, Boolean.FALSE}));\n\t\n\t\t\t// ComboBox Controls\n\t\t\tRuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 120, 8, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tComboBox m_cmbAlertCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});\n\t\t\taddControl(m_cmbAlertCategoryTemp);\n\t\t\tcmbAlertCategoryComboBox cmbAlertCategory = (cmbAlertCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAlertCategoryComboBox.class, m_cmbAlertCategoryTemp);\n\t\t\tsuper.addComboBox(cmbAlertCategory);\n\t\t\tRuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 120, 32, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tComboBox m_cmbAlertAlertTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});\n\t\t\taddControl(m_cmbAlertAlertTemp);\n\t\t\tcmbAlertAlertComboBox cmbAlertAlert = (cmbAlertAlertComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAlertAlertComboBox.class, m_cmbAlertAlertTemp);\n\t\t\tsuper.addComboBox(cmbAlertAlert);\n\t\t\tRuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 586, 8, 191, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);\n\t\t\tComboBox m_cmbAlertSourceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});\n\t\t\taddControl(m_cmbAlertSourceTemp);\n\t\t\tcmbAlertSourceComboBox cmbAlertSource = (cmbAlertSourceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAlertSourceComboBox.class, m_cmbAlertSourceTemp);\n\t\t\tsuper.addComboBox(cmbAlertSource);\n\t\t}\n\t\tpublic ims.core.forms.authoringinfo.IComponent ccAlertAuthor()\n\t\t{\n\t\t\treturn (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();\n\t\t}\n\t\tpublic void setccAlertAuthorValueChangedEvent(ims.framework.delegates.ValueChanged delegate)\n\t\t{\n\t\t\t((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);\n\t\t}\n\t\tpublic void setccAlertAuthorVisible(boolean value)\n\t\t{\n\t\t\t((ims.framework.Control)super.getControl(0)).setVisible(value);\n\t\t}\n\t\tpublic boolean isccAlertAuthorVisible()\n\t\t{\n\t\t\treturn ((ims.framework.Control)super.getControl(0)).isVisible();\n\t\t}\n\t\tpublic void setccAlertAuthorEnabled(boolean value)\n\t\t{\n\t\t\t((ims.framework.Control)super.getControl(0)).setEnabled(value);\n\t\t}\n\t\tpublic boolean isccAlertAuthorEnabled()\n\t\t{\n\t\t\treturn ((ims.framework.Control)super.getControl(0)).isEnabled();\n\t\t}\n\t\tpublic TextBox txtAlertComment()\n\t\t{\n\t\t\treturn (TextBox)super.getControl(6);\n\t\t}\n\t\tpublic PartialDateBox pdtAlertDateIdentified()\n\t\t{\n\t\t\treturn (PartialDateBox)super.getControl(7);\n\t\t}\n\t\tpublic cmbAlertCategoryComboBox cmbAlertCategory()\n\t\t{\n\t\t\treturn (cmbAlertCategoryComboBox)super.getComboBox(0);\n\t\t}\n\t\tpublic cmbAlertAlertComboBox cmbAlertAlert()\n\t\t{\n\t\t\treturn (cmbAlertAlertComboBox)super.getComboBox(1);\n\t\t}\n\t\tpublic cmbAlertSourceComboBox cmbAlertSource()\n\t\t{\n\t\t\treturn (cmbAlertSourceComboBox)super.getComboBox(2);\n\t\t}\n\t}\n\tpublic static class ctnAllergyContainer extends ContainerBridge\n\t{\n\t\tprivate static final long serialVersionUID = 1L;\n\t\tpublic static class cmbAllergyTypeComboBox extends ComboBoxBridge\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\n\t\t\tpublic void newRow(ims.core.vo.lookups.AllergenType value, String text)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.AllergenType value, String text, ims.framework.utils.Image image)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, image);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.AllergenType value, String text, ims.framework.utils.Color textColor)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, textColor);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.AllergenType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, image, textColor);\n\t\t\t}\n\t\t\tpublic boolean removeRow(ims.core.vo.lookups.AllergenType value)\n\t\t\t{\n\t\t\t\treturn super.control.removeRow(value);\n\t\t\t}\n\t\t\tpublic ims.core.vo.lookups.AllergenType getValue()\n\t\t\t{\n\t\t\t\treturn (ims.core.vo.lookups.AllergenType)super.control.getValue();\n\t\t\t}\n\t\t\tpublic void setValue(ims.core.vo.lookups.AllergenType value)\n\t\t\t{\n\t\t\t\tsuper.control.setValue(value);\n\t\t\t}\n\t\t}\n\t\tpublic static class cmbAllergyReactionComboBox extends ComboBoxBridge\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\n\t\t\tpublic void newRow(ims.core.vo.lookups.AllergyReaction value, String text)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.AllergyReaction value, String text, ims.framework.utils.Image image)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, image);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.AllergyReaction value, String text, ims.framework.utils.Color textColor)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, textColor);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.AllergyReaction value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, image, textColor);\n\t\t\t}\n\t\t\tpublic boolean removeRow(ims.core.vo.lookups.AllergyReaction value)\n\t\t\t{\n\t\t\t\treturn super.control.removeRow(value);\n\t\t\t}\n\t\t\tpublic ims.core.vo.lookups.AllergyReaction getValue()\n\t\t\t{\n\t\t\t\treturn (ims.core.vo.lookups.AllergyReaction)super.control.getValue();\n\t\t\t}\n\t\t\tpublic void setValue(ims.core.vo.lookups.AllergyReaction value)\n\t\t\t{\n\t\t\t\tsuper.control.setValue(value);\n\t\t\t}\n\t\t}\n\t\tpublic static class cmbAllergySourceComboBox extends ComboBoxBridge\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\n\t\t\tpublic void newRow(ims.core.vo.lookups.SourceofInformation value, String text)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Image image)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, image);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Color textColor)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, textColor);\n\t\t\t}\n\t\t\tpublic void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\n\t\t\t{\n\t\t\t\tsuper.control.newRow(value, text, image, textColor);\n\t\t\t}\n\t\t\tpublic boolean removeRow(ims.core.vo.lookups.SourceofInformation value)\n\t\t\t{\n\t\t\t\treturn super.control.removeRow(value);\n\t\t\t}\n\t\t\tpublic ims.core.vo.lookups.SourceofInformation getValue()\n\t\t\t{\n\t\t\t\treturn (ims.core.vo.lookups.SourceofInformation)super.control.getValue();\n\t\t\t}\n\t\t\tpublic void setValue(ims.core.vo.lookups.SourceofInformation value)\n\t\t\t{\n\t\t\t\tsuper.control.setValue(value);\n\t\t\t}\n\t\t}\n\t\tprotected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception\n\t\t{\n\t\t\tif(form == null)\n\t\t\t\tthrow new RuntimeException(\"Invalid form\");\n\t\t\tif(appForm == null)\n\t\t\t\tthrow new RuntimeException(\"Invalid application form\");\n\t\t\tif(control == null); // this is to avoid eclipse warning only.\n\t\t\tif(loader == null); // this is to avoid eclipse warning only.\n\t\t\tif(form_images_local == null); // this is to avoid eclipse warning only.\n\t\t\tif(contextMenus == null); // this is to avoid eclipse warning only.\n\t\t\tif(startControlID == null)\n\t\t\t\tthrow new RuntimeException(\"Invalid startControlID\");\n\t\t\tif(designSize == null); // this is to avoid eclipse warning only.\n\t\t\tif(runtimeSize == null); // this is to avoid eclipse warning only.\n\t\t\tif(startTabIndex == null)\n\t\t\t\tthrow new RuntimeException(\"Invalid startTabIndex\");\n\t\n\t\n\t\t\t// Custom Controls\n\t\t\tims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();\n\t\t\tRuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 448, 112, 344, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);\n\t\t\tims.framework.FormUiLogic m_ccAllergyAuthorForm = loader.loadComponent(102228, appForm, startControlID * 10 + 2000, anchoringHelper12.getSize(), instance1, startTabIndex.intValue() + 11, skipContextValidation);\n\t\t\t//ims.framework.Control m_ccAllergyAuthorControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(448), new Integer(112), new Integer(344), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 11), m_ccAllergyAuthorForm, instance1 } );\n\t\t\tims.framework.Control m_ccAllergyAuthorControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1013),  new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 11), m_ccAllergyAuthorForm, instance1, Boolean.FALSE } );\n\t\t\tsuper.addControl(m_ccAllergyAuthorControl);\n\t\t\tMenu[] menus1 = m_ccAllergyAuthorForm.getForm().getRegisteredMenus();\n\t\t\tfor(int x = 0; x < menus1.length; x++)\n\t\t\t{\n\t\t\t\tform.registerMenu(menus1[x]);\n\t\t\t}\n\t\t\tims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();\n\t\t\tRuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 784, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);\n\t\t\tims.framework.FormUiLogic m_ccAllergyTermForm = loader.loadComponent(123133, appForm, startControlID * 10 + 3000, anchoringHelper13.getSize(), instance2, startTabIndex.intValue() + 2, skipContextValidation);\n\t\t\t//ims.framework.Control m_ccAllergyTermControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(8), new Integer(8), new Integer(784), new Integer(64), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2), m_ccAllergyTermForm, instance2 } );\n\t\t\tims.framework.Control m_ccAllergyTermControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1015),  new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2), m_ccAllergyTermForm, instance2, Boolean.FALSE } );\n\t\t\tsuper.addControl(m_ccAllergyTermControl);\n\t\t\tMenu[] menus2 = m_ccAllergyTermForm.getForm().getRegisteredMenus();\n\t\t\tfor(int x = 0; x < menus2.length; x++)\n\t\t\t{\n\t\t\t\tform.registerMenu(menus2[x]);\n\t\t\t}\n\t\n\t\t\t// Label Controls\n\t\t\tRuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 72, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Type:\", new Integer(1), null, new Integer(0)}));\n\t\t\tRuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 96, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Reaction:\", new Integer(1), null, new Integer(0)}));\n\t\t\tRuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 456, 72, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Source:\", new Integer(1), null, new Integer(0)}));\n\t\t\tRuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 120, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Effect:\", new Integer(1), null, new Integer(0)}));\n\t\t\tRuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 456, 96, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Date Identified:\", new Integer(1), null, new Integer(0)}));\n\t\n\t\t\t// TextBox Controls\n\t\t\tRuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 120, 120, 304, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(250), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, \"\", \"\"}));\n\t\n\t\t\t// PartialDateBox Controls\n\t\t\tRuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 586, 96, 142, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tsuper.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Invalid date entered\", Boolean.FALSE, Boolean.FALSE}));\n\t\n\t\t\t// ComboBox Controls\n\t\t\tRuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 120, 72, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tComboBox m_cmbAllergyTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});\n\t\t\taddControl(m_cmbAllergyTypeTemp);\n\t\t\tcmbAllergyTypeComboBox cmbAllergyType = (cmbAllergyTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAllergyTypeComboBox.class, m_cmbAllergyTypeTemp);\n\t\t\tsuper.addComboBox(cmbAllergyType);\n\t\t\tRuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 120, 96, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\n\t\t\tComboBox m_cmbAllergyReactionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});\n\t\t\taddControl(m_cmbAllergyReactionTemp);\n\t\t\tcmbAllergyReactionComboBox cmbAllergyReaction = (cmbAllergyReactionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAllergyReactionComboBox.class, m_cmbAllergyReactionTemp);\n\t\t\tsuper.addComboBox(cmbAllergyReaction);\n\t\t\tRuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 586, 72, 191, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);\n\t\t\tComboBox m_cmbAllergySourceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});\n\t\t\taddControl(m_cmbAllergySourceTemp);\n\t\t\tcmbAllergySourceComboBox cmbAllergySource = (cmbAllergySourceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAllergySourceComboBox.class, m_cmbAllergySourceTemp);\n\t\t\tsuper.addComboBox(cmbAllergySource);\n\t\t}\n\t\tpublic ims.core.forms.authoringinfo.IComponent ccAllergyAuthor()\n\t\t{\n\t\t\treturn (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();\n\t\t}\n\t\tpublic void setccAllergyAuthorValueChangedEvent(ims.framework.delegates.ValueChanged delegate)\n\t\t{\n\t\t\t((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);\n\t\t}\n\t\tpublic void setccAllergyAuthorVisible(boolean value)\n\t\t{\n\t\t\t((ims.framework.Control)super.getControl(0)).setVisible(value);\n\t\t}\n\t\tpublic boolean isccAllergyAuthorVisible()\n\t\t{\n\t\t\treturn ((ims.framework.Control)super.getControl(0)).isVisible();\n\t\t}\n\t\tpublic void setccAllergyAuthorEnabled(boolean value)\n\t\t{\n\t\t\t((ims.framework.Control)super.getControl(0)).setEnabled(value);\n\t\t}\n\t\tpublic boolean isccAllergyAuthorEnabled()\n\t\t{\n\t\t\treturn ((ims.framework.Control)super.getControl(0)).isEnabled();\n\t\t}\n\t\tpublic ims.clinical.forms.clinicalcoding.IComponent ccAllergyTerm()\n\t\t{\n\t\t\treturn (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();\n\t\t}\n\t\tpublic void setccAllergyTermValueChangedEvent(ims.framework.delegates.ValueChanged delegate)\n\t\t{\n\t\t\t((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);\n\t\t}\n\t\tpublic void setccAllergyTermVisible(boolean value)\n\t\t{\n\t\t\t((ims.framework.Control)super.getControl(1)).setVisible(value);\n\t\t}\n\t\tpublic boolean isccAllergyTermVisible()\n\t\t{\n\t\t\treturn ((ims.framework.Control)super.getControl(1)).isVisible();\n\t\t}\n\t\tpublic void setccAllergyTermEnabled(boolean value)\n\t\t{\n\t\t\t((ims.framework.Control)super.getControl(1)).setEnabled(value);\n\t\t}\n\t\tpublic boolean isccAllergyTermEnabled()\n\t\t{\n\t\t\treturn ((ims.framework.Control)super.getControl(1)).isEnabled();\n\t\t}\n\t\tpublic TextBox txtAllergyEffect()\n\t\t{\n\t\t\treturn (TextBox)super.getControl(7);\n\t\t}\n\t\tpublic PartialDateBox pdtAllergyDateIdentified()\n\t\t{\n\t\t\treturn (PartialDateBox)super.getControl(8);\n\t\t}\n\t\tpublic cmbAllergyTypeComboBox cmbAllergyType()\n\t\t{\n\t\t\treturn (cmbAllergyTypeComboBox)super.getComboBox(0);\n\t\t}\n\t\tpublic cmbAllergyReactionComboBox cmbAllergyReaction()\n\t\t{\n\t\t\treturn (cmbAllergyReactionComboBox)super.getComboBox(1);\n\t\t}\n\t\tpublic cmbAllergySourceComboBox cmbAllergySource()\n\t\t{\n\t\t\treturn (cmbAllergySourceComboBox)super.getComboBox(2);\n\t\t}\n\t}\n\tpublic static class grdAlertsRow extends GridRowBridge\n\t{\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\tprotected grdAlertsRow(GridRow row)\n\t\t{\n\t\t\tsuper(row);\n\t\t}\n\t\tpublic void showOpened(int column)\n\t\t{\n\t\t\tsuper.row.showOpened(column);\n\t\t}\n\t\tpublic void setColDateReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(0, value);\n\t\t}\n\t\tpublic boolean isColDateReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(0);\n\t\t}\n\t\tpublic void showColDateOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(0);\n\t\t}\n\t\tpublic void setTooltipForColDate(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(0, value);\n\t\t}\n\t\tpublic String getColDate()\n\t\t{\n\t\t\treturn (String)super.row.get(0);\n\t\t}\n\t\tpublic void setColDate(String value)\n\t\t{\n\t\t\tsuper.row.set(0, value);\n\t\t}\n\t\tpublic void setCellColDateTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(0, value);\n\t\t}\n\t\tpublic void setColCategoryReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(1, value);\n\t\t}\n\t\tpublic boolean isColCategoryReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(1);\n\t\t}\n\t\tpublic void showColCategoryOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(1);\n\t\t}\n\t\tpublic void setTooltipForColCategory(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(1, value);\n\t\t}\n\t\tpublic String getColCategory()\n\t\t{\n\t\t\treturn (String)super.row.get(1);\n\t\t}\n\t\tpublic void setColCategory(String value)\n\t\t{\n\t\t\tsuper.row.set(1, value);\n\t\t}\n\t\tpublic void setCellColCategoryTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(1, value);\n\t\t}\n\t\tpublic void setColAlertReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(2, value);\n\t\t}\n\t\tpublic boolean isColAlertReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(2);\n\t\t}\n\t\tpublic void showColAlertOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(2);\n\t\t}\n\t\tpublic void setTooltipForColAlert(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(2, value);\n\t\t}\n\t\tpublic String getColAlert()\n\t\t{\n\t\t\treturn (String)super.row.get(2);\n\t\t}\n\t\tpublic void setColAlert(String value)\n\t\t{\n\t\t\tsuper.row.set(2, value);\n\t\t}\n\t\tpublic void setCellColAlertTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(2, value);\n\t\t}\n\t\tpublic void setColSourceReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(3, value);\n\t\t}\n\t\tpublic boolean isColSourceReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(3);\n\t\t}\n\t\tpublic void showColSourceOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(3);\n\t\t}\n\t\tpublic void setTooltipForColSource(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(3, value);\n\t\t}\n\t\tpublic String getColSource()\n\t\t{\n\t\t\treturn (String)super.row.get(3);\n\t\t}\n\t\tpublic void setColSource(String value)\n\t\t{\n\t\t\tsuper.row.set(3, value);\n\t\t}\n\t\tpublic void setCellColSourceTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(3, value);\n\t\t}\n\t\tpublic void setColActiveReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(4, value);\n\t\t}\n\t\tpublic boolean isColActiveReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(4);\n\t\t}\n\t\tpublic void showColActiveOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(4);\n\t\t}\n\t\tpublic void setTooltipForColActive(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(4, value);\n\t\t}\n\t\tpublic ims.framework.utils.Image getColActive()\n\t\t{\n\t\t\treturn (ims.framework.utils.Image)super.row.get(4);\n\t\t}\n\t\tpublic void setColActive(ims.framework.utils.Image value)\n\t\t{\n\t\t\tsuper.row.set(4, value);\n\t\t}\n\t\tpublic void setCellColActiveTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(4, value);\n\t\t}\n\t\tpublic void setColAuditReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(5, value);\n\t\t}\n\t\tpublic boolean isColAuditReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(5);\n\t\t}\n\t\tpublic void showColAuditOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(5);\n\t\t}\n\t\tpublic void setTooltipForColAudit(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(5, value);\n\t\t}\n\t\tpublic ims.framework.utils.Image getColAudit()\n\t\t{\n\t\t\treturn (ims.framework.utils.Image)super.row.get(5);\n\t\t}\n\t\tpublic void setColAudit(ims.framework.utils.Image value)\n\t\t{\n\t\t\tsuper.row.set(5, value);\n\t\t}\n\t\tpublic void setCellColAuditTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(5, value);\n\t\t}\n\t\tpublic void setColIncludeReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(6, value);\n\t\t}\n\t\tpublic boolean isColIncludeReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(6);\n\t\t}\n\t\tpublic void showColIncludeOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(6);\n\t\t}\n\t\tpublic void setTooltipForColInclude(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(6, value);\n\t\t}\n\t\tpublic boolean getColInclude()\n\t\t{\n\t\t\treturn ((Boolean)super.row.get(6)).booleanValue();\n\t\t}\n\t\tpublic void setColInclude(boolean value)\n\t\t{\n\t\t\tsuper.row.set(6, new Boolean(value));\n\t\t}\n\t\tpublic void setCellColIncludeTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(6, value);\n\t\t}\n\t\tpublic ims.core.vo.PatientAlertEDischargeVo getValue()\n\t\t{\n\t\t\treturn (ims.core.vo.PatientAlertEDischargeVo)super.row.getValue();\n\t\t}\n\t\tpublic void setValue(ims.core.vo.PatientAlertEDischargeVo value)\n\t\t{\n\t\t\tsuper.row.setValue(value);\n\t\t}\n\t}\n\tpublic static class grdAlertsRowCollection extends GridRowCollectionBridge\n\t{\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\tprivate grdAlertsRowCollection(GridRowCollection collection)\n\t\t{\n\t\t\tsuper(collection);\n\t\t}\n\t\tpublic grdAlertsRow get(int index)\n\t\t{\n\t\t\treturn new grdAlertsRow(super.collection.get(index));\n\t\t}\n\t\tpublic grdAlertsRow newRow()\n\t\t{\n\t\t\treturn new grdAlertsRow(super.collection.newRow());\n\t\t}\n\t\tpublic grdAlertsRow newRow(boolean autoSelect)\n\t\t{\n\t\t\treturn new grdAlertsRow(super.collection.newRow(autoSelect));\n\t\t}\n\t\tpublic grdAlertsRow newRowAt(int index)\n\t\t{\n\t\t\treturn new grdAlertsRow(super.collection.newRowAt(index));\n\t\t}\n\t\tpublic grdAlertsRow newRowAt(int index, boolean autoSelect)\n\t\t{\n\t\t\treturn new grdAlertsRow(super.collection.newRowAt(index, autoSelect));\n\t\t}\n\t}\n\tpublic static class grdAlertsGrid extends GridBridge\n\t{\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\tprivate void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)\n\t\t{\n\t\t\tsuper.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);\n\t\t}\n\t\tprivate void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)\n\t\t{\n\t\t\tsuper.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);\n\t\t}\n\t\tprivate void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)\n\t\t{\n\t\t\tsuper.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);\n\t\t}\n\t\tpublic ims.core.vo.PatientAlertEDischargeVoCollection getValues()\n\t\t{\n\t\t\tims.core.vo.PatientAlertEDischargeVoCollection listOfValues = new ims.core.vo.PatientAlertEDischargeVoCollection();\n\t\t\tfor(int x = 0; x < this.getRows().size(); x++)\n\t\t\t{\n\t\t\t\tlistOfValues.add(this.getRows().get(x).getValue());\n\t\t\t}\n\t\t\treturn listOfValues;\n\t\t}\n\t\tpublic ims.core.vo.PatientAlertEDischargeVo getValue()\n\t\t{\n\t\t\treturn (ims.core.vo.PatientAlertEDischargeVo)super.grid.getValue();\n\t\t}\n\t\tpublic void setValue(ims.core.vo.PatientAlertEDischargeVo value)\n\t\t{\n\t\t\tsuper.grid.setValue(value);\n\t\t}\n\t\tpublic grdAlertsRow getSelectedRow()\n\t\t{\n\t\t\treturn super.grid.getSelectedRow() == null ? null : new grdAlertsRow(super.grid.getSelectedRow());\n\t\t}\n\t\tpublic int getSelectedRowIndex()\n\t\t{\n\t\t\treturn super.grid.getSelectedRowIndex();\n\t\t}\n\t\tpublic grdAlertsRowCollection getRows()\n\t\t{\n\t\t\treturn new grdAlertsRowCollection(super.grid.getRows());\n\t\t}\n\t\tpublic grdAlertsRow getRowByValue(ims.core.vo.PatientAlertEDischargeVo value)\n\t\t{\n\t\t\tGridRow row = super.grid.getRowByValue(value);\n\t\t\treturn row == null?null:new grdAlertsRow(row);\n\t\t}\n\t\tpublic void setColDateHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(0, value);\n\t\t}\n\t\tpublic String getColDateHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(0);\n\t\t}\n\t\tpublic void setColCategoryHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(1, value);\n\t\t}\n\t\tpublic String getColCategoryHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(1);\n\t\t}\n\t\tpublic void setColAlertHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(2, value);\n\t\t}\n\t\tpublic String getColAlertHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(2);\n\t\t}\n\t\tpublic void setColSourceHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(3, value);\n\t\t}\n\t\tpublic String getColSourceHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(3);\n\t\t}\n\t\tpublic void setColActiveHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(4, value);\n\t\t}\n\t\tpublic String getColActiveHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(4);\n\t\t}\n\t\tpublic void setColAuditHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(5, value);\n\t\t}\n\t\tpublic String getColAuditHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(5);\n\t\t}\n\t\tpublic void setColIncludeHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(6, value);\n\t\t}\n\t\tpublic String getColIncludeHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(6);\n\t\t}\n\t}\n\tpublic static class grdAllergiesRow extends GridRowBridge\n\t{\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\tprotected grdAllergiesRow(GridRow row)\n\t\t{\n\t\t\tsuper(row);\n\t\t}\n\t\tpublic void showOpened(int column)\n\t\t{\n\t\t\tsuper.row.showOpened(column);\n\t\t}\n\t\tpublic void setColDateReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(0, value);\n\t\t}\n\t\tpublic boolean isColDateReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(0);\n\t\t}\n\t\tpublic void showColDateOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(0);\n\t\t}\n\t\tpublic void setTooltipForColDate(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(0, value);\n\t\t}\n\t\tpublic String getColDate()\n\t\t{\n\t\t\treturn (String)super.row.get(0);\n\t\t}\n\t\tpublic void setColDate(String value)\n\t\t{\n\t\t\tsuper.row.set(0, value);\n\t\t}\n\t\tpublic void setCellColDateTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(0, value);\n\t\t}\n\t\tpublic void setColAllergenDesReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(1, value);\n\t\t}\n\t\tpublic boolean isColAllergenDesReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(1);\n\t\t}\n\t\tpublic void showColAllergenDesOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(1);\n\t\t}\n\t\tpublic void setTooltipForColAllergenDes(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(1, value);\n\t\t}\n\t\tpublic String getColAllergenDes()\n\t\t{\n\t\t\treturn (String)super.row.get(1);\n\t\t}\n\t\tpublic void setColAllergenDes(String value)\n\t\t{\n\t\t\tsuper.row.set(1, value);\n\t\t}\n\t\tpublic void setCellColAllergenDesTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(1, value);\n\t\t}\n\t\tpublic void setColReactionReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(2, value);\n\t\t}\n\t\tpublic boolean isColReactionReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(2);\n\t\t}\n\t\tpublic void showColReactionOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(2);\n\t\t}\n\t\tpublic void setTooltipForColReaction(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(2, value);\n\t\t}\n\t\tpublic String getColReaction()\n\t\t{\n\t\t\treturn (String)super.row.get(2);\n\t\t}\n\t\tpublic void setColReaction(String value)\n\t\t{\n\t\t\tsuper.row.set(2, value);\n\t\t}\n\t\tpublic void setCellColReactionTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(2, value);\n\t\t}\n\t\tpublic void setColSourceReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(3, value);\n\t\t}\n\t\tpublic boolean isColSourceReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(3);\n\t\t}\n\t\tpublic void showColSourceOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(3);\n\t\t}\n\t\tpublic void setTooltipForColSource(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(3, value);\n\t\t}\n\t\tpublic String getColSource()\n\t\t{\n\t\t\treturn (String)super.row.get(3);\n\t\t}\n\t\tpublic void setColSource(String value)\n\t\t{\n\t\t\tsuper.row.set(3, value);\n\t\t}\n\t\tpublic void setCellColSourceTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(3, value);\n\t\t}\n\t\tpublic void setColIsActiveReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(4, value);\n\t\t}\n\t\tpublic boolean isColIsActiveReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(4);\n\t\t}\n\t\tpublic void showColIsActiveOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(4);\n\t\t}\n\t\tpublic void setTooltipForColIsActive(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(4, value);\n\t\t}\n\t\tpublic ims.framework.utils.Image getColIsActive()\n\t\t{\n\t\t\treturn (ims.framework.utils.Image)super.row.get(4);\n\t\t}\n\t\tpublic void setColIsActive(ims.framework.utils.Image value)\n\t\t{\n\t\t\tsuper.row.set(4, value);\n\t\t}\n\t\tpublic void setCellColIsActiveTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(4, value);\n\t\t}\n\t\tpublic void setColAuditReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(5, value);\n\t\t}\n\t\tpublic boolean isColAuditReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(5);\n\t\t}\n\t\tpublic void showColAuditOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(5);\n\t\t}\n\t\tpublic void setTooltipForColAudit(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(5, value);\n\t\t}\n\t\tpublic ims.framework.utils.Image getColAudit()\n\t\t{\n\t\t\treturn (ims.framework.utils.Image)super.row.get(5);\n\t\t}\n\t\tpublic void setColAudit(ims.framework.utils.Image value)\n\t\t{\n\t\t\tsuper.row.set(5, value);\n\t\t}\n\t\tpublic void setCellColAuditTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(5, value);\n\t\t}\n\t\tpublic void setColIncludeReadOnly(boolean value)\n\t\t{\n\t\t\tsuper.row.setReadOnly(6, value);\n\t\t}\n\t\tpublic boolean isColIncludeReadOnly()\n\t\t{\n\t\t\treturn super.row.isReadOnly(6);\n\t\t}\n\t\tpublic void showColIncludeOpened()\n\t\t{\n\t\t\tsuper.row.showOpened(6);\n\t\t}\n\t\tpublic void setTooltipForColInclude(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(6, value);\n\t\t}\n\t\tpublic boolean getColInclude()\n\t\t{\n\t\t\treturn ((Boolean)super.row.get(6)).booleanValue();\n\t\t}\n\t\tpublic void setColInclude(boolean value)\n\t\t{\n\t\t\tsuper.row.set(6, new Boolean(value));\n\t\t}\n\t\tpublic void setCellColIncludeTooltip(String value)\n\t\t{\n\t\t\tsuper.row.setTooltip(6, value);\n\t\t}\n\t\tpublic ims.core.vo.PatientAllergyEDischargeVo getValue()\n\t\t{\n\t\t\treturn (ims.core.vo.PatientAllergyEDischargeVo)super.row.getValue();\n\t\t}\n\t\tpublic void setValue(ims.core.vo.PatientAllergyEDischargeVo value)\n\t\t{\n\t\t\tsuper.row.setValue(value);\n\t\t}\n\t}\n\tpublic static class grdAllergiesRowCollection extends GridRowCollectionBridge\n\t{\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\tprivate grdAllergiesRowCollection(GridRowCollection collection)\n\t\t{\n\t\t\tsuper(collection);\n\t\t}\n\t\tpublic grdAllergiesRow get(int index)\n\t\t{\n\t\t\treturn new grdAllergiesRow(super.collection.get(index));\n\t\t}\n\t\tpublic grdAllergiesRow newRow()\n\t\t{\n\t\t\treturn new grdAllergiesRow(super.collection.newRow());\n\t\t}\n\t\tpublic grdAllergiesRow newRow(boolean autoSelect)\n\t\t{\n\t\t\treturn new grdAllergiesRow(super.collection.newRow(autoSelect));\n\t\t}\n\t\tpublic grdAllergiesRow newRowAt(int index)\n\t\t{\n\t\t\treturn new grdAllergiesRow(super.collection.newRowAt(index));\n\t\t}\n\t\tpublic grdAllergiesRow newRowAt(int index, boolean autoSelect)\n\t\t{\n\t\t\treturn new grdAllergiesRow(super.collection.newRowAt(index, autoSelect));\n\t\t}\n\t}\n\tpublic static class grdAllergiesGrid extends GridBridge\n\t{\n\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\tprivate void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)\n\t\t{\n\t\t\tsuper.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);\n\t\t}\n\t\tprivate void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)\n\t\t{\n\t\t\tsuper.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);\n\t\t}\n\t\tprivate void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)\n\t\t{\n\t\t\tsuper.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);\n\t\t}\n\t\tpublic ims.core.vo.PatientAllergyEDischargeVoCollection getValues()\n\t\t{\n\t\t\tims.core.vo.PatientAllergyEDischargeVoCollection listOfValues = new ims.core.vo.PatientAllergyEDischargeVoCollection();\n\t\t\tfor(int x = 0; x < this.getRows().size(); x++)\n\t\t\t{\n\t\t\t\tlistOfValues.add(this.getRows().get(x).getValue());\n\t\t\t}\n\t\t\treturn listOfValues;\n\t\t}\n\t\tpublic ims.core.vo.PatientAllergyEDischargeVo getValue()\n\t\t{\n\t\t\treturn (ims.core.vo.PatientAllergyEDischargeVo)super.grid.getValue();\n\t\t}\n\t\tpublic void setValue(ims.core.vo.PatientAllergyEDischargeVo value)\n\t\t{\n\t\t\tsuper.grid.setValue(value);\n\t\t}\n\t\tpublic grdAllergiesRow getSelectedRow()\n\t\t{\n\t\t\treturn super.grid.getSelectedRow() == null ? null : new grdAllergiesRow(super.grid.getSelectedRow());\n\t\t}\n\t\tpublic int getSelectedRowIndex()\n\t\t{\n\t\t\treturn super.grid.getSelectedRowIndex();\n\t\t}\n\t\tpublic grdAllergiesRowCollection getRows()\n\t\t{\n\t\t\treturn new grdAllergiesRowCollection(super.grid.getRows());\n\t\t}\n\t\tpublic grdAllergiesRow getRowByValue(ims.core.vo.PatientAllergyEDischargeVo value)\n\t\t{\n\t\t\tGridRow row = super.grid.getRowByValue(value);\n\t\t\treturn row == null?null:new grdAllergiesRow(row);\n\t\t}\n\t\tpublic void setColDateHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(0, value);\n\t\t}\n\t\tpublic String getColDateHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(0);\n\t\t}\n\t\tpublic void setColAllergenDesHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(1, value);\n\t\t}\n\t\tpublic String getColAllergenDesHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(1);\n\t\t}\n\t\tpublic void setColReactionHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(2, value);\n\t\t}\n\t\tpublic String getColReactionHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(2);\n\t\t}\n\t\tpublic void setColSourceHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(3, value);\n\t\t}\n\t\tpublic String getColSourceHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(3);\n\t\t}\n\t\tpublic void setColIsActiveHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(4, value);\n\t\t}\n\t\tpublic String getColIsActiveHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(4);\n\t\t}\n\t\tpublic void setColAuditHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(5, value);\n\t\t}\n\t\tpublic String getColAuditHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(5);\n\t\t}\n\t\tpublic void setColIncludeHeaderTooltip(String value)\n\t\t{\n\t\t\tsuper.grid.setColumnHeaderTooltip(6, value);\n\t\t}\n\t\tpublic String getColIncludeHeaderTooltip()\n\t\t{\n\t\t\treturn super.grid.getColumnHeaderTooltip(6);\n\t\t}\n\t}\n\tprivate void validateContext(ims.framework.Context context)\n\t{\n\t\tif(context == null)\n\t\t\treturn;\n\t\tif(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))\n\t\t\tthrow new ims.framework.exceptions.CodingRuntimeException(\"The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.\");\n\t\tif(!context.isValidContextType(ims.core.vo.PatientShort.class))\n\t\t\tthrow new ims.framework.exceptions.CodingRuntimeException(\"The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.\");\n\t\tif(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))\n\t\t\tthrow new ims.framework.exceptions.CodingRuntimeException(\"The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.\");\n\t}\n\tprivate void validateMandatoryContext(Context context)\n\t{\n\t\tif(new ims.framework.ContextVariable(\"Core.CurrentCareContext\", \"_cvp_Core.CurrentCareContext\").getValueIsNull(context))\n\t\t\tthrow new ims.framework.exceptions.FormMandatoryContextMissingException(\"The required context data 'Core.CurrentCareContext' is not available.\");\n\t\tif(new ims.framework.ContextVariable(\"Core.PatientShort\", \"_cvp_Core.PatientShort\").getValueIsNull(context))\n\t\t\tthrow new ims.framework.exceptions.FormMandatoryContextMissingException(\"The required context data 'Core.PatientShort' is not available.\");\n\t\tif(new ims.framework.ContextVariable(\"Core.EpisodeofCareShort\", \"_cvp_Core.EpisodeofCareShort\").getValueIsNull(context))\n\t\t\tthrow new ims.framework.exceptions.FormMandatoryContextMissingException(\"The required context data 'Core.EpisodeofCareShort' is not available.\");\n\t}\n\tpublic boolean supportsRecordedInError()\n\t{\n\t\treturn false;\n\t}\n\tpublic ims.vo.ValueObject getRecordedInErrorVo()\n\t{\n\t\treturn null;\n\t}\n\tprotected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception\n\t{\n\t\tsetContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));\n\t}\n\tprotected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception\n\t{\n\t\tsetContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));\n\t}\n\tprotected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception\n\t{\n\t\tif(loader == null); // this is to avoid eclipse warning only.\n\t\tif(factory == null); // this is to avoid eclipse warning only.\n\t\tif(runtimeSize == null); // this is to avoid eclipse warning only.\n\t\tif(appForm == null)\n\t\t\tthrow new RuntimeException(\"Invalid application form\");\n\t\tif(startControlID == null)\n\t\t\tthrow new RuntimeException(\"Invalid startControlID\");\n\t\tif(control == null); // this is to avoid eclipse warning only.\n\t\tif(startTabIndex == null)\n\t\t\tthrow new RuntimeException(\"Invalid startTabIndex\");\n\t\tthis.context = context;\n\t\tthis.componentIdentifier = startControlID.toString();\n\t\tthis.formInfo = form.getFormInfo();\n\t\tthis.globalContext = new GlobalContext(context);\n\t\n\t\tif(skipContextValidation == null || !skipContextValidation.booleanValue())\n\t\t{\n\t\t\tvalidateContext(context);\n\t\t\tvalidateMandatoryContext(context);\n\t\t}\n\t\n\t\tsuper.setContext(form);\n\t\tims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);\n\t\tif(runtimeSize == null)\n\t\t\truntimeSize = designSize;\n\t\tform.setWidth(runtimeSize.getWidth());\n\t\tform.setHeight(runtimeSize.getHeight());\n\t\tsuper.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));\n\t\tsuper.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));\n\t\tsuper.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));\n\t\tsuper.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));\n\t\t// Context Menus\n\t\tcontextMenus = new ContextMenus();\n\t\tcontextMenus.Clinical.contextMenuEdischargeAlertsEtc = factory.createMenu(startControlID.intValue() + 1);\n\t\tcontextMenus.Clinical.contextMenuEdischargeAlertsEtcNewItem = factory.createMenuItem(startControlID.intValue() + 1, \"New Alert\", true, false, new Integer(102179), true, false);\n\t\tif(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4400001)))\n\t\t\tcontextMenus.Clinical.contextMenuEdischargeAlertsEtc.add(contextMenus.Clinical.contextMenuEdischargeAlertsEtcNewItem);\n\t\tcontextMenus.Clinical.contextMenuEdischargeAlertsEtcEditItem = factory.createMenuItem(startControlID.intValue() + 2, \"Edit Alert\", true, false, new Integer(102150), true, false);\n\t\tif(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4400002)))\n\t\t\tcontextMenus.Clinical.contextMenuEdischargeAlertsEtc.add(contextMenus.Clinical.contextMenuEdischargeAlertsEtcEditItem);\n\t\tform.registerMenu(contextMenus.Clinical.contextMenuEdischargeAlertsEtc);\n\t\tcontextMenus.Clinical.contextMenuEdischargeAllergiesEtc = factory.createMenu(startControlID.intValue() + 2);\n\t\tcontextMenus.Clinical.contextMenuEdischargeAllergiesEtcNewItem = factory.createMenuItem(startControlID.intValue() + 3, \"New Allergy\", true, false, new Integer(102179), true, false);\n\t\tif(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4390001)))\n\t\t\tcontextMenus.Clinical.contextMenuEdischargeAllergiesEtc.add(contextMenus.Clinical.contextMenuEdischargeAllergiesEtcNewItem);\n\t\tcontextMenus.Clinical.contextMenuEdischargeAllergiesEtcEditItem = factory.createMenuItem(startControlID.intValue() + 4, \"Edit Allergy\", true, false, new Integer(102150), true, false);\n\t\tif(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4390002)))\n\t\t\tcontextMenus.Clinical.contextMenuEdischargeAllergiesEtc.add(contextMenus.Clinical.contextMenuEdischargeAllergiesEtcEditItem);\n\t\tform.registerMenu(contextMenus.Clinical.contextMenuEdischargeAllergiesEtc);\n\t\t// Panel Controls\n\t\tRuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 328, 832, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);\n\t\tsuper.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,\"Alerts\", new Integer(1), \"\"}));\n\t\tRuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);\n\t\tsuper.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,\"Allergies\", new Integer(1), \"\"}));\n\t\t// Container Clasess\n\t\tRuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 24, 440, 808, 152, ims.framework.enumerations.ControlAnchoring.ALL);\n\t\tContainer m_ctnAlert = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});\n\t\taddControl(m_ctnAlert);\n\t\tctnAlertContainer ctnAlert = (ctnAlertContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnAlertContainer.class, m_ctnAlert, factory);\n\t\tims.framework.utils.SizeInfo m_ctnAlertDesignSize = new ims.framework.utils.SizeInfo(808, 152);\n\t\tims.framework.utils.SizeInfo m_ctnAlertRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper26.getWidth(), anchoringHelper26.getHeight());\n\t\tctnAlert.setContext(form, appForm, m_ctnAlert, loader, this.getImages(), contextMenus, startControlID, m_ctnAlertDesignSize, m_ctnAlertRuntimeSize, startTabIndex, skipContextValidation);\n\t\tsuper.addContainer(ctnAlert);\n\t\tRuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 24, 144, 816, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);\n\t\tContainer m_ctnAllergy = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null, new Boolean(false)});\n\t\taddControl(m_ctnAllergy);\n\t\tctnAllergyContainer ctnAllergy = (ctnAllergyContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnAllergyContainer.class, m_ctnAllergy, factory);\n\t\tims.framework.utils.SizeInfo m_ctnAllergyDesignSize = new ims.framework.utils.SizeInfo(816, 176);\n\t\tims.framework.utils.SizeInfo m_ctnAllergyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper27.getWidth(), anchoringHelper27.getHeight());\n\t\tctnAllergy.setContext(form, appForm, m_ctnAllergy, loader, this.getImages(), contextMenus, startControlID, m_ctnAllergyDesignSize, m_ctnAllergyRuntimeSize, startTabIndex, skipContextValidation);\n\t\tsuper.addContainer(ctnAllergy);\n\t\t// Button Controls\n\t\tRuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 674, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);\n\t\tsuper.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, \"Save\", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));\n\t\tRuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 754, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);\n\t\tsuper.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, \"Cancel\", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));\n\t\t// Grid Controls\n\t\tRuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 24, 360, 808, 76, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);\n\t\tGrid m_grdAlertsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuEdischargeAlertsEtc, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});\n\t\taddControl(m_grdAlertsTemp);\n\t\tgrdAlertsGrid grdAlerts = (grdAlertsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAlertsGrid.class, m_grdAlertsTemp);\n\t\tgrdAlerts.addStringColumn(\"Date\", 0, 0, 85, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);\n\t\tgrdAlerts.addStringColumn(\"Category\", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);\n\t\tgrdAlerts.addStringColumn(\"Alert\", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);\n\t\tgrdAlerts.addStringColumn(\"Source\", 0, 0, 170, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);\n\t\tgrdAlerts.addImageColumn(\" \", 1, 1, 40, false, 0);\n\t\tgrdAlerts.addImageColumn(\" \", 0, 0, 40, true, 0);\n\t\tgrdAlerts.addBoolColumn(\"Include\", 0, 0, -1, false, true, 0, true);\n\t\tsuper.addGrid(grdAlerts);\n\t\tRuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 24, 32, 808, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);\n\t\tGrid m_grdAllergiesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuEdischargeAllergiesEtc, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});\n\t\taddControl(m_grdAllergiesTemp);\n\t\tgrdAllergiesGrid grdAllergies = (grdAllergiesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAllergiesGrid.class, m_grdAllergiesTemp);\n\t\tgrdAllergies.addStringColumn(\"Date\", 0, 0, 85, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);\n\t\tgrdAllergies.addStringColumn(\"Allergen Description\", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);\n\t\tgrdAllergies.addStringColumn(\"Reaction\", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);\n\t\tgrdAllergies.addStringColumn(\"Source\", 0, 0, 170, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);\n\t\tgrdAllergies.addImageColumn(\"  \", 1, 1, 40, true, 0);\n\t\tgrdAllergies.addImageColumn(\" \", 0, 0, 40, true, 0);\n\t\tgrdAllergies.addBoolColumn(\"Include\", 0, 0, -1, false, true, 0, true);\n\t\tsuper.addGrid(grdAllergies);\n\t}\n\tpublic Forms getForms()\n\t{\n\t\treturn (Forms)super.getFormReferences();\n\t}\n\tpublic Images getImages()\n\t{\n\t\treturn (Images)super.getImageReferences();\n\t}\n\tpublic ctnAlertContainer ctnAlert()\n\t{\n\t\treturn (ctnAlertContainer)super.getContainer(0);\n\t}\n\tpublic ctnAllergyContainer ctnAllergy()\n\t{\n\t\treturn (ctnAllergyContainer)super.getContainer(1);\n\t}\n\tpublic Button btnSave()\n\t{\n\t\treturn (Button)super.getControl(4);\n\t}\n\tpublic Button btnCancel()\n\t{\n\t\treturn (Button)super.getControl(5);\n\t}\n\tpublic grdAlertsGrid grdAlerts()\n\t{\n\t\treturn (grdAlertsGrid)super.getGrid(0);\n\t}\n\tpublic grdAllergiesGrid grdAllergies()\n\t{\n\t\treturn (grdAllergiesGrid)super.getGrid(1);\n\t}\n\tpublic static class Forms implements java.io.Serializable\n\t{\n\t\tprivate static final long serialVersionUID = 1L;\n\t\tprotected final class LocalFormName extends FormName\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\t\tprivate LocalFormName(int name)\n\t\t\t{\n\t\t\t\tsuper(name);\n\t\t\t}\n\t\t}\n\t\tprivate Forms()\n\t\t{\n\t\t\tCore = new CoreForms();\n\t\t}\n\t\tpublic final class CoreForms implements java.io.Serializable\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tprivate CoreForms()\n\t\t\t{\n\t\t\t\tYesNoDialog = new LocalFormName(102107);\n\t\t\t}\n\t\t\tpublic final FormName YesNoDialog;\n\t\t}\n\t\tpublic CoreForms Core;\n\t}\n\tpublic static class Images implements java.io.Serializable\n\t{\n\t\tprivate static final long serialVersionUID = 1L;\n\t\tprivate final class ImageHelper extends ims.framework.utils.ImagePath\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\n\t\t\tprivate ImageHelper(int id, String path, Integer width, Integer height)\n\t\t\t{\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "length": 5167, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "dfbb21535cde376bfd1da7e9880da6a98efa9fdae69ded34"}
{"input": "", "context": "package org.whispersystems.util;\n/**\n * <p>Encodes and decodes to and from Base64 notation.</p>\n * <p>Homepage: <a href=\"http://iharder.net/base64\">http://iharder.net/base64</a>.</p>\n * \n * <p>Example:</p>\n * \n * <code>String encoded = Base64.encode( myByteArray );</code>\n * <br />\n * <code>byte[] myByteArray = Base64.decode( encoded );</code>\n *\n * <p>The <tt>options</tt> parameter, which appears in a few places, is used to pass \n * several pieces of information to the encoder. In the \"higher level\" methods such as \n * encodeBytes( bytes, options ) the options parameter can be used to indicate such \n * things as first gzipping the bytes before encoding them, not inserting linefeeds,\n * and encoding using the URL-safe and Ordered dialects.</p>\n *\n * <p>Note, according to <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">RFC3548</a>,\n * Section 2.1, implementations should not add line feeds unless explicitly told\n * to do so. I've got Base64 set to this behavior now, although earlier versions\n * broke lines by default.</p>\n *\n * <p>The constants defined in Base64 can be OR-ed together to combine options, so you \n * might make a call like this:</p>\n *\n * <code>String encoded = Base64.encodeBytes( mybytes, Base64.GZIP | Base64.DO_BREAK_LINES );</code>\n * <p>to compress the data before encoding it and then making the output have newline characters.</p>\n * <p>Also...</p>\n * <code>String encoded = Base64.encodeBytes( crazyString.getBytes() );</code>\n *\n *\n *\n * <p>\n * Change Log:\n * </p>\n * <ul>\n *  <li>v2.3.4 - Fixed bug when working with gzipped streams whereby flushing\n *   the Base64.OutputStream closed the Base64 encoding (by padding with equals\n *   signs) too soon. Also added an option to suppress the automatic decoding\n *   of gzipped streams. Also added experimental support for specifying a\n *   class loader when using the\n *   {@link #decodeToObject(java.lang.String, int, java.lang.ClassLoader)}\n *   method.</li>\n *  <li>v2.3.3 - Changed default char encoding to US-ASCII which reduces the internal Java\n *   footprint with its CharEncoders and so forth. Fixed some javadocs that were\n *   inconsistent. Removed imports and specified things like java.io.IOException\n *   explicitly inline.</li>\n *  <li>v2.3.2 - Reduced memory footprint! Finally refined the \"guessing\" of how big the\n *   final encoded data will be so that the code doesn't have to create two output\n *   arrays: an oversized initial one and then a final, exact-sized one. Big win\n *   when using the {@link #encodeBytesToBytes(byte[])} family of methods (and not\n *   using the gzip options which uses a different mechanism with streams and stuff).</li>\n *  <li>v2.3.1 - Added {@link #encodeBytesToBytes(byte[], int, int, int)} and some\n *   similar helper methods to be more efficient with memory by not returning a\n *   String but just a byte array.</li>\n *  <li>v2.3 - <strong>This is not a drop-in replacement!</strong> This is two years of comments\n *   and bug fixes queued up and finally executed. Thanks to everyone who sent\n *   me stuff, and I'm sorry I wasn't able to distribute your fixes to everyone else.\n *   Much bad coding was cleaned up including throwing exceptions where necessary \n *   instead of returning null values or something similar. Here are some changes\n *   that may affect you:\n *   <ul>\n *    <li><em>Does not break lines, by default.</em> This is to keep in compliance with\n *      <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">RFC3548</a>.</li>\n *    <li><em>Throws exceptions instead of returning null values.</em> Because some operations\n *      (especially those that may permit the GZIP option) use IO streams, there\n *      is a possiblity of an java.io.IOException being thrown. After some discussion and\n *      thought, I've changed the behavior of the methods to throw java.io.IOExceptions\n *      rather than return null if ever there's an error. I think this is more\n *      appropriate, though it will require some changes to your code. Sorry,\n *      it should have been done this way to begin with.</li>\n *    <li><em>Removed all references to System.out, System.err, and the like.</em>\n *      Shame on me. All I can say is sorry they were ever there.</li>\n *    <li><em>Throws NullPointerExceptions and IllegalArgumentExceptions</em> as needed\n *      such as when passed arrays are null or offsets are invalid.</li>\n *    <li>Cleaned up as much javadoc as I could to avoid any javadoc warnings.\n *      This was especially annoying before for people who were thorough in their\n *      own projects and then had gobs of javadoc warnings on this file.</li>\n *   </ul>\n *  <li>v2.2.1 - Fixed bug using URL_SAFE and ORDERED encodings. Fixed bug\n *   when using very small files (~&lt; 40 bytes).</li>\n *  <li>v2.2 - Added some helper methods for encoding/decoding directly from\n *   one file to the next. Also added a main() method to support command line\n *   encoding/decoding from one file to the next. Also added these Base64 dialects:\n *   <ol>\n *   <li>The default is RFC3548 format.</li>\n *   <li>Calling Base64.setFormat(Base64.BASE64_FORMAT.URLSAFE_FORMAT) generates\n *   URL and file name friendly format as described in Section 4 of RFC3548.\n *   http://www.faqs.org/rfcs/rfc3548.html</li>\n *   <li>Calling Base64.setFormat(Base64.BASE64_FORMAT.ORDERED_FORMAT) generates\n *   URL and file name friendly format that preserves lexical ordering as described\n *   in http://www.faqs.org/qa/rfcc-1940.html</li>\n *   </ol>\n *   Special thanks to Jim Kellerman at <a href=\"http://www.powerset.com/\">http://www.powerset.com/</a>\n *   for contributing the new Base64 dialects.\n *  </li>\n * \n *  <li>v2.1 - Cleaned up javadoc comments and unused variables and methods. Added\n *   some convenience methods for reading and writing to and from files.</li>\n *  <li>v2.0.2 - Now specifies UTF-8 encoding in places where the code fails on systems\n *   with other encodings (like EBCDIC).</li>\n *  <li>v2.0.1 - Fixed an error when decoding a single byte, that is, when the\n *   encoded data was a single byte.</li>\n *  <li>v2.0 - I got rid of methods that used booleans to set options. \n *   Now everything is more consolidated and cleaner. The code now detects\n *   when data that's being decoded is gzip-compressed and will decompress it\n *   automatically. Generally things are cleaner. You'll probably have to\n *   change some method calls that you were making to support the new\n *   options format (<tt>int</tt>s that you \"OR\" together).</li>\n *  <li>v1.5.1 - Fixed bug when decompressing and decoding to a             \n *   byte[] using <tt>decode( String s, boolean gzipCompressed )</tt>.      \n *   Added the ability to \"suspend\" encoding in the Output Stream so        \n *   you can turn on and off the encoding if you need to embed base64       \n *   data in an otherwise \"normal\" stream (like an XML file).</li>  \n *  <li>v1.5 - Output stream pases on flush() command but doesn't do anything itself.\n *      This helps when using GZIP streams.\n *      Added the ability to GZip-compress objects before encoding them.</li>\n *  <li>v1.4 - Added helper methods to read/write files.</li>\n *  <li>v1.3.6 - Fixed OutputStream.flush() so that 'position' is reset.</li>\n *  <li>v1.3.5 - Added flag to turn on and off line breaks. Fixed bug in input stream\n *      where last buffer being read, if not completely full, was not returned.</li>\n *  <li>v1.3.4 - Fixed when \"improperly padded stream\" error was thrown at the wrong time.</li>\n *  <li>v1.3.3 - Fixed I/O streams which were totally messed up.</li>\n * </ul>\n *\n * <p>\n * I am placing this code in the Public Domain. Do with it as you will.\n * This software comes with no guarantees or warranties but with\n * plenty of well-wishing instead!\n * Please visit <a href=\"http://iharder.net/base64\">http://iharder.net/base64</a>\n * periodically to check for updates or to contribute improvements.\n * </p>\n *\n * @author Robert Harder\n * @author rob@iharder.net\n * @version 2.3.3\n */\npublic class Base64\n{\n    \n/* ********  P U B L I C   F I E L D S  ******** */   \n    \n    \n    /** No options specified. Value is zero. */\n    public final static int NO_OPTIONS = 0;\n    \n    /** Specify encoding in first bit. Value is one. */\n    public final static int ENCODE = 1;\n    \n    \n    /** Specify decoding in first bit. Value is zero. */\n    public final static int DECODE = 0;\n    \n    /** Specify that data should be gzip-compressed in second bit. Value is two. */\n    public final static int GZIP = 2;\n    /** Specify that gzipped data should <em>not</em> be automatically gunzipped. */\n    public final static int DONT_GUNZIP = 4;\n    \n    \n    /** Do break lines when encoding. Value is 8. */\n    public final static int DO_BREAK_LINES = 8;\n\t\n    /** \n     * Encode using Base64-like encoding that is URL- and Filename-safe as described\n     * in Section 4 of RFC3548: \n     * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n     * It is important to note that data encoded this way is <em>not</em> officially valid Base64, \n     * or at the very least should not be called Base64 without also specifying that is\n     * was encoded using the URL- and Filename-safe dialect.\n     */\n     public final static int URL_SAFE = 16;\n     /**\n      * Encode using the special \"ordered\" dialect of Base64 described here:\n      * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n      */\n     public final static int ORDERED = 32;\n    \n    \n/* ********  P R I V A T E   F I E L D S  ******** */  \n    \n    \n    /** Maximum line length (76) of Base64 output. */\n    private final static int MAX_LINE_LENGTH = 76;\n    \n    \n    /** The equals sign (=) as a byte. */\n    private final static byte EQUALS_SIGN = (byte)'=';\n    \n    \n    /** The new line character (\\n) as a byte. */\n    private final static byte NEW_LINE = (byte)'\\n';\n    \n    \n    /** Preferred encoding. */\n    private final static String PREFERRED_ENCODING = \"US-ASCII\";\n    \n\t\n    private final static byte WHITE_SPACE_ENC = -5; // Indicates white space in encoding\n    private final static byte EQUALS_SIGN_ENC = -1; // Indicates equals sign in encoding\n\t\n\t\n/* ********  S T A N D A R D   B A S E 6 4   A L P H A B E T  ******** */\t\n    \n    /** The 64 valid Base64 values. */\n    /* Host platform me be something funny like EBCDIC, so we hardcode these values. */\n    private final static byte[] _STANDARD_ALPHABET = {\n        (byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F', (byte)'G',\n        (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N',\n        (byte)'O', (byte)'P', (byte)'Q', (byte)'R', (byte)'S', (byte)'T', (byte)'U', \n        (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z',\n        (byte)'a', (byte)'b', (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g',\n        (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m', (byte)'n',\n        (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u', \n        (byte)'v', (byte)'w', (byte)'x', (byte)'y', (byte)'z',\n        (byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5', \n        (byte)'6', (byte)'7', (byte)'8', (byte)'9', (byte)'+', (byte)'/'\n    };\n\t\n    \n    /** \n     * Translates a Base64 value to either its 6-bit reconstruction value\n     * or a negative number indicating some other meaning.\n     **/\n    private final static byte[] _STANDARD_DECODABET = {\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,                 // Decimal  0 -  8\n        -5,-5,                                      // Whitespace: Tab and Linefeed\n        -9,-9,                                      // Decimal 11 - 12\n        -5,                                         // Whitespace: Carriage Return\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 14 - 26\n        -9,-9,-9,-9,-9,                             // Decimal 27 - 31\n        -5,                                         // Whitespace: Space\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,              // Decimal 33 - 42\n        62,                                         // Plus sign at decimal 43\n        -9,-9,-9,                                   // Decimal 44 - 46\n        63,                                         // Slash at decimal 47\n        52,53,54,55,56,57,58,59,60,61,              // Numbers zero through nine\n        -9,-9,-9,                                   // Decimal 58 - 60\n        -1,                                         // Equals sign at decimal 61\n        -9,-9,-9,                                      // Decimal 62 - 64\n        0,1,2,3,4,5,6,7,8,9,10,11,12,13,            // Letters 'A' through 'N'\n        14,15,16,17,18,19,20,21,22,23,24,25,        // Letters 'O' through 'Z'\n        -9,-9,-9,-9,-9,-9,                          // Decimal 91 - 96\n        26,27,28,29,30,31,32,33,34,35,36,37,38,     // Letters 'a' through 'm'\n        39,40,41,42,43,44,45,46,47,48,49,50,51,     // Letters 'n' through 'z'\n        -9,-9,-9,-9                                 // Decimal 123 - 126\n        /*,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 127 - 139\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 140 - 152\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 153 - 165\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 166 - 178\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 179 - 191\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 192 - 204\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 205 - 217\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 218 - 230\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 231 - 243\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9         // Decimal 244 - 255 */\n    };\n\t\n\t\n/* ********  U R L   S A F E   B A S E 6 4   A L P H A B E T  ******** */\n\t\n    /**\n     * Used in the URL- and Filename-safe dialect described in Section 4 of RFC3548: \n     * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n     * Notice that the last two bytes become \"hyphen\" and \"underscore\" instead of \"plus\" and \"slash.\"\n     */\n    private final static byte[] _URL_SAFE_ALPHABET = {\n      (byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F', (byte)'G',\n      (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N',\n      (byte)'O', (byte)'P', (byte)'Q', (byte)'R', (byte)'S', (byte)'T', (byte)'U', \n      (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z',\n      (byte)'a', (byte)'b', (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g',\n      (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m', (byte)'n',\n      (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u', \n      (byte)'v', (byte)'w', (byte)'x', (byte)'y', (byte)'z',\n      (byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5', \n      (byte)'6', (byte)'7', (byte)'8', (byte)'9', (byte)'-', (byte)'_'\n    };\n\t\n    /**\n     * Used in decoding URL- and Filename-safe dialects of Base64.\n     */\n    private final static byte[] _URL_SAFE_DECODABET = {\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,                 // Decimal  0 -  8\n      -5,-5,                                      // Whitespace: Tab and Linefeed\n      -9,-9,                                      // Decimal 11 - 12\n      -5,                                         // Whitespace: Carriage Return\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 14 - 26\n      -9,-9,-9,-9,-9,                             // Decimal 27 - 31\n      -5,                                         // Whitespace: Space\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,              // Decimal 33 - 42\n      -9,                                         // Plus sign at decimal 43\n      -9,                                         // Decimal 44\n      62,                                         // Minus sign at decimal 45\n      -9,                                         // Decimal 46\n      -9,                                         // Slash at decimal 47\n      52,53,54,55,56,57,58,59,60,61,              // Numbers zero through nine\n      -9,-9,-9,                                   // Decimal 58 - 60\n      -1,                                         // Equals sign at decimal 61\n      -9,-9,-9,                                   // Decimal 62 - 64\n      0,1,2,3,4,5,6,7,8,9,10,11,12,13,            // Letters 'A' through 'N'\n      14,15,16,17,18,19,20,21,22,23,24,25,        // Letters 'O' through 'Z'\n      -9,-9,-9,-9,                                // Decimal 91 - 94\n      63,                                         // Underscore at decimal 95\n      -9,                                         // Decimal 96\n      26,27,28,29,30,31,32,33,34,35,36,37,38,     // Letters 'a' through 'm'\n      39,40,41,42,43,44,45,46,47,48,49,50,51,     // Letters 'n' through 'z'\n      -9,-9,-9,-9                                 // Decimal 123 - 126\n      /*,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 127 - 139\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 140 - 152\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 153 - 165\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 166 - 178\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 179 - 191\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 192 - 204\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 205 - 217\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 218 - 230\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 231 - 243\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9         // Decimal 244 - 255 */\n    };\n/* ********  O R D E R E D   B A S E 6 4   A L P H A B E T  ******** */\n    /**\n     * I don't get the point of this technique, but someone requested it,\n     * and it is described here:\n     * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n     */\n    private final static byte[] _ORDERED_ALPHABET = {\n      (byte)'-',\n      (byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4',\n      (byte)'5', (byte)'6', (byte)'7', (byte)'8', (byte)'9',\n      (byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F', (byte)'G',\n      (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N',\n      (byte)'O', (byte)'P', (byte)'Q', (byte)'R', (byte)'S', (byte)'T', (byte)'U',\n      (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z',\n      (byte)'_',\n      (byte)'a', (byte)'b', (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g',\n      (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m', (byte)'n',\n      (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u',\n      (byte)'v', (byte)'w', (byte)'x', (byte)'y', (byte)'z'\n    };\n\t\n    /**\n     * Used in decoding the \"ordered\" dialect of Base64.\n     */\n    private final static byte[] _ORDERED_DECODABET = {\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,                 // Decimal  0 -  8\n      -5,-5,                                      // Whitespace: Tab and Linefeed\n      -9,-9,                                      // Decimal 11 - 12\n      -5,                                         // Whitespace: Carriage Return\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 14 - 26\n      -9,-9,-9,-9,-9,                             // Decimal 27 - 31\n      -5,                                         // Whitespace: Space\n      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,              // Decimal 33 - 42\n      -9,                                         // Plus sign at decimal 43\n      -9,                                         // Decimal 44\n      0,                                          // Minus sign at decimal 45\n      -9,                                         // Decimal 46\n      -9,                                         // Slash at decimal 47\n      1,2,3,4,5,6,7,8,9,10,                       // Numbers zero through nine\n      -9,-9,-9,                                   // Decimal 58 - 60\n      -1,                                         // Equals sign at decimal 61\n      -9,-9,-9,                                   // Decimal 62 - 64\n      11,12,13,14,15,16,17,18,19,20,21,22,23,     // Letters 'A' through 'M'\n      24,25,26,27,28,29,30,31,32,33,34,35,36,     // Letters 'N' through 'Z'\n      -9,-9,-9,-9,                                // Decimal 91 - 94\n      37,                                         // Underscore at decimal 95\n      -9,                                         // Decimal 96\n      38,39,40,41,42,43,44,45,46,47,48,49,50,     // Letters 'a' through 'm'\n      51,52,53,54,55,56,57,58,59,60,61,62,63,     // Letters 'n' through 'z'\n      -9,-9,-9,-9                                 // Decimal 123 - 126\n      /*,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 127 - 139\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 140 - 152\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 153 - 165\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 166 - 178\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 179 - 191\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 192 - 204\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 205 - 217\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 218 - 230\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 231 - 243\n        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9         // Decimal 244 - 255 */\n    };\n\t\n/* ********  D E T E R M I N E   W H I C H   A L H A B E T  ******** */\n    /**\n     * Returns one of the _SOMETHING_ALPHABET byte arrays depending on\n     * the options specified.\n     * It's possible, though silly, to specify ORDERED <b>and</b> URLSAFE\n     * in which case one of them will be picked, though there is\n     * no guarantee as to which one will be picked.\n     */\n    private final static byte[] getAlphabet( int options ) {\n        if ((options & URL_SAFE) == URL_SAFE) {\n            return _URL_SAFE_ALPHABET;\n        } else if ((options & ORDERED) == ORDERED) {\n            return _ORDERED_ALPHABET;\n        } else {\n            return _STANDARD_ALPHABET;\n        }\n    }\t// end getAlphabet\n    /**\n     * Returns one of the _SOMETHING_DECODABET byte arrays depending on\n     * the options specified.\n     * It's possible, though silly, to specify ORDERED and URL_SAFE\n     * in which case one of them will be picked, though there is\n     * no guarantee as to which one will be picked.\n     */\n    private final static byte[] getDecodabet( int options ) {\n        if( (options & URL_SAFE) == URL_SAFE) {\n            return _URL_SAFE_DECODABET;\n        } else if ((options & ORDERED) == ORDERED) {\n            return _ORDERED_DECODABET;\n        } else {\n            return _STANDARD_DECODABET;\n        }\n    }\t// end getAlphabet\n    \n    /** Defeats instantiation. */\n    private Base64(){}\n    \n    \n    public static int getEncodedLengthWithoutPadding(int unencodedLength) {\n    \tint remainderBytes = unencodedLength % 3;\n    \tint paddingBytes   = 0;\n    \t\n    \tif (remainderBytes != 0)\n    \t\tpaddingBytes = 3 - remainderBytes;\n    \t\n    \treturn (((int)((unencodedLength+2)/3))*4) - paddingBytes;\n    }\n    \n    public static int getEncodedBytesForTarget(int targetSize) {\n    \treturn ((int)(targetSize * 3)) / 4;\n    }\n    \n    \n/* ********  E N C O D I N G   M E T H O D S  ******** */    \n    \n    \n    /**\n     * Encodes up to the first three bytes of array <var>threeBytes</var>\n     * and returns a four-byte array in Base64 notation.\n     * The actual number of significant bytes in your array is\n     * given by <var>numSigBytes</var>.\n     * The array <var>threeBytes</var> needs only be as big as\n     * <var>numSigBytes</var>.\n     * Code can reuse a byte array by passing a four-byte array as <var>b4</var>.\n     *\n     * @param b4 A reusable byte array to reduce array instantiation\n     * @param threeBytes the array to convert\n     * @param numSigBytes the number of significant bytes in your array\n     * @return four byte array in Base64 notation.\n     * @since 1.5.1\n     */\n    private static byte[] encode3to4( byte[] b4, byte[] threeBytes, int numSigBytes, int options ) {\n        encode3to4( threeBytes, 0, numSigBytes, b4, 0, options );\n        return b4;\n    }   // end encode3to4\n    \n    /**\n     * <p>Encodes up to three bytes of the array <var>source</var>\n     * and writes the resulting four Base64 bytes to <var>destination</var>.\n     * The source and destination arrays can be manipulated\n     * anywhere along their length by specifying \n     * <var>srcOffset</var> and <var>destOffset</var>.\n     * This method does not check to make sure your arrays\n     * are large enough to accomodate <var>srcOffset</var> + 3 for\n     * the <var>source</var> array or <var>destOffset</var> + 4 for\n     * the <var>destination</var> array.\n     * The actual number of significant bytes in your array is\n     * given by <var>numSigBytes</var>.</p>\n\t * <p>This is the lowest level of the encoding methods with\n\t * all possible parameters.</p>\n     *\n     * @param source the array to convert\n     * @param srcOffset the index where conversion begins\n     * @param numSigBytes the number of significant bytes in your array\n     * @param destination the array to hold the conversion\n     * @param destOffset the index where output will be put\n     * @return the <var>destination</var> array\n     * @since 1.3\n     */\n    private static byte[] encode3to4( \n    byte[] source, int srcOffset, int numSigBytes,\n    byte[] destination, int destOffset, int options ) {\n        \n\tbyte[] ALPHABET = getAlphabet( options ); \n\t\n        //           1         2         3  \n        // 01234567890123456789012345678901 Bit position\n        // --------000000001111111122222222 Array position from threeBytes\n        // --------|    ||    ||    ||    | Six bit groups to index ALPHABET\n        //          >>18  >>12  >> 6  >> 0  Right shift necessary\n        //                0x3f  0x3f  0x3f  Additional AND\n        \n        // Create buffer with zero-padding if there are only one or two\n        // significant bytes passed in the array.\n        // We have to shift left 24 in order to flush out the 1's that appear\n        // when Java treats a value as negative that is cast from a byte to an int.\n        int inBuff =   ( numSigBytes > 0 ? ((source[ srcOffset     ] << 24) >>>  8) : 0 )\n                     | ( numSigBytes > 1 ? ((source[ srcOffset + 1 ] << 24) >>> 16) : 0 )\n                     | ( numSigBytes > 2 ? ((source[ srcOffset + 2 ] << 24) >>> 24) : 0 );\n        switch( numSigBytes )\n        {\n            case 3:\n                destination[ destOffset     ] = ALPHABET[ (inBuff >>> 18)        ];\n                destination[ destOffset + 1 ] = ALPHABET[ (inBuff >>> 12) & 0x3f ];\n                destination[ destOffset + 2 ] = ALPHABET[ (inBuff >>>  6) & 0x3f ];\n                destination[ destOffset + 3 ] = ALPHABET[ (inBuff       ) & 0x3f ];\n                return destination;\n                \n            case 2:\n                destination[ destOffset     ] = ALPHABET[ (inBuff >>> 18)        ];\n                destination[ destOffset + 1 ] = ALPHABET[ (inBuff >>> 12) & 0x3f ];\n                destination[ destOffset + 2 ] = ALPHABET[ (inBuff >>>  6) & 0x3f ];\n                destination[ destOffset + 3 ] = EQUALS_SIGN;\n                return destination;\n                \n            case 1:\n                destination[ destOffset     ] = ALPHABET[ (inBuff >>> 18)        ];\n                destination[ destOffset + 1 ] = ALPHABET[ (inBuff >>> 12) & 0x3f ];\n                destination[ destOffset + 2 ] = EQUALS_SIGN;\n                destination[ destOffset + 3 ] = EQUALS_SIGN;\n                return destination;\n                \n            default:\n                return destination;\n        }   // end switch\n    }   // end encode3to4\n    /**\n     * Performs Base64 encoding on the <code>raw</code> ByteBuffer,\n     * writing it to the <code>encoded</code> ByteBuffer.\n     * This is an experimental feature. Currently it does not\n     * pass along any options (such as {@link #DO_BREAK_LINES}\n     * or {@link #GZIP}.\n     *\n     * @param raw input buffer\n     * @param encoded output buffer\n     * @since 2.3\n     */\n    public static void encode( java.nio.ByteBuffer raw, java.nio.ByteBuffer encoded ){\n        byte[] raw3 = new byte[3];\n        byte[] enc4 = new byte[4];\n        while( raw.hasRemaining() ){\n            int rem = Math.min(3,raw.remaining());\n            raw.get(raw3,0,rem);\n            Base64.encode3to4(enc4, raw3, rem, Base64.NO_OPTIONS );\n            encoded.put(enc4);\n        }   // end input remaining\n    }\n    /**\n     * Performs Base64 encoding on the <code>raw</code> ByteBuffer,\n     * writing it to the <code>encoded</code> CharBuffer.\n     * This is an experimental feature. Currently it does not\n     * pass along any options (such as {@link #DO_BREAK_LINES}\n     * or {@link #GZIP}.\n     *\n     * @param raw input buffer\n     * @param encoded output buffer\n     * @since 2.3\n     */\n    public static void encode( java.nio.ByteBuffer raw, java.nio.CharBuffer encoded ){\n        byte[] raw3 = new byte[3];\n        byte[] enc4 = new byte[4];\n        while( raw.hasRemaining() ){\n            int rem = Math.min(3,raw.remaining());\n            raw.get(raw3,0,rem);\n            Base64.encode3to4(enc4, raw3, rem, Base64.NO_OPTIONS );\n            for( int i = 0; i < 4; i++ ){\n                encoded.put( (char)(enc4[i] & 0xFF) );\n            }\n        }   // end input remaining\n    }\n    \n    \n    /**\n     * Serializes an object and returns the Base64-encoded\n     * version of that serialized object.  \n     *  \n     * <p>As of v 2.3, if the object\n     * cannot be serialized or there is another error,\n     * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n     * In earlier versions, it just returned a null value, but\n     * in retrospect that's a pretty poor way to handle it.</p>\n     * \n     * The object is not GZip-compressed before being encoded.\n     *\n     * @param serializableObject The object to encode\n     * @return The Base64-encoded object\n     * @throws java.io.IOException if there is an error\n     * @throws NullPointerException if serializedObject is null\n     * @since 1.4\n     */\n    public static String encodeObject( java.io.Serializable serializableObject )\n    throws java.io.IOException {\n        return encodeObject( serializableObject, NO_OPTIONS );\n    }   // end encodeObject\n    \n    /**\n     * Serializes an object and returns the Base64-encoded\n     * version of that serialized object.\n     *  \n     * <p>As of v 2.3, if the object\n     * cannot be serialized or there is another error,\n     * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n     * In earlier versions, it just returned a null value, but\n     * in retrospect that's a pretty poor way to handle it.</p>\n     * \n     * The object is not GZip-compressed before being encoded.\n     * <p>\n     * Example options:<pre>\n     *   GZIP: gzip-compresses object before encoding it.\n     *   DO_BREAK_LINES: break lines at 76 characters\n     * </pre>\n     * <p>\n     * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n     * <p>\n     * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n     *\n     * @param serializableObject The object to encode\n     * @param options Specified options\n     * @return The Base64-encoded object\n     * @see Base64#GZIP\n     * @see Base64#DO_BREAK_LINES\n     * @throws java.io.IOException if there is an error\n     * @since 2.0\n     */\n    public static String encodeObject( java.io.Serializable serializableObject, int options )\n    throws java.io.IOException {\n        if( serializableObject == null ){\n            throw new NullPointerException( \"Cannot serialize a null object.\" );\n        }   // end if: null\n        \n        // Streams\n        java.io.ByteArrayOutputStream  baos  = null; \n        java.io.OutputStream           b64os = null;\n        java.util.zip.GZIPOutputStream gzos  = null;\n        java.io.ObjectOutputStream     oos   = null;\n        \n        \n        try {\n            // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n            baos  = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream( baos, ENCODE | options );\n            if( (options & GZIP) != 0 ){\n                // Gzip\n                gzos = new java.util.zip.GZIPOutputStream(b64os);\n                oos = new java.io.ObjectOutputStream( gzos );\n            } else {\n                // Not gzipped\n                oos = new java.io.ObjectOutputStream( b64os );\n            }\n            oos.writeObject( serializableObject );\n        }   // end try\n        catch( java.io.IOException e ) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        }   // end catch\n        finally {\n            try{ oos.close();   } catch( Exception e ){}\n            try{ gzos.close();  } catch( Exception e ){}\n            try{ b64os.close(); } catch( Exception e ){}\n            try{ baos.close();  } catch( Exception e ){}\n        }   // end finally\n        \n        // Return value according to relevant encoding.\n        try {\n            return new String( baos.toByteArray(), PREFERRED_ENCODING );\n        }   // end try\n        catch (java.io.UnsupportedEncodingException uue){\n            // Fall back to some Java default\n            return new String( baos.toByteArray() );\n        }   // end catch\n        \n    }   // end encode\n    \n    \n    /**\n     * Encodes a byte array into Base64 notation.\n     * Does not GZip-compress data.\n     *  \n     * @param source The data to convert\n     * @return The data in Base64-encoded form\n     * @throws NullPointerException if source array is null\n     * @since 1.4\n     */\n    public static String encodeBytes( byte[] source ) {\n        // Since we're not going to have the GZIP encoding turned on,\n        // we're not going to have an java.io.IOException thrown, so\n        // we should not force the user to have to catch it.\n        String encoded = null;\n        try {\n            encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n        } catch (java.io.IOException ex) {\n            assert false : ex.getMessage();\n        }   // end catch\n        assert encoded != null;\n        return encoded;\n    }   // end encodeBytes\n    \n    \n    public static String encodeBytesWithoutPadding(byte[] source, int offset, int length) {\n    \tString encoded = null;\n \n    \ttry {\n    \t\tencoded = encodeBytes(source, offset, length, NO_OPTIONS);\n    \t} catch (java.io.IOException ex) {\n    \t\tassert false : ex.getMessage();\n    \t}\n    \t\n    \tassert encoded != null;\n    \t\n    \tif      (encoded.charAt(encoded.length()-2) == '=') return encoded.substring(0, encoded.length()-2);\n    \telse if (encoded.charAt(encoded.length()-1) == '=') return encoded.substring(0, encoded.length()-1);\n    \telse                                                return encoded;\n    \t\n    }\n    \n    public static String encodeBytesWithoutPadding(byte[] source) {\n    \treturn encodeBytesWithoutPadding(source, 0, source.length);\n    }\n    /**\n     * Encodes a byte array into Base64 notation.\n     * <p>\n     * Example options:<pre>\n     *   GZIP: gzip-compresses object before encoding it.\n     *   DO_BREAK_LINES: break lines at 76 characters\n     *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n     * </pre>\n     * <p>\n     * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n     * <p>\n     * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n     *\n     *  \n     * <p>As of v 2.3, if there is an error with the GZIP stream,\n     * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n     * In earlier versions, it just returned a null value, but\n     * in retrospect that's a pretty poor way to handle it.</p>\n     * \n     *\n     * @param source The data to convert\n     * @param options Specified options\n     * @return The Base64-encoded data as a String\n     * @see Base64#GZIP\n     * @see Base64#DO_BREAK_LINES\n     * @throws java.io.IOException if there is an error\n     * @throws NullPointerException if source array is null\n     * @since 2.0\n     */\n    public static String encodeBytes( byte[] source, int options ) throws java.io.IOException {\n        return encodeBytes( source, 0, source.length, options );\n    }   // end encodeBytes\n    \n    \n    /**\n     * Encodes a byte array into Base64 notation.\n     * Does not GZip-compress data.\n     *  \n     * <p>As of v 2.3, if there is an error,\n     * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n     * In earlier versions, it just returned a null value, but\n     * in retrospect that's a pretty poor way to handle it.</p>\n     * \n     *\n     * @param source The data to convert\n     * @param off Offset in array where conversion should begin\n     * @param len Length of data to convert\n     * @return The Base64-encoded data as a String\n     * @throws NullPointerException if source array is null\n     * @throws IllegalArgumentException if source array, offset, or length are invalid\n     * @since 1.4\n     */\n    public static String encodeBytes( byte[] source, int off, int len ) {\n        // Since we're not going to have the GZIP encoding turned on,\n        // we're not going to have an java.io.IOException thrown, so\n        // we should not force the user to have to catch it.\n        String encoded = null;\n        try {\n            encoded = encodeBytes( source, off, len, NO_OPTIONS );\n        } catch (java.io.IOException ex) {\n            assert false : ex.getMessage();\n        }   // end catch\n        assert encoded != null;\n        return encoded;\n    }   // end encodeBytes\n    \n    \n    /**\n     * Encodes a byte array into Base64 notation.\n     * <p>\n     * Example options:<pre>\n     *   GZIP: gzip-compresses object before encoding it.\n     *   DO_BREAK_LINES: break lines at 76 characters\n     *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n     * </pre>\n     * <p>\n     * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n     * <p>\n     * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n     *\n     *  \n     * <p>As of v 2.3, if there is an error with the GZIP stream,\n     * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n     * In earlier versions, it just returned a null value, but\n     * in retrospect that's a pretty poor way to handle it.</p>\n     * \n     *\n     * @param source The data to convert\n     * @param off Offset in array where conversion should begin\n     * @param len Length of data to convert\n     * @param options Specified options\n     * @return The Base64-encoded data as a String\n     * @see Base64#GZIP\n     * @see Base64#DO_BREAK_LINES\n     * @throws java.io.IOException if there is an error\n     * @throws NullPointerException if source array is null\n     * @throws IllegalArgumentException if source array, offset, or length are invalid\n     * @since 2.0\n     */\n    public static String encodeBytes( byte[] source, int off, int len, int options ) throws java.io.IOException {\n        byte[] encoded = encodeBytesToBytes( source, off, len, options );\n        // Return value according to relevant encoding.\n        try {\n            return new String( encoded, PREFERRED_ENCODING );\n        }   // end try\n        catch (java.io.UnsupportedEncodingException uue) {\n            return new String( encoded );\n        }   // end catch\n        \n    }   // end encodeBytes\n    /**\n     * Similar to {@link #encodeBytes(byte[])} but returns\n     * a byte array instead of instantiating a String. This is more efficient\n     * if you're working with I/O streams and have large data sets to encode.\n     *\n     *\n     * @param source The data to convert\n     * @return The Base64-encoded data as a byte[] (of ASCII characters)\n     * @throws NullPointerException if source array is null\n     * @since 2.3.1\n     */\n    public static byte[] encodeBytesToBytes( byte[] source ) {\n        byte[] encoded = null;\n        try {\n            encoded = encodeBytesToBytes( source, 0, source.length, Base64.NO_OPTIONS );\n        } catch( java.io.IOException ex ) {\n            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n        }\n        return encoded;\n    }\n    /**\n     * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n     * a byte array instead of instantiating a String. This is more efficient\n     * if you're working with I/O streams and have large data sets to encode.\n     *\n     *\n     * @param source The data to convert\n     * @param off Offset in array where conversion should begin\n     * @param len Length of data to convert\n     * @param options Specified options\n     * @return The Base64-encoded data as a String\n     * @see Base64#GZIP\n     * @see Base64#DO_BREAK_LINES\n     * @throws java.io.IOException if there is an error\n     * @throws NullPointerException if source array is null\n     * @throws IllegalArgumentException if source array, offset, or length are invalid\n     * @since 2.3.1\n     */\n    public static byte[] encodeBytesToBytes( byte[] source, int off, int len, int options ) throws java.io.IOException {\n", "answers": ["        if( source == null ){"], "length": 5175, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "a9e464837370ca19c97405285a0c2d75e5a33c11a1aafc12"}
{"input": "", "context": "//\n// System.Data.SqlClient.SqlConnection.cs\n//\n// Authors:\n//   Rodrigo Moya (rodrigo@ximian.com)\n//   Daniel Morgan (danmorg@sc.rr.com)\n//   Tim Coleman (tim@timcoleman.com)\n//   Phillip Jerkins (Phillip.Jerkins@morgankeegan.com)\n//   Diego Caravana (diego@toth.it)\n//\n// Copyright (C) Ximian, Inc 2002\n// Copyright (C) Daniel Morgan 2002, 2003\n// Copyright (C) Tim Coleman, 2002, 2003\n// Copyright (C) Phillip Jerkins, 2003\n//\n//\n// Copyright (C) 2004 Novell, Inc (http://www.novell.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nusing Mono.Data.Tds;\nusing Mono.Data.Tds.Protocol;\nusing System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Data.Common;\n#if !MOBILE\nusing System.EnterpriseServices;\n#endif\nusing System.Globalization;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Xml;\n#if NET_2_0\nusing System.Collections.Generic;\n#endif\nnamespace System.Data.SqlClient\n{\n\t[DefaultEvent (\"InfoMessage\")]\n#if NET_2_0\n\tpublic sealed class SqlConnection : DbConnection, IDbConnection, ICloneable\n#else\n\tpublic sealed class SqlConnection : Component, IDbConnection, ICloneable\n#endif // NET_2_0\n\t{\n\t\t#region Fields\n\t\tbool disposed;\n\t\t// The set of SQL connection pools\n\t\tstatic TdsConnectionPoolManager sqlConnectionPools = new TdsConnectionPoolManager (TdsVersion.tds80);\n#if NET_2_0\n\t\tconst int DEFAULT_PACKETSIZE = 8000;\n\t\tconst int MAX_PACKETSIZE = 32768;\n#else\n\t\tconst int DEFAULT_PACKETSIZE = 8192;\n\t\tconst int MAX_PACKETSIZE = 32767;\n#endif\n\t\tconst int MIN_PACKETSIZE = 512;\n\t\tconst int DEFAULT_CONNECTIONTIMEOUT = 15;\n\t\tconst int DEFAULT_CONNECTIONLIFETIME = 0;\n\t\tconst int DEFAULT_MAXPOOLSIZE = 100;\n\t\tconst int MIN_MAXPOOLSIZE = 1;\n\t\tconst int DEFAULT_MINPOOLSIZE = 0;\n\t\tconst int DEFAULT_PORT = 1433;\n\t\t// The current connection pool\n\t\tTdsConnectionPool pool;\n\t\t// The connection string that identifies this connection\n\t\tstring connectionString;\n\t\t// The transaction object for the current transaction\n\t\tSqlTransaction transaction;\n\t\t// Connection parameters\n\t\t\n\t\tTdsConnectionParameters parms;\n\t\tbool connectionReset;\n\t\tint connectionLifeTime;\n\t\tbool pooling;\n\t\tstring dataSource;\n\t\tint connectionTimeout;\n\t\tint minPoolSize;\n\t\tint maxPoolSize;\n\t\tint packetSize;\n\t\tint port;\n\t\tbool fireInfoMessageEventOnUserErrors;\n\t\tbool statisticsEnabled;\n\t\t\n\t\t// The current state\n\t\tConnectionState state = ConnectionState.Closed;\n\t\tSqlDataReader dataReader;\n\t\tXmlReader xmlReader;\n\t\t// The TDS object\n\t\tTds tds;\n\t\t#endregion // Fields\n\t\t#region Constructors\n\t\tpublic SqlConnection () : this (null)\n\t\t{\n\t\t}\n\t\n\t\tpublic SqlConnection (string connectionString)\n\t\t{\n\t\t\tConnectionString = connectionString;\n\t\t}\n\t\t#endregion // Constructors\n\t\t#region Properties\n\t\t[DefaultValue (\"\")]\n\t\t[EditorAttribute (\"Microsoft.VSDesigner.Data.SQL.Design.SqlConnectionStringEditor, \"+ Consts.AssemblyMicrosoft_VSDesigner, \"System.Drawing.Design.UITypeEditor, \"+ Consts.AssemblySystem_Drawing )]\n\t\t[RecommendedAsConfigurable (true)]\n\t\t[RefreshProperties (RefreshProperties.All)]\n\t\tpublic override string ConnectionString {\n\t\t\tget {\n\t\t\t\tif (connectionString == null)\n\t\t\t\t\treturn string.Empty;\n\t\t\t\treturn connectionString;\n\t\t\t}\n\t\t\t[MonoTODO(\"persist security info, encrypt, enlist keyword not implemented\")]\n\t\t\tset {\n\t\t\t\tif (state == ConnectionState.Open)\n\t\t\t\t\tthrow new InvalidOperationException (\"Not Allowed to change ConnectionString property while Connection state is OPEN\");\n\t\t\t\tSetConnectionString (value);\n\t\t\t}\n\t\t}\n\t\n#if !NET_2_0\n\t\t[DataSysDescription (\"Current connection timeout value, 'Connect Timeout=X' in the ConnectionString.\")]\t\n#endif\n\t\t[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]\n\t\tpublic\n#if NET_2_0\n\t\toverride\n#endif // NET_2_0\n\t\tint ConnectionTimeout {\n\t\t\tget { return connectionTimeout; }\n\t\t}\n#if !NET_2_0\n\t\t[DataSysDescription (\"Current SQL Server database, 'Initial Catalog=X' in the connection string.\")]\n#endif\n\t\t[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]\n\t\tpublic\n#if NET_2_0\n\t\toverride\n#endif // NET_2_0\n\t\tstring Database {\n\t\t\tget {\n\t\t\t\tif (State == ConnectionState.Open)\n\t\t\t\t\treturn tds.Database; \n\t\t\t\treturn parms.Database ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tinternal SqlDataReader DataReader {\n\t\t\tget { return dataReader; }\n\t\t\tset { dataReader = value; }\n\t\t}\n#if !NET_2_0\n\t\t[DataSysDescription (\"Current SqlServer that the connection is opened to, 'Data Source=X' in the connection string. \")]\n#else\n\t\t[Browsable(true)]\n#endif\n\t\t[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]\n\t\tpublic\n#if NET_2_0\n\t\toverride\n#endif // NET_2_0\n\t\tstring DataSource {\n\t\t\tget { return dataSource; }\n\t\t}\n#if !NET_2_0\n\t\t[DataSysDescription (\"Network packet size, 'Packet Size=x' in the connection string.\")]\n#endif\n\t\t[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]\n\t\tpublic int PacketSize {\n\t\t\tget {\n\t\t\t\tif (State == ConnectionState.Open)\n\t\t\t\t\treturn ((Tds) tds).PacketSize;\n\t\t\t\treturn packetSize;\n\t\t\t}\n\t\t}\n\t\t[Browsable (false)]\n#if !NET_2_0\n\t\t[DataSysDescription (\"Version of the SQL Server accessed by the SqlConnection.\")]\n#endif\n\t\t[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]\n\t\tpublic\n#if NET_2_0\n\t\toverride\n#endif // NET_2_0\n\t\tstring ServerVersion {\n\t\t\tget {\n\t\t\t\tif (state == ConnectionState.Closed)\n\t\t\t\t\tthrow ExceptionHelper.ConnectionClosed ();\n\t\t\t\telse\n\t\t\t\t\treturn tds.ServerVersion; \n\t\t\t}\n\t\t}\n\t\t[Browsable (false)]\n#if !NET_2_0\n\t\t[DataSysDescription (\"The ConnectionState indicating whether the connection is open or closed.\")]\n#endif\n\t\t[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]\n\t\tpublic\n#if NET_2_0\n\t\toverride\n#endif // NET_2_0\n\t\tConnectionState State {\n\t\t\tget { return state; }\n\t\t}\n\t\tinternal Tds Tds {\n\t\t\tget { return tds; }\n\t\t}\n\t\tinternal SqlTransaction Transaction {\n\t\t\tget { return transaction; }\n\t\t\tset { transaction = value; }\n\t\t}\n#if !NET_2_0\n\t\t[DataSysDescription (\"Workstation Id, 'Workstation ID=x' in the connection string.\")]\n#endif\n\t\t[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]\n\t\tpublic string WorkstationId {\n\t\t\tget { return parms.Hostname; }\n\t\t}\n\t\tinternal XmlReader XmlReader {\n\t\t\tget { return xmlReader; }\n\t\t\tset { xmlReader = value; }\n\t\t}\n#if NET_2_0\n\t\tpublic bool FireInfoMessageEventOnUserErrors { \n\t\t\tget { return fireInfoMessageEventOnUserErrors; } \n\t\t\tset { fireInfoMessageEventOnUserErrors = value; }\n\t\t}\n\t\t\n\t\t[DefaultValue (false)]\n\t\tpublic bool StatisticsEnabled { \n\t\t\tget { return statisticsEnabled; } \n\t\t\tset { statisticsEnabled = value; }\n\t\t}\n#endif\n\t\tprotected internal override DbProviderFactory DbProviderFactory {\n\t\t\tget {\n\t\t\t\treturn SqlClientFactory.Instance;\n\t\t\t}\n\t\t}\n\t\t#endregion // Properties\n\t\t#region Events\n#if !NET_2_0\n\t\t[DataSysDescription (\"Event triggered when messages arrive from the DataSource.\")]\n#endif\n\t\tpublic event SqlInfoMessageEventHandler InfoMessage;\n#if !NET_2_0\n\t\t[DataSysDescription (\"Event triggered when the connection changes state.\")]\n\t\tpublic new event StateChangeEventHandler StateChange;\n#endif\n\t\t#endregion // Events\n\t\t#region Delegates\n\t\tprivate void ErrorHandler (object sender, TdsInternalErrorMessageEventArgs e)\n\t\t{\n\t\t\ttry {\n\t\t\t\tif (!tds.IsConnected)\n\t\t\t\t\tClose ();\n\t\t\t} catch {\n\t\t\t\ttry {\n\t\t\t\t\tClose ();\n\t\t\t\t} catch {\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new SqlException (e.Class, e.LineNumber, e.Message, e.Number, e.Procedure, e.Server, \"Mono SqlClient Data Provider\", e.State);\n\t\t}\n\t\tprivate void MessageHandler (object sender, TdsInternalInfoMessageEventArgs e)\n\t\t{\n\t\t\tOnSqlInfoMessage (CreateSqlInfoMessageEvent (e.Errors));\n\t\t}\n\t\t#endregion // Delegates\n\t\t#region Methods\n\t\tpublic new SqlTransaction BeginTransaction ()\n\t\t{\n\t\t\treturn BeginTransaction (IsolationLevel.ReadCommitted, String.Empty);\n\t\t}\n\t\tpublic new SqlTransaction BeginTransaction (IsolationLevel iso)\n\t\t{\n\t\t\treturn BeginTransaction (iso, String.Empty);\n\t\t}\n\t\tpublic SqlTransaction BeginTransaction (string transactionName)\n\t\t{\n\t\t\treturn BeginTransaction (IsolationLevel.ReadCommitted, transactionName);\n\t\t}\n\t\tpublic SqlTransaction BeginTransaction (IsolationLevel iso, string transactionName)\n\t\t{\n\t\t\tif (state == ConnectionState.Closed)\n\t\t\t\tthrow ExceptionHelper.ConnectionClosed ();\n\t\t\tif (transaction != null)\n\t\t\t\tthrow new InvalidOperationException (\"SqlConnection does not support parallel transactions.\");\n\t\t\tstring isolevel = String.Empty;\n\t\t\tswitch (iso) {\n\t\t\tcase IsolationLevel.ReadUncommitted:\n\t\t\t\tisolevel = \"READ UNCOMMITTED\";\n\t\t\t\tbreak;\n\t\t\tcase IsolationLevel.RepeatableRead:\n\t\t\t\tisolevel = \"REPEATABLE READ\";\n\t\t\t\tbreak;\n\t\t\tcase IsolationLevel.Serializable:\n\t\t\t\tisolevel = \"SERIALIZABLE\";\n\t\t\t\tbreak;\n\t\t\tcase IsolationLevel.ReadCommitted:\n\t\t\t\tisolevel = \"READ COMMITTED\";\n\t\t\t\tbreak;\n#if NET_2_0\n\t\t\tcase IsolationLevel.Snapshot:\n\t\t\t\tisolevel = \"SNAPSHOT\";\n\t\t\t\tbreak;\n\t\t\tcase IsolationLevel.Unspecified:\n\t\t\t\tiso = IsolationLevel.ReadCommitted;\n\t\t\t\tisolevel = \"READ COMMITTED\";\n\t\t\t\tbreak;\n\t\t\tcase IsolationLevel.Chaos:\n\t\t\t\tthrow new ArgumentOutOfRangeException (\"IsolationLevel\",\n\t\t\t\t\tstring.Format (CultureInfo.CurrentCulture,\n\t\t\t\t\t\t\"The IsolationLevel enumeration \" +\n\t\t\t\t\t\t\"value, {0}, is not supported by \" +\n\t\t\t\t\t\t\"the .Net Framework SqlClient \" +\n\t\t\t\t\t\t\"Data Provider.\", (int) iso));\n#endif\n\t\t\tdefault:\n#if NET_2_0\n\t\t\t\tthrow new ArgumentOutOfRangeException (\"IsolationLevel\",\n\t\t\t\t\tstring.Format (CultureInfo.CurrentCulture,\n\t\t\t\t\t\t\"The IsolationLevel enumeration value, {0}, is invalid.\",\n\t\t\t\t\t\t(int) iso));\n#else\n\t\t\t\tthrow new ArgumentException (\"Invalid IsolationLevel parameter: must be ReadCommitted, ReadUncommitted, RepeatableRead, or Serializable.\");\n#endif\n\t\t\t}\n\t\t\ttds.Execute (String.Format (\"SET TRANSACTION ISOLATION LEVEL {0};BEGIN TRANSACTION {1}\", isolevel, transactionName));\n\t\t\t\n\t\t\ttransaction = new SqlTransaction (this, iso);\n\t\t\treturn transaction;\n\t\t}\n\t\tpublic\n#if NET_2_0\n\t\toverride\n#endif // NET_2_0\n\t\tvoid ChangeDatabase (string database)\n\t\t{\n\t\t\tif (!IsValidDatabaseName (database))\n\t\t\t\tthrow new ArgumentException (String.Format (\"The database name {0} is not valid.\", database));\n\t\t\tif (state != ConnectionState.Open)\n\t\t\t\tthrow new InvalidOperationException (\"The connection is not open.\");\n\t\t\ttds.Execute (String.Format (\"use [{0}]\", database));\n\t\t}\n\t\tprivate void ChangeState (ConnectionState currentState)\n\t\t{\n\t\t\tif (currentState == state)\n\t\t\t\treturn;\n\t\t\tConnectionState originalState = state;\n\t\t\tstate = currentState;\n\t\t\tOnStateChange (CreateStateChangeEvent (originalState, currentState));\n\t\t}\n\t\tpublic\n#if NET_2_0\n\t\toverride\n#endif // NET_2_0\n\t\tvoid Close ()\n\t\t{\n\t\t\tif (transaction != null && transaction.IsOpen)\n\t\t\t\ttransaction.Rollback ();\n\t\t\tif (dataReader != null || xmlReader != null) {\n\t\t\t\tif(tds != null) tds.SkipToEnd ();\n\t\t\t\tdataReader = null;\n\t\t\t\txmlReader = null;\n\t\t\t}\n\t\t\tif (tds != null && tds.IsConnected) {\n\t\t\t\tif (pooling && tds.Pooling) {\n\t\t\t\t\tif (pool != null) {\n\t\t\t\t\t\tpool.ReleaseConnection (tds);\n\t\t\t\t\t\tpool = null;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttds.Disconnect ();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (tds != null) {\n\t\t\t\ttds.TdsErrorMessage -= new TdsInternalErrorMessageEventHandler (ErrorHandler);\n\t\t\t\ttds.TdsInfoMessage -= new TdsInternalInfoMessageEventHandler (MessageHandler);\n\t\t\t}\n\t\t\tChangeState (ConnectionState.Closed);\n\t\t}\n\t\tpublic new SqlCommand CreateCommand ()\n\t\t{\n\t\t\tSqlCommand command = new SqlCommand ();\n\t\t\tcommand.Connection = this;\n\t\t\treturn command;\n\t\t}\n\t\t\n\t\tprivate SqlInfoMessageEventArgs CreateSqlInfoMessageEvent (TdsInternalErrorCollection errors)\n\t\t{\n\t\t\treturn new SqlInfoMessageEventArgs (errors);\n\t\t}\n\t\tprivate StateChangeEventArgs CreateStateChangeEvent (ConnectionState originalState, ConnectionState currentState)\n\t\t{\n\t\t\treturn new StateChangeEventArgs (originalState, currentState);\n\t\t}\n\t\tprotected override void Dispose (bool disposing)\n\t\t{\n\t\t\ttry {\n\t\t\t\tif (disposing && !disposed) {\n\t\t\t\t\tif (State == ConnectionState.Open) \n\t\t\t\t\t\tClose ();\n\t\t\t\t\tConnectionString = null;\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tdisposed = true;\n\t\t\t\tbase.Dispose (disposing);\n\t\t\t}\n\t\t}\n#if !MOBILE\n\t\t[MonoTODO (\"Not sure what this means at present.\")]\n\t\tpublic void EnlistDistributedTransaction (ITransaction transaction)\n\t\t{\n\t\t\tthrow new NotImplementedException ();\n\t\t}\n#endif\n\t\tobject ICloneable.Clone ()\n\t\t{\n\t\t\treturn new SqlConnection (ConnectionString);\n\t\t}\n#if NET_2_0\n\t\tprotected override DbTransaction BeginDbTransaction (IsolationLevel isolationLevel)\n\t\t{\n\t\t\treturn BeginTransaction (isolationLevel);\n\t\t}\n\t\tprotected override DbCommand CreateDbCommand ()\n\t\t{\n\t\t\treturn CreateCommand ();\n\t\t}\n#else\n\t\tIDbTransaction IDbConnection.BeginTransaction ()\n\t\t{\n\t\t\treturn BeginTransaction ();\n\t\t}\n\t\tIDbTransaction IDbConnection.BeginTransaction (IsolationLevel iso)\n\t\t{\n\t\t\treturn BeginTransaction (iso);\n\t\t}\n\t\tIDbCommand IDbConnection.CreateCommand ()\n\t\t{\n\t\t\treturn CreateCommand ();\n\t\t}\n#endif\n\t\tpublic\n#if NET_2_0\n\t\toverride\n#endif // NET_2_0\n\t\tvoid Open ()\n\t\t{\n\t\t\tstring serverName = string.Empty;\n\t\t\tif (state == ConnectionState.Open)\n\t\t\t\tthrow new InvalidOperationException (\"The Connection is already Open (State=Open)\");\n\t\t\tif (connectionString == null || connectionString.Trim().Length == 0)\n\t\t\t\tthrow new InvalidOperationException (\"Connection string has not been initialized.\");\n\t\t\ttry {\n\t\t\t\tif (!pooling) {\n\t\t\t\t\tif(!ParseDataSource (dataSource, out port, out serverName))\n\t\t\t\t\t\tthrow new SqlException(20, 0, \"SQL Server does not exist or access denied.\",  17, \"ConnectionOpen (Connect()).\", dataSource, parms.ApplicationName, 0);\n\t\t\t\t\ttds = new Tds80 (serverName, port, PacketSize, ConnectionTimeout, 0);\n\t\t\t\t\ttds.Pooling = false;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(!ParseDataSource (dataSource, out port, out serverName))\n\t\t\t\t\t\tthrow new SqlException(20, 0, \"SQL Server does not exist or access denied.\",  17, \"ConnectionOpen (Connect()).\", dataSource, parms.ApplicationName, 0);\n\t\t\t\t\t\n\t\t\t\t\tTdsConnectionInfo info = new TdsConnectionInfo (serverName, port, packetSize, ConnectionTimeout, minPoolSize, maxPoolSize, connectionLifeTime);\n\t\t\t\t\tpool = sqlConnectionPools.GetConnectionPool (connectionString, info);\n\t\t\t\t\ttds = pool.GetConnection ();\n\t\t\t\t}\n\t\t\t} catch (TdsTimeoutException e) {\n\t\t\t\tthrow SqlException.FromTdsInternalException ((TdsInternalException) e);\n\t\t\t} catch (TdsInternalException e) {\n\t\t\t\tthrow SqlException.FromTdsInternalException (e);\n\t\t\t}\n\t\t\ttds.TdsErrorMessage += new TdsInternalErrorMessageEventHandler (ErrorHandler);\n\t\t\ttds.TdsInfoMessage += new TdsInternalInfoMessageEventHandler (MessageHandler);\n\t\t\tif (!tds.IsConnected) {\n\t\t\t\ttry {\n\t\t\t\t\ttds.Connect (parms);\n\t\t\t\t} catch {\n\t\t\t\t\tif (pooling)\n\t\t\t\t\t\tpool.ReleaseConnection (tds);\n\t\t\t\t\tthrow;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdisposed = false; // reset this, so using () would call Close ().\n\t\t\tChangeState (ConnectionState.Open);\n\t\t}\n\t\tprivate bool ParseDataSource (string theDataSource, out int thePort, out string theServerName)\n\t\t{\n\t\t\ttheServerName = string.Empty;\n\t\t\tstring theInstanceName = string.Empty;\n\t\n\t\t\tif (theDataSource == null)\n\t\t\t\tthrow new ArgumentException(\"Format of initialization string does not conform to specifications\");\n\t\t\tthePort = DEFAULT_PORT; // default TCP port for SQL Server\n\t\t\tbool success = true;\n\t\t\tint idx = 0;\n\t\t\tif ((idx = theDataSource.IndexOf (',')) > -1) {\n\t\t\t\ttheServerName = theDataSource.Substring (0, idx);\n\t\t\t\tstring p = theDataSource.Substring (idx + 1);\n\t\t\t\tthePort = Int32.Parse (p);\n\t\t\t} else if ((idx = theDataSource.IndexOf ('\\\\')) > -1) {\n\t\t\t\ttheServerName = theDataSource.Substring (0, idx);\n\t\t\t\ttheInstanceName = theDataSource.Substring (idx + 1);\n\t\t\t\t// do port discovery via UDP port 1434\n\t\t\t\tport = DiscoverTcpPortViaSqlMonitor (theServerName, theInstanceName);\n\t\t\t\tif (port == -1)\n\t\t\t\t\tsuccess = false;\n\t\t\t} else\n\t\t\t\ttheServerName = theDataSource;\n\t\t\tif (theServerName.Length == 0 || theServerName == \"(local)\" || theServerName == \".\")\n\t\t\t\ttheServerName = \"localhost\";\n\t\t\tif ((idx = theServerName.IndexOf (\"tcp:\")) > -1)\n\t\t\t\ttheServerName = theServerName.Substring (idx + 4);\n\t\t\treturn success;\n\t\t}\n\t\tprivate bool ConvertIntegratedSecurity (string value)\n\t\t{\n\t\t\tif (value.ToUpper() == \"SSPI\")\n\t\t\t\treturn true;\n\t\t\treturn ConvertToBoolean (\"integrated security\", value, false);\n\t\t}\n\t\tprivate bool ConvertToBoolean (string key, string value, bool defaultValue)\n\t\t{\n\t\t\tif (value.Length == 0)\n\t\t\t\treturn defaultValue;\n\t\t\tstring upperValue = value.ToUpper ();\n\t\t\tif (upperValue == \"TRUE\" || upperValue == \"YES\")\n\t\t\t\treturn true;\n\t\t\telse if (upperValue == \"FALSE\" || upperValue == \"NO\")\n\t\t\t\treturn false;\n\t\t\tthrow new ArgumentException (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\"Invalid value \\\"{0}\\\" for key '{1}'.\", value, key));\n\t\t}\n\t\tprivate int ConvertToInt32 (string key, string value, int defaultValue)\n\t\t{\n\t\t\tif (value.Length == 0)\n\t\t\t\treturn defaultValue;\n\t\t\ttry {\n\t\t\t\treturn int.Parse (value);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tthrow new ArgumentException (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\t\"Invalid value \\\"{0}\\\" for key '{1}'.\", value, key), ex);\n\t\t\t}\n\t\t}\n\t\tprivate int DiscoverTcpPortViaSqlMonitor (string ServerName, string InstanceName) \n\t\t{\n\t\t\tSqlMonitorSocket msock;\n\t\t\tmsock = new SqlMonitorSocket (ServerName, InstanceName);\n\t\t\tint SqlServerPort = msock.DiscoverTcpPort (ConnectionTimeout);\n\t\t\tmsock = null;\n\t\t\treturn SqlServerPort;\n\t\t}\n\t\n\t\tvoid SetConnectionString (string connectionString)\n\t\t{\n\t\t\tSetDefaultConnectionParameters ();\n\t\t\tif ((connectionString == null) || (connectionString.Trim().Length == 0)) {\n\t\t\t\tthis.connectionString = connectionString;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconnectionString += \";\";\n\t\t\tbool inQuote = false;\n\t\t\tbool inDQuote = false;\n\t\t\tbool inName = true;\n\t\t\tstring name = String.Empty;\n\t\t\tstring value = String.Empty;\n\t\t\tStringBuilder sb = new StringBuilder ();\n\t\t\tfor (int i = 0; i < connectionString.Length; i += 1) {\n\t\t\t\tchar c = connectionString [i];\n\t\t\t\tchar peek;\n\t\t\t\tif (i == connectionString.Length - 1)\n\t\t\t\t\tpeek = '\\0';\n\t\t\t\telse\n\t\t\t\t\tpeek = connectionString [i + 1];\n\t\t\t\tswitch (c) {\n\t\t\t\tcase '\\'':\n\t\t\t\t\tif (inDQuote)\n\t\t\t\t\t\tsb.Append (c);\n\t\t\t\t\telse if (peek.Equals (c)) {\n\t\t\t\t\t\tsb.Append (c);\n\t\t\t\t\t\ti += 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tinQuote = !inQuote;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '\"':\n\t\t\t\t\tif (inQuote)\n\t\t\t\t\t\tsb.Append (c);\n\t\t\t\t\telse if (peek.Equals (c)) {\n\t\t\t\t\t\tsb.Append (c);\n\t\t\t\t\t\ti += 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tinDQuote = !inDQuote;\n\t\t\t\t\tbreak;\n\t\t\t\tcase ';':\n\t\t\t\t\tif (inDQuote || inQuote)\n\t\t\t\t\t\tsb.Append (c);\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (name != String.Empty && name != null) {\n\t\t\t\t\t\t\tvalue = sb.ToString ();\n\t\t\t\t\t\t\tSetProperties (name.ToLower ().Trim() , value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (sb.Length != 0)\n\t\t\t\t\t\t\tthrow new ArgumentException (\"Format of initialization string does not conform to specifications\");\n\t\t\t\t\t\tinName = true;\n\t\t\t\t\t\tname = String.Empty;\n\t\t\t\t\t\tvalue = String.Empty;\n\t\t\t\t\t\tsb = new StringBuilder ();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase '=':\n\t\t\t\t\tif (inDQuote || inQuote || !inName)\n\t\t\t\t\t\tsb.Append (c);\n\t\t\t\t\telse if (peek.Equals (c)) {\n\t\t\t\t\t\tsb.Append (c);\n\t\t\t\t\t\ti += 1;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tname = sb.ToString ();\n\t\t\t\t\t\tsb = new StringBuilder ();\n\t\t\t\t\t\tinName = false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase ' ':\n\t\t\t\t\tif (inQuote || inDQuote)\n\t\t\t\t\t\tsb.Append (c);\n\t\t\t\t\telse if (sb.Length > 0 && !peek.Equals (';'))\n\t\t\t\t\t\tsb.Append (c);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tsb.Append (c);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (minPoolSize > maxPoolSize)\n\t\t\t\tthrow new ArgumentException (\"Invalid value for \"\n\t\t\t\t\t+ \"'min pool size' or 'max pool size'; \"\n\t\t\t\t\t+ \"'min pool size' must not be greater \"\n\t\t\t\t\t+ \"than 'max pool size'.\");\n\t\t\tconnectionString = connectionString.Substring (0 , connectionString.Length-1);\n\t\t\tthis.connectionString = connectionString;\n\t\t}\n\t\tvoid SetDefaultConnectionParameters ()\n\t\t{\n\t\t\tif (parms == null)\n\t\t\t\tparms = new TdsConnectionParameters ();\n\t\t\telse\n\t\t\t\tparms.Reset ();\n\t\t\tdataSource = string.Empty;\n\t\t\tconnectionTimeout = DEFAULT_CONNECTIONTIMEOUT;\n\t\t\tconnectionLifeTime = DEFAULT_CONNECTIONLIFETIME;\n\t\t\tconnectionReset = true;\n\t\t\tpooling = true;\n\t\t\tmaxPoolSize = DEFAULT_MAXPOOLSIZE;\n\t\t\tminPoolSize = DEFAULT_MINPOOLSIZE;\n\t\t\tpacketSize = DEFAULT_PACKETSIZE;\n\t\t\tport = DEFAULT_PORT;\n #if NET_2_0\n\t\t\tasync = false;\n #endif\n\t\t}\n\t\tprivate void SetProperties (string name , string value)\n\t\t{\n\t\t\tswitch (name) {\n\t\t\tcase \"app\" :\n\t\t\tcase \"application name\" :\n\t\t\t\tparms.ApplicationName = value;\n\t\t\t\tbreak;\n\t\t\tcase \"attachdbfilename\" :\n\t\t\tcase \"extended properties\" :\n\t\t\tcase \"initial file name\" :\n\t\t\t\tparms.AttachDBFileName = value;\n\t\t\t\tbreak;\n\t\t\tcase \"timeout\" :\n\t\t\tcase \"connect timeout\" :\n\t\t\tcase \"connection timeout\" :\n\t\t\t\tint tmpTimeout = ConvertToInt32 (\"connect timeout\", value,\n\t\t\t\t\tDEFAULT_CONNECTIONTIMEOUT);\n\t\t\t\tif (tmpTimeout < 0)\n\t\t\t\t\tthrow new ArgumentException (\"Invalid 'connect timeout'. Must be an integer >=0 \");\n\t\t\t\telse \n\t\t\t\t\tconnectionTimeout = tmpTimeout;\n\t\t\t\tbreak;\n\t\t\tcase \"connection lifetime\" :\n\t\t\t\tconnectionLifeTime = ConvertToInt32 (\"connection lifetime\", value, DEFAULT_CONNECTIONLIFETIME);\n\t\t\t\tbreak;\n\t\t\tcase \"connection reset\" :\n\t\t\t\tconnectionReset = ConvertToBoolean (\"connection reset\", value, true);\n\t\t\t\tbreak;\n\t\t\tcase \"language\" :\n\t\t\tcase \"current language\" :\n\t\t\t\tparms.Language = value;\n\t\t\t\tbreak;\n\t\t\tcase \"data source\" :\n\t\t\tcase \"server\" :\n\t\t\tcase \"address\" :\n\t\t\tcase \"addr\" :\n\t\t\tcase \"network address\" :\n\t\t\t\tdataSource = value;\n\t\t\t\tbreak;\n\t\t\tcase \"encrypt\":\n\t\t\t\tif (ConvertToBoolean (name, value, false))\n\t\t\t\t\tthrow new NotImplementedException(\"SSL encryption for\"\n\t\t\t\t\t\t+ \" data sent between client and server is not\"\n\t\t\t\t\t\t+ \" implemented.\");\n\t\t\t\tbreak;\n\t\t\tcase \"enlist\" :\n\t\t\t\tif (!ConvertToBoolean (name, value, true))\n\t\t\t\t\tthrow new NotImplementedException(\"Disabling the automatic\"\n\t\t\t\t\t\t+ \" enlistment of connections in the thread's current\"\n\t\t\t\t\t\t+ \" transaction context is not implemented.\");\n\t\t\t\tbreak;\n\t\t\tcase \"initial catalog\" :\n\t\t\tcase \"database\" :\n\t\t\t\tparms.Database = value;\n\t\t\t\tbreak;\n\t\t\tcase \"integrated security\" :\n\t\t\tcase \"trusted_connection\" :\n\t\t\t\tparms.DomainLogin = ConvertIntegratedSecurity(value);\n\t\t\t\tbreak;\n\t\t\tcase \"max pool size\" :\n\t\t\t\tint tmpMaxPoolSize = ConvertToInt32 (name, value, DEFAULT_MAXPOOLSIZE);\n\t\t\t\tif (tmpMaxPoolSize < MIN_MAXPOOLSIZE)\n\t\t\t\t\tthrow new ArgumentException (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\t\t\"Invalid '{0}'. The value must be greater than {1}.\",\n\t\t\t\t\t\tname, MIN_MAXPOOLSIZE));\n\t\t\t\telse\n\t\t\t\t\tmaxPoolSize = tmpMaxPoolSize;\n\t\t\t\tbreak;\n\t\t\tcase \"min pool size\" :\n\t\t\t\tint tmpMinPoolSize = ConvertToInt32 (name, value, DEFAULT_MINPOOLSIZE);\n\t\t\t\tif (tmpMinPoolSize < 0)\n\t\t\t\t\tthrow new ArgumentException (\"Invalid 'min pool size'. Must be a integer >= 0\");\n\t\t\t\telse\n\t\t\t\t\tminPoolSize = tmpMinPoolSize;\n\t\t\t\tbreak;\n#if NET_2_0\n\t\t\tcase \"multipleactiveresultsets\":\n\t\t\t\t// FIXME: not implemented\n\t\t\t\tConvertToBoolean (name, value, false);\n\t\t\t\tbreak;\n\t\t\tcase \"asynchronous processing\" :\n\t\t\tcase \"async\" :\n\t\t\t\tasync = ConvertToBoolean (name, value, false);\n\t\t\t\tbreak;\n#endif\n\t\t\tcase \"net\" :\n\t\t\tcase \"network\" :\n\t\t\tcase \"network library\" :\n\t\t\t\tif (!value.ToUpper ().Equals (\"DBMSSOCN\"))\n\t\t\t\t\tthrow new ArgumentException (\"Unsupported network library.\");\n\t\t\t\tbreak;\n\t\t\tcase \"packet size\" :\n\t\t\t\tint tmpPacketSize = ConvertToInt32 (name, value, DEFAULT_PACKETSIZE);\n\t\t\t\tif (tmpPacketSize < MIN_PACKETSIZE || tmpPacketSize > MAX_PACKETSIZE)\n\t\t\t\t\tthrow new ArgumentException (string.Format (CultureInfo.InvariantCulture,\n\t\t\t\t\t\t\"Invalid 'Packet Size'. The value must be between {0} and {1}.\",\n\t\t\t\t\t\tMIN_PACKETSIZE, MAX_PACKETSIZE));\n\t\t\t\telse\n\t\t\t\t\tpacketSize = tmpPacketSize;\n\t\t\t\tbreak;\n\t\t\tcase \"password\" :\n\t\t\tcase \"pwd\" :\n\t\t\t\tparms.Password = value;\n\t\t\t\tbreak;\n\t\t\tcase \"persistsecurityinfo\" :\n\t\t\tcase \"persist security info\" :\n\t\t\t\t// FIXME : not implemented\n\t\t\t\t// throw new NotImplementedException ();\n\t\t\t\tbreak;\n\t\t\tcase \"pooling\" :\n\t\t\t\tpooling = ConvertToBoolean (name, value, true);\n\t\t\t\tbreak;\n\t\t\tcase \"uid\" :\n\t\t\tcase \"user\" :\n\t\t\tcase \"user id\" :\n\t\t\t\tparms.User = value;\n\t\t\t\tbreak;\n\t\t\tcase \"wsid\" :\n\t\t\tcase \"workstation id\" :\n\t\t\t\tparms.Hostname = value;\n\t\t\t\tbreak;\n#if NET_2_0\n\t\t\tcase \"user instance\":\n\t\t\t\tuserInstance = ConvertToBoolean (name, value, false);\n\t\t\t\tbreak;\n#endif\n\t\t\tdefault :\n\t\t\t\tthrow new ArgumentException(\"Keyword not supported : '\" + name + \"'.\");\n\t\t\t}\n\t\t}\n\t\tstatic bool IsValidDatabaseName (string database)\n\t\t{\n\t\t\tif ( database == null || database.Trim().Length == 0 || database.Length > 128)\n\t\t\t\treturn false ;\n\t\t\t\n\t\t\tif (database[0] == '\"' && database[database.Length] == '\"')\n\t\t\t\tdatabase = database.Substring (1, database.Length - 2);\n\t\t\telse if (Char.IsDigit (database[0]))\n\t\t\t\treturn false;\n\t\t\tif (database[0] == '_')\n\t\t\t\treturn false;\n\t\t\tforeach (char c  in database.Substring (1, database.Length - 1))\n\t\t\t\tif (!Char.IsLetterOrDigit (c) && c != '_' && c != '-')\n\t\t\t\t\treturn false;\n\t\t\treturn true;\n\t\t}\n\t\tprivate void OnSqlInfoMessage (SqlInfoMessageEventArgs value)\n\t\t{\n\t\t\tif (InfoMessage != null)\n\t\t\t\tInfoMessage (this, value);\n\t\t}\n#if !NET_2_0\n\t\tprivate new void OnStateChange (StateChangeEventArgs value)\n\t\t{\n\t\t\tif (StateChange != null)\n\t\t\t\tStateChange (this, value);\n\t\t}\n#endif\n\t\tprivate sealed class SqlMonitorSocket : UdpClient\n\t\t{\n\t\t\t// UDP port that the SQL Monitor listens\n\t\t\tprivate static readonly int SqlMonitorUdpPort = 1434;\n\t\t\t//private static readonly string SqlServerNotExist = \"SQL Server does not exist or access denied\";\n\t\t\tprivate string server;\n\t\t\tprivate string instance;\n\t\t\tinternal SqlMonitorSocket (string ServerName, string InstanceName) \n\t\t\t\t: base (ServerName, SqlMonitorUdpPort) \n\t\t\t{\n\t\t\t\tserver = ServerName;\n\t\t\t\tinstance = InstanceName;\n\t\t\t}\n\t\t\tinternal int DiscoverTcpPort (int timeoutSeconds)\n\t\t\t{\n\t\t\t\tint SqlServerTcpPort;\n\t\t\t\tClient.Blocking = false;\n\t\t\t\t// send command to UDP 1434 (SQL Monitor) to get\n\t\t\t\t// the TCP port to connect to the MS SQL server\n\t\t\t\tASCIIEncoding enc = new ASCIIEncoding ();\n\t\t\t\tByte[] rawrq = new Byte [instance.Length + 1];\n\t\t\t\trawrq[0] = 4;\n\t\t\t\tenc.GetBytes (instance, 0, instance.Length, rawrq, 1);\n\t\t\t\tSend (rawrq, rawrq.Length);\n\t\t\t\tif (!Active)\n\t\t\t\t\treturn -1; // Error\n\t\t\t\t\n\t\t\t\tbool result;\n\t\t\t\tlong timeout = timeoutSeconds * 1000000;\n\t\t\t\tresult = Client.Poll ((int)timeout, SelectMode.SelectRead);\n\t\t\t\tif (result == false)\n\t\t\t\t\treturn -1; // Error\n\t\t\t\tif (Client.Available <= 0)\n\t\t\t\t\treturn -1; // Error\n#if NET_2_0\n\t\t\t\tIPEndPoint endpoint = new IPEndPoint (Dns.GetHostEntry (\"localhost\").AddressList [0], 0);\n#else\n\t\t\t\tIPEndPoint endpoint = new IPEndPoint (Dns.GetHostByName (\"localhost\").AddressList [0], 0);\n#endif\n\t\t\t\tByte [] rawrs;\n\t\t\t\trawrs = Receive (ref endpoint);\n\t\t\t\tstring rs = Encoding.ASCII.GetString (rawrs);\n\t\t\t\tstring[] rawtokens = rs.Split (';');\n\t\t\t\tHashtable data = new Hashtable ();\n\t\t\t\tfor (int i = 0; i < rawtokens.Length / 2 && i < 256; i++) {\n\t\t\t\t\tdata [rawtokens [i * 2]] = rawtokens [ i * 2 + 1];\n\t\t\t\t}\n\t\t\t\tif (!data.ContainsKey (\"tcp\")) {\n\t\t\t\t\tstring msg = \"Mono does not support names pipes or shared memory \"\n\t\t\t\t\t\t+ \"for connecting to SQL Server. Please enable the TCP/IP \"\n\t\t\t\t\t\t+ \"protocol.\";\n\t\t\t\t\tthrow new NotImplementedException (msg);\n\t\t\t\t}\n\t\t\t\tSqlServerTcpPort = int.Parse ((string) data [\"tcp\"]);\n\t\t\t\tClose ();\n\t\t\t\treturn SqlServerTcpPort;\n\t\t\t}\n\t\t}\n#if NET_2_0\n\t\tstruct ColumnInfo\n\t\t{\n\t\t\tpublic string name;\n\t\t\tpublic Type type;\n\t\t\tpublic ColumnInfo (string name, Type type)\n\t\t\t{\n\t\t\t\tthis.name = name; this.type = type;\n\t\t\t}\n\t\t}\n\t\tstatic class ReservedWords\n\t\t{\n\t\t\tstatic readonly string [] reservedWords =\n\t\t\t{\n\t\t\t\t\"ADD\", \"EXCEPT\", \"PERCENT\", \"ALL\", \"EXEC\", \"PLAN\", \"ALTER\",\n\t\t\t\t  \"EXECUTE\", \"PRECISION\", \"AND\", \"EXISTS\", \"PRIMARY\", \"ANY\",\n\t\t\t\t  \"EXIT\", \"PRINT\", \"AS\", \"FETCH\", \"PROC\", \"ASC\", \"FILE\",\n\t\t\t\t  \"PROCEDURE\", \"AUTHORIZATION\", \"FILLFACTOR\", \"PUBLIC\",\n\t\t\t\t  \"BACKUP\", \"FOR\", \"RAISERROR\", \"BEGIN\", \"FOREIGN\", \"READ\",\n\t\t\t\t  \"BETWEEN\", \"FREETEXT\", \"READTEXT\", \"BREAK\", \"FREETEXTTABLE\",\n\t\t\t\t  \"RECONFIGURE\", \"BROWSE\", \"FROM\", \"REFERENCES\", \"BULK\",\n\t\t\t\t  \"FULL\", \"REPLICATION\", \"BY\", \"FUNCTION\", \"RESTORE\",\n\t\t\t\t  \"CASCADE\", \"GOTO\", \"RESTRICT\", \"CASE\", \"GRANT\", \"RETURN\",\n\t\t\t\t  \"CHECK\", \"GROUP\", \"REVOKE\", \"CHECKPOINT\", \"HAVING\", \"RIGHT\",\n\t\t\t\t  \"CLOSE\", \"HOLDLOCK\", \"ROLLBACK\", \"CLUSTERED\", \"IDENTITY\",\n\t\t\t\t  \"ROWCOUNT\", \"COALESCE\", \"IDENTITY_INSERT\", \"ROWGUIDCOL\",\n\t\t\t\t  \"COLLATE\", \"IDENTITYCOL\", \"RULE\", \"COLUMN\", \"IF\", \"SAVE\",\n\t\t\t\t  \"COMMIT\", \"IN\", \"SCHEMA\", \"COMPUTE\", \"INDEX\", \"SELECT\",\n\t\t\t\t  \"CONSTRAINT\", \"INNER\", \"SESSION_USER\", \"CONTAINS\", \"INSERT\",\n\t\t\t\t  \"SET\", \"CONTAINSTABLE\", \"INTERSECT\", \"SETUSER\", \"CONTINUE\",\n\t\t\t\t  \"INTO\", \"SHUTDOWN\", \"CONVERT\", \"IS\", \"SOME\", \"CREATE\",\n\t\t\t\t  \"JOIN\", \"STATISTICS\", \"CROSS\", \"KEY\", \"SYSTEM_USER\",\n\t\t\t\t  \"CURRENT\", \"KILL\", \"TABLE\", \"CURRENT_DATE\", \"LEFT\",\n\t\t\t\t  \"TEXTSIZE\", \"CURRENT_TIME\", \"LIKE\", \"THEN\",\n\t\t\t\t  \"CURRENT_TIMESTAMP\", \"LINENO\", \"TO\", \"CURRENT_USER\", \"LOAD\",\n\t\t\t\t  \"TOP\", \"CURSOR\", \"NATIONAL\", \"TRAN\", \"DATABASE\", \"NOCHECK\",\n\t\t\t\t  \"TRANSACTION\", \"DBCC\", \"NONCLUSTERED\", \"TRIGGER\",\n\t\t\t\t  \"DEALLOCATE\", \"NOT\", \"TRUNCATE\", \"DECLARE\", \"NULL\",\n\t\t\t\t  \"TSEQUAL\", \"DEFAULT\", \"NULLIF\", \"UNION\", \"DELETE\", \"OF\",\n\t\t\t\t  \"UNIQUE\", \"DENY\", \"OFF\", \"UPDATE\", \"DESC\", \"OFFSETS\",\n\t\t\t\t  \"UPDATETEXT\", \"DISK\", \"ON\", \"USE\", \"DISTINCT\", \"OPEN\",\n\t\t\t\t  \"USER\", \"DISTRIBUTED\", \"OPENDATASOURCE\", \"VALUES\", \"DOUBLE\",\n\t\t\t\t  \"OPENQUERY\", \"VARYING\", \"DROP\", \"OPENROWSET\", \"VIEW\",\n\t\t\t\t  \"DUMMY\", \"OPENXML\", \"WAITFOR\", \"DUMP\", \"OPTION\", \"WHEN\",\n\t\t\t\t  \"ELSE\", \"OR\", \"WHERE\", \"END\", \"ORDER\", \"WHILE\", \"ERRLVL\",\n\t\t\t\t  \"OUTER\", \"WITH\", \"ESCAPE\", \"OVER\", \"WRITETEXT\", \"ABSOLUTE\",\n\t\t\t\t  \"FOUND\", \"PRESERVE\", \"ACTION\", \"FREE\", \"PRIOR\", \"ADMIN\",\n\t\t\t\t  \"GENERAL\", \"PRIVILEGES\", \"AFTER\", \"GET\", \"READS\",\n\t\t\t\t  \"AGGREGATE\", \"GLOBAL\", \"REAL\", \"ALIAS\", \"GO\", \"RECURSIVE\",\n\t\t\t\t  \"ALLOCATE\", \"GROUPING\", \"REF\", \"ARE\", \"HOST\", \"REFERENCING\",\n\t\t\t\t  \"ARRAY\", \"HOUR\", \"RELATIVE\", \"ASSERTION\", \"IGNORE\", \"RESULT\",\n\t\t\t\t  \"AT\", \"IMMEDIATE\", \"RETURNS\", \"BEFORE\", \"INDICATOR\", \"ROLE\",\n\t\t\t\t  \"BINARY\", \"INITIALIZE\", \"ROLLUP\", \"BIT\", \"INITIALLY\",\n\t\t\t\t  \"ROUTINE\", \"BLOB\", \"INOUT\", \"ROW\", \"BOOLEAN\", \"INPUT\",\n\t\t\t\t  \"ROWS\", \"BOTH\", \"INT\", \"SAVEPOINT\", \"BREADTH\", \"INTEGER\",\n\t\t\t\t  \"SCROLL\", \"CALL\", \"INTERVAL\", \"SCOPE\", \"CASCADED\",\n\t\t\t\t  \"ISOLATION\", \"SEARCH\", \"CAST\", \"ITERATE\", \"SECOND\",\n\t\t\t\t  \"CATALOG\", \"LANGUAGE\", \"SECTION\", \"CHAR\", \"LARGE\",\n\t\t\t\t  \"SEQUENCE\", \"CHARACTER\", \"LAST\", \"SESSION\", \"CLASS\",\n\t\t\t\t  \"LATERAL\", \"SETS\", \"CLOB\", \"LEADING\", \"SIZE\", \"COLLATION\",\n\t\t\t\t  \"LESS\", \"SMALLINT\", \"COMPLETION\", \"LEVEL\", \"SPACE\",\n\t\t\t\t  \"CONNECT\", \"LIMIT\", \"SPECIFIC\", \"CONNECTION\", \"LOCAL\",\n\t\t\t\t  \"SPECIFICTYPE\", \"CONSTRAINTS\", \"LOCALTIME\", \"SQL\",\n\t\t\t\t  \"CONSTRUCTOR\", \"LOCALTIMESTAMP\", \"SQLEXCEPTION\",\n\t\t\t\t  \"CORRESPONDING\", \"LOCATOR\", \"SQLSTATE\", \"CUBE\", \"MAP\",\n\t\t\t\t  \"SQLWARNING\", \"CURRENT_PATH\", \"MATCH\", \"START\",\n\t\t\t\t  \"CURRENT_ROLE\", \"MINUTE\", \"STATE\", \"CYCLE\", \"MODIFIES\",\n\t\t\t\t  \"STATEMENT\", \"DATA\", \"MODIFY\", \"STATIC\", \"DATE\", \"MODULE\",\n\t\t\t\t  \"STRUCTURE\", \"DAY\", \"MONTH\", \"TEMPORARY\", \"DEC\", \"NAMES\",\n\t\t\t\t  \"TERMINATE\", \"DECIMAL\", \"NATURAL\", \"THAN\", \"DEFERRABLE\",\n\t\t\t\t  \"NCHAR\", \"TIME\", \"DEFERRED\", \"NCLOB\", \"TIMESTAMP\", \"DEPTH\",\n\t\t\t\t  \"NEW\", \"TIMEZONE_HOUR\", \"DEREF\", \"NEXT\", \"TIMEZONE_MINUTE\",\n\t\t\t\t  \"DESCRIBE\", \"NO\", \"TRAILING\", \"DESCRIPTOR\", \"NONE\",\n\t\t\t\t  \"TRANSLATION\", \"DESTROY\", \"NUMERIC\", \"TREAT\", \"DESTRUCTOR\",\n\t\t\t\t  \"OBJECT\", \"TRUE\", \"DETERMINISTIC\", \"OLD\", \"UNDER\",\n\t\t\t\t  \"DICTIONARY\", \"ONLY\", \"UNKNOWN\", \"DIAGNOSTICS\", \"OPERATION\",\n\t\t\t\t  \"UNNEST\", \"DISCONNECT\", \"ORDINALITY\", \"USAGE\", \"DOMAIN\",\n\t\t\t\t  \"OUT\", \"USING\", \"DYNAMIC\", \"OUTPUT\", \"VALUE\", \"EACH\",\n\t\t\t\t  \"PAD\", \"VARCHAR\", \"END-EXEC\", \"PARAMETER\", \"VARIABLE\",\n\t\t\t\t  \"EQUALS\", \"PARAMETERS\", \"WHENEVER\", \"EVERY\", \"PARTIAL\",\n\t\t\t\t  \"WITHOUT\", \"EXCEPTION\", \"PATH\", \"WORK\", \"EXTERNAL\",\n\t\t\t\t  \"POSTFIX\", \"WRITE\", \"FALSE\", \"PREFIX\", \"YEAR\", \"FIRST\",\n\t\t\t\t  \"PREORDER\", \"ZONE\", \"FLOAT\", \"PREPARE\", \"ADA\", \"AVG\",\n\t\t\t\t  \"BIT_LENGTH\", \"CHAR_LENGTH\", \"CHARACTER_LENGTH\", \"COUNT\",\n\t\t\t\t  \"EXTRACT\", \"FORTRAN\", \"INCLUDE\", \"INSENSITIVE\", \"LOWER\",\n\t\t\t\t  \"MAX\", \"MIN\", \"OCTET_LENGTH\", \"OVERLAPS\", \"PASCAL\",\n\t\t\t\t  \"POSITION\", \"SQLCA\", \"SQLCODE\", \"SQLERROR\", \"SUBSTRING\",\n\t\t\t\t  \"SUM\", \"TRANSLATE\", \"TRIM\", \"UPPER\"\n\t\t\t};\n\t\t\tstatic DataTable instance;\n\t\t\tstatic public DataTable Instance {\n\t\t\t\tget {\n\t\t\t\t\tif (instance == null) {\n\t\t\t\t\t\tDataRow row = null;\n\t\t\t\t\t\tvar newInstance = new DataTable (\"ReservedWords\");\n\t\t\t\t\t\tnewInstance.Columns.Add (\"ReservedWord\", typeof(string));\n\t\t\t\t\t\tforeach (string reservedWord in reservedWords)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trow = newInstance.NewRow();\n\t\t\t\t\t\t\trow[\"ReservedWord\"] = reservedWord;\n\t\t\t\t\t\t\tnewInstance.Rows.Add(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinstance = newInstance;\n\t\t\t\t\t}\n\t\t\t\t\treturn instance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstatic class MetaDataCollections\n\t\t{\n\t\t\tstatic readonly ColumnInfo [] columns = {\n\t\t\t\tnew ColumnInfo (\"CollectionName\", typeof (string)),\n\t\t\t\tnew ColumnInfo (\"NumberOfRestrictions\", typeof (int)),\n\t\t\t\tnew ColumnInfo (\"NumberOfIdentifierParts\", typeof (int))\n\t\t\t};\n\t\t\tstatic readonly object [][] rows = {\n\t\t\t\tnew object [] {\"MetaDataCollections\", 0, 0},\n\t\t\t\tnew object [] {\"DataSourceInformation\", 0, 0},\n\t\t\t\tnew object [] {\"DataTypes\", 0, 0},\n\t\t\t\tnew object [] {\"Restrictions\", 0, 0},\n\t\t\t\tnew object [] {\"ReservedWords\", 0, 0},\n\t\t\t\tnew object [] {\"Users\", 1, 1},\n\t\t\t\tnew object [] {\"Databases\", 1, 1},\n\t\t\t\tnew object [] {\"Tables\", 4, 3},\n\t\t\t\tnew object [] {\"Columns\", 4, 4},\n\t\t\t\tnew object [] {\"StructuredTypeMembers\", 4, 4},\n\t\t\t\tnew object [] {\"Views\", 3, 3},\n\t\t\t\tnew object [] {\"ViewColumns\", 4, 4},\n\t\t\t\tnew object [] {\"ProcedureParameters\", 4, 1},\n\t\t\t\tnew object [] {\"Procedures\", 4, 3},\n\t\t\t\tnew object [] {\"ForeignKeys\", 4, 3},\n\t\t\t\tnew object [] {\"IndexColumns\", 5, 4},\n\t\t\t\tnew object [] {\"Indexes\", 4, 3},\n\t\t\t\tnew object [] {\"UserDefinedTypes\", 2, 1}\n\t\t\t};\n\t\t\tstatic DataTable instance;\n\t\t\tstatic public DataTable Instance {\n\t\t\t\tget {\n\t\t\t\t\tif (instance == null) {\n\t\t\t\t\t\tvar newInstance = new DataTable (\"MetaDataCollections\");\n\t\t\t\t\t\tforeach (ColumnInfo c in columns)\n\t\t\t\t\t\t\tnewInstance.Columns.Add (c.name, c.type);\n\t\t\t\t\t\tforeach (object [] row in rows)\n\t\t\t\t\t\t\tnewInstance.LoadDataRow (row, true);\n\t\t\t\t\t\tinstance = newInstance;\n\t\t\t\t\t}\n\t\t\t\t\treturn instance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstatic class DataSourceInformation\n\t\t{\n\t\t\tstatic readonly ColumnInfo [] columns = {\n\t\t\t\tnew ColumnInfo (\"CompositeIdentifierSeparatorPattern\", typeof (string)),\n\t\t\t\tnew ColumnInfo (\"DataSourceProductName\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"DataSourceProductVersion\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"DataSourceProductVersionNormalized\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"GroupByBehavior\", typeof(GroupByBehavior)),\n\t\t\t\tnew ColumnInfo (\"IdentifierPattern\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"IdentifierCase\", typeof(IdentifierCase)),\n\t\t\t\tnew ColumnInfo (\"OrderByColumnsInSelect\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"ParameterMarkerFormat\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"ParameterMarkerPattern\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"ParameterNameMaxLength\", typeof(int)),\n\t\t\t\tnew ColumnInfo (\"ParameterNamePattern\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"QuotedIdentifierPattern\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"QuotedIdentifierCase\", typeof(IdentifierCase)),\n\t\t\t\tnew ColumnInfo (\"StatementSeparatorPattern\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"StringLiteralPattern\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"SupportedJoinOperators\", typeof(SupportedJoinOperators))\n\t\t\t};\n\t\t\tstatic public DataTable GetInstance (SqlConnection conn)\n\t\t\t{\n\t\t\t\tDataTable table = new DataTable (\"DataSourceInformation\");\n\t\t\t\tforeach (ColumnInfo c in columns)\n\t\t\t\t\ttable.Columns.Add (c.name, c.type);\n\t\t\t\tDataRow row = table.NewRow ();\n\t\t\t\trow [0] = \"\\\\.\";\n\t\t\t\trow [1] = \"Microsoft SQL Server\";\n\t\t\t\trow [2] = conn.ServerVersion;;\n\t\t\t\trow [3] = conn.ServerVersion;;\n\t\t\t\trow [4] = GroupByBehavior.Unrelated;\n\t\t\t\trow [5] = @\"(^\\[\\p{Lo}\\p{Lu}\\p{Ll}_@#][\\p{Lo}\\p{Lu}\\p{Ll}\\p{Nd}@$#_]*$)|(^\\[[^\\]\\0]|\\]\\]+\\]$)|(^\\\"\"[^\\\"\"\\0]|\\\"\"\\\"\"+\\\"\"$)\";\n\t\t\t\trow [6] = IdentifierCase.Insensitive; // FIXME: obtain this from SQL Server\n\t\t\t\trow [7] = false;\n\t\t\t\trow [8] = \"{0}\";\n\t\t\t\trow [9] = @\"@[\\p{Lo}\\p{Lu}\\p{Ll}\\p{Lm}_@#][\\p{Lo}\\p{Lu}\\p{Ll}\\p{Lm}\\p{Nd}\\uff3f_@#\\$]*(?=\\s+|$)\";\n\t\t\t\trow [10] = 128;\n\t\t\t\trow [11] = @\"^[\\p{Lo}\\p{Lu}\\p{Ll}\\p{Lm}_@#][\\p{Lo}\\p{Lu}\\p{Ll}\\p{Lm}\\p{Nd}\\uff3f_@#\\$]*(?=\\s+|$)\";\n\t\t\t\trow [12] = @\"(([^\\[]|\\]\\])*)\";\n\t\t\t\trow [13] = IdentifierCase.Insensitive;  // FIXME: obtain this from SQL Server\n\t\t\t\trow [14] =\";\";\n\t\t\t\trow [15] = \"'(([^']|'')*)'\";\n\t\t\t\trow [16] = (SupportedJoinOperators.FullOuter | SupportedJoinOperators.Inner |\n\t\t\t\t\tSupportedJoinOperators.LeftOuter | SupportedJoinOperators.RightOuter);\n\t\t\t\ttable.Rows.Add (row);\n\t\t\t\treturn table;\n\t\t\t}\n\t\t}\n\t\tstatic class DataTypes\n\t\t{\n\t\t\tstatic readonly ColumnInfo [] columns = {\n\t\t\t\tnew ColumnInfo (\"TypeName\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"ProviderDbType\", typeof(int)),\n\t\t\t\tnew ColumnInfo (\"ColumnSize\", typeof(long)),\n\t\t\t\tnew ColumnInfo (\"CreateFormat\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"CreateParameters\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"DataType\", typeof(string)),\n\t\t\t\tnew ColumnInfo (\"IsAutoIncrementable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsBestMatch\", typeof(bool)),\n", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "length": 4122, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "503394b89352f288b2d2b572aef9690fe2ab19aeae8434aa"}
{"input": "", "context": "using System;\nusing System.Collections;\nusing System.Diagnostics;\nusing System.Globalization;\nusing System.Text;\nnamespace Org.BouncyCastle.Math\n{\n\t// TODO Probably need a custom serialization here\n\t[Serializable]\n\tpublic class BigInteger\n\t{\n\t\t// The primes b/w 2 and ~2^10\n\t\t/*\n\t\t\t\t3   5   7   11  13  17  19  23  29\n\t\t\t31  37  41  43  47  53  59  61  67  71\n\t\t\t73  79  83  89  97  101 103 107 109 113\n\t\t\t127 131 137 139 149 151 157 163 167 173\n\t\t\t179 181 191 193 197 199 211 223 227 229\n\t\t\t233 239 241 251 257 263 269 271 277 281\n\t\t\t283 293 307 311 313 317 331 337 347 349\n\t\t\t353 359 367 373 379 383 389 397 401 409\n\t\t\t419 421 431 433 439 443 449 457 461 463\n\t\t\t467 479 487 491 499 503 509 521 523 541\n\t\t\t547 557 563 569 571 577 587 593 599 601\n\t\t\t607 613 617 619 631 641 643 647 653 659\n\t\t\t661 673 677 683 691 701 709 719 727 733\n\t\t\t739 743 751 757 761 769 773 787 797 809\n\t\t\t811 821 823 827 829 839 853 857 859 863\n\t\t\t877 881 883 887 907 911 919 929 937 941\n\t\t\t947 953 967 971 977 983 991 997\n\t\t\t1009 1013 1019 1021 1031\n\t\t*/\n\t\t// Each list has a product < 2^31\n\t\tprivate static readonly int[][] primeLists = new int[][]\n\t\t{\n\t\t\tnew int[]{ 3, 5, 7, 11, 13, 17, 19, 23 },\n\t\t\tnew int[]{ 29, 31, 37, 41, 43 },\n\t\t\tnew int[]{ 47, 53, 59, 61, 67 },\n\t\t\tnew int[]{ 71, 73, 79, 83 },\n\t\t\tnew int[]{ 89, 97, 101, 103 },\n\t\t\tnew int[]{ 107, 109, 113, 127 },\n\t\t\tnew int[]{ 131, 137, 139, 149 },\n\t\t\tnew int[]{ 151, 157, 163, 167 },\n\t\t\tnew int[]{ 173, 179, 181, 191 },\n\t\t\tnew int[]{ 193, 197, 199, 211 },\n\t\t\tnew int[]{ 223, 227, 229 },\n\t\t\tnew int[]{ 233, 239, 241 },\n\t\t\tnew int[]{ 251, 257, 263 },\n\t\t\tnew int[]{ 269, 271, 277 },\n\t\t\tnew int[]{ 281, 283, 293 },\n\t\t\tnew int[]{ 307, 311, 313 },\n\t\t\tnew int[]{ 317, 331, 337 },\n\t\t\tnew int[]{ 347, 349, 353 },\n\t\t\tnew int[]{ 359, 367, 373 },\n\t\t\tnew int[]{ 379, 383, 389 },\n\t\t\tnew int[]{ 397, 401, 409 },\n\t\t\tnew int[]{ 419, 421, 431 },\n\t\t\tnew int[]{ 433, 439, 443 },\n\t\t\tnew int[]{ 449, 457, 461 },\n\t\t\tnew int[]{ 463, 467, 479 },\n\t\t\tnew int[]{ 487, 491, 499 },\n\t\t\tnew int[]{ 503, 509, 521 },\n\t\t\tnew int[]{ 523, 541, 547 },\n\t\t\tnew int[]{ 557, 563, 569 },\n\t\t\tnew int[]{ 571, 577, 587 },\n\t\t\tnew int[]{ 593, 599, 601 },\n\t\t\tnew int[]{ 607, 613, 617 },\n\t\t\tnew int[]{ 619, 631, 641 },\n\t\t\tnew int[]{ 643, 647, 653 },\n\t\t\tnew int[]{ 659, 661, 673 },\n\t\t\tnew int[]{ 677, 683, 691 },\n\t\t\tnew int[]{ 701, 709, 719 },\n\t\t\tnew int[]{ 727, 733, 739 },\n\t\t\tnew int[]{ 743, 751, 757 },\n\t\t\tnew int[]{ 761, 769, 773 },\n\t\t\tnew int[]{ 787, 797, 809 },\n\t\t\tnew int[]{ 811, 821, 823 },\n\t\t\tnew int[]{ 827, 829, 839 },\n\t\t\tnew int[]{ 853, 857, 859 },\n\t\t\tnew int[]{ 863, 877, 881 },\n\t\t\tnew int[]{ 883, 887, 907 },\n\t\t\tnew int[]{ 911, 919, 929 },\n\t\t\tnew int[]{ 937, 941, 947 },\n\t\t\tnew int[]{ 953, 967, 971 },\n\t\t\tnew int[]{ 977, 983, 991 },\n\t\t\tnew int[]{ 997, 1009, 1013 },\n\t\t\tnew int[]{ 1019, 1021, 1031 },\n\t\t};\n\t\tprivate static int[] primeProducts;\n//\t\tprivate static BigInteger[] PrimeProducts;\n\t\tstatic BigInteger()\n\t\t{\n\t\t\tprimeProducts = new int[primeLists.Length];\n//\t\t\tPrimeProducts = new BigInteger[primeLists.Length];\n\t\t\tfor (int i = 0; i < primeLists.Length; ++i)\n\t\t\t{\n\t\t\t\tint[] primeList = primeLists[i];\n\t\t\t\tint product = 1;\n\t\t\t\tfor (int j = 0; j < primeList.Length; ++j)\n\t\t\t\t{\n\t\t\t\t\tproduct *= primeList[j];\n\t\t\t\t}\n\t\t\t\tprimeProducts[i] = product;\n//\t\t\t\tPrimeProducts[i] = BigInteger.ValueOf(product);\n\t\t\t}\n\t\t}\n\t\tprivate const long IMASK = 0xffffffffL;\n\t\tprivate static readonly ulong UIMASK = (ulong)IMASK;\n\t\tprivate static readonly int[] ZeroMagnitude = new int[0];\n\t\tpublic static readonly BigInteger Zero = new BigInteger(0, ZeroMagnitude, false);\n\t\tpublic static readonly BigInteger One = createUValueOf(1);\n\t\tpublic static readonly BigInteger Two = createUValueOf(2);\n\t\tpublic static readonly BigInteger Three = createUValueOf(3);\n\t\tpublic static readonly BigInteger Ten = createUValueOf(10);\n\t\tprivate int sign; // -1 means -ve; +1 means +ve; 0 means 0;\n\t\tprivate int[] magnitude; // array of ints with [0] being the most significant\n\t\tprivate int nBits = -1; // cache BitCount() value\n\t\tprivate int nBitLength = -1; // cache calcBitLength() value\n\t\tprivate long mQuote = -1L; // -m^(-1) mod b, b = 2^32 (see Montgomery mult.)\n\t\tprivate static readonly int chunk10 = 19;\n\t\tprivate static readonly BigInteger radix10 = ValueOf(10);\n\t\tprivate static readonly BigInteger radix10E = radix10.Pow(chunk10);\n\t\tprivate static readonly int chunk16 = 16;\n\t\tprivate static readonly BigInteger radix16 = ValueOf(16);\n\t\tprivate static readonly BigInteger radix16E = radix16.Pow(chunk16);\n\t\tprivate static readonly Random RandomSource = new Random();\n\t\tprivate BigInteger()\n\t\t{\n\t\t}\n\t\tprivate BigInteger(\n\t\t\tint\t\tsignum,\n\t\t\tint[]\tmag,\n\t\t\tbool\tcheckMag)\n\t\t{\n\t\t\tif (checkMag)\n\t\t\t{\n\t\t\t\tint i = 0;\n\t\t\t\twhile (i < mag.Length && mag[i] == 0)\n\t\t\t\t{\n\t\t\t\t\t++i;\n\t\t\t\t}\n\t\t\t\tif (i == mag.Length)\n\t\t\t\t{\n//\t\t\t\t\tthis.sign = 0;\n\t\t\t\t\tthis.magnitude = ZeroMagnitude;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.sign = signum;\n\t\t\t\t\tif (i == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.magnitude = mag;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// strip leading 0 words\n\t\t\t\t\t\tthis.magnitude = new int[mag.Length - i];\n\t\t\t\t\t\tArray.Copy(mag, i, this.magnitude, 0, this.magnitude.Length);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.sign = signum;\n\t\t\t\tthis.magnitude = mag;\n\t\t\t}\n\t\t}\n\t\tpublic BigInteger(\n\t\t\tstring value)\n\t\t\t: this(value, 10)\n\t\t{\n\t\t}\n\t\tpublic BigInteger(\n\t\t\tstring value,\n\t\t\tint radix)\n\t\t{\n\t\t\tif (value.Length == 0)\n\t\t\t{\n\t\t\t\tthrow new FormatException(\"Zero length BigInteger\");\n\t\t\t}\n\t\t\tNumberStyles style;\n\t\t\tint chunk;\n\t\t\tBigInteger r;\n\t\t\tBigInteger rE;\n\t\t\tswitch (radix)\n\t\t\t{\n\t\t\t\tcase 10:\n\t\t\t\t\t// This style seems to handle spaces and minus sign already (our processing redundant?)\n\t\t\t\t\tstyle = NumberStyles.Integer;\n\t\t\t\t\tchunk = chunk10;\n\t\t\t\t\tr = radix10;\n\t\t\t\t\trE = radix10E;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 16:\n\t\t\t\t\t// TODO Should this be HexNumber?\n\t\t\t\t\tstyle = NumberStyles.AllowHexSpecifier;\n\t\t\t\t\tchunk = chunk16;\n\t\t\t\t\tr = radix16;\n\t\t\t\t\trE = radix16E;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new FormatException(\"Only base 10 or 16 allowed\");\n\t\t\t}\n\t\t\tint index = 0;\n\t\t\tsign = 1;\n\t\t\tif (value[0] == '-')\n\t\t\t{\n\t\t\t\tif (value.Length == 1)\n\t\t\t\t{\n\t\t\t\t\tthrow new FormatException(\"Zero length BigInteger\");\n\t\t\t\t}\n\t\t\t\tsign = -1;\n\t\t\t\tindex = 1;\n\t\t\t}\n\t\t\t// strip leading zeros from the string value\n\t\t\twhile (index < value.Length && Int32.Parse(value[index].ToString(), style) == 0)\n\t\t\t{\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tif (index >= value.Length)\n\t\t\t{\n\t\t\t\t// zero value - we're done\n\t\t\t\tsign = 0;\n\t\t\t\tmagnitude = ZeroMagnitude;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//////\n\t\t\t// could we work out the max number of ints required to store\n\t\t\t// value.Length digits in the given base, then allocate that\n\t\t\t// storage in one hit?, then Generate the magnitude in one hit too?\n\t\t\t//////\n\t\t\tBigInteger b = Zero;\n\t\t\tint next = index + chunk;\n\t\t\tif (next <= value.Length)\n\t\t\t{\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tstring s = value.Substring(index, chunk);\n\t\t\t\t\tulong i = UInt64.Parse(s, style);\n\t\t\t\t\tBigInteger bi = createUValueOf(i);\n\t\t\t\t\tif (radix == 16)\n\t\t\t\t\t{\n\t\t\t\t\t\tb = b.ShiftLeft(chunk << 2);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tb = b.Multiply(rE);\n\t\t\t\t\t}\n\t\t\t\t\tb = b.Add(bi);\n\t\t\t\t\tindex = next;\n\t\t\t\t\tnext += chunk;\n\t\t\t\t}\n\t\t\t\twhile (next <= value.Length);\n\t\t\t}\n\t\t\tif (index < value.Length)\n\t\t\t{\n\t\t\t\tstring s = value.Substring(index);\n\t\t\t\tulong i = UInt64.Parse(s, style);\n\t\t\t\tBigInteger bi = createUValueOf(i);\n\t\t\t\tif (b.sign > 0)\n\t\t\t\t{\n\t\t\t\t\tif (radix == 16)\n\t\t\t\t\t{\n\t\t\t\t\t\tb = b.ShiftLeft(s.Length << 2);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tb = b.Multiply(r.Pow(s.Length));\n\t\t\t\t\t}\n\t\t\t\t\tb = b.Add(bi);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tb = bi;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Note: This is the previous (slower) algorithm\n\t\t\t//\t\t\twhile (index < value.Length)\n\t\t\t//            {\n\t\t\t//\t\t\t\tchar c = value[index];\n\t\t\t//\t\t\t\tstring s = c.ToString();\n\t\t\t//\t\t\t\tint i = Int32.Parse(s, style);\n\t\t\t//\n\t\t\t//                b = b.Multiply(r).Add(ValueOf(i));\n\t\t\t//                index++;\n\t\t\t//            }\n\t\t\tmagnitude = b.magnitude;\n\t\t}\n\t\tpublic BigInteger(\n\t\t\tbyte[] bytes)\n\t\t{\n\t\t\tif (bytes.Length == 0)\n\t\t\t{\n\t\t\t\tthrow new FormatException(\"Zero length BigInteger\");\n\t\t\t}\n\t\t\tif ((sbyte)bytes[0] < 0)\n\t\t\t{\n\t\t\t\tthis.sign = -1;\n\t\t\t\tint iBval;\n\t\t\t\t// strip leading sign bytes\n\t\t\t\tfor (iBval = 0; iBval < bytes.Length && ((sbyte)bytes[iBval] == -1); iBval++)\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\tif (iBval >= bytes.Length)\n\t\t\t\t{\n\t\t\t\t\tthis.magnitude = One.magnitude;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint numBytes = bytes.Length - iBval;\n\t\t\t\t\tbyte[] inverse = new byte[numBytes];\n\t\t\t\t\tint index = 0;\n\t\t\t\t\twhile (index < numBytes)\n\t\t\t\t\t{\n\t\t\t\t\t\tinverse[index++] = (byte)~bytes[iBval++];\n\t\t\t\t\t}\n\t\t\t\t\tDebug.Assert(iBval == bytes.Length);\n\t\t\t\t\twhile (inverse[--index] == byte.MaxValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tinverse[index] = byte.MinValue;\n\t\t\t\t\t}\n\t\t\t\t\tinverse[index]++;\n\t\t\t\t\tthis.magnitude = MakeMagnitude(inverse);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// strip leading zero bytes and return magnitude bytes\n\t\t\t\tthis.magnitude = MakeMagnitude(bytes);\n\t\t\t\tthis.sign = this.magnitude.Length > 0 ? 1 : 0;\n\t\t\t}\n\t\t}\n\t\tprivate static int[] MakeMagnitude(\n\t\t\tbyte[] bytes)\n\t\t{\n\t\t\tint firstSignificant;\n\t\t\t// strip leading zeros\n\t\t\tfor (firstSignificant = 0; firstSignificant < bytes.Length\n\t\t\t\t&& bytes[firstSignificant] == 0; firstSignificant++)\n\t\t\t{\n\t\t\t}\n\t\t\tif (firstSignificant >= bytes.Length)\n\t\t\t{\n\t\t\t\treturn ZeroMagnitude;\n\t\t\t}\n\t\t\tint nInts = (bytes.Length - firstSignificant + 3) / BytesPerInt;\n\t\t\tint bCount = (bytes.Length - firstSignificant) % BytesPerInt;\n\t\t\tif (bCount == 0)\n\t\t\t{\n\t\t\t\tbCount = BytesPerInt;\n\t\t\t}\n\t\t\tif (nInts < 1)\n\t\t\t{\n\t\t\t\treturn ZeroMagnitude;\n\t\t\t}\n\t\t\tint[] mag = new int[nInts];\n\t\t\tint v = 0;\n\t\t\tint magnitudeIndex = 0;\n\t\t\tfor (int i = firstSignificant; i < bytes.Length; ++i)\n\t\t\t{\n\t\t\t\tv <<= 8;\n\t\t\t\tv |= bytes[i] & 0xff;\n\t\t\t\tbCount--;\n\t\t\t\tif (bCount <= 0)\n\t\t\t\t{\n\t\t\t\t\tmag[magnitudeIndex] = v;\n\t\t\t\t\tmagnitudeIndex++;\n\t\t\t\t\tbCount = BytesPerInt;\n\t\t\t\t\tv = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (magnitudeIndex < mag.Length)\n\t\t\t{\n\t\t\t\tmag[magnitudeIndex] = v;\n\t\t\t}\n\t\t\treturn mag;\n\t\t}\n\t\tpublic BigInteger(\n\t\t\tint\t\tsign,\n\t\t\tbyte[]\tvalue)\n\t\t{\n\t\t\tif (sign < -1 || sign > 1)\n\t\t\t{\n\t\t\t\tthrow new FormatException(\"Invalid sign value\");\n\t\t\t}\n\t\t\tif (sign == 0)\n\t\t\t{\n//\t\t\t\tthis.sign = 0;\n\t\t\t\tthis.magnitude = ZeroMagnitude;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// copy bytes\n\t\t\tthis.magnitude = MakeMagnitude(value);\n\t\t\tthis.sign = this.magnitude.Length < 1 ? 0 : sign;\n\t\t}\n\t\tpublic BigInteger(\n\t\t\tint\t\tsizeInBits,\n\t\t\tRandom\trandom)\n\t\t{\n\t\t\tif (sizeInBits < 0)\n\t\t\t{\n\t\t\t\tthrow new ArgumentException(\"sizeInBits must be non-negative\");\n\t\t\t}\n\t\t\tthis.nBits = -1;\n\t\t\tthis.nBitLength = -1;\n\t\t\tif (sizeInBits == 0)\n\t\t\t{\n//\t\t\t\tthis.sign = 0;\n\t\t\t\tthis.magnitude = ZeroMagnitude;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint nBytes = (sizeInBits + BitsPerByte - 1) / BitsPerByte;\n\t\t\tbyte[] b = new byte[nBytes];\n\t\t\trandom.NextBytes(b);\n\t\t\t// strip off any excess bits in the MSB\n\t\t\tb[0] &= rndMask[BitsPerByte * nBytes - sizeInBits];\n\t\t\tthis.magnitude = MakeMagnitude(b);\n\t\t\tthis.sign = this.magnitude.Length < 1 ? 0 : 1;\n\t\t}\n\t\tprivate const int BitsPerByte = 8;\n\t\tprivate const int BytesPerInt = 4;\n\t\tprivate static readonly byte[] rndMask = { 255, 127, 63, 31, 15, 7, 3, 1 };\n\t\tpublic BigInteger(\n\t\t\tint\t\tbitLength,\n\t\t\tint\t\tcertainty,\n\t\t\tRandom\trandom)\n\t\t{\n\t\t\tif (bitLength < 2)\n\t\t\t{\n\t\t\t\tthrow new ArithmeticException(\"bitLength < 2\");\n\t\t\t}\n\t\t\tthis.sign = 1;\n\t\t\tthis.nBitLength = bitLength;\n\t\t\tif (bitLength == 2)\n\t\t\t{\n\t\t\t\tthis.magnitude = random.Next(2) == 0\n\t\t\t\t\t?\tTwo.magnitude\n\t\t\t\t\t:\tThree.magnitude;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint nBytes = (bitLength + 7) / BitsPerByte;\n\t\t\tint xBits = BitsPerByte * nBytes - bitLength;\n\t\t\tbyte mask = rndMask[xBits];\n\t\t\tbyte[] b = new byte[nBytes];\n\t\t\tfor (;;)\n\t\t\t{\n\t\t\t\trandom.NextBytes(b);\n\t\t\t\t// strip off any excess bits in the MSB\n\t\t\t\tb[0] &= mask;\n\t\t\t\t// ensure the leading bit is 1 (to meet the strength requirement)\n\t\t\t\tb[0] |= (byte)(1 << (7 - xBits));\n\t\t\t\t// ensure the trailing bit is 1 (i.e. must be odd)\n\t\t\t\tb[nBytes - 1] |= 1;\n\t\t\t\tthis.magnitude = MakeMagnitude(b);\n\t\t\t\tthis.nBits = -1;\n\t\t\t\tthis.mQuote = -1L;\n\t\t\t\tif (certainty < 1)\n\t\t\t\t\tbreak;\n\t\t\t\tif (CheckProbablePrime(certainty, random))\n\t\t\t\t\tbreak;\n\t\t\t\tif (bitLength > 32)\n\t\t\t\t{\n\t\t\t\t\tfor (int rep = 0; rep < 10000; ++rep)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.magnitude[this.magnitude.Length - 1] ^= ((random.Next() + 1) << 1);\n\t\t\t\t\t\tthis.mQuote = -1L;\n\t\t\t\t\t\tif (CheckProbablePrime(certainty, random))\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic BigInteger Abs()\n\t\t{\n\t\t\treturn sign >= 0 ? this : Negate();\n\t\t}\n\t\t/**\n\t\t * return a = a + b - b preserved.\n\t\t */\n\t\tprivate static int[] AddMagnitudes(\n\t\t\tint[] a,\n\t\t\tint[] b)\n\t\t{\n\t\t\tint tI = a.Length - 1;\n\t\t\tint vI = b.Length - 1;\n\t\t\tlong m = 0;\n\t\t\twhile (vI >= 0)\n\t\t\t{\n\t\t\t\tm += ((long)(uint)a[tI] + (long)(uint)b[vI--]);\n\t\t\t\ta[tI--] = (int)m;\n\t\t\t\tm = (long)((ulong)m >> 32);\n\t\t\t}\n\t\t\tif (m != 0)\n\t\t\t{\n\t\t\t\twhile (tI >= 0 && ++a[tI--] == 0)\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn a;\n\t\t}\n\t\tpublic BigInteger Add(\n\t\t\tBigInteger value)\n\t\t{\n\t\t\tif (this.sign == 0)\n\t\t\t\treturn value;\n\t\t\tif (this.sign != value.sign)\n\t\t\t{\n\t\t\t\tif (value.sign == 0)\n\t\t\t\t\treturn this;\n\t\t\t\tif (value.sign < 0)\n\t\t\t\t\treturn Subtract(value.Negate());\n\t\t\t\treturn value.Subtract(Negate());\n\t\t\t}\n\t\t\treturn AddToMagnitude(value.magnitude);\n\t\t}\n\t\tprivate BigInteger AddToMagnitude(\n\t\t\tint[] magToAdd)\n\t\t{\n\t\t\tint[] big, small;\n\t\t\tif (this.magnitude.Length < magToAdd.Length)\n\t\t\t{\n\t\t\t\tbig = magToAdd;\n\t\t\t\tsmall = this.magnitude;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbig = this.magnitude;\n\t\t\t\tsmall = magToAdd;\n\t\t\t}\n\t\t\t// Conservatively avoid over-allocation when no overflow possible\n\t\t\tuint limit = uint.MaxValue;\n\t\t\tif (big.Length == small.Length)\n\t\t\t\tlimit -= (uint) small[0];\n\t\t\tbool possibleOverflow = (uint) big[0] >= limit;\n\t\t\tint[] bigCopy;\n\t\t\tif (possibleOverflow)\n\t\t\t{\n\t\t\t\tbigCopy = new int[big.Length + 1];\n\t\t\t\tbig.CopyTo(bigCopy, 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbigCopy = (int[]) big.Clone();\n\t\t\t}\n\t\t\tbigCopy = AddMagnitudes(bigCopy, small);\n\t\t\treturn new BigInteger(this.sign, bigCopy, possibleOverflow);\n\t\t}\n\t\tpublic BigInteger And(\n\t\t\tBigInteger value)\n\t\t{\n\t\t\tif (this.sign == 0 || value.sign == 0)\n\t\t\t{\n\t\t\t\treturn Zero;\n\t\t\t}\n\t\t\tint[] aMag = this.sign > 0\n\t\t\t\t? this.magnitude\n\t\t\t\t: Add(One).magnitude;\n\t\t\tint[] bMag = value.sign > 0\n\t\t\t\t? value.magnitude\n\t\t\t\t: value.Add(One).magnitude;\n\t\t\tbool resultNeg = sign < 0 && value.sign < 0;\n\t\t\tint resultLength = System.Math.Max(aMag.Length, bMag.Length);\n\t\t\tint[] resultMag = new int[resultLength];\n\t\t\tint aStart = resultMag.Length - aMag.Length;\n\t\t\tint bStart = resultMag.Length - bMag.Length;\n\t\t\tfor (int i = 0; i < resultMag.Length; ++i)\n\t\t\t{\n\t\t\t\tint aWord = i >= aStart ? aMag[i - aStart] : 0;\n\t\t\t\tint bWord = i >= bStart ? bMag[i - bStart] : 0;\n\t\t\t\tif (this.sign < 0)\n\t\t\t\t{\n\t\t\t\t\taWord = ~aWord;\n\t\t\t\t}\n\t\t\t\tif (value.sign < 0)\n\t\t\t\t{\n\t\t\t\t\tbWord = ~bWord;\n\t\t\t\t}\n\t\t\t\tresultMag[i] = aWord & bWord;\n\t\t\t\tif (resultNeg)\n\t\t\t\t{\n\t\t\t\t\tresultMag[i] = ~resultMag[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tBigInteger result = new BigInteger(1, resultMag, true);\n\t\t\t// TODO Optimise this case\n\t\t\tif (resultNeg)\n\t\t\t{\n\t\t\t\tresult = result.Not();\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\tpublic BigInteger AndNot(\n\t\t\tBigInteger value)\n\t\t{\n\t\t\treturn And(value.Not());\n\t\t}\n\t\tpublic int BitCount\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (nBits == -1)\n\t\t\t\t{\n\t\t\t\t\tnBits = 0;\n\t\t\t\t\tfor (int i = 0; i < magnitude.Length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnBits += bitCounts[magnitude[i] & 0xff];\n\t\t\t\t\t\tnBits += bitCounts[(magnitude[i] >> 8) & 0xff];\n\t\t\t\t\t\tnBits += bitCounts[(magnitude[i] >> 16) & 0xff];\n\t\t\t\t\t\tnBits += bitCounts[(magnitude[i] >> 24) & 0xff];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn nBits;\n\t\t\t}\n\t\t}\n\t\tprivate readonly static byte[] bitCounts =\n\t\t{\n\t\t\t0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1,\n\t\t\t2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4,\n\t\t\t4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3,\n\t\t\t4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5,\n\t\t\t3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2,\n\t\t\t3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3,\n\t\t\t3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6,\n\t\t\t7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6,\n\t\t\t5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5,\n\t\t\t6, 6, 7, 6, 7, 7, 8\n\t\t};\n\t\tprivate int calcBitLength(\n\t\t\tint\t\tindx,\n\t\t\tint[]\tmag)\n\t\t{\n\t\t\tif (mag.Length == 0)\n\t\t\t\treturn 0;\n\t\t\twhile (indx != mag.Length && mag[indx] == 0)\n\t\t\t{\n\t\t\t\tindx++;\n\t\t\t}\n\t\t\tif (indx == mag.Length)\n\t\t\t\treturn 0;\n\t\t\t// bit length for everything after the first int\n\t\t\tint bitLength = 32 * ((mag.Length - indx) - 1);\n\t\t\t// and determine bitlength of first int\n\t\t\tbitLength += BitLen(mag[indx]);\n\t\t\tif (sign < 0)\n\t\t\t{\n\t\t\t\t// Check if magnitude is a power of two\n\t\t\t\tbool pow2 = ((bitCounts[mag[indx] & 0xff])\n\t\t\t\t\t+ (bitCounts[(mag[indx] >> 8) & 0xff])\n\t\t\t\t\t+ (bitCounts[(mag[indx] >> 16) & 0xff]) + (bitCounts[(mag[indx] >> 24) & 0xff])) == 1;\n\t\t\t\tfor (int i = indx + 1; i < mag.Length && pow2; i++)\n\t\t\t\t{\n\t\t\t\t\tpow2 = (mag[i] == 0);\n\t\t\t\t}\n\t\t\t\tbitLength -= (pow2 ? 1 : 0);\n\t\t\t}\n\t\t\treturn bitLength;\n\t\t}\n\t\tpublic int BitLength\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (nBitLength == -1)\n\t\t\t\t{\n\t\t\t\t\tnBitLength = sign == 0\n\t\t\t\t\t\t? 0\n\t\t\t\t\t\t: calcBitLength(0, magnitude);\n\t\t\t\t}\n\t\t\t\treturn nBitLength;\n\t\t\t}\n\t\t}\n\t\t//\n\t\t// BitLen(value) is the number of bits in value.\n\t\t//\n\t\tprivate static int BitLen(\n\t\t\tint w)\n\t\t{\n\t\t\t// Binary search - decision tree (5 tests, rarely 6)\n\t\t\treturn (w < 1 << 15 ? (w < 1 << 7\n\t\t\t\t? (w < 1 << 3 ? (w < 1 << 1\n\t\t\t\t? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1)\n\t\t\t\t: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5\n\t\t\t\t? (w < 1 << 4 ? 4 : 5)\n\t\t\t\t: (w < 1 << 6 ? 6 : 7)))\n\t\t\t\t: (w < 1 << 11\n\t\t\t\t? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11))\n\t\t\t\t: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19\n\t\t\t\t? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19))\n\t\t\t\t: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27\n\t\t\t\t? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27))\n\t\t\t\t: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));\n\t\t}\n//\t\tprivate readonly static byte[] bitLengths =\n//\t\t{\n//\t\t\t0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4,\n//\t\t\t5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n//\t\t\t6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n//\t\t\t7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n//\t\t\t7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8,\n//\t\t\t8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n//\t\t\t8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n//\t\t\t8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n//\t\t\t8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n//\t\t\t8, 8, 8, 8, 8, 8, 8, 8\n//\t\t};\n\t\tpublic int CompareTo(\n\t\t\tobject obj)\n\t\t{\n\t\t\treturn CompareTo((BigInteger)obj);\n\t\t}\n\t\t/**\n\t\t * unsigned comparison on two arrays - note the arrays may\n\t\t * start with leading zeros.\n\t\t */\n\t\tprivate static int CompareTo(\n\t\t\tint\t\txIndx,\n\t\t\tint[]\tx,\n\t\t\tint\t\tyIndx,\n\t\t\tint[]\ty)\n\t\t{\n\t\t\twhile (xIndx != x.Length && x[xIndx] == 0)\n\t\t\t{\n\t\t\t\txIndx++;\n\t\t\t}\n\t\t\twhile (yIndx != y.Length && y[yIndx] == 0)\n\t\t\t{\n\t\t\t\tyIndx++;\n\t\t\t}\n\t\t\tint diff = (x.Length - y.Length) - (xIndx - yIndx);\n\t\t\tif (diff < 0)\n\t\t\t\treturn -1;\n\t\t\tif (diff > 0)\n\t\t\t\treturn 1;\n\t\t\t// lengths of magnitudes the same, test the magnitude values\n\t\t\twhile (xIndx < x.Length)\n\t\t\t{\n\t\t\t\tuint v1 = (uint)x[xIndx++];\n\t\t\t\tuint v2 = (uint)y[yIndx++];\n\t\t\t\tif (v1 != v2)\n\t\t\t\t\treturn v1 < v2 ? - 1: 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\tpublic int CompareTo(\n\t\t\tBigInteger value)\n\t\t{\n\t\t\treturn sign < value.sign ? -1\n\t\t\t\t: sign > value.sign ? 1\n\t\t\t\t: sign == 0 ? 0\n\t\t\t\t: sign * CompareTo(0, magnitude, 0, value.magnitude);\n\t\t}\n\t\t/**\n\t\t * return z = x / y - done in place (z value preserved, x contains the\n\t\t * remainder)\n\t\t */\n\t\tprivate int[] Divide(\n\t\t\tint[]\tx,\n\t\t\tint[]\ty)\n\t\t{\n\t\t\tint xStart = 0;\n\t\t\twhile (xStart < x.Length && x[xStart] == 0)\n\t\t\t{\n\t\t\t\txStart++;\n\t\t\t}\n\t\t\tint yStart = 0;\n\t\t\twhile (yStart < y.Length && y[yStart] == 0)\n\t\t\t{\n\t\t\t\tyStart++;\n\t\t\t}\n\t\t\tint xyCmp = CompareTo(xStart, x, yStart, y);\n\t\t\tint[] count;\n\t\t\tif (xyCmp > 0)\n\t\t\t{\n\t\t\t\tint[] c;\n\t\t\t\tint cBitLength = calcBitLength(yStart, y);\n\t\t\t\tint firstShift = calcBitLength(xStart, x) - cBitLength;\n\t\t\t\tint cStart;\n\t\t\t\tif (firstShift > 1)\n\t\t\t\t{\n\t\t\t\t\t// TODO Take another look at this block...\n\t\t\t\t\tc = ShiftLeft(y, firstShift - 1);\n\t\t\t\t\tcount = ShiftLeft(One.magnitude, firstShift - 1);\n\t\t\t\t\tif (firstShift % 32 == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Special case where the shift is the size of an int.\n\t\t\t\t\t\tint[] countSpecial = new int[firstShift / 32 + 1];\n\t\t\t\t\t\tArray.Copy(count, 0, countSpecial, 1, countSpecial.Length - 1);\n\t\t\t\t\t\tcountSpecial[0] = 0;\n\t\t\t\t\t\tcount = countSpecial;\n\t\t\t\t\t}\n\t\t\t\t\tcStart = 0;\n\t\t\t\t\tcBitLength += (firstShift - 1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcount = new int[] { 1 };\n\t\t\t\t\tc = (int[]) y.Clone();\n\t\t\t\t\tcStart = yStart;\n\t\t\t\t}\n\t\t\t\tSubtract(xStart, x, cStart, c);\n\t\t\t\tint[] iCount = (int[])count.Clone();\n\t\t\t\tint iCountStart = 0;\n\t\t\t\tfor (;;)\n\t\t\t\t{\n\t\t\t\t\twhile (xStart < x.Length && x[xStart] == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\txStart++;\n\t\t\t\t\t}\n\t\t\t\t\twhile (cStart < c.Length && c[cStart] == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcStart++;\n\t\t\t\t\t}\n\t\t\t\t\twhile (CompareTo(xStart, x, cStart, c) >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tSubtract(xStart, x, cStart, c);\n\t\t\t\t\t\twhile (xStart < x.Length && x[xStart] == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\txStart++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tAddMagnitudes(count, iCount);\n\t\t\t\t\t}\n\t\t\t\t\txyCmp = CompareTo(xStart, x, yStart, y);\n\t\t\t\t\tif (xyCmp > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tint secondShift = cBitLength - calcBitLength(xStart, x);\n\t\t\t\t\t\tif (secondShift < 2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc = ShiftRightOneInPlace(cStart, c);\n\t\t\t\t\t\t\t--cBitLength;\n\t\t\t\t\t\t\tiCount = ShiftRightOneInPlace(iCountStart, iCount);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc = ShiftRightInPlace(cStart, c, secondShift);\n\t\t\t\t\t\t\tcBitLength -= secondShift;\n\t\t\t\t\t\t\tiCount = ShiftRightInPlace(iCountStart, iCount, secondShift);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (iCount[iCountStart] == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tiCountStart++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (xyCmp == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAddMagnitudes(count, One.magnitude);\n\t\t\t\t\t\t\tArray.Clear(x, xStart, x.Length - xStart);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcount = new int[1];\n\t\t\t\tif (xyCmp == 0)\n\t\t\t\t{\n\t\t\t\t\tcount[0] = 1;\n\t\t\t\t\tArray.Clear(x, 0, x.Length);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn count;\n\t\t}\n\t\tpublic BigInteger Divide(\n\t\t\tBigInteger value)\n\t\t{\n\t\t\tif (value.sign == 0)\n\t\t\t\tthrow new ArithmeticException(\"Division by zero error\");\n\t\t\tif (sign == 0)\n\t\t\t\treturn Zero;\n//\t\t\tif (value.Abs().Equals(One))\n\t\t\tif (value.magnitude.Length == 1 && value.magnitude[0] == 1)\n\t\t\t{\n\t\t\t\treturn value.sign > 0 ? this : Negate();\n\t\t\t}\n\t\t\tint[] mag = (int[]) this.magnitude.Clone();\n\t\t\treturn new BigInteger(this.sign * value.sign, Divide(mag, value.magnitude), true);\n\t\t}\n\t\tpublic BigInteger[] DivideAndRemainder(\n\t\t\tBigInteger value)\n\t\t{\n\t\t\tif (value.sign == 0)\n\t\t\t\tthrow new ArithmeticException(\"Division by zero error\");\n\t\t\tBigInteger[] biggies = new BigInteger[2];\n\t\t\tif (sign == 0)\n\t\t\t{\n\t\t\t\tbiggies[0] = Zero;\n\t\t\t\tbiggies[1] = Zero;\n\t\t\t}\n//\t\t\telse if (value.Abs().Equals(One)) // TODO Optimise this test?\n\t\t\telse if (value.magnitude.Length == 1 && value.magnitude[0] == 1)\n\t\t\t{\n\t\t\t\tbiggies[0] = value.sign > 0 ? this : Negate();\n\t\t\t\tbiggies[1] = Zero;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint[] remainder = (int[]) this.magnitude.Clone();\n\t\t\t\tint[] quotient = Divide(remainder, value.magnitude);\n\t\t\t\tbiggies[0] = new BigInteger(this.sign * value.sign, quotient, true);\n\t\t\t\tbiggies[1] = new BigInteger(this.sign, remainder, true);\n\t\t\t}\n\t\t\treturn biggies;\n\t\t}\n\t\tpublic override bool Equals(\n\t\t\tobject obj)\n\t\t{\n\t\t\tif (obj == this)\n\t\t\t\treturn true;\n\t\t\tBigInteger biggie = obj as BigInteger;\n\t\t\tif (biggie == null)\n\t\t\t\treturn false;\n\t\t\tif (biggie.sign != sign || biggie.magnitude.Length != magnitude.Length)\n\t\t\t\treturn false;\n\t\t\tfor (int i = 0; i < magnitude.Length; i++)\n\t\t\t{\n\t\t\t\tif (biggie.magnitude[i] != magnitude[i])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic BigInteger Gcd(\n\t\t\tBigInteger value)\n\t\t{\n\t\t\tif (value.sign == 0)\n\t\t\t\treturn Abs();\n\t\t\tif (sign == 0)\n\t\t\t\treturn value.Abs();\n\t\t\tBigInteger r;\n\t\t\tBigInteger u = this;\n\t\t\tBigInteger v = value;\n\t\t\twhile (v.sign != 0)\n\t\t\t{\n\t\t\t\tr = u.Mod(v);\n\t\t\t\tu = v;\n\t\t\t\tv = r;\n\t\t\t}\n\t\t\treturn u;\n\t\t}\n\t\tpublic override int GetHashCode()\n\t\t{\n\t\t\tint hc = magnitude.Length;\n\t\t\tif (magnitude.Length > 0)\n\t\t\t{\n\t\t\t\thc ^= magnitude[0];\n\t\t\t\tif (magnitude.Length > 1)\n\t\t\t\t{\n\t\t\t\t\thc ^= magnitude[magnitude.Length - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sign < 0 ? ~hc : hc;\n\t\t}\n\t\t// TODO Make public?\n\t\tprivate BigInteger Inc()\n\t\t{\n\t\t\tif (this.sign == 0)\n\t\t\t\treturn One;\n\t\t\tif (this.sign < 0)\n\t\t\t\treturn new BigInteger(-1, doSubBigLil(this.magnitude, One.magnitude), true);\n\t\t\treturn AddToMagnitude(One.magnitude);\n\t\t}\n\t\tpublic int IntValue\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn sign == 0 ? 0\n\t\t\t\t\t: sign > 0 ? magnitude[magnitude.Length - 1]\n\t\t\t\t\t: -magnitude[magnitude.Length - 1];\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * return whether or not a BigInteger is probably prime with a\n\t\t * probability of 1 - (1/2)**certainty.\n\t\t * <p>From Knuth Vol 2, pg 395.</p>\n\t\t */\n\t\tpublic bool IsProbablePrime(\n\t\t\tint certainty)\n\t\t{\n\t\t\tif (certainty <= 0)\n\t\t\t\treturn true;\n\t\t\tBigInteger n = Abs();\n\t\t\tif (!n.TestBit(0))\n\t\t\t\treturn n.Equals(Two);\n\t\t\tif (n.Equals(One))\n\t\t\t\treturn false;\n\t\t\treturn n.CheckProbablePrime(certainty, RandomSource);\n\t\t}\n\t\tprivate bool CheckProbablePrime(\n\t\t\tint\t\tcertainty,\n\t\t\tRandom\trandom)\n\t\t{\n\t\t\tDebug.Assert(certainty > 0);\n\t\t\tDebug.Assert(CompareTo(Two) > 0);\n\t\t\tDebug.Assert(TestBit(0));\n\t\t\t// Try to reduce the penalty for really small numbers\n\t\t\tint numLists = System.Math.Min(BitLength - 2, primeLists.Length);\n\t\t\tfor (int i = 0; i < numLists; ++i)\n\t\t\t{\n\t\t\t\tint test = Remainder(primeProducts[i]);\n\t\t\t\tint[] primeList = primeLists[i];\n\t\t\t\tfor (int j = 0; j < primeList.Length; ++j)\n\t\t\t\t{\n\t\t\t\t\tint prime = primeList[j];\n\t\t\t\t\tint qRem = test % prime;\n\t\t\t\t\tif (qRem == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// We may find small numbers in the list\n\t\t\t\t\t\treturn BitLength < 16 && IntValue == prime;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// TODO Special case for < 10^16 (RabinMiller fixed list)\n//\t\t\tif (BitLength < 30)\n//\t\t\t{\n//\t\t\t\tRabinMiller against 2, 3, 5, 7, 11, 13, 23 is sufficient\n//\t\t\t}\n\t\t\t// TODO Is it worth trying to create a hybrid of these two?\n\t\t\treturn RabinMillerTest(certainty, random);\n//\t\t\treturn SolovayStrassenTest(certainty, random);\n//\t\t\tbool rbTest = RabinMillerTest(certainty, random);\n//\t\t\tbool ssTest = SolovayStrassenTest(certainty, random);\n//\n//\t\t\tDebug.Assert(rbTest == ssTest);\n//\n//\t\t\treturn rbTest;\n\t\t}\n\t\tinternal bool RabinMillerTest(\n\t\t\tint\t\tcertainty,\n\t\t\tRandom\trandom)\n\t\t{\n\t\t\tDebug.Assert(certainty > 0);\n\t\t\tDebug.Assert(CompareTo(Two) > 0);\n\t\t\tDebug.Assert(TestBit(0));\n\t\t\t// let n = 1 + d . 2^s\n\t\t\tBigInteger n = this;\n\t\t\tint bitLengthOfN = n.BitLength;\n\t\t\tBigInteger nMinusOne = n.Subtract(One);\n\t\t\tint k = nMinusOne.GetLowestSetBit();\n\t\t\tBigInteger q = nMinusOne.ShiftRight(k);\n\t\t\tDebug.Assert(k >= 1);\n\t\t\tdo\n\t\t\t{\n\t\t\t\t// TODO Make a method for random BigIntegers in range 0 < x < n)\n\t\t\t\t// - Method can be optimized by only replacing examined bits at each trial\n\t\t\t\tBigInteger x;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tx = new BigInteger(bitLengthOfN, random);\n\t\t\t\t}\n\t\t\t\t// NB: Spec says 0 < x < n, but 1 is trivial\n\t\t\t\twhile (x.CompareTo(One) <= 0 || x.CompareTo(n) >= 0);\n\t\t\t\tBigInteger y = x.ModPow(q, n);\n\t\t\t\tif (!y.Equals(One))\n\t\t\t\t{\n\t\t\t\t\t// y already = x.ModPow(d << 0, n)\n\t\t\t\t\tint r = 0;\n\t\t\t\t\twhile (!y.Equals(nMinusOne))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (++r == k)\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t// y becomes x.ModPow(d << r, n)\n\t\t\t\t\t\ty = y.ModPow(Two, n);\n\t\t\t\t\t\t// TODO Confirm whether y.Equals(One) is worth testing here\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcertainty -= 2; // composites pass for only 1/4 possible 'x'\n\t\t\t}\n\t\t\twhile (certainty > 0);\n\t\t\treturn true;\n\t\t}\n//\t\tprivate bool SolovayStrassenTest(\n//\t\t\tint\t\tcertainty,\n//\t\t\tRandom\trandom)\n//\t\t{\n//\t\t\tDebug.Assert(certainty > 0);\n//\t\t\tDebug.Assert(CompareTo(Two) > 0);\n//\t\t\tDebug.Assert(TestBit(0));\n//\n//\t\t\tBigInteger n = this;\n//\t\t\tBigInteger nMinusOne = n.Subtract(One);\n//\t\t\tBigInteger e = nMinusOne.ShiftRight(1);\n//\n//\t\t\tdo\n//\t\t\t{\n//\t\t\t\tBigInteger a;\n//\t\t\t\tdo\n//\t\t\t\t{\n//\t\t\t\t\ta = new BigInteger(nBitLength, random);\n//\t\t\t\t}\n//\t\t\t\t// NB: Spec says 0 < x < n, but 1 is trivial\n//\t\t\t\twhile (a.CompareTo(One) <= 0 || a.CompareTo(n) >= 0);\n//\n//\n//\t\t\t\t// TODO Check this is redundant given the way Jacobi() works?\n////\t\t\t\tif (!a.Gcd(n).Equals(One))\n////\t\t\t\t\treturn false;\n//\n//\t\t\t\tint x = Jacobi(a, n);\n//\n//\t\t\t\tif (x == 0)\n//\t\t\t\t\treturn false;\n//\n//\t\t\t\tBigInteger check = a.ModPow(e, n);\n//\n//\t\t\t\tif (x == 1 && !check.Equals(One))\n//\t\t\t\t\treturn false;\n//\n//\t\t\t\tif (x == -1 && !check.Equals(nMinusOne))\n//\t\t\t\t\treturn false;\n//\n//\t\t\t\t--certainty;\n//\t\t\t}\n//\t\t\twhile (certainty > 0);\n//\n//\t\t\treturn true;\n//\t\t}\n//\n//\t\tprivate static int Jacobi(\n//\t\t\tBigInteger\ta,\n//\t\t\tBigInteger\tb)\n//\t\t{\n//\t\t\tDebug.Assert(a.sign >= 0);\n//\t\t\tDebug.Assert(b.sign > 0);\n//\t\t\tDebug.Assert(b.TestBit(0));\n//\t\t\tDebug.Assert(a.CompareTo(b) < 0);\n//\n//\t\t\tint totalS = 1;\n//\t\t\tfor (;;)\n//\t\t\t{\n//\t\t\t\tif (a.sign == 0)\n//\t\t\t\t\treturn 0;\n//\n//\t\t\t\tif (a.Equals(One))\n//\t\t\t\t\tbreak;\n//\n//\t\t\t\tint e = a.GetLowestSetBit();\n//\n//\t\t\t\tint bLsw = b.magnitude[b.magnitude.Length - 1];\n//\t\t\t\tif ((e & 1) != 0 && ((bLsw & 7) == 3 || (bLsw & 7) == 5))\n//\t\t\t\t\ttotalS = -totalS;\n//\n//\t\t\t\t// TODO Confirm this is faster than later a1.Equals(One) test\n//\t\t\t\tif (a.BitLength == e + 1)\n//\t\t\t\t\tbreak;\n//\t\t\t\tBigInteger a1 = a.ShiftRight(e);\n////\t\t\t\tif (a1.Equals(One))\n////\t\t\t\t\tbreak;\n//\n//\t\t\t\tint a1Lsw = a1.magnitude[a1.magnitude.Length - 1];\n//\t\t\t\tif ((bLsw & 3) == 3 && (a1Lsw & 3) == 3)\n//\t\t\t\t\ttotalS = -totalS;\n//\n////\t\t\t\ta = b.Mod(a1);\n//\t\t\t\ta = b.Remainder(a1);\n//\t\t\t\tb = a1;\n//\t\t\t}\n//\t\t\treturn totalS;\n//\t\t}\n\t\tpublic long LongValue\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (sign == 0)\n\t\t\t\t\treturn 0;\n\t\t\t\tlong v;\n\t\t\t\tif (magnitude.Length > 1)\n\t\t\t\t{\n\t\t\t\t\tv = ((long)magnitude[magnitude.Length - 2] << 32)\n\t\t\t\t\t\t| (magnitude[magnitude.Length - 1] & IMASK);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tv = (magnitude[magnitude.Length - 1] & IMASK);\n\t\t\t\t}\n\t\t\t\treturn sign < 0 ? -v : v;\n\t\t\t}\n\t\t}\n\t\tpublic BigInteger Max(\n\t\t\tBigInteger value)\n\t\t{\n\t\t\treturn CompareTo(value) > 0 ? this : value;\n\t\t}\n\t\tpublic BigInteger Min(\n\t\t\tBigInteger value)\n\t\t{\n\t\t\treturn CompareTo(value) < 0 ? this : value;\n\t\t}\n\t\tpublic BigInteger Mod(\n\t\t\tBigInteger m)\n\t\t{\n\t\t\tif (m.sign < 1)\n\t\t\t\tthrow new ArithmeticException(\"Modulus must be positive\");\n\t\t\tBigInteger biggie = Remainder(m);\n\t\t\treturn (biggie.sign >= 0 ? biggie : biggie.Add(m));\n\t\t}\n\t\tpublic BigInteger ModInverse(\n\t\t\tBigInteger m)\n\t\t{\n\t\t\tif (m.sign < 1)\n\t\t\t\tthrow new ArithmeticException(\"Modulus must be positive\");\n\t\t\tBigInteger x = new BigInteger();\n\t\t\tBigInteger gcd = ExtEuclid(this, m, x, null);\n\t\t\tif (!gcd.Equals(One))\n\t\t\t\tthrow new ArithmeticException(\"Numbers not relatively prime.\");\n\t\t\tif (x.sign < 0)\n\t\t\t{\n\t\t\t\tx.sign = 1;\n\t\t\t\t//x = m.Subtract(x);\n\t\t\t\tx.magnitude = doSubBigLil(m.magnitude, x.magnitude);\n\t\t\t}\n\t\t\treturn x;\n\t\t}\n\t\t/**\n\t\t * Calculate the numbers u1, u2, and u3 such that:\n\t\t *\n\t\t * u1 * a + u2 * b = u3\n\t\t *\n\t\t * where u3 is the greatest common divider of a and b.\n\t\t * a and b using the extended Euclid algorithm (refer p. 323\n\t\t * of The Art of Computer Programming vol 2, 2nd ed).\n\t\t * This also seems to have the side effect of calculating\n\t\t * some form of multiplicative inverse.\n\t\t *\n\t\t * @param a    First number to calculate gcd for\n\t\t * @param b    Second number to calculate gcd for\n\t\t * @param u1Out      the return object for the u1 value\n\t\t * @param u2Out      the return object for the u2 value\n\t\t * @return     The greatest common divisor of a and b\n\t\t */\n\t\tprivate static BigInteger ExtEuclid(\n\t\t\tBigInteger\ta,\n\t\t\tBigInteger\tb,\n\t\t\tBigInteger\tu1Out,\n\t\t\tBigInteger\tu2Out)\n\t\t{\n\t\t\tBigInteger u1 = One;\n\t\t\tBigInteger u3 = a;\n\t\t\tBigInteger v1 = Zero;\n\t\t\tBigInteger v3 = b;\n\t\t\twhile (v3.sign > 0)\n\t\t\t{\n\t\t\t\tBigInteger[] q = u3.DivideAndRemainder(v3);\n", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "length": 5148, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "b90d31f3f388a502c05114a705677264035403df509fc19e"}
{"input": "", "context": "// This file was generated by the Gtk# code generator.\n// Any changes made will be lost if regenerated.\nnamespace Gst {\n\tusing System;\n\tusing System.Collections;\n\tusing System.Collections.Generic;\n\tusing System.Runtime.InteropServices;\n#region Autogenerated code\n\tpublic partial class Message : Gst.MiniObject {\n\t\tpublic Gst.MessageType Type {\n\t\t\tget {\n\t\t\t\tunsafe {\n\t\t\t\t\tint* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset(\"type\"));\n\t\t\t\t\treturn (Gst.MessageType) (*raw_ptr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tset {\n\t\t\t\tunsafe {\n\t\t\t\t\tint* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset(\"type\"));\n\t\t\t\t\t*raw_ptr = (int) value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic ulong Timestamp {\n\t\t\tget {\n\t\t\t\tunsafe {\n\t\t\t\t\tulong* raw_ptr = (ulong*)(((byte*)Handle) + abi_info.GetFieldOffset(\"timestamp\"));\n\t\t\t\t\treturn (*raw_ptr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tset {\n\t\t\t\tunsafe {\n\t\t\t\t\tulong* raw_ptr = (ulong*)(((byte*)Handle) + abi_info.GetFieldOffset(\"timestamp\"));\n\t\t\t\t\t*raw_ptr = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic Gst.Object Src {\n\t\t\tget {\n\t\t\t\tunsafe {\n\t\t\t\t\tIntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset(\"src\"));\n\t\t\t\t\treturn GLib.Object.GetObject((*raw_ptr)) as Gst.Object;\n\t\t\t\t}\n\t\t\t}\n\t\t\tset {\n\t\t\t\tunsafe {\n\t\t\t\t\tIntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset(\"src\"));\n\t\t\t\t\t*raw_ptr = value == null ? IntPtr.Zero : value.Handle;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern uint gst_message_get_seqnum(IntPtr raw);\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_set_seqnum(IntPtr raw, uint seqnum);\n\t\tpublic uint Seqnum {\n\t\t\tget  {\n\t\t\t\tuint raw_ret = gst_message_get_seqnum(Handle);\n\t\t\t\tuint ret = raw_ret;\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\tset  {\n\t\t\t\tgst_message_set_seqnum(Handle, value);\n\t\t\t}\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_get_type();\n\t\tpublic static GLib.GType GType { \n\t\t\tget {\n\t\t\t\tIntPtr raw_ret = gst_message_get_type();\n\t\t\t\tGLib.GType ret = new GLib.GType(raw_ret);\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_add_redirect_entry(IntPtr raw, IntPtr location, IntPtr tag_list, IntPtr entry_struct);\n\t\tpublic void AddRedirectEntry(string location, Gst.TagList tag_list, Gst.Structure entry_struct) {\n\t\t\tIntPtr native_location = GLib.Marshaller.StringToPtrGStrdup (location);\n\t\t\ttag_list.Owned = false;\n\t\t\tentry_struct.Owned = false;\n\t\t\tgst_message_add_redirect_entry(Handle, native_location, tag_list == null ? IntPtr.Zero : tag_list.Handle, entry_struct == null ? IntPtr.Zero : entry_struct.Handle);\n\t\t\tGLib.Marshaller.Free (native_location);\n\t\t}\n\t\tpublic void AddRedirectEntry(string location) {\n\t\t\tAddRedirectEntry (location, null, null);\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern UIntPtr gst_message_get_num_redirect_entries(IntPtr raw);\n\t\tpublic ulong NumRedirectEntries { \n\t\t\tget {\n\t\t\t\tUIntPtr raw_ret = gst_message_get_num_redirect_entries(Handle);\n\t\t\t\tulong ret = (ulong) raw_ret;\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_get_structure(IntPtr raw);\n\t\tpublic Gst.Structure Structure { \n\t\t\tget {\n\t\t\t\tIntPtr raw_ret = gst_message_get_structure(Handle);\n\t\t\t\tGst.Structure ret = raw_ret == IntPtr.Zero ? null : (Gst.Structure) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Structure), false);\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern bool gst_message_has_name(IntPtr raw, IntPtr name);\n\t\tpublic bool HasName(string name) {\n\t\t\tIntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);\n\t\t\tbool raw_ret = gst_message_has_name(Handle, native_name);\n\t\t\tbool ret = raw_ret;\n\t\t\tGLib.Marshaller.Free (native_name);\n\t\t\treturn ret;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_async_done(IntPtr raw, out ulong running_time);\n\t\tpublic ulong ParseAsyncDone() {\n\t\t\tulong running_time;\n\t\t\tgst_message_parse_async_done(Handle, out running_time);\n\t\t\treturn running_time;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_buffering(IntPtr raw, out int percent);\n\t\tpublic int ParseBuffering() {\n\t\t\tint percent;\n\t\t\tgst_message_parse_buffering(Handle, out percent);\n\t\t\treturn percent;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_buffering_stats(IntPtr raw, out int mode, out int avg_in, out int avg_out, out long buffering_left);\n\t\tpublic void ParseBufferingStats(out Gst.BufferingMode mode, out int avg_in, out int avg_out, out long buffering_left) {\n\t\t\tint native_mode;\n\t\t\tgst_message_parse_buffering_stats(Handle, out native_mode, out avg_in, out avg_out, out buffering_left);\n\t\t\tmode = (Gst.BufferingMode) native_mode;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_clock_lost(IntPtr raw, out IntPtr clock);\n\t\tpublic Gst.Clock ParseClockLost() {\n\t\t\tGst.Clock clock;\n\t\t\tIntPtr native_clock;\n\t\t\tgst_message_parse_clock_lost(Handle, out native_clock);\n\t\t\tclock = GLib.Object.GetObject(native_clock) as Gst.Clock;\n\t\t\treturn clock;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_clock_provide(IntPtr raw, out IntPtr clock, out bool ready);\n\t\tpublic void ParseClockProvide(out Gst.Clock clock, out bool ready) {\n\t\t\tIntPtr native_clock;\n\t\t\tgst_message_parse_clock_provide(Handle, out native_clock, out ready);\n\t\t\tclock = GLib.Object.GetObject(native_clock) as Gst.Clock;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern bool gst_message_parse_context_type(IntPtr raw, out IntPtr context_type);\n\t\tpublic bool ParseContextType(out string context_type) {\n\t\t\tIntPtr native_context_type;\n\t\t\tbool raw_ret = gst_message_parse_context_type(Handle, out native_context_type);\n\t\t\tbool ret = raw_ret;\n\t\t\tcontext_type = GLib.Marshaller.Utf8PtrToString (native_context_type);\n\t\t\treturn ret;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_device_added(IntPtr raw, out IntPtr device);\n\t\tpublic Gst.Device ParseDeviceAdded() {\n\t\t\tGst.Device device;\n\t\t\tIntPtr native_device;\n\t\t\tgst_message_parse_device_added(Handle, out native_device);\n\t\t\tdevice = GLib.Object.GetObject(native_device, true) as Gst.Device;\n\t\t\treturn device;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_device_changed(IntPtr raw, out IntPtr device, out IntPtr changed_device);\n\t\tpublic void ParseDeviceChanged(out Gst.Device device, out Gst.Device changed_device) {\n\t\t\tIntPtr native_device;\n\t\t\tIntPtr native_changed_device;\n\t\t\tgst_message_parse_device_changed(Handle, out native_device, out native_changed_device);\n\t\t\tdevice = GLib.Object.GetObject(native_device, true) as Gst.Device;\n\t\t\tchanged_device = GLib.Object.GetObject(native_changed_device, true) as Gst.Device;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_device_removed(IntPtr raw, out IntPtr device);\n\t\tpublic Gst.Device ParseDeviceRemoved() {\n\t\t\tGst.Device device;\n\t\t\tIntPtr native_device;\n\t\t\tgst_message_parse_device_removed(Handle, out native_device);\n\t\t\tdevice = GLib.Object.GetObject(native_device, true) as Gst.Device;\n\t\t\treturn device;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_error_details(IntPtr raw, out IntPtr structure);\n\t\tpublic Gst.Structure ParseErrorDetails() {\n\t\t\tGst.Structure structure;\n\t\t\tIntPtr native_structure;\n\t\t\tgst_message_parse_error_details(Handle, out native_structure);\n\t\t\tstructure = native_structure == IntPtr.Zero ? null : (Gst.Structure) GLib.Opaque.GetOpaque (native_structure, typeof (Gst.Structure), false);\n\t\t\treturn structure;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern bool gst_message_parse_group_id(IntPtr raw, out uint group_id);\n\t\tpublic bool ParseGroupId(out uint group_id) {\n\t\t\tbool raw_ret = gst_message_parse_group_id(Handle, out group_id);\n\t\t\tbool ret = raw_ret;\n\t\t\treturn ret;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_have_context(IntPtr raw, IntPtr context);\n\t\tpublic Gst.Context ParseHaveContext() {\n\t\t\tGst.Context context;\n\t\t\tIntPtr native_context = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gst.Context)));\n\t\t\tgst_message_parse_have_context(Handle, native_context);\n\t\t\tcontext = Gst.Context.New (native_context);\n\t\t\tMarshal.FreeHGlobal (native_context);\n\t\t\treturn context;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_info(IntPtr raw, out IntPtr gerror, out IntPtr debug);\n\t\tpublic void ParseInfo(out IntPtr gerror, out string debug) {\n\t\t\tIntPtr native_debug;\n\t\t\tgst_message_parse_info(Handle, out gerror, out native_debug);\n\t\t\tdebug = GLib.Marshaller.PtrToStringGFree(native_debug);\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_info_details(IntPtr raw, out IntPtr structure);\n\t\tpublic Gst.Structure ParseInfoDetails() {\n\t\t\tGst.Structure structure;\n\t\t\tIntPtr native_structure;\n\t\t\tgst_message_parse_info_details(Handle, out native_structure);\n\t\t\tstructure = native_structure == IntPtr.Zero ? null : (Gst.Structure) GLib.Opaque.GetOpaque (native_structure, typeof (Gst.Structure), false);\n\t\t\treturn structure;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_instant_rate_request(IntPtr raw, out double rate_multiplier);\n\t\tpublic double ParseInstantRateRequest() {\n\t\t\tdouble rate_multiplier;\n\t\t\tgst_message_parse_instant_rate_request(Handle, out rate_multiplier);\n\t\t\treturn rate_multiplier;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_new_clock(IntPtr raw, out IntPtr clock);\n\t\tpublic Gst.Clock ParseNewClock() {\n\t\t\tGst.Clock clock;\n\t\t\tIntPtr native_clock;\n\t\t\tgst_message_parse_new_clock(Handle, out native_clock);\n\t\t\tclock = GLib.Object.GetObject(native_clock) as Gst.Clock;\n\t\t\treturn clock;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_progress(IntPtr raw, out int type, out IntPtr code, out IntPtr text);\n\t\tpublic void ParseProgress(out Gst.ProgressType type, out string code, out string text) {\n\t\t\tint native_type;\n\t\t\tIntPtr native_code;\n\t\t\tIntPtr native_text;\n\t\t\tgst_message_parse_progress(Handle, out native_type, out native_code, out native_text);\n\t\t\ttype = (Gst.ProgressType) native_type;\n\t\t\tcode = GLib.Marshaller.PtrToStringGFree(native_code);\n\t\t\ttext = GLib.Marshaller.PtrToStringGFree(native_text);\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_property_notify(IntPtr raw, out IntPtr _object, out IntPtr property_name, IntPtr property_value);\n\t\tpublic void ParsePropertyNotify(out Gst.Object _object, out string property_name, out GLib.Value property_value) {\n\t\t\tIntPtr native__object;\n\t\t\tIntPtr native_property_name;\n\t\t\tIntPtr native_property_value = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (GLib.Value)));\n\t\t\tgst_message_parse_property_notify(Handle, out native__object, out native_property_name, native_property_value);\n\t\t\t_object = GLib.Object.GetObject(native__object) as Gst.Object;\n\t\t\tproperty_name = GLib.Marshaller.Utf8PtrToString (native_property_name);\n\t\t\tproperty_value = (GLib.Value) Marshal.PtrToStructure (native_property_value, typeof (GLib.Value));\n\t\t\tMarshal.FreeHGlobal (native_property_value);\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_qos(IntPtr raw, out bool live, out ulong running_time, out ulong stream_time, out ulong timestamp, out ulong duration);\n\t\tpublic void ParseQos(out bool live, out ulong running_time, out ulong stream_time, out ulong timestamp, out ulong duration) {\n\t\t\tgst_message_parse_qos(Handle, out live, out running_time, out stream_time, out timestamp, out duration);\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_qos_stats(IntPtr raw, out int format, out ulong processed, out ulong dropped);\n\t\tpublic void ParseQosStats(out Gst.Format format, out ulong processed, out ulong dropped) {\n\t\t\tint native_format;\n\t\t\tgst_message_parse_qos_stats(Handle, out native_format, out processed, out dropped);\n\t\t\tformat = (Gst.Format) native_format;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_qos_values(IntPtr raw, out long jitter, out double proportion, out int quality);\n\t\tpublic void ParseQosValues(out long jitter, out double proportion, out int quality) {\n\t\t\tgst_message_parse_qos_values(Handle, out jitter, out proportion, out quality);\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_redirect_entry(IntPtr raw, UIntPtr entry_index, out IntPtr location, out IntPtr tag_list, out IntPtr entry_struct);\n\t\tpublic void ParseRedirectEntry(ulong entry_index, out string location, out Gst.TagList tag_list, out Gst.Structure entry_struct) {\n\t\t\tIntPtr native_location;\n\t\t\tIntPtr native_tag_list;\n\t\t\tIntPtr native_entry_struct;\n\t\t\tgst_message_parse_redirect_entry(Handle, new UIntPtr (entry_index), out native_location, out native_tag_list, out native_entry_struct);\n\t\t\tlocation = GLib.Marshaller.Utf8PtrToString (native_location);\n\t\t\ttag_list = native_tag_list == IntPtr.Zero ? null : (Gst.TagList) GLib.Opaque.GetOpaque (native_tag_list, typeof (Gst.TagList), false);\n\t\t\tentry_struct = native_entry_struct == IntPtr.Zero ? null : (Gst.Structure) GLib.Opaque.GetOpaque (native_entry_struct, typeof (Gst.Structure), false);\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_request_state(IntPtr raw, out int state);\n\t\tpublic Gst.State ParseRequestState() {\n\t\t\tGst.State state;\n\t\t\tint native_state;\n\t\t\tgst_message_parse_request_state(Handle, out native_state);\n\t\t\tstate = (Gst.State) native_state;\n\t\t\treturn state;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_reset_time(IntPtr raw, out ulong running_time);\n\t\tpublic ulong ParseResetTime() {\n\t\t\tulong running_time;\n\t\t\tgst_message_parse_reset_time(Handle, out running_time);\n\t\t\treturn running_time;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_segment_done(IntPtr raw, out int format, out long position);\n\t\tpublic void ParseSegmentDone(out Gst.Format format, out long position) {\n\t\t\tint native_format;\n\t\t\tgst_message_parse_segment_done(Handle, out native_format, out position);\n\t\t\tformat = (Gst.Format) native_format;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_segment_start(IntPtr raw, out int format, out long position);\n\t\tpublic void ParseSegmentStart(out Gst.Format format, out long position) {\n\t\t\tint native_format;\n\t\t\tgst_message_parse_segment_start(Handle, out native_format, out position);\n\t\t\tformat = (Gst.Format) native_format;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_state_changed(IntPtr raw, out int oldstate, out int newstate, out int pending);\n\t\tpublic void ParseStateChanged(out Gst.State oldstate, out Gst.State newstate, out Gst.State pending) {\n\t\t\tint native_oldstate;\n\t\t\tint native_newstate;\n\t\t\tint native_pending;\n\t\t\tgst_message_parse_state_changed(Handle, out native_oldstate, out native_newstate, out native_pending);\n\t\t\toldstate = (Gst.State) native_oldstate;\n\t\t\tnewstate = (Gst.State) native_newstate;\n\t\t\tpending = (Gst.State) native_pending;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_step_done(IntPtr raw, out int format, out ulong amount, out double rate, out bool flush, out bool intermediate, out ulong duration, out bool eos);\n\t\tpublic void ParseStepDone(out Gst.Format format, out ulong amount, out double rate, out bool flush, out bool intermediate, out ulong duration, out bool eos) {\n\t\t\tint native_format;\n\t\t\tgst_message_parse_step_done(Handle, out native_format, out amount, out rate, out flush, out intermediate, out duration, out eos);\n\t\t\tformat = (Gst.Format) native_format;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_step_start(IntPtr raw, out bool active, out int format, out ulong amount, out double rate, out bool flush, out bool intermediate);\n\t\tpublic void ParseStepStart(out bool active, out Gst.Format format, out ulong amount, out double rate, out bool flush, out bool intermediate) {\n\t\t\tint native_format;\n\t\t\tgst_message_parse_step_start(Handle, out active, out native_format, out amount, out rate, out flush, out intermediate);\n\t\t\tformat = (Gst.Format) native_format;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_stream_collection(IntPtr raw, out IntPtr collection);\n\t\tpublic Gst.StreamCollection ParseStreamCollection() {\n\t\t\tGst.StreamCollection collection;\n\t\t\tIntPtr native_collection;\n\t\t\tgst_message_parse_stream_collection(Handle, out native_collection);\n\t\t\tcollection = GLib.Object.GetObject(native_collection, true) as Gst.StreamCollection;\n\t\t\treturn collection;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_stream_status(IntPtr raw, out int type, out IntPtr owner);\n\t\tpublic void ParseStreamStatus(out Gst.StreamStatusType type, out Gst.Element owner) {\n\t\t\tint native_type;\n\t\t\tIntPtr native_owner;\n\t\t\tgst_message_parse_stream_status(Handle, out native_type, out native_owner);\n\t\t\ttype = (Gst.StreamStatusType) native_type;\n\t\t\towner = GLib.Object.GetObject(native_owner) as Gst.Element;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_streams_selected(IntPtr raw, out IntPtr collection);\n\t\tpublic Gst.StreamCollection ParseStreamsSelected() {\n\t\t\tGst.StreamCollection collection;\n\t\t\tIntPtr native_collection;\n\t\t\tgst_message_parse_streams_selected(Handle, out native_collection);\n\t\t\tcollection = GLib.Object.GetObject(native_collection, true) as Gst.StreamCollection;\n\t\t\treturn collection;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_structure_change(IntPtr raw, out int type, out IntPtr owner, out bool busy);\n\t\tpublic void ParseStructureChange(out Gst.StructureChangeType type, out Gst.Element owner, out bool busy) {\n\t\t\tint native_type;\n\t\t\tIntPtr native_owner;\n\t\t\tgst_message_parse_structure_change(Handle, out native_type, out native_owner, out busy);\n\t\t\ttype = (Gst.StructureChangeType) native_type;\n\t\t\towner = GLib.Object.GetObject(native_owner) as Gst.Element;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_tag(IntPtr raw, out IntPtr tag_list);\n\t\tpublic Gst.TagList ParseTag() {\n\t\t\tGst.TagList tag_list;\n\t\t\tIntPtr native_tag_list;\n\t\t\tgst_message_parse_tag(Handle, out native_tag_list);\n\t\t\ttag_list = native_tag_list == IntPtr.Zero ? null : (Gst.TagList) GLib.Opaque.GetOpaque (native_tag_list, typeof (Gst.TagList), true);\n\t\t\treturn tag_list;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_toc(IntPtr raw, IntPtr toc, out bool updated);\n\t\tpublic void ParseToc(out Gst.Toc toc, out bool updated) {\n\t\t\tIntPtr native_toc = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gst.Toc)));\n\t\t\tgst_message_parse_toc(Handle, native_toc, out updated);\n\t\t\ttoc = Gst.Toc.New (native_toc);\n\t\t\tMarshal.FreeHGlobal (native_toc);\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_warning(IntPtr raw, out IntPtr gerror, out IntPtr debug);\n\t\tpublic void ParseWarning(out IntPtr gerror, out string debug) {\n\t\t\tIntPtr native_debug;\n\t\t\tgst_message_parse_warning(Handle, out gerror, out native_debug);\n\t\t\tdebug = GLib.Marshaller.PtrToStringGFree(native_debug);\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_parse_warning_details(IntPtr raw, out IntPtr structure);\n\t\tpublic Gst.Structure ParseWarningDetails() {\n\t\t\tGst.Structure structure;\n\t\t\tIntPtr native_structure;\n\t\t\tgst_message_parse_warning_details(Handle, out native_structure);\n\t\t\tstructure = native_structure == IntPtr.Zero ? null : (Gst.Structure) GLib.Opaque.GetOpaque (native_structure, typeof (Gst.Structure), false);\n\t\t\treturn structure;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_set_buffering_stats(IntPtr raw, int mode, int avg_in, int avg_out, long buffering_left);\n\t\tpublic void SetBufferingStats(Gst.BufferingMode mode, int avg_in, int avg_out, long buffering_left) {\n\t\t\tgst_message_set_buffering_stats(Handle, (int) mode, avg_in, avg_out, buffering_left);\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_set_group_id(IntPtr raw, uint group_id);\n\t\tpublic uint GroupId { \n\t\t\tset {\n\t\t\t\tgst_message_set_group_id(Handle, value);\n\t\t\t}\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_set_qos_stats(IntPtr raw, int format, ulong processed, ulong dropped);\n\t\tpublic void SetQosStats(Gst.Format format, ulong processed, ulong dropped) {\n\t\t\tgst_message_set_qos_stats(Handle, (int) format, processed, dropped);\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_set_qos_values(IntPtr raw, long jitter, double proportion, int quality);\n\t\tpublic void SetQosValues(long jitter, double proportion, int quality) {\n\t\t\tgst_message_set_qos_values(Handle, jitter, proportion, quality);\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_streams_selected_add(IntPtr raw, IntPtr stream);\n\t\tpublic void StreamsSelectedAdd(Gst.Stream stream) {\n\t\t\tgst_message_streams_selected_add(Handle, stream == null ? IntPtr.Zero : stream.Handle);\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern uint gst_message_streams_selected_get_size(IntPtr raw);\n\t\tpublic uint StreamsSelectedGetSize() {\n\t\t\tuint raw_ret = gst_message_streams_selected_get_size(Handle);\n\t\t\tuint ret = raw_ret;\n\t\t\treturn ret;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_streams_selected_get_stream(IntPtr raw, uint idx);\n\t\tpublic Gst.Stream StreamsSelectedGetStream(uint idx) {\n\t\t\tIntPtr raw_ret = gst_message_streams_selected_get_stream(Handle, idx);\n\t\t\tGst.Stream ret = GLib.Object.GetObject(raw_ret, true) as Gst.Stream;\n\t\t\treturn ret;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_writable_structure(IntPtr raw);\n\t\tpublic Gst.Structure WritableStructure() {\n\t\t\tIntPtr raw_ret = gst_message_writable_structure(Handle);\n\t\t\tGst.Structure ret = raw_ret == IntPtr.Zero ? null : (Gst.Structure) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Structure), false);\n\t\t\treturn ret;\n\t\t}\n\t\tpublic Message(IntPtr raw) : base(raw) {}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_application(IntPtr src, IntPtr structure);\n\t\tpublic static Message NewApplication(Gst.Object src, Gst.Structure structure)\n\t\t{\n\t\t\tstructure.Owned = false;\n\t\t\tMessage result = new Message (gst_message_new_application(src == null ? IntPtr.Zero : src.Handle, structure == null ? IntPtr.Zero : structure.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_async_done(IntPtr src, ulong running_time);\n\t\tpublic static Message NewAsyncDone(Gst.Object src, ulong running_time)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_async_done(src == null ? IntPtr.Zero : src.Handle, running_time));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_async_start(IntPtr src);\n\t\tpublic static Message NewAsyncStart(Gst.Object src)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_async_start(src == null ? IntPtr.Zero : src.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_buffering(IntPtr src, int percent);\n\t\tpublic static Message NewBuffering(Gst.Object src, int percent)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_buffering(src == null ? IntPtr.Zero : src.Handle, percent));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_clock_lost(IntPtr src, IntPtr clock);\n\t\tpublic static Message NewClockLost(Gst.Object src, Gst.Clock clock)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_clock_lost(src == null ? IntPtr.Zero : src.Handle, clock == null ? IntPtr.Zero : clock.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_clock_provide(IntPtr src, IntPtr clock, bool ready);\n\t\tpublic static Message NewClockProvide(Gst.Object src, Gst.Clock clock, bool ready)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_clock_provide(src == null ? IntPtr.Zero : src.Handle, clock == null ? IntPtr.Zero : clock.Handle, ready));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_custom(int type, IntPtr src, IntPtr structure);\n\t\tpublic static Message NewCustom(Gst.MessageType type, Gst.Object src, Gst.Structure structure)\n\t\t{\n\t\t\tstructure.Owned = false;\n\t\t\tMessage result = new Message (gst_message_new_custom((int) type, src == null ? IntPtr.Zero : src.Handle, structure == null ? IntPtr.Zero : structure.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_device_added(IntPtr src, IntPtr device);\n\t\tpublic static Message NewDeviceAdded(Gst.Object src, Gst.Device device)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_device_added(src == null ? IntPtr.Zero : src.Handle, device == null ? IntPtr.Zero : device.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_device_changed(IntPtr src, IntPtr device, IntPtr changed_device);\n\t\tpublic static Message NewDeviceChanged(Gst.Object src, Gst.Device device, Gst.Device changed_device)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_device_changed(src == null ? IntPtr.Zero : src.Handle, device == null ? IntPtr.Zero : device.Handle, changed_device == null ? IntPtr.Zero : changed_device.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_device_removed(IntPtr src, IntPtr device);\n\t\tpublic static Message NewDeviceRemoved(Gst.Object src, Gst.Device device)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_device_removed(src == null ? IntPtr.Zero : src.Handle, device == null ? IntPtr.Zero : device.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_duration_changed(IntPtr src);\n\t\tpublic static Message NewDurationChanged(Gst.Object src)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_duration_changed(src == null ? IntPtr.Zero : src.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_element(IntPtr src, IntPtr structure);\n\t\tpublic static Message NewElement(Gst.Object src, Gst.Structure structure)\n\t\t{\n\t\t\tstructure.Owned = false;\n\t\t\tMessage result = new Message (gst_message_new_element(src == null ? IntPtr.Zero : src.Handle, structure == null ? IntPtr.Zero : structure.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_eos(IntPtr src);\n\t\tpublic static Message NewEos(Gst.Object src)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_eos(src == null ? IntPtr.Zero : src.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_error(IntPtr src, IntPtr error, IntPtr debug);\n\t\tpublic static Message NewError(Gst.Object src, IntPtr error, string debug)\n\t\t{\n\t\t\tIntPtr native_debug = GLib.Marshaller.StringToPtrGStrdup (debug);\n\t\t\tMessage result = new Message (gst_message_new_error(src == null ? IntPtr.Zero : src.Handle, error, native_debug));\n\t\t\tGLib.Marshaller.Free (native_debug);\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_error_with_details(IntPtr src, IntPtr error, IntPtr debug, IntPtr details);\n\t\tpublic static Message NewErrorWithDetails(Gst.Object src, IntPtr error, string debug, Gst.Structure details)\n\t\t{\n\t\t\tIntPtr native_debug = GLib.Marshaller.StringToPtrGStrdup (debug);\n\t\t\tdetails.Owned = false;\n\t\t\tMessage result = new Message (gst_message_new_error_with_details(src == null ? IntPtr.Zero : src.Handle, error, native_debug, details == null ? IntPtr.Zero : details.Handle));\n\t\t\tGLib.Marshaller.Free (native_debug);\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_have_context(IntPtr src, IntPtr context);\n\t\tpublic static Message NewHaveContext(Gst.Object src, Gst.Context context)\n\t\t{\n\t\t\tIntPtr native_context = GLib.Marshaller.StructureToPtrAlloc (context);\n\t\t\tMessage result = new Message (gst_message_new_have_context(src == null ? IntPtr.Zero : src.Handle, native_context));\n\t\t\tMarshal.FreeHGlobal (native_context);\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_info(IntPtr src, IntPtr error, IntPtr debug);\n\t\tpublic static Message NewInfo(Gst.Object src, IntPtr error, string debug)\n\t\t{\n\t\t\tIntPtr native_debug = GLib.Marshaller.StringToPtrGStrdup (debug);\n\t\t\tMessage result = new Message (gst_message_new_info(src == null ? IntPtr.Zero : src.Handle, error, native_debug));\n\t\t\tGLib.Marshaller.Free (native_debug);\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_info_with_details(IntPtr src, IntPtr error, IntPtr debug, IntPtr details);\n\t\tpublic static Message NewInfoWithDetails(Gst.Object src, IntPtr error, string debug, Gst.Structure details)\n\t\t{\n\t\t\tIntPtr native_debug = GLib.Marshaller.StringToPtrGStrdup (debug);\n\t\t\tdetails.Owned = false;\n\t\t\tMessage result = new Message (gst_message_new_info_with_details(src == null ? IntPtr.Zero : src.Handle, error, native_debug, details == null ? IntPtr.Zero : details.Handle));\n\t\t\tGLib.Marshaller.Free (native_debug);\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_instant_rate_request(IntPtr src, double rate_multiplier);\n\t\tpublic static Message NewInstantRateRequest(Gst.Object src, double rate_multiplier)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_instant_rate_request(src == null ? IntPtr.Zero : src.Handle, rate_multiplier));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_latency(IntPtr src);\n\t\tpublic static Message NewLatency(Gst.Object src)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_latency(src == null ? IntPtr.Zero : src.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_need_context(IntPtr src, IntPtr context_type);\n\t\tpublic static Message NewNeedContext(Gst.Object src, string context_type)\n\t\t{\n\t\t\tIntPtr native_context_type = GLib.Marshaller.StringToPtrGStrdup (context_type);\n\t\t\tMessage result = new Message (gst_message_new_need_context(src == null ? IntPtr.Zero : src.Handle, native_context_type));\n\t\t\tGLib.Marshaller.Free (native_context_type);\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_new_clock(IntPtr src, IntPtr clock);\n\t\tpublic static Message NewNewClock(Gst.Object src, Gst.Clock clock)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_new_clock(src == null ? IntPtr.Zero : src.Handle, clock == null ? IntPtr.Zero : clock.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_progress(IntPtr src, int type, IntPtr code, IntPtr text);\n\t\tpublic static Message NewProgress(Gst.Object src, Gst.ProgressType type, string code, string text)\n\t\t{\n\t\t\tIntPtr native_code = GLib.Marshaller.StringToPtrGStrdup (code);\n\t\t\tIntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);\n\t\t\tMessage result = new Message (gst_message_new_progress(src == null ? IntPtr.Zero : src.Handle, (int) type, native_code, native_text));\n\t\t\tGLib.Marshaller.Free (native_code);\n\t\t\tGLib.Marshaller.Free (native_text);\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_property_notify(IntPtr src, IntPtr property_name, IntPtr val);\n\t\tpublic static Message NewPropertyNotify(Gst.Object src, string property_name, GLib.Value val)\n\t\t{\n\t\t\tIntPtr native_property_name = GLib.Marshaller.StringToPtrGStrdup (property_name);\n\t\t\tIntPtr native_val = GLib.Marshaller.StructureToPtrAlloc (val);\n\t\t\tMessage result = new Message (gst_message_new_property_notify(src == null ? IntPtr.Zero : src.Handle, native_property_name, native_val));\n\t\t\tGLib.Marshaller.Free (native_property_name);\n\t\t\tMarshal.FreeHGlobal (native_val);\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_qos(IntPtr src, bool live, ulong running_time, ulong stream_time, ulong timestamp, ulong duration);\n\t\tpublic static Message NewQos(Gst.Object src, bool live, ulong running_time, ulong stream_time, ulong timestamp, ulong duration)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_qos(src == null ? IntPtr.Zero : src.Handle, live, running_time, stream_time, timestamp, duration));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_redirect(IntPtr src, IntPtr location, IntPtr tag_list, IntPtr entry_struct);\n\t\tpublic static Message NewRedirect(Gst.Object src, string location, Gst.TagList tag_list, Gst.Structure entry_struct)\n\t\t{\n\t\t\tIntPtr native_location = GLib.Marshaller.StringToPtrGStrdup (location);\n\t\t\ttag_list.Owned = false;\n\t\t\tentry_struct.Owned = false;\n\t\t\tMessage result = new Message (gst_message_new_redirect(src == null ? IntPtr.Zero : src.Handle, native_location, tag_list == null ? IntPtr.Zero : tag_list.Handle, entry_struct == null ? IntPtr.Zero : entry_struct.Handle));\n\t\t\tGLib.Marshaller.Free (native_location);\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_request_state(IntPtr src, int state);\n\t\tpublic static Message NewRequestState(Gst.Object src, Gst.State state)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_request_state(src == null ? IntPtr.Zero : src.Handle, (int) state));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_reset_time(IntPtr src, ulong running_time);\n\t\tpublic static Message NewResetTime(Gst.Object src, ulong running_time)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_reset_time(src == null ? IntPtr.Zero : src.Handle, running_time));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_segment_done(IntPtr src, int format, long position);\n\t\tpublic static Message NewSegmentDone(Gst.Object src, Gst.Format format, long position)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_segment_done(src == null ? IntPtr.Zero : src.Handle, (int) format, position));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_segment_start(IntPtr src, int format, long position);\n\t\tpublic static Message NewSegmentStart(Gst.Object src, Gst.Format format, long position)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_segment_start(src == null ? IntPtr.Zero : src.Handle, (int) format, position));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_state_changed(IntPtr src, int oldstate, int newstate, int pending);\n\t\tpublic static Message NewStateChanged(Gst.Object src, Gst.State oldstate, Gst.State newstate, Gst.State pending)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_state_changed(src == null ? IntPtr.Zero : src.Handle, (int) oldstate, (int) newstate, (int) pending));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_state_dirty(IntPtr src);\n\t\tpublic static Message NewStateDirty(Gst.Object src)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_state_dirty(src == null ? IntPtr.Zero : src.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_step_done(IntPtr src, int format, ulong amount, double rate, bool flush, bool intermediate, ulong duration, bool eos);\n\t\tpublic static Message NewStepDone(Gst.Object src, Gst.Format format, ulong amount, double rate, bool flush, bool intermediate, ulong duration, bool eos)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_step_done(src == null ? IntPtr.Zero : src.Handle, (int) format, amount, rate, flush, intermediate, duration, eos));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_step_start(IntPtr src, bool active, int format, ulong amount, double rate, bool flush, bool intermediate);\n\t\tpublic static Message NewStepStart(Gst.Object src, bool active, Gst.Format format, ulong amount, double rate, bool flush, bool intermediate)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_step_start(src == null ? IntPtr.Zero : src.Handle, active, (int) format, amount, rate, flush, intermediate));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_stream_collection(IntPtr src, IntPtr collection);\n\t\tpublic static Message NewStreamCollection(Gst.Object src, Gst.StreamCollection collection)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_stream_collection(src == null ? IntPtr.Zero : src.Handle, collection == null ? IntPtr.Zero : collection.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_stream_start(IntPtr src);\n\t\tpublic static Message NewStreamStart(Gst.Object src)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_stream_start(src == null ? IntPtr.Zero : src.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_stream_status(IntPtr src, int type, IntPtr owner);\n\t\tpublic static Message NewStreamStatus(Gst.Object src, Gst.StreamStatusType type, Gst.Element owner)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_stream_status(src == null ? IntPtr.Zero : src.Handle, (int) type, owner == null ? IntPtr.Zero : owner.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_streams_selected(IntPtr src, IntPtr collection);\n\t\tpublic static Message NewStreamsSelected(Gst.Object src, Gst.StreamCollection collection)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_streams_selected(src == null ? IntPtr.Zero : src.Handle, collection == null ? IntPtr.Zero : collection.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_structure_change(IntPtr src, int type, IntPtr owner, bool busy);\n\t\tpublic static Message NewStructureChange(Gst.Object src, Gst.StructureChangeType type, Gst.Element owner, bool busy)\n\t\t{\n\t\t\tMessage result = new Message (gst_message_new_structure_change(src == null ? IntPtr.Zero : src.Handle, (int) type, owner == null ? IntPtr.Zero : owner.Handle, busy));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_tag(IntPtr src, IntPtr tag_list);\n\t\tpublic static Message NewTag(Gst.Object src, Gst.TagList tag_list)\n\t\t{\n\t\t\ttag_list.Owned = false;\n\t\t\tMessage result = new Message (gst_message_new_tag(src == null ? IntPtr.Zero : src.Handle, tag_list == null ? IntPtr.Zero : tag_list.Handle));\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_toc(IntPtr src, IntPtr toc, bool updated);\n\t\tpublic static Message NewToc(Gst.Object src, Gst.Toc toc, bool updated)\n\t\t{\n\t\t\tIntPtr native_toc = GLib.Marshaller.StructureToPtrAlloc (toc);\n\t\t\tMessage result = new Message (gst_message_new_toc(src == null ? IntPtr.Zero : src.Handle, native_toc, updated));\n\t\t\tMarshal.FreeHGlobal (native_toc);\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_warning(IntPtr src, IntPtr error, IntPtr debug);\n\t\tpublic static Message NewWarning(Gst.Object src, IntPtr error, string debug)\n\t\t{\n\t\t\tIntPtr native_debug = GLib.Marshaller.StringToPtrGStrdup (debug);\n\t\t\tMessage result = new Message (gst_message_new_warning(src == null ? IntPtr.Zero : src.Handle, error, native_debug));\n\t\t\tGLib.Marshaller.Free (native_debug);\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_new_warning_with_details(IntPtr src, IntPtr error, IntPtr debug, IntPtr details);\n\t\tpublic static Message NewWarningWithDetails(Gst.Object src, IntPtr error, string debug, Gst.Structure details)\n\t\t{\n\t\t\tIntPtr native_debug = GLib.Marshaller.StringToPtrGStrdup (debug);\n\t\t\tdetails.Owned = false;\n\t\t\tMessage result = new Message (gst_message_new_warning_with_details(src == null ? IntPtr.Zero : src.Handle, error, native_debug, details == null ? IntPtr.Zero : details.Handle));\n\t\t\tGLib.Marshaller.Free (native_debug);\n\t\t\treturn result;\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern IntPtr gst_message_ref(IntPtr raw);\n\t\tprotected override void Ref (IntPtr raw)\n\t\t{\n\t\t\tif (!Owned) {\n\t\t\t\tgst_message_ref (raw);\n\t\t\t\tOwned = true;\n\t\t\t}\n\t\t}\n\t\t[DllImport(\"gstreamer-1.0-0.dll\", CallingConvention = CallingConvention.Cdecl)]\n\t\tstatic extern void gst_message_unref(IntPtr raw);\n\t\tprotected override void Unref (IntPtr raw)\n\t\t{\n\t\t\tif (Owned) {\n\t\t\t\tgst_message_unref (raw);\n\t\t\t\tOwned = false;\n\t\t\t}\n\t\t}\n\t\tclass FinalizerInfo {\n\t\t\tIntPtr handle;\n\t\t\tpublic FinalizerInfo (IntPtr handle)\n\t\t\t{\n\t\t\t\tthis.handle = handle;\n\t\t\t}\n\t\t\tpublic bool Handler ()\n\t\t\t{\n\t\t\t\tgst_message_unref (handle);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t~Message ()\n\t\t{\n\t\t\tif (!Owned)\n\t\t\t\treturn;\n\t\t\tFinalizerInfo info = new FinalizerInfo (Handle);\n\t\t\tGLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));\n\t\t}\n\t\t// Internal representation of the wrapped structure ABI.\n\t\tstatic GLib.AbiStruct _abi_info = null;\n\t\tstatic public new GLib.AbiStruct abi_info {\n\t\t\tget {\n", "answers": ["\t\t\t\tif (_abi_info == null)"], "length": 4205, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "e5b346ef24cdc3b57d72ee0486138cbbff59e510eda53949"}
{"input": "", "context": "// $Id: ProjectBrowser.java 132 2010-09-26 23:32:33Z marcusvnac $\n// Copyright (c) 1996-2008 The Regents of the University of California. All\n// Rights Reserved. Permission to use, copy, modify, and distribute this\n// software and its documentation without fee, and without a written\n// agreement is hereby granted, provided that the above copyright notice\n// and this paragraph appear in all copies.  This software program and\n// documentation are copyrighted by The Regents of the University of\n// California. The software program and documentation are supplied \"AS\n// IS\", without any accompanying services from The Regents. The Regents\n// does not warrant that the operation of the program will be\n// uninterrupted or error-free. The end-user understands that the program\n// was developed for research purposes and is advised not to rely\n// exclusively on the program for any reason.  IN NO EVENT SHALL THE\n// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\n// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\npackage org.argouml.ui;\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Image;\nimport java.awt.KeyboardFocusManager;\nimport java.awt.Window;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URI;\nimport java.text.MessageFormat;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport javax.swing.AbstractAction;\nimport javax.swing.ImageIcon;\nimport javax.swing.JDialog;\nimport javax.swing.JFileChooser;\nimport javax.swing.JFrame;\nimport javax.swing.JMenuBar;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JToolBar;\nimport javax.swing.SwingUtilities;\n//#if defined(LOGGING)\n//@#$LPS-LOGGING:GranularityType:Import\nimport org.apache.log4j.Logger;\n//#endif\nimport org.argouml.application.api.AbstractArgoJPanel;\nimport org.argouml.application.api.Argo;\nimport org.argouml.application.events.ArgoEventPump;\nimport org.argouml.application.events.ArgoEventTypes;\nimport org.argouml.application.events.ArgoStatusEvent;\nimport org.argouml.application.helpers.ResourceLoaderWrapper;\n//#if defined(COGNITIVE)\n//@#$LPS-COGNITIVE:GranularityType:Import\nimport org.argouml.cognitive.Designer;\n//#endif\nimport org.argouml.configuration.Configuration;\nimport org.argouml.configuration.ConfigurationKey;\nimport org.argouml.i18n.Translator;\nimport org.argouml.kernel.Command;\nimport org.argouml.kernel.NonUndoableCommand;\nimport org.argouml.kernel.Project;\nimport org.argouml.kernel.ProjectManager;\nimport org.argouml.model.Model;\nimport org.argouml.model.XmiReferenceException;\nimport org.argouml.persistence.AbstractFilePersister;\nimport org.argouml.persistence.OpenException;\nimport org.argouml.persistence.PersistenceManager;\nimport org.argouml.persistence.ProjectFilePersister;\nimport org.argouml.persistence.ProjectFileView;\nimport org.argouml.persistence.UmlVersionException;\nimport org.argouml.persistence.VersionException;\nimport org.argouml.persistence.XmiFormatException;\nimport org.argouml.taskmgmt.ProgressMonitor;\nimport org.argouml.ui.cmd.GenericArgoMenuBar;\nimport org.argouml.ui.targetmanager.TargetEvent;\nimport org.argouml.ui.targetmanager.TargetListener;\nimport org.argouml.ui.targetmanager.TargetManager;\nimport org.argouml.uml.diagram.ArgoDiagram;\nimport org.argouml.uml.diagram.DiagramUtils;\nimport org.argouml.uml.diagram.UMLMutableGraphSupport;\nimport org.argouml.uml.diagram.ui.ActionRemoveFromDiagram;\nimport org.argouml.uml.ui.ActionSaveProject;\nimport org.argouml.uml.ui.TabProps;\nimport org.argouml.util.ArgoFrame;\nimport org.argouml.util.JavaRuntimeUtility;\nimport org.argouml.util.ThreadUtils;\nimport org.tigris.gef.base.Editor;\nimport org.tigris.gef.base.Globals;\nimport org.tigris.gef.base.Layer;\nimport org.tigris.gef.graph.GraphModel;\nimport org.tigris.gef.presentation.Fig;\nimport org.tigris.gef.ui.IStatusBar;\nimport org.tigris.gef.util.Util;\nimport org.tigris.swidgets.BorderSplitPane;\nimport org.tigris.swidgets.Horizontal;\nimport org.tigris.swidgets.Orientation;\nimport org.tigris.swidgets.Vertical;\nimport org.tigris.toolbar.layouts.DockBorderLayout;\n/**\n * The main window of the ArgoUML application.\n *\n * @stereotype singleton\n */\npublic final class ProjectBrowser\n    extends JFrame\n    implements PropertyChangeListener, TargetListener {\n    /**\n     * Default width.\n     */\n    public static final int DEFAULT_COMPONENTWIDTH = 400;\n    /**\n     * Default height.\n     */\n    public static final int DEFAULT_COMPONENTHEIGHT = 350;\n    //#if defined(LOGGING)\n    //@#$LPS-LOGGING:GranularityType:Field\n    /**\n     * Logger.\n     */\n    private static final Logger LOG =\n        Logger.getLogger(ProjectBrowser.class);\n    //#endif\n    /**\n     * Position of pane in overall browser window.\n     */\n    public enum Position {\n        Center, North, South, East, West,\n        NorthEast, SouthEast, SouthWest, NorthWest\n    }\n    \n    // Make sure the correspondence that we depend on doesn't change\n    static {\n        assert Position.Center.toString().equals(BorderSplitPane.CENTER);\n        assert Position.North.toString().equals(BorderSplitPane.NORTH); \n        assert Position.NorthEast.toString().equals(BorderSplitPane.NORTHEAST); \n        assert Position.South.toString().equals(BorderSplitPane.SOUTH); \n    }\n    \n    /**\n     * Flag to indicate if we are the main application\n     * or being integrated in another top level application such\n     * as Eclipse (via the ArgoEclipse plugin).\n     * TODO: This is a temporary measure until ProjectBrowser\n     * can be refactored more appropriately. - tfm\n     */\n    private static boolean isMainApplication;\n    /**\n     * Member attribute to contain the singleton.\n     */\n    private static ProjectBrowser theInstance;\n    private String appName = \"ProjectBrowser\";\n    private MultiEditorPane editorPane;\n    /*\n     * TODO: Work in progress here to allow multiple details panes with\n     * different contents - Bob Tarling\n     */\n    private DetailsPane northEastPane;\n    private DetailsPane northPane;\n    private DetailsPane northWestPane;\n    private DetailsPane eastPane;\n    private DetailsPane southEastPane;\n    private DetailsPane southPane;\n    private Map<Position, DetailsPane> detailsPanesByCompassPoint = \n        new HashMap<Position, DetailsPane>();\n    private GenericArgoMenuBar menuBar;\n    /**\n     * Partially implemented. Needs work to display\n     * import of source and saving of zargo.\n     */\n    private StatusBar statusBar = new ArgoStatusBar();\n    /**\n     * TODO: this needs work so that users can set the font\n     * size through a gui preference window.\n     */\n    private Font defaultFont = new Font(\"Dialog\", Font.PLAIN, 10);\n    private BorderSplitPane workAreaPane;\n    /**\n     * The explorer (formerly called navigator) pane\n     * containing the modelstructure.\n     */\n    private NavigatorPane explorerPane;\n    /**\n     * The todopane (lower left corner of screen). This may actually be a blank\n     * JPanel if the ProjectBrowser was lazily initialized via\n     * {@link #getInstance()}.\n     */\n    private JPanel todoPane;\n    /**\n     * A class that handles the title of this frame, \n     * e.g. to indicate save status.\n     */\n    private TitleHandler titleHandler = new TitleHandler();\n    /**\n     * The action to save the current project.\n     */\n    private AbstractAction saveAction;\n    /**\n     * The action to remove the current selected Figs from the diagram.\n     */\n    private final ActionRemoveFromDiagram removeFromDiagram =\n        new ActionRemoveFromDiagram(\n                Translator.localize(\"action.remove-from-diagram\"));\n    /**\n     * For testing purposes. In tests this constructor can be called so\n     * TheInstance is filled.\n     */\n    private ProjectBrowser() {\n        this(\"ArgoUML\", null, true, null);\n    }\n    /**\n     * The constructor.\n     * \n     * @param applicationName\n     *            the title of the frame\n     * @param splash\n     *            the splash screen to show at startup\n     * @param mainApplication\n     *            flag indicating whether we are the top level application.\n     *            False if we are providing components to another top level app.\n     * @param leftBottomPane \n     *            the panel to fit in the left bottom corner\n     */\n    private ProjectBrowser(String applicationName, SplashScreen splash, \n             boolean mainApplication, JPanel leftBottomPane) {\n        super(applicationName);\n        theInstance = this;\n        isMainApplication = mainApplication;\n        \n        getContentPane().setFont(defaultFont);\n        \n        // TODO: This causes a cyclic depencency with ActionSaveProject\n        saveAction = new ActionSaveProject();\n        ProjectManager.getManager().setSaveAction(saveAction);\n        createPanels(splash, leftBottomPane);\n        if (isMainApplication) {\n            menuBar = new GenericArgoMenuBar();\n            getContentPane().setLayout(new BorderLayout());\n            this.setJMenuBar(menuBar);\n            //getContentPane().add(_menuBar, BorderLayout.NORTH);\n            getContentPane().add(assemblePanels(), BorderLayout.CENTER);\n            JPanel bottom = new JPanel();\n            bottom.setLayout(new BorderLayout());\n            bottom.add(statusBar, BorderLayout.CENTER);\n            bottom.add(new HeapMonitor(), BorderLayout.EAST);\n            getContentPane().add(bottom, BorderLayout.SOUTH);\n            setAppName(applicationName);\n            // allows me to ask \"Do you want to save first?\"\n            setDefaultCloseOperation(ProjectBrowser.DO_NOTHING_ON_CLOSE);\n            addWindowListener(new WindowCloser());\n            \n            setApplicationIcon();\n            // Add listener for project changes\n            ProjectManager.getManager().addPropertyChangeListener(this);\n            // add listener to get notified when active diagram changes\n            TargetManager.getInstance().addTargetListener(this);\n            // Add a listener to focus changes.\n            // Rationale: reset the undo manager to start a new chain.\n            addKeyboardFocusListener();\n        }\n    }\n    private void addKeyboardFocusListener() {\n        KeyboardFocusManager kfm =\n            KeyboardFocusManager.getCurrentKeyboardFocusManager();\n        kfm.addPropertyChangeListener(new PropertyChangeListener() {\n            private Object obj;\n            /*\n             * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)\n             */\n            public void propertyChange(PropertyChangeEvent evt) {\n                if (\"focusOwner\".equals(evt.getPropertyName())\n                        && (evt.getNewValue() != null)\n                    /* We get many many events (why?), so let's filter: */\n                        && (obj != evt.getNewValue())) {\n                    obj = evt.getNewValue();\n                    // TODO: Bob says -\n                    // We're looking at focus change to\n                    // flag the start of an interaction. This\n                    // is to detect when focus is gained in a prop\n                    // panel field on the assumption editing of that\n                    // field is about to start.\n                    // Not a good assumption. We Need to see if we can get\n                    // rid of this.\n                    Project p = \n                        ProjectManager.getManager().getCurrentProject();\n                    if (p != null) {\n                        p.getUndoManager().startInteraction(\"Focus\");\n                    }\n                    /* This next line is ideal for debugging the taborder\n                     * (focus traversal), see e.g. issue 1849.\n                     */\n//                      System.out.println(\"Focus changed \" + obj);\n                }\n            }\n        });\n    }\n    private void setApplicationIcon() {\n        final ImageIcon argoImage16x16 =\n            ResourceLoaderWrapper.lookupIconResource(\"ArgoIcon16x16\");\n        \n        // JREs pre 1.6.0 cannot handle multiple images using \n        // setIconImages(), so use reflection to conditionally make the \n        // call to this.setIconImages().\n        // TODO: We can remove all of this reflection code when we go to \n        // Java 1.6 as a minimum JRE version, see issue 4989.\n        if (JavaRuntimeUtility.isJre5()) {\n            // With JRE < 1.6.0, do it the old way using \n            // javax.swing.JFrame.setIconImage, and accept the blurry icon \n            setIconImage(argoImage16x16.getImage());\n        } else {\n            final ImageIcon argoImage32x32 =\n                ResourceLoaderWrapper.lookupIconResource(\"ArgoIcon32x32\");\n            final List<Image> argoImages = new ArrayList<Image>(2);\n            argoImages.add(argoImage16x16.getImage());\n            argoImages.add(argoImage32x32.getImage());\n            try {\n                // java.awt.Window.setIconImages is new in Java 6.\n                // check for it using reflection on current instance\n                final Method m = \n                    getClass().getMethod(\"setIconImages\", List.class);\n                m.invoke(this, argoImages);\n            } catch (InvocationTargetException e) {\n                //#if defined(LOGGING)\n                //@#$LPS-LOGGING:GranularityType:Statement\n                //@#$LPS-LOGGING:Localization:NestedStatement\n                LOG.error(\"Exception\", e);\n                //#endif\n            } catch (NoSuchMethodException e) {\n                //#if defined(LOGGING)\n                //@#$LPS-LOGGING:GranularityType:Statement\n                //@#$LPS-LOGGING:Localization:NestedStatement\n                LOG.error(\"Exception\", e);\n                //#endif\n            } catch (IllegalArgumentException e) {\n                //#if defined(LOGGING)\n                //@#$LPS-LOGGING:GranularityType:Statement\n                //@#$LPS-LOGGING:Localization:NestedStatement\n                LOG.error(\"Exception\", e);\n                //#endif\n            } catch (IllegalAccessException e) {\n                //#if defined(LOGGING)\n                //@#$LPS-LOGGING:GranularityType:Statement\n                //@#$LPS-LOGGING:Localization:NestedStatement\n                LOG.error(\"Exception\", e);\n                //#endif\n            }\n        }\n    }\n    /**\n     * Singleton retrieval method for the projectbrowser.\n     * Do not use this before makeInstance is called!\n     *  \n     * @return the singleton instance of the projectbrowser\n     */\n    public static synchronized ProjectBrowser getInstance() {\n        assert theInstance != null;\n        return theInstance;\n    }\n    /**\n     * Creator method for the ProjectBrowser which optionally allows all\n     * components to be created without making a top level application window\n     * visible.\n     * \n     * @param splash\n     *            true if we are allowed to show a splash screen\n     * @param mainApplication\n     *            true to create a top level application, false if integrated\n     *            with something else.\n     * @param leftBottomPane panel to place in the bottom left corner of the GUI\n     * \n     * @return the singleton instance of the projectbrowser\n     */\n    public static ProjectBrowser makeInstance(SplashScreen splash,\n            boolean mainApplication, JPanel leftBottomPane) {\n        return new ProjectBrowser(\"ArgoUML\", splash, \n                mainApplication, leftBottomPane);\n    }\n    /*\n     * @see java.awt.Component#getLocale()\n     */\n    @Override\n    public Locale getLocale() {\n        return Locale.getDefault();\n    }\n    /**\n     * Creates the panels in the working area.\n     *\n     * @param splash true if we show  the splashscreen during startup\n     * @param leftBottomPane panel to be placed in the bottom left (southwest)\n     *                corner of the UI.\n     */\n    protected void createPanels(SplashScreen splash, JPanel leftBottomPane) {\n        if (splash != null) {\n            splash.getStatusBar().showStatus(\n                Translator.localize(\"statusmsg.bar.making-project-browser\"));\n            splash.getStatusBar().showProgress(10);\n            splash.setVisible(true);\n        }\n        \n        editorPane = new MultiEditorPane();\n        if (splash != null) {\n            splash.getStatusBar().showStatus(\n                    Translator.localize(\n                            \"statusmsg.bar.making-project-browser-explorer\"));\n            splash.getStatusBar().incProgress(5);\n        }\n        explorerPane = new NavigatorPane(splash);\n        // The workarea is all the visible space except the menu,\n        // toolbar and status bar.  Workarea is laid out as a\n        // BorderSplitPane where the various components that make up\n        // the argo application can be positioned.\n        workAreaPane = new BorderSplitPane();\n        // create the todopane\n        if (splash != null) {\n            splash.getStatusBar().showStatus(Translator.localize(\n                    \"statusmsg.bar.making-project-browser-to-do-pane\"));\n            splash.getStatusBar().incProgress(5);\n        }\n        todoPane = leftBottomPane;\n        createDetailsPanes();\n        restorePanelSizes();\n    }\n    private Component assemblePanels() {\n        addPanel(editorPane, Position.Center);\n        addPanel(explorerPane, Position.West);\n        addPanel(todoPane, Position.SouthWest);\n        // There are various details panes all of which could hold\n        // different tabs pages according to users settings.\n        // Place each pane in the required border area.\n        for (Map.Entry<Position, DetailsPane> entry \n                : detailsPanesByCompassPoint.entrySet()) {\n            Position position = entry.getKey();\n            addPanel(entry.getValue(), position);\n        }\n        \n        // Toolbar boundary is the area between the menu and the status\n        // bar. It contains the workarea at centre and the toolbar\n        // position north, south, east or west.\n        final JPanel toolbarBoundary = new JPanel();\n        toolbarBoundary.setLayout(new DockBorderLayout());\n        // TODO: - should save and restore the last positions of the toolbars\n        final String toolbarPosition = BorderLayout.NORTH;\n        toolbarBoundary.add(menuBar.getFileToolbar(), toolbarPosition);\n        toolbarBoundary.add(menuBar.getEditToolbar(), toolbarPosition);\n        toolbarBoundary.add(menuBar.getViewToolbar(), toolbarPosition);\n        toolbarBoundary.add(menuBar.getCreateDiagramToolbar(),\n                        toolbarPosition);\n        toolbarBoundary.add(workAreaPane, BorderLayout.CENTER);\n        /**\n         * Registers all toolbars and enables north panel hiding when all\n         * toolbars are hidden.\n         */\n        ArgoToolbarManager.getInstance().registerToolbar(\n                menuBar.getFileToolbar(), menuBar.getFileToolbar(), 0);\n        ArgoToolbarManager.getInstance().registerToolbar(\n                menuBar.getEditToolbar(), menuBar.getEditToolbar(), 1);\n        ArgoToolbarManager.getInstance().registerToolbar(\n                menuBar.getViewToolbar(), menuBar.getViewToolbar(), 2);\n        ArgoToolbarManager.getInstance().registerToolbar(\n                menuBar.getCreateDiagramToolbar(),\n                menuBar.getCreateDiagramToolbar(), 3);\n        final JToolBar[] toolbars = new JToolBar[] {menuBar.getFileToolbar(),\n                menuBar.getEditToolbar(), menuBar.getViewToolbar(),\n                menuBar.getCreateDiagramToolbar() };\n        for (JToolBar toolbar : toolbars) {\n            toolbar.addComponentListener(new ComponentAdapter() {\n                public void componentHidden(ComponentEvent e) {\n                    boolean allHidden = true;\n                    for (JToolBar bar : toolbars) {\n                        if (bar.isVisible()) {\n                            allHidden = false;\n                            break;\n                        }\n                    }\n                    if (allHidden) {\n                        for (JToolBar bar : toolbars) {\n                            toolbarBoundary.getLayout().removeLayoutComponent(\n                                    bar);\n                        }\n                        toolbarBoundary.getLayout().layoutContainer(\n                                toolbarBoundary);\n                    }\n                }\n                public void componentShown(ComponentEvent e) {\n                    JToolBar oneVisible = null;\n                    for (JToolBar bar : toolbars) {\n                        if (bar.isVisible()) {\n                            oneVisible = bar;\n                            break;\n                        }\n                    }\n                    if (oneVisible != null) {\n                        toolbarBoundary.add(oneVisible, toolbarPosition);\n                        toolbarBoundary.getLayout().layoutContainer(\n                                toolbarBoundary);\n                    }\n                }\n            });\n        }\n        /**\n         * END registering toolbar\n         */\n        return toolbarBoundary;\n    }\n    private void createDetailsPanes() {\n        /*\n         * Work in progress here to allow multiple details panes with different\n         * contents - Bob Tarling\n         */\n        eastPane  =\n            makeDetailsPane(BorderSplitPane.EAST,  Vertical.getInstance());\n        southPane =\n            makeDetailsPane(BorderSplitPane.SOUTH, Horizontal.getInstance());\n        southEastPane =\n            makeDetailsPane(BorderSplitPane.SOUTHEAST,\n                    Horizontal.getInstance());\n        northWestPane =\n            makeDetailsPane(BorderSplitPane.NORTHWEST,\n                    Horizontal.getInstance());\n        northPane =\n            makeDetailsPane(BorderSplitPane.NORTH, Horizontal.getInstance());\n        northEastPane =\n            makeDetailsPane(BorderSplitPane.NORTHEAST,\n                    Horizontal.getInstance());\n        if (southPane != null) {\n            detailsPanesByCompassPoint.put(Position.South, southPane);\n        }\n        if (southEastPane != null) {\n            detailsPanesByCompassPoint.put(Position.SouthEast,\n                    southEastPane);\n        }\n        if (eastPane != null) {\n            detailsPanesByCompassPoint.put(Position.East, eastPane);\n        }\n        if (northWestPane != null) {\n            detailsPanesByCompassPoint.put(Position.NorthWest,\n                    northWestPane);\n        }\n        if (northPane != null) {\n            detailsPanesByCompassPoint.put(Position.North, northPane);\n        }\n        if (northEastPane != null) {\n            detailsPanesByCompassPoint.put(Position.NorthEast,\n                    northEastPane);\n        }\n        // Add target listeners for details panes\n        Iterator it = detailsPanesByCompassPoint.entrySet().iterator();\n        while (it.hasNext()) {\n            TargetManager.getInstance().addTargetListener(\n                    (DetailsPane) ((Map.Entry) it.next()).getValue());\n        }\n    }\n    \n    /**\n     * Add a panel to a split pane area.\n     *\n     * @param comp the panel to add\n     * @param position the position where the panel should be added\n     */\n    public void addPanel(Component comp, Position position) {\n        workAreaPane.add(comp, position.toString());\n    }\n    /**\n     * Remove a panel from a split pane area.\n     *\n     * @param comp the panel to remove\n     */\n    public void removePanel(Component comp) {\n        workAreaPane.remove(comp);\n        workAreaPane.validate();\n        workAreaPane.repaint();\n    }\n    /**\n     * Set the size of each panel to that last saved in the configuration file.\n     */\n    private void restorePanelSizes() {\n        if (northPane != null) {\n            northPane.setPreferredSize(new Dimension(\n                    0, getSavedHeight(Argo.KEY_SCREEN_NORTH_HEIGHT)));\n        }\n        if (southPane != null) {\n            southPane.setPreferredSize(new Dimension(\n                    0, getSavedHeight(Argo.KEY_SCREEN_SOUTH_HEIGHT)));\n        }\n        if (eastPane != null) {\n            eastPane.setPreferredSize(new Dimension(\n                    getSavedWidth(Argo.KEY_SCREEN_EAST_WIDTH), 0));\n        }\n        if (explorerPane != null) {\n            explorerPane.setPreferredSize(new Dimension(\n                    getSavedWidth(Argo.KEY_SCREEN_WEST_WIDTH), 0));\n        }\n        if (northWestPane != null) {\n            northWestPane.setPreferredSize(getSavedDimensions(\n                    Argo.KEY_SCREEN_NORTHWEST_WIDTH,\n                    Argo.KEY_SCREEN_NORTH_HEIGHT));\n        }\n        if (todoPane != null) {\n            todoPane.setPreferredSize(getSavedDimensions(\n                    Argo.KEY_SCREEN_SOUTHWEST_WIDTH,\n                    Argo.KEY_SCREEN_SOUTH_HEIGHT));\n        }\n        if (northEastPane != null) {\n            northEastPane.setPreferredSize(getSavedDimensions(\n                    Argo.KEY_SCREEN_NORTHEAST_WIDTH,\n                    Argo.KEY_SCREEN_NORTH_HEIGHT));\n        }\n        if (southEastPane != null) {\n            southEastPane.setPreferredSize(getSavedDimensions(\n                    Argo.KEY_SCREEN_SOUTHEAST_WIDTH,\n                    Argo.KEY_SCREEN_SOUTH_HEIGHT));\n        }\n    }\n    // Convenience methods to return saved width and height values\n    private Dimension getSavedDimensions(ConfigurationKey width,\n            ConfigurationKey height) {\n        return new Dimension(getSavedWidth(width), getSavedHeight(height));\n    }\n    private int getSavedWidth(ConfigurationKey width) {\n        return Configuration.getInteger(width, DEFAULT_COMPONENTWIDTH);\n    }\n    private int getSavedHeight(ConfigurationKey height) {\n        return Configuration.getInteger(height, DEFAULT_COMPONENTHEIGHT);\n    }\n    \n    /**\n     * Handle the title-bar of the window.\n     * \n     * @author michiel\n     */\n    private class TitleHandler implements PropertyChangeListener {\n        \n        private ArgoDiagram monitoredDiagram = null;\n        /**\n         * Create a title for the main window's title.\n         *\n         * @param projectFileName the project-file name\n         * @param activeDiagram the (new) current diagram\n         */\n        protected void buildTitle(String projectFileName, \n                ArgoDiagram activeDiagram) {\n            if (projectFileName == null || \"\".equals(projectFileName)) {\n                if (ProjectManager.getManager().getCurrentProject() != null) {\n                    projectFileName = ProjectManager.getManager()\n                        .getCurrentProject().getName();\n                }\n            }\n            // TODO: Why would this be null?\n            if (activeDiagram == null) {\n                activeDiagram = DiagramUtils.getActiveDiagram();\n            }\n            String changeIndicator = \"\";\n            if (saveAction != null && saveAction.isEnabled()) {\n                changeIndicator = \" *\";\n            }\n            if (activeDiagram != null) {\n                if (monitoredDiagram != null) {\n                    monitoredDiagram.removePropertyChangeListener(\"name\", this);\n                }\n                activeDiagram.addPropertyChangeListener(\"name\", this);\n                monitoredDiagram = activeDiagram;\n                setTitle(projectFileName + \" - \" + activeDiagram.getName()\n                        + \" - \" + getAppName() + changeIndicator);\n            } else {\n                setTitle(projectFileName + \" - \" + getAppName() \n                        + changeIndicator);\n            }\n        }\n        \n        /*\n         * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)\n         */\n        public void propertyChange(PropertyChangeEvent evt) {\n            if (evt.getPropertyName().equals(\"name\")\n                    && evt.getSource() instanceof ArgoDiagram) {\n                buildTitle(\n                    ProjectManager.getManager().getCurrentProject().getName(), \n                    (ArgoDiagram) evt.getSource());\n            }            \n        }\n    }\n    /**\n     * Set the save indicator (the * after the title) to appear depending on\n     * the current save action enabled status.\n     */\n    public void showSaveIndicator() {\n        titleHandler.buildTitle(null, null);\n    }\n    /**\n     * @return the application name (\"ArgoUML\") as shown in the titlebar\n     */\n    public String getAppName() {\n        return appName;\n    }\n    /**\n     * @param n the application name (\"ArgoUML\") as shown in the titlebar\n     */\n    public void setAppName(String n) {\n        appName = n;\n    }\n    /**\n     * The method used by the NavigatorPane, MultiEditor and DetailsPane\n     * to set the target of the application.<p>\n     *\n     * the target is either a Model Element (usually selected in\n     * the Navigation pane or Properties panel) or a Fig (selected in\n     * a diagram).<p>\n     *\n     * The concept of a selection transaction is used to prevent a change\n     * of target in one view creating a call back to this method, which\n     * would then change the target in all views again...<p>\n     *\n     * @param o the target\n     */\n    private void setTarget(Object o) {\n        TargetManager.getInstance().setTarget(o);\n    }\n    /**\n     * Select the tab page containing the todo item.\n     * \n     * @param o the todo item to select\n     * @deprecated for 0.25.5 by tfmorris. Send an event that the\n     *             DetailsPane/TabToDo will be listening for.\n     */\n    @Deprecated\n    public void setToDoItem(Object o) {\n        Iterator it = detailsPanesByCompassPoint.values().iterator();\n        while (it.hasNext()) {\n            DetailsPane detailsPane = (DetailsPane) it.next();\n            if (detailsPane.setToDoItem(o)) {\n                return;\n            }\n        }\n    }\n    /**\n     * Get the tab page instance of the given class.\n     * \n     * @param tabClass the given class\n     * @return the tabpage\n     * @deprecated by for 0.25.5 by tfmorris. Tabs should register themselves\n     *             with whoever they need to communicate with in a distributed\n     *             fashion rather than relying on a central registry. Currently\n     *             the only place this is used is to communicate between WizStep\n     *             and TabToDo in the Cognitive subsystem.\n     */\n    @Deprecated\n    public AbstractArgoJPanel getTab(Class tabClass) {\n        // In theory there can be multiple details pane (work in\n        // progress). It must first be determined which details\n        // page contains the properties tab. Bob Tarling 7 Dec 2002\n        for (DetailsPane detailsPane : detailsPanesByCompassPoint.values())  {\n            AbstractArgoJPanel tab = detailsPane.getTab(tabClass);\n            if (tab != null) {\n                return tab;\n            }\n        }\n        throw new IllegalStateException(\"No \" + tabClass.getName()\n                                        + \" tab found\");\n    }\n    /**\n     * @return the status bar\n     */\n    public StatusBar getStatusBar() {\n        return statusBar;\n    }\n    /*\n     * @see javax.swing.JFrame#getJMenuBar()\n     */\n    @Override\n    public JMenuBar getJMenuBar() {\n        return menuBar;\n    }\n    /**\n     * @return the editor pane\n     */\n    public MultiEditorPane getEditorPane() {\n        return editorPane;\n    }\n    /**\n     * @return the explorer pane\n     */\n    public NavigatorPane getExplorerPane() {\n        return explorerPane;\n    }\n    \n    /**\n     * @return the details pane\n     */\n    public JPanel getDetailsPane() {\n        return southPane;\n    }\n    /*\n     * @see java.awt.Component#setVisible(boolean)\n     */\n    @Override\n    public void setVisible(boolean b) {\n        super.setVisible(b);\n        if (b) {\n            Globals.setStatusBar(getStatusBar());\n        }\n    }\n    private void updateStatus(String status) {\n        ArgoEventPump.fireEvent(new ArgoStatusEvent(ArgoEventTypes.STATUS_TEXT,\n                this, status));\n    }\n    /**\n     * Save the positions of the screen splitters, sizes and postion\n     * of main window in the properties file.\n     */\n    private void saveScreenConfiguration() {\n        if (explorerPane != null) {\n            Configuration.setInteger(Argo.KEY_SCREEN_WEST_WIDTH,\n                                     explorerPane.getWidth());\n        }\n        if (eastPane != null) {\n            Configuration.setInteger(Argo.KEY_SCREEN_EAST_WIDTH,\n                                     eastPane.getWidth());\n        }\n        if (northPane != null) {\n            Configuration.setInteger(Argo.KEY_SCREEN_NORTH_HEIGHT,\n                                     northPane.getHeight());\n        }\n        if (southPane != null) {\n            Configuration.setInteger(Argo.KEY_SCREEN_SOUTH_HEIGHT,\n                                     southPane.getHeight());\n        }\n        if (todoPane != null) {\n            Configuration.setInteger(Argo.KEY_SCREEN_SOUTHWEST_WIDTH,\n                    todoPane.getWidth());\n        }\n        if (southEastPane != null) {\n            Configuration.setInteger(Argo.KEY_SCREEN_SOUTHEAST_WIDTH,\n                    southEastPane.getWidth());\n        }\n        if (northWestPane != null) {\n            Configuration.setInteger(Argo.KEY_SCREEN_NORTHWEST_WIDTH,\n                    northWestPane.getWidth());\n        }\n        if (northEastPane != null) {\n            Configuration.setInteger(Argo.KEY_SCREEN_NORTHEAST_WIDTH,\n                    northEastPane.getWidth());\n        }\n        boolean maximized = getExtendedState() == MAXIMIZED_BOTH;\n        if (!maximized) {\n            Configuration.setInteger(Argo.KEY_SCREEN_WIDTH, getWidth());\n            Configuration.setInteger(Argo.KEY_SCREEN_HEIGHT, getHeight());\n            Configuration.setInteger(Argo.KEY_SCREEN_LEFT_X, getX());\n            Configuration.setInteger(Argo.KEY_SCREEN_TOP_Y, getY());\n        }\n        Configuration.setBoolean(Argo.KEY_SCREEN_MAXIMIZED, \n                maximized);\n    }\n    /**\n     * Build a new details pane for the given compass point.\n     *\n     * @param compassPoint the position for which to build the pane\n     * @param orientation the required orientation of the pane.\n     * @return the details pane or null if none is required for the given\n     *         compass point.\n     */\n    private DetailsPane makeDetailsPane(String compassPoint,\n                                        Orientation orientation) {\n        DetailsPane detailsPane =\n            new DetailsPane(compassPoint.toLowerCase(), orientation);\n        if (!detailsPane.hasTabs()) {\n            return null;\n        }\n        return detailsPane;\n    }\n    /**\n     * Exit the application if no save is required.\n     * If a save is required then prompt the user if they wish to,\n     * save and exit, exit without saving or cancel the exit operation.\n     */\n    public void tryExit() {\n        if (saveAction != null && saveAction.isEnabled()) {\n            Project p = ProjectManager.getManager().getCurrentProject();\n            String t =\n                MessageFormat.format(Translator.localize(\n                        \"optionpane.exit-save-changes-to\"),\n                    new Object[] {p.getName()});\n            int response =\n                JOptionPane.showConfirmDialog(\n                    this, t, t, JOptionPane.YES_NO_CANCEL_OPTION);\n            if (response == JOptionPane.CANCEL_OPTION\n                    || response == JOptionPane.CLOSED_OPTION) {\n                return;\n            }\n            if (response == JOptionPane.YES_OPTION) {\n                trySave(ProjectManager.getManager().getCurrentProject() != null\n                        && ProjectManager.getManager().getCurrentProject()\n                                .getURI() != null);\n                if (saveAction.isEnabled()) {\n                    return;\n                }\n            }\n        }\n        saveScreenConfiguration();\n        Configuration.save();\n        System.exit(0);\n    }\n    /*\n     * @see java.awt.Window#dispose()\n     */\n    public void dispose() {\n    }\n    /**\n     * Receives window events.\n     */\n    class WindowCloser extends WindowAdapter {\n        /**\n         * Constructor.\n         */\n        public WindowCloser() {\n        }\n        /*\n         * @see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)\n         */\n        public void windowClosing(WindowEvent e) {\n            tryExit();\n        }\n    } /* end class WindowCloser */\n    /*\n     * @see java.beans.PropertyChangeListener#propertyChange(\n     *         java.beans.PropertyChangeEvent)\n     */\n    public void propertyChange(PropertyChangeEvent evt) {\n        // the project changed\n        if (evt.getPropertyName()\n            .equals(ProjectManager.CURRENT_PROJECT_PROPERTY_NAME)) {\n            Project p = (Project) evt.getNewValue();\n            if (p != null) {\n                titleHandler.buildTitle(p.getName(), null);\n                //Designer.TheDesigner.getToDoList().removeAllElements();\n                //#if defined(COGNITIVE)\n                //@#$LPS-COGNITIVE:GranularityType:Statement\n                //@#$LPS-COGNITIVE:Localization:NestedStatement\n                Designer.setCritiquingRoot(p);\n                //#endif\n                // update all panes\n                TargetManager.getInstance().setTarget(p.getInitialTarget());\n            }\n            // TODO: Do we want to use the Project here instead of just its name?\n            ArgoEventPump.fireEvent(new ArgoStatusEvent(\n                    ArgoEventTypes.STATUS_PROJECT_LOADED, this, p.getName()));\n        }\n    }\n    /////////////////////////////////////////////////////////////////////////\n    // TargetListener methods implemented so notified when selected\n    // diagram changes. Used to update the window title.\n    /*\n     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)\n     */\n    public void targetAdded(TargetEvent e) {\n    \ttargetChanged(e.getNewTarget());\n    }\n    /*\n     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)\n     */\n    public void targetRemoved(TargetEvent e) {\n    \ttargetChanged(e.getNewTarget());\n    }\n    /*\n     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)\n     */\n    public void targetSet(TargetEvent e) {\n    \ttargetChanged(e.getNewTarget());\n    }\n    \n    /**\n     * Called to update the current namespace and active diagram after\n     * the target has changed.\n     *\n     * @param target the new target\n     */\n    private void targetChanged(Object target) {\n        if (target instanceof ArgoDiagram) {\n            titleHandler.buildTitle(null, (ArgoDiagram) target);\n        }\n        determineRemoveEnabled();\n        \n        Project p = ProjectManager.getManager().getCurrentProject();\n        \n        Object theCurrentNamespace = null;\n        target = TargetManager.getInstance().getTarget();\n        if (target instanceof ArgoDiagram) {\n            theCurrentNamespace = ((ArgoDiagram) target).getNamespace();\n        } else if (Model.getFacade().isANamespace(target)) {\n            theCurrentNamespace = target;\n        } else if (Model.getFacade().isAModelElement(target)) {\n            theCurrentNamespace = Model.getFacade().getNamespace(target);\n        } else {\n            theCurrentNamespace = p.getRoot();\n        }\n        p.setCurrentNamespace(theCurrentNamespace);\n        if (target instanceof ArgoDiagram) {\n            p.setActiveDiagram((ArgoDiagram) target);\n        }\n    }\n    /**\n     * Enabled the remove action if an item is selected in anything other then\n     * the activity or state diagrams.\n     */\n    private void determineRemoveEnabled() {\n        Editor editor = Globals.curEditor();\n        Collection figs = editor.getSelectionManager().getFigs();\n        boolean removeEnabled = !figs.isEmpty();\n        GraphModel gm = editor.getGraphModel();\n        if (gm instanceof UMLMutableGraphSupport) {\n            removeEnabled =\n                ((UMLMutableGraphSupport) gm).isRemoveFromDiagramAllowed(figs);\n        }\n        removeFromDiagram.setEnabled(removeEnabled);\n    }\n    /**\n     * Returns the todopane.\n     * @return ToDoPane\n     */\n    public JPanel getTodoPane() {\n        return todoPane;\n    }\n    /**\n     * @return Returns the defaultFont.\n     */\n    public Font getDefaultFont() {\n        return defaultFont;\n    }\n    \n    /**\n     * Try to save the project, possibly not creating a new file\n     * @param overwrite if true, then we overwrite without asking\n     */\n    public void trySave(boolean overwrite) {\n        this.trySave(overwrite, false);\n    }\n    \n    /**\n     * Try to save the project.\n     * @param overwrite if true, then we overwrite without asking\n     * @param saveNewFile if true, we'll ask for a new file even if\n     *                    the current project already had one  \n     */        \n    public void trySave(boolean overwrite, boolean saveNewFile) {\n        URI uri = ProjectManager.getManager().getCurrentProject().getURI();\n        File file = null;\n        // this method is invoked from several places, so we have to check\n        // whether if the project uri is set or not\n        if (uri != null && !saveNewFile) {\n            file = new File(uri);\n            // does the file really exists?\n            if (!file.exists()) {\n                // project file doesn't exist. let's pop up a message dialog..\n                int response = JOptionPane.showConfirmDialog(\n                        this,\n                        Translator.localize(\n                                \"optionpane.save-project-file-not-found\"),\n                        Translator.localize(\n                                \"optionpane.save-project-file-not-found-title\"),\n                        JOptionPane.YES_NO_OPTION);\n                // ..and let's ask the user whether he wants to save the actual\n                // project into a new file or not\n                if (response == JOptionPane.YES_OPTION) {\n                    saveNewFile = true;\n                } else {\n                    // save action has been cancelled\n                    return;\n                }\n            }\n        } else {\n            // Attempt to save this project under a new name.\n            saveNewFile = true;\n        }\n        // Prompt the user for the new name.\n        if (saveNewFile) {\n            file = getNewFile();\n            // if the user cancelled the operation,\n            // we don't have to save anything\n            if (file == null) {\n                return;\n            }\n        }\n        // let's call the real save method\n        trySaveWithProgressMonitor(overwrite, file);\n    }\n    \n    /**\n     * Checks if the given file is writable or read-only\n     * @param file the file to be checked\n     * @return true if the given file is read-only\n     */\n    private boolean isFileReadonly(File file) {\n        try {\n            return (file == null) \n                || (file.exists() && !file.canWrite()) \n                || (!file.exists() && !file.createNewFile());\n        \n        } catch (IOException ioExc) {\n            return true;\n        }\n    }\n    \n    /**\n     * Loads a project displaying a nice ProgressMonitor\n     * \n     * @param overwrite if true, the file is going to be overwritten\n     * @param file      the target file\n     * \n     * TODO: Separate this into a Swing specific class - tfm\n     */\n    public void trySaveWithProgressMonitor(boolean overwrite, File file) {\n        SaveSwingWorker worker = new SaveSwingWorker(overwrite, file);\n        Thread.currentThread().setPriority(Thread.MAX_PRIORITY);\n        worker.start();\n    }\n    \n    /**\n     * Rebuild the title using the name of the current project.\n     *\n     */\n    public void buildTitleWithCurrentProjectName() {\n        titleHandler.buildTitle(\n                ProjectManager.getManager().getCurrentProject().getName(), \n                null);\n    }\n    \n    /**\n     * Try to save the project.\n     * @param overwrite if true, then we overwrite without asking\n     * @param file the File to save to\n     * @param pmw       the ProgressMonitor to be updated;  \n     * @return true if successful\n     * \n     * TODO: Separate this into a Swing specific class - tfm\n     */\n    public boolean trySave(boolean overwrite, \n            File file, \n            ProgressMonitor pmw) {\n        //#if defined(LOGGING)\n        //@#$LPS-LOGGING:GranularityType:Statement\n        //@#$LPS-LOGGING:Localization:StartMethod\n        LOG.info(\"Saving the project\");\n        //#endif\n        Project project = ProjectManager.getManager().getCurrentProject();\n        PersistenceManager pm = PersistenceManager.